   596 instructions before optimizations.
    38 instructions eliminated by Temp Variables Elimination.
    80 instructions eliminated by Dead Code Elimination (6 iterations).
     7 instructions eliminated by Jump Normalization (4 iterations).
    41 instructions eliminated by Jump Optimization (4 iterations).
    31 instructions eliminated by Single Step Elimination (3 passes, 7 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     2 instructions eliminated by If Expression Optimization (3 iterations).
     6 instructions eliminated by Data Flow Optimization (4 passes, 17 iterations).
    16 instructions added by Loop Optimization (3 iterations).
     9 loops improved by Loop Optimization.
     5 instructions eliminated by Jump Straightening (4 iterations).
     8 instructions updated by JumpThreading.
     3 instructions eliminated by Unreachable Code Elimination.
    34 instructions eliminated by Print Merging.
   365 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 599):
  * Replicate loop condition at line 44:1                        cost     1, benefit       25.0, efficiency       25.0 (+1 instructions)
    Replicate loop condition at line 52:1                        cost     1, benefit       25.0, efficiency       25.0
    Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3
    Replicate loop condition at line 131:1                       cost     3, benefit       25.0, efficiency        8.3
    Replicate loop condition at line 306:1                       cost     1, benefit       25.0, efficiency       25.0
    Replicate loop condition at line 316:5                       cost     1, benefit       12.5, efficiency       12.5

Pass 1: speed optimization selection (cost limit 598):
  * Replicate loop condition at line 52:1                        cost     1, benefit       25.0, efficiency       25.0 (+1 instructions)
    Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3
    Replicate loop condition at line 131:1                       cost     3, benefit       25.0, efficiency        8.3
    Replicate loop condition at line 306:1                       cost     1, benefit       25.0, efficiency       25.0
    Replicate loop condition at line 316:5                       cost     1, benefit       12.5, efficiency       12.5

Pass 1: speed optimization selection (cost limit 597):
    Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3
    Replicate loop condition at line 131:1                       cost     3, benefit       25.0, efficiency        8.3
  * Replicate loop condition at line 306:1                       cost     1, benefit       25.0, efficiency       25.0 (+0 instructions)
    Replicate loop condition at line 316:5                       cost     1, benefit       12.5, efficiency       12.5

Pass 1: speed optimization selection (cost limit 597):
    Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3
    Replicate loop condition at line 131:1                       cost     3, benefit       25.0, efficiency        8.3
  * Replicate loop condition at line 316:5                       cost     1, benefit       12.5, efficiency       12.5 (+1 instructions)

Pass 1: speed optimization selection (cost limit 596):
    Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3
  * Replicate loop condition at line 131:1                       cost     3, benefit       25.0, efficiency        8.3 (+3 instructions)

Pass 1: speed optimization selection (cost limit 593):
  * Replicate loop condition at line 103:5                       cost     4, benefit       12.5, efficiency        3.1 (+4 instructions)
    Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3

Pass 1: speed optimization selection (cost limit 589):
  * Replicate loop condition at line 112:9                       cost     5, benefit        6.3, efficiency        1.3 (+5 instructions)
C:\Home\golem\unit-transport\unit-transport-single.mnd:96:49 Variable 'CORE_X' is not initialized.
C:\Home\golem\unit-transport\unit-transport-single.mnd:96:61 Variable 'CORE_Y' is not initialized.
C:\Home\golem\unit-transport\unit-transport-single.mnd:229:13 Variable 'MSG' is not initialized.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-48 instructions):
 
    34 set *tmp8 @unit
    35 set :rebindUnit.0:first_unit *tmp8
    36 jump *label9 always
-    * set *tmp7 null
    37 jump *label11 always
    38 label *label10
-    * set *tmp7 null
    39 label *label11
    40 print "[salmon]No unit of type "
    41 print UNIT
 
    50 op equal *tmp10 *tmp9 @this
    51 jump *label15 equal *tmp10 false
    52 jump *label6 always
-    * set *tmp11 null
    53 jump *label16 always
    54 label *label15
-    * set *tmp11 null
    55 label *label16
    56 ubind UNIT
    57 print "[gold]Looking for old unit..."
 
    72 print UNIT
    73 print " "
    74 print "found."
-    * set *tmp17 null
    75 jump *label22 always
    76 label *label21
    77 sensor *tmp18 @unit @controlled
 
    87 jump *label17 always
    88 set *tmp20 null
    89 label *label24
-    * set *tmp17 *tmp20
    90 label *label22
    91 printflush message1
    92 label *label19
 
   121 jump *label31 equal *tmp29 false
   122 set .DROP_TARGET .CONTAINER
   123 set .CONTAINER :block
-    * set *tmp30 .CONTAINER
   124 jump *label32 always
   125 label *label31
-    * set *tmp30 null
   126 label *label32
   127 label *label29
   128 jump *label28 always
 
   131 jump *label33 equal *tmp31 false
   132 print "[salmon]No destination."
   133 print "\n"
-    * set *tmp32 "[salmon]No destination."
   134 jump *label34 always
   135 label *label33
   136 op notEqual *tmp33 .DROP_TARGET null
 
   153 jump *label27 always
   154 set *tmp37 null
   155 label *label36
-    * set *tmp32 *tmp37
   156 label *label34
   157 printflush message1
   158 label *label26
 
   165 printflush message1
   166 ulocate building core false @copper .CORE_X .CORE_Y *tmp41 *tmp40
   167 set .CORE *tmp40
-    * set *tmp39 .CORE
   168 jump *label38 always
   169 label *label37
   170 print "[gold]Locating vault #"
 
   222 label *label42
   223 set *tmp49 null
   224 label *label43
-    * set *tmp39 *tmp49
   225 label *label38
   226 op equal *tmp62 .CORE null
   227 jump *label49 equal *tmp62 false
   228 end
-    * set *tmp63 null
   229 jump *label50 always
   230 label *label49
-    * set *tmp63 null
   231 label *label50
   232 set .SORTER sorter1
   233 sensor *tmp64 .SORTER @type
 
   243 jump *label54 equal *tmp68 false
   244 print "Block found: "
   245 print .SORTER
-    * set *tmp69 .SORTER
   246 jump *label55 always
   247 label *label54
-    * set *tmp69 null
   248 label *label55
   249 printflush message1
   250 set .SORTER sorter1
 
   279 set *tmp81 "[] from vault #"
   280 label *label59
   281 set .DIRECTION *tmp81
-    * set *tmp72 .DIRECTION
   282 jump *label57 always
   283 label *label56
   284 op greaterThan *tmp82 LINK_ID 0
 
   309 set *tmp94 "[] to vault #"
   310 label *label61
   311 set .DIRECTION *tmp94
-    * set *tmp72 .DIRECTION
   312 label *label57
   313 op equal *tmp95 LINK_ID 0
   314 jump *label62 equal *tmp95 false
 
   331 set .DROP_TARGET .CORE
   332 set .DROP_X .CORE_X
   333 set .DROP_Y .CORE_Y
-    * set *tmp102 .DROP_Y
   334 jump *label65 always
   335 label *label64
   336 sensor *tmp103 .DROP_TARGET @x
   337 set .DROP_X *tmp103
   338 sensor *tmp104 .DROP_TARGET @y
   339 set .DROP_Y *tmp104
-    * set *tmp102 .DROP_Y
   340 label *label65
   341 set .LAST_ITEM @mono
   342 set :iter 0
 
   362 print UNIT
   363 print " "
   364 print "found."
-    * set *tmp113 null
   365 jump *label76 always
   366 label *label75
   367 sensor *tmp114 @unit @controlled
 
   377 jump *label71 always
   378 set *tmp116 null
   379 label *label78
-    * set *tmp113 *tmp116
   380 label *label76
   381 printflush message1
   382 label *label73
 
   385 label *label71
   386 ucontrol flag 1
   387 set :state 1
-    * set *tmp111 :state
   388 jump *label70 always
   389 label *label69
-    * set *tmp111 null
   390 label *label70
   391 sensor *tmp117 .SORTER @config
   392 set .ITEM *tmp117
 
   404 label *label83
   405 set .LAST_ITEM .ITEM
   406 set :state 1
-    * set *tmp119 :state
   407 jump *label80 always
   408 label *label79
-    * set *tmp119 null
   409 label *label80
   410 set :show_state 0
   411 op equal *tmp122 :state 1
 
   438 label *label89
   439 set *tmp126 *tmp129
   440 label *label87
-    * set *tmp123 *tmp126
   441 jump *label85 always
   442 label *label84
-    * set *tmp123 null
   443 label *label85
   444 op equal *tmp132 :state 2
   445 jump *label92 equal *tmp132 false
 
   468 set :show_state 2
   469 set *tmp135 :show_state
   470 label *label95
-    * set *tmp133 *tmp135
   471 jump *label93 always
   472 label *label92
-    * set *tmp133 null
   473 label *label93
   474 op equal *tmp142 :state 3
   475 jump *label98 equal *tmp142 false
 
   499 set :show_state 3
   500 set *tmp145 :show_state
   501 label *label101
-    * set *tmp143 *tmp145
   502 jump *label99 always
   503 label *label98
-    * set *tmp143 null
   504 label *label99
   505 jump *label104 equal true false
   506 set :iter 0
 
   521 print .LOCAL_MARGIN
   522 print "["
   523 print "])"
-    * set *tmp155 null
   524 jump *label107 always
   525 label *label106
-    * set *tmp155 null
   526 label *label107
   527 jump *label108 equal .SHOW_REMOTE_LEVEL false
   528 sensor *tmp157 .CORE .ITEM
 
   542 label *label110
   543 set *tmp159 null
   544 label *label111
-    * set *tmp156 *tmp159
   545 jump *label109 always
   546 label *label108
-    * set *tmp156 null
   547 label *label109
   548 sensor *tmp160 @unit @totalItems
   549 print .MSG
 
   589 label *label117
   590 set *tmp163 *tmp172
   591 label *label115
-    * set *tmp161 *tmp163
   592 jump *label113 always
   593 label *label112
-    * set *tmp161 null
   594 label *label113
   595 op floor *tmp180 :loop_time
   596 print "[lightgray]Loop time: "
 
   602 op equal *tmp182 *tmp181 0
   603 jump *label118 equal *tmp182 false
   604 jump *label68 always
-    * set *tmp183 null
   605 jump *label119 always
   606 label *label118
-    * set *tmp183 null
   607 label *label119
   608 sensor *tmp184 .SRC @dead
   609 op notEqual *tmp185 *tmp184 0
   610 jump *label120 equal *tmp185 false
   611 jump *label68 always
-    * set *tmp186 null
   612 jump *label121 always
   613 label *label120
-    * set *tmp186 null
   614 label *label121
   615 sensor *tmp187 .DST @dead
   616 op notEqual *tmp188 *tmp187 0
   617 jump *label122 equal *tmp188 false
   618 jump *label68 always
-    * set *tmp189 null
   619 jump *label123 always
   620 label *label122
-    * set *tmp189 null
   621 label *label123
   622 sensor *tmp190 .SORTER @dead
   623 op notEqual *tmp191 *tmp190 0
 
   628 label *label124
   629 set *tmp192 null
   630 label *label125
-    * set *tmp152 *tmp192
   631 jump *label105 always
   632 label *label104
   633 op add :iter :iter 1
-    * set *tmp152 :iter
   634 label *label105
   635 op sub *tmp193 @time :start
   636 set :loop_time *tmp193
 
   671 label *label132
   672 jump *label131 always
   673 label *label133
-    * set *tmp201 null
   674 jump *label130 always
   675 label *label129
-    * set *tmp201 null
   676 label *label130
   677 end

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-20 instructions):
 
    81 print UNIT
    82 print "."
    83 print ".."
-    * set *tmp20 null
    84 jump *label24 always
    85 label *label23
    86 jump *label17 always
-    * set *tmp20 null
    87 label *label24
    88 label *label22
    89 printflush message1
 
   145 print "\"
   146 print "n"
   147 print "[salmon]Item dump must be a container or a vault!"
-    * set *tmp37 null
   148 jump *label36 always
   149 label *label35
   150 jump *label27 always
-    * set *tmp37 null
   151 label *label36
   152 label *label34
   153 printflush message1
 
   213 label *label47
   214 set *tmp61 null
   215 label *label48
-    * set *tmp49 *tmp61
   216 jump *label43 always
   217 label *label42
-    * set *tmp49 null
   218 label *label43
   219 label *label38
   220 op equal *tmp62 .CORE null
 
   365 print UNIT
   366 print "."
   367 print ".."
-    * set *tmp116 null
   368 jump *label78 always
   369 label *label77
   370 jump *label71 always
-    * set *tmp116 null
   371 label *label78
   372 label *label76
   373 printflush message1
 
   406 op equal *tmp125 *tmp124 .ITEM
   407 jump *label86 equal *tmp125 false
   408 set :state 3
-    * set *tmp126 :state
   409 jump *label87 always
   410 label *label86
   411 sensor *tmp127 @unit @totalItems
 
   427 label *label91
   428 set *tmp129 *tmp131
   429 label *label89
-    * set *tmp126 *tmp129
   430 label *label87
   431 jump *label85 always
   432 label *label84
 
   450 set .MSG "\nLoading items: [green]"
   451 set *tmp141 .MSG
   452 label *label97
-    * set *tmp135 *tmp141
   453 jump *label95 always
   454 label *label94
   455 ucontrol approach .SRC_X .SRC_Y 6
   456 set .MSG "\nGoing to source: [green]"
   457 set :show_state 2
-    * set *tmp135 :show_state
   458 label *label95
   459 jump *label93 always
   460 label *label92
 
   479 set .MSG "\nDropping items: [green]"
   480 set *tmp151 .MSG
   481 label *label103
-    * set *tmp145 *tmp151
   482 jump *label101 always
   483 label *label100
   484 ucontrol approach .DST_X .DST_Y 6
   485 set .MSG "\nGoing to destination: [green]"
   486 set :show_state 3
-    * set *tmp145 :show_state
   487 label *label101
   488 jump *label99 always
   489 label *label98
 
   523 print .REMOTE_MARGIN
   524 print "["
   525 print "])"
-    * set *tmp159 null
   526 jump *label111 always
   527 label *label110
-    * set *tmp159 null
   528 label *label111
   529 jump *label109 always
   530 label *label108
 
   549 print " "
   550 print "sec[]"
   551 print "\n"
-    * set *tmp163 null
   552 jump *label115 always
   553 label *label114
   554 op equal *tmp171 :show_state 3
 
   570 label *label116
   571 set *tmp172 null
   572 label *label117
-    * set *tmp163 *tmp172
   573 label *label115
   574 jump *label113 always
   575 label *label112
 
   605 op notEqual *tmp191 *tmp190 0
   606 jump *label124 equal *tmp191 false
   607 jump *label68 always
-    * set *tmp192 null
   608 jump *label125 always
   609 label *label124
-    * set *tmp192 null
   610 label *label125
   611 jump *label105 always
   612 label *label104

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-10 instructions):
 
   208 op notEqual *tmp60 :b_type @vault
   209 jump *label47 equal *tmp60 false
   210 set .CORE null
-    * set *tmp61 .CORE
   211 jump *label48 always
   212 label *label47
-    * set *tmp61 null
   213 label *label48
   214 jump *label43 always
   215 label *label42
 
   410 op equal *tmp128 *tmp127 0
   411 jump *label88 equal *tmp128 false
   412 set :state 2
-    * set *tmp129 :state
   413 jump *label89 always
   414 label *label88
   415 set .MSG "\nUnloading previous items: [green]"
 
   422 label *label90
   423 set *tmp131 null
   424 label *label91
-    * set *tmp129 *tmp131
   425 label *label89
   426 label *label87
   427 jump *label85 always
 
   440 op greaterThanEq *tmp140 *tmp139 .UNIT_CAPACITY
   441 jump *label96 equal *tmp140 false
   442 set :state 3
-    * set *tmp141 :state
   443 jump *label97 always
   444 label *label96
   445 set .MSG "\nLoading items: [green]"
-    * set *tmp141 .MSG
   446 label *label97
   447 jump *label95 always
   448 label *label94
 
   467 jump *label102 equal *tmp150 false
   468 set :state 2
   469 ucontrol approach .SRC_X .SRC_Y 6
-    * set *tmp151 null
   470 jump *label103 always
   471 label *label102
   472 set .MSG "\nDropping items: [green]"
-    * set *tmp151 .MSG
   473 label *label103
   474 jump *label101 always
   475 label *label100
 
   557 print " "
   558 print "sec[]"
   559 print "\n"
-    * set *tmp172 null
   560 jump *label117 always
   561 label *label116
-    * set *tmp172 null
   562 label *label117
   563 label *label115
   564 jump *label113 always

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   417 ucontrol within .DROP_X .DROP_Y 8 *tmp130
   418 jump *label90 equal *tmp130 false
   419 ucontrol itemDrop .DROP_TARGET .UNIT_CAPACITY
-    * set *tmp131 null
   420 jump *label91 always
   421 label *label90
-    * set *tmp131 null
   422 label *label91
   423 label *label89
   424 label *label87

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-38 instructions):
 
     5 set LOCAL_LIMIT 100
     6 remark "How much of remote container capacity to use, in percents (20-100)."
     7 set REMOTE_LIMIT 100
-    * op max *tmp0 LOCAL_LIMIT 20
-    * set .EFF_LOCAL_LIMIT *tmp0
-    * op max *tmp1 REMOTE_LIMIT 20
-    * set .EFF_REMOTE_LIMIT *tmp1
+    8 op max .EFF_LOCAL_LIMIT LOCAL_LIMIT 20
+    9 op max .EFF_REMOTE_LIMIT REMOTE_LIMIT 20
    10 label *label0
    11 sensor *tmp2 switch1 @enabled
    12 op equal *tmp3 *tmp2 false
 
    29 ubind UNIT
    30 op notEqual *tmp6 @unit null
    31 jump *label10 equal *tmp6 false
-    * set *tmp8 @unit
-    * set :rebindUnit.0:first_unit *tmp8
+   32 set :rebindUnit.0:first_unit @unit
    33 jump *label9 always
    34 jump *label11 always
    35 label *label10
 
    92 label *label4
    93 jump *label3 always
    94 label *label5
-    * sensor *tmp21 @unit @itemCapacity
-    * set .UNIT_CAPACITY *tmp21
+   95 sensor .UNIT_CAPACITY @unit @itemCapacity
    96 sensor *tmp22 @unit @speed
-    * op div *tmp23 *tmp22 10
-    * set .SPEED_SEC *tmp23
+   97 op div .SPEED_SEC *tmp22 10
    98 ucontrol flag 1
    99 label *label25
   100 jump *label27 equal true false
   101 set .CONTAINER null
   102 set .DROP_TARGET null
-    * set *tmp24 @links
-    * set :n *tmp24
+  103 set :n @links
   104 label *label28
   105 op greaterThan *tmp25 :n 0
   106 jump *label30 equal *tmp25 false
-    * op sub *tmp26 :n 1
-    * set :n *tmp26
-    * getlink *tmp27 :n
-    * set :block *tmp27
+  107 op sub :n :n 1
+  108 getlink :block :n
   109 sensor *tmp28 :block @itemCapacity
   110 op greaterThan *tmp29 *tmp28 0
   111 jump *label31 equal *tmp29 false
 
   151 jump *label37 equal *tmp38 false
   152 print "[gold]Locating core..."
   153 printflush message1
-    * ulocate building core false @copper .CORE_X .CORE_Y *tmp41 *tmp40
-    * set .CORE *tmp40
+  154 ulocate building core false @copper .CORE_X .CORE_Y 0 .CORE
   155 jump *label38 always
   156 label *label37
   157 print "[gold]Locating vault #"
 
   159 print "."
   160 print ".."
   161 printflush message1
-    * op add *tmp42 99999900 LINK_ID
-    * set .QUERY_FLAG *tmp42
+  162 op add .QUERY_FLAG 99999900 LINK_ID
   163 set :flag .QUERY_FLAG
   164 ucontrol flag :flag
   165 label *label39
 
   169 op land *tmp46 *tmp43 *tmp45
   170 jump *label41 equal *tmp46 false
   171 ucontrol stop
-    * sensor *tmp47 @unit @flag
-    * set :flag *tmp47
+  172 sensor :flag @unit @flag
   173 label *label40
   174 jump *label39 always
   175 label *label41
   176 op notEqual *tmp48 :flag .QUERY_FLAG
   177 jump *label42 equal *tmp48 false
-    * op idiv *tmp50 :flag 100
-    * set :position *tmp50
-    * op mod *tmp51 :position @mapw
-    * set .CORE_X *tmp51
-    * op idiv *tmp52 :position @mapw
-    * set .CORE_Y *tmp52
+  178 op idiv :position :flag 100
+  179 op mod .CORE_X :position @mapw
+  180 op idiv .CORE_Y :position @mapw
   181 label *label44
   182 ucontrol within .CORE_X .CORE_Y 8 *tmp53
   183 op equal *tmp54 *tmp53 false
 
   189 label *label45
   190 jump *label44 always
   191 label *label46
-    * ucontrol getBlock .CORE_X .CORE_Y :b_type *tmp58 *tmp59
-    * set .CORE *tmp58
+  192 ucontrol getBlock .CORE_X .CORE_Y :b_type .CORE 0
   193 op notEqual *tmp60 :b_type @vault
   194 jump *label47 equal *tmp60 false
   195 set .CORE null
 
   207 label *label49
   208 label *label50
   209 set .SORTER sorter1
-    * sensor *tmp64 .SORTER @type
-    * set :sorter_type *tmp64
+  210 sensor :sorter_type .SORTER @type
   211 label *label51
   212 op notEqual *tmp65 :sorter_type @sorter
   213 op notEqual *tmp66 :sorter_type @inverted-sorter
 
   224 label *label55
   225 printflush message1
   226 set .SORTER sorter1
-    * sensor *tmp70 .SORTER @type
-    * set :sorter_type *tmp70
+  227 sensor :sorter_type .SORTER @type
   228 label *label52
   229 jump *label51 always
   230 label *label53
 
   233 set .SHOW_REMOTE_LEVEL true
   234 set .SRC .CORE
   235 set .DST .CONTAINER
-    * sensor *tmp73 .SRC @itemCapacity
-    * set :src_capacity *tmp73
-    * sensor *tmp74 .DST @itemCapacity
-    * set :dst_capacity *tmp74
+  236 sensor :src_capacity .SRC @itemCapacity
+  237 sensor :dst_capacity .DST @itemCapacity
   238 op sub *tmp75 100 .EFF_REMOTE_LIMIT
   239 op mul *tmp76 :src_capacity *tmp75
-    * op idiv *tmp77 *tmp76 100
-    * set .LOAD_LEVEL *tmp77
+  240 op idiv .LOAD_LEVEL *tmp76 100
   241 op mul *tmp78 :dst_capacity .EFF_LOCAL_LIMIT
-    * op idiv *tmp79 *tmp78 100
-    * set .DROP_LEVEL *tmp79
+  242 op idiv .DROP_LEVEL *tmp78 100
   243 set .LOCAL_MARGIN .DROP_LEVEL
   244 set .REMOTE_MARGIN .LOAD_LEVEL
   245 op equal *tmp80 LINK_ID 0
 
   252 set .DIRECTION *tmp81
   253 jump *label57 always
   254 label *label56
-    * op greaterThan *tmp82 LINK_ID 0
-    * set .SHOW_REMOTE_LEVEL *tmp82
+  255 op greaterThan .SHOW_REMOTE_LEVEL LINK_ID 0
   256 set .SRC .CONTAINER
   257 set .DST .CORE
-    * sensor *tmp83 .SRC @itemCapacity
-    * set :src_capacity *tmp83
-    * sensor *tmp84 .DST @itemCapacity
-    * set :dst_capacity *tmp84
+  258 sensor :src_capacity .SRC @itemCapacity
+  259 sensor :dst_capacity .DST @itemCapacity
   260 op sub *tmp85 100 .EFF_LOCAL_LIMIT
   261 op mul *tmp86 :src_capacity *tmp85
-    * op idiv *tmp87 *tmp86 100
-    * set .LOAD_LEVEL *tmp87
+  262 op idiv .LOAD_LEVEL *tmp86 100
   263 op mul *tmp88 :dst_capacity .EFF_REMOTE_LIMIT
   264 op idiv *tmp89 *tmp88 100
   265 op equal *tmp90 LINK_ID 0
   266 op mul *tmp91 *tmp90 .UNIT_CAPACITY
-    * op add *tmp92 *tmp89 *tmp91
-    * set .DROP_LEVEL *tmp92
+  267 op add .DROP_LEVEL *tmp89 *tmp91
   268 set .LOCAL_MARGIN .LOAD_LEVEL
   269 set .REMOTE_MARGIN .DROP_LEVEL
   270 op equal *tmp93 LINK_ID 0
 
   284 set *tmp96 LINK_ID
   285 label *label63
   286 set .LINK_TXT *tmp96
-    * sensor *tmp97 .SRC @x
-    * set .SRC_X *tmp97
-    * sensor *tmp98 .SRC @y
-    * set .SRC_Y *tmp98
-    * sensor *tmp99 .DST @x
-    * set .DST_X *tmp99
-    * sensor *tmp100 .DST @y
-    * set .DST_Y *tmp100
+  287 sensor .SRC_X .SRC @x
+  288 sensor .SRC_Y .SRC @y
+  289 sensor .DST_X .DST @x
+  290 sensor .DST_Y .DST @y
   291 op equal *tmp101 .DROP_TARGET null
   292 jump *label64 equal *tmp101 false
   293 set .DROP_TARGET .CORE
 
   295 set .DROP_Y .CORE_Y
   296 jump *label65 always
   297 label *label64
-    * sensor *tmp103 .DROP_TARGET @x
-    * set .DROP_X *tmp103
-    * sensor *tmp104 .DROP_TARGET @y
-    * set .DROP_Y *tmp104
+  298 sensor .DROP_X .DROP_TARGET @x
+  299 sensor .DROP_Y .DROP_TARGET @y
   300 label *label65
   301 set .LAST_ITEM @mono
   302 set :iter 0
 
   305 ucontrol stop
   306 label *label66
   307 jump *label68 equal true false
-    * set *tmp105 @time
-    * set :start *tmp105
+  308 set :start @time
   309 sensor *tmp106 @unit @dead
   310 op equal *tmp107 *tmp106 0
   311 sensor *tmp108 @unit @controller
 
   345 jump *label70 always
   346 label *label69
   347 label *label70
-    * sensor *tmp117 .SORTER @config
-    * set .ITEM *tmp117
+  348 sensor .ITEM .SORTER @config
   349 op notEqual *tmp118 .ITEM .LAST_ITEM
   350 jump *label79 equal *tmp118 false
   351 label *label81
 
   353 jump *label83 equal *tmp120 false
   354 print "[salmon]No item type selected for transport."
   355 printflush message1
-    * sensor *tmp121 .SORTER @config
-    * set .ITEM *tmp121
+  356 sensor .ITEM .SORTER @config
   357 label *label82
   358 jump *label81 always
   359 label *label83
 
   396 jump *label94 equal *tmp134 false
   397 sensor *tmp136 .SRC .ITEM
   398 op sub *tmp137 *tmp136 .LOAD_LEVEL
-    * op max *tmp138 *tmp137 0
-    * set :max_load *tmp138
+  399 op max :max_load *tmp137 0
   400 ucontrol itemTake .SRC .ITEM :max_load
   401 sensor *tmp139 @unit @totalItems
   402 op greaterThanEq *tmp140 *tmp139 .UNIT_CAPACITY
 
   421 jump *label100 equal *tmp144 false
   422 sensor *tmp146 .DST .ITEM
   423 op sub *tmp147 .DROP_LEVEL *tmp146
-    * op max *tmp148 *tmp147 0
-    * set :max_drop *tmp148
+  424 op max :max_drop *tmp147 0
   425 ucontrol itemDrop .DST :max_drop
   426 sensor *tmp149 @unit @totalItems
   427 op lessThanEq *tmp150 *tmp149 0
 
   563 label *label104
   564 op add :iter :iter 1
   565 label *label105
-    * op sub *tmp193 @time :start
-    * set :loop_time *tmp193
+  566 op sub :loop_time @time :start
   567 label *label67
   568 jump *label66 always
   569 label *label68

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-7 instructions):
 
    25 jump *label5 equal *tmp5 false
    26 set :rebindUnit.0:first_unit null
    27 label *label7
-    * jump *label9 equal true false
    28 ubind UNIT
    29 op notEqual *tmp6 @unit null
    30 jump *label10 equal *tmp6 false
 
    60 jump *label12 notEqual *tmp15 false
    61 label *label14
    62 label *label18
-    * jump *label20 equal true false
    63 ubind UNIT
    64 op equal *tmp16 @unit null
    65 jump *label21 equal *tmp16 false
 
    95 op div .SPEED_SEC *tmp22 10
    96 ucontrol flag 1
    97 label *label25
-    * jump *label27 equal true false
    98 set .CONTAINER null
    99 set .DROP_TARGET null
   100 set :n @links
 
   301 set :state 1
   302 ucontrol stop
   303 label *label66
-    * jump *label68 equal true false
   304 set :start @time
   305 sensor *tmp106 @unit @dead
   306 op equal *tmp107 *tmp106 0
 
   309 op lessThanEq *tmp110 *tmp107 *tmp109
   310 jump *label69 equal *tmp110 false
   311 label *label72
-    * jump *label74 equal true false
   312 ubind UNIT
   313 op equal *tmp112 @unit null
   314 jump *label75 equal *tmp112 false
 
   436 jump *label99 always
   437 label *label98
   438 label *label99
-    * jump *label104 equal true false
   439 set :iter 0
   440 print "Moving [green]"
   441 print .ITEM
 
   481 print *tmp160
   482 print "[]"
   483 print "\n"
-    * jump *label112 equal true false
   484 op equal *tmp162 :show_state 2
   485 jump *label114 equal *tmp162 false
   486 sensor *tmp164 @unit @x

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-41 instructions):
 
     9 op max .EFF_REMOTE_LIMIT REMOTE_LIMIT 20
    10 label *label0
    11 sensor *tmp2 switch1 @enabled
-    * op equal *tmp3 *tmp2 false
-    * jump *label2 equal *tmp3 false
+   12 jump *label2 notEqual *tmp2 false
    13 print "Unit Transport - Single"
    14 print "\n"
    15 print "Activate switch to start."
 
    20 label *label2
    21 label *label3
    22 sensor *tmp4 @unit @dead
-    * op notEqual *tmp5 *tmp4 0
-    * jump *label5 equal *tmp5 false
+   23 jump *label5 equal *tmp4 0
    24 set :rebindUnit.0:first_unit null
    25 label *label7
    26 ubind UNIT
-    * op notEqual *tmp6 @unit null
-    * jump *label10 equal *tmp6 false
+   27 jump *label10 equal @unit null
    28 set :rebindUnit.0:first_unit @unit
    29 jump *label9 always
    30 jump *label11 always
 
    40 label *label9
    41 label *label12
    42 sensor *tmp9 @unit @controller
-    * op equal *tmp10 *tmp9 @this
-    * jump *label15 equal *tmp10 false
+   43 jump *label15 notEqual *tmp9 @this
    44 jump *label6 always
    45 jump *label16 always
    46 label *label15
 
    57 label *label14
    58 label *label18
    59 ubind UNIT
-    * op equal *tmp16 @unit null
-    * jump *label21 equal *tmp16 false
+   60 jump *label21 notEqual @unit null
    61 print "[salmon]No unit of type "
    62 print UNIT
    63 print " "
 
    65 jump *label22 always
    66 label *label21
    67 sensor *tmp18 @unit @controlled
-    * op notEqual *tmp19 *tmp18 0
-    * jump *label23 equal *tmp19 false
+   68 jump *label23 equal *tmp18 0
    69 print "[salmon]Looking for a free "
    70 print UNIT
    71 print "."
 
    93 set .DROP_TARGET null
    94 set :n @links
    95 label *label28
-    * op greaterThan *tmp25 :n 0
-    * jump *label30 equal *tmp25 false
+   96 jump *label30 lessThanEq :n 0
    97 op sub :n :n 1
    98 getlink :block :n
    99 sensor *tmp28 :block @itemCapacity
-    * op greaterThan *tmp29 *tmp28 0
-    * jump *label31 equal *tmp29 false
+  100 jump *label31 lessThanEq *tmp28 0
   101 set .DROP_TARGET .CONTAINER
   102 set .CONTAINER :block
   103 jump *label32 always
 
   106 label *label29
   107 jump *label28 always
   108 label *label30
-    * op equal *tmp31 .CONTAINER null
-    * jump *label33 equal *tmp31 false
+  109 jump *label33 notEqual .CONTAINER null
   110 print "[salmon]No destination."
   111 print "\n"
   112 jump *label34 always
 
   135 jump *label25 always
   136 label *label27
   137 set .CORE null
-    * op equal *tmp38 LINK_ID 0
-    * jump *label37 equal *tmp38 false
+  138 jump *label37 notEqual LINK_ID 0
   139 print "[gold]Locating core..."
   140 printflush message1
   141 ulocate building core false @copper .CORE_X .CORE_Y 0 .CORE
 
   160 label *label40
   161 jump *label39 always
   162 label *label41
-    * op notEqual *tmp48 :flag .QUERY_FLAG
-    * jump *label42 equal *tmp48 false
+  163 jump *label42 equal :flag .QUERY_FLAG
   164 op idiv :position :flag 100
   165 op mod .CORE_X :position @mapw
   166 op idiv .CORE_Y :position @mapw
 
   176 jump *label44 always
   177 label *label46
   178 ucontrol getBlock .CORE_X .CORE_Y :b_type .CORE 0
-    * op notEqual *tmp60 :b_type @vault
-    * jump *label47 equal *tmp60 false
+  179 jump *label47 equal :b_type @vault
   180 set .CORE null
   181 jump *label48 always
   182 label *label47
 
   185 label *label42
   186 label *label43
   187 label *label38
-    * op equal *tmp62 .CORE null
-    * jump *label49 equal *tmp62 false
+  188 jump *label49 notEqual .CORE null
   189 end
   190 jump *label50 always
   191 label *label49
 
   199 jump *label53 equal *tmp67 false
   200 print "[salmon]Block sorter1 is neither a sorter, nor an inverted sorter."
   201 print "\n"
-    * op notEqual *tmp68 .SORTER null
-    * jump *label54 equal *tmp68 false
+  202 jump *label54 equal .SORTER null
   203 print "Block found: "
   204 print .SORTER
   205 jump *label55 always
 
   211 label *label52
   212 jump *label51 always
   213 label *label53
-    * op equal *tmp71 :sorter_type @sorter
-    * jump *label56 equal *tmp71 false
+  214 jump *label56 notEqual :sorter_type @sorter
   215 set .SHOW_REMOTE_LEVEL true
   216 set .SRC .CORE
   217 set .DST .CONTAINER
 
   224 op idiv .DROP_LEVEL *tmp78 100
   225 set .LOCAL_MARGIN .DROP_LEVEL
   226 set .REMOTE_MARGIN .LOAD_LEVEL
-    * op equal *tmp80 LINK_ID 0
-    * jump *label58 equal *tmp80 false
+  227 jump *label58 notEqual LINK_ID 0
   228 set *tmp81 "[] from core"
   229 jump *label59 always
   230 label *label58
 
   248 op add .DROP_LEVEL *tmp89 *tmp91
   249 set .LOCAL_MARGIN .LOAD_LEVEL
   250 set .REMOTE_MARGIN .DROP_LEVEL
-    * op equal *tmp93 LINK_ID 0
-    * jump *label60 equal *tmp93 false
+  251 jump *label60 notEqual LINK_ID 0
   252 set *tmp94 "[] to core"
   253 jump *label61 always
   254 label *label60
 
   256 label *label61
   257 set .DIRECTION *tmp94
   258 label *label57
-    * op equal *tmp95 LINK_ID 0
-    * jump *label62 equal *tmp95 false
+  259 jump *label62 notEqual LINK_ID 0
   260 set *tmp96 ""
   261 jump *label63 always
   262 label *label62
 
   267 sensor .SRC_Y .SRC @y
   268 sensor .DST_X .DST @x
   269 sensor .DST_Y .DST @y
-    * op equal *tmp101 .DROP_TARGET null
-    * jump *label64 equal *tmp101 false
+  270 jump *label64 notEqual .DROP_TARGET null
   271 set .DROP_TARGET .CORE
   272 set .DROP_X .CORE_X
   273 set .DROP_Y .CORE_Y
 
   287 op equal *tmp107 *tmp106 0
   288 sensor *tmp108 @unit @controller
   289 op notEqual *tmp109 *tmp108 @this
-    * op lessThanEq *tmp110 *tmp107 *tmp109
-    * jump *label69 equal *tmp110 false
+  290 jump *label69 greaterThan *tmp107 *tmp109
   291 label *label72
   292 ubind UNIT
-    * op equal *tmp112 @unit null
-    * jump *label75 equal *tmp112 false
+  293 jump *label75 notEqual @unit null
   294 print "[salmon]No unit of type "
   295 print UNIT
   296 print " "
 
   298 jump *label76 always
   299 label *label75
   300 sensor *tmp114 @unit @controlled
-    * op notEqual *tmp115 *tmp114 0
-    * jump *label77 equal *tmp115 false
+  301 jump *label77 equal *tmp114 0
   302 print "[salmon]Looking for a free "
   303 print UNIT
   304 print "."
 
   319 label *label69
   320 label *label70
   321 sensor .ITEM .SORTER @config
-    * op notEqual *tmp118 .ITEM .LAST_ITEM
-    * jump *label79 equal *tmp118 false
+  322 jump *label79 equal .ITEM .LAST_ITEM
   323 label *label81
-    * op equal *tmp120 .ITEM null
-    * jump *label83 equal *tmp120 false
+  324 jump *label83 notEqual .ITEM null
   325 print "[salmon]No item type selected for transport."
   326 printflush message1
   327 sensor .ITEM .SORTER @config
 
   334 label *label79
   335 label *label80
   336 set :show_state 0
-    * op equal *tmp122 :state 1
-    * jump *label84 equal *tmp122 false
+  337 jump *label84 notEqual :state 1
   338 sensor *tmp124 @unit @firstItem
-    * op equal *tmp125 *tmp124 .ITEM
-    * jump *label86 equal *tmp125 false
+  339 jump *label86 notEqual *tmp124 .ITEM
   340 set :state 3
   341 jump *label87 always
   342 label *label86
   343 sensor *tmp127 @unit @totalItems
-    * op equal *tmp128 *tmp127 0
-    * jump *label88 equal *tmp128 false
+  344 jump *label88 notEqual *tmp127 0
   345 set :state 2
   346 jump *label89 always
   347 label *label88
 
   358 jump *label85 always
   359 label *label84
   360 label *label85
-    * op equal *tmp132 :state 2
-    * jump *label92 equal *tmp132 false
+  361 jump *label92 notEqual :state 2
   362 ucontrol within .SRC_X .SRC_Y 8 *tmp134
   363 jump *label94 equal *tmp134 false
   364 sensor *tmp136 .SRC .ITEM
 
   366 op max :max_load *tmp137 0
   367 ucontrol itemTake .SRC .ITEM :max_load
   368 sensor *tmp139 @unit @totalItems
-    * op greaterThanEq *tmp140 *tmp139 .UNIT_CAPACITY
-    * jump *label96 equal *tmp140 false
+  369 jump *label96 lessThan *tmp139 .UNIT_CAPACITY
   370 set :state 3
   371 jump *label97 always
   372 label *label96
 
   381 jump *label93 always
   382 label *label92
   383 label *label93
-    * op equal *tmp142 :state 3
-    * jump *label98 equal *tmp142 false
+  384 jump *label98 notEqual :state 3
   385 ucontrol within .DST_X .DST_Y 8 *tmp144
   386 jump *label100 equal *tmp144 false
   387 sensor *tmp146 .DST .ITEM
 
   389 op max :max_drop *tmp147 0
   390 ucontrol itemDrop .DST :max_drop
   391 sensor *tmp149 @unit @totalItems
-    * op lessThanEq *tmp150 *tmp149 0
-    * jump *label102 equal *tmp150 false
+  392 jump *label102 greaterThan *tmp149 0
   393 set :state 2
   394 ucontrol approach .SRC_X .SRC_Y 6
   395 jump *label103 always
 
   417 print *tmp153
   418 print "["
   419 print "]"
-    * op lessThan *tmp154 .EFF_LOCAL_LIMIT 100
-    * jump *label106 equal *tmp154 false
+  420 jump *label106 greaterThanEq .EFF_LOCAL_LIMIT 100
   421 print " (limit [orange]"
   422 print .LOCAL_MARGIN
   423 print "["
 
   432 print *tmp157
   433 print "["
   434 print "]"
-    * op lessThan *tmp158 .EFF_REMOTE_LIMIT 100
-    * jump *label110 equal *tmp158 false
+  435 jump *label110 greaterThanEq .EFF_REMOTE_LIMIT 100
   436 print " (limit [orange]"
   437 print .REMOTE_MARGIN
   438 print "["
 
   448 print *tmp160
   449 print "[]"
   450 print "\n"
-    * op equal *tmp162 :show_state 2
-    * jump *label114 equal *tmp162 false
+  451 jump *label114 notEqual :show_state 2
   452 sensor *tmp164 @unit @x
   453 op sub *tmp165 .SRC_X *tmp164
   454 sensor *tmp166 @unit @y
 
   463 print "\n"
   464 jump *label115 always
   465 label *label114
-    * op equal *tmp171 :show_state 3
-    * jump *label116 equal *tmp171 false
+  466 jump *label116 notEqual :show_state 3
   467 sensor *tmp173 @unit @x
   468 op sub *tmp174 .DST_X *tmp173
   469 sensor *tmp175 @unit @y
 
   490 print "\n"
   491 printflush message1
   492 sensor *tmp181 switch1 @enabled
-    * op equal *tmp182 *tmp181 0
-    * jump *label118 equal *tmp182 false
+  493 jump *label118 notEqual *tmp181 0
   494 jump *label68 always
   495 jump *label119 always
   496 label *label118
   497 label *label119
   498 sensor *tmp184 .SRC @dead
-    * op notEqual *tmp185 *tmp184 0
-    * jump *label120 equal *tmp185 false
+  499 jump *label120 equal *tmp184 0
   500 jump *label68 always
   501 jump *label121 always
   502 label *label120
   503 label *label121
   504 sensor *tmp187 .DST @dead
-    * op notEqual *tmp188 *tmp187 0
-    * jump *label122 equal *tmp188 false
+  505 jump *label122 equal *tmp187 0
   506 jump *label68 always
   507 jump *label123 always
   508 label *label122
   509 label *label123
   510 sensor *tmp190 .SORTER @dead
-    * op notEqual *tmp191 *tmp190 0
-    * jump *label124 equal *tmp191 false
+  511 jump *label124 equal *tmp190 0
   512 jump *label68 always
   513 jump *label125 always
   514 label *label124
 
   523 label *label68
   524 label *label126
   525 sensor *tmp194 .SORTER @dead
-    * op equal *tmp195 *tmp194 0
-    * jump *label128 equal *tmp195 false
+  526 jump *label128 notEqual *tmp194 0
   527 print "[salmon]sorter1 is missing!"
   528 print "\n"
   529 print "[gold]Please place and link sorter or inverted sorter to the processor."
 
   543 control enabled switch1 false
   544 label *label131
   545 sensor *tmp203 switch1 @enabled
-    * op equal *tmp204 *tmp203 false
-    * jump *label133 equal *tmp204 false
+  546 jump *label133 notEqual *tmp203 false
   547 print "[salmon]Local or remote container became invalid."
   548 print "\n"
   549 print "[gold]Please fix and press button to reinitialize."

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-23 instructions):
 
    27 jump *label10 equal @unit null
    28 set :rebindUnit.0:first_unit @unit
    29 jump *label9 always
-    * jump *label11 always
    30 label *label10
    31 label *label11
    32 print "[salmon]No unit of type "
 
    41 sensor *tmp9 @unit @controller
    42 jump *label15 notEqual *tmp9 @this
    43 jump *label6 always
-    * jump *label16 always
    44 label *label15
    45 label *label16
    46 ubind UNIT
 
    98 jump *label31 lessThanEq *tmp28 0
    99 set .DROP_TARGET .CONTAINER
   100 set .CONTAINER :block
-    * jump *label32 always
   101 label *label31
   102 label *label32
   103 label *label29
 
   175 ucontrol getBlock .CORE_X .CORE_Y :b_type .CORE 0
   176 jump *label47 equal :b_type @vault
   177 set .CORE null
-    * jump *label48 always
   178 label *label47
   179 label *label48
-    * jump *label43 always
   180 label *label42
   181 label *label43
   182 label *label38
   183 jump *label49 notEqual .CORE null
   184 end
-    * jump *label50 always
   185 label *label49
   186 label *label50
   187 set .SORTER sorter1
 
   196 jump *label54 equal .SORTER null
   197 print "Block found: "
   198 print .SORTER
-    * jump *label55 always
   199 label *label54
   200 label *label55
   201 printflush message1
 
   308 label *label71
   309 ucontrol flag 1
   310 set :state 1
-    * jump *label70 always
   311 label *label69
   312 label *label70
   313 sensor .ITEM .SORTER @config
 
   322 label *label83
   323 set .LAST_ITEM .ITEM
   324 set :state 1
-    * jump *label80 always
   325 label *label79
   326 label *label80
   327 set :show_state 0
 
   341 ucontrol within .DROP_X .DROP_Y 8 *tmp130
   342 jump *label90 equal *tmp130 false
   343 ucontrol itemDrop .DROP_TARGET .UNIT_CAPACITY
-    * jump *label91 always
   344 label *label90
   345 label *label91
   346 label *label89
   347 label *label87
-    * jump *label85 always
   348 label *label84
   349 label *label85
   350 jump *label92 notEqual :state 2
 
   367 set .MSG "\nGoing to source: [green]"
   368 set :show_state 2
   369 label *label95
-    * jump *label93 always
   370 label *label92
   371 label *label93
   372 jump *label98 notEqual :state 3
 
   390 set .MSG "\nGoing to destination: [green]"
   391 set :show_state 3
   392 label *label101
-    * jump *label99 always
   393 label *label98
   394 label *label99
   395 set :iter 0
 
   409 print .LOCAL_MARGIN
   410 print "["
   411 print "])"
-    * jump *label107 always
   412 label *label106
   413 label *label107
   414 jump *label108 equal .SHOW_REMOTE_LEVEL false
 
   423 print .REMOTE_MARGIN
   424 print "["
   425 print "])"
-    * jump *label111 always
   426 label *label110
   427 label *label111
-    * jump *label109 always
   428 label *label108
   429 label *label109
   430 sensor *tmp160 @unit @totalItems
 
   460 print " "
   461 print "sec[]"
   462 print "\n"
-    * jump *label117 always
   463 label *label116
   464 label *label117
   465 label *label115
-    * jump *label113 always
   466 label *label112
   467 label *label113
   468 op floor *tmp180 :loop_time
 
   474 sensor *tmp181 switch1 @enabled
   475 jump *label118 notEqual *tmp181 0
   476 jump *label68 always
-    * jump *label119 always
   477 label *label118
   478 label *label119
   479 sensor *tmp184 .SRC @dead
   480 jump *label120 equal *tmp184 0
   481 jump *label68 always
-    * jump *label121 always
   482 label *label120
   483 label *label121
   484 sensor *tmp187 .DST @dead
   485 jump *label122 equal *tmp187 0
   486 jump *label68 always
-    * jump *label123 always
   487 label *label122
   488 label *label123
   489 sensor *tmp190 .SORTER @dead
   490 jump *label124 equal *tmp190 0
   491 jump *label68 always
-    * jump *label125 always
   492 label *label124
   493 label *label125
   494 jump *label105 always
 
   531 label *label132
   532 jump *label131 always
   533 label *label133
-    * jump *label130 always
   534 label *label129
   535 label *label130
   536 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-2 instructions):
 
   145 printflush message1
   146 op add .QUERY_FLAG 99999900 LINK_ID
   147 set :flag .QUERY_FLAG
-    * ucontrol flag :flag
+  148 ucontrol flag .QUERY_FLAG
   149 label *label39
   150 op equal *tmp43 :flag .QUERY_FLAG
   151 sensor *tmp44 @unit @dead
 
   185 label *label49
   186 label *label50
   187 set .SORTER sorter1
-    * sensor :sorter_type .SORTER @type
+  188 sensor :sorter_type sorter1 @type
   189 label *label51
   190 op notEqual *tmp65 :sorter_type @sorter
   191 op notEqual *tmp66 :sorter_type @inverted-sorter
 
   200 label *label55
   201 printflush message1
   202 set .SORTER sorter1
-    * sensor :sorter_type .SORTER @type
+  203 sensor :sorter_type sorter1 @type
   204 label *label52
   205 jump *label51 always
   206 label *label53
 
   208 set .SHOW_REMOTE_LEVEL true
   209 set .SRC .CORE
   210 set .DST .CONTAINER
-    * sensor :src_capacity .SRC @itemCapacity
-    * sensor :dst_capacity .DST @itemCapacity
+  211 sensor :src_capacity .CORE @itemCapacity
+  212 sensor :dst_capacity .CONTAINER @itemCapacity
   213 op sub *tmp75 100 .EFF_REMOTE_LIMIT
   214 op mul *tmp76 :src_capacity *tmp75
   215 op idiv .LOAD_LEVEL *tmp76 100
 
   229 op greaterThan .SHOW_REMOTE_LEVEL LINK_ID 0
   230 set .SRC .CONTAINER
   231 set .DST .CORE
-    * sensor :src_capacity .SRC @itemCapacity
-    * sensor :dst_capacity .DST @itemCapacity
+  232 sensor :src_capacity .CONTAINER @itemCapacity
+  233 sensor :dst_capacity .CORE @itemCapacity
   234 op sub *tmp85 100 .EFF_LOCAL_LIMIT
   235 op mul *tmp86 :src_capacity *tmp85
   236 op idiv .LOAD_LEVEL *tmp86 100
 
   270 sensor .DROP_Y .DROP_TARGET @y
   271 label *label65
   272 set .LAST_ITEM @mono
-    * set :iter 0
   273 set :loop_time 0
   274 set :state 1
   275 ucontrol stop
 
   391 label *label101
   392 label *label98
   393 label *label99
-    * set :iter 0
   394 print "Moving [green]"
   395 print .ITEM
   396 print .DIRECTION
-    * print .LINK_TXT
+  397 print *tmp96
   398 print "\"
   399 print "n"
   400 sensor *tmp153 .CONTAINER .ITEM
 
   491 label *label125
   492 jump *label105 always
   493 label *label104
-    * op add :iter :iter 1
+  494 op add :iter 0 1
   495 label *label105
   496 op sub :loop_time @time :start
   497 label *label67

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   255 label *label62
   256 set *tmp96 LINK_ID
   257 label *label63
-    * set .LINK_TXT *tmp96
   258 sensor .SRC_X .SRC @x
   259 sensor .SRC_Y .SRC @y
   260 sensor .DST_X .DST @x
 
   490 label *label125
   491 jump *label105 always
   492 label *label104
-    * op add :iter 0 1
   493 label *label105
   494 op sub :loop_time @time :start
   495 label *label67

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    92 set :n @links
    93 label *label28
    94 jump *label30 lessThanEq :n 0
+   95 label *label134
    96 op sub :n :n 1
    97 getlink :block :n
    98 sensor *tmp28 :block @itemCapacity
 
   102 label *label31
   103 label *label32
   104 label *label29
-    * jump *label28 always
+  105 jump *label134 greaterThan :n 0
   106 label *label30
   107 jump *label33 notEqual .CONTAINER null
   108 print "[salmon]No destination."
 
   313 jump *label79 equal .ITEM .LAST_ITEM
   314 label *label81
   315 jump *label83 notEqual .ITEM null
+  316 label *label135
   317 print "[salmon]No item type selected for transport."
   318 printflush message1
   319 sensor .ITEM .SORTER @config
   320 label *label82
-    * jump *label81 always
+  321 jump *label135 equal .ITEM null
   322 label *label83
   323 set .LAST_ITEM .ITEM
   324 set :state 1

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   218 op idiv .DROP_LEVEL *tmp78 100
   219 set .LOCAL_MARGIN .DROP_LEVEL
   220 set .REMOTE_MARGIN .LOAD_LEVEL
-    * jump *label58 notEqual LINK_ID 0
-    * set *tmp81 "[] from core"
+  221 set .DIRECTION "[] from vault #"
+  222 jump *label59 notEqual LINK_ID 0
+  223 set .DIRECTION "[] from core"
   224 jump *label59 always
-    * label *label58
-    * set *tmp81 "[] from vault #"
   225 label *label59
-    * set .DIRECTION *tmp81
   226 jump *label57 always
   227 label *label56
   228 op greaterThan .SHOW_REMOTE_LEVEL LINK_ID 0
 
   240 op add .DROP_LEVEL *tmp89 *tmp91
   241 set .LOCAL_MARGIN .LOAD_LEVEL
   242 set .REMOTE_MARGIN .DROP_LEVEL
-    * jump *label60 notEqual LINK_ID 0
-    * set *tmp94 "[] to core"
+  243 set .DIRECTION "[] to vault #"
+  244 jump *label61 notEqual LINK_ID 0
+  245 set .DIRECTION "[] to core"
   246 jump *label61 always
-    * label *label60
-    * set *tmp94 "[] to vault #"
   247 label *label61
-    * set .DIRECTION *tmp94
   248 label *label57
-    * jump *label62 notEqual LINK_ID 0
+  249 set *tmp96 LINK_ID
+  250 jump *label63 notEqual LINK_ID 0
   251 set *tmp96 ""
   252 jump *label63 always
-    * label *label62
-    * set *tmp96 LINK_ID
   253 label *label63
   254 sensor .SRC_X .SRC @x
   255 sensor .SRC_Y .SRC @y

Modifications by Replicate loop condition at line 44:1 (+1 instructions):
 
    10 label *label0
    11 sensor *tmp2 switch1 @enabled
    12 jump *label2 notEqual *tmp2 false
+   13 label *label136
    14 print "Unit Transport - Single"
    15 print "\n"
    16 print "Activate switch to start."
    17 print "\n"
    18 printflush message1
    19 label *label1
-    * jump *label0 always
+   20 sensor *tmp2 switch1 @enabled
+   21 jump *label136 equal *tmp2 false
    22 label *label2
    23 label *label3
    24 sensor *tmp4 @unit @dead

Modifications by Replicate loop condition at line 52:1 (+1 instructions):
 
    23 label *label3
    24 sensor *tmp4 @unit @dead
    25 jump *label5 equal *tmp4 0
+   26 label *label137
    27 set :rebindUnit.0:first_unit null
    28 label *label7
    29 ubind UNIT
 
    83 label *label17
    84 label *label6
    85 label *label4
-    * jump *label3 always
+   86 sensor *tmp4 @unit @dead
+   87 jump *label137 notEqual *tmp4 0
    88 label *label5
    89 sensor .UNIT_CAPACITY @unit @itemCapacity
    90 sensor *tmp22 @unit @speed

Modifications by Replicate loop condition at line 306:1 (+1 instructions):
 
   499 label *label126
   500 sensor *tmp194 .SORTER @dead
   501 jump *label128 notEqual *tmp194 0
+  502 label *label138
   503 print "[salmon]sorter1 is missing!"
   504 print "\n"
   505 print "[gold]Please place and link sorter or inverted sorter to the processor."
 
   508 printflush message2
   509 set .SORTER sorter1
   510 label *label127
-    * jump *label126 always
+  511 sensor *tmp194 .SORTER @dead
+  512 jump *label138 equal *tmp194 0
   513 label *label128
   514 sensor *tmp196 .SRC @dead
   515 op notEqual *tmp197 *tmp196 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   508 printflush message2
   509 set .SORTER sorter1
   510 label *label127
-    * sensor *tmp194 .SORTER @dead
+  511 sensor *tmp194 sorter1 @dead
   512 jump *label138 equal *tmp194 0
   513 label *label128
   514 sensor *tmp196 .SRC @dead

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
   506 print "\n"
   507 printflush message1
   508 printflush message2
-    * set .SORTER sorter1
   509 label *label127
   510 sensor *tmp194 sorter1 @dead
   511 jump *label138 equal *tmp194 0

Modifications by Replicate loop condition at line 316:5 (+1 instructions):
 
   520 label *label131
   521 sensor *tmp203 switch1 @enabled
   522 jump *label133 notEqual *tmp203 false
+  523 label *label139
   524 print "[salmon]Local or remote container became invalid."
   525 print "\n"
   526 print "[gold]Please fix and press button to reinitialize."
 
   528 printflush message1
   529 printflush message2
   530 label *label132
-    * jump *label131 always
+  531 sensor *tmp203 switch1 @enabled
+  532 jump *label139 equal *tmp203 false
   533 label *label133
   534 label *label129
   535 label *label130

Modifications by Replicate loop condition at line 131:1 (+3 instructions):
 
   196 op notEqual *tmp66 :sorter_type @inverted-sorter
   197 op land *tmp67 *tmp65 *tmp66
   198 jump *label53 equal *tmp67 false
+  199 label *label140
   200 print "[salmon]Block sorter1 is neither a sorter, nor an inverted sorter."
   201 print "\n"
   202 jump *label54 equal .SORTER null
 
   208 set .SORTER sorter1
   209 sensor :sorter_type sorter1 @type
   210 label *label52
-    * jump *label51 always
+  211 op notEqual *tmp65 :sorter_type @sorter
+  212 op notEqual *tmp66 :sorter_type @inverted-sorter
+  213 op land *tmp67 *tmp65 *tmp66
+  214 jump *label140 notEqual *tmp67 false
   215 label *label53
   216 jump *label56 notEqual :sorter_type @sorter
   217 set .SHOW_REMOTE_LEVEL true

Modifications by Replicate loop condition at line 103:5 (+4 instructions):
 
   157 op equal *tmp45 *tmp44 0
   158 op land *tmp46 *tmp43 *tmp45
   159 jump *label41 equal *tmp46 false
+  160 label *label141
   161 ucontrol stop
   162 sensor :flag @unit @flag
   163 label *label40
-    * jump *label39 always
+  164 op equal *tmp43 :flag .QUERY_FLAG
+  165 sensor *tmp44 @unit @dead
+  166 op equal *tmp45 *tmp44 0
+  167 op land *tmp46 *tmp43 *tmp45
+  168 jump *label141 notEqual *tmp46 false
   169 label *label41
   170 jump *label42 equal :flag .QUERY_FLAG
   171 op idiv :position :flag 100

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   152 set :flag .QUERY_FLAG
   153 ucontrol flag .QUERY_FLAG
   154 label *label39
-    * op equal *tmp43 :flag .QUERY_FLAG
+  155 op equal *tmp43 .QUERY_FLAG .QUERY_FLAG
   156 sensor *tmp44 @unit @dead
   157 op equal *tmp45 *tmp44 0
   158 op land *tmp46 *tmp43 *tmp45

Modifications by Replicate loop condition at line 112:9 (+5 instructions):
 
   178 op equal *tmp56 *tmp55 0
   179 op land *tmp57 *tmp54 *tmp56
   180 jump *label46 equal *tmp57 false
+  181 label *label142
   182 ucontrol approach .CORE_X .CORE_Y 6
   183 label *label45
-    * jump *label44 always
+  184 ucontrol within .CORE_X .CORE_Y 8 *tmp53
+  185 op equal *tmp54 *tmp53 false
+  186 sensor *tmp55 @unit @dead
+  187 op equal *tmp56 *tmp55 0
+  188 op land *tmp57 *tmp54 *tmp56
+  189 jump *label142 notEqual *tmp57 false
   190 label *label46
   191 ucontrol getBlock .CORE_X .CORE_Y :b_type .CORE 0
   192 jump *label47 equal :b_type @vault

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-4 instructions):
 
   240 set .DIRECTION "[] from vault #"
   241 jump *label59 notEqual LINK_ID 0
   242 set .DIRECTION "[] from core"
-    * jump *label59 always
   243 label *label59
   244 jump *label57 always
   245 label *label56
 
   261 set .DIRECTION "[] to vault #"
   262 jump *label61 notEqual LINK_ID 0
   263 set .DIRECTION "[] to core"
-    * jump *label61 always
   264 label *label61
   265 label *label57
   266 set *tmp96 LINK_ID
   267 jump *label63 notEqual LINK_ID 0
   268 set *tmp96 ""
-    * jump *label63 always
   269 label *label63
   270 sensor .SRC_X .SRC @x
   271 sensor .SRC_Y .SRC @y
 
   501 jump *label68 always
   502 label *label124
   503 label *label125
-    * jump *label105 always
   504 label *label104
   505 label *label105
   506 op sub :loop_time @time :start

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   152 set :flag .QUERY_FLAG
   153 ucontrol flag .QUERY_FLAG
   154 label *label39
-    * op equal *tmp43 .QUERY_FLAG .QUERY_FLAG
+  155 set *tmp43 true
   156 sensor *tmp44 @unit @dead
   157 op equal *tmp45 *tmp44 0
   158 op land *tmp46 *tmp43 *tmp45

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
   155 set *tmp43 true
   156 sensor *tmp44 @unit @dead
   157 op equal *tmp45 *tmp44 0
-    * op land *tmp46 *tmp43 *tmp45
+  158 op land *tmp46 true *tmp45
   159 jump *label41 equal *tmp46 false
   160 label *label141
   161 ucontrol stop

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
   152 set :flag .QUERY_FLAG
   153 ucontrol flag .QUERY_FLAG
   154 label *label39
-    * set *tmp43 true
   155 sensor *tmp44 @unit @dead
   156 op equal *tmp45 *tmp44 0
   157 op land *tmp46 true *tmp45

Modifications by Final phase, Jump Straightening, iteration 1 (-5 instructions):
 
    42 label *label9
    43 label *label12
    44 sensor *tmp9 @unit @controller
-    * jump *label15 notEqual *tmp9 @this
-    * jump *label6 always
+   45 jump *label6 equal *tmp9 @this
    46 label *label15
    47 label *label16
    48 ubind UNIT
 
   480 print "\n"
   481 printflush message1
   482 sensor *tmp181 switch1 @enabled
-    * jump *label118 notEqual *tmp181 0
-    * jump *label68 always
+  483 jump *label68 equal *tmp181 0
   484 label *label118
   485 label *label119
   486 sensor *tmp184 .SRC @dead
-    * jump *label120 equal *tmp184 0
-    * jump *label68 always
+  487 jump *label68 notEqual *tmp184 0
   488 label *label120
   489 label *label121
   490 sensor *tmp187 .DST @dead
-    * jump *label122 equal *tmp187 0
-    * jump *label68 always
+  491 jump *label68 notEqual *tmp187 0
   492 label *label122
   493 label *label123
   494 sensor *tmp190 .SORTER @dead
-    * jump *label124 equal *tmp190 0
-    * jump *label68 always
+  495 jump *label68 notEqual *tmp190 0
   496 label *label124
   497 label *label125
   498 label *label104

Modifications by Final phase, Jump Threading, iteration 1:
+    0 label __start__
     1 remark "Which unit type to use"
     2 set UNIT @mega
     3 remark "Remote vault ID (1-99); if nonzero, items are moved to/from this vault instead of core"
 
    66 jump *label22 always
    67 label *label21
    68 sensor *tmp18 @unit @controlled
-    * jump *label23 equal *tmp18 0
+   69 jump *label17 equal *tmp18 0
    70 print "[salmon]Looking for a free "
    71 print UNIT
    72 print "."
 
   117 sensor *tmp34 .DROP_TARGET @itemCapacity
   118 op lessThan *tmp35 *tmp34 300
   119 op land *tmp36 *tmp33 *tmp35
-    * jump *label35 equal *tmp36 false
+  120 jump *label27 equal *tmp36 false
   121 print "Destination: "
   122 print .CONTAINER
   123 print "\"
 
   237 set .LOCAL_MARGIN .DROP_LEVEL
   238 set .REMOTE_MARGIN .LOAD_LEVEL
   239 set .DIRECTION "[] from vault #"
-    * jump *label59 notEqual LINK_ID 0
+  240 jump *label57 notEqual LINK_ID 0
   241 set .DIRECTION "[] from core"
   242 label *label59
   243 jump *label57 always
 
   300 jump *label76 always
   301 label *label75
   302 sensor *tmp114 @unit @controlled
-    * jump *label77 equal *tmp114 0
+  303 jump *label71 equal *tmp114 0
   304 print "[salmon]Looking for a free "
   305 print UNIT
   306 print "."
 
   367 sensor *tmp139 @unit @totalItems
   368 jump *label96 lessThan *tmp139 .UNIT_CAPACITY
   369 set :state 3
-    * jump *label97 always
+  370 jump *label95 always
   371 label *label96
   372 set .MSG "\nLoading items: [green]"
   373 label *label97
 
   390 jump *label102 greaterThan *tmp149 0
   391 set :state 2
   392 ucontrol approach .SRC_X .SRC_Y 6
-    * jump *label103 always
+  393 jump *label101 always
   394 label *label102
   395 set .MSG "\nDropping items: [green]"
   396 label *label103
 
   521 sensor *tmp198 .DST @dead
   522 op notEqual *tmp199 *tmp198 0
   523 op or *tmp200 *tmp197 *tmp199
-    * jump *label129 equal *tmp200 false
+  524 jump __start__ equal *tmp200 false
   525 control enabled switch1 false
   526 label *label131
   527 sensor *tmp203 switch1 @enabled
-    * jump *label133 notEqual *tmp203 false
+  528 jump __start__ notEqual *tmp203 false
   529 label *label139
   530 print "[salmon]Local or remote container became invalid."
   531 print "\n"

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-3 instructions):
 
    72 print "."
    73 print ".."
    74 jump *label24 always
-    * label *label23
-    * jump *label17 always
    75 label *label24
    76 label *label22
    77 printflush message1
    78 label *label19
    79 jump *label18 always
-    * label *label20
    80 label *label17
    81 label *label6
    82 label *label4
 
   125 print "n"
   126 print "[salmon]Item dump must be a container or a vault!"
   127 jump *label36 always
-    * label *label35
-    * jump *label27 always
   128 label *label36
   129 label *label34
   130 printflush message1
 
   301 print "."
   302 print ".."
   303 jump *label78 always
-    * label *label77
-    * jump *label71 always
   304 label *label78
   305 label *label76
   306 printflush message1
   307 label *label73
   308 jump *label72 always
-    * label *label74
   309 label *label71
   310 ucontrol flag 1
   311 set :state 1

Modifications by Final phase, Single Step Elimination, iteration 1 (-4 instructions):
 
    71 print UNIT
    72 print "."
    73 print ".."
-    * jump *label24 always
    74 label *label24
    75 label *label22
    76 printflush message1
 
   123 print "\"
   124 print "n"
   125 print "[salmon]Item dump must be a container or a vault!"
-    * jump *label36 always
   126 label *label36
   127 label *label34
   128 printflush message1
 
   298 print UNIT
   299 print "."
   300 print ".."
-    * jump *label78 always
   301 label *label78
   302 label *label76
   303 printflush message1
 
   528 label *label133
   529 label *label129
   530 label *label130
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-34 instructions):
 
    12 sensor *tmp2 switch1 @enabled
    13 jump *label2 notEqual *tmp2 false
    14 label *label136
-    * print "Unit Transport - Single"
-    * print "\n"
-    * print "Activate switch to start."
-    * print "\n"
+   15 print "Unit Transport - Single\nActivate switch to start.\n"
    16 printflush message1
    17 label *label1
    18 sensor *tmp2 switch1 @enabled
 
    32 label *label11
    33 print "[salmon]No unit of type "
    34 print UNIT
-    * print " "
-    * print "found. 1"
+   35 print " found. 1"
    36 printflush message1
    37 label *label8
    38 jump *label7 always
 
    57 jump *label21 notEqual @unit null
    58 print "[salmon]No unit of type "
    59 print UNIT
-    * print " "
-    * print "found."
+   60 print " found."
    61 jump *label22 always
    62 label *label21
    63 sensor *tmp18 @unit @controlled
    64 jump *label17 equal *tmp18 0
    65 print "[salmon]Looking for a free "
    66 print UNIT
-    * print "."
-    * print ".."
+   67 print "..."
    68 label *label24
    69 label *label22
    70 printflush message1
 
    99 jump *label134 greaterThan :n 0
   100 label *label30
   101 jump *label33 notEqual .CONTAINER null
-    * print "[salmon]No destination."
-    * print "\n"
+  102 print "[salmon]No destination.\n"
   103 jump *label34 always
   104 label *label33
   105 op notEqual *tmp33 .DROP_TARGET null
 
   109 jump *label27 equal *tmp36 false
   110 print "Destination: "
   111 print .CONTAINER
-    * print "\"
-    * print "n"
-    * print "Item dump: "
+  112 print "\nItem dump: "
   113 print .DROP_TARGET
-    * print "\"
-    * print "n"
-    * print "[salmon]Item dump must be a container or a vault!"
+  114 print "\n[salmon]Item dump must be a container or a vault!"
   115 label *label36
   116 label *label34
   117 printflush message1
 
   127 label *label37
   128 print "[gold]Locating vault #"
   129 print LINK_ID
-    * print "."
-    * print ".."
+  130 print "..."
   131 printflush message1
   132 op add .QUERY_FLAG 99999900 LINK_ID
   133 set :flag .QUERY_FLAG
 
   188 op land *tmp67 *tmp65 *tmp66
   189 jump *label53 equal *tmp67 false
   190 label *label140
-    * print "[salmon]Block sorter1 is neither a sorter, nor an inverted sorter."
-    * print "\n"
+  191 print "[salmon]Block sorter1 is neither a sorter, nor an inverted sorter.\n"
   192 jump *label54 equal .SORTER null
   193 print "Block found: "
   194 print .SORTER
 
   275 jump *label75 notEqual @unit null
   276 print "[salmon]No unit of type "
   277 print UNIT
-    * print " "
-    * print "found."
+  278 print " found."
   279 jump *label76 always
   280 label *label75
   281 sensor *tmp114 @unit @controlled
   282 jump *label71 equal *tmp114 0
   283 print "[salmon]Looking for a free "
   284 print UNIT
-    * print "."
-    * print ".."
+  285 print "..."
   286 label *label78
   287 label *label76
   288 printflush message1
 
   380 print .ITEM
   381 print .DIRECTION
   382 print *tmp96
-    * print "\"
-    * print "n"
   383 sensor *tmp153 .CONTAINER .ITEM
-    * print "Local items: [gold]"
+  384 print "\nLocal items: [gold]"
   385 print *tmp153
-    * print "["
-    * print "]"
+  386 print "[]"
   387 jump *label106 greaterThanEq .EFF_LOCAL_LIMIT 100
   388 print " (limit [orange]"
   389 print .LOCAL_MARGIN
-    * print "["
-    * print "])"
+  390 print "[])"
   391 label *label106
   392 label *label107
   393 jump *label108 equal .SHOW_REMOTE_LEVEL false
   394 sensor *tmp157 .CORE .ITEM
-    * print "\n"
-    * print "Remote items: [gold]"
+  395 print "\nRemote items: [gold]"
   396 print *tmp157
-    * print "["
-    * print "]"
+  397 print "[]"
   398 jump *label110 greaterThanEq .EFF_REMOTE_LIMIT 100
   399 print " (limit [orange]"
   400 print .REMOTE_MARGIN
-    * print "["
-    * print "])"
+  401 print "[])"
   402 label *label110
   403 label *label111
   404 label *label108
 
   406 sensor *tmp160 @unit @totalItems
   407 print .MSG
   408 print *tmp160
-    * print "[]"
-    * print "\n"
+  409 print "[]\n"
   410 jump *label114 notEqual :show_state 2
   411 sensor *tmp164 @unit @x
   412 op sub *tmp165 .SRC_X *tmp164
 
   417 op div *tmp170 *tmp169 10
   418 print "[]  arriving in [gold]"
   419 print *tmp170
-    * print " "
-    * print "sec[]"
-    * print "\n"
+  420 print " sec[]\n"
   421 jump *label115 always
   422 label *label114
   423 jump *label116 notEqual :show_state 3
 
   430 op div *tmp179 *tmp178 10
   431 print "[]  arriving in [gold]"
   432 print *tmp179
-    * print " "
-    * print "sec[]"
-    * print "\n"
+  433 print " sec[]\n"
   434 label *label116
   435 label *label117
   436 label *label115
 
   439 op floor *tmp180 :loop_time
   440 print "[lightgray]Loop time: "
   441 print *tmp180
-    * print " ms[]"
-    * print "\n"
+  442 print " ms[]\n"
   443 printflush message1
   444 sensor *tmp181 switch1 @enabled
   445 jump *label68 equal *tmp181 0
 
   467 sensor *tmp194 .SORTER @dead
   468 jump *label128 notEqual *tmp194 0
   469 label *label138
-    * print "[salmon]sorter1 is missing!"
-    * print "\n"
-    * print "[gold]Please place and link sorter or inverted sorter to the processor."
-    * print "\n"
+  470 print "[salmon]sorter1 is missing!\n[gold]Please place and link sorter or inverted sorter to the processor.\n"
   471 printflush message1
   472 printflush message2
   473 label *label127
 
   485 sensor *tmp203 switch1 @enabled
   486 jump __start__ notEqual *tmp203 false
   487 label *label139
-    * print "[salmon]Local or remote container became invalid."
-    * print "\n"
-    * print "[gold]Please fix and press button to reinitialize."
-    * print "\n"
+  488 print "[salmon]Local or remote container became invalid.\n[gold]Please fix and press button to reinitialize.\n"
   489 printflush message1
   490 printflush message2
   491 label *label132

Final code before resolving virtual instructions:

        label __start__                                              param UNIT              = @mega;        /// Which unit type to use
    0:  remark "Which unit type to use"                              ...
    2:  set UNIT @mega                                               ...
    3:  remark "Remote vault ID (1-99); if nonzero, items are moved  param LINK_ID           = 0;            /// Remote vault ID (1-99); if nonzero, items are moved to/from this vault instead of core
    5:  set LINK_ID 0                                                ...
    6:  remark "How much of local container capacity to use, in perc param LOCAL_LIMIT       = 100;          /// How much of local container capacity to use, in percents (20-100).
    8:  set LOCAL_LIMIT 100                                          ...
    9:  remark "How much of remote container capacity to use, in per param REMOTE_LIMIT      = 100;          /// How much of remote container capacity to use, in percents (20-100).
   11:  set REMOTE_LIMIT 100                                         ...
   12:  op max .EFF_LOCAL_LIMIT LOCAL_LIMIT 20                       var EFF_LOCAL_LIMIT = max(LOCAL_LIMIT, 20);
   13:  op max .EFF_REMOTE_LIMIT REMOTE_LIMIT 20                     var EFF_REMOTE_LIMIT = max(REMOTE_LIMIT, 20);
   14:  sensor *tmp2 switch1 @enabled                                while !switch1.@enabled do
   15:  jump *label2 notEqual *tmp2 false                            ...
        label *label136                                              ...
   16:  print "Unit Transport - Single\nActivate switch to start.\n" println("Activate switch to start.");
   17:  printflush message1                                          printflush(message1);
   18:  sensor *tmp2 switch1 @enabled                                while !switch1.@enabled do
   19:  jump *label136 equal *tmp2 false                             ...
        label *label2                                                ...
   20:  sensor *tmp4 @unit @dead                                     while @unit.@dead != 0 do
   21:  jump *label5 equal *tmp4 0                                   ...
        label *label137                                              ...
   22:  set :rebindUnit.0:first_unit null                            first_unit = null;
        label *label7                                                while true do
   23:  ubind UNIT                                                   ubind(UNIT);
   24:  jump *label10 equal @unit null                               if @unit != null then
   25:  set :rebindUnit.0:first_unit @unit                           first_unit = @unit;
   26:  jump *label9 always 0 0                                      break;
        label *label10                                               if @unit != null then
   27:  print "[salmon]No unit of type "                             print($"[salmon]No unit of type $UNIT found. 1");
   28:  print UNIT                                                   ...
   29:  print " found. 1"                                            ...
   30:  printflush message1                                          printflush(message1);
   31:  jump *label7 always 0 0                                      while true do
        label *label9                                                ...
        label *label12                                               do
   32:  sensor *tmp9 @unit @controller                               if @unit.@controller == @this then
   33:  jump *label6 equal *tmp9 @this                               ...
   34:  ubind UNIT                                                   ubind(UNIT);
   35:  print "[gold]Looking for old unit..."                        print($"[gold]Looking for old unit...");
   36:  printflush message1                                          printflush(message1);
   37:  op notEqual *tmp12 @unit :rebindUnit.0:first_unit            while @unit != first_unit and first_unit.@dead == 0;
   38:  sensor *tmp13 :rebindUnit.0:first_unit @dead                 ...
   39:  op equal *tmp14 *tmp13 0                                     ...
   40:  op land *tmp15 *tmp12 *tmp14                                 ...
   41:  jump *label12 notEqual *tmp15 false                          do
        label *label18                                               while true do
   42:  ubind UNIT                                                   ubind(UNIT);
   43:  jump *label21 notEqual @unit null                            if @unit == null then
   44:  print "[salmon]No unit of type "                             print($"[salmon]No unit of type $UNIT found.");
   45:  print UNIT                                                   ...
   46:  print " found."                                              ...
   47:  jump *label22 always 0 0                                     if @unit == null then
        label *label21                                               ...
   48:  sensor *tmp18 @unit @controlled                              elsif @unit.@controlled != 0 then
   49:  jump *label17 equal *tmp18 0                                 ...
   50:  print "[salmon]Looking for a free "                          print($"[salmon]Looking for a free $UNIT...");
   51:  print UNIT                                                   ...
   52:  print "..."                                                  ...
        label *label22                                               if @unit == null then
   53:  printflush message1                                          printflush(message1);
   54:  jump *label18 always 0 0                                     while true do
        label *label17                                               findUnit();
        label *label6                                                rebindUnit();
   55:  sensor *tmp4 @unit @dead                                     while @unit.@dead != 0 do
   56:  jump *label137 notEqual *tmp4 0                              ...
        label *label5                                                ...
   57:  sensor .UNIT_CAPACITY @unit @itemCapacity                    UNIT_CAPACITY = @unit.@itemCapacity;
   58:  sensor *tmp22 @unit @speed                                   SPEED_SEC = @unit.@speed / 10;
   59:  op div .SPEED_SEC *tmp22 10                                  ...
   60:  ucontrol flag 1 0 0 0 0                                      flag(1);
        label *label25                                               while true do
   61:  set .CONTAINER null                                          CONTAINER = null;
   62:  set .DROP_TARGET null                                        DROP_TARGET = null;
   63:  set :n @links                                                n = @links;
   64:  jump *label30 lessThanEq :n 0                                while n > 0 do
        label *label134                                              ...
   65:  op sub :n :n 1                                               n = n - 1;
   66:  getlink :block :n                                            block = getlink(n);
   67:  sensor *tmp28 :block @itemCapacity                           if block.@itemCapacity > 0 then
   68:  jump *label31 lessThanEq *tmp28 0                            ...
   69:  set .DROP_TARGET .CONTAINER                                  DROP_TARGET = CONTAINER;
   70:  set .CONTAINER :block                                        CONTAINER = block;
        label *label31                                               if block.@itemCapacity > 0 then
   71:  jump *label134 greaterThan :n 0                              while n > 0 do
        label *label30                                               ...
   72:  jump *label33 notEqual .CONTAINER null                       if CONTAINER == null then
   73:  print "[salmon]No destination.\n"                            println("[salmon]No destination.");
   74:  jump *label34 always 0 0                                     if CONTAINER == null then
        label *label33                                               ...
   75:  op notEqual *tmp33 .DROP_TARGET null                         elsif (DROP_TARGET != null) and (DROP_TARGET.@itemCapacity < 300) then
   76:  sensor *tmp34 .DROP_TARGET @itemCapacity                     ...
   77:  op lessThan *tmp35 *tmp34 300                                ...
   78:  op land *tmp36 *tmp33 *tmp35                                 ...
   79:  jump *label27 equal *tmp36 false                             ...
   80:  print "Destination: "                                        print($"Destination: $CONTAINER\n");
   81:  print .CONTAINER                                             ...
   82:  print "\nItem dump: "                                        print($"Item dump: $DROP_TARGET\n");
   83:  print .DROP_TARGET                                           ...
   84:  print "\n[salmon]Item dump must be a container or a vault!"  print($"[salmon]Item dump must be a container or a vault!");
        label *label34                                               if CONTAINER == null then
   85:  printflush message1                                          printflush(message1);
   86:  jump *label25 always 0 0                                     while true do
        label *label27                                               ...
   87:  set .CORE null                                               CORE = null;
   88:  jump *label37 notEqual LINK_ID 0                             if LINK_ID == 0 then
   89:  print "[gold]Locating core..."                               print("[gold]Locating core...");
   90:  printflush message1                                          printflush(message1);
   91:  ulocate building core false @copper .CORE_X .CORE_Y 0 .CORE  CORE = ulocate(:building, :core, false, out CORE_X, out CORE_Y);
   92:  jump *label38 always 0 0                                     if LINK_ID == 0 then
        label *label37                                               ...
   93:  print "[gold]Locating vault #"                               print($"[gold]Locating vault #$LINK_ID...");
   94:  print LINK_ID                                                ...
   95:  print "..."                                                  ...
   96:  printflush message1                                          printflush(message1);
   97:  op add .QUERY_FLAG 99999900 LINK_ID                          QUERY_FLAG = 99999900 + LINK_ID;
   98:  set :flag .QUERY_FLAG                                        flag = QUERY_FLAG;
   99:  ucontrol flag .QUERY_FLAG 0 0 0 0                            flag(flag);
  100:  sensor *tmp44 @unit @dead                                    while (flag == QUERY_FLAG) and (@unit.@dead == 0) do
  101:  op equal *tmp45 *tmp44 0                                     ...
  102:  op land *tmp46 true *tmp45                                   ...
  103:  jump *label41 equal *tmp46 false                             ...
        label *label141                                              ...
  104:  ucontrol stop 0 0 0 0 0                                      stop();                       // Keep controlling the unit
  105:  sensor :flag @unit @flag                                     flag = @unit.@flag;
  106:  op equal *tmp43 :flag .QUERY_FLAG                            while (flag == QUERY_FLAG) and (@unit.@dead == 0) do
  107:  sensor *tmp44 @unit @dead                                    ...
  108:  op equal *tmp45 *tmp44 0                                     ...
  109:  op land *tmp46 *tmp43 *tmp45                                 ...
  110:  jump *label141 notEqual *tmp46 false                         ...
        label *label41                                               ...
  111:  jump *label42 equal :flag .QUERY_FLAG                        if (flag != QUERY_FLAG) then
  112:  op idiv :position :flag 100                                  position = flag \ 100;
  113:  op mod .CORE_X :position @mapw                               CORE_X = position % @mapw;
  114:  op idiv .CORE_Y :position @mapw                              CORE_Y = position \ @mapw;
  115:  ucontrol within .CORE_X .CORE_Y 8 *tmp53 0                   while (within(CORE_X, CORE_Y, RADIUS_WITHIN) == false) and (@unit.@dead == 0) do
  116:  op equal *tmp54 *tmp53 false                                 ...
  117:  sensor *tmp55 @unit @dead                                    ...
  118:  op equal *tmp56 *tmp55 0                                     ...
  119:  op land *tmp57 *tmp54 *tmp56                                 ...
  120:  jump *label46 equal *tmp57 false                             ...
        label *label142                                              ...
  121:  ucontrol approach .CORE_X .CORE_Y 6 0 0                      approach(CORE_X, CORE_Y, RADIUS_APPROACH);
  122:  ucontrol within .CORE_X .CORE_Y 8 *tmp53 0                   while (within(CORE_X, CORE_Y, RADIUS_WITHIN) == false) and (@unit.@dead == 0) do
  123:  op equal *tmp54 *tmp53 false                                 ...
  124:  sensor *tmp55 @unit @dead                                    ...
  125:  op equal *tmp56 *tmp55 0                                     ...
  126:  op land *tmp57 *tmp54 *tmp56                                 ...
  127:  jump *label142 notEqual *tmp57 false                         ...
        label *label46                                               ...
  128:  ucontrol getBlock .CORE_X .CORE_Y :b_type .CORE 0            CORE = getBlock(CORE_X, CORE_Y, out b_type);
  129:  jump *label47 equal :b_type @vault                           if b_type != @vault then
  130:  set .CORE null                                               CORE = null;
        label *label47                                               if b_type != @vault then
        label *label42                                               if (flag != QUERY_FLAG) then
        label *label38                                               if LINK_ID == 0 then
  131:  jump *label49 notEqual .CORE null                            if CORE == null then
  132:  end                                                          end();
        label *label49                                               if CORE == null then
  133:  set .SORTER sorter1                                          SORTER = sorter1;
  134:  sensor :sorter_type sorter1 @type                            sorter_type = SORTER.@type;
  135:  op notEqual *tmp65 :sorter_type @sorter                      while (sorter_type != @sorter) and (sorter_type != @inverted-sorter) do
  136:  op notEqual *tmp66 :sorter_type @inverted-sorter             ...
  137:  op land *tmp67 *tmp65 *tmp66                                 ...
  138:  jump *label53 equal *tmp67 false                             ...
        label *label140                                              ...
  139:  print "[salmon]Block sorter1 is neither a sorter, nor an inv println("[salmon]Block sorter1 is neither a sorter, nor an inverted sorter.");
  140:  jump *label54 equal .SORTER null                             if SORTER != null then
  141:  print "Block found: "                                        print("Block found: ", SORTER);
  142:  print .SORTER                                                ...
        label *label54                                               if SORTER != null then
  143:  printflush message1                                          printflush(message1);
  144:  set .SORTER sorter1                                          SORTER = sorter1;
  145:  sensor :sorter_type sorter1 @type                            sorter_type = SORTER.@type;
  146:  op notEqual *tmp65 :sorter_type @sorter                      while (sorter_type != @sorter) and (sorter_type != @inverted-sorter) do
  147:  op notEqual *tmp66 :sorter_type @inverted-sorter             ...
  148:  op land *tmp67 *tmp65 *tmp66                                 ...
  149:  jump *label140 notEqual *tmp67 false                         ...
        label *label53                                               ...
  150:  jump *label56 notEqual :sorter_type @sorter                  if (sorter_type == @sorter) then
  151:  set .SHOW_REMOTE_LEVEL true                                  SHOW_REMOTE_LEVEL = true;
  152:  set .SRC .CORE                                               SRC = CORE;
  153:  set .DST .CONTAINER                                          DST = CONTAINER;
  154:  sensor :src_capacity .CORE @itemCapacity                     src_capacity = SRC.@itemCapacity;
  155:  sensor :dst_capacity .CONTAINER @itemCapacity                dst_capacity = DST.@itemCapacity;
  156:  op sub *tmp75 100 .EFF_REMOTE_LIMIT                          LOAD_LEVEL = (src_capacity * (100 - EFF_REMOTE_LIMIT)) \ 100;
  157:  op mul *tmp76 :src_capacity *tmp75                           ...
  158:  op idiv .LOAD_LEVEL *tmp76 100                               ...
  159:  op mul *tmp78 :dst_capacity .EFF_LOCAL_LIMIT                 DROP_LEVEL = (dst_capacity * EFF_LOCAL_LIMIT) \ 100;
  160:  op idiv .DROP_LEVEL *tmp78 100                               ...
  161:  set .LOCAL_MARGIN .DROP_LEVEL                                LOCAL_MARGIN = DROP_LEVEL;
  162:  set .REMOTE_MARGIN .LOAD_LEVEL                               REMOTE_MARGIN = LOAD_LEVEL;
  163:  set .DIRECTION "[] from vault #"                             DIRECTION = (LINK_ID == 0) ? "[] from core"  : "[] from vault #";
  164:  jump *label57 notEqual LINK_ID 0                             ...
  165:  set .DIRECTION "[] from core"                                ...
  166:  jump *label57 always 0 0                                     if (sorter_type == @sorter) then
        label *label56                                               ...
  167:  op greaterThan .SHOW_REMOTE_LEVEL LINK_ID 0                  SHOW_REMOTE_LEVEL = LINK_ID > 0;
  168:  set .SRC .CONTAINER                                          SRC = CONTAINER;
  169:  set .DST .CORE                                               DST = CORE;
  170:  sensor :src_capacity .CONTAINER @itemCapacity                src_capacity = SRC.@itemCapacity;
  171:  sensor :dst_capacity .CORE @itemCapacity                     dst_capacity = DST.@itemCapacity;
  172:  op sub *tmp85 100 .EFF_LOCAL_LIMIT                           LOAD_LEVEL = (src_capacity * (100 - EFF_LOCAL_LIMIT)) \ 100;
  173:  op mul *tmp86 :src_capacity *tmp85                           ...
  174:  op idiv .LOAD_LEVEL *tmp86 100                               ...
  175:  op mul *tmp88 :dst_capacity .EFF_REMOTE_LIMIT                DROP_LEVEL = (dst_capacity * EFF_REMOTE_LIMIT) \ 100 + ((LINK_ID == 0) * UNIT_CAPACITY);
  176:  op idiv *tmp89 *tmp88 100                                    ...
  177:  op equal *tmp90 LINK_ID 0                                    ...
  178:  op mul *tmp91 *tmp90 .UNIT_CAPACITY                          ...
  179:  op add .DROP_LEVEL *tmp89 *tmp91                             ...
  180:  set .LOCAL_MARGIN .LOAD_LEVEL                                LOCAL_MARGIN = LOAD_LEVEL;
  181:  set .REMOTE_MARGIN .DROP_LEVEL                               REMOTE_MARGIN = DROP_LEVEL;
  182:  set .DIRECTION "[] to vault #"                               DIRECTION = (LINK_ID == 0) ? "[] to core" : "[] to vault #";
  183:  jump *label61 notEqual LINK_ID 0                             ...
  184:  set .DIRECTION "[] to core"                                  ...
        label *label61                                               ...
        label *label57                                               if (sorter_type == @sorter) then
  185:  set *tmp96 LINK_ID                                           LINK_TXT = (LINK_ID == 0) ? ""  : LINK_ID;
  186:  jump *label63 notEqual LINK_ID 0                             ...
  187:  set *tmp96 ""                                                ...
        label *label63                                               ...
  188:  sensor .SRC_X .SRC @x                                        SRC_X = SRC.@x;
  189:  sensor .SRC_Y .SRC @y                                        SRC_Y = SRC.@y;
  190:  sensor .DST_X .DST @x                                        DST_X = DST.@x;
  191:  sensor .DST_Y .DST @y                                        DST_Y = DST.@y;
  192:  jump *label64 notEqual .DROP_TARGET null                     if DROP_TARGET == null then
  193:  set .DROP_TARGET .CORE                                       DROP_TARGET = CORE;
  194:  set .DROP_X .CORE_X                                          DROP_X = CORE_X;
  195:  set .DROP_Y .CORE_Y                                          DROP_Y = CORE_Y;
  196:  jump *label65 always 0 0                                     if DROP_TARGET == null then
        label *label64                                               ...
  197:  sensor .DROP_X .DROP_TARGET @x                               DROP_X = DROP_TARGET.@x;
  198:  sensor .DROP_Y .DROP_TARGET @y                               DROP_Y = DROP_TARGET.@y;
        label *label65                                               if DROP_TARGET == null then
  199:  set .LAST_ITEM @mono                                         LAST_ITEM = @mono;      // Must not be null
  200:  set :loop_time 0                                             loop_time = 0;
  201:  set :state 1                                                 state = S_UNLOAD;
  202:  ucontrol stop 0 0 0 0 0                                      stop();
        label *label66                                               while true do
  203:  set :start @time                                             start = @time;
  204:  sensor *tmp106 @unit @dead                                   if (@unit.@dead == 0) <= (@unit.@controller != @this) then
  205:  op equal *tmp107 *tmp106 0                                   ...
  206:  sensor *tmp108 @unit @controller                             ...
  207:  op notEqual *tmp109 *tmp108 @this                            ...
  208:  jump *label69 greaterThan *tmp107 *tmp109                    ...
        label *label72                                               while true do
  209:  ubind UNIT                                                   ubind(UNIT);
  210:  jump *label75 notEqual @unit null                            if @unit == null then
  211:  print "[salmon]No unit of type "                             print($"[salmon]No unit of type $UNIT found.");
  212:  print UNIT                                                   ...
  213:  print " found."                                              ...
  214:  jump *label76 always 0 0                                     if @unit == null then
        label *label75                                               ...
  215:  sensor *tmp114 @unit @controlled                             elsif @unit.@controlled != 0 then
  216:  jump *label71 equal *tmp114 0                                ...
  217:  print "[salmon]Looking for a free "                          print($"[salmon]Looking for a free $UNIT...");
  218:  print UNIT                                                   ...
  219:  print "..."                                                  ...
        label *label76                                               if @unit == null then
  220:  printflush message1                                          printflush(message1);
  221:  jump *label72 always 0 0                                     while true do
        label *label71                                               findUnit();
  222:  ucontrol flag 1 0 0 0 0                                      flag(1);            // Mark unit as active
  223:  set :state 1                                                 state = S_UNLOAD;   // We'll unload our unit first
        label *label69                                               if (@unit.@dead == 0) <= (@unit.@controller != @this) then
  224:  sensor .ITEM .SORTER @config                                 ITEM = SORTER.@config;
  225:  jump *label79 equal .ITEM .LAST_ITEM                         if ITEM != LAST_ITEM then
  226:  jump *label83 notEqual .ITEM null                            while ITEM == null do
        label *label135                                              ...
  227:  print "[salmon]No item type selected for transport."         print("[salmon]No item type selected for transport.");
  228:  printflush message1                                          printflush(message1);
  229:  sensor .ITEM .SORTER @config                                 ITEM = SORTER.@config;
  230:  jump *label135 equal .ITEM null                              while ITEM == null do
        label *label83                                               ...
  231:  set .LAST_ITEM .ITEM                                         LAST_ITEM = ITEM;
  232:  set :state 1                                                 state = S_UNLOAD;
        label *label79                                               if ITEM != LAST_ITEM then
  233:  set :show_state 0                                            show_state = S_UNUSED;
  234:  jump *label84 notEqual :state 1                              if state == S_UNLOAD then
  235:  sensor *tmp124 @unit @firstItem                              if @unit.@firstItem == ITEM then
  236:  jump *label86 notEqual *tmp124 .ITEM                         ...
  237:  set :state 3                                                 state = S_APPROACH_DST;
  238:  jump *label87 always 0 0                                     if @unit.@firstItem == ITEM then
        label *label86                                               ...
  239:  sensor *tmp127 @unit @totalItems                             elsif @unit.@totalItems == 0 then
  240:  jump *label88 notEqual *tmp127 0                             ...
  241:  set :state 2                                                 state = S_APPROACH_SRC;
  242:  jump *label89 always 0 0                                     elsif @unit.@totalItems == 0 then
        label *label88                                               ...
  243:  set .MSG "\nUnloading previous items: [green]"               MSG = "\nUnloading previous items: [green]";
  244:  ucontrol approach .DROP_X .DROP_Y 6 0 0                      approach(DROP_X, DROP_Y, RADIUS_APPROACH);
  245:  ucontrol within .DROP_X .DROP_Y 8 *tmp130 0                  if within(DROP_X, DROP_Y, RADIUS_WITHIN) then
  246:  jump *label90 equal *tmp130 false                            ...
  247:  ucontrol itemDrop .DROP_TARGET .UNIT_CAPACITY 0 0 0          itemDrop(DROP_TARGET, UNIT_CAPACITY);
        label *label90                                               if within(DROP_X, DROP_Y, RADIUS_WITHIN) then
        label *label89                                               elsif @unit.@totalItems == 0 then
        label *label87                                               if @unit.@firstItem == ITEM then
        label *label84                                               if state == S_UNLOAD then
  248:  jump *label92 notEqual :state 2                              if state == S_APPROACH_SRC then
  249:  ucontrol within .SRC_X .SRC_Y 8 *tmp134 0                    if within(SRC_X, SRC_Y, RADIUS_WITHIN) then
  250:  jump *label94 equal *tmp134 false                            ...
  251:  sensor *tmp136 .SRC .ITEM                                    max_load = max(SRC.sensor(ITEM) - LOAD_LEVEL, 0);
  252:  op sub *tmp137 *tmp136 .LOAD_LEVEL                           ...
  253:  op max :max_load *tmp137 0                                   ...
  254:  ucontrol itemTake .SRC .ITEM :max_load 0 0                   itemTake(SRC, ITEM, max_load);
  255:  sensor *tmp139 @unit @totalItems                             if @unit.@totalItems >= UNIT_CAPACITY then
  256:  jump *label96 lessThan *tmp139 .UNIT_CAPACITY                ...
  257:  set :state 3                                                 state = S_APPROACH_DST;
  258:  jump *label95 always 0 0                                     if @unit.@totalItems >= UNIT_CAPACITY then
        label *label96                                               ...
  259:  set .MSG "\nLoading items: [green]"                          MSG = "\nLoading items: [green]";
  260:  jump *label95 always 0 0                                     if within(SRC_X, SRC_Y, RADIUS_WITHIN) then
        label *label94                                               ...
  261:  ucontrol approach .SRC_X .SRC_Y 6 0 0                        approach(SRC_X, SRC_Y, RADIUS_APPROACH);
  262:  set .MSG "\nGoing to source: [green]"                        MSG = "\nGoing to source: [green]";
  263:  set :show_state 2                                            show_state = S_APPROACH_SRC;
        label *label95                                               if within(SRC_X, SRC_Y, RADIUS_WITHIN) then
        label *label92                                               if state == S_APPROACH_SRC then
  264:  jump *label98 notEqual :state 3                              if state == S_APPROACH_DST then
  265:  ucontrol within .DST_X .DST_Y 8 *tmp144 0                    if within(DST_X, DST_Y, RADIUS_WITHIN) then
  266:  jump *label100 equal *tmp144 false                           ...
  267:  sensor *tmp146 .DST .ITEM                                    max_drop = max(DROP_LEVEL - DST.sensor(ITEM), 0);
  268:  op sub *tmp147 .DROP_LEVEL *tmp146                           ...
  269:  op max :max_drop *tmp147 0                                   ...
  270:  ucontrol itemDrop .DST :max_drop 0 0 0                       itemDrop(DST, max_drop);
  271:  sensor *tmp149 @unit @totalItems                             if @unit.@totalItems <= 0 then
  272:  jump *label102 greaterThan *tmp149 0                         ...
  273:  set :state 2                                                 state = S_APPROACH_SRC;
  274:  ucontrol approach .SRC_X .SRC_Y 6 0 0                        approach(SRC_X, SRC_Y, RADIUS_APPROACH);
  275:  jump *label101 always 0 0                                    if @unit.@totalItems <= 0 then
        label *label102                                              ...
  276:  set .MSG "\nDropping items: [green]"                         MSG = "\nDropping items: [green]";
  277:  jump *label101 always 0 0                                    if within(DST_X, DST_Y, RADIUS_WITHIN) then
        label *label100                                              ...
  278:  ucontrol approach .DST_X .DST_Y 6 0 0                        approach(DST_X, DST_Y, RADIUS_APPROACH);
  279:  set .MSG "\nGoing to destination: [green]"                   MSG = "\nGoing to destination: [green]";
  280:  set :show_state 3                                            show_state = S_APPROACH_DST;
        label *label101                                              if within(DST_X, DST_Y, RADIUS_WITHIN) then
        label *label98                                               if state == S_APPROACH_DST then
  281:  print "Moving [green]"                                       print($"Moving [green]$ITEM$DIRECTION$LINK_TXT\n");
  282:  print .ITEM                                                  ...
  283:  print .DIRECTION                                             ...
  284:  print *tmp96                                                 ...
  285:  sensor *tmp153 .CONTAINER .ITEM                              print($"Local items: [gold]$[]", CONTAINER.sensor(ITEM));
  286:  print "\nLocal items: [gold]"                                ...
  287:  print *tmp153                                                ...
  288:  print "[]"                                                   ...
  289:  jump *label106 greaterThanEq .EFF_LOCAL_LIMIT 100            if EFF_LOCAL_LIMIT < 100 then
  290:  print " (limit [orange]"                                     print($" (limit [orange]$LOCAL_MARGIN[])");
  291:  print .LOCAL_MARGIN                                          ...
  292:  print "[])"                                                  ...
        label *label106                                              if EFF_LOCAL_LIMIT < 100 then
  293:  jump *label108 equal .SHOW_REMOTE_LEVEL false                if SHOW_REMOTE_LEVEL then
  294:  sensor *tmp157 .CORE .ITEM                                   print($"\nRemote items: [gold]$[]", CORE.sensor(ITEM));
  295:  print "\nRemote items: [gold]"                               ...
  296:  print *tmp157                                                ...
  297:  print "[]"                                                   ...
  298:  jump *label110 greaterThanEq .EFF_REMOTE_LIMIT 100           if EFF_REMOTE_LIMIT < 100 then
  299:  print " (limit [orange]"                                     print($" (limit [orange]$REMOTE_MARGIN[])");
  300:  print .REMOTE_MARGIN                                         ...
  301:  print "[])"                                                  ...
        label *label110                                              if EFF_REMOTE_LIMIT < 100 then
        label *label108                                              if SHOW_REMOTE_LEVEL then
  302:  sensor *tmp160 @unit @totalItems                             println(MSG, @unit.@totalItems, "[]");
  303:  print .MSG                                                   ...
  304:  print *tmp160                                                ...
  305:  print "[]\n"                                                 ...
  306:  jump *label114 notEqual :show_state 2                        if show_state == S_APPROACH_SRC then
  307:  sensor *tmp164 @unit @x                                      print($"[]  arriving in [gold]$ sec[]\n", len(SRC_X - @unit.@x, SRC_Y - @unit.@y) \ SPEED_SEC / 10);
  308:  op sub *tmp165 .SRC_X *tmp164                                ...
  309:  sensor *tmp166 @unit @y                                      ...
  310:  op sub *tmp167 .SRC_Y *tmp166                                ...
  311:  op len *tmp168 *tmp165 *tmp167                               ...
  312:  op idiv *tmp169 *tmp168 .SPEED_SEC                           ...
  313:  op div *tmp170 *tmp169 10                                    ...
  314:  print "[]  arriving in [gold]"                               ...
  315:  print *tmp170                                                ...
  316:  print " sec[]\n"                                             ...
  317:  jump *label115 always 0 0                                    if show_state == S_APPROACH_SRC then
        label *label114                                              ...
  318:  jump *label116 notEqual :show_state 3                        elsif show_state == S_APPROACH_DST then
  319:  sensor *tmp173 @unit @x                                      print($"[]  arriving in [gold]$ sec[]\n", len(DST_X - @unit.@x, DST_Y - @unit.@y) \ SPEED_SEC / 10);
  320:  op sub *tmp174 .DST_X *tmp173                                ...
  321:  sensor *tmp175 @unit @y                                      ...
  322:  op sub *tmp176 .DST_Y *tmp175                                ...
  323:  op len *tmp177 *tmp174 *tmp176                               ...
  324:  op idiv *tmp178 *tmp177 .SPEED_SEC                           ...
  325:  op div *tmp179 *tmp178 10                                    ...
  326:  print "[]  arriving in [gold]"                               ...
  327:  print *tmp179                                                ...
  328:  print " sec[]\n"                                             ...
        label *label116                                              elsif show_state == S_APPROACH_DST then
        label *label115                                              if show_state == S_APPROACH_SRC then
  329:  op floor *tmp180 :loop_time 0                                println("[lightgray]Loop time: ", floor(loop_time), " ms[]");
  330:  print "[lightgray]Loop time: "                               ...
  331:  print *tmp180                                                ...
  332:  print " ms[]\n"                                              ...
  333:  printflush message1                                          printflush(message1);
  334:  sensor *tmp181 switch1 @enabled                              if switch1.@enabled == 0 then break; end;
  335:  jump *label68 equal *tmp181 0                                ...
  336:  sensor *tmp184 .SRC @dead                                    if SRC.@dead != 0 then break; end;
  337:  jump *label68 notEqual *tmp184 0                             ...
  338:  sensor *tmp187 .DST @dead                                    if DST.@dead != 0 then break; end;
  339:  jump *label68 notEqual *tmp187 0                             ...
  340:  sensor *tmp190 .SORTER @dead                                 if SORTER.@dead != 0 then break; end;
  341:  jump *label68 notEqual *tmp190 0                             ...
  342:  op sub :loop_time @time :start                               loop_time = @time - start;
  343:  jump *label66 always 0 0                                     while true do
        label *label68                                               ...
  344:  sensor *tmp194 .SORTER @dead                                 while SORTER.@dead == 0 do
  345:  jump *label128 notEqual *tmp194 0                            ...
        label *label138                                              ...
  346:  print "[salmon]sorter1 is missing!\n[gold]Please place and l println("[gold]Please place and link sorter or inverted sorter to the processor.");
  347:  printflush message1                                          printflush(message1);
  348:  printflush message2                                          printflush(message2);
  349:  sensor *tmp194 sorter1 @dead                                 while SORTER.@dead == 0 do
  350:  jump *label138 equal *tmp194 0                               ...
        label *label128                                              ...
  351:  sensor *tmp196 .SRC @dead                                    if SRC.@dead != 0 or DST.@dead != 0 then
  352:  op notEqual *tmp197 *tmp196 0                                ...
  353:  sensor *tmp198 .DST @dead                                    ...
  354:  op notEqual *tmp199 *tmp198 0                                ...
  355:  op or *tmp200 *tmp197 *tmp199                                ...
  356:  jump __start__ equal *tmp200 false                           ...
  357:  control enabled switch1 false 0 0 0                          switch1.enabled = false;
  358:  sensor *tmp203 switch1 @enabled                              while !switch1.@enabled do
  359:  jump __start__ notEqual *tmp203 false                        ...
        label *label139                                              ...
  360:  print "[salmon]Local or remote container became invalid.\n[g println("[gold]Please fix and press button to reinitialize.");
  361:  printflush message1                                          printflush(message1);
  362:  printflush message2                                          printflush(message2);
  363:  sensor *tmp203 switch1 @enabled                              while !switch1.@enabled do
  364:  jump *label139 equal *tmp203 false                           ...


Performance: parsed in 273 ms, compiled in 208 ms, optimized in 554 ms, run in 15 ms.

Compiled mlog code was sent to Mlog Watcher.
  No response from Mlog Watcher - maybe an old version is installed?

Program output (11 steps):
The program didn't generate any output.
Execution exception at instruction 14: sensor *tmp2 switch1 @enabled:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
