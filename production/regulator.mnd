// Regulates production or consumption by switching devices on or off.
// Linked blocks are identified and used according to their type as follows:
// Messages are printed to the first message block found,
// reset switch is the first switch block found; reset causes complete reconfiguration (new scanning of all blocks),
// unloader, sorter or inverted sorter, if configured, is used to specify item to measure in item containers.
// The first found container/liquid-tank/battery/power node is used for level measurement
// All devices linked after the container are switched on or off according to the fullness of the container.
// Linking inverted sorter (regardless of its configuration) inverts the activation logic:
// devices are activated when the level is high and deactivated when it is low.
// Level is measured as a percentage of total capacity filled by materials.

#set syntax = strict;

param PCT_LOW = 60;
param PCT_HIGH = 80;

// Linked blocks
noinit var message, container, sorter, switch;

// Properties corresponding to maximum capacity and used capacity
noinit var maximum, measure;

noinit var links;           // Number of linked blocks found
noinit var first;           // The first link after a container
noinit var inverted;        // TRue for inverted operation (inverted sorter)
noinit var active;          // True when blocks are active (enabled)
noinit var activeText;      // Text to print (depending on active)

noinit var cycles;
var state = false;

begin
    initialize();

    switch.enabled = 0;
    while switch.@enabled == 0 do
        var start = @time;
    
        // Reset when we lose anything
        if container.@dead          then end(); end;
        if message.@dead            then end(); end;
        if switch.@dead             then end(); end;
        if sorter and sorter.@dead  then end(); end;
        if links != @links          then end(); end;

        var amount;
        var item = sorter.@config;
        if item == null || measure != @totalItems then
            // measure != @totalItems: the container doesn't contain items
            item = measure;
            print($"Measuring [gold]total[] in $container");
            amount = container.sensor(measure);
        else
            print($"Measuring [gold]$item[] in $container");
            amount = container.sensor(item);
        end;

        var pct = (100 * amount) \ container.sensor(maximum);
    
        if pct <= PCT_LOW then
            setState(true);
        elsif pct >= PCT_HIGH then
            setState(false);
        end;
    
        print($"\nLevel: [gold]$pct%[]");
        if inverted then
            print($"\nActivate above [green]$PCT_HIGH%[]");
            print($"\nDeactivate below [salmon]$PCT_LOW%[]");
        else
            print($"\nActivate below [green]$PCT_LOW%[]");
            print($"\nDeactivate above [salmon]$PCT_HIGH%[]");
        end;
    
        print(activeText);

        for var n in first ... links do
            var block = getlink(n);
            block.enabled = active;
            print("\n    ", block);
        end;

        print($"[]\n# of cycles: $cycles");
        print($"\n[lightgray]Loop: $ ms", floor(@time - start));
        printflush(message);
    end;
end;

inline void initialize()
    do
        var repeat = false;
        println("Configuring regulator...");
        links = @links;
        for var n in 0 ... links descending do
            var block = getlink(n);
            println("Found: ", block);
            case block.@type
                when @message then
                    message = block;
                when @switch then
                    switch = block;
                when @sorter, @inverted-sorter, @unloader then
                    sorter = block;
                when @vault, @container, @core-shard, @core-foundation, @core-nucleus then
                    container = block;
                    measure = @totalItems;
                    maximum = @itemCapacity;
                    first = n + 1;
                when @liquid-tank, @liquid-container, @liquid-router then
                    container = block;
                    measure = @totalLiquids;
                    maximum = @liquidCapacity;
                    first = n + 1;
                when @battery, @battery-large then
                    container = block;
                    measure = @totalPower;
                    maximum = @powerCapacity;
                    first = n + 1;
                when @power-node, @power-node-large, @surge-tower then
                    container = block;
                    measure = @powerNetStored;
                    maximum = @powerNetCapacity;
                    first = n + 1;
            end;
        end;
    
        println("Message: ", message);
        println("Switch: ", switch);
        println("Sorter: ", sorter);
        println("Container: ", container);
        println("First index: ", first);
        if message == null then println("No message."); repeat = true; end;
        if switch == null then println("No switch."); repeat = true; end;
        if container == null then println("No container."); repeat = true; end;
        printflush(message);
    while repeat;
    
    // Reset text buffer
    printflush(null);
    
    validate(PCT_LOW >= 0 and PCT_LOW <= 100 and PCT_LOW === floor(PCT_LOW), "PCT_LOW must be an integer between 0 to 100.");
    validate(PCT_HIGH >= 0 and PCT_HIGH <= 100 and PCT_HIGH === floor(PCT_HIGH), "PCT_HIGH must be an integer between 0 to 100.");
    validate(PCT_LOW < PCT_HIGH, "PCT_LOW must be less than PCT_HIGH.");

    inverted = sorter.@type == @inverted-sorter;
    setState(true);
end;

inline void setState(newState)
    if state != newState then
        state = newState;
        cycles++;
        active = inverted ^ state;
        activeText = active ? "\nCurrently active:[green]" : "\nCurrently inactive:[salmon]";
    end;
end;

inline void validate(condition, text)
    if !condition then
        print(text);
        printflush(message);
        stopProcessor();
    end;
end;
