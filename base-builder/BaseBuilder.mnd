#set target = 8;
#set syntax = strict;
//#set sort-variables;

require units;
require "Links.mnd";
require "Common.mnd";
require "Display.mnd" remote display;
require "OreLocator.mnd" remote oreLocator;
require "CoreController.mnd" remote processor;
require "MonoController.mnd" remote monoController;
require "PolyController.mnd" remote polyController;
require "BuilderController.mnd" remote builderController;

// At this point, we're only using a poly
const capacity = 28;

remote var ERROR = "";

void error(error)
    ERROR = error;
    stopProcessor();
end;

// Built blocks
var
    titaniumDrill = null,
    thoriumDrill = null,
    thoriumBattery = null,
    thoriumContainer = null,
    thoriumGenerator = null;

noinit var
    core, coreX, coreY,
    scrap,
    sandContainer,
    builder;

// BUILDING OPERATIONS

def buildRemoteBlockLocal(cfg, x, y)
    builderController.buildRemoteBlock(cfg, x, y);
end;

// Builds a block
def buildBlockFromCfgLocal(cfg, config)
    return builderController.buildBlockFromCfg(cfg, config);
end;

def buildBlockFromCfgLocal(cfg)
    return builderController.buildBlockFromCfg(cfg, null);
end;


def buildFirstTitaniumDrill(cfg)
    builderController.meetTargetCfg(cfg, false);

    display.nextBlock = @ore-titanium;
    var dx, dy;
    var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
    if !result then error("Cannot locate spot for titanium drill"); end;
    display.nextBlock = @pneumatic-drill;

    return builderController.buildFirstTitaniumDrillAt(dx, dy);
end;

void blocksBuildTitaniumDrills()
    ubind(@flare);

    var current = oreLocator.locations;
    async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));

    // Bind the main builder back
    ubind(builder);

    builderController.buildTitaniumDrills(current);
    async(oreLocator.stopLocation());
end;


void buildThoriumDrill()
    // We're using the main builder for this, and calling synchronously
    oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);

    builderController.meetTargetCfg(LASER_DRILL, false);

    var result = await(oreLocator.layoutThoriumDrill);
    if !result then error("Cannot locate spot for thorium drill"); end;
    thoriumDrill = builderController.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);

    buildRemoteBlockLocal(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
    buildRemoteBlockLocal(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
    thoriumGenerator = buildRemoteBlockLocal(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
    buildRemoteBlockLocal(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
    buildRemoteBlockLocal(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
    buildRemoteBlockLocal(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
    thoriumBattery = buildRemoteBlockLocal(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
    thoriumContainer = buildRemoteBlockLocal(CONTAINER, oreLocator.containerX, oreLocator.containerY);
    if thoriumContainer == null then thoriumContainer = thoriumDrill; end;

    display.thoriumDrill = thoriumDrill;
    display.thoriumContainer = thoriumContainer;

    builderController.thoriumBattery = thoriumBattery;
    builderController.thoriumContainer = thoriumContainer;
    builderController.thoriumGenerator = thoriumGenerator;

    polyController.setThoriumContainer(thoriumContainer);
end;

// MAIN

void buildUnits()
    builderController.meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
    display.totalTargets = 0;
    display.nextBlock = null;
    processor.siliconReserve = 0;
    processor.graphiteReserve = 0;
end;

begin
    // INITIALIZATION

    do
        builder = ubind(@poly);
        core = ulocate(:building, :core, false, out coreX, out coreY);
    while core == null;

    scrap = !ulocate(:ore, @sand);
    display.scrap = scrap;
    builderController.scrap = scrap;
    monoController.scrap = scrap;

    // PHASE 0: BASIC BLOCKS

    buildBlockFromCfgLocal(PRESS);
    buildBlockFromCfgLocal(BATTERY1);
    buildBlockFromCfgLocal(BATTERY2);
    buildBlockFromCfgLocal(GENERATOR);

    builderController.powerTarget = 400;

    sandContainer = core;
    if scrap then
        sandContainer = buildBlockFromCfgLocal(PULVERIZER1);
        builderController.sandContainer = sandContainer;
        buildBlockFromCfgLocal(OVERFLOW_GATE_A);
        buildBlockFromCfgLocal(POWER_NODE_A);
    end;

    buildBlockFromCfgLocal(SMELTER);
    buildBlockFromCfgLocal(INVERTED_SORT1);
    titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
    display.titaniumDrill = titaniumDrill;
    builderController.titaniumDrill = titaniumDrill;

    if scrap then
        buildBlockFromCfgLocal(UNLOADER_A);
        sandContainer = buildBlockFromCfgLocal(CONTAINER_A);
        builderController.sandContainer = sandContainer;
        buildBlockFromCfgLocal(PULVERIZER2);
        buildBlockFromCfgLocal(OVERFLOW_GATE_B);
        buildBlockFromCfgLocal(OVERFLOW_GATE_C);
    end;
    monoController.sandContainer = sandContainer;

    buildBlockFromCfgLocal(INVERTED_SORT2);
    buildBlockFromCfgLocal(OVERFLOW_GATE1);
    buildBlockFromCfgLocal(UNLOADER1);
    builderController.graphiteSurplus = 80;

    // Build and initialize base controller
    buildBlockFromCfgLocal(PROCESSOR, coreControllerConfig);
    processor.timer = timer;
    processor.display = display;
    processor.core = core;
    processor.bank = bank1;

    for var block in BLOCKS[0 ... 10] do
        processor.write(@this.read(block), block);
    end;
    processor.write(@this.read(UNLOADER_A), UNLOADER_A);

    buildBlockFromCfgLocal(POWER_NODE);
    buildBlockFromCfgLocal(UNLOADER2);
    buildBlockFromCfgLocal(OVERFLOW_GATE3);

    buildBlockFromCfgLocal(AIR_FACTORY);

    // PHASE 1: BUILDING UNITS

    setFlareTarget(1);
    setMonoTarget(5);
    processor.pressTarget = 85;
    processor.smelterTarget = 150;
    processor.kilnTarget = 30;
    builderController.siliconSurplus = 20;
    builderController.leadSurplus = 2;

    buildUnits();
    do
        builderController.supplyBase();

        // We're low on power: the air units might not get built in time
        // Go on building additional power reserves yourself.
        if battery1.@totalPower < 300 then break; end;
    while processor.monos < 3;

    // Build stock
    builderController.siliconSurplus = 65;

    // Kiln - needed for metaglass
    buildBlockFromCfgLocal(UNLOADER3);
    buildBlockFromCfgLocal(INVERTED_SORT3);
    buildBlockFromCfgLocal(KILN);

    // Steam generator
    buildBlockFromCfgLocal(LIQUID_CONTAINER);
    buildBlockFromCfgLocal(WATER_EXT);
    buildBlockFromCfgLocal(STEAM_GEN);

    buildBlockFromCfgLocal(MULTIPRESS);
    builderController.graphiteSurplus = 200;

    buildBlockFromCfgLocal(SMELTER2);
    if scrap then
        buildBlockFromCfgLocal(PULVERIZER3);
        buildBlockFromCfgLocal(PULVERIZER4);
        polyController.setScrapContainer(sandContainer);
    end;

    // POLYS
    buildBlockFromCfgLocal(UNLOADER4);
    buildBlockFromCfgLocal(INVERTED_SORT4);
    buildBlockFromCfgLocal(ADDITIVE_REC);

    // Even more stock
    builderController.siliconSurplus = 1000;
    builderController.siliconMonoSurplus = 20;
    builderController.metaglassSurplus = 100;

    setMonoTarget(4);
    setPolyTarget(3);
    buildUnits();

    while processor.polys < 2 do
        builderController.supplyBase();
    end;

    setFlareTarget(2);
    while processor.flares < 2 do
        builderController.supplyBase();
    end;

    // Build more titanium drills now
    // The base can already be fully served by monos and polys,
    // the main builder no longer needs to be occupied by supplying base
    // Note: display three concurrent goals
    display.nextBlock = @ore-titanium;
    blocksBuildTitaniumDrills();
    display.nextBlock = null;

    builderController.graphiteSurplus = 10;
    builderController.metaglassSurplus = 50;

    display.nextBlock = @ore-thorium;
    buildThoriumDrill();
    display.nextBlock = null;

    while processor.polys < 3 do
        builderController.supplyBase();
    end;

    setMonoTarget(4 + scrap);

    processor.powerTarget = 3209 + 700 * scrap;
    builderController.siliconMonoSurplus = 120;
    builderController.leadSurplus = 0;

    buildBlockFromCfgLocal(MULTIPLICATIVE_REC);

    builderController.metaglassSurplus = 10;
    setPolyTarget(0);
    setFlareTarget(0);
    setMegaTarget(1);
    buildUnits();

    var tmp = processor.polys - 1;
    processor.polyTarget = tmp;
    processor.polys = tmp;
    display.polys = tmp;
    var x = multiplicative_rec.@x;
    var y = multiplicative_rec.@y;
    do
        move(x, y);
        payEnter();
    while !processor.megas;

    stopAll();
end;

inline void setFlareTarget(target)
    processor.flareTarget = target;
end;

inline void setMonoTarget(target)
    processor.monoTarget = target;
end;

inline void setPolyTarget(target)
    processor.polyTarget = target;
end;

inline void setMegaTarget(target)
    processor.megaTarget = target;
end;

void stopAll()
    processor.finished = true;
    timer.enabled = false;
    flareController.enabled = false;
    monoController.enabled = false;
    polyController.enabled = false;
    oreLocator.enabled = false;
    builderController.enabled = false;
    measurements.enabled = false;

    flagUnits(@mega);
    flagUnits(@poly);
    flagUnits(@mono);
    flagUnits(@flare);

    while true do
        lineUpUnits(coreY + 6, @mega);
        lineUpUnits(coreY + 2, @poly);
        lineUpUnits(coreY - 2, @mono);
        lineUpUnits(coreY - 6, @flare);
    end;
end;

void flagUnits(unit)
    var firstUnit;
    do
        firstUnit = ubind(unit);
    while firstUnit == null;

    var x = coreX + 8;
    do
        flag(x);
        x += 4;
        ubind(unit);
    while @unit != firstUnit;
end;

void lineUpUnits(y, unit)
    var firstUnit = ubind(unit);
    do
        var x = @unit.@flag;
        itemDrop(@air, 1000);
        move(x, y);
        if @unit.@mining then stop(); end;
        ubind(unit);
    while @unit != firstUnit;
end;
