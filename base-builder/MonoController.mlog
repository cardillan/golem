set .min 0
set .minOre null
set copper @ore-copper
set scrap @ore-scrap
set lead @ore-lead
set sand @sand-floor
set *signature "0:v1"
ubind @mono
set :backgroundProcess:firstUnit @unit
ulocate building core false @copper .coreX .coreY 0 .core
jump 7 equal .core null
set :backgroundProcess:runningCount 0
ubind @mono
sensor *tmp4 :backgroundProcess:firstUnit @dead
select :backgroundProcess:firstUnit notEqual *tmp4 false @unit :backgroundProcess:firstUnit
jump 39 notEqual @unit :backgroundProcess:firstUnit
printflush message1
sensor *tmp9 .core @lead
op sub :backgroundProcess:lead *tmp9 .leadTarget
sensor *tmp11 .sandContainer @sand
sensor *tmp12 .sandContainer @scrap
op add *tmp13 *tmp11 *tmp12
op sub :backgroundProcess:sand *tmp13 .sandTarget
sensor *tmp15 .core @copper
op sub :backgroundProcess:copper *tmp15 .copperTarget
op min *tmp17 :backgroundProcess:lead :backgroundProcess:sand
op min *tmp17 *tmp17 :backgroundProcess:copper
select *tmp88 equal *tmp17 :backgroundProcess:lead @lead @copper
select *tmp19 equal *tmp17 :backgroundProcess:sand @sand *tmp88
select *tmp89 equal *tmp19 @sand @scrap *tmp19
select .minOre notEqual .scrap false *tmp89 *tmp19
print "minOre:{0}\n"
format .minOre
op mul *tmp25 10 :backgroundProcess:runningCount
op add .min *tmp17 *tmp25
set .count :backgroundProcess:runningCount
set :backgroundProcess:runningCount 2
sensor .sandX .sandContainer @x
sensor .sandY .sandContainer @y
op add :backgroundProcess:runningCount :backgroundProcess:runningCount 1
sensor :backgroundProcess:flag @unit @flag
print "Unit flag: {0}\n"
format :backgroundProcess:flag
jump 63 notEqual :backgroundProcess:flag 0
sensor *tmp32 @unit @firstItem
jump 49 equal *tmp32 null
ucontrol itemDrop @air 20 0 0 0
sensor *tmp35 @unit @firstItem
jump 12 notEqual *tmp35 null
ulocate ore core true .minOre :findOreToMine:x :findOreToMine:y 0 0
ucontrol approach :findOreToMine:x :findOreToMine:y 7 0 0
ucontrol mine :findOreToMine:x :findOreToMine:y 0 0 0
op mul *tmp40 :findOreToMine:x 1000
op add *tmp41 *tmp40 :findOreToMine:y
op mul *tmp42 *tmp41 16
sensor *tmp43 .minOre @id
op add *tmp44 *tmp42 *tmp43
ucontrol flag *tmp44 0 0 0 0
print "Found {0} at {0}, {0}\n"
format .minOre
format :findOreToMine:x
format :findOreToMine:y
jump 12 always 0 0
jump 78 notEqual :backgroundProcess:flag 1
print "Returning ore"
sensor *tmp47 @unit @firstItem
jump 70 notEqual *tmp47 @scrap
ucontrol approach .sandX .sandY 7 0 0
ucontrol itemDrop .sandContainer 20 0 0 0
jump 72 always 0 0
ucontrol approach .coreX .coreY 7 0 0
ucontrol itemDrop .core 20 0 0 0
sensor *tmp50 @unit @firstItem
jump 76 notEqual *tmp50 null
print " (finished)\n"
ucontrol flag 0 0 0 0 0
print "\n"
jump 12 always 0 0
print "Mining "
op mod *tmp53 :backgroundProcess:flag 16
lookup item :mine:ore *tmp53
printchar :mine:ore
op idiv :mine:flag :backgroundProcess:flag 16
op mod :mine:y :mine:flag 1000
op idiv :mine:x :mine:flag 1000
sensor *tmp57 :mine:ore @name
read :mine:floorOre @this *tmp57
op sub *tmp86 20 .count
select *tmp60 equal :mine:ore @scrap *tmp86 20
jump 96 equal :mine:ore .minOre
jump 96 equal :mine:ore @scrap
sensor *tmp66 .core :mine:ore
jump 96 lessThanEq *tmp66 .min
print ", switching to a more needed ore"
ucontrol flag 1 0 0 0 0
jump 12 always 0 0
sensor :mine:items @unit @totalItems
print :mine:items
sensor *tmp70 @unit @firstItem
jump 102 equal *tmp70 :mine:ore
print " (dropping)"
ucontrol itemDrop @air 20 0 0 0
jump 112 lessThan :mine:items *tmp60
print ", full"
ucontrol flag 1 0 0 0 0
jump 109 notEqual :mine:ore @scrap
ucontrol approach .sandX .sandY 7 0 0
ucontrol itemDrop .sandContainer 20 0 0 0
jump 129 always 0 0
ucontrol approach .coreX .coreY 7 0 0
ucontrol itemDrop .core 20 0 0 0
jump 129 always 0 0
print " at {0}, "
format :mine:x
print :mine:y
ucontrol approach :mine:x :mine:y 7 0 0
ucontrol getBlock :mine:x :mine:y 0 :mine:block :mine:floor
jump 124 equal :mine:floor :mine:floorOre
jump 121 notEqual :mine:floor null
print ": too far\n"
jump 129 always 0 0
ucontrol flag 1 0 0 0 0
print ": no ore!\n"
jump 129 always 0 0
jump 127 notEqual :mine:block null
ucontrol mine :mine:x :mine:y 0 0 0
jump 129 always 0 0
ucontrol flag 1 0 0 0 0
print ": blocked!\n"
print "\n"
jump 12 always 0 0
print "Compiled by Mindcode - github.com/cardillan/mindcode"

