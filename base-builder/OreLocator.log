   984 instructions before optimizations.
   101 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
    77 instructions eliminated by Dead Code Elimination (6 iterations).
     2 instructions eliminated by Jump Normalization (5 iterations).
    38 instructions eliminated by Jump Optimization (5 iterations).
    51 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    16 instructions modified by Expression Optimization (3 iterations).
     1 instructions eliminated by If Expression Optimization (4 iterations).
   168 instructions eliminated by Data Flow Optimization (14 passes, 47 iterations).
     1 loops improved by Loop Hoisting.
     1 instructions added by Loop Optimization (3 iterations).
    11 loops improved by Loop Optimization.
   158 instructions added by Loop Unrolling (18 iterations).
     3 loops unrolled by Loop Unrolling.
   265 instructions added by Function Inlining (18 iterations).
     9 function calls inlined by Function Inlining.
    11 instructions eliminated by Jump Straightening (5 iterations).
    13 instructions updated by Jump Threading.
    14 instructions eliminated by Unreachable Code Elimination (2 iterations).
   945 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 370):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit    15625.0, efficiency  15625.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit      625.0, efficiency    625.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:356:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:477:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:491:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:489:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:492:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:524:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 369):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit      625.0, efficiency    625.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:356:5                          size   +17, benefit     3900.0, efficiency    229.412
  * Unroll loop at OreLocator.mnd:477:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:491:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:489:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:492:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:524:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 342):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit      625.0, efficiency    625.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:356:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:491:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:524:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 341):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:356:5                          size   +17, benefit     3900.0, efficiency    229.412 (+17 instructions)
    Unroll loop at OreLocator.mnd:491:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:524:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 324):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:491:5                          size   +87, benefit     9100.0, efficiency    104.598 (+95 instructions)
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:524:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 229):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:524:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 228):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:524:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 227):
    Unroll iteration loop at OreLocator.mnd:613:5                size   +81, benefit       19.0, efficiency      0.235
  * Inline function 'shiftMask' defined at OreLocator.mnd:279:1  size   +28, benefit      171.0, efficiency      6.107 (+18 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:321:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:524:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:621:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 209):
    Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +147, benefit      104.0, efficiency      0.707
  * Inline function call at OreLocator.mnd:488:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:524:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:619:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 177):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +251, benefit      832.0, efficiency      3.315
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +179, benefit      104.0, efficiency      0.581
  * Inline function call at OreLocator.mnd:489:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +180, benefit        4.0, efficiency      0.022
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +180, benefit      100.0, efficiency      0.556
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 145):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +215, benefit      728.0, efficiency      3.386
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +211, benefit      104.0, efficiency      0.493
  * Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +212, benefit        4.0, efficiency      0.019
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +212, benefit      100.0, efficiency      0.472
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 115):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +179, benefit      624.0, efficiency      3.486
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +241, benefit      104.0, efficiency      0.432
  * Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +242, benefit        4.0, efficiency      0.017
    Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +242, benefit      100.0, efficiency      0.413
    Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 85):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +143, benefit      520.0, efficiency      3.636
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +271, benefit      104.0, efficiency      0.384
  * Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +272, benefit        4.0, efficiency      0.015
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +272, benefit      100.0, efficiency      0.368
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 54):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size  +107, benefit      416.0, efficiency      3.888
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +302, benefit      104.0, efficiency      0.344
  * Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +303, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +303, benefit      100.0, efficiency      0.330
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 23):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +71, benefit      312.0, efficiency      4.394
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +333, benefit      104.0, efficiency      0.312
  ! Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:492:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:524:28                size  +334, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +334, benefit      100.0, efficiency      0.299
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 58):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +63, benefit      312.0, efficiency      4.952
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +310, benefit      104.0, efficiency      0.335
  * Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250 (+28 instructions)
    Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
    Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:524:28                size  +311, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +311, benefit      100.0, efficiency      0.322
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 30):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:524:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Pass 3: speed optimization selection (cost limit 30):
  ! Unroll iteration loop at OreLocator.mnd:613:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:387:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:475:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:510:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:492:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:524:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:608:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:619:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:636:12                size   +97, benefit      137.5, efficiency      1.418

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-68 instructions):
 
   135 jump *label42 equal *tmp56 false
   136 set *tmp28 false
   137 jump *label32 always
-    * set *tmp57 null
   138 jump *label43 always
   139 label *label42
-    * set *tmp57 null
   140 label *label43
   141 op sub *tmp58 :locateOreAway:x .coreX
   142 op abs *tmp59 *tmp58
 
   158 label *label46
   159 set *tmp69 null
   160 label *label47
-    * set *tmp67 *tmp69
   161 jump *label45 always
   162 label *label44
-    * set *tmp67 null
   163 label *label45
   164 op greaterThanEq *tmp70 :locateOreAway:coreDist 8
   165 jump *label48 equal *tmp70 false
 
   190 jump *label56 equal *tmp86 false
   191 set *tmp74 true
   192 jump *label52 always
-    * set *tmp87 null
   193 jump *label57 always
   194 label *label56
-    * set *tmp87 null
   195 label *label57
   196 label *label54
   197 op add :visited:i :visited:i 1
 
   220 label *label50
   221 set *tmp73 null
   222 label *label51
-    * set *tmp71 *tmp73
   223 jump *label49 always
   224 label *label48
-    * set *tmp71 null
   225 label *label49
   226 label *label34
   227 jump *label33 always
 
   238 op greaterThan *tmp94 :findDrillLocation:capacity 0
   239 set :findDrillLocation*retval *tmp94
   240 jump *label23 always
-    * set *tmp93 null
   241 jump *label61 always
   242 label *label60
-    * set *tmp93 null
   243 label *label61
   244 op greaterThanEq *tmp95 :findDrillLocation:limit 1000
   245 jump *label62 equal *tmp95 false
   246 set *tmp97 .mapSpots
   247 op add .mapSpots .mapSpots 1
-    * set *tmp96 *tmp97
   248 jump *label63 always
   249 label *label62
-    * set *tmp96 null
   250 label *label63
   251 set :moveTo.3:x :findDrillLocation:oreX
   252 set :moveTo.3:y :findDrillLocation:oreY
 
   299 op lessThanEq *tmp119 :findDrillLocation:coreDist 8
   300 jump *label73 equal *tmp119 false
   301 jump *label71 always
-    * set *tmp120 null
   302 jump *label74 always
   303 label *label73
-    * set *tmp120 null
   304 label *label74
   305 op greaterThan *tmp121 :findDrillLocation:score :findDrillLocation:capacity
   306 jump *label75 equal *tmp121 false
 
   310 op lessThan *tmp123 :findDrillLocation:limit 1000
   311 jump *label77 equal *tmp123 false
   312 set .mapSpots :findDrillLocation:score
-    * set *tmp124 :findDrillLocation:score
   313 jump *label78 always
   314 label *label77
-    * set *tmp124 null
   315 label *label78
   316 op greaterThanEq *tmp125 :findDrillLocation:capacity :findDrillLocation:limit
   317 jump *label79 equal *tmp125 false
 
   332 op add .count .count 1
   333 set *tmp134 .count
   334 write :saveLocation:y bank1 *tmp134
-    * set *tmp136 .locations
   335 op add .locations .locations 1
   336 label *label81
   337 ucontrol unbind
 
   343 label *label79
   344 set *tmp126 null
   345 label *label80
-    * set *tmp122 *tmp126
   346 jump *label76 always
   347 label *label75
-    * set *tmp122 null
   348 label *label76
   349 op greaterThan *tmp137 :findDrillLocation:score :findDrillLocation:best
   350 jump *label82 equal *tmp137 false
   351 set :findDrillLocation:bestX :findDrillLocation:newX
   352 set :findDrillLocation:bestY :findDrillLocation:newY
   353 set :findDrillLocation:best :findDrillLocation:score
-    * set *tmp138 :findDrillLocation:best
   354 jump *label83 always
   355 label *label82
-    * set *tmp138 null
   356 label *label83
   357 op lessThanEq *tmp139 :findDrillLocation:score :findDrillLocation:last
   358 jump *label84 equal *tmp139 false
   359 jump *label71 always
-    * set *tmp140 null
   360 jump *label85 always
   361 label *label84
-    * set *tmp140 null
   362 label *label85
   363 set :findDrillLocation:last :findDrillLocation:score
   364 op mul *tmp141 :findDrillLocation:diffX 1.1
 
   397 op add .count .count 1
   398 set *tmp158 .count
   399 write :saveLocation.1:y bank1 *tmp158
-    * set *tmp160 .locations
   400 op add .locations .locations 1
   401 label *label90
-    * set *tmp150 null
   402 jump *label89 always
   403 label *label88
-    * set *tmp150 null
   404 label *label89
   405 label *label30
   406 jump *label29 always
 
   420 jump *label92 equal *tmp165 false
   421 set :shiftMask*retval 0
   422 jump *label91 always
-    * set *tmp166 null
   423 jump *label93 always
   424 label *label92
-    * set *tmp166 null
   425 label *label93
   426 op mul *tmp167 7 :shiftMask:shiftY
   427 op add *tmp168 :shiftMask:shiftX *tmp167
 
   433 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   434 op shl *tmp173 *tmp172 :shiftMask:shift
   435 set :shiftMask:mask *tmp173
-    * set *tmp170 :shiftMask:mask
   436 jump *label95 always
   437 label *label94
   438 op sub *tmp174 0 :shiftMask:shift
   439 op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * set *tmp170 :shiftMask:mask
   440 label *label95
   441 op notEqual *tmp175 :shiftMask:shiftX 0
   442 jump *label96 equal *tmp175 false
 
   446 op greaterThan *tmp179 :shiftMask:shiftX 0
   447 jump *label98 equal *tmp179 false
   448 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp180 :shiftMask:keep
   449 jump *label99 always
   450 label *label98
-    * set *tmp180 null
   451 label *label99
   452 op shl *tmp181 :shiftMask:keep 7
   453 op or :shiftMask:keep :shiftMask:keep *tmp181
 
   456 op shl *tmp183 :shiftMask:keep 21
   457 op or :shiftMask:keep :shiftMask:keep *tmp183
   458 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp176 :shiftMask:mask
   459 jump *label97 always
   460 label *label96
-    * set *tmp176 null
   461 label *label97
   462 set :shiftMask*retval :shiftMask:mask
   463 jump *label91 always
 
   500 op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
   501 jump *label107 equal *tmp205 false
   502 jump *label106 always
-    * set *tmp206 null
   503 jump *label108 always
   504 label *label107
-    * set *tmp206 null
   505 label *label108
   506 op shl *tmp207 :createMatrixOfSize:matrix 7
   507 op or *tmp208 *tmp207 :createMatrixOfSize:row
 
   563 op add *tmp224 *tmp223 :findPossiblePlacement:x
   564 set :findPossiblePlacement*retval *tmp224
   565 jump *label110 always
-    * set *tmp221 null
   566 jump *label118 always
   567 label *label117
-    * set *tmp221 null
   568 label *label118
   569 op sub *tmp225 3 :findPossiblePlacement:width
   570 op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
   571 jump *label119 equal *tmp226 false
   572 jump *label116 always
-    * set *tmp227 null
   573 jump *label120 always
   574 label *label119
-    * set *tmp227 null
   575 label *label120
   576 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   577 label *label115
 
   582 op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
   583 jump *label121 equal *tmp229 false
   584 jump *label113 always
-    * set *tmp230 null
   585 jump *label122 always
   586 label *label121
-    * set *tmp230 null
   587 label *label122
   588 label *label112
   589 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   613 jump *label127 equal *tmp234 false
   614 set :tryPlaceGenerator*retval false
   615 jump *label123 always
-    * set *tmp235 null
   616 jump *label128 always
   617 label *label127
-    * set *tmp235 null
   618 label *label128
   619 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   620 op add *tmp237 *tmp236 :tryPlaceGenerator:c
 
   630 set .generatorY *tmp243
   631 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   632 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   633 jump *label126 always
   634 label *label125
   635 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   647 jump *label130 equal *tmp246 false
   648 set :tryPlaceGenerator*retval false
   649 jump *label123 always
-    * set *tmp247 null
   650 jump *label131 always
   651 label *label130
-    * set *tmp247 null
   652 label *label131
   653 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   654 op add *tmp249 *tmp248 :tryPlaceGenerator:c
 
   664 set .generatorY *tmp255
   665 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   666 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   667 label *label126
   668 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   669 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   681 jump *label133 equal *tmp258 false
   682 set :tryPlaceGenerator*retval false
   683 jump *label123 always
-    * set *tmp259 null
   684 jump *label134 always
   685 label *label133
-    * set *tmp259 null
   686 label *label134
   687 op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   688 set .panelX *tmp260
 
   705 jump *label136 equal *tmp264 false
   706 set :tryPlaceGenerator*retval false
   707 jump *label123 always
-    * set *tmp265 null
   708 jump *label137 always
   709 label *label136
-    * set *tmp265 null
   710 label *label137
   711 op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   712 set .batteryX *tmp266
 
   749 jump *label141 equal *tmp290 false
   750 set :tryPlaceGenerator*retval false
   751 jump *label123 always
-    * set *tmp291 null
   752 jump *label142 always
   753 label *label141
-    * set *tmp291 null
   754 label *label142
   755 op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   756 set .node2X *tmp292
 
   758 set .node2Y *tmp293
   759 op shl *tmp294 1 :tryPlaceGenerator:shift
   760 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * set *tmp288 :tryPlaceGenerator:terrainMask
   761 jump *label139 always
   762 label *label138
-    * set *tmp288 null
   763 label *label139
   764 set :tryPlaceGenerator*retval true
   765 jump *label123 always
 
   923 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   924 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   925 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * set *tmp331 :layoutThoriumDrillAtLocation:cornersMask
   926 jump *label165 always
   927 label *label164
-    * set *tmp331 null
   928 label *label165
   929 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   930 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   947 set .containerY *tmp344
   948 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   949 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * set *tmp340 :layoutThoriumDrillAtLocation:terrainMask
   950 jump *label168 always
   951 label *label167
-    * set *tmp340 null
   952 label *label168
   953 op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   954 set :layoutThoriumDrillAtLocation:nodeMask *tmp346
 
   967 jump *label170 equal *tmp348 false
   968 set :layoutThoriumDrillAtLocation*retval false
   969 jump *label157 always
-    * set *tmp349 null
   970 jump *label171 always
   971 label *label170
-    * set *tmp349 null
   972 label *label171
   973 op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
   974 set .node1X *tmp350
 
   990 jump *label173 equal *tmp353 false
   991 set :layoutThoriumDrillAtLocation*retval true
   992 jump *label157 always
-    * set *tmp354 null
   993 jump *label174 always
   994 label *label173
-    * set *tmp354 null
   995 label *label174
   996 set :layoutThoriumDrillAtLocation:sx 3
   997 set :layoutThoriumDrillAtLocation:sy 3
 
  1047 jump *label185 equal *tmp363 false
  1048 set :layoutThoriumDrillAtLocation*retval true
  1049 jump *label157 always
-    * set *tmp364 null
  1050 jump *label186 always
  1051 label *label185
-    * set *tmp364 null
  1052 label *label186
  1053 label *label176
  1054 multijump *tmp355 0 0 (m:marker0)
 
  1077 jump *label189 equal *tmp365 false
  1078 set :layoutThoriumDrill*retval false
  1079 jump *label187 always
-    * set *tmp366 null
  1080 jump *label190 always
  1081 label *label189
-    * set *tmp366 null
  1082 label *label190
  1083 setaddr :layoutThoriumDrillAtLocation*retaddr *label191 (h:*label191)
  1084 call *label19 *invalid :layoutThoriumDrillAtLocation*retval (m:*label191) (h:*label191)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   153 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
   154 jump *label46 equal *tmp68 false
   155 jump *label34 always
-    * set *tmp69 null
   156 jump *label47 always
   157 label *label46
-    * set *tmp69 null
   158 label *label47
   159 jump *label45 always
   160 label *label44
 
   213 label *label58
   214 set *tmp89 null
   215 label *label59
-    * set *tmp73 *tmp89
   216 jump *label51 always
   217 label *label50
-    * set *tmp73 null
   218 label *label51
   219 jump *label49 always
   220 label *label48
 
   239 label *label61
   240 op greaterThanEq *tmp95 :findDrillLocation:limit 1000
   241 jump *label62 equal *tmp95 false
-    * set *tmp97 .mapSpots
   242 op add .mapSpots .mapSpots 1
   243 jump *label63 always
   244 label *label62
 
   333 set .searchFinished true
   334 set :findDrillLocation*retval true
   335 jump *label23 always
-    * set *tmp126 null
   336 jump *label80 always
   337 label *label79
-    * set *tmp126 null
   338 label *label80
   339 jump *label76 always
   340 label *label75

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   208 printflush message1
   209 set *tmp28 true
   210 jump *label32 always
-    * set *tmp89 null
   211 jump *label59 always
   212 label *label58
-    * set *tmp89 null
   213 label *label59
   214 jump *label51 always
   215 label *label50

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-101 instructions):
 
    18 label *label5
    19 set .searchFinished false
    20 ubind :findDrillLocation:unit
-    * set *tmp12 .locations
-    * set .locationsStart *tmp12
+   21 set .locationsStart .locations
    22 set .coreX :findDrillLocation:x
    23 set .coreY :findDrillLocation:y
    24 set :findDrillLocation:capacity 0
 
    52 label *label25
    53 label *label24
    54 op div *tmp21 :findDrillLocation:distanceLimit 3.8197185279121366
-    * op pow *tmp22 *tmp21 2
-    * set .mapTotal *tmp22
+   55 op pow .mapTotal *tmp21 2
    56 set :findDrillLocation:oreX 0
    57 set :findDrillLocation:oreY 0
    58 label *label29
 
    61 set :findDrillLocation:bestX :findDrillLocation:x
    62 set :findDrillLocation:bestY :findDrillLocation:y
    63 op sub *tmp23 :findDrillLocation:limit :findDrillLocation:capacity
-    * op mul *tmp24 *tmp23 .attenuationRate
-    * set :findDrillLocation:maxDistance *tmp24
-    * op min *tmp25 :findDrillLocation:distanceLimit :findDrillLocation:maxDistance
-    * set :findDrillLocation:distanceLimit *tmp25
+   64 op mul :findDrillLocation:maxDistance *tmp23 .attenuationRate
+   65 op min :findDrillLocation:distanceLimit :findDrillLocation:distanceLimit :findDrillLocation:maxDistance
    66 op div *tmp26 :findDrillLocation:distanceLimit 3.8197185279121366
-    * op pow *tmp27 *tmp26 2
-    * set .mapTotal *tmp27
+   67 op pow .mapTotal *tmp26 2
    68 set :locateOreAway:ore :findDrillLocation:item
    69 set :locateOreAway:x :findDrillLocation:oreX
    70 set :locateOreAway:y :findDrillLocation:oreY
    71 set :locateOreAway:distanceLimit :findDrillLocation:distanceLimit
-    * op mul *tmp29 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp29
+   72 op mul :locateOreAway:distance 3.8197185279121366 .angle
    73 set :locateOreAway:lastX -1
    74 set :locateOreAway:lastY -1
-    * op max *tmp30 .angle @pi
-    * set .angle *tmp30
-    * op mul *tmp31 .angle .angle
-    * set .mapProgress *tmp31
+   75 op max .angle .angle @pi
+   76 op mul .mapProgress .angle .angle
    77 label *label33
    78 op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
    79 jump *label35 equal *tmp32 false
-    * op div *tmp33 .angle @degToRad
-    * set :locateOreAway:a *tmp33
+   80 op div :locateOreAway:a .angle @degToRad
    81 op sin *tmp34 :locateOreAway:a
    82 op mul *tmp35 *tmp34 :locateOreAway:distance
    83 op add *tmp36 .coreX *tmp35
 
    86 set :limit:low 5
    87 set :limit:high *tmp37
    88 op max *tmp39 :limit:value :limit:low
-    * op min *tmp40 *tmp39 :limit:high
-    * set *tmp38 *tmp40
+   89 op min *tmp38 *tmp39 :limit:high
    90 label *label36
    91 set :locateOreAway:lx *tmp38
    92 op cos *tmp41 :locateOreAway:a
 
    97 set :limit.1:low 5
    98 set :limit.1:high *tmp44
    99 op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp47 *tmp46 :limit.1:high
-    * set *tmp45 *tmp47
+  100 op min *tmp45 *tmp46 :limit.1:high
   101 label *label37
   102 set :locateOreAway:ly *tmp45
   103 set :moveTo.2:x :locateOreAway:lx
 
   115 label *label38
   116 op div *tmp51 3.8197185279121366 :locateOreAway:distance
   117 op add .angle .angle *tmp51
-    * op mul *tmp52 .angle .angle
-    * set .mapProgress *tmp52
-    * op mul *tmp53 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp53
+  118 op mul .mapProgress .angle .angle
+  119 op mul :locateOreAway:distance 3.8197185279121366 .angle
   120 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   121 op equal *tmp56 *tmp54 false
   122 jump *label42 equal *tmp56 false
 
   129 op abs *tmp59 *tmp58
   130 op sub *tmp60 :locateOreAway:y .coreY
   131 op abs *tmp61 *tmp60
-    * op max *tmp62 *tmp59 *tmp61
-    * set :locateOreAway:coreDist *tmp62
+  132 op max :locateOreAway:coreDist *tmp59 *tmp61
   133 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   134 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp65 *tmp63 *tmp64
-    * set :locateOreAway:unitDist *tmp65
+  135 op len :locateOreAway:unitDist *tmp63 *tmp64
   136 op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
   137 jump *label44 equal *tmp66 false
   138 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
 
   156 set :visited:i .locationsStart
   157 label *label53
   158 jump *label55 greaterThanEq :visited:i *tmp75
-    * op mul *tmp76 4 :visited:i
-    * set :visited:index *tmp76
-    * op add *tmp77 :visited:index 2
-    * set *tmp78 *tmp77
-    * read *tmp79 bank1 *tmp78
-    * set :visited:lx *tmp79
-    * op add *tmp80 :visited:index 3
-    * set *tmp81 *tmp80
-    * read *tmp82 bank1 *tmp81
-    * set :visited:ly *tmp82
+  159 op mul :visited:index 4 :visited:i
+  160 op add *tmp78 :visited:index 2
+  161 read :visited:lx bank1 *tmp78
+  162 op add *tmp81 :visited:index 3
+  163 read :visited:ly bank1 *tmp81
   164 op sub *tmp83 :visited:x :visited:lx
   165 op sub *tmp84 :visited:y :visited:ly
   166 op len *tmp85 *tmp83 *tmp84
 
   183 jump *label58 equal *tmp88 false
   184 op div *tmp90 7.639437055824273 :locateOreAway:distance
   185 op add .angle .angle *tmp90
-    * op mul *tmp91 .angle .angle
-    * set .mapProgress *tmp91
+  186 op mul .mapProgress .angle .angle
   187 printflush message1
   188 set *tmp28 true
   189 jump *label32 always
 
   208 op equal *tmp92 *tmp28 false
   209 jump *label60 equal *tmp92 false
   210 set .searchFinished true
-    * op greaterThan *tmp94 :findDrillLocation:capacity 0
-    * set :findDrillLocation*retval *tmp94
+  211 op greaterThan :findDrillLocation*retval :findDrillLocation:capacity 0
   212 jump *label23 always
   213 jump *label61 always
   214 label *label60
 
   251 wait 1e-15
   252 read *tmp110 processor4 ":findBestPosition*finished"
   253 jump *label72 equal *tmp110 false
-    * read *tmp108 processor4 ":findBestPosition:bestX"
-    * set :findDrillLocation:diffX *tmp108
-    * read *tmp109 processor4 ":findBestPosition:bestY"
-    * set :findDrillLocation:diffY *tmp109
-    * read *tmp111 processor4 ":findBestPosition*retval"
-    * set :findDrillLocation:score *tmp111
-    * op add *tmp112 :findDrillLocation:oreX :findDrillLocation:diffX
-    * set :findDrillLocation:newX *tmp112
-    * op add *tmp113 :findDrillLocation:oreY :findDrillLocation:diffY
-    * set :findDrillLocation:newY *tmp113
+  254 read :findDrillLocation:diffX processor4 ":findBestPosition:bestX"
+  255 read :findDrillLocation:diffY processor4 ":findBestPosition:bestY"
+  256 read :findDrillLocation:score processor4 ":findBestPosition*retval"
+  257 op add :findDrillLocation:newX :findDrillLocation:oreX :findDrillLocation:diffX
+  258 op add :findDrillLocation:newY :findDrillLocation:oreY :findDrillLocation:diffY
   259 op sub *tmp114 :findDrillLocation:newX .coreX
   260 op abs *tmp115 *tmp114
   261 op sub *tmp116 :findDrillLocation:newY .coreY
   262 op abs *tmp117 *tmp116
-    * op max *tmp118 *tmp115 *tmp117
-    * set :findDrillLocation:coreDist *tmp118
+  263 op max :findDrillLocation:coreDist *tmp115 *tmp117
   264 op lessThanEq *tmp119 :findDrillLocation:coreDist 8
   265 jump *label73 equal *tmp119 false
   266 jump *label71 always
 
   289 sensor *tmp129 :saveLocation:item @id
   290 write *tmp129 bank1 *tmp127
   291 op add .count .count 1
-    * set *tmp130 .count
-    * write :saveLocation:value bank1 *tmp130
+  292 write :saveLocation:value bank1 .count
   293 op add .count .count 1
-    * set *tmp132 .count
-    * write :saveLocation:x bank1 *tmp132
+  294 write :saveLocation:x bank1 .count
   295 op add .count .count 1
-    * set *tmp134 .count
-    * write :saveLocation:y bank1 *tmp134
+  296 write :saveLocation:y bank1 .count
   297 op add .locations .locations 1
   298 label *label81
   299 ucontrol unbind
 
   321 label *label84
   322 label *label85
   323 set :findDrillLocation:last :findDrillLocation:score
-    * op mul *tmp141 :findDrillLocation:diffX 1.1
-    * set :round:x *tmp141
+  324 op mul :round:x :findDrillLocation:diffX 1.1
   325 op add *tmp143 :round:x 0.5
-    * op floor *tmp144 *tmp143
-    * set *tmp142 *tmp144
+  326 op floor *tmp142 *tmp143
   327 label *label86
   328 op add :findDrillLocation:oreX :findDrillLocation:oreX *tmp142
-    * op mul *tmp145 :findDrillLocation:diffY 1.1
-    * set :round.1:x *tmp145
+  329 op mul :round.1:x :findDrillLocation:diffY 1.1
   330 op add *tmp147 :round.1:x 0.5
-    * op floor *tmp148 *tmp147
-    * set *tmp146 *tmp148
+  331 op floor *tmp146 *tmp147
   332 label *label87
   333 op add :findDrillLocation:oreY :findDrillLocation:oreY *tmp146
   334 label *label70
 
   345 sensor *tmp153 :saveLocation.1:item @id
   346 write *tmp153 bank1 *tmp151
   347 op add .count .count 1
-    * set *tmp154 .count
-    * write :saveLocation.1:value bank1 *tmp154
+  348 write :saveLocation.1:value bank1 .count
   349 op add .count .count 1
-    * set *tmp156 .count
-    * write :saveLocation.1:x bank1 *tmp156
+  350 write :saveLocation.1:x bank1 .count
   351 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:y bank1 *tmp158
+  352 write :saveLocation.1:y bank1 .count
   353 op add .locations .locations 1
   354 label *label90
   355 jump *label89 always
 
   377 label *label92
   378 label *label93
   379 op mul *tmp167 7 :shiftMask:shiftY
-    * op add *tmp168 :shiftMask:shiftX *tmp167
-    * set :shiftMask:shift *tmp168
+  380 op add :shiftMask:shift :shiftMask:shiftX *tmp167
   381 op greaterThan *tmp169 :shiftMask:shift 0
   382 jump *label94 equal *tmp169 false
-    * op shr *tmp171 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp171
+  383 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   384 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp173 *tmp172 :shiftMask:shift
-    * set :shiftMask:mask *tmp173
+  385 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   386 jump *label95 always
   387 label *label94
   388 op sub *tmp174 0 :shiftMask:shift
 
   391 op notEqual *tmp175 :shiftMask:shiftX 0
   392 jump *label96 equal *tmp175 false
   393 op abs *tmp177 :shiftMask:shiftX
-    * op shr *tmp178 0b1111111 *tmp177
-    * set :shiftMask:keep *tmp178
+  394 op shr :shiftMask:keep 0b1111111 *tmp177
   395 op greaterThan *tmp179 :shiftMask:shiftX 0
   396 jump *label98 equal *tmp179 false
   397 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   420 op idiv *tmp186 *tmp185 2
   421 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   422 op abs *tmp188 *tmp187
-    * op sub *tmp189 *tmp186 *tmp188
-    * set :excludeArea:overlapX *tmp189
+  423 op sub :excludeArea:overlapX *tmp186 *tmp188
   424 op add *tmp190 :excludeArea:areaHeight 7
   425 op add *tmp191 *tmp190 1
   426 op idiv *tmp192 *tmp191 2
   427 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   428 op abs *tmp194 *tmp193
-    * op sub *tmp195 *tmp192 *tmp194
-    * set :excludeArea:overlapY *tmp195
+  429 op sub :excludeArea:overlapY *tmp192 *tmp194
   430 op greaterThan *tmp196 :excludeArea:overlapX 0
   431 op greaterThan *tmp197 :excludeArea:overlapY 0
   432 op land *tmp198 *tmp196 *tmp197
   433 jump *label101 equal *tmp198 false
-    * op min *tmp200 7 :excludeArea:overlapX
-    * set :excludeArea:blockSizeX *tmp200
-    * op min *tmp201 7 :excludeArea:overlapY
-    * set :excludeArea:blockSizeY *tmp201
+  434 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
+  435 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   436 set :createMatrixOfSize:width :excludeArea:blockSizeX
   437 set :createMatrixOfSize:height :excludeArea:blockSizeY
   438 op shl *tmp203 1 :createMatrixOfSize:width
-    * op sub *tmp204 *tmp203 1
-    * set :createMatrixOfSize:row *tmp204
+  439 op sub :createMatrixOfSize:row *tmp203 1
   440 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   441 set :createMatrixOfSize:i 1
   442 label *label104
 
   448 label *label107
   449 label *label108
   450 op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or *tmp208 *tmp207 :createMatrixOfSize:row
-    * set :createMatrixOfSize:matrix *tmp208
+  451 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   452 label *label105
   453 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   454 jump *label104 always
 
   460 set :excludeArea:blocked *tmp202
   461 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   462 op sub *tmp210 7 :excludeArea:blockSizeX
-    * op mul *tmp211 *tmp209 *tmp210
-    * set :excludeArea:shiftX *tmp211
+  463 op mul :excludeArea:shiftX *tmp209 *tmp210
   464 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   465 op sub *tmp213 7 :excludeArea:blockSizeY
-    * op mul *tmp214 *tmp212 *tmp213
-    * set :excludeArea:shiftY *tmp214
+  466 op mul :excludeArea:shiftY *tmp212 *tmp213
   467 set :shiftMask:mask :excludeArea:blocked
   468 set :shiftMask:shiftX :excludeArea:shiftX
   469 set :shiftMask:shiftY :excludeArea:shiftY
 
   471 call *label13 *invalid :shiftMask*retval (m:*label109) (h:*label109)
   472 label *label109
   473 set :excludeArea:shifted :shiftMask*retval
-    * op or *tmp215 :excludeArea:mask :excludeArea:shifted
-    * set :excludeArea*retval *tmp215
+  474 op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
   475 jump *label100 always
   476 set *tmp199 null
   477 jump *label102 always
 
   490 jump *label113 greaterThan :findPossiblePlacement:y 3
   491 op add *tmp216 :findPossiblePlacement:y 3
   492 op mul *tmp217 7 *tmp216
-    * op shl *tmp218 :findPossiblePlacement:placementMask *tmp217
-    * set :findPossiblePlacement:mask *tmp218
+  493 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   494 set :findPossiblePlacement:x -3
   495 label *label114
   496 jump *label116 greaterThan :findPossiblePlacement:x 3
 
   499 jump *label117 equal *tmp220 false
   500 op mul *tmp222 :findPossiblePlacement:y 7
   501 op add *tmp223 24 *tmp222
-    * op add *tmp224 *tmp223 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp224
+  502 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   503 jump *label110 always
   504 jump *label118 always
   505 label *label117
 
   543 label *label124
   544 set :tryPlaceGenerator:c :findPossiblePlacement:x
   545 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp231 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp231
+  546 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   547 op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
   548 jump *label125 equal *tmp232 false
   549 op lessThan *tmp234 :tryPlaceGenerator:shift 0
 
   554 label *label127
   555 label *label128
   556 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp237 *tmp236 :tryPlaceGenerator:c
-    * set .water2X *tmp237
+  557 op add .water2X *tmp236 :tryPlaceGenerator:c
   558 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp239 *tmp238 :tryPlaceGenerator:r
-    * set .water2Y *tmp239
+  559 op add .water2Y *tmp238 :tryPlaceGenerator:r
   560 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp241 *tmp240 :tryPlaceGenerator:c
-    * set .generatorX *tmp241
+  561 op add .generatorX *tmp240 :tryPlaceGenerator:c
   562 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp243 *tmp242 :tryPlaceGenerator:r
-    * set .generatorY *tmp243
+  563 op add .generatorY *tmp242 :tryPlaceGenerator:r
   564 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   565 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   566 jump *label126 always
 
   574 label *label129
   575 set :tryPlaceGenerator:c :findPossiblePlacement:x
   576 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp245 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp245
+  577 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   578 op lessThan *tmp246 :tryPlaceGenerator:shift 0
   579 jump *label130 equal *tmp246 false
   580 set :tryPlaceGenerator*retval false
 
   583 label *label130
   584 label *label131
   585 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp249 *tmp248 :tryPlaceGenerator:c
-    * set .water2X *tmp249
+  586 op add .water2X *tmp248 :tryPlaceGenerator:c
   587 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp251 *tmp250 :tryPlaceGenerator:r
-    * set .water2Y *tmp251
+  588 op add .water2Y *tmp250 :tryPlaceGenerator:r
   589 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp253 *tmp252 :tryPlaceGenerator:c
-    * set .generatorX *tmp253
+  590 op add .generatorX *tmp252 :tryPlaceGenerator:c
   591 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp255 *tmp254 :tryPlaceGenerator:r
-    * set .generatorY *tmp255
+  592 op add .generatorY *tmp254 :tryPlaceGenerator:r
   593 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   594 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   595 label *label126
 
   603 label *label132
   604 set :tryPlaceGenerator:c :findPossiblePlacement:x
   605 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp257 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp257
+  606 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   607 op lessThan *tmp258 :tryPlaceGenerator:shift 0
   608 jump *label133 equal *tmp258 false
   609 set :tryPlaceGenerator*retval false
 
   611 jump *label134 always
   612 label *label133
   613 label *label134
-    * op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp260
-    * op add *tmp261 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp261
+  614 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  615 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   616 op shl *tmp262 1 :tryPlaceGenerator:shift
   617 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   618 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   624 label *label135
   625 set :tryPlaceGenerator:c :findPossiblePlacement:x
   626 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp263 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp263
+  627 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   628 op lessThan *tmp264 :tryPlaceGenerator:shift 0
   629 jump *label136 equal *tmp264 false
   630 set :tryPlaceGenerator*retval false
 
   632 jump *label137 always
   633 label *label136
   634 label *label137
-    * op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp266
-    * op add *tmp267 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp267
+  635 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  636 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   637 op shl *tmp268 1 :tryPlaceGenerator:shift
   638 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   639 op sub *tmp269 .water2X .node1X
 
   665 label *label140
   666 set :tryPlaceGenerator:c :findPossiblePlacement:x
   667 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp289 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp289
+  668 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   669 op lessThan *tmp290 :tryPlaceGenerator:shift 0
   670 jump *label141 equal *tmp290 false
   671 set :tryPlaceGenerator*retval false
 
   673 jump *label142 always
   674 label *label141
   675 label *label142
-    * op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .node2X *tmp292
-    * op add *tmp293 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .node2Y *tmp293
+  676 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  677 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   678 op shl *tmp294 1 :tryPlaceGenerator:shift
   679 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
   680 jump *label139 always
 
   694 op shl *tmp295 :createBlockMaskRow:result 1
   695 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   696 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or *tmp300 *tmp295 *tmp297
-    * set :createBlockMaskRow:result *tmp300
+  697 op or :createBlockMaskRow:result *tmp295 *tmp297
   698 label *label145
   699 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   700 jump *label144 always
 
   720 setaddr :createBlockMaskRow*retaddr *label149 (h:*label149)
   721 call *label17 *invalid :createBlockMaskRow*retval (m:*label149) (h:*label149)
   722 label *label149
-    * set *tmp306 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp306
+  723 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   724 op add *tmp307 :createAdjacentMask:y 3
   725 set :createBlockMaskRow:x :createAdjacentMask:x
   726 set :createBlockMaskRow:y *tmp307
   727 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   728 call *label17 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   729 label *label150
-    * set *tmp308 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp308
+  730 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   731 set :createAdjacentMask:r 2
   732 label *label151
   733 jump *label153 lessThan :createAdjacentMask:r -4
 
   737 setaddr :createBlockMaskRow*retaddr *label154 (h:*label154)
   738 call *label17 *invalid :createBlockMaskRow*retval (m:*label154) (h:*label154)
   739 label *label154
-    * set *tmp310 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp310
+  740 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   741 op shl *tmp311 :createAdjacentMask:row1 1
   742 op or *tmp312 :createAdjacentMask:row2 *tmp311
   743 op shr *tmp313 :createAdjacentMask:row1 1
   744 op or *tmp314 *tmp312 *tmp313
-    * op or *tmp315 *tmp314 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp315
+  745 op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
   746 op shl *tmp316 :createAdjacentMask:result 7
   747 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or *tmp318 *tmp316 *tmp317
-    * set :createAdjacentMask:result *tmp318
+  748 op or :createAdjacentMask:result *tmp316 *tmp317
   749 set :createAdjacentMask:row2 :createAdjacentMask:row1
   750 set :createAdjacentMask:row1 :createAdjacentMask:row0
   751 label *label152
   752 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   753 jump *label151 always
   754 label *label153
-    * op shr *tmp319 :createAdjacentMask:result 1
-    * set *tmp304 *tmp319
+  755 op shr *tmp304 :createAdjacentMask:result 1
   756 label *label148
   757 set :createCombinedMask:adjacentMask *tmp304
   758 label *label155
   759 wait 1e-15
   760 read *tmp320 processor4 ":createTerrainMask*finished"
   761 jump *label155 equal *tmp320 false
-    * read *tmp321 processor4 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp321
-    * op or *tmp322 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :excludeArea:mask *tmp322
+  762 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
+  763 op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   764 set :excludeArea:maskX :createCombinedMask:x
   765 set :excludeArea:maskY :createCombinedMask:y
   766 set :excludeArea:areaX .coreX
 
   803 setaddr :createCombinedMask*retaddr *label162 (h:*label162)
   804 call *label18 *invalid :createCombinedMask*retval (m:*label162) (h:*label162)
   805 label *label162
-    * set *tmp326 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp326
-    * op or *tmp327 :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp327
-    * op or *tmp328 :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp328
+  806 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
+  807 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  808 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   809 set :layoutThoriumDrillAtLocation:mask2x2 387
   810 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   811 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   816 label *label163
   817 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   818 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp329 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp329
+  819 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   820 op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
   821 jump *label164 equal *tmp330 false
   822 op add *tmp332 .drillX 0.5
-    * op add *tmp333 *tmp332 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp333
+  823 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   824 op add *tmp334 .drillY 0.5
-    * op add *tmp335 *tmp334 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp335
+  825 op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
   826 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   827 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   828 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   839 label *label166
   840 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   841 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp338 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp338
+  842 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   843 op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
   844 jump *label167 equal *tmp339 false
   845 op add *tmp341 .drillX 0.5
-    * op add *tmp342 *tmp341 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp342
+  846 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   847 op add *tmp343 .drillY 0.5
-    * op add *tmp344 *tmp343 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp344
+  848 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   849 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   850 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   851 jump *label168 always
   852 label *label167
   853 label *label168
-    * op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
-    * set :layoutThoriumDrillAtLocation:nodeMask *tmp346
+  854 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   855 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   856 set :findPossiblePlacement:placementMask 1
   857 set :findPossiblePlacement:width 1
 
   861 label *label169
   862 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   863 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp347 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp347
+  864 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   865 op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
   866 jump *label170 equal *tmp348 false
   867 set :layoutThoriumDrillAtLocation*retval false
 
   869 jump *label171 always
   870 label *label170
   871 label *label171
-    * op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
-    * set .node1X *tmp350
-    * op add *tmp351 .drillY :layoutThoriumDrillAtLocation:r
-    * set .node1Y *tmp351
+  872 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
+  873 op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
   874 op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
   875 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   876 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
 
   883 setaddr :tryPlaceGenerator*retaddr *label172 (h:*label172)
   884 call *label16 *invalid :tryPlaceGenerator*retval (m:*label172) (h:*label172)
   885 label *label172
-    * set *tmp353 :tryPlaceGenerator*retval
-    * jump *label173 equal *tmp353 false
+  886 jump *label173 equal :tryPlaceGenerator*retval false
   887 set :layoutThoriumDrillAtLocation*retval true
   888 jump *label157 always
   889 jump *label174 always
 
   908 set :layoutThoriumDrillAtLocation:sy -3
   909 setaddr *tmp355 *label181
   910 label *label175
-    * op sub *tmp356 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp356
-    * op sub *tmp357 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp357
+  911 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  912 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   913 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   914 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   915 setaddr :createCombinedMask*retaddr *label182 (h:*label182)
   916 call *label18 *invalid :createCombinedMask*retval (m:*label182) (h:*label182)
   917 label *label182
-    * set *tmp358 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp358
+  918 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   919 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   920 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   921 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   922 setaddr :shiftMask*retaddr *label183 (h:*label183)
   923 call *label13 *invalid :shiftMask*retval (m:*label183) (h:*label183)
   924 label *label183
-    * set *tmp359 :shiftMask*retval
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp359
-    * op or *tmp360 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp360
+  925 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
+  926 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   927 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   928 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   929 set :tryPlaceGenerator:centerX *tmp361
 
   934 setaddr :tryPlaceGenerator*retaddr *label184 (h:*label184)
   935 call *label16 *invalid :tryPlaceGenerator*retval (m:*label184) (h:*label184)
   936 label *label184
-    * set *tmp363 :tryPlaceGenerator*retval
-    * jump *label185 equal *tmp363 false
+  937 jump *label185 equal :tryPlaceGenerator*retval false
   938 set :layoutThoriumDrillAtLocation*retval true
   939 jump *label157 always
   940 jump *label186 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    56 set :findDrillLocation:oreX 0
    57 set :findDrillLocation:oreY 0
    58 label *label29
-    * jump *label31 equal true false
    59 set :findDrillLocation:best -1
    60 set :findDrillLocation:bestX :findDrillLocation:x
    61 set :findDrillLocation:bestY :findDrillLocation:y
 
   238 label *label64
   239 set :findDrillLocation:last 0
   240 label *label69
-    * jump *label71 equal true false
   241 write @unit processor4 ":findBestPosition:unit"
   242 write :findDrillLocation:oreX processor4 ":findBestPosition:x"
   243 write :findDrillLocation:oreY processor4 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-38 instructions):
 
    42 set :moveTo.1:radius 6
    43 label *label26
    44 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
-    * op equal *tmp19 *tmp18 false
-    * jump *label28 equal *tmp19 false
+   45 jump *label28 notEqual *tmp18 false
    46 op sub *tmp20 :moveTo.1:radius 0.5
    47 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
    48 label *label27
 
    73 op max .angle .angle @pi
    74 op mul .mapProgress .angle .angle
    75 label *label33
-    * op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label35 equal *tmp32 false
+   76 jump *label35 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    77 op div :locateOreAway:a .angle @degToRad
    78 op sin *tmp34 :locateOreAway:a
    79 op mul *tmp35 *tmp34 :locateOreAway:distance
 
   102 set :moveTo.2:radius 5
   103 label *label39
   104 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
-    * op equal *tmp49 *tmp48 false
-    * jump *label41 equal *tmp49 false
+  105 jump *label41 notEqual *tmp48 false
   106 op sub *tmp50 :moveTo.2:radius 0.5
   107 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
   108 label *label40
 
   114 op mul .mapProgress .angle .angle
   115 op mul :locateOreAway:distance 3.8197185279121366 .angle
   116 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
-    * op equal *tmp56 *tmp54 false
-    * jump *label42 equal *tmp56 false
+  117 jump *label42 notEqual *tmp54 false
   118 set *tmp28 false
   119 jump *label32 always
   120 jump *label43 always
 
   128 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   129 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
   130 op len :locateOreAway:unitDist *tmp63 *tmp64
-    * op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
-    * jump *label44 equal *tmp66 false
-    * op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
-    * jump *label46 equal *tmp68 false
+  131 jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x
+  132 jump *label46 notEqual :locateOreAway:lastY :locateOreAway:y
   133 jump *label34 always
   134 jump *label47 always
   135 label *label46
 
   137 jump *label45 always
   138 label *label44
   139 label *label45
-    * op greaterThanEq *tmp70 :locateOreAway:coreDist 8
-    * jump *label48 equal *tmp70 false
-    * op lessThan *tmp72 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label50 equal *tmp72 false
+  140 jump *label48 lessThan :locateOreAway:coreDist 8
+  141 jump *label50 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   142 set :locateOreAway:lastX :locateOreAway:x
   143 set :locateOreAway:lastY :locateOreAway:y
   144 set :visited:x :locateOreAway:x
 
   155 op sub *tmp83 :visited:x :visited:lx
   156 op sub *tmp84 :visited:y :visited:ly
   157 op len *tmp85 *tmp83 *tmp84
-    * op lessThan *tmp86 *tmp85 7
-    * jump *label56 equal *tmp86 false
+  158 jump *label56 greaterThanEq *tmp85 7
   159 set *tmp74 true
   160 jump *label52 always
   161 jump *label57 always
 
   169 jump *label52 always
   170 set *tmp74 null
   171 label *label52
-    * op equal *tmp88 *tmp74 false
-    * jump *label58 equal *tmp88 false
+  172 jump *label58 notEqual *tmp74 false
   173 op div *tmp90 7.639437055824273 :locateOreAway:distance
   174 op add .angle .angle *tmp90
   175 op mul .mapProgress .angle .angle
 
   194 label *label32
   195 set :findDrillLocation:oreX :locateOreAway:x
   196 set :findDrillLocation:oreY :locateOreAway:y
-    * op equal *tmp92 *tmp28 false
-    * jump *label60 equal *tmp92 false
+  197 jump *label60 notEqual *tmp28 false
   198 set .searchFinished true
   199 op greaterThan :findDrillLocation*retval :findDrillLocation:capacity 0
   200 jump *label23 always
   201 jump *label61 always
   202 label *label60
   203 label *label61
-    * op greaterThanEq *tmp95 :findDrillLocation:limit 1000
-    * jump *label62 equal *tmp95 false
+  204 jump *label62 lessThan :findDrillLocation:limit 1000
   205 op add .mapSpots .mapSpots 1
   206 jump *label63 always
   207 label *label62
 
   215 set :moveTo.4:radius 6
   216 label *label66
   217 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
-    * op equal *tmp101 *tmp100 false
-    * jump *label68 equal *tmp101 false
+  218 jump *label68 notEqual *tmp100 false
   219 op sub *tmp102 :moveTo.4:radius 0.5
   220 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
   221 label *label67
 
   246 op sub *tmp116 :findDrillLocation:newY .coreY
   247 op abs *tmp117 *tmp116
   248 op max :findDrillLocation:coreDist *tmp115 *tmp117
-    * op lessThanEq *tmp119 :findDrillLocation:coreDist 8
-    * jump *label73 equal *tmp119 false
+  249 jump *label73 greaterThan :findDrillLocation:coreDist 8
   250 jump *label71 always
   251 jump *label74 always
   252 label *label73
   253 label *label74
-    * op greaterThan *tmp121 :findDrillLocation:score :findDrillLocation:capacity
-    * jump *label75 equal *tmp121 false
+  254 jump *label75 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
   255 set :findDrillLocation:dx :findDrillLocation:newX
   256 set :findDrillLocation:dy :findDrillLocation:newY
   257 set :findDrillLocation:capacity :findDrillLocation:score
-    * op lessThan *tmp123 :findDrillLocation:limit 1000
-    * jump *label77 equal *tmp123 false
+  258 jump *label77 greaterThanEq :findDrillLocation:limit 1000
   259 set .mapSpots :findDrillLocation:score
   260 jump *label78 always
   261 label *label77
   262 label *label78
-    * op greaterThanEq *tmp125 :findDrillLocation:capacity :findDrillLocation:limit
-    * jump *label79 equal *tmp125 false
+  263 jump *label79 lessThan :findDrillLocation:capacity :findDrillLocation:limit
   264 set :saveLocation:item :findDrillLocation:item
   265 set :saveLocation:value :findDrillLocation:score
   266 set :saveLocation:x :findDrillLocation:dx
 
   287 jump *label76 always
   288 label *label75
   289 label *label76
-    * op greaterThan *tmp137 :findDrillLocation:score :findDrillLocation:best
-    * jump *label82 equal *tmp137 false
+  290 jump *label82 lessThanEq :findDrillLocation:score :findDrillLocation:best
   291 set :findDrillLocation:bestX :findDrillLocation:newX
   292 set :findDrillLocation:bestY :findDrillLocation:newY
   293 set :findDrillLocation:best :findDrillLocation:score
   294 jump *label83 always
   295 label *label82
   296 label *label83
-    * op lessThanEq *tmp139 :findDrillLocation:score :findDrillLocation:last
-    * jump *label84 equal *tmp139 false
+  297 jump *label84 greaterThan :findDrillLocation:score :findDrillLocation:last
   298 jump *label71 always
   299 jump *label85 always
   300 label *label84
 
   313 label *label70
   314 jump *label69 always
   315 label *label71
-    * op greaterThanEq *tmp149 :findDrillLocation:best 0
-    * jump *label88 equal *tmp149 false
+  316 jump *label88 lessThan :findDrillLocation:best 0
   317 set :saveLocation.1:item :findDrillLocation:item
   318 set :saveLocation.1:value :findDrillLocation:best
   319 set :saveLocation.1:x :findDrillLocation:bestX
 
   356 label *label93
   357 op mul *tmp167 7 :shiftMask:shiftY
   358 op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * op greaterThan *tmp169 :shiftMask:shift 0
-    * jump *label94 equal *tmp169 false
+  359 jump *label94 lessThanEq :shiftMask:shift 0
   360 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   361 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   362 op shl :shiftMask:mask *tmp172 :shiftMask:shift
 
   365 op sub *tmp174 0 :shiftMask:shift
   366 op shr :shiftMask:mask :shiftMask:mask *tmp174
   367 label *label95
-    * op notEqual *tmp175 :shiftMask:shiftX 0
-    * jump *label96 equal *tmp175 false
+  368 jump *label96 equal :shiftMask:shiftX 0
   369 op abs *tmp177 :shiftMask:shiftX
   370 op shr :shiftMask:keep 0b1111111 *tmp177
-    * op greaterThan *tmp179 :shiftMask:shiftX 0
-    * jump *label98 equal *tmp179 false
+  371 jump *label98 lessThanEq :shiftMask:shiftX 0
   372 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   373 jump *label99 always
   374 label *label98
 
   416 set :createMatrixOfSize:i 1
   417 label *label104
   418 jump *label106 greaterThanEq :createMatrixOfSize:i 7
-    * op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
-    * jump *label107 equal *tmp205 false
+  419 jump *label107 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   420 jump *label106 always
   421 jump *label108 always
   422 label *label107
 
   469 label *label114
   470 jump *label116 greaterThan :findPossiblePlacement:x 3
   471 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp220 *tmp219 0
-    * jump *label117 equal *tmp220 false
+  472 jump *label117 notEqual *tmp219 0
   473 op mul *tmp222 :findPossiblePlacement:y 7
   474 op add *tmp223 24 *tmp222
   475 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
 
   478 label *label117
   479 label *label118
   480 op sub *tmp225 3 :findPossiblePlacement:width
-    * op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
-    * jump *label119 equal *tmp226 false
+  481 jump *label119 lessThanEq :findPossiblePlacement:x *tmp225
   482 jump *label116 always
   483 jump *label120 always
   484 label *label119
 
   489 jump *label114 always
   490 label *label116
   491 op sub *tmp228 3 :findPossiblePlacement:height
-    * op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
-    * jump *label121 equal *tmp229 false
+  492 jump *label121 lessThanEq :findPossiblePlacement:y *tmp228
   493 jump *label113 always
   494 jump *label122 always
   495 label *label121
 
   515 set :tryPlaceGenerator:c :findPossiblePlacement:x
   516 set :tryPlaceGenerator:r :findPossiblePlacement:y
   517 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
-    * jump *label125 equal *tmp232 false
-    * op lessThan *tmp234 :tryPlaceGenerator:shift 0
-    * jump *label127 equal *tmp234 false
+  518 jump *label125 lessThan :tryPlaceGenerator:shift 0
+  519 jump *label127 greaterThanEq :tryPlaceGenerator:shift 0
   520 set :tryPlaceGenerator*retval false
   521 jump *label123 always
   522 jump *label128 always
 
   544 set :tryPlaceGenerator:c :findPossiblePlacement:x
   545 set :tryPlaceGenerator:r :findPossiblePlacement:y
   546 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp246 :tryPlaceGenerator:shift 0
-    * jump *label130 equal *tmp246 false
+  547 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   548 set :tryPlaceGenerator*retval false
   549 jump *label123 always
   550 jump *label131 always
 
   572 set :tryPlaceGenerator:c :findPossiblePlacement:x
   573 set :tryPlaceGenerator:r :findPossiblePlacement:y
   574 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp258 :tryPlaceGenerator:shift 0
-    * jump *label133 equal *tmp258 false
+  575 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   576 set :tryPlaceGenerator*retval false
   577 jump *label123 always
   578 jump *label134 always
 
   592 set :tryPlaceGenerator:c :findPossiblePlacement:x
   593 set :tryPlaceGenerator:r :findPossiblePlacement:y
   594 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp264 :tryPlaceGenerator:shift 0
-    * jump *label136 equal *tmp264 false
+  595 jump *label136 greaterThanEq :tryPlaceGenerator:shift 0
   596 set :tryPlaceGenerator*retval false
   597 jump *label123 always
   598 jump *label137 always
 
   632 set :tryPlaceGenerator:c :findPossiblePlacement:x
   633 set :tryPlaceGenerator:r :findPossiblePlacement:y
   634 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp290 :tryPlaceGenerator:shift 0
-    * jump *label141 equal *tmp290 false
+  635 jump *label141 greaterThanEq :tryPlaceGenerator:shift 0
   636 set :tryPlaceGenerator*retval false
   637 jump *label123 always
   638 jump *label142 always
 
   755 set :moveTo.5:radius 1
   756 label *label159
   757 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
-    * op equal *tmp324 *tmp323 false
-    * jump *label161 equal *tmp324 false
+  758 jump *label161 notEqual *tmp323 false
   759 op sub *tmp325 :moveTo.5:radius 0.5
   760 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
   761 label *label160
 
   781 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   782 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   783 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label164 equal *tmp330 false
+  784 jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
   785 op add *tmp332 .drillX 0.5
   786 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   787 op add *tmp334 .drillY 0.5
 
   803 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   804 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   805 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label167 equal *tmp339 false
+  806 jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
   807 op add *tmp341 .drillX 0.5
   808 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   809 op add *tmp343 .drillY 0.5
 
   824 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   825 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   826 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label170 equal *tmp348 false
+  827 jump *label170 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   828 set :layoutThoriumDrillAtLocation*retval false
   829 jump *label157 always
   830 jump *label171 always
 
   924 label *label188
   925 set .drillX :findDrillLocation:dx
   926 set .drillY :findDrillLocation:dy
-    * op equal *tmp365 :findDrillLocation*retval false
-    * jump *label189 equal *tmp365 false
+  927 jump *label189 notEqual :findDrillLocation*retval false
   928 set :layoutThoriumDrill*retval false
   929 jump *label187 always
   930 jump *label190 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-35 instructions):
 
   117 jump *label42 notEqual *tmp54 false
   118 set *tmp28 false
   119 jump *label32 always
-    * jump *label43 always
   120 label *label42
   121 label *label43
   122 op sub *tmp58 :locateOreAway:x .coreX
 
   130 jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x
   131 jump *label46 notEqual :locateOreAway:lastY :locateOreAway:y
   132 jump *label34 always
-    * jump *label47 always
   133 label *label46
   134 label *label47
-    * jump *label45 always
   135 label *label44
   136 label *label45
   137 jump *label48 lessThan :locateOreAway:coreDist 8
 
   155 jump *label56 greaterThanEq *tmp85 7
   156 set *tmp74 true
   157 jump *label52 always
-    * jump *label57 always
   158 label *label56
   159 label *label57
   160 label *label54
 
   172 printflush message1
   173 set *tmp28 true
   174 jump *label32 always
-    * jump *label59 always
   175 label *label58
   176 label *label59
-    * jump *label51 always
   177 label *label50
   178 label *label51
-    * jump *label49 always
   179 label *label48
   180 label *label49
   181 label *label34
 
   191 set .searchFinished true
   192 op greaterThan :findDrillLocation*retval :findDrillLocation:capacity 0
   193 jump *label23 always
-    * jump *label61 always
   194 label *label60
   195 label *label61
   196 jump *label62 lessThan :findDrillLocation:limit 1000
   197 op add .mapSpots .mapSpots 1
-    * jump *label63 always
   198 label *label62
   199 label *label63
   200 set :moveTo.3:x :findDrillLocation:oreX
 
   239 op max :findDrillLocation:coreDist *tmp115 *tmp117
   240 jump *label73 greaterThan :findDrillLocation:coreDist 8
   241 jump *label71 always
-    * jump *label74 always
   242 label *label73
   243 label *label74
   244 jump *label75 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
 
   247 set :findDrillLocation:capacity :findDrillLocation:score
   248 jump *label77 greaterThanEq :findDrillLocation:limit 1000
   249 set .mapSpots :findDrillLocation:score
-    * jump *label78 always
   250 label *label77
   251 label *label78
   252 jump *label79 lessThan :findDrillLocation:capacity :findDrillLocation:limit
 
   270 set .searchFinished true
   271 set :findDrillLocation*retval true
   272 jump *label23 always
-    * jump *label80 always
   273 label *label79
   274 label *label80
-    * jump *label76 always
   275 label *label75
   276 label *label76
   277 jump *label82 lessThanEq :findDrillLocation:score :findDrillLocation:best
   278 set :findDrillLocation:bestX :findDrillLocation:newX
   279 set :findDrillLocation:bestY :findDrillLocation:newY
   280 set :findDrillLocation:best :findDrillLocation:score
-    * jump *label83 always
   281 label *label82
   282 label *label83
   283 jump *label84 greaterThan :findDrillLocation:score :findDrillLocation:last
   284 jump *label71 always
-    * jump *label85 always
   285 label *label84
   286 label *label85
   287 set :findDrillLocation:last :findDrillLocation:score
 
   315 write :saveLocation.1:y bank1 .count
   316 op add .locations .locations 1
   317 label *label90
-    * jump *label89 always
   318 label *label88
   319 label *label89
   320 label *label30
 
   335 jump *label92 equal *tmp165 false
   336 set :shiftMask*retval 0
   337 jump *label91 always
-    * jump *label93 always
   338 label *label92
   339 label *label93
   340 op mul *tmp167 7 :shiftMask:shiftY
 
   353 op shr :shiftMask:keep 0b1111111 *tmp177
   354 jump *label98 lessThanEq :shiftMask:shiftX 0
   355 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label99 always
   356 label *label98
   357 label *label99
   358 op shl *tmp181 :shiftMask:keep 7
 
   362 op shl *tmp183 :shiftMask:keep 21
   363 op or :shiftMask:keep :shiftMask:keep *tmp183
   364 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label97 always
   365 label *label96
   366 label *label97
   367 set :shiftMask*retval :shiftMask:mask
 
   399 jump *label106 greaterThanEq :createMatrixOfSize:i 7
   400 jump *label107 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   401 jump *label106 always
-    * jump *label108 always
   402 label *label107
   403 label *label108
   404 op shl *tmp207 :createMatrixOfSize:matrix 7
 
   454 op add *tmp223 24 *tmp222
   455 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   456 jump *label110 always
-    * jump *label118 always
   457 label *label117
   458 label *label118
   459 op sub *tmp225 3 :findPossiblePlacement:width
   460 jump *label119 lessThanEq :findPossiblePlacement:x *tmp225
   461 jump *label116 always
-    * jump *label120 always
   462 label *label119
   463 label *label120
   464 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   469 op sub *tmp228 3 :findPossiblePlacement:height
   470 jump *label121 lessThanEq :findPossiblePlacement:y *tmp228
   471 jump *label113 always
-    * jump *label122 always
   472 label *label121
   473 label *label122
   474 label *label112
 
   496 jump *label127 greaterThanEq :tryPlaceGenerator:shift 0
   497 set :tryPlaceGenerator*retval false
   498 jump *label123 always
-    * jump *label128 always
   499 label *label127
   500 label *label128
   501 op add *tmp236 :tryPlaceGenerator:centerX 0.5
 
   523 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   524 set :tryPlaceGenerator*retval false
   525 jump *label123 always
-    * jump *label131 always
   526 label *label130
   527 label *label131
   528 op add *tmp248 :tryPlaceGenerator:centerX 0.5
 
   550 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   551 set :tryPlaceGenerator*retval false
   552 jump *label123 always
-    * jump *label134 always
   553 label *label133
   554 label *label134
   555 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   569 jump *label136 greaterThanEq :tryPlaceGenerator:shift 0
   570 set :tryPlaceGenerator*retval false
   571 jump *label123 always
-    * jump *label137 always
   572 label *label136
   573 label *label137
   574 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   608 jump *label141 greaterThanEq :tryPlaceGenerator:shift 0
   609 set :tryPlaceGenerator*retval false
   610 jump *label123 always
-    * jump *label142 always
   611 label *label141
   612 label *label142
   613 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   614 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   615 op shl *tmp294 1 :tryPlaceGenerator:shift
   616 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * jump *label139 always
   617 label *label138
   618 label *label139
   619 set :tryPlaceGenerator*retval true
 
   761 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   762 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   763 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * jump *label165 always
   764 label *label164
   765 label *label165
   766 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   780 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   781 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   782 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * jump *label168 always
   783 label *label167
   784 label *label168
   785 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
 
   796 jump *label170 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   797 set :layoutThoriumDrillAtLocation*retval false
   798 jump *label157 always
-    * jump *label171 always
   799 label *label170
   800 label *label171
   801 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
 
   815 jump *label173 equal :tryPlaceGenerator*retval false
   816 set :layoutThoriumDrillAtLocation*retval true
   817 jump *label157 always
-    * jump *label174 always
   818 label *label173
   819 label *label174
   820 set :layoutThoriumDrillAtLocation:sx 3
 
   865 jump *label185 equal :tryPlaceGenerator*retval false
   866 set :layoutThoriumDrillAtLocation*retval true
   867 jump *label157 always
-    * jump *label186 always
   868 label *label185
   869 label *label186
   870 label *label176
 
   893 jump *label189 notEqual :findDrillLocation*retval false
   894 set :layoutThoriumDrill*retval false
   895 jump *label187 always
-    * jump *label190 always
   896 label *label189
   897 label *label190
   898 setaddr :layoutThoriumDrillAtLocation*retaddr *label191 (h:*label191)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-12 instructions):
 
    25 set :findDrillLocation:dy :findDrillLocation:capacity
    26 set :findDrillLocation:dx :findDrillLocation:dy
    27 set .mapSpots :findDrillLocation:dx
-    * op sub *tmp13 @mapw .coreX
-    * op sub *tmp14 @maph .coreY
-    * op max *tmp15 .coreX .coreY
+   28 op sub *tmp13 @mapw :findDrillLocation:x
+   29 op sub *tmp14 @maph :findDrillLocation:y
+   30 op max *tmp15 :findDrillLocation:x :findDrillLocation:y
    31 op max *tmp15 *tmp15 *tmp13
    32 op max *tmp15 *tmp15 *tmp14
    33 set :findDrillLocation:distanceLimit *tmp15
    34 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp16 :moveTo:x
-    * set *tmp17 :moveTo:y
-    * set :moveTo.1:x *tmp16
-    * set :moveTo.1:y *tmp17
+   35 set .mapProgress 0
+   36 set :moveTo:x :findDrillLocation:x
+   37 set :moveTo:y :findDrillLocation:y
+   38 set *tmp16 .coreX
+   39 set *tmp17 .coreY
+   40 set :moveTo.1:x :moveTo:x
+   41 set :moveTo.1:y :moveTo:y
    42 set :moveTo.1:radius 6
    43 label *label26
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
+   44 ucontrol within *tmp16 *tmp17 6 *tmp18
    45 jump *label28 notEqual *tmp18 false
-    * op sub *tmp20 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
+   46 op sub *tmp20 6 0.5
+   47 ucontrol approach *tmp16 *tmp17 5.5
    48 label *label27
    49 jump *label26 always
    50 label *label28
    51 label *label25
    52 label *label24
-    * op div *tmp21 :findDrillLocation:distanceLimit 3.8197185279121366
+   53 op div *tmp21 *tmp15 3.8197185279121366
    54 op pow .mapTotal *tmp21 2
    55 set :findDrillLocation:oreX 0
    56 set :findDrillLocation:oreY 0
 
    73 op max .angle .angle @pi
    74 op mul .mapProgress .angle .angle
    75 label *label33
-    * jump *label35 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   76 jump *label35 greaterThanEq :locateOreAway:distance :findDrillLocation:distanceLimit
    77 op div :locateOreAway:a .angle @degToRad
    78 op sin *tmp34 :locateOreAway:a
    79 op mul *tmp35 *tmp34 :locateOreAway:distance
-    * op add *tmp36 .coreX *tmp35
+   80 op add *tmp36 :findDrillLocation:x *tmp35
    81 op sub *tmp37 @mapw 5
    82 set :limit:value *tmp36
    83 set :limit:low 5
    84 set :limit:high *tmp37
-    * op max *tmp39 :limit:value :limit:low
-    * op min *tmp38 *tmp39 :limit:high
+   85 op max *tmp39 *tmp36 5
+   86 op min *tmp38 *tmp39 *tmp37
    87 label *label36
    88 set :locateOreAway:lx *tmp38
    89 op cos *tmp41 :locateOreAway:a
    90 op mul *tmp42 *tmp41 :locateOreAway:distance
-    * op add *tmp43 .coreY *tmp42
+   91 op add *tmp43 :findDrillLocation:y *tmp42
    92 op sub *tmp44 @maph 5
    93 set :limit.1:value *tmp43
    94 set :limit.1:low 5
    95 set :limit.1:high *tmp44
-    * op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp45 *tmp46 :limit.1:high
+   96 op max *tmp46 *tmp43 5
+   97 op min *tmp45 *tmp46 *tmp44
    98 label *label37
    99 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+  100 set :moveTo.2:x *tmp38
+  101 set :moveTo.2:y *tmp45
   102 set :moveTo.2:radius 5
   103 label *label39
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
+  104 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
   105 jump *label41 notEqual *tmp48 false
-    * op sub *tmp50 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
+  106 op sub *tmp50 5 0.5
+  107 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   108 label *label40
   109 jump *label39 always
   110 label *label41
 
   113 op add .angle .angle *tmp51
   114 op mul .mapProgress .angle .angle
   115 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+  116 ulocate ore core true :findDrillLocation:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   117 jump *label42 notEqual *tmp54 false
   118 set *tmp28 false
   119 jump *label32 always
   120 label *label42
   121 label *label43
-    * op sub *tmp58 :locateOreAway:x .coreX
+  122 op sub *tmp58 :locateOreAway:x :findDrillLocation:x
   123 op abs *tmp59 *tmp58
-    * op sub *tmp60 :locateOreAway:y .coreY
+  124 op sub *tmp60 :locateOreAway:y :findDrillLocation:y
   125 op abs *tmp61 *tmp60
   126 op max :locateOreAway:coreDist *tmp59 *tmp61
-    * op sub *tmp63 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp64 :locateOreAway:y :locateOreAway:ly
+  127 op sub *tmp63 :locateOreAway:x *tmp38
+  128 op sub *tmp64 :locateOreAway:y *tmp45
   129 op len :locateOreAway:unitDist *tmp63 *tmp64
   130 jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x
   131 jump *label46 notEqual :locateOreAway:lastY :locateOreAway:y
 
   149 read :visited:lx bank1 *tmp78
   150 op add *tmp81 :visited:index 3
   151 read :visited:ly bank1 *tmp81
-    * op sub *tmp83 :visited:x :visited:lx
-    * op sub *tmp84 :visited:y :visited:ly
+  152 op sub *tmp83 :locateOreAway:x :visited:lx
+  153 op sub *tmp84 :locateOreAway:y :visited:ly
   154 op len *tmp85 *tmp83 *tmp84
   155 jump *label56 greaterThanEq *tmp85 7
   156 set *tmp74 true
 
   163 label *label55
   164 set *tmp74 false
   165 jump *label52 always
-    * set *tmp74 null
   166 label *label52
   167 jump *label58 notEqual *tmp74 false
-    * op div *tmp90 7.639437055824273 :locateOreAway:distance
+  168 op div *tmp90 2 .angle
   169 op add .angle .angle *tmp90
   170 op mul .mapProgress .angle .angle
   171 printflush message1
 
   182 label *label35
   183 set *tmp28 false
   184 jump *label32 always
-    * set *tmp28 null
   185 label *label32
   186 set :findDrillLocation:oreX :locateOreAway:x
   187 set :findDrillLocation:oreY :locateOreAway:y
 
   195 op add .mapSpots .mapSpots 1
   196 label *label62
   197 label *label63
-    * set :moveTo.3:x :findDrillLocation:oreX
-    * set :moveTo.3:y :findDrillLocation:oreY
-    * set *tmp98 :moveTo.3:x
-    * set *tmp99 :moveTo.3:y
-    * set :moveTo.4:x *tmp98
-    * set :moveTo.4:y *tmp99
+  198 set :moveTo.3:x :locateOreAway:x
+  199 set :moveTo.3:y :locateOreAway:y
+  200 set *tmp98 :findDrillLocation:oreX
+  201 set *tmp99 :findDrillLocation:oreY
+  202 set :moveTo.4:x :moveTo.3:x
+  203 set :moveTo.4:y :moveTo.3:y
   204 set :moveTo.4:radius 6
   205 label *label66
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
+  206 ucontrol within *tmp98 *tmp99 6 *tmp100
   207 jump *label68 notEqual *tmp100 false
-    * op sub *tmp102 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
+  208 op sub *tmp102 6 0.5
+  209 ucontrol approach *tmp98 *tmp99 5.5
   210 label *label67
   211 jump *label66 always
   212 label *label68
 
   230 read :findDrillLocation:score processor4 ":findBestPosition*retval"
   231 op add :findDrillLocation:newX :findDrillLocation:oreX :findDrillLocation:diffX
   232 op add :findDrillLocation:newY :findDrillLocation:oreY :findDrillLocation:diffY
-    * op sub *tmp114 :findDrillLocation:newX .coreX
+  233 op sub *tmp114 :findDrillLocation:newX :findDrillLocation:x
   234 op abs *tmp115 *tmp114
-    * op sub *tmp116 :findDrillLocation:newY .coreY
+  235 op sub *tmp116 :findDrillLocation:newY :findDrillLocation:y
   236 op abs *tmp117 *tmp116
   237 op max :findDrillLocation:coreDist *tmp115 *tmp117
   238 jump *label73 greaterThan :findDrillLocation:coreDist 8
 
   254 set :saveLocation:y :findDrillLocation:dy
   255 op add .count .count 1
   256 set *tmp127 .count
-    * sensor *tmp129 :saveLocation:item @id
-    * write *tmp129 bank1 *tmp127
+  257 sensor *tmp129 :findDrillLocation:item @id
+  258 write *tmp129 bank1 .count
   259 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  260 write :findDrillLocation:score bank1 .count
   261 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  262 write :findDrillLocation:dx bank1 .count
   263 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  264 write :findDrillLocation:dy bank1 .count
   265 op add .locations .locations 1
   266 label *label81
   267 ucontrol unbind
 
   303 set :saveLocation.1:y :findDrillLocation:bestY
   304 op add .count .count 1
   305 set *tmp151 .count
-    * sensor *tmp153 :saveLocation.1:item @id
-    * write *tmp153 bank1 *tmp151
+  306 sensor *tmp153 :findDrillLocation:item @id
+  307 write *tmp153 bank1 .count
   308 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  309 write :findDrillLocation:best bank1 .count
   310 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  311 write :findDrillLocation:bestX bank1 .count
   312 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  313 write :findDrillLocation:bestY bank1 .count
   314 op add .locations .locations 1
   315 label *label90
   316 label *label88
 
   348 label *label95
   349 jump *label96 equal :shiftMask:shiftX 0
   350 op abs *tmp177 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp177
+  351 op shr :shiftMask:keep 0b1111111 *tmp161
   352 jump *label98 lessThanEq :shiftMask:shiftX 0
   353 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   354 label *label98
 
   364 label *label97
   365 set :shiftMask*retval :shiftMask:mask
   366 jump *label91 always
-    * set :shiftMask*retval null
   367 label *label91
   368 return :shiftMask*retaddr
   369 end
   370 label *label14
   371 op add *tmp184 :excludeArea:areaWidth 7
-    * op add *tmp185 *tmp184 1
+  372 op add *tmp185 :excludeArea:areaWidth 8
   373 op idiv *tmp186 *tmp185 2
   374 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   375 op abs *tmp188 *tmp187
   376 op sub :excludeArea:overlapX *tmp186 *tmp188
   377 op add *tmp190 :excludeArea:areaHeight 7
-    * op add *tmp191 *tmp190 1
+  378 op add *tmp191 :excludeArea:areaHeight 8
   379 op idiv *tmp192 *tmp191 2
   380 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   381 op abs *tmp194 *tmp193
 
   388 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   389 set :createMatrixOfSize:width :excludeArea:blockSizeX
   390 set :createMatrixOfSize:height :excludeArea:blockSizeY
-    * op shl *tmp203 1 :createMatrixOfSize:width
+  391 op shl *tmp203 1 :excludeArea:blockSizeX
   392 op sub :createMatrixOfSize:row *tmp203 1
   393 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   394 set :createMatrixOfSize:i 1
   395 label *label104
   396 jump *label106 greaterThanEq :createMatrixOfSize:i 7
-    * jump *label107 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
+  397 jump *label107 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   398 jump *label106 always
   399 label *label107
   400 label *label108
 
   406 label *label106
   407 set *tmp202 :createMatrixOfSize:matrix
   408 jump *label103 always
-    * set *tmp202 null
   409 label *label103
-    * set :excludeArea:blocked *tmp202
+  410 set :excludeArea:blocked :createMatrixOfSize:matrix
   411 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   412 op sub *tmp210 7 :excludeArea:blockSizeX
   413 op mul :excludeArea:shiftX *tmp209 *tmp210
   414 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   415 op sub *tmp213 7 :excludeArea:blockSizeY
   416 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :excludeArea:blocked
+  417 set :shiftMask:mask *tmp202
   418 set :shiftMask:shiftX :excludeArea:shiftX
   419 set :shiftMask:shiftY :excludeArea:shiftY
   420 setaddr :shiftMask*retaddr *label109 (h:*label109)
   421 call *label13 *invalid :shiftMask*retval (m:*label109) (h:*label109)
   422 label *label109
   423 set :excludeArea:shifted :shiftMask*retval
-    * op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
+  424 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   425 jump *label100 always
-    * set *tmp199 null
   426 jump *label102 always
   427 label *label101
   428 set :excludeArea*retval :excludeArea:mask
   429 jump *label100 always
-    * set *tmp199 null
   430 label *label102
-    * set :excludeArea*retval *tmp199
+  431 set :excludeArea*retval null
   432 label *label100
   433 return :excludeArea*retaddr
   434 end
 
   471 label *label113
   472 set :findPossiblePlacement*retval -1
   473 jump *label110 always
-    * set :findPossiblePlacement*retval null
   474 label *label110
   475 return :findPossiblePlacement*retaddr
   476 end
 
   485 set :tryPlaceGenerator:c :findPossiblePlacement:x
   486 set :tryPlaceGenerator:r :findPossiblePlacement:y
   487 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label125 lessThan :tryPlaceGenerator:shift 0
-    * jump *label127 greaterThanEq :tryPlaceGenerator:shift 0
+  488 jump *label125 lessThan :findPossiblePlacement*retval 0
+  489 jump *label127 greaterThanEq :findPossiblePlacement*retval 0
   490 set :tryPlaceGenerator*retval false
   491 jump *label123 always
   492 label *label127
   493 label *label128
   494 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp236 :tryPlaceGenerator:c
+  495 op add .water2X *tmp236 :findPossiblePlacement:x
   496 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp238 :tryPlaceGenerator:r
+  497 op add .water2Y *tmp238 :findPossiblePlacement:y
   498 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp240 :tryPlaceGenerator:c
+  499 op add .generatorX *tmp236 :findPossiblePlacement:x
   500 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp242 :tryPlaceGenerator:r
-    * op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  501 op add .generatorY *tmp242 :findPossiblePlacement:y
+  502 op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   503 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   504 jump *label126 always
   505 label *label125
 
   513 set :tryPlaceGenerator:c :findPossiblePlacement:x
   514 set :tryPlaceGenerator:r :findPossiblePlacement:y
   515 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
+  516 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   517 set :tryPlaceGenerator*retval false
   518 jump *label123 always
   519 label *label130
   520 label *label131
   521 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp248 :tryPlaceGenerator:c
+  522 op add .water2X *tmp248 :findPossiblePlacement:x
   523 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp250 :tryPlaceGenerator:r
+  524 op add .water2Y *tmp250 :findPossiblePlacement:y
   525 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp252 :tryPlaceGenerator:c
+  526 op add .generatorX *tmp252 :findPossiblePlacement:x
   527 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp254 :tryPlaceGenerator:r
-    * op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  528 op add .generatorY *tmp250 :findPossiblePlacement:y
+  529 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   530 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   531 label *label126
   532 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
 
   540 set :tryPlaceGenerator:c :findPossiblePlacement:x
   541 set :tryPlaceGenerator:r :findPossiblePlacement:y
   542 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
+  543 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   544 set :tryPlaceGenerator*retval false
   545 jump *label123 always
   546 label *label133
   547 label *label134
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp262 1 :tryPlaceGenerator:shift
+  548 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  549 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  550 op shl *tmp262 1 :findPossiblePlacement*retval
   551 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   552 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   553 set :findPossiblePlacement:placementMask 1
 
   559 set :tryPlaceGenerator:c :findPossiblePlacement:x
   560 set :tryPlaceGenerator:r :findPossiblePlacement:y
   561 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label136 greaterThanEq :tryPlaceGenerator:shift 0
+  562 jump *label136 greaterThanEq :findPossiblePlacement*retval 0
   563 set :tryPlaceGenerator*retval false
   564 jump *label123 always
   565 label *label136
   566 label *label137
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp268 1 :tryPlaceGenerator:shift
+  567 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  568 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  569 op shl *tmp268 1 :findPossiblePlacement*retval
   570 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   571 op sub *tmp269 .water2X .node1X
   572 op sub *tmp270 .water2Y .node1Y
 
   598 set :tryPlaceGenerator:c :findPossiblePlacement:x
   599 set :tryPlaceGenerator:r :findPossiblePlacement:y
   600 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label141 greaterThanEq :tryPlaceGenerator:shift 0
+  601 jump *label141 greaterThanEq :findPossiblePlacement*retval 0
   602 set :tryPlaceGenerator*retval false
   603 jump *label123 always
   604 label *label141
   605 label *label142
-    * op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp294 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
+  606 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  607 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  608 op shl *tmp294 1 :findPossiblePlacement*retval
   609 label *label138
   610 label *label139
   611 set :tryPlaceGenerator*retval true
   612 jump *label123 always
-    * set :tryPlaceGenerator*retval null
   613 label *label123
   614 return :tryPlaceGenerator*retaddr
   615 end
 
   628 label *label146
   629 set :createBlockMaskRow*retval :createBlockMaskRow:result
   630 jump *label143 always
-    * set :createBlockMaskRow*retval null
   631 label *label143
   632 return :createBlockMaskRow*retaddr
   633 end
 
   640 set :createAdjacentMask:x :createCombinedMask:x
   641 set :createAdjacentMask:y :createCombinedMask:y
   642 set :createAdjacentMask:result 0
-    * op add *tmp305 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  643 op add *tmp305 :createCombinedMask:y 4
+  644 set :createBlockMaskRow:x :createCombinedMask:x
   645 set :createBlockMaskRow:y *tmp305
   646 setaddr :createBlockMaskRow*retaddr *label149 (h:*label149)
   647 call *label17 *invalid :createBlockMaskRow*retval (m:*label149) (h:*label149)
 
   668 op or *tmp312 :createAdjacentMask:row2 *tmp311
   669 op shr *tmp313 :createAdjacentMask:row1 1
   670 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
+  671 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
   672 op shl *tmp316 :createAdjacentMask:result 7
   673 op and *tmp317 :createAdjacentMask:mask 0xFE
   674 op or :createAdjacentMask:result *tmp316 *tmp317
   675 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  676 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   677 label *label152
   678 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   679 jump *label151 always
 
   686 read *tmp320 processor4 ":createTerrainMask*finished"
   687 jump *label155 equal *tmp320 false
   688 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
-    * op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  689 op or :excludeArea:mask *tmp304 :createCombinedMask:terrainMask
   690 set :excludeArea:maskX :createCombinedMask:x
   691 set :excludeArea:maskY :createCombinedMask:y
   692 set :excludeArea:areaX .coreX
 
   698 label *label156
   699 set :createCombinedMask*retval :excludeArea*retval
   700 jump *label147 always
-    * set :createCombinedMask*retval null
   701 label *label147
   702 return :createCombinedMask*retaddr
   703 end
 
   714 set :moveTo.5:y .drillY
   715 set :moveTo.5:radius 1
   716 label *label159
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
+  717 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   718 jump *label161 notEqual *tmp323 false
-    * op sub *tmp325 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
+  719 op sub *tmp325 1 0.5
+  720 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   721 label *label160
   722 jump *label159 always
   723 label *label161
 
   728 call *label18 *invalid :createCombinedMask*retval (m:*label162) (h:*label162)
   729 label *label162
   730 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  731 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   732 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   733 set :layoutThoriumDrillAtLocation:mask2x2 387
   734 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  735 set :findPossiblePlacement:placementMask 387
   736 set :findPossiblePlacement:width 2
   737 set :findPossiblePlacement:height 2
   738 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
 
   741 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   742 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   743 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
+  744 jump *label164 lessThan :findPossiblePlacement*retval 0
   745 op add *tmp332 .drillX 0.5
-    * op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
+  746 op add .water1X *tmp332 :findPossiblePlacement:x
   747 op add *tmp334 .drillY 0.5
-    * op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  748 op add .water1Y *tmp334 :findPossiblePlacement:y
+  749 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   750 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
+  751 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  752 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   753 label *label164
   754 label *label165
   755 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   762 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   763 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   764 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
+  765 jump *label167 lessThan :findPossiblePlacement*retval 0
   766 op add *tmp341 .drillX 0.5
-    * op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
+  767 op add .containerX *tmp341 :findPossiblePlacement:x
   768 op add *tmp343 .drillY 0.5
-    * op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  769 op add .containerY *tmp343 :findPossiblePlacement:y
+  770 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   771 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   772 label *label167
   773 label *label168
 
   782 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   783 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   784 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label170 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
+  785 jump *label170 greaterThanEq :findPossiblePlacement*retval 0
   786 set :layoutThoriumDrillAtLocation*retval false
   787 jump *label157 always
   788 label *label170
   789 label *label171
-    * op add .node1X .drillX :layoutThoriumDrillAtLocation:c
-    * op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
-    * op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
+  790 op add .node1X .drillX :findPossiblePlacement:x
+  791 op add .node1Y .drillY :findPossiblePlacement:y
+  792 op shl *tmp352 1 :findPossiblePlacement*retval
   793 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   794 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   795 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   796 set :tryPlaceGenerator:centerX .drillX
   797 set :tryPlaceGenerator:centerY .drillY
   798 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  799 set :tryPlaceGenerator:generatorHorizontal 1935
+  800 set :tryPlaceGenerator:generatorVertical 6340995
   801 setaddr :tryPlaceGenerator*retaddr *label172 (h:*label172)
   802 call *label16 *invalid :tryPlaceGenerator*retval (m:*label172) (h:*label172)
   803 label *label172
 
   840 call *label13 *invalid :shiftMask*retval (m:*label183) (h:*label183)
   841 label *label183
   842 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  843 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   844 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   845 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   846 set :tryPlaceGenerator:centerX *tmp361
 
   862 label *label177
   863 set :layoutThoriumDrillAtLocation*retval true
   864 jump *label157 always
-    * set :layoutThoriumDrillAtLocation*retval null
   865 label *label157
   866 return :layoutThoriumDrillAtLocation*retaddr
   867 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-70 instructions):
 
    35 set .mapProgress 0
    36 set :moveTo:x :findDrillLocation:x
    37 set :moveTo:y :findDrillLocation:y
-    * set *tmp16 .coreX
-    * set *tmp17 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   38 set *tmp16 :findDrillLocation:x
+   39 set *tmp17 :findDrillLocation:y
+   40 set :moveTo.1:x :findDrillLocation:x
+   41 set :moveTo.1:y :findDrillLocation:y
    42 label *label26
-    * ucontrol within *tmp16 *tmp17 6 *tmp18
+   43 ucontrol within .coreX .coreY 6 *tmp18
    44 jump *label28 notEqual *tmp18 false
-    * op sub *tmp20 6 0.5
-    * ucontrol approach *tmp16 *tmp17 5.5
+   45 ucontrol approach .coreX .coreY 5.5
    46 label *label27
    47 jump *label26 always
    48 label *label28
 
    61 op min :findDrillLocation:distanceLimit :findDrillLocation:distanceLimit :findDrillLocation:maxDistance
    62 op div *tmp26 :findDrillLocation:distanceLimit 3.8197185279121366
    63 op pow .mapTotal *tmp26 2
-    * set :locateOreAway:ore :findDrillLocation:item
    64 set :locateOreAway:x :findDrillLocation:oreX
    65 set :locateOreAway:y :findDrillLocation:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocation:distanceLimit
    66 op mul :locateOreAway:distance 3.8197185279121366 .angle
    67 set :locateOreAway:lastX -1
    68 set :locateOreAway:lastY -1
 
    75 op mul *tmp35 *tmp34 :locateOreAway:distance
    76 op add *tmp36 :findDrillLocation:x *tmp35
    77 op sub *tmp37 @mapw 5
-    * set :limit:value *tmp36
-    * set :limit:low 5
-    * set :limit:high *tmp37
    78 op max *tmp39 *tmp36 5
    79 op min *tmp38 *tmp39 *tmp37
    80 label *label36
 
    83 op mul *tmp42 *tmp41 :locateOreAway:distance
    84 op add *tmp43 :findDrillLocation:y *tmp42
    85 op sub *tmp44 @maph 5
-    * set :limit.1:value *tmp43
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp44
    86 op max *tmp46 *tmp43 5
    87 op min *tmp45 *tmp46 *tmp44
    88 label *label37
    89 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x *tmp38
-    * set :moveTo.2:y *tmp45
-    * set :moveTo.2:radius 5
    90 label *label39
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
+   91 ucontrol within *tmp38 *tmp45 5 *tmp48
    92 jump *label41 notEqual *tmp48 false
-    * op sub *tmp50 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   93 ucontrol approach *tmp38 *tmp45 4.5
    94 label *label40
    95 jump *label39 always
    96 label *label41
 
   124 jump *label50 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   125 set :locateOreAway:lastX :locateOreAway:x
   126 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   127 set *tmp75 .locations
   128 set :visited:i .locationsStart
   129 label *label53
 
   181 label *label63
   182 set :moveTo.3:x :locateOreAway:x
   183 set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :findDrillLocation:oreX
-    * set *tmp99 :findDrillLocation:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  184 set *tmp98 :locateOreAway:x
+  185 set *tmp99 :locateOreAway:y
+  186 set :moveTo.4:x :locateOreAway:x
+  187 set :moveTo.4:y :locateOreAway:y
   188 label *label66
-    * ucontrol within *tmp98 *tmp99 6 *tmp100
+  189 ucontrol within :findDrillLocation:oreX :findDrillLocation:oreY 6 *tmp100
   190 jump *label68 notEqual *tmp100 false
-    * op sub *tmp102 6 0.5
-    * ucontrol approach *tmp98 *tmp99 5.5
+  191 ucontrol approach :findDrillLocation:oreX :findDrillLocation:oreY 5.5
   192 label *label67
   193 jump *label66 always
   194 label *label68
 
   230 label *label77
   231 label *label78
   232 jump *label79 lessThan :findDrillLocation:capacity :findDrillLocation:limit
-    * set :saveLocation:item :findDrillLocation:item
-    * set :saveLocation:value :findDrillLocation:score
-    * set :saveLocation:x :findDrillLocation:dx
-    * set :saveLocation:y :findDrillLocation:dy
   233 op add .count .count 1
-    * set *tmp127 .count
   234 sensor *tmp129 :findDrillLocation:item @id
   235 write *tmp129 bank1 .count
   236 op add .count .count 1
 
   274 jump *label69 always
   275 label *label71
   276 jump *label88 lessThan :findDrillLocation:best 0
-    * set :saveLocation.1:item :findDrillLocation:item
-    * set :saveLocation.1:value :findDrillLocation:best
-    * set :saveLocation.1:x :findDrillLocation:bestX
-    * set :saveLocation.1:y :findDrillLocation:bestY
   277 op add .count .count 1
-    * set *tmp151 .count
   278 sensor *tmp153 :findDrillLocation:item @id
   279 write *tmp153 bank1 .count
   280 op add .count .count 1
 
   319 op shr :shiftMask:mask :shiftMask:mask *tmp174
   320 label *label95
   321 jump *label96 equal :shiftMask:shiftX 0
-    * op abs *tmp177 :shiftMask:shiftX
   322 op shr :shiftMask:keep 0b1111111 *tmp161
   323 jump *label98 lessThanEq :shiftMask:shiftX 0
   324 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   339 return :shiftMask*retaddr
   340 end
   341 label *label14
-    * op add *tmp184 :excludeArea:areaWidth 7
   342 op add *tmp185 :excludeArea:areaWidth 8
   343 op idiv *tmp186 *tmp185 2
   344 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   345 op abs *tmp188 *tmp187
   346 op sub :excludeArea:overlapX *tmp186 *tmp188
-    * op add *tmp190 :excludeArea:areaHeight 7
   347 op add *tmp191 :excludeArea:areaHeight 8
   348 op idiv *tmp192 *tmp191 2
   349 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
 
   355 jump *label101 equal *tmp198 false
   356 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
   357 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
-    * set :createMatrixOfSize:width :excludeArea:blockSizeX
-    * set :createMatrixOfSize:height :excludeArea:blockSizeY
   358 op shl *tmp203 1 :excludeArea:blockSizeX
   359 op sub :createMatrixOfSize:row *tmp203 1
   360 set :createMatrixOfSize:matrix :createMatrixOfSize:row
 
   374 set *tmp202 :createMatrixOfSize:matrix
   375 jump *label103 always
   376 label *label103
-    * set :excludeArea:blocked :createMatrixOfSize:matrix
   377 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   378 op sub *tmp210 7 :excludeArea:blockSizeX
   379 op mul :excludeArea:shiftX *tmp209 *tmp210
   380 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   381 op sub *tmp213 7 :excludeArea:blockSizeY
   382 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask *tmp202
+  383 set :shiftMask:mask :createMatrixOfSize:matrix
   384 set :shiftMask:shiftX :excludeArea:shiftX
   385 set :shiftMask:shiftY :excludeArea:shiftY
   386 setaddr :shiftMask*retaddr *label109 (h:*label109)
   387 call *label13 *invalid :shiftMask*retval (m:*label109) (h:*label109)
   388 label *label109
-    * set :excludeArea:shifted :shiftMask*retval
   389 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   390 jump *label100 always
   391 jump *label102 always
 
   393 set :excludeArea*retval :excludeArea:mask
   394 jump *label100 always
   395 label *label102
-    * set :excludeArea*retval null
   396 label *label100
   397 return :excludeArea*retaddr
   398 end
 
   446 setaddr :findPossiblePlacement*retaddr *label124 (h:*label124)
   447 call *label15 *invalid :findPossiblePlacement*retval (m:*label124) (h:*label124)
   448 label *label124
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   449 jump *label125 lessThan :findPossiblePlacement*retval 0
   450 jump *label127 greaterThanEq :findPossiblePlacement*retval 0
   451 set :tryPlaceGenerator*retval false
 
   456 op add .water2X *tmp236 :findPossiblePlacement:x
   457 op add *tmp238 :tryPlaceGenerator:centerY 0.5
   458 op add .water2Y *tmp238 :findPossiblePlacement:y
-    * op add *tmp240 :tryPlaceGenerator:centerX 0.5
   459 op add .generatorX *tmp236 :findPossiblePlacement:x
   460 op add *tmp242 :tryPlaceGenerator:centerY 2.5
   461 op add .generatorY *tmp242 :findPossiblePlacement:y
 
   470 setaddr :findPossiblePlacement*retaddr *label129 (h:*label129)
   471 call *label15 *invalid :findPossiblePlacement*retval (m:*label129) (h:*label129)
   472 label *label129
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   473 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   474 set :tryPlaceGenerator*retval false
   475 jump *label123 always
 
   481 op add .water2Y *tmp250 :findPossiblePlacement:y
   482 op add *tmp252 :tryPlaceGenerator:centerX 2.5
   483 op add .generatorX *tmp252 :findPossiblePlacement:x
-    * op add *tmp254 :tryPlaceGenerator:centerY 0.5
   484 op add .generatorY *tmp250 :findPossiblePlacement:y
   485 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   486 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
 
   493 setaddr :findPossiblePlacement*retaddr *label132 (h:*label132)
   494 call *label15 *invalid :findPossiblePlacement*retval (m:*label132) (h:*label132)
   495 label *label132
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   496 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   497 set :tryPlaceGenerator*retval false
   498 jump *label123 always
 
   509 setaddr :findPossiblePlacement*retaddr *label135 (h:*label135)
   510 call *label15 *invalid :findPossiblePlacement*retval (m:*label135) (h:*label135)
   511 label *label135
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   512 jump *label136 greaterThanEq :findPossiblePlacement*retval 0
   513 set :tryPlaceGenerator*retval false
   514 jump *label123 always
 
   545 setaddr :findPossiblePlacement*retaddr *label140 (h:*label140)
   546 call *label15 *invalid :findPossiblePlacement*retval (m:*label140) (h:*label140)
   547 label *label140
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   548 jump *label141 greaterThanEq :findPossiblePlacement*retval 0
   549 set :tryPlaceGenerator*retval false
   550 jump *label123 always
 
   552 label *label142
   553 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   554 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp294 1 :findPossiblePlacement*retval
   555 label *label138
   556 label *label139
   557 set :tryPlaceGenerator*retval true
 
   609 setaddr :createBlockMaskRow*retaddr *label154 (h:*label154)
   610 call *label17 *invalid :createBlockMaskRow*retval (m:*label154) (h:*label154)
   611 label *label154
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   612 op shl *tmp311 :createAdjacentMask:row1 1
   613 op or *tmp312 :createAdjacentMask:row2 *tmp311
   614 op shr *tmp313 :createAdjacentMask:row1 1
 
   625 label *label153
   626 op shr *tmp304 :createAdjacentMask:result 1
   627 label *label148
-    * set :createCombinedMask:adjacentMask *tmp304
   628 label *label155
   629 wait 1e-15
   630 read *tmp320 processor4 ":createTerrainMask*finished"
 
   656 set .water1X -1
   657 set :moveTo.5:x .drillX
   658 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   659 label *label159
   660 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   661 jump *label161 notEqual *tmp323 false
-    * op sub *tmp325 1 0.5
   662 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   663 label *label160
   664 jump *label159 always
 
   669 setaddr :createCombinedMask*retaddr *label162 (h:*label162)
   670 call *label18 *invalid :createCombinedMask*retval (m:*label162) (h:*label162)
   671 label *label162
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   672 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   673 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   674 set :layoutThoriumDrillAtLocation:mask2x2 387
 
   679 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
   680 call *label15 *invalid :findPossiblePlacement*retval (m:*label163) (h:*label163)
   681 label *label163
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   682 jump *label164 lessThan :findPossiblePlacement*retval 0
   683 op add *tmp332 .drillX 0.5
   684 op add .water1X *tmp332 :findPossiblePlacement:x
 
   686 op add .water1Y *tmp334 :findPossiblePlacement:y
   687 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   688 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   689 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   690 label *label164
   691 label *label165
 
   696 setaddr :findPossiblePlacement*retaddr *label166 (h:*label166)
   697 call *label15 *invalid :findPossiblePlacement*retval (m:*label166) (h:*label166)
   698 label *label166
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   699 jump *label167 lessThan :findPossiblePlacement*retval 0
   700 op add *tmp341 .drillX 0.5
   701 op add .containerX *tmp341 :findPossiblePlacement:x
 
   713 setaddr :findPossiblePlacement*retaddr *label169 (h:*label169)
   714 call *label15 *invalid :findPossiblePlacement*retval (m:*label169) (h:*label169)
   715 label *label169
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   716 jump *label170 greaterThanEq :findPossiblePlacement*retval 0
   717 set :layoutThoriumDrillAtLocation*retval false
   718 jump *label157 always
 
   770 setaddr :shiftMask*retaddr *label183 (h:*label183)
   771 call *label13 *invalid :shiftMask*retval (m:*label183) (h:*label183)
   772 label *label183
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   773 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   774 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   775 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-15 instructions):
 
    33 set :findDrillLocation:distanceLimit *tmp15
    34 set .angle 0
    35 set .mapProgress 0
-    * set :moveTo:x :findDrillLocation:x
-    * set :moveTo:y :findDrillLocation:y
-    * set *tmp16 :findDrillLocation:x
-    * set *tmp17 :findDrillLocation:y
-    * set :moveTo.1:x :findDrillLocation:x
-    * set :moveTo.1:y :findDrillLocation:y
    36 label *label26
-    * ucontrol within .coreX .coreY 6 *tmp18
+   37 ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18
    38 jump *label28 notEqual *tmp18 false
-    * ucontrol approach .coreX .coreY 5.5
+   39 ucontrol approach :findDrillLocation:x :findDrillLocation:y 5.5
    40 label *label27
    41 jump *label26 always
    42 label *label28
 
    72 op max *tmp39 *tmp36 5
    73 op min *tmp38 *tmp39 *tmp37
    74 label *label36
-    * set :locateOreAway:lx *tmp38
    75 op cos *tmp41 :locateOreAway:a
    76 op mul *tmp42 *tmp41 :locateOreAway:distance
    77 op add *tmp43 :findDrillLocation:y *tmp42
 
    79 op max *tmp46 *tmp43 5
    80 op min *tmp45 *tmp46 *tmp44
    81 label *label37
-    * set :locateOreAway:ly *tmp45
    82 label *label39
    83 ucontrol within *tmp38 *tmp45 5 *tmp48
    84 jump *label41 notEqual *tmp48 false
 
   171 op add .mapSpots .mapSpots 1
   172 label *label62
   173 label *label63
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :locateOreAway:x
-    * set *tmp99 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   174 label *label66
-    * ucontrol within :findDrillLocation:oreX :findDrillLocation:oreY 6 *tmp100
+  175 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   176 jump *label68 notEqual *tmp100 false
-    * ucontrol approach :findDrillLocation:oreX :findDrillLocation:oreY 5.5
+  177 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   178 label *label67
   179 jump *label66 always
   180 label *label68
 
   357 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   358 jump *label104 always
   359 label *label106
-    * set *tmp202 :createMatrixOfSize:matrix
   360 jump *label103 always
   361 label *label103
   362 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    62 set :locateOreAway:lastY -1
    63 op max .angle .angle @pi
    64 op mul .mapProgress .angle .angle
+   65 op sub *tmp37 @mapw 5
+   66 op sub *tmp44 @maph 5
    67 label *label33
    68 jump *label35 greaterThanEq :locateOreAway:distance :findDrillLocation:distanceLimit
    69 op div :locateOreAway:a .angle @degToRad
    70 op sin *tmp34 :locateOreAway:a
    71 op mul *tmp35 *tmp34 :locateOreAway:distance
    72 op add *tmp36 :findDrillLocation:x *tmp35
-    * op sub *tmp37 @mapw 5
    73 op max *tmp39 *tmp36 5
    74 op min *tmp38 *tmp39 *tmp37
    75 label *label36
    76 op cos *tmp41 :locateOreAway:a
    77 op mul *tmp42 *tmp41 :locateOreAway:distance
    78 op add *tmp43 :findDrillLocation:y *tmp42
-    * op sub *tmp44 @maph 5
    79 op max *tmp46 *tmp43 5
    80 op min *tmp45 *tmp46 *tmp44
    81 label *label37

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    66 op sub *tmp44 @maph 5
    67 label *label33
    68 jump *label35 greaterThanEq :locateOreAway:distance :findDrillLocation:distanceLimit
+   69 label *label197
    70 op div :locateOreAway:a .angle @degToRad
    71 op sin *tmp34 :locateOreAway:a
    72 op mul *tmp35 *tmp34 :locateOreAway:distance
 
   121 set :visited:i .locationsStart
   122 label *label53
   123 jump *label55 greaterThanEq :visited:i *tmp75
+  124 label *label198
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp78 :visited:index 2
   127 read :visited:lx bank1 *tmp78
 
   137 label *label57
   138 label *label54
   139 op add :visited:i :visited:i 1
-    * jump *label53 always
+  140 jump *label198 lessThan :visited:i *tmp75
   141 label *label55
   142 set *tmp74 false
   143 jump *label52 always
 
   156 label *label48
   157 label *label49
   158 label *label34
-    * jump *label33 always
+  159 jump *label197 lessThan :locateOreAway:distance :findDrillLocation:distanceLimit
   160 label *label35
   161 set *tmp28 false
   162 jump *label32 always
 
   348 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   349 set :createMatrixOfSize:i 1
   350 label *label104
-    * jump *label106 greaterThanEq :createMatrixOfSize:i 7
+  351 label *label199
   352 jump *label107 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   353 jump *label106 always
   354 label *label107
 
   357 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   358 label *label105
   359 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label104 always
+  360 jump *label199 lessThan :createMatrixOfSize:i 7
   361 label *label106
   362 jump *label103 always
   363 label *label103
 
   387 set :findPossiblePlacement:y -3
   388 label *label111
   389 jump *label113 greaterThan :findPossiblePlacement:y 3
+  390 label *label200
   391 op add *tmp216 :findPossiblePlacement:y 3
   392 op mul *tmp217 7 *tmp216
   393 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   394 set :findPossiblePlacement:x -3
   395 label *label114
   396 jump *label116 greaterThan :findPossiblePlacement:x 3
+  397 label *label201
   398 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   399 jump *label117 notEqual *tmp219 0
   400 op mul *tmp222 :findPossiblePlacement:y 7
 
   411 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   412 label *label115
   413 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label114 always
+  414 jump *label201 lessThanEq :findPossiblePlacement:x 3
   415 label *label116
   416 op sub *tmp228 3 :findPossiblePlacement:height
   417 jump *label121 lessThanEq :findPossiblePlacement:y *tmp228
 
   420 label *label122
   421 label *label112
   422 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label111 always
+  423 jump *label200 lessThanEq :findPossiblePlacement:y 3
   424 label *label113
   425 set :findPossiblePlacement*retval -1
   426 jump *label110 always
 
   552 set :createBlockMaskRow:result 0
   553 set :createBlockMaskRow:c 4
   554 label *label144
-    * jump *label146 lessThan :createBlockMaskRow:c -4
+  555 label *label202
   556 op shl *tmp295 :createBlockMaskRow:result 1
   557 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   558 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   559 op or :createBlockMaskRow:result *tmp295 *tmp297
   560 label *label145
   561 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label144 always
+  562 jump *label202 greaterThanEq :createBlockMaskRow:c -4
   563 label *label146
   564 set :createBlockMaskRow*retval :createBlockMaskRow:result
   565 jump *label143 always
 
   591 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   592 set :createAdjacentMask:r 2
   593 label *label151
-    * jump *label153 lessThan :createAdjacentMask:r -4
+  594 label *label203
   595 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   596 set :createBlockMaskRow:x :createAdjacentMask:x
   597 set :createBlockMaskRow:y *tmp309
 
   610 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   611 label *label152
   612 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label151 always
+  613 jump *label203 greaterThanEq :createAdjacentMask:r -4
   614 label *label153
   615 op shr *tmp304 :createAdjacentMask:result 1
   616 label *label148

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   213 set :findDrillLocation:dx :findDrillLocation:newX
   214 set :findDrillLocation:dy :findDrillLocation:newY
   215 set :findDrillLocation:capacity :findDrillLocation:score
-    * jump *label77 greaterThanEq :findDrillLocation:limit 1000
-    * set .mapSpots :findDrillLocation:score
-    * label *label77
-    * label *label78
+  216 select .mapSpots lessThan :findDrillLocation:limit 1000 :findDrillLocation:score .mapSpots
   217 jump *label79 lessThan :findDrillLocation:capacity :findDrillLocation:limit
   218 op add .count .count 1
   219 sensor *tmp129 :findDrillLocation:item @id

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    83 label *label39
    84 ucontrol within *tmp38 *tmp45 5 *tmp48
    85 jump *label41 notEqual *tmp48 false
+   86 label *label204
    87 ucontrol approach *tmp38 *tmp45 4.5
    88 label *label40
-    * jump *label39 always
+   89 ucontrol within *tmp38 *tmp45 5 *tmp48
+   90 jump *label204 equal *tmp48 false
    91 label *label41
    92 label *label38
    93 op div *tmp51 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   122 set *tmp75 .locations
   123 set :visited:i .locationsStart
   124 label *label53
-    * jump *label55 greaterThanEq :visited:i *tmp75
+  125 jump *label55 greaterThanEq .locationsStart *tmp75
   126 label *label198
   127 op mul :visited:index 4 :visited:i
   128 op add *tmp78 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:477:5 (+39 instructions):
 
   549 end
   550 label *label17
   551 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label144
-    * label *label202
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label145
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label202 greaterThanEq :createBlockMaskRow:c -4
-    * label *label146
+  552 set :createBlockMaskRow:c 4
+  553 label *label205
+  554 label *label206
+  555 op shl *tmp295 :createBlockMaskRow:result 1
+  556 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  557 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  558 op or :createBlockMaskRow:result *tmp295 *tmp297
+  559 label *label207
+  560 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  561 label *label208
+  562 op shl *tmp295 :createBlockMaskRow:result 1
+  563 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  564 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  565 op or :createBlockMaskRow:result *tmp295 *tmp297
+  566 label *label209
+  567 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  568 label *label210
+  569 op shl *tmp295 :createBlockMaskRow:result 1
+  570 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  571 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  572 op or :createBlockMaskRow:result *tmp295 *tmp297
+  573 label *label211
+  574 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  575 label *label212
+  576 op shl *tmp295 :createBlockMaskRow:result 1
+  577 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  579 op or :createBlockMaskRow:result *tmp295 *tmp297
+  580 label *label213
+  581 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  582 label *label214
+  583 op shl *tmp295 :createBlockMaskRow:result 1
+  584 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  585 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  586 op or :createBlockMaskRow:result *tmp295 *tmp297
+  587 label *label215
+  588 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  589 label *label216
+  590 op shl *tmp295 :createBlockMaskRow:result 1
+  591 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  592 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  593 op or :createBlockMaskRow:result *tmp295 *tmp297
+  594 label *label217
+  595 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  596 label *label218
+  597 op shl *tmp295 :createBlockMaskRow:result 1
+  598 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  599 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  600 op or :createBlockMaskRow:result *tmp295 *tmp297
+  601 label *label219
+  602 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  603 label *label220
+  604 op shl *tmp295 :createBlockMaskRow:result 1
+  605 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  606 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  607 op or :createBlockMaskRow:result *tmp295 *tmp297
+  608 label *label221
+  609 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  610 label *label222
+  611 op shl *tmp295 :createBlockMaskRow:result 1
+  612 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  613 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  614 op or :createBlockMaskRow:result *tmp295 *tmp297
+  615 label *label223
+  616 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  617 label *label146
   618 set :createBlockMaskRow*retval :createBlockMaskRow:result
   619 jump *label143 always
   620 label *label143

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   552 set :createBlockMaskRow:c 4
   553 label *label205
   554 label *label206
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  555 op shl *tmp295 0 1
+  556 op add *tmp296 :createBlockMaskRow:x 4
   557 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  558 op or :createBlockMaskRow:result 0 *tmp297
   559 label *label207
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  560 op sub :createBlockMaskRow:c 4 1
   561 label *label208
   562 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  563 op add *tmp296 :createBlockMaskRow:x 3
   564 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   565 op or :createBlockMaskRow:result *tmp295 *tmp297
   566 label *label209
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  567 op sub :createBlockMaskRow:c 3 1
   568 label *label210
   569 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  570 op add *tmp296 :createBlockMaskRow:x 2
   571 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   572 op or :createBlockMaskRow:result *tmp295 *tmp297
   573 label *label211
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  574 op sub :createBlockMaskRow:c 2 1
   575 label *label212
   576 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  577 op add *tmp296 :createBlockMaskRow:x 1
   578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
   580 label *label213
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  581 op sub :createBlockMaskRow:c 1 1
   582 label *label214
   583 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  584 op add *tmp296 :createBlockMaskRow:x 0
   585 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   586 op or :createBlockMaskRow:result *tmp295 *tmp297
   587 label *label215
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  588 op sub :createBlockMaskRow:c 0 1
   589 label *label216
   590 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  591 op add *tmp296 :createBlockMaskRow:x -1
   592 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   593 op or :createBlockMaskRow:result *tmp295 *tmp297
   594 label *label217
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  595 op sub :createBlockMaskRow:c -1 1
   596 label *label218
   597 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  598 op add *tmp296 :createBlockMaskRow:x -2
   599 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   600 op or :createBlockMaskRow:result *tmp295 *tmp297
   601 label *label219
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  602 op sub :createBlockMaskRow:c -2 1
   603 label *label220
   604 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  605 op add *tmp296 :createBlockMaskRow:x -3
   606 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   607 op or :createBlockMaskRow:result *tmp295 *tmp297
   608 label *label221
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  609 op sub :createBlockMaskRow:c -3 1
   610 label *label222
   611 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  612 op add *tmp296 :createBlockMaskRow:x -4
   613 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   614 op or :createBlockMaskRow:result *tmp295 *tmp297
   615 label *label223
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  616 op sub :createBlockMaskRow:c -4 1
   617 label *label146
   618 set :createBlockMaskRow*retval :createBlockMaskRow:result
   619 jump *label143 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   548 return :tryPlaceGenerator*retaddr
   549 end
   550 label *label17
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   551 label *label205
   552 label *label206
-    * op shl *tmp295 0 1
   553 op add *tmp296 :createBlockMaskRow:x 4
   554 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   555 op or :createBlockMaskRow:result 0 *tmp297
   556 label *label207
-    * op sub :createBlockMaskRow:c 4 1
   557 label *label208
   558 op shl *tmp295 :createBlockMaskRow:result 1
   559 op add *tmp296 :createBlockMaskRow:x 3
   560 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   561 op or :createBlockMaskRow:result *tmp295 *tmp297
   562 label *label209
-    * op sub :createBlockMaskRow:c 3 1
   563 label *label210
   564 op shl *tmp295 :createBlockMaskRow:result 1
   565 op add *tmp296 :createBlockMaskRow:x 2
   566 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   567 op or :createBlockMaskRow:result *tmp295 *tmp297
   568 label *label211
-    * op sub :createBlockMaskRow:c 2 1
   569 label *label212
   570 op shl *tmp295 :createBlockMaskRow:result 1
   571 op add *tmp296 :createBlockMaskRow:x 1
   572 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   573 op or :createBlockMaskRow:result *tmp295 *tmp297
   574 label *label213
-    * op sub :createBlockMaskRow:c 1 1
   575 label *label214
   576 op shl *tmp295 :createBlockMaskRow:result 1
   577 op add *tmp296 :createBlockMaskRow:x 0
   578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
   580 label *label215
-    * op sub :createBlockMaskRow:c 0 1
   581 label *label216
   582 op shl *tmp295 :createBlockMaskRow:result 1
   583 op add *tmp296 :createBlockMaskRow:x -1
   584 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   585 op or :createBlockMaskRow:result *tmp295 *tmp297
   586 label *label217
-    * op sub :createBlockMaskRow:c -1 1
   587 label *label218
   588 op shl *tmp295 :createBlockMaskRow:result 1
   589 op add *tmp296 :createBlockMaskRow:x -2
   590 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   591 op or :createBlockMaskRow:result *tmp295 *tmp297
   592 label *label219
-    * op sub :createBlockMaskRow:c -2 1
   593 label *label220
   594 op shl *tmp295 :createBlockMaskRow:result 1
   595 op add *tmp296 :createBlockMaskRow:x -3
   596 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   597 op or :createBlockMaskRow:result *tmp295 *tmp297
   598 label *label221
-    * op sub :createBlockMaskRow:c -3 1
   599 label *label222
   600 op shl *tmp295 :createBlockMaskRow:result 1
   601 op add *tmp296 :createBlockMaskRow:x -4
   602 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   603 op or :createBlockMaskRow:result *tmp295 *tmp297
   604 label *label223
-    * op sub :createBlockMaskRow:c -4 1
   605 label *label146
   606 set :createBlockMaskRow*retval :createBlockMaskRow:result
   607 jump *label143 always

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   178 label *label66
   179 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   180 jump *label68 notEqual *tmp100 false
+  181 label *label224
   182 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   183 label *label67
-    * jump *label66 always
+  184 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
+  185 jump *label224 equal *tmp100 false
   186 label *label68
   187 label *label65
   188 label *label64

Modifications by Unroll loop at OreLocator.mnd:356:5 (+24 instructions):
 
   347 op shl *tmp203 1 :excludeArea:blockSizeX
   348 op sub :createMatrixOfSize:row *tmp203 1
   349 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
-    * label *label104
-    * label *label199
-    * jump *label107 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
-    * jump *label106 always
-    * label *label107
-    * label *label108
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label105
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label199 lessThan :createMatrixOfSize:i 7
-    * label *label106
+  350 set :createMatrixOfSize:i 1
+  351 label *label225
+  352 label *label226
+  353 jump *label227 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  354 jump *label106 always
+  355 label *label227
+  356 label *label228
+  357 op shl *tmp207 :createMatrixOfSize:matrix 7
+  358 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  359 label *label229
+  360 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  361 label *label230
+  362 jump *label231 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  363 jump *label106 always
+  364 label *label231
+  365 label *label232
+  366 op shl *tmp207 :createMatrixOfSize:matrix 7
+  367 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  368 label *label233
+  369 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  370 label *label234
+  371 jump *label235 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  372 jump *label106 always
+  373 label *label235
+  374 label *label236
+  375 op shl *tmp207 :createMatrixOfSize:matrix 7
+  376 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  377 label *label237
+  378 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  379 label *label238
+  380 jump *label239 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  381 jump *label106 always
+  382 label *label239
+  383 label *label240
+  384 op shl *tmp207 :createMatrixOfSize:matrix 7
+  385 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  386 label *label241
+  387 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  388 label *label242
+  389 jump *label243 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  390 jump *label106 always
+  391 label *label243
+  392 label *label244
+  393 op shl *tmp207 :createMatrixOfSize:matrix 7
+  394 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  395 label *label245
+  396 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  397 label *label246
+  398 jump *label247 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  399 jump *label106 always
+  400 label *label247
+  401 label *label248
+  402 op shl *tmp207 :createMatrixOfSize:matrix 7
+  403 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  404 label *label249
+  405 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  406 label *label106
   407 jump *label103 always
   408 label *label103
   409 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   350 set :createMatrixOfSize:i 1
   351 label *label225
   352 label *label226
-    * jump *label227 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  353 jump *label227 lessThan 1 :excludeArea:blockSizeY
   354 jump *label106 always
   355 label *label227
   356 label *label228
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
+  357 op shl *tmp207 :createMatrixOfSize:row 7
   358 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   359 label *label229
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  360 op add :createMatrixOfSize:i 1 1
   361 label *label230
-    * jump *label231 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  362 jump *label231 lessThan 2 :excludeArea:blockSizeY
   363 jump *label106 always
   364 label *label231
   365 label *label232
   366 op shl *tmp207 :createMatrixOfSize:matrix 7
   367 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   368 label *label233
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  369 op add :createMatrixOfSize:i 2 1
   370 label *label234
-    * jump *label235 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  371 jump *label235 lessThan 3 :excludeArea:blockSizeY
   372 jump *label106 always
   373 label *label235
   374 label *label236
   375 op shl *tmp207 :createMatrixOfSize:matrix 7
   376 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   377 label *label237
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  378 op add :createMatrixOfSize:i 3 1
   379 label *label238
-    * jump *label239 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  380 jump *label239 lessThan 4 :excludeArea:blockSizeY
   381 jump *label106 always
   382 label *label239
   383 label *label240
   384 op shl *tmp207 :createMatrixOfSize:matrix 7
   385 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   386 label *label241
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  387 op add :createMatrixOfSize:i 4 1
   388 label *label242
-    * jump *label243 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  389 jump *label243 lessThan 5 :excludeArea:blockSizeY
   390 jump *label106 always
   391 label *label243
   392 label *label244
   393 op shl *tmp207 :createMatrixOfSize:matrix 7
   394 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   395 label *label245
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  396 op add :createMatrixOfSize:i 5 1
   397 label *label246
-    * jump *label247 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  398 jump *label247 lessThan 6 :excludeArea:blockSizeY
   399 jump *label106 always
   400 label *label247
   401 label *label248
   402 op shl *tmp207 :createMatrixOfSize:matrix 7
   403 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   404 label *label249
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  405 op add :createMatrixOfSize:i 6 1
   406 label *label106
   407 jump *label103 always
   408 label *label103

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   347 op shl *tmp203 1 :excludeArea:blockSizeX
   348 op sub :createMatrixOfSize:row *tmp203 1
   349 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
   350 label *label225
   351 label *label226
   352 jump *label227 lessThan 1 :excludeArea:blockSizeY
 
   356 op shl *tmp207 :createMatrixOfSize:row 7
   357 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   358 label *label229
-    * op add :createMatrixOfSize:i 1 1
   359 label *label230
   360 jump *label231 lessThan 2 :excludeArea:blockSizeY
   361 jump *label106 always
 
   364 op shl *tmp207 :createMatrixOfSize:matrix 7
   365 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   366 label *label233
-    * op add :createMatrixOfSize:i 2 1
   367 label *label234
   368 jump *label235 lessThan 3 :excludeArea:blockSizeY
   369 jump *label106 always
 
   372 op shl *tmp207 :createMatrixOfSize:matrix 7
   373 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   374 label *label237
-    * op add :createMatrixOfSize:i 3 1
   375 label *label238
   376 jump *label239 lessThan 4 :excludeArea:blockSizeY
   377 jump *label106 always
 
   380 op shl *tmp207 :createMatrixOfSize:matrix 7
   381 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   382 label *label241
-    * op add :createMatrixOfSize:i 4 1
   383 label *label242
   384 jump *label243 lessThan 5 :excludeArea:blockSizeY
   385 jump *label106 always
 
   388 op shl *tmp207 :createMatrixOfSize:matrix 7
   389 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   390 label *label245
-    * op add :createMatrixOfSize:i 5 1
   391 label *label246
   392 jump *label247 lessThan 6 :excludeArea:blockSizeY
   393 jump *label106 always
 
   396 op shl *tmp207 :createMatrixOfSize:matrix 7
   397 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   398 label *label249
-    * op add :createMatrixOfSize:i 6 1
   399 label *label106
   400 jump *label103 always
   401 label *label103

Modifications by Unroll loop at OreLocator.mnd:491:5 (+95 instructions):
 
   670 call *label17 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   671 label *label150
   672 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label151
-    * label *label203
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label154 (h:*label154)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label154) (h:*label154)
-    * label *label154
-    * op shl *tmp311 :createAdjacentMask:row1 1
-    * op or *tmp312 :createAdjacentMask:row2 *tmp311
-    * op shr *tmp313 :createAdjacentMask:row1 1
-    * op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label152
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label203 greaterThanEq :createAdjacentMask:r -4
-    * label *label153
+  673 set :createAdjacentMask:r 2
+  674 label *label250
+  675 label *label251
+  676 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  677 set :createBlockMaskRow:x :createAdjacentMask:x
+  678 set :createBlockMaskRow:y *tmp309
+  679 setaddr :createBlockMaskRow*retaddr *label252 (h:*label252)
+  680 call *label17 *invalid :createBlockMaskRow*retval (m:*label252) (h:*label252)
+  681 label *label252
+  682 op shl *tmp311 :createAdjacentMask:row1 1
+  683 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  684 op shr *tmp313 :createAdjacentMask:row1 1
+  685 op or *tmp314 *tmp312 *tmp313
+  686 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  687 op shl *tmp316 :createAdjacentMask:result 7
+  688 op and *tmp317 :createAdjacentMask:mask 0xFE
+  689 op or :createAdjacentMask:result *tmp316 *tmp317
+  690 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  691 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  692 label *label253
+  693 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  694 label *label254
+  695 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  696 set :createBlockMaskRow:x :createAdjacentMask:x
+  697 set :createBlockMaskRow:y *tmp309
+  698 setaddr :createBlockMaskRow*retaddr *label255 (h:*label255)
+  699 call *label17 *invalid :createBlockMaskRow*retval (m:*label255) (h:*label255)
+  700 label *label255
+  701 op shl *tmp311 :createAdjacentMask:row1 1
+  702 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  703 op shr *tmp313 :createAdjacentMask:row1 1
+  704 op or *tmp314 *tmp312 *tmp313
+  705 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  706 op shl *tmp316 :createAdjacentMask:result 7
+  707 op and *tmp317 :createAdjacentMask:mask 0xFE
+  708 op or :createAdjacentMask:result *tmp316 *tmp317
+  709 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  710 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  711 label *label256
+  712 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  713 label *label257
+  714 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  715 set :createBlockMaskRow:x :createAdjacentMask:x
+  716 set :createBlockMaskRow:y *tmp309
+  717 setaddr :createBlockMaskRow*retaddr *label258 (h:*label258)
+  718 call *label17 *invalid :createBlockMaskRow*retval (m:*label258) (h:*label258)
+  719 label *label258
+  720 op shl *tmp311 :createAdjacentMask:row1 1
+  721 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  722 op shr *tmp313 :createAdjacentMask:row1 1
+  723 op or *tmp314 *tmp312 *tmp313
+  724 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  725 op shl *tmp316 :createAdjacentMask:result 7
+  726 op and *tmp317 :createAdjacentMask:mask 0xFE
+  727 op or :createAdjacentMask:result *tmp316 *tmp317
+  728 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  729 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  730 label *label259
+  731 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  732 label *label260
+  733 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  734 set :createBlockMaskRow:x :createAdjacentMask:x
+  735 set :createBlockMaskRow:y *tmp309
+  736 setaddr :createBlockMaskRow*retaddr *label261 (h:*label261)
+  737 call *label17 *invalid :createBlockMaskRow*retval (m:*label261) (h:*label261)
+  738 label *label261
+  739 op shl *tmp311 :createAdjacentMask:row1 1
+  740 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  741 op shr *tmp313 :createAdjacentMask:row1 1
+  742 op or *tmp314 *tmp312 *tmp313
+  743 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  744 op shl *tmp316 :createAdjacentMask:result 7
+  745 op and *tmp317 :createAdjacentMask:mask 0xFE
+  746 op or :createAdjacentMask:result *tmp316 *tmp317
+  747 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  748 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  749 label *label262
+  750 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  751 label *label263
+  752 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  753 set :createBlockMaskRow:x :createAdjacentMask:x
+  754 set :createBlockMaskRow:y *tmp309
+  755 setaddr :createBlockMaskRow*retaddr *label264 (h:*label264)
+  756 call *label17 *invalid :createBlockMaskRow*retval (m:*label264) (h:*label264)
+  757 label *label264
+  758 op shl *tmp311 :createAdjacentMask:row1 1
+  759 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  760 op shr *tmp313 :createAdjacentMask:row1 1
+  761 op or *tmp314 *tmp312 *tmp313
+  762 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  763 op shl *tmp316 :createAdjacentMask:result 7
+  764 op and *tmp317 :createAdjacentMask:mask 0xFE
+  765 op or :createAdjacentMask:result *tmp316 *tmp317
+  766 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  767 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  768 label *label265
+  769 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  770 label *label266
+  771 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  772 set :createBlockMaskRow:x :createAdjacentMask:x
+  773 set :createBlockMaskRow:y *tmp309
+  774 setaddr :createBlockMaskRow*retaddr *label267 (h:*label267)
+  775 call *label17 *invalid :createBlockMaskRow*retval (m:*label267) (h:*label267)
+  776 label *label267
+  777 op shl *tmp311 :createAdjacentMask:row1 1
+  778 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  779 op shr *tmp313 :createAdjacentMask:row1 1
+  780 op or *tmp314 *tmp312 *tmp313
+  781 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  782 op shl *tmp316 :createAdjacentMask:result 7
+  783 op and *tmp317 :createAdjacentMask:mask 0xFE
+  784 op or :createAdjacentMask:result *tmp316 *tmp317
+  785 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  786 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  787 label *label268
+  788 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  789 label *label269
+  790 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  791 set :createBlockMaskRow:x :createAdjacentMask:x
+  792 set :createBlockMaskRow:y *tmp309
+  793 setaddr :createBlockMaskRow*retaddr *label270 (h:*label270)
+  794 call *label17 *invalid :createBlockMaskRow*retval (m:*label270) (h:*label270)
+  795 label *label270
+  796 op shl *tmp311 :createAdjacentMask:row1 1
+  797 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  798 op shr *tmp313 :createAdjacentMask:row1 1
+  799 op or *tmp314 *tmp312 *tmp313
+  800 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  801 op shl *tmp316 :createAdjacentMask:result 7
+  802 op and *tmp317 :createAdjacentMask:mask 0xFE
+  803 op or :createAdjacentMask:result *tmp316 *tmp317
+  804 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  805 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  806 label *label271
+  807 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  808 label *label153
   809 op shr *tmp304 :createAdjacentMask:result 1
   810 label *label148
   811 label *label155

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   673 set :createAdjacentMask:r 2
   674 label *label250
   675 label *label251
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  676 op add *tmp309 :createAdjacentMask:y 2
   677 set :createBlockMaskRow:x :createAdjacentMask:x
   678 set :createBlockMaskRow:y *tmp309
   679 setaddr :createBlockMaskRow*retaddr *label252 (h:*label252)

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    36 label *label26
    37 ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18
    38 jump *label28 notEqual *tmp18 false
+   39 label *label272
    40 ucontrol approach :findDrillLocation:x :findDrillLocation:y 5.5
    41 label *label27
-    * jump *label26 always
+   42 ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18
+   43 jump *label272 equal *tmp18 false
    44 label *label28
    45 label *label25
    46 label *label24

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   844 label *label159
   845 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   846 jump *label161 notEqual *tmp323 false
+  847 label *label273
   848 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   849 label *label160
-    * jump *label159 always
+  850 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
+  851 jump *label273 equal *tmp323 false
   852 label *label161
   853 label *label158
   854 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:279:1 (+24 instructions):
 
   287 set :findDrillLocation*finished true
   288 return :findDrillLocation*retaddr
   289 end
-    * label *label13
-    * op abs *tmp161 :shiftMask:shiftX
-    * op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
-    * op greaterThan *tmp164 *tmp163 6
-    * op or *tmp165 *tmp162 *tmp164
-    * jump *label92 equal *tmp165 false
-    * set :shiftMask*retval 0
-    * jump *label91 always
-    * label *label92
-    * label *label93
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * jump *label94 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp172 :shiftMask:shift
-    * jump *label95 always
-    * label *label94
-    * op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * label *label95
-    * jump *label96 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label98 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label98
-    * label *label99
-    * op shl *tmp181 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp181
-    * op shl *tmp182 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp182
-    * op shl *tmp183 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp183
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label96
-    * label *label97
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label91 always
-    * label *label91
-    * return :shiftMask*retaddr
-    * end
   290 label *label14
   291 op add *tmp185 :excludeArea:areaWidth 8
   292 op idiv *tmp186 *tmp185 2
 
   368 set :shiftMask:mask :createMatrixOfSize:matrix
   369 set :shiftMask:shiftX :excludeArea:shiftX
   370 set :shiftMask:shiftY :excludeArea:shiftY
-    * setaddr :shiftMask*retaddr *label109 (h:*label109)
-    * call *label13 *invalid :shiftMask*retval (m:*label109) (h:*label109)
-    * label *label109
+  371 label *label274
+  372 op abs *tmp161 :shiftMask:shiftX
+  373 op greaterThan *tmp162 *tmp161 6
+  374 op abs *tmp163 :shiftMask:shiftY
+  375 op greaterThan *tmp164 *tmp163 6
+  376 op or *tmp165 *tmp162 *tmp164
+  377 jump *label275 equal *tmp165 false
+  378 set :shiftMask*retval 0
+  379 jump *label283 always
+  380 label *label275
+  381 label *label276
+  382 op mul *tmp167 7 :shiftMask:shiftY
+  383 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  384 jump *label277 lessThanEq :shiftMask:shift 0
+  385 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  386 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  387 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  388 jump *label278 always
+  389 label *label277
+  390 op sub *tmp174 0 :shiftMask:shift
+  391 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  392 label *label278
+  393 jump *label281 equal :shiftMask:shiftX 0
+  394 op shr :shiftMask:keep 0b1111111 *tmp161
+  395 jump *label279 lessThanEq :shiftMask:shiftX 0
+  396 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  397 label *label279
+  398 label *label280
+  399 op shl *tmp181 :shiftMask:keep 7
+  400 op or :shiftMask:keep :shiftMask:keep *tmp181
+  401 op shl *tmp182 :shiftMask:keep 14
+  402 op or :shiftMask:keep :shiftMask:keep *tmp182
+  403 op shl *tmp183 :shiftMask:keep 21
+  404 op or :shiftMask:keep :shiftMask:keep *tmp183
+  405 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  406 label *label281
+  407 label *label282
+  408 set :shiftMask*retval :shiftMask:mask
+  409 jump *label283 always
+  410 label *label283
   411 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   412 jump *label100 always
   413 jump *label102 always
 
   949 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   950 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   951 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label183 (h:*label183)
-    * call *label13 *invalid :shiftMask*retval (m:*label183) (h:*label183)
-    * label *label183
+  952 label *label284
+  953 op abs *tmp161 :shiftMask:shiftX
+  954 op greaterThan *tmp162 *tmp161 6
+  955 op abs *tmp163 :shiftMask:shiftY
+  956 op greaterThan *tmp164 *tmp163 6
+  957 op or *tmp165 *tmp162 *tmp164
+  958 jump *label285 equal *tmp165 false
+  959 set :shiftMask*retval 0
+  960 jump *label293 always
+  961 label *label285
+  962 label *label286
+  963 op mul *tmp167 7 :shiftMask:shiftY
+  964 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  965 jump *label287 lessThanEq :shiftMask:shift 0
+  966 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  967 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  968 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  969 jump *label288 always
+  970 label *label287
+  971 op sub *tmp174 0 :shiftMask:shift
+  972 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  973 label *label288
+  974 jump *label291 equal :shiftMask:shiftX 0
+  975 op shr :shiftMask:keep 0b1111111 *tmp161
+  976 jump *label289 lessThanEq :shiftMask:shiftX 0
+  977 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  978 label *label289
+  979 label *label290
+  980 op shl *tmp181 :shiftMask:keep 7
+  981 op or :shiftMask:keep :shiftMask:keep *tmp181
+  982 op shl *tmp182 :shiftMask:keep 14
+  983 op or :shiftMask:keep :shiftMask:keep *tmp182
+  984 op shl *tmp183 :shiftMask:keep 21
+  985 op or :shiftMask:keep :shiftMask:keep *tmp183
+  986 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  987 label *label291
+  988 label *label292
+  989 set :shiftMask*retval :shiftMask:mask
+  990 jump *label293 always
+  991 label *label293
   992 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   993 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   994 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   369 set :shiftMask:shiftX :excludeArea:shiftX
   370 set :shiftMask:shiftY :excludeArea:shiftY
   371 label *label274
-    * op abs *tmp161 :shiftMask:shiftX
+  372 op abs *tmp161 :excludeArea:shiftX
   373 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  374 op abs *tmp163 :excludeArea:shiftY
   375 op greaterThan *tmp164 *tmp163 6
   376 op or *tmp165 *tmp162 *tmp164
   377 jump *label275 equal *tmp165 false
 
   379 jump *label283 always
   380 label *label275
   381 label *label276
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  382 op mul *tmp167 7 :excludeArea:shiftY
+  383 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   384 jump *label277 lessThanEq :shiftMask:shift 0
   385 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  386 op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMask
   387 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   388 jump *label278 always
   389 label *label277
   390 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  391 op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174
   392 label *label278
-    * jump *label281 equal :shiftMask:shiftX 0
+  393 jump *label281 equal :excludeArea:shiftX 0
   394 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label279 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  395 jump *label279 lessThanEq :excludeArea:shiftX 0
+  396 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   397 label *label279
   398 label *label280
   399 op shl *tmp181 :shiftMask:keep 7
 
   950 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   951 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   952 label *label284
-    * op abs *tmp161 :shiftMask:shiftX
+  953 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   954 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  955 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
   956 op greaterThan *tmp164 *tmp163 6
   957 op or *tmp165 *tmp162 *tmp164
   958 jump *label285 equal *tmp165 false
 
   960 jump *label293 always
   961 label *label285
   962 label *label286
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  963 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
+  964 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
   965 jump *label287 lessThanEq :shiftMask:shift 0
   966 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  967 op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   968 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   969 jump *label288 always
   970 label *label287
   971 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  972 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp174
   973 label *label288
-    * jump *label291 equal :shiftMask:shiftX 0
+  974 jump *label291 equal :layoutThoriumDrillAtLocation:sx 0
   975 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label289 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  976 jump *label289 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  977 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   978 label *label289
   979 label *label290
   980 op shl *tmp181 :shiftMask:keep 7
 
   989 set :shiftMask*retval :shiftMask:mask
   990 jump *label293 always
   991 label *label293
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  992 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   993 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   994 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   995 set :tryPlaceGenerator:centerX *tmp361

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   365 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   366 op sub *tmp213 7 :excludeArea:blockSizeY
   367 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :createMatrixOfSize:matrix
-    * set :shiftMask:shiftX :excludeArea:shiftX
-    * set :shiftMask:shiftY :excludeArea:shiftY
   368 label *label274
   369 op abs *tmp161 :excludeArea:shiftX
   370 op greaterThan *tmp162 *tmp161 6
 
   942 setaddr :createCombinedMask*retaddr *label182 (h:*label182)
   943 call *label18 *invalid :createCombinedMask*retval (m:*label182) (h:*label182)
   944 label *label182
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   945 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   946 label *label284
   947 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   948 op greaterThan *tmp162 *tmp161 6

Modifications by Inline function call at OreLocator.mnd:488:16 (+35 instructions):
 
   653 op add *tmp305 :createCombinedMask:y 4
   654 set :createBlockMaskRow:x :createCombinedMask:x
   655 set :createBlockMaskRow:y *tmp305
-    * setaddr :createBlockMaskRow*retaddr *label149 (h:*label149)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label149) (h:*label149)
-    * label *label149
+  656 label *label294
+  657 label *label295
+  658 label *label296
+  659 op add *tmp296 :createBlockMaskRow:x 4
+  660 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  661 op or :createBlockMaskRow:result 0 *tmp297
+  662 label *label297
+  663 label *label298
+  664 op shl *tmp295 :createBlockMaskRow:result 1
+  665 op add *tmp296 :createBlockMaskRow:x 3
+  666 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  667 op or :createBlockMaskRow:result *tmp295 *tmp297
+  668 label *label299
+  669 label *label300
+  670 op shl *tmp295 :createBlockMaskRow:result 1
+  671 op add *tmp296 :createBlockMaskRow:x 2
+  672 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  673 op or :createBlockMaskRow:result *tmp295 *tmp297
+  674 label *label301
+  675 label *label302
+  676 op shl *tmp295 :createBlockMaskRow:result 1
+  677 op add *tmp296 :createBlockMaskRow:x 1
+  678 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  679 op or :createBlockMaskRow:result *tmp295 *tmp297
+  680 label *label303
+  681 label *label304
+  682 op shl *tmp295 :createBlockMaskRow:result 1
+  683 op add *tmp296 :createBlockMaskRow:x 0
+  684 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  685 op or :createBlockMaskRow:result *tmp295 *tmp297
+  686 label *label305
+  687 label *label306
+  688 op shl *tmp295 :createBlockMaskRow:result 1
+  689 op add *tmp296 :createBlockMaskRow:x -1
+  690 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  691 op or :createBlockMaskRow:result *tmp295 *tmp297
+  692 label *label307
+  693 label *label308
+  694 op shl *tmp295 :createBlockMaskRow:result 1
+  695 op add *tmp296 :createBlockMaskRow:x -2
+  696 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  697 op or :createBlockMaskRow:result *tmp295 *tmp297
+  698 label *label309
+  699 label *label310
+  700 op shl *tmp295 :createBlockMaskRow:result 1
+  701 op add *tmp296 :createBlockMaskRow:x -3
+  702 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  703 op or :createBlockMaskRow:result *tmp295 *tmp297
+  704 label *label311
+  705 label *label312
+  706 op shl *tmp295 :createBlockMaskRow:result 1
+  707 op add *tmp296 :createBlockMaskRow:x -4
+  708 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  709 op or :createBlockMaskRow:result *tmp295 *tmp297
+  710 label *label313
+  711 label *label314
+  712 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  713 jump *label315 always
+  714 label *label315
   715 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   716 op add *tmp307 :createAdjacentMask:y 3
   717 set :createBlockMaskRow:x :createAdjacentMask:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   656 label *label294
   657 label *label295
   658 label *label296
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  659 op add *tmp296 :createCombinedMask:x 4
+  660 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   661 op or :createBlockMaskRow:result 0 *tmp297
   662 label *label297
   663 label *label298
   664 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  665 op add *tmp296 :createCombinedMask:x 3
+  666 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   667 op or :createBlockMaskRow:result *tmp295 *tmp297
   668 label *label299
   669 label *label300
   670 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  671 op add *tmp296 :createCombinedMask:x 2
+  672 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   673 op or :createBlockMaskRow:result *tmp295 *tmp297
   674 label *label301
   675 label *label302
   676 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  677 op add *tmp296 :createCombinedMask:x 1
+  678 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   679 op or :createBlockMaskRow:result *tmp295 *tmp297
   680 label *label303
   681 label *label304
   682 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  683 op add *tmp296 :createCombinedMask:x 0
+  684 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   685 op or :createBlockMaskRow:result *tmp295 *tmp297
   686 label *label305
   687 label *label306
   688 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  689 op add *tmp296 :createCombinedMask:x -1
+  690 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   691 op or :createBlockMaskRow:result *tmp295 *tmp297
   692 label *label307
   693 label *label308
   694 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  695 op add *tmp296 :createCombinedMask:x -2
+  696 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   697 op or :createBlockMaskRow:result *tmp295 *tmp297
   698 label *label309
   699 label *label310
   700 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  701 op add *tmp296 :createCombinedMask:x -3
+  702 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   703 op or :createBlockMaskRow:result *tmp295 *tmp297
   704 label *label311
   705 label *label312
   706 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  707 op add *tmp296 :createCombinedMask:x -4
+  708 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   709 op or :createBlockMaskRow:result *tmp295 *tmp297
   710 label *label313
   711 label *label314
   712 set :createBlockMaskRow*retval :createBlockMaskRow:result
   713 jump *label315 always
   714 label *label315
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp307 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  715 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  716 op add *tmp307 :createCombinedMask:y 3
+  717 set :createBlockMaskRow:x :createCombinedMask:x
   718 set :createBlockMaskRow:y *tmp307
   719 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   720 call *label17 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   651 set :createAdjacentMask:y :createCombinedMask:y
   652 set :createAdjacentMask:result 0
   653 op add *tmp305 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp305
   654 label *label294
   655 label *label295
   656 label *label296
 
   707 op or :createBlockMaskRow:result *tmp295 *tmp297
   708 label *label313
   709 label *label314
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   710 jump *label315 always
   711 label *label315
   712 set :createAdjacentMask:row2 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:489:16 (+35 instructions):
 
   713 op add *tmp307 :createCombinedMask:y 3
   714 set :createBlockMaskRow:x :createCombinedMask:x
   715 set :createBlockMaskRow:y *tmp307
-    * setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
-    * label *label150
+  716 label *label316
+  717 label *label317
+  718 label *label318
+  719 op add *tmp296 :createBlockMaskRow:x 4
+  720 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  721 op or :createBlockMaskRow:result 0 *tmp297
+  722 label *label319
+  723 label *label320
+  724 op shl *tmp295 :createBlockMaskRow:result 1
+  725 op add *tmp296 :createBlockMaskRow:x 3
+  726 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  727 op or :createBlockMaskRow:result *tmp295 *tmp297
+  728 label *label321
+  729 label *label322
+  730 op shl *tmp295 :createBlockMaskRow:result 1
+  731 op add *tmp296 :createBlockMaskRow:x 2
+  732 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  733 op or :createBlockMaskRow:result *tmp295 *tmp297
+  734 label *label323
+  735 label *label324
+  736 op shl *tmp295 :createBlockMaskRow:result 1
+  737 op add *tmp296 :createBlockMaskRow:x 1
+  738 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  739 op or :createBlockMaskRow:result *tmp295 *tmp297
+  740 label *label325
+  741 label *label326
+  742 op shl *tmp295 :createBlockMaskRow:result 1
+  743 op add *tmp296 :createBlockMaskRow:x 0
+  744 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  745 op or :createBlockMaskRow:result *tmp295 *tmp297
+  746 label *label327
+  747 label *label328
+  748 op shl *tmp295 :createBlockMaskRow:result 1
+  749 op add *tmp296 :createBlockMaskRow:x -1
+  750 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  751 op or :createBlockMaskRow:result *tmp295 *tmp297
+  752 label *label329
+  753 label *label330
+  754 op shl *tmp295 :createBlockMaskRow:result 1
+  755 op add *tmp296 :createBlockMaskRow:x -2
+  756 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  757 op or :createBlockMaskRow:result *tmp295 *tmp297
+  758 label *label331
+  759 label *label332
+  760 op shl *tmp295 :createBlockMaskRow:result 1
+  761 op add *tmp296 :createBlockMaskRow:x -3
+  762 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  763 op or :createBlockMaskRow:result *tmp295 *tmp297
+  764 label *label333
+  765 label *label334
+  766 op shl *tmp295 :createBlockMaskRow:result 1
+  767 op add *tmp296 :createBlockMaskRow:x -4
+  768 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  769 op or :createBlockMaskRow:result *tmp295 *tmp297
+  770 label *label335
+  771 label *label336
+  772 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  773 jump *label337 always
+  774 label *label337
   775 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   776 set :createAdjacentMask:r 2
   777 label *label250

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   716 label *label316
   717 label *label317
   718 label *label318
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  719 op add *tmp296 :createCombinedMask:x 4
+  720 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   721 op or :createBlockMaskRow:result 0 *tmp297
   722 label *label319
   723 label *label320
   724 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  725 op add *tmp296 :createCombinedMask:x 3
+  726 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   727 op or :createBlockMaskRow:result *tmp295 *tmp297
   728 label *label321
   729 label *label322
   730 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  731 op add *tmp296 :createCombinedMask:x 2
+  732 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   733 op or :createBlockMaskRow:result *tmp295 *tmp297
   734 label *label323
   735 label *label324
   736 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  737 op add *tmp296 :createCombinedMask:x 1
+  738 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   739 op or :createBlockMaskRow:result *tmp295 *tmp297
   740 label *label325
   741 label *label326
   742 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  743 op add *tmp296 :createCombinedMask:x 0
+  744 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   745 op or :createBlockMaskRow:result *tmp295 *tmp297
   746 label *label327
   747 label *label328
   748 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  749 op add *tmp296 :createCombinedMask:x -1
+  750 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   751 op or :createBlockMaskRow:result *tmp295 *tmp297
   752 label *label329
   753 label *label330
   754 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  755 op add *tmp296 :createCombinedMask:x -2
+  756 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   757 op or :createBlockMaskRow:result *tmp295 *tmp297
   758 label *label331
   759 label *label332
   760 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  761 op add *tmp296 :createCombinedMask:x -3
+  762 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   763 op or :createBlockMaskRow:result *tmp295 *tmp297
   764 label *label333
   765 label *label334
   766 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  767 op add *tmp296 :createCombinedMask:x -4
+  768 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   769 op or :createBlockMaskRow:result *tmp295 *tmp297
   770 label *label335
   771 label *label336
   772 set :createBlockMaskRow*retval :createBlockMaskRow:result
   773 jump *label337 always
   774 label *label337
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  775 set :createAdjacentMask:row1 :createBlockMaskRow:result
   776 set :createAdjacentMask:r 2
   777 label *label250
   778 label *label251
-    * op add *tmp309 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  779 op add *tmp309 :createCombinedMask:y 2
+  780 set :createBlockMaskRow:x :createCombinedMask:x
   781 set :createBlockMaskRow:y *tmp309
   782 setaddr :createBlockMaskRow*retaddr *label252 (h:*label252)
   783 call *label17 *invalid :createBlockMaskRow*retval (m:*label252) (h:*label252)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   711 label *label315
   712 set :createAdjacentMask:row2 :createBlockMaskRow:result
   713 op add *tmp307 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp307
   714 label *label316
   715 label *label317
   716 label *label318
 
   767 op or :createBlockMaskRow:result *tmp295 *tmp297
   768 label *label335
   769 label *label336
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   770 jump *label337 always
   771 label *label337
   772 set :createAdjacentMask:row1 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:492:20 (+35 instructions):
 
   776 op add *tmp309 :createCombinedMask:y 2
   777 set :createBlockMaskRow:x :createCombinedMask:x
   778 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label252 (h:*label252)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label252) (h:*label252)
-    * label *label252
+  779 label *label338
+  780 label *label339
+  781 label *label340
+  782 op add *tmp296 :createBlockMaskRow:x 4
+  783 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  784 op or :createBlockMaskRow:result 0 *tmp297
+  785 label *label341
+  786 label *label342
+  787 op shl *tmp295 :createBlockMaskRow:result 1
+  788 op add *tmp296 :createBlockMaskRow:x 3
+  789 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  790 op or :createBlockMaskRow:result *tmp295 *tmp297
+  791 label *label343
+  792 label *label344
+  793 op shl *tmp295 :createBlockMaskRow:result 1
+  794 op add *tmp296 :createBlockMaskRow:x 2
+  795 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  796 op or :createBlockMaskRow:result *tmp295 *tmp297
+  797 label *label345
+  798 label *label346
+  799 op shl *tmp295 :createBlockMaskRow:result 1
+  800 op add *tmp296 :createBlockMaskRow:x 1
+  801 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  802 op or :createBlockMaskRow:result *tmp295 *tmp297
+  803 label *label347
+  804 label *label348
+  805 op shl *tmp295 :createBlockMaskRow:result 1
+  806 op add *tmp296 :createBlockMaskRow:x 0
+  807 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  808 op or :createBlockMaskRow:result *tmp295 *tmp297
+  809 label *label349
+  810 label *label350
+  811 op shl *tmp295 :createBlockMaskRow:result 1
+  812 op add *tmp296 :createBlockMaskRow:x -1
+  813 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  814 op or :createBlockMaskRow:result *tmp295 *tmp297
+  815 label *label351
+  816 label *label352
+  817 op shl *tmp295 :createBlockMaskRow:result 1
+  818 op add *tmp296 :createBlockMaskRow:x -2
+  819 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  820 op or :createBlockMaskRow:result *tmp295 *tmp297
+  821 label *label353
+  822 label *label354
+  823 op shl *tmp295 :createBlockMaskRow:result 1
+  824 op add *tmp296 :createBlockMaskRow:x -3
+  825 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  826 op or :createBlockMaskRow:result *tmp295 *tmp297
+  827 label *label355
+  828 label *label356
+  829 op shl *tmp295 :createBlockMaskRow:result 1
+  830 op add *tmp296 :createBlockMaskRow:x -4
+  831 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  832 op or :createBlockMaskRow:result *tmp295 *tmp297
+  833 label *label357
+  834 label *label358
+  835 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  836 jump *label359 always
+  837 label *label359
   838 op shl *tmp311 :createAdjacentMask:row1 1
   839 op or *tmp312 :createAdjacentMask:row2 *tmp311
   840 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   779 label *label338
   780 label *label339
   781 label *label340
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  782 op add *tmp296 :createCombinedMask:x 4
+  783 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   784 op or :createBlockMaskRow:result 0 *tmp297
   785 label *label341
   786 label *label342
   787 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  788 op add *tmp296 :createCombinedMask:x 3
+  789 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   790 op or :createBlockMaskRow:result *tmp295 *tmp297
   791 label *label343
   792 label *label344
   793 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  794 op add *tmp296 :createCombinedMask:x 2
+  795 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   796 op or :createBlockMaskRow:result *tmp295 *tmp297
   797 label *label345
   798 label *label346
   799 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  800 op add *tmp296 :createCombinedMask:x 1
+  801 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   802 op or :createBlockMaskRow:result *tmp295 *tmp297
   803 label *label347
   804 label *label348
   805 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  806 op add *tmp296 :createCombinedMask:x 0
+  807 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   808 op or :createBlockMaskRow:result *tmp295 *tmp297
   809 label *label349
   810 label *label350
   811 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  812 op add *tmp296 :createCombinedMask:x -1
+  813 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   814 op or :createBlockMaskRow:result *tmp295 *tmp297
   815 label *label351
   816 label *label352
   817 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  818 op add *tmp296 :createCombinedMask:x -2
+  819 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   820 op or :createBlockMaskRow:result *tmp295 *tmp297
   821 label *label353
   822 label *label354
   823 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  824 op add *tmp296 :createCombinedMask:x -3
+  825 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   826 op or :createBlockMaskRow:result *tmp295 *tmp297
   827 label *label355
   828 label *label356
   829 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  830 op add *tmp296 :createCombinedMask:x -4
+  831 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   832 op or :createBlockMaskRow:result *tmp295 *tmp297
   833 label *label357
   834 label *label358
 
   839 op or *tmp312 :createAdjacentMask:row2 *tmp311
   840 op shr *tmp313 :createAdjacentMask:row1 1
   841 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
+  842 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
+  843 op shl *tmp316 0 7
   844 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
+  845 op or :createAdjacentMask:result 0 *tmp317
   846 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  847 set :createAdjacentMask:row1 :createBlockMaskRow:result
   848 label *label253
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  849 op sub :createAdjacentMask:r 2 1
   850 label *label254
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  851 op add *tmp309 :createCombinedMask:y 1
+  852 set :createBlockMaskRow:x :createCombinedMask:x
   853 set :createBlockMaskRow:y *tmp309
   854 setaddr :createBlockMaskRow*retaddr *label255 (h:*label255)
   855 call *label17 *invalid :createBlockMaskRow*retval (m:*label255) (h:*label255)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   649 write 1 processor4 "@counter"
   650 set :createAdjacentMask:x :createCombinedMask:x
   651 set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   652 op add *tmp305 :createCombinedMask:y 4
   653 label *label294
   654 label *label295
 
   769 jump *label337 always
   770 label *label337
   771 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   772 label *label250
   773 label *label251
   774 op add *tmp309 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   775 label *label338
   776 label *label339
   777 label *label340
 
   828 op or :createBlockMaskRow:result *tmp295 *tmp297
   829 label *label357
   830 label *label358
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   831 jump *label359 always
   832 label *label359
   833 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:492:20 (+35 instructions):
 
   846 op add *tmp309 :createCombinedMask:y 1
   847 set :createBlockMaskRow:x :createCombinedMask:x
   848 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label255 (h:*label255)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label255) (h:*label255)
-    * label *label255
+  849 label *label360
+  850 label *label361
+  851 label *label362
+  852 op add *tmp296 :createBlockMaskRow:x 4
+  853 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  854 op or :createBlockMaskRow:result 0 *tmp297
+  855 label *label363
+  856 label *label364
+  857 op shl *tmp295 :createBlockMaskRow:result 1
+  858 op add *tmp296 :createBlockMaskRow:x 3
+  859 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  860 op or :createBlockMaskRow:result *tmp295 *tmp297
+  861 label *label365
+  862 label *label366
+  863 op shl *tmp295 :createBlockMaskRow:result 1
+  864 op add *tmp296 :createBlockMaskRow:x 2
+  865 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  866 op or :createBlockMaskRow:result *tmp295 *tmp297
+  867 label *label367
+  868 label *label368
+  869 op shl *tmp295 :createBlockMaskRow:result 1
+  870 op add *tmp296 :createBlockMaskRow:x 1
+  871 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  872 op or :createBlockMaskRow:result *tmp295 *tmp297
+  873 label *label369
+  874 label *label370
+  875 op shl *tmp295 :createBlockMaskRow:result 1
+  876 op add *tmp296 :createBlockMaskRow:x 0
+  877 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  878 op or :createBlockMaskRow:result *tmp295 *tmp297
+  879 label *label371
+  880 label *label372
+  881 op shl *tmp295 :createBlockMaskRow:result 1
+  882 op add *tmp296 :createBlockMaskRow:x -1
+  883 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  884 op or :createBlockMaskRow:result *tmp295 *tmp297
+  885 label *label373
+  886 label *label374
+  887 op shl *tmp295 :createBlockMaskRow:result 1
+  888 op add *tmp296 :createBlockMaskRow:x -2
+  889 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  890 op or :createBlockMaskRow:result *tmp295 *tmp297
+  891 label *label375
+  892 label *label376
+  893 op shl *tmp295 :createBlockMaskRow:result 1
+  894 op add *tmp296 :createBlockMaskRow:x -3
+  895 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  896 op or :createBlockMaskRow:result *tmp295 *tmp297
+  897 label *label377
+  898 label *label378
+  899 op shl *tmp295 :createBlockMaskRow:result 1
+  900 op add *tmp296 :createBlockMaskRow:x -4
+  901 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  902 op or :createBlockMaskRow:result *tmp295 *tmp297
+  903 label *label379
+  904 label *label380
+  905 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  906 jump *label381 always
+  907 label *label381
   908 op shl *tmp311 :createAdjacentMask:row1 1
   909 op or *tmp312 :createAdjacentMask:row2 *tmp311
   910 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   835 op shr *tmp313 :createAdjacentMask:row1 1
   836 op or *tmp314 *tmp312 *tmp313
   837 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op shl *tmp316 0 7
   838 op and *tmp317 :createAdjacentMask:mask 0xFE
   839 op or :createAdjacentMask:result 0 *tmp317
   840 set :createAdjacentMask:row2 :createAdjacentMask:row1
 
   848 label *label360
   849 label *label361
   850 label *label362
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  851 op add *tmp296 :createCombinedMask:x 4
+  852 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   853 op or :createBlockMaskRow:result 0 *tmp297
   854 label *label363
   855 label *label364
   856 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  857 op add *tmp296 :createCombinedMask:x 3
+  858 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   859 op or :createBlockMaskRow:result *tmp295 *tmp297
   860 label *label365
   861 label *label366
   862 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  863 op add *tmp296 :createCombinedMask:x 2
+  864 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   865 op or :createBlockMaskRow:result *tmp295 *tmp297
   866 label *label367
   867 label *label368
   868 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  869 op add *tmp296 :createCombinedMask:x 1
+  870 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   871 op or :createBlockMaskRow:result *tmp295 *tmp297
   872 label *label369
   873 label *label370
   874 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  875 op add *tmp296 :createCombinedMask:x 0
+  876 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   877 op or :createBlockMaskRow:result *tmp295 *tmp297
   878 label *label371
   879 label *label372
   880 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  881 op add *tmp296 :createCombinedMask:x -1
+  882 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   883 op or :createBlockMaskRow:result *tmp295 *tmp297
   884 label *label373
   885 label *label374
   886 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  887 op add *tmp296 :createCombinedMask:x -2
+  888 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   889 op or :createBlockMaskRow:result *tmp295 *tmp297
   890 label *label375
   891 label *label376
   892 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  893 op add *tmp296 :createCombinedMask:x -3
+  894 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   895 op or :createBlockMaskRow:result *tmp295 *tmp297
   896 label *label377
   897 label *label378
   898 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  899 op add *tmp296 :createCombinedMask:x -4
+  900 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   901 op or :createBlockMaskRow:result *tmp295 *tmp297
   902 label *label379
   903 label *label380
 
   908 op or *tmp312 :createAdjacentMask:row2 *tmp311
   909 op shr *tmp313 :createAdjacentMask:row1 1
   910 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  911 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   912 op shl *tmp316 :createAdjacentMask:result 7
   913 op and *tmp317 :createAdjacentMask:mask 0xFE
   914 op or :createAdjacentMask:result *tmp316 *tmp317
   915 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  916 set :createAdjacentMask:row1 :createBlockMaskRow:result
   917 label *label256
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  918 op sub :createAdjacentMask:r 1 1
   919 label *label257
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  920 op add *tmp309 :createCombinedMask:y 0
+  921 set :createBlockMaskRow:x :createCombinedMask:x
   922 set :createBlockMaskRow:y *tmp309
   923 setaddr :createBlockMaskRow*retaddr *label258 (h:*label258)
   924 call *label17 *invalid :createBlockMaskRow*retval (m:*label258) (h:*label258)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   840 set :createAdjacentMask:row2 :createAdjacentMask:row1
   841 set :createAdjacentMask:row1 :createBlockMaskRow:result
   842 label *label253
-    * op sub :createAdjacentMask:r 2 1
   843 label *label254
   844 op add *tmp309 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   845 label *label360
   846 label *label361
   847 label *label362
 
   898 op or :createBlockMaskRow:result *tmp295 *tmp297
   899 label *label379
   900 label *label380
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   901 jump *label381 always
   902 label *label381
   903 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:492:20 (+35 instructions):
 
   916 op add *tmp309 :createCombinedMask:y 0
   917 set :createBlockMaskRow:x :createCombinedMask:x
   918 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label258 (h:*label258)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label258) (h:*label258)
-    * label *label258
+  919 label *label382
+  920 label *label383
+  921 label *label384
+  922 op add *tmp296 :createBlockMaskRow:x 4
+  923 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  924 op or :createBlockMaskRow:result 0 *tmp297
+  925 label *label385
+  926 label *label386
+  927 op shl *tmp295 :createBlockMaskRow:result 1
+  928 op add *tmp296 :createBlockMaskRow:x 3
+  929 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  930 op or :createBlockMaskRow:result *tmp295 *tmp297
+  931 label *label387
+  932 label *label388
+  933 op shl *tmp295 :createBlockMaskRow:result 1
+  934 op add *tmp296 :createBlockMaskRow:x 2
+  935 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  936 op or :createBlockMaskRow:result *tmp295 *tmp297
+  937 label *label389
+  938 label *label390
+  939 op shl *tmp295 :createBlockMaskRow:result 1
+  940 op add *tmp296 :createBlockMaskRow:x 1
+  941 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  942 op or :createBlockMaskRow:result *tmp295 *tmp297
+  943 label *label391
+  944 label *label392
+  945 op shl *tmp295 :createBlockMaskRow:result 1
+  946 op add *tmp296 :createBlockMaskRow:x 0
+  947 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  948 op or :createBlockMaskRow:result *tmp295 *tmp297
+  949 label *label393
+  950 label *label394
+  951 op shl *tmp295 :createBlockMaskRow:result 1
+  952 op add *tmp296 :createBlockMaskRow:x -1
+  953 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  954 op or :createBlockMaskRow:result *tmp295 *tmp297
+  955 label *label395
+  956 label *label396
+  957 op shl *tmp295 :createBlockMaskRow:result 1
+  958 op add *tmp296 :createBlockMaskRow:x -2
+  959 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  960 op or :createBlockMaskRow:result *tmp295 *tmp297
+  961 label *label397
+  962 label *label398
+  963 op shl *tmp295 :createBlockMaskRow:result 1
+  964 op add *tmp296 :createBlockMaskRow:x -3
+  965 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  966 op or :createBlockMaskRow:result *tmp295 *tmp297
+  967 label *label399
+  968 label *label400
+  969 op shl *tmp295 :createBlockMaskRow:result 1
+  970 op add *tmp296 :createBlockMaskRow:x -4
+  971 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  972 op or :createBlockMaskRow:result *tmp295 *tmp297
+  973 label *label401
+  974 label *label402
+  975 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  976 jump *label403 always
+  977 label *label403
   978 op shl *tmp311 :createAdjacentMask:row1 1
   979 op or *tmp312 :createAdjacentMask:row2 *tmp311
   980 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   919 label *label382
   920 label *label383
   921 label *label384
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  922 op add *tmp296 :createCombinedMask:x 4
+  923 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   924 op or :createBlockMaskRow:result 0 *tmp297
   925 label *label385
   926 label *label386
   927 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  928 op add *tmp296 :createCombinedMask:x 3
+  929 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   930 op or :createBlockMaskRow:result *tmp295 *tmp297
   931 label *label387
   932 label *label388
   933 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  934 op add *tmp296 :createCombinedMask:x 2
+  935 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   936 op or :createBlockMaskRow:result *tmp295 *tmp297
   937 label *label389
   938 label *label390
   939 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  940 op add *tmp296 :createCombinedMask:x 1
+  941 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   942 op or :createBlockMaskRow:result *tmp295 *tmp297
   943 label *label391
   944 label *label392
   945 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  946 op add *tmp296 :createCombinedMask:x 0
+  947 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   948 op or :createBlockMaskRow:result *tmp295 *tmp297
   949 label *label393
   950 label *label394
   951 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  952 op add *tmp296 :createCombinedMask:x -1
+  953 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   954 op or :createBlockMaskRow:result *tmp295 *tmp297
   955 label *label395
   956 label *label396
   957 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  958 op add *tmp296 :createCombinedMask:x -2
+  959 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   960 op or :createBlockMaskRow:result *tmp295 *tmp297
   961 label *label397
   962 label *label398
   963 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  964 op add *tmp296 :createCombinedMask:x -3
+  965 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   966 op or :createBlockMaskRow:result *tmp295 *tmp297
   967 label *label399
   968 label *label400
   969 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  970 op add *tmp296 :createCombinedMask:x -4
+  971 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   972 op or :createBlockMaskRow:result *tmp295 *tmp297
   973 label *label401
   974 label *label402
 
   979 op or *tmp312 :createAdjacentMask:row2 *tmp311
   980 op shr *tmp313 :createAdjacentMask:row1 1
   981 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  982 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   983 op shl *tmp316 :createAdjacentMask:result 7
   984 op and *tmp317 :createAdjacentMask:mask 0xFE
   985 op or :createAdjacentMask:result *tmp316 *tmp317
   986 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  987 set :createAdjacentMask:row1 :createBlockMaskRow:result
   988 label *label259
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  989 op sub :createAdjacentMask:r 0 1
   990 label *label260
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  991 op add *tmp309 :createCombinedMask:y -1
+  992 set :createBlockMaskRow:x :createCombinedMask:x
   993 set :createBlockMaskRow:y *tmp309
   994 setaddr :createBlockMaskRow*retaddr *label261 (h:*label261)
   995 call *label17 *invalid :createBlockMaskRow*retval (m:*label261) (h:*label261)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   911 set :createAdjacentMask:row2 :createAdjacentMask:row1
   912 set :createAdjacentMask:row1 :createBlockMaskRow:result
   913 label *label256
-    * op sub :createAdjacentMask:r 1 1
   914 label *label257
   915 op add *tmp309 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   916 label *label382
   917 label *label383
   918 label *label384
 
   969 op or :createBlockMaskRow:result *tmp295 *tmp297
   970 label *label401
   971 label *label402
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   972 jump *label403 always
   973 label *label403
   974 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:492:20 (+35 instructions):
 
   987 op add *tmp309 :createCombinedMask:y -1
   988 set :createBlockMaskRow:x :createCombinedMask:x
   989 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label261 (h:*label261)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label261) (h:*label261)
-    * label *label261
+  990 label *label404
+  991 label *label405
+  992 label *label406
+  993 op add *tmp296 :createBlockMaskRow:x 4
+  994 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  995 op or :createBlockMaskRow:result 0 *tmp297
+  996 label *label407
+  997 label *label408
+  998 op shl *tmp295 :createBlockMaskRow:result 1
+  999 op add *tmp296 :createBlockMaskRow:x 3
+ 1000 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1001 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1002 label *label409
+ 1003 label *label410
+ 1004 op shl *tmp295 :createBlockMaskRow:result 1
+ 1005 op add *tmp296 :createBlockMaskRow:x 2
+ 1006 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1007 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1008 label *label411
+ 1009 label *label412
+ 1010 op shl *tmp295 :createBlockMaskRow:result 1
+ 1011 op add *tmp296 :createBlockMaskRow:x 1
+ 1012 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1013 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1014 label *label413
+ 1015 label *label414
+ 1016 op shl *tmp295 :createBlockMaskRow:result 1
+ 1017 op add *tmp296 :createBlockMaskRow:x 0
+ 1018 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1019 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1020 label *label415
+ 1021 label *label416
+ 1022 op shl *tmp295 :createBlockMaskRow:result 1
+ 1023 op add *tmp296 :createBlockMaskRow:x -1
+ 1024 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1025 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1026 label *label417
+ 1027 label *label418
+ 1028 op shl *tmp295 :createBlockMaskRow:result 1
+ 1029 op add *tmp296 :createBlockMaskRow:x -2
+ 1030 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1031 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1032 label *label419
+ 1033 label *label420
+ 1034 op shl *tmp295 :createBlockMaskRow:result 1
+ 1035 op add *tmp296 :createBlockMaskRow:x -3
+ 1036 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1037 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1038 label *label421
+ 1039 label *label422
+ 1040 op shl *tmp295 :createBlockMaskRow:result 1
+ 1041 op add *tmp296 :createBlockMaskRow:x -4
+ 1042 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1043 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1044 label *label423
+ 1045 label *label424
+ 1046 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1047 jump *label425 always
+ 1048 label *label425
  1049 op shl *tmp311 :createAdjacentMask:row1 1
  1050 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1051 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   990 label *label404
   991 label *label405
   992 label *label406
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  993 op add *tmp296 :createCombinedMask:x 4
+  994 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   995 op or :createBlockMaskRow:result 0 *tmp297
   996 label *label407
   997 label *label408
   998 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  999 op add *tmp296 :createCombinedMask:x 3
+ 1000 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1001 op or :createBlockMaskRow:result *tmp295 *tmp297
  1002 label *label409
  1003 label *label410
  1004 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1005 op add *tmp296 :createCombinedMask:x 2
+ 1006 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1007 op or :createBlockMaskRow:result *tmp295 *tmp297
  1008 label *label411
  1009 label *label412
  1010 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1011 op add *tmp296 :createCombinedMask:x 1
+ 1012 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1013 op or :createBlockMaskRow:result *tmp295 *tmp297
  1014 label *label413
  1015 label *label414
  1016 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1017 op add *tmp296 :createCombinedMask:x 0
+ 1018 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1019 op or :createBlockMaskRow:result *tmp295 *tmp297
  1020 label *label415
  1021 label *label416
  1022 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1023 op add *tmp296 :createCombinedMask:x -1
+ 1024 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1025 op or :createBlockMaskRow:result *tmp295 *tmp297
  1026 label *label417
  1027 label *label418
  1028 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1029 op add *tmp296 :createCombinedMask:x -2
+ 1030 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1031 op or :createBlockMaskRow:result *tmp295 *tmp297
  1032 label *label419
  1033 label *label420
  1034 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1035 op add *tmp296 :createCombinedMask:x -3
+ 1036 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1037 op or :createBlockMaskRow:result *tmp295 *tmp297
  1038 label *label421
  1039 label *label422
  1040 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1041 op add *tmp296 :createCombinedMask:x -4
+ 1042 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1043 op or :createBlockMaskRow:result *tmp295 *tmp297
  1044 label *label423
  1045 label *label424
 
  1050 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1051 op shr *tmp313 :createAdjacentMask:row1 1
  1052 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+ 1053 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
  1054 op shl *tmp316 :createAdjacentMask:result 7
  1055 op and *tmp317 :createAdjacentMask:mask 0xFE
  1056 op or :createAdjacentMask:result *tmp316 *tmp317
  1057 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1058 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1059 label *label262
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1060 op sub :createAdjacentMask:r -1 1
  1061 label *label263
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1062 op add *tmp309 :createCombinedMask:y -2
+ 1063 set :createBlockMaskRow:x :createCombinedMask:x
  1064 set :createBlockMaskRow:y *tmp309
  1065 setaddr :createBlockMaskRow*retaddr *label264 (h:*label264)
  1066 call *label17 *invalid :createBlockMaskRow*retval (m:*label264) (h:*label264)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   982 set :createAdjacentMask:row2 :createAdjacentMask:row1
   983 set :createAdjacentMask:row1 :createBlockMaskRow:result
   984 label *label259
-    * op sub :createAdjacentMask:r 0 1
   985 label *label260
   986 op add *tmp309 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   987 label *label404
   988 label *label405
   989 label *label406
 
  1040 op or :createBlockMaskRow:result *tmp295 *tmp297
  1041 label *label423
  1042 label *label424
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1043 jump *label425 always
  1044 label *label425
  1045 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-16 instructions):
 
   144 jump *label198 lessThan :visited:i *tmp75
   145 label *label55
   146 set *tmp74 false
-    * jump *label52 always
   147 label *label52
   148 jump *label58 notEqual *tmp74 false
   149 op div *tmp90 2 .angle
 
   162 jump *label197 lessThan :locateOreAway:distance :findDrillLocation:distanceLimit
   163 label *label35
   164 set *tmp28 false
-    * jump *label32 always
   165 label *label32
   166 set :findDrillLocation:oreX :locateOreAway:x
   167 set :findDrillLocation:oreY :locateOreAway:y
 
   355 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   356 label *label249
   357 label *label106
-    * jump *label103 always
   358 label *label103
   359 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   360 op sub *tmp210 7 :excludeArea:blockSizeX
 
   400 label *label281
   401 label *label282
   402 set :shiftMask*retval :shiftMask:mask
-    * jump *label283 always
   403 label *label283
   404 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   405 jump *label100 always
   406 jump *label102 always
   407 label *label101
   408 set :excludeArea*retval :excludeArea:mask
-    * jump *label100 always
   409 label *label102
   410 label *label100
   411 return :excludeArea*retaddr
 
   450 jump *label200 lessThanEq :findPossiblePlacement:y 3
   451 label *label113
   452 set :findPossiblePlacement*retval -1
-    * jump *label110 always
   453 label *label110
   454 return :findPossiblePlacement*retaddr
   455 end
 
   631 label *label223
   632 label *label146
   633 set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label143 always
   634 label *label143
   635 return :createBlockMaskRow*retaddr
   636 end
 
   699 op or :createBlockMaskRow:result *tmp295 *tmp297
   700 label *label313
   701 label *label314
-    * jump *label315 always
   702 label *label315
   703 set :createAdjacentMask:row2 :createBlockMaskRow:result
   704 op add *tmp307 :createCombinedMask:y 3
 
   758 op or :createBlockMaskRow:result *tmp295 *tmp297
   759 label *label335
   760 label *label336
-    * jump *label337 always
   761 label *label337
   762 set :createAdjacentMask:row1 :createBlockMaskRow:result
   763 label *label250
 
   819 op or :createBlockMaskRow:result *tmp295 *tmp297
   820 label *label357
   821 label *label358
-    * jump *label359 always
   822 label *label359
   823 op shl *tmp311 :createAdjacentMask:row1 1
   824 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   888 op or :createBlockMaskRow:result *tmp295 *tmp297
   889 label *label379
   890 label *label380
-    * jump *label381 always
   891 label *label381
   892 op shl *tmp311 :createAdjacentMask:row1 1
   893 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   958 op or :createBlockMaskRow:result *tmp295 *tmp297
   959 label *label401
   960 label *label402
-    * jump *label403 always
   961 label *label403
   962 op shl *tmp311 :createAdjacentMask:row1 1
   963 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1028 op or :createBlockMaskRow:result *tmp295 *tmp297
  1029 label *label423
  1030 label *label424
-    * jump *label425 always
  1031 label *label425
  1032 op shl *tmp311 :createAdjacentMask:row1 1
  1033 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1117 call *label14 *invalid :excludeArea*retval (m:*label156) (h:*label156)
  1118 label *label156
  1119 set :createCombinedMask*retval :excludeArea*retval
-    * jump *label147 always
  1120 label *label147
  1121 return :createCombinedMask*retaddr
  1122 end
 
  1279 label *label291
  1280 label *label292
  1281 set :shiftMask*retval :shiftMask:mask
-    * jump *label293 always
  1282 label *label293
  1283 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1284 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
 
  1301 multilabel *label181 (m:marker0)
  1302 label *label177
  1303 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label157 always
  1304 label *label157
  1305 return :layoutThoriumDrillAtLocation*retaddr
  1306 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   579 label *label206
   580 op add *tmp296 :createBlockMaskRow:x 4
   581 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  582 set :createBlockMaskRow:result *tmp297
   583 label *label207
   584 label *label208
   585 op shl *tmp295 :createBlockMaskRow:result 1
 
   601 label *label213
   602 label *label214
   603 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
+  604 set *tmp296 :createBlockMaskRow:x
   605 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   606 op or :createBlockMaskRow:result *tmp295 *tmp297
   607 label *label215
 
   648 label *label296
   649 op add *tmp296 :createCombinedMask:x 4
   650 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  651 set :createBlockMaskRow:result *tmp297
   652 label *label297
   653 label *label298
   654 op shl *tmp295 :createBlockMaskRow:result 1
 
   670 label *label303
   671 label *label304
   672 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  673 set *tmp296 :createCombinedMask:x
   674 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   675 op or :createBlockMaskRow:result *tmp295 *tmp297
   676 label *label305
 
   707 label *label318
   708 op add *tmp296 :createCombinedMask:x 4
   709 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  710 set :createBlockMaskRow:result *tmp297
   711 label *label319
   712 label *label320
   713 op shl *tmp295 :createBlockMaskRow:result 1
 
   729 label *label325
   730 label *label326
   731 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  732 set *tmp296 :createCombinedMask:x
   733 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   734 op or :createBlockMaskRow:result *tmp295 *tmp297
   735 label *label327
 
   768 label *label340
   769 op add *tmp296 :createCombinedMask:x 4
   770 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  771 set :createBlockMaskRow:result *tmp297
   772 label *label341
   773 label *label342
   774 op shl *tmp295 :createBlockMaskRow:result 1
 
   790 label *label347
   791 label *label348
   792 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  793 set *tmp296 :createCombinedMask:x
   794 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   795 op or :createBlockMaskRow:result *tmp295 *tmp297
   796 label *label349
 
   826 op or *tmp314 *tmp312 *tmp313
   827 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   828 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp317
+  829 set :createAdjacentMask:result *tmp317
   830 set :createAdjacentMask:row2 :createAdjacentMask:row1
   831 set :createAdjacentMask:row1 :createBlockMaskRow:result
   832 label *label253
 
   837 label *label362
   838 op add *tmp296 :createCombinedMask:x 4
   839 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  840 set :createBlockMaskRow:result *tmp297
   841 label *label363
   842 label *label364
   843 op shl *tmp295 :createBlockMaskRow:result 1
 
   859 label *label369
   860 label *label370
   861 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  862 set *tmp296 :createCombinedMask:x
   863 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   864 op or :createBlockMaskRow:result *tmp295 *tmp297
   865 label *label371
 
   901 set :createAdjacentMask:row1 :createBlockMaskRow:result
   902 label *label256
   903 label *label257
-    * op add *tmp309 :createCombinedMask:y 0
+  904 set *tmp309 :createCombinedMask:y
   905 label *label382
   906 label *label383
   907 label *label384
   908 op add *tmp296 :createCombinedMask:x 4
   909 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  910 set :createBlockMaskRow:result *tmp297
   911 label *label385
   912 label *label386
   913 op shl *tmp295 :createBlockMaskRow:result 1
 
   929 label *label391
   930 label *label392
   931 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  932 set *tmp296 :createCombinedMask:x
   933 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   934 op or :createBlockMaskRow:result *tmp295 *tmp297
   935 label *label393
 
   977 label *label406
   978 op add *tmp296 :createCombinedMask:x 4
   979 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  980 set :createBlockMaskRow:result *tmp297
   981 label *label407
   982 label *label408
   983 op shl *tmp295 :createBlockMaskRow:result 1
 
   999 label *label413
  1000 label *label414
  1001 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+ 1002 set *tmp296 :createCombinedMask:x
  1003 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1004 op or :createBlockMaskRow:result *tmp295 *tmp297
  1005 label *label415

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-11 instructions):
 
   578 label *label205
   579 label *label206
   580 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  581 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
   582 label *label207
   583 label *label208
   584 op shl *tmp295 :createBlockMaskRow:result 1
 
   626 op shl *tmp295 :createBlockMaskRow:result 1
   627 op add *tmp296 :createBlockMaskRow:x -4
   628 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  629 op or :createBlockMaskRow*retval *tmp295 *tmp297
   630 label *label223
   631 label *label146
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   632 label *label143
   633 return :createBlockMaskRow*retaddr
   634 end
 
   645 label *label295
   646 label *label296
   647 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  648 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
   649 label *label297
   650 label *label298
   651 op shl *tmp295 :createBlockMaskRow:result 1
 
   693 op shl *tmp295 :createBlockMaskRow:result 1
   694 op add *tmp296 :createCombinedMask:x -4
   695 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  696 op or :createAdjacentMask:row2 *tmp295 *tmp297
   697 label *label313
   698 label *label314
   699 label *label315
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   700 op add *tmp307 :createCombinedMask:y 3
   701 label *label316
   702 label *label317
   703 label *label318
   704 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  705 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
   706 label *label319
   707 label *label320
   708 op shl *tmp295 :createBlockMaskRow:result 1
 
   750 op shl *tmp295 :createBlockMaskRow:result 1
   751 op add *tmp296 :createCombinedMask:x -4
   752 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  753 op or :createAdjacentMask:row1 *tmp295 *tmp297
   754 label *label335
   755 label *label336
   756 label *label337
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   757 label *label250
   758 label *label251
   759 op add *tmp309 :createCombinedMask:y 2
 
   761 label *label339
   762 label *label340
   763 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  764 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   765 label *label341
   766 label *label342
   767 op shl *tmp295 :createBlockMaskRow:result 1
 
   818 op shr *tmp313 :createAdjacentMask:row1 1
   819 op or *tmp314 *tmp312 *tmp313
   820 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp317
+  821 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   822 set :createAdjacentMask:row2 :createAdjacentMask:row1
   823 set :createAdjacentMask:row1 :createBlockMaskRow:result
   824 label *label253
 
   828 label *label361
   829 label *label362
   830 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  831 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   832 label *label363
   833 label *label364
   834 op shl *tmp295 :createBlockMaskRow:result 1
 
   897 label *label383
   898 label *label384
   899 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  900 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   901 label *label385
   902 label *label386
   903 op shl *tmp295 :createBlockMaskRow:result 1
 
   966 label *label405
   967 label *label406
   968 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  969 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   970 label *label407
   971 label *label408
   972 op shl *tmp295 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   601 label *label214
   602 op shl *tmp295 :createBlockMaskRow:result 1
   603 set *tmp296 :createBlockMaskRow:x
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  604 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   605 op or :createBlockMaskRow:result *tmp295 *tmp297
   606 label *label215
   607 label *label216
 
   668 label *label304
   669 op shl *tmp295 :createBlockMaskRow:result 1
   670 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  671 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   672 op or :createBlockMaskRow:result *tmp295 *tmp297
   673 label *label305
   674 label *label306
 
   725 label *label326
   726 op shl *tmp295 :createBlockMaskRow:result 1
   727 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  728 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   729 op or :createBlockMaskRow:result *tmp295 *tmp297
   730 label *label327
   731 label *label328
 
   784 label *label348
   785 op shl *tmp295 :createBlockMaskRow:result 1
   786 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  787 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   788 op or :createBlockMaskRow:result *tmp295 *tmp297
   789 label *label349
   790 label *label350
 
   851 label *label370
   852 op shl *tmp295 :createBlockMaskRow:result 1
   853 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  854 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   855 op or :createBlockMaskRow:result *tmp295 *tmp297
   856 label *label371
   857 label *label372
 
   897 label *label383
   898 label *label384
   899 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  900 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
   901 label *label385
   902 label *label386
   903 op shl *tmp295 :createBlockMaskRow:result 1
   904 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  905 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   906 op or :createBlockMaskRow:result *tmp295 *tmp297
   907 label *label387
   908 label *label388
   909 op shl *tmp295 :createBlockMaskRow:result 1
   910 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  911 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   912 op or :createBlockMaskRow:result *tmp295 *tmp297
   913 label *label389
   914 label *label390
   915 op shl *tmp295 :createBlockMaskRow:result 1
   916 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  917 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   918 op or :createBlockMaskRow:result *tmp295 *tmp297
   919 label *label391
   920 label *label392
   921 op shl *tmp295 :createBlockMaskRow:result 1
   922 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  923 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   924 op or :createBlockMaskRow:result *tmp295 *tmp297
   925 label *label393
   926 label *label394
   927 op shl *tmp295 :createBlockMaskRow:result 1
   928 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  929 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   930 op or :createBlockMaskRow:result *tmp295 *tmp297
   931 label *label395
   932 label *label396
   933 op shl *tmp295 :createBlockMaskRow:result 1
   934 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  935 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   936 op or :createBlockMaskRow:result *tmp295 *tmp297
   937 label *label397
   938 label *label398
   939 op shl *tmp295 :createBlockMaskRow:result 1
   940 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  941 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   942 op or :createBlockMaskRow:result *tmp295 *tmp297
   943 label *label399
   944 label *label400
   945 op shl *tmp295 :createBlockMaskRow:result 1
   946 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  947 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   948 op or :createBlockMaskRow:result *tmp295 *tmp297
   949 label *label401
   950 label *label402
 
   989 label *label414
   990 op shl *tmp295 :createBlockMaskRow:result 1
   991 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  992 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   993 op or :createBlockMaskRow:result *tmp295 *tmp297
   994 label *label415
   995 label *label416

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-8 instructions):
 
   600 label *label213
   601 label *label214
   602 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createBlockMaskRow:x
   603 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   604 op or :createBlockMaskRow:result *tmp295 *tmp297
   605 label *label215
 
   666 label *label303
   667 label *label304
   668 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   669 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   670 op or :createBlockMaskRow:result *tmp295 *tmp297
   671 label *label305
 
   722 label *label325
   723 label *label326
   724 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   725 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   726 op or :createBlockMaskRow:result *tmp295 *tmp297
   727 label *label327
 
   780 label *label347
   781 label *label348
   782 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   783 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   784 op or :createBlockMaskRow:result *tmp295 *tmp297
   785 label *label349
 
   846 label *label369
   847 label *label370
   848 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   849 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   850 op or :createBlockMaskRow:result *tmp295 *tmp297
   851 label *label371
 
   887 set :createAdjacentMask:row1 :createBlockMaskRow:result
   888 label *label256
   889 label *label257
-    * set *tmp309 :createCombinedMask:y
   890 label *label382
   891 label *label383
   892 label *label384
 
   913 label *label391
   914 label *label392
   915 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   916 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   917 op or :createBlockMaskRow:result *tmp295 *tmp297
   918 label *label393
 
   981 label *label413
   982 label *label414
   983 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   984 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   985 op or :createBlockMaskRow:result *tmp295 *tmp297
   986 label *label415

Modifications by Inline function call at OreLocator.mnd:492:20 (+31 instructions):
 
  1026 op add *tmp309 :createCombinedMask:y -2
  1027 set :createBlockMaskRow:x :createCombinedMask:x
  1028 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label264 (h:*label264)
-    * call *label17 *invalid :createBlockMaskRow*retval (m:*label264) (h:*label264)
-    * label *label264
+ 1029 label *label426
+ 1030 label *label427
+ 1031 label *label428
+ 1032 op add *tmp296 :createBlockMaskRow:x 4
+ 1033 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+ 1034 label *label429
+ 1035 label *label430
+ 1036 op shl *tmp295 :createBlockMaskRow:result 1
+ 1037 op add *tmp296 :createBlockMaskRow:x 3
+ 1038 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1039 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1040 label *label431
+ 1041 label *label432
+ 1042 op shl *tmp295 :createBlockMaskRow:result 1
+ 1043 op add *tmp296 :createBlockMaskRow:x 2
+ 1044 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1045 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1046 label *label433
+ 1047 label *label434
+ 1048 op shl *tmp295 :createBlockMaskRow:result 1
+ 1049 op add *tmp296 :createBlockMaskRow:x 1
+ 1050 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1051 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1052 label *label435
+ 1053 label *label436
+ 1054 op shl *tmp295 :createBlockMaskRow:result 1
+ 1055 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1056 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1057 label *label437
+ 1058 label *label438
+ 1059 op shl *tmp295 :createBlockMaskRow:result 1
+ 1060 op add *tmp296 :createBlockMaskRow:x -1
+ 1061 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1062 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1063 label *label439
+ 1064 label *label440
+ 1065 op shl *tmp295 :createBlockMaskRow:result 1
+ 1066 op add *tmp296 :createBlockMaskRow:x -2
+ 1067 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1068 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1069 label *label441
+ 1070 label *label442
+ 1071 op shl *tmp295 :createBlockMaskRow:result 1
+ 1072 op add *tmp296 :createBlockMaskRow:x -3
+ 1073 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1074 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1075 label *label443
+ 1076 label *label444
+ 1077 op shl *tmp295 :createBlockMaskRow:result 1
+ 1078 op add *tmp296 :createBlockMaskRow:x -4
+ 1079 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1080 op or :createBlockMaskRow*retval *tmp295 *tmp297
+ 1081 label *label445
+ 1082 label *label446
+ 1083 label *label447
  1084 op shl *tmp311 :createAdjacentMask:row1 1
  1085 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1086 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1023 label *label262
  1024 op sub :createAdjacentMask:r -1 1
  1025 label *label263
-    * op add *tmp309 :createCombinedMask:y -2
+ 1026 op add :createBlockMaskRow:y :createCombinedMask:y -2
  1027 set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
  1028 label *label426
  1029 label *label427
  1030 label *label428

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
  1028 label *label426
  1029 label *label427
  1030 label *label428
-    * op add *tmp296 :createBlockMaskRow:x 4
+ 1031 op add *tmp296 :createCombinedMask:x 4
  1032 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
  1033 label *label429
  1034 label *label430
  1035 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
+ 1036 op add *tmp296 :createCombinedMask:x 3
  1037 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1038 op or :createBlockMaskRow:result *tmp295 *tmp297
  1039 label *label431
  1040 label *label432
  1041 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
+ 1042 op add *tmp296 :createCombinedMask:x 2
  1043 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1044 op or :createBlockMaskRow:result *tmp295 *tmp297
  1045 label *label433
  1046 label *label434
  1047 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
+ 1048 op add *tmp296 :createCombinedMask:x 1
  1049 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1050 op or :createBlockMaskRow:result *tmp295 *tmp297
  1051 label *label435
  1052 label *label436
  1053 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1054 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1055 op or :createBlockMaskRow:result *tmp295 *tmp297
  1056 label *label437
  1057 label *label438
  1058 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
+ 1059 op add *tmp296 :createCombinedMask:x -1
  1060 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1061 op or :createBlockMaskRow:result *tmp295 *tmp297
  1062 label *label439
  1063 label *label440
  1064 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
+ 1065 op add *tmp296 :createCombinedMask:x -2
  1066 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1067 op or :createBlockMaskRow:result *tmp295 *tmp297
  1068 label *label441
  1069 label *label442
  1070 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
+ 1071 op add *tmp296 :createCombinedMask:x -3
  1072 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1073 op or :createBlockMaskRow:result *tmp295 *tmp297
  1074 label *label443
  1075 label *label444
  1076 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
+ 1077 op add *tmp296 :createCombinedMask:x -4
  1078 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1079 op or :createBlockMaskRow*retval *tmp295 *tmp297
  1080 label *label445
 
  1091 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1092 set :createAdjacentMask:row1 :createBlockMaskRow*retval
  1093 label *label265
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1094 op sub :createAdjacentMask:r -2 1
  1095 label *label266
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1096 op add *tmp309 :createCombinedMask:y -3
+ 1097 set :createBlockMaskRow:x :createCombinedMask:x
  1098 set :createBlockMaskRow:y *tmp309
  1099 setaddr :createBlockMaskRow*retaddr *label267 (h:*label267)
  1100 call *label17 *invalid :createBlockMaskRow*retval (m:*label267) (h:*label267)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
  1021 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1022 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1023 label *label262
-    * op sub :createAdjacentMask:r -1 1
  1024 label *label263
  1025 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
  1026 label *label426
  1027 label *label427
  1028 label *label428

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    33 set :findDrillLocation:distanceLimit *tmp15
    34 set .angle 0
    35 set .mapProgress 0
-    * label *label26
    36 ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18
    37 jump *label28 notEqual *tmp18 false
    38 label *label272
    39 ucontrol approach :findDrillLocation:x :findDrillLocation:y 5.5
-    * label *label27
    40 ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18
    41 jump *label272 equal *tmp18 false
    42 label *label28
-    * label *label25
-    * label *label24
    43 op div *tmp21 *tmp15 3.8197185279121366
    44 op pow .mapTotal *tmp21 2
    45 set :findDrillLocation:oreX 0
 
    62 op mul .mapProgress .angle .angle
    63 op sub *tmp37 @mapw 5
    64 op sub *tmp44 @maph 5
-    * label *label33
    65 jump *label35 greaterThanEq :locateOreAway:distance :findDrillLocation:distanceLimit
    66 label *label197
    67 op div :locateOreAway:a .angle @degToRad
 
    70 op add *tmp36 :findDrillLocation:x *tmp35
    71 op max *tmp39 *tmp36 5
    72 op min *tmp38 *tmp39 *tmp37
-    * label *label36
    73 op cos *tmp41 :locateOreAway:a
    74 op mul *tmp42 *tmp41 :locateOreAway:distance
    75 op add *tmp43 :findDrillLocation:y *tmp42
    76 op max *tmp46 *tmp43 5
    77 op min *tmp45 *tmp46 *tmp44
-    * label *label37
-    * label *label39
    78 ucontrol within *tmp38 *tmp45 5 *tmp48
    79 jump *label41 notEqual *tmp48 false
    80 label *label204
    81 ucontrol approach *tmp38 *tmp45 4.5
-    * label *label40
    82 ucontrol within *tmp38 *tmp45 5 *tmp48
    83 jump *label204 equal *tmp48 false
    84 label *label41
-    * label *label38
    85 op div *tmp51 3.8197185279121366 :locateOreAway:distance
    86 op add .angle .angle *tmp51
    87 op mul .mapProgress .angle .angle
 
    91 set *tmp28 false
    92 jump *label32 always
    93 label *label42
-    * label *label43
    94 op sub *tmp58 :locateOreAway:x :findDrillLocation:x
    95 op abs *tmp59 *tmp58
    96 op sub *tmp60 :locateOreAway:y :findDrillLocation:y
 
   103 jump *label46 notEqual :locateOreAway:lastY :locateOreAway:y
   104 jump *label34 always
   105 label *label46
-    * label *label47
   106 label *label44
-    * label *label45
   107 jump *label48 lessThan :locateOreAway:coreDist 8
   108 jump *label50 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   109 set :locateOreAway:lastX :locateOreAway:x
   110 set :locateOreAway:lastY :locateOreAway:y
   111 set *tmp75 .locations
   112 set :visited:i .locationsStart
-    * label *label53
   113 jump *label55 greaterThanEq .locationsStart *tmp75
   114 label *label198
   115 op mul :visited:index 4 :visited:i
 
   124 set *tmp74 true
   125 jump *label52 always
   126 label *label56
-    * label *label57
-    * label *label54
   127 op add :visited:i :visited:i 1
   128 jump *label198 lessThan :visited:i *tmp75
   129 label *label55
 
   137 set *tmp28 true
   138 jump *label32 always
   139 label *label58
-    * label *label59
   140 label *label50
-    * label *label51
   141 label *label48
-    * label *label49
   142 label *label34
   143 jump *label197 lessThan :locateOreAway:distance :findDrillLocation:distanceLimit
   144 label *label35
 
   151 op greaterThan :findDrillLocation*retval :findDrillLocation:capacity 0
   152 jump *label23 always
   153 label *label60
-    * label *label61
   154 jump *label62 lessThan :findDrillLocation:limit 1000
   155 op add .mapSpots .mapSpots 1
   156 label *label62
-    * label *label63
-    * label *label66
   157 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   158 jump *label68 notEqual *tmp100 false
   159 label *label224
   160 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label67
   161 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   162 jump *label224 equal *tmp100 false
   163 label *label68
-    * label *label65
-    * label *label64
   164 set :findDrillLocation:last 0
   165 label *label69
   166 write @unit processor4 ":findBestPosition:unit"
 
   187 jump *label73 greaterThan :findDrillLocation:coreDist 8
   188 jump *label71 always
   189 label *label73
-    * label *label74
   190 jump *label75 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
   191 set :findDrillLocation:dx :findDrillLocation:newX
   192 set :findDrillLocation:dy :findDrillLocation:newY
 
   203 op add .count .count 1
   204 write :findDrillLocation:dy bank1 .count
   205 op add .locations .locations 1
-    * label *label81
   206 ucontrol unbind
   207 set .searchFinished true
   208 set :findDrillLocation*retval true
   209 jump *label23 always
   210 label *label79
-    * label *label80
   211 label *label75
-    * label *label76
   212 jump *label82 lessThanEq :findDrillLocation:score :findDrillLocation:best
   213 set :findDrillLocation:bestX :findDrillLocation:newX
   214 set :findDrillLocation:bestY :findDrillLocation:newY
   215 set :findDrillLocation:best :findDrillLocation:score
   216 label *label82
-    * label *label83
   217 jump *label84 greaterThan :findDrillLocation:score :findDrillLocation:last
   218 jump *label71 always
   219 label *label84
-    * label *label85
   220 set :findDrillLocation:last :findDrillLocation:score
   221 op mul :round:x :findDrillLocation:diffX 1.1
   222 op add *tmp143 :round:x 0.5
   223 op floor *tmp142 *tmp143
-    * label *label86
   224 op add :findDrillLocation:oreX :findDrillLocation:oreX *tmp142
   225 op mul :round.1:x :findDrillLocation:diffY 1.1
   226 op add *tmp147 :round.1:x 0.5
   227 op floor *tmp146 *tmp147
-    * label *label87
   228 op add :findDrillLocation:oreY :findDrillLocation:oreY *tmp146
-    * label *label70
   229 jump *label69 always
   230 label *label71
   231 jump *label88 lessThan :findDrillLocation:best 0
 
   239 op add .count .count 1
   240 write :findDrillLocation:bestY bank1 .count
   241 op add .locations .locations 1
-    * label *label90
   242 label *label88
-    * label *label89
-    * label *label30
   243 jump *label29 always
-    * label *label31
   244 set .searchFinished true
   245 set :findDrillLocation*retval false
   246 label *label23
 
   267 op shl *tmp203 1 :excludeArea:blockSizeX
   268 op sub :createMatrixOfSize:row *tmp203 1
   269 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * label *label225
-    * label *label226
   270 jump *label227 lessThan 1 :excludeArea:blockSizeY
   271 jump *label106 always
   272 label *label227
-    * label *label228
   273 op shl *tmp207 :createMatrixOfSize:row 7
   274 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label229
-    * label *label230
   275 jump *label231 lessThan 2 :excludeArea:blockSizeY
   276 jump *label106 always
   277 label *label231
-    * label *label232
   278 op shl *tmp207 :createMatrixOfSize:matrix 7
   279 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label233
-    * label *label234
   280 jump *label235 lessThan 3 :excludeArea:blockSizeY
   281 jump *label106 always
   282 label *label235
-    * label *label236
   283 op shl *tmp207 :createMatrixOfSize:matrix 7
   284 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label237
-    * label *label238
   285 jump *label239 lessThan 4 :excludeArea:blockSizeY
   286 jump *label106 always
   287 label *label239
-    * label *label240
   288 op shl *tmp207 :createMatrixOfSize:matrix 7
   289 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label241
-    * label *label242
   290 jump *label243 lessThan 5 :excludeArea:blockSizeY
   291 jump *label106 always
   292 label *label243
-    * label *label244
   293 op shl *tmp207 :createMatrixOfSize:matrix 7
   294 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label245
-    * label *label246
   295 jump *label247 lessThan 6 :excludeArea:blockSizeY
   296 jump *label106 always
   297 label *label247
-    * label *label248
   298 op shl *tmp207 :createMatrixOfSize:matrix 7
   299 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label249
   300 label *label106
-    * label *label103
   301 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   302 op sub *tmp210 7 :excludeArea:blockSizeX
   303 op mul :excludeArea:shiftX *tmp209 *tmp210
   304 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   305 op sub *tmp213 7 :excludeArea:blockSizeY
   306 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * label *label274
   307 op abs *tmp161 :excludeArea:shiftX
   308 op greaterThan *tmp162 *tmp161 6
   309 op abs *tmp163 :excludeArea:shiftY
 
   313 set :shiftMask*retval 0
   314 jump *label283 always
   315 label *label275
-    * label *label276
   316 op mul *tmp167 7 :excludeArea:shiftY
   317 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   318 jump *label277 lessThanEq :shiftMask:shift 0
 
   329 jump *label279 lessThanEq :excludeArea:shiftX 0
   330 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   331 label *label279
-    * label *label280
   332 op shl *tmp181 :shiftMask:keep 7
   333 op or :shiftMask:keep :shiftMask:keep *tmp181
   334 op shl *tmp182 :shiftMask:keep 14
 
   337 op or :shiftMask:keep :shiftMask:keep *tmp183
   338 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   339 label *label281
-    * label *label282
   340 set :shiftMask*retval :shiftMask:mask
   341 label *label283
   342 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
 
   350 end
   351 label *label15
   352 set :findPossiblePlacement:y -3
-    * label *label111
   353 jump *label113 greaterThan :findPossiblePlacement:y 3
   354 label *label200
   355 op add *tmp216 :findPossiblePlacement:y 3
   356 op mul *tmp217 7 *tmp216
   357 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   358 set :findPossiblePlacement:x -3
-    * label *label114
   359 jump *label116 greaterThan :findPossiblePlacement:x 3
   360 label *label201
   361 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   365 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   366 jump *label110 always
   367 label *label117
-    * label *label118
   368 op sub *tmp225 3 :findPossiblePlacement:width
   369 jump *label119 lessThanEq :findPossiblePlacement:x *tmp225
   370 jump *label116 always
   371 label *label119
-    * label *label120
   372 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label115
   373 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   374 jump *label201 lessThanEq :findPossiblePlacement:x 3
   375 label *label116
 
   377 jump *label121 lessThanEq :findPossiblePlacement:y *tmp228
   378 jump *label113 always
   379 label *label121
-    * label *label122
-    * label *label112
   380 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   381 jump *label200 lessThanEq :findPossiblePlacement:y 3
   382 label *label113
 
   397 set :tryPlaceGenerator*retval false
   398 jump *label123 always
   399 label *label127
-    * label *label128
   400 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   401 op add .water2X *tmp236 :findPossiblePlacement:x
   402 op add *tmp238 :tryPlaceGenerator:centerY 0.5
 
   419 set :tryPlaceGenerator*retval false
   420 jump *label123 always
   421 label *label130
-    * label *label131
   422 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   423 op add .water2X *tmp248 :findPossiblePlacement:x
   424 op add *tmp250 :tryPlaceGenerator:centerY 0.5
 
   441 set :tryPlaceGenerator*retval false
   442 jump *label123 always
   443 label *label133
-    * label *label134
   444 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   445 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   446 op shl *tmp262 1 :findPossiblePlacement*retval
 
   456 set :tryPlaceGenerator*retval false
   457 jump *label123 always
   458 label *label136
-    * label *label137
   459 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   460 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   461 op shl *tmp268 1 :findPossiblePlacement*retval
 
   491 set :tryPlaceGenerator*retval false
   492 jump *label123 always
   493 label *label141
-    * label *label142
   494 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   495 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   496 label *label138
-    * label *label139
   497 set :tryPlaceGenerator*retval true
   498 jump *label123 always
   499 label *label123
   500 return :tryPlaceGenerator*retaddr
   501 end
   502 label *label17
-    * label *label205
-    * label *label206
   503 op add *tmp296 :createBlockMaskRow:x 4
   504 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label207
-    * label *label208
   505 op shl *tmp295 :createBlockMaskRow:result 1
   506 op add *tmp296 :createBlockMaskRow:x 3
   507 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   508 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label209
-    * label *label210
   509 op shl *tmp295 :createBlockMaskRow:result 1
   510 op add *tmp296 :createBlockMaskRow:x 2
   511 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   512 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label211
-    * label *label212
   513 op shl *tmp295 :createBlockMaskRow:result 1
   514 op add *tmp296 :createBlockMaskRow:x 1
   515 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   516 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label213
-    * label *label214
   517 op shl *tmp295 :createBlockMaskRow:result 1
   518 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   519 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label215
-    * label *label216
   520 op shl *tmp295 :createBlockMaskRow:result 1
   521 op add *tmp296 :createBlockMaskRow:x -1
   522 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   523 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label217
-    * label *label218
   524 op shl *tmp295 :createBlockMaskRow:result 1
   525 op add *tmp296 :createBlockMaskRow:x -2
   526 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   527 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label219
-    * label *label220
   528 op shl *tmp295 :createBlockMaskRow:result 1
   529 op add *tmp296 :createBlockMaskRow:x -3
   530 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   531 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label221
-    * label *label222
   532 op shl *tmp295 :createBlockMaskRow:result 1
   533 op add *tmp296 :createBlockMaskRow:x -4
   534 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   535 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label223
-    * label *label146
-    * label *label143
   536 return :createBlockMaskRow*retaddr
   537 end
   538 label *label18
 
   544 set :createAdjacentMask:x :createCombinedMask:x
   545 set :createAdjacentMask:y :createCombinedMask:y
   546 op add *tmp305 :createCombinedMask:y 4
-    * label *label294
-    * label *label295
-    * label *label296
   547 op add *tmp296 :createCombinedMask:x 4
   548 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label297
-    * label *label298
   549 op shl *tmp295 :createBlockMaskRow:result 1
   550 op add *tmp296 :createCombinedMask:x 3
   551 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   552 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label299
-    * label *label300
   553 op shl *tmp295 :createBlockMaskRow:result 1
   554 op add *tmp296 :createCombinedMask:x 2
   555 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   556 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label301
-    * label *label302
   557 op shl *tmp295 :createBlockMaskRow:result 1
   558 op add *tmp296 :createCombinedMask:x 1
   559 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   560 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label303
-    * label *label304
   561 op shl *tmp295 :createBlockMaskRow:result 1
   562 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   563 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label305
-    * label *label306
   564 op shl *tmp295 :createBlockMaskRow:result 1
   565 op add *tmp296 :createCombinedMask:x -1
   566 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   567 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label307
-    * label *label308
   568 op shl *tmp295 :createBlockMaskRow:result 1
   569 op add *tmp296 :createCombinedMask:x -2
   570 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   571 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label309
-    * label *label310
   572 op shl *tmp295 :createBlockMaskRow:result 1
   573 op add *tmp296 :createCombinedMask:x -3
   574 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   575 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label311
-    * label *label312
   576 op shl *tmp295 :createBlockMaskRow:result 1
   577 op add *tmp296 :createCombinedMask:x -4
   578 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   579 op or :createAdjacentMask:row2 *tmp295 *tmp297
-    * label *label313
-    * label *label314
-    * label *label315
   580 op add *tmp307 :createCombinedMask:y 3
-    * label *label316
-    * label *label317
-    * label *label318
   581 op add *tmp296 :createCombinedMask:x 4
   582 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label319
-    * label *label320
   583 op shl *tmp295 :createBlockMaskRow:result 1
   584 op add *tmp296 :createCombinedMask:x 3
   585 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   586 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label321
-    * label *label322
   587 op shl *tmp295 :createBlockMaskRow:result 1
   588 op add *tmp296 :createCombinedMask:x 2
   589 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   590 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label323
-    * label *label324
   591 op shl *tmp295 :createBlockMaskRow:result 1
   592 op add *tmp296 :createCombinedMask:x 1
   593 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   594 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label325
-    * label *label326
   595 op shl *tmp295 :createBlockMaskRow:result 1
   596 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   597 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label327
-    * label *label328
   598 op shl *tmp295 :createBlockMaskRow:result 1
   599 op add *tmp296 :createCombinedMask:x -1
   600 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   601 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label329
-    * label *label330
   602 op shl *tmp295 :createBlockMaskRow:result 1
   603 op add *tmp296 :createCombinedMask:x -2
   604 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   605 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label331
-    * label *label332
   606 op shl *tmp295 :createBlockMaskRow:result 1
   607 op add *tmp296 :createCombinedMask:x -3
   608 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   609 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label333
-    * label *label334
   610 op shl *tmp295 :createBlockMaskRow:result 1
   611 op add *tmp296 :createCombinedMask:x -4
   612 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   613 op or :createAdjacentMask:row1 *tmp295 *tmp297
-    * label *label335
-    * label *label336
-    * label *label337
-    * label *label250
-    * label *label251
   614 op add *tmp309 :createCombinedMask:y 2
-    * label *label338
-    * label *label339
-    * label *label340
   615 op add *tmp296 :createCombinedMask:x 4
   616 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label341
-    * label *label342
   617 op shl *tmp295 :createBlockMaskRow:result 1
   618 op add *tmp296 :createCombinedMask:x 3
   619 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   620 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label343
-    * label *label344
   621 op shl *tmp295 :createBlockMaskRow:result 1
   622 op add *tmp296 :createCombinedMask:x 2
   623 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   624 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label345
-    * label *label346
   625 op shl *tmp295 :createBlockMaskRow:result 1
   626 op add *tmp296 :createCombinedMask:x 1
   627 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   628 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label347
-    * label *label348
   629 op shl *tmp295 :createBlockMaskRow:result 1
   630 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   631 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label349
-    * label *label350
   632 op shl *tmp295 :createBlockMaskRow:result 1
   633 op add *tmp296 :createCombinedMask:x -1
   634 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   635 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label351
-    * label *label352
   636 op shl *tmp295 :createBlockMaskRow:result 1
   637 op add *tmp296 :createCombinedMask:x -2
   638 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   639 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label353
-    * label *label354
   640 op shl *tmp295 :createBlockMaskRow:result 1
   641 op add *tmp296 :createCombinedMask:x -3
   642 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   643 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label355
-    * label *label356
   644 op shl *tmp295 :createBlockMaskRow:result 1
   645 op add *tmp296 :createCombinedMask:x -4
   646 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   647 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label357
-    * label *label358
-    * label *label359
   648 op shl *tmp311 :createAdjacentMask:row1 1
   649 op or *tmp312 :createAdjacentMask:row2 *tmp311
   650 op shr *tmp313 :createAdjacentMask:row1 1
 
   653 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   654 set :createAdjacentMask:row2 :createAdjacentMask:row1
   655 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label253
-    * label *label254
   656 op add *tmp309 :createCombinedMask:y 1
-    * label *label360
-    * label *label361
-    * label *label362
   657 op add *tmp296 :createCombinedMask:x 4
   658 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label363
-    * label *label364
   659 op shl *tmp295 :createBlockMaskRow:result 1
   660 op add *tmp296 :createCombinedMask:x 3
   661 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   662 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label365
-    * label *label366
   663 op shl *tmp295 :createBlockMaskRow:result 1
   664 op add *tmp296 :createCombinedMask:x 2
   665 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   666 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label367
-    * label *label368
   667 op shl *tmp295 :createBlockMaskRow:result 1
   668 op add *tmp296 :createCombinedMask:x 1
   669 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   670 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label369
-    * label *label370
   671 op shl *tmp295 :createBlockMaskRow:result 1
   672 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   673 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label371
-    * label *label372
   674 op shl *tmp295 :createBlockMaskRow:result 1
   675 op add *tmp296 :createCombinedMask:x -1
   676 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   677 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label373
-    * label *label374
   678 op shl *tmp295 :createBlockMaskRow:result 1
   679 op add *tmp296 :createCombinedMask:x -2
   680 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   681 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label375
-    * label *label376
   682 op shl *tmp295 :createBlockMaskRow:result 1
   683 op add *tmp296 :createCombinedMask:x -3
   684 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   685 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label377
-    * label *label378
   686 op shl *tmp295 :createBlockMaskRow:result 1
   687 op add *tmp296 :createCombinedMask:x -4
   688 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   689 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label379
-    * label *label380
-    * label *label381
   690 op shl *tmp311 :createAdjacentMask:row1 1
   691 op or *tmp312 :createAdjacentMask:row2 *tmp311
   692 op shr *tmp313 :createAdjacentMask:row1 1
 
   697 op or :createAdjacentMask:result *tmp316 *tmp317
   698 set :createAdjacentMask:row2 :createAdjacentMask:row1
   699 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label256
-    * label *label257
-    * label *label382
-    * label *label383
-    * label *label384
   700 op add *tmp296 :createCombinedMask:x 4
   701 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label385
-    * label *label386
   702 op shl *tmp295 :createBlockMaskRow:result 1
   703 op add *tmp296 :createCombinedMask:x 3
   704 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   705 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label387
-    * label *label388
   706 op shl *tmp295 :createBlockMaskRow:result 1
   707 op add *tmp296 :createCombinedMask:x 2
   708 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   709 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label389
-    * label *label390
   710 op shl *tmp295 :createBlockMaskRow:result 1
   711 op add *tmp296 :createCombinedMask:x 1
   712 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   713 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label391
-    * label *label392
   714 op shl *tmp295 :createBlockMaskRow:result 1
   715 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   716 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label393
-    * label *label394
   717 op shl *tmp295 :createBlockMaskRow:result 1
   718 op add *tmp296 :createCombinedMask:x -1
   719 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   720 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label395
-    * label *label396
   721 op shl *tmp295 :createBlockMaskRow:result 1
   722 op add *tmp296 :createCombinedMask:x -2
   723 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   724 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label397
-    * label *label398
   725 op shl *tmp295 :createBlockMaskRow:result 1
   726 op add *tmp296 :createCombinedMask:x -3
   727 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   728 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label399
-    * label *label400
   729 op shl *tmp295 :createBlockMaskRow:result 1
   730 op add *tmp296 :createCombinedMask:x -4
   731 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   732 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label401
-    * label *label402
-    * label *label403
   733 op shl *tmp311 :createAdjacentMask:row1 1
   734 op or *tmp312 :createAdjacentMask:row2 *tmp311
   735 op shr *tmp313 :createAdjacentMask:row1 1
 
   740 op or :createAdjacentMask:result *tmp316 *tmp317
   741 set :createAdjacentMask:row2 :createAdjacentMask:row1
   742 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label259
-    * label *label260
   743 op add *tmp309 :createCombinedMask:y -1
-    * label *label404
-    * label *label405
-    * label *label406
   744 op add *tmp296 :createCombinedMask:x 4
   745 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label407
-    * label *label408
   746 op shl *tmp295 :createBlockMaskRow:result 1
   747 op add *tmp296 :createCombinedMask:x 3
   748 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   749 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label409
-    * label *label410
   750 op shl *tmp295 :createBlockMaskRow:result 1
   751 op add *tmp296 :createCombinedMask:x 2
   752 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   753 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label411
-    * label *label412
   754 op shl *tmp295 :createBlockMaskRow:result 1
   755 op add *tmp296 :createCombinedMask:x 1
   756 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   757 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label413
-    * label *label414
   758 op shl *tmp295 :createBlockMaskRow:result 1
   759 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   760 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label415
-    * label *label416
   761 op shl *tmp295 :createBlockMaskRow:result 1
   762 op add *tmp296 :createCombinedMask:x -1
   763 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   764 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label417
-    * label *label418
   765 op shl *tmp295 :createBlockMaskRow:result 1
   766 op add *tmp296 :createCombinedMask:x -2
   767 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   768 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label419
-    * label *label420
   769 op shl *tmp295 :createBlockMaskRow:result 1
   770 op add *tmp296 :createCombinedMask:x -3
   771 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   772 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label421
-    * label *label422
   773 op shl *tmp295 :createBlockMaskRow:result 1
   774 op add *tmp296 :createCombinedMask:x -4
   775 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   776 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label423
-    * label *label424
-    * label *label425
   777 op shl *tmp311 :createAdjacentMask:row1 1
   778 op or *tmp312 :createAdjacentMask:row2 *tmp311
   779 op shr *tmp313 :createAdjacentMask:row1 1
 
   784 op or :createAdjacentMask:result *tmp316 *tmp317
   785 set :createAdjacentMask:row2 :createAdjacentMask:row1
   786 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label262
-    * label *label263
   787 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * label *label426
-    * label *label427
-    * label *label428
   788 op add *tmp296 :createCombinedMask:x 4
   789 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label429
-    * label *label430
   790 op shl *tmp295 :createBlockMaskRow:result 1
   791 op add *tmp296 :createCombinedMask:x 3
   792 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   793 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label431
-    * label *label432
   794 op shl *tmp295 :createBlockMaskRow:result 1
   795 op add *tmp296 :createCombinedMask:x 2
   796 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   797 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label433
-    * label *label434
   798 op shl *tmp295 :createBlockMaskRow:result 1
   799 op add *tmp296 :createCombinedMask:x 1
   800 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   801 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label435
-    * label *label436
   802 op shl *tmp295 :createBlockMaskRow:result 1
   803 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   804 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label437
-    * label *label438
   805 op shl *tmp295 :createBlockMaskRow:result 1
   806 op add *tmp296 :createCombinedMask:x -1
   807 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   808 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label439
-    * label *label440
   809 op shl *tmp295 :createBlockMaskRow:result 1
   810 op add *tmp296 :createCombinedMask:x -2
   811 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   812 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label441
-    * label *label442
   813 op shl *tmp295 :createBlockMaskRow:result 1
   814 op add *tmp296 :createCombinedMask:x -3
   815 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   816 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label443
-    * label *label444
   817 op shl *tmp295 :createBlockMaskRow:result 1
   818 op add *tmp296 :createCombinedMask:x -4
   819 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   820 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label445
-    * label *label446
-    * label *label447
   821 op shl *tmp311 :createAdjacentMask:row1 1
   822 op or *tmp312 :createAdjacentMask:row2 *tmp311
   823 op shr *tmp313 :createAdjacentMask:row1 1
 
   828 op or :createAdjacentMask:result *tmp316 *tmp317
   829 set :createAdjacentMask:row2 :createAdjacentMask:row1
   830 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label265
   831 op sub :createAdjacentMask:r -2 1
-    * label *label266
   832 op add *tmp309 :createCombinedMask:y -3
   833 set :createBlockMaskRow:x :createCombinedMask:x
   834 set :createBlockMaskRow:y *tmp309
 
   845 op or :createAdjacentMask:result *tmp316 *tmp317
   846 set :createAdjacentMask:row2 :createAdjacentMask:row1
   847 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label268
   848 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label269
   849 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   850 set :createBlockMaskRow:x :createAdjacentMask:x
   851 set :createBlockMaskRow:y *tmp309
 
   862 op or :createAdjacentMask:result *tmp316 *tmp317
   863 set :createAdjacentMask:row2 :createAdjacentMask:row1
   864 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label271
   865 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label153
   866 op shr *tmp304 :createAdjacentMask:result 1
-    * label *label148
   867 label *label155
   868 wait 1e-15
   869 read *tmp320 processor4 ":createTerrainMask*finished"
 
   880 call *label14 *invalid :excludeArea*retval (m:*label156) (h:*label156)
   881 label *label156
   882 set :createCombinedMask*retval :excludeArea*retval
-    * label *label147
   883 return :createCombinedMask*retaddr
   884 end
   885 label *label19
 
   893 set .water1X -1
   894 set :moveTo.5:x .drillX
   895 set :moveTo.5:y .drillY
-    * label *label159
   896 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   897 jump *label161 notEqual *tmp323 false
   898 label *label273
   899 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label160
   900 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   901 jump *label273 equal *tmp323 false
   902 label *label161
-    * label *label158
   903 set :createCombinedMask:x .drillX
   904 set :createCombinedMask:y .drillY
   905 setaddr :createCombinedMask*retaddr *label162 (h:*label162)
 
   924 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   925 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   926 label *label164
-    * label *label165
   927 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   928 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   929 set :findPossiblePlacement:width 2
 
   939 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   940 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   941 label *label167
-    * label *label168
   942 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   943 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   944 set :findPossiblePlacement:placementMask 1
 
   951 set :layoutThoriumDrillAtLocation*retval false
   952 jump *label157 always
   953 label *label170
-    * label *label171
   954 op add .node1X .drillX :findPossiblePlacement:x
   955 op add .node1Y .drillY :findPossiblePlacement:y
   956 op shl *tmp352 1 :findPossiblePlacement*retval
 
   969 set :layoutThoriumDrillAtLocation*retval true
   970 jump *label157 always
   971 label *label173
-    * label *label174
   972 set :layoutThoriumDrillAtLocation:sx 3
   973 set :layoutThoriumDrillAtLocation:sy 3
   974 setaddr *tmp355 *label178
 
   996 call *label18 *invalid :createCombinedMask*retval (m:*label182) (h:*label182)
   997 label *label182
   998 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label284
   999 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
  1000 op greaterThan *tmp162 *tmp161 6
  1001 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
 
  1005 set :shiftMask*retval 0
  1006 jump *label293 always
  1007 label *label285
-    * label *label286
  1008 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
  1009 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
  1010 jump *label287 lessThanEq :shiftMask:shift 0
 
  1021 jump *label289 lessThanEq :layoutThoriumDrillAtLocation:sx 0
  1022 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
  1023 label *label289
-    * label *label290
  1024 op shl *tmp181 :shiftMask:keep 7
  1025 op or :shiftMask:keep :shiftMask:keep *tmp181
  1026 op shl *tmp182 :shiftMask:keep 14
 
  1029 op or :shiftMask:keep :shiftMask:keep *tmp183
  1030 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
  1031 label *label291
-    * label *label292
  1032 set :shiftMask*retval :shiftMask:mask
  1033 label *label293
  1034 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
  1046 set :layoutThoriumDrillAtLocation*retval true
  1047 jump *label157 always
  1048 label *label185
-    * label *label186
-    * label *label176
  1049 multijump *tmp355 0 0 (m:marker0)
  1050 multilabel *label181 (m:marker0)
-    * label *label177
  1051 set :layoutThoriumDrillAtLocation*retval true
  1052 label *label157
  1053 return :layoutThoriumDrillAtLocation*retaddr
 
  1069 set :layoutThoriumDrill*retval false
  1070 jump *label187 always
  1071 label *label189
-    * label *label190
  1072 setaddr :layoutThoriumDrillAtLocation*retaddr *label191 (h:*label191)
  1073 call *label19 *invalid :layoutThoriumDrillAtLocation*retval (m:*label191) (h:*label191)
  1074 label *label191
 
  1082 set .mapTotal 0
  1083 set .mapProgress 0
  1084 ucontrol unbind
-    * label *label192
  1085 set :stopLocation*finished true
  1086 jump *label22 always
  1087 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-11 instructions):
 
   100 op sub *tmp64 :locateOreAway:y *tmp45
   101 op len :locateOreAway:unitDist *tmp63 *tmp64
   102 jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label46 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label34 always
+  103 jump *label34 equal :locateOreAway:lastY :locateOreAway:y
   104 label *label46
   105 label *label44
   106 jump *label48 lessThan :locateOreAway:coreDist 8
 
   183 op sub *tmp116 :findDrillLocation:newY :findDrillLocation:y
   184 op abs *tmp117 *tmp116
   185 op max :findDrillLocation:coreDist *tmp115 *tmp117
-    * jump *label73 greaterThan :findDrillLocation:coreDist 8
-    * jump *label71 always
+  186 jump *label71 lessThanEq :findDrillLocation:coreDist 8
   187 label *label73
   188 jump *label75 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
   189 set :findDrillLocation:dx :findDrillLocation:newX
 
   212 set :findDrillLocation:bestY :findDrillLocation:newY
   213 set :findDrillLocation:best :findDrillLocation:score
   214 label *label82
-    * jump *label84 greaterThan :findDrillLocation:score :findDrillLocation:last
-    * jump *label71 always
+  215 jump *label71 lessThanEq :findDrillLocation:score :findDrillLocation:last
   216 label *label84
   217 set :findDrillLocation:last :findDrillLocation:score
   218 op mul :round:x :findDrillLocation:diffX 1.1
 
   264 op shl *tmp203 1 :excludeArea:blockSizeX
   265 op sub :createMatrixOfSize:row *tmp203 1
   266 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * jump *label227 lessThan 1 :excludeArea:blockSizeY
-    * jump *label106 always
+  267 jump *label106 greaterThanEq 1 :excludeArea:blockSizeY
   268 label *label227
   269 op shl *tmp207 :createMatrixOfSize:row 7
   270 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label231 lessThan 2 :excludeArea:blockSizeY
-    * jump *label106 always
+  271 jump *label106 greaterThanEq 2 :excludeArea:blockSizeY
   272 label *label231
   273 op shl *tmp207 :createMatrixOfSize:matrix 7
   274 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label235 lessThan 3 :excludeArea:blockSizeY
-    * jump *label106 always
+  275 jump *label106 greaterThanEq 3 :excludeArea:blockSizeY
   276 label *label235
   277 op shl *tmp207 :createMatrixOfSize:matrix 7
   278 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label239 lessThan 4 :excludeArea:blockSizeY
-    * jump *label106 always
+  279 jump *label106 greaterThanEq 4 :excludeArea:blockSizeY
   280 label *label239
   281 op shl *tmp207 :createMatrixOfSize:matrix 7
   282 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label243 lessThan 5 :excludeArea:blockSizeY
-    * jump *label106 always
+  283 jump *label106 greaterThanEq 5 :excludeArea:blockSizeY
   284 label *label243
   285 op shl *tmp207 :createMatrixOfSize:matrix 7
   286 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label247 lessThan 6 :excludeArea:blockSizeY
-    * jump *label106 always
+  287 jump *label106 greaterThanEq 6 :excludeArea:blockSizeY
   288 label *label247
   289 op shl *tmp207 :createMatrixOfSize:matrix 7
   290 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
 
   357 jump *label110 always
   358 label *label117
   359 op sub *tmp225 3 :findPossiblePlacement:width
-    * jump *label119 lessThanEq :findPossiblePlacement:x *tmp225
-    * jump *label116 always
+  360 jump *label116 greaterThan :findPossiblePlacement:x *tmp225
   361 label *label119
   362 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   363 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   364 jump *label201 lessThanEq :findPossiblePlacement:x 3
   365 label *label116
   366 op sub *tmp228 3 :findPossiblePlacement:height
-    * jump *label121 lessThanEq :findPossiblePlacement:y *tmp228
-    * jump *label113 always
+  367 jump *label113 greaterThan :findPossiblePlacement:y *tmp228
   368 label *label121
   369 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   370 jump *label200 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   101 op len :locateOreAway:unitDist *tmp63 *tmp64
   102 jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x
   103 jump *label34 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label46
   104 label *label44
   105 jump *label48 lessThan :locateOreAway:coreDist 8
   106 jump *label50 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   183 op abs *tmp117 *tmp116
   184 op max :findDrillLocation:coreDist *tmp115 *tmp117
   185 jump *label71 lessThanEq :findDrillLocation:coreDist 8
-    * label *label73
   186 jump *label75 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
   187 set :findDrillLocation:dx :findDrillLocation:newX
   188 set :findDrillLocation:dy :findDrillLocation:newY
 
   211 set :findDrillLocation:best :findDrillLocation:score
   212 label *label82
   213 jump *label71 lessThanEq :findDrillLocation:score :findDrillLocation:last
-    * label *label84
   214 set :findDrillLocation:last :findDrillLocation:score
   215 op mul :round:x :findDrillLocation:diffX 1.1
   216 op add *tmp143 :round:x 0.5
 
   262 op sub :createMatrixOfSize:row *tmp203 1
   263 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   264 jump *label106 greaterThanEq 1 :excludeArea:blockSizeY
-    * label *label227
   265 op shl *tmp207 :createMatrixOfSize:row 7
   266 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   267 jump *label106 greaterThanEq 2 :excludeArea:blockSizeY
-    * label *label231
   268 op shl *tmp207 :createMatrixOfSize:matrix 7
   269 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   270 jump *label106 greaterThanEq 3 :excludeArea:blockSizeY
-    * label *label235
   271 op shl *tmp207 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   273 jump *label106 greaterThanEq 4 :excludeArea:blockSizeY
-    * label *label239
   274 op shl *tmp207 :createMatrixOfSize:matrix 7
   275 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   276 jump *label106 greaterThanEq 5 :excludeArea:blockSizeY
-    * label *label243
   277 op shl *tmp207 :createMatrixOfSize:matrix 7
   278 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   279 jump *label106 greaterThanEq 6 :excludeArea:blockSizeY
-    * label *label247
   280 op shl *tmp207 :createMatrixOfSize:matrix 7
   281 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   282 label *label106
 
   349 label *label117
   350 op sub *tmp225 3 :findPossiblePlacement:width
   351 jump *label116 greaterThan :findPossiblePlacement:x *tmp225
-    * label *label119
   352 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   353 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   354 jump *label201 lessThanEq :findPossiblePlacement:x 3
   355 label *label116
   356 op sub *tmp228 3 :findPossiblePlacement:height
   357 jump *label113 greaterThan :findPossiblePlacement:y *tmp228
-    * label *label121
   358 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   359 jump *label200 lessThanEq :findPossiblePlacement:y 3
   360 label *label113

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   222 op add :findDrillLocation:oreY :findDrillLocation:oreY *tmp146
   223 jump *label69 always
   224 label *label71
-    * jump *label88 lessThan :findDrillLocation:best 0
+  225 jump *label29 lessThan :findDrillLocation:best 0
   226 op add .count .count 1
   227 sensor *tmp153 :findDrillLocation:item @id
   228 write *tmp153 bank1 .count
 
   322 set :shiftMask*retval :shiftMask:mask
   323 label *label283
   324 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
-    * jump *label100 always
-    * jump *label102 always
+  325 return :excludeArea*retaddr
+  326 return :excludeArea*retaddr
   327 label *label101
   328 set :excludeArea*retval :excludeArea:mask
   329 label *label102
 
   345 op mul *tmp222 :findPossiblePlacement:y 7
   346 op add *tmp223 24 *tmp222
   347 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
-    * jump *label110 always
+  348 return :findPossiblePlacement*retaddr
   349 label *label117
   350 op sub *tmp225 3 :findPossiblePlacement:width
   351 jump *label116 greaterThan :findPossiblePlacement:x *tmp225
 
   373 jump *label125 lessThan :findPossiblePlacement*retval 0
   374 jump *label127 greaterThanEq :findPossiblePlacement*retval 0
   375 set :tryPlaceGenerator*retval false
-    * jump *label123 always
+  376 return :tryPlaceGenerator*retaddr
   377 label *label127
   378 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   379 op add .water2X *tmp236 :findPossiblePlacement:x
 
   395 label *label129
   396 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   397 set :tryPlaceGenerator*retval false
-    * jump *label123 always
+  398 return :tryPlaceGenerator*retaddr
   399 label *label130
   400 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   401 op add .water2X *tmp248 :findPossiblePlacement:x
 
   417 label *label132
   418 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   419 set :tryPlaceGenerator*retval false
-    * jump *label123 always
+  420 return :tryPlaceGenerator*retaddr
   421 label *label133
   422 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   423 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   432 label *label135
   433 jump *label136 greaterThanEq :findPossiblePlacement*retval 0
   434 set :tryPlaceGenerator*retval false
-    * jump *label123 always
+  435 return :tryPlaceGenerator*retaddr
   436 label *label136
   437 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   438 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   467 label *label140
   468 jump *label141 greaterThanEq :findPossiblePlacement*retval 0
   469 set :tryPlaceGenerator*retval false
-    * jump *label123 always
+  470 return :tryPlaceGenerator*retaddr
   471 label *label141
   472 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   473 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   474 label *label138
   475 set :tryPlaceGenerator*retval true
-    * jump *label123 always
+  476 return :tryPlaceGenerator*retaddr
   477 label *label123
   478 return :tryPlaceGenerator*retaddr
   479 end
 
   927 label *label169
   928 jump *label170 greaterThanEq :findPossiblePlacement*retval 0
   929 set :layoutThoriumDrillAtLocation*retval false
-    * jump *label157 always
+  930 return :layoutThoriumDrillAtLocation*retaddr
   931 label *label170
   932 op add .node1X .drillX :findPossiblePlacement:x
   933 op add .node1Y .drillY :findPossiblePlacement:y
 
   945 label *label172
   946 jump *label173 equal :tryPlaceGenerator*retval false
   947 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label157 always
+  948 return :layoutThoriumDrillAtLocation*retaddr
   949 label *label173
   950 set :layoutThoriumDrillAtLocation:sx 3
   951 set :layoutThoriumDrillAtLocation:sy 3
 
  1022 label *label184
  1023 jump *label185 equal :tryPlaceGenerator*retval false
  1024 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label157 always
+ 1025 return :layoutThoriumDrillAtLocation*retaddr
  1026 label *label185
  1027 multijump *tmp355 0 0 (m:marker0)
  1028 multilabel *label181 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-14 instructions):
 
    12 label *label22
    13 wait 1e12
    14 jump *label22 always
-    * end
    15 label *label4
    16 setaddr :findDrillLocation*retaddr *label22
    17 label *label5
 
   232 op add .count .count 1
   233 write :findDrillLocation:bestY bank1 .count
   234 op add .locations .locations 1
-    * label *label88
   235 jump *label29 always
-    * set .searchFinished true
-    * set :findDrillLocation*retval false
   236 label *label23
   237 set :findDrillLocation*finished true
   238 return :findDrillLocation*retaddr
-    * end
   239 label *label14
   240 op add *tmp185 :excludeArea:areaWidth 8
   241 op idiv *tmp186 *tmp185 2
 
   318 label *label283
   319 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   320 return :excludeArea*retaddr
-    * return :excludeArea*retaddr
   321 label *label101
   322 set :excludeArea*retval :excludeArea:mask
-    * label *label102
-    * label *label100
   323 return :excludeArea*retaddr
-    * end
   324 label *label15
   325 set :findPossiblePlacement:y -3
   326 jump *label113 greaterThan :findPossiblePlacement:y 3
 
   350 jump *label200 lessThanEq :findPossiblePlacement:y 3
   351 label *label113
   352 set :findPossiblePlacement*retval -1
-    * label *label110
   353 return :findPossiblePlacement*retaddr
-    * end
   354 label *label16
   355 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   356 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
 
   463 label *label138
   464 set :tryPlaceGenerator*retval true
   465 return :tryPlaceGenerator*retaddr
-    * label *label123
-    * return :tryPlaceGenerator*retaddr
-    * end
   466 label *label17
   467 op add *tmp296 :createBlockMaskRow:x 4
   468 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
 
   498 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   499 op or :createBlockMaskRow*retval *tmp295 *tmp297
   500 return :createBlockMaskRow*retaddr
-    * end
   501 label *label18
   502 write @unit processor4 ":createTerrainMask:unit"
   503 write :createCombinedMask:x processor4 ":createTerrainMask:x"
 
   844 label *label156
   845 set :createCombinedMask*retval :excludeArea*retval
   846 return :createCombinedMask*retaddr
-    * end
   847 label *label19
   848 set .panelY -1
   849 set .panelX -1
 
  1011 multijump *tmp355 0 0 (m:marker0)
  1012 multilabel *label181 (m:marker0)
  1013 set :layoutThoriumDrillAtLocation*retval true
-    * label *label157
  1014 return :layoutThoriumDrillAtLocation*retaddr
-    * end
  1015 label *label6
  1016 set :findDrillLocation:x :layoutThoriumDrill:x
  1017 set :findDrillLocation:y :layoutThoriumDrill:y
 
  1036 label *label187
  1037 set :layoutThoriumDrill*finished true
  1038 jump *label22 always
-    * end
  1039 label *label8
  1040 set .mapSpots 0
  1041 set .mapTotal 0
 
  1043 ucontrol unbind
  1044 set :stopLocation*finished true
  1045 jump *label22 always
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    85 op add .angle .angle *tmp51
    86 op mul .mapProgress .angle .angle
    87 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :findDrillLocation:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+   88 ulocate ore core true :findDrillLocation:item :locateOreAway:x :locateOreAway:y *tmp54 0
    89 jump *label42 notEqual *tmp54 false
    90 set *tmp28 false
    91 jump *label32 always
 
   465 return :tryPlaceGenerator*retaddr
   466 label *label17
   467 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  468 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   469 op shl *tmp295 :createBlockMaskRow:result 1
   470 op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  471 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   472 op or :createBlockMaskRow:result *tmp295 *tmp297
   473 op shl *tmp295 :createBlockMaskRow:result 1
   474 op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  475 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   476 op or :createBlockMaskRow:result *tmp295 *tmp297
   477 op shl *tmp295 :createBlockMaskRow:result 1
   478 op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  479 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   480 op or :createBlockMaskRow:result *tmp295 *tmp297
   481 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  482 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp297 0
   483 op or :createBlockMaskRow:result *tmp295 *tmp297
   484 op shl *tmp295 :createBlockMaskRow:result 1
   485 op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  486 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   487 op or :createBlockMaskRow:result *tmp295 *tmp297
   488 op shl *tmp295 :createBlockMaskRow:result 1
   489 op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  490 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   491 op or :createBlockMaskRow:result *tmp295 *tmp297
   492 op shl *tmp295 :createBlockMaskRow:result 1
   493 op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  494 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   495 op or :createBlockMaskRow:result *tmp295 *tmp297
   496 op shl *tmp295 :createBlockMaskRow:result 1
   497 op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  498 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   499 op or :createBlockMaskRow*retval *tmp295 *tmp297
   500 return :createBlockMaskRow*retaddr
   501 label *label18
 
   508 set :createAdjacentMask:y :createCombinedMask:y
   509 op add *tmp305 :createCombinedMask:y 4
   510 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
+  511 ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:result 0
   512 op shl *tmp295 :createBlockMaskRow:result 1
   513 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  514 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   515 op or :createBlockMaskRow:result *tmp295 *tmp297
   516 op shl *tmp295 :createBlockMaskRow:result 1
   517 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  518 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   519 op or :createBlockMaskRow:result *tmp295 *tmp297
   520 op shl *tmp295 :createBlockMaskRow:result 1
   521 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  522 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   523 op or :createBlockMaskRow:result *tmp295 *tmp297
   524 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
+  525 ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0
   526 op or :createBlockMaskRow:result *tmp295 *tmp297
   527 op shl *tmp295 :createBlockMaskRow:result 1
   528 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  529 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   530 op or :createBlockMaskRow:result *tmp295 *tmp297
   531 op shl *tmp295 :createBlockMaskRow:result 1
   532 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  533 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   534 op or :createBlockMaskRow:result *tmp295 *tmp297
   535 op shl *tmp295 :createBlockMaskRow:result 1
   536 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  537 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   538 op or :createBlockMaskRow:result *tmp295 *tmp297
   539 op shl *tmp295 :createBlockMaskRow:result 1
   540 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  541 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   542 op or :createAdjacentMask:row2 *tmp295 *tmp297
   543 op add *tmp307 :createCombinedMask:y 3
   544 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
+  545 ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:result 0
   546 op shl *tmp295 :createBlockMaskRow:result 1
   547 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  548 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   549 op or :createBlockMaskRow:result *tmp295 *tmp297
   550 op shl *tmp295 :createBlockMaskRow:result 1
   551 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  552 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   553 op or :createBlockMaskRow:result *tmp295 *tmp297
   554 op shl *tmp295 :createBlockMaskRow:result 1
   555 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  556 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   557 op or :createBlockMaskRow:result *tmp295 *tmp297
   558 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
+  559 ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0
   560 op or :createBlockMaskRow:result *tmp295 *tmp297
   561 op shl *tmp295 :createBlockMaskRow:result 1
   562 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  563 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   564 op or :createBlockMaskRow:result *tmp295 *tmp297
   565 op shl *tmp295 :createBlockMaskRow:result 1
   566 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  567 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   568 op or :createBlockMaskRow:result *tmp295 *tmp297
   569 op shl *tmp295 :createBlockMaskRow:result 1
   570 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  571 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   572 op or :createBlockMaskRow:result *tmp295 *tmp297
   573 op shl *tmp295 :createBlockMaskRow:result 1
   574 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  575 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   576 op or :createAdjacentMask:row1 *tmp295 *tmp297
   577 op add *tmp309 :createCombinedMask:y 2
   578 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  579 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   580 op shl *tmp295 :createBlockMaskRow:result 1
   581 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  582 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   583 op or :createBlockMaskRow:result *tmp295 *tmp297
   584 op shl *tmp295 :createBlockMaskRow:result 1
   585 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  586 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   587 op or :createBlockMaskRow:result *tmp295 *tmp297
   588 op shl *tmp295 :createBlockMaskRow:result 1
   589 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  590 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   591 op or :createBlockMaskRow:result *tmp295 *tmp297
   592 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  593 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   594 op or :createBlockMaskRow:result *tmp295 *tmp297
   595 op shl *tmp295 :createBlockMaskRow:result 1
   596 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  597 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   598 op or :createBlockMaskRow:result *tmp295 *tmp297
   599 op shl *tmp295 :createBlockMaskRow:result 1
   600 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  601 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   602 op or :createBlockMaskRow:result *tmp295 *tmp297
   603 op shl *tmp295 :createBlockMaskRow:result 1
   604 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  605 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   606 op or :createBlockMaskRow:result *tmp295 *tmp297
   607 op shl *tmp295 :createBlockMaskRow:result 1
   608 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  609 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   610 op or :createBlockMaskRow:result *tmp295 *tmp297
   611 op shl *tmp311 :createAdjacentMask:row1 1
   612 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   618 set :createAdjacentMask:row1 :createBlockMaskRow:result
   619 op add *tmp309 :createCombinedMask:y 1
   620 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  621 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   622 op shl *tmp295 :createBlockMaskRow:result 1
   623 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  624 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   625 op or :createBlockMaskRow:result *tmp295 *tmp297
   626 op shl *tmp295 :createBlockMaskRow:result 1
   627 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  628 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   629 op or :createBlockMaskRow:result *tmp295 *tmp297
   630 op shl *tmp295 :createBlockMaskRow:result 1
   631 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  632 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   633 op or :createBlockMaskRow:result *tmp295 *tmp297
   634 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  635 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   636 op or :createBlockMaskRow:result *tmp295 *tmp297
   637 op shl *tmp295 :createBlockMaskRow:result 1
   638 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  639 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   640 op or :createBlockMaskRow:result *tmp295 *tmp297
   641 op shl *tmp295 :createBlockMaskRow:result 1
   642 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  643 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   644 op or :createBlockMaskRow:result *tmp295 *tmp297
   645 op shl *tmp295 :createBlockMaskRow:result 1
   646 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  647 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   648 op or :createBlockMaskRow:result *tmp295 *tmp297
   649 op shl *tmp295 :createBlockMaskRow:result 1
   650 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  651 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   652 op or :createBlockMaskRow:result *tmp295 *tmp297
   653 op shl *tmp311 :createAdjacentMask:row1 1
   654 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   661 set :createAdjacentMask:row2 :createAdjacentMask:row1
   662 set :createAdjacentMask:row1 :createBlockMaskRow:result
   663 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
+  664 ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   665 op shl *tmp295 :createBlockMaskRow:result 1
   666 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  667 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   668 op or :createBlockMaskRow:result *tmp295 *tmp297
   669 op shl *tmp295 :createBlockMaskRow:result 1
   670 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  671 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   672 op or :createBlockMaskRow:result *tmp295 *tmp297
   673 op shl *tmp295 :createBlockMaskRow:result 1
   674 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  675 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   676 op or :createBlockMaskRow:result *tmp295 *tmp297
   677 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  678 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp297 0
   679 op or :createBlockMaskRow:result *tmp295 *tmp297
   680 op shl *tmp295 :createBlockMaskRow:result 1
   681 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  682 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   683 op or :createBlockMaskRow:result *tmp295 *tmp297
   684 op shl *tmp295 :createBlockMaskRow:result 1
   685 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  686 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   687 op or :createBlockMaskRow:result *tmp295 *tmp297
   688 op shl *tmp295 :createBlockMaskRow:result 1
   689 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  690 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   691 op or :createBlockMaskRow:result *tmp295 *tmp297
   692 op shl *tmp295 :createBlockMaskRow:result 1
   693 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  694 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   695 op or :createBlockMaskRow:result *tmp295 *tmp297
   696 op shl *tmp311 :createAdjacentMask:row1 1
   697 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   705 set :createAdjacentMask:row1 :createBlockMaskRow:result
   706 op add *tmp309 :createCombinedMask:y -1
   707 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  708 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   709 op shl *tmp295 :createBlockMaskRow:result 1
   710 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  711 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   712 op or :createBlockMaskRow:result *tmp295 *tmp297
   713 op shl *tmp295 :createBlockMaskRow:result 1
   714 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  715 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   716 op or :createBlockMaskRow:result *tmp295 *tmp297
   717 op shl *tmp295 :createBlockMaskRow:result 1
   718 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  719 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   720 op or :createBlockMaskRow:result *tmp295 *tmp297
   721 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  722 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   723 op or :createBlockMaskRow:result *tmp295 *tmp297
   724 op shl *tmp295 :createBlockMaskRow:result 1
   725 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  726 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   727 op or :createBlockMaskRow:result *tmp295 *tmp297
   728 op shl *tmp295 :createBlockMaskRow:result 1
   729 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  730 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   731 op or :createBlockMaskRow:result *tmp295 *tmp297
   732 op shl *tmp295 :createBlockMaskRow:result 1
   733 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  734 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   735 op or :createBlockMaskRow:result *tmp295 *tmp297
   736 op shl *tmp295 :createBlockMaskRow:result 1
   737 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  738 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   739 op or :createBlockMaskRow:result *tmp295 *tmp297
   740 op shl *tmp311 :createAdjacentMask:row1 1
   741 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   749 set :createAdjacentMask:row1 :createBlockMaskRow:result
   750 op add :createBlockMaskRow:y :createCombinedMask:y -2
   751 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  752 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   753 op shl *tmp295 :createBlockMaskRow:result 1
   754 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  755 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   756 op or :createBlockMaskRow:result *tmp295 *tmp297
   757 op shl *tmp295 :createBlockMaskRow:result 1
   758 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  759 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   760 op or :createBlockMaskRow:result *tmp295 *tmp297
   761 op shl *tmp295 :createBlockMaskRow:result 1
   762 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  763 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   764 op or :createBlockMaskRow:result *tmp295 *tmp297
   765 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  766 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp297 0
   767 op or :createBlockMaskRow:result *tmp295 *tmp297
   768 op shl *tmp295 :createBlockMaskRow:result 1
   769 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  770 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   771 op or :createBlockMaskRow:result *tmp295 *tmp297
   772 op shl *tmp295 :createBlockMaskRow:result 1
   773 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  774 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   775 op or :createBlockMaskRow:result *tmp295 *tmp297
   776 op shl *tmp295 :createBlockMaskRow:result 1
   777 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  778 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   779 op or :createBlockMaskRow:result *tmp295 *tmp297
   780 op shl *tmp295 :createBlockMaskRow:result 1
   781 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  782 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   783 op or :createBlockMaskRow*retval *tmp295 *tmp297
   784 op shl *tmp311 :createAdjacentMask:row1 1
   785 op or *tmp312 :createAdjacentMask:row2 *tmp311

Final code before resolving virtual instructions:

    0:  jump *label20 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label4 always 0 0                                      ...
    2:  jump *label6 always 0 0                                      ...
    3:  jump *label8 always 0 0                                      ...
        label *label20                                               ...
        label *label21                                               OreLocator.mnd: require "Matrices.mnd" remote matrices;
    4:  read *tmp11 processor4 "*signature"                          ...
    5:  jump *label21 notEqual *tmp11 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label22                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label22 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  setaddr :findDrillLocation*retaddr *label22                  ...
        label *label5                                                ...
   13:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
   14:  ubind :findDrillLocation:unit                                OreLocator.mnd: ubind(unit);
   15:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   16:  set .coreX :findDrillLocation:x                              OreLocator.mnd: coreX = x;
   17:  set .coreY :findDrillLocation:y                              OreLocator.mnd: coreY = y;
   18:  set :findDrillLocation:capacity 0                            OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   19:  set :findDrillLocation:dy :findDrillLocation:capacity        ...
   20:  set :findDrillLocation:dx :findDrillLocation:dy              ...
   21:  set .mapSpots :findDrillLocation:dx                          ...
   22:  op sub *tmp13 @mapw :findDrillLocation:x                     OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   23:  op sub *tmp14 @maph :findDrillLocation:y                     ...
   24:  op max *tmp15 :findDrillLocation:x :findDrillLocation:y      ...
   25:  op max *tmp15 *tmp15 *tmp13                                  ...
   26:  op max *tmp15 *tmp15 *tmp14                                  ...
   27:  set :findDrillLocation:distanceLimit *tmp15                  ...
   28:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   29:  set .mapProgress 0                                           ...
   30:  ucontrol within :findDrillLocation:x :findDrillLocation:y 6  OreLocator.mnd: while !within(x, y, radius) do
   31:  jump *label28 notEqual *tmp18 false                          ...
        label *label272                                              ...
   32:  ucontrol approach :findDrillLocation:x :findDrillLocation:y  OreLocator.mnd: approach(x, y, radius - 0.5);
   33:  ucontrol within :findDrillLocation:x :findDrillLocation:y 6  OreLocator.mnd: while !within(x, y, radius) do
   34:  jump *label272 equal *tmp18 false                            ...
        label *label28                                               ...
   35:  op div *tmp21 *tmp15 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   36:  op pow .mapTotal *tmp21 2                                    ...
   37:  set :findDrillLocation:oreX 0                                OreLocator.mnd: var oreX = 0, oreY = 0;
   38:  set :findDrillLocation:oreY 0                                ...
        label *label29                                               OreLocator.mnd: while true do
   39:  set :findDrillLocation:best -1                               OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   40:  set :findDrillLocation:bestX :findDrillLocation:x            ...
   41:  set :findDrillLocation:bestY :findDrillLocation:y            ...
   42:  op sub *tmp23 :findDrillLocation:limit :findDrillLocation:ca OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   43:  op mul :findDrillLocation:maxDistance *tmp23 .attenuationRat ...
   44:  op min :findDrillLocation:distanceLimit :findDrillLocation:d OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   45:  op div *tmp26 :findDrillLocation:distanceLimit 3.81971852791 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   46:  op pow .mapTotal *tmp26 2                                    ...
   47:  set :locateOreAway:x :findDrillLocation:oreX                 OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   48:  set :locateOreAway:y :findDrillLocation:oreY                 ...
   49:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   50:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   51:  set :locateOreAway:lastY -1                                  ...
   52:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   53:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   54:  op sub *tmp37 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   55:  op sub *tmp44 @maph 5                                        ...
   56:  jump *label35 greaterThanEq :locateOreAway:distance :findDri ...
        label *label197                                              ...
   57:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   58:  op sin *tmp34 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   59:  op mul *tmp35 *tmp34 :locateOreAway:distance                 ...
   60:  op add *tmp36 :findDrillLocation:x *tmp35                    ...
   61:  op max *tmp39 *tmp36 5                                       OreLocator.mnd: min(max(value, low), high);
   62:  op min *tmp38 *tmp39 *tmp37                                  ...
   63:  op cos *tmp41 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   64:  op mul *tmp42 *tmp41 :locateOreAway:distance                 ...
   65:  op add *tmp43 :findDrillLocation:y *tmp42                    ...
   66:  op max *tmp46 *tmp43 5                                       OreLocator.mnd: min(max(value, low), high);
   67:  op min *tmp45 *tmp46 *tmp44                                  ...
   68:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   69:  jump *label41 notEqual *tmp48 false                          ...
        label *label204                                              ...
   70:  ucontrol approach *tmp38 *tmp45 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   71:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   72:  jump *label204 equal *tmp48 false                            ...
        label *label41                                               ...
   73:  op div *tmp51 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   74:  op add .angle .angle *tmp51                                  ...
   75:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   76:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   77:  ulocate ore core true :findDrillLocation:item :locateOreAway OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   78:  jump *label42 notEqual *tmp54 false                          ...
   79:  set *tmp28 false                                             OreLocator.mnd: return false;
   80:  jump *label32 always 0 0                                     ...
        label *label42                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   81:  op sub *tmp58 :locateOreAway:x :findDrillLocation:x          OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   82:  op abs *tmp59 *tmp58 0                                       ...
   83:  op sub *tmp60 :locateOreAway:y :findDrillLocation:y          ...
   84:  op abs *tmp61 *tmp60 0                                       ...
   85:  op max :locateOreAway:coreDist *tmp59 *tmp61                 ...
   86:  op sub *tmp63 :locateOreAway:x *tmp38                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   87:  op sub *tmp64 :locateOreAway:y *tmp45                        ...
   88:  op len :locateOreAway:unitDist *tmp63 *tmp64                 ...
   89:  jump *label44 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   90:  jump *label34 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label44                                               ...
   91:  jump *label48 lessThan :locateOreAway:coreDist 8             OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   92:  jump *label50 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   93:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   94:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   95:  set *tmp75 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   96:  set :visited:i .locationsStart                               ...
   97:  jump *label55 greaterThanEq .locationsStart *tmp75           ...
        label *label198                                              ...
   98:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   99:  op add *tmp78 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
  100:  read :visited:lx bank1 *tmp78                                ...
  101:  op add *tmp81 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
  102:  read :visited:ly bank1 *tmp81                                ...
  103:  op sub *tmp83 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  104:  op sub *tmp84 :locateOreAway:y :visited:ly                   ...
  105:  op len *tmp85 *tmp83 *tmp84                                  ...
  106:  jump *label56 greaterThanEq *tmp85 7                         ...
  107:  set *tmp74 true                                              OreLocator.mnd: return true;
  108:  jump *label52 always 0 0                                     ...
        label *label56                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  109:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  110:  jump *label198 lessThan :visited:i *tmp75                    ...
        label *label55                                               ...
  111:  set *tmp74 false                                             OreLocator.mnd: return false;
        label *label52                                               OreLocator.mnd: if !visited(x, y) then
  112:  jump *label58 notEqual *tmp74 false                          ...
  113:  op div *tmp90 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  114:  op add .angle .angle *tmp90                                  ...
  115:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  116:  printflush message1                                          OreLocator.mnd: printflush(message1);
  117:  set *tmp28 true                                              OreLocator.mnd: return true;
  118:  jump *label32 always 0 0                                     ...
        label *label58                                               OreLocator.mnd: if !visited(x, y) then
        label *label50                                               OreLocator.mnd: if unitDist < distance then
        label *label48                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label34                                               OreLocator.mnd: while distance < distanceLimit do
  119:  jump *label197 lessThan :locateOreAway:distance :findDrillLo ...
        label *label35                                               ...
  120:  set *tmp28 false                                             OreLocator.mnd: return false;
        label *label32                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  121:  set :findDrillLocation:oreX :locateOreAway:x                 ...
  122:  set :findDrillLocation:oreY :locateOreAway:y                 ...
  123:  jump *label60 notEqual *tmp28 false                          ...
  124:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  125:  op greaterThan :findDrillLocation*retval :findDrillLocation: OreLocator.mnd: return capacity > 0;
  126:  jump *label23 always 0 0                                     ...
        label *label60                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  127:  jump *label62 lessThan :findDrillLocation:limit 1000         OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  128:  op add .mapSpots .mapSpots 1                                 ...
        label *label62                                               ...
  129:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  130:  jump *label68 notEqual *tmp100 false                         ...
        label *label224                                              ...
  131:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  132:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  133:  jump *label224 equal *tmp100 false                           ...
        label *label68                                               ...
  134:  set :findDrillLocation:last 0                                OreLocator.mnd: var last = 0;
        label *label69                                               OreLocator.mnd: while true do
  135:  write @unit processor4 ":findBestPosition:unit"              OreLocator.mnd: var score = matrices.findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  136:  write :findDrillLocation:oreX processor4 ":findBestPosition: ...
  137:  write :findDrillLocation:oreY processor4 ":findBestPosition: ...
  138:  write :findDrillLocation:ore processor4 ":findBestPosition:o ...
  139:  write :findDrillLocation:size processor4 ":findBestPosition: ...
  140:  write false processor4 ":findBestPosition*finished"          ...
  141:  write 2 processor4 "@counter"                                ...
        label *label72                                               ...
  142:  wait 1e-15                                                   ...
  143:  read *tmp110 processor4 ":findBestPosition*finished"         ...
  144:  jump *label72 equal *tmp110 false                            ...
  145:  read :findDrillLocation:diffX processor4 ":findBestPosition: ...
  146:  read :findDrillLocation:diffY processor4 ":findBestPosition: ...
  147:  read :findDrillLocation:score processor4 ":findBestPosition* ...
  148:  op add :findDrillLocation:newX :findDrillLocation:oreX :find OreLocator.mnd: var newX = oreX + diffX;
  149:  op add :findDrillLocation:newY :findDrillLocation:oreY :find OreLocator.mnd: var newY = oreY + diffY;
  150:  op sub *tmp114 :findDrillLocation:newX :findDrillLocation:x  OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  151:  op abs *tmp115 *tmp114 0                                     ...
  152:  op sub *tmp116 :findDrillLocation:newY :findDrillLocation:y  ...
  153:  op abs *tmp117 *tmp116 0                                     ...
  154:  op max :findDrillLocation:coreDist *tmp115 *tmp117           ...
  155:  jump *label71 lessThanEq :findDrillLocation:coreDist 8       OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  156:  jump *label75 lessThanEq :findDrillLocation:score :findDrill OreLocator.mnd: if score > capacity then
  157:  set :findDrillLocation:dx :findDrillLocation:newX            OreLocator.mnd: dx = newX;
  158:  set :findDrillLocation:dy :findDrillLocation:newY            OreLocator.mnd: dy = newY;
  159:  set :findDrillLocation:capacity :findDrillLocation:score     OreLocator.mnd: capacity = score;
  160:  select .mapSpots lessThan :findDrillLocation:limit 1000 :fin OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  161:  jump *label79 lessThan :findDrillLocation:capacity :findDril OreLocator.mnd: if capacity >= limit then
  162:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  163:  sensor *tmp129 :findDrillLocation:item @id                   ...
  164:  write *tmp129 bank1 .count                                   ...
  165:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  166:  write :findDrillLocation:score bank1 .count                  ...
  167:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  168:  write :findDrillLocation:dx bank1 .count                     ...
  169:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  170:  write :findDrillLocation:dy bank1 .count                     ...
  171:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  172:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  173:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  174:  set :findDrillLocation*retval true                           OreLocator.mnd: return true;
  175:  jump *label23 always 0 0                                     ...
        label *label79                                               OreLocator.mnd: if capacity >= limit then
        label *label75                                               OreLocator.mnd: if score > capacity then
  176:  jump *label82 lessThanEq :findDrillLocation:score :findDrill OreLocator.mnd: if score > best then
  177:  set :findDrillLocation:bestX :findDrillLocation:newX         OreLocator.mnd: bestX = newX;
  178:  set :findDrillLocation:bestY :findDrillLocation:newY         OreLocator.mnd: bestY = newY;
  179:  set :findDrillLocation:best :findDrillLocation:score         OreLocator.mnd: best = score;
        label *label82                                               OreLocator.mnd: if score > best then
  180:  jump *label71 lessThanEq :findDrillLocation:score :findDrill OreLocator.mnd: if score <= last then break; end;
  181:  set :findDrillLocation:last :findDrillLocation:score         OreLocator.mnd: last = score;
  182:  op mul :round:x :findDrillLocation:diffX 1.1                 OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  183:  op add *tmp143 :round:x 0.5                                  *math: floor(x + 0.5);
  184:  op floor *tmp142 *tmp143 0                                   ...
  185:  op add :findDrillLocation:oreX :findDrillLocation:oreX *tmp1 OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  186:  op mul :round.1:x :findDrillLocation:diffY 1.1               OreLocator.mnd: oreY += round(diffY * 1.1);
  187:  op add *tmp147 :round.1:x 0.5                                *math: floor(x + 0.5);
  188:  op floor *tmp146 *tmp147 0                                   ...
  189:  op add :findDrillLocation:oreY :findDrillLocation:oreY *tmp1 OreLocator.mnd: oreY += round(diffY * 1.1);
  190:  jump *label69 always 0 0                                     OreLocator.mnd: while true do
        label *label71                                               ...
  191:  jump *label29 lessThan :findDrillLocation:best 0             OreLocator.mnd: if best >= 0 then
  192:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  193:  sensor *tmp153 :findDrillLocation:item @id                   ...
  194:  write *tmp153 bank1 .count                                   ...
  195:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  196:  write :findDrillLocation:best bank1 .count                   ...
  197:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  198:  write :findDrillLocation:bestX bank1 .count                  ...
  199:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  200:  write :findDrillLocation:bestY bank1 .count                  ...
  201:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  202:  jump *label29 always 0 0                                     OreLocator.mnd: while true do
        label *label23                                               OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  203:  set :findDrillLocation*finished true                         ...
  204:  return :findDrillLocation*retaddr                            ...
        label *label14                                               OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
  205:  op add *tmp185 :excludeArea:areaWidth 8                      OreLocator.mnd: var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
  206:  op idiv *tmp186 *tmp185 2                                    ...
  207:  op sub *tmp187 :excludeArea:maskX :excludeArea:areaX         ...
  208:  op abs *tmp188 *tmp187 0                                     ...
  209:  op sub :excludeArea:overlapX *tmp186 *tmp188                 ...
  210:  op add *tmp191 :excludeArea:areaHeight 8                     OreLocator.mnd: var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);
  211:  op idiv *tmp192 *tmp191 2                                    ...
  212:  op sub *tmp193 :excludeArea:maskY :excludeArea:areaY         ...
  213:  op abs *tmp194 *tmp193 0                                     ...
  214:  op sub :excludeArea:overlapY *tmp192 *tmp194                 ...
  215:  op greaterThan *tmp196 :excludeArea:overlapX 0               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  216:  op greaterThan *tmp197 :excludeArea:overlapY 0               ...
  217:  op land *tmp198 *tmp196 *tmp197                              ...
  218:  jump *label101 equal *tmp198 false                           ...
  219:  op min :excludeArea:blockSizeX 7 :excludeArea:overlapX       OreLocator.mnd: var blockSizeX = min(7, overlapX);
  220:  op min :excludeArea:blockSizeY 7 :excludeArea:overlapY       OreLocator.mnd: var blockSizeY = min(7, overlapY);
  221:  op shl *tmp203 1 :excludeArea:blockSizeX                     OreLocator.mnd: var row = (1 << width) - 1;
  222:  op sub :createMatrixOfSize:row *tmp203 1                     ...
  223:  set :createMatrixOfSize:matrix :createMatrixOfSize:row       OreLocator.mnd: var matrix = row;
  224:  jump *label106 greaterThanEq 1 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  225:  op shl *tmp207 :createMatrixOfSize:row 7                     OreLocator.mnd: matrix = (matrix << 7) | row;
  226:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  227:  jump *label106 greaterThanEq 2 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  228:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  229:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  230:  jump *label106 greaterThanEq 3 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  231:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  232:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  233:  jump *label106 greaterThanEq 4 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  234:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  235:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  236:  jump *label106 greaterThanEq 5 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  237:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  238:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  239:  jump *label106 greaterThanEq 6 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  240:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  241:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
        label *label106                                              OreLocator.mnd: for var i in 1 ... 7 do
  242:  op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX    OreLocator.mnd: var shiftX = (maskX < areaX) * (7 - blockSizeX);
  243:  op sub *tmp210 7 :excludeArea:blockSizeX                     ...
  244:  op mul :excludeArea:shiftX *tmp209 *tmp210                   ...
  245:  op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY    OreLocator.mnd: var shiftY = (maskY < areaY) * (7 - blockSizeY);
  246:  op sub *tmp213 7 :excludeArea:blockSizeY                     ...
  247:  op mul :excludeArea:shiftY *tmp212 *tmp213                   ...
  248:  op abs *tmp161 :excludeArea:shiftX 0                         OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  249:  op greaterThan *tmp162 *tmp161 6                             ...
  250:  op abs *tmp163 :excludeArea:shiftY 0                         ...
  251:  op greaterThan *tmp164 *tmp163 6                             ...
  252:  op or *tmp165 *tmp162 *tmp164                                ...
  253:  jump *label275 equal *tmp165 false                           ...
  254:  set :shiftMask*retval 0                                      ...
  255:  jump *label283 always 0 0                                    ...
        label *label275                                              ...
  256:  op mul *tmp167 7 :excludeArea:shiftY                         OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  257:  op add :shiftMask:shift :excludeArea:shiftX *tmp167          ...
  258:  jump *label277 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  259:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  260:  op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMa OreLocator.mnd: mask = (mask & clearMask) << shift;
  261:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  262:  jump *label278 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label277                                              ...
  263:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  264:  op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174    ...
        label *label278                                              OreLocator.mnd: if shift > 0 then
  265:  jump *label281 equal :excludeArea:shiftX 0                   OreLocator.mnd: if shiftX != 0 then
  266:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  267:  jump *label279 lessThanEq :excludeArea:shiftX 0              OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  268:  op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX   ...
        label *label279                                              ...
  269:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  270:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  271:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  272:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  273:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  274:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  275:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label281                                              OreLocator.mnd: if shiftX != 0 then
  276:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label283                                              OreLocator.mnd: var shifted = shiftMask(blocked, shiftX, shiftY);
  277:  op or :excludeArea*retval :excludeArea:mask :shiftMask*retva OreLocator.mnd: return mask | shifted;
  278:  return :excludeArea*retaddr                                  ...
        label *label101                                              OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  279:  set :excludeArea*retval :excludeArea:mask                    OreLocator.mnd: return mask;
  280:  return :excludeArea*retaddr                                  OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
        label *label15                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  281:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  282:  jump *label113 greaterThan :findPossiblePlacement:y 3        ...
        label *label200                                              ...
  283:  op add *tmp216 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  284:  op mul *tmp217 7 *tmp216                                     ...
  285:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  286:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  287:  jump *label116 greaterThan :findPossiblePlacement:x 3        ...
        label *label201                                              ...
  288:  op and *tmp219 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  289:  jump *label117 notEqual *tmp219 0                            ...
  290:  op mul *tmp222 :findPossiblePlacement:y 7                    ...
  291:  op add *tmp223 24 *tmp222                                    ...
  292:  op add :findPossiblePlacement*retval *tmp223 :findPossiblePl ...
  293:  return :findPossiblePlacement*retaddr                        ...
        label *label117                                              ...
  294:  op sub *tmp225 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  295:  jump *label116 greaterThan :findPossiblePlacement:x *tmp225  ...
  296:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  297:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  298:  jump *label201 lessThanEq :findPossiblePlacement:x 3         ...
        label *label116                                              ...
  299:  op sub *tmp228 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  300:  jump *label113 greaterThan :findPossiblePlacement:y *tmp228  ...
  301:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  302:  jump *label200 lessThanEq :findPossiblePlacement:y 3         ...
        label *label113                                              ...
  303:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  304:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label16                                               OreLocator.mnd: def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
  305:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  306:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  307:  set :findPossiblePlacement:width 2                           ...
  308:  set :findPossiblePlacement:height 4                          ...
  309:  setaddr :findPossiblePlacement*retaddr *label124             ...
  310:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label124                                              ...
  311:  jump *label125 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  312:  jump *label127 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  313:  set :tryPlaceGenerator*retval false                          ...
  314:  return :tryPlaceGenerator*retaddr                            ...
        label *label127                                              ...
  315:  op add *tmp236 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  316:  op add .water2X *tmp236 :findPossiblePlacement:x             ...
  317:  op add *tmp238 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  318:  op add .water2Y *tmp238 :findPossiblePlacement:y             ...
  319:  op add .generatorX *tmp236 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  320:  op add *tmp242 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  321:  op add .generatorY *tmp242 :findPossiblePlacement:y          ...
  322:  op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  323:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  324:  jump *label126 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label125                                              ...
  325:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  326:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  327:  set :findPossiblePlacement:width 4                           ...
  328:  set :findPossiblePlacement:height 2                          ...
  329:  setaddr :findPossiblePlacement*retaddr *label129             ...
  330:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label129                                              ...
  331:  jump *label130 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  332:  set :tryPlaceGenerator*retval false                          ...
  333:  return :tryPlaceGenerator*retaddr                            ...
        label *label130                                              ...
  334:  op add *tmp248 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  335:  op add .water2X *tmp248 :findPossiblePlacement:x             ...
  336:  op add *tmp250 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  337:  op add .water2Y *tmp250 :findPossiblePlacement:y             ...
  338:  op add *tmp252 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  339:  op add .generatorX *tmp252 :findPossiblePlacement:x          ...
  340:  op add .generatorY *tmp250 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  341:  op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  342:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label126                                              OreLocator.mnd: if shift >= 0 then
  343:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr OreLocator.mnd: terrainMask |= createFixedMatrix(
  344:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  345:  set :findPossiblePlacement:placementMask 1                   ...
  346:  set :findPossiblePlacement:width 1                           ...
  347:  set :findPossiblePlacement:height 1                          ...
  348:  setaddr :findPossiblePlacement*retaddr *label132             ...
  349:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label132                                              ...
  350:  jump *label133 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  351:  set :tryPlaceGenerator*retval false                          ...
  352:  return :tryPlaceGenerator*retaddr                            ...
        label *label133                                              ...
  353:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  354:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  355:  op shl *tmp262 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  356:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  357:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  358:  set :findPossiblePlacement:placementMask 1                   ...
  359:  set :findPossiblePlacement:width 1                           ...
  360:  set :findPossiblePlacement:height 1                          ...
  361:  setaddr :findPossiblePlacement*retaddr *label135             ...
  362:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label135                                              ...
  363:  jump *label136 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  364:  set :tryPlaceGenerator*retval false                          ...
  365:  return :tryPlaceGenerator*retaddr                            ...
        label *label136                                              ...
  366:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  367:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  368:  op shl *tmp268 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  369:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  370:  op sub *tmp269 .water2X .node1X                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  371:  op sub *tmp270 .water2Y .node1Y                              ...
  372:  op len *tmp271 *tmp269 *tmp270                               ...
  373:  op greaterThan *tmp272 *tmp271 7                             ...
  374:  op sub *tmp273 .generatorX .node1X                           OreLocator.mnd: or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
  375:  op sub *tmp274 .generatorY .node1Y                           ...
  376:  op len *tmp275 *tmp273 *tmp274                               ...
  377:  op greaterThan *tmp276 *tmp275 7                             ...
  378:  op or *tmp277 *tmp272 *tmp276                                ...
  379:  op sub *tmp278 .panelX .node1X                               OreLocator.mnd: or len(panelX - node1X, panelY - node1Y) > 6
  380:  op sub *tmp279 .panelY .node1Y                               ...
  381:  op len *tmp280 *tmp278 *tmp279                               ...
  382:  op greaterThan *tmp281 *tmp280 6                             ...
  383:  op or *tmp282 *tmp277 *tmp281                                ...
  384:  op sub *tmp283 .batteryX .node1X                             OreLocator.mnd: or len(batteryX - node1X, batteryY - node1Y) > 6
  385:  op sub *tmp284 .batteryY .node1Y                             ...
  386:  op len *tmp285 *tmp283 *tmp284                               ...
  387:  op greaterThan *tmp286 *tmp285 6                             ...
  388:  op or *tmp287 *tmp282 *tmp286                                ...
  389:  jump *label138 equal *tmp287 false                           OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  390:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  391:  set :findPossiblePlacement:placementMask 1                   ...
  392:  set :findPossiblePlacement:width 1                           ...
  393:  set :findPossiblePlacement:height 1                          ...
  394:  setaddr :findPossiblePlacement*retaddr *label140             ...
  395:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label140                                              ...
  396:  jump *label141 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  397:  set :tryPlaceGenerator*retval false                          ...
  398:  return :tryPlaceGenerator*retaddr                            ...
        label *label141                                              ...
  399:  op add .node2X :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: node2X = centerX + c;
  400:  op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: node2Y = centerY + r;
        label *label138                                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  401:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  402:  return :tryPlaceGenerator*retaddr                            ...
        label *label17                                               OreLocator.mnd: def createBlockMaskRow(x, y)
  403:  op add *tmp296 :createBlockMaskRow:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  404:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  405:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  406:  op add *tmp296 :createBlockMaskRow:x 3                       ...
  407:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  408:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  409:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  410:  op add *tmp296 :createBlockMaskRow:x 2                       ...
  411:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  412:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  413:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  414:  op add *tmp296 :createBlockMaskRow:x 1                       ...
  415:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  416:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  417:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  418:  ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow: ...
  419:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  420:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  421:  op add *tmp296 :createBlockMaskRow:x -1                      ...
  422:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  423:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  424:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  425:  op add *tmp296 :createBlockMaskRow:x -2                      ...
  426:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  427:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  428:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  429:  op add *tmp296 :createBlockMaskRow:x -3                      ...
  430:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  431:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  432:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  433:  op add *tmp296 :createBlockMaskRow:x -4                      ...
  434:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  435:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  436:  return :createBlockMaskRow*retaddr                           OreLocator.mnd: def createBlockMaskRow(x, y)
        label *label18                                               OreLocator.mnd: def createCombinedMask(x, y);
  437:  write @unit processor4 ":createTerrainMask:unit"             OreLocator.mnd: async(matrices.createTerrainMask(@unit, x, y));
  438:  write :createCombinedMask:x processor4 ":createTerrainMask:x ...
  439:  write :createCombinedMask:y processor4 ":createTerrainMask:y ...
  440:  write false processor4 ":createTerrainMask*finished"         ...
  441:  write 1 processor4 "@counter"                                ...
  442:  set :createAdjacentMask:x :createCombinedMask:x              OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
  443:  set :createAdjacentMask:y :createCombinedMask:y              ...
  444:  op add *tmp305 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  445:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  446:  ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:resu ...
  447:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  448:  op add *tmp296 :createCombinedMask:x 3                       ...
  449:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  450:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  451:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  452:  op add *tmp296 :createCombinedMask:x 2                       ...
  453:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  454:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  455:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  456:  op add *tmp296 :createCombinedMask:x 1                       ...
  457:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  458:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  459:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  460:  ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0  ...
  461:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  462:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  463:  op add *tmp296 :createCombinedMask:x -1                      ...
  464:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  465:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  466:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  467:  op add *tmp296 :createCombinedMask:x -2                      ...
  468:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  469:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  470:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  471:  op add *tmp296 :createCombinedMask:x -3                      ...
  472:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  473:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  474:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  475:  op add *tmp296 :createCombinedMask:x -4                      ...
  476:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  477:  op or :createAdjacentMask:row2 *tmp295 *tmp297               ...
  478:  op add *tmp307 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  479:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  480:  ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:resu ...
  481:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  482:  op add *tmp296 :createCombinedMask:x 3                       ...
  483:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  484:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  485:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  486:  op add *tmp296 :createCombinedMask:x 2                       ...
  487:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  488:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  489:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  490:  op add *tmp296 :createCombinedMask:x 1                       ...
  491:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  492:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  493:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  494:  ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0  ...
  495:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  496:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  497:  op add *tmp296 :createCombinedMask:x -1                      ...
  498:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  499:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  500:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  501:  op add *tmp296 :createCombinedMask:x -2                      ...
  502:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  503:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  504:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  505:  op add *tmp296 :createCombinedMask:x -3                      ...
  506:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  507:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  508:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  509:  op add *tmp296 :createCombinedMask:x -4                      ...
  510:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  511:  op or :createAdjacentMask:row1 *tmp295 *tmp297               ...
  512:  op add *tmp309 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  513:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  514:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  515:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  516:  op add *tmp296 :createCombinedMask:x 3                       ...
  517:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  518:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  519:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  520:  op add *tmp296 :createCombinedMask:x 2                       ...
  521:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  522:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  523:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  524:  op add *tmp296 :createCombinedMask:x 1                       ...
  525:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  526:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  527:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  528:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  529:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  530:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  531:  op add *tmp296 :createCombinedMask:x -1                      ...
  532:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  533:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  534:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  535:  op add *tmp296 :createCombinedMask:x -2                      ...
  536:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  537:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  538:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  539:  op add *tmp296 :createCombinedMask:x -3                      ...
  540:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  541:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  542:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  543:  op add *tmp296 :createCombinedMask:x -4                      ...
  544:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  545:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  546:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  547:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  548:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  549:  op or *tmp314 *tmp312 *tmp313                                ...
  550:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  551:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  552:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  553:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  554:  op add *tmp309 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  555:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  556:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  557:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  558:  op add *tmp296 :createCombinedMask:x 3                       ...
  559:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  560:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  561:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  562:  op add *tmp296 :createCombinedMask:x 2                       ...
  563:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  564:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  565:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  566:  op add *tmp296 :createCombinedMask:x 1                       ...
  567:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  568:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  569:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  570:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  571:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  572:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  573:  op add *tmp296 :createCombinedMask:x -1                      ...
  574:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  575:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  576:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  577:  op add *tmp296 :createCombinedMask:x -2                      ...
  578:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  579:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  580:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  581:  op add *tmp296 :createCombinedMask:x -3                      ...
  582:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  583:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  584:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  585:  op add *tmp296 :createCombinedMask:x -4                      ...
  586:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  587:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  588:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  589:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  590:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  591:  op or *tmp314 *tmp312 *tmp313                                ...
  592:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  593:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  594:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  595:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  596:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  597:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  598:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  599:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlo ...
  600:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  601:  op add *tmp296 :createCombinedMask:x 3                       ...
  602:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  603:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  604:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  605:  op add *tmp296 :createCombinedMask:x 2                       ...
  606:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  607:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  608:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  609:  op add *tmp296 :createCombinedMask:x 1                       ...
  610:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  611:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  612:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  613:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  614:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  615:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  616:  op add *tmp296 :createCombinedMask:x -1                      ...
  617:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  618:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  619:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  620:  op add *tmp296 :createCombinedMask:x -2                      ...
  621:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  622:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  623:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  624:  op add *tmp296 :createCombinedMask:x -3                      ...
  625:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  626:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  627:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  628:  op add *tmp296 :createCombinedMask:x -4                      ...
  629:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  630:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  631:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  632:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  633:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  634:  op or *tmp314 *tmp312 *tmp313                                ...
  635:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  636:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  637:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  638:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  639:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  640:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  641:  op add *tmp309 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  642:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  643:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  644:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  645:  op add *tmp296 :createCombinedMask:x 3                       ...
  646:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  647:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  648:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  649:  op add *tmp296 :createCombinedMask:x 2                       ...
  650:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  651:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  652:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  653:  op add *tmp296 :createCombinedMask:x 1                       ...
  654:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  655:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  656:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  657:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  658:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  659:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  660:  op add *tmp296 :createCombinedMask:x -1                      ...
  661:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  662:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  663:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  664:  op add *tmp296 :createCombinedMask:x -2                      ...
  665:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  666:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  667:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  668:  op add *tmp296 :createCombinedMask:x -3                      ...
  669:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  670:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  671:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  672:  op add *tmp296 :createCombinedMask:x -4                      ...
  673:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  674:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  675:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  676:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  677:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  678:  op or *tmp314 *tmp312 *tmp313                                ...
  679:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  680:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  681:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  682:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  683:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  684:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  685:  op add :createBlockMaskRow:y :createCombinedMask:y -2        OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  686:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  687:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  688:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  689:  op add *tmp296 :createCombinedMask:x 3                       ...
  690:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  691:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  692:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  693:  op add *tmp296 :createCombinedMask:x 2                       ...
  694:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  695:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  696:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  697:  op add *tmp296 :createCombinedMask:x 1                       ...
  698:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  699:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  700:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  701:  ucontrol getBlock :createCombinedMask:x :createBlockMaskRow: ...
  702:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  703:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  704:  op add *tmp296 :createCombinedMask:x -1                      ...
  705:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  706:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  707:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  708:  op add *tmp296 :createCombinedMask:x -2                      ...
  709:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  710:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  711:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  712:  op add *tmp296 :createCombinedMask:x -3                      ...
  713:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  714:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  715:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  716:  op add *tmp296 :createCombinedMask:x -4                      ...
  717:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  718:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  719:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  720:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  721:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  722:  op or *tmp314 *tmp312 *tmp313                                ...
  723:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  724:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  725:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  726:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  727:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  728:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  729:  op sub :createAdjacentMask:r -2 1                            OreLocator.mnd: for var r in -4 .. 2 descending do
  730:  op add *tmp309 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  731:  set :createBlockMaskRow:x :createCombinedMask:x              ...
  732:  set :createBlockMaskRow:y *tmp309                            ...
  733:  setaddr :createBlockMaskRow*retaddr *label267                ...
  734:  call *label17 *invalid :createBlockMaskRow*retval            ...
        label *label267                                              ...
  735:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  736:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  737:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  738:  op or *tmp314 *tmp312 *tmp313                                ...
  739:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  740:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  741:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  742:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  743:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  744:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  745:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  746:  op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r   OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  747:  set :createBlockMaskRow:x :createAdjacentMask:x              ...
  748:  set :createBlockMaskRow:y *tmp309                            ...
  749:  setaddr :createBlockMaskRow*retaddr *label270                ...
  750:  call *label17 *invalid :createBlockMaskRow*retval            ...
        label *label270                                              ...
  751:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  752:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  753:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  754:  op or *tmp314 *tmp312 *tmp313                                ...
  755:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  756:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  757:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  758:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  759:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  760:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  761:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  762:  op shr *tmp304 :createAdjacentMask:result 1                  OreLocator.mnd: result >> 1;
        label *label155                                              OreLocator.mnd: var terrainMask = await(matrices.createTerrainMask);
  763:  wait 1e-15                                                   ...
  764:  read *tmp320 processor4 ":createTerrainMask*finished"        ...
  765:  jump *label155 equal *tmp320 false                           ...
  766:  read :createCombinedMask:terrainMask processor4 ":createTerr ...
  767:  op or :excludeArea:mask *tmp304 :createCombinedMask:terrainM OreLocator.mnd: return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
  768:  set :excludeArea:maskX :createCombinedMask:x                 ...
  769:  set :excludeArea:maskY :createCombinedMask:y                 ...
  770:  set :excludeArea:areaX .coreX                                ...
  771:  set :excludeArea:areaY .coreY                                ...
  772:  set :excludeArea:areaWidth 15                                ...
  773:  set :excludeArea:areaHeight 15                               ...
  774:  setaddr :excludeArea*retaddr *label156                       ...
  775:  call *label14 *invalid :excludeArea*retval                   ...
        label *label156                                              ...
  776:  set :createCombinedMask*retval :excludeArea*retval           ...
  777:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label19                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  778:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  779:  set .panelX -1                                               ...
  780:  set .generatorY -1                                           ...
  781:  set .generatorX -1                                           ...
  782:  set .water2Y -1                                              ...
  783:  set .water2X -1                                              ...
  784:  set .water1Y -1                                              ...
  785:  set .water1X -1                                              ...
  786:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  787:  set :moveTo.5:y .drillY                                      ...
  788:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  789:  jump *label161 notEqual *tmp323 false                        ...
        label *label273                                              ...
  790:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  791:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  792:  jump *label273 equal *tmp323 false                           ...
        label *label161                                              ...
  793:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  794:  set :createCombinedMask:y .drillY                            ...
  795:  setaddr :createCombinedMask*retaddr *label162                ...
  796:  call *label18 *invalid :createCombinedMask*retval            ...
        label *label162                                              ...
  797:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  798:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  799:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  800:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  801:  set :findPossiblePlacement:placementMask 387                 ...
  802:  set :findPossiblePlacement:width 2                           ...
  803:  set :findPossiblePlacement:height 2                          ...
  804:  setaddr :findPossiblePlacement*retaddr *label163             ...
  805:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label163                                              ...
  806:  jump *label164 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  807:  op add *tmp332 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  808:  op add .water1X *tmp332 :findPossiblePlacement:x             ...
  809:  op add *tmp334 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  810:  op add .water1Y *tmp334 :findPossiblePlacement:y             ...
  811:  op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  812:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  813:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label164                                              OreLocator.mnd: if shift >= 0 then
  814:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  815:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  816:  set :findPossiblePlacement:width 2                           ...
  817:  set :findPossiblePlacement:height 2                          ...
  818:  setaddr :findPossiblePlacement*retaddr *label166             ...
  819:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label166                                              ...
  820:  jump *label167 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  821:  op add *tmp341 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  822:  op add .containerX *tmp341 :findPossiblePlacement:x          ...
  823:  op add *tmp343 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  824:  op add .containerY *tmp343 :findPossiblePlacement:y          ...
  825:  op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  826:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label167                                              OreLocator.mnd: if shift >= 0 then
  827:  op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumD OreLocator.mnd: var nodeMask = terrainMask | createFixedMatrix(
  828:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
  829:  set :findPossiblePlacement:placementMask 1                   ...
  830:  set :findPossiblePlacement:width 1                           ...
  831:  set :findPossiblePlacement:height 1                          ...
  832:  setaddr :findPossiblePlacement*retaddr *label169             ...
  833:  call *label15 *invalid :findPossiblePlacement*retval         ...
        label *label169                                              ...
  834:  jump *label170 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  835:  set :layoutThoriumDrillAtLocation*retval false               ...
  836:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label170                                              ...
  837:  op add .node1X .drillX :findPossiblePlacement:x              OreLocator.mnd: node1X = drillX + c;
  838:  op add .node1Y .drillY :findPossiblePlacement:y              OreLocator.mnd: node1Y = drillY + r;
  839:  op shl *tmp352 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  840:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  841:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  842:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  843:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  844:  set :tryPlaceGenerator:centerY .drillY                       ...
  845:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  846:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  847:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  848:  setaddr :tryPlaceGenerator*retaddr *label172                 ...
  849:  call *label16 *invalid :tryPlaceGenerator*retval             ...
        label *label172                                              ...
  850:  jump *label173 equal :tryPlaceGenerator*retval false         ...
  851:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  852:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label173                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  853:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  854:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  855:  setaddr *tmp355 *label178                                    ...
  856:  jump *label175 always 0 0                                    ...
        multilabel *label178                                         ...
  857:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  858:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  859:  setaddr *tmp355 *label179                                    ...
  860:  jump *label175 always 0 0                                    ...
        multilabel *label179                                         ...
  861:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  862:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  863:  setaddr *tmp355 *label180                                    ...
  864:  jump *label175 always 0 0                                    ...
        multilabel *label180                                         ...
  865:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  866:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  867:  setaddr *tmp355 *label181                                    ...
        label *label175                                              ...
  868:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  869:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  870:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  871:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  872:  setaddr :createCombinedMask*retaddr *label182                ...
  873:  call *label18 *invalid :createCombinedMask*retval            ...
        label *label182                                              ...
  874:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  875:  op abs *tmp161 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  876:  op greaterThan *tmp162 *tmp161 6                             ...
  877:  op abs *tmp163 :layoutThoriumDrillAtLocation:sy 0            ...
  878:  op greaterThan *tmp164 *tmp163 6                             ...
  879:  op or *tmp165 *tmp162 *tmp164                                ...
  880:  jump *label285 equal *tmp165 false                           ...
  881:  set :shiftMask*retval 0                                      ...
  882:  jump *label293 always 0 0                                    ...
        label *label285                                              ...
  883:  op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  884:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  885:  jump *label287 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  886:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  887:  op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  888:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  889:  jump *label288 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label287                                              ...
  890:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  891:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label288                                              OreLocator.mnd: if shift > 0 then
  892:  jump *label291 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  893:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  894:  jump *label289 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  895:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label289                                              ...
  896:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  897:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  898:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  899:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  900:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  901:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  902:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label291                                              OreLocator.mnd: if shiftX != 0 then
  903:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label293                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  904:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  905:  op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  906:  op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy      ...
  907:  set :tryPlaceGenerator:centerX *tmp361                       ...
  908:  set :tryPlaceGenerator:centerY *tmp362                       ...
  909:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  910:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  911:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  912:  setaddr :tryPlaceGenerator*retaddr *label184                 ...
  913:  call *label16 *invalid :tryPlaceGenerator*retval             ...
        label *label184                                              ...
  914:  jump *label185 equal :tryPlaceGenerator*retval false         ...
  915:  set :layoutThoriumDrillAtLocation*retval true                ...
  916:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label185                                              ...
  917:  multijump *tmp355 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label181                                         ...
  918:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  919:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label6                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  920:  set :findDrillLocation:x :layoutThoriumDrill:x               OreLocator.mnd: if !findDrillLocation(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  921:  set :findDrillLocation:y :layoutThoriumDrill:y               ...
  922:  set :findDrillLocation:unit :layoutThoriumDrill:unit         ...
  923:  set :findDrillLocation:item @thorium                         ...
  924:  set :findDrillLocation:ore @ore-thorium                      ...
  925:  set :findDrillLocation:size 3                                ...
  926:  set :findDrillLocation:limit :layoutThoriumDrill:limit       ...
  927:  setaddr :findDrillLocation*retaddr *label188                 ...
  928:  call *label5 *invalid :findDrillLocation*retval              ...
        label *label188                                              ...
  929:  set .drillX :findDrillLocation:dx                            ...
  930:  set .drillY :findDrillLocation:dy                            ...
  931:  jump *label189 notEqual :findDrillLocation*retval false      ...
  932:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  933:  jump *label187 always 0 0                                    ...
        label *label189                                              OreLocator.mnd: if !findDrillLocation(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  934:  setaddr :layoutThoriumDrillAtLocation*retaddr *label191      OreLocator.mnd: layoutThoriumDrillAtLocation();
  935:  call *label19 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label191                                              ...
  936:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label187                                              ...
  937:  set :layoutThoriumDrill*finished true                        ...
  938:  jump *label22 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: remote void stopLocation()
  939:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapSpots = 0;
  940:  set .mapTotal 0                                              ...
  941:  set .mapProgress 0                                           ...
  942:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  943:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  944:  jump *label22 always 0 0                                     ...


Performance: parsed in 488 ms, compiled in 294 ms, optimized in 1,732 ms, run in 10 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp11 processor4 "*signature":
Variable 'processor4' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
