#set target = 8;
#set syntax = strict;
//#set sort-variables;
#set remarks = none;

module OreLocator;

require math;
require "Links.mnd";

const RADIUS =  6;
const MIN_CORE_DIST = 8;
const BASE_SIZE = 15;

require "Matrices.mnd" remote matrices;

// For each attenuationRate multiple of the distance between the unit position on the spiral and the core, the
// requested amount of ore tiles under the drill gets decreased by one (i.e. the farther the unit has to go
// to find the spot, the worse spot gets accepted)
remote var attenuationRate = 50;

noinit remote var mapProgress, mapTotal, mapSpots;
remote var locations = 0;

// Drill infrastructure positions
noinit remote var
    searchFinished,
    drillX, drillY,
    water1X, water1Y,
    containerX, containerY,
    water2X, water2Y,
    generatorX, generatorY,
    node1X, node1Y,
    node2X, node2Y,
    panelX, panelY,
    batteryX, batteryY;

var coreX, coreY;
var count = -1, locationsStart, start;

// Moves the unit to a given distance from the location
inline void moveTo(x, y, radius)
    while !within(x, y, radius) do
        approach(x, y, radius - 0.5);
    end;
end;

// Moves the unit to a mining distance from the location
inline void moveTo(x, y)
    moveTo(x, y, RADIUS);
end;

inline def limit(value, low, high)
    min(max(value, low), high);
end;

// The width of the spiral per rotation
// Also the distance between two stops on the spiral
const SPIRAL_WIDTH = 24 / (2 * @pi);

inline def locateOreAway(ore, in out x, in out y, in distanceLimit)
    var distance = SPIRAL_WIDTH * angle;
    var lastX = -1, lastY = -1;
    angle = max(angle, @pi);
    mapProgress = angle * angle;

    while distance < distanceLimit do
        var a = angle / @degToRad;
        var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
        var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
        moveTo(lx, ly, 5);

        // Compute the next position on the spiral
        angle += SPIRAL_WIDTH / distance;
        mapProgress = angle * angle;
        distance = SPIRAL_WIDTH * angle;

        if !ulocate(:ore, ore, out x, out y) then
            return false;
        end;

        var coreDist = max(abs(x - coreX), abs(y - coreY));
        var unitDist = len(x - lx, y - ly);

        // We can get the same spot repeatedly
//        remark($"x: $x, y: $y, lastX: $lastX, lastY: $lastY\n");
//        debugPause();
        if lastX == x then if lastY == y then continue; end; end;

//        remark($"Distance: ${round(distance)}\n");
//        remark($"Ore: $x, $y; core: $coreX, $coreY\n");
//        remark($"Core dist: $coreDist\n");
//        remark($"Unit dist: ${round(unitDist)}\n");
//        debugPrintSpot("");
//        debugPause();

        if coreDist >= MIN_CORE_DIST then
            if unitDist < distance then
                lastX = x;
                lastY = y;

                if !visited(x, y) then
                    // The spot we've found is probably in the direction of our travel.
                    // Advance two more steps on the spiral
                    angle += 2 * SPIRAL_WIDTH / distance;
                    mapProgress = angle * angle;
                    printflush(message1);
                    return true;
                end;

//                remark("Already visited.");
//                debugPause();
            end;
        end;

    end;

    // Search exhausted
    return false;
end;

var angle;

// Tries to find the best location for given ore, using the given unit.
// x, y: core coordinates
// unit: unit to use (must not be stolen)
// item: item type to search (e.g., @titanium)
// ore: ore type to search (e.g., @ore-titanium)
// large: true fox 3x3 drill, false for 2x2 drill
// limit: if the number of tiles under the drill is equal to this, don't search for better
//        Setting limit to 10 means we'll try it all over the map
// Returns true if something was found
noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
    ubind(unit);

    locationsStart = locations;
    coreX = x;
    coreY = y;

    mapSpots = dx = dy = capacity = 0;

//    var distanceLimit = limit >= 1000
//        ? findMaxOreDistance(item)           // Scanning the whole map
//        : max(coreX, coreY, @mapw - coreX, @maph - coreY);

    var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);

    mapProgress = angle = 0;
    moveTo(coreX, coreY);
    mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;

    var oreX = 0, oreY = 0;

    while true do
        var best = -1, bestX = x, bestY = y;

        // Recompute maximum distance
        var maxDistance = (limit - capacity) * attenuationRate;
        distanceLimit = min(distanceLimit, maxDistance);
        mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;

        if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
            return capacity > 0;
        end;

        if limit >= 1000 then mapSpots++; end;

        moveTo(oreX, oreY);
//        remark($"Found at $oreX, $oreY\n");
//        debugPause();

        var last = 0;
        while true do
            var diffX, diffY;
            var score = matrices.findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
//            remark($"Ore at $oreX, $oreY: score $score, best $best, dx $diffX, dy $diffY\n");
//            debugPause();

            var newX = oreX + diffX;
            var newY = oreY + diffY;
            var coreDist = max(abs(newX - coreX), abs(newY - coreY));
            if coreDist <= MIN_CORE_DIST then break; end;

            // Global best
            if score > capacity then
                dx = newX;
                dy = newY;
                capacity = score;
                if limit < 1000 then mapSpots = score; end;
                if capacity >= limit then
                    saveLocation(item, score, dx, dy);
                    unbind();
                    return true;
                end;
            end;

            if score > best then
                bestX = newX;
                bestY = newY;
                best = score;
//                remark($"Stored best: $best, $bestX, $bestY (last $last)\n");
            end;

            // Did it improve the score since last time?
            // This should also prevent oscillation
            if score <= last then break; end;

            // Center the grid on the new position and try again
            // Repeat for as long as we're finding a better position
            last = score;
            oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
            oreY += round(diffY * 1.1);
        end;

//        remark($"Storing best to memory: $best, $bestX, $bestY\n");

        if best >= 0 then
            saveLocation(item, best, bestX, bestY);
//            debugPrintSpot("");
        end;
    end;
end;

inline def visited(in x, in y)
//    remark($"Testing $x, $y:\n");
    for var i in locationsStart ... locations do
        var index = 4 * i;
        var lx = bank1[index + 2];
        var ly = bank1[index + 3];

//        remark($"Loc $i, ind $index: $lx, $ly\n");

        if len(x - lx, y - ly) < 7 then
//            remark("visited\n");
            return true;
        end;
    end;

//    remark("Not visited\n");
    return false;
end;

inline void saveLocation(item, value, x, y)
//    remark($"Saving spot #${count+1}:\nValue: $value at $x, $y\n");
    bank1[++count] = item.@id;
    bank1[++count] = value;
    bank1[++count] = x;
    bank1[++count] = y;
    locations++;
//    remark($"Locations: $locations");
//    debugPause();
end;

//inline void debugPrintSpot(text)
////    remark("Time: ", round(@second - start), " s\n");
//    var index = 4 * locationsStart;
//    for var i in locationsStart ... locations do
//        // We skipped the first index
//        var size = bank1[++index];
//        var x = bank1[++index];
//        var y = bank1[++index];
//        index++;
////        remark($"$x, $y: $size\n");
//    end;
//    print(text);
//    printflush(message1);
//end;

const FULL_MASK = (1 << 49) - 1;

// Shifts the mask in the given direction
// Makes sure parts of the mask shifted away are properly cleared
def shiftMask(mask, shiftX, shiftY)
    // If shifted all the way, the mask becomes empty
    if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;

    var shift = shiftX + 7 * shiftY;
    if shift > 0 then
        // We might run into precision issues. Need to clear the top part first
        var clearMask = FULL_MASK >> shift;
        mask = (mask & clearMask) << shift;
    else
        mask >>= -shift;
    end;

    // Need to clear columns?
    if shiftX != 0 then
        var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
        if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
        keep |= keep << 7;
        keep |= keep << 14;
        keep |= keep << 21;
        mask &= keep;
    end;

    return mask;
end;

// Excludes a square area centered at areaX, areaY with given dimensions
// (sets the bits in the mask where the area overlaps the mask to 1).
// The area size is expected to be greater than 7 (otherwise a simple shiftMask could be done)
// To exclude an area with an even-sized side, place the center at half tiles (e.g. 22.5, 35,5).
// The mask size is fixed at 7.
noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
    // The size of x overlap
    var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
    var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);

    if overlapX > 0 and overlapY > 0 then
        var blockSizeX = min(7, overlapX);
        var blockSizeY = min(7, overlapY);
        var blocked = createMatrixOfSize(blockSizeX, blockSizeY);
        var shiftX = (maskX < areaX) * (7 - blockSizeX);
        var shiftY = (maskY < areaY) * (7 - blockSizeY);
        var shifted = shiftMask(blocked, shiftX, shiftY);
        return mask | shifted;
    else
        return mask;
    end;
end;

// Could be implemented as a loop, but this is easier on the optimizer
inline def createFixedMatrix(row0, row1, row2, row3, row4, row5, row6)
    row0 << 7 * 0 |
    row1 << 7 * 1 |
    row2 << 7 * 2 |
    row3 << 7 * 3 |
    row4 << 7 * 4 |
    row5 << 7 * 5 |
    row6 << 7 * 6;
end;

inline def createFixedMatrix(row0, row1, row2, row3)
    row0 << 7 * 0 |
    row1 << 7 * 1 |
    row2 << 7 * 2 |
    row3 << 7 * 3;
end;

inline def createFixedMatrix(row0, row1)
    row0 << 7 * 0 |
    row1 << 7 * 1;
end;

// Width and height must be within 1 .. 7
def createMatrixOfSize(width, height)
    var row = (1 << width) - 1;
    var matrix = row;
    // Gets unrolled even for variable height
    for var i in 1 ... 7 do
        if i >= height then break; end;
        matrix = (matrix << 7) | row;
    end;
    return matrix;
end;

// r and c will contain the lower-left corner of the placement mask
// returns the shift applied, or -1 if it doesn't fit
noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
    // May get unrolled, but the loops are large
    for y in -3 .. 3 do
        var mask = placementMask << 7 * (y + 3);
        for x in -3 .. 3 do
//            remark($"Position $x $y\n");
//            printMask("Shifted mask", mask);
//            debugPause();

            if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;

            // We're testing before x gets incremented, thus 6 instead of 7
            if x > 3 - width then break; end;
            mask <<= 1;
        end;
        // We're testing before y gets incremented, thus 6 instead of 7
        if y > 3 - height then break; end;
    end;

    return -1;
end;

def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
    var c, r;

    // Try vertical first for a neater layout
    var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);

    if shift >= 0 then
        if shift < 0 then return false; end;
        water2X = centerX + 0.5 + c;
        water2Y = centerY + 0.5 + r;
        generatorX = centerX + 0.5 + c;
        generatorY = centerY + 2.5 + r;

//        printMask("terrainMask:", terrainMask);

        terrainMask |= (generatorVertical << shift);

//        printMask("generatorVertical:", generatorVertical << shift);
//        remark($"Shift: $shift, r: $r, c: $c\n");
//        remark($"centerX: $centerX, centerY: $centerY\n");
//        remark($"water1X: $water1X, water1Y: $water1Y\n");
//        remark($"water2X: $water2X, water2Y: $water2Y\n");
//        remark($"generatorX: $generatorX, generatorY: $generatorY\n");
//        debugPause();
    else
        shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
        if shift < 0 then return false; end;

        water2X = centerX + 0.5 + c;
        water2Y = centerY + 0.5 + r;
        generatorX = centerX + 2.5 + c;
        generatorY = centerY + 0.5 + r;

//        printMask("terrainMask:", terrainMask);

        terrainMask |= (generatorHorizontal << shift);

//        printMask("generatorHorizontal:", generatorHorizontal << shift);
//        remark($"Shift: $shift, r: $r, c: $c\n");
//        remark($"centerX: $centerX, centerY: $centerY\n");
//        remark($"water1X: $water1X, water1Y: $water1Y\n");
//        remark($"water2X: $water2X, water2Y: $water2Y\n");
//        remark($"generatorX: $generatorX, generatorY: $generatorY\n");
//        debugPause();
    end;

    // What follows is the 1x1 nodes. These must not be placed in corners to ensure the power node
    // always connects to everything in the 7x7 grid.
    terrainMask |= createFixedMatrix(
        0b1100011,
        0b1000001,
        0b0000000,
        0b0000000,
        0b0000000,
        0b1000001,
        0b1100011);

    // If it succeeded, we assume we can squeeze in the battery and solar panel (if required) as well
    // TODO: maybe re-center the position around the middle of the generator combo to get more space
    //       But maybe not? If it fails, we'll try other areas around the drill
    // It's a 1x1 block, so it's mask is `1`
    shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
    if shift < 0 then return false; end;
    panelX = centerX + c;
    panelY = centerY + r;
    terrainMask |= (1 << shift);

    shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
    if shift < 0 then return false; end;
    batteryX = centerX + c;
    batteryY = centerY + r;
    terrainMask |= (1 << shift);

    if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
        or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
        or len(panelX - node1X, panelY - node1Y) > 6
        or len(batteryX - node1X, batteryY - node1Y) > 6
    then
        shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
        if shift < 0 then return false; end;
        node2X = centerX + c;
        node2Y = centerY + r;
        terrainMask |= (1 << shift);
    end;

    return true;
end;

def createBlockMaskRow(x, y)
    var result = 0;
    for var c in -4 .. 4 descending do
        result = (result << 1) | getBlock(x + c, y);
    end;
    return result;
end;

// Creates a mask of tiles adjacent to existing blocks, horizontally or vertically
// This map will not necessarily map tiles occupied by blocks themselves, but that should be
// covered by the terrain mask.
def createAdjacentMask(x, y)
    var result = 0;
    var row2 = createBlockMaskRow(x, y + 4);
    var row1 = createBlockMaskRow(x, y + 3);

    for var r in -4 .. 2 descending do
        var row0 = createBlockMaskRow(x, y + r);
        var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
        result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
        row2 = row1;
        row1 = row0;
    end;

    result >> 1;
end;

// For debug
//volatile var maskX, maskY;
//volatile var adjacentMask;
//volatile var terrainMask;
//volatile var lastUnshiftedMask;
//volatile var lastShiftedMask;
//volatile var lastCombinedMask;

def createCombinedMask(x, y);
    async(matrices.createTerrainMask(@unit, x, y));
//    maskX = x; maskY = y;
    // For debugging, remove the `var` and uncomment the variables
    var adjacentMask = createAdjacentMask(x, y);
    var terrainMask = await(matrices.createTerrainMask);
    return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
end;

noinline def layoutThoriumDrillAtLocation()
    water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;

    // Create a 7x7 matrix around drill center, patch in the drill itself (it's not yet built)
    moveTo(drillX, drillY, 1);
    var plainTerrainMask = createCombinedMask(drillX, drillY);

    var terrainMask = plainTerrainMask | createFixedMatrix(
            0b0000000,
            0b0000000,
            0b0011100,
            0b0011100,
            0b0011100,
            0b0000000,
            0b0000000);

    // Block corners - we want the water extractor to touch the side of the drill
    // The drill is included in the mask for clarity
    var cornersMask = terrainMask | createFixedMatrix(
            0b1000001,
            0b0000000,
            0b0011100,
            0b0011100,
            0b0011100,
            0b0000000,
            0b1000001);

    // The extractor mask
    var mask2x2 = createFixedMatrix(0b11, 0b11);

//    printMask("terrainMask:", terrainMask);
//    printMask("cornersMask:", cornersMask);
//    printMask("mask2x2:", mask2x2);
//    printflush(message1);
//    stopProcessor();

    var r, c;
    var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);

    // When the water extractor can't be built, we'll do without.
    if shift >= 0 then
        // Obtain water extractor position
        water1X = drillX + 0.5 + c;
        water1Y = drillY + 0.5 + r;

        // Add it to the terrain masks
        terrainMask |= (mask2x2 << shift);
        cornersMask |= (mask2x2 << shift);
    end;

    // Secondly, reserve space for a container. The same constrains as for the water extractor apply
    shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
    if shift >= 0 then
        // Obtain water extractor position
        containerX = drillX + 0.5 + c;
        containerY = drillY + 0.5 + r;

        // Add it to the terrain mask
        terrainMask |= (mask2x2 << shift);
    end;

    // What follows is the 1x1 nodes. These must not be placed in corners to ensure the power node
    // always connects to everything in the 7x7 grid.
    var nodeMask = terrainMask | createFixedMatrix(
        0b1100011,
        0b1000001,
        0b0000000,
        0b0000000,
        0b0000000,
        0b1000001,
        0b1100011);

    // The power node. When placed within the original area, it can reach everything within the
    shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
    if shift < 0 then return false; end;
    node1X = drillX + c;
    node1Y = drillY + r;
    terrainMask |= (1 << shift);

//    printMask("new terrain mask:", terrainMask);
//    remark($"Shift: $shift, r: $r, c: $c\n");
//    remark($"water1X: $water1X, water1Y: $water1Y\n");
//    debugPause();

    // Try to patch in the water extractor/generator combo.
    // Both orientations
    var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
    var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);

    if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
        return true;
    end;

    // Try four more areas, each shifted by 3 in both directions
    for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        // Create the new terrain mask
        // Shift the terrain mask in the opposite direction!
        var newX = drillX - sx;
        var newY = drillY - sy;

        var newTerrainMask = createCombinedMask(newX, newY);

        var shiftedMask = shiftMask(terrainMask, sx, sy);
        var combinedMask = newTerrainMask | shiftedMask;

//        lastUnshiftedMask = terrainMask;
//        lastShiftedMask = shiftedMask;
//        lastCombinedMask = combinedMask;

//        printMask("shiftedMask:", shiftedMask);
//        printMask("newTerrainMask:", newTerrainMask);
//        printMask("combinedMask:", combinedMask);
//        remark($"Shifted by -$sx, -$sy\n");
//        remark($"Old center: $drillX, $drillY\n");
//        remark($"New center: ${drillX + sx}, ${drillY + sy}\n");
//        debugPause();

        if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
    end;

    // We can't place the accessories, but we can place the drill
    return true;
end;

remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
    searchFinished = false;
    findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
    searchFinished = true;
end;

remote def layoutThoriumDrill(x, y, unit, limit)
    if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
        return false;
    end;

    layoutThoriumDrillAtLocation();
end;

remote void stopLocation()
    mapProgress = mapTotal = mapSpots = 0;
    unbind();
end;

//// DEBUG
//
//noinline void printMask(text, mask)
//    println(text);
//    for var r in 0 ... 7 descending do
//        for var c in 0 ... 7 do
//            print((mask & (1 << (7 * r + c))) ? "x" : "o");
//        end;
//        println();
//    end;
//end;
//
inline void debugPause()
    printflush(message1);
    switch1.enabled = true;
    do while switch1.enabled;
end;
//
//#set remarks = active;
//
//begin
//    printflush(message1);
//    printflush(message1);
//    var core, x, y;
//    do
//        ubind(@poly);
//        core = ulocate(:building, :core, false, out x, out y);
//    while core == null;
//
//    moveTo(x, y, 1);
//
//    start = @second;
////    if false then
////        var dx, dy, capacity;
////        var ox = 131;
////        var oy = 118;
////        moveTo(ox, oy);
////        var score = findBestPosition(ox, oy, @ore-titanium, 4, ref dx, ref dy);
////        moveTo(x, y);
////        println($"$score at $, $", ox + dx, oy + dy);
////        printflush(message1);
////        stop();
////
////        findDrillLocationLocal(x, y, @unit, @titanium, @ore-titanium, 4, 2, out dx, out dy, out capacity);
////        println($"Found $capacity at $dx, $dy.");
////        printflush(message1);
////        debugPause();
////        ubind(@poly);
////        buildAt(dx, dy, @blast-drill);
////        wait(1);
////        ubind(@flare);
////
////        //findDrillLocationLocal(x, y, @unit, @titanium, @ore-titanium, 4, 1e9, out dx, out dy, out capacity);
////    else
//        drillX = 88;
//        drillY = 103;
//        layoutThoriumDrillAtLocation();
//
//        buildAt(drillX, drillY, @laser-drill);
//        buildAt(water1X, water1Y, @water-extractor);
//        buildAt(water2X, water2Y, @water-extractor);
//        buildAt(generatorX, generatorY, @steam-generator);
//        buildAt(nodeX, nodeY, @power-node);
//        buildAt(panelX, panelY, @solar-panel);
//        buildAt(containerX, containerY, @container);
////    end;
//    debugPause();
//end;
//
//inline void buildAt(x, y, block)
//    if x >= 0 then
//        moveTo(x, y);
//        build(x, y, block, 0, null);
//        wait(0.1);
//    end;
//end;
