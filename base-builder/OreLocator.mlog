jump 4 always 0 0
jump 12 always 0 0
jump 920 always 0 0
jump 939 always 0 0
read *tmp11 processor4 "*signature"
jump 4 notEqual *tmp11 "385702d66f725e74:v1"
set .attenuationRate 50
set .locations 0
set .count -1
set *signature "3290b8c661787058:v1"
wait 1e12
jump 10 always 0 0
set :findDrillLocation*retaddr 10
set .searchFinished false
ubind :findDrillLocation:unit
set .locationsStart .locations
set .coreX :findDrillLocation:x
set .coreY :findDrillLocation:y
set :findDrillLocation:capacity 0
set :findDrillLocation:dy :findDrillLocation:capacity
set :findDrillLocation:dx :findDrillLocation:dy
set .mapSpots :findDrillLocation:dx
op sub *tmp13 @mapw :findDrillLocation:x
op sub *tmp14 @maph :findDrillLocation:y
op max *tmp15 :findDrillLocation:x :findDrillLocation:y
op max *tmp15 *tmp15 *tmp13
op max *tmp15 *tmp15 *tmp14
set :findDrillLocation:distanceLimit *tmp15
set .angle 0
set .mapProgress 0
ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18 0
jump 35 notEqual *tmp18 false
ucontrol approach :findDrillLocation:x :findDrillLocation:y 5.5 0 0
ucontrol within :findDrillLocation:x :findDrillLocation:y 6 *tmp18 0
jump 32 equal *tmp18 false
op div *tmp21 *tmp15 3.8197185279121366
op pow .mapTotal *tmp21 2
set :findDrillLocation:oreX 0
set :findDrillLocation:oreY 0
set :findDrillLocation:best -1
set :findDrillLocation:bestX :findDrillLocation:x
set :findDrillLocation:bestY :findDrillLocation:y
op sub *tmp23 :findDrillLocation:limit :findDrillLocation:capacity
op mul :findDrillLocation:maxDistance *tmp23 .attenuationRate
op min :findDrillLocation:distanceLimit :findDrillLocation:distanceLimit :findDrillLocation:maxDistance
op div *tmp26 :findDrillLocation:distanceLimit 3.8197185279121366
op pow .mapTotal *tmp26 2
set :locateOreAway:x :findDrillLocation:oreX
set :locateOreAway:y :findDrillLocation:oreY
op mul :locateOreAway:distance 3.8197185279121366 .angle
set :locateOreAway:lastX -1
set :locateOreAway:lastY -1
op max .angle .angle @pi
op mul .mapProgress .angle .angle
op sub *tmp37 @mapw 5
op sub *tmp44 @maph 5
jump 120 greaterThanEq :locateOreAway:distance :findDrillLocation:distanceLimit
op div :locateOreAway:a .angle @degToRad
op sin *tmp34 :locateOreAway:a 0
op mul *tmp35 *tmp34 :locateOreAway:distance
op add *tmp36 :findDrillLocation:x *tmp35
op max *tmp39 *tmp36 5
op min *tmp38 *tmp39 *tmp37
op cos *tmp41 :locateOreAway:a 0
op mul *tmp42 *tmp41 :locateOreAway:distance
op add *tmp43 :findDrillLocation:y *tmp42
op max *tmp46 *tmp43 5
op min *tmp45 *tmp46 *tmp44
ucontrol within *tmp38 *tmp45 5 *tmp48 0
jump 73 notEqual *tmp48 false
ucontrol approach *tmp38 *tmp45 4.5 0 0
ucontrol within *tmp38 *tmp45 5 *tmp48 0
jump 70 equal *tmp48 false
op div *tmp51 3.8197185279121366 :locateOreAway:distance
op add .angle .angle *tmp51
op mul .mapProgress .angle .angle
op mul :locateOreAway:distance 3.8197185279121366 .angle
ulocate ore core true :findDrillLocation:item :locateOreAway:x :locateOreAway:y *tmp54 0
jump 81 notEqual *tmp54 false
set *tmp28 false
jump 121 always 0 0
op sub *tmp58 :locateOreAway:x :findDrillLocation:x
op abs *tmp59 *tmp58 0
op sub *tmp60 :locateOreAway:y :findDrillLocation:y
op abs *tmp61 *tmp60 0
op max :locateOreAway:coreDist *tmp59 *tmp61
op sub *tmp63 :locateOreAway:x *tmp38
op sub *tmp64 :locateOreAway:y *tmp45
op len :locateOreAway:unitDist *tmp63 *tmp64
jump 91 notEqual :locateOreAway:lastX :locateOreAway:x
jump 119 equal :locateOreAway:lastY :locateOreAway:y
jump 119 lessThan :locateOreAway:coreDist 8
jump 119 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
set :locateOreAway:lastX :locateOreAway:x
set :locateOreAway:lastY :locateOreAway:y
set *tmp75 .locations
set :visited:i .locationsStart
jump 111 greaterThanEq .locationsStart *tmp75
op mul :visited:index 4 :visited:i
op add *tmp78 :visited:index 2
read :visited:lx bank1 *tmp78
op add *tmp81 :visited:index 3
read :visited:ly bank1 *tmp81
op sub *tmp83 :locateOreAway:x :visited:lx
op sub *tmp84 :locateOreAway:y :visited:ly
op len *tmp85 *tmp83 *tmp84
jump 109 greaterThanEq *tmp85 7
set *tmp74 true
jump 112 always 0 0
op add :visited:i :visited:i 1
jump 98 lessThan :visited:i *tmp75
set *tmp74 false
jump 119 notEqual *tmp74 false
op div *tmp90 2 .angle
op add .angle .angle *tmp90
op mul .mapProgress .angle .angle
printflush message1
set *tmp28 true
jump 121 always 0 0
jump 57 lessThan :locateOreAway:distance :findDrillLocation:distanceLimit
set *tmp28 false
set :findDrillLocation:oreX :locateOreAway:x
set :findDrillLocation:oreY :locateOreAway:y
jump 127 notEqual *tmp28 false
set .searchFinished true
op greaterThan :findDrillLocation*retval :findDrillLocation:capacity 0
jump 203 always 0 0
jump 129 lessThan :findDrillLocation:limit 1000
op add .mapSpots .mapSpots 1
ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100 0
jump 134 notEqual *tmp100 false
ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0
ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100 0
jump 131 equal *tmp100 false
set :findDrillLocation:last 0
write @unit processor4 ":findBestPosition:unit"
write :findDrillLocation:oreX processor4 ":findBestPosition:x"
write :findDrillLocation:oreY processor4 ":findBestPosition:y"
write :findDrillLocation:ore processor4 ":findBestPosition:ore"
write :findDrillLocation:size processor4 ":findBestPosition:size"
write false processor4 ":findBestPosition*finished"
write 2 processor4 "@counter"
wait 1e-15
read *tmp110 processor4 ":findBestPosition*finished"
jump 142 equal *tmp110 false
read :findDrillLocation:diffX processor4 ":findBestPosition:bestX"
read :findDrillLocation:diffY processor4 ":findBestPosition:bestY"
read :findDrillLocation:score processor4 ":findBestPosition*retval"
op add :findDrillLocation:newX :findDrillLocation:oreX :findDrillLocation:diffX
op add :findDrillLocation:newY :findDrillLocation:oreY :findDrillLocation:diffY
op sub *tmp114 :findDrillLocation:newX :findDrillLocation:x
op abs *tmp115 *tmp114 0
op sub *tmp116 :findDrillLocation:newY :findDrillLocation:y
op abs *tmp117 *tmp116 0
op max :findDrillLocation:coreDist *tmp115 *tmp117
jump 191 lessThanEq :findDrillLocation:coreDist 8
jump 176 lessThanEq :findDrillLocation:score :findDrillLocation:capacity
set :findDrillLocation:dx :findDrillLocation:newX
set :findDrillLocation:dy :findDrillLocation:newY
set :findDrillLocation:capacity :findDrillLocation:score
select .mapSpots lessThan :findDrillLocation:limit 1000 :findDrillLocation:score .mapSpots
jump 176 lessThan :findDrillLocation:capacity :findDrillLocation:limit
op add .count .count 1
sensor *tmp129 :findDrillLocation:item @id
write *tmp129 bank1 .count
op add .count .count 1
write :findDrillLocation:score bank1 .count
op add .count .count 1
write :findDrillLocation:dx bank1 .count
op add .count .count 1
write :findDrillLocation:dy bank1 .count
op add .locations .locations 1
ucontrol unbind 0 0 0 0 0
set .searchFinished true
set :findDrillLocation*retval true
jump 203 always 0 0
jump 180 lessThanEq :findDrillLocation:score :findDrillLocation:best
set :findDrillLocation:bestX :findDrillLocation:newX
set :findDrillLocation:bestY :findDrillLocation:newY
set :findDrillLocation:best :findDrillLocation:score
jump 191 lessThanEq :findDrillLocation:score :findDrillLocation:last
set :findDrillLocation:last :findDrillLocation:score
op mul :round:x :findDrillLocation:diffX 1.1
op add *tmp143 :round:x 0.5
op floor *tmp142 *tmp143 0
op add :findDrillLocation:oreX :findDrillLocation:oreX *tmp142
op mul :round.1:x :findDrillLocation:diffY 1.1
op add *tmp147 :round.1:x 0.5
op floor *tmp146 *tmp147 0
op add :findDrillLocation:oreY :findDrillLocation:oreY *tmp146
jump 135 always 0 0
jump 39 lessThan :findDrillLocation:best 0
op add .count .count 1
sensor *tmp153 :findDrillLocation:item @id
write *tmp153 bank1 .count
op add .count .count 1
write :findDrillLocation:best bank1 .count
op add .count .count 1
write :findDrillLocation:bestX bank1 .count
op add .count .count 1
write :findDrillLocation:bestY bank1 .count
op add .locations .locations 1
jump 39 always 0 0
set :findDrillLocation*finished true
set @counter :findDrillLocation*retaddr
op add *tmp185 :excludeArea:areaWidth 8
op idiv *tmp186 *tmp185 2
op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
op abs *tmp188 *tmp187 0
op sub :excludeArea:overlapX *tmp186 *tmp188
op add *tmp191 :excludeArea:areaHeight 8
op idiv *tmp192 *tmp191 2
op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
op abs *tmp194 *tmp193 0
op sub :excludeArea:overlapY *tmp192 *tmp194
op greaterThan *tmp196 :excludeArea:overlapX 0
op greaterThan *tmp197 :excludeArea:overlapY 0
op land *tmp198 *tmp196 *tmp197
jump 279 equal *tmp198 false
op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
op shl *tmp203 1 :excludeArea:blockSizeX
op sub :createMatrixOfSize:row *tmp203 1
set :createMatrixOfSize:matrix :createMatrixOfSize:row
jump 242 greaterThanEq 1 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:row 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
jump 242 greaterThanEq 2 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:matrix 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
jump 242 greaterThanEq 3 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:matrix 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
jump 242 greaterThanEq 4 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:matrix 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
jump 242 greaterThanEq 5 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:matrix 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
jump 242 greaterThanEq 6 :excludeArea:blockSizeY
op shl *tmp207 :createMatrixOfSize:matrix 7
op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
op sub *tmp210 7 :excludeArea:blockSizeX
op mul :excludeArea:shiftX *tmp209 *tmp210
op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
op sub *tmp213 7 :excludeArea:blockSizeY
op mul :excludeArea:shiftY *tmp212 *tmp213
op abs *tmp161 :excludeArea:shiftX 0
op greaterThan *tmp162 *tmp161 6
op abs *tmp163 :excludeArea:shiftY 0
op greaterThan *tmp164 *tmp163 6
op or *tmp165 *tmp162 *tmp164
jump 256 equal *tmp165 false
set :shiftMask*retval 0
jump 277 always 0 0
op mul *tmp167 7 :excludeArea:shiftY
op add :shiftMask:shift :excludeArea:shiftX *tmp167
jump 263 lessThanEq :shiftMask:shift 0
op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMask
op shl :shiftMask:mask *tmp172 :shiftMask:shift
jump 265 always 0 0
op sub *tmp174 0 :shiftMask:shift
op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174
jump 276 equal :excludeArea:shiftX 0
op shr :shiftMask:keep 0b1111111 *tmp161
jump 269 lessThanEq :excludeArea:shiftX 0
op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
op shl *tmp181 :shiftMask:keep 7
op or :shiftMask:keep :shiftMask:keep *tmp181
op shl *tmp182 :shiftMask:keep 14
op or :shiftMask:keep :shiftMask:keep *tmp182
op shl *tmp183 :shiftMask:keep 21
op or :shiftMask:keep :shiftMask:keep *tmp183
op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
set :shiftMask*retval :shiftMask:mask
op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
set @counter :excludeArea*retaddr
set :excludeArea*retval :excludeArea:mask
set @counter :excludeArea*retaddr
set :findPossiblePlacement:y -3
jump 303 greaterThan :findPossiblePlacement:y 3
op add *tmp216 :findPossiblePlacement:y 3
op mul *tmp217 7 *tmp216
op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
set :findPossiblePlacement:x -3
jump 299 greaterThan :findPossiblePlacement:x 3
op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
jump 294 notEqual *tmp219 0
op mul *tmp222 :findPossiblePlacement:y 7
op add *tmp223 24 *tmp222
op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
set @counter :findPossiblePlacement*retaddr
op sub *tmp225 3 :findPossiblePlacement:width
jump 299 greaterThan :findPossiblePlacement:x *tmp225
op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
op add :findPossiblePlacement:x :findPossiblePlacement:x 1
jump 288 lessThanEq :findPossiblePlacement:x 3
op sub *tmp228 3 :findPossiblePlacement:height
jump 303 greaterThan :findPossiblePlacement:y *tmp228
op add :findPossiblePlacement:y :findPossiblePlacement:y 1
jump 283 lessThanEq :findPossiblePlacement:y 3
set :findPossiblePlacement*retval -1
set @counter :findPossiblePlacement*retaddr
set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
set :findPossiblePlacement:width 2
set :findPossiblePlacement:height 4
set :findPossiblePlacement*retaddr 311
jump 281 always 0 0
jump 325 lessThan :findPossiblePlacement*retval 0
jump 315 greaterThanEq :findPossiblePlacement*retval 0
set :tryPlaceGenerator*retval false
set @counter :tryPlaceGenerator*retaddr
op add *tmp236 :tryPlaceGenerator:centerX 0.5
op add .water2X *tmp236 :findPossiblePlacement:x
op add *tmp238 :tryPlaceGenerator:centerY 0.5
op add .water2Y *tmp238 :findPossiblePlacement:y
op add .generatorX *tmp236 :findPossiblePlacement:x
op add *tmp242 :tryPlaceGenerator:centerY 2.5
op add .generatorY *tmp242 :findPossiblePlacement:y
op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
jump 343 always 0 0
set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
set :findPossiblePlacement:width 4
set :findPossiblePlacement:height 2
set :findPossiblePlacement*retaddr 331
jump 281 always 0 0
jump 334 greaterThanEq :findPossiblePlacement*retval 0
set :tryPlaceGenerator*retval false
set @counter :tryPlaceGenerator*retaddr
op add *tmp248 :tryPlaceGenerator:centerX 0.5
op add .water2X *tmp248 :findPossiblePlacement:x
op add *tmp250 :tryPlaceGenerator:centerY 0.5
op add .water2Y *tmp250 :findPossiblePlacement:y
op add *tmp252 :tryPlaceGenerator:centerX 2.5
op add .generatorX *tmp252 :findPossiblePlacement:x
op add .generatorY *tmp250 :findPossiblePlacement:y
op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
set :findPossiblePlacement:placementMask 1
set :findPossiblePlacement:width 1
set :findPossiblePlacement:height 1
set :findPossiblePlacement*retaddr 350
jump 281 always 0 0
jump 353 greaterThanEq :findPossiblePlacement*retval 0
set :tryPlaceGenerator*retval false
set @counter :tryPlaceGenerator*retaddr
op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
op shl *tmp262 1 :findPossiblePlacement*retval
op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
set :findPossiblePlacement:placementMask 1
set :findPossiblePlacement:width 1
set :findPossiblePlacement:height 1
set :findPossiblePlacement*retaddr 363
jump 281 always 0 0
jump 366 greaterThanEq :findPossiblePlacement*retval 0
set :tryPlaceGenerator*retval false
set @counter :tryPlaceGenerator*retaddr
op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
op shl *tmp268 1 :findPossiblePlacement*retval
op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
op sub *tmp269 .water2X .node1X
op sub *tmp270 .water2Y .node1Y
op len *tmp271 *tmp269 *tmp270
op greaterThan *tmp272 *tmp271 7
op sub *tmp273 .generatorX .node1X
op sub *tmp274 .generatorY .node1Y
op len *tmp275 *tmp273 *tmp274
op greaterThan *tmp276 *tmp275 7
op or *tmp277 *tmp272 *tmp276
op sub *tmp278 .panelX .node1X
op sub *tmp279 .panelY .node1Y
op len *tmp280 *tmp278 *tmp279
op greaterThan *tmp281 *tmp280 6
op or *tmp282 *tmp277 *tmp281
op sub *tmp283 .batteryX .node1X
op sub *tmp284 .batteryY .node1Y
op len *tmp285 *tmp283 *tmp284
op greaterThan *tmp286 *tmp285 6
op or *tmp287 *tmp282 *tmp286
jump 401 equal *tmp287 false
set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
set :findPossiblePlacement:placementMask 1
set :findPossiblePlacement:width 1
set :findPossiblePlacement:height 1
set :findPossiblePlacement*retaddr 396
jump 281 always 0 0
jump 399 greaterThanEq :findPossiblePlacement*retval 0
set :tryPlaceGenerator*retval false
set @counter :tryPlaceGenerator*retaddr
op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
set :tryPlaceGenerator*retval true
set @counter :tryPlaceGenerator*retaddr
op add *tmp296 :createBlockMaskRow:x 4
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x 3
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x 2
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x 1
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x -1
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x -2
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x -3
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createBlockMaskRow:x -4
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow*retval *tmp295 *tmp297
set @counter :createBlockMaskRow*retaddr
write @unit processor4 ":createTerrainMask:unit"
write :createCombinedMask:x processor4 ":createTerrainMask:x"
write :createCombinedMask:y processor4 ":createTerrainMask:y"
write false processor4 ":createTerrainMask*finished"
write 1 processor4 "@counter"
set :createAdjacentMask:x :createCombinedMask:x
set :createAdjacentMask:y :createCombinedMask:y
op add *tmp305 :createCombinedMask:y 4
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
op or :createAdjacentMask:row2 *tmp295 *tmp297
op add *tmp307 :createCombinedMask:y 3
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
op or :createAdjacentMask:row1 *tmp295 *tmp297
op add *tmp309 :createCombinedMask:y 2
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow:result
op add *tmp309 :createCombinedMask:y 1
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow:result
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow:result
op add *tmp309 :createCombinedMask:y -1
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow:result
op add :createBlockMaskRow:y :createCombinedMask:y -2
op add *tmp296 :createCombinedMask:x 4
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 3
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 2
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x 1
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -1
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -2
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -3
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow:result *tmp295 *tmp297
op shl *tmp295 :createBlockMaskRow:result 1
op add *tmp296 :createCombinedMask:x -4
ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
op or :createBlockMaskRow*retval *tmp295 *tmp297
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow*retval
op sub :createAdjacentMask:r -2 1
op add *tmp309 :createCombinedMask:y -3
set :createBlockMaskRow:x :createCombinedMask:x
set :createBlockMaskRow:y *tmp309
set :createBlockMaskRow*retaddr 735
jump 403 always 0 0
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow*retval
op sub :createAdjacentMask:r :createAdjacentMask:r 1
op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
set :createBlockMaskRow:x :createAdjacentMask:x
set :createBlockMaskRow:y *tmp309
set :createBlockMaskRow*retaddr 751
jump 403 always 0 0
op shl *tmp311 :createAdjacentMask:row1 1
op or *tmp312 :createAdjacentMask:row2 *tmp311
op shr *tmp313 :createAdjacentMask:row1 1
op or *tmp314 *tmp312 *tmp313
op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
op shl *tmp316 :createAdjacentMask:result 7
op and *tmp317 :createAdjacentMask:mask 0xFE
op or :createAdjacentMask:result *tmp316 *tmp317
set :createAdjacentMask:row2 :createAdjacentMask:row1
set :createAdjacentMask:row1 :createBlockMaskRow*retval
op sub :createAdjacentMask:r :createAdjacentMask:r 1
op shr *tmp304 :createAdjacentMask:result 1
wait 1e-15
read *tmp320 processor4 ":createTerrainMask*finished"
jump 763 equal *tmp320 false
read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
op or :excludeArea:mask *tmp304 :createCombinedMask:terrainMask
set :excludeArea:maskX :createCombinedMask:x
set :excludeArea:maskY :createCombinedMask:y
set :excludeArea:areaX .coreX
set :excludeArea:areaY .coreY
set :excludeArea:areaWidth 15
set :excludeArea:areaHeight 15
set :excludeArea*retaddr 776
jump 205 always 0 0
set :createCombinedMask*retval :excludeArea*retval
set @counter :createCombinedMask*retaddr
set .panelY -1
set .panelX -1
set .generatorY -1
set .generatorX -1
set .water2Y -1
set .water2X -1
set .water1Y -1
set .water1X -1
set :moveTo.5:x .drillX
set :moveTo.5:y .drillY
ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0
jump 793 notEqual *tmp323 false
ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0
ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0
jump 790 equal *tmp323 false
set :createCombinedMask:x .drillX
set :createCombinedMask:y .drillY
set :createCombinedMask*retaddr 797
jump 437 always 0 0
op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
set :layoutThoriumDrillAtLocation:mask2x2 387
set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
set :findPossiblePlacement:placementMask 387
set :findPossiblePlacement:width 2
set :findPossiblePlacement:height 2
set :findPossiblePlacement*retaddr 806
jump 281 always 0 0
jump 814 lessThan :findPossiblePlacement*retval 0
op add *tmp332 .drillX 0.5
op add .water1X *tmp332 :findPossiblePlacement:x
op add *tmp334 .drillY 0.5
op add .water1Y *tmp334 :findPossiblePlacement:y
op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
set :findPossiblePlacement:width 2
set :findPossiblePlacement:height 2
set :findPossiblePlacement*retaddr 820
jump 281 always 0 0
jump 827 lessThan :findPossiblePlacement*retval 0
op add *tmp341 .drillX 0.5
op add .containerX *tmp341 :findPossiblePlacement:x
op add *tmp343 .drillY 0.5
op add .containerY *tmp343 :findPossiblePlacement:y
op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
set :findPossiblePlacement:placementMask 1
set :findPossiblePlacement:width 1
set :findPossiblePlacement:height 1
set :findPossiblePlacement*retaddr 834
jump 281 always 0 0
jump 837 greaterThanEq :findPossiblePlacement*retval 0
set :layoutThoriumDrillAtLocation*retval false
set @counter :layoutThoriumDrillAtLocation*retaddr
op add .node1X .drillX :findPossiblePlacement:x
op add .node1Y .drillY :findPossiblePlacement:y
op shl *tmp352 1 :findPossiblePlacement*retval
op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
set :layoutThoriumDrillAtLocation:generatorVertical 6340995
set :tryPlaceGenerator:centerX .drillX
set :tryPlaceGenerator:centerY .drillY
set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
set :tryPlaceGenerator:generatorHorizontal 1935
set :tryPlaceGenerator:generatorVertical 6340995
set :tryPlaceGenerator*retaddr 850
jump 305 always 0 0
jump 853 equal :tryPlaceGenerator*retval false
set :layoutThoriumDrillAtLocation*retval true
set @counter :layoutThoriumDrillAtLocation*retaddr
set :layoutThoriumDrillAtLocation:sx 3
set :layoutThoriumDrillAtLocation:sy 3
set *tmp355 857
jump 868 always 0 0
set :layoutThoriumDrillAtLocation:sx 3
set :layoutThoriumDrillAtLocation:sy -3
set *tmp355 861
jump 868 always 0 0
set :layoutThoriumDrillAtLocation:sx -3
set :layoutThoriumDrillAtLocation:sy 3
set *tmp355 865
jump 868 always 0 0
set :layoutThoriumDrillAtLocation:sx -3
set :layoutThoriumDrillAtLocation:sy -3
set *tmp355 918
op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
set :createCombinedMask*retaddr 874
jump 437 always 0 0
set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
op abs *tmp161 :layoutThoriumDrillAtLocation:sx 0
op greaterThan *tmp162 *tmp161 6
op abs *tmp163 :layoutThoriumDrillAtLocation:sy 0
op greaterThan *tmp164 *tmp163 6
op or *tmp165 *tmp162 *tmp164
jump 883 equal *tmp165 false
set :shiftMask*retval 0
jump 904 always 0 0
op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
jump 890 lessThanEq :shiftMask:shift 0
op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
op shl :shiftMask:mask *tmp172 :shiftMask:shift
jump 892 always 0 0
op sub *tmp174 0 :shiftMask:shift
op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp174
jump 903 equal :layoutThoriumDrillAtLocation:sx 0
op shr :shiftMask:keep 0b1111111 *tmp161
jump 896 lessThanEq :layoutThoriumDrillAtLocation:sx 0
op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
op shl *tmp181 :shiftMask:keep 7
op or :shiftMask:keep :shiftMask:keep *tmp181
op shl *tmp182 :shiftMask:keep 14
op or :shiftMask:keep :shiftMask:keep *tmp182
op shl *tmp183 :shiftMask:keep 21
op or :shiftMask:keep :shiftMask:keep *tmp183
op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
set :shiftMask*retval :shiftMask:mask
op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
set :tryPlaceGenerator:centerX *tmp361
set :tryPlaceGenerator:centerY *tmp362
set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
set :tryPlaceGenerator*retaddr 914
jump 305 always 0 0
jump 917 equal :tryPlaceGenerator*retval false
set :layoutThoriumDrillAtLocation*retval true
set @counter :layoutThoriumDrillAtLocation*retaddr
set @counter *tmp355
set :layoutThoriumDrillAtLocation*retval true
set @counter :layoutThoriumDrillAtLocation*retaddr
set :findDrillLocation:x :layoutThoriumDrill:x
set :findDrillLocation:y :layoutThoriumDrill:y
set :findDrillLocation:unit :layoutThoriumDrill:unit
set :findDrillLocation:item @thorium
set :findDrillLocation:ore @ore-thorium
set :findDrillLocation:size 3
set :findDrillLocation:limit :layoutThoriumDrill:limit
set :findDrillLocation*retaddr 929
jump 13 always 0 0
set .drillX :findDrillLocation:dx
set .drillY :findDrillLocation:dy
jump 934 notEqual :findDrillLocation*retval false
set :layoutThoriumDrill*retval false
jump 937 always 0 0
set :layoutThoriumDrillAtLocation*retaddr 936
jump 778 always 0 0
set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation*retval
set :layoutThoriumDrill*finished true
jump 10 always 0 0
set .mapSpots 0
set .mapTotal 0
set .mapProgress 0
ucontrol unbind 0 0 0 0 0
set :stopLocation*finished true
jump 10 always 0 0
print "Compiled by Mindcode - github.com/cardillan/mindcode"

