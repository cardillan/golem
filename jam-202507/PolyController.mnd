#set target = 8;
#set syntax = strict;
//#set sort-variables;

module PolyController;

require units;

linked message1;

// At this point, we're only using a flare
const CAPACITY = 30;
const RADIUS = 6;

noinit volatile var
    builder, core, coreX, coreY,
    thoriumDrone;

remote var
    thoriumContainer = null;

volatile var
    thoriumLimit = 100,
    thoriumContainerX = 0, thoriumContainerY = 0;

remote void setThoriumContainer(container)
    thoriumContainer = container;
    thoriumContainerX = container.@x;
    thoriumContainerY = container.@y;
    thoriumLimit = thoriumContainer.@itemCapacity > 10 ? 100 : 0;
end;

remote void pause();
    // Must be called asynchronously
    do while true;
end;

remote void resume()
    // Do nothing
end;

void backgroundProcess()
    if core == null then return; end;

    while true do
        ubind(@poly);
        if @unit == builder then
            println("Found builder unit.");
            printflush(message1);
        elsif thoriumDrone == null then
            thoriumDrone = @unit;
        else
            if @unit == thoriumDrone and thoriumContainer.@thorium > thoriumLimit then
                serviceThoriumDrill();
                continue;
            end;

            var flag = @unit.@flag;
            println("Unit flag: ", flag);
            if flag == 0 then
                findOreToMine();
            elsif flag == 1 then
                returnItems();
            else
                mine();
            end;
        end;
    end;
end;

var
    coalX = 0,
    coalY = 0,
    distance = 1e9;

void findOreToMine()
    // Shouldn't happen here, but...
    if @unit.@firstItem != null then
        itemDrop(@air, CAPACITY);
        if @unit.@firstItem != null then
            println($"Holding wrong item.");
            return;
        end;
    end;

    // Try to find a better ore
    var x, y;
    ulocate(:ore, @coal, out x, out y);
    var dist = len(x - coreX, y - coreY);
    if dist < distance then
        coalX = x;
        coalY = y;
        distance = dist;
    end;

    approach(coalX, coalY, RADIUS);
    var floor = null;
    getBlock(coalX, coalY, , out floor);
    if floor == @ore-coal then
        mine(x, y);
        println($"Found coal at $coalX, $coalY");
        flag(2);
    elsif floor != null
        // The ore we remembered disappeared - got built over?
        then distance = 1e9;
        println($"Coal at $coalX, $coalY disappeared");
    else
        println($"Not close enough to $coalX, $coalY");
    end;
end;

void mine()
    print("Mining");

    if @unit.@firstItem != @coal then
        print(" (dropping)");
        itemDrop(@air, CAPACITY);
    end;

    print($" at $coalX, $coalY");
    approach(coalX, coalY, RADIUS);
    mine(coalX, coalY);

    if @unit.@totalItems >= CAPACITY then
        print(", full");
        approach(coreX, coreY, RADIUS);
        flag(1);
    end;

    println();
end;

void returnItems()
    println("Returning");
    approach(coreX, coreY, RADIUS);
    itemDrop(core, CAPACITY);

    if @unit.@firstItem == null then
        println("    Finished");
        flag(0);
    end;
end;

var onBase = true;

void serviceThoriumDrill()
    var item = @unit.@firstItem;

    if item == @thorium then
        approach(coreX, coreY, RADIUS);
        itemDrop(core, CAPACITY);
    elsif item == null then
        // Take titanium
        approach(thoriumContainerX, thoriumContainerY, RADIUS);
        itemTake(thoriumContainer, @thorium, CAPACITY);
    else
        itemDrop(@air, CAPACITY);
    end;
end;

begin
    do
        builder = ubind(@poly);
        core = ulocate(:building, :core, false, out coreX, out coreY);
    while core == null;
end;
