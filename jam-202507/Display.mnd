#set target = 8;
#set syntax = strict;
#set function-inlining = none;

require "CoreBuilder.mnd" remote processor1;

// TODO when not volatile, gets optimized away
noinit volatile var started;

linked display1, switch1, message1;

#declare builtin @center, @top, @bottom, @left, @right, @topLeft, @topRight, @bottomLeft, @bottomRight;

inline void drawPrint(x, y, alignment)
    mlogText("draw", "print", in x, in y, in alignment);
end;

inline void drawBold(x, y, alignment, text)
    drawText(x, y, alignment, text);
    drawText(x + 1, y, alignment, text);
end;

inline void drawText(x, y, alignment, text)
    print(text);
    drawPrint(x, y, alignment);
end;

void updateDisplay()
    reset();
    clear(0, 0, 32);

    drawHeader();
    drawMaterials();
    drawUnit();
    drawflush(display1);
end;

const ROW_HEIGHT = 15;
const BAR_HEIGHT = 10;
const BAR_X = 22;

const ICON_SIZE = 16;
const ICON_X = 11;
const ICON_Y = +5;

const BAR_LENGTH = 122;
const BAR_LENGTH2 = 34;

const HEADER_X = 176 / 4 - 4;
const HEADER_Y = 176 - 15;
const HEADER2_Y = HEADER_Y - 60;
const HEADER3_Y = 85 - 2 * ROW_HEIGHT;

inline void drawHeader()
    col(%[gold]);
    drawBold(HEADER_X, HEADER_Y, @bottom, "Building");

    col(%[white]);
    image(HEADER_X, HEADER_Y - 24, nextBlock, 32, 0);

    var t = floor(@second);
    var m = t \ 60;
    var s = t % 60;
    print(m, ":", s < 10 ? "0" : "", s);
    drawText(168, 172, @topRight, "");
end;

inline void drawMaterials()
    drawBold(BAR_X, HEADER_Y - 60, @bottomLeft, "Materials");

    var col = 0, y = 85;
    var count = totalTargets;
    var columns = count > 2 ? 2 : 1;

    for var item, target in
        @copper,    copperTarget,
        @lead,      leadTarget,
        @graphite,  graphiteTarget,
        @silicon,   siliconTarget,
        @titanium,  titaniumTarget,
        @metaglass, metaglassTarget
    do
        if target > 0 then
            drawItem(ref col, ref y, columns, item, core.sensor(item), target, target);
            if --count <= 0 then break; end;
        end;
    end;
end;

inline void drawUnit()
    col(%[white]);
    drawBold(BAR_X, HEADER3_Y - 10, @bottomLeft, "Unit status");
    var y = HEADER3_Y - 26;

    if transportItem == null then
        drawUnit(@poly, 0, ref y);
    else
        drawUnit(transportItem, @unit.@totalItems, ref y);
    end;
end;

inline void drawUnit(item, items, ref y)
    var col = 0;
    drawItem(ref col, ref y, 1, item, items, transportTarget, transportTarget);
end;

inline void drawItem(ref col, ref y, columns, item, current, target, count)
    var barLength = BAR_LENGTH + 176 / 2 - (columns * 176 / 2);
    var textEnd = 170 - BAR_LENGTH + barLength;
    var length = min(barLength, barLength * current / target);

    var iconX = ICON_X + col * 176 / 2;
    var barX = BAR_X + col * 176 / 2;
    var textX = textEnd + col * 176 / 2;

    col(%[white]);
    image(iconX, y + ICON_Y, item, 16, 0);

    color(0,128,0,255);
    rect(barX, y, length, BAR_HEIGHT);

    color(0,255,0,255);
    lineRect(barX, y, barLength, BAR_HEIGHT);
    drawBold(textX, y + ICON_Y + 2, @right, count);

    if ++col >= columns then
        col = 0;
        y -= ROW_HEIGHT;
    end;
end;

void updateMessage()
    println($"[gold]Building $nextBlock");
    println("==================================[]");
    println(status1);
    println($"$status2$item2 ($block2)");
    println(status3);
    printflush(message1);
end;

begin
    while @unit == null do
        ubind(@poly);
    end;

    printflush(null);
    drawflush(null);

    if started == null then
        async(buildCore());
        started = true;
    end;

    switch1.enabled = false;
    do
        updateDisplay();
        updateMessage();
    while !switch1.enabled;
    started = null;
end;

