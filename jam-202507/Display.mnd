#set target = 8;
#set syntax = strict;
//#set function-inlining = none;
#set sort-variables;

module Display;

linked display1, switch1, message1;

var core = null;

noinit remote var
    nextBlock,
    targetCopper,
    targetLead,
    targetGraphite,
    targetSilicon,
    targetTitanium,
    targetMetaglass,
    totalTargets,
    transportTarget,
    transportItem,
    status1,
    status2, item2, block2,
    status3,
    monos,
    flares,
    polys,
    factory,
    titaniumDrill;

#declare builtin @center, @top, @bottom, @left, @right, @topLeft, @topRight, @bottomLeft, @bottomRight;

inline void drawPrint(x, y, alignment)
    mlogText("draw", "print", in x, in y, in alignment);
end;

inline void drawBold(x, y, alignment, text...)
    drawText(x, y, alignment, text);
    drawText(x + 1, y, alignment, text);
end;

inline void drawText(x, y, alignment, text...)
    print(text);
    drawPrint(x, y, alignment);
end;

var drawFactory, materialCount;

void updateDisplay()
    reset();
    clear(0, 0, 32);

    drawFactory = factory.@enabled;

    drawHeader();
    drawMaterials();
    drawUnit();
    drawUnits();
    drawflush(display1);
end;

const ROW_HEIGHT = 15;
const BAR_HEIGHT = 10;
const BAR_X = 22;

const ICON_SIZE = 16;
const ICON_X = 11;
const ICON_Y = +5;

const BAR_LENGTH = 122;
const BAR_LENGTH2 = 34;

const HEADER_X = 176 / 4 - 4;
const HEADER1_Y = 176 - 15;
const HEADER2_Y = HEADER1_Y - 56;
const HEADER3_Y = HEADER2_Y - 4 * ROW_HEIGHT - 5;
const HEADER4_Y = HEADER2_Y - 5 * ROW_HEIGHT - 5;

inline void drawHeader()
    col(%[gold]);
    drawBold(HEADER_X, HEADER1_Y, @bottom, "Building");

    col(%[white]);
    image(HEADER_X, HEADER1_Y - 24, nextBlock == null ? factory.@config : nextBlock, 32, 0);

    var t = floor(@second);
    var m = t \ 60;
    var s = t % 60;
    print(m, ":", s < 10 ? "0" : "", s);
    drawText(170, 172, @topRight, "");

    var count = titaniumDrill.@titanium;
    if count then
        drawText(170, 155, @topRight, "x", count);
        image(150 - 7 * (count \ 10), 146, @titanium, 12, 0);
    end;
end;

inline void drawMaterials()
    var count, targetFactoryLead, targetFactorySilicon;
    var col = 0, y = HEADER2_Y - ROW_HEIGHT;

    if drawFactory then
        var unit = factory.@config;
        var unitCount;
        if unit == @mono then
            targetFactoryLead = 15;
            targetFactorySilicon = 30;
            materialCount = 2;
            unitCount = monos + 1;
        else
            targetFactoryLead = 0;
            targetFactorySilicon = 15;
            materialCount = 1;
            unitCount = flares + 1;
        end;

        drawBold(BAR_X, HEADER2_Y, @bottomLeft, "Air Factory");
        if factory.@progress > 0 then
            drawItem(in 0, in HEADER2_Y - ROW_HEIGHT, 1, unit, factory.@progress, 1.0, unitCount, "/8");
        else
            for var item, target in
                @lead,    targetFactoryLead,
                @silicon, targetFactorySilicon
            do
                if target > 0 then
                    drawItem(in out col, in out y, 1, item, factory.sensor(item), target, target);
                end;
            end;
        end;
    else
        count = materialCount = totalTargets;
        drawBold(BAR_X, HEADER2_Y, @bottomLeft, "Materials");
        var columns = 1; //drawFactory * count > 2 ? 2 : 1;

        if count then
            for var item, target in
                @copper,    targetCopper,
                @lead,      targetLead,
                @graphite,  targetGraphite,
                @silicon,   targetSilicon,
                @titanium,  targetTitanium,
                @metaglass, targetMetaglass
            do
                if target > 0 then
                    drawItem(in out col, in out y, columns, item, core.sensor(item), target, target);
                    if --count <= 0 then break; end;
                end;
            end;
        end;
    end;
end;

inline void drawUnit()
    col(%[white]);
    var y = materialCount < 4 ? HEADER3_Y : HEADER4_Y;
    drawBold(BAR_X, y, @bottomLeft, "Builder");

    if transportItem == null then
        drawUnit(@poly, 0, in y - ROW_HEIGHT);
    else
        var unitItem = @unit.@firstItem;
        drawUnit(transportItem, @unit.@totalItems * (unitItem == transportItem), in y - ROW_HEIGHT);
    end;
end;

inline void drawUnit(item, items, in out y)
     drawItem(in 0, in out y, 1, item, items, transportTarget, transportTarget);
end;

inline void drawItem(in out col, in out y, columns, item, current, target, text...)
    var barLength = BAR_LENGTH + 176 / 2 - (columns * 176 / 2);
    var textEnd = 170 - BAR_LENGTH + barLength;
    var length = min(barLength, barLength * current / target);

    var iconX = ICON_X + col * 176 / 2;
    var barX = BAR_X + col * 176 / 2;
    var textX = textEnd + col * 176 / 2;

    col(%[white]);
    image(iconX, y + ICON_Y, item, 16, 0);

    color(0,128,0,255);
    rect(barX, y, length, BAR_HEIGHT);

    color(0,255,0,255);
    lineRect(barX, y, barLength, BAR_HEIGHT);
    drawBold(textX, y + ICON_Y + 2, @right, text);

    if ++col >= columns then
        col = 0;
        y -= ROW_HEIGHT;
    end;
end;

inline void drawUnits()
    var x = 170;
    col(%[white]);
    drawUnitCount(@poly, polys, ref x);
    drawUnitCount(@mono, monos, ref x);
    drawUnitCount(@flare, flares, ref x);
end;

inline void drawUnitCount(type, count, ref x)
    if count > 0 then
        image(x - 20, HEADER1_Y - 34, type, 12, 0);
        drawText(x, HEADER1_Y - 32, @right, "x", count);
        x -= 30;
    end;
end;

void updateMessage()
    println($"[gold]Building $nextBlock");
    println("==================================[]");
    println(status1);
    println($"$status2$item2 ($block2)");
    println(status3);
    printflush(message1);
end;

void backgroundProcess()
    do
        ubind(@poly);
        core = ulocate(:building, :core, false);
    while core == null;

    printflush(null);
    drawflush(null);

    while true do
        updateDisplay();
        updateMessage();
    end;
end;

