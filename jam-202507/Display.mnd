#set target = 8;
#set syntax = strict;
//#set function-inlining = none;
#set sort-variables;

param TIME_COMPRESS = 8;

module Display;

linked display1, switch1, message1, bank1, processor1;

// Processor1 is the ore locator
// We're reading and displaying search progress
remote processor1 var mapProgress, mapTotal, mapAction, mapSpots;

var
    core = null,
    coreX = 0, coreY = 0,
    page = 0,
    numPages = 3;

noinit remote var
    nextBlock,
    displayNextUnit,
    targetCopper,
    targetLead,
    targetGraphite,
    targetSilicon,
    targetTitanium,
    targetMetaglass,
    totalTargets,
    transportTarget,
    transportItem,
    status1,
    status2, item2, block2,
    status3,
    displayMonos,
    displayFlares,
    displayPolys,
    factory,
    reconstructor,
    titaniumDrill,
    thoriumDrill;

#declare builtin @center, @top, @bottom, @left, @right, @topLeft, @topRight, @bottomLeft, @bottomRight;

inline void drawPrint(x, y, alignment)
    mlogText("draw", "print", in x, in y, in alignment);
end;

inline void drawBold(x, y, alignment, text...)
    drawText(x, y, alignment, text);
    drawText(x + 1, y, alignment, text);
end;

inline void drawText(x, y, alignment, text...)
    print(text);
    drawPrint(x, y, alignment);
end;

noinit var materialCount;

void updateDisplay()
    reset();
    clear(0, 0, 32);

    drawHeader();
    drawMaterials();
    drawUnit();
    drawUnits();
    drawflush(display1);
end;

const ROW_HEIGHT = 15;
const BAR_HEIGHT = 10;
const BAR_X = 22;

const ICON_SIZE = 16;
const ICON_X = 11;
const ICON_Y = +5;

const BAR_LENGTH = 122;
const BAR_LENGTH2 = 34;

const HEADER_X = 176 / 4 - 4;
const HEADER1_Y = 176 - 15;
const HEADER2_Y = HEADER1_Y - 56;
const HEADER3_Y = HEADER2_Y - 4 * ROW_HEIGHT - 5;
const HEADER4_Y = HEADER2_Y - 5 * ROW_HEIGHT - 5;

inline void drawHeader()
    col(%[gold]);
    drawBold(HEADER_X, HEADER1_Y, @bottom, "Goal");

    col(%[white]);
    var count = nextBlock + displayNextUnit;
    if count == 2 then
        image(HEADER_X - 15, HEADER1_Y - 22, nextBlock, 25, 0);
        image(HEADER_X + 15, HEADER1_Y - 22, displayNextUnit, 25, 0);
    elsif count == 1 then
        image(HEADER_X, HEADER1_Y - 24, nextBlock != null ? nextBlock : displayNextUnit, 32, 0);
    else
        image(HEADER_X, HEADER1_Y - 24, @hydrogen, 32, 360 - (@tick / 2) % 360);
    end;

    var t = floor(@second * TIME_COMPRESS);
    var m = t \ 60;
    var s = t % 60;
    print(m, ":", s < 10 ? "0" : "", s);
    drawText(170, 172, @topRight, "");

    count = titaniumDrill.@titanium;
    if count then
        var x = 170;
        drawText(x, 155, @topRight, "x", count);
        image(x - 20 - 7 * (count \ 10), 146, @titanium, 12, 0);
    end;

    count = thoriumDrill.@thorium;
    if count then
        var x = 133;
        drawText(x, 155, @topRight, "x", count);
        image(x - 20 - 7 * (count \ 10), 146, @thorium, 12, 0);
    end;
end;

inline void drawMaterials()
    var count, targetFactoryLead, targetFactorySilicon;
    var col = 0, y = HEADER2_Y - ROW_HEIGHT;

    if nextBlock == null then
        var unitCount;
        if displayNextUnit == @mono then
            targetFactoryLead = 15;
            targetFactorySilicon = 30;
            materialCount = 2;
            unitCount = displayMonos + 1;
        elsif displayNextUnit == @poly then
            targetFactoryLead = 15;
            targetFactorySilicon = 30;
            materialCount = 2;
            unitCount = 1;
        elsif displayNextUnit == @flare then
            targetFactoryLead = 0;
            targetFactorySilicon = 15;
            materialCount = 1;
            unitCount = displayFlares + 1;
        end;

        drawBold(BAR_X, HEADER2_Y, @bottomLeft, "Air Factory");
        var factoryProgress = factory.@progress;
        var reconstructorProgress = reconstructor.@progress;
        if factoryProgress + reconstructorProgress > 0 then
            if displayNextUnit == @poly then
                if reconstructorProgress > 0 then
                    drawItem(in 0, in HEADER2_Y - ROW_HEIGHT, 1, @mono, 1.0, 1.0, "1/1");
                else
                    drawItem(in 0, in HEADER2_Y - ROW_HEIGHT, 1, @mono, factoryProgress, 1.0, "1/1");
                end;
                drawItem(in 0, in HEADER2_Y - 2 * ROW_HEIGHT, 1, displayNextUnit, reconstructorProgress, 1.0, unitCount, "/8");
            else
                drawItem(in 0, in HEADER2_Y - ROW_HEIGHT, 1, displayNextUnit, factoryProgress, 1.0, unitCount, "/8");
            end;
        else
            for var item, target in
                @lead,    targetFactoryLead,
                @silicon, targetFactorySilicon
            do
                if target > 0 then
                    drawItem(in out col, in out y, 1, item, factory.sensor(item), target, target);
                end;
            end;
        end;
    elsif nextBlock == @titanium or nextBlock == @ore-titanium then
        drawBold(BAR_X, HEADER2_Y, @bottomLeft, mapAction);
        drawItem(in 0, in HEADER2_Y - ROW_HEIGHT, 1, @titanium, mapProgress, mapTotal, "x", mapSpots);
    else
        count = materialCount = totalTargets;
        drawBold(BAR_X, HEADER2_Y, @bottomLeft, "Materials");
        var columns = 1;

        if count then
            for var item, target in
                @copper,    targetCopper,
                @lead,      targetLead,
                @graphite,  targetGraphite,
                @silicon,   targetSilicon,
                @titanium,  targetTitanium,
                @metaglass, targetMetaglass
            do
                if target > 0 then
                    drawItem(in out col, in out y, columns, item, core.sensor(item), target, target);
                    if --count <= 0 then break; end;
                end;
            end;
        end;
    end;
end;

inline void drawUnit()
    col(%[white]);
    var y = materialCount < 4 ? HEADER3_Y : HEADER4_Y;
    drawBold(BAR_X, y, @bottomLeft, "Builder");

    if transportItem == null then
        drawUnit(@poly, 0, in y - ROW_HEIGHT);
    else
        var unitItem = @unit.@firstItem;
        drawUnit(transportItem, @unit.@totalItems * (unitItem == transportItem), in y - ROW_HEIGHT);
    end;
end;

inline void drawUnit(item, items, in out y)
     drawItem(in 0, in out y, 1, item, items, transportTarget, transportTarget);
end;

inline void drawItem(in out col, in out y, columns, item, current, target, text...)
    var barLength = BAR_LENGTH + 176 / 2 - (columns * 176 / 2);
    var textEnd = 170 - BAR_LENGTH + barLength;
    var length = min(barLength, barLength * current / target);

    var iconX = ICON_X + col * 176 / 2;
    var barX = BAR_X + col * 176 / 2;
    var textX = textEnd + col * 176 / 2;

    col(%[white]);
    image(iconX, y + ICON_Y, item, 16, 0);

    color(0,128,0,255);
    rect(barX, y, length, BAR_HEIGHT);

    color(0,255,0,255);
    lineRect(barX, y, barLength, BAR_HEIGHT);
    drawBold(textX, y + ICON_Y + 2, @right, text);

    if ++col >= columns then
        col = 0;
        y -= ROW_HEIGHT;
    end;
end;

inline void drawUnits()
    var x = 170;
    col(%[white]);
    drawUnitCount(@poly, displayPolys, ref x);
    drawUnitCount(@mono, displayMonos, ref x);
    drawUnitCount(@flare, displayFlares, ref x);
end;

inline void drawUnitCount(type, count, ref x)
    if count > 0 then
        image(x - 20, HEADER1_Y - 34, type, 12, 0);
        drawText(x, HEADER1_Y - 32, @right, "x", count);
        x -= 30;
    end;
end;

void updateMessage()
    println($"[gold]Building $nextBlock");
    println("==================================[]");
    println(status1);
    println($"$status2$item2 ($block2)");
    println(status3);
    printflush(message1);
end;

var lastTime;

inline void displayRecordAt(ref x, ref y, image, text)
    image(x, y, image, 14, 0);
    drawText(x + 56 - 12, y + 2, @right, text);

    y -= 15;
    if y < 10 then
        x += 58;
        y = 176 - 4 - 8;
    end;
end;


inline void displayRecord(ref x, ref y, record)
    var id = record % 1000;
    var icon = id > @blockCount ? lookup(:unit, id - @blockCount) : lookup(:block, id);
    var t = floor(TIME_COMPRESS * record / 1000000);
    var m = t \ 60;
    var s = t % 60;
    print(m, ":", s < 10 ? "0" : "");
    displayRecordAt(ref x, ref y, icon, s);
end;

inline void displayRecord2(ref x, ref y, record)
    displayRecordAt(ref x, ref y,  @core-shard, "0:00");
end;

void displayLog(page)
    var x = 3 + 8;
    var y = 176 - 5 - 8;
    reset();
    clear(0, 0, 32);

    lastTime = 0;
    var logPosition = bank1[511];
    var records = (511 - logPosition);
    numPages = 3 + (records - 1) \ 33;
    var position = 511 - 33 * (page - 1);
    while true do
        var record = bank1[--position];
        if !record then break; end;
        displayRecord(ref x, ref y, record);
    end;

    drawflush(display1);
end;

//external bank1[0 ... 4] var minX, minY, maxX, maxY;

remote processor1 var locations;
var mapw = @mapw, maph = @maph;
var frame = 0;

void displayOreMap()
    reset();
    clear(0, 0, 32);

    col(%[white]);
    drawText(4, 172, @topLeft, ++frame);

    scale(176 / mapw, 176 / maph);
    var imgSize = ceil(mapw / 176);
    //stroke(max(width, height));

    image(coreX, coreY, @core-shard, 7 * imgSize, 0);

    var index = -1, count = locations;
    for var i in 0 ... count do
        var id = bank1[++index];
        var img = id > 0 ? lookup(:item, id) : lookup(:block, -id);
        var size = 4 + sqrt(bank1[++index]);
        var x = bank1[++index];
        var y = bank1[++index];
        image(x, y, img, size * imgSize, 0);
    end;

    image(titaniumDrill.@x, titaniumDrill.@y, @pneumatic-drill, 4 * imgSize, 0);
    image(thoriumDrill.@x, thoriumDrill.@y, @laser-drill, 5 * imgSize, 0);

    reset();
    col(%[white]);
    drawText(175, 172, @topRight, index);

    drawflush(display1);
end;

void main()
    do
        ubind(@poly);
        core = ulocate(:building, :core, false);
    while core == null;
    coreX = core.@x;
    coreY = core.@y;

    printflush(null);
    drawflush(null);

    var nextSwitch = @second + 3;

    while true do
        if page == 0 then
            updateDisplay();
        elsif page == numPages - 1 then
            displayOreMap();
        else
            displayLog(page);
        end;

        updateMessage();

        if switch1.enabled then
            switch1.enabled = false;
            page = (page + 1) % numPages;
        end;
    end;
end;

void backgroundProcess()
    main();
end;
