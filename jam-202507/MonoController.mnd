#set target = 8;
#set syntax = strict;
//#set sort-variables;

module MonoController;

// At this point, we're only using a poly
const RADIUS = 7;
const capacity = 20;

linked message1;

noinit var core, coreX, coreY;

var min = 0, minOre = null;

noinit remote var
    copperTarget,
    sandTarget,
    leadTarget;

void backgroundProcess()
    do
        ubind(@mono);
    while @unit == null;

    var firstItem = @unit;

    do
        core = ulocate(:building, :core, false, out coreX, out coreY);
    while core == null;

    while true do
        ubind(@mono);
        if @unit == firstItem then
            printflush(message1);

            var lead = core.@lead - leadTarget;
            var sand = core.@sand - sandTarget;
            var copper = core.@copper - copperTarget;
            min = min(lead, sand, copper);
            minOre = min == sand ? @sand : min == lead ? @lead : @copper;
            println("minOre:", minOre);

            if min < 10 then min = -100; else min += 100; end;
        end;

        var flag = @unit.@flag;
        println("Unit flag: ", flag);
        if flag == 0 then
            findOreToMine(minOre);
        elsif flag == 1 then
            returnItems();
        else
            mine(flag);
        end;
    end;
end;

void findOreToMine(ore)
    if @unit.@firstItem != null then
        itemDrop(@air, capacity);
        if @unit.@firstItem != null then return; end;
    end;

    var x, y;
    ulocate(:ore, ore, out x, out y);
    approach(x, y, RADIUS);
    mine(x, y);
    flag((x * 1000 + y) * 32 + ore.@id * 2);
    println($"Found $ore at $x, $y");
end;

void mine(flag)
    print("Mining");

    flag \= 2;
    var ore = lookup(:item, flag % 16);
    flag \= 16;
    var y = flag % 1000;
    var x = flag \ 1000;

    var floorOre =
        ore == @copper ? @ore-copper :
        ore == @lead ? @ore-lead :
        @sand-floor;

    if ore != minOre then
        // We aren't mining the most needed ore
        if core.sensor(ore) > min then
            print(", switching to a more needed ore");
            flag(1);
            return;
        end;
    end;

    if @unit.@firstItem != ore then
        print(" (dropping)");
        itemDrop(@air, capacity);
    end;

    if @unit.@totalItems >= capacity then
        print(", full");
        approach(coreX, coreY, RADIUS);
        flag(1);
    else
        var floor = null;

        print($" at $x, $y");
        approach(x, y, RADIUS);
        var block = getBlock(x, y, , out floor);
        if floor != floorOre then
            if floor == null then
                println(": too far");
            else
                flag(1);
                println(": no ore!");
            end;
        elsif block == null then
            mine(x, y);
        else
            // The spot got built over!
            flag(1);
            println(": blocked!");
        end;
    end;

    println();
end;

void returnItems()
    print("Returning ore");
    approach(coreX, coreY, RADIUS);
    itemDrop(core, capacity);

    if @unit.@firstItem == null then
        println(" (finished)");
        flag(0);
    end;

    println();
end;
