  1531 instructions before optimizations.
    69 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
   153 instructions eliminated by Dead Code Elimination (10 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    73 instructions eliminated by Jump Optimization (5 iterations).
    53 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions modified by Expression Optimization (3 iterations).
     7 instructions eliminated by If Expression Optimization (4 iterations).
   113 instructions eliminated by Data Flow Optimization (10 passes, 31 iterations).
     1 loops improved by Loop Hoisting.
     4 instructions eliminated by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
    39 instructions eliminated by Function Inlining (11 iterations).
    21 function calls inlined by Function Inlining.
     4 instructions eliminated by Jump Straightening (5 iterations).
    12 instructions updated by Jump Threading.
     7 calls threaded by Jump Threading.
    30 instructions eliminated by Unreachable Code Elimination (2 iterations).
   985 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  * Unroll iteration loop at CoreBuilder.mnd:352:5               size   -19, benefit       39.0, efficiency   Infinity (-13 instructions)
    Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      945.0, efficiency   Infinity
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      280.0, efficiency      1.073
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:418:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2625.0, efficiency     15.909
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1312.5, efficiency      7.955
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      240.0, efficiency      1.832
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  * Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      945.0, efficiency   Infinity (-10 instructions)
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      280.0, efficiency      1.073
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:418:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2625.0, efficiency     15.909
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1312.5, efficiency      7.955
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      240.0, efficiency      1.832
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity (-29 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:418:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2625.0, efficiency     15.909
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1312.5, efficiency      7.955
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity (-6 instructions)
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:418:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +139, benefit     2625.0, efficiency     18.885
  ! Inline function call at CoreBuilder.mnd:211:13               size  +139, benefit     1312.5, efficiency      9.442
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity (-11 instructions)
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:418:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +167, benefit     2625.0, efficiency     15.719
  ! Inline function call at CoreBuilder.mnd:211:13               size  +167, benefit     1312.5, efficiency      7.859
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6135.5, efficiency    149.647
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2532.6, efficiency     37.800
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity (-6 instructions)
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:418:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +21, benefit      353.1, efficiency     16.815
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1986.3, efficiency     29.211
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +21, benefit     3531.3, efficiency    168.155
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      546.2, efficiency      8.033
  ! Inline function call at CoreBuilder.mnd:205:9                size  +167, benefit     2625.0, efficiency     15.719
  ! Inline function call at CoreBuilder.mnd:211:13               size  +167, benefit     1312.5, efficiency      7.859
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +21, benefit     2251.2, efficiency    107.199
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2532.6, efficiency     37.800
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity (-5 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:418:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1986.3, efficiency     29.211
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      546.2, efficiency      8.033
  ! Inline function call at CoreBuilder.mnd:205:9                size  +167, benefit     2625.0, efficiency     15.719
  ! Inline function call at CoreBuilder.mnd:211:13               size  +167, benefit     1312.5, efficiency      7.859
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity (-8 instructions)
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:418:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +167, benefit     2625.0, efficiency     15.719
  ! Inline function call at CoreBuilder.mnd:211:13               size  +167, benefit     1312.5, efficiency      7.859
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:418:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +167, benefit       75.0, efficiency      0.449
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +167, benefit     2625.0, efficiency     15.719
  ! Inline function call at CoreBuilder.mnd:211:13               size  +167, benefit     1312.5, efficiency      7.859
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 2: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      104.0, efficiency      4.727
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      280.0, efficiency      1.172
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      285.0, efficiency     11.400
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:418:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      247.0, efficiency      9.500
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit      100.0, efficiency      4.348
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +164, benefit     2625.0, efficiency     16.006
  ! Inline function call at CoreBuilder.mnd:211:13               size  +164, benefit     1312.5, efficiency      8.003
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      240.0, efficiency      2.000
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 3: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:412:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:417:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:435:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      104.0, efficiency      4.727
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:501:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:515:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      280.0, efficiency      1.172
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      285.0, efficiency     11.400
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:392:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:400:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:413:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:418:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:436:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:443:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:447:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:488:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:489:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:495:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      247.0, efficiency      9.500
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit      100.0, efficiency      4.348
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +164, benefit     2625.0, efficiency     16.006
  ! Inline function call at CoreBuilder.mnd:211:13               size  +164, benefit     1312.5, efficiency      8.003
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      240.0, efficiency      2.000
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-121 instructions):
 
    38 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    39 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
    40 label *label53
-    * set *tmp121 :buildBlockFromCfg.1*retval
    41 set :buildBlockFromCfg.1:cfg "AJTJK-battery1"
    42 setaddr :buildBlockFromCfg.1*retaddr *label54 (h:*label54)
    43 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label54) (h:*label54)
    44 label *label54
-    * set *tmp122 :buildBlockFromCfg.1*retval
    45 set :buildBlockFromCfg.1:cfg "ALTJL-battery2"
    46 setaddr :buildBlockFromCfg.1*retaddr *label55 (h:*label55)
    47 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label55) (h:*label55)
    48 label *label55
-    * set *tmp123 :buildBlockFromCfg.1*retval
    49 set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"
    50 setaddr :buildBlockFromCfg.1*retaddr *label56 (h:*label56)
    51 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label56) (h:*label56)
    52 label *label56
-    * set *tmp124 :buildBlockFromCfg.1*retval
    53 set .powerTarget 400
    54 set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"
    55 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
    57 label *label57
-    * set *tmp125 :buildBlockFromCfg.1*retval
    58 set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"
    59 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    60 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    61 label *label58
-    * set *tmp126 :buildBlockFromCfg.1*retval
    62 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    63 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    64 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
 
    90 setaddr :error*retaddr *label64 (h:*label64)
    91 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    92 label *label64
-    * set *tmp141 null
    93 jump *label63 always
    94 label *label62
-    * set *tmp141 null
    95 label *label63
    96 write @pneumatic-drill processor2 ".nextBlock"
    97 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
 
   113 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   114 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
   115 label *label66
-    * set *tmp146 :buildBlockFromCfg.1*retval
   116 set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"
   117 setaddr :buildBlockFromCfg.1*retaddr *label67 (h:*label67)
   118 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label67) (h:*label67)
   119 label *label67
-    * set *tmp147 :buildBlockFromCfg.1*retval
   120 set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"
   121 setaddr :buildBlockFromCfg.1*retaddr *label68 (h:*label68)
   122 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label68) (h:*label68)
   123 label *label68
-    * set *tmp148 :buildBlockFromCfg.1*retval
   124 set .graphiteSurplus 80
   125 set :buildBlockFromCfg:cfg "AÕFDJS-micro-processor9"
   126 set :buildBlockFromCfg:config processor10
 
   182 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   183 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   184 label *label83
-    * set *tmp152 :buildBlockFromCfg.1*retval
   185 set :buildBlockFromCfg.1:cfg "A©FHJU-unloader11"
   186 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   187 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   188 label *label84
-    * set *tmp153 :buildBlockFromCfg.1*retval
   189 set :buildBlockFromCfg.1:cfg "A~FJJV-overflow-gate12"
   190 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   191 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   192 label *label85
-    * set *tmp154 :buildBlockFromCfg.1*retval
   193 set :buildBlockFromCfg.1:cfg "A~DJJW-overflow-gate13"
   194 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   195 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   196 label *label86
-    * set *tmp155 :buildBlockFromCfg.1*retval
   197 set :buildBlockFromCfg.1:cfg "A¾BFLX-air-factory14"
   198 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   199 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   200 label *label87
-    * set *tmp156 :buildBlockFromCfg.1*retval
   201 set :setFlareTarget:target 1
   202 write :setFlareTarget:target .controller ".flareTarget"
   203 label *label88
 
   220 op lessThan *tmp158 *tmp157 300
   221 jump *label95 equal *tmp158 false
   222 jump *label93 always
-    * set *tmp159 null
   223 jump *label96 always
   224 label *label95
-    * set *tmp159 null
   225 label *label96
   226 label *label92
   227 read *tmp83 .controller ".monos"
 
   233 setaddr :buildBlockFromCfg.1*retaddr *label97 (h:*label97)
   234 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label97) (h:*label97)
   235 label *label97
-    * set *tmp161 :buildBlockFromCfg.1*retval
   236 set :buildBlockFromCfg.1:cfg "A{NJJZ-inverted-sorter16"
   237 setaddr :buildBlockFromCfg.1*retaddr *label98 (h:*label98)
   238 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label98) (h:*label98)
   239 label *label98
-    * set *tmp162 :buildBlockFromCfg.1*retval
   240 set :buildBlockFromCfg.1:cfg "ANOMJ[-kiln17"
   241 setaddr :buildBlockFromCfg.1*retaddr *label99 (h:*label99)
   242 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label99) (h:*label99)
   243 label *label99
-    * set *tmp163 :buildBlockFromCfg.1*retval
   244 set :buildBlockFromCfg.1:cfg "AKFRJa-multi-press23"
   245 setaddr :buildBlockFromCfg.1*retaddr *label100 (h:*label100)
   246 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label100) (h:*label100)
   247 label *label100
-    * set *tmp164 :buildBlockFromCfg.1*retval
   248 set :buildBlockFromCfg.1:cfg "A¡AOJ\-water-extractor18"
   249 setaddr :buildBlockFromCfg.1*retaddr *label101 (h:*label101)
   250 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label101) (h:*label101)
   251 label *label101
-    * set *tmp165 :buildBlockFromCfg.1*retval
   252 set :buildBlockFromCfg.1:cfg "AAKJ^-steam-generator20"
   253 setaddr :buildBlockFromCfg.1*retaddr *label102 (h:*label102)
   254 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label102) (h:*label102)
   255 label *label102
-    * set *tmp166 :buildBlockFromCfg.1*retval
   256 set :buildBlockFromCfg.1:cfg "ALQIJ_-silicon-smelter21"
   257 setaddr :buildBlockFromCfg.1*retaddr *label103 (h:*label103)
   258 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label103) (h:*label103)
   259 label *label103
-    * set *tmp167 :buildBlockFromCfg.1*retval
   260 set :buildBlockFromCfg.1:cfg "A©HFJb-unloader24"
   261 setaddr :buildBlockFromCfg.1*retaddr *label104 (h:*label104)
   262 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label104) (h:*label104)
   263 label *label104
-    * set *tmp168 :buildBlockFromCfg.1*retval
   264 set :buildBlockFromCfg.1:cfg "A{HDJc-inverted-sorter25"
   265 setaddr :buildBlockFromCfg.1*retaddr *label105 (h:*label105)
   266 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label105) (h:*label105)
   267 label *label105
-    * set *tmp169 :buildBlockFromCfg.1*retval
   268 set :buildBlockFromCfg.1:cfg "AÀF@Ld-additive-reconstructor26"
   269 setaddr :buildBlockFromCfg.1*retaddr *label106 (h:*label106)
   270 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label106) (h:*label106)
   271 label *label106
-    * set *tmp170 :buildBlockFromCfg.1*retval
   272 set .siliconSurplus 1000
   273 set .siliconMonoSurplus 20
   274 set .metaglassSurplus 100
 
   359 setaddr :error*retaddr *label127 (h:*label127)
   360 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   361 label *label127
-    * set *tmp195 null
   362 jump *label126 always
   363 label *label125
-    * set *tmp195 null
   364 label *label126
   365 write @laser-drill processor5 ":buildBlockAt:block"
   366 read *tmp54 processor3 ".drillX"
 
   386 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   387 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   388 label *label129
-    * set *tmp204 :buildRemoteBlock*retval
   389 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
   390 read *tmp60 processor3 ".water2X"
   391 set :buildRemoteBlock:x *tmp60
 
   394 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
   395 call *label38 *invalid :buildRemoteBlock*retval (m:*label130) (h:*label130)
   396 label *label130
-    * set *tmp205 :buildRemoteBlock*retval
   397 set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"
   398 read *tmp62 processor3 ".generatorX"
   399 set :buildRemoteBlock:x *tmp62
 
   412 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   413 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   414 label *label132
-    * set *tmp207 :buildRemoteBlock*retval
   415 set :buildRemoteBlock:cfg "AFFJT-power-node10"
   416 read *tmp66 processor3 ".node2X"
   417 set :buildRemoteBlock:x *tmp66
 
   420 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   421 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   422 label *label133
-    * set *tmp208 :buildRemoteBlock*retval
   423 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
   424 read *tmp68 processor3 ".panelX"
   425 set :buildRemoteBlock:x *tmp68
 
   428 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   429 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   430 label *label134
-    * set *tmp209 :buildRemoteBlock*retval
   431 set :buildRemoteBlock:cfg "AJTJK-battery1"
   432 read *tmp70 processor3 ".batteryX"
   433 set :buildRemoteBlock:x *tmp70
 
   451 op equal *tmp212 .thoriumContainer null
   452 jump *label137 equal *tmp212 false
   453 set .thoriumContainer .thoriumDrill
-    * set *tmp213 .thoriumContainer
   454 jump *label138 always
   455 label *label137
-    * set *tmp213 null
   456 label *label138
   457 write .thoriumDrill processor2 ".thoriumDrill"
   458 write .thoriumContainer processor2 ".thoriumContainer"
 
   482 setaddr :buildBlockFromCfg.1*retaddr *label144 (h:*label144)
   483 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   484 label *label144
-    * set *tmp217 :buildBlockFromCfg.1*retval
   485 set .metaglassSurplus 10
   486 set :setMegaTarget:target 1
   487 write :setMegaTarget:target .controller ".megaTarget"
 
   607 label *label170
   608 set *tmp242 null
   609 label *label171
-    * set *tmp239 *tmp242
   610 jump *label169 always
   611 label *label168
-    * set *tmp239 null
   612 label *label169
   613 set :fetchBlock:block .thoriumContainer
   614 set :fetchBlock:item @thorium
 
   621 set :setPolyTarget.1:target 4
   622 write :setPolyTarget.1:target .controller ".polyTarget"
   623 label *label179
-    * set *tmp248 null
   624 jump *label178 always
   625 label *label177
-    * set *tmp248 null
   626 label *label178
   627 label *label166
-    * set *tmp236 null
   628 jump *label165 always
   629 label *label164
   630 read *tmp83 .controller ".monos"
 
   666 label *label190
   667 set *tmp258 null
   668 label *label191
-    * set *tmp255 *tmp258
   669 jump *label189 always
   670 label *label188
-    * set *tmp255 null
   671 label *label189
   672 sensor *tmp259 .core @silicon
   673 op lessThan *tmp260 *tmp259 silicon
 
   708 label *label201
   709 set *tmp264 *tmp267
   710 label *label197
-    * set *tmp261 *tmp264
   711 jump *label195 always
   712 label *label194
-    * set *tmp261 null
   713 label *label195
   714 sensor *tmp268 AJTJK-battery1 @totalPower
   715 op lessThan *tmp269 *tmp268 .powerTarget
 
   737 label *label204
   738 set *tmp270 null
   739 label *label205
-    * set *tmp252 *tmp270
   740 jump *label187 always
   741 label *label186
-    * set *tmp252 null
   742 label *label187
   743 sensor *tmp274 .core @titanium
   744 op lessThan *tmp275 *tmp274 titanium
 
   875 label *label214
   876 set *tmp284 null
   877 label *label215
-    * set *tmp282 *tmp284
   878 jump *label213 always
   879 label *label212
   880 set :status1:text "Goal 11: Fetching titanium"
 
   886 setaddr :fetchBlock*retaddr *label243 (h:*label243)
   887 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   888 label *label243
-    * set *tmp282 null
   889 label *label213
   890 label *label185
   891 set *tmp250 null
   892 label *label181
-    * set *tmp236 *tmp250
   893 label *label165
   894 label *label163
   895 return :supplyBase*retaddr
 
   930 label *label248
   931 set :buildRemoteBlock*retval :buildBlock*retval
   932 jump *label244 always
-    * set *tmp311 null
   933 jump *label246 always
   934 label *label245
-    * set *tmp311 null
   935 label *label246
   936 set :buildRemoteBlock*retval false
   937 jump *label244 always
 
  1078 sensor *tmp319 @unit @mining
  1079 jump *label270 equal *tmp319 false
  1080 ucontrol stop
-    * set *tmp320 null
  1081 jump *label271 always
  1082 label *label270
-    * set *tmp320 null
  1083 label *label271
  1084 ubind :lineUpUnits:unit
  1085 label *label268
 
  1144 op land *tmp330 *tmp328 *tmp329
  1145 jump *label284 equal *tmp330 false
  1146 ucontrol itemDrop @air 1000
-    * set *tmp331 null
  1147 jump *label285 always
  1148 label *label284
-    * set *tmp331 null
  1149 label *label285
  1150 label *label282
  1151 sensor *tmp332 @unit :fetchBlock:item
 
  1182 setaddr :mineOre*retaddr *label291 (h:*label291)
  1183 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
  1184 label *label291
-    * set *tmp340 null
  1185 jump *label290 always
  1186 label *label289
-    * set *tmp340 null
  1187 label *label290
  1188 label *label287
  1189 return :supplyBlock*retaddr
 
  1219 op land *tmp346 *tmp344 *tmp345
  1220 jump *label300 equal *tmp346 false
  1221 ucontrol itemDrop @air 1000
-    * set *tmp347 null
  1222 jump *label301 always
  1223 label *label300
-    * set *tmp347 null
  1224 label *label301
  1225 label *label298
  1226 sensor *tmp348 @unit :supplyBlockFromCore:item
 
  1282 sensor *tmp376 :unpackCfg:type @thorium
  1283 set :unpackCfg:th *tmp376
  1284 sensor *tmp377 :unpackCfg:type @size
-    * set :unpackCfg:size *tmp377
  1285 label *label303
  1286 return :unpackCfg*retaddr
  1287 end
 
  1362 jump *label319 equal *tmp393 false
  1363 set *tmp391 false
  1364 jump *label318 always
-    * set *tmp394 null
  1365 jump *label320 always
  1366 label *label319
-    * set *tmp394 null
  1367 label *label320
  1368 sensor *tmp395 .core @lead
  1369 op lessThan *tmp396 *tmp395 lead
  1370 jump *label321 equal *tmp396 false
  1371 set *tmp391 false
  1372 jump *label318 always
-    * set *tmp397 null
  1373 jump *label322 always
  1374 label *label321
-    * set *tmp397 null
  1375 label *label322
  1376 sensor *tmp398 .core @graphite
  1377 op lessThan *tmp399 *tmp398 graphite
  1378 jump *label323 equal *tmp399 false
  1379 set *tmp391 false
  1380 jump *label318 always
-    * set *tmp400 null
  1381 jump *label324 always
  1382 label *label323
-    * set *tmp400 null
  1383 label *label324
  1384 sensor *tmp401 .core @silicon
  1385 op lessThan *tmp402 *tmp401 silicon
  1386 jump *label325 equal *tmp402 false
  1387 set *tmp391 false
  1388 jump *label318 always
-    * set *tmp403 null
  1389 jump *label326 always
  1390 label *label325
-    * set *tmp403 null
  1391 label *label326
  1392 sensor *tmp404 .core @titanium
  1393 op lessThan *tmp405 *tmp404 titanium
  1394 jump *label327 equal *tmp405 false
  1395 set *tmp391 false
  1396 jump *label318 always
-    * set *tmp406 null
  1397 jump *label328 always
  1398 label *label327
-    * set *tmp406 null
  1399 label *label328
  1400 sensor *tmp407 .core @metaglass
  1401 op lessThan *tmp408 *tmp407 metaglass
  1402 jump *label329 equal *tmp408 false
  1403 set *tmp391 false
  1404 jump *label318 always
-    * set *tmp409 null
  1405 jump *label330 always
  1406 label *label329
-    * set *tmp409 null
  1407 label *label330
  1408 sensor *tmp410 .core @thorium
  1409 op lessThan *tmp411 *tmp410 thorium
  1410 jump *label331 equal *tmp411 false
  1411 set *tmp391 false
  1412 jump *label318 always
-    * set *tmp412 null
  1413 jump *label332 always
  1414 label *label331
-    * set *tmp412 null
  1415 label *label332
  1416 set *tmp391 true
  1417 jump *label318 always
 
  1438 jump *label341 equal *tmp418 false
  1439 set *tmp416 false
  1440 jump *label340 always
-    * set *tmp419 null
  1441 jump *label342 always
  1442 label *label341
-    * set *tmp419 null
  1443 label *label342
  1444 sensor *tmp420 .core @lead
  1445 op lessThan *tmp421 *tmp420 lead
  1446 jump *label343 equal *tmp421 false
  1447 set *tmp416 false
  1448 jump *label340 always
-    * set *tmp422 null
  1449 jump *label344 always
  1450 label *label343
-    * set *tmp422 null
  1451 label *label344
  1452 sensor *tmp423 .core @graphite
  1453 op lessThan *tmp424 *tmp423 graphite
  1454 jump *label345 equal *tmp424 false
  1455 set *tmp416 false
  1456 jump *label340 always
-    * set *tmp425 null
  1457 jump *label346 always
  1458 label *label345
-    * set *tmp425 null
  1459 label *label346
  1460 sensor *tmp426 .core @silicon
  1461 op lessThan *tmp427 *tmp426 silicon
  1462 jump *label347 equal *tmp427 false
  1463 set *tmp416 false
  1464 jump *label340 always
-    * set *tmp428 null
  1465 jump *label348 always
  1466 label *label347
-    * set *tmp428 null
  1467 label *label348
  1468 sensor *tmp429 .core @titanium
  1469 op lessThan *tmp430 *tmp429 titanium
  1470 jump *label349 equal *tmp430 false
  1471 set *tmp416 false
  1472 jump *label340 always
-    * set *tmp431 null
  1473 jump *label350 always
  1474 label *label349
-    * set *tmp431 null
  1475 label *label350
  1476 sensor *tmp432 .core @metaglass
  1477 op lessThan *tmp433 *tmp432 metaglass
  1478 jump *label351 equal *tmp433 false
  1479 set *tmp416 false
  1480 jump *label340 always
-    * set *tmp434 null
  1481 jump *label352 always
  1482 label *label351
-    * set *tmp434 null
  1483 label *label352
  1484 sensor *tmp435 .core @thorium
  1485 op lessThan *tmp436 *tmp435 thorium
  1486 jump *label353 equal *tmp436 false
  1487 set *tmp416 false
  1488 jump *label340 always
-    * set *tmp437 null
  1489 jump *label354 always
  1490 label *label353
-    * set *tmp437 null
  1491 label *label354
  1492 set *tmp416 true
  1493 jump *label340 always
 
  1501 label *label338
  1502 jump *label337 always
  1503 label *label339
-    * set *tmp414 null
  1504 jump *label335 always
  1505 label *label334
-    * set *tmp414 null
  1506 label *label335
  1507 label *label304
  1508 return :meetTarget*retaddr
 
  1567 op notEqual *tmp449 *tmp448 null
  1568 jump *label366 equal *tmp449 false
  1569 ucontrol itemDrop @air 1000
-    * set *tmp450 null
  1570 jump *label367 always
  1571 label *label366
-    * set *tmp450 null
  1572 label *label367
  1573 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1574 label *label364
 
  1615 op greaterThan *tmp462 *tmp460 *tmp461
  1616 jump *label377 notEqual *tmp462 false
  1617 label *label379
-    * set *tmp457 null
  1618 jump *label375 always
  1619 label *label374
  1620 label *label380
 
  1625 label *label381
  1626 jump *label380 always
  1627 label *label382
-    * set *tmp457 null
  1628 label *label375
  1629 set :transportStatus:target 0
  1630 set :transportStatus:item null
 
  1659 setaddr :dropAll*retaddr *label390 (h:*label390)
  1660 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1661 label *label390
-    * set *tmp468 null
  1662 jump *label389 always
  1663 label *label388
-    * set *tmp468 null
  1664 label *label389
  1665 set :status3:text "Mining..."
  1666 setaddr :status3*retaddr *label391 (h:*label391)
 
  1676 op land *tmp473 *tmp471 *tmp472
  1677 jump *label395 equal *tmp473 false
  1678 jump *label394 always
-    * set *tmp474 null
  1679 jump *label396 always
  1680 label *label395
-    * set *tmp474 null
  1681 label *label396
  1682 ucontrol mine :mineOre:x :mineOre:y
  1683 op greaterThan *tmp475 @second :mineOre:stop
  1684 jump *label397 equal *tmp475 false
  1685 jump *label394 always
-    * set *tmp476 null
  1686 jump *label398 always
  1687 label *label397
-    * set *tmp476 null
  1688 label *label398
  1689 op equal *tmp477 .noTarget false
  1690 jump *label399 equal *tmp477 false
 
  1693 jump *label402 equal *tmp481 false
  1694 set *tmp479 false
  1695 jump *label401 always
-    * set *tmp482 null
  1696 jump *label403 always
  1697 label *label402
-    * set *tmp482 null
  1698 label *label403
  1699 sensor *tmp483 .core @lead
  1700 op lessThan *tmp484 *tmp483 lead
  1701 jump *label404 equal *tmp484 false
  1702 set *tmp479 false
  1703 jump *label401 always
-    * set *tmp485 null
  1704 jump *label405 always
  1705 label *label404
-    * set *tmp485 null
  1706 label *label405
  1707 sensor *tmp486 .core @graphite
  1708 op lessThan *tmp487 *tmp486 graphite
  1709 jump *label406 equal *tmp487 false
  1710 set *tmp479 false
  1711 jump *label401 always
-    * set *tmp488 null
  1712 jump *label407 always
  1713 label *label406
-    * set *tmp488 null
  1714 label *label407
  1715 sensor *tmp489 .core @silicon
  1716 op lessThan *tmp490 *tmp489 silicon
  1717 jump *label408 equal *tmp490 false
  1718 set *tmp479 false
  1719 jump *label401 always
-    * set *tmp491 null
  1720 jump *label409 always
  1721 label *label408
-    * set *tmp491 null
  1722 label *label409
  1723 sensor *tmp492 .core @titanium
  1724 op lessThan *tmp493 *tmp492 titanium
  1725 jump *label410 equal *tmp493 false
  1726 set *tmp479 false
  1727 jump *label401 always
-    * set *tmp494 null
  1728 jump *label411 always
  1729 label *label410
-    * set *tmp494 null
  1730 label *label411
  1731 sensor *tmp495 .core @metaglass
  1732 op lessThan *tmp496 *tmp495 metaglass
  1733 jump *label412 equal *tmp496 false
  1734 set *tmp479 false
  1735 jump *label401 always
-    * set *tmp497 null
  1736 jump *label413 always
  1737 label *label412
-    * set *tmp497 null
  1738 label *label413
  1739 sensor *tmp498 .core @thorium
  1740 op lessThan *tmp499 *tmp498 thorium
  1741 jump *label414 equal *tmp499 false
  1742 set *tmp479 false
  1743 jump *label401 always
-    * set *tmp500 null
  1744 jump *label415 always
  1745 label *label414
-    * set *tmp500 null
  1746 label *label415
  1747 set *tmp479 true
  1748 jump *label401 always
 
  1755 label *label416
  1756 set *tmp501 null
  1757 label *label417
-    * set *tmp478 *tmp501
  1758 jump *label400 always
  1759 label *label399
-    * set *tmp478 null
  1760 label *label400
  1761 label *label393
  1762 sensor *tmp502 @unit @totalItems
 
  1797 setaddr :error*retaddr *label425 (h:*label425)
  1798 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
  1799 label *label425
-    * set *tmp509 null
  1800 jump *label424 always
  1801 label *label423
-    * set *tmp509 null
  1802 label *label424
  1803 label *label422
  1804 return :locateOre*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-16 instructions):
 
   602 label *label175
   603 set *tmp245 null
   604 label *label173
-    * set *tmp242 *tmp245
   605 jump *label171 always
   606 label *label170
-    * set *tmp242 null
   607 label *label171
   608 jump *label169 always
   609 label *label168
 
   637 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   638 label *label184
   639 label *label182
-    * set *tmp250 null
   640 jump *label181 always
   641 label *label180
   642 set :supplyBase0:supplied false
 
   658 call *label26 *invalid :supplyBlock*retval (m:*label193) (h:*label193)
   659 label *label193
   660 set :supplyBase0:supplied true
-    * set *tmp258 :supplyBase0:supplied
   661 jump *label191 always
   662 label *label190
-    * set *tmp258 null
   663 label *label191
   664 jump *label189 always
   665 label *label188
 
   680 call *label26 *invalid :supplyBlock*retval (m:*label199) (h:*label199)
   681 label *label199
   682 set :supplyBase0:supplied true
-    * set *tmp264 :supplyBase0:supplied
   683 jump *label197 always
   684 label *label196
   685 sensor *tmp265 ALMQJN-silicon-smelter4 @sand
 
   700 label *label200
   701 set *tmp267 null
   702 label *label201
-    * set *tmp264 *tmp267
   703 label *label197
   704 jump *label195 always
   705 label *label194
 
   725 label *label206
   726 set *tmp273 null
   727 label *label207
-    * set *tmp270 *tmp273
   728 jump *label205 always
   729 label *label204
-    * set *tmp270 null
   730 label *label205
   731 jump *label187 always
   732 label *label186
 
   861 label *label221
   862 set *tmp288 *tmp291
   863 label *label217
-    * set *tmp284 *tmp288
   864 jump *label215 always
   865 label *label214
-    * set *tmp284 null
   866 label *label215
   867 jump *label213 always
   868 label *label212
 
   877 label *label243
   878 label *label213
   879 label *label185
-    * set *tmp250 null
   880 label *label181
   881 label *label165
   882 label *label163
 
   979 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   980 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   981 label *label253
-    * set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
   982 label *label252
   983 return :buildBlockFromCfg.1*retaddr
   984 end
 
  1268 set :unpackCfg:mg *tmp375
  1269 sensor *tmp376 :unpackCfg:type @thorium
  1270 set :unpackCfg:th *tmp376
-    * sensor *tmp377 :unpackCfg:type @size
  1271 label *label303
  1272 return :unpackCfg*retaddr
  1273 end
 
  1736 label *label401
  1737 jump *label416 equal *tmp479 false
  1738 jump *label394 always
-    * set *tmp501 null
  1739 jump *label417 always
  1740 label *label416
-    * set *tmp501 null
  1741 label *label417
  1742 jump *label400 always
  1743 label *label399

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-8 instructions):
 
   592 setaddr :supplyBlock*retaddr *label174 (h:*label174)
   593 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
   594 label *label174
-    * set *tmp245 null
   595 jump *label173 always
   596 label *label172
   597 set :supplyBlockFromCore:target .thoriumGenerator
 
   599 setaddr :supplyBlockFromCore*retaddr *label175 (h:*label175)
   600 call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
   601 label *label175
-    * set *tmp245 null
   602 label *label173
   603 jump *label171 always
   604 label *label170
 
   693 call *label26 *invalid :supplyBlock*retval (m:*label203) (h:*label203)
   694 label *label203
   695 set :supplyBase0:supplied true
-    * set *tmp267 :supplyBase0:supplied
   696 jump *label201 always
   697 label *label200
-    * set *tmp267 null
   698 label *label201
   699 label *label197
   700 jump *label195 always
 
   716 call *label26 *invalid :supplyBlock*retval (m:*label209) (h:*label209)
   717 label *label209
   718 set :supplyBase0:supplied true
-    * set *tmp273 :supplyBase0:supplied
   719 jump *label207 always
   720 label *label206
-    * set *tmp273 null
   721 label *label207
   722 jump *label205 always
   723 label *label204
 
   754 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   755 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
   756 label *label219
-    * set *tmp288 null
   757 jump *label217 always
   758 label *label216
   759 sensor *tmp289 .core @silicon
 
   852 label *label227
   853 set *tmp291 *tmp298
   854 label *label221
-    * set *tmp288 *tmp291
   855 label *label217
   856 jump *label215 always
   857 label *label214

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   779 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   780 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   781 label *label225
-    * set *tmp291 null
   782 jump *label221 always
   783 label *label220
   784 sensor *tmp296 .core @copper
 
   849 label *label231
   850 set *tmp298 *tmp301
   851 label *label227
-    * set *tmp291 *tmp298
   852 label *label221
   853 label *label217
   854 jump *label215 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
   792 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   793 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
   794 label *label229
-    * set *tmp298 null
   795 jump *label227 always
   796 label *label226
   797 sensor *tmp299 .core @lead
 
   846 label *label235
   847 set *tmp301 *tmp304
   848 label *label231
-    * set *tmp298 *tmp301
   849 label *label227
   850 label *label221
   851 label *label217

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
   805 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   806 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
   807 label *label233
-    * set *tmp301 null
   808 jump *label231 always
   809 label *label230
   810 sensor *tmp302 .core @metaglass
 
   843 label *label241
   844 set *tmp304 null
   845 label *label235
-    * set *tmp301 *tmp304
   846 label *label231
   847 label *label227
   848 label *label221

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
   818 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   819 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   820 label *label237
-    * set *tmp304 null
   821 jump *label235 always
   822 label *label234
   823 set :status1:text "Goal 10: supplying base"
 
   840 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   841 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   842 label *label241
-    * set *tmp304 null
   843 label *label235
   844 label *label231
   845 label *label227

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-69 instructions):
 
    26 write 511 bank1 511
    27 label *label50
    28 ubind @poly
-    * set *tmp117 @unit
-    * set .builder *tmp117
-    * ulocate building core false @copper .coreX .coreY *tmp119 *tmp118
-    * set .core *tmp118
+   29 set .builder @unit
+   30 ulocate building core false @copper .coreX .coreY *tmp119 .core
    31 label *label51
    32 op equal *tmp120 .core null
    33 jump *label50 notEqual *tmp120 false
 
    76 wait 1e-15
    77 read *tmp138 processor3 ":findDrillLocation*finished"
    78 jump *label61 equal *tmp138 false
-    * read *tmp135 processor3 ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp135
-    * read *tmp136 processor3 ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp136
-    * read *tmp139 processor3 ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp139
+   79 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
+   80 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
+   81 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
    82 op equal *tmp140 :buildFirstTitaniumDrill:result false
    83 jump *label62 equal *tmp140 false
    84 set :error:error "Cannot locate spot for titanium drill"
 
    97 wait 1e-15
    98 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    99 jump *label65 equal *tmp144 false
-    * read *tmp145 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp127 *tmp145
+  100 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
   101 jump *label59 always
   102 set *tmp127 null
   103 label *label59
 
   121 setaddr :buildBlockFromCfg*retaddr *label69 (h:*label69)
   122 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   123 label *label69
-    * set *tmp149 :buildBlockFromCfg*retval
-    * set .controller *tmp149
+  124 set .controller :buildBlockFromCfg*retval
   125 write processor1 .controller ".timer"
   126 write processor2 .controller ".display"
   127 write .core .controller ".core"
 
   300 label *label117
   301 write @ore-titanium processor2 ".nextBlock"
   302 ubind @flare
-    * read *tmp52 processor3 ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp52
+  303 read :blocksBuildTitaniumDrills:current processor3 ".locations"
   304 write .coreX processor3 ":findDrillLocation:x"
   305 write .coreY processor3 ":findDrillLocation:y"
   306 write @unit processor3 ":findDrillLocation:unit"
 
   343 wait 1e-15
   344 read *tmp192 processor3 ":layoutThoriumDrill*finished"
   345 jump *label124 equal *tmp192 false
-    * read *tmp193 processor3 ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp193
+  346 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
   347 op equal *tmp194 :buildThoriumDrill:result false
   348 jump *label125 equal *tmp194 false
   349 set :error:error "Cannot locate spot for thorium drill"
 
   367 wait 1e-15
   368 read *tmp202 processor5 ":buildBlockAt*finished"
   369 jump *label128 equal *tmp202 false
-    * read *tmp203 processor5 ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp203
+  370 read .thoriumDrill processor5 ":buildBlockAt*retval"
   371 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
-    * read *tmp56 processor3 ".water1X"
-    * set :buildRemoteBlock:x *tmp56
-    * read *tmp57 processor3 ".water1Y"
-    * set :buildRemoteBlock:y *tmp57
+  372 read :buildRemoteBlock:x processor3 ".water1X"
+  373 read :buildRemoteBlock:y processor3 ".water1Y"
   374 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   375 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   376 label *label129
   377 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
-    * read *tmp60 processor3 ".water2X"
-    * set :buildRemoteBlock:x *tmp60
-    * read *tmp61 processor3 ".water2Y"
-    * set :buildRemoteBlock:y *tmp61
+  378 read :buildRemoteBlock:x processor3 ".water2X"
+  379 read :buildRemoteBlock:y processor3 ".water2Y"
   380 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
   381 call *label38 *invalid :buildRemoteBlock*retval (m:*label130) (h:*label130)
   382 label *label130
   383 set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"
-    * read *tmp62 processor3 ".generatorX"
-    * set :buildRemoteBlock:x *tmp62
-    * read *tmp63 processor3 ".generatorY"
-    * set :buildRemoteBlock:y *tmp63
+  384 read :buildRemoteBlock:x processor3 ".generatorX"
+  385 read :buildRemoteBlock:y processor3 ".generatorY"
   386 setaddr :buildRemoteBlock*retaddr *label131 (h:*label131)
   387 call *label38 *invalid :buildRemoteBlock*retval (m:*label131) (h:*label131)
   388 label *label131
-    * set *tmp206 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp206
+  389 set .thoriumGenerator :buildRemoteBlock*retval
   390 set :buildRemoteBlock:cfg "AFFJT-power-node10"
-    * read *tmp64 processor3 ".node1X"
-    * set :buildRemoteBlock:x *tmp64
-    * read *tmp65 processor3 ".node1Y"
-    * set :buildRemoteBlock:y *tmp65
+  391 read :buildRemoteBlock:x processor3 ".node1X"
+  392 read :buildRemoteBlock:y processor3 ".node1Y"
   393 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   394 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   395 label *label132
   396 set :buildRemoteBlock:cfg "AFFJT-power-node10"
-    * read *tmp66 processor3 ".node2X"
-    * set :buildRemoteBlock:x *tmp66
-    * read *tmp67 processor3 ".node2Y"
-    * set :buildRemoteBlock:y *tmp67
+  397 read :buildRemoteBlock:x processor3 ".node2X"
+  398 read :buildRemoteBlock:y processor3 ".node2Y"
   399 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   400 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   401 label *label133
   402 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
-    * read *tmp68 processor3 ".panelX"
-    * set :buildRemoteBlock:x *tmp68
-    * read *tmp69 processor3 ".panelY"
-    * set :buildRemoteBlock:y *tmp69
+  403 read :buildRemoteBlock:x processor3 ".panelX"
+  404 read :buildRemoteBlock:y processor3 ".panelY"
   405 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   406 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   407 label *label134
   408 set :buildRemoteBlock:cfg "AJTJK-battery1"
-    * read *tmp70 processor3 ".batteryX"
-    * set :buildRemoteBlock:x *tmp70
-    * read *tmp71 processor3 ".batteryY"
-    * set :buildRemoteBlock:y *tmp71
+  409 read :buildRemoteBlock:x processor3 ".batteryX"
+  410 read :buildRemoteBlock:y processor3 ".batteryY"
   411 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   412 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   413 label *label135
-    * set *tmp210 :buildRemoteBlock*retval
-    * set .thoriumBattery *tmp210
+  414 set .thoriumBattery :buildRemoteBlock*retval
   415 set :buildRemoteBlock:cfg "A¨JJJ~-container52"
-    * read *tmp58 processor3 ".containerX"
-    * set :buildRemoteBlock:x *tmp58
-    * read *tmp59 processor3 ".containerY"
-    * set :buildRemoteBlock:y *tmp59
+  416 read :buildRemoteBlock:x processor3 ".containerX"
+  417 read :buildRemoteBlock:y processor3 ".containerY"
   418 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   419 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   420 label *label136
-    * set *tmp211 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp211
+  421 set .thoriumContainer :buildRemoteBlock*retval
   422 op equal *tmp212 .thoriumContainer null
   423 jump *label137 equal *tmp212 false
   424 set .thoriumContainer .thoriumDrill
 
   461 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
   462 label *label146
   463 read *tmp84 .controller ".polys"
-    * op sub *tmp218 *tmp84 1
-    * set :tmp *tmp218
+  464 op sub :tmp *tmp84 1
   465 write :tmp .controller ".polyTarget"
   466 write :tmp .controller ".polys"
   467 write :tmp processor2 ".polys"
-    * sensor *tmp219 AÁNBJe-multiplicative-reconstructor27 @x
-    * set :x *tmp219
-    * sensor *tmp220 AÁNBJe-multiplicative-reconstructor27 @y
-    * set :y *tmp220
+  468 sensor :x AÁNBJe-multiplicative-reconstructor27 @x
+  469 sensor :y AÁNBJe-multiplicative-reconstructor27 @y
   470 label *label147
   471 ucontrol move :x :y
   472 ucontrol payEnter
 
   500 label *label154
   501 label *label155
   502 jump *label157 equal true false
-    * op sub *tmp228 @thisy 16
-    * set :lineUpUnits:y *tmp228
+  503 op sub :lineUpUnits:y @thisy 16
   504 set :lineUpUnits:unit @mega
   505 setaddr :lineUpUnits*retaddr *label158 (h:*label158)
   506 call *label44 *invalid :lineUpUnits*retval (m:*label158) (h:*label158)
   507 label *label158
-    * op sub *tmp229 @thisy 20
-    * set :lineUpUnits:y *tmp229
+  508 op sub :lineUpUnits:y @thisy 20
   509 set :lineUpUnits:unit @poly
   510 setaddr :lineUpUnits*retaddr *label159 (h:*label159)
   511 call *label44 *invalid :lineUpUnits*retval (m:*label159) (h:*label159)
   512 label *label159
-    * op sub *tmp230 @thisy 24
-    * set :lineUpUnits:y *tmp230
+  513 op sub :lineUpUnits:y @thisy 24
   514 set :lineUpUnits:unit @mono
   515 setaddr :lineUpUnits*retaddr *label160 (h:*label160)
   516 call *label44 *invalid :lineUpUnits*retval (m:*label160) (h:*label160)
   517 label *label160
-    * op sub *tmp231 @thisy 28
-    * set :lineUpUnits:y *tmp231
+  518 op sub :lineUpUnits:y @thisy 28
   519 set :lineUpUnits:unit @flare
   520 setaddr :lineUpUnits*retaddr *label161 (h:*label161)
   521 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
 
   694 jump *label210 equal *tmp275 false
   695 sensor *tmp277 .core @titanium
   696 op sub *tmp278 titanium *tmp277
-    * op min *tmp279 7 *tmp278
-    * set *tmp276 *tmp279
+  697 op min *tmp276 7 *tmp278
   698 jump *label211 always
   699 label *label210
   700 set *tmp276 100
 
   726 setaddr :status1*retaddr *label222 (h:*label222)
   727 call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
   728 label *label222
-    * sensor *tmp292 .core @coal
-    * set :supplyBase0:coal *tmp292
-    * sensor *tmp293 .core @sand
-    * set :supplyBase0:sand *tmp293
+  729 sensor :supplyBase0:coal .core @coal
+  730 sensor :supplyBase0:sand .core @sand
   731 op lessThan *tmp294 :supplyBase0:coal :supplyBase0:sand
   732 jump *label223 equal *tmp294 false
   733 set *tmp295 @coal
 
   785 setaddr :status1*retaddr *label238 (h:*label238)
   786 call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
   787 label *label238
-    * sensor *tmp305 .core @coal
-    * set :supplyBase0:coal.1 *tmp305
-    * sensor *tmp306 .core @sand
-    * set :supplyBase0:sand.1 *tmp306
+  788 sensor :supplyBase0:coal.1 .core @coal
+  789 sensor :supplyBase0:sand.1 .core @sand
   790 op lessThanEq *tmp307 :supplyBase0:coal.1 :supplyBase0:sand.1
   791 jump *label239 equal *tmp307 false
   792 set *tmp308 @coal
 
   916 return :buildBlockFromCfg*retaddr
   917 end
   918 label *label40
-    * set *tmp314 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp314
+  919 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   920 set :buildBlockFromCfg:config null
   921 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   922 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
 
   978 label *label43
   979 label *label260
   980 ubind :flagUnits:unit
-    * set *tmp315 @unit
-    * set :flagUnits:firstUnit *tmp315
+  981 set :flagUnits:firstUnit @unit
   982 label *label261
   983 op equal *tmp316 :flagUnits:firstUnit null
   984 jump *label260 notEqual *tmp316 false
 
   999 ubind :lineUpUnits:unit
  1000 set :lineUpUnits:firstUnit @unit
  1001 label *label267
-    * sensor *tmp318 @unit @flag
-    * set :lineUpUnits:x *tmp318
+ 1002 sensor :lineUpUnits:x @unit @flag
  1003 ucontrol itemDrop @air 1000
  1004 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1005 sensor *tmp319 @unit @mining
 
  1028 setaddr :status2*retaddr *label274 (h:*label274)
  1029 call *label12 *invalid :status2*retval (m:*label274) (h:*label274)
  1030 label *label274
-    * set *tmp322 :mineOre.1:ore
-    * set :mineOre:ore *tmp322
+ 1031 set :mineOre:ore :mineOre.1:ore
  1032 set :mineOre:amount 30
  1033 set :mineOre:block .core
  1034 setaddr :mineOre*retaddr *label275 (h:*label275)
 
  1039 end
  1040 label *label25
  1041 sensor *tmp323 :fetchBlock:block @itemCapacity
-    * op min *tmp324 *tmp323 30
-    * set :transportStatus:target *tmp324
+ 1042 op min :transportStatus:target *tmp323 30
  1043 set :transportStatus:item :fetchBlock:item
  1044 setaddr :transportStatus*retaddr *label277 (h:*label277)
  1045 call *label14 *invalid :transportStatus*retval (m:*label277) (h:*label277)
 
  1062 label *label280
  1063 label *label281
  1064 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp327 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp327
+ 1065 sensor :fetchBlock:unitItem @unit @firstItem
  1066 op notEqual *tmp328 :fetchBlock:unitItem null
  1067 op notEqual *tmp329 :fetchBlock:unitItem :fetchBlock:item
  1068 op land *tmp330 *tmp328 *tmp329
 
  1093 setaddr :status2*retaddr *label288 (h:*label288)
  1094 call *label12 *invalid :status2*retval (m:*label288) (h:*label288)
  1095 label *label288
-    * sensor *tmp336 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp336
+ 1096 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1097 sensor *tmp337 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp338 :supplyBlock:blockCapacity *tmp337
-    * set :supplyBlock:missing *tmp338
+ 1098 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp337
  1099 op greaterThan *tmp339 :supplyBlock:missing 0
  1100 jump *label289 equal *tmp339 false
  1101 set :mineOre:ore :supplyBlock:ore
 
  1112 end
  1113 label *label27
  1114 sensor *tmp341 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp342 *tmp341 30
-    * set :transportStatus:target *tmp342
+ 1115 op min :transportStatus:target *tmp341 30
  1116 set :transportStatus:item :supplyBlockFromCore:item
  1117 setaddr :transportStatus*retaddr *label293 (h:*label293)
  1118 call *label14 *invalid :transportStatus*retval (m:*label293) (h:*label293)
 
  1133 label *label296
  1134 label *label297
  1135 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp343 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp343
+ 1136 sensor :supplyBlockFromCore:unitItem @unit @firstItem
  1137 op notEqual *tmp344 :supplyBlockFromCore:unitItem null
  1138 op notEqual *tmp345 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
  1139 op land *tmp346 *tmp344 *tmp345
 
  1163 op add :unpackCfg:index :unpackCfg:index 1
  1164 read *tmp353 :unpackCfg:cfg *tmp352
  1165 op sub *tmp354 *tmp353 74
-    * lookup block *tmp355 *tmp354
-    * set :unpackCfg:type *tmp355
+ 1166 lookup block :unpackCfg:type *tmp354
  1167 set *tmp356 :unpackCfg:index
  1168 op add :unpackCfg:index :unpackCfg:index 1
  1169 read *tmp357 :unpackCfg:cfg *tmp356
  1170 op sub *tmp358 *tmp357 74
-    * op div *tmp359 *tmp358 2
-    * set :unpackCfg:x *tmp359
+ 1171 op div :unpackCfg:x *tmp358 2
  1172 set *tmp360 :unpackCfg:index
  1173 op add :unpackCfg:index :unpackCfg:index 1
  1174 read *tmp361 :unpackCfg:cfg *tmp360
  1175 op sub *tmp362 *tmp361 74
-    * op div *tmp363 *tmp362 2
-    * set :unpackCfg:y *tmp363
+ 1176 op div :unpackCfg:y *tmp362 2
  1177 set *tmp364 :unpackCfg:index
  1178 op add :unpackCfg:index :unpackCfg:index 1
  1179 read *tmp365 :unpackCfg:cfg *tmp364
-    * op sub *tmp366 *tmp365 74
-    * set :unpackCfg:rotation *tmp366
+ 1180 op sub :unpackCfg:rotation *tmp365 74
  1181 set *tmp367 :unpackCfg:index
  1182 op add :unpackCfg:index :unpackCfg:index 1
  1183 read *tmp368 :unpackCfg:cfg *tmp367
-    * op sub *tmp369 *tmp368 74
-    * set :unpackCfg:ind *tmp369
-    * sensor *tmp370 :unpackCfg:type @copper
-    * set :unpackCfg:cu *tmp370
-    * sensor *tmp371 :unpackCfg:type @lead
-    * set :unpackCfg:pb *tmp371
-    * sensor *tmp372 :unpackCfg:type @graphite
-    * set :unpackCfg:gr *tmp372
-    * sensor *tmp373 :unpackCfg:type @silicon
-    * set :unpackCfg:si *tmp373
-    * sensor *tmp374 :unpackCfg:type @titanium
-    * set :unpackCfg:ti *tmp374
-    * sensor *tmp375 :unpackCfg:type @metaglass
-    * set :unpackCfg:mg *tmp375
-    * sensor *tmp376 :unpackCfg:type @thorium
-    * set :unpackCfg:th *tmp376
+ 1184 op sub :unpackCfg:ind *tmp368 74
+ 1185 sensor :unpackCfg:cu :unpackCfg:type @copper
+ 1186 sensor :unpackCfg:pb :unpackCfg:type @lead
+ 1187 sensor :unpackCfg:gr :unpackCfg:type @graphite
+ 1188 sensor :unpackCfg:si :unpackCfg:type @silicon
+ 1189 sensor :unpackCfg:ti :unpackCfg:type @titanium
+ 1190 sensor :unpackCfg:mg :unpackCfg:type @metaglass
+ 1191 sensor :unpackCfg:th :unpackCfg:type @thorium
  1192 label *label303
  1193 return :unpackCfg*retaddr
  1194 end
 
  1237 write :meetTarget:metaglass processor2 ".targetMetaglass"
  1238 write :meetTarget:thorium processor2 ".targetThorium"
  1239 set copper :meetTarget:copper
-    * op add *tmp380 :meetTarget:lead .leadSurplus
-    * set lead *tmp380
+ 1240 op add lead :meetTarget:lead .leadSurplus
  1241 set graphite :meetTarget:graphite
  1242 set silicon :meetTarget:silicon
  1243 set titanium :meetTarget:titanium
 
  1440 wait 1e-15
  1441 read *tmp446 processor5 ":buildBlockAt*finished"
  1442 jump *label358 equal *tmp446 false
-    * read *tmp447 processor5 ":buildBlockAt*retval"
-    * set :buildBlock:built *tmp447
+ 1443 read :buildBlock:built processor5 ":buildBlockAt*retval"
  1444 write false .controller ":buildStop*finished"
  1445 write 2 .controller "@counter"
  1446 set :buildBlock*retval :buildBlock:built
 
  1509 setaddr :moveToBlock*retaddr *label376 (h:*label376)
  1510 call *label20 *invalid :moveToBlock*retval (m:*label376) (h:*label376)
  1511 label *label376
-    * sensor *tmp458 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp458
+ 1512 sensor :depositItems:cap :depositItems:block @itemCapacity
  1513 label *label377
  1514 ucontrol itemDrop :depositItems:block 30
  1515 label *label378
 
  1539 return :depositItems*retaddr
  1540 end
  1541 label *label23
-    * op min *tmp465 :mineOre:amount 30
-    * set :mineOre:amount *tmp465
+ 1542 op min :mineOre:amount :mineOre:amount 30
  1543 set :transportStatus:target :mineOre:amount
  1544 set :transportStatus:item :mineOre:ore
  1545 setaddr :transportStatus*retaddr *label385 (h:*label385)
 
  1569 setaddr :status3*retaddr *label391 (h:*label391)
  1570 call *label13 *invalid :status3*retval (m:*label391) (h:*label391)
  1571 label *label391
-    * op add *tmp469 @second 10
-    * set :mineOre:stop *tmp469
+ 1572 op add :mineOre:stop @second 10
  1573 label *label392
-    * sensor *tmp470 @unit @firstItem
-    * set :mineOre:item *tmp470
+ 1574 sensor :mineOre:item @unit @firstItem
  1575 op notEqual *tmp471 :mineOre:item null
  1576 op notEqual *tmp472 :mineOre:item :mineOre:ore
  1577 op land *tmp473 *tmp471 *tmp472

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   499 call *label43 *invalid :flagUnits*retval (m:*label154) (h:*label154)
   500 label *label154
   501 label *label155
-    * jump *label157 equal true false
   502 op sub :lineUpUnits:y @thisy 16
   503 set :lineUpUnits:unit @mega
   504 setaddr :lineUpUnits*retaddr *label158 (h:*label158)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-73 instructions):
 
    29 set .builder @unit
    30 ulocate building core false @copper .coreX .coreY *tmp119 .core
    31 label *label51
-    * op equal *tmp120 .core null
-    * jump *label50 notEqual *tmp120 false
+   32 jump *label50 equal .core null
    33 label *label52
    34 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    35 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
    78 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
    79 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
    80 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
-    * op equal *tmp140 :buildFirstTitaniumDrill:result false
-    * jump *label62 equal *tmp140 false
+   81 jump *label62 notEqual :buildFirstTitaniumDrill:result false
    82 set :error:error "Cannot locate spot for titanium drill"
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
 
   208 call *label35 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   209 label *label94
   210 sensor *tmp157 AJTJK-battery1 @totalPower
-    * op lessThan *tmp158 *tmp157 300
-    * jump *label95 equal *tmp158 false
+  211 jump *label95 greaterThanEq *tmp157 300
   212 jump *label93 always
   213 jump *label96 always
   214 label *label95
   215 label *label96
   216 label *label92
   217 read *tmp83 .controller ".monos"
-    * op lessThan *tmp160 *tmp83 3
-    * jump *label91 notEqual *tmp160 false
+  218 jump *label91 lessThan *tmp83 3
   219 label *label93
   220 set .siliconSurplus 65
   221 set :buildBlockFromCfg.1:cfg "A©NHJY-unloader15"
 
   273 label *label109
   274 label *label110
   275 read *tmp84 .controller ".polys"
-    * op lessThan *tmp171 *tmp84 2
-    * jump *label112 equal *tmp171 false
+  276 jump *label112 greaterThanEq *tmp84 2
   277 setaddr :supplyBase*retaddr *label113 (h:*label113)
   278 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   279 label *label113
 
   285 label *label114
   286 label *label115
   287 read *tmp82 .controller ".flares"
-    * op lessThan *tmp172 *tmp82 2
-    * jump *label117 equal *tmp172 false
+  288 jump *label117 greaterThanEq *tmp82 2
   289 setaddr :supplyBase*retaddr *label118 (h:*label118)
   290 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   291 label *label118
 
   338 read *tmp192 processor3 ":layoutThoriumDrill*finished"
   339 jump *label124 equal *tmp192 false
   340 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
-    * op equal *tmp194 :buildThoriumDrill:result false
-    * jump *label125 equal *tmp194 false
+  341 jump *label125 notEqual :buildThoriumDrill:result false
   342 set :error:error "Cannot locate spot for thorium drill"
   343 setaddr :error*retaddr *label127 (h:*label127)
   344 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
 
   412 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   413 label *label136
   414 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp212 .thoriumContainer null
-    * jump *label137 equal *tmp212 false
+  415 jump *label137 notEqual .thoriumContainer null
   416 set .thoriumContainer .thoriumDrill
   417 jump *label138 always
   418 label *label137
 
   430 write null processor2 ".nextBlock"
   431 label *label140
   432 read *tmp84 .controller ".polys"
-    * op lessThan *tmp216 *tmp84 3
-    * jump *label142 equal *tmp216 false
+  433 jump *label142 greaterThanEq *tmp84 3
   434 setaddr :supplyBase*retaddr *label143 (h:*label143)
   435 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   436 label *label143
 
   463 ucontrol payEnter
   464 label *label148
   465 read *tmp85 .controller ".megas"
-    * op equal *tmp221 *tmp85 false
-    * jump *label147 notEqual *tmp221 false
+  466 jump *label147 equal *tmp85 false
   467 label *label149
   468 write true .controller ".finished"
   469 control enabled processor8 false
 
   532 call *label11 *invalid :status1*retval (m:*label167) (h:*label167)
   533 label *label167
   534 sensor *tmp237 .thoriumBattery @totalPower
-    * op lessThan *tmp238 *tmp237 2000
-    * jump *label168 equal *tmp238 false
+  535 jump *label168 greaterThanEq *tmp237 2000
   536 sensor *tmp240 .thoriumGenerator @coal
-    * op equal *tmp241 *tmp240 0
-    * jump *label170 equal *tmp241 false
+  537 jump *label170 notEqual *tmp240 0
   538 sensor *tmp243 .core @coal
-    * op lessThan *tmp244 *tmp243 50
-    * jump *label172 equal *tmp244 false
+  539 jump *label172 greaterThanEq *tmp243 50
   540 set :supplyBlock:block .thoriumGenerator
   541 set :supplyBlock:ore @coal
   542 setaddr :supplyBlock*retaddr *label174 (h:*label174)
 
   562 call *label25 *invalid :fetchBlock*retval (m:*label176) (h:*label176)
   563 label *label176
   564 sensor *tmp246 .core @thorium
-    * op greaterThan *tmp247 *tmp246 400
-    * jump *label177 equal *tmp247 false
+  565 jump *label177 lessThanEq *tmp246 400
   566 set :setPolyTarget.1:target 4
   567 write :setPolyTarget.1:target .controller ".polyTarget"
   568 label *label179
 
   573 jump *label165 always
   574 label *label164
   575 read *tmp83 .controller ".monos"
-    * op greaterThan *tmp249 *tmp83 1
-    * jump *label180 equal *tmp249 false
+  576 jump *label180 lessThanEq *tmp83 1
   577 set :status1:text "Phase 1: supplying base"
   578 setaddr :status1*retaddr *label183 (h:*label183)
   579 call *label11 *invalid :status1*retval (m:*label183) (h:*label183)
 
   586 jump *label181 always
   587 label *label180
   588 set :supplyBase0:supplied false
-    * op equal *tmp251 A©JNJP-unloader6 null
-    * jump *label186 equal *tmp251 false
+  589 jump *label186 notEqual A©JNJP-unloader6 null
   590 sensor *tmp253 .core @graphite
-    * op lessThan *tmp254 *tmp253 graphite
-    * jump *label188 equal *tmp254 false
+  591 jump *label188 greaterThanEq *tmp253 graphite
   592 sensor *tmp256 AJEMJJ-graphite-press0 @coal
-    * op lessThan *tmp257 *tmp256 5
-    * jump *label190 equal *tmp257 false
+  593 jump *label190 greaterThanEq *tmp256 5
   594 set :status1:text "Goal 1: graphite requirement"
   595 setaddr :status1*retaddr *label192 (h:*label192)
   596 call *label11 *invalid :status1*retval (m:*label192) (h:*label192)
 
   608 label *label188
   609 label *label189
   610 sensor *tmp259 .core @silicon
-    * op lessThan *tmp260 *tmp259 silicon
-    * jump *label194 equal *tmp260 false
+  611 jump *label194 greaterThanEq *tmp259 silicon
   612 sensor *tmp262 ALMQJN-silicon-smelter4 @coal
-    * op lessThan *tmp263 *tmp262 5
-    * jump *label196 equal *tmp263 false
+  613 jump *label196 greaterThanEq *tmp262 5
   614 set :status1:text "Goal 2: coal for silicon requirement"
   615 setaddr :status1*retaddr *label198 (h:*label198)
   616 call *label11 *invalid :status1*retval (m:*label198) (h:*label198)
 
   624 jump *label197 always
   625 label *label196
   626 sensor *tmp265 ALMQJN-silicon-smelter4 @sand
-    * op lessThan *tmp266 *tmp265 5
-    * jump *label200 equal *tmp266 false
+  627 jump *label200 greaterThanEq *tmp265 5
   628 set :status1:text "Goal 3: sand for silicon requirement"
   629 setaddr :status1*retaddr *label202 (h:*label202)
   630 call *label11 *invalid :status1*retval (m:*label202) (h:*label202)
 
   643 label *label194
   644 label *label195
   645 sensor *tmp268 AJTJK-battery1 @totalPower
-    * op lessThan *tmp269 *tmp268 .powerTarget
-    * jump *label204 equal *tmp269 false
+  646 jump *label204 greaterThanEq *tmp268 .powerTarget
   647 sensor *tmp271 AJRJM-combustion-generator3 @coal
-    * op lessThan *tmp272 *tmp271 2
-    * jump *label206 equal *tmp272 false
+  648 jump *label206 greaterThanEq *tmp271 2
   649 set :status1:text "Goal 4: supplying generator"
   650 setaddr :status1*retaddr *label208 (h:*label208)
   651 call *label11 *invalid :status1*retval (m:*label208) (h:*label208)
 
   666 label *label186
   667 label *label187
   668 sensor *tmp274 .core @titanium
-    * op lessThan *tmp275 *tmp274 titanium
-    * jump *label210 equal *tmp275 false
+  669 jump *label210 greaterThanEq *tmp274 titanium
   670 sensor *tmp277 .core @titanium
   671 op sub *tmp278 titanium *tmp277
   672 op min *tmp276 7 *tmp278
 
   676 label *label211
   677 set :supplyBase0:titaniumTrigger *tmp276
   678 sensor *tmp280 .titaniumDrill @titanium
-    * op lessThan *tmp281 *tmp280 :supplyBase0:titaniumTrigger
-    * jump *label212 equal *tmp281 false
-    * op equal *tmp283 :supplyBase0:supplied false
-    * jump *label214 equal *tmp283 false
+  679 jump *label212 greaterThanEq *tmp280 :supplyBase0:titaniumTrigger
+  680 jump *label214 notEqual :supplyBase0:supplied false
   681 sensor *tmp285 AJTJK-battery1 @totalPower
   682 op mul *tmp286 A©JNJP-unloader6 .powerTarget
-    * op lessThan *tmp287 *tmp285 *tmp286
-    * jump *label216 equal *tmp287 false
+  683 jump *label216 greaterThanEq *tmp285 *tmp286
   684 set :status1:text "Goal 5: supplying generator"
   685 setaddr :status1*retaddr *label218 (h:*label218)
   686 call *label11 *invalid :status1*retval (m:*label218) (h:*label218)
 
   692 jump *label217 always
   693 label *label216
   694 sensor *tmp289 .core @silicon
-    * op lessThan *tmp290 *tmp289 silicon
-    * jump *label220 equal *tmp290 false
+  695 jump *label220 greaterThanEq *tmp289 silicon
   696 set :status1:text "Goal 6: silicon requirement"
   697 setaddr :status1*retaddr *label222 (h:*label222)
   698 call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
   699 label *label222
   700 sensor :supplyBase0:coal .core @coal
   701 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp294 :supplyBase0:coal :supplyBase0:sand
-    * jump *label223 equal *tmp294 false
+  702 jump *label223 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   703 set *tmp295 @coal
   704 jump *label224 always
   705 label *label223
 
   713 jump *label221 always
   714 label *label220
   715 sensor *tmp296 .core @copper
-    * op lessThan *tmp297 *tmp296 copper
-    * jump *label226 equal *tmp297 false
+  716 jump *label226 greaterThanEq *tmp296 copper
   717 set :status1:text "Goal 7: copper requirement"
   718 setaddr :status1*retaddr *label228 (h:*label228)
   719 call *label11 *invalid :status1*retval (m:*label228) (h:*label228)
 
   725 jump *label227 always
   726 label *label226
   727 sensor *tmp299 .core @lead
-    * op lessThan *tmp300 *tmp299 lead
-    * jump *label230 equal *tmp300 false
+  728 jump *label230 greaterThanEq *tmp299 lead
   729 set :status1:text "Goal 8: lead requirement"
   730 setaddr :status1*retaddr *label232 (h:*label232)
   731 call *label11 *invalid :status1*retval (m:*label232) (h:*label232)
 
   737 jump *label231 always
   738 label *label230
   739 sensor *tmp302 .core @metaglass
-    * op lessThan *tmp303 *tmp302 metaglass
-    * jump *label234 equal *tmp303 false
+  740 jump *label234 greaterThanEq *tmp302 metaglass
   741 set :status1:text "Goal 9: metaglass requirement"
   742 setaddr :status1*retaddr *label236 (h:*label236)
   743 call *label11 *invalid :status1*retval (m:*label236) (h:*label236)
 
   754 label *label238
   755 sensor :supplyBase0:coal.1 .core @coal
   756 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp307 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label239 equal *tmp307 false
+  757 jump *label239 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
   758 set *tmp308 @coal
   759 jump *label240 always
   760 label *label239
 
   793 end
   794 label *label38
   795 op add *tmp309 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp310 *tmp309 0
-    * jump *label245 equal *tmp310 false
+  796 jump *label245 lessThanEq *tmp309 0
   797 set :unpackCfg:cfg :buildRemoteBlock:cfg
   798 setaddr :unpackCfg*retaddr *label247 (h:*label247)
   799 call *label29 *invalid :unpackCfg*retval (m:*label247) (h:*label247)
 
   945 ubind :flagUnits:unit
   946 set :flagUnits:firstUnit @unit
   947 label *label261
-    * op equal *tmp316 :flagUnits:firstUnit null
-    * jump *label260 notEqual *tmp316 false
+  948 jump *label260 equal :flagUnits:firstUnit null
   949 label *label262
   950 set :flagUnits:x @thisx
   951 label *label263
 
   953 op add :flagUnits:x :flagUnits:x 4
   954 ubind :flagUnits:unit
   955 label *label264
-    * op notEqual *tmp317 @unit :flagUnits:firstUnit
-    * jump *label263 notEqual *tmp317 false
+  956 jump *label263 notEqual @unit :flagUnits:firstUnit
   957 label *label265
   958 label *label259
   959 return :flagUnits*retaddr
 
   973 label *label271
   974 ubind :lineUpUnits:unit
   975 label *label268
-    * op notEqual *tmp321 @unit :lineUpUnits:firstUnit
-    * jump *label267 notEqual *tmp321 false
+  976 jump *label267 notEqual @unit :lineUpUnits:firstUnit
   977 label *label269
   978 label *label266
   979 return :lineUpUnits*retaddr
 
  1058 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1059 sensor *tmp337 :supplyBlock:block :supplyBlock:ore
  1060 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp337
-    * op greaterThan *tmp339 :supplyBlock:missing 0
-    * jump *label289 equal *tmp339 false
+ 1061 jump *label289 lessThanEq :supplyBlock:missing 0
  1062 set :mineOre:ore :supplyBlock:ore
  1063 set :mineOre:amount :supplyBlock:blockCapacity
  1064 set :mineOre:block :supplyBlock:block
 
  1225 write copper processor7 ".copperTarget"
  1226 label *label315
  1227 sensor *tmp392 .core @copper
-    * op lessThan *tmp393 *tmp392 copper
-    * jump *label319 equal *tmp393 false
+ 1228 jump *label319 greaterThanEq *tmp392 copper
  1229 set *tmp391 false
  1230 jump *label318 always
  1231 jump *label320 always
  1232 label *label319
  1233 label *label320
  1234 sensor *tmp395 .core @lead
-    * op lessThan *tmp396 *tmp395 lead
-    * jump *label321 equal *tmp396 false
+ 1235 jump *label321 greaterThanEq *tmp395 lead
  1236 set *tmp391 false
  1237 jump *label318 always
  1238 jump *label322 always
  1239 label *label321
  1240 label *label322
  1241 sensor *tmp398 .core @graphite
-    * op lessThan *tmp399 *tmp398 graphite
-    * jump *label323 equal *tmp399 false
+ 1242 jump *label323 greaterThanEq *tmp398 graphite
  1243 set *tmp391 false
  1244 jump *label318 always
  1245 jump *label324 always
  1246 label *label323
  1247 label *label324
  1248 sensor *tmp401 .core @silicon
-    * op lessThan *tmp402 *tmp401 silicon
-    * jump *label325 equal *tmp402 false
+ 1249 jump *label325 greaterThanEq *tmp401 silicon
  1250 set *tmp391 false
  1251 jump *label318 always
  1252 jump *label326 always
  1253 label *label325
  1254 label *label326
  1255 sensor *tmp404 .core @titanium
-    * op lessThan *tmp405 *tmp404 titanium
-    * jump *label327 equal *tmp405 false
+ 1256 jump *label327 greaterThanEq *tmp404 titanium
  1257 set *tmp391 false
  1258 jump *label318 always
  1259 jump *label328 always
  1260 label *label327
  1261 label *label328
  1262 sensor *tmp407 .core @metaglass
-    * op lessThan *tmp408 *tmp407 metaglass
-    * jump *label329 equal *tmp408 false
+ 1263 jump *label329 greaterThanEq *tmp407 metaglass
  1264 set *tmp391 false
  1265 jump *label318 always
  1266 jump *label330 always
  1267 label *label329
  1268 label *label330
  1269 sensor *tmp410 .core @thorium
-    * op lessThan *tmp411 *tmp410 thorium
-    * jump *label331 equal *tmp411 false
+ 1270 jump *label331 greaterThanEq *tmp410 thorium
  1271 set *tmp391 false
  1272 jump *label318 always
  1273 jump *label332 always
 
  1277 jump *label318 always
  1278 set *tmp391 null
  1279 label *label318
-    * op equal *tmp413 *tmp391 false
-    * jump *label317 equal *tmp413 false
+ 1280 jump *label317 notEqual *tmp391 false
  1281 setaddr :supplyBase*retaddr *label333 (h:*label333)
  1282 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1283 label *label333
 
  1293 jump *label336 equal *tmp415 false
  1294 label *label337
  1295 sensor *tmp417 .core @copper
-    * op lessThan *tmp418 *tmp417 copper
-    * jump *label341 equal *tmp418 false
+ 1296 jump *label341 greaterThanEq *tmp417 copper
  1297 set *tmp416 false
  1298 jump *label340 always
  1299 jump *label342 always
  1300 label *label341
  1301 label *label342
  1302 sensor *tmp420 .core @lead
-    * op lessThan *tmp421 *tmp420 lead
-    * jump *label343 equal *tmp421 false
+ 1303 jump *label343 greaterThanEq *tmp420 lead
  1304 set *tmp416 false
  1305 jump *label340 always
  1306 jump *label344 always
  1307 label *label343
  1308 label *label344
  1309 sensor *tmp423 .core @graphite
-    * op lessThan *tmp424 *tmp423 graphite
-    * jump *label345 equal *tmp424 false
+ 1310 jump *label345 greaterThanEq *tmp423 graphite
  1311 set *tmp416 false
  1312 jump *label340 always
  1313 jump *label346 always
  1314 label *label345
  1315 label *label346
  1316 sensor *tmp426 .core @silicon
-    * op lessThan *tmp427 *tmp426 silicon
-    * jump *label347 equal *tmp427 false
+ 1317 jump *label347 greaterThanEq *tmp426 silicon
  1318 set *tmp416 false
  1319 jump *label340 always
  1320 jump *label348 always
  1321 label *label347
  1322 label *label348
  1323 sensor *tmp429 .core @titanium
-    * op lessThan *tmp430 *tmp429 titanium
-    * jump *label349 equal *tmp430 false
+ 1324 jump *label349 greaterThanEq *tmp429 titanium
  1325 set *tmp416 false
  1326 jump *label340 always
  1327 jump *label350 always
  1328 label *label349
  1329 label *label350
  1330 sensor *tmp432 .core @metaglass
-    * op lessThan *tmp433 *tmp432 metaglass
-    * jump *label351 equal *tmp433 false
+ 1331 jump *label351 greaterThanEq *tmp432 metaglass
  1332 set *tmp416 false
  1333 jump *label340 always
  1334 jump *label352 always
  1335 label *label351
  1336 label *label352
  1337 sensor *tmp435 .core @thorium
-    * op lessThan *tmp436 *tmp435 thorium
-    * jump *label353 equal *tmp436 false
+ 1338 jump *label353 greaterThanEq *tmp435 thorium
  1339 set *tmp416 false
  1340 jump *label340 always
  1341 jump *label354 always
 
  1345 jump *label340 always
  1346 set *tmp416 null
  1347 label *label340
-    * op equal *tmp438 *tmp416 false
-    * jump *label339 equal *tmp438 false
+ 1348 jump *label339 notEqual *tmp416 false
  1349 setaddr :supplyBase*retaddr *label355 (h:*label355)
  1350 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1351 label *label355
 
  1414 label *label362
  1415 label *label363
  1416 sensor *tmp448 @unit @firstItem
-    * op notEqual *tmp449 *tmp448 null
-    * jump *label366 equal *tmp449 false
+ 1417 jump *label366 equal *tmp448 null
  1418 ucontrol itemDrop @air 1000
  1419 jump *label367 always
  1420 label *label366
 
  1422 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1423 label *label364
  1424 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp451
-    * op equal *tmp452 *tmp451 false
-    * jump *label363 notEqual *tmp452 false
+ 1425 jump *label363 equal *tmp451 false
  1426 label *label365
  1427 label *label361
  1428 return :moveToEmpty*retaddr
 
  1430 label *label19
  1431 label *label369
  1432 sensor *tmp453 @unit @firstItem
-    * op notEqual *tmp454 *tmp453 null
-    * jump *label371 equal *tmp454 false
+ 1433 jump *label371 equal *tmp453 null
  1434 ucontrol itemDrop @air 1000
  1435 label *label370
  1436 jump *label369 always
 
  1444 call *label13 *invalid :status3*retval (m:*label373) (h:*label373)
  1445 label *label373
  1446 sensor *tmp455 @unit @firstItem
-    * op equal *tmp456 *tmp455 :depositItems:item
-    * jump *label374 equal *tmp456 false
+ 1447 jump *label374 notEqual *tmp455 :depositItems:item
  1448 set :moveToBlock:block :depositItems:block
  1449 set :moveToBlock:radius 6
  1450 setaddr :moveToBlock*retaddr *label376 (h:*label376)
 
  1457 sensor *tmp459 @unit @firstItem
  1458 op mul *tmp460 *tmp459 :depositItems:cap
  1459 sensor *tmp461 :depositItems:block :depositItems:item
-    * op greaterThan *tmp462 *tmp460 *tmp461
-    * jump *label377 notEqual *tmp462 false
+ 1460 jump *label377 greaterThan *tmp460 *tmp461
  1461 label *label379
  1462 jump *label375 always
  1463 label *label374
  1464 label *label380
  1465 sensor *tmp463 @unit @firstItem
-    * op notEqual *tmp464 *tmp463 null
-    * jump *label382 equal *tmp464 false
+ 1466 jump *label382 equal *tmp463 null
  1467 ucontrol itemDrop @air 1000
  1468 label *label381
  1469 jump *label380 always
 
  1496 call *label18 *invalid :moveToEmpty*retval (m:*label387) (h:*label387)
  1497 label *label387
  1498 sensor *tmp466 @unit @firstItem
-    * op notEqual *tmp467 *tmp466 :mineOre:ore
-    * jump *label388 equal *tmp467 false
+ 1499 jump *label388 equal *tmp466 :mineOre:ore
  1500 setaddr :dropAll*retaddr *label390 (h:*label390)
  1501 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1502 label *label390
 
  1519 label *label395
  1520 label *label396
  1521 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp475 @second :mineOre:stop
-    * jump *label397 equal *tmp475 false
+ 1522 jump *label397 lessThanEq @second :mineOre:stop
  1523 jump *label394 always
  1524 jump *label398 always
  1525 label *label397
  1526 label *label398
-    * op equal *tmp477 .noTarget false
-    * jump *label399 equal *tmp477 false
+ 1527 jump *label399 notEqual .noTarget false
  1528 sensor *tmp480 .core @copper
-    * op lessThan *tmp481 *tmp480 copper
-    * jump *label402 equal *tmp481 false
+ 1529 jump *label402 greaterThanEq *tmp480 copper
  1530 set *tmp479 false
  1531 jump *label401 always
  1532 jump *label403 always
  1533 label *label402
  1534 label *label403
  1535 sensor *tmp483 .core @lead
-    * op lessThan *tmp484 *tmp483 lead
-    * jump *label404 equal *tmp484 false
+ 1536 jump *label404 greaterThanEq *tmp483 lead
  1537 set *tmp479 false
  1538 jump *label401 always
  1539 jump *label405 always
  1540 label *label404
  1541 label *label405
  1542 sensor *tmp486 .core @graphite
-    * op lessThan *tmp487 *tmp486 graphite
-    * jump *label406 equal *tmp487 false
+ 1543 jump *label406 greaterThanEq *tmp486 graphite
  1544 set *tmp479 false
  1545 jump *label401 always
  1546 jump *label407 always
  1547 label *label406
  1548 label *label407
  1549 sensor *tmp489 .core @silicon
-    * op lessThan *tmp490 *tmp489 silicon
-    * jump *label408 equal *tmp490 false
+ 1550 jump *label408 greaterThanEq *tmp489 silicon
  1551 set *tmp479 false
  1552 jump *label401 always
  1553 jump *label409 always
  1554 label *label408
  1555 label *label409
  1556 sensor *tmp492 .core @titanium
-    * op lessThan *tmp493 *tmp492 titanium
-    * jump *label410 equal *tmp493 false
+ 1557 jump *label410 greaterThanEq *tmp492 titanium
  1558 set *tmp479 false
  1559 jump *label401 always
  1560 jump *label411 always
  1561 label *label410
  1562 label *label411
  1563 sensor *tmp495 .core @metaglass
-    * op lessThan *tmp496 *tmp495 metaglass
-    * jump *label412 equal *tmp496 false
+ 1564 jump *label412 greaterThanEq *tmp495 metaglass
  1565 set *tmp479 false
  1566 jump *label401 always
  1567 jump *label413 always
  1568 label *label412
  1569 label *label413
  1570 sensor *tmp498 .core @thorium
-    * op lessThan *tmp499 *tmp498 thorium
-    * jump *label414 equal *tmp499 false
+ 1571 jump *label414 greaterThanEq *tmp498 thorium
  1572 set *tmp479 false
  1573 jump *label401 always
  1574 jump *label415 always
 
  1588 label *label400
  1589 label *label393
  1590 sensor *tmp502 @unit @totalItems
-    * op lessThan *tmp503 *tmp502 :mineOre:amount
-    * jump *label392 notEqual *tmp503 false
+ 1591 jump *label392 lessThan *tmp502 :mineOre:amount
  1592 label *label394
  1593 ucontrol unbind
  1594 set :depositItems:block :mineOre:block
 
  1618 end
  1619 label *label22
  1620 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
-    * op equal *tmp508 *tmp506 false
-    * jump *label423 equal *tmp508 false
+ 1621 jump *label423 notEqual *tmp506 false
  1622 set :error:error "Cannot locate ore"
  1623 setaddr :error*retaddr *label425 (h:*label425)
  1624 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
 
  1636 label *label427
  1637 label *label428
  1638 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510
-    * op equal *tmp511 *tmp510 false
-    * jump *label430 equal *tmp511 false
+ 1639 jump *label430 notEqual *tmp510 false
  1640 op sub *tmp512 :moveTo:radius 0.5
  1641 ucontrol approach :moveTo:x :moveTo:y *tmp512
  1642 label *label429

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-49 instructions):
 
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    85 label *label64
-    * jump *label63 always
    86 label *label62
    87 label *label63
    88 write @pneumatic-drill processor2 ".nextBlock"
 
   209 sensor *tmp157 AJTJK-battery1 @totalPower
   210 jump *label95 greaterThanEq *tmp157 300
   211 jump *label93 always
-    * jump *label96 always
   212 label *label95
   213 label *label96
   214 label *label92
 
   341 setaddr :error*retaddr *label127 (h:*label127)
   342 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   343 label *label127
-    * jump *label126 always
   344 label *label125
   345 label *label126
   346 write @laser-drill processor5 ":buildBlockAt:block"
 
   411 set .thoriumContainer :buildRemoteBlock*retval
   412 jump *label137 notEqual .thoriumContainer null
   413 set .thoriumContainer .thoriumDrill
-    * jump *label138 always
   414 label *label137
   415 label *label138
   416 write .thoriumDrill processor2 ".thoriumDrill"
 
   546 call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
   547 label *label175
   548 label *label173
-    * jump *label171 always
   549 label *label170
   550 label *label171
-    * jump *label169 always
   551 label *label168
   552 label *label169
   553 set :fetchBlock:block .thoriumContainer
 
   560 set :setPolyTarget.1:target 4
   561 write :setPolyTarget.1:target .controller ".polyTarget"
   562 label *label179
-    * jump *label178 always
   563 label *label177
   564 label *label178
   565 label *label166
 
   594 call *label26 *invalid :supplyBlock*retval (m:*label193) (h:*label193)
   595 label *label193
   596 set :supplyBase0:supplied true
-    * jump *label191 always
   597 label *label190
   598 label *label191
-    * jump *label189 always
   599 label *label188
   600 label *label189
   601 sensor *tmp259 .core @silicon
 
   626 call *label26 *invalid :supplyBlock*retval (m:*label203) (h:*label203)
   627 label *label203
   628 set :supplyBase0:supplied true
-    * jump *label201 always
   629 label *label200
   630 label *label201
   631 label *label197
-    * jump *label195 always
   632 label *label194
   633 label *label195
   634 sensor *tmp268 AJTJK-battery1 @totalPower
 
   645 call *label26 *invalid :supplyBlock*retval (m:*label209) (h:*label209)
   646 label *label209
   647 set :supplyBase0:supplied true
-    * jump *label207 always
   648 label *label206
   649 label *label207
-    * jump *label205 always
   650 label *label204
   651 label *label205
-    * jump *label187 always
   652 label *label186
   653 label *label187
   654 sensor *tmp274 .core @titanium
 
   756 label *label227
   757 label *label221
   758 label *label217
-    * jump *label215 always
   759 label *label214
   760 label *label215
   761 jump *label213 always
 
   811 label *label248
   812 set :buildRemoteBlock*retval :buildBlock*retval
   813 jump *label244 always
-    * jump *label246 always
   814 label *label245
   815 label *label246
   816 set :buildRemoteBlock*retval false
 
   952 sensor *tmp319 @unit @mining
   953 jump *label270 equal *tmp319 false
   954 ucontrol stop
-    * jump *label271 always
   955 label *label270
   956 label *label271
   957 ubind :lineUpUnits:unit
 
  1013 op land *tmp330 *tmp328 *tmp329
  1014 jump *label284 equal *tmp330 false
  1015 ucontrol itemDrop @air 1000
-    * jump *label285 always
  1016 label *label284
  1017 label *label285
  1018 label *label282
 
  1047 setaddr :mineOre*retaddr *label291 (h:*label291)
  1048 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
  1049 label *label291
-    * jump *label290 always
  1050 label *label289
  1051 label *label290
  1052 label *label287
 
  1081 op land *tmp346 *tmp344 *tmp345
  1082 jump *label300 equal *tmp346 false
  1083 ucontrol itemDrop @air 1000
-    * jump *label301 always
  1084 label *label300
  1085 label *label301
  1086 label *label298
 
  1208 jump *label319 greaterThanEq *tmp392 copper
  1209 set *tmp391 false
  1210 jump *label318 always
-    * jump *label320 always
  1211 label *label319
  1212 label *label320
  1213 sensor *tmp395 .core @lead
  1214 jump *label321 greaterThanEq *tmp395 lead
  1215 set *tmp391 false
  1216 jump *label318 always
-    * jump *label322 always
  1217 label *label321
  1218 label *label322
  1219 sensor *tmp398 .core @graphite
  1220 jump *label323 greaterThanEq *tmp398 graphite
  1221 set *tmp391 false
  1222 jump *label318 always
-    * jump *label324 always
  1223 label *label323
  1224 label *label324
  1225 sensor *tmp401 .core @silicon
  1226 jump *label325 greaterThanEq *tmp401 silicon
  1227 set *tmp391 false
  1228 jump *label318 always
-    * jump *label326 always
  1229 label *label325
  1230 label *label326
  1231 sensor *tmp404 .core @titanium
  1232 jump *label327 greaterThanEq *tmp404 titanium
  1233 set *tmp391 false
  1234 jump *label318 always
-    * jump *label328 always
  1235 label *label327
  1236 label *label328
  1237 sensor *tmp407 .core @metaglass
  1238 jump *label329 greaterThanEq *tmp407 metaglass
  1239 set *tmp391 false
  1240 jump *label318 always
-    * jump *label330 always
  1241 label *label329
  1242 label *label330
  1243 sensor *tmp410 .core @thorium
  1244 jump *label331 greaterThanEq *tmp410 thorium
  1245 set *tmp391 false
  1246 jump *label318 always
-    * jump *label332 always
  1247 label *label331
  1248 label *label332
  1249 set *tmp391 true
 
  1269 jump *label341 greaterThanEq *tmp417 copper
  1270 set *tmp416 false
  1271 jump *label340 always
-    * jump *label342 always
  1272 label *label341
  1273 label *label342
  1274 sensor *tmp420 .core @lead
  1275 jump *label343 greaterThanEq *tmp420 lead
  1276 set *tmp416 false
  1277 jump *label340 always
-    * jump *label344 always
  1278 label *label343
  1279 label *label344
  1280 sensor *tmp423 .core @graphite
  1281 jump *label345 greaterThanEq *tmp423 graphite
  1282 set *tmp416 false
  1283 jump *label340 always
-    * jump *label346 always
  1284 label *label345
  1285 label *label346
  1286 sensor *tmp426 .core @silicon
  1287 jump *label347 greaterThanEq *tmp426 silicon
  1288 set *tmp416 false
  1289 jump *label340 always
-    * jump *label348 always
  1290 label *label347
  1291 label *label348
  1292 sensor *tmp429 .core @titanium
  1293 jump *label349 greaterThanEq *tmp429 titanium
  1294 set *tmp416 false
  1295 jump *label340 always
-    * jump *label350 always
  1296 label *label349
  1297 label *label350
  1298 sensor *tmp432 .core @metaglass
  1299 jump *label351 greaterThanEq *tmp432 metaglass
  1300 set *tmp416 false
  1301 jump *label340 always
-    * jump *label352 always
  1302 label *label351
  1303 label *label352
  1304 sensor *tmp435 .core @thorium
  1305 jump *label353 greaterThanEq *tmp435 thorium
  1306 set *tmp416 false
  1307 jump *label340 always
-    * jump *label354 always
  1308 label *label353
  1309 label *label354
  1310 set *tmp416 true
 
  1318 label *label338
  1319 jump *label337 always
  1320 label *label339
-    * jump *label335 always
  1321 label *label334
  1322 label *label335
  1323 label *label304
 
  1381 sensor *tmp448 @unit @firstItem
  1382 jump *label366 equal *tmp448 null
  1383 ucontrol itemDrop @air 1000
-    * jump *label367 always
  1384 label *label366
  1385 label *label367
  1386 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
  1464 setaddr :dropAll*retaddr *label390 (h:*label390)
  1465 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1466 label *label390
-    * jump *label389 always
  1467 label *label388
  1468 label *label389
  1469 set :status3:text "Mining..."
 
  1478 op land *tmp473 *tmp471 *tmp472
  1479 jump *label395 equal *tmp473 false
  1480 jump *label394 always
-    * jump *label396 always
  1481 label *label395
  1482 label *label396
  1483 ucontrol mine :mineOre:x :mineOre:y
  1484 jump *label397 lessThanEq @second :mineOre:stop
  1485 jump *label394 always
-    * jump *label398 always
  1486 label *label397
  1487 label *label398
  1488 jump *label399 notEqual .noTarget false
 
  1490 jump *label402 greaterThanEq *tmp480 copper
  1491 set *tmp479 false
  1492 jump *label401 always
-    * jump *label403 always
  1493 label *label402
  1494 label *label403
  1495 sensor *tmp483 .core @lead
  1496 jump *label404 greaterThanEq *tmp483 lead
  1497 set *tmp479 false
  1498 jump *label401 always
-    * jump *label405 always
  1499 label *label404
  1500 label *label405
  1501 sensor *tmp486 .core @graphite
  1502 jump *label406 greaterThanEq *tmp486 graphite
  1503 set *tmp479 false
  1504 jump *label401 always
-    * jump *label407 always
  1505 label *label406
  1506 label *label407
  1507 sensor *tmp489 .core @silicon
  1508 jump *label408 greaterThanEq *tmp489 silicon
  1509 set *tmp479 false
  1510 jump *label401 always
-    * jump *label409 always
  1511 label *label408
  1512 label *label409
  1513 sensor *tmp492 .core @titanium
  1514 jump *label410 greaterThanEq *tmp492 titanium
  1515 set *tmp479 false
  1516 jump *label401 always
-    * jump *label411 always
  1517 label *label410
  1518 label *label411
  1519 sensor *tmp495 .core @metaglass
  1520 jump *label412 greaterThanEq *tmp495 metaglass
  1521 set *tmp479 false
  1522 jump *label401 always
-    * jump *label413 always
  1523 label *label412
  1524 label *label413
  1525 sensor *tmp498 .core @thorium
  1526 jump *label414 greaterThanEq *tmp498 thorium
  1527 set *tmp479 false
  1528 jump *label401 always
-    * jump *label415 always
  1529 label *label414
  1530 label *label415
  1531 set *tmp479 true
 
  1534 label *label401
  1535 jump *label416 equal *tmp479 false
  1536 jump *label394 always
-    * jump *label417 always
  1537 label *label416
  1538 label *label417
-    * jump *label400 always
  1539 label *label399
  1540 label *label400
  1541 label *label393
 
  1575 setaddr :error*retaddr *label425 (h:*label425)
  1576 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
  1577 label *label425
-    * jump *label424 always
  1578 label *label423
  1579 label *label424
  1580 label *label422

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    14 read *tmp115 processor5 "*signature"
    15 jump *label49 notEqual *tmp115 "319badb7a8e178a4:v1"
    16 set .titaniumDrill null
-    * set .thoriumDrill null
    17 set .thoriumBattery null
    18 set .thoriumContainer null
    19 set .thoriumGenerator null
 
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
    58 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   59 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    60 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    61 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
    62 label *label60
 
    95 jump *label65 equal *tmp144 false
    96 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
    97 jump *label59 always
-    * set *tmp127 null
    98 label *label59
    99 set .titaniumDrill *tmp127
-    * write .titaniumDrill processor2 ".titaniumDrill"
+  100 write *tmp127 processor2 ".titaniumDrill"
   101 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
   102 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   103 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
 
   117 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   118 label *label69
   119 set .controller :buildBlockFromCfg*retval
-    * write processor1 .controller ".timer"
-    * write processor2 .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
+  120 write processor1 :buildBlockFromCfg*retval ".timer"
+  121 write processor2 :buildBlockFromCfg*retval ".display"
+  122 write .core :buildBlockFromCfg*retval ".core"
+  123 write bank1 :buildBlockFromCfg*retval ".bank"
   124 set :block "AJEMJJ-graphite-press0"
   125 setaddr *tmp150 *label73
   126 jump *label70 always
 
   161 setaddr *tmp150 *label82
   162 label *label70
   163 read *tmp151 @this :block
-    * write *tmp151 .controller :block
+  164 write *tmp151 :buildBlockFromCfg*retval :block
   165 label *label71
   166 multijump *tmp150 0 0 (m:marker0)
   167 multilabel *label82 (m:marker0)
 
   187 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   188 label *label87
   189 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
+  190 write 1 .controller ".flareTarget"
   191 label *label88
   192 set :setMonoTarget:target 5
-    * write :setMonoTarget:target .controller ".monoTarget"
+  193 write 5 .controller ".monoTarget"
   194 label *label89
   195 write 85 .controller ".pressTarget"
   196 write 150 .controller ".smelterTarget"
   197 write 30 .controller ".kilnTarget"
   198 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  199 set .siliconSurplus 20
   200 setaddr :buildUnits*retaddr *label90 (h:*label90)
   201 call *label42 *invalid :buildUnits*retval (m:*label90) (h:*label90)
   202 label *label90
 
   259 set .metaglassSurplus 100
   260 set .graphiteSurplus 200
   261 set :setMonoTarget.1:target 2
-    * write :setMonoTarget.1:target .controller ".monoTarget"
+  262 write 2 .controller ".monoTarget"
   263 label *label107
   264 set :setPolyTarget:target 3
-    * write :setPolyTarget:target .controller ".polyTarget"
+  265 write 3 .controller ".polyTarget"
   266 label *label108
   267 setaddr :buildUnits*retaddr *label109 (h:*label109)
   268 call *label42 *invalid :buildUnits*retval (m:*label109) (h:*label109)
 
   277 jump *label110 always
   278 label *label112
   279 set :setFlareTarget.1:target 2
-    * write :setFlareTarget.1:target .controller ".flareTarget"
+  280 write 2 .controller ".flareTarget"
   281 label *label114
   282 label *label115
   283 read *tmp82 .controller ".flares"
 
   381 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   382 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   383 label *label132
-    * set :buildRemoteBlock:cfg "AFFJT-power-node10"
   384 read :buildRemoteBlock:x processor3 ".node2X"
   385 read :buildRemoteBlock:y processor3 ".node2Y"
   386 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
 
   406 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   407 label *label136
   408 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label137 notEqual .thoriumContainer null
+  409 jump *label137 notEqual :buildRemoteBlock*retval null
   410 set .thoriumContainer .thoriumDrill
   411 label *label137
   412 label *label138
 
   439 label *label144
   440 set .metaglassSurplus 10
   441 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
+  442 write 1 .controller ".megaTarget"
   443 label *label145
   444 setaddr :buildUnits*retaddr *label146 (h:*label146)
   445 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
 
   555 sensor *tmp246 .core @thorium
   556 jump *label177 lessThanEq *tmp246 400
   557 set :setPolyTarget.1:target 4
-    * write :setPolyTarget.1:target .controller ".polyTarget"
+  558 write 4 .controller ".polyTarget"
   559 label *label179
   560 label *label177
   561 label *label178
 
   659 label *label211
   660 set :supplyBase0:titaniumTrigger *tmp276
   661 sensor *tmp280 .titaniumDrill @titanium
-    * jump *label212 greaterThanEq *tmp280 :supplyBase0:titaniumTrigger
+  662 jump *label212 greaterThanEq *tmp280 *tmp276
   663 jump *label214 notEqual :supplyBase0:supplied false
   664 sensor *tmp285 AJTJK-battery1 @totalPower
   665 op mul *tmp286 A©JNJP-unloader6 .powerTarget
 
   689 set *tmp295 @sand
   690 label *label224
   691 set :supplyBase0:ore *tmp295
-    * set :mineOre.1:ore :supplyBase0:ore
+  692 set :mineOre.1:ore *tmp295
   693 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   694 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   695 label *label225
 
   744 set *tmp308 @sand
   745 label *label240
   746 set :supplyBase0:ore.1 *tmp308
-    * set :mineOre.1:ore :supplyBase0:ore.1
+  747 set :mineOre.1:ore *tmp308
   748 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   749 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   750 label *label241
 
   790 set :buildRemoteBlock:th :unpackCfg:th
   791 set :buildRemoteBlock:rotation :unpackCfg:rotation
   792 set :buildRemoteBlock:index :unpackCfg:ind
-    * set :buildBlock:block :buildRemoteBlock:type
+  793 set :buildBlock:block :unpackCfg:type
   794 set :buildBlock:x :buildRemoteBlock:x
   795 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+  796 set :buildBlock:copper :unpackCfg:cu
+  797 set :buildBlock:lead :unpackCfg:pb
+  798 set :buildBlock:graphite :unpackCfg:gr
+  799 set :buildBlock:silicon :unpackCfg:si
+  800 set :buildBlock:titanium :unpackCfg:ti
+  801 set :buildBlock:metaglass :unpackCfg:mg
+  802 set :buildBlock:thorium :unpackCfg:th
+  803 set :buildBlock:rotation :unpackCfg:rotation
   804 set :buildBlock:config null
-    * set :buildBlock:index :buildRemoteBlock:index
+  805 set :buildBlock:index :unpackCfg:ind
   806 setaddr :buildBlock*retaddr *label248 (h:*label248)
   807 call *label37 *invalid :buildBlock*retval (m:*label248) (h:*label248)
   808 label *label248
 
   812 label *label246
   813 set :buildRemoteBlock*retval false
   814 jump *label244 always
-    * set :buildRemoteBlock*retval null
   815 label *label244
   816 return :buildRemoteBlock*retaddr
   817 end
 
   832 set :buildBlockFromCfg:th :unpackCfg:th
   833 set :buildBlockFromCfg:rotation :unpackCfg:rotation
   834 set :buildBlockFromCfg:index :unpackCfg:ind
-    * op add *tmp312 .coreX :buildBlockFromCfg:x
-    * op add *tmp313 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+  835 op add *tmp312 .coreX :unpackCfg:x
+  836 op add *tmp313 .coreY :unpackCfg:y
+  837 set :buildBlock:block :unpackCfg:type
   838 set :buildBlock:x *tmp312
   839 set :buildBlock:y *tmp313
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+  840 set :buildBlock:copper :unpackCfg:cu
+  841 set :buildBlock:lead :unpackCfg:pb
+  842 set :buildBlock:graphite :unpackCfg:gr
+  843 set :buildBlock:silicon :unpackCfg:si
+  844 set :buildBlock:titanium :unpackCfg:ti
+  845 set :buildBlock:metaglass :unpackCfg:mg
+  846 set :buildBlock:thorium :unpackCfg:th
+  847 set :buildBlock:rotation :unpackCfg:rotation
   848 set :buildBlock:config :buildBlockFromCfg:config
-    * set :buildBlock:index :buildBlockFromCfg:index
+  849 set :buildBlock:index :unpackCfg:ind
   850 setaddr :buildBlock*retaddr *label251 (h:*label251)
   851 call *label37 *invalid :buildBlock*retval (m:*label251) (h:*label251)
   852 label *label251
   853 set :buildBlockFromCfg:building :buildBlock*retval
-    * write :buildBlockFromCfg:building @this :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building processor2 :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building .controller :buildBlockFromCfg:cfg
-    * set :buildBlockFromCfg*retval :buildBlockFromCfg:building
+  854 write :buildBlock*retval @this :buildBlockFromCfg:cfg
+  855 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
+  856 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
+  857 set :buildBlockFromCfg*retval :buildBlock*retval
   858 jump *label249 always
-    * set :buildBlockFromCfg*retval null
   859 label *label249
   860 return :buildBlockFromCfg*retaddr
   861 end
 
   881 set :meetTarget.1:ti :unpackCfg:ti
   882 set :meetTarget.1:mg :unpackCfg:mg
   883 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+  884 set :meetTarget:block :unpackCfg:type
+  885 set :meetTarget:copper :unpackCfg:cu
+  886 set :meetTarget:lead :unpackCfg:pb
+  887 set :meetTarget:graphite :unpackCfg:gr
+  888 set :meetTarget:silicon :unpackCfg:si
+  889 set :meetTarget:titanium :unpackCfg:ti
+  890 set :meetTarget:metaglass :unpackCfg:mg
+  891 set :meetTarget:thorium :unpackCfg:th
   892 set :meetTarget:forBuild false
   893 set :meetTarget:isNoTarget false
   894 setaddr :meetTarget*retaddr *label256 (h:*label256)
 
  1095 end
  1096 label *label29
  1097 set :unpackCfg:index 1
-    * set *tmp352 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1098 set *tmp352 1
+ 1099 op add :unpackCfg:index 1 1
  1100 read *tmp353 :unpackCfg:cfg *tmp352
  1101 op sub *tmp354 *tmp353 74
  1102 lookup block :unpackCfg:type *tmp354
-    * set *tmp356 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1103 set *tmp356 2
+ 1104 op add :unpackCfg:index 2 1
  1105 read *tmp357 :unpackCfg:cfg *tmp356
  1106 op sub *tmp358 *tmp357 74
  1107 op div :unpackCfg:x *tmp358 2
-    * set *tmp360 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1108 set *tmp360 3
+ 1109 op add :unpackCfg:index 3 1
  1110 read *tmp361 :unpackCfg:cfg *tmp360
  1111 op sub *tmp362 *tmp361 74
  1112 op div :unpackCfg:y *tmp362 2
-    * set *tmp364 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1113 set *tmp364 4
+ 1114 op add :unpackCfg:index 4 1
  1115 read *tmp365 :unpackCfg:cfg *tmp364
  1116 op sub :unpackCfg:rotation *tmp365 74
-    * set *tmp367 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1117 set *tmp367 5
+ 1118 op add :unpackCfg:index 5 1
  1119 read *tmp368 :unpackCfg:cfg *tmp367
  1120 op sub :unpackCfg:ind *tmp368 74
  1121 sensor :unpackCfg:cu :unpackCfg:type @copper
 
  1187 op add *tmp383 :meetTarget:metaglass .metaglassSurplus
  1188 write *tmp383 .controller ".kilnTarget"
  1189 op add *tmp384 :meetTarget:lead .leadSurplus
-    * write *tmp384 .controller ".leadReserve"
+ 1190 write lead .controller ".leadReserve"
  1191 op sign *tmp385 :meetTarget:silicon
  1192 op mul *tmp386 *tmp385 20
  1193 op add *tmp387 :meetTarget:silicon *tmp386
 
  1197 op add *tmp390 :meetTarget:graphite *tmp389
  1198 write *tmp390 .controller ".graphiteReserve"
  1199 write lead processor7 ".leadTarget"
-    * write copper processor7 ".copperTarget"
+ 1200 write :meetTarget:copper processor7 ".copperTarget"
  1201 label *label315
  1202 sensor *tmp392 .core @copper
  1203 jump *label319 greaterThanEq *tmp392 copper
 
  1243 label *label332
  1244 set *tmp391 true
  1245 jump *label318 always
-    * set *tmp391 null
  1246 label *label318
  1247 jump *label317 notEqual *tmp391 false
  1248 setaddr :supplyBase*retaddr *label333 (h:*label333)
 
  1303 label *label354
  1304 set *tmp416 true
  1305 jump *label340 always
-    * set *tmp416 null
  1306 label *label340
  1307 jump *label339 notEqual *tmp416 false
  1308 setaddr :supplyBase*retaddr *label355 (h:*label355)
 
  1348 write 2 .controller "@counter"
  1349 set :buildBlock*retval :buildBlock:built
  1350 jump *label356 always
-    * set :buildBlock*retval null
  1351 label *label356
  1352 return :buildBlock*retaddr
  1353 end
 
  1446 label *label386
  1447 set :mineOre:x :locateOre:x
  1448 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+ 1449 set :moveToEmpty:x :locateOre:x
+ 1450 set :moveToEmpty:y :locateOre:y
  1451 setaddr :moveToEmpty*retaddr *label387 (h:*label387)
  1452 call *label18 *invalid :moveToEmpty*retval (m:*label387) (h:*label387)
  1453 label *label387
 
  1522 label *label415
  1523 set *tmp479 true
  1524 jump *label401 always
-    * set *tmp479 null
  1525 label *label401
  1526 jump *label416 equal *tmp479 false
  1527 jump *label394 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-50 instructions):
 
    55 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
-    * set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    58 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    59 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    60 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
 
   185 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   186 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   187 label *label87
-    * set :setFlareTarget:target 1
   188 write 1 .controller ".flareTarget"
   189 label *label88
-    * set :setMonoTarget:target 5
   190 write 5 .controller ".monoTarget"
   191 label *label89
   192 write 85 .controller ".pressTarget"
 
   255 set .siliconMonoSurplus 20
   256 set .metaglassSurplus 100
   257 set .graphiteSurplus 200
-    * set :setMonoTarget.1:target 2
   258 write 2 .controller ".monoTarget"
   259 label *label107
-    * set :setPolyTarget:target 3
   260 write 3 .controller ".polyTarget"
   261 label *label108
   262 setaddr :buildUnits*retaddr *label109 (h:*label109)
 
   271 label *label111
   272 jump *label110 always
   273 label *label112
-    * set :setFlareTarget.1:target 2
   274 write 2 .controller ".flareTarget"
   275 label *label114
   276 label *label115
 
   356 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   357 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   358 label *label129
-    * set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
   359 read :buildRemoteBlock:x processor3 ".water2X"
   360 read :buildRemoteBlock:y processor3 ".water2Y"
   361 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
 
   431 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   432 label *label144
   433 set .metaglassSurplus 10
-    * set :setMegaTarget:target 1
   434 write 1 .controller ".megaTarget"
   435 label *label145
   436 setaddr :buildUnits*retaddr *label146 (h:*label146)
 
   546 label *label176
   547 sensor *tmp246 .core @thorium
   548 jump *label177 lessThanEq *tmp246 400
-    * set :setPolyTarget.1:target 4
   549 write 4 .controller ".polyTarget"
   550 label *label179
   551 label *label177
 
   648 label *label210
   649 set *tmp276 100
   650 label *label211
-    * set :supplyBase0:titaniumTrigger *tmp276
   651 sensor *tmp280 .titaniumDrill @titanium
   652 jump *label212 greaterThanEq *tmp280 *tmp276
   653 jump *label214 notEqual :supplyBase0:supplied false
 
   678 label *label223
   679 set *tmp295 @sand
   680 label *label224
-    * set :supplyBase0:ore *tmp295
   681 set :mineOre.1:ore *tmp295
   682 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   683 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
 
   732 label *label239
   733 set *tmp308 @sand
   734 label *label240
-    * set :supplyBase0:ore.1 *tmp308
   735 set :mineOre.1:ore *tmp308
   736 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   737 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
 
   768 setaddr :unpackCfg*retaddr *label247 (h:*label247)
   769 call *label29 *invalid :unpackCfg*retval (m:*label247) (h:*label247)
   770 label *label247
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildRemoteBlock:index :unpackCfg:ind
   771 set :buildBlock:block :unpackCfg:type
   772 set :buildBlock:x :buildRemoteBlock:x
   773 set :buildBlock:y :buildRemoteBlock:y
 
   798 setaddr :unpackCfg*retaddr *label250 (h:*label250)
   799 call *label29 *invalid :unpackCfg*retval (m:*label250) (h:*label250)
   800 label *label250
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * set :buildBlockFromCfg:index :unpackCfg:ind
   801 op add *tmp312 .coreX :unpackCfg:x
   802 op add *tmp313 .coreY :unpackCfg:y
   803 set :buildBlock:block :unpackCfg:type
 
   816 setaddr :buildBlock*retaddr *label251 (h:*label251)
   817 call *label37 *invalid :buildBlock*retval (m:*label251) (h:*label251)
   818 label *label251
-    * set :buildBlockFromCfg:building :buildBlock*retval
   819 write :buildBlock*retval @this :buildBlockFromCfg:cfg
   820 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   821 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
 
   838 setaddr :unpackCfg*retaddr *label255 (h:*label255)
   839 call *label29 *invalid :unpackCfg*retval (m:*label255) (h:*label255)
   840 label *label255
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
   841 set :meetTarget:block :unpackCfg:type
   842 set :meetTarget:copper :unpackCfg:cu
   843 set :meetTarget:lead :unpackCfg:pb
 
  1051 return :supplyBlockFromCore*retaddr
  1052 end
  1053 label *label29
-    * set :unpackCfg:index 1
  1054 set *tmp352 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp353 :unpackCfg:cfg *tmp352
+ 1055 read *tmp353 :unpackCfg:cfg 1
  1056 op sub *tmp354 *tmp353 74
  1057 lookup block :unpackCfg:type *tmp354
  1058 set *tmp356 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp357 :unpackCfg:cfg *tmp356
+ 1059 read *tmp357 :unpackCfg:cfg 2
  1060 op sub *tmp358 *tmp357 74
  1061 op div :unpackCfg:x *tmp358 2
  1062 set *tmp360 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp361 :unpackCfg:cfg *tmp360
+ 1063 read *tmp361 :unpackCfg:cfg 3
  1064 op sub *tmp362 *tmp361 74
  1065 op div :unpackCfg:y *tmp362 2
  1066 set *tmp364 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp365 :unpackCfg:cfg *tmp364
+ 1067 read *tmp365 :unpackCfg:cfg 4
  1068 op sub :unpackCfg:rotation *tmp365 74
  1069 set *tmp367 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp368 :unpackCfg:cfg *tmp367
+ 1070 read *tmp368 :unpackCfg:cfg 5
  1071 op sub :unpackCfg:ind *tmp368 74
  1072 sensor :unpackCfg:cu :unpackCfg:type @copper
  1073 sensor :unpackCfg:pb :unpackCfg:type @lead
 
  1137 write *tmp382 .controller ".smelterTarget"
  1138 op add *tmp383 :meetTarget:metaglass .metaglassSurplus
  1139 write *tmp383 .controller ".kilnTarget"
-    * op add *tmp384 :meetTarget:lead .leadSurplus
  1140 write lead .controller ".leadReserve"
  1141 op sign *tmp385 :meetTarget:silicon
  1142 op mul *tmp386 *tmp385 20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-5 instructions):
 
  1051 return :supplyBlockFromCore*retaddr
  1052 end
  1053 label *label29
-    * set *tmp352 1
  1054 read *tmp353 :unpackCfg:cfg 1
  1055 op sub *tmp354 *tmp353 74
  1056 lookup block :unpackCfg:type *tmp354
-    * set *tmp356 2
  1057 read *tmp357 :unpackCfg:cfg 2
  1058 op sub *tmp358 *tmp357 74
  1059 op div :unpackCfg:x *tmp358 2
-    * set *tmp360 3
  1060 read *tmp361 :unpackCfg:cfg 3
  1061 op sub *tmp362 *tmp361 74
  1062 op div :unpackCfg:y *tmp362 2
-    * set *tmp364 4
  1063 read *tmp365 :unpackCfg:cfg 4
  1064 op sub :unpackCfg:rotation *tmp365 74
-    * set *tmp367 5
  1065 read *tmp368 :unpackCfg:cfg 5
  1066 op sub :unpackCfg:ind *tmp368 74
  1067 sensor :unpackCfg:cu :unpackCfg:type @copper

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
  1521 setaddr :status3*retaddr *label427 (h:*label427)
  1522 call *label13 *invalid :status3*retval (m:*label427) (h:*label427)
  1523 label *label427
+ 1524 op sub *tmp512 :moveTo:radius 0.5
  1525 label *label428
  1526 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510
  1527 jump *label430 notEqual *tmp510 false
-    * op sub *tmp512 :moveTo:radius 0.5
  1528 ucontrol approach :moveTo:x :moveTo:y *tmp512
  1529 label *label429
  1530 jump *label428 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-7 instructions):
 
   399 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   400 label *label136
   401 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label137 notEqual :buildRemoteBlock*retval null
-    * set .thoriumContainer .thoriumDrill
-    * label *label137
-    * label *label138
+  402 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
   403 write .thoriumDrill processor2 ".thoriumDrill"
   404 write .thoriumContainer processor2 ".thoriumContainer"
   405 write .thoriumContainer processor6 ":setThoriumContainer:container"
 
   669 label *label222
   670 sensor :supplyBase0:coal .core @coal
   671 sensor :supplyBase0:sand .core @sand
-    * jump *label223 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp295 @coal
-    * jump *label224 always
-    * label *label223
-    * set *tmp295 @sand
-    * label *label224
+  672 select *tmp295 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   673 set :mineOre.1:ore *tmp295
   674 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   675 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
 
   718 label *label238
   719 sensor :supplyBase0:coal.1 .core @coal
   720 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label239 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp308 @coal
-    * jump *label240 always
-    * label *label239
-    * set *tmp308 @sand
-    * label *label240
+  721 select *tmp308 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   722 set :mineOre.1:ore *tmp308
   723 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   724 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 2:
 
   636 label *label205
   637 label *label186
   638 label *label187
+  639 set *tmp276 100
   640 sensor *tmp274 .core @titanium
-    * jump *label210 greaterThanEq *tmp274 titanium
+  641 jump *label211 greaterThanEq *tmp274 titanium
   642 sensor *tmp277 .core @titanium
   643 op sub *tmp278 titanium *tmp277
   644 op min *tmp276 7 *tmp278
   645 jump *label211 always
-    * label *label210
-    * set *tmp276 100
   646 label *label211
   647 sensor *tmp280 .titaniumDrill @titanium
   648 jump *label212 greaterThanEq *tmp280 *tmp276

Modifications by Unroll iteration loop at CoreBuilder.mnd:352:5 (-2 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
-    * setaddr *tmp150 *label73
-    * jump *label70 always
-    * multilabel *label73 (m:marker0)
-    * set :block "AJTJK-battery1"
-    * setaddr *tmp150 *label74
-    * jump *label70 always
-    * multilabel *label74 (m:marker0)
-    * set :block "ALTJL-battery2"
-    * setaddr *tmp150 *label75
-    * jump *label70 always
-    * multilabel *label75 (m:marker0)
-    * set :block "AJRJM-combustion-generator3"
-    * setaddr *tmp150 *label76
-    * jump *label70 always
-    * multilabel *label76 (m:marker0)
-    * set :block "ALMQJN-silicon-smelter4"
-    * setaddr *tmp150 *label77
-    * jump *label70 always
-    * multilabel *label77 (m:marker0)
-    * set :block "A{LNJO-inverted-sorter5"
-    * setaddr *tmp150 *label78
-    * jump *label70 always
-    * multilabel *label78 (m:marker0)
-    * set :block "A©JNJP-unloader6"
-    * setaddr *tmp150 *label79
-    * jump *label70 always
-    * multilabel *label79 (m:marker0)
-    * set :block "A{HNJQ-inverted-sorter7"
-    * setaddr *tmp150 *label80
-    * jump *label70 always
-    * multilabel *label80 (m:marker0)
-    * set :block "AJPJR-underflow-gate8"
-    * setaddr *tmp150 *label81
-    * jump *label70 always
-    * multilabel *label81 (m:marker0)
-    * set :block "AÕFDJS-micro-processor9"
-    * setaddr *tmp150 *label82
-    * label *label70
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
-    * label *label71
-    * multijump *tmp150 0 0 (m:marker0)
-    * multilabel *label82 (m:marker0)
-    * label *label72
+  123 set :block "AJEMJJ-graphite-press0"
+  124 label *label433
+  125 read *tmp151 @this :block
+  126 write *tmp151 :buildBlockFromCfg*retval :block
+  127 label *label434
+  128 set :block "AJTJK-battery1"
+  129 label *label437
+  130 read *tmp151 @this :block
+  131 write *tmp151 :buildBlockFromCfg*retval :block
+  132 label *label438
+  133 set :block "ALTJL-battery2"
+  134 label *label441
+  135 read *tmp151 @this :block
+  136 write *tmp151 :buildBlockFromCfg*retval :block
+  137 label *label442
+  138 set :block "AJRJM-combustion-generator3"
+  139 label *label445
+  140 read *tmp151 @this :block
+  141 write *tmp151 :buildBlockFromCfg*retval :block
+  142 label *label446
+  143 set :block "ALMQJN-silicon-smelter4"
+  144 label *label449
+  145 read *tmp151 @this :block
+  146 write *tmp151 :buildBlockFromCfg*retval :block
+  147 label *label450
+  148 set :block "A{LNJO-inverted-sorter5"
+  149 label *label453
+  150 read *tmp151 @this :block
+  151 write *tmp151 :buildBlockFromCfg*retval :block
+  152 label *label454
+  153 set :block "A©JNJP-unloader6"
+  154 label *label457
+  155 read *tmp151 @this :block
+  156 write *tmp151 :buildBlockFromCfg*retval :block
+  157 label *label458
+  158 set :block "A{HNJQ-inverted-sorter7"
+  159 label *label461
+  160 read *tmp151 @this :block
+  161 write *tmp151 :buildBlockFromCfg*retval :block
+  162 label *label462
+  163 set :block "AJPJR-underflow-gate8"
+  164 label *label465
+  165 read *tmp151 @this :block
+  166 write *tmp151 :buildBlockFromCfg*retval :block
+  167 label *label466
+  168 set :block "AÕFDJS-micro-processor9"
+  169 label *label469
+  170 read *tmp151 @this :block
+  171 write *tmp151 :buildBlockFromCfg*retval :block
+  172 label *label470
+  173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
   175 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   176 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   122 write bank1 :buildBlockFromCfg*retval ".bank"
   123 set :block "AJEMJJ-graphite-press0"
   124 label *label433
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  125 read *tmp151 @this "AJEMJJ-graphite-press0"
+  126 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   127 label *label434
   128 set :block "AJTJK-battery1"
   129 label *label437
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  130 read *tmp151 @this "AJTJK-battery1"
+  131 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   132 label *label438
   133 set :block "ALTJL-battery2"
   134 label *label441
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  135 read *tmp151 @this "ALTJL-battery2"
+  136 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   137 label *label442
   138 set :block "AJRJM-combustion-generator3"
   139 label *label445
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  140 read *tmp151 @this "AJRJM-combustion-generator3"
+  141 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   142 label *label446
   143 set :block "ALMQJN-silicon-smelter4"
   144 label *label449
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  145 read *tmp151 @this "ALMQJN-silicon-smelter4"
+  146 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   147 label *label450
   148 set :block "A{LNJO-inverted-sorter5"
   149 label *label453
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  150 read *tmp151 @this "A{LNJO-inverted-sorter5"
+  151 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   152 label *label454
   153 set :block "A©JNJP-unloader6"
   154 label *label457
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  155 read *tmp151 @this "A©JNJP-unloader6"
+  156 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   157 label *label458
   158 set :block "A{HNJQ-inverted-sorter7"
   159 label *label461
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  160 read *tmp151 @this "A{HNJQ-inverted-sorter7"
+  161 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   162 label *label462
   163 set :block "AJPJR-underflow-gate8"
   164 label *label465
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  165 read *tmp151 @this "AJPJR-underflow-gate8"
+  166 write *tmp151 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   167 label *label466
   168 set :block "AÕFDJS-micro-processor9"
   169 label *label469
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  170 read *tmp151 @this "AÕFDJS-micro-processor9"
+  171 write *tmp151 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
   172 label *label470
   173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
 
   405 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   406 label *label136
   407 set .thoriumContainer :buildRemoteBlock*retval
-    * select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
+  408 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   409 write .thoriumDrill processor2 ".thoriumDrill"
   410 write .thoriumContainer processor2 ".thoriumContainer"
   411 write .thoriumContainer processor6 ":setThoriumContainer:container"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
   123 label *label433
   124 read *tmp151 @this "AJEMJJ-graphite-press0"
   125 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   126 label *label434
-    * set :block "AJTJK-battery1"
   127 label *label437
   128 read *tmp151 @this "AJTJK-battery1"
   129 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   130 label *label438
-    * set :block "ALTJL-battery2"
   131 label *label441
   132 read *tmp151 @this "ALTJL-battery2"
   133 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   134 label *label442
-    * set :block "AJRJM-combustion-generator3"
   135 label *label445
   136 read *tmp151 @this "AJRJM-combustion-generator3"
   137 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   138 label *label446
-    * set :block "ALMQJN-silicon-smelter4"
   139 label *label449
   140 read *tmp151 @this "ALMQJN-silicon-smelter4"
   141 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   142 label *label450
-    * set :block "A{LNJO-inverted-sorter5"
   143 label *label453
   144 read *tmp151 @this "A{LNJO-inverted-sorter5"
   145 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   146 label *label454
-    * set :block "A©JNJP-unloader6"
   147 label *label457
   148 read *tmp151 @this "A©JNJP-unloader6"
   149 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   150 label *label458
-    * set :block "A{HNJQ-inverted-sorter7"
   151 label *label461
   152 read *tmp151 @this "A{HNJQ-inverted-sorter7"
   153 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   154 label *label462
-    * set :block "AJPJR-underflow-gate8"
   155 label *label465
   156 read *tmp151 @this "AJPJR-underflow-gate8"
   157 write *tmp151 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   158 label *label466
-    * set :block "AÕFDJS-micro-processor9"
   159 label *label469
   160 read *tmp151 @this "AÕFDJS-micro-processor9"
   161 write *tmp151 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
 
   394 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   395 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   396 label *label136
-    * set .thoriumContainer :buildRemoteBlock*retval
   397 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   398 write .thoriumDrill processor2 ".thoriumDrill"
   399 write .thoriumContainer processor2 ".thoriumContainer"

Modifications by Unroll iteration loop at CoreBuilder.mnd:174:5 (-2 instructions):
 
  1057 end
  1058 label *label36
  1059 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp378 *label308
-    * jump *label305 always
-    * multilabel *label308 (m:marker1)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp378 *label309
-    * jump *label305 always
-    * multilabel *label309 (m:marker1)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp378 *label310
-    * jump *label305 always
-    * multilabel *label310 (m:marker1)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp378 *label311
-    * jump *label305 always
-    * multilabel *label311 (m:marker1)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp378 *label312
-    * jump *label305 always
-    * multilabel *label312 (m:marker1)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp378 *label313
-    * jump *label305 always
-    * multilabel *label313 (m:marker1)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp378 *label314
-    * label *label305
-    * op sign *tmp379 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label306
-    * multijump *tmp378 0 0 (m:marker1)
-    * multilabel *label314 (m:marker1)
-    * label *label307
+ 1060 set :meetTarget:t :meetTarget:copper
+ 1061 label *label474
+ 1062 op sign *tmp379 :meetTarget:t
+ 1063 op add :meetTarget:count :meetTarget:count *tmp379
+ 1064 label *label475
+ 1065 set :meetTarget:t :meetTarget:lead
+ 1066 label *label478
+ 1067 op sign *tmp379 :meetTarget:t
+ 1068 op add :meetTarget:count :meetTarget:count *tmp379
+ 1069 label *label479
+ 1070 set :meetTarget:t :meetTarget:graphite
+ 1071 label *label482
+ 1072 op sign *tmp379 :meetTarget:t
+ 1073 op add :meetTarget:count :meetTarget:count *tmp379
+ 1074 label *label483
+ 1075 set :meetTarget:t :meetTarget:silicon
+ 1076 label *label486
+ 1077 op sign *tmp379 :meetTarget:t
+ 1078 op add :meetTarget:count :meetTarget:count *tmp379
+ 1079 label *label487
+ 1080 set :meetTarget:t :meetTarget:titanium
+ 1081 label *label490
+ 1082 op sign *tmp379 :meetTarget:t
+ 1083 op add :meetTarget:count :meetTarget:count *tmp379
+ 1084 label *label491
+ 1085 set :meetTarget:t :meetTarget:metaglass
+ 1086 label *label494
+ 1087 op sign *tmp379 :meetTarget:t
+ 1088 op add :meetTarget:count :meetTarget:count *tmp379
+ 1089 label *label495
+ 1090 set :meetTarget:t :meetTarget:thorium
+ 1091 label *label498
+ 1092 op sign *tmp379 :meetTarget:t
+ 1093 op add :meetTarget:count :meetTarget:count *tmp379
+ 1094 label *label499
+ 1095 label *label307
  1096 write :meetTarget:count processor2 ".totalTargets"
  1097 write :meetTarget:block processor2 ".nextBlock"
  1098 write :meetTarget:copper processor2 ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1059 set :meetTarget:count 0
  1060 set :meetTarget:t :meetTarget:copper
  1061 label *label474
-    * op sign *tmp379 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp379
+ 1062 op sign *tmp379 :meetTarget:copper
+ 1063 op add :meetTarget:count 0 *tmp379
  1064 label *label475
  1065 set :meetTarget:t :meetTarget:lead
  1066 label *label478
-    * op sign *tmp379 :meetTarget:t
+ 1067 op sign *tmp379 :meetTarget:lead
  1068 op add :meetTarget:count :meetTarget:count *tmp379
  1069 label *label479
  1070 set :meetTarget:t :meetTarget:graphite
  1071 label *label482
-    * op sign *tmp379 :meetTarget:t
+ 1072 op sign *tmp379 :meetTarget:graphite
  1073 op add :meetTarget:count :meetTarget:count *tmp379
  1074 label *label483
  1075 set :meetTarget:t :meetTarget:silicon
  1076 label *label486
-    * op sign *tmp379 :meetTarget:t
+ 1077 op sign *tmp379 :meetTarget:silicon
  1078 op add :meetTarget:count :meetTarget:count *tmp379
  1079 label *label487
  1080 set :meetTarget:t :meetTarget:titanium
  1081 label *label490
-    * op sign *tmp379 :meetTarget:t
+ 1082 op sign *tmp379 :meetTarget:titanium
  1083 op add :meetTarget:count :meetTarget:count *tmp379
  1084 label *label491
  1085 set :meetTarget:t :meetTarget:metaglass
  1086 label *label494
-    * op sign *tmp379 :meetTarget:t
+ 1087 op sign *tmp379 :meetTarget:metaglass
  1088 op add :meetTarget:count :meetTarget:count *tmp379
  1089 label *label495
  1090 set :meetTarget:t :meetTarget:thorium
  1091 label *label498
-    * op sign *tmp379 :meetTarget:t
+ 1092 op sign *tmp379 :meetTarget:thorium
  1093 op add :meetTarget:count :meetTarget:count *tmp379
  1094 label *label499
  1095 label *label307

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1056 return :unpackCfg*retaddr
  1057 end
  1058 label *label36
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1059 label *label474
  1060 op sign *tmp379 :meetTarget:copper
  1061 op add :meetTarget:count 0 *tmp379
  1062 label *label475
-    * set :meetTarget:t :meetTarget:lead
  1063 label *label478
  1064 op sign *tmp379 :meetTarget:lead
  1065 op add :meetTarget:count :meetTarget:count *tmp379
  1066 label *label479
-    * set :meetTarget:t :meetTarget:graphite
  1067 label *label482
  1068 op sign *tmp379 :meetTarget:graphite
  1069 op add :meetTarget:count :meetTarget:count *tmp379
  1070 label *label483
-    * set :meetTarget:t :meetTarget:silicon
  1071 label *label486
  1072 op sign *tmp379 :meetTarget:silicon
  1073 op add :meetTarget:count :meetTarget:count *tmp379
  1074 label *label487
-    * set :meetTarget:t :meetTarget:titanium
  1075 label *label490
  1076 op sign *tmp379 :meetTarget:titanium
  1077 op add :meetTarget:count :meetTarget:count *tmp379
  1078 label *label491
-    * set :meetTarget:t :meetTarget:metaglass
  1079 label *label494
  1080 op sign *tmp379 :meetTarget:metaglass
  1081 op add :meetTarget:count :meetTarget:count *tmp379
  1082 label *label495
-    * set :meetTarget:t :meetTarget:thorium
  1083 label *label498
  1084 op sign *tmp379 :meetTarget:thorium
  1085 op add :meetTarget:count :meetTarget:count *tmp379

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   505 write *tmp235 processor7 ".sandTarget"
   506 jump *label164 equal .thoriumContainer false
   507 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label167 (h:*label167)
-    * call *label11 *invalid :status1*retval (m:*label167) (h:*label167)
-    * label *label167
+  508 label *label503
+  509 write :status1:text processor2 ".status1"
+  510 label *label504
   511 sensor *tmp237 .thoriumBattery @totalPower
   512 jump *label168 greaterThanEq *tmp237 2000
   513 sensor *tmp240 .thoriumGenerator @coal
 
   548 read *tmp83 .controller ".monos"
   549 jump *label180 lessThanEq *tmp83 1
   550 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label183 (h:*label183)
-    * call *label11 *invalid :status1*retval (m:*label183) (h:*label183)
-    * label *label183
+  551 label *label505
+  552 write :status1:text processor2 ".status1"
+  553 label *label506
   554 set :mineOre.1:ore @coal
   555 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   556 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
 
   565 sensor *tmp256 AJEMJJ-graphite-press0 @coal
   566 jump *label190 greaterThanEq *tmp256 5
   567 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label192 (h:*label192)
-    * call *label11 *invalid :status1*retval (m:*label192) (h:*label192)
-    * label *label192
+  568 label *label507
+  569 write :status1:text processor2 ".status1"
+  570 label *label508
   571 set :supplyBlock:block AJEMJJ-graphite-press0
   572 set :supplyBlock:ore @coal
   573 setaddr :supplyBlock*retaddr *label193 (h:*label193)
 
   583 sensor *tmp262 ALMQJN-silicon-smelter4 @coal
   584 jump *label196 greaterThanEq *tmp262 5
   585 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label198 (h:*label198)
-    * call *label11 *invalid :status1*retval (m:*label198) (h:*label198)
-    * label *label198
+  586 label *label509
+  587 write :status1:text processor2 ".status1"
+  588 label *label510
   589 set :supplyBlock:block ALMQJN-silicon-smelter4
   590 set :supplyBlock:ore @coal
   591 setaddr :supplyBlock*retaddr *label199 (h:*label199)
 
   597 sensor *tmp265 ALMQJN-silicon-smelter4 @sand
   598 jump *label200 greaterThanEq *tmp265 5
   599 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label202 (h:*label202)
-    * call *label11 *invalid :status1*retval (m:*label202) (h:*label202)
-    * label *label202
+  600 label *label511
+  601 write :status1:text processor2 ".status1"
+  602 label *label512
   603 set :supplyBlock:block ALMQJN-silicon-smelter4
   604 set :supplyBlock:ore @sand
   605 setaddr :supplyBlock*retaddr *label203 (h:*label203)
 
   616 sensor *tmp271 AJRJM-combustion-generator3 @coal
   617 jump *label206 greaterThanEq *tmp271 2
   618 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label208 (h:*label208)
-    * call *label11 *invalid :status1*retval (m:*label208) (h:*label208)
-    * label *label208
+  619 label *label513
+  620 write :status1:text processor2 ".status1"
+  621 label *label514
   622 set :supplyBlock:block AJRJM-combustion-generator3
   623 set :supplyBlock:ore @coal
   624 setaddr :supplyBlock*retaddr *label209 (h:*label209)
 
   646 op mul *tmp286 A©JNJP-unloader6 .powerTarget
   647 jump *label216 greaterThanEq *tmp285 *tmp286
   648 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label218 (h:*label218)
-    * call *label11 *invalid :status1*retval (m:*label218) (h:*label218)
-    * label *label218
+  649 label *label515
+  650 write :status1:text processor2 ".status1"
+  651 label *label516
   652 set :mineOre.1:ore @coal
   653 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   654 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
 
   658 sensor *tmp289 .core @silicon
   659 jump *label220 greaterThanEq *tmp289 silicon
   660 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label222 (h:*label222)
-    * call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
-    * label *label222
+  661 label *label517
+  662 write :status1:text processor2 ".status1"
+  663 label *label518
   664 sensor :supplyBase0:coal .core @coal
   665 sensor :supplyBase0:sand .core @sand
   666 select *tmp295 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   673 sensor *tmp296 .core @copper
   674 jump *label226 greaterThanEq *tmp296 copper
   675 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label228 (h:*label228)
-    * call *label11 *invalid :status1*retval (m:*label228) (h:*label228)
-    * label *label228
+  676 label *label519
+  677 write :status1:text processor2 ".status1"
+  678 label *label520
   679 set :mineOre.1:ore @copper
   680 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   681 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
 
   685 sensor *tmp299 .core @lead
   686 jump *label230 greaterThanEq *tmp299 lead
   687 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label232 (h:*label232)
-    * call *label11 *invalid :status1*retval (m:*label232) (h:*label232)
-    * label *label232
+  688 label *label521
+  689 write :status1:text processor2 ".status1"
+  690 label *label522
   691 set :mineOre.1:ore @lead
   692 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   693 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
 
   697 sensor *tmp302 .core @metaglass
   698 jump *label234 greaterThanEq *tmp302 metaglass
   699 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label236 (h:*label236)
-    * call *label11 *invalid :status1*retval (m:*label236) (h:*label236)
-    * label *label236
+  700 label *label523
+  701 write :status1:text processor2 ".status1"
+  702 label *label524
   703 set :mineOre.1:ore @sand
   704 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   705 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
 
   707 jump *label235 always
   708 label *label234
   709 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label238 (h:*label238)
-    * call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
-    * label *label238
+  710 label *label525
+  711 write :status1:text processor2 ".status1"
+  712 label *label526
   713 sensor :supplyBase0:coal.1 .core @coal
   714 sensor :supplyBase0:sand.1 .core @sand
   715 select *tmp308 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   727 jump *label213 always
   728 label *label212
   729 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label242 (h:*label242)
-    * call *label11 *invalid :status1*retval (m:*label242) (h:*label242)
-    * label *label242
+  730 label *label527
+  731 write :status1:text processor2 ".status1"
+  732 label *label528
   733 set :fetchBlock:block .titaniumDrill
   734 set :fetchBlock:item @titanium
   735 setaddr :fetchBlock*retaddr *label243 (h:*label243)
 
   894 label *label266
   895 return :lineUpUnits*retaddr
   896 end
-    * label *label11
-    * write :status1:text processor2 ".status1"
-    * label *label272
-    * return :status1*retaddr
-    * end
   897 label *label24
   898 set :status2:text "Mining "
   899 set :status2:item :mineOre.1:ore

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   506 jump *label164 equal .thoriumContainer false
   507 set :status1:text "Phase 2: servicing thorium drill"
   508 label *label503
-    * write :status1:text processor2 ".status1"
+  509 write "Phase 2: servicing thorium drill" processor2 ".status1"
   510 label *label504
   511 sensor *tmp237 .thoriumBattery @totalPower
   512 jump *label168 greaterThanEq *tmp237 2000
 
   549 jump *label180 lessThanEq *tmp83 1
   550 set :status1:text "Phase 1: supplying base"
   551 label *label505
-    * write :status1:text processor2 ".status1"
+  552 write "Phase 1: supplying base" processor2 ".status1"
   553 label *label506
   554 set :mineOre.1:ore @coal
   555 setaddr :mineOre.1*retaddr *label184 (h:*label184)
 
   566 jump *label190 greaterThanEq *tmp256 5
   567 set :status1:text "Goal 1: graphite requirement"
   568 label *label507
-    * write :status1:text processor2 ".status1"
+  569 write "Goal 1: graphite requirement" processor2 ".status1"
   570 label *label508
   571 set :supplyBlock:block AJEMJJ-graphite-press0
   572 set :supplyBlock:ore @coal
 
   584 jump *label196 greaterThanEq *tmp262 5
   585 set :status1:text "Goal 2: coal for silicon requirement"
   586 label *label509
-    * write :status1:text processor2 ".status1"
+  587 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   588 label *label510
   589 set :supplyBlock:block ALMQJN-silicon-smelter4
   590 set :supplyBlock:ore @coal
 
   598 jump *label200 greaterThanEq *tmp265 5
   599 set :status1:text "Goal 3: sand for silicon requirement"
   600 label *label511
-    * write :status1:text processor2 ".status1"
+  601 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   602 label *label512
   603 set :supplyBlock:block ALMQJN-silicon-smelter4
   604 set :supplyBlock:ore @sand
 
   617 jump *label206 greaterThanEq *tmp271 2
   618 set :status1:text "Goal 4: supplying generator"
   619 label *label513
-    * write :status1:text processor2 ".status1"
+  620 write "Goal 4: supplying generator" processor2 ".status1"
   621 label *label514
   622 set :supplyBlock:block AJRJM-combustion-generator3
   623 set :supplyBlock:ore @coal
 
   647 jump *label216 greaterThanEq *tmp285 *tmp286
   648 set :status1:text "Goal 5: supplying generator"
   649 label *label515
-    * write :status1:text processor2 ".status1"
+  650 write "Goal 5: supplying generator" processor2 ".status1"
   651 label *label516
   652 set :mineOre.1:ore @coal
   653 setaddr :mineOre.1*retaddr *label219 (h:*label219)
 
   659 jump *label220 greaterThanEq *tmp289 silicon
   660 set :status1:text "Goal 6: silicon requirement"
   661 label *label517
-    * write :status1:text processor2 ".status1"
+  662 write "Goal 6: silicon requirement" processor2 ".status1"
   663 label *label518
   664 sensor :supplyBase0:coal .core @coal
   665 sensor :supplyBase0:sand .core @sand
 
   674 jump *label226 greaterThanEq *tmp296 copper
   675 set :status1:text "Goal 7: copper requirement"
   676 label *label519
-    * write :status1:text processor2 ".status1"
+  677 write "Goal 7: copper requirement" processor2 ".status1"
   678 label *label520
   679 set :mineOre.1:ore @copper
   680 setaddr :mineOre.1*retaddr *label229 (h:*label229)
 
   686 jump *label230 greaterThanEq *tmp299 lead
   687 set :status1:text "Goal 8: lead requirement"
   688 label *label521
-    * write :status1:text processor2 ".status1"
+  689 write "Goal 8: lead requirement" processor2 ".status1"
   690 label *label522
   691 set :mineOre.1:ore @lead
   692 setaddr :mineOre.1*retaddr *label233 (h:*label233)
 
   698 jump *label234 greaterThanEq *tmp302 metaglass
   699 set :status1:text "Goal 9: metaglass requirement"
   700 label *label523
-    * write :status1:text processor2 ".status1"
+  701 write "Goal 9: metaglass requirement" processor2 ".status1"
   702 label *label524
   703 set :mineOre.1:ore @sand
   704 setaddr :mineOre.1*retaddr *label237 (h:*label237)
 
   708 label *label234
   709 set :status1:text "Goal 10: supplying base"
   710 label *label525
-    * write :status1:text processor2 ".status1"
+  711 write "Goal 10: supplying base" processor2 ".status1"
   712 label *label526
   713 sensor :supplyBase0:coal.1 .core @coal
   714 sensor :supplyBase0:sand.1 .core @sand
 
   728 label *label212
   729 set :status1:text "Goal 11: Fetching titanium"
   730 label *label527
-    * write :status1:text processor2 ".status1"
+  731 write "Goal 11: Fetching titanium" processor2 ".status1"
   732 label *label528
   733 set :fetchBlock:block .titaniumDrill
   734 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   504 op max *tmp235 0 *tmp234
   505 write *tmp235 processor7 ".sandTarget"
   506 jump *label164 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   507 label *label503
   508 write "Phase 2: servicing thorium drill" processor2 ".status1"
   509 label *label504
 
   546 label *label164
   547 read *tmp83 .controller ".monos"
   548 jump *label180 lessThanEq *tmp83 1
-    * set :status1:text "Phase 1: supplying base"
   549 label *label505
   550 write "Phase 1: supplying base" processor2 ".status1"
   551 label *label506
 
   562 jump *label188 greaterThanEq *tmp253 graphite
   563 sensor *tmp256 AJEMJJ-graphite-press0 @coal
   564 jump *label190 greaterThanEq *tmp256 5
-    * set :status1:text "Goal 1: graphite requirement"
   565 label *label507
   566 write "Goal 1: graphite requirement" processor2 ".status1"
   567 label *label508
 
   579 jump *label194 greaterThanEq *tmp259 silicon
   580 sensor *tmp262 ALMQJN-silicon-smelter4 @coal
   581 jump *label196 greaterThanEq *tmp262 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   582 label *label509
   583 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   584 label *label510
 
   592 label *label196
   593 sensor *tmp265 ALMQJN-silicon-smelter4 @sand
   594 jump *label200 greaterThanEq *tmp265 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   595 label *label511
   596 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   597 label *label512
 
   610 jump *label204 greaterThanEq *tmp268 .powerTarget
   611 sensor *tmp271 AJRJM-combustion-generator3 @coal
   612 jump *label206 greaterThanEq *tmp271 2
-    * set :status1:text "Goal 4: supplying generator"
   613 label *label513
   614 write "Goal 4: supplying generator" processor2 ".status1"
   615 label *label514
 
   639 sensor *tmp285 AJTJK-battery1 @totalPower
   640 op mul *tmp286 A©JNJP-unloader6 .powerTarget
   641 jump *label216 greaterThanEq *tmp285 *tmp286
-    * set :status1:text "Goal 5: supplying generator"
   642 label *label515
   643 write "Goal 5: supplying generator" processor2 ".status1"
   644 label *label516
 
   650 label *label216
   651 sensor *tmp289 .core @silicon
   652 jump *label220 greaterThanEq *tmp289 silicon
-    * set :status1:text "Goal 6: silicon requirement"
   653 label *label517
   654 write "Goal 6: silicon requirement" processor2 ".status1"
   655 label *label518
 
   664 label *label220
   665 sensor *tmp296 .core @copper
   666 jump *label226 greaterThanEq *tmp296 copper
-    * set :status1:text "Goal 7: copper requirement"
   667 label *label519
   668 write "Goal 7: copper requirement" processor2 ".status1"
   669 label *label520
 
   675 label *label226
   676 sensor *tmp299 .core @lead
   677 jump *label230 greaterThanEq *tmp299 lead
-    * set :status1:text "Goal 8: lead requirement"
   678 label *label521
   679 write "Goal 8: lead requirement" processor2 ".status1"
   680 label *label522
 
   686 label *label230
   687 sensor *tmp302 .core @metaglass
   688 jump *label234 greaterThanEq *tmp302 metaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   689 label *label523
   690 write "Goal 9: metaglass requirement" processor2 ".status1"
   691 label *label524
 
   695 label *label237
   696 jump *label235 always
   697 label *label234
-    * set :status1:text "Goal 10: supplying base"
   698 label *label525
   699 write "Goal 10: supplying base" processor2 ".status1"
   700 label *label526
 
   714 label *label215
   715 jump *label213 always
   716 label *label212
-    * set :status1:text "Goal 11: Fetching titanium"
   717 label *label527
   718 write "Goal 11: Fetching titanium" processor2 ".status1"
   719 label *label528

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 (-4 instructions):
 
   522 label *label172
   523 set :supplyBlockFromCore:target .thoriumGenerator
   524 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label175 (h:*label175)
-    * call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
-    * label *label175
+  525 label *label529
+  526 sensor *tmp341 :supplyBlockFromCore:target @itemCapacity
+  527 op min :transportStatus:target *tmp341 30
+  528 set :transportStatus:item :supplyBlockFromCore:item
+  529 setaddr :transportStatus*retaddr *label530 (h:*label530)
+  530 call *label14 *invalid :transportStatus*retval (m:*label530) (h:*label530)
+  531 label *label530
+  532 set :status2:text "Transferring "
+  533 set :status2:item :supplyBlockFromCore:item
+  534 set :status2:block :supplyBlockFromCore:target
+  535 setaddr :status2*retaddr *label531 (h:*label531)
+  536 call *label12 *invalid :status2*retval (m:*label531) (h:*label531)
+  537 label *label531
+  538 set :moveToEmpty:x .coreX
+  539 set :moveToEmpty:y .coreY
+  540 setaddr :moveToEmpty*retaddr *label532 (h:*label532)
+  541 call *label18 *invalid :moveToEmpty*retval (m:*label532) (h:*label532)
+  542 label *label532
+  543 setaddr :dropAll*retaddr *label533 (h:*label533)
+  544 call *label19 *invalid :dropAll*retval (m:*label533) (h:*label533)
+  545 label *label533
+  546 label *label534
+  547 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  548 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  549 op notEqual *tmp344 :supplyBlockFromCore:unitItem null
+  550 op notEqual *tmp345 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  551 op land *tmp346 *tmp344 *tmp345
+  552 jump *label535 equal *tmp346 false
+  553 ucontrol itemDrop @air 1000
+  554 label *label535
+  555 label *label536
+  556 label *label537
+  557 sensor *tmp348 @unit :supplyBlockFromCore:item
+  558 op lessThan *tmp349 *tmp348 30
+  559 sensor *tmp350 .core :supplyBlockFromCore:item
+  560 op land *tmp351 *tmp349 *tmp350
+  561 jump *label534 notEqual *tmp351 false
+  562 label *label538
+  563 set :depositItems:block :supplyBlockFromCore:target
+  564 set :depositItems:item :supplyBlockFromCore:item
+  565 setaddr :depositItems*retaddr *label539 (h:*label539)
+  566 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
+  567 label *label539
+  568 label *label540
   569 label *label173
   570 label *label170
   571 label *label171
 
  1008 label *label287
  1009 return :supplyBlock*retaddr
  1010 end
-    * label *label27
-    * sensor *tmp341 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp341 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label293 (h:*label293)
-    * call *label14 *invalid :transportStatus*retval (m:*label293) (h:*label293)
-    * label *label293
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label294 (h:*label294)
-    * call *label12 *invalid :status2*retval (m:*label294) (h:*label294)
-    * label *label294
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label295 (h:*label295)
-    * call *label18 *invalid :moveToEmpty*retval (m:*label295) (h:*label295)
-    * label *label295
-    * setaddr :dropAll*retaddr *label296 (h:*label296)
-    * call *label19 *invalid :dropAll*retval (m:*label296) (h:*label296)
-    * label *label296
-    * label *label297
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp344 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp345 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp346 *tmp344 *tmp345
-    * jump *label300 equal *tmp346 false
-    * ucontrol itemDrop @air 1000
-    * label *label300
-    * label *label301
-    * label *label298
-    * sensor *tmp348 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp349 *tmp348 30
-    * sensor *tmp350 .core :supplyBlockFromCore:item
-    * op land *tmp351 *tmp349 *tmp350
-    * jump *label297 notEqual *tmp351 false
-    * label *label299
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label302 (h:*label302)
-    * call *label21 *invalid :depositItems*retval (m:*label302) (h:*label302)
-    * label *label302
-    * label *label292
-    * return :supplyBlockFromCore*retaddr
-    * end
  1011 label *label29
  1012 read *tmp353 :unpackCfg:cfg 1
  1013 op sub *tmp354 *tmp353 74

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   523 set :supplyBlockFromCore:target .thoriumGenerator
   524 set :supplyBlockFromCore:item @coal
   525 label *label529
-    * sensor *tmp341 :supplyBlockFromCore:target @itemCapacity
+  526 sensor *tmp341 .thoriumGenerator @itemCapacity
   527 op min :transportStatus:target *tmp341 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  528 set :transportStatus:item @coal
   529 setaddr :transportStatus*retaddr *label530 (h:*label530)
   530 call *label14 *invalid :transportStatus*retval (m:*label530) (h:*label530)
   531 label *label530
   532 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  533 set :status2:item @coal
+  534 set :status2:block .thoriumGenerator
   535 setaddr :status2*retaddr *label531 (h:*label531)
   536 call *label12 *invalid :status2*retval (m:*label531) (h:*label531)
   537 label *label531
 
   544 call *label19 *invalid :dropAll*retval (m:*label533) (h:*label533)
   545 label *label533
   546 label *label534
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
+  547 ucontrol itemTake .core @coal 30
   548 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   549 op notEqual *tmp344 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp345 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  550 op notEqual *tmp345 :supplyBlockFromCore:unitItem @coal
   551 op land *tmp346 *tmp344 *tmp345
   552 jump *label535 equal *tmp346 false
   553 ucontrol itemDrop @air 1000
   554 label *label535
   555 label *label536
   556 label *label537
-    * sensor *tmp348 @unit :supplyBlockFromCore:item
+  557 sensor *tmp348 @unit @coal
   558 op lessThan *tmp349 *tmp348 30
-    * sensor *tmp350 .core :supplyBlockFromCore:item
+  559 sensor *tmp350 .core @coal
   560 op land *tmp351 *tmp349 *tmp350
   561 jump *label534 notEqual *tmp351 false
   562 label *label538
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  563 set :depositItems:block .thoriumGenerator
+  564 set :depositItems:item @coal
   565 setaddr :depositItems*retaddr *label539 (h:*label539)
   566 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
   567 label *label539

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   520 label *label174
   521 jump *label173 always
   522 label *label172
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   523 label *label529
   524 sensor *tmp341 .thoriumGenerator @itemCapacity
   525 op min :transportStatus:target *tmp341 30

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
  1262 end
  1263 label *label18
  1264 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label362 (h:*label362)
-    * call *label13 *invalid :status3*retval (m:*label362) (h:*label362)
-    * label *label362
+ 1265 label *label541
+ 1266 write :status3:text processor2 ".status3"
+ 1267 label *label542
  1268 label *label363
  1269 sensor *tmp448 @unit @firstItem
  1270 jump *label366 equal *tmp448 null
 
  1292 end
  1293 label *label21
  1294 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label373 (h:*label373)
-    * call *label13 *invalid :status3*retval (m:*label373) (h:*label373)
-    * label *label373
+ 1295 label *label543
+ 1296 write :status3:text processor2 ".status3"
+ 1297 label *label544
  1298 sensor *tmp455 @unit @firstItem
  1299 jump *label374 notEqual *tmp455 :depositItems:item
  1300 set :moveToBlock:block :depositItems:block
 
  1355 label *label388
  1356 label *label389
  1357 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label391 (h:*label391)
-    * call *label13 *invalid :status3*retval (m:*label391) (h:*label391)
-    * label *label391
+ 1358 label *label545
+ 1359 write :status3:text processor2 ".status3"
+ 1360 label *label546
  1361 op add :mineOre:stop @second 10
  1362 label *label392
  1363 sensor :mineOre:item @unit @firstItem
 
  1438 label *label384
  1439 return :mineOre*retaddr
  1440 end
-    * label *label13
-    * write :status3:text processor2 ".status3"
-    * label *label419
-    * return :status3*retaddr
-    * end
  1441 label *label20
  1442 sensor *tmp504 :moveToBlock:block @x
  1443 sensor *tmp505 :moveToBlock:block @y
 
  1464 end
  1465 label *label16
  1466 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label427 (h:*label427)
-    * call *label13 *invalid :status3*retval (m:*label427) (h:*label427)
-    * label *label427
+ 1467 label *label547
+ 1468 write :status3:text processor2 ".status3"
+ 1469 label *label548
  1470 op sub *tmp512 :moveTo:radius 0.5
  1471 label *label428
  1472 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1263 label *label18
  1264 set :status3:text "Moving..."
  1265 label *label541
-    * write :status3:text processor2 ".status3"
+ 1266 write "Moving..." processor2 ".status3"
  1267 label *label542
  1268 label *label363
  1269 sensor *tmp448 @unit @firstItem
 
  1293 label *label21
  1294 set :status3:text "Depositing..."
  1295 label *label543
-    * write :status3:text processor2 ".status3"
+ 1296 write "Depositing..." processor2 ".status3"
  1297 label *label544
  1298 sensor *tmp455 @unit @firstItem
  1299 jump *label374 notEqual *tmp455 :depositItems:item
 
  1356 label *label389
  1357 set :status3:text "Mining..."
  1358 label *label545
-    * write :status3:text processor2 ".status3"
+ 1359 write "Mining..." processor2 ".status3"
  1360 label *label546
  1361 op add :mineOre:stop @second 10
  1362 label *label392
 
  1465 label *label16
  1466 set :status3:text "Moving..."
  1467 label *label547
-    * write :status3:text processor2 ".status3"
+ 1468 write "Moving..." processor2 ".status3"
  1469 label *label548
  1470 op sub *tmp512 :moveTo:radius 0.5
  1471 label *label428

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1261 return :transportStatus*retaddr
  1262 end
  1263 label *label18
-    * set :status3:text "Moving..."
  1264 label *label541
  1265 write "Moving..." processor2 ".status3"
  1266 label *label542
 
  1290 return :dropAll*retaddr
  1291 end
  1292 label *label21
-    * set :status3:text "Depositing..."
  1293 label *label543
  1294 write "Depositing..." processor2 ".status3"
  1295 label *label544
 
  1352 label *label390
  1353 label *label388
  1354 label *label389
-    * set :status3:text "Mining..."
  1355 label *label545
  1356 write "Mining..." processor2 ".status3"
  1357 label *label546
 
  1460 return :locateOre*retaddr
  1461 end
  1462 label *label16
-    * set :status3:text "Moving..."
  1463 label *label547
  1464 write "Moving..." processor2 ".status3"
  1465 label *label548

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
  1297 jump *label374 notEqual *tmp455 :depositItems:item
  1298 set :moveToBlock:block :depositItems:block
  1299 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label376 (h:*label376)
-    * call *label20 *invalid :moveToBlock*retval (m:*label376) (h:*label376)
-    * label *label376
+ 1300 label *label549
+ 1301 sensor *tmp504 :moveToBlock:block @x
+ 1302 sensor *tmp505 :moveToBlock:block @y
+ 1303 set :moveTo:x *tmp504
+ 1304 set :moveTo:y *tmp505
+ 1305 set :moveTo:radius :moveToBlock:radius
+ 1306 setaddr :moveTo*retaddr *label550 (h:*label550)
+ 1307 call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
+ 1308 label *label550
+ 1309 label *label551
  1310 sensor :depositItems:cap :depositItems:block @itemCapacity
  1311 label *label377
  1312 ucontrol itemDrop :depositItems:block 30
 
  1442 label *label384
  1443 return :mineOre*retaddr
  1444 end
-    * label *label20
-    * sensor *tmp504 :moveToBlock:block @x
-    * sensor *tmp505 :moveToBlock:block @y
-    * set :moveTo:x *tmp504
-    * set :moveTo:y *tmp505
-    * set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label421 (h:*label421)
-    * call *label16 *invalid :moveTo*retval (m:*label421) (h:*label421)
-    * label *label421
-    * label *label420
-    * return :moveToBlock*retaddr
-    * end
  1445 label *label22
  1446 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
  1447 jump *label423 notEqual *tmp506 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1298 set :moveToBlock:block :depositItems:block
  1299 set :moveToBlock:radius 6
  1300 label *label549
-    * sensor *tmp504 :moveToBlock:block @x
-    * sensor *tmp505 :moveToBlock:block @y
+ 1301 sensor *tmp504 :depositItems:block @x
+ 1302 sensor *tmp505 :depositItems:block @y
  1303 set :moveTo:x *tmp504
  1304 set :moveTo:y *tmp505
-    * set :moveTo:radius :moveToBlock:radius
+ 1305 set :moveTo:radius 6
  1306 setaddr :moveTo*retaddr *label550 (h:*label550)
  1307 call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
  1308 label *label550

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
  1295 label *label544
  1296 sensor *tmp455 @unit @firstItem
  1297 jump *label374 notEqual *tmp455 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
  1298 label *label549
  1299 sensor *tmp504 :depositItems:block @x
  1300 sensor *tmp505 :depositItems:block @y

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
  1340 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1341 label *label385
  1342 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label386 (h:*label386)
-    * call *label22 *invalid :locateOre*retval (m:*label386) (h:*label386)
-    * label *label386
+ 1343 label *label552
+ 1344 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
+ 1345 jump *label554 notEqual *tmp506 false
+ 1346 set :error:error "Cannot locate ore"
+ 1347 setaddr :error*retaddr *label553 (h:*label553)
+ 1348 call *label15 *invalid :error*retval (m:*label553) (h:*label553)
+ 1349 label *label553
+ 1350 label *label554
+ 1351 label *label555
+ 1352 label *label556
  1353 set :mineOre:x :locateOre:x
  1354 set :mineOre:y :locateOre:y
  1355 set :moveToEmpty:x :locateOre:x
 
  1447 label *label384
  1448 return :mineOre*retaddr
  1449 end
-    * label *label22
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
-    * jump *label423 notEqual *tmp506 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label425 (h:*label425)
-    * call *label15 *invalid :error*retval (m:*label425) (h:*label425)
-    * label *label425
-    * label *label423
-    * label *label424
-    * label *label422
-    * return :locateOre*retaddr
-    * end
  1450 label *label16
  1451 label *label547
  1452 write "Moving..." processor2 ".status3"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1341 label *label385
  1342 set :locateOre:ore :mineOre:ore
  1343 label *label552
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
+ 1344 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
  1345 jump *label554 notEqual *tmp506 false
  1346 set :error:error "Cannot locate ore"
  1347 setaddr :error*retaddr *label553 (h:*label553)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
  1339 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1340 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1341 label *label385
-    * set :locateOre:ore :mineOre:ore
  1342 label *label552
  1343 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
  1344 jump *label554 notEqual *tmp506 false

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
  1301 set :moveTo:x *tmp504
  1302 set :moveTo:y *tmp505
  1303 set :moveTo:radius 6
-    * setaddr :moveTo*retaddr *label550 (h:*label550)
-    * call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
-    * label *label550
+ 1304 label *label557
+ 1305 label *label558
+ 1306 write "Moving..." processor2 ".status3"
+ 1307 label *label559
+ 1308 op sub *tmp512 :moveTo:radius 0.5
+ 1309 label *label560
+ 1310 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510
+ 1311 jump *label562 notEqual *tmp510 false
+ 1312 ucontrol approach :moveTo:x :moveTo:y *tmp512
+ 1313 label *label561
+ 1314 jump *label560 always
+ 1315 label *label562
+ 1316 label *label563
  1317 label *label551
  1318 sensor :depositItems:cap :depositItems:block @itemCapacity
  1319 label *label377
 
  1456 label *label384
  1457 return :mineOre*retaddr
  1458 end
-    * label *label16
-    * label *label547
-    * write "Moving..." processor2 ".status3"
-    * label *label548
-    * op sub *tmp512 :moveTo:radius 0.5
-    * label *label428
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510
-    * jump *label430 notEqual *tmp510 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp512
-    * label *label429
-    * jump *label428 always
-    * label *label430
-    * label *label426
-    * return :moveTo*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1305 label *label558
  1306 write "Moving..." processor2 ".status3"
  1307 label *label559
-    * op sub *tmp512 :moveTo:radius 0.5
+ 1308 op sub *tmp512 6 0.5
  1309 label *label560
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp510
+ 1310 ucontrol within *tmp504 *tmp505 6 *tmp510
  1311 jump *label562 notEqual *tmp510 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp512
+ 1312 ucontrol approach *tmp504 *tmp505 5.5
  1313 label *label561
  1314 jump *label560 always
  1315 label *label562

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1298 label *label549
  1299 sensor *tmp504 :depositItems:block @x
  1300 sensor *tmp505 :depositItems:block @y
-    * set :moveTo:x *tmp504
-    * set :moveTo:y *tmp505
-    * set :moveTo:radius 6
  1301 label *label557
  1302 label *label558
  1303 write "Moving..." processor2 ".status3"
  1304 label *label559
-    * op sub *tmp512 6 0.5
  1305 label *label560
  1306 ucontrol within *tmp504 *tmp505 6 *tmp510
  1307 jump *label562 notEqual *tmp510 false

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-4 instructions):
 
    93 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    94 jump *label65 equal *tmp144 false
    95 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label59 always
    96 label *label59
    97 set .titaniumDrill *tmp127
    98 write *tmp127 processor2 ".titaniumDrill"
 
   669 sensor *tmp277 .core @titanium
   670 op sub *tmp278 titanium *tmp277
   671 op min *tmp276 7 *tmp278
-    * jump *label211 always
   672 label *label211
   673 sensor *tmp280 .titaniumDrill @titanium
   674 jump *label212 greaterThanEq *tmp280 *tmp276
 
   825 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   826 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   827 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label249 always
   828 label *label249
   829 return :buildBlockFromCfg*retaddr
   830 end
 
  1240 write false .controller ":buildStop*finished"
  1241 write 2 .controller "@counter"
  1242 set :buildBlock*retval :buildBlock:built
-    * jump *label356 always
  1243 label *label356
  1244 return :buildBlock*retaddr
  1245 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   120 write .core :buildBlockFromCfg*retval ".core"
   121 write bank1 :buildBlockFromCfg*retval ".bank"
   122 label *label433
-    * read *tmp151 @this "AJEMJJ-graphite-press0"
+  123 set *tmp151 AJEMJJ-graphite-press0
   124 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   125 label *label434
   126 label *label437
-    * read *tmp151 @this "AJTJK-battery1"
+  127 set *tmp151 AJTJK-battery1
   128 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   129 label *label438
   130 label *label441
-    * read *tmp151 @this "ALTJL-battery2"
+  131 set *tmp151 ALTJL-battery2
   132 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   133 label *label442
   134 label *label445
-    * read *tmp151 @this "AJRJM-combustion-generator3"
+  135 set *tmp151 AJRJM-combustion-generator3
   136 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   137 label *label446
   138 label *label449
-    * read *tmp151 @this "ALMQJN-silicon-smelter4"
+  139 set *tmp151 ALMQJN-silicon-smelter4
   140 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   141 label *label450
   142 label *label453
-    * read *tmp151 @this "A{LNJO-inverted-sorter5"
+  143 set *tmp151 A{LNJO-inverted-sorter5
   144 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   145 label *label454
   146 label *label457
-    * read *tmp151 @this "A©JNJP-unloader6"
+  147 set *tmp151 A©JNJP-unloader6
   148 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   149 label *label458
   150 label *label461
-    * read *tmp151 @this "A{HNJQ-inverted-sorter7"
+  151 set *tmp151 A{HNJQ-inverted-sorter7
   152 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   153 label *label462
   154 label *label465
-    * read *tmp151 @this "AJPJR-underflow-gate8"
+  155 set *tmp151 AJPJR-underflow-gate8
   156 write *tmp151 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   157 label *label466
   158 label *label469
-    * read *tmp151 @this "AÕFDJS-micro-processor9"
+  159 set *tmp151 AÕFDJS-micro-processor9
   160 write *tmp151 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
   161 label *label470
   162 label *label72
 
  1030 label *label36
  1031 label *label474
  1032 op sign *tmp379 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp379
+ 1033 set :meetTarget:count *tmp379
  1034 label *label475
  1035 label *label478
  1036 op sign *tmp379 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-4 instructions):
 
   692 label *label518
   693 sensor :supplyBase0:coal .core @coal
   694 sensor :supplyBase0:sand .core @sand
-    * select *tmp295 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
-    * set :mineOre.1:ore *tmp295
+  695 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   696 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   697 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   698 label *label225
 
   736 label *label526
   737 sensor :supplyBase0:coal.1 .core @coal
   738 sensor :supplyBase0:sand.1 .core @sand
-    * select *tmp308 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
-    * set :mineOre.1:ore *tmp308
+  739 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   740 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   741 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   742 label *label241
 
  1027 end
  1028 label *label36
  1029 label *label474
-    * op sign *tmp379 :meetTarget:copper
-    * set :meetTarget:count *tmp379
+ 1030 op sign :meetTarget:count :meetTarget:copper
  1031 label *label475
  1032 label *label478
  1033 op sign *tmp379 :meetTarget:lead
 
  1233 wait 1e-15
  1234 read *tmp446 processor5 ":buildBlockAt*finished"
  1235 jump *label358 equal *tmp446 false
-    * read :buildBlock:built processor5 ":buildBlockAt*retval"
+ 1236 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1237 write false .controller ":buildStop*finished"
  1238 write 2 .controller "@counter"
-    * set :buildBlock*retval :buildBlock:built
  1239 label *label356
  1240 return :buildBlock*retaddr
  1241 end

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    27 ubind @poly
    28 set .builder @unit
    29 ulocate building core false @copper .coreX .coreY *tmp119 .core
-    * label *label51
    30 jump *label50 equal .core null
-    * label *label52
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    33 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
 
    80 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    81 label *label64
    82 label *label62
-    * label *label63
    83 write @pneumatic-drill processor2 ".nextBlock"
    84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    90 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label65 equal *tmp144 false
    92 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label59
    93 set .titaniumDrill *tmp127
    94 write *tmp127 processor2 ".titaniumDrill"
    95 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
 
   115 write processor2 :buildBlockFromCfg*retval ".display"
   116 write .core :buildBlockFromCfg*retval ".core"
   117 write bank1 :buildBlockFromCfg*retval ".bank"
-    * label *label433
   118 set *tmp151 AJEMJJ-graphite-press0
   119 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
-    * label *label434
-    * label *label437
   120 set *tmp151 AJTJK-battery1
   121 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
-    * label *label438
-    * label *label441
   122 set *tmp151 ALTJL-battery2
   123 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
-    * label *label442
-    * label *label445
   124 set *tmp151 AJRJM-combustion-generator3
   125 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
-    * label *label446
-    * label *label449
   126 set *tmp151 ALMQJN-silicon-smelter4
   127 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
-    * label *label450
-    * label *label453
   128 set *tmp151 A{LNJO-inverted-sorter5
   129 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
-    * label *label454
-    * label *label457
   130 set *tmp151 A©JNJP-unloader6
   131 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
-    * label *label458
-    * label *label461
   132 set *tmp151 A{HNJQ-inverted-sorter7
   133 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
-    * label *label462
-    * label *label465
   134 set *tmp151 AJPJR-underflow-gate8
   135 write *tmp151 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
-    * label *label466
-    * label *label469
   136 set *tmp151 AÕFDJS-micro-processor9
   137 write *tmp151 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
-    * label *label470
-    * label *label72
   138 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
   139 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   140 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
 
   156 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   157 label *label87
   158 write 1 .controller ".flareTarget"
-    * label *label88
   159 write 5 .controller ".monoTarget"
-    * label *label89
   160 write 85 .controller ".pressTarget"
   161 write 150 .controller ".smelterTarget"
   162 write 30 .controller ".kilnTarget"
 
   173 jump *label95 greaterThanEq *tmp157 300
   174 jump *label93 always
   175 label *label95
-    * label *label96
-    * label *label92
   176 read *tmp83 .controller ".monos"
   177 jump *label91 lessThan *tmp83 3
   178 label *label93
 
   222 set .metaglassSurplus 100
   223 set .graphiteSurplus 200
   224 write 2 .controller ".monoTarget"
-    * label *label107
   225 write 3 .controller ".polyTarget"
-    * label *label108
   226 setaddr :buildUnits*retaddr *label109 (h:*label109)
   227 call *label42 *invalid :buildUnits*retval (m:*label109) (h:*label109)
   228 label *label109
 
   232 setaddr :supplyBase*retaddr *label113 (h:*label113)
   233 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   234 label *label113
-    * label *label111
   235 jump *label110 always
   236 label *label112
   237 write 2 .controller ".flareTarget"
-    * label *label114
   238 label *label115
   239 read *tmp82 .controller ".flares"
   240 jump *label117 greaterThanEq *tmp82 2
   241 setaddr :supplyBase*retaddr *label118 (h:*label118)
   242 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   243 label *label118
-    * label *label116
   244 jump *label115 always
   245 label *label117
   246 write @ore-titanium processor2 ".nextBlock"
 
   266 jump *label120 equal *tmp185 false
   267 write false processor3 ":stopLocation*finished"
   268 write 3 processor3 "@counter"
-    * label *label119
   269 write null processor2 ".nextBlock"
   270 set .graphiteSurplus 10
   271 set .metaglassSurplus 50
 
   294 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   295 label *label127
   296 label *label125
-    * label *label126
   297 write @laser-drill processor5 ":buildBlockAt:block"
   298 read *tmp54 processor3 ".drillX"
   299 write *tmp54 processor5 ":buildBlockAt:x"
 
   367 wait 1e-15
   368 read *tmp215 processor6 ":setThoriumContainer*finished"
   369 jump *label139 equal *tmp215 false
-    * label *label121
   370 write null processor2 ".nextBlock"
   371 label *label140
   372 read *tmp84 .controller ".polys"
 
   374 setaddr :supplyBase*retaddr *label143 (h:*label143)
   375 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   376 label *label143
-    * label *label141
   377 jump *label140 always
   378 label *label142
   379 write 3200 .controller ".powerTarget"
 
   385 label *label144
   386 set .metaglassSurplus 10
   387 write 1 .controller ".megaTarget"
-    * label *label145
   388 setaddr :buildUnits*retaddr *label146 (h:*label146)
   389 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
   390 label *label146
 
   398 label *label147
   399 ucontrol move :x :y
   400 ucontrol payEnter
-    * label *label148
   401 read *tmp85 .controller ".megas"
   402 jump *label147 equal *tmp85 false
-    * label *label149
   403 write true .controller ".finished"
   404 control enabled processor8 false
   405 control enabled processor7 false
 
   444 setaddr :lineUpUnits*retaddr *label161 (h:*label161)
   445 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
   446 label *label161
-    * label *label156
   447 jump *label155 always
-    * label *label157
-    * label *label150
   448 end
   449 label *label15
   450 set .ERROR :error:error
   451 stop
-    * label *label162
   452 return :error*retaddr
   453 end
   454 label *label35
 
   458 op max *tmp235 0 *tmp234
   459 write *tmp235 processor7 ".sandTarget"
   460 jump *label164 equal .thoriumContainer false
-    * label *label503
   461 write "Phase 2: servicing thorium drill" processor2 ".status1"
-    * label *label504
   462 sensor *tmp237 .thoriumBattery @totalPower
   463 jump *label168 greaterThanEq *tmp237 2000
   464 sensor *tmp240 .thoriumGenerator @coal
 
   472 label *label174
   473 jump *label173 always
   474 label *label172
-    * label *label529
   475 sensor *tmp341 .thoriumGenerator @itemCapacity
   476 op min :transportStatus:target *tmp341 30
   477 set :transportStatus:item @coal
 
   501 jump *label535 equal *tmp346 false
   502 ucontrol itemDrop @air 1000
   503 label *label535
-    * label *label536
-    * label *label537
   504 sensor *tmp348 @unit @coal
   505 op lessThan *tmp349 *tmp348 30
   506 sensor *tmp350 .core @coal
   507 op land *tmp351 *tmp349 *tmp350
   508 jump *label534 notEqual *tmp351 false
-    * label *label538
   509 set :depositItems:block .thoriumGenerator
   510 set :depositItems:item @coal
   511 setaddr :depositItems*retaddr *label539 (h:*label539)
   512 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
   513 label *label539
-    * label *label540
   514 label *label173
   515 label *label170
-    * label *label171
   516 label *label168
-    * label *label169
   517 set :fetchBlock:block .thoriumContainer
   518 set :fetchBlock:item @thorium
   519 setaddr :fetchBlock*retaddr *label176 (h:*label176)
 
   522 sensor *tmp246 .core @thorium
   523 jump *label177 lessThanEq *tmp246 400
   524 write 4 .controller ".polyTarget"
-    * label *label179
   525 label *label177
-    * label *label178
-    * label *label166
   526 jump *label165 always
   527 label *label164
   528 read *tmp83 .controller ".monos"
   529 jump *label180 lessThanEq *tmp83 1
-    * label *label505
   530 write "Phase 1: supplying base" processor2 ".status1"
-    * label *label506
   531 set :mineOre.1:ore @coal
   532 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   533 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   534 label *label184
-    * label *label182
   535 jump *label181 always
   536 label *label180
   537 set :supplyBase0:supplied false
 
   540 jump *label188 greaterThanEq *tmp253 graphite
   541 sensor *tmp256 AJEMJJ-graphite-press0 @coal
   542 jump *label190 greaterThanEq *tmp256 5
-    * label *label507
   543 write "Goal 1: graphite requirement" processor2 ".status1"
-    * label *label508
   544 set :supplyBlock:block AJEMJJ-graphite-press0
   545 set :supplyBlock:ore @coal
   546 setaddr :supplyBlock*retaddr *label193 (h:*label193)
 
   548 label *label193
   549 set :supplyBase0:supplied true
   550 label *label190
-    * label *label191
   551 label *label188
-    * label *label189
   552 sensor *tmp259 .core @silicon
   553 jump *label194 greaterThanEq *tmp259 silicon
   554 sensor *tmp262 ALMQJN-silicon-smelter4 @coal
   555 jump *label196 greaterThanEq *tmp262 5
-    * label *label509
   556 write "Goal 2: coal for silicon requirement" processor2 ".status1"
-    * label *label510
   557 set :supplyBlock:block ALMQJN-silicon-smelter4
   558 set :supplyBlock:ore @coal
   559 setaddr :supplyBlock*retaddr *label199 (h:*label199)
 
   564 label *label196
   565 sensor *tmp265 ALMQJN-silicon-smelter4 @sand
   566 jump *label200 greaterThanEq *tmp265 5
-    * label *label511
   567 write "Goal 3: sand for silicon requirement" processor2 ".status1"
-    * label *label512
   568 set :supplyBlock:block ALMQJN-silicon-smelter4
   569 set :supplyBlock:ore @sand
   570 setaddr :supplyBlock*retaddr *label203 (h:*label203)
 
   572 label *label203
   573 set :supplyBase0:supplied true
   574 label *label200
-    * label *label201
   575 label *label197
   576 label *label194
-    * label *label195
   577 sensor *tmp268 AJTJK-battery1 @totalPower
   578 jump *label204 greaterThanEq *tmp268 .powerTarget
   579 sensor *tmp271 AJRJM-combustion-generator3 @coal
   580 jump *label206 greaterThanEq *tmp271 2
-    * label *label513
   581 write "Goal 4: supplying generator" processor2 ".status1"
-    * label *label514
   582 set :supplyBlock:block AJRJM-combustion-generator3
   583 set :supplyBlock:ore @coal
   584 setaddr :supplyBlock*retaddr *label209 (h:*label209)
 
   586 label *label209
   587 set :supplyBase0:supplied true
   588 label *label206
-    * label *label207
   589 label *label204
-    * label *label205
   590 label *label186
-    * label *label187
   591 set *tmp276 100
   592 sensor *tmp274 .core @titanium
   593 jump *label211 greaterThanEq *tmp274 titanium
 
   601 sensor *tmp285 AJTJK-battery1 @totalPower
   602 op mul *tmp286 A©JNJP-unloader6 .powerTarget
   603 jump *label216 greaterThanEq *tmp285 *tmp286
-    * label *label515
   604 write "Goal 5: supplying generator" processor2 ".status1"
-    * label *label516
   605 set :mineOre.1:ore @coal
   606 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   607 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
 
   610 label *label216
   611 sensor *tmp289 .core @silicon
   612 jump *label220 greaterThanEq *tmp289 silicon
-    * label *label517
   613 write "Goal 6: silicon requirement" processor2 ".status1"
-    * label *label518
   614 sensor :supplyBase0:coal .core @coal
   615 sensor :supplyBase0:sand .core @sand
   616 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   621 label *label220
   622 sensor *tmp296 .core @copper
   623 jump *label226 greaterThanEq *tmp296 copper
-    * label *label519
   624 write "Goal 7: copper requirement" processor2 ".status1"
-    * label *label520
   625 set :mineOre.1:ore @copper
   626 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   627 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
 
   630 label *label226
   631 sensor *tmp299 .core @lead
   632 jump *label230 greaterThanEq *tmp299 lead
-    * label *label521
   633 write "Goal 8: lead requirement" processor2 ".status1"
-    * label *label522
   634 set :mineOre.1:ore @lead
   635 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   636 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
 
   639 label *label230
   640 sensor *tmp302 .core @metaglass
   641 jump *label234 greaterThanEq *tmp302 metaglass
-    * label *label523
   642 write "Goal 9: metaglass requirement" processor2 ".status1"
-    * label *label524
   643 set :mineOre.1:ore @sand
   644 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   645 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   646 label *label237
   647 jump *label235 always
   648 label *label234
-    * label *label525
   649 write "Goal 10: supplying base" processor2 ".status1"
-    * label *label526
   650 sensor :supplyBase0:coal.1 .core @coal
   651 sensor :supplyBase0:sand.1 .core @sand
   652 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   659 label *label221
   660 label *label217
   661 label *label214
-    * label *label215
   662 jump *label213 always
   663 label *label212
-    * label *label527
   664 write "Goal 11: Fetching titanium" processor2 ".status1"
-    * label *label528
   665 set :fetchBlock:block .titaniumDrill
   666 set :fetchBlock:item @titanium
   667 setaddr :fetchBlock*retaddr *label243 (h:*label243)
   668 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   669 label *label243
   670 label *label213
-    * label *label185
   671 label *label181
   672 label *label165
-    * label *label163
   673 return :supplyBase*retaddr
   674 end
   675 label *label38
 
   698 set :buildRemoteBlock*retval :buildBlock*retval
   699 jump *label244 always
   700 label *label245
-    * label *label246
   701 set :buildRemoteBlock*retval false
   702 jump *label244 always
   703 label *label244
 
   730 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   731 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   732 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label249
   733 return :buildBlockFromCfg*retaddr
   734 end
   735 label *label40
 
   738 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   739 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   740 label *label253
-    * label *label252
   741 return :buildBlockFromCfg.1*retaddr
   742 end
   743 label *label41
 
   758 setaddr :meetTarget*retaddr *label256 (h:*label256)
   759 call *label36 *invalid :meetTarget*retval (m:*label256) (h:*label256)
   760 label *label256
-    * label *label254
   761 return :meetTarget.1*retaddr
   762 end
   763 label *label42
 
   779 write 0 .controller ".leadReserve"
   780 write 0 .controller ".siliconReserve"
   781 write 0 .controller ".graphiteReserve"
-    * label *label257
   782 return :buildUnits*retaddr
   783 end
   784 label *label43
   785 label *label260
   786 ubind :flagUnits:unit
   787 set :flagUnits:firstUnit @unit
-    * label *label261
   788 jump *label260 equal :flagUnits:firstUnit null
-    * label *label262
   789 set :flagUnits:x @thisx
   790 label *label263
   791 ucontrol flag :flagUnits:x
   792 op add :flagUnits:x :flagUnits:x 4
   793 ubind :flagUnits:unit
-    * label *label264
   794 jump *label263 notEqual @unit :flagUnits:firstUnit
-    * label *label265
-    * label *label259
   795 return :flagUnits*retaddr
   796 end
   797 label *label44
 
   805 jump *label270 equal *tmp319 false
   806 ucontrol stop
   807 label *label270
-    * label *label271
   808 ubind :lineUpUnits:unit
-    * label *label268
   809 jump *label267 notEqual @unit :lineUpUnits:firstUnit
-    * label *label269
-    * label *label266
   810 return :lineUpUnits*retaddr
   811 end
   812 label *label24
 
   822 setaddr :mineOre*retaddr *label275 (h:*label275)
   823 call *label23 *invalid :mineOre*retval (m:*label275) (h:*label275)
   824 label *label275
-    * label *label273
   825 return :mineOre.1*retaddr
   826 end
   827 label *label25
 
   856 jump *label284 equal *tmp330 false
   857 ucontrol itemDrop @air 1000
   858 label *label284
-    * label *label285
-    * label *label282
   859 sensor *tmp332 @unit :fetchBlock:item
   860 op lessThan *tmp333 *tmp332 30
   861 sensor *tmp334 :fetchBlock:block :fetchBlock:item
   862 op land *tmp335 *tmp333 *tmp334
   863 jump *label281 notEqual *tmp335 false
-    * label *label283
   864 set :depositItems:block .core
   865 set :depositItems:item :fetchBlock:item
   866 setaddr :depositItems*retaddr *label286 (h:*label286)
   867 call *label21 *invalid :depositItems*retval (m:*label286) (h:*label286)
   868 label *label286
-    * label *label276
   869 return :fetchBlock*retaddr
   870 end
   871 label *label26
 
   886 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
   887 label *label291
   888 label *label289
-    * label *label290
-    * label *label287
   889 return :supplyBlock*retaddr
   890 end
   891 label *label29
 
   909 sensor :unpackCfg:ti :unpackCfg:type @titanium
   910 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   911 sensor :unpackCfg:th :unpackCfg:type @thorium
-    * label *label303
   912 return :unpackCfg*retaddr
   913 end
   914 label *label36
-    * label *label474
   915 op sign :meetTarget:count :meetTarget:copper
-    * label *label475
-    * label *label478
   916 op sign *tmp379 :meetTarget:lead
   917 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label479
-    * label *label482
   918 op sign *tmp379 :meetTarget:graphite
   919 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label483
-    * label *label486
   920 op sign *tmp379 :meetTarget:silicon
   921 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label487
-    * label *label490
   922 op sign *tmp379 :meetTarget:titanium
   923 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label491
-    * label *label494
   924 op sign *tmp379 :meetTarget:metaglass
   925 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label495
-    * label *label498
   926 op sign *tmp379 :meetTarget:thorium
   927 op add :meetTarget:count :meetTarget:count *tmp379
-    * label *label499
-    * label *label307
   928 write :meetTarget:count processor2 ".totalTargets"
   929 write :meetTarget:block processor2 ".nextBlock"
   930 write :meetTarget:copper processor2 ".targetCopper"
 
   965 set *tmp391 false
   966 jump *label318 always
   967 label *label319
-    * label *label320
   968 sensor *tmp395 .core @lead
   969 jump *label321 greaterThanEq *tmp395 lead
   970 set *tmp391 false
   971 jump *label318 always
   972 label *label321
-    * label *label322
   973 sensor *tmp398 .core @graphite
   974 jump *label323 greaterThanEq *tmp398 graphite
   975 set *tmp391 false
   976 jump *label318 always
   977 label *label323
-    * label *label324
   978 sensor *tmp401 .core @silicon
   979 jump *label325 greaterThanEq *tmp401 silicon
   980 set *tmp391 false
   981 jump *label318 always
   982 label *label325
-    * label *label326
   983 sensor *tmp404 .core @titanium
   984 jump *label327 greaterThanEq *tmp404 titanium
   985 set *tmp391 false
   986 jump *label318 always
   987 label *label327
-    * label *label328
   988 sensor *tmp407 .core @metaglass
   989 jump *label329 greaterThanEq *tmp407 metaglass
   990 set *tmp391 false
   991 jump *label318 always
   992 label *label329
-    * label *label330
   993 sensor *tmp410 .core @thorium
   994 jump *label331 greaterThanEq *tmp410 thorium
   995 set *tmp391 false
   996 jump *label318 always
   997 label *label331
-    * label *label332
   998 set *tmp391 true
   999 jump *label318 always
  1000 label *label318
 
  1002 setaddr :supplyBase*retaddr *label333 (h:*label333)
  1003 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1004 label *label333
-    * label *label316
  1005 jump *label315 always
  1006 label *label317
  1007 jump *label334 equal :meetTarget:forBuild false
 
  1017 set *tmp416 false
  1018 jump *label340 always
  1019 label *label341
-    * label *label342
  1020 sensor *tmp420 .core @lead
  1021 jump *label343 greaterThanEq *tmp420 lead
  1022 set *tmp416 false
  1023 jump *label340 always
  1024 label *label343
-    * label *label344
  1025 sensor *tmp423 .core @graphite
  1026 jump *label345 greaterThanEq *tmp423 graphite
  1027 set *tmp416 false
  1028 jump *label340 always
  1029 label *label345
-    * label *label346
  1030 sensor *tmp426 .core @silicon
  1031 jump *label347 greaterThanEq *tmp426 silicon
  1032 set *tmp416 false
  1033 jump *label340 always
  1034 label *label347
-    * label *label348
  1035 sensor *tmp429 .core @titanium
  1036 jump *label349 greaterThanEq *tmp429 titanium
  1037 set *tmp416 false
  1038 jump *label340 always
  1039 label *label349
-    * label *label350
  1040 sensor *tmp432 .core @metaglass
  1041 jump *label351 greaterThanEq *tmp432 metaglass
  1042 set *tmp416 false
  1043 jump *label340 always
  1044 label *label351
-    * label *label352
  1045 sensor *tmp435 .core @thorium
  1046 jump *label353 greaterThanEq *tmp435 thorium
  1047 set *tmp416 false
  1048 jump *label340 always
  1049 label *label353
-    * label *label354
  1050 set *tmp416 true
  1051 jump *label340 always
  1052 label *label340
 
  1054 setaddr :supplyBase*retaddr *label355 (h:*label355)
  1055 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1056 label *label355
-    * label *label338
  1057 jump *label337 always
  1058 label *label339
  1059 label *label334
-    * label *label335
-    * label *label304
  1060 return :meetTarget*retaddr
  1061 end
  1062 label *label37
 
  1089 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1090 write false .controller ":buildStop*finished"
  1091 write 2 .controller "@counter"
-    * label *label356
  1092 return :buildBlock*retaddr
  1093 end
  1094 label *label12
  1095 write :status2:text processor2 ".status2"
  1096 write :status2:item processor2 ".item2"
  1097 write :status2:block processor2 ".block2"
-    * label *label359
  1098 return :status2*retaddr
  1099 end
  1100 label *label14
  1101 write :transportStatus:target processor2 ".transportTarget"
  1102 write :transportStatus:item processor2 ".transportItem"
-    * label *label360
  1103 return :transportStatus*retaddr
  1104 end
  1105 label *label18
-    * label *label541
  1106 write "Moving..." processor2 ".status3"
-    * label *label542
  1107 label *label363
  1108 sensor *tmp448 @unit @firstItem
  1109 jump *label366 equal *tmp448 null
  1110 ucontrol itemDrop @air 1000
  1111 label *label366
-    * label *label367
  1112 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label364
  1113 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp451
  1114 jump *label363 equal *tmp451 false
-    * label *label365
-    * label *label361
  1115 return :moveToEmpty*retaddr
  1116 end
  1117 label *label19
 
  1119 sensor *tmp453 @unit @firstItem
  1120 jump *label371 equal *tmp453 null
  1121 ucontrol itemDrop @air 1000
-    * label *label370
  1122 jump *label369 always
  1123 label *label371
-    * label *label368
  1124 return :dropAll*retaddr
  1125 end
  1126 label *label21
-    * label *label543
  1127 write "Depositing..." processor2 ".status3"
-    * label *label544
  1128 sensor *tmp455 @unit @firstItem
  1129 jump *label374 notEqual *tmp455 :depositItems:item
-    * label *label549
  1130 sensor *tmp504 :depositItems:block @x
  1131 sensor *tmp505 :depositItems:block @y
-    * label *label557
-    * label *label558
  1132 write "Moving..." processor2 ".status3"
-    * label *label559
  1133 label *label560
  1134 ucontrol within *tmp504 *tmp505 6 *tmp510
  1135 jump *label562 notEqual *tmp510 false
  1136 ucontrol approach *tmp504 *tmp505 5.5
-    * label *label561
  1137 jump *label560 always
  1138 label *label562
-    * label *label563
-    * label *label551
  1139 sensor :depositItems:cap :depositItems:block @itemCapacity
  1140 label *label377
  1141 ucontrol itemDrop :depositItems:block 30
-    * label *label378
  1142 sensor *tmp459 @unit @firstItem
  1143 op mul *tmp460 *tmp459 :depositItems:cap
  1144 sensor *tmp461 :depositItems:block :depositItems:item
  1145 jump *label377 greaterThan *tmp460 *tmp461
-    * label *label379
  1146 jump *label375 always
  1147 label *label374
  1148 label *label380
  1149 sensor *tmp463 @unit @firstItem
  1150 jump *label382 equal *tmp463 null
  1151 ucontrol itemDrop @air 1000
-    * label *label381
  1152 jump *label380 always
  1153 label *label382
  1154 label *label375
 
  1157 setaddr :transportStatus*retaddr *label383 (h:*label383)
  1158 call *label14 *invalid :transportStatus*retval (m:*label383) (h:*label383)
  1159 label *label383
-    * label *label372
  1160 return :depositItems*retaddr
  1161 end
  1162 label *label23
 
  1166 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1167 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1168 label *label385
-    * label *label552
  1169 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
  1170 jump *label554 notEqual *tmp506 false
  1171 set :error:error "Cannot locate ore"
 
  1173 call *label15 *invalid :error*retval (m:*label553) (h:*label553)
  1174 label *label553
  1175 label *label554
-    * label *label555
-    * label *label556
  1176 set :mineOre:x :locateOre:x
  1177 set :mineOre:y :locateOre:y
  1178 set :moveToEmpty:x :locateOre:x
 
  1186 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1187 label *label390
  1188 label *label388
-    * label *label389
-    * label *label545
  1189 write "Mining..." processor2 ".status3"
-    * label *label546
  1190 op add :mineOre:stop @second 10
  1191 label *label392
  1192 sensor :mineOre:item @unit @firstItem
 
  1196 jump *label395 equal *tmp473 false
  1197 jump *label394 always
  1198 label *label395
-    * label *label396
  1199 ucontrol mine :mineOre:x :mineOre:y
  1200 jump *label397 lessThanEq @second :mineOre:stop
  1201 jump *label394 always
  1202 label *label397
-    * label *label398
  1203 jump *label399 notEqual .noTarget false
  1204 sensor *tmp480 .core @copper
  1205 jump *label402 greaterThanEq *tmp480 copper
  1206 set *tmp479 false
  1207 jump *label401 always
  1208 label *label402
-    * label *label403
  1209 sensor *tmp483 .core @lead
  1210 jump *label404 greaterThanEq *tmp483 lead
  1211 set *tmp479 false
  1212 jump *label401 always
  1213 label *label404
-    * label *label405
  1214 sensor *tmp486 .core @graphite
  1215 jump *label406 greaterThanEq *tmp486 graphite
  1216 set *tmp479 false
  1217 jump *label401 always
  1218 label *label406
-    * label *label407
  1219 sensor *tmp489 .core @silicon
  1220 jump *label408 greaterThanEq *tmp489 silicon
  1221 set *tmp479 false
  1222 jump *label401 always
  1223 label *label408
-    * label *label409
  1224 sensor *tmp492 .core @titanium
  1225 jump *label410 greaterThanEq *tmp492 titanium
  1226 set *tmp479 false
  1227 jump *label401 always
  1228 label *label410
-    * label *label411
  1229 sensor *tmp495 .core @metaglass
  1230 jump *label412 greaterThanEq *tmp495 metaglass
  1231 set *tmp479 false
  1232 jump *label401 always
  1233 label *label412
-    * label *label413
  1234 sensor *tmp498 .core @thorium
  1235 jump *label414 greaterThanEq *tmp498 thorium
  1236 set *tmp479 false
  1237 jump *label401 always
  1238 label *label414
-    * label *label415
  1239 set *tmp479 true
  1240 jump *label401 always
  1241 label *label401
  1242 jump *label416 equal *tmp479 false
  1243 jump *label394 always
  1244 label *label416
-    * label *label417
  1245 label *label399
-    * label *label400
-    * label *label393
  1246 sensor *tmp502 @unit @totalItems
  1247 jump *label392 lessThan *tmp502 :mineOre:amount
  1248 label *label394
 
  1252 setaddr :depositItems*retaddr *label418 (h:*label418)
  1253 call *label21 *invalid :depositItems*retval (m:*label418) (h:*label418)
  1254 label *label418
-    * label *label384
  1255 return :mineOre*retaddr
  1256 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-4 instructions):
 
   170 call *label35 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   171 label *label94
   172 sensor *tmp157 AJTJK-battery1 @totalPower
-    * jump *label95 greaterThanEq *tmp157 300
-    * jump *label93 always
+  173 jump *label93 lessThan *tmp157 300
   174 label *label95
   175 read *tmp83 .controller ".monos"
   176 jump *label91 lessThan *tmp83 3
 
  1192 op notEqual *tmp471 :mineOre:item null
  1193 op notEqual *tmp472 :mineOre:item :mineOre:ore
  1194 op land *tmp473 *tmp471 *tmp472
-    * jump *label395 equal *tmp473 false
-    * jump *label394 always
+ 1195 jump *label394 notEqual *tmp473 false
  1196 label *label395
  1197 ucontrol mine :mineOre:x :mineOre:y
-    * jump *label397 lessThanEq @second :mineOre:stop
-    * jump *label394 always
+ 1198 jump *label394 greaterThan @second :mineOre:stop
  1199 label *label397
  1200 jump *label399 notEqual .noTarget false
  1201 sensor *tmp480 .core @copper
 
  1236 set *tmp479 true
  1237 jump *label401 always
  1238 label *label401
-    * jump *label416 equal *tmp479 false
-    * jump *label394 always
+ 1239 jump *label394 notEqual *tmp479 false
  1240 label *label416
  1241 label *label399
  1242 sensor *tmp502 @unit @totalItems

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   171 label *label94
   172 sensor *tmp157 AJTJK-battery1 @totalPower
   173 jump *label93 lessThan *tmp157 300
-    * label *label95
   174 read *tmp83 .controller ".monos"
   175 jump *label91 lessThan *tmp83 3
   176 label *label93
 
  1192 op notEqual *tmp472 :mineOre:item :mineOre:ore
  1193 op land *tmp473 *tmp471 *tmp472
  1194 jump *label394 notEqual *tmp473 false
-    * label *label395
  1195 ucontrol mine :mineOre:x :mineOre:y
  1196 jump *label394 greaterThan @second :mineOre:stop
-    * label *label397
  1197 jump *label399 notEqual .noTarget false
  1198 sensor *tmp480 .core @copper
  1199 jump *label402 greaterThanEq *tmp480 copper
 
  1234 jump *label401 always
  1235 label *label401
  1236 jump *label394 notEqual *tmp479 false
-    * label *label416
  1237 label *label399
  1238 sensor *tmp502 @unit @totalItems
  1239 jump *label392 lessThan *tmp502 :mineOre:amount

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   227 label *label110
   228 read *tmp84 .controller ".polys"
   229 jump *label112 greaterThanEq *tmp84 2
-    * setaddr :supplyBase*retaddr *label113 (h:*label113)
+  230 setaddr :supplyBase*retaddr *label110 (h:*label113)
   231 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   232 label *label113
   233 jump *label110 always
 
   236 label *label115
   237 read *tmp82 .controller ".flares"
   238 jump *label117 greaterThanEq *tmp82 2
-    * setaddr :supplyBase*retaddr *label118 (h:*label118)
+  239 setaddr :supplyBase*retaddr *label115 (h:*label118)
   240 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   241 label *label118
   242 jump *label115 always
 
   369 label *label140
   370 read *tmp84 .controller ".polys"
   371 jump *label142 greaterThanEq *tmp84 3
-    * setaddr :supplyBase*retaddr *label143 (h:*label143)
+  372 setaddr :supplyBase*retaddr *label140 (h:*label143)
   373 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   374 label *label143
   375 jump *label140 always
 
   439 label *label160
   440 op sub :lineUpUnits:y @thisy 28
   441 set :lineUpUnits:unit @flare
-    * setaddr :lineUpUnits*retaddr *label161 (h:*label161)
+  442 setaddr :lineUpUnits*retaddr *label155 (h:*label161)
   443 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
   444 label *label161
   445 jump *label155 always
 
   465 jump *label172 greaterThanEq *tmp243 50
   466 set :supplyBlock:block .thoriumGenerator
   467 set :supplyBlock:ore @coal
-    * setaddr :supplyBlock*retaddr *label174 (h:*label174)
+  468 setaddr :supplyBlock*retaddr *label173 (h:*label174)
   469 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
   470 label *label174
   471 jump *label173 always
 
   518 call *label25 *invalid :fetchBlock*retval (m:*label176) (h:*label176)
   519 label *label176
   520 sensor *tmp246 .core @thorium
-    * jump *label177 lessThanEq *tmp246 400
+  521 jump *label165 lessThanEq *tmp246 400
   522 write 4 .controller ".polyTarget"
   523 label *label177
-    * jump *label165 always
+  524 return :supplyBase*retaddr
   525 label *label164
   526 read *tmp83 .controller ".monos"
   527 jump *label180 lessThanEq *tmp83 1
 
   530 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   531 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   532 label *label184
-    * jump *label181 always
+  533 return :supplyBase*retaddr
   534 label *label180
   535 set :supplyBase0:supplied false
   536 jump *label186 notEqual A©JNJP-unloader6 null
 
   595 label *label211
   596 sensor *tmp280 .titaniumDrill @titanium
   597 jump *label212 greaterThanEq *tmp280 *tmp276
-    * jump *label214 notEqual :supplyBase0:supplied false
+  598 jump *label213 notEqual :supplyBase0:supplied false
   599 sensor *tmp285 AJTJK-battery1 @totalPower
   600 op mul *tmp286 A©JNJP-unloader6 .powerTarget
   601 jump *label216 greaterThanEq *tmp285 *tmp286
 
   604 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   605 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
   606 label *label219
-    * jump *label217 always
+  607 return :supplyBase*retaddr
   608 label *label216
   609 sensor *tmp289 .core @silicon
   610 jump *label220 greaterThanEq *tmp289 silicon
 
   615 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   616 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   617 label *label225
-    * jump *label221 always
+  618 return :supplyBase*retaddr
   619 label *label220
   620 sensor *tmp296 .core @copper
   621 jump *label226 greaterThanEq *tmp296 copper
 
   624 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   625 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
   626 label *label229
-    * jump *label227 always
+  627 return :supplyBase*retaddr
   628 label *label226
   629 sensor *tmp299 .core @lead
   630 jump *label230 greaterThanEq *tmp299 lead
 
   633 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   634 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
   635 label *label233
-    * jump *label231 always
+  636 return :supplyBase*retaddr
   637 label *label230
   638 sensor *tmp302 .core @metaglass
   639 jump *label234 greaterThanEq *tmp302 metaglass
 
   642 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   643 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   644 label *label237
-    * jump *label235 always
+  645 return :supplyBase*retaddr
   646 label *label234
   647 write "Goal 10: supplying base" processor2 ".status1"
   648 sensor :supplyBase0:coal.1 .core @coal
 
   657 label *label221
   658 label *label217
   659 label *label214
-    * jump *label213 always
+  660 return :supplyBase*retaddr
   661 label *label212
   662 write "Goal 11: Fetching titanium" processor2 ".status1"
   663 set :fetchBlock:block .titaniumDrill
 
   694 call *label37 *invalid :buildBlock*retval (m:*label248) (h:*label248)
   695 label *label248
   696 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label244 always
+  697 return :buildRemoteBlock*retaddr
   698 label *label245
   699 set :buildRemoteBlock*retval false
-    * jump *label244 always
+  700 return :buildRemoteBlock*retaddr
   701 label *label244
   702 return :buildRemoteBlock*retaddr
   703 end
 
   997 jump *label318 always
   998 label *label318
   999 jump *label317 notEqual *tmp391 false
-    * setaddr :supplyBase*retaddr *label333 (h:*label333)
+ 1000 setaddr :supplyBase*retaddr *label315 (h:*label333)
  1001 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1002 label *label333
  1003 jump *label315 always
 
  1049 jump *label340 always
  1050 label *label340
  1051 jump *label339 notEqual *tmp416 false
-    * setaddr :supplyBase*retaddr *label355 (h:*label355)
+ 1052 setaddr :supplyBase*retaddr *label337 (h:*label355)
  1053 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1054 label *label355
  1055 jump *label337 always

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-30 instructions):
 
   229 jump *label112 greaterThanEq *tmp84 2
   230 setaddr :supplyBase*retaddr *label110 (h:*label113)
   231 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
-    * label *label113
-    * jump *label110 always
   232 label *label112
   233 write 2 .controller ".flareTarget"
   234 label *label115
 
   236 jump *label117 greaterThanEq *tmp82 2
   237 setaddr :supplyBase*retaddr *label115 (h:*label118)
   238 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
-    * label *label118
-    * jump *label115 always
   239 label *label117
   240 write @ore-titanium processor2 ".nextBlock"
   241 ubind @flare
 
   367 jump *label142 greaterThanEq *tmp84 3
   368 setaddr :supplyBase*retaddr *label140 (h:*label143)
   369 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
-    * label *label143
-    * jump *label140 always
   370 label *label142
   371 write 3200 .controller ".powerTarget"
   372 set .siliconMonoSurplus 120
 
   435 set :lineUpUnits:unit @flare
   436 setaddr :lineUpUnits*retaddr *label155 (h:*label161)
   437 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
-    * label *label161
-    * jump *label155 always
-    * end
   438 label *label15
   439 set .ERROR :error:error
   440 stop
   441 return :error*retaddr
-    * end
   442 label *label35
   443 op add *tmp232 .siliconMonoSurplus silicon
   444 sensor *tmp233 .core @silicon
 
   457 set :supplyBlock:ore @coal
   458 setaddr :supplyBlock*retaddr *label173 (h:*label174)
   459 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
-    * label *label174
-    * jump *label173 always
   460 label *label172
   461 sensor *tmp341 .thoriumGenerator @itemCapacity
   462 op min :transportStatus:target *tmp341 30
 
   508 sensor *tmp246 .core @thorium
   509 jump *label165 lessThanEq *tmp246 400
   510 write 4 .controller ".polyTarget"
-    * label *label177
   511 return :supplyBase*retaddr
   512 label *label164
   513 read *tmp83 .controller ".monos"
 
   638 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   639 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   640 label *label241
-    * label *label235
-    * label *label231
-    * label *label227
-    * label *label221
-    * label *label217
-    * label *label214
   641 return :supplyBase*retaddr
   642 label *label212
   643 write "Goal 11: Fetching titanium" processor2 ".status1"
 
   647 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   648 label *label243
   649 label *label213
-    * label *label181
   650 label *label165
   651 return :supplyBase*retaddr
-    * end
   652 label *label38
   653 op add *tmp309 :buildRemoteBlock:x :buildRemoteBlock:y
   654 jump *label245 lessThanEq *tmp309 0
 
   677 label *label245
   678 set :buildRemoteBlock*retval false
   679 return :buildRemoteBlock*retaddr
-    * label *label244
-    * return :buildRemoteBlock*retaddr
-    * end
   680 label *label39
   681 set :unpackCfg:cfg :buildBlockFromCfg:cfg
   682 setaddr :unpackCfg*retaddr *label250 (h:*label250)
 
   705 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   706 set :buildBlockFromCfg*retval :buildBlock*retval
   707 return :buildBlockFromCfg*retaddr
-    * end
   708 label *label40
   709 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   710 set :buildBlockFromCfg:config null
 
   712 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   713 label *label253
   714 return :buildBlockFromCfg.1*retaddr
-    * end
   715 label *label41
   716 set :unpackCfg:cfg :meetTarget.1:cfg
   717 setaddr :unpackCfg*retaddr *label255 (h:*label255)
 
   731 call *label36 *invalid :meetTarget*retval (m:*label256) (h:*label256)
   732 label *label256
   733 return :meetTarget.1*retaddr
-    * end
   734 label *label42
   735 set :meetTarget:block 0
   736 set :meetTarget:copper 0
 
   751 write 0 .controller ".siliconReserve"
   752 write 0 .controller ".graphiteReserve"
   753 return :buildUnits*retaddr
-    * end
   754 label *label43
   755 label *label260
   756 ubind :flagUnits:unit
 
   763 ubind :flagUnits:unit
   764 jump *label263 notEqual @unit :flagUnits:firstUnit
   765 return :flagUnits*retaddr
-    * end
   766 label *label44
   767 ubind :lineUpUnits:unit
   768 set :lineUpUnits:firstUnit @unit
 
   777 ubind :lineUpUnits:unit
   778 jump *label267 notEqual @unit :lineUpUnits:firstUnit
   779 return :lineUpUnits*retaddr
-    * end
   780 label *label24
   781 set :status2:text "Mining "
   782 set :status2:item :mineOre.1:ore
 
   791 call *label23 *invalid :mineOre*retval (m:*label275) (h:*label275)
   792 label *label275
   793 return :mineOre.1*retaddr
-    * end
   794 label *label25
   795 sensor *tmp323 :fetchBlock:block @itemCapacity
   796 op min :transportStatus:target *tmp323 30
 
   834 call *label21 *invalid :depositItems*retval (m:*label286) (h:*label286)
   835 label *label286
   836 return :fetchBlock*retaddr
-    * end
   837 label *label26
   838 set :status2:text "Supplying "
   839 set :status2:item :supplyBlock:ore
 
   853 label *label291
   854 label *label289
   855 return :supplyBlock*retaddr
-    * end
   856 label *label29
   857 read *tmp353 :unpackCfg:cfg 1
   858 op sub *tmp354 *tmp353 74
 
   875 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   876 sensor :unpackCfg:th :unpackCfg:type @thorium
   877 return :unpackCfg*retaddr
-    * end
   878 label *label36
   879 op sign :meetTarget:count :meetTarget:copper
   880 op sign *tmp379 :meetTarget:lead
 
   965 jump *label317 notEqual *tmp391 false
   966 setaddr :supplyBase*retaddr *label315 (h:*label333)
   967 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
-    * label *label333
-    * jump *label315 always
   968 label *label317
   969 jump *label334 equal :meetTarget:forBuild false
   970 write false .controller ":buildStart*finished"
 
  1015 jump *label339 notEqual *tmp416 false
  1016 setaddr :supplyBase*retaddr *label337 (h:*label355)
  1017 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
-    * label *label355
-    * jump *label337 always
  1018 label *label339
  1019 label *label334
  1020 return :meetTarget*retaddr
-    * end
  1021 label *label37
  1022 op notEqual *tmp439 .controller null
  1023 set :meetTarget:block :buildBlock:block
 
  1049 write false .controller ":buildStop*finished"
  1050 write 2 .controller "@counter"
  1051 return :buildBlock*retaddr
-    * end
  1052 label *label12
  1053 write :status2:text processor2 ".status2"
  1054 write :status2:item processor2 ".item2"
  1055 write :status2:block processor2 ".block2"
  1056 return :status2*retaddr
-    * end
  1057 label *label14
  1058 write :transportStatus:target processor2 ".transportTarget"
  1059 write :transportStatus:item processor2 ".transportItem"
  1060 return :transportStatus*retaddr
-    * end
  1061 label *label18
  1062 write "Moving..." processor2 ".status3"
  1063 label *label363
 
  1069 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp451
  1070 jump *label363 equal *tmp451 false
  1071 return :moveToEmpty*retaddr
-    * end
  1072 label *label19
  1073 label *label369
  1074 sensor *tmp453 @unit @firstItem
 
  1077 jump *label369 always
  1078 label *label371
  1079 return :dropAll*retaddr
-    * end
  1080 label *label21
  1081 write "Depositing..." processor2 ".status3"
  1082 sensor *tmp455 @unit @firstItem
 
  1112 call *label14 *invalid :transportStatus*retval (m:*label383) (h:*label383)
  1113 label *label383
  1114 return :depositItems*retaddr
-    * end
  1115 label *label23
  1116 op min :mineOre:amount :mineOre:amount 30
  1117 set :transportStatus:target :mineOre:amount
 
  1200 call *label21 *invalid :depositItems*retval (m:*label418) (h:*label418)
  1201 label *label418
  1202 return :mineOre*retaddr
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    26 label *label50
    27 ubind @poly
    28 set .builder @unit
-    * ulocate building core false @copper .coreX .coreY *tmp119 .core
+   29 ulocate building core false @copper .coreX .coreY 0 .core
    30 jump *label50 equal .core null
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
  1119 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1120 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1121 label *label385
-    * ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp506 *tmp507
+ 1122 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp506 0
  1123 jump *label554 notEqual *tmp506 false
  1124 set :error:error "Cannot locate ore"
  1125 setaddr :error*retaddr *label553 (h:*label553)

Final code before resolving virtual instructions:

    0:  set .ERROR ""                                                Actions.mnd: remote var ERROR = "";
        label *label45                                               CoreBuilder.mnd: require "Display.mnd" remote display;
    1:  read *tmp32 processor2 "*signature"                          ...
    2:  jump *label45 notEqual *tmp32 "0:v1"                         ...
        label *label46                                               CoreBuilder.mnd: require "OreLocator.mnd" remote oreLocator;
    3:  read *tmp72 processor3 "*signature"                          ...
    4:  jump *label46 notEqual *tmp72 "3290b8c661787058:v1"          ...
        label *label47                                               CoreBuilder.mnd: require "MonoController.mnd" remote monoController;
    5:  read *tmp97 processor7 "*signature"                          ...
    6:  jump *label47 notEqual *tmp97 "0:v1"                         ...
        label *label48                                               CoreBuilder.mnd: require "PolyController.mnd" remote polyController;
    7:  read *tmp99 processor6 "*signature"                          ...
    8:  jump *label48 notEqual *tmp99 "5f95d6f938a8462e:v1"          ...
        label *label49                                               CoreBuilder.mnd: require "BlockBuilder.mnd" remote blockBuilder;
    9:  read *tmp115 processor5 "*signature"                         ...
   10:  jump *label49 notEqual *tmp115 "319badb7a8e178a4:v1"         ...
   11:  set .titaniumDrill null                                      CoreBuilder.mnd: var
   12:  set .thoriumBattery null                                     ...
   13:  set .thoriumContainer null                                   ...
   14:  set .thoriumGenerator null                                   ...
   15:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   16:  set .graphiteSurplus 20                                      ...
   17:  set .siliconSurplus 20                                       ...
   18:  set .siliconMonoSurplus 0                                    ...
   19:  set .metaglassSurplus 20                                     ...
   20:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label50                                               CoreBuilder.mnd: do
   21:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   22:  set .builder @unit                                           ...
   23:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   24:  jump *label50 equal .core null                               CoreBuilder.mnd: do
   25:  set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"        CoreBuilder.mnd: buildBlockFromCfg(PRESS);
   26:  setaddr :buildBlockFromCfg.1*retaddr *label53                ...
   27:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label53                                               ...
   28:  set :buildBlockFromCfg.1:cfg "AJTJK-battery1"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY1);
   29:  setaddr :buildBlockFromCfg.1*retaddr *label54                ...
   30:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label54                                               ...
   31:  set :buildBlockFromCfg.1:cfg "ALTJL-battery2"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   32:  setaddr :buildBlockFromCfg.1*retaddr *label55                ...
   33:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label55                                               ...
   34:  set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"  CoreBuilder.mnd: buildBlockFromCfg(GENERATOR);
   35:  setaddr :buildBlockFromCfg.1*retaddr *label56                ...
   36:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label56                                               ...
   37:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   38:  set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"       CoreBuilder.mnd: buildBlockFromCfg(SMELTER);
   39:  setaddr :buildBlockFromCfg.1*retaddr *label57                ...
   40:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label57                                               ...
   41:  set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   42:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
   43:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
   44:  set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"             CoreBuilder.mnd: meetTarget(cfg);
   45:  setaddr :meetTarget.1*retaddr *label60                       ...
   46:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label60                                               ...
   47:  write @titanium processor2 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   48:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   49:  write .coreY processor3 ":findDrillLocation:y"               ...
   50:  write @unit processor3 ":findDrillLocation:unit"             ...
   51:  write @titanium processor3 ":findDrillLocation:item"         ...
   52:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
   53:  write 2 processor3 ":findDrillLocation:size"                 ...
   54:  write 4 processor3 ":findDrillLocation:limit"                ...
   55:  write false processor3 ":findDrillLocation*finished"         ...
   56:  write 1 processor3 "@counter"                                ...
        label *label61                                               ...
   57:  wait 1e-15                                                   ...
   58:  read *tmp138 processor3 ":findDrillLocation*finished"        ...
   59:  jump *label61 equal *tmp138 false                            ...
   60:  read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocat ...
   61:  read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocat ...
   62:  read :buildFirstTitaniumDrill:result processor3 ":findDrillL ...
   63:  jump *label62 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   64:  set :error:error "Cannot locate spot for titanium drill"     ...
   65:  setaddr :error*retaddr *label64                              ...
   66:  call *label15 *invalid :error*retval                         ...
        label *label64                                               ...
        label *label62                                               ...
   67:  write @pneumatic-drill processor2 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   68:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   69:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   70:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   71:  write 2 processor5 "@counter"                                ...
        label *label65                                               ...
   72:  wait 1e-15                                                   ...
   73:  read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished ...
   74:  jump *label65 equal *tmp144 false                            ...
   75:  read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   76:  set .titaniumDrill *tmp127                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   77:  write *tmp127 processor2 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   78:  set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"              CoreBuilder.mnd: buildBlockFromCfg(UNLOADER1);
   79:  setaddr :buildBlockFromCfg.1*retaddr *label66                ...
   80:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label66                                               ...
   81:  set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
   82:  setaddr :buildBlockFromCfg.1*retaddr *label67                ...
   83:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label67                                               ...
   84:  set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
   85:  setaddr :buildBlockFromCfg.1*retaddr *label68                ...
   86:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label68                                               ...
   87:  set .graphiteSurplus 80                                      CoreBuilder.mnd: graphiteSurplus = 80;
   88:  set :buildBlockFromCfg:cfg "AÕFDJS-micro-processor9"         CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, coreControllerConfig);
   89:  set :buildBlockFromCfg:config processor10                    ...
   90:  setaddr :buildBlockFromCfg*retaddr *label69                  ...
   91:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label69                                               ...
   92:  set .controller :buildBlockFromCfg*retval                    ...
   93:  write processor1 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
   94:  write processor2 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
   95:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
   96:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
   97:  set *tmp151 AJEMJJ-graphite-press0                           CoreBuilder.mnd: controller.write(@this.read(block), block);
   98:  write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-pre ...
   99:  set *tmp151 AJTJK-battery1                                  ...
  100:  write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"    ...
  101:  set *tmp151 ALTJL-battery2                                  ...
  102:  write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"    ...
  103:  set *tmp151 AJRJM-combustion-generator3                     ...
  104:  write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-g ...
  105:  set *tmp151 ALMQJN-silicon-smelter4                          ...
  106:  write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smel ...
  107:  set *tmp151 A{LNJO-inverted-sorter5                          ...
  108:  write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sor ...
  109:  set *tmp151 A©JNJP-unloader6                                 ...
  110:  write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"   ...
  111:  set *tmp151 A{HNJQ-inverted-sorter7                          ...
  112:  write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sor ...
  113:  set *tmp151 AJPJR-underflow-gate8                           ...
  114:  write *tmp151 :buildBlockFromCfg*retval "AJPJR-underflow-ga ...
  115:  set *tmp151 AÕFDJS-micro-processor9                          ...
  116:  write *tmp151 :buildBlockFromCfg*retval "AÕFDJS-micro-proces ...
  117:  set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"           CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  118:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  119:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  120:  set :buildBlockFromCfg.1:cfg "A©FHJU-unloader11"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER2);
  121:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  122:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  123:  set :buildBlockFromCfg.1:cfg "A~FJJV-overflow-gate12"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  124:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  125:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  126:  set :buildBlockFromCfg.1:cfg "A~DJJW-overflow-gate13"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  127:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  128:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  129:  set :buildBlockFromCfg.1:cfg "A¾BFLX-air-factory14"          CoreBuilder.mnd: buildBlockFromCfg(AIR_FACTORY);
  130:  setaddr :buildBlockFromCfg.1*retaddr *label87                ...
  131:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label87                                               ...
  132:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  133:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  134:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  135:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  136:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  137:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  138:  set .siliconSurplus 20                                       ...
  139:  setaddr :buildUnits*retaddr *label90                         CoreBuilder.mnd: buildUnits();
  140:  call *label42 *invalid :buildUnits*retval                    ...
        label *label90                                               ...
        label *label91                                               CoreBuilder.mnd: do
  141:  setaddr :supplyBase*retaddr *label94                         CoreBuilder.mnd: supplyBase();
  142:  call *label35 *invalid :supplyBase*retval                    ...
        label *label94                                               ...
  143:  sensor *tmp157 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < 300 then break; end;
  144:  jump *label93 lessThan *tmp157 300                           ...
  145:  read *tmp83 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  146:  jump *label91 lessThan *tmp83 3                              CoreBuilder.mnd: do
        label *label93                                               ...
  147:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  148:  set :buildBlockFromCfg.1:cfg "A©NHJY-unloader15"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  149:  setaddr :buildBlockFromCfg.1*retaddr *label97                ...
  150:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label97                                               ...
  151:  set :buildBlockFromCfg.1:cfg "A{NJJZ-inverted-sorter16"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  152:  setaddr :buildBlockFromCfg.1*retaddr *label98                ...
  153:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label98                                               ...
  154:  set :buildBlockFromCfg.1:cfg "ANOMJ[-kiln17"                 CoreBuilder.mnd: buildBlockFromCfg(KILN);
  155:  setaddr :buildBlockFromCfg.1*retaddr *label99                ...
  156:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label99                                               ...
  157:  set :buildBlockFromCfg.1:cfg "AKFRJa-multi-press23"          CoreBuilder.mnd: buildBlockFromCfg(MULTIPRESS);
  158:  setaddr :buildBlockFromCfg.1*retaddr *label100               ...
  159:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label100                                              ...
  160:  set :buildBlockFromCfg.1:cfg "A¡AOJ\-water-extractor18"      CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  161:  setaddr :buildBlockFromCfg.1*retaddr *label101               ...
  162:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label101                                              ...
  163:  set :buildBlockFromCfg.1:cfg "AAKJ^-steam-generator20"      CoreBuilder.mnd: buildBlockFromCfg(STEAM_GEN);
  164:  setaddr :buildBlockFromCfg.1*retaddr *label102               ...
  165:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label102                                              ...
  166:  set :buildBlockFromCfg.1:cfg "ALQIJ_-silicon-smelter21"      CoreBuilder.mnd: buildBlockFromCfg(SMELTER2);
  167:  setaddr :buildBlockFromCfg.1*retaddr *label103               ...
  168:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label103                                              ...
  169:  set :buildBlockFromCfg.1:cfg "A©HFJb-unloader24"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER4);
  170:  setaddr :buildBlockFromCfg.1*retaddr *label104               ...
  171:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label104                                              ...
  172:  set :buildBlockFromCfg.1:cfg "A{HDJc-inverted-sorter25"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT4);
  173:  setaddr :buildBlockFromCfg.1*retaddr *label105               ...
  174:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label105                                              ...
  175:  set :buildBlockFromCfg.1:cfg "AÀF@Ld-additive-reconstructor2 CoreBuilder.mnd: buildBlockFromCfg(ADDITIVE_REC);
  176:  setaddr :buildBlockFromCfg.1*retaddr *label106               ...
  177:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label106                                              ...
  178:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  179:  set .siliconMonoSurplus 20                                   CoreBuilder.mnd: siliconMonoSurplus = 20;
  180:  set .metaglassSurplus 100                                    CoreBuilder.mnd: metaglassSurplus = 100;
  181:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  182:  write 2 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  183:  write 3 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  184:  setaddr :buildUnits*retaddr *label109                        CoreBuilder.mnd: buildUnits();
  185:  call *label42 *invalid :buildUnits*retval                    ...
        label *label109                                              ...
        label *label110                                              CoreBuilder.mnd: while controller.polys < 2 do
  186:  read *tmp84 .controller ".polys"                             ...
  187:  jump *label112 greaterThanEq *tmp84 2                        ...
  188:  setaddr :supplyBase*retaddr *label110                        CoreBuilder.mnd: supplyBase();
  189:  call *label35 *invalid :supplyBase*retval                    ...
        label *label112                                              CoreBuilder.mnd: while controller.polys < 2 do
  190:  write 2 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
        label *label115                                              CoreBuilder.mnd: while controller.flares < 2 do
  191:  read *tmp82 .controller ".flares"                            ...
  192:  jump *label117 greaterThanEq *tmp82 2                        ...
  193:  setaddr :supplyBase*retaddr *label115                        CoreBuilder.mnd: supplyBase();
  194:  call *label35 *invalid :supplyBase*retval                    ...
        label *label117                                              CoreBuilder.mnd: while controller.flares < 2 do
  195:  write @ore-titanium processor2 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  196:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  197:  read :blocksBuildTitaniumDrills:current processor3 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  198:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  199:  write .coreY processor3 ":findDrillLocation:y"               ...
  200:  write @unit processor3 ":findDrillLocation:unit"             ...
  201:  write @titanium processor3 ":findDrillLocation:item"         ...
  202:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
  203:  write 4 processor3 ":findDrillLocation:size"                 ...
  204:  write 1000000000 processor3 ":findDrillLocation:limit"       ...
  205:  write false processor3 ":findDrillLocation*finished"         ...
  206:  write 1 processor3 "@counter"                                ...
  207:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  208:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  209:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  210:  write false processor5 ":buildTitaniumDrills*finished"       ...
  211:  write 3 processor5 "@counter"                                ...
        label *label120                                              ...
  212:  wait 1e-15                                                   ...
  213:  read *tmp185 processor5 ":buildTitaniumDrills*finished"      ...
  214:  jump *label120 equal *tmp185 false                           ...
  215:  write false processor3 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  216:  write 3 processor3 "@counter"                                ...
  217:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  218:  set .graphiteSurplus 10                                      CoreBuilder.mnd: graphiteSurplus = 10;
  219:  set .metaglassSurplus 50                                     CoreBuilder.mnd: metaglassSurplus = 50;
  220:  write .coreX processor3 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  221:  write .coreY processor3 ":layoutThoriumDrill:y"              ...
  222:  write @unit processor3 ":layoutThoriumDrill:unit"            ...
  223:  write 7 processor3 ":layoutThoriumDrill:limit"               ...
  224:  write false processor3 ":layoutThoriumDrill*finished"        ...
  225:  write 2 processor3 "@counter"                                ...
        label *label122                                              ...
  226:  wait 1e-15                                                   ...
  227:  read *tmp190 processor3 ":layoutThoriumDrill*finished"       ...
  228:  jump *label122 equal *tmp190 false                           ...
  229:  set :meetTarget.1:cfg "AJJJ~-laser-drill52"                 CoreBuilder.mnd: meetTarget(LASER_DRILL);
  230:  setaddr :meetTarget.1*retaddr *label123                      ...
  231:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label123                                              ...
        label *label124                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  232:  wait 1e-15                                                   ...
  233:  read *tmp192 processor3 ":layoutThoriumDrill*finished"       ...
  234:  jump *label124 equal *tmp192 false                           ...
  235:  read :buildThoriumDrill:result processor3 ":layoutThoriumDri ...
  236:  jump *label125 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  237:  set :error:error "Cannot locate spot for thorium drill"      ...
  238:  setaddr :error*retaddr *label127                             ...
  239:  call *label15 *invalid :error*retval                         ...
        label *label127                                              ...
        label *label125                                              ...
  240:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);
  241:  read *tmp54 processor3 ".drillX"                             ...
  242:  write *tmp54 processor5 ":buildBlockAt:x"                    ...
  243:  read *tmp55 processor3 ".drillY"                             ...
  244:  write *tmp55 processor5 ":buildBlockAt:y"                    ...
  245:  write null processor5 ":buildBlockAt:rotation"               ...
  246:  write 0 processor5 ":buildBlockAt:config"                    ...
  247:  write -1 processor5 ":buildBlockAt:index"                    ...
  248:  write false processor5 ":buildBlockAt*finished"              ...
  249:  write 1 processor5 "@counter"                                ...
        label *label128                                              ...
  250:  wait 1e-15                                                   ...
  251:  read *tmp202 processor5 ":buildBlockAt*finished"             ...
  252:  jump *label128 equal *tmp202 false                           ...
  253:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  254:  set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"         CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  255:  read :buildRemoteBlock:x processor3 ".water1X"               ...
  256:  read :buildRemoteBlock:y processor3 ".water1Y"               ...
  257:  setaddr :buildRemoteBlock*retaddr *label129                  ...
  258:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label129                                              ...
  259:  read :buildRemoteBlock:x processor3 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  260:  read :buildRemoteBlock:y processor3 ".water2Y"               ...
  261:  setaddr :buildRemoteBlock*retaddr *label130                  ...
  262:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label130                                              ...
  263:  set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"         CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  264:  read :buildRemoteBlock:x processor3 ".generatorX"            ...
  265:  read :buildRemoteBlock:y processor3 ".generatorY"            ...
  266:  setaddr :buildRemoteBlock*retaddr *label131                  ...
  267:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label131                                              ...
  268:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  269:  set :buildRemoteBlock:cfg "AFFJT-power-node10"              CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
  270:  read :buildRemoteBlock:x processor3 ".node1X"                ...
  271:  read :buildRemoteBlock:y processor3 ".node1Y"                ...
  272:  setaddr :buildRemoteBlock*retaddr *label132                  ...
  273:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label132                                              ...
  274:  read :buildRemoteBlock:x processor3 ".node2X"                CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
  275:  read :buildRemoteBlock:y processor3 ".node2Y"                ...
  276:  setaddr :buildRemoteBlock*retaddr *label133                  ...
  277:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label133                                              ...
  278:  set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"             CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  279:  read :buildRemoteBlock:x processor3 ".panelX"                ...
  280:  read :buildRemoteBlock:y processor3 ".panelY"                ...
  281:  setaddr :buildRemoteBlock*retaddr *label134                  ...
  282:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label134                                              ...
  283:  set :buildRemoteBlock:cfg "AJTJK-battery1"                  CoreBuilder.mnd: thoriumBattery = buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  284:  read :buildRemoteBlock:x processor3 ".batteryX"              ...
  285:  read :buildRemoteBlock:y processor3 ".batteryY"              ...
  286:  setaddr :buildRemoteBlock*retaddr *label135                  ...
  287:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label135                                              ...
  288:  set .thoriumBattery :buildRemoteBlock*retval                 ...
  289:  set :buildRemoteBlock:cfg "A¨JJJ~-container52"               CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  290:  read :buildRemoteBlock:x processor3 ".containerX"            ...
  291:  read :buildRemoteBlock:y processor3 ".containerY"            ...
  292:  setaddr :buildRemoteBlock*retaddr *label136                  ...
  293:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label136                                              ...
  294:  select .thoriumContainer equal :buildRemoteBlock*retval null CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  295:  write .thoriumDrill processor2 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  296:  write .thoriumContainer processor2 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  297:  write .thoriumContainer processor6 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  298:  write false processor6 ":setThoriumContainer*finished"       ...
  299:  write 3 processor6 "@counter"                                ...
        label *label139                                              ...
  300:  wait 1e-15                                                   ...
  301:  read *tmp215 processor6 ":setThoriumContainer*finished"      ...
  302:  jump *label139 equal *tmp215 false                           ...
  303:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
        label *label140                                              CoreBuilder.mnd: while controller.polys < 3 do
  304:  read *tmp84 .controller ".polys"                             ...
  305:  jump *label142 greaterThanEq *tmp84 3                        ...
  306:  setaddr :supplyBase*retaddr *label140                        CoreBuilder.mnd: supplyBase();
  307:  call *label35 *invalid :supplyBase*retval                    ...
        label *label142                                              CoreBuilder.mnd: while controller.polys < 3 do
  308:  write 3200 .controller ".powerTarget"                        CoreBuilder.mnd: controller.powerTarget = 3200;
  309:  set .siliconMonoSurplus 120                                  CoreBuilder.mnd: siliconMonoSurplus = 120;
  310:  set .leadSurplus 0                                           CoreBuilder.mnd: leadSurplus = 0;
  311:  set :buildBlockFromCfg.1:cfg "AÁNBJe-multiplicative-reconstr CoreBuilder.mnd: buildBlockFromCfg(MULTIPLICATIVE_REC);
  312:  setaddr :buildBlockFromCfg.1*retaddr *label144               ...
  313:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label144                                              ...
  314:  set .metaglassSurplus 10                                     CoreBuilder.mnd: metaglassSurplus = 10;
  315:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  316:  setaddr :buildUnits*retaddr *label146                        CoreBuilder.mnd: buildUnits();
  317:  call *label42 *invalid :buildUnits*retval                    ...
        label *label146                                              ...
  318:  read *tmp84 .controller ".polys"                             CoreBuilder.mnd: var tmp = controller.polys - 1;
  319:  op sub :tmp *tmp84 1                                         ...
  320:  write :tmp .controller ".polyTarget"                         CoreBuilder.mnd: controller.polyTarget = tmp;
  321:  write :tmp .controller ".polys"                              CoreBuilder.mnd: controller.polys = tmp;
  322:  write :tmp processor2 ".polys"                               CoreBuilder.mnd: display.polys = tmp;
  323:  sensor :x AÁNBJe-multiplicative-reconstructor27 @x           CoreBuilder.mnd: var x = multiplicative_rec.@x;
  324:  sensor :y AÁNBJe-multiplicative-reconstructor27 @y           CoreBuilder.mnd: var y = multiplicative_rec.@y;
        label *label147                                              CoreBuilder.mnd: do
  325:  ucontrol move :x :y 0 0 0                                    CoreBuilder.mnd: move(x, y);
  326:  ucontrol payEnter 0 0 0 0 0                                  CoreBuilder.mnd: payEnter();
  327:  read *tmp85 .controller ".megas"                             CoreBuilder.mnd: while !controller.megas;
  328:  jump *label147 equal *tmp85 false                            CoreBuilder.mnd: do
  329:  write true .controller ".finished"                           CoreBuilder.mnd: controller.finished = true;
  330:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  331:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  332:  control enabled processor6 false 0 0 0                       CoreBuilder.mnd: polyController.enabled = false;
  333:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: oreLocator.enabled = false;
  334:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: blockBuilder.enabled = false;
  335:  control enabled processor11 false 0 0 0                      CoreBuilder.mnd: measurements.enabled = false;
  336:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  337:  setaddr :flagUnits*retaddr *label151                         ...
  338:  call *label43 *invalid :flagUnits*retval                     ...
        label *label151                                              ...
  339:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  340:  setaddr :flagUnits*retaddr *label152                         ...
  341:  call *label43 *invalid :flagUnits*retval                     ...
        label *label152                                              ...
  342:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  343:  setaddr :flagUnits*retaddr *label153                         ...
  344:  call *label43 *invalid :flagUnits*retval                     ...
        label *label153                                              ...
  345:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  346:  setaddr :flagUnits*retaddr *label154                         ...
  347:  call *label43 *invalid :flagUnits*retval                     ...
        label *label154                                              ...
        label *label155                                              CoreBuilder.mnd: while true do
  348:  op sub :lineUpUnits:y @thisy 16                              CoreBuilder.mnd: lineUpUnits(@thisy - 16, @mega);
  349:  set :lineUpUnits:unit @mega                                  ...
  350:  setaddr :lineUpUnits*retaddr *label158                       ...
  351:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label158                                              ...
  352:  op sub :lineUpUnits:y @thisy 20                              CoreBuilder.mnd: lineUpUnits(@thisy - 20, @poly);
  353:  set :lineUpUnits:unit @poly                                  ...
  354:  setaddr :lineUpUnits*retaddr *label159                       ...
  355:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label159                                              ...
  356:  op sub :lineUpUnits:y @thisy 24                              CoreBuilder.mnd: lineUpUnits(@thisy - 24, @mono);
  357:  set :lineUpUnits:unit @mono                                  ...
  358:  setaddr :lineUpUnits*retaddr *label160                       ...
  359:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label160                                              ...
  360:  op sub :lineUpUnits:y @thisy 28                              CoreBuilder.mnd: lineUpUnits(@thisy - 28, @flare);
  361:  set :lineUpUnits:unit @flare                                 ...
  362:  setaddr :lineUpUnits*retaddr *label155                       ...
  363:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label15                                               Actions.mnd: void error(error)
  364:  set .ERROR :error:error                                      Actions.mnd: ERROR = error;
  365:  stop                                                         Actions.mnd: stopProcessor();
  366:  return :error*retaddr                                        Actions.mnd: void error(error)
        label *label35                                               CoreBuilder.mnd: void supplyBase()
  367:  op add *tmp232 .siliconMonoSurplus silicon                   CoreBuilder.mnd: monoController.sandTarget = max(0, siliconMonoSurplus + targetSilicon - core.@silicon);
  368:  sensor *tmp233 .core @silicon                                ...
  369:  op sub *tmp234 *tmp232 *tmp233                               ...
  370:  op max *tmp235 0 *tmp234                                     ...
  371:  write *tmp235 processor7 ".sandTarget"                       ...
  372:  jump *label164 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  373:  write "Phase 2: servicing thorium drill" processor2 ".status Actions.mnd: display.status1 = text;
  374:  sensor *tmp237 .thoriumBattery @totalPower                   CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  375:  jump *label168 greaterThanEq *tmp237 2000                    ...
  376:  sensor *tmp240 .thoriumGenerator @coal                       CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
  377:  jump *label170 notEqual *tmp240 0                            ...
  378:  sensor *tmp243 .core @coal                                   CoreBuilder.mnd: if core.@coal < 50 then
  379:  jump *label172 greaterThanEq *tmp243 50                      ...
  380:  set :supplyBlock:block .thoriumGenerator                     CoreBuilder.mnd: supplyBlock(thoriumGenerator, @coal);
  381:  set :supplyBlock:ore @coal                                   ...
  382:  setaddr :supplyBlock*retaddr *label173                       ...
  383:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label172                                              CoreBuilder.mnd: if core.@coal < 50 then
  384:  sensor *tmp341 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  385:  op min :transportStatus:target *tmp341 30                    ...
  386:  set :transportStatus:item @coal                              ...
  387:  setaddr :transportStatus*retaddr *label530                   ...
  388:  call *label14 *invalid :transportStatus*retval               ...
        label *label530                                              ...
  389:  set :status2:text "Transferring "                            Actions.mnd: status2("Transferring ", item, target);
  390:  set :status2:item @coal                                      ...
  391:  set :status2:block .thoriumGenerator                         ...
  392:  setaddr :status2*retaddr *label531                           ...
  393:  call *label12 *invalid :status2*retval                       ...
        label *label531                                              ...
  394:  set :moveToEmpty:x .coreX                                    Actions.mnd: moveToEmpty(coreX, coreY);
  395:  set :moveToEmpty:y .coreY                                    ...
  396:  setaddr :moveToEmpty*retaddr *label532                       ...
  397:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label532                                              ...
  398:  setaddr :dropAll*retaddr *label533                           Actions.mnd: dropAll();
  399:  call *label19 *invalid :dropAll*retval                       ...
        label *label533                                              ...
        label *label534                                              Actions.mnd: do
  400:  ucontrol itemTake .core @coal 30 0 0                         Actions.mnd: itemTake(core, item, capacity);
  401:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  402:  op notEqual *tmp344 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  403:  op notEqual *tmp345 :supplyBlockFromCore:unitItem @coal      ...
  404:  op land *tmp346 *tmp344 *tmp345                              ...
  405:  jump *label535 equal *tmp346 false                           ...
  406:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label535                                              Actions.mnd: if unitItem != null and unitItem != item then
  407:  sensor *tmp348 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  408:  op lessThan *tmp349 *tmp348 30                               ...
  409:  sensor *tmp350 .core @coal                                   ...
  410:  op land *tmp351 *tmp349 *tmp350                              ...
  411:  jump *label534 notEqual *tmp351 false                        Actions.mnd: do
  412:  set :depositItems:block .thoriumGenerator                    Actions.mnd: depositItems(target, item);
  413:  set :depositItems:item @coal                                 ...
  414:  setaddr :depositItems*retaddr *label539                      ...
  415:  call *label21 *invalid :depositItems*retval                  ...
        label *label539                                              ...
        label *label173                                              CoreBuilder.mnd: if core.@coal < 50 then
        label *label170                                              CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
        label *label168                                              CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  416:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  417:  set :fetchBlock:item @thorium                                ...
  418:  setaddr :fetchBlock*retaddr *label176                        ...
  419:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label176                                              ...
  420:  sensor *tmp246 .core @thorium                                CoreBuilder.mnd: if core.@thorium > 400 then
  421:  jump *label165 lessThanEq *tmp246 400                        ...
  422:  write 4 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  423:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label164                                              ...
  424:  read *tmp83 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 1 then
  425:  jump *label180 lessThanEq *tmp83 1                           ...
  426:  write "Phase 1: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  427:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  428:  setaddr :mineOre.1*retaddr *label184                         ...
  429:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label184                                              ...
  430:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 1 then
        label *label180                                              ...
  431:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  432:  jump *label186 notEqual A©JNJP-unloader6 null                CoreBuilder.mnd: if unloader1 == null then
  433:  sensor *tmp253 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  434:  jump *label188 greaterThanEq *tmp253 graphite                ...
  435:  sensor *tmp256 AJEMJJ-graphite-press0 @coal                  CoreBuilder.mnd: if press.@coal < 5 then
  436:  jump *label190 greaterThanEq *tmp256 5                       ...
  437:  write "Goal 1: graphite requirement" processor2 ".status1"   Actions.mnd: display.status1 = text;
  438:  set :supplyBlock:block AJEMJJ-graphite-press0                CoreBuilder.mnd: supplyBlock(press, @coal);
  439:  set :supplyBlock:ore @coal                                   ...
  440:  setaddr :supplyBlock*retaddr *label193                       ...
  441:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label193                                              ...
  442:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label190                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label188                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  443:  sensor *tmp259 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  444:  jump *label194 greaterThanEq *tmp259 silicon                 ...
  445:  sensor *tmp262 ALMQJN-silicon-smelter4 @coal                 CoreBuilder.mnd: if smelter.@coal < 5 then
  446:  jump *label196 greaterThanEq *tmp262 5                       ...
  447:  write "Goal 2: coal for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  448:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @coal);
  449:  set :supplyBlock:ore @coal                                   ...
  450:  setaddr :supplyBlock*retaddr *label199                       ...
  451:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label199                                              ...
  452:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  453:  jump *label197 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label196                                              ...
  454:  sensor *tmp265 ALMQJN-silicon-smelter4 @sand                 CoreBuilder.mnd: elsif smelter.@sand < 5 then
  455:  jump *label200 greaterThanEq *tmp265 5                       ...
  456:  write "Goal 3: sand for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  457:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @sand);
  458:  set :supplyBlock:ore @sand                                   ...
  459:  setaddr :supplyBlock*retaddr *label203                       ...
  460:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label203                                              ...
  461:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label200                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label197                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label194                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  462:  sensor *tmp268 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
  463:  jump *label204 greaterThanEq *tmp268 .powerTarget            ...
  464:  sensor *tmp271 AJRJM-combustion-generator3 @coal            CoreBuilder.mnd: if generator.@coal < 2 then
  465:  jump *label206 greaterThanEq *tmp271 2                       ...
  466:  write "Goal 4: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  467:  set :supplyBlock:block AJRJM-combustion-generator3          CoreBuilder.mnd: supplyBlock(generator, @coal);
  468:  set :supplyBlock:ore @coal                                   ...
  469:  setaddr :supplyBlock*retaddr *label209                       ...
  470:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label209                                              ...
  471:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label206                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label204                                              CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
        label *label186                                              CoreBuilder.mnd: if unloader1 == null then
  472:  set *tmp276 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  473:  sensor *tmp274 .core @titanium                               ...
  474:  jump *label211 greaterThanEq *tmp274 titanium                ...
  475:  sensor *tmp277 .core @titanium                               ...
  476:  op sub *tmp278 titanium *tmp277                              ...
  477:  op min *tmp276 7 *tmp278                                     ...
        label *label211                                              ...
  478:  sensor *tmp280 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  479:  jump *label212 greaterThanEq *tmp280 *tmp276                 ...
  480:  jump *label213 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  481:  sensor *tmp285 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
  482:  op mul *tmp286 A©JNJP-unloader6 .powerTarget                 ...
  483:  jump *label216 greaterThanEq *tmp285 *tmp286                 ...
  484:  write "Goal 5: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  485:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  486:  setaddr :mineOre.1*retaddr *label219                         ...
  487:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label219                                              ...
  488:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
        label *label216                                              ...
  489:  sensor *tmp289 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  490:  jump *label220 greaterThanEq *tmp289 silicon                 ...
  491:  write "Goal 6: silicon requirement" processor2 ".status1"    Actions.mnd: display.status1 = text;
  492:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  493:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  494:  select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  495:  setaddr :mineOre.1*retaddr *label225                         CoreBuilder.mnd: mineOre(ore);
  496:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label225                                              ...
  497:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label220                                              ...
  498:  sensor *tmp296 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  499:  jump *label226 greaterThanEq *tmp296 copper                  ...
  500:  write "Goal 7: copper requirement" processor2 ".status1"     Actions.mnd: display.status1 = text;
  501:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  502:  setaddr :mineOre.1*retaddr *label229                         ...
  503:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label229                                              ...
  504:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label226                                              ...
  505:  sensor *tmp299 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  506:  jump *label230 greaterThanEq *tmp299 lead                    ...
  507:  write "Goal 8: lead requirement" processor2 ".status1"       Actions.mnd: display.status1 = text;
  508:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  509:  setaddr :mineOre.1*retaddr *label233                         ...
  510:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label233                                              ...
  511:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label230                                              ...
  512:  sensor *tmp302 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  513:  jump *label234 greaterThanEq *tmp302 metaglass               ...
  514:  write "Goal 9: metaglass requirement" processor2 ".status1"  Actions.mnd: display.status1 = text;
  515:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  516:  setaddr :mineOre.1*retaddr *label237                         ...
  517:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label237                                              ...
  518:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label234                                              ...
  519:  write "Goal 10: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  520:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  521:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  522:  select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supply CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  523:  setaddr :mineOre.1*retaddr *label241                         CoreBuilder.mnd: mineOre(ore);
  524:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label241                                              ...
  525:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label212                                              ...
  526:  write "Goal 11: Fetching titanium" processor2 ".status1"     Actions.mnd: display.status1 = text;
  527:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  528:  set :fetchBlock:item @titanium                               ...
  529:  setaddr :fetchBlock*retaddr *label243                        ...
  530:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label243                                              ...
        label *label213                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label165                                              CoreBuilder.mnd: if thoriumContainer then
  531:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label38                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  532:  op add *tmp309 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  533:  jump *label245 lessThanEq *tmp309 0                          ...
  534:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  535:  setaddr :unpackCfg*retaddr *label247                         ...
  536:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label247                                              ...
  537:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
  538:  set :buildBlock:x :buildRemoteBlock:x                        ...
  539:  set :buildBlock:y :buildRemoteBlock:y                        ...
  540:  set :buildBlock:copper :unpackCfg:cu                         ...
  541:  set :buildBlock:lead :unpackCfg:pb                           ...
  542:  set :buildBlock:graphite :unpackCfg:gr                       ...
  543:  set :buildBlock:silicon :unpackCfg:si                        ...
  544:  set :buildBlock:titanium :unpackCfg:ti                       ...
  545:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  546:  set :buildBlock:thorium :unpackCfg:th                        ...
  547:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  548:  set :buildBlock:config null                                  ...
  549:  set :buildBlock:index :unpackCfg:ind                         ...
  550:  setaddr :buildBlock*retaddr *label248                        ...
  551:  call *label37 *invalid :buildBlock*retval                    ...
        label *label248                                              ...
  552:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  553:  return :buildRemoteBlock*retaddr                             ...
        label *label245                                              CoreBuilder.mnd: if x + y > 0 then
  554:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  555:  return :buildRemoteBlock*retaddr                             ...
        label *label39                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  556:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  557:  setaddr :unpackCfg*retaddr *label250                         ...
  558:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label250                                              ...
  559:  op add *tmp312 .coreX :unpackCfg:x                           CoreBuilder.mnd: var building = buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
  560:  op add *tmp313 .coreY :unpackCfg:y                           ...
  561:  set :buildBlock:block :unpackCfg:type                        ...
  562:  set :buildBlock:x *tmp312                                    ...
  563:  set :buildBlock:y *tmp313                                    ...
  564:  set :buildBlock:copper :unpackCfg:cu                         ...
  565:  set :buildBlock:lead :unpackCfg:pb                           ...
  566:  set :buildBlock:graphite :unpackCfg:gr                       ...
  567:  set :buildBlock:silicon :unpackCfg:si                        ...
  568:  set :buildBlock:titanium :unpackCfg:ti                       ...
  569:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  570:  set :buildBlock:thorium :unpackCfg:th                        ...
  571:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  572:  set :buildBlock:config :buildBlockFromCfg:config             ...
  573:  set :buildBlock:index :unpackCfg:ind                         ...
  574:  setaddr :buildBlock*retaddr *label251                        ...
  575:  call *label37 *invalid :buildBlock*retval                    ...
        label *label251                                              ...
  576:  write :buildBlock*retval @this :buildBlockFromCfg:cfg        CoreBuilder.mnd: @this.write(building, cfg);
  577:  write :buildBlock*retval processor2 :buildBlockFromCfg:cfg   CoreBuilder.mnd: display.write(building, cfg);
  578:  write :buildBlock*retval .controller :buildBlockFromCfg:cfg  CoreBuilder.mnd: controller.write(building, cfg);
  579:  set :buildBlockFromCfg*retval :buildBlock*retval             CoreBuilder.mnd: return building;
  580:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label40                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  581:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  582:  set :buildBlockFromCfg:config null                           ...
  583:  setaddr :buildBlockFromCfg*retaddr *label253                 ...
  584:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label253                                              ...
  585:  return :buildBlockFromCfg.1*retaddr                          CoreBuilder.mnd: def buildBlockFromCfg(cfg)
        label *label41                                               CoreBuilder.mnd: void meetTarget(cfg)
  586:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  587:  setaddr :unpackCfg*retaddr *label255                         ...
  588:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label255                                              ...
  589:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th, false, false);
  590:  set :meetTarget:copper :unpackCfg:cu                         ...
  591:  set :meetTarget:lead :unpackCfg:pb                           ...
  592:  set :meetTarget:graphite :unpackCfg:gr                       ...
  593:  set :meetTarget:silicon :unpackCfg:si                        ...
  594:  set :meetTarget:titanium :unpackCfg:ti                       ...
  595:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  596:  set :meetTarget:thorium :unpackCfg:th                        ...
  597:  set :meetTarget:forBuild false                               ...
  598:  set :meetTarget:isNoTarget false                             ...
  599:  setaddr :meetTarget*retaddr *label256                        ...
  600:  call *label36 *invalid :meetTarget*retval                    ...
        label *label256                                              ...
  601:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label42                                               CoreBuilder.mnd: void buildUnits()
  602:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
  603:  set :meetTarget:copper 0                                     ...
  604:  set :meetTarget:lead 0                                       ...
  605:  set :meetTarget:graphite 0                                   ...
  606:  set :meetTarget:silicon 0                                    ...
  607:  set :meetTarget:titanium 0                                   ...
  608:  set :meetTarget:metaglass 0                                  ...
  609:  set :meetTarget:thorium 0                                    ...
  610:  set :meetTarget:forBuild false                               ...
  611:  set :meetTarget:isNoTarget true                              ...
  612:  setaddr :meetTarget*retaddr *label258                        ...
  613:  call *label36 *invalid :meetTarget*retval                    ...
        label *label258                                              ...
  614:  write 0 processor2 ".totalTargets"                           CoreBuilder.mnd: display.totalTargets = 0;
  615:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  616:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  617:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  618:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  619:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label43                                               CoreBuilder.mnd: void flagUnits(unit)
        label *label260                                              CoreBuilder.mnd: do
  620:  ubind :flagUnits:unit                                        CoreBuilder.mnd: firstUnit = ubind(unit);
  621:  set :flagUnits:firstUnit @unit                               ...
  622:  jump *label260 equal :flagUnits:firstUnit null               CoreBuilder.mnd: do
  623:  set :flagUnits:x @thisx                                      CoreBuilder.mnd: var x = @thisx;
        label *label263                                              CoreBuilder.mnd: do
  624:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  625:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  626:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  627:  jump *label263 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  628:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label44                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  629:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  630:  set :lineUpUnits:firstUnit @unit                             ...
        label *label267                                              CoreBuilder.mnd: do
  631:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  632:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  633:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  634:  sensor *tmp319 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  635:  jump *label270 equal *tmp319 false                           ...
  636:  ucontrol stop 0 0 0 0 0                                      ...
        label *label270                                              ...
  637:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  638:  jump *label267 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  639:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)
        label *label24                                               Actions.mnd: void mineOre(ore)
  640:  set :status2:text "Mining "                                  Actions.mnd: status2("Mining ", ore, "core");
  641:  set :status2:item :mineOre.1:ore                             ...
  642:  set :status2:block "core"                                    ...
  643:  setaddr :status2*retaddr *label274                           ...
  644:  call *label12 *invalid :status2*retval                       ...
        label *label274                                              ...
  645:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  646:  set :mineOre:amount 30                                       ...
  647:  set :mineOre:block .core                                     ...
  648:  setaddr :mineOre*retaddr *label275                           ...
  649:  call *label23 *invalid :mineOre*retval                       ...
        label *label275                                              ...
  650:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label25                                               Actions.mnd: void fetchBlock(block, item)
  651:  sensor *tmp323 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  652:  op min :transportStatus:target *tmp323 30                    ...
  653:  set :transportStatus:item :fetchBlock:item                   ...
  654:  setaddr :transportStatus*retaddr *label277                   ...
  655:  call *label14 *invalid :transportStatus*retval               ...
        label *label277                                              ...
  656:  set :status2:text "Fetching "                                Actions.mnd: status2("Fetching ", item, block);
  657:  set :status2:item :fetchBlock:item                           ...
  658:  set :status2:block :fetchBlock:block                         ...
  659:  setaddr :status2*retaddr *label278                           ...
  660:  call *label12 *invalid :status2*retval                       ...
        label *label278                                              ...
  661:  sensor *tmp325 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  662:  sensor *tmp326 :fetchBlock:block @y                          ...
  663:  set :moveToEmpty:x *tmp325                                   ...
  664:  set :moveToEmpty:y *tmp326                                   ...
  665:  setaddr :moveToEmpty*retaddr *label279                       ...
  666:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label279                                              ...
  667:  setaddr :dropAll*retaddr *label280                           Actions.mnd: dropAll();
  668:  call *label19 *invalid :dropAll*retval                       ...
        label *label280                                              ...
        label *label281                                              Actions.mnd: do
  669:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  670:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  671:  op notEqual *tmp328 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  672:  op notEqual *tmp329 :fetchBlock:unitItem :fetchBlock:item    ...
  673:  op land *tmp330 *tmp328 *tmp329                              ...
  674:  jump *label284 equal *tmp330 false                           ...
  675:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label284                                              Actions.mnd: if unitItem != null and unitItem != item then
  676:  sensor *tmp332 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  677:  op lessThan *tmp333 *tmp332 30                               ...
  678:  sensor *tmp334 :fetchBlock:block :fetchBlock:item            ...
  679:  op land *tmp335 *tmp333 *tmp334                              ...
  680:  jump *label281 notEqual *tmp335 false                        Actions.mnd: do
  681:  set :depositItems:block .core                                Actions.mnd: depositItems(core, item);
  682:  set :depositItems:item :fetchBlock:item                      ...
  683:  setaddr :depositItems*retaddr *label286                      ...
  684:  call *label21 *invalid :depositItems*retval                  ...
        label *label286                                              ...
  685:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label26                                               Actions.mnd: void supplyBlock(block, ore)
  686:  set :status2:text "Supplying "                               Actions.mnd: status2("Supplying ", ore, block);
  687:  set :status2:item :supplyBlock:ore                           ...
  688:  set :status2:block :supplyBlock:block                        ...
  689:  setaddr :status2*retaddr *label288                           ...
  690:  call *label12 *invalid :status2*retval                       ...
        label *label288                                              ...
  691:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  692:  sensor *tmp337 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  693:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp3 ...
  694:  jump *label289 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  695:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  696:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  697:  set :mineOre:block :supplyBlock:block                        ...
  698:  setaddr :mineOre*retaddr *label291                           ...
  699:  call *label23 *invalid :mineOre*retval                       ...
        label *label291                                              ...
        label *label289                                              Actions.mnd: if missing > 0 then
  700:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label29                                               Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
  701:  read *tmp353 :unpackCfg:cfg 1                                Common.mnd: type = lookup(:block, char(cfg, index++) - _Common_offset);
  702:  op sub *tmp354 *tmp353 74                                    ...
  703:  lookup block :unpackCfg:type *tmp354                         ...
  704:  read *tmp357 :unpackCfg:cfg 2                                Common.mnd: x = (char(cfg, index++) - _Common_offset) / 2;
  705:  op sub *tmp358 *tmp357 74                                    ...
  706:  op div :unpackCfg:x *tmp358 2                                ...
  707:  read *tmp361 :unpackCfg:cfg 3                                Common.mnd: y = (char(cfg, index++) - _Common_offset) / 2;
  708:  op sub *tmp362 *tmp361 74                                    ...
  709:  op div :unpackCfg:y *tmp362 2                                ...
  710:  read *tmp365 :unpackCfg:cfg 4                                Common.mnd: rotation = char(cfg, index++) - _Common_offset;
  711:  op sub :unpackCfg:rotation *tmp365 74                        ...
  712:  read *tmp368 :unpackCfg:cfg 5                                Common.mnd: ind = char(cfg, index++) - _Common_offset;
  713:  op sub :unpackCfg:ind *tmp368 74                             ...
  714:  sensor :unpackCfg:cu :unpackCfg:type @copper                 Common.mnd: cu = type.@copper;
  715:  sensor :unpackCfg:pb :unpackCfg:type @lead                   Common.mnd: pb = type.@lead;
  716:  sensor :unpackCfg:gr :unpackCfg:type @graphite               Common.mnd: gr = type.@graphite;
  717:  sensor :unpackCfg:si :unpackCfg:type @silicon                Common.mnd: si = type.@silicon;
  718:  sensor :unpackCfg:ti :unpackCfg:type @titanium               Common.mnd: ti = type.@titanium;
  719:  sensor :unpackCfg:mg :unpackCfg:type @metaglass              Common.mnd: mg = type.@metaglass;
  720:  sensor :unpackCfg:th :unpackCfg:type @thorium                Common.mnd: th = type.@thorium;
  721:  return :unpackCfg*retaddr                                    Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
        label *label36                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
  722:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  723:  op sign *tmp379 :meetTarget:lead 0                           ...
  724:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  725:  op sign *tmp379 :meetTarget:graphite 0                       ...
  726:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  727:  op sign *tmp379 :meetTarget:silicon 0                        ...
  728:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  729:  op sign *tmp379 :meetTarget:titanium 0                       ...
  730:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  731:  op sign *tmp379 :meetTarget:metaglass 0                      ...
  732:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  733:  op sign *tmp379 :meetTarget:thorium 0                        ...
  734:  op add :meetTarget:count :meetTarget:count *tmp379           ...
  735:  write :meetTarget:count processor2 ".totalTargets"           CoreBuilder.mnd: display.totalTargets = count;
  736:  write :meetTarget:block processor2 ".nextBlock"              CoreBuilder.mnd: display.nextBlock = block;
  737:  write :meetTarget:copper processor2 ".targetCopper"          CoreBuilder.mnd: display.targetCopper = copper;
  738:  write :meetTarget:lead processor2 ".targetLead"              CoreBuilder.mnd: display.targetLead = lead;
  739:  write :meetTarget:graphite processor2 ".targetGraphite"      CoreBuilder.mnd: display.targetGraphite = graphite;
  740:  write :meetTarget:silicon processor2 ".targetSilicon"        CoreBuilder.mnd: display.targetSilicon = silicon;
  741:  write :meetTarget:titanium processor2 ".targetTitanium"      CoreBuilder.mnd: display.targetTitanium = titanium;
  742:  write :meetTarget:metaglass processor2 ".targetMetaglass"    CoreBuilder.mnd: display.targetMetaglass = metaglass;
  743:  write :meetTarget:thorium processor2 ".targetThorium"        CoreBuilder.mnd: display.targetThorium = thorium;
  744:  set copper :meetTarget:copper                                CoreBuilder.mnd: targetCopper = copper;
  745:  op add lead :meetTarget:lead .leadSurplus                    CoreBuilder.mnd: targetLead = lead + leadSurplus;
  746:  set graphite :meetTarget:graphite                            CoreBuilder.mnd: targetGraphite = graphite;
  747:  set silicon :meetTarget:silicon                              CoreBuilder.mnd: targetSilicon = silicon;
  748:  set titanium :meetTarget:titanium                            CoreBuilder.mnd: targetTitanium = titanium;
  749:  set metaglass :meetTarget:metaglass                          CoreBuilder.mnd: targetMetaglass = metaglass;
  750:  set thorium :meetTarget:thorium                              CoreBuilder.mnd: targetThorium = thorium;
  751:  set .noTarget :meetTarget:isNoTarget                         CoreBuilder.mnd: noTarget = isNoTarget;
  752:  op add *tmp381 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  753:  write *tmp381 .controller ".pressTarget"                     ...
  754:  op add *tmp382 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  755:  write *tmp382 .controller ".smelterTarget"                   ...
  756:  op add *tmp383 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  757:  write *tmp383 .controller ".kilnTarget"                      ...
  758:  write lead .controller ".leadReserve"                        CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  759:  op sign *tmp385 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  760:  op mul *tmp386 *tmp385 20                                    ...
  761:  op add *tmp387 :meetTarget:silicon *tmp386                   ...
  762:  write *tmp387 .controller ".siliconReserve"                  ...
  763:  op sign *tmp388 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  764:  op mul *tmp389 *tmp388 20                                    ...
  765:  op add *tmp390 :meetTarget:graphite *tmp389                  ...
  766:  write *tmp390 .controller ".graphiteReserve"                 ...
  767:  write lead processor7 ".leadTarget"                          CoreBuilder.mnd: monoController.leadTarget = targetLead;
  768:  write :meetTarget:copper processor7 ".copperTarget"          CoreBuilder.mnd: monoController.copperTarget = targetCopper;
        label *label315                                              CoreBuilder.mnd: while !targetMet() do
  769:  sensor *tmp392 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  770:  jump *label319 greaterThanEq *tmp392 copper                  ...
  771:  set *tmp391 false                                            ...
  772:  jump *label318 always 0 0                                    ...
        label *label319                                              ...
  773:  sensor *tmp395 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  774:  jump *label321 greaterThanEq *tmp395 lead                    ...
  775:  set *tmp391 false                                            ...
  776:  jump *label318 always 0 0                                    ...
        label *label321                                              ...
  777:  sensor *tmp398 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  778:  jump *label323 greaterThanEq *tmp398 graphite                ...
  779:  set *tmp391 false                                            ...
  780:  jump *label318 always 0 0                                    ...
        label *label323                                              ...
  781:  sensor *tmp401 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  782:  jump *label325 greaterThanEq *tmp401 silicon                 ...
  783:  set *tmp391 false                                            ...
  784:  jump *label318 always 0 0                                    ...
        label *label325                                              ...
  785:  sensor *tmp404 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  786:  jump *label327 greaterThanEq *tmp404 titanium                ...
  787:  set *tmp391 false                                            ...
  788:  jump *label318 always 0 0                                    ...
        label *label327                                              ...
  789:  sensor *tmp407 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  790:  jump *label329 greaterThanEq *tmp407 metaglass               ...
  791:  set *tmp391 false                                            ...
  792:  jump *label318 always 0 0                                    ...
        label *label329                                              ...
  793:  sensor *tmp410 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  794:  jump *label331 greaterThanEq *tmp410 thorium                 ...
  795:  set *tmp391 false                                            ...
  796:  jump *label318 always 0 0                                    ...
        label *label331                                              ...
  797:  set *tmp391 true                                             CoreBuilder.mnd: return true;
  798:  jump *label318 always 0 0                                    ...
        label *label318                                              CoreBuilder.mnd: while !targetMet() do
  799:  jump *label317 notEqual *tmp391 false                        ...
  800:  setaddr :supplyBase*retaddr *label315                        CoreBuilder.mnd: supplyBase();
  801:  call *label35 *invalid :supplyBase*retval                    ...
        label *label317                                              CoreBuilder.mnd: while !targetMet() do
  802:  jump *label334 equal :meetTarget:forBuild false              CoreBuilder.mnd: if forBuild then
  803:  write false .controller ":buildStart*finished"               CoreBuilder.mnd: controller.buildStart();
  804:  write 1 .controller "@counter"                               ...
        label *label336                                              ...
  805:  wait 1e-15                                                   ...
  806:  read *tmp415 .controller ":buildStart*finished"              ...
  807:  jump *label336 equal *tmp415 false                           ...
        label *label337                                              CoreBuilder.mnd: while !targetMet() do
  808:  sensor *tmp417 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  809:  jump *label341 greaterThanEq *tmp417 copper                  ...
  810:  set *tmp416 false                                            ...
  811:  jump *label340 always 0 0                                    ...
        label *label341                                              ...
  812:  sensor *tmp420 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  813:  jump *label343 greaterThanEq *tmp420 lead                    ...
  814:  set *tmp416 false                                            ...
  815:  jump *label340 always 0 0                                    ...
        label *label343                                              ...
  816:  sensor *tmp423 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  817:  jump *label345 greaterThanEq *tmp423 graphite                ...
  818:  set *tmp416 false                                            ...
  819:  jump *label340 always 0 0                                    ...
        label *label345                                              ...
  820:  sensor *tmp426 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  821:  jump *label347 greaterThanEq *tmp426 silicon                 ...
  822:  set *tmp416 false                                            ...
  823:  jump *label340 always 0 0                                    ...
        label *label347                                              ...
  824:  sensor *tmp429 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  825:  jump *label349 greaterThanEq *tmp429 titanium                ...
  826:  set *tmp416 false                                            ...
  827:  jump *label340 always 0 0                                    ...
        label *label349                                              ...
  828:  sensor *tmp432 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  829:  jump *label351 greaterThanEq *tmp432 metaglass               ...
  830:  set *tmp416 false                                            ...
  831:  jump *label340 always 0 0                                    ...
        label *label351                                              ...
  832:  sensor *tmp435 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  833:  jump *label353 greaterThanEq *tmp435 thorium                 ...
  834:  set *tmp416 false                                            ...
  835:  jump *label340 always 0 0                                    ...
        label *label353                                              ...
  836:  set *tmp416 true                                             CoreBuilder.mnd: return true;
  837:  jump *label340 always 0 0                                    ...
        label *label340                                              CoreBuilder.mnd: while !targetMet() do
  838:  jump *label339 notEqual *tmp416 false                        ...
  839:  setaddr :supplyBase*retaddr *label337                        CoreBuilder.mnd: supplyBase();
  840:  call *label35 *invalid :supplyBase*retval                    ...
        label *label339                                              CoreBuilder.mnd: while !targetMet() do
        label *label334                                              CoreBuilder.mnd: if forBuild then
  841:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
        label *label37                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
  842:  op notEqual *tmp439 .controller null                         CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, controller != null, false);
  843:  set :meetTarget:block :buildBlock:block                      ...
  844:  set :meetTarget:copper :buildBlock:copper                    ...
  845:  set :meetTarget:lead :buildBlock:lead                        ...
  846:  set :meetTarget:graphite :buildBlock:graphite                ...
  847:  set :meetTarget:silicon :buildBlock:silicon                  ...
  848:  set :meetTarget:titanium :buildBlock:titanium                ...
  849:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  850:  set :meetTarget:thorium :buildBlock:thorium                  ...
  851:  set :meetTarget:forBuild *tmp439                             ...
  852:  set :meetTarget:isNoTarget false                             ...
  853:  setaddr :meetTarget*retaddr *label357                        ...
  854:  call *label36 *invalid :meetTarget*retval                    ...
        label *label357                                              ...
  855:  write :buildBlock:block processor5 ":buildBlockAt:block"     CoreBuilder.mnd: var built = blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
  856:  write :buildBlock:x processor5 ":buildBlockAt:x"             ...
  857:  write :buildBlock:y processor5 ":buildBlockAt:y"             ...
  858:  write :buildBlock:rotation processor5 ":buildBlockAt:rotatio ...
  859:  write :buildBlock:config processor5 ":buildBlockAt:config"   ...
  860:  write :buildBlock:index processor5 ":buildBlockAt:index"     ...
  861:  write false processor5 ":buildBlockAt*finished"              ...
  862:  write 1 processor5 "@counter"                                ...
        label *label358                                              ...
  863:  wait 1e-15                                                   ...
  864:  read *tmp446 processor5 ":buildBlockAt*finished"             ...
  865:  jump *label358 equal *tmp446 false                           ...
  866:  read :buildBlock*retval processor5 ":buildBlockAt*retval"    ...
  867:  write false .controller ":buildStop*finished"                CoreBuilder.mnd: async(controller.buildStop());
  868:  write 2 .controller "@counter"                               ...
  869:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
        label *label12                                               Actions.mnd: void status2(text, item, block)
  870:  write :status2:text processor2 ".status2"                    Actions.mnd: display.status2 = text;
  871:  write :status2:item processor2 ".item2"                      Actions.mnd: display.item2 = item;
  872:  write :status2:block processor2 ".block2"                    Actions.mnd: display.block2 = block;
  873:  return :status2*retaddr                                      Actions.mnd: void status2(text, item, block)
        label *label14                                               Actions.mnd: void transportStatus(target, item)
  874:  write :transportStatus:target processor2 ".transportTarget"  Actions.mnd: display.transportTarget = target;
  875:  write :transportStatus:item processor2 ".transportItem"      Actions.mnd: display.transportItem = item;
  876:  return :transportStatus*retaddr                              Actions.mnd: void transportStatus(target, item)
        label *label18                                               Actions.mnd: void moveToEmpty(x, y)
  877:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label363                                              Actions.mnd: do
  878:  sensor *tmp448 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  879:  jump *label366 equal *tmp448 null                            ...
  880:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label366                                              ...
  881:  ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5 0 0      Actions.mnd: approach(x, y, RADIUS - 0.5);
  882:  ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp451 0    Actions.mnd: while !within(x, y, RADIUS);
  883:  jump *label363 equal *tmp451 false                           Actions.mnd: do
  884:  return :moveToEmpty*retaddr                                  Actions.mnd: void moveToEmpty(x, y)
        label *label19                                               Actions.mnd: void dropAll()
        label *label369                                              Actions.mnd: while @unit.@firstItem != null do
  885:  sensor *tmp453 @unit @firstItem                              ...
  886:  jump *label371 equal *tmp453 null                            ...
  887:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  888:  jump *label369 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label371                                              ...
  889:  return :dropAll*retaddr                                      Actions.mnd: void dropAll()
        label *label21                                               Actions.mnd: void depositItems(block, item)
  890:  write "Depositing..." processor2 ".status3"                  Actions.mnd: display.status3 = text;
  891:  sensor *tmp455 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  892:  jump *label374 notEqual *tmp455 :depositItems:item           ...
  893:  sensor *tmp504 :depositItems:block @x                        Actions.mnd: moveTo(block.@x, block.@y, radius);
  894:  sensor *tmp505 :depositItems:block @y                        ...
  895:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label560                                              Actions.mnd: while !within(x, y, radius) do
  896:  ucontrol within *tmp504 *tmp505 6 *tmp510 0                  ...
  897:  jump *label562 notEqual *tmp510 false                        ...
  898:  ucontrol approach *tmp504 *tmp505 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  899:  jump *label560 always 0 0                                    Actions.mnd: while !within(x, y, radius) do
        label *label562                                              ...
  900:  sensor :depositItems:cap :depositItems:block @itemCapacity   Actions.mnd: var cap = block.@itemCapacity;
        label *label377                                              Actions.mnd: do
  901:  ucontrol itemDrop :depositItems:block 30 0 0 0               Actions.mnd: itemDrop(block, capacity);
  902:  sensor *tmp459 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  903:  op mul *tmp460 *tmp459 :depositItems:cap                     ...
  904:  sensor *tmp461 :depositItems:block :depositItems:item        ...
  905:  jump *label377 greaterThan *tmp460 *tmp461                   Actions.mnd: do
  906:  jump *label375 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label374                                              ...
        label *label380                                              Actions.mnd: while @unit.@firstItem != null do
  907:  sensor *tmp463 @unit @firstItem                              ...
  908:  jump *label382 equal *tmp463 null                            ...
  909:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  910:  jump *label380 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label382                                              ...
        label *label375                                              Actions.mnd: if @unit.@firstItem == item then
  911:  set :transportStatus:target 0                                Actions.mnd: transportStatus(0, null);
  912:  set :transportStatus:item null                               ...
  913:  setaddr :transportStatus*retaddr *label383                   ...
  914:  call *label14 *invalid :transportStatus*retval               ...
        label *label383                                              ...
  915:  return :depositItems*retaddr                                 Actions.mnd: void depositItems(block, item)
        label *label23                                               Actions.mnd: void mineOre(ore, amount, block)
  916:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  917:  set :transportStatus:target :mineOre:amount                  Actions.mnd: transportStatus(amount, ore);
  918:  set :transportStatus:item :mineOre:ore                       ...
  919:  setaddr :transportStatus*retaddr *label385                   ...
  920:  call *label14 *invalid :transportStatus*retval               ...
        label *label385                                              ...
  921:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  922:  jump *label554 notEqual *tmp506 false                        ...
  923:  set :error:error "Cannot locate ore"                         Actions.mnd: error("Cannot locate ore");
  924:  setaddr :error*retaddr *label553                             ...
  925:  call *label15 *invalid :error*retval                         ...
        label *label553                                              ...
        label *label554                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  926:  set :mineOre:x :locateOre:x                                  Actions.mnd: locateOre(ore, out x, out y);
  927:  set :mineOre:y :locateOre:y                                  ...
  928:  set :moveToEmpty:x :locateOre:x                              Actions.mnd: moveToEmpty(x, y);
  929:  set :moveToEmpty:y :locateOre:y                              ...
  930:  setaddr :moveToEmpty*retaddr *label387                       ...
  931:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label387                                              ...
  932:  sensor *tmp466 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  933:  jump *label388 equal *tmp466 :mineOre:ore                    ...
  934:  setaddr :dropAll*retaddr *label390                           ...
  935:  call *label19 *invalid :dropAll*retval                       ...
        label *label390                                              ...
        label *label388                                              ...
  936:  write "Mining..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
  937:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label392                                              Actions.mnd: do
  938:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  939:  op notEqual *tmp471 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  940:  op notEqual *tmp472 :mineOre:item :mineOre:ore               ...
  941:  op land *tmp473 *tmp471 *tmp472                              ...
  942:  jump *label394 notEqual *tmp473 false                        ...
  943:  ucontrol mine :mineOre:x :mineOre:y 0 0 0                    Actions.mnd: mine(x, y);
  944:  jump *label394 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  945:  jump *label399 notEqual .noTarget false                      Actions.mnd: if not noTarget then
  946:  sensor *tmp480 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  947:  jump *label402 greaterThanEq *tmp480 copper                  ...
  948:  set *tmp479 false                                            ...
  949:  jump *label401 always 0 0                                    ...
        label *label402                                              ...
  950:  sensor *tmp483 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  951:  jump *label404 greaterThanEq *tmp483 lead                    ...
  952:  set *tmp479 false                                            ...
  953:  jump *label401 always 0 0                                    ...
        label *label404                                              ...
  954:  sensor *tmp486 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  955:  jump *label406 greaterThanEq *tmp486 graphite                ...
  956:  set *tmp479 false                                            ...
  957:  jump *label401 always 0 0                                    ...
        label *label406                                              ...
  958:  sensor *tmp489 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  959:  jump *label408 greaterThanEq *tmp489 silicon                 ...
  960:  set *tmp479 false                                            ...
  961:  jump *label401 always 0 0                                    ...
        label *label408                                              ...
  962:  sensor *tmp492 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  963:  jump *label410 greaterThanEq *tmp492 titanium                ...
  964:  set *tmp479 false                                            ...
  965:  jump *label401 always 0 0                                    ...
        label *label410                                              ...
  966:  sensor *tmp495 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  967:  jump *label412 greaterThanEq *tmp495 metaglass               ...
  968:  set *tmp479 false                                            ...
  969:  jump *label401 always 0 0                                    ...
        label *label412                                              ...
  970:  sensor *tmp498 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  971:  jump *label414 greaterThanEq *tmp498 thorium                 ...
  972:  set *tmp479 false                                            ...
  973:  jump *label401 always 0 0                                    ...
        label *label414                                              ...
  974:  set *tmp479 true                                             CoreBuilder.mnd: return true;
  975:  jump *label401 always 0 0                                    ...
        label *label401                                              Actions.mnd: if targetMet() then
  976:  jump *label394 notEqual *tmp479 false                        ...
        label *label399                                              Actions.mnd: if not noTarget then
  977:  sensor *tmp502 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  978:  jump *label392 lessThan *tmp502 :mineOre:amount              Actions.mnd: do
        label *label394                                              ...
  979:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  980:  set :depositItems:block :mineOre:block                       Actions.mnd: depositItems(block, ore);
  981:  set :depositItems:item :mineOre:ore                          ...
  982:  setaddr :depositItems*retaddr *label418                      ...
  983:  call *label21 *invalid :depositItems*retval                  ...
        label *label418                                              ...
  984:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)


Performance: parsed in 778 ms, compiled in 411 ms, optimized in 3,625 ms, run in 11 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 1: read *tmp32 processor2 "*signature":
Variable 'processor2' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
