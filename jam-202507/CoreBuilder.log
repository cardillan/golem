  1540 instructions before optimizations.
    69 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
   154 instructions eliminated by Dead Code Elimination (10 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    72 instructions eliminated by Jump Optimization (5 iterations).
    52 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions modified by Expression Optimization (3 iterations).
     7 instructions eliminated by If Expression Optimization (4 iterations).
   113 instructions eliminated by Data Flow Optimization (10 passes, 31 iterations).
     1 loops improved by Loop Hoisting.
     4 instructions eliminated by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
    39 instructions eliminated by Function Inlining (11 iterations).
    21 function calls inlined by Function Inlining.
     4 instructions eliminated by Jump Straightening (5 iterations).
    11 instructions updated by Jump Threading.
     7 calls threaded by Jump Threading.
    30 instructions eliminated by Unreachable Code Elimination (2 iterations).
   995 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  * Unroll iteration loop at CoreBuilder.mnd:351:5               size   -19, benefit       39.0, efficiency   Infinity (-13 instructions)
    Unroll iteration loop at CoreBuilder.mnd:173:5               size   -13, benefit     1053.0, efficiency   Infinity
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5725.1, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      390.6, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +261, benefit      312.0, efficiency      1.195
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6787.1, efficiency    452.474
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6787.1, efficiency    150.825
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    17025.8, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:419:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:128:5                size    +0, benefit     2734.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at CoreBuilder.mnd:135:17               size   +31, benefit      390.6, efficiency     12.601
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
    Inline function call at CoreBuilder.mnd:123:5                size    +0, benefit     1367.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
    Inline function call at CoreBuilder.mnd:60:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:68:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:72:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
    Inline function call at CoreBuilder.mnd:80:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:91:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
    Inline function call at CoreBuilder.mnd:94:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
    Inline function call at CoreBuilder.mnd:100:17               size    +0, benefit       42.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
    Inline function call at CoreBuilder.mnd:103:17               size    +0, benefit       21.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
    Inline function call at CoreBuilder.mnd:106:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:109:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:117:9                size    +0, benefit      683.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:308:5                size  +131, benefit       32.0, efficiency      0.244
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3906.3, efficiency    488.281
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3906.3, efficiency    169.837
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      390.6, efficiency     48.828
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      390.6, efficiency     16.984
  ! Inline function call at CoreBuilder.mnd:204:9                size  +161, benefit     2925.0, efficiency     18.168
  ! Inline function call at CoreBuilder.mnd:210:13               size  +161, benefit     1462.5, efficiency      9.084
  ! Inline function call at CoreBuilder.mnd:218:5                size  +131, benefit      264.0, efficiency      2.015
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5938.7, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5938.7, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2490.2, efficiency    311.279
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2179.0, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2490.2, efficiency    108.271
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3817.7, efficiency    545.393
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2969.4, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  * Unroll iteration loop at CoreBuilder.mnd:173:5               size   -13, benefit     1053.0, efficiency   Infinity (-10 instructions)
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5725.1, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      390.6, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +261, benefit      312.0, efficiency      1.195
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6787.1, efficiency    452.474
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6787.1, efficiency    150.825
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    17025.8, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:419:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:128:5                size    +0, benefit     2734.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at CoreBuilder.mnd:135:17               size   +31, benefit      390.6, efficiency     12.601
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
    Inline function call at CoreBuilder.mnd:123:5                size    +0, benefit     1367.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
    Inline function call at CoreBuilder.mnd:60:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:68:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:72:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
    Inline function call at CoreBuilder.mnd:80:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:91:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
    Inline function call at CoreBuilder.mnd:94:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
    Inline function call at CoreBuilder.mnd:100:17               size    +0, benefit       42.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
    Inline function call at CoreBuilder.mnd:103:17               size    +0, benefit       21.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
    Inline function call at CoreBuilder.mnd:106:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:109:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:117:9                size    +0, benefit      683.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:308:5                size  +131, benefit       32.0, efficiency      0.244
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3906.3, efficiency    488.281
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3906.3, efficiency    169.837
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      390.6, efficiency     48.828
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      390.6, efficiency     16.984
  ! Inline function call at CoreBuilder.mnd:204:9                size  +161, benefit     2925.0, efficiency     18.168
  ! Inline function call at CoreBuilder.mnd:210:13               size  +161, benefit     1462.5, efficiency      9.084
  ! Inline function call at CoreBuilder.mnd:218:5                size  +131, benefit      264.0, efficiency      2.015
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5938.7, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5938.7, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2490.2, efficiency    311.279
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2179.0, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2490.2, efficiency    108.271
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3817.7, efficiency    545.393
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2969.4, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5725.1, efficiency   Infinity (-29 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      390.6, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6787.1, efficiency    452.474
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6787.1, efficiency    150.825
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    17025.8, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:419:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:128:5                size    +0, benefit     2734.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at CoreBuilder.mnd:135:17               size   +31, benefit      390.6, efficiency     12.601
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
    Inline function call at CoreBuilder.mnd:123:5                size    +0, benefit     1367.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
    Inline function call at CoreBuilder.mnd:60:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:68:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:72:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
    Inline function call at CoreBuilder.mnd:80:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
    Inline function call at CoreBuilder.mnd:91:17                size    +0, benefit      170.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
    Inline function call at CoreBuilder.mnd:94:17                size    +0, benefit       85.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
    Inline function call at CoreBuilder.mnd:100:17               size    +0, benefit       42.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
    Inline function call at CoreBuilder.mnd:103:17               size    +0, benefit       21.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
    Inline function call at CoreBuilder.mnd:106:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:109:17               size    +0, benefit       10.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
    Inline function call at CoreBuilder.mnd:117:9                size    +0, benefit      683.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3906.3, efficiency    488.281
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3906.3, efficiency    169.837
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      390.6, efficiency     48.828
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      390.6, efficiency     16.984
  ! Inline function call at CoreBuilder.mnd:204:9                size  +161, benefit     2925.0, efficiency     18.168
  ! Inline function call at CoreBuilder.mnd:210:13               size  +161, benefit     1462.5, efficiency      9.084
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5938.7, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5938.7, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2490.2, efficiency    311.279
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2179.0, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2490.2, efficiency    108.271
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3817.7, efficiency    545.393
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2969.4, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      390.6, efficiency   Infinity (-6 instructions)
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6787.1, efficiency    452.474
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6787.1, efficiency    150.825
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    17025.8, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:419:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at CoreBuilder.mnd:135:17               size   +31, benefit      390.6, efficiency     12.601
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3906.3, efficiency    488.281
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3906.3, efficiency    169.837
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      390.6, efficiency     48.828
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      390.6, efficiency     16.984
  ! Inline function call at CoreBuilder.mnd:204:9                size  +135, benefit     2925.0, efficiency     21.667
  ! Inline function call at CoreBuilder.mnd:210:13               size  +135, benefit     1462.5, efficiency     10.833
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5938.7, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5938.7, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2490.2, efficiency    311.279
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2179.0, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2490.2, efficiency    108.271
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3817.7, efficiency    545.393
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2969.4, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6787.1, efficiency    452.474
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6787.1, efficiency    150.825
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    17025.8, efficiency   Infinity (-11 instructions)
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:419:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      390.6, efficiency     48.828
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      390.6, efficiency     16.984
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3906.3, efficiency    488.281
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3906.3, efficiency    169.837
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at CoreBuilder.mnd:204:9                size  +163, benefit     2925.0, efficiency     17.945
  ! Inline function call at CoreBuilder.mnd:210:13               size  +163, benefit     1462.5, efficiency      8.972
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5938.7, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5938.7, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2490.2, efficiency    311.279
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2179.0, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2490.2, efficiency    108.271
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3817.7, efficiency    545.393
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2969.4, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6787.1, efficiency    165.539
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2801.5, efficiency     41.814
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3393.6, efficiency   Infinity (-6 instructions)
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:419:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +21, benefit      390.6, efficiency     18.601
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     2197.3, efficiency     32.313
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +21, benefit     3906.3, efficiency    186.012
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      604.2, efficiency      8.886
  ! Inline function call at CoreBuilder.mnd:204:9                size  +163, benefit     2925.0, efficiency     17.945
  ! Inline function call at CoreBuilder.mnd:210:13               size  +163, benefit     1462.5, efficiency      8.972
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3393.6, efficiency    565.592
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +21, benefit     2490.2, efficiency    118.583
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3817.7, efficiency    763.550
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6787.1, efficiency    144.407
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2801.5, efficiency     41.814
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2801.5, efficiency   Infinity (-5 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:419:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      390.6, efficiency     16.276
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     2197.3, efficiency     32.313
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3906.3, efficiency    162.760
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      604.2, efficiency      8.886
  ! Inline function call at CoreBuilder.mnd:204:9                size  +163, benefit     2925.0, efficiency     17.945
  ! Inline function call at CoreBuilder.mnd:210:13               size  +163, benefit     1462.5, efficiency      8.972
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3817.7, efficiency    763.550
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2801.5, efficiency    700.378
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2490.2, efficiency    103.760
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6787.1, efficiency    144.407
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3817.7, efficiency   Infinity (-8 instructions)
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:419:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      390.6, efficiency     16.276
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3906.3, efficiency    162.760
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at CoreBuilder.mnd:204:9                size  +163, benefit     2925.0, efficiency     17.945
  ! Inline function call at CoreBuilder.mnd:210:13               size  +163, benefit     1462.5, efficiency      8.972
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3817.7, efficiency    763.550
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2490.2, efficiency    103.760

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +23, benefit      116.0, efficiency      5.043
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +241, benefit      312.0, efficiency      1.295
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +27, benefit      313.5, efficiency     11.611
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6787.1, efficiency    144.407
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:419:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +163, benefit       75.0, efficiency      0.460
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      390.6, efficiency     16.276
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +28, benefit      275.5, efficiency      9.839
  ! Inline function call at CoreBuilder.mnd:245:5                size   +24, benefit      112.0, efficiency      4.667
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:308:5                size  +121, benefit       32.0, efficiency      0.264
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3906.3, efficiency    162.760
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at CoreBuilder.mnd:204:9                size  +163, benefit     2925.0, efficiency     17.945
  ! Inline function call at CoreBuilder.mnd:210:13               size  +163, benefit     1462.5, efficiency      8.972
  ! Inline function call at CoreBuilder.mnd:218:5                size  +121, benefit      264.0, efficiency      2.182
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2490.2, efficiency    103.760

Pass 2: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +22, benefit      116.0, efficiency      5.273
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +239, benefit      312.0, efficiency      1.305
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +25, benefit      313.5, efficiency     12.540
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6787.1, efficiency    144.407
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:419:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      390.6, efficiency     16.276
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +26, benefit      275.5, efficiency     10.596
  ! Inline function call at CoreBuilder.mnd:245:5                size   +23, benefit      112.0, efficiency      4.870
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:308:5                size  +120, benefit       32.0, efficiency      0.267
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3906.3, efficiency    162.760
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at CoreBuilder.mnd:204:9                size  +160, benefit     2925.0, efficiency     18.281
  ! Inline function call at CoreBuilder.mnd:210:13               size  +160, benefit     1462.5, efficiency      9.141
  ! Inline function call at CoreBuilder.mnd:218:5                size  +120, benefit      264.0, efficiency      2.200
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2490.2, efficiency    103.760

Pass 3: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:413:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:418:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:436:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:203:5            size   +30, benefit      975.0, efficiency     32.500
  ! Replicate loop condition at CoreBuilder.mnd:209:9            size   +30, benefit      487.5, efficiency     16.250
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    34637.5, efficiency  34637.451
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21209.7, efficiency  21209.717
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1093.0, efficiency   1092.978
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:224:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:234:1 size   +22, benefit      116.0, efficiency      5.273
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:244:1 size   +80, benefit       98.0, efficiency      1.225
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:248:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:307:1 size   +47, benefit       12.0, efficiency      0.255
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:504:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:518:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1709.0, efficiency     32.245
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3906.3, efficiency    122.070
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit     1074.2, efficiency     21.063
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      324.5, efficiency      8.770
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:170:1 size  +239, benefit      312.0, efficiency      1.305
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:217:1 size   +25, benefit      313.5, efficiency     12.540
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8239.7, efficiency   1647.949
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13574.2, efficiency   6787.109
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6787.1, efficiency    617.010
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4156.5, efficiency    831.299
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6787.1, efficiency    144.407
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2801.5, efficiency     40.602
  ! Inline function call at CoreBuilder.mnd:326:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:333:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:255:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:260:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:337:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:395:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:396:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:407:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:410:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:414:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:419:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:284:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:287:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:290:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:437:9                size  +160, benefit       75.0, efficiency      0.469
  ! Inline function call at CoreBuilder.mnd:440:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:442:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:446:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:133:17               size   +13, benefit      390.6, efficiency     30.048
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      390.6, efficiency    390.625
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      439.5, efficiency    219.727
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      390.6, efficiency     65.104
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      293.0, efficiency     97.656
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      390.6, efficiency     16.276
  ! Inline function call at CoreBuilder.mnd:139:5                size   +33, benefit     3125.0, efficiency     94.697
  ! Inline function call at CoreBuilder.mnd:124:5                size    +9, benefit     1367.2, efficiency    151.910
  ! Inline function call at CoreBuilder.mnd:61:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:69:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:73:17                size   +13, benefit       97.7, efficiency      7.512
  ! Inline function call at CoreBuilder.mnd:81:17                size   +13, benefit      195.3, efficiency     15.024
  ! Inline function call at CoreBuilder.mnd:92:17                size    +9, benefit      170.9, efficiency     18.989
  ! Inline function call at CoreBuilder.mnd:98:17                size    +9, benefit       85.4, efficiency      9.494
  ! Inline function call at CoreBuilder.mnd:101:17               size    +9, benefit       42.7, efficiency      4.747
  ! Inline function call at CoreBuilder.mnd:104:17               size    +9, benefit       21.4, efficiency      2.374
  ! Inline function call at CoreBuilder.mnd:107:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:113:17               size    +9, benefit       10.7, efficiency      1.187
  ! Inline function call at CoreBuilder.mnd:118:9                size   +33, benefit      781.3, efficiency     23.674
  ! Inline function call at CoreBuilder.mnd:227:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:228:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:236:5                size   +19, benefit      275.5, efficiency     14.500
  ! Inline function call at CoreBuilder.mnd:237:20               size   +26, benefit      275.5, efficiency     10.596
  ! Inline function call at CoreBuilder.mnd:245:5                size   +23, benefit      112.0, efficiency      4.870
  ! Inline function call at CoreBuilder.mnd:250:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:251:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:308:5                size  +120, benefit       32.0, efficiency      0.267
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     2197.3, efficiency   1098.633
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     2197.3, efficiency     31.390
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3906.3, efficiency   3906.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     4394.5, efficiency   2197.266
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3906.3, efficiency    651.042
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2929.7, efficiency    976.563
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3906.3, efficiency    162.760
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1208.5, efficiency    604.248
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      604.2, efficiency      8.632
  ! Inline function call at CoreBuilder.mnd:204:9                size  +160, benefit     2925.0, efficiency     18.281
  ! Inline function call at CoreBuilder.mnd:210:13               size  +160, benefit     1462.5, efficiency      9.141
  ! Inline function call at CoreBuilder.mnd:218:5                size  +120, benefit      264.0, efficiency      2.200
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6787.1, efficiency   6787.109
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2490.2, efficiency   2490.234
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1089.5, efficiency   1089.478
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2490.2, efficiency    415.039
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      933.8, efficiency    311.279
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2490.2, efficiency    103.760

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-122 instructions):
 
    37 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    38 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
    39 label *label53
-    * set *tmp121 :buildBlockFromCfg.1*retval
    40 set :buildBlockFromCfg.1:cfg "AJTJK-battery1"
    41 setaddr :buildBlockFromCfg.1*retaddr *label54 (h:*label54)
    42 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label54) (h:*label54)
    43 label *label54
-    * set *tmp122 :buildBlockFromCfg.1*retval
    44 set :buildBlockFromCfg.1:cfg "ALTJL-battery2"
    45 setaddr :buildBlockFromCfg.1*retaddr *label55 (h:*label55)
    46 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label55) (h:*label55)
    47 label *label55
-    * set *tmp123 :buildBlockFromCfg.1*retval
    48 set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"
    49 setaddr :buildBlockFromCfg.1*retaddr *label56 (h:*label56)
    50 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label56) (h:*label56)
    51 label *label56
-    * set *tmp124 :buildBlockFromCfg.1*retval
    52 set .powerTarget 400
    53 set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"
    54 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
    55 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
    56 label *label57
-    * set *tmp125 :buildBlockFromCfg.1*retval
    57 set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"
    58 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    59 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    60 label *label58
-    * set *tmp126 :buildBlockFromCfg.1*retval
    61 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    62 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    63 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
 
    89 setaddr :error*retaddr *label64 (h:*label64)
    90 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    91 label *label64
-    * set *tmp141 null
    92 jump *label63 always
    93 label *label62
-    * set *tmp141 null
    94 label *label63
    95 write @pneumatic-drill processor2 ".nextBlock"
    96 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
 
   112 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   113 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
   114 label *label66
-    * set *tmp146 :buildBlockFromCfg.1*retval
   115 set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"
   116 setaddr :buildBlockFromCfg.1*retaddr *label67 (h:*label67)
   117 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label67) (h:*label67)
   118 label *label67
-    * set *tmp147 :buildBlockFromCfg.1*retval
   119 set :buildBlockFromCfg.1:cfg "A~JPJR-overflow-gate8"
   120 setaddr :buildBlockFromCfg.1*retaddr *label68 (h:*label68)
   121 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label68) (h:*label68)
   122 label *label68
-    * set *tmp148 :buildBlockFromCfg.1*retval
   123 set .graphiteSurplus 80
   124 set :buildBlockFromCfg:cfg "AÕFFJS-micro-processor9"
   125 set :buildBlockFromCfg:config processor10
 
   181 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   182 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   183 label *label83
-    * set *tmp152 :buildBlockFromCfg.1*retval
   184 set :buildBlockFromCfg.1:cfg "A©FJJU-unloader11"
   185 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   186 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   187 label *label84
-    * set *tmp153 :buildBlockFromCfg.1*retval
   188 set :buildBlockFromCfg.1:cfg "A~DJJV-overflow-gate12"
   189 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   190 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   191 label *label85
-    * set *tmp154 :buildBlockFromCfg.1*retval
   192 set :buildBlockFromCfg.1:cfg "A¾BFLW-air-factory13"
   193 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   194 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   195 label *label86
-    * set *tmp155 :buildBlockFromCfg.1*retval
   196 set :setFlareTarget:target 1
   197 write :setFlareTarget:target .controller ".flareTarget"
   198 write :setFlareTarget:target processor2 ".flareTarget"
 
   217 op lessThan *tmp157 *tmp156 300
   218 jump *label94 equal *tmp157 false
   219 jump *label92 always
-    * set *tmp158 null
   220 jump *label95 always
   221 label *label94
-    * set *tmp158 null
   222 label *label95
   223 label *label91
   224 read *tmp84 .controller ".monos"
 
   230 setaddr :buildBlockFromCfg.1*retaddr *label96 (h:*label96)
   231 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label96) (h:*label96)
   232 label *label96
-    * set *tmp160 :buildBlockFromCfg.1*retval
   233 set :buildBlockFromCfg.1:cfg "A{NJJY-inverted-sorter15"
   234 setaddr :buildBlockFromCfg.1*retaddr *label97 (h:*label97)
   235 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label97) (h:*label97)
   236 label *label97
-    * set *tmp161 :buildBlockFromCfg.1*retval
   237 set :buildBlockFromCfg.1:cfg "ANOMJZ-kiln16"
   238 setaddr :buildBlockFromCfg.1*retaddr *label98 (h:*label98)
   239 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label98) (h:*label98)
   240 label *label98
-    * set *tmp162 :buildBlockFromCfg.1*retval
   241 set :buildBlockFromCfg.1:cfg "A¡AOJ[-water-extractor17"
   242 setaddr :buildBlockFromCfg.1*retaddr *label99 (h:*label99)
   243 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label99) (h:*label99)
   244 label *label99
-    * set *tmp163 :buildBlockFromCfg.1*retval
   245 set :buildBlockFromCfg.1:cfg "AAKJ\-steam-generator18"
   246 setaddr :buildBlockFromCfg.1*retaddr *label100 (h:*label100)
   247 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label100) (h:*label100)
   248 label *label100
-    * set *tmp164 :buildBlockFromCfg.1*retval
   249 set :buildBlockFromCfg.1:cfg "AKFRJ]-multi-press19"
   250 setaddr :buildBlockFromCfg.1*retaddr *label101 (h:*label101)
   251 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label101) (h:*label101)
   252 label *label101
-    * set *tmp165 :buildBlockFromCfg.1*retval
   253 set :buildBlockFromCfg.1:cfg "A©HFJ^-unloader20"
   254 setaddr :buildBlockFromCfg.1*retaddr *label102 (h:*label102)
   255 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label102) (h:*label102)
   256 label *label102
-    * set *tmp166 :buildBlockFromCfg.1*retval
   257 set :buildBlockFromCfg.1:cfg "A{HDJ_-inverted-sorter21"
   258 setaddr :buildBlockFromCfg.1*retaddr *label103 (h:*label103)
   259 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label103) (h:*label103)
   260 label *label103
-    * set *tmp167 :buildBlockFromCfg.1*retval
   261 set :buildBlockFromCfg.1:cfg "AÀF@L`-additive-reconstructor22"
   262 setaddr :buildBlockFromCfg.1*retaddr *label104 (h:*label104)
   263 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label104) (h:*label104)
   264 label *label104
-    * set *tmp168 :buildBlockFromCfg.1*retval
   265 setaddr :buildUnits*retaddr *label105 (h:*label105)
   266 call *label42 *invalid :buildUnits*retval (m:*label105) (h:*label105)
   267 label *label105
 
   280 setaddr :buildBlockFromCfg.1*retaddr *label108 (h:*label108)
   281 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label108) (h:*label108)
   282 label *label108
-    * set *tmp169 :buildBlockFromCfg.1*retval
   283 set :buildBlockFromCfg.1:cfg "A{PJJb-inverted-sorter24"
   284 setaddr :buildBlockFromCfg.1*retaddr *label109 (h:*label109)
   285 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label109) (h:*label109)
   286 label *label109
-    * set *tmp170 :buildBlockFromCfg.1*retval
   287 set :buildBlockFromCfg.1:cfg "A{PHJc-inverted-sorter25"
   288 setaddr :buildBlockFromCfg.1*retaddr *label110 (h:*label110)
   289 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label110) (h:*label110)
   290 label *label110
-    * set *tmp171 :buildBlockFromCfg.1*retval
   291 setaddr :buildUnits*retaddr *label111 (h:*label111)
   292 call *label42 *invalid :buildUnits*retval (m:*label111) (h:*label111)
   293 label *label111
 
   373 setaddr :error*retaddr *label130 (h:*label130)
   374 call *label15 *invalid :error*retval (m:*label130) (h:*label130)
   375 label *label130
-    * set *tmp196 null
   376 jump *label129 always
   377 label *label128
-    * set *tmp196 null
   378 label *label129
   379 write @laser-drill processor5 ":buildBlockAt:block"
   380 read *tmp55 processor3 ".drillX"
 
   400 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   401 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   402 label *label132
-    * set *tmp205 :buildRemoteBlock*retval
   403 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
   404 read *tmp61 processor3 ".water2X"
   405 set :buildRemoteBlock:x *tmp61
 
   408 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   409 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   410 label *label133
-    * set *tmp206 :buildRemoteBlock*retval
   411 set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"
   412 read *tmp63 processor3 ".generatorX"
   413 set :buildRemoteBlock:x *tmp63
 
   426 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   427 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   428 label *label135
-    * set *tmp208 :buildRemoteBlock*retval
   429 set :buildRemoteBlock:cfg "AFHJT-power-node10"
   430 read *tmp67 processor3 ".node2X"
   431 set :buildRemoteBlock:x *tmp67
 
   434 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   435 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   436 label *label136
-    * set *tmp209 :buildRemoteBlock*retval
   437 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
   438 read *tmp69 processor3 ".panelX"
   439 set :buildRemoteBlock:x *tmp69
 
   442 setaddr :buildRemoteBlock*retaddr *label137 (h:*label137)
   443 call *label38 *invalid :buildRemoteBlock*retval (m:*label137) (h:*label137)
   444 label *label137
-    * set *tmp210 :buildRemoteBlock*retval
   445 set :buildRemoteBlock:cfg "AJTJK-battery1"
   446 read *tmp71 processor3 ".batteryX"
   447 set :buildRemoteBlock:x *tmp71
 
   465 op equal *tmp213 .thoriumContainer null
   466 jump *label140 equal *tmp213 false
   467 set .thoriumContainer .thoriumDrill
-    * set *tmp214 .thoriumContainer
   468 jump *label141 always
   469 label *label140
-    * set *tmp214 null
   470 label *label141
   471 write .thoriumDrill processor2 ".thoriumDrill"
   472 write .thoriumContainer processor2 ".thoriumContainer"
 
   493 setaddr :buildBlockFromCfg.1*retaddr *label147 (h:*label147)
   494 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label147) (h:*label147)
   495 label *label147
-    * set *tmp218 :buildBlockFromCfg.1*retval
   496 set :buildBlockFromCfg.1:cfg "A{JDJe-inverted-sorter27"
   497 setaddr :buildBlockFromCfg.1*retaddr *label148 (h:*label148)
   498 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label148) (h:*label148)
   499 label *label148
-    * set *tmp219 :buildBlockFromCfg.1*retval
   500 set :buildBlockFromCfg.1:cfg "AÁPBJf-multiplicative-reconstructor28"
   501 setaddr :buildBlockFromCfg.1*retaddr *label149 (h:*label149)
   502 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label149) (h:*label149)
   503 label *label149
-    * set *tmp220 :buildBlockFromCfg.1*retval
   504 set .metaglassSurplus 10
   505 set :setMegaTarget:target 1
   506 write :setMegaTarget:target .controller ".megaTarget"
 
   626 label *label175
   627 set *tmp244 null
   628 label *label176
-    * set *tmp241 *tmp244
   629 jump *label174 always
   630 label *label173
-    * set *tmp241 null
   631 label *label174
   632 set :fetchBlock:block .thoriumContainer
   633 set :fetchBlock:item @thorium
 
   635 call *label25 *invalid :fetchBlock*retval (m:*label181) (h:*label181)
   636 label *label181
   637 label *label171
-    * set *tmp238 null
   638 jump *label170 always
   639 label *label169
   640 read *tmp84 .controller ".monos"
 
   676 label *label192
   677 set *tmp257 null
   678 label *label193
-    * set *tmp254 *tmp257
   679 jump *label191 always
   680 label *label190
-    * set *tmp254 null
   681 label *label191
   682 sensor *tmp258 .core @silicon
   683 op lessThan *tmp259 *tmp258 silicon
 
   718 label *label203
   719 set *tmp263 *tmp266
   720 label *label199
-    * set *tmp260 *tmp263
   721 jump *label197 always
   722 label *label196
-    * set *tmp260 null
   723 label *label197
   724 sensor *tmp267 AJTJK-battery1 @totalPower
   725 op lessThan *tmp268 *tmp267 .powerTarget
 
   747 label *label206
   748 set *tmp269 null
   749 label *label207
-    * set *tmp251 *tmp269
   750 jump *label189 always
   751 label *label188
-    * set *tmp251 null
   752 label *label189
   753 sensor *tmp273 .core @titanium
   754 op lessThan *tmp274 *tmp273 titanium
 
   885 label *label216
   886 set *tmp283 null
   887 label *label217
-    * set *tmp281 *tmp283
   888 jump *label215 always
   889 label *label214
   890 set :status1:text "Goal 11: Fetching titanium"
 
   896 setaddr :fetchBlock*retaddr *label245 (h:*label245)
   897 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   898 label *label245
-    * set *tmp281 null
   899 label *label215
   900 label *label187
   901 set *tmp249 null
   902 label *label183
-    * set *tmp238 *tmp249
   903 label *label170
   904 label *label168
   905 return :supplyBase*retaddr
 
   940 label *label250
   941 set :buildRemoteBlock*retval :buildBlock*retval
   942 jump *label246 always
-    * set *tmp310 null
   943 jump *label248 always
   944 label *label247
-    * set *tmp310 null
   945 label *label248
   946 set :buildRemoteBlock*retval false
   947 jump *label246 always
 
  1088 sensor *tmp318 @unit @mining
  1089 jump *label272 equal *tmp318 false
  1090 ucontrol stop
-    * set *tmp319 null
  1091 jump *label273 always
  1092 label *label272
-    * set *tmp319 null
  1093 label *label273
  1094 ubind :lineUpUnits:unit
  1095 label *label270
 
  1154 op land *tmp329 *tmp327 *tmp328
  1155 jump *label286 equal *tmp329 false
  1156 ucontrol itemDrop @air 1000
-    * set *tmp330 null
  1157 jump *label287 always
  1158 label *label286
-    * set *tmp330 null
  1159 label *label287
  1160 label *label284
  1161 sensor *tmp331 @unit :fetchBlock:item
 
  1192 setaddr :mineOre*retaddr *label293 (h:*label293)
  1193 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
  1194 label *label293
-    * set *tmp339 null
  1195 jump *label292 always
  1196 label *label291
-    * set *tmp339 null
  1197 label *label292
  1198 label *label289
  1199 return :supplyBlock*retaddr
 
  1229 op land *tmp345 *tmp343 *tmp344
  1230 jump *label302 equal *tmp345 false
  1231 ucontrol itemDrop @air 1000
-    * set *tmp346 null
  1232 jump *label303 always
  1233 label *label302
-    * set *tmp346 null
  1234 label *label303
  1235 label *label300
  1236 sensor *tmp347 @unit :supplyBlockFromCore:item
 
  1292 sensor *tmp375 :unpackCfg:type @thorium
  1293 set :unpackCfg:th *tmp375
  1294 sensor *tmp376 :unpackCfg:type @size
-    * set :unpackCfg:size *tmp376
  1295 label *label305
  1296 return :unpackCfg*retaddr
  1297 end
 
  1372 jump *label321 equal *tmp392 false
  1373 set *tmp390 false
  1374 jump *label320 always
-    * set *tmp393 null
  1375 jump *label322 always
  1376 label *label321
-    * set *tmp393 null
  1377 label *label322
  1378 sensor *tmp394 .core @lead
  1379 op lessThan *tmp395 *tmp394 lead
  1380 jump *label323 equal *tmp395 false
  1381 set *tmp390 false
  1382 jump *label320 always
-    * set *tmp396 null
  1383 jump *label324 always
  1384 label *label323
-    * set *tmp396 null
  1385 label *label324
  1386 sensor *tmp397 .core @graphite
  1387 op lessThan *tmp398 *tmp397 graphite
  1388 jump *label325 equal *tmp398 false
  1389 set *tmp390 false
  1390 jump *label320 always
-    * set *tmp399 null
  1391 jump *label326 always
  1392 label *label325
-    * set *tmp399 null
  1393 label *label326
  1394 sensor *tmp400 .core @silicon
  1395 op lessThan *tmp401 *tmp400 silicon
  1396 jump *label327 equal *tmp401 false
  1397 set *tmp390 false
  1398 jump *label320 always
-    * set *tmp402 null
  1399 jump *label328 always
  1400 label *label327
-    * set *tmp402 null
  1401 label *label328
  1402 sensor *tmp403 .core @titanium
  1403 op lessThan *tmp404 *tmp403 titanium
  1404 jump *label329 equal *tmp404 false
  1405 set *tmp390 false
  1406 jump *label320 always
-    * set *tmp405 null
  1407 jump *label330 always
  1408 label *label329
-    * set *tmp405 null
  1409 label *label330
  1410 sensor *tmp406 .core @metaglass
  1411 op lessThan *tmp407 *tmp406 metaglass
  1412 jump *label331 equal *tmp407 false
  1413 set *tmp390 false
  1414 jump *label320 always
-    * set *tmp408 null
  1415 jump *label332 always
  1416 label *label331
-    * set *tmp408 null
  1417 label *label332
  1418 sensor *tmp409 .core @thorium
  1419 op lessThan *tmp410 *tmp409 thorium
  1420 jump *label333 equal *tmp410 false
  1421 set *tmp390 false
  1422 jump *label320 always
-    * set *tmp411 null
  1423 jump *label334 always
  1424 label *label333
-    * set *tmp411 null
  1425 label *label334
  1426 set *tmp390 true
  1427 jump *label320 always
 
  1448 jump *label343 equal *tmp417 false
  1449 set *tmp415 false
  1450 jump *label342 always
-    * set *tmp418 null
  1451 jump *label344 always
  1452 label *label343
-    * set *tmp418 null
  1453 label *label344
  1454 sensor *tmp419 .core @lead
  1455 op lessThan *tmp420 *tmp419 lead
  1456 jump *label345 equal *tmp420 false
  1457 set *tmp415 false
  1458 jump *label342 always
-    * set *tmp421 null
  1459 jump *label346 always
  1460 label *label345
-    * set *tmp421 null
  1461 label *label346
  1462 sensor *tmp422 .core @graphite
  1463 op lessThan *tmp423 *tmp422 graphite
  1464 jump *label347 equal *tmp423 false
  1465 set *tmp415 false
  1466 jump *label342 always
-    * set *tmp424 null
  1467 jump *label348 always
  1468 label *label347
-    * set *tmp424 null
  1469 label *label348
  1470 sensor *tmp425 .core @silicon
  1471 op lessThan *tmp426 *tmp425 silicon
  1472 jump *label349 equal *tmp426 false
  1473 set *tmp415 false
  1474 jump *label342 always
-    * set *tmp427 null
  1475 jump *label350 always
  1476 label *label349
-    * set *tmp427 null
  1477 label *label350
  1478 sensor *tmp428 .core @titanium
  1479 op lessThan *tmp429 *tmp428 titanium
  1480 jump *label351 equal *tmp429 false
  1481 set *tmp415 false
  1482 jump *label342 always
-    * set *tmp430 null
  1483 jump *label352 always
  1484 label *label351
-    * set *tmp430 null
  1485 label *label352
  1486 sensor *tmp431 .core @metaglass
  1487 op lessThan *tmp432 *tmp431 metaglass
  1488 jump *label353 equal *tmp432 false
  1489 set *tmp415 false
  1490 jump *label342 always
-    * set *tmp433 null
  1491 jump *label354 always
  1492 label *label353
-    * set *tmp433 null
  1493 label *label354
  1494 sensor *tmp434 .core @thorium
  1495 op lessThan *tmp435 *tmp434 thorium
  1496 jump *label355 equal *tmp435 false
  1497 set *tmp415 false
  1498 jump *label342 always
-    * set *tmp436 null
  1499 jump *label356 always
  1500 label *label355
-    * set *tmp436 null
  1501 label *label356
  1502 set *tmp415 true
  1503 jump *label342 always
 
  1511 label *label340
  1512 jump *label339 always
  1513 label *label341
-    * set *tmp413 null
  1514 jump *label337 always
  1515 label *label336
-    * set *tmp413 null
  1516 label *label337
  1517 label *label306
  1518 return :meetTarget*retaddr
 
  1577 op notEqual *tmp448 *tmp447 null
  1578 jump *label368 equal *tmp448 false
  1579 ucontrol itemDrop @air 1000
-    * set *tmp449 null
  1580 jump *label369 always
  1581 label *label368
-    * set *tmp449 null
  1582 label *label369
  1583 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1584 label *label366
 
  1625 op greaterThan *tmp461 *tmp459 *tmp460
  1626 jump *label379 notEqual *tmp461 false
  1627 label *label381
-    * set *tmp456 null
  1628 jump *label377 always
  1629 label *label376
  1630 label *label382
 
  1635 label *label383
  1636 jump *label382 always
  1637 label *label384
-    * set *tmp456 null
  1638 label *label377
  1639 set :transportStatus:target 0
  1640 set :transportStatus:item null
 
  1669 setaddr :dropAll*retaddr *label392 (h:*label392)
  1670 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1671 label *label392
-    * set *tmp467 null
  1672 jump *label391 always
  1673 label *label390
-    * set *tmp467 null
  1674 label *label391
  1675 set :status3:text "Mining..."
  1676 setaddr :status3*retaddr *label393 (h:*label393)
 
  1686 op land *tmp472 *tmp470 *tmp471
  1687 jump *label397 equal *tmp472 false
  1688 jump *label396 always
-    * set *tmp473 null
  1689 jump *label398 always
  1690 label *label397
-    * set *tmp473 null
  1691 label *label398
  1692 ucontrol mine :mineOre:x :mineOre:y
  1693 op greaterThan *tmp474 @second :mineOre:stop
  1694 jump *label399 equal *tmp474 false
  1695 jump *label396 always
-    * set *tmp475 null
  1696 jump *label400 always
  1697 label *label399
-    * set *tmp475 null
  1698 label *label400
  1699 op equal *tmp476 .noTarget false
  1700 jump *label401 equal *tmp476 false
 
  1703 jump *label404 equal *tmp480 false
  1704 set *tmp478 false
  1705 jump *label403 always
-    * set *tmp481 null
  1706 jump *label405 always
  1707 label *label404
-    * set *tmp481 null
  1708 label *label405
  1709 sensor *tmp482 .core @lead
  1710 op lessThan *tmp483 *tmp482 lead
  1711 jump *label406 equal *tmp483 false
  1712 set *tmp478 false
  1713 jump *label403 always
-    * set *tmp484 null
  1714 jump *label407 always
  1715 label *label406
-    * set *tmp484 null
  1716 label *label407
  1717 sensor *tmp485 .core @graphite
  1718 op lessThan *tmp486 *tmp485 graphite
  1719 jump *label408 equal *tmp486 false
  1720 set *tmp478 false
  1721 jump *label403 always
-    * set *tmp487 null
  1722 jump *label409 always
  1723 label *label408
-    * set *tmp487 null
  1724 label *label409
  1725 sensor *tmp488 .core @silicon
  1726 op lessThan *tmp489 *tmp488 silicon
  1727 jump *label410 equal *tmp489 false
  1728 set *tmp478 false
  1729 jump *label403 always
-    * set *tmp490 null
  1730 jump *label411 always
  1731 label *label410
-    * set *tmp490 null
  1732 label *label411
  1733 sensor *tmp491 .core @titanium
  1734 op lessThan *tmp492 *tmp491 titanium
  1735 jump *label412 equal *tmp492 false
  1736 set *tmp478 false
  1737 jump *label403 always
-    * set *tmp493 null
  1738 jump *label413 always
  1739 label *label412
-    * set *tmp493 null
  1740 label *label413
  1741 sensor *tmp494 .core @metaglass
  1742 op lessThan *tmp495 *tmp494 metaglass
  1743 jump *label414 equal *tmp495 false
  1744 set *tmp478 false
  1745 jump *label403 always
-    * set *tmp496 null
  1746 jump *label415 always
  1747 label *label414
-    * set *tmp496 null
  1748 label *label415
  1749 sensor *tmp497 .core @thorium
  1750 op lessThan *tmp498 *tmp497 thorium
  1751 jump *label416 equal *tmp498 false
  1752 set *tmp478 false
  1753 jump *label403 always
-    * set *tmp499 null
  1754 jump *label417 always
  1755 label *label416
-    * set *tmp499 null
  1756 label *label417
  1757 set *tmp478 true
  1758 jump *label403 always
 
  1765 label *label418
  1766 set *tmp500 null
  1767 label *label419
-    * set *tmp477 *tmp500
  1768 jump *label402 always
  1769 label *label401
-    * set *tmp477 null
  1770 label *label402
  1771 label *label395
  1772 sensor *tmp501 @unit @totalItems
 
  1807 setaddr :error*retaddr *label427 (h:*label427)
  1808 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
  1809 label *label427
-    * set *tmp508 null
  1810 jump *label426 always
  1811 label *label425
-    * set *tmp508 null
  1812 label *label426
  1813 label *label424
  1814 return :locateOre*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-16 instructions):
 
   621 label *label180
   622 set *tmp247 null
   623 label *label178
-    * set *tmp244 *tmp247
   624 jump *label176 always
   625 label *label175
-    * set *tmp244 null
   626 label *label176
   627 jump *label174 always
   628 label *label173
 
   647 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   648 label *label186
   649 label *label184
-    * set *tmp249 null
   650 jump *label183 always
   651 label *label182
   652 set :supplyBase0:supplied false
 
   668 call *label26 *invalid :supplyBlock*retval (m:*label195) (h:*label195)
   669 label *label195
   670 set :supplyBase0:supplied true
-    * set *tmp257 :supplyBase0:supplied
   671 jump *label193 always
   672 label *label192
-    * set *tmp257 null
   673 label *label193
   674 jump *label191 always
   675 label *label190
 
   690 call *label26 *invalid :supplyBlock*retval (m:*label201) (h:*label201)
   691 label *label201
   692 set :supplyBase0:supplied true
-    * set *tmp263 :supplyBase0:supplied
   693 jump *label199 always
   694 label *label198
   695 sensor *tmp264 ALMQJN-silicon-smelter4 @sand
 
   710 label *label202
   711 set *tmp266 null
   712 label *label203
-    * set *tmp263 *tmp266
   713 label *label199
   714 jump *label197 always
   715 label *label196
 
   735 label *label208
   736 set *tmp272 null
   737 label *label209
-    * set *tmp269 *tmp272
   738 jump *label207 always
   739 label *label206
-    * set *tmp269 null
   740 label *label207
   741 jump *label189 always
   742 label *label188
 
   871 label *label223
   872 set *tmp287 *tmp290
   873 label *label219
-    * set *tmp283 *tmp287
   874 jump *label217 always
   875 label *label216
-    * set *tmp283 null
   876 label *label217
   877 jump *label215 always
   878 label *label214
 
   887 label *label245
   888 label *label215
   889 label *label187
-    * set *tmp249 null
   890 label *label183
   891 label *label170
   892 label *label168
 
   989 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   990 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   991 label *label255
-    * set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
   992 label *label254
   993 return :buildBlockFromCfg.1*retaddr
   994 end
 
  1278 set :unpackCfg:mg *tmp374
  1279 sensor *tmp375 :unpackCfg:type @thorium
  1280 set :unpackCfg:th *tmp375
-    * sensor *tmp376 :unpackCfg:type @size
  1281 label *label305
  1282 return :unpackCfg*retaddr
  1283 end
 
  1746 label *label403
  1747 jump *label418 equal *tmp478 false
  1748 jump *label396 always
-    * set *tmp500 null
  1749 jump *label419 always
  1750 label *label418
-    * set *tmp500 null
  1751 label *label419
  1752 jump *label402 always
  1753 label *label401

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-8 instructions):
 
   611 setaddr :supplyBlock*retaddr *label179 (h:*label179)
   612 call *label26 *invalid :supplyBlock*retval (m:*label179) (h:*label179)
   613 label *label179
-    * set *tmp247 null
   614 jump *label178 always
   615 label *label177
   616 set :supplyBlockFromCore:target .thoriumGenerator
 
   618 setaddr :supplyBlockFromCore*retaddr *label180 (h:*label180)
   619 call *label27 *invalid :supplyBlockFromCore*retval (m:*label180) (h:*label180)
   620 label *label180
-    * set *tmp247 null
   621 label *label178
   622 jump *label176 always
   623 label *label175
 
   703 call *label26 *invalid :supplyBlock*retval (m:*label205) (h:*label205)
   704 label *label205
   705 set :supplyBase0:supplied true
-    * set *tmp266 :supplyBase0:supplied
   706 jump *label203 always
   707 label *label202
-    * set *tmp266 null
   708 label *label203
   709 label *label199
   710 jump *label197 always
 
   726 call *label26 *invalid :supplyBlock*retval (m:*label211) (h:*label211)
   727 label *label211
   728 set :supplyBase0:supplied true
-    * set *tmp272 :supplyBase0:supplied
   729 jump *label209 always
   730 label *label208
-    * set *tmp272 null
   731 label *label209
   732 jump *label207 always
   733 label *label206
 
   764 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   765 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
   766 label *label221
-    * set *tmp287 null
   767 jump *label219 always
   768 label *label218
   769 sensor *tmp288 .core @silicon
 
   862 label *label229
   863 set *tmp290 *tmp297
   864 label *label223
-    * set *tmp287 *tmp290
   865 label *label219
   866 jump *label217 always
   867 label *label216

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   789 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   790 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   791 label *label227
-    * set *tmp290 null
   792 jump *label223 always
   793 label *label222
   794 sensor *tmp295 .core @copper
 
   859 label *label233
   860 set *tmp297 *tmp300
   861 label *label229
-    * set *tmp290 *tmp297
   862 label *label223
   863 label *label219
   864 jump *label217 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
   802 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   803 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
   804 label *label231
-    * set *tmp297 null
   805 jump *label229 always
   806 label *label228
   807 sensor *tmp298 .core @lead
 
   856 label *label237
   857 set *tmp300 *tmp303
   858 label *label233
-    * set *tmp297 *tmp300
   859 label *label229
   860 label *label223
   861 label *label219

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
   815 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   816 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
   817 label *label235
-    * set *tmp300 null
   818 jump *label233 always
   819 label *label232
   820 sensor *tmp301 .core @metaglass
 
   853 label *label243
   854 set *tmp303 null
   855 label *label237
-    * set *tmp300 *tmp303
   856 label *label233
   857 label *label229
   858 label *label223

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
   828 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   829 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   830 label *label239
-    * set *tmp303 null
   831 jump *label237 always
   832 label *label236
   833 set :status1:text "Goal 10: supplying base"
 
   850 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   851 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   852 label *label243
-    * set *tmp303 null
   853 label *label237
   854 label *label233
   855 label *label229

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-69 instructions):
 
    25 write 511 bank1 511
    26 label *label50
    27 ubind @poly
-    * set *tmp117 @unit
-    * set .builder *tmp117
-    * ulocate building core false @copper .coreX .coreY *tmp119 *tmp118
-    * set .core *tmp118
+   28 set .builder @unit
+   29 ulocate building core false @copper .coreX .coreY *tmp119 .core
    30 label *label51
    31 op equal *tmp120 .core null
    32 jump *label50 notEqual *tmp120 false
 
    75 wait 1e-15
    76 read *tmp138 processor3 ":findDrillLocation*finished"
    77 jump *label61 equal *tmp138 false
-    * read *tmp135 processor3 ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp135
-    * read *tmp136 processor3 ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp136
-    * read *tmp139 processor3 ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp139
+   78 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
+   79 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
+   80 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
    81 op equal *tmp140 :buildFirstTitaniumDrill:result false
    82 jump *label62 equal *tmp140 false
    83 set :error:error "Cannot locate spot for titanium drill"
 
    96 wait 1e-15
    97 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    98 jump *label65 equal *tmp144 false
-    * read *tmp145 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp127 *tmp145
+   99 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
   100 jump *label59 always
   101 set *tmp127 null
   102 label *label59
 
   120 setaddr :buildBlockFromCfg*retaddr *label69 (h:*label69)
   121 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   122 label *label69
-    * set *tmp149 :buildBlockFromCfg*retval
-    * set .controller *tmp149
+  123 set .controller :buildBlockFromCfg*retval
   124 write processor1 .controller ".timer"
   125 write processor2 .controller ".display"
   126 write .core .controller ".core"
 
   314 label *label120
   315 write @ore-titanium processor2 ".nextBlock"
   316 ubind @flare
-    * read *tmp53 processor3 ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp53
+  317 read :blocksBuildTitaniumDrills:current processor3 ".locations"
   318 write .coreX processor3 ":findDrillLocation:x"
   319 write .coreY processor3 ":findDrillLocation:y"
   320 write @unit processor3 ":findDrillLocation:unit"
 
   357 wait 1e-15
   358 read *tmp193 processor3 ":layoutThoriumDrill*finished"
   359 jump *label127 equal *tmp193 false
-    * read *tmp194 processor3 ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp194
+  360 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
   361 op equal *tmp195 :buildThoriumDrill:result false
   362 jump *label128 equal *tmp195 false
   363 set :error:error "Cannot locate spot for thorium drill"
 
   381 wait 1e-15
   382 read *tmp203 processor5 ":buildBlockAt*finished"
   383 jump *label131 equal *tmp203 false
-    * read *tmp204 processor5 ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp204
+  384 read .thoriumDrill processor5 ":buildBlockAt*retval"
   385 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
-    * read *tmp57 processor3 ".water1X"
-    * set :buildRemoteBlock:x *tmp57
-    * read *tmp58 processor3 ".water1Y"
-    * set :buildRemoteBlock:y *tmp58
+  386 read :buildRemoteBlock:x processor3 ".water1X"
+  387 read :buildRemoteBlock:y processor3 ".water1Y"
   388 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   389 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   390 label *label132
   391 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
-    * read *tmp61 processor3 ".water2X"
-    * set :buildRemoteBlock:x *tmp61
-    * read *tmp62 processor3 ".water2Y"
-    * set :buildRemoteBlock:y *tmp62
+  392 read :buildRemoteBlock:x processor3 ".water2X"
+  393 read :buildRemoteBlock:y processor3 ".water2Y"
   394 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   395 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   396 label *label133
   397 set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"
-    * read *tmp63 processor3 ".generatorX"
-    * set :buildRemoteBlock:x *tmp63
-    * read *tmp64 processor3 ".generatorY"
-    * set :buildRemoteBlock:y *tmp64
+  398 read :buildRemoteBlock:x processor3 ".generatorX"
+  399 read :buildRemoteBlock:y processor3 ".generatorY"
   400 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   401 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   402 label *label134
-    * set *tmp207 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp207
+  403 set .thoriumGenerator :buildRemoteBlock*retval
   404 set :buildRemoteBlock:cfg "AFHJT-power-node10"
-    * read *tmp65 processor3 ".node1X"
-    * set :buildRemoteBlock:x *tmp65
-    * read *tmp66 processor3 ".node1Y"
-    * set :buildRemoteBlock:y *tmp66
+  405 read :buildRemoteBlock:x processor3 ".node1X"
+  406 read :buildRemoteBlock:y processor3 ".node1Y"
   407 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   408 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   409 label *label135
   410 set :buildRemoteBlock:cfg "AFHJT-power-node10"
-    * read *tmp67 processor3 ".node2X"
-    * set :buildRemoteBlock:x *tmp67
-    * read *tmp68 processor3 ".node2Y"
-    * set :buildRemoteBlock:y *tmp68
+  411 read :buildRemoteBlock:x processor3 ".node2X"
+  412 read :buildRemoteBlock:y processor3 ".node2Y"
   413 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   414 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   415 label *label136
   416 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
-    * read *tmp69 processor3 ".panelX"
-    * set :buildRemoteBlock:x *tmp69
-    * read *tmp70 processor3 ".panelY"
-    * set :buildRemoteBlock:y *tmp70
+  417 read :buildRemoteBlock:x processor3 ".panelX"
+  418 read :buildRemoteBlock:y processor3 ".panelY"
   419 setaddr :buildRemoteBlock*retaddr *label137 (h:*label137)
   420 call *label38 *invalid :buildRemoteBlock*retval (m:*label137) (h:*label137)
   421 label *label137
   422 set :buildRemoteBlock:cfg "AJTJK-battery1"
-    * read *tmp71 processor3 ".batteryX"
-    * set :buildRemoteBlock:x *tmp71
-    * read *tmp72 processor3 ".batteryY"
-    * set :buildRemoteBlock:y *tmp72
+  423 read :buildRemoteBlock:x processor3 ".batteryX"
+  424 read :buildRemoteBlock:y processor3 ".batteryY"
   425 setaddr :buildRemoteBlock*retaddr *label138 (h:*label138)
   426 call *label38 *invalid :buildRemoteBlock*retval (m:*label138) (h:*label138)
   427 label *label138
-    * set *tmp211 :buildRemoteBlock*retval
-    * set .thoriumBattery *tmp211
+  428 set .thoriumBattery :buildRemoteBlock*retval
   429 set :buildRemoteBlock:cfg "A¨JJJ~-container52"
-    * read *tmp59 processor3 ".containerX"
-    * set :buildRemoteBlock:x *tmp59
-    * read *tmp60 processor3 ".containerY"
-    * set :buildRemoteBlock:y *tmp60
+  430 read :buildRemoteBlock:x processor3 ".containerX"
+  431 read :buildRemoteBlock:y processor3 ".containerY"
   432 setaddr :buildRemoteBlock*retaddr *label139 (h:*label139)
   433 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   434 label *label139
-    * set *tmp212 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp212
+  435 set .thoriumContainer :buildRemoteBlock*retval
   436 op equal *tmp213 .thoriumContainer null
   437 jump *label140 equal *tmp213 false
   438 set .thoriumContainer .thoriumDrill
 
   481 call *label42 *invalid :buildUnits*retval (m:*label151) (h:*label151)
   482 label *label151
   483 read *tmp85 .controller ".polys"
-    * op sub *tmp221 *tmp85 1
-    * set :tmp *tmp221
+  484 op sub :tmp *tmp85 1
   485 write :tmp .controller ".polyTarget"
   486 write :tmp .controller ".polys"
   487 write :tmp processor2 ".polys"
-    * sensor *tmp222 AÁPBJf-multiplicative-reconstructor28 @x
-    * set :x *tmp222
-    * sensor *tmp223 AÁPBJf-multiplicative-reconstructor28 @y
-    * set :y *tmp223
+  488 sensor :x AÁPBJf-multiplicative-reconstructor28 @x
+  489 sensor :y AÁPBJf-multiplicative-reconstructor28 @y
   490 label *label152
   491 ucontrol move :x :y
   492 ucontrol payEnter
 
   520 label *label159
   521 label *label160
   522 jump *label162 equal true false
-    * op sub *tmp231 @thisy 6
-    * set :lineUpUnits:y *tmp231
+  523 op sub :lineUpUnits:y @thisy 6
   524 set :lineUpUnits:unit @mega
   525 setaddr :lineUpUnits*retaddr *label163 (h:*label163)
   526 call *label44 *invalid :lineUpUnits*retval (m:*label163) (h:*label163)
   527 label *label163
-    * op sub *tmp232 @thisy 10
-    * set :lineUpUnits:y *tmp232
+  528 op sub :lineUpUnits:y @thisy 10
   529 set :lineUpUnits:unit @poly
   530 setaddr :lineUpUnits*retaddr *label164 (h:*label164)
   531 call *label44 *invalid :lineUpUnits*retval (m:*label164) (h:*label164)
   532 label *label164
-    * op sub *tmp233 @thisy 14
-    * set :lineUpUnits:y *tmp233
+  533 op sub :lineUpUnits:y @thisy 14
   534 set :lineUpUnits:unit @mono
   535 setaddr :lineUpUnits*retaddr *label165 (h:*label165)
   536 call *label44 *invalid :lineUpUnits*retval (m:*label165) (h:*label165)
   537 label *label165
-    * op sub *tmp234 @thisy 18
-    * set :lineUpUnits:y *tmp234
+  538 op sub :lineUpUnits:y @thisy 18
   539 set :lineUpUnits:unit @flare
   540 setaddr :lineUpUnits*retaddr *label166 (h:*label166)
   541 call *label44 *invalid :lineUpUnits*retval (m:*label166) (h:*label166)
 
   704 jump *label212 equal *tmp274 false
   705 sensor *tmp276 .core @titanium
   706 op sub *tmp277 titanium *tmp276
-    * op min *tmp278 7 *tmp277
-    * set *tmp275 *tmp278
+  707 op min *tmp275 7 *tmp277
   708 jump *label213 always
   709 label *label212
   710 set *tmp275 100
 
   736 setaddr :status1*retaddr *label224 (h:*label224)
   737 call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
   738 label *label224
-    * sensor *tmp291 .core @coal
-    * set :supplyBase0:coal *tmp291
-    * sensor *tmp292 .core @sand
-    * set :supplyBase0:sand *tmp292
+  739 sensor :supplyBase0:coal .core @coal
+  740 sensor :supplyBase0:sand .core @sand
   741 op lessThan *tmp293 :supplyBase0:coal :supplyBase0:sand
   742 jump *label225 equal *tmp293 false
   743 set *tmp294 @coal
 
   795 setaddr :status1*retaddr *label240 (h:*label240)
   796 call *label11 *invalid :status1*retval (m:*label240) (h:*label240)
   797 label *label240
-    * sensor *tmp304 .core @coal
-    * set :supplyBase0:coal.1 *tmp304
-    * sensor *tmp305 .core @sand
-    * set :supplyBase0:sand.1 *tmp305
+  798 sensor :supplyBase0:coal.1 .core @coal
+  799 sensor :supplyBase0:sand.1 .core @sand
   800 op lessThanEq *tmp306 :supplyBase0:coal.1 :supplyBase0:sand.1
   801 jump *label241 equal *tmp306 false
   802 set *tmp307 @coal
 
   926 return :buildBlockFromCfg*retaddr
   927 end
   928 label *label40
-    * set *tmp313 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp313
+  929 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   930 set :buildBlockFromCfg:config null
   931 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   932 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
 
   988 label *label43
   989 label *label262
   990 ubind :flagUnits:unit
-    * set *tmp314 @unit
-    * set :flagUnits:firstUnit *tmp314
+  991 set :flagUnits:firstUnit @unit
   992 label *label263
   993 op equal *tmp315 :flagUnits:firstUnit null
   994 jump *label262 notEqual *tmp315 false
 
  1009 ubind :lineUpUnits:unit
  1010 set :lineUpUnits:firstUnit @unit
  1011 label *label269
-    * sensor *tmp317 @unit @flag
-    * set :lineUpUnits:x *tmp317
+ 1012 sensor :lineUpUnits:x @unit @flag
  1013 ucontrol itemDrop @air 1000
  1014 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1015 sensor *tmp318 @unit @mining
 
  1038 setaddr :status2*retaddr *label276 (h:*label276)
  1039 call *label12 *invalid :status2*retval (m:*label276) (h:*label276)
  1040 label *label276
-    * set *tmp321 :mineOre.1:ore
-    * set :mineOre:ore *tmp321
+ 1041 set :mineOre:ore :mineOre.1:ore
  1042 set :mineOre:amount 30
  1043 set :mineOre:block .core
  1044 setaddr :mineOre*retaddr *label277 (h:*label277)
 
  1049 end
  1050 label *label25
  1051 sensor *tmp322 :fetchBlock:block @itemCapacity
-    * op min *tmp323 *tmp322 30
-    * set :transportStatus:target *tmp323
+ 1052 op min :transportStatus:target *tmp322 30
  1053 set :transportStatus:item :fetchBlock:item
  1054 setaddr :transportStatus*retaddr *label279 (h:*label279)
  1055 call *label14 *invalid :transportStatus*retval (m:*label279) (h:*label279)
 
  1072 label *label282
  1073 label *label283
  1074 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp326 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp326
+ 1075 sensor :fetchBlock:unitItem @unit @firstItem
  1076 op notEqual *tmp327 :fetchBlock:unitItem null
  1077 op notEqual *tmp328 :fetchBlock:unitItem :fetchBlock:item
  1078 op land *tmp329 *tmp327 *tmp328
 
  1103 setaddr :status2*retaddr *label290 (h:*label290)
  1104 call *label12 *invalid :status2*retval (m:*label290) (h:*label290)
  1105 label *label290
-    * sensor *tmp335 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp335
+ 1106 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1107 sensor *tmp336 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp337 :supplyBlock:blockCapacity *tmp336
-    * set :supplyBlock:missing *tmp337
+ 1108 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp336
  1109 op greaterThan *tmp338 :supplyBlock:missing 0
  1110 jump *label291 equal *tmp338 false
  1111 set :mineOre:ore :supplyBlock:ore
 
  1122 end
  1123 label *label27
  1124 sensor *tmp340 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp341 *tmp340 30
-    * set :transportStatus:target *tmp341
+ 1125 op min :transportStatus:target *tmp340 30
  1126 set :transportStatus:item :supplyBlockFromCore:item
  1127 setaddr :transportStatus*retaddr *label295 (h:*label295)
  1128 call *label14 *invalid :transportStatus*retval (m:*label295) (h:*label295)
 
  1143 label *label298
  1144 label *label299
  1145 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp342 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp342
+ 1146 sensor :supplyBlockFromCore:unitItem @unit @firstItem
  1147 op notEqual *tmp343 :supplyBlockFromCore:unitItem null
  1148 op notEqual *tmp344 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
  1149 op land *tmp345 *tmp343 *tmp344
 
  1173 op add :unpackCfg:index :unpackCfg:index 1
  1174 read *tmp352 :unpackCfg:cfg *tmp351
  1175 op sub *tmp353 *tmp352 74
-    * lookup block *tmp354 *tmp353
-    * set :unpackCfg:type *tmp354
+ 1176 lookup block :unpackCfg:type *tmp353
  1177 set *tmp355 :unpackCfg:index
  1178 op add :unpackCfg:index :unpackCfg:index 1
  1179 read *tmp356 :unpackCfg:cfg *tmp355
  1180 op sub *tmp357 *tmp356 74
-    * op div *tmp358 *tmp357 2
-    * set :unpackCfg:x *tmp358
+ 1181 op div :unpackCfg:x *tmp357 2
  1182 set *tmp359 :unpackCfg:index
  1183 op add :unpackCfg:index :unpackCfg:index 1
  1184 read *tmp360 :unpackCfg:cfg *tmp359
  1185 op sub *tmp361 *tmp360 74
-    * op div *tmp362 *tmp361 2
-    * set :unpackCfg:y *tmp362
+ 1186 op div :unpackCfg:y *tmp361 2
  1187 set *tmp363 :unpackCfg:index
  1188 op add :unpackCfg:index :unpackCfg:index 1
  1189 read *tmp364 :unpackCfg:cfg *tmp363
-    * op sub *tmp365 *tmp364 74
-    * set :unpackCfg:rotation *tmp365
+ 1190 op sub :unpackCfg:rotation *tmp364 74
  1191 set *tmp366 :unpackCfg:index
  1192 op add :unpackCfg:index :unpackCfg:index 1
  1193 read *tmp367 :unpackCfg:cfg *tmp366
-    * op sub *tmp368 *tmp367 74
-    * set :unpackCfg:ind *tmp368
-    * sensor *tmp369 :unpackCfg:type @copper
-    * set :unpackCfg:cu *tmp369
-    * sensor *tmp370 :unpackCfg:type @lead
-    * set :unpackCfg:pb *tmp370
-    * sensor *tmp371 :unpackCfg:type @graphite
-    * set :unpackCfg:gr *tmp371
-    * sensor *tmp372 :unpackCfg:type @silicon
-    * set :unpackCfg:si *tmp372
-    * sensor *tmp373 :unpackCfg:type @titanium
-    * set :unpackCfg:ti *tmp373
-    * sensor *tmp374 :unpackCfg:type @metaglass
-    * set :unpackCfg:mg *tmp374
-    * sensor *tmp375 :unpackCfg:type @thorium
-    * set :unpackCfg:th *tmp375
+ 1194 op sub :unpackCfg:ind *tmp367 74
+ 1195 sensor :unpackCfg:cu :unpackCfg:type @copper
+ 1196 sensor :unpackCfg:pb :unpackCfg:type @lead
+ 1197 sensor :unpackCfg:gr :unpackCfg:type @graphite
+ 1198 sensor :unpackCfg:si :unpackCfg:type @silicon
+ 1199 sensor :unpackCfg:ti :unpackCfg:type @titanium
+ 1200 sensor :unpackCfg:mg :unpackCfg:type @metaglass
+ 1201 sensor :unpackCfg:th :unpackCfg:type @thorium
  1202 label *label305
  1203 return :unpackCfg*retaddr
  1204 end
 
  1247 write :meetTarget:metaglass processor2 ".targetMetaglass"
  1248 write :meetTarget:thorium processor2 ".targetThorium"
  1249 set copper :meetTarget:copper
-    * op add *tmp379 :meetTarget:lead .leadSurplus
-    * set lead *tmp379
+ 1250 op add lead :meetTarget:lead .leadSurplus
  1251 set graphite :meetTarget:graphite
  1252 set silicon :meetTarget:silicon
  1253 set titanium :meetTarget:titanium
 
  1450 wait 1e-15
  1451 read *tmp445 processor5 ":buildBlockAt*finished"
  1452 jump *label360 equal *tmp445 false
-    * read *tmp446 processor5 ":buildBlockAt*retval"
-    * set :buildBlock:built *tmp446
+ 1453 read :buildBlock:built processor5 ":buildBlockAt*retval"
  1454 write false .controller ":buildStop*finished"
  1455 write 2 .controller "@counter"
  1456 set :buildBlock*retval :buildBlock:built
 
  1519 setaddr :moveToBlock*retaddr *label378 (h:*label378)
  1520 call *label20 *invalid :moveToBlock*retval (m:*label378) (h:*label378)
  1521 label *label378
-    * sensor *tmp457 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp457
+ 1522 sensor :depositItems:cap :depositItems:block @itemCapacity
  1523 label *label379
  1524 ucontrol itemDrop :depositItems:block 30
  1525 label *label380
 
  1549 return :depositItems*retaddr
  1550 end
  1551 label *label23
-    * op min *tmp464 :mineOre:amount 30
-    * set :mineOre:amount *tmp464
+ 1552 op min :mineOre:amount :mineOre:amount 30
  1553 set :transportStatus:target :mineOre:amount
  1554 set :transportStatus:item :mineOre:ore
  1555 setaddr :transportStatus*retaddr *label387 (h:*label387)
 
  1579 setaddr :status3*retaddr *label393 (h:*label393)
  1580 call *label13 *invalid :status3*retval (m:*label393) (h:*label393)
  1581 label *label393
-    * op add *tmp468 @second 10
-    * set :mineOre:stop *tmp468
+ 1582 op add :mineOre:stop @second 10
  1583 label *label394
-    * sensor *tmp469 @unit @firstItem
-    * set :mineOre:item *tmp469
+ 1584 sensor :mineOre:item @unit @firstItem
  1585 op notEqual *tmp470 :mineOre:item null
  1586 op notEqual *tmp471 :mineOre:item :mineOre:ore
  1587 op land *tmp472 *tmp470 *tmp471

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   519 call *label43 *invalid :flagUnits*retval (m:*label159) (h:*label159)
   520 label *label159
   521 label *label160
-    * jump *label162 equal true false
   522 op sub :lineUpUnits:y @thisy 6
   523 set :lineUpUnits:unit @mega
   524 setaddr :lineUpUnits*retaddr *label163 (h:*label163)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-72 instructions):
 
    28 set .builder @unit
    29 ulocate building core false @copper .coreX .coreY *tmp119 .core
    30 label *label51
-    * op equal *tmp120 .core null
-    * jump *label50 notEqual *tmp120 false
+   31 jump *label50 equal .core null
    32 label *label52
    33 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    34 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
    77 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
    78 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
    79 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
-    * op equal *tmp140 :buildFirstTitaniumDrill:result false
-    * jump *label62 equal *tmp140 false
+   80 jump *label62 notEqual :buildFirstTitaniumDrill:result false
    81 set :error:error "Cannot locate spot for titanium drill"
    82 setaddr :error*retaddr *label64 (h:*label64)
    83 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
 
   205 call *label35 *invalid :supplyBase*retval (m:*label93) (h:*label93)
   206 label *label93
   207 sensor *tmp156 AJTJK-battery1 @totalPower
-    * op lessThan *tmp157 *tmp156 300
-    * jump *label94 equal *tmp157 false
+  208 jump *label94 greaterThanEq *tmp156 300
   209 jump *label92 always
   210 jump *label95 always
   211 label *label94
   212 label *label95
   213 label *label91
   214 read *tmp84 .controller ".monos"
-    * op lessThan *tmp159 *tmp84 3
-    * jump *label90 notEqual *tmp159 false
+  215 jump *label90 lessThan *tmp84 3
   216 label *label92
   217 set .siliconSurplus 65
   218 set :buildBlockFromCfg.1:cfg "A©NHJX-unloader14"
 
   286 label *label112
   287 label *label113
   288 read *tmp85 .controller ".polys"
-    * op lessThan *tmp172 *tmp85 3
-    * jump *label115 equal *tmp172 false
+  289 jump *label115 greaterThanEq *tmp85 3
   290 setaddr :supplyBase*retaddr *label116 (h:*label116)
   291 call *label35 *invalid :supplyBase*retval (m:*label116) (h:*label116)
   292 label *label116
 
   299 label *label117
   300 label *label118
   301 read *tmp83 .controller ".flares"
-    * op lessThan *tmp173 *tmp83 2
-    * jump *label120 equal *tmp173 false
+  302 jump *label120 greaterThanEq *tmp83 2
   303 setaddr :supplyBase*retaddr *label121 (h:*label121)
   304 call *label35 *invalid :supplyBase*retval (m:*label121) (h:*label121)
   305 label *label121
 
   352 read *tmp193 processor3 ":layoutThoriumDrill*finished"
   353 jump *label127 equal *tmp193 false
   354 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
-    * op equal *tmp195 :buildThoriumDrill:result false
-    * jump *label128 equal *tmp195 false
+  355 jump *label128 notEqual :buildThoriumDrill:result false
   356 set :error:error "Cannot locate spot for thorium drill"
   357 setaddr :error*retaddr *label130 (h:*label130)
   358 call *label15 *invalid :error*retval (m:*label130) (h:*label130)
 
   426 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   427 label *label139
   428 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp213 .thoriumContainer null
-    * jump *label140 equal *tmp213 false
+  429 jump *label140 notEqual .thoriumContainer null
   430 set .thoriumContainer .thoriumDrill
   431 jump *label141 always
   432 label *label140
 
   444 write null processor2 ".nextBlock"
   445 label *label143
   446 read *tmp85 .controller ".polys"
-    * op lessThan *tmp217 *tmp85 3
-    * jump *label145 equal *tmp217 false
+  447 jump *label145 greaterThanEq *tmp85 3
   448 setaddr :supplyBase*retaddr *label146 (h:*label146)
   449 call *label35 *invalid :supplyBase*retval (m:*label146) (h:*label146)
   450 label *label146
 
   483 ucontrol payEnter
   484 label *label153
   485 read *tmp86 .controller ".megas"
-    * op equal *tmp224 *tmp86 false
-    * jump *label152 notEqual *tmp224 false
+  486 jump *label152 equal *tmp86 false
   487 label *label154
   488 write true .controller ".finished"
   489 control enabled processor8 false
 
   551 call *label11 *invalid :status1*retval (m:*label172) (h:*label172)
   552 label *label172
   553 sensor *tmp239 .thoriumBattery @totalPower
-    * op lessThan *tmp240 *tmp239 2000
-    * jump *label173 equal *tmp240 false
+  554 jump *label173 greaterThanEq *tmp239 2000
   555 sensor *tmp242 .thoriumGenerator @coal
-    * op equal *tmp243 *tmp242 0
-    * jump *label175 equal *tmp243 false
+  556 jump *label175 notEqual *tmp242 0
   557 sensor *tmp245 .core @coal
-    * op lessThan *tmp246 *tmp245 50
-    * jump *label177 equal *tmp246 false
+  558 jump *label177 greaterThanEq *tmp245 50
   559 set :supplyBlock:block .thoriumGenerator
   560 set :supplyBlock:ore @coal
   561 setaddr :supplyBlock*retaddr *label179 (h:*label179)
 
   584 jump *label170 always
   585 label *label169
   586 read *tmp84 .controller ".monos"
-    * op greaterThan *tmp248 *tmp84 3
-    * jump *label182 equal *tmp248 false
+  587 jump *label182 lessThanEq *tmp84 3
   588 set :status1:text "Phase 1: supplying base"
   589 setaddr :status1*retaddr *label185 (h:*label185)
   590 call *label11 *invalid :status1*retval (m:*label185) (h:*label185)
 
   597 jump *label183 always
   598 label *label182
   599 set :supplyBase0:supplied false
-    * op equal *tmp250 A©JNJP-unloader6 null
-    * jump *label188 equal *tmp250 false
+  600 jump *label188 notEqual A©JNJP-unloader6 null
   601 sensor *tmp252 .core @graphite
-    * op lessThan *tmp253 *tmp252 graphite
-    * jump *label190 equal *tmp253 false
+  602 jump *label190 greaterThanEq *tmp252 graphite
   603 sensor *tmp255 AJEMJJ-graphite-press0 @coal
-    * op lessThan *tmp256 *tmp255 5
-    * jump *label192 equal *tmp256 false
+  604 jump *label192 greaterThanEq *tmp255 5
   605 set :status1:text "Goal 1: graphite requirement"
   606 setaddr :status1*retaddr *label194 (h:*label194)
   607 call *label11 *invalid :status1*retval (m:*label194) (h:*label194)
 
   619 label *label190
   620 label *label191
   621 sensor *tmp258 .core @silicon
-    * op lessThan *tmp259 *tmp258 silicon
-    * jump *label196 equal *tmp259 false
+  622 jump *label196 greaterThanEq *tmp258 silicon
   623 sensor *tmp261 ALMQJN-silicon-smelter4 @coal
-    * op lessThan *tmp262 *tmp261 5
-    * jump *label198 equal *tmp262 false
+  624 jump *label198 greaterThanEq *tmp261 5
   625 set :status1:text "Goal 2: coal for silicon requirement"
   626 setaddr :status1*retaddr *label200 (h:*label200)
   627 call *label11 *invalid :status1*retval (m:*label200) (h:*label200)
 
   635 jump *label199 always
   636 label *label198
   637 sensor *tmp264 ALMQJN-silicon-smelter4 @sand
-    * op lessThan *tmp265 *tmp264 5
-    * jump *label202 equal *tmp265 false
+  638 jump *label202 greaterThanEq *tmp264 5
   639 set :status1:text "Goal 3: sand for silicon requirement"
   640 setaddr :status1*retaddr *label204 (h:*label204)
   641 call *label11 *invalid :status1*retval (m:*label204) (h:*label204)
 
   654 label *label196
   655 label *label197
   656 sensor *tmp267 AJTJK-battery1 @totalPower
-    * op lessThan *tmp268 *tmp267 .powerTarget
-    * jump *label206 equal *tmp268 false
+  657 jump *label206 greaterThanEq *tmp267 .powerTarget
   658 sensor *tmp270 AJRJM-combustion-generator3 @coal
-    * op lessThan *tmp271 *tmp270 2
-    * jump *label208 equal *tmp271 false
+  659 jump *label208 greaterThanEq *tmp270 2
   660 set :status1:text "Goal 4: supplying generator"
   661 setaddr :status1*retaddr *label210 (h:*label210)
   662 call *label11 *invalid :status1*retval (m:*label210) (h:*label210)
 
   677 label *label188
   678 label *label189
   679 sensor *tmp273 .core @titanium
-    * op lessThan *tmp274 *tmp273 titanium
-    * jump *label212 equal *tmp274 false
+  680 jump *label212 greaterThanEq *tmp273 titanium
   681 sensor *tmp276 .core @titanium
   682 op sub *tmp277 titanium *tmp276
   683 op min *tmp275 7 *tmp277
 
   687 label *label213
   688 set :supplyBase0:titaniumTrigger *tmp275
   689 sensor *tmp279 .titaniumDrill @titanium
-    * op lessThan *tmp280 *tmp279 :supplyBase0:titaniumTrigger
-    * jump *label214 equal *tmp280 false
-    * op equal *tmp282 :supplyBase0:supplied false
-    * jump *label216 equal *tmp282 false
+  690 jump *label214 greaterThanEq *tmp279 :supplyBase0:titaniumTrigger
+  691 jump *label216 notEqual :supplyBase0:supplied false
   692 sensor *tmp284 AJTJK-battery1 @totalPower
   693 op mul *tmp285 A©JNJP-unloader6 .powerTarget
-    * op lessThan *tmp286 *tmp284 *tmp285
-    * jump *label218 equal *tmp286 false
+  694 jump *label218 greaterThanEq *tmp284 *tmp285
   695 set :status1:text "Goal 5: supplying generator"
   696 setaddr :status1*retaddr *label220 (h:*label220)
   697 call *label11 *invalid :status1*retval (m:*label220) (h:*label220)
 
   703 jump *label219 always
   704 label *label218
   705 sensor *tmp288 .core @silicon
-    * op lessThan *tmp289 *tmp288 silicon
-    * jump *label222 equal *tmp289 false
+  706 jump *label222 greaterThanEq *tmp288 silicon
   707 set :status1:text "Goal 6: silicon requirement"
   708 setaddr :status1*retaddr *label224 (h:*label224)
   709 call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
   710 label *label224
   711 sensor :supplyBase0:coal .core @coal
   712 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp293 :supplyBase0:coal :supplyBase0:sand
-    * jump *label225 equal *tmp293 false
+  713 jump *label225 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   714 set *tmp294 @coal
   715 jump *label226 always
   716 label *label225
 
   724 jump *label223 always
   725 label *label222
   726 sensor *tmp295 .core @copper
-    * op lessThan *tmp296 *tmp295 copper
-    * jump *label228 equal *tmp296 false
+  727 jump *label228 greaterThanEq *tmp295 copper
   728 set :status1:text "Goal 7: copper requirement"
   729 setaddr :status1*retaddr *label230 (h:*label230)
   730 call *label11 *invalid :status1*retval (m:*label230) (h:*label230)
 
   736 jump *label229 always
   737 label *label228
   738 sensor *tmp298 .core @lead
-    * op lessThan *tmp299 *tmp298 lead
-    * jump *label232 equal *tmp299 false
+  739 jump *label232 greaterThanEq *tmp298 lead
   740 set :status1:text "Goal 8: lead requirement"
   741 setaddr :status1*retaddr *label234 (h:*label234)
   742 call *label11 *invalid :status1*retval (m:*label234) (h:*label234)
 
   748 jump *label233 always
   749 label *label232
   750 sensor *tmp301 .core @metaglass
-    * op lessThan *tmp302 *tmp301 metaglass
-    * jump *label236 equal *tmp302 false
+  751 jump *label236 greaterThanEq *tmp301 metaglass
   752 set :status1:text "Goal 9: metaglass requirement"
   753 setaddr :status1*retaddr *label238 (h:*label238)
   754 call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
 
   765 label *label240
   766 sensor :supplyBase0:coal.1 .core @coal
   767 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp306 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label241 equal *tmp306 false
+  768 jump *label241 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
   769 set *tmp307 @coal
   770 jump *label242 always
   771 label *label241
 
   804 end
   805 label *label38
   806 op add *tmp308 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp309 *tmp308 0
-    * jump *label247 equal *tmp309 false
+  807 jump *label247 lessThanEq *tmp308 0
   808 set :unpackCfg:cfg :buildRemoteBlock:cfg
   809 setaddr :unpackCfg*retaddr *label249 (h:*label249)
   810 call *label29 *invalid :unpackCfg*retval (m:*label249) (h:*label249)
 
   956 ubind :flagUnits:unit
   957 set :flagUnits:firstUnit @unit
   958 label *label263
-    * op equal *tmp315 :flagUnits:firstUnit null
-    * jump *label262 notEqual *tmp315 false
+  959 jump *label262 equal :flagUnits:firstUnit null
   960 label *label264
   961 set :flagUnits:x @thisx
   962 label *label265
 
   964 op add :flagUnits:x :flagUnits:x 4
   965 ubind :flagUnits:unit
   966 label *label266
-    * op notEqual *tmp316 @unit :flagUnits:firstUnit
-    * jump *label265 notEqual *tmp316 false
+  967 jump *label265 notEqual @unit :flagUnits:firstUnit
   968 label *label267
   969 label *label261
   970 return :flagUnits*retaddr
 
   984 label *label273
   985 ubind :lineUpUnits:unit
   986 label *label270
-    * op notEqual *tmp320 @unit :lineUpUnits:firstUnit
-    * jump *label269 notEqual *tmp320 false
+  987 jump *label269 notEqual @unit :lineUpUnits:firstUnit
   988 label *label271
   989 label *label268
   990 return :lineUpUnits*retaddr
 
  1069 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1070 sensor *tmp336 :supplyBlock:block :supplyBlock:ore
  1071 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp336
-    * op greaterThan *tmp338 :supplyBlock:missing 0
-    * jump *label291 equal *tmp338 false
+ 1072 jump *label291 lessThanEq :supplyBlock:missing 0
  1073 set :mineOre:ore :supplyBlock:ore
  1074 set :mineOre:amount :supplyBlock:blockCapacity
  1075 set :mineOre:block :supplyBlock:block
 
  1236 write copper processor7 ".copperTarget"
  1237 label *label317
  1238 sensor *tmp391 .core @copper
-    * op lessThan *tmp392 *tmp391 copper
-    * jump *label321 equal *tmp392 false
+ 1239 jump *label321 greaterThanEq *tmp391 copper
  1240 set *tmp390 false
  1241 jump *label320 always
  1242 jump *label322 always
  1243 label *label321
  1244 label *label322
  1245 sensor *tmp394 .core @lead
-    * op lessThan *tmp395 *tmp394 lead
-    * jump *label323 equal *tmp395 false
+ 1246 jump *label323 greaterThanEq *tmp394 lead
  1247 set *tmp390 false
  1248 jump *label320 always
  1249 jump *label324 always
  1250 label *label323
  1251 label *label324
  1252 sensor *tmp397 .core @graphite
-    * op lessThan *tmp398 *tmp397 graphite
-    * jump *label325 equal *tmp398 false
+ 1253 jump *label325 greaterThanEq *tmp397 graphite
  1254 set *tmp390 false
  1255 jump *label320 always
  1256 jump *label326 always
  1257 label *label325
  1258 label *label326
  1259 sensor *tmp400 .core @silicon
-    * op lessThan *tmp401 *tmp400 silicon
-    * jump *label327 equal *tmp401 false
+ 1260 jump *label327 greaterThanEq *tmp400 silicon
  1261 set *tmp390 false
  1262 jump *label320 always
  1263 jump *label328 always
  1264 label *label327
  1265 label *label328
  1266 sensor *tmp403 .core @titanium
-    * op lessThan *tmp404 *tmp403 titanium
-    * jump *label329 equal *tmp404 false
+ 1267 jump *label329 greaterThanEq *tmp403 titanium
  1268 set *tmp390 false
  1269 jump *label320 always
  1270 jump *label330 always
  1271 label *label329
  1272 label *label330
  1273 sensor *tmp406 .core @metaglass
-    * op lessThan *tmp407 *tmp406 metaglass
-    * jump *label331 equal *tmp407 false
+ 1274 jump *label331 greaterThanEq *tmp406 metaglass
  1275 set *tmp390 false
  1276 jump *label320 always
  1277 jump *label332 always
  1278 label *label331
  1279 label *label332
  1280 sensor *tmp409 .core @thorium
-    * op lessThan *tmp410 *tmp409 thorium
-    * jump *label333 equal *tmp410 false
+ 1281 jump *label333 greaterThanEq *tmp409 thorium
  1282 set *tmp390 false
  1283 jump *label320 always
  1284 jump *label334 always
 
  1288 jump *label320 always
  1289 set *tmp390 null
  1290 label *label320
-    * op equal *tmp412 *tmp390 false
-    * jump *label319 equal *tmp412 false
+ 1291 jump *label319 notEqual *tmp390 false
  1292 setaddr :supplyBase*retaddr *label335 (h:*label335)
  1293 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1294 label *label335
 
  1304 jump *label338 equal *tmp414 false
  1305 label *label339
  1306 sensor *tmp416 .core @copper
-    * op lessThan *tmp417 *tmp416 copper
-    * jump *label343 equal *tmp417 false
+ 1307 jump *label343 greaterThanEq *tmp416 copper
  1308 set *tmp415 false
  1309 jump *label342 always
  1310 jump *label344 always
  1311 label *label343
  1312 label *label344
  1313 sensor *tmp419 .core @lead
-    * op lessThan *tmp420 *tmp419 lead
-    * jump *label345 equal *tmp420 false
+ 1314 jump *label345 greaterThanEq *tmp419 lead
  1315 set *tmp415 false
  1316 jump *label342 always
  1317 jump *label346 always
  1318 label *label345
  1319 label *label346
  1320 sensor *tmp422 .core @graphite
-    * op lessThan *tmp423 *tmp422 graphite
-    * jump *label347 equal *tmp423 false
+ 1321 jump *label347 greaterThanEq *tmp422 graphite
  1322 set *tmp415 false
  1323 jump *label342 always
  1324 jump *label348 always
  1325 label *label347
  1326 label *label348
  1327 sensor *tmp425 .core @silicon
-    * op lessThan *tmp426 *tmp425 silicon
-    * jump *label349 equal *tmp426 false
+ 1328 jump *label349 greaterThanEq *tmp425 silicon
  1329 set *tmp415 false
  1330 jump *label342 always
  1331 jump *label350 always
  1332 label *label349
  1333 label *label350
  1334 sensor *tmp428 .core @titanium
-    * op lessThan *tmp429 *tmp428 titanium
-    * jump *label351 equal *tmp429 false
+ 1335 jump *label351 greaterThanEq *tmp428 titanium
  1336 set *tmp415 false
  1337 jump *label342 always
  1338 jump *label352 always
  1339 label *label351
  1340 label *label352
  1341 sensor *tmp431 .core @metaglass
-    * op lessThan *tmp432 *tmp431 metaglass
-    * jump *label353 equal *tmp432 false
+ 1342 jump *label353 greaterThanEq *tmp431 metaglass
  1343 set *tmp415 false
  1344 jump *label342 always
  1345 jump *label354 always
  1346 label *label353
  1347 label *label354
  1348 sensor *tmp434 .core @thorium
-    * op lessThan *tmp435 *tmp434 thorium
-    * jump *label355 equal *tmp435 false
+ 1349 jump *label355 greaterThanEq *tmp434 thorium
  1350 set *tmp415 false
  1351 jump *label342 always
  1352 jump *label356 always
 
  1356 jump *label342 always
  1357 set *tmp415 null
  1358 label *label342
-    * op equal *tmp437 *tmp415 false
-    * jump *label341 equal *tmp437 false
+ 1359 jump *label341 notEqual *tmp415 false
  1360 setaddr :supplyBase*retaddr *label357 (h:*label357)
  1361 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1362 label *label357
 
  1425 label *label364
  1426 label *label365
  1427 sensor *tmp447 @unit @firstItem
-    * op notEqual *tmp448 *tmp447 null
-    * jump *label368 equal *tmp448 false
+ 1428 jump *label368 equal *tmp447 null
  1429 ucontrol itemDrop @air 1000
  1430 jump *label369 always
  1431 label *label368
 
  1433 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1434 label *label366
  1435 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp450
-    * op equal *tmp451 *tmp450 false
-    * jump *label365 notEqual *tmp451 false
+ 1436 jump *label365 equal *tmp450 false
  1437 label *label367
  1438 label *label363
  1439 return :moveToEmpty*retaddr
 
  1441 label *label19
  1442 label *label371
  1443 sensor *tmp452 @unit @firstItem
-    * op notEqual *tmp453 *tmp452 null
-    * jump *label373 equal *tmp453 false
+ 1444 jump *label373 equal *tmp452 null
  1445 ucontrol itemDrop @air 1000
  1446 label *label372
  1447 jump *label371 always
 
  1455 call *label13 *invalid :status3*retval (m:*label375) (h:*label375)
  1456 label *label375
  1457 sensor *tmp454 @unit @firstItem
-    * op equal *tmp455 *tmp454 :depositItems:item
-    * jump *label376 equal *tmp455 false
+ 1458 jump *label376 notEqual *tmp454 :depositItems:item
  1459 set :moveToBlock:block :depositItems:block
  1460 set :moveToBlock:radius 6
  1461 setaddr :moveToBlock*retaddr *label378 (h:*label378)
 
  1468 sensor *tmp458 @unit @firstItem
  1469 op mul *tmp459 *tmp458 :depositItems:cap
  1470 sensor *tmp460 :depositItems:block :depositItems:item
-    * op greaterThan *tmp461 *tmp459 *tmp460
-    * jump *label379 notEqual *tmp461 false
+ 1471 jump *label379 greaterThan *tmp459 *tmp460
  1472 label *label381
  1473 jump *label377 always
  1474 label *label376
  1475 label *label382
  1476 sensor *tmp462 @unit @firstItem
-    * op notEqual *tmp463 *tmp462 null
-    * jump *label384 equal *tmp463 false
+ 1477 jump *label384 equal *tmp462 null
  1478 ucontrol itemDrop @air 1000
  1479 label *label383
  1480 jump *label382 always
 
  1507 call *label18 *invalid :moveToEmpty*retval (m:*label389) (h:*label389)
  1508 label *label389
  1509 sensor *tmp465 @unit @firstItem
-    * op notEqual *tmp466 *tmp465 :mineOre:ore
-    * jump *label390 equal *tmp466 false
+ 1510 jump *label390 equal *tmp465 :mineOre:ore
  1511 setaddr :dropAll*retaddr *label392 (h:*label392)
  1512 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1513 label *label392
 
  1530 label *label397
  1531 label *label398
  1532 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp474 @second :mineOre:stop
-    * jump *label399 equal *tmp474 false
+ 1533 jump *label399 lessThanEq @second :mineOre:stop
  1534 jump *label396 always
  1535 jump *label400 always
  1536 label *label399
  1537 label *label400
-    * op equal *tmp476 .noTarget false
-    * jump *label401 equal *tmp476 false
+ 1538 jump *label401 notEqual .noTarget false
  1539 sensor *tmp479 .core @copper
-    * op lessThan *tmp480 *tmp479 copper
-    * jump *label404 equal *tmp480 false
+ 1540 jump *label404 greaterThanEq *tmp479 copper
  1541 set *tmp478 false
  1542 jump *label403 always
  1543 jump *label405 always
  1544 label *label404
  1545 label *label405
  1546 sensor *tmp482 .core @lead
-    * op lessThan *tmp483 *tmp482 lead
-    * jump *label406 equal *tmp483 false
+ 1547 jump *label406 greaterThanEq *tmp482 lead
  1548 set *tmp478 false
  1549 jump *label403 always
  1550 jump *label407 always
  1551 label *label406
  1552 label *label407
  1553 sensor *tmp485 .core @graphite
-    * op lessThan *tmp486 *tmp485 graphite
-    * jump *label408 equal *tmp486 false
+ 1554 jump *label408 greaterThanEq *tmp485 graphite
  1555 set *tmp478 false
  1556 jump *label403 always
  1557 jump *label409 always
  1558 label *label408
  1559 label *label409
  1560 sensor *tmp488 .core @silicon
-    * op lessThan *tmp489 *tmp488 silicon
-    * jump *label410 equal *tmp489 false
+ 1561 jump *label410 greaterThanEq *tmp488 silicon
  1562 set *tmp478 false
  1563 jump *label403 always
  1564 jump *label411 always
  1565 label *label410
  1566 label *label411
  1567 sensor *tmp491 .core @titanium
-    * op lessThan *tmp492 *tmp491 titanium
-    * jump *label412 equal *tmp492 false
+ 1568 jump *label412 greaterThanEq *tmp491 titanium
  1569 set *tmp478 false
  1570 jump *label403 always
  1571 jump *label413 always
  1572 label *label412
  1573 label *label413
  1574 sensor *tmp494 .core @metaglass
-    * op lessThan *tmp495 *tmp494 metaglass
-    * jump *label414 equal *tmp495 false
+ 1575 jump *label414 greaterThanEq *tmp494 metaglass
  1576 set *tmp478 false
  1577 jump *label403 always
  1578 jump *label415 always
  1579 label *label414
  1580 label *label415
  1581 sensor *tmp497 .core @thorium
-    * op lessThan *tmp498 *tmp497 thorium
-    * jump *label416 equal *tmp498 false
+ 1582 jump *label416 greaterThanEq *tmp497 thorium
  1583 set *tmp478 false
  1584 jump *label403 always
  1585 jump *label417 always
 
  1599 label *label402
  1600 label *label395
  1601 sensor *tmp501 @unit @totalItems
-    * op lessThan *tmp502 *tmp501 :mineOre:amount
-    * jump *label394 notEqual *tmp502 false
+ 1602 jump *label394 lessThan *tmp501 :mineOre:amount
  1603 label *label396
  1604 ucontrol unbind
  1605 set :depositItems:block :mineOre:block
 
  1629 end
  1630 label *label22
  1631 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
-    * op equal *tmp507 *tmp505 false
-    * jump *label425 equal *tmp507 false
+ 1632 jump *label425 notEqual *tmp505 false
  1633 set :error:error "Cannot locate ore"
  1634 setaddr :error*retaddr *label427 (h:*label427)
  1635 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
 
  1647 label *label429
  1648 label *label430
  1649 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509
-    * op equal *tmp510 *tmp509 false
-    * jump *label432 equal *tmp510 false
+ 1650 jump *label432 notEqual *tmp509 false
  1651 op sub *tmp511 :moveTo:radius 0.5
  1652 ucontrol approach :moveTo:x :moveTo:y *tmp511
  1653 label *label431

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-48 instructions):
 
    82 setaddr :error*retaddr *label64 (h:*label64)
    83 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    84 label *label64
-    * jump *label63 always
    85 label *label62
    86 label *label63
    87 write @pneumatic-drill processor2 ".nextBlock"
 
   206 sensor *tmp156 AJTJK-battery1 @totalPower
   207 jump *label94 greaterThanEq *tmp156 300
   208 jump *label92 always
-    * jump *label95 always
   209 label *label94
   210 label *label95
   211 label *label91
 
   355 setaddr :error*retaddr *label130 (h:*label130)
   356 call *label15 *invalid :error*retval (m:*label130) (h:*label130)
   357 label *label130
-    * jump *label129 always
   358 label *label128
   359 label *label129
   360 write @laser-drill processor5 ":buildBlockAt:block"
 
   425 set .thoriumContainer :buildRemoteBlock*retval
   426 jump *label140 notEqual .thoriumContainer null
   427 set .thoriumContainer .thoriumDrill
-    * jump *label141 always
   428 label *label140
   429 label *label141
   430 write .thoriumDrill processor2 ".thoriumDrill"
 
   565 call *label27 *invalid :supplyBlockFromCore*retval (m:*label180) (h:*label180)
   566 label *label180
   567 label *label178
-    * jump *label176 always
   568 label *label175
   569 label *label176
-    * jump *label174 always
   570 label *label173
   571 label *label174
   572 set :fetchBlock:block .thoriumContainer
 
   606 call *label26 *invalid :supplyBlock*retval (m:*label195) (h:*label195)
   607 label *label195
   608 set :supplyBase0:supplied true
-    * jump *label193 always
   609 label *label192
   610 label *label193
-    * jump *label191 always
   611 label *label190
   612 label *label191
   613 sensor *tmp258 .core @silicon
 
   638 call *label26 *invalid :supplyBlock*retval (m:*label205) (h:*label205)
   639 label *label205
   640 set :supplyBase0:supplied true
-    * jump *label203 always
   641 label *label202
   642 label *label203
   643 label *label199
-    * jump *label197 always
   644 label *label196
   645 label *label197
   646 sensor *tmp267 AJTJK-battery1 @totalPower
 
   657 call *label26 *invalid :supplyBlock*retval (m:*label211) (h:*label211)
   658 label *label211
   659 set :supplyBase0:supplied true
-    * jump *label209 always
   660 label *label208
   661 label *label209
-    * jump *label207 always
   662 label *label206
   663 label *label207
-    * jump *label189 always
   664 label *label188
   665 label *label189
   666 sensor *tmp273 .core @titanium
 
   768 label *label229
   769 label *label223
   770 label *label219
-    * jump *label217 always
   771 label *label216
   772 label *label217
   773 jump *label215 always
 
   823 label *label250
   824 set :buildRemoteBlock*retval :buildBlock*retval
   825 jump *label246 always
-    * jump *label248 always
   826 label *label247
   827 label *label248
   828 set :buildRemoteBlock*retval false
 
   964 sensor *tmp318 @unit @mining
   965 jump *label272 equal *tmp318 false
   966 ucontrol stop
-    * jump *label273 always
   967 label *label272
   968 label *label273
   969 ubind :lineUpUnits:unit
 
  1025 op land *tmp329 *tmp327 *tmp328
  1026 jump *label286 equal *tmp329 false
  1027 ucontrol itemDrop @air 1000
-    * jump *label287 always
  1028 label *label286
  1029 label *label287
  1030 label *label284
 
  1059 setaddr :mineOre*retaddr *label293 (h:*label293)
  1060 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
  1061 label *label293
-    * jump *label292 always
  1062 label *label291
  1063 label *label292
  1064 label *label289
 
  1093 op land *tmp345 *tmp343 *tmp344
  1094 jump *label302 equal *tmp345 false
  1095 ucontrol itemDrop @air 1000
-    * jump *label303 always
  1096 label *label302
  1097 label *label303
  1098 label *label300
 
  1220 jump *label321 greaterThanEq *tmp391 copper
  1221 set *tmp390 false
  1222 jump *label320 always
-    * jump *label322 always
  1223 label *label321
  1224 label *label322
  1225 sensor *tmp394 .core @lead
  1226 jump *label323 greaterThanEq *tmp394 lead
  1227 set *tmp390 false
  1228 jump *label320 always
-    * jump *label324 always
  1229 label *label323
  1230 label *label324
  1231 sensor *tmp397 .core @graphite
  1232 jump *label325 greaterThanEq *tmp397 graphite
  1233 set *tmp390 false
  1234 jump *label320 always
-    * jump *label326 always
  1235 label *label325
  1236 label *label326
  1237 sensor *tmp400 .core @silicon
  1238 jump *label327 greaterThanEq *tmp400 silicon
  1239 set *tmp390 false
  1240 jump *label320 always
-    * jump *label328 always
  1241 label *label327
  1242 label *label328
  1243 sensor *tmp403 .core @titanium
  1244 jump *label329 greaterThanEq *tmp403 titanium
  1245 set *tmp390 false
  1246 jump *label320 always
-    * jump *label330 always
  1247 label *label329
  1248 label *label330
  1249 sensor *tmp406 .core @metaglass
  1250 jump *label331 greaterThanEq *tmp406 metaglass
  1251 set *tmp390 false
  1252 jump *label320 always
-    * jump *label332 always
  1253 label *label331
  1254 label *label332
  1255 sensor *tmp409 .core @thorium
  1256 jump *label333 greaterThanEq *tmp409 thorium
  1257 set *tmp390 false
  1258 jump *label320 always
-    * jump *label334 always
  1259 label *label333
  1260 label *label334
  1261 set *tmp390 true
 
  1281 jump *label343 greaterThanEq *tmp416 copper
  1282 set *tmp415 false
  1283 jump *label342 always
-    * jump *label344 always
  1284 label *label343
  1285 label *label344
  1286 sensor *tmp419 .core @lead
  1287 jump *label345 greaterThanEq *tmp419 lead
  1288 set *tmp415 false
  1289 jump *label342 always
-    * jump *label346 always
  1290 label *label345
  1291 label *label346
  1292 sensor *tmp422 .core @graphite
  1293 jump *label347 greaterThanEq *tmp422 graphite
  1294 set *tmp415 false
  1295 jump *label342 always
-    * jump *label348 always
  1296 label *label347
  1297 label *label348
  1298 sensor *tmp425 .core @silicon
  1299 jump *label349 greaterThanEq *tmp425 silicon
  1300 set *tmp415 false
  1301 jump *label342 always
-    * jump *label350 always
  1302 label *label349
  1303 label *label350
  1304 sensor *tmp428 .core @titanium
  1305 jump *label351 greaterThanEq *tmp428 titanium
  1306 set *tmp415 false
  1307 jump *label342 always
-    * jump *label352 always
  1308 label *label351
  1309 label *label352
  1310 sensor *tmp431 .core @metaglass
  1311 jump *label353 greaterThanEq *tmp431 metaglass
  1312 set *tmp415 false
  1313 jump *label342 always
-    * jump *label354 always
  1314 label *label353
  1315 label *label354
  1316 sensor *tmp434 .core @thorium
  1317 jump *label355 greaterThanEq *tmp434 thorium
  1318 set *tmp415 false
  1319 jump *label342 always
-    * jump *label356 always
  1320 label *label355
  1321 label *label356
  1322 set *tmp415 true
 
  1330 label *label340
  1331 jump *label339 always
  1332 label *label341
-    * jump *label337 always
  1333 label *label336
  1334 label *label337
  1335 label *label306
 
  1393 sensor *tmp447 @unit @firstItem
  1394 jump *label368 equal *tmp447 null
  1395 ucontrol itemDrop @air 1000
-    * jump *label369 always
  1396 label *label368
  1397 label *label369
  1398 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
  1476 setaddr :dropAll*retaddr *label392 (h:*label392)
  1477 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1478 label *label392
-    * jump *label391 always
  1479 label *label390
  1480 label *label391
  1481 set :status3:text "Mining..."
 
  1490 op land *tmp472 *tmp470 *tmp471
  1491 jump *label397 equal *tmp472 false
  1492 jump *label396 always
-    * jump *label398 always
  1493 label *label397
  1494 label *label398
  1495 ucontrol mine :mineOre:x :mineOre:y
  1496 jump *label399 lessThanEq @second :mineOre:stop
  1497 jump *label396 always
-    * jump *label400 always
  1498 label *label399
  1499 label *label400
  1500 jump *label401 notEqual .noTarget false
 
  1502 jump *label404 greaterThanEq *tmp479 copper
  1503 set *tmp478 false
  1504 jump *label403 always
-    * jump *label405 always
  1505 label *label404
  1506 label *label405
  1507 sensor *tmp482 .core @lead
  1508 jump *label406 greaterThanEq *tmp482 lead
  1509 set *tmp478 false
  1510 jump *label403 always
-    * jump *label407 always
  1511 label *label406
  1512 label *label407
  1513 sensor *tmp485 .core @graphite
  1514 jump *label408 greaterThanEq *tmp485 graphite
  1515 set *tmp478 false
  1516 jump *label403 always
-    * jump *label409 always
  1517 label *label408
  1518 label *label409
  1519 sensor *tmp488 .core @silicon
  1520 jump *label410 greaterThanEq *tmp488 silicon
  1521 set *tmp478 false
  1522 jump *label403 always
-    * jump *label411 always
  1523 label *label410
  1524 label *label411
  1525 sensor *tmp491 .core @titanium
  1526 jump *label412 greaterThanEq *tmp491 titanium
  1527 set *tmp478 false
  1528 jump *label403 always
-    * jump *label413 always
  1529 label *label412
  1530 label *label413
  1531 sensor *tmp494 .core @metaglass
  1532 jump *label414 greaterThanEq *tmp494 metaglass
  1533 set *tmp478 false
  1534 jump *label403 always
-    * jump *label415 always
  1535 label *label414
  1536 label *label415
  1537 sensor *tmp497 .core @thorium
  1538 jump *label416 greaterThanEq *tmp497 thorium
  1539 set *tmp478 false
  1540 jump *label403 always
-    * jump *label417 always
  1541 label *label416
  1542 label *label417
  1543 set *tmp478 true
 
  1546 label *label403
  1547 jump *label418 equal *tmp478 false
  1548 jump *label396 always
-    * jump *label419 always
  1549 label *label418
  1550 label *label419
-    * jump *label402 always
  1551 label *label401
  1552 label *label402
  1553 label *label395
 
  1587 setaddr :error*retaddr *label427 (h:*label427)
  1588 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
  1589 label *label427
-    * jump *label426 always
  1590 label *label425
  1591 label *label426
  1592 label *label424

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    14 read *tmp115 processor5 "*signature"
    15 jump *label49 notEqual *tmp115 "319badb7a8e178a4:v1"
    16 set .titaniumDrill null
-    * set .thoriumDrill null
    17 set .thoriumBattery null
    18 set .thoriumContainer null
    19 set .thoriumGenerator null
 
    55 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    56 label *label58
    57 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   58 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    59 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    60 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
    61 label *label60
 
    94 jump *label65 equal *tmp144 false
    95 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
    96 jump *label59 always
-    * set *tmp127 null
    97 label *label59
    98 set .titaniumDrill *tmp127
-    * write .titaniumDrill processor2 ".titaniumDrill"
+   99 write *tmp127 processor2 ".titaniumDrill"
   100 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
   101 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   102 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
 
   116 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   117 label *label69
   118 set .controller :buildBlockFromCfg*retval
-    * write processor1 .controller ".timer"
-    * write processor2 .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
+  119 write processor1 :buildBlockFromCfg*retval ".timer"
+  120 write processor2 :buildBlockFromCfg*retval ".display"
+  121 write .core :buildBlockFromCfg*retval ".core"
+  122 write bank1 :buildBlockFromCfg*retval ".bank"
   123 set :block "AJEMJJ-graphite-press0"
   124 setaddr *tmp150 *label73
   125 jump *label70 always
 
   160 setaddr *tmp150 *label82
   161 label *label70
   162 read *tmp151 @this :block
-    * write *tmp151 .controller :block
+  163 write *tmp151 :buildBlockFromCfg*retval :block
   164 label *label71
   165 multijump *tmp150 0 0 (m:marker0)
   166 multilabel *label82 (m:marker0)
 
   182 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   183 label *label86
   184 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
-    * write :setFlareTarget:target processor2 ".flareTarget"
+  185 write 1 .controller ".flareTarget"
+  186 write 1 processor2 ".flareTarget"
   187 label *label87
   188 set :setMonoTarget:target 5
-    * write :setMonoTarget:target .controller ".monoTarget"
-    * write :setMonoTarget:target processor2 ".monoTarget"
+  189 write 5 .controller ".monoTarget"
+  190 write 5 processor2 ".monoTarget"
   191 label *label88
   192 write 85 .controller ".pressTarget"
   193 write 150 .controller ".smelterTarget"
   194 write 30 .controller ".kilnTarget"
   195 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  196 set .siliconSurplus 20
   197 setaddr :buildUnits*retaddr *label89 (h:*label89)
   198 call *label42 *invalid :buildUnits*retval (m:*label89) (h:*label89)
   199 label *label89
 
   254 set .metaglassSurplus 100
   255 set .graphiteSurplus 200
   256 set :setMonoTarget.1:target 2
-    * write :setMonoTarget.1:target .controller ".monoTarget"
-    * write :setMonoTarget.1:target processor2 ".monoTarget"
+  257 write 2 .controller ".monoTarget"
+  258 write 2 processor2 ".monoTarget"
   259 label *label106
   260 set :setPolyTarget:target 3
-    * write :setPolyTarget:target .controller ".polyTarget"
-    * write :setPolyTarget:target processor2 ".polyTarget"
+  261 write 3 .controller ".polyTarget"
+  262 write 3 processor2 ".polyTarget"
   263 label *label107
   264 set :buildBlockFromCfg.1:cfg "ALSIJa-silicon-smelter23"
   265 setaddr :buildBlockFromCfg.1*retaddr *label108 (h:*label108)
 
   277 call *label42 *invalid :buildUnits*retval (m:*label111) (h:*label111)
   278 label *label111
   279 set :setFlareTarget.1:target 2
-    * write :setFlareTarget.1:target .controller ".flareTarget"
-    * write :setFlareTarget.1:target processor2 ".flareTarget"
+  280 write 2 .controller ".flareTarget"
+  281 write 2 processor2 ".flareTarget"
   282 label *label112
   283 label *label113
   284 read *tmp85 .controller ".polys"
 
   290 jump *label113 always
   291 label *label115
   292 set :setFlareTarget.2:target 2
-    * write :setFlareTarget.2:target .controller ".flareTarget"
-    * write :setFlareTarget.2:target processor2 ".flareTarget"
+  293 write 2 .controller ".flareTarget"
+  294 write 2 processor2 ".flareTarget"
   295 label *label117
   296 label *label118
   297 read *tmp83 .controller ".flares"
 
   395 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   396 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   397 label *label135
-    * set :buildRemoteBlock:cfg "AFHJT-power-node10"
   398 read :buildRemoteBlock:x processor3 ".node2X"
   399 read :buildRemoteBlock:y processor3 ".node2Y"
   400 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
 
   420 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   421 label *label139
   422 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label140 notEqual .thoriumContainer null
+  423 jump *label140 notEqual :buildRemoteBlock*retval null
   424 set .thoriumContainer .thoriumDrill
   425 label *label140
   426 label *label141
 
   458 label *label149
   459 set .metaglassSurplus 10
   460 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
-    * write :setMegaTarget:target processor2 ".megaTarget"
+  461 write 1 .controller ".megaTarget"
+  462 write 1 processor2 ".megaTarget"
   463 label *label150
   464 setaddr :buildUnits*retaddr *label151 (h:*label151)
   465 call *label42 *invalid :buildUnits*retval (m:*label151) (h:*label151)
 
   671 label *label213
   672 set :supplyBase0:titaniumTrigger *tmp275
   673 sensor *tmp279 .titaniumDrill @titanium
-    * jump *label214 greaterThanEq *tmp279 :supplyBase0:titaniumTrigger
+  674 jump *label214 greaterThanEq *tmp279 *tmp275
   675 jump *label216 notEqual :supplyBase0:supplied false
   676 sensor *tmp284 AJTJK-battery1 @totalPower
   677 op mul *tmp285 A©JNJP-unloader6 .powerTarget
 
   701 set *tmp294 @sand
   702 label *label226
   703 set :supplyBase0:ore *tmp294
-    * set :mineOre.1:ore :supplyBase0:ore
+  704 set :mineOre.1:ore *tmp294
   705 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   706 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   707 label *label227
 
   756 set *tmp307 @sand
   757 label *label242
   758 set :supplyBase0:ore.1 *tmp307
-    * set :mineOre.1:ore :supplyBase0:ore.1
+  759 set :mineOre.1:ore *tmp307
   760 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   761 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   762 label *label243
 
   802 set :buildRemoteBlock:th :unpackCfg:th
   803 set :buildRemoteBlock:rotation :unpackCfg:rotation
   804 set :buildRemoteBlock:index :unpackCfg:ind
-    * set :buildBlock:block :buildRemoteBlock:type
+  805 set :buildBlock:block :unpackCfg:type
   806 set :buildBlock:x :buildRemoteBlock:x
   807 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+  808 set :buildBlock:copper :unpackCfg:cu
+  809 set :buildBlock:lead :unpackCfg:pb
+  810 set :buildBlock:graphite :unpackCfg:gr
+  811 set :buildBlock:silicon :unpackCfg:si
+  812 set :buildBlock:titanium :unpackCfg:ti
+  813 set :buildBlock:metaglass :unpackCfg:mg
+  814 set :buildBlock:thorium :unpackCfg:th
+  815 set :buildBlock:rotation :unpackCfg:rotation
   816 set :buildBlock:config null
-    * set :buildBlock:index :buildRemoteBlock:index
+  817 set :buildBlock:index :unpackCfg:ind
   818 setaddr :buildBlock*retaddr *label250 (h:*label250)
   819 call *label37 *invalid :buildBlock*retval (m:*label250) (h:*label250)
   820 label *label250
 
   824 label *label248
   825 set :buildRemoteBlock*retval false
   826 jump *label246 always
-    * set :buildRemoteBlock*retval null
   827 label *label246
   828 return :buildRemoteBlock*retaddr
   829 end
 
   844 set :buildBlockFromCfg:th :unpackCfg:th
   845 set :buildBlockFromCfg:rotation :unpackCfg:rotation
   846 set :buildBlockFromCfg:index :unpackCfg:ind
-    * op add *tmp311 .coreX :buildBlockFromCfg:x
-    * op add *tmp312 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+  847 op add *tmp311 .coreX :unpackCfg:x
+  848 op add *tmp312 .coreY :unpackCfg:y
+  849 set :buildBlock:block :unpackCfg:type
   850 set :buildBlock:x *tmp311
   851 set :buildBlock:y *tmp312
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+  852 set :buildBlock:copper :unpackCfg:cu
+  853 set :buildBlock:lead :unpackCfg:pb
+  854 set :buildBlock:graphite :unpackCfg:gr
+  855 set :buildBlock:silicon :unpackCfg:si
+  856 set :buildBlock:titanium :unpackCfg:ti
+  857 set :buildBlock:metaglass :unpackCfg:mg
+  858 set :buildBlock:thorium :unpackCfg:th
+  859 set :buildBlock:rotation :unpackCfg:rotation
   860 set :buildBlock:config :buildBlockFromCfg:config
-    * set :buildBlock:index :buildBlockFromCfg:index
+  861 set :buildBlock:index :unpackCfg:ind
   862 setaddr :buildBlock*retaddr *label253 (h:*label253)
   863 call *label37 *invalid :buildBlock*retval (m:*label253) (h:*label253)
   864 label *label253
   865 set :buildBlockFromCfg:building :buildBlock*retval
-    * write :buildBlockFromCfg:building @this :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building processor2 :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building .controller :buildBlockFromCfg:cfg
-    * set :buildBlockFromCfg*retval :buildBlockFromCfg:building
+  866 write :buildBlock*retval @this :buildBlockFromCfg:cfg
+  867 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
+  868 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
+  869 set :buildBlockFromCfg*retval :buildBlock*retval
   870 jump *label251 always
-    * set :buildBlockFromCfg*retval null
   871 label *label251
   872 return :buildBlockFromCfg*retaddr
   873 end
 
   893 set :meetTarget.1:ti :unpackCfg:ti
   894 set :meetTarget.1:mg :unpackCfg:mg
   895 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+  896 set :meetTarget:block :unpackCfg:type
+  897 set :meetTarget:copper :unpackCfg:cu
+  898 set :meetTarget:lead :unpackCfg:pb
+  899 set :meetTarget:graphite :unpackCfg:gr
+  900 set :meetTarget:silicon :unpackCfg:si
+  901 set :meetTarget:titanium :unpackCfg:ti
+  902 set :meetTarget:metaglass :unpackCfg:mg
+  903 set :meetTarget:thorium :unpackCfg:th
   904 set :meetTarget:forBuild false
   905 set :meetTarget:isNoTarget false
   906 setaddr :meetTarget*retaddr *label258 (h:*label258)
 
  1107 end
  1108 label *label29
  1109 set :unpackCfg:index 1
-    * set *tmp351 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1110 set *tmp351 1
+ 1111 op add :unpackCfg:index 1 1
  1112 read *tmp352 :unpackCfg:cfg *tmp351
  1113 op sub *tmp353 *tmp352 74
  1114 lookup block :unpackCfg:type *tmp353
-    * set *tmp355 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1115 set *tmp355 2
+ 1116 op add :unpackCfg:index 2 1
  1117 read *tmp356 :unpackCfg:cfg *tmp355
  1118 op sub *tmp357 *tmp356 74
  1119 op div :unpackCfg:x *tmp357 2
-    * set *tmp359 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1120 set *tmp359 3
+ 1121 op add :unpackCfg:index 3 1
  1122 read *tmp360 :unpackCfg:cfg *tmp359
  1123 op sub *tmp361 *tmp360 74
  1124 op div :unpackCfg:y *tmp361 2
-    * set *tmp363 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1125 set *tmp363 4
+ 1126 op add :unpackCfg:index 4 1
  1127 read *tmp364 :unpackCfg:cfg *tmp363
  1128 op sub :unpackCfg:rotation *tmp364 74
-    * set *tmp366 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1129 set *tmp366 5
+ 1130 op add :unpackCfg:index 5 1
  1131 read *tmp367 :unpackCfg:cfg *tmp366
  1132 op sub :unpackCfg:ind *tmp367 74
  1133 sensor :unpackCfg:cu :unpackCfg:type @copper
 
  1199 op add *tmp382 :meetTarget:metaglass .metaglassSurplus
  1200 write *tmp382 .controller ".kilnTarget"
  1201 op add *tmp383 :meetTarget:lead .leadSurplus
-    * write *tmp383 .controller ".leadReserve"
+ 1202 write lead .controller ".leadReserve"
  1203 op sign *tmp384 :meetTarget:silicon
  1204 op mul *tmp385 *tmp384 20
  1205 op add *tmp386 :meetTarget:silicon *tmp385
 
  1209 op add *tmp389 :meetTarget:graphite *tmp388
  1210 write *tmp389 .controller ".graphiteReserve"
  1211 write lead processor7 ".leadTarget"
-    * write copper processor7 ".copperTarget"
+ 1212 write :meetTarget:copper processor7 ".copperTarget"
  1213 label *label317
  1214 sensor *tmp391 .core @copper
  1215 jump *label321 greaterThanEq *tmp391 copper
 
  1255 label *label334
  1256 set *tmp390 true
  1257 jump *label320 always
-    * set *tmp390 null
  1258 label *label320
  1259 jump *label319 notEqual *tmp390 false
  1260 setaddr :supplyBase*retaddr *label335 (h:*label335)
 
  1315 label *label356
  1316 set *tmp415 true
  1317 jump *label342 always
-    * set *tmp415 null
  1318 label *label342
  1319 jump *label341 notEqual *tmp415 false
  1320 setaddr :supplyBase*retaddr *label357 (h:*label357)
 
  1360 write 2 .controller "@counter"
  1361 set :buildBlock*retval :buildBlock:built
  1362 jump *label358 always
-    * set :buildBlock*retval null
  1363 label *label358
  1364 return :buildBlock*retaddr
  1365 end
 
  1458 label *label388
  1459 set :mineOre:x :locateOre:x
  1460 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+ 1461 set :moveToEmpty:x :locateOre:x
+ 1462 set :moveToEmpty:y :locateOre:y
  1463 setaddr :moveToEmpty*retaddr *label389 (h:*label389)
  1464 call *label18 *invalid :moveToEmpty*retval (m:*label389) (h:*label389)
  1465 label *label389
 
  1534 label *label417
  1535 set *tmp478 true
  1536 jump *label403 always
-    * set *tmp478 null
  1537 label *label403
  1538 jump *label418 equal *tmp478 false
  1539 jump *label396 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-50 instructions):
 
    54 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    55 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    56 label *label58
-    * set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    57 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    58 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    59 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
 
   180 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   181 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   182 label *label86
-    * set :setFlareTarget:target 1
   183 write 1 .controller ".flareTarget"
   184 write 1 processor2 ".flareTarget"
   185 label *label87
-    * set :setMonoTarget:target 5
   186 write 5 .controller ".monoTarget"
   187 write 5 processor2 ".monoTarget"
   188 label *label88
 
   250 set .siliconSurplus 1000
   251 set .metaglassSurplus 100
   252 set .graphiteSurplus 200
-    * set :setMonoTarget.1:target 2
   253 write 2 .controller ".monoTarget"
   254 write 2 processor2 ".monoTarget"
   255 label *label106
-    * set :setPolyTarget:target 3
   256 write 3 .controller ".polyTarget"
   257 write 3 processor2 ".polyTarget"
   258 label *label107
 
   271 setaddr :buildUnits*retaddr *label111 (h:*label111)
   272 call *label42 *invalid :buildUnits*retval (m:*label111) (h:*label111)
   273 label *label111
-    * set :setFlareTarget.1:target 2
   274 write 2 .controller ".flareTarget"
   275 write 2 processor2 ".flareTarget"
   276 label *label112
 
   283 label *label114
   284 jump *label113 always
   285 label *label115
-    * set :setFlareTarget.2:target 2
   286 write 2 .controller ".flareTarget"
   287 write 2 processor2 ".flareTarget"
   288 label *label117
 
   369 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   370 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   371 label *label132
-    * set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
   372 read :buildRemoteBlock:x processor3 ".water2X"
   373 read :buildRemoteBlock:y processor3 ".water2Y"
   374 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
 
   449 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label149) (h:*label149)
   450 label *label149
   451 set .metaglassSurplus 10
-    * set :setMegaTarget:target 1
   452 write 1 .controller ".megaTarget"
   453 write 1 processor2 ".megaTarget"
   454 label *label150
 
   660 label *label212
   661 set *tmp275 100
   662 label *label213
-    * set :supplyBase0:titaniumTrigger *tmp275
   663 sensor *tmp279 .titaniumDrill @titanium
   664 jump *label214 greaterThanEq *tmp279 *tmp275
   665 jump *label216 notEqual :supplyBase0:supplied false
 
   690 label *label225
   691 set *tmp294 @sand
   692 label *label226
-    * set :supplyBase0:ore *tmp294
   693 set :mineOre.1:ore *tmp294
   694 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   695 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
 
   744 label *label241
   745 set *tmp307 @sand
   746 label *label242
-    * set :supplyBase0:ore.1 *tmp307
   747 set :mineOre.1:ore *tmp307
   748 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   749 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
 
   780 setaddr :unpackCfg*retaddr *label249 (h:*label249)
   781 call *label29 *invalid :unpackCfg*retval (m:*label249) (h:*label249)
   782 label *label249
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildRemoteBlock:index :unpackCfg:ind
   783 set :buildBlock:block :unpackCfg:type
   784 set :buildBlock:x :buildRemoteBlock:x
   785 set :buildBlock:y :buildRemoteBlock:y
 
   810 setaddr :unpackCfg*retaddr *label252 (h:*label252)
   811 call *label29 *invalid :unpackCfg*retval (m:*label252) (h:*label252)
   812 label *label252
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * set :buildBlockFromCfg:index :unpackCfg:ind
   813 op add *tmp311 .coreX :unpackCfg:x
   814 op add *tmp312 .coreY :unpackCfg:y
   815 set :buildBlock:block :unpackCfg:type
 
   828 setaddr :buildBlock*retaddr *label253 (h:*label253)
   829 call *label37 *invalid :buildBlock*retval (m:*label253) (h:*label253)
   830 label *label253
-    * set :buildBlockFromCfg:building :buildBlock*retval
   831 write :buildBlock*retval @this :buildBlockFromCfg:cfg
   832 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   833 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
 
   850 setaddr :unpackCfg*retaddr *label257 (h:*label257)
   851 call *label29 *invalid :unpackCfg*retval (m:*label257) (h:*label257)
   852 label *label257
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
   853 set :meetTarget:block :unpackCfg:type
   854 set :meetTarget:copper :unpackCfg:cu
   855 set :meetTarget:lead :unpackCfg:pb
 
  1063 return :supplyBlockFromCore*retaddr
  1064 end
  1065 label *label29
-    * set :unpackCfg:index 1
  1066 set *tmp351 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp352 :unpackCfg:cfg *tmp351
+ 1067 read *tmp352 :unpackCfg:cfg 1
  1068 op sub *tmp353 *tmp352 74
  1069 lookup block :unpackCfg:type *tmp353
  1070 set *tmp355 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp356 :unpackCfg:cfg *tmp355
+ 1071 read *tmp356 :unpackCfg:cfg 2
  1072 op sub *tmp357 *tmp356 74
  1073 op div :unpackCfg:x *tmp357 2
  1074 set *tmp359 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp360 :unpackCfg:cfg *tmp359
+ 1075 read *tmp360 :unpackCfg:cfg 3
  1076 op sub *tmp361 *tmp360 74
  1077 op div :unpackCfg:y *tmp361 2
  1078 set *tmp363 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp364 :unpackCfg:cfg *tmp363
+ 1079 read *tmp364 :unpackCfg:cfg 4
  1080 op sub :unpackCfg:rotation *tmp364 74
  1081 set *tmp366 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp367 :unpackCfg:cfg *tmp366
+ 1082 read *tmp367 :unpackCfg:cfg 5
  1083 op sub :unpackCfg:ind *tmp367 74
  1084 sensor :unpackCfg:cu :unpackCfg:type @copper
  1085 sensor :unpackCfg:pb :unpackCfg:type @lead
 
  1149 write *tmp381 .controller ".smelterTarget"
  1150 op add *tmp382 :meetTarget:metaglass .metaglassSurplus
  1151 write *tmp382 .controller ".kilnTarget"
-    * op add *tmp383 :meetTarget:lead .leadSurplus
  1152 write lead .controller ".leadReserve"
  1153 op sign *tmp384 :meetTarget:silicon
  1154 op mul *tmp385 *tmp384 20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-5 instructions):
 
  1063 return :supplyBlockFromCore*retaddr
  1064 end
  1065 label *label29
-    * set *tmp351 1
  1066 read *tmp352 :unpackCfg:cfg 1
  1067 op sub *tmp353 *tmp352 74
  1068 lookup block :unpackCfg:type *tmp353
-    * set *tmp355 2
  1069 read *tmp356 :unpackCfg:cfg 2
  1070 op sub *tmp357 *tmp356 74
  1071 op div :unpackCfg:x *tmp357 2
-    * set *tmp359 3
  1072 read *tmp360 :unpackCfg:cfg 3
  1073 op sub *tmp361 *tmp360 74
  1074 op div :unpackCfg:y *tmp361 2
-    * set *tmp363 4
  1075 read *tmp364 :unpackCfg:cfg 4
  1076 op sub :unpackCfg:rotation *tmp364 74
-    * set *tmp366 5
  1077 read *tmp367 :unpackCfg:cfg 5
  1078 op sub :unpackCfg:ind *tmp367 74
  1079 sensor :unpackCfg:cu :unpackCfg:type @copper

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
  1533 setaddr :status3*retaddr *label429 (h:*label429)
  1534 call *label13 *invalid :status3*retval (m:*label429) (h:*label429)
  1535 label *label429
+ 1536 op sub *tmp511 :moveTo:radius 0.5
  1537 label *label430
  1538 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509
  1539 jump *label432 notEqual *tmp509 false
-    * op sub *tmp511 :moveTo:radius 0.5
  1540 ucontrol approach :moveTo:x :moveTo:y *tmp511
  1541 label *label431
  1542 jump *label430 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-7 instructions):
 
   412 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   413 label *label139
   414 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label140 notEqual :buildRemoteBlock*retval null
-    * set .thoriumContainer .thoriumDrill
-    * label *label140
-    * label *label141
+  415 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
   416 write .thoriumDrill processor2 ".thoriumDrill"
   417 write .thoriumContainer processor2 ".thoriumContainer"
   418 write .thoriumContainer processor6 ":setThoriumContainer:container"
 
   681 label *label224
   682 sensor :supplyBase0:coal .core @coal
   683 sensor :supplyBase0:sand .core @sand
-    * jump *label225 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp294 @coal
-    * jump *label226 always
-    * label *label225
-    * set *tmp294 @sand
-    * label *label226
+  684 select *tmp294 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   685 set :mineOre.1:ore *tmp294
   686 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   687 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
 
   730 label *label240
   731 sensor :supplyBase0:coal.1 .core @coal
   732 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label241 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp307 @coal
-    * jump *label242 always
-    * label *label241
-    * set *tmp307 @sand
-    * label *label242
+  733 select *tmp307 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   734 set :mineOre.1:ore *tmp307
   735 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   736 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 2:
 
   648 label *label207
   649 label *label188
   650 label *label189
+  651 set *tmp275 100
   652 sensor *tmp273 .core @titanium
-    * jump *label212 greaterThanEq *tmp273 titanium
+  653 jump *label213 greaterThanEq *tmp273 titanium
   654 sensor *tmp276 .core @titanium
   655 op sub *tmp277 titanium *tmp276
   656 op min *tmp275 7 *tmp277
   657 jump *label213 always
-    * label *label212
-    * set *tmp275 100
   658 label *label213
   659 sensor *tmp279 .titaniumDrill @titanium
   660 jump *label214 greaterThanEq *tmp279 *tmp275

Modifications by Unroll iteration loop at CoreBuilder.mnd:351:5 (-2 instructions):
 
   119 write processor2 :buildBlockFromCfg*retval ".display"
   120 write .core :buildBlockFromCfg*retval ".core"
   121 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
-    * setaddr *tmp150 *label73
-    * jump *label70 always
-    * multilabel *label73 (m:marker0)
-    * set :block "AJTJK-battery1"
-    * setaddr *tmp150 *label74
-    * jump *label70 always
-    * multilabel *label74 (m:marker0)
-    * set :block "ALTJL-battery2"
-    * setaddr *tmp150 *label75
-    * jump *label70 always
-    * multilabel *label75 (m:marker0)
-    * set :block "AJRJM-combustion-generator3"
-    * setaddr *tmp150 *label76
-    * jump *label70 always
-    * multilabel *label76 (m:marker0)
-    * set :block "ALMQJN-silicon-smelter4"
-    * setaddr *tmp150 *label77
-    * jump *label70 always
-    * multilabel *label77 (m:marker0)
-    * set :block "A{LNJO-inverted-sorter5"
-    * setaddr *tmp150 *label78
-    * jump *label70 always
-    * multilabel *label78 (m:marker0)
-    * set :block "A©JNJP-unloader6"
-    * setaddr *tmp150 *label79
-    * jump *label70 always
-    * multilabel *label79 (m:marker0)
-    * set :block "A{HNJQ-inverted-sorter7"
-    * setaddr *tmp150 *label80
-    * jump *label70 always
-    * multilabel *label80 (m:marker0)
-    * set :block "A~JPJR-overflow-gate8"
-    * setaddr *tmp150 *label81
-    * jump *label70 always
-    * multilabel *label81 (m:marker0)
-    * set :block "AÕFFJS-micro-processor9"
-    * setaddr *tmp150 *label82
-    * label *label70
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
-    * label *label71
-    * multijump *tmp150 0 0 (m:marker0)
-    * multilabel *label82 (m:marker0)
-    * label *label72
+  122 set :block "AJEMJJ-graphite-press0"
+  123 label *label435
+  124 read *tmp151 @this :block
+  125 write *tmp151 :buildBlockFromCfg*retval :block
+  126 label *label436
+  127 set :block "AJTJK-battery1"
+  128 label *label439
+  129 read *tmp151 @this :block
+  130 write *tmp151 :buildBlockFromCfg*retval :block
+  131 label *label440
+  132 set :block "ALTJL-battery2"
+  133 label *label443
+  134 read *tmp151 @this :block
+  135 write *tmp151 :buildBlockFromCfg*retval :block
+  136 label *label444
+  137 set :block "AJRJM-combustion-generator3"
+  138 label *label447
+  139 read *tmp151 @this :block
+  140 write *tmp151 :buildBlockFromCfg*retval :block
+  141 label *label448
+  142 set :block "ALMQJN-silicon-smelter4"
+  143 label *label451
+  144 read *tmp151 @this :block
+  145 write *tmp151 :buildBlockFromCfg*retval :block
+  146 label *label452
+  147 set :block "A{LNJO-inverted-sorter5"
+  148 label *label455
+  149 read *tmp151 @this :block
+  150 write *tmp151 :buildBlockFromCfg*retval :block
+  151 label *label456
+  152 set :block "A©JNJP-unloader6"
+  153 label *label459
+  154 read *tmp151 @this :block
+  155 write *tmp151 :buildBlockFromCfg*retval :block
+  156 label *label460
+  157 set :block "A{HNJQ-inverted-sorter7"
+  158 label *label463
+  159 read *tmp151 @this :block
+  160 write *tmp151 :buildBlockFromCfg*retval :block
+  161 label *label464
+  162 set :block "A~JPJR-overflow-gate8"
+  163 label *label467
+  164 read *tmp151 @this :block
+  165 write *tmp151 :buildBlockFromCfg*retval :block
+  166 label *label468
+  167 set :block "AÕFFJS-micro-processor9"
+  168 label *label471
+  169 read *tmp151 @this :block
+  170 write *tmp151 :buildBlockFromCfg*retval :block
+  171 label *label472
+  172 label *label72
   173 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
   174 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   175 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   121 write bank1 :buildBlockFromCfg*retval ".bank"
   122 set :block "AJEMJJ-graphite-press0"
   123 label *label435
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  124 read *tmp151 @this "AJEMJJ-graphite-press0"
+  125 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   126 label *label436
   127 set :block "AJTJK-battery1"
   128 label *label439
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  129 read *tmp151 @this "AJTJK-battery1"
+  130 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   131 label *label440
   132 set :block "ALTJL-battery2"
   133 label *label443
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  134 read *tmp151 @this "ALTJL-battery2"
+  135 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   136 label *label444
   137 set :block "AJRJM-combustion-generator3"
   138 label *label447
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  139 read *tmp151 @this "AJRJM-combustion-generator3"
+  140 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   141 label *label448
   142 set :block "ALMQJN-silicon-smelter4"
   143 label *label451
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  144 read *tmp151 @this "ALMQJN-silicon-smelter4"
+  145 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   146 label *label452
   147 set :block "A{LNJO-inverted-sorter5"
   148 label *label455
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  149 read *tmp151 @this "A{LNJO-inverted-sorter5"
+  150 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   151 label *label456
   152 set :block "A©JNJP-unloader6"
   153 label *label459
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  154 read *tmp151 @this "A©JNJP-unloader6"
+  155 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   156 label *label460
   157 set :block "A{HNJQ-inverted-sorter7"
   158 label *label463
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  159 read *tmp151 @this "A{HNJQ-inverted-sorter7"
+  160 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   161 label *label464
   162 set :block "A~JPJR-overflow-gate8"
   163 label *label467
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  164 read *tmp151 @this "A~JPJR-overflow-gate8"
+  165 write *tmp151 :buildBlockFromCfg*retval "A~JPJR-overflow-gate8"
   166 label *label468
   167 set :block "AÕFFJS-micro-processor9"
   168 label *label471
-    * read *tmp151 @this :block
-    * write *tmp151 :buildBlockFromCfg*retval :block
+  169 read *tmp151 @this "AÕFFJS-micro-processor9"
+  170 write *tmp151 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
   171 label *label472
   172 label *label72
   173 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
 
   418 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   419 label *label139
   420 set .thoriumContainer :buildRemoteBlock*retval
-    * select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
+  421 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   422 write .thoriumDrill processor2 ".thoriumDrill"
   423 write .thoriumContainer processor2 ".thoriumContainer"
   424 write .thoriumContainer processor6 ":setThoriumContainer:container"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
 
   119 write processor2 :buildBlockFromCfg*retval ".display"
   120 write .core :buildBlockFromCfg*retval ".core"
   121 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
   122 label *label435
   123 read *tmp151 @this "AJEMJJ-graphite-press0"
   124 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   125 label *label436
-    * set :block "AJTJK-battery1"
   126 label *label439
   127 read *tmp151 @this "AJTJK-battery1"
   128 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   129 label *label440
-    * set :block "ALTJL-battery2"
   130 label *label443
   131 read *tmp151 @this "ALTJL-battery2"
   132 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   133 label *label444
-    * set :block "AJRJM-combustion-generator3"
   134 label *label447
   135 read *tmp151 @this "AJRJM-combustion-generator3"
   136 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   137 label *label448
-    * set :block "ALMQJN-silicon-smelter4"
   138 label *label451
   139 read *tmp151 @this "ALMQJN-silicon-smelter4"
   140 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   141 label *label452
-    * set :block "A{LNJO-inverted-sorter5"
   142 label *label455
   143 read *tmp151 @this "A{LNJO-inverted-sorter5"
   144 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   145 label *label456
-    * set :block "A©JNJP-unloader6"
   146 label *label459
   147 read *tmp151 @this "A©JNJP-unloader6"
   148 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   149 label *label460
-    * set :block "A{HNJQ-inverted-sorter7"
   150 label *label463
   151 read *tmp151 @this "A{HNJQ-inverted-sorter7"
   152 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   153 label *label464
-    * set :block "A~JPJR-overflow-gate8"
   154 label *label467
   155 read *tmp151 @this "A~JPJR-overflow-gate8"
   156 write *tmp151 :buildBlockFromCfg*retval "A~JPJR-overflow-gate8"
   157 label *label468
-    * set :block "AÕFFJS-micro-processor9"
   158 label *label471
   159 read *tmp151 @this "AÕFFJS-micro-processor9"
   160 write *tmp151 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
 
   407 setaddr :buildRemoteBlock*retaddr *label139 (h:*label139)
   408 call *label38 *invalid :buildRemoteBlock*retval (m:*label139) (h:*label139)
   409 label *label139
-    * set .thoriumContainer :buildRemoteBlock*retval
   410 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   411 write .thoriumDrill processor2 ".thoriumDrill"
   412 write .thoriumContainer processor2 ".thoriumContainer"

Modifications by Unroll iteration loop at CoreBuilder.mnd:173:5 (-2 instructions):
 
  1069 end
  1070 label *label36
  1071 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp377 *label310
-    * jump *label307 always
-    * multilabel *label310 (m:marker1)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp377 *label311
-    * jump *label307 always
-    * multilabel *label311 (m:marker1)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp377 *label312
-    * jump *label307 always
-    * multilabel *label312 (m:marker1)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp377 *label313
-    * jump *label307 always
-    * multilabel *label313 (m:marker1)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp377 *label314
-    * jump *label307 always
-    * multilabel *label314 (m:marker1)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp377 *label315
-    * jump *label307 always
-    * multilabel *label315 (m:marker1)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp377 *label316
-    * label *label307
-    * op sign *tmp378 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label308
-    * multijump *tmp377 0 0 (m:marker1)
-    * multilabel *label316 (m:marker1)
-    * label *label309
+ 1072 set :meetTarget:t :meetTarget:copper
+ 1073 label *label476
+ 1074 op sign *tmp378 :meetTarget:t
+ 1075 op add :meetTarget:count :meetTarget:count *tmp378
+ 1076 label *label477
+ 1077 set :meetTarget:t :meetTarget:lead
+ 1078 label *label480
+ 1079 op sign *tmp378 :meetTarget:t
+ 1080 op add :meetTarget:count :meetTarget:count *tmp378
+ 1081 label *label481
+ 1082 set :meetTarget:t :meetTarget:graphite
+ 1083 label *label484
+ 1084 op sign *tmp378 :meetTarget:t
+ 1085 op add :meetTarget:count :meetTarget:count *tmp378
+ 1086 label *label485
+ 1087 set :meetTarget:t :meetTarget:silicon
+ 1088 label *label488
+ 1089 op sign *tmp378 :meetTarget:t
+ 1090 op add :meetTarget:count :meetTarget:count *tmp378
+ 1091 label *label489
+ 1092 set :meetTarget:t :meetTarget:titanium
+ 1093 label *label492
+ 1094 op sign *tmp378 :meetTarget:t
+ 1095 op add :meetTarget:count :meetTarget:count *tmp378
+ 1096 label *label493
+ 1097 set :meetTarget:t :meetTarget:metaglass
+ 1098 label *label496
+ 1099 op sign *tmp378 :meetTarget:t
+ 1100 op add :meetTarget:count :meetTarget:count *tmp378
+ 1101 label *label497
+ 1102 set :meetTarget:t :meetTarget:thorium
+ 1103 label *label500
+ 1104 op sign *tmp378 :meetTarget:t
+ 1105 op add :meetTarget:count :meetTarget:count *tmp378
+ 1106 label *label501
+ 1107 label *label309
  1108 write :meetTarget:count processor2 ".totalTargets"
  1109 write :meetTarget:block processor2 ".nextBlock"
  1110 write :meetTarget:copper processor2 ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1071 set :meetTarget:count 0
  1072 set :meetTarget:t :meetTarget:copper
  1073 label *label476
-    * op sign *tmp378 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp378
+ 1074 op sign *tmp378 :meetTarget:copper
+ 1075 op add :meetTarget:count 0 *tmp378
  1076 label *label477
  1077 set :meetTarget:t :meetTarget:lead
  1078 label *label480
-    * op sign *tmp378 :meetTarget:t
+ 1079 op sign *tmp378 :meetTarget:lead
  1080 op add :meetTarget:count :meetTarget:count *tmp378
  1081 label *label481
  1082 set :meetTarget:t :meetTarget:graphite
  1083 label *label484
-    * op sign *tmp378 :meetTarget:t
+ 1084 op sign *tmp378 :meetTarget:graphite
  1085 op add :meetTarget:count :meetTarget:count *tmp378
  1086 label *label485
  1087 set :meetTarget:t :meetTarget:silicon
  1088 label *label488
-    * op sign *tmp378 :meetTarget:t
+ 1089 op sign *tmp378 :meetTarget:silicon
  1090 op add :meetTarget:count :meetTarget:count *tmp378
  1091 label *label489
  1092 set :meetTarget:t :meetTarget:titanium
  1093 label *label492
-    * op sign *tmp378 :meetTarget:t
+ 1094 op sign *tmp378 :meetTarget:titanium
  1095 op add :meetTarget:count :meetTarget:count *tmp378
  1096 label *label493
  1097 set :meetTarget:t :meetTarget:metaglass
  1098 label *label496
-    * op sign *tmp378 :meetTarget:t
+ 1099 op sign *tmp378 :meetTarget:metaglass
  1100 op add :meetTarget:count :meetTarget:count *tmp378
  1101 label *label497
  1102 set :meetTarget:t :meetTarget:thorium
  1103 label *label500
-    * op sign *tmp378 :meetTarget:t
+ 1104 op sign *tmp378 :meetTarget:thorium
  1105 op add :meetTarget:count :meetTarget:count *tmp378
  1106 label *label501
  1107 label *label309

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1068 return :unpackCfg*retaddr
  1069 end
  1070 label *label36
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1071 label *label476
  1072 op sign *tmp378 :meetTarget:copper
  1073 op add :meetTarget:count 0 *tmp378
  1074 label *label477
-    * set :meetTarget:t :meetTarget:lead
  1075 label *label480
  1076 op sign *tmp378 :meetTarget:lead
  1077 op add :meetTarget:count :meetTarget:count *tmp378
  1078 label *label481
-    * set :meetTarget:t :meetTarget:graphite
  1079 label *label484
  1080 op sign *tmp378 :meetTarget:graphite
  1081 op add :meetTarget:count :meetTarget:count *tmp378
  1082 label *label485
-    * set :meetTarget:t :meetTarget:silicon
  1083 label *label488
  1084 op sign *tmp378 :meetTarget:silicon
  1085 op add :meetTarget:count :meetTarget:count *tmp378
  1086 label *label489
-    * set :meetTarget:t :meetTarget:titanium
  1087 label *label492
  1088 op sign *tmp378 :meetTarget:titanium
  1089 op add :meetTarget:count :meetTarget:count *tmp378
  1090 label *label493
-    * set :meetTarget:t :meetTarget:metaglass
  1091 label *label496
  1092 op sign *tmp378 :meetTarget:metaglass
  1093 op add :meetTarget:count :meetTarget:count *tmp378
  1094 label *label497
-    * set :meetTarget:t :meetTarget:thorium
  1095 label *label500
  1096 op sign *tmp378 :meetTarget:thorium
  1097 op add :meetTarget:count :meetTarget:count *tmp378

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   523 write *tmp237 processor7 ".sandTarget"
   524 jump *label169 equal .thoriumContainer false
   525 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label172 (h:*label172)
-    * call *label11 *invalid :status1*retval (m:*label172) (h:*label172)
-    * label *label172
+  526 label *label505
+  527 write :status1:text processor2 ".status1"
+  528 label *label506
   529 sensor *tmp239 .thoriumBattery @totalPower
   530 jump *label173 greaterThanEq *tmp239 2000
   531 sensor *tmp242 .thoriumGenerator @coal
 
   560 read *tmp84 .controller ".monos"
   561 jump *label182 lessThanEq *tmp84 3
   562 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label185 (h:*label185)
-    * call *label11 *invalid :status1*retval (m:*label185) (h:*label185)
-    * label *label185
+  563 label *label507
+  564 write :status1:text processor2 ".status1"
+  565 label *label508
   566 set :mineOre.1:ore @coal
   567 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   568 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
 
   577 sensor *tmp255 AJEMJJ-graphite-press0 @coal
   578 jump *label192 greaterThanEq *tmp255 5
   579 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label194 (h:*label194)
-    * call *label11 *invalid :status1*retval (m:*label194) (h:*label194)
-    * label *label194
+  580 label *label509
+  581 write :status1:text processor2 ".status1"
+  582 label *label510
   583 set :supplyBlock:block AJEMJJ-graphite-press0
   584 set :supplyBlock:ore @coal
   585 setaddr :supplyBlock*retaddr *label195 (h:*label195)
 
   595 sensor *tmp261 ALMQJN-silicon-smelter4 @coal
   596 jump *label198 greaterThanEq *tmp261 5
   597 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label200 (h:*label200)
-    * call *label11 *invalid :status1*retval (m:*label200) (h:*label200)
-    * label *label200
+  598 label *label511
+  599 write :status1:text processor2 ".status1"
+  600 label *label512
   601 set :supplyBlock:block ALMQJN-silicon-smelter4
   602 set :supplyBlock:ore @coal
   603 setaddr :supplyBlock*retaddr *label201 (h:*label201)
 
   609 sensor *tmp264 ALMQJN-silicon-smelter4 @sand
   610 jump *label202 greaterThanEq *tmp264 5
   611 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label204 (h:*label204)
-    * call *label11 *invalid :status1*retval (m:*label204) (h:*label204)
-    * label *label204
+  612 label *label513
+  613 write :status1:text processor2 ".status1"
+  614 label *label514
   615 set :supplyBlock:block ALMQJN-silicon-smelter4
   616 set :supplyBlock:ore @sand
   617 setaddr :supplyBlock*retaddr *label205 (h:*label205)
 
   628 sensor *tmp270 AJRJM-combustion-generator3 @coal
   629 jump *label208 greaterThanEq *tmp270 2
   630 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label210 (h:*label210)
-    * call *label11 *invalid :status1*retval (m:*label210) (h:*label210)
-    * label *label210
+  631 label *label515
+  632 write :status1:text processor2 ".status1"
+  633 label *label516
   634 set :supplyBlock:block AJRJM-combustion-generator3
   635 set :supplyBlock:ore @coal
   636 setaddr :supplyBlock*retaddr *label211 (h:*label211)
 
   658 op mul *tmp285 A©JNJP-unloader6 .powerTarget
   659 jump *label218 greaterThanEq *tmp284 *tmp285
   660 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label220 (h:*label220)
-    * call *label11 *invalid :status1*retval (m:*label220) (h:*label220)
-    * label *label220
+  661 label *label517
+  662 write :status1:text processor2 ".status1"
+  663 label *label518
   664 set :mineOre.1:ore @coal
   665 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   666 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
 
   670 sensor *tmp288 .core @silicon
   671 jump *label222 greaterThanEq *tmp288 silicon
   672 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label224 (h:*label224)
-    * call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
-    * label *label224
+  673 label *label519
+  674 write :status1:text processor2 ".status1"
+  675 label *label520
   676 sensor :supplyBase0:coal .core @coal
   677 sensor :supplyBase0:sand .core @sand
   678 select *tmp294 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   685 sensor *tmp295 .core @copper
   686 jump *label228 greaterThanEq *tmp295 copper
   687 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label230 (h:*label230)
-    * call *label11 *invalid :status1*retval (m:*label230) (h:*label230)
-    * label *label230
+  688 label *label521
+  689 write :status1:text processor2 ".status1"
+  690 label *label522
   691 set :mineOre.1:ore @copper
   692 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   693 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
 
   697 sensor *tmp298 .core @lead
   698 jump *label232 greaterThanEq *tmp298 lead
   699 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label234 (h:*label234)
-    * call *label11 *invalid :status1*retval (m:*label234) (h:*label234)
-    * label *label234
+  700 label *label523
+  701 write :status1:text processor2 ".status1"
+  702 label *label524
   703 set :mineOre.1:ore @lead
   704 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   705 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
 
   709 sensor *tmp301 .core @metaglass
   710 jump *label236 greaterThanEq *tmp301 metaglass
   711 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label238 (h:*label238)
-    * call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
-    * label *label238
+  712 label *label525
+  713 write :status1:text processor2 ".status1"
+  714 label *label526
   715 set :mineOre.1:ore @sand
   716 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   717 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
 
   719 jump *label237 always
   720 label *label236
   721 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label240 (h:*label240)
-    * call *label11 *invalid :status1*retval (m:*label240) (h:*label240)
-    * label *label240
+  722 label *label527
+  723 write :status1:text processor2 ".status1"
+  724 label *label528
   725 sensor :supplyBase0:coal.1 .core @coal
   726 sensor :supplyBase0:sand.1 .core @sand
   727 select *tmp307 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   739 jump *label215 always
   740 label *label214
   741 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label244 (h:*label244)
-    * call *label11 *invalid :status1*retval (m:*label244) (h:*label244)
-    * label *label244
+  742 label *label529
+  743 write :status1:text processor2 ".status1"
+  744 label *label530
   745 set :fetchBlock:block .titaniumDrill
   746 set :fetchBlock:item @titanium
   747 setaddr :fetchBlock*retaddr *label245 (h:*label245)
 
   906 label *label268
   907 return :lineUpUnits*retaddr
   908 end
-    * label *label11
-    * write :status1:text processor2 ".status1"
-    * label *label274
-    * return :status1*retaddr
-    * end
   909 label *label24
   910 set :status2:text "Mining "
   911 set :status2:item :mineOre.1:ore

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   524 jump *label169 equal .thoriumContainer false
   525 set :status1:text "Phase 2: servicing thorium drill"
   526 label *label505
-    * write :status1:text processor2 ".status1"
+  527 write "Phase 2: servicing thorium drill" processor2 ".status1"
   528 label *label506
   529 sensor *tmp239 .thoriumBattery @totalPower
   530 jump *label173 greaterThanEq *tmp239 2000
 
   561 jump *label182 lessThanEq *tmp84 3
   562 set :status1:text "Phase 1: supplying base"
   563 label *label507
-    * write :status1:text processor2 ".status1"
+  564 write "Phase 1: supplying base" processor2 ".status1"
   565 label *label508
   566 set :mineOre.1:ore @coal
   567 setaddr :mineOre.1*retaddr *label186 (h:*label186)
 
   578 jump *label192 greaterThanEq *tmp255 5
   579 set :status1:text "Goal 1: graphite requirement"
   580 label *label509
-    * write :status1:text processor2 ".status1"
+  581 write "Goal 1: graphite requirement" processor2 ".status1"
   582 label *label510
   583 set :supplyBlock:block AJEMJJ-graphite-press0
   584 set :supplyBlock:ore @coal
 
   596 jump *label198 greaterThanEq *tmp261 5
   597 set :status1:text "Goal 2: coal for silicon requirement"
   598 label *label511
-    * write :status1:text processor2 ".status1"
+  599 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   600 label *label512
   601 set :supplyBlock:block ALMQJN-silicon-smelter4
   602 set :supplyBlock:ore @coal
 
   610 jump *label202 greaterThanEq *tmp264 5
   611 set :status1:text "Goal 3: sand for silicon requirement"
   612 label *label513
-    * write :status1:text processor2 ".status1"
+  613 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   614 label *label514
   615 set :supplyBlock:block ALMQJN-silicon-smelter4
   616 set :supplyBlock:ore @sand
 
   629 jump *label208 greaterThanEq *tmp270 2
   630 set :status1:text "Goal 4: supplying generator"
   631 label *label515
-    * write :status1:text processor2 ".status1"
+  632 write "Goal 4: supplying generator" processor2 ".status1"
   633 label *label516
   634 set :supplyBlock:block AJRJM-combustion-generator3
   635 set :supplyBlock:ore @coal
 
   659 jump *label218 greaterThanEq *tmp284 *tmp285
   660 set :status1:text "Goal 5: supplying generator"
   661 label *label517
-    * write :status1:text processor2 ".status1"
+  662 write "Goal 5: supplying generator" processor2 ".status1"
   663 label *label518
   664 set :mineOre.1:ore @coal
   665 setaddr :mineOre.1*retaddr *label221 (h:*label221)
 
   671 jump *label222 greaterThanEq *tmp288 silicon
   672 set :status1:text "Goal 6: silicon requirement"
   673 label *label519
-    * write :status1:text processor2 ".status1"
+  674 write "Goal 6: silicon requirement" processor2 ".status1"
   675 label *label520
   676 sensor :supplyBase0:coal .core @coal
   677 sensor :supplyBase0:sand .core @sand
 
   686 jump *label228 greaterThanEq *tmp295 copper
   687 set :status1:text "Goal 7: copper requirement"
   688 label *label521
-    * write :status1:text processor2 ".status1"
+  689 write "Goal 7: copper requirement" processor2 ".status1"
   690 label *label522
   691 set :mineOre.1:ore @copper
   692 setaddr :mineOre.1*retaddr *label231 (h:*label231)
 
   698 jump *label232 greaterThanEq *tmp298 lead
   699 set :status1:text "Goal 8: lead requirement"
   700 label *label523
-    * write :status1:text processor2 ".status1"
+  701 write "Goal 8: lead requirement" processor2 ".status1"
   702 label *label524
   703 set :mineOre.1:ore @lead
   704 setaddr :mineOre.1*retaddr *label235 (h:*label235)
 
   710 jump *label236 greaterThanEq *tmp301 metaglass
   711 set :status1:text "Goal 9: metaglass requirement"
   712 label *label525
-    * write :status1:text processor2 ".status1"
+  713 write "Goal 9: metaglass requirement" processor2 ".status1"
   714 label *label526
   715 set :mineOre.1:ore @sand
   716 setaddr :mineOre.1*retaddr *label239 (h:*label239)
 
   720 label *label236
   721 set :status1:text "Goal 10: supplying base"
   722 label *label527
-    * write :status1:text processor2 ".status1"
+  723 write "Goal 10: supplying base" processor2 ".status1"
   724 label *label528
   725 sensor :supplyBase0:coal.1 .core @coal
   726 sensor :supplyBase0:sand.1 .core @sand
 
   740 label *label214
   741 set :status1:text "Goal 11: Fetching titanium"
   742 label *label529
-    * write :status1:text processor2 ".status1"
+  743 write "Goal 11: Fetching titanium" processor2 ".status1"
   744 label *label530
   745 set :fetchBlock:block .titaniumDrill
   746 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   522 op max *tmp237 0 *tmp236
   523 write *tmp237 processor7 ".sandTarget"
   524 jump *label169 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   525 label *label505
   526 write "Phase 2: servicing thorium drill" processor2 ".status1"
   527 label *label506
 
   558 label *label169
   559 read *tmp84 .controller ".monos"
   560 jump *label182 lessThanEq *tmp84 3
-    * set :status1:text "Phase 1: supplying base"
   561 label *label507
   562 write "Phase 1: supplying base" processor2 ".status1"
   563 label *label508
 
   574 jump *label190 greaterThanEq *tmp252 graphite
   575 sensor *tmp255 AJEMJJ-graphite-press0 @coal
   576 jump *label192 greaterThanEq *tmp255 5
-    * set :status1:text "Goal 1: graphite requirement"
   577 label *label509
   578 write "Goal 1: graphite requirement" processor2 ".status1"
   579 label *label510
 
   591 jump *label196 greaterThanEq *tmp258 silicon
   592 sensor *tmp261 ALMQJN-silicon-smelter4 @coal
   593 jump *label198 greaterThanEq *tmp261 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   594 label *label511
   595 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   596 label *label512
 
   604 label *label198
   605 sensor *tmp264 ALMQJN-silicon-smelter4 @sand
   606 jump *label202 greaterThanEq *tmp264 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   607 label *label513
   608 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   609 label *label514
 
   622 jump *label206 greaterThanEq *tmp267 .powerTarget
   623 sensor *tmp270 AJRJM-combustion-generator3 @coal
   624 jump *label208 greaterThanEq *tmp270 2
-    * set :status1:text "Goal 4: supplying generator"
   625 label *label515
   626 write "Goal 4: supplying generator" processor2 ".status1"
   627 label *label516
 
   651 sensor *tmp284 AJTJK-battery1 @totalPower
   652 op mul *tmp285 A©JNJP-unloader6 .powerTarget
   653 jump *label218 greaterThanEq *tmp284 *tmp285
-    * set :status1:text "Goal 5: supplying generator"
   654 label *label517
   655 write "Goal 5: supplying generator" processor2 ".status1"
   656 label *label518
 
   662 label *label218
   663 sensor *tmp288 .core @silicon
   664 jump *label222 greaterThanEq *tmp288 silicon
-    * set :status1:text "Goal 6: silicon requirement"
   665 label *label519
   666 write "Goal 6: silicon requirement" processor2 ".status1"
   667 label *label520
 
   676 label *label222
   677 sensor *tmp295 .core @copper
   678 jump *label228 greaterThanEq *tmp295 copper
-    * set :status1:text "Goal 7: copper requirement"
   679 label *label521
   680 write "Goal 7: copper requirement" processor2 ".status1"
   681 label *label522
 
   687 label *label228
   688 sensor *tmp298 .core @lead
   689 jump *label232 greaterThanEq *tmp298 lead
-    * set :status1:text "Goal 8: lead requirement"
   690 label *label523
   691 write "Goal 8: lead requirement" processor2 ".status1"
   692 label *label524
 
   698 label *label232
   699 sensor *tmp301 .core @metaglass
   700 jump *label236 greaterThanEq *tmp301 metaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   701 label *label525
   702 write "Goal 9: metaglass requirement" processor2 ".status1"
   703 label *label526
 
   707 label *label239
   708 jump *label237 always
   709 label *label236
-    * set :status1:text "Goal 10: supplying base"
   710 label *label527
   711 write "Goal 10: supplying base" processor2 ".status1"
   712 label *label528
 
   726 label *label217
   727 jump *label215 always
   728 label *label214
-    * set :status1:text "Goal 11: Fetching titanium"
   729 label *label529
   730 write "Goal 11: Fetching titanium" processor2 ".status1"
   731 label *label530

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 (-4 instructions):
 
   540 label *label177
   541 set :supplyBlockFromCore:target .thoriumGenerator
   542 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label180 (h:*label180)
-    * call *label27 *invalid :supplyBlockFromCore*retval (m:*label180) (h:*label180)
-    * label *label180
+  543 label *label531
+  544 sensor *tmp340 :supplyBlockFromCore:target @itemCapacity
+  545 op min :transportStatus:target *tmp340 30
+  546 set :transportStatus:item :supplyBlockFromCore:item
+  547 setaddr :transportStatus*retaddr *label532 (h:*label532)
+  548 call *label14 *invalid :transportStatus*retval (m:*label532) (h:*label532)
+  549 label *label532
+  550 set :status2:text "Transferring "
+  551 set :status2:item :supplyBlockFromCore:item
+  552 set :status2:block :supplyBlockFromCore:target
+  553 setaddr :status2*retaddr *label533 (h:*label533)
+  554 call *label12 *invalid :status2*retval (m:*label533) (h:*label533)
+  555 label *label533
+  556 set :moveToEmpty:x .coreX
+  557 set :moveToEmpty:y .coreY
+  558 setaddr :moveToEmpty*retaddr *label534 (h:*label534)
+  559 call *label18 *invalid :moveToEmpty*retval (m:*label534) (h:*label534)
+  560 label *label534
+  561 setaddr :dropAll*retaddr *label535 (h:*label535)
+  562 call *label19 *invalid :dropAll*retval (m:*label535) (h:*label535)
+  563 label *label535
+  564 label *label536
+  565 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  566 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  567 op notEqual *tmp343 :supplyBlockFromCore:unitItem null
+  568 op notEqual *tmp344 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  569 op land *tmp345 *tmp343 *tmp344
+  570 jump *label537 equal *tmp345 false
+  571 ucontrol itemDrop @air 1000
+  572 label *label537
+  573 label *label538
+  574 label *label539
+  575 sensor *tmp347 @unit :supplyBlockFromCore:item
+  576 op lessThan *tmp348 *tmp347 30
+  577 sensor *tmp349 .core :supplyBlockFromCore:item
+  578 op land *tmp350 *tmp348 *tmp349
+  579 jump *label536 notEqual *tmp350 false
+  580 label *label540
+  581 set :depositItems:block :supplyBlockFromCore:target
+  582 set :depositItems:item :supplyBlockFromCore:item
+  583 setaddr :depositItems*retaddr *label541 (h:*label541)
+  584 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
+  585 label *label541
+  586 label *label542
   587 label *label178
   588 label *label175
   589 label *label176
 
  1020 label *label289
  1021 return :supplyBlock*retaddr
  1022 end
-    * label *label27
-    * sensor *tmp340 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp340 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label295 (h:*label295)
-    * call *label14 *invalid :transportStatus*retval (m:*label295) (h:*label295)
-    * label *label295
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label296 (h:*label296)
-    * call *label12 *invalid :status2*retval (m:*label296) (h:*label296)
-    * label *label296
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label297 (h:*label297)
-    * call *label18 *invalid :moveToEmpty*retval (m:*label297) (h:*label297)
-    * label *label297
-    * setaddr :dropAll*retaddr *label298 (h:*label298)
-    * call *label19 *invalid :dropAll*retval (m:*label298) (h:*label298)
-    * label *label298
-    * label *label299
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp343 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp344 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp345 *tmp343 *tmp344
-    * jump *label302 equal *tmp345 false
-    * ucontrol itemDrop @air 1000
-    * label *label302
-    * label *label303
-    * label *label300
-    * sensor *tmp347 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp348 *tmp347 30
-    * sensor *tmp349 .core :supplyBlockFromCore:item
-    * op land *tmp350 *tmp348 *tmp349
-    * jump *label299 notEqual *tmp350 false
-    * label *label301
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label304 (h:*label304)
-    * call *label21 *invalid :depositItems*retval (m:*label304) (h:*label304)
-    * label *label304
-    * label *label294
-    * return :supplyBlockFromCore*retaddr
-    * end
  1023 label *label29
  1024 read *tmp352 :unpackCfg:cfg 1
  1025 op sub *tmp353 *tmp352 74

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   541 set :supplyBlockFromCore:target .thoriumGenerator
   542 set :supplyBlockFromCore:item @coal
   543 label *label531
-    * sensor *tmp340 :supplyBlockFromCore:target @itemCapacity
+  544 sensor *tmp340 .thoriumGenerator @itemCapacity
   545 op min :transportStatus:target *tmp340 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  546 set :transportStatus:item @coal
   547 setaddr :transportStatus*retaddr *label532 (h:*label532)
   548 call *label14 *invalid :transportStatus*retval (m:*label532) (h:*label532)
   549 label *label532
   550 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  551 set :status2:item @coal
+  552 set :status2:block .thoriumGenerator
   553 setaddr :status2*retaddr *label533 (h:*label533)
   554 call *label12 *invalid :status2*retval (m:*label533) (h:*label533)
   555 label *label533
 
   562 call *label19 *invalid :dropAll*retval (m:*label535) (h:*label535)
   563 label *label535
   564 label *label536
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
+  565 ucontrol itemTake .core @coal 30
   566 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   567 op notEqual *tmp343 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp344 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  568 op notEqual *tmp344 :supplyBlockFromCore:unitItem @coal
   569 op land *tmp345 *tmp343 *tmp344
   570 jump *label537 equal *tmp345 false
   571 ucontrol itemDrop @air 1000
   572 label *label537
   573 label *label538
   574 label *label539
-    * sensor *tmp347 @unit :supplyBlockFromCore:item
+  575 sensor *tmp347 @unit @coal
   576 op lessThan *tmp348 *tmp347 30
-    * sensor *tmp349 .core :supplyBlockFromCore:item
+  577 sensor *tmp349 .core @coal
   578 op land *tmp350 *tmp348 *tmp349
   579 jump *label536 notEqual *tmp350 false
   580 label *label540
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  581 set :depositItems:block .thoriumGenerator
+  582 set :depositItems:item @coal
   583 setaddr :depositItems*retaddr *label541 (h:*label541)
   584 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
   585 label *label541

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   538 label *label179
   539 jump *label178 always
   540 label *label177
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   541 label *label531
   542 sensor *tmp340 .thoriumGenerator @itemCapacity
   543 op min :transportStatus:target *tmp340 30

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
  1274 end
  1275 label *label18
  1276 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label364 (h:*label364)
-    * call *label13 *invalid :status3*retval (m:*label364) (h:*label364)
-    * label *label364
+ 1277 label *label543
+ 1278 write :status3:text processor2 ".status3"
+ 1279 label *label544
  1280 label *label365
  1281 sensor *tmp447 @unit @firstItem
  1282 jump *label368 equal *tmp447 null
 
  1304 end
  1305 label *label21
  1306 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label375 (h:*label375)
-    * call *label13 *invalid :status3*retval (m:*label375) (h:*label375)
-    * label *label375
+ 1307 label *label545
+ 1308 write :status3:text processor2 ".status3"
+ 1309 label *label546
  1310 sensor *tmp454 @unit @firstItem
  1311 jump *label376 notEqual *tmp454 :depositItems:item
  1312 set :moveToBlock:block :depositItems:block
 
  1367 label *label390
  1368 label *label391
  1369 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label393 (h:*label393)
-    * call *label13 *invalid :status3*retval (m:*label393) (h:*label393)
-    * label *label393
+ 1370 label *label547
+ 1371 write :status3:text processor2 ".status3"
+ 1372 label *label548
  1373 op add :mineOre:stop @second 10
  1374 label *label394
  1375 sensor :mineOre:item @unit @firstItem
 
  1450 label *label386
  1451 return :mineOre*retaddr
  1452 end
-    * label *label13
-    * write :status3:text processor2 ".status3"
-    * label *label421
-    * return :status3*retaddr
-    * end
  1453 label *label20
  1454 sensor *tmp503 :moveToBlock:block @x
  1455 sensor *tmp504 :moveToBlock:block @y
 
  1476 end
  1477 label *label16
  1478 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label429 (h:*label429)
-    * call *label13 *invalid :status3*retval (m:*label429) (h:*label429)
-    * label *label429
+ 1479 label *label549
+ 1480 write :status3:text processor2 ".status3"
+ 1481 label *label550
  1482 op sub *tmp511 :moveTo:radius 0.5
  1483 label *label430
  1484 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1275 label *label18
  1276 set :status3:text "Moving..."
  1277 label *label543
-    * write :status3:text processor2 ".status3"
+ 1278 write "Moving..." processor2 ".status3"
  1279 label *label544
  1280 label *label365
  1281 sensor *tmp447 @unit @firstItem
 
  1305 label *label21
  1306 set :status3:text "Depositing..."
  1307 label *label545
-    * write :status3:text processor2 ".status3"
+ 1308 write "Depositing..." processor2 ".status3"
  1309 label *label546
  1310 sensor *tmp454 @unit @firstItem
  1311 jump *label376 notEqual *tmp454 :depositItems:item
 
  1368 label *label391
  1369 set :status3:text "Mining..."
  1370 label *label547
-    * write :status3:text processor2 ".status3"
+ 1371 write "Mining..." processor2 ".status3"
  1372 label *label548
  1373 op add :mineOre:stop @second 10
  1374 label *label394
 
  1477 label *label16
  1478 set :status3:text "Moving..."
  1479 label *label549
-    * write :status3:text processor2 ".status3"
+ 1480 write "Moving..." processor2 ".status3"
  1481 label *label550
  1482 op sub *tmp511 :moveTo:radius 0.5
  1483 label *label430

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1273 return :transportStatus*retaddr
  1274 end
  1275 label *label18
-    * set :status3:text "Moving..."
  1276 label *label543
  1277 write "Moving..." processor2 ".status3"
  1278 label *label544
 
  1302 return :dropAll*retaddr
  1303 end
  1304 label *label21
-    * set :status3:text "Depositing..."
  1305 label *label545
  1306 write "Depositing..." processor2 ".status3"
  1307 label *label546
 
  1364 label *label392
  1365 label *label390
  1366 label *label391
-    * set :status3:text "Mining..."
  1367 label *label547
  1368 write "Mining..." processor2 ".status3"
  1369 label *label548
 
  1472 return :locateOre*retaddr
  1473 end
  1474 label *label16
-    * set :status3:text "Moving..."
  1475 label *label549
  1476 write "Moving..." processor2 ".status3"
  1477 label *label550

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
  1309 jump *label376 notEqual *tmp454 :depositItems:item
  1310 set :moveToBlock:block :depositItems:block
  1311 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label378 (h:*label378)
-    * call *label20 *invalid :moveToBlock*retval (m:*label378) (h:*label378)
-    * label *label378
+ 1312 label *label551
+ 1313 sensor *tmp503 :moveToBlock:block @x
+ 1314 sensor *tmp504 :moveToBlock:block @y
+ 1315 set :moveTo:x *tmp503
+ 1316 set :moveTo:y *tmp504
+ 1317 set :moveTo:radius :moveToBlock:radius
+ 1318 setaddr :moveTo*retaddr *label552 (h:*label552)
+ 1319 call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
+ 1320 label *label552
+ 1321 label *label553
  1322 sensor :depositItems:cap :depositItems:block @itemCapacity
  1323 label *label379
  1324 ucontrol itemDrop :depositItems:block 30
 
  1454 label *label386
  1455 return :mineOre*retaddr
  1456 end
-    * label *label20
-    * sensor *tmp503 :moveToBlock:block @x
-    * sensor *tmp504 :moveToBlock:block @y
-    * set :moveTo:x *tmp503
-    * set :moveTo:y *tmp504
-    * set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label423 (h:*label423)
-    * call *label16 *invalid :moveTo*retval (m:*label423) (h:*label423)
-    * label *label423
-    * label *label422
-    * return :moveToBlock*retaddr
-    * end
  1457 label *label22
  1458 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
  1459 jump *label425 notEqual *tmp505 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1310 set :moveToBlock:block :depositItems:block
  1311 set :moveToBlock:radius 6
  1312 label *label551
-    * sensor *tmp503 :moveToBlock:block @x
-    * sensor *tmp504 :moveToBlock:block @y
+ 1313 sensor *tmp503 :depositItems:block @x
+ 1314 sensor *tmp504 :depositItems:block @y
  1315 set :moveTo:x *tmp503
  1316 set :moveTo:y *tmp504
-    * set :moveTo:radius :moveToBlock:radius
+ 1317 set :moveTo:radius 6
  1318 setaddr :moveTo*retaddr *label552 (h:*label552)
  1319 call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
  1320 label *label552

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
  1307 label *label546
  1308 sensor *tmp454 @unit @firstItem
  1309 jump *label376 notEqual *tmp454 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
  1310 label *label551
  1311 sensor *tmp503 :depositItems:block @x
  1312 sensor *tmp504 :depositItems:block @y

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
  1352 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1353 label *label387
  1354 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label388 (h:*label388)
-    * call *label22 *invalid :locateOre*retval (m:*label388) (h:*label388)
-    * label *label388
+ 1355 label *label554
+ 1356 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
+ 1357 jump *label556 notEqual *tmp505 false
+ 1358 set :error:error "Cannot locate ore"
+ 1359 setaddr :error*retaddr *label555 (h:*label555)
+ 1360 call *label15 *invalid :error*retval (m:*label555) (h:*label555)
+ 1361 label *label555
+ 1362 label *label556
+ 1363 label *label557
+ 1364 label *label558
  1365 set :mineOre:x :locateOre:x
  1366 set :mineOre:y :locateOre:y
  1367 set :moveToEmpty:x :locateOre:x
 
  1459 label *label386
  1460 return :mineOre*retaddr
  1461 end
-    * label *label22
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
-    * jump *label425 notEqual *tmp505 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label427 (h:*label427)
-    * call *label15 *invalid :error*retval (m:*label427) (h:*label427)
-    * label *label427
-    * label *label425
-    * label *label426
-    * label *label424
-    * return :locateOre*retaddr
-    * end
  1462 label *label16
  1463 label *label549
  1464 write "Moving..." processor2 ".status3"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1353 label *label387
  1354 set :locateOre:ore :mineOre:ore
  1355 label *label554
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
+ 1356 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
  1357 jump *label556 notEqual *tmp505 false
  1358 set :error:error "Cannot locate ore"
  1359 setaddr :error*retaddr *label555 (h:*label555)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
  1351 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1352 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1353 label *label387
-    * set :locateOre:ore :mineOre:ore
  1354 label *label554
  1355 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
  1356 jump *label556 notEqual *tmp505 false

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
  1313 set :moveTo:x *tmp503
  1314 set :moveTo:y *tmp504
  1315 set :moveTo:radius 6
-    * setaddr :moveTo*retaddr *label552 (h:*label552)
-    * call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
-    * label *label552
+ 1316 label *label559
+ 1317 label *label560
+ 1318 write "Moving..." processor2 ".status3"
+ 1319 label *label561
+ 1320 op sub *tmp511 :moveTo:radius 0.5
+ 1321 label *label562
+ 1322 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509
+ 1323 jump *label564 notEqual *tmp509 false
+ 1324 ucontrol approach :moveTo:x :moveTo:y *tmp511
+ 1325 label *label563
+ 1326 jump *label562 always
+ 1327 label *label564
+ 1328 label *label565
  1329 label *label553
  1330 sensor :depositItems:cap :depositItems:block @itemCapacity
  1331 label *label379
 
  1468 label *label386
  1469 return :mineOre*retaddr
  1470 end
-    * label *label16
-    * label *label549
-    * write "Moving..." processor2 ".status3"
-    * label *label550
-    * op sub *tmp511 :moveTo:radius 0.5
-    * label *label430
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509
-    * jump *label432 notEqual *tmp509 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp511
-    * label *label431
-    * jump *label430 always
-    * label *label432
-    * label *label428
-    * return :moveTo*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1317 label *label560
  1318 write "Moving..." processor2 ".status3"
  1319 label *label561
-    * op sub *tmp511 :moveTo:radius 0.5
+ 1320 op sub *tmp511 6 0.5
  1321 label *label562
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp509
+ 1322 ucontrol within *tmp503 *tmp504 6 *tmp509
  1323 jump *label564 notEqual *tmp509 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp511
+ 1324 ucontrol approach *tmp503 *tmp504 5.5
  1325 label *label563
  1326 jump *label562 always
  1327 label *label564

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1310 label *label551
  1311 sensor *tmp503 :depositItems:block @x
  1312 sensor *tmp504 :depositItems:block @y
-    * set :moveTo:x *tmp503
-    * set :moveTo:y *tmp504
-    * set :moveTo:radius 6
  1313 label *label559
  1314 label *label560
  1315 write "Moving..." processor2 ".status3"
  1316 label *label561
-    * op sub *tmp511 6 0.5
  1317 label *label562
  1318 ucontrol within *tmp503 *tmp504 6 *tmp509
  1319 jump *label564 notEqual *tmp509 false

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-4 instructions):
 
    92 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    93 jump *label65 equal *tmp144 false
    94 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label59 always
    95 label *label59
    96 set .titaniumDrill *tmp127
    97 write *tmp127 processor2 ".titaniumDrill"
 
   681 sensor *tmp276 .core @titanium
   682 op sub *tmp277 titanium *tmp276
   683 op min *tmp275 7 *tmp277
-    * jump *label213 always
   684 label *label213
   685 sensor *tmp279 .titaniumDrill @titanium
   686 jump *label214 greaterThanEq *tmp279 *tmp275
 
   837 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   838 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   839 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label251 always
   840 label *label251
   841 return :buildBlockFromCfg*retaddr
   842 end
 
  1252 write false .controller ":buildStop*finished"
  1253 write 2 .controller "@counter"
  1254 set :buildBlock*retval :buildBlock:built
-    * jump *label358 always
  1255 label *label358
  1256 return :buildBlock*retaddr
  1257 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   119 write .core :buildBlockFromCfg*retval ".core"
   120 write bank1 :buildBlockFromCfg*retval ".bank"
   121 label *label435
-    * read *tmp151 @this "AJEMJJ-graphite-press0"
+  122 set *tmp151 AJEMJJ-graphite-press0
   123 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   124 label *label436
   125 label *label439
-    * read *tmp151 @this "AJTJK-battery1"
+  126 set *tmp151 AJTJK-battery1
   127 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
   128 label *label440
   129 label *label443
-    * read *tmp151 @this "ALTJL-battery2"
+  130 set *tmp151 ALTJL-battery2
   131 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
   132 label *label444
   133 label *label447
-    * read *tmp151 @this "AJRJM-combustion-generator3"
+  134 set *tmp151 AJRJM-combustion-generator3
   135 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   136 label *label448
   137 label *label451
-    * read *tmp151 @this "ALMQJN-silicon-smelter4"
+  138 set *tmp151 ALMQJN-silicon-smelter4
   139 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   140 label *label452
   141 label *label455
-    * read *tmp151 @this "A{LNJO-inverted-sorter5"
+  142 set *tmp151 A{LNJO-inverted-sorter5
   143 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   144 label *label456
   145 label *label459
-    * read *tmp151 @this "A©JNJP-unloader6"
+  146 set *tmp151 A©JNJP-unloader6
   147 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   148 label *label460
   149 label *label463
-    * read *tmp151 @this "A{HNJQ-inverted-sorter7"
+  150 set *tmp151 A{HNJQ-inverted-sorter7
   151 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   152 label *label464
   153 label *label467
-    * read *tmp151 @this "A~JPJR-overflow-gate8"
+  154 set *tmp151 A~JPJR-overflow-gate8
   155 write *tmp151 :buildBlockFromCfg*retval "A~JPJR-overflow-gate8"
   156 label *label468
   157 label *label471
-    * read *tmp151 @this "AÕFFJS-micro-processor9"
+  158 set *tmp151 AÕFFJS-micro-processor9
   159 write *tmp151 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
   160 label *label472
   161 label *label72
 
  1042 label *label36
  1043 label *label476
  1044 op sign *tmp378 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp378
+ 1045 set :meetTarget:count *tmp378
  1046 label *label477
  1047 label *label480
  1048 op sign *tmp378 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-4 instructions):
 
   704 label *label520
   705 sensor :supplyBase0:coal .core @coal
   706 sensor :supplyBase0:sand .core @sand
-    * select *tmp294 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
-    * set :mineOre.1:ore *tmp294
+  707 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   708 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   709 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   710 label *label227
 
   748 label *label528
   749 sensor :supplyBase0:coal.1 .core @coal
   750 sensor :supplyBase0:sand.1 .core @sand
-    * select *tmp307 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
-    * set :mineOre.1:ore *tmp307
+  751 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   752 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   753 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   754 label *label243
 
  1039 end
  1040 label *label36
  1041 label *label476
-    * op sign *tmp378 :meetTarget:copper
-    * set :meetTarget:count *tmp378
+ 1042 op sign :meetTarget:count :meetTarget:copper
  1043 label *label477
  1044 label *label480
  1045 op sign *tmp378 :meetTarget:lead
 
  1245 wait 1e-15
  1246 read *tmp445 processor5 ":buildBlockAt*finished"
  1247 jump *label360 equal *tmp445 false
-    * read :buildBlock:built processor5 ":buildBlockAt*retval"
+ 1248 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1249 write false .controller ":buildStop*finished"
  1250 write 2 .controller "@counter"
-    * set :buildBlock*retval :buildBlock:built
  1251 label *label358
  1252 return :buildBlock*retaddr
  1253 end

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    26 ubind @poly
    27 set .builder @unit
    28 ulocate building core false @copper .coreX .coreY *tmp119 .core
-    * label *label51
    29 jump *label50 equal .core null
-    * label *label52
    30 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    31 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    32 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
 
    79 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    80 label *label64
    81 label *label62
-    * label *label63
    82 write @pneumatic-drill processor2 ".nextBlock"
    83 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    84 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    89 read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished"
    90 jump *label65 equal *tmp144 false
    91 read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label59
    92 set .titaniumDrill *tmp127
    93 write *tmp127 processor2 ".titaniumDrill"
    94 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
 
   114 write processor2 :buildBlockFromCfg*retval ".display"
   115 write .core :buildBlockFromCfg*retval ".core"
   116 write bank1 :buildBlockFromCfg*retval ".bank"
-    * label *label435
   117 set *tmp151 AJEMJJ-graphite-press0
   118 write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
-    * label *label436
-    * label *label439
   119 set *tmp151 AJTJK-battery1
   120 write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"
-    * label *label440
-    * label *label443
   121 set *tmp151 ALTJL-battery2
   122 write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"
-    * label *label444
-    * label *label447
   123 set *tmp151 AJRJM-combustion-generator3
   124 write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
-    * label *label448
-    * label *label451
   125 set *tmp151 ALMQJN-silicon-smelter4
   126 write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
-    * label *label452
-    * label *label455
   127 set *tmp151 A{LNJO-inverted-sorter5
   128 write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
-    * label *label456
-    * label *label459
   129 set *tmp151 A©JNJP-unloader6
   130 write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"
-    * label *label460
-    * label *label463
   131 set *tmp151 A{HNJQ-inverted-sorter7
   132 write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
-    * label *label464
-    * label *label467
   133 set *tmp151 A~JPJR-overflow-gate8
   134 write *tmp151 :buildBlockFromCfg*retval "A~JPJR-overflow-gate8"
-    * label *label468
-    * label *label471
   135 set *tmp151 AÕFFJS-micro-processor9
   136 write *tmp151 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
-    * label *label472
-    * label *label72
   137 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
   138 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   139 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
 
   152 label *label86
   153 write 1 .controller ".flareTarget"
   154 write 1 processor2 ".flareTarget"
-    * label *label87
   155 write 5 .controller ".monoTarget"
   156 write 5 processor2 ".monoTarget"
-    * label *label88
   157 write 85 .controller ".pressTarget"
   158 write 150 .controller ".smelterTarget"
   159 write 30 .controller ".kilnTarget"
 
   170 jump *label94 greaterThanEq *tmp156 300
   171 jump *label92 always
   172 label *label94
-    * label *label95
-    * label *label91
   173 read *tmp84 .controller ".monos"
   174 jump *label90 lessThan *tmp84 3
   175 label *label92
 
   218 set .graphiteSurplus 200
   219 write 2 .controller ".monoTarget"
   220 write 2 processor2 ".monoTarget"
-    * label *label106
   221 write 3 .controller ".polyTarget"
   222 write 3 processor2 ".polyTarget"
-    * label *label107
   223 set :buildBlockFromCfg.1:cfg "ALSIJa-silicon-smelter23"
   224 setaddr :buildBlockFromCfg.1*retaddr *label108 (h:*label108)
   225 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label108) (h:*label108)
 
   237 label *label111
   238 write 2 .controller ".flareTarget"
   239 write 2 processor2 ".flareTarget"
-    * label *label112
   240 label *label113
   241 read *tmp85 .controller ".polys"
   242 jump *label115 greaterThanEq *tmp85 3
   243 setaddr :supplyBase*retaddr *label116 (h:*label116)
   244 call *label35 *invalid :supplyBase*retval (m:*label116) (h:*label116)
   245 label *label116
-    * label *label114
   246 jump *label113 always
   247 label *label115
   248 write 2 .controller ".flareTarget"
   249 write 2 processor2 ".flareTarget"
-    * label *label117
   250 label *label118
   251 read *tmp83 .controller ".flares"
   252 jump *label120 greaterThanEq *tmp83 2
   253 setaddr :supplyBase*retaddr *label121 (h:*label121)
   254 call *label35 *invalid :supplyBase*retval (m:*label121) (h:*label121)
   255 label *label121
-    * label *label119
   256 jump *label118 always
   257 label *label120
   258 write @ore-titanium processor2 ".nextBlock"
 
   278 jump *label123 equal *tmp186 false
   279 write false processor3 ":stopLocation*finished"
   280 write 3 processor3 "@counter"
-    * label *label122
   281 write null processor2 ".nextBlock"
   282 set .graphiteSurplus 10
   283 set .metaglassSurplus 50
 
   306 call *label15 *invalid :error*retval (m:*label130) (h:*label130)
   307 label *label130
   308 label *label128
-    * label *label129
   309 write @laser-drill processor5 ":buildBlockAt:block"
   310 read *tmp55 processor3 ".drillX"
   311 write *tmp55 processor5 ":buildBlockAt:x"
 
   379 wait 1e-15
   380 read *tmp216 processor6 ":setThoriumContainer*finished"
   381 jump *label142 equal *tmp216 false
-    * label *label124
   382 write null processor2 ".nextBlock"
   383 label *label143
   384 read *tmp85 .controller ".polys"
 
   386 setaddr :supplyBase*retaddr *label146 (h:*label146)
   387 call *label35 *invalid :supplyBase*retval (m:*label146) (h:*label146)
   388 label *label146
-    * label *label144
   389 jump *label143 always
   390 label *label145
   391 set :buildBlockFromCfg.1:cfg "A©JFJd-unloader26"
 
   403 set .metaglassSurplus 10
   404 write 1 .controller ".megaTarget"
   405 write 1 processor2 ".megaTarget"
-    * label *label150
   406 setaddr :buildUnits*retaddr *label151 (h:*label151)
   407 call *label42 *invalid :buildUnits*retval (m:*label151) (h:*label151)
   408 label *label151
 
   416 label *label152
   417 ucontrol move :x :y
   418 ucontrol payEnter
-    * label *label153
   419 read *tmp86 .controller ".megas"
   420 jump *label152 equal *tmp86 false
-    * label *label154
   421 write true .controller ".finished"
   422 control enabled processor8 false
   423 control enabled processor7 false
 
   462 setaddr :lineUpUnits*retaddr *label166 (h:*label166)
   463 call *label44 *invalid :lineUpUnits*retval (m:*label166) (h:*label166)
   464 label *label166
-    * label *label161
   465 jump *label160 always
-    * label *label162
-    * label *label155
   466 end
   467 label *label15
   468 set .ERROR :error:error
   469 stop
-    * label *label167
   470 return :error*retaddr
   471 end
   472 label *label35
 
   475 op max *tmp237 0 *tmp236
   476 write *tmp237 processor7 ".sandTarget"
   477 jump *label169 equal .thoriumContainer false
-    * label *label505
   478 write "Phase 2: servicing thorium drill" processor2 ".status1"
-    * label *label506
   479 sensor *tmp239 .thoriumBattery @totalPower
   480 jump *label173 greaterThanEq *tmp239 2000
   481 sensor *tmp242 .thoriumGenerator @coal
 
   489 label *label179
   490 jump *label178 always
   491 label *label177
-    * label *label531
   492 sensor *tmp340 .thoriumGenerator @itemCapacity
   493 op min :transportStatus:target *tmp340 30
   494 set :transportStatus:item @coal
 
   518 jump *label537 equal *tmp345 false
   519 ucontrol itemDrop @air 1000
   520 label *label537
-    * label *label538
-    * label *label539
   521 sensor *tmp347 @unit @coal
   522 op lessThan *tmp348 *tmp347 30
   523 sensor *tmp349 .core @coal
   524 op land *tmp350 *tmp348 *tmp349
   525 jump *label536 notEqual *tmp350 false
-    * label *label540
   526 set :depositItems:block .thoriumGenerator
   527 set :depositItems:item @coal
   528 setaddr :depositItems*retaddr *label541 (h:*label541)
   529 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
   530 label *label541
-    * label *label542
   531 label *label178
   532 label *label175
-    * label *label176
   533 label *label173
-    * label *label174
   534 set :fetchBlock:block .thoriumContainer
   535 set :fetchBlock:item @thorium
   536 setaddr :fetchBlock*retaddr *label181 (h:*label181)
   537 call *label25 *invalid :fetchBlock*retval (m:*label181) (h:*label181)
   538 label *label181
-    * label *label171
   539 jump *label170 always
   540 label *label169
   541 read *tmp84 .controller ".monos"
   542 jump *label182 lessThanEq *tmp84 3
-    * label *label507
   543 write "Phase 1: supplying base" processor2 ".status1"
-    * label *label508
   544 set :mineOre.1:ore @coal
   545 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   546 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   547 label *label186
-    * label *label184
   548 jump *label183 always
   549 label *label182
   550 set :supplyBase0:supplied false
 
   553 jump *label190 greaterThanEq *tmp252 graphite
   554 sensor *tmp255 AJEMJJ-graphite-press0 @coal
   555 jump *label192 greaterThanEq *tmp255 5
-    * label *label509
   556 write "Goal 1: graphite requirement" processor2 ".status1"
-    * label *label510
   557 set :supplyBlock:block AJEMJJ-graphite-press0
   558 set :supplyBlock:ore @coal
   559 setaddr :supplyBlock*retaddr *label195 (h:*label195)
 
   561 label *label195
   562 set :supplyBase0:supplied true
   563 label *label192
-    * label *label193
   564 label *label190
-    * label *label191
   565 sensor *tmp258 .core @silicon
   566 jump *label196 greaterThanEq *tmp258 silicon
   567 sensor *tmp261 ALMQJN-silicon-smelter4 @coal
   568 jump *label198 greaterThanEq *tmp261 5
-    * label *label511
   569 write "Goal 2: coal for silicon requirement" processor2 ".status1"
-    * label *label512
   570 set :supplyBlock:block ALMQJN-silicon-smelter4
   571 set :supplyBlock:ore @coal
   572 setaddr :supplyBlock*retaddr *label201 (h:*label201)
 
   577 label *label198
   578 sensor *tmp264 ALMQJN-silicon-smelter4 @sand
   579 jump *label202 greaterThanEq *tmp264 5
-    * label *label513
   580 write "Goal 3: sand for silicon requirement" processor2 ".status1"
-    * label *label514
   581 set :supplyBlock:block ALMQJN-silicon-smelter4
   582 set :supplyBlock:ore @sand
   583 setaddr :supplyBlock*retaddr *label205 (h:*label205)
 
   585 label *label205
   586 set :supplyBase0:supplied true
   587 label *label202
-    * label *label203
   588 label *label199
   589 label *label196
-    * label *label197
   590 sensor *tmp267 AJTJK-battery1 @totalPower
   591 jump *label206 greaterThanEq *tmp267 .powerTarget
   592 sensor *tmp270 AJRJM-combustion-generator3 @coal
   593 jump *label208 greaterThanEq *tmp270 2
-    * label *label515
   594 write "Goal 4: supplying generator" processor2 ".status1"
-    * label *label516
   595 set :supplyBlock:block AJRJM-combustion-generator3
   596 set :supplyBlock:ore @coal
   597 setaddr :supplyBlock*retaddr *label211 (h:*label211)
 
   599 label *label211
   600 set :supplyBase0:supplied true
   601 label *label208
-    * label *label209
   602 label *label206
-    * label *label207
   603 label *label188
-    * label *label189
   604 set *tmp275 100
   605 sensor *tmp273 .core @titanium
   606 jump *label213 greaterThanEq *tmp273 titanium
 
   614 sensor *tmp284 AJTJK-battery1 @totalPower
   615 op mul *tmp285 A©JNJP-unloader6 .powerTarget
   616 jump *label218 greaterThanEq *tmp284 *tmp285
-    * label *label517
   617 write "Goal 5: supplying generator" processor2 ".status1"
-    * label *label518
   618 set :mineOre.1:ore @coal
   619 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   620 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
 
   623 label *label218
   624 sensor *tmp288 .core @silicon
   625 jump *label222 greaterThanEq *tmp288 silicon
-    * label *label519
   626 write "Goal 6: silicon requirement" processor2 ".status1"
-    * label *label520
   627 sensor :supplyBase0:coal .core @coal
   628 sensor :supplyBase0:sand .core @sand
   629 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   634 label *label222
   635 sensor *tmp295 .core @copper
   636 jump *label228 greaterThanEq *tmp295 copper
-    * label *label521
   637 write "Goal 7: copper requirement" processor2 ".status1"
-    * label *label522
   638 set :mineOre.1:ore @copper
   639 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   640 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
 
   643 label *label228
   644 sensor *tmp298 .core @lead
   645 jump *label232 greaterThanEq *tmp298 lead
-    * label *label523
   646 write "Goal 8: lead requirement" processor2 ".status1"
-    * label *label524
   647 set :mineOre.1:ore @lead
   648 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   649 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
 
   652 label *label232
   653 sensor *tmp301 .core @metaglass
   654 jump *label236 greaterThanEq *tmp301 metaglass
-    * label *label525
   655 write "Goal 9: metaglass requirement" processor2 ".status1"
-    * label *label526
   656 set :mineOre.1:ore @sand
   657 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   658 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   659 label *label239
   660 jump *label237 always
   661 label *label236
-    * label *label527
   662 write "Goal 10: supplying base" processor2 ".status1"
-    * label *label528
   663 sensor :supplyBase0:coal.1 .core @coal
   664 sensor :supplyBase0:sand.1 .core @sand
   665 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   672 label *label223
   673 label *label219
   674 label *label216
-    * label *label217
   675 jump *label215 always
   676 label *label214
-    * label *label529
   677 write "Goal 11: Fetching titanium" processor2 ".status1"
-    * label *label530
   678 set :fetchBlock:block .titaniumDrill
   679 set :fetchBlock:item @titanium
   680 setaddr :fetchBlock*retaddr *label245 (h:*label245)
   681 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   682 label *label245
   683 label *label215
-    * label *label187
   684 label *label183
   685 label *label170
-    * label *label168
   686 return :supplyBase*retaddr
   687 end
   688 label *label38
 
   711 set :buildRemoteBlock*retval :buildBlock*retval
   712 jump *label246 always
   713 label *label247
-    * label *label248
   714 set :buildRemoteBlock*retval false
   715 jump *label246 always
   716 label *label246
 
   743 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   744 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   745 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label251
   746 return :buildBlockFromCfg*retaddr
   747 end
   748 label *label40
 
   751 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   752 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   753 label *label255
-    * label *label254
   754 return :buildBlockFromCfg.1*retaddr
   755 end
   756 label *label41
 
   771 setaddr :meetTarget*retaddr *label258 (h:*label258)
   772 call *label36 *invalid :meetTarget*retval (m:*label258) (h:*label258)
   773 label *label258
-    * label *label256
   774 return :meetTarget.1*retaddr
   775 end
   776 label *label42
 
   792 write 0 .controller ".leadReserve"
   793 write 0 .controller ".siliconReserve"
   794 write 0 .controller ".graphiteReserve"
-    * label *label259
   795 return :buildUnits*retaddr
   796 end
   797 label *label43
   798 label *label262
   799 ubind :flagUnits:unit
   800 set :flagUnits:firstUnit @unit
-    * label *label263
   801 jump *label262 equal :flagUnits:firstUnit null
-    * label *label264
   802 set :flagUnits:x @thisx
   803 label *label265
   804 ucontrol flag :flagUnits:x
   805 op add :flagUnits:x :flagUnits:x 4
   806 ubind :flagUnits:unit
-    * label *label266
   807 jump *label265 notEqual @unit :flagUnits:firstUnit
-    * label *label267
-    * label *label261
   808 return :flagUnits*retaddr
   809 end
   810 label *label44
 
   818 jump *label272 equal *tmp318 false
   819 ucontrol stop
   820 label *label272
-    * label *label273
   821 ubind :lineUpUnits:unit
-    * label *label270
   822 jump *label269 notEqual @unit :lineUpUnits:firstUnit
-    * label *label271
-    * label *label268
   823 return :lineUpUnits*retaddr
   824 end
   825 label *label24
 
   835 setaddr :mineOre*retaddr *label277 (h:*label277)
   836 call *label23 *invalid :mineOre*retval (m:*label277) (h:*label277)
   837 label *label277
-    * label *label275
   838 return :mineOre.1*retaddr
   839 end
   840 label *label25
 
   869 jump *label286 equal *tmp329 false
   870 ucontrol itemDrop @air 1000
   871 label *label286
-    * label *label287
-    * label *label284
   872 sensor *tmp331 @unit :fetchBlock:item
   873 op lessThan *tmp332 *tmp331 30
   874 sensor *tmp333 :fetchBlock:block :fetchBlock:item
   875 op land *tmp334 *tmp332 *tmp333
   876 jump *label283 notEqual *tmp334 false
-    * label *label285
   877 set :depositItems:block .core
   878 set :depositItems:item :fetchBlock:item
   879 setaddr :depositItems*retaddr *label288 (h:*label288)
   880 call *label21 *invalid :depositItems*retval (m:*label288) (h:*label288)
   881 label *label288
-    * label *label278
   882 return :fetchBlock*retaddr
   883 end
   884 label *label26
 
   899 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
   900 label *label293
   901 label *label291
-    * label *label292
-    * label *label289
   902 return :supplyBlock*retaddr
   903 end
   904 label *label29
 
   922 sensor :unpackCfg:ti :unpackCfg:type @titanium
   923 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   924 sensor :unpackCfg:th :unpackCfg:type @thorium
-    * label *label305
   925 return :unpackCfg*retaddr
   926 end
   927 label *label36
-    * label *label476
   928 op sign :meetTarget:count :meetTarget:copper
-    * label *label477
-    * label *label480
   929 op sign *tmp378 :meetTarget:lead
   930 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label481
-    * label *label484
   931 op sign *tmp378 :meetTarget:graphite
   932 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label485
-    * label *label488
   933 op sign *tmp378 :meetTarget:silicon
   934 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label489
-    * label *label492
   935 op sign *tmp378 :meetTarget:titanium
   936 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label493
-    * label *label496
   937 op sign *tmp378 :meetTarget:metaglass
   938 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label497
-    * label *label500
   939 op sign *tmp378 :meetTarget:thorium
   940 op add :meetTarget:count :meetTarget:count *tmp378
-    * label *label501
-    * label *label309
   941 write :meetTarget:count processor2 ".totalTargets"
   942 write :meetTarget:block processor2 ".nextBlock"
   943 write :meetTarget:copper processor2 ".targetCopper"
 
   978 set *tmp390 false
   979 jump *label320 always
   980 label *label321
-    * label *label322
   981 sensor *tmp394 .core @lead
   982 jump *label323 greaterThanEq *tmp394 lead
   983 set *tmp390 false
   984 jump *label320 always
   985 label *label323
-    * label *label324
   986 sensor *tmp397 .core @graphite
   987 jump *label325 greaterThanEq *tmp397 graphite
   988 set *tmp390 false
   989 jump *label320 always
   990 label *label325
-    * label *label326
   991 sensor *tmp400 .core @silicon
   992 jump *label327 greaterThanEq *tmp400 silicon
   993 set *tmp390 false
   994 jump *label320 always
   995 label *label327
-    * label *label328
   996 sensor *tmp403 .core @titanium
   997 jump *label329 greaterThanEq *tmp403 titanium
   998 set *tmp390 false
   999 jump *label320 always
  1000 label *label329
-    * label *label330
  1001 sensor *tmp406 .core @metaglass
  1002 jump *label331 greaterThanEq *tmp406 metaglass
  1003 set *tmp390 false
  1004 jump *label320 always
  1005 label *label331
-    * label *label332
  1006 sensor *tmp409 .core @thorium
  1007 jump *label333 greaterThanEq *tmp409 thorium
  1008 set *tmp390 false
  1009 jump *label320 always
  1010 label *label333
-    * label *label334
  1011 set *tmp390 true
  1012 jump *label320 always
  1013 label *label320
 
  1015 setaddr :supplyBase*retaddr *label335 (h:*label335)
  1016 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1017 label *label335
-    * label *label318
  1018 jump *label317 always
  1019 label *label319
  1020 jump *label336 equal :meetTarget:forBuild false
 
  1030 set *tmp415 false
  1031 jump *label342 always
  1032 label *label343
-    * label *label344
  1033 sensor *tmp419 .core @lead
  1034 jump *label345 greaterThanEq *tmp419 lead
  1035 set *tmp415 false
  1036 jump *label342 always
  1037 label *label345
-    * label *label346
  1038 sensor *tmp422 .core @graphite
  1039 jump *label347 greaterThanEq *tmp422 graphite
  1040 set *tmp415 false
  1041 jump *label342 always
  1042 label *label347
-    * label *label348
  1043 sensor *tmp425 .core @silicon
  1044 jump *label349 greaterThanEq *tmp425 silicon
  1045 set *tmp415 false
  1046 jump *label342 always
  1047 label *label349
-    * label *label350
  1048 sensor *tmp428 .core @titanium
  1049 jump *label351 greaterThanEq *tmp428 titanium
  1050 set *tmp415 false
  1051 jump *label342 always
  1052 label *label351
-    * label *label352
  1053 sensor *tmp431 .core @metaglass
  1054 jump *label353 greaterThanEq *tmp431 metaglass
  1055 set *tmp415 false
  1056 jump *label342 always
  1057 label *label353
-    * label *label354
  1058 sensor *tmp434 .core @thorium
  1059 jump *label355 greaterThanEq *tmp434 thorium
  1060 set *tmp415 false
  1061 jump *label342 always
  1062 label *label355
-    * label *label356
  1063 set *tmp415 true
  1064 jump *label342 always
  1065 label *label342
 
  1067 setaddr :supplyBase*retaddr *label357 (h:*label357)
  1068 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1069 label *label357
-    * label *label340
  1070 jump *label339 always
  1071 label *label341
  1072 label *label336
-    * label *label337
-    * label *label306
  1073 return :meetTarget*retaddr
  1074 end
  1075 label *label37
 
  1102 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1103 write false .controller ":buildStop*finished"
  1104 write 2 .controller "@counter"
-    * label *label358
  1105 return :buildBlock*retaddr
  1106 end
  1107 label *label12
  1108 write :status2:text processor2 ".status2"
  1109 write :status2:item processor2 ".item2"
  1110 write :status2:block processor2 ".block2"
-    * label *label361
  1111 return :status2*retaddr
  1112 end
  1113 label *label14
  1114 write :transportStatus:target processor2 ".transportTarget"
  1115 write :transportStatus:item processor2 ".transportItem"
-    * label *label362
  1116 return :transportStatus*retaddr
  1117 end
  1118 label *label18
-    * label *label543
  1119 write "Moving..." processor2 ".status3"
-    * label *label544
  1120 label *label365
  1121 sensor *tmp447 @unit @firstItem
  1122 jump *label368 equal *tmp447 null
  1123 ucontrol itemDrop @air 1000
  1124 label *label368
-    * label *label369
  1125 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label366
  1126 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp450
  1127 jump *label365 equal *tmp450 false
-    * label *label367
-    * label *label363
  1128 return :moveToEmpty*retaddr
  1129 end
  1130 label *label19
 
  1132 sensor *tmp452 @unit @firstItem
  1133 jump *label373 equal *tmp452 null
  1134 ucontrol itemDrop @air 1000
-    * label *label372
  1135 jump *label371 always
  1136 label *label373
-    * label *label370
  1137 return :dropAll*retaddr
  1138 end
  1139 label *label21
-    * label *label545
  1140 write "Depositing..." processor2 ".status3"
-    * label *label546
  1141 sensor *tmp454 @unit @firstItem
  1142 jump *label376 notEqual *tmp454 :depositItems:item
-    * label *label551
  1143 sensor *tmp503 :depositItems:block @x
  1144 sensor *tmp504 :depositItems:block @y
-    * label *label559
-    * label *label560
  1145 write "Moving..." processor2 ".status3"
-    * label *label561
  1146 label *label562
  1147 ucontrol within *tmp503 *tmp504 6 *tmp509
  1148 jump *label564 notEqual *tmp509 false
  1149 ucontrol approach *tmp503 *tmp504 5.5
-    * label *label563
  1150 jump *label562 always
  1151 label *label564
-    * label *label565
-    * label *label553
  1152 sensor :depositItems:cap :depositItems:block @itemCapacity
  1153 label *label379
  1154 ucontrol itemDrop :depositItems:block 30
-    * label *label380
  1155 sensor *tmp458 @unit @firstItem
  1156 op mul *tmp459 *tmp458 :depositItems:cap
  1157 sensor *tmp460 :depositItems:block :depositItems:item
  1158 jump *label379 greaterThan *tmp459 *tmp460
-    * label *label381
  1159 jump *label377 always
  1160 label *label376
  1161 label *label382
  1162 sensor *tmp462 @unit @firstItem
  1163 jump *label384 equal *tmp462 null
  1164 ucontrol itemDrop @air 1000
-    * label *label383
  1165 jump *label382 always
  1166 label *label384
  1167 label *label377
 
  1170 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1171 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1172 label *label385
-    * label *label374
  1173 return :depositItems*retaddr
  1174 end
  1175 label *label23
 
  1179 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1180 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1181 label *label387
-    * label *label554
  1182 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
  1183 jump *label556 notEqual *tmp505 false
  1184 set :error:error "Cannot locate ore"
 
  1186 call *label15 *invalid :error*retval (m:*label555) (h:*label555)
  1187 label *label555
  1188 label *label556
-    * label *label557
-    * label *label558
  1189 set :mineOre:x :locateOre:x
  1190 set :mineOre:y :locateOre:y
  1191 set :moveToEmpty:x :locateOre:x
 
  1199 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1200 label *label392
  1201 label *label390
-    * label *label391
-    * label *label547
  1202 write "Mining..." processor2 ".status3"
-    * label *label548
  1203 op add :mineOre:stop @second 10
  1204 label *label394
  1205 sensor :mineOre:item @unit @firstItem
 
  1209 jump *label397 equal *tmp472 false
  1210 jump *label396 always
  1211 label *label397
-    * label *label398
  1212 ucontrol mine :mineOre:x :mineOre:y
  1213 jump *label399 lessThanEq @second :mineOre:stop
  1214 jump *label396 always
  1215 label *label399
-    * label *label400
  1216 jump *label401 notEqual .noTarget false
  1217 sensor *tmp479 .core @copper
  1218 jump *label404 greaterThanEq *tmp479 copper
  1219 set *tmp478 false
  1220 jump *label403 always
  1221 label *label404
-    * label *label405
  1222 sensor *tmp482 .core @lead
  1223 jump *label406 greaterThanEq *tmp482 lead
  1224 set *tmp478 false
  1225 jump *label403 always
  1226 label *label406
-    * label *label407
  1227 sensor *tmp485 .core @graphite
  1228 jump *label408 greaterThanEq *tmp485 graphite
  1229 set *tmp478 false
  1230 jump *label403 always
  1231 label *label408
-    * label *label409
  1232 sensor *tmp488 .core @silicon
  1233 jump *label410 greaterThanEq *tmp488 silicon
  1234 set *tmp478 false
  1235 jump *label403 always
  1236 label *label410
-    * label *label411
  1237 sensor *tmp491 .core @titanium
  1238 jump *label412 greaterThanEq *tmp491 titanium
  1239 set *tmp478 false
  1240 jump *label403 always
  1241 label *label412
-    * label *label413
  1242 sensor *tmp494 .core @metaglass
  1243 jump *label414 greaterThanEq *tmp494 metaglass
  1244 set *tmp478 false
  1245 jump *label403 always
  1246 label *label414
-    * label *label415
  1247 sensor *tmp497 .core @thorium
  1248 jump *label416 greaterThanEq *tmp497 thorium
  1249 set *tmp478 false
  1250 jump *label403 always
  1251 label *label416
-    * label *label417
  1252 set *tmp478 true
  1253 jump *label403 always
  1254 label *label403
  1255 jump *label418 equal *tmp478 false
  1256 jump *label396 always
  1257 label *label418
-    * label *label419
  1258 label *label401
-    * label *label402
-    * label *label395
  1259 sensor *tmp501 @unit @totalItems
  1260 jump *label394 lessThan *tmp501 :mineOre:amount
  1261 label *label396
 
  1265 setaddr :depositItems*retaddr *label420 (h:*label420)
  1266 call *label21 *invalid :depositItems*retval (m:*label420) (h:*label420)
  1267 label *label420
-    * label *label386
  1268 return :mineOre*retaddr
  1269 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-4 instructions):
 
   167 call *label35 *invalid :supplyBase*retval (m:*label93) (h:*label93)
   168 label *label93
   169 sensor *tmp156 AJTJK-battery1 @totalPower
-    * jump *label94 greaterThanEq *tmp156 300
-    * jump *label92 always
+  170 jump *label92 lessThan *tmp156 300
   171 label *label94
   172 read *tmp84 .controller ".monos"
   173 jump *label90 lessThan *tmp84 3
 
  1205 op notEqual *tmp470 :mineOre:item null
  1206 op notEqual *tmp471 :mineOre:item :mineOre:ore
  1207 op land *tmp472 *tmp470 *tmp471
-    * jump *label397 equal *tmp472 false
-    * jump *label396 always
+ 1208 jump *label396 notEqual *tmp472 false
  1209 label *label397
  1210 ucontrol mine :mineOre:x :mineOre:y
-    * jump *label399 lessThanEq @second :mineOre:stop
-    * jump *label396 always
+ 1211 jump *label396 greaterThan @second :mineOre:stop
  1212 label *label399
  1213 jump *label401 notEqual .noTarget false
  1214 sensor *tmp479 .core @copper
 
  1249 set *tmp478 true
  1250 jump *label403 always
  1251 label *label403
-    * jump *label418 equal *tmp478 false
-    * jump *label396 always
+ 1252 jump *label396 notEqual *tmp478 false
  1253 label *label418
  1254 label *label401
  1255 sensor *tmp501 @unit @totalItems

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   168 label *label93
   169 sensor *tmp156 AJTJK-battery1 @totalPower
   170 jump *label92 lessThan *tmp156 300
-    * label *label94
   171 read *tmp84 .controller ".monos"
   172 jump *label90 lessThan *tmp84 3
   173 label *label92
 
  1205 op notEqual *tmp471 :mineOre:item :mineOre:ore
  1206 op land *tmp472 *tmp470 *tmp471
  1207 jump *label396 notEqual *tmp472 false
-    * label *label397
  1208 ucontrol mine :mineOre:x :mineOre:y
  1209 jump *label396 greaterThan @second :mineOre:stop
-    * label *label399
  1210 jump *label401 notEqual .noTarget false
  1211 sensor *tmp479 .core @copper
  1212 jump *label404 greaterThanEq *tmp479 copper
 
  1247 jump *label403 always
  1248 label *label403
  1249 jump *label396 notEqual *tmp478 false
-    * label *label418
  1250 label *label401
  1251 sensor *tmp501 @unit @totalItems
  1252 jump *label394 lessThan *tmp501 :mineOre:amount

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   238 label *label113
   239 read *tmp85 .controller ".polys"
   240 jump *label115 greaterThanEq *tmp85 3
-    * setaddr :supplyBase*retaddr *label116 (h:*label116)
+  241 setaddr :supplyBase*retaddr *label113 (h:*label116)
   242 call *label35 *invalid :supplyBase*retval (m:*label116) (h:*label116)
   243 label *label116
   244 jump *label113 always
 
   248 label *label118
   249 read *tmp83 .controller ".flares"
   250 jump *label120 greaterThanEq *tmp83 2
-    * setaddr :supplyBase*retaddr *label121 (h:*label121)
+  251 setaddr :supplyBase*retaddr *label118 (h:*label121)
   252 call *label35 *invalid :supplyBase*retval (m:*label121) (h:*label121)
   253 label *label121
   254 jump *label118 always
 
   381 label *label143
   382 read *tmp85 .controller ".polys"
   383 jump *label145 greaterThanEq *tmp85 3
-    * setaddr :supplyBase*retaddr *label146 (h:*label146)
+  384 setaddr :supplyBase*retaddr *label143 (h:*label146)
   385 call *label35 *invalid :supplyBase*retval (m:*label146) (h:*label146)
   386 label *label146
   387 jump *label143 always
 
   457 label *label165
   458 op sub :lineUpUnits:y @thisy 18
   459 set :lineUpUnits:unit @flare
-    * setaddr :lineUpUnits*retaddr *label166 (h:*label166)
+  460 setaddr :lineUpUnits*retaddr *label160 (h:*label166)
   461 call *label44 *invalid :lineUpUnits*retval (m:*label166) (h:*label166)
   462 label *label166
   463 jump *label160 always
 
   482 jump *label177 greaterThanEq *tmp245 50
   483 set :supplyBlock:block .thoriumGenerator
   484 set :supplyBlock:ore @coal
-    * setaddr :supplyBlock*retaddr *label179 (h:*label179)
+  485 setaddr :supplyBlock*retaddr *label178 (h:*label179)
   486 call *label26 *invalid :supplyBlock*retval (m:*label179) (h:*label179)
   487 label *label179
   488 jump *label178 always
 
   534 setaddr :fetchBlock*retaddr *label181 (h:*label181)
   535 call *label25 *invalid :fetchBlock*retval (m:*label181) (h:*label181)
   536 label *label181
-    * jump *label170 always
+  537 return :supplyBase*retaddr
   538 label *label169
   539 read *tmp84 .controller ".monos"
   540 jump *label182 lessThanEq *tmp84 3
 
   543 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   544 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   545 label *label186
-    * jump *label183 always
+  546 return :supplyBase*retaddr
   547 label *label182
   548 set :supplyBase0:supplied false
   549 jump *label188 notEqual A©JNJP-unloader6 null
 
   608 label *label213
   609 sensor *tmp279 .titaniumDrill @titanium
   610 jump *label214 greaterThanEq *tmp279 *tmp275
-    * jump *label216 notEqual :supplyBase0:supplied false
+  611 jump *label215 notEqual :supplyBase0:supplied false
   612 sensor *tmp284 AJTJK-battery1 @totalPower
   613 op mul *tmp285 A©JNJP-unloader6 .powerTarget
   614 jump *label218 greaterThanEq *tmp284 *tmp285
 
   617 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   618 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
   619 label *label221
-    * jump *label219 always
+  620 return :supplyBase*retaddr
   621 label *label218
   622 sensor *tmp288 .core @silicon
   623 jump *label222 greaterThanEq *tmp288 silicon
 
   628 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   629 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   630 label *label227
-    * jump *label223 always
+  631 return :supplyBase*retaddr
   632 label *label222
   633 sensor *tmp295 .core @copper
   634 jump *label228 greaterThanEq *tmp295 copper
 
   637 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   638 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
   639 label *label231
-    * jump *label229 always
+  640 return :supplyBase*retaddr
   641 label *label228
   642 sensor *tmp298 .core @lead
   643 jump *label232 greaterThanEq *tmp298 lead
 
   646 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   647 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
   648 label *label235
-    * jump *label233 always
+  649 return :supplyBase*retaddr
   650 label *label232
   651 sensor *tmp301 .core @metaglass
   652 jump *label236 greaterThanEq *tmp301 metaglass
 
   655 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   656 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   657 label *label239
-    * jump *label237 always
+  658 return :supplyBase*retaddr
   659 label *label236
   660 write "Goal 10: supplying base" processor2 ".status1"
   661 sensor :supplyBase0:coal.1 .core @coal
 
   670 label *label223
   671 label *label219
   672 label *label216
-    * jump *label215 always
+  673 return :supplyBase*retaddr
   674 label *label214
   675 write "Goal 11: Fetching titanium" processor2 ".status1"
   676 set :fetchBlock:block .titaniumDrill
 
   707 call *label37 *invalid :buildBlock*retval (m:*label250) (h:*label250)
   708 label *label250
   709 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label246 always
+  710 return :buildRemoteBlock*retaddr
   711 label *label247
   712 set :buildRemoteBlock*retval false
-    * jump *label246 always
+  713 return :buildRemoteBlock*retaddr
   714 label *label246
   715 return :buildRemoteBlock*retaddr
   716 end
 
  1010 jump *label320 always
  1011 label *label320
  1012 jump *label319 notEqual *tmp390 false
-    * setaddr :supplyBase*retaddr *label335 (h:*label335)
+ 1013 setaddr :supplyBase*retaddr *label317 (h:*label335)
  1014 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1015 label *label335
  1016 jump *label317 always
 
  1062 jump *label342 always
  1063 label *label342
  1064 jump *label341 notEqual *tmp415 false
-    * setaddr :supplyBase*retaddr *label357 (h:*label357)
+ 1065 setaddr :supplyBase*retaddr *label339 (h:*label357)
  1066 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1067 label *label357
  1068 jump *label339 always

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-30 instructions):
 
   240 jump *label115 greaterThanEq *tmp85 3
   241 setaddr :supplyBase*retaddr *label113 (h:*label116)
   242 call *label35 *invalid :supplyBase*retval (m:*label116) (h:*label116)
-    * label *label116
-    * jump *label113 always
   243 label *label115
   244 write 2 .controller ".flareTarget"
   245 write 2 processor2 ".flareTarget"
 
   248 jump *label120 greaterThanEq *tmp83 2
   249 setaddr :supplyBase*retaddr *label118 (h:*label121)
   250 call *label35 *invalid :supplyBase*retval (m:*label121) (h:*label121)
-    * label *label121
-    * jump *label118 always
   251 label *label120
   252 write @ore-titanium processor2 ".nextBlock"
   253 ubind @flare
 
   379 jump *label145 greaterThanEq *tmp85 3
   380 setaddr :supplyBase*retaddr *label143 (h:*label146)
   381 call *label35 *invalid :supplyBase*retval (m:*label146) (h:*label146)
-    * label *label146
-    * jump *label143 always
   382 label *label145
   383 set :buildBlockFromCfg.1:cfg "A©JFJd-unloader26"
   384 setaddr :buildBlockFromCfg.1*retaddr *label147 (h:*label147)
 
   453 set :lineUpUnits:unit @flare
   454 setaddr :lineUpUnits*retaddr *label160 (h:*label166)
   455 call *label44 *invalid :lineUpUnits*retval (m:*label166) (h:*label166)
-    * label *label166
-    * jump *label160 always
-    * end
   456 label *label15
   457 set .ERROR :error:error
   458 stop
   459 return :error*retaddr
-    * end
   460 label *label35
   461 sensor *tmp235 .core @silicon
   462 op sub *tmp236 silicon *tmp235
 
   474 set :supplyBlock:ore @coal
   475 setaddr :supplyBlock*retaddr *label178 (h:*label179)
   476 call *label26 *invalid :supplyBlock*retval (m:*label179) (h:*label179)
-    * label *label179
-    * jump *label178 always
   477 label *label177
   478 sensor *tmp340 .thoriumGenerator @itemCapacity
   479 op min :transportStatus:target *tmp340 30
 
   652 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   653 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   654 label *label243
-    * label *label237
-    * label *label233
-    * label *label229
-    * label *label223
-    * label *label219
-    * label *label216
   655 return :supplyBase*retaddr
   656 label *label214
   657 write "Goal 11: Fetching titanium" processor2 ".status1"
 
   661 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   662 label *label245
   663 label *label215
-    * label *label183
-    * label *label170
   664 return :supplyBase*retaddr
-    * end
   665 label *label38
   666 op add *tmp308 :buildRemoteBlock:x :buildRemoteBlock:y
   667 jump *label247 lessThanEq *tmp308 0
 
   690 label *label247
   691 set :buildRemoteBlock*retval false
   692 return :buildRemoteBlock*retaddr
-    * label *label246
-    * return :buildRemoteBlock*retaddr
-    * end
   693 label *label39
   694 set :unpackCfg:cfg :buildBlockFromCfg:cfg
   695 setaddr :unpackCfg*retaddr *label252 (h:*label252)
 
   718 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   719 set :buildBlockFromCfg*retval :buildBlock*retval
   720 return :buildBlockFromCfg*retaddr
-    * end
   721 label *label40
   722 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   723 set :buildBlockFromCfg:config null
 
   725 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   726 label *label255
   727 return :buildBlockFromCfg.1*retaddr
-    * end
   728 label *label41
   729 set :unpackCfg:cfg :meetTarget.1:cfg
   730 setaddr :unpackCfg*retaddr *label257 (h:*label257)
 
   744 call *label36 *invalid :meetTarget*retval (m:*label258) (h:*label258)
   745 label *label258
   746 return :meetTarget.1*retaddr
-    * end
   747 label *label42
   748 set :meetTarget:block 0
   749 set :meetTarget:copper 0
 
   764 write 0 .controller ".siliconReserve"
   765 write 0 .controller ".graphiteReserve"
   766 return :buildUnits*retaddr
-    * end
   767 label *label43
   768 label *label262
   769 ubind :flagUnits:unit
 
   776 ubind :flagUnits:unit
   777 jump *label265 notEqual @unit :flagUnits:firstUnit
   778 return :flagUnits*retaddr
-    * end
   779 label *label44
   780 ubind :lineUpUnits:unit
   781 set :lineUpUnits:firstUnit @unit
 
   790 ubind :lineUpUnits:unit
   791 jump *label269 notEqual @unit :lineUpUnits:firstUnit
   792 return :lineUpUnits*retaddr
-    * end
   793 label *label24
   794 set :status2:text "Mining "
   795 set :status2:item :mineOre.1:ore
 
   804 call *label23 *invalid :mineOre*retval (m:*label277) (h:*label277)
   805 label *label277
   806 return :mineOre.1*retaddr
-    * end
   807 label *label25
   808 sensor *tmp322 :fetchBlock:block @itemCapacity
   809 op min :transportStatus:target *tmp322 30
 
   847 call *label21 *invalid :depositItems*retval (m:*label288) (h:*label288)
   848 label *label288
   849 return :fetchBlock*retaddr
-    * end
   850 label *label26
   851 set :status2:text "Supplying "
   852 set :status2:item :supplyBlock:ore
 
   866 label *label293
   867 label *label291
   868 return :supplyBlock*retaddr
-    * end
   869 label *label29
   870 read *tmp352 :unpackCfg:cfg 1
   871 op sub *tmp353 *tmp352 74
 
   888 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   889 sensor :unpackCfg:th :unpackCfg:type @thorium
   890 return :unpackCfg*retaddr
-    * end
   891 label *label36
   892 op sign :meetTarget:count :meetTarget:copper
   893 op sign *tmp378 :meetTarget:lead
 
   978 jump *label319 notEqual *tmp390 false
   979 setaddr :supplyBase*retaddr *label317 (h:*label335)
   980 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
-    * label *label335
-    * jump *label317 always
   981 label *label319
   982 jump *label336 equal :meetTarget:forBuild false
   983 write false .controller ":buildStart*finished"
 
  1028 jump *label341 notEqual *tmp415 false
  1029 setaddr :supplyBase*retaddr *label339 (h:*label357)
  1030 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
-    * label *label357
-    * jump *label339 always
  1031 label *label341
  1032 label *label336
  1033 return :meetTarget*retaddr
-    * end
  1034 label *label37
  1035 op notEqual *tmp438 .controller null
  1036 set :meetTarget:block :buildBlock:block
 
  1062 write false .controller ":buildStop*finished"
  1063 write 2 .controller "@counter"
  1064 return :buildBlock*retaddr
-    * end
  1065 label *label12
  1066 write :status2:text processor2 ".status2"
  1067 write :status2:item processor2 ".item2"
  1068 write :status2:block processor2 ".block2"
  1069 return :status2*retaddr
-    * end
  1070 label *label14
  1071 write :transportStatus:target processor2 ".transportTarget"
  1072 write :transportStatus:item processor2 ".transportItem"
  1073 return :transportStatus*retaddr
-    * end
  1074 label *label18
  1075 write "Moving..." processor2 ".status3"
  1076 label *label365
 
  1082 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp450
  1083 jump *label365 equal *tmp450 false
  1084 return :moveToEmpty*retaddr
-    * end
  1085 label *label19
  1086 label *label371
  1087 sensor *tmp452 @unit @firstItem
 
  1090 jump *label371 always
  1091 label *label373
  1092 return :dropAll*retaddr
-    * end
  1093 label *label21
  1094 write "Depositing..." processor2 ".status3"
  1095 sensor *tmp454 @unit @firstItem
 
  1125 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1126 label *label385
  1127 return :depositItems*retaddr
-    * end
  1128 label *label23
  1129 op min :mineOre:amount :mineOre:amount 30
  1130 set :transportStatus:target :mineOre:amount
 
  1213 call *label21 *invalid :depositItems*retval (m:*label420) (h:*label420)
  1214 label *label420
  1215 return :mineOre*retaddr
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    25 label *label50
    26 ubind @poly
    27 set .builder @unit
-    * ulocate building core false @copper .coreX .coreY *tmp119 .core
+   28 ulocate building core false @copper .coreX .coreY 0 .core
    29 jump *label50 equal .core null
    30 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    31 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
  1132 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1133 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1134 label *label387
-    * ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp505 *tmp506
+ 1135 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp505 0
  1136 jump *label556 notEqual *tmp505 false
  1137 set :error:error "Cannot locate ore"
  1138 setaddr :error*retaddr *label555 (h:*label555)

Final code before resolving virtual instructions:

    0:  set .ERROR ""                                                Actions.mnd: remote var ERROR = "";
        label *label45                                               CoreBuilder.mnd: require "Display.mnd" remote display;
    1:  read *tmp33 processor2 "*signature"                          ...
    2:  jump *label45 notEqual *tmp33 "0:v1"                         ...
        label *label46                                               CoreBuilder.mnd: require "OreLocator.mnd" remote oreLocator;
    3:  read *tmp73 processor3 "*signature"                          ...
    4:  jump *label46 notEqual *tmp73 "3290b8c661787058:v1"          ...
        label *label47                                               CoreBuilder.mnd: require "MonoController.mnd" remote monoController;
    5:  read *tmp97 processor7 "*signature"                          ...
    6:  jump *label47 notEqual *tmp97 "0:v1"                         ...
        label *label48                                               CoreBuilder.mnd: require "PolyController.mnd" remote polyController;
    7:  read *tmp99 processor6 "*signature"                          ...
    8:  jump *label48 notEqual *tmp99 "5f95d6f938a8462e:v1"          ...
        label *label49                                               CoreBuilder.mnd: require "BlockBuilder.mnd" remote blockBuilder;
    9:  read *tmp115 processor5 "*signature"                         ...
   10:  jump *label49 notEqual *tmp115 "319badb7a8e178a4:v1"         ...
   11:  set .titaniumDrill null                                      CoreBuilder.mnd: var
   12:  set .thoriumBattery null                                     ...
   13:  set .thoriumContainer null                                   ...
   14:  set .thoriumGenerator null                                   ...
   15:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   16:  set .graphiteSurplus 20                                      ...
   17:  set .siliconSurplus 20                                       ...
   18:  set .metaglassSurplus 20                                     ...
   19:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label50                                               CoreBuilder.mnd: do
   20:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   21:  set .builder @unit                                           ...
   22:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   23:  jump *label50 equal .core null                               CoreBuilder.mnd: do
   24:  set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"        CoreBuilder.mnd: buildBlockFromCfg(PRESS);
   25:  setaddr :buildBlockFromCfg.1*retaddr *label53                ...
   26:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label53                                               ...
   27:  set :buildBlockFromCfg.1:cfg "AJTJK-battery1"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY1);
   28:  setaddr :buildBlockFromCfg.1*retaddr *label54                ...
   29:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label54                                               ...
   30:  set :buildBlockFromCfg.1:cfg "ALTJL-battery2"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   31:  setaddr :buildBlockFromCfg.1*retaddr *label55                ...
   32:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label55                                               ...
   33:  set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"  CoreBuilder.mnd: buildBlockFromCfg(GENERATOR);
   34:  setaddr :buildBlockFromCfg.1*retaddr *label56                ...
   35:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label56                                               ...
   36:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   37:  set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"       CoreBuilder.mnd: buildBlockFromCfg(SMELTER);
   38:  setaddr :buildBlockFromCfg.1*retaddr *label57                ...
   39:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label57                                               ...
   40:  set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   41:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
   42:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
   43:  set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"             CoreBuilder.mnd: meetTarget(cfg);
   44:  setaddr :meetTarget.1*retaddr *label60                       ...
   45:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label60                                               ...
   46:  write @titanium processor2 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   47:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   48:  write .coreY processor3 ":findDrillLocation:y"               ...
   49:  write @unit processor3 ":findDrillLocation:unit"             ...
   50:  write @titanium processor3 ":findDrillLocation:item"         ...
   51:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
   52:  write 2 processor3 ":findDrillLocation:size"                 ...
   53:  write 4 processor3 ":findDrillLocation:limit"                ...
   54:  write false processor3 ":findDrillLocation*finished"         ...
   55:  write 1 processor3 "@counter"                                ...
        label *label61                                               ...
   56:  wait 1e-15                                                   ...
   57:  read *tmp138 processor3 ":findDrillLocation*finished"        ...
   58:  jump *label61 equal *tmp138 false                            ...
   59:  read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocat ...
   60:  read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocat ...
   61:  read :buildFirstTitaniumDrill:result processor3 ":findDrillL ...
   62:  jump *label62 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   63:  set :error:error "Cannot locate spot for titanium drill"     ...
   64:  setaddr :error*retaddr *label64                              ...
   65:  call *label15 *invalid :error*retval                         ...
        label *label64                                               ...
        label *label62                                               ...
   66:  write @pneumatic-drill processor2 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   67:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   68:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   69:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   70:  write 2 processor5 "@counter"                                ...
        label *label65                                               ...
   71:  wait 1e-15                                                   ...
   72:  read *tmp144 processor5 ":buildFirstTitaniumDrillAt*finished ...
   73:  jump *label65 equal *tmp144 false                            ...
   74:  read *tmp127 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   75:  set .titaniumDrill *tmp127                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   76:  write *tmp127 processor2 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   77:  set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"              CoreBuilder.mnd: buildBlockFromCfg(UNLOADER1);
   78:  setaddr :buildBlockFromCfg.1*retaddr *label66                ...
   79:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label66                                               ...
   80:  set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
   81:  setaddr :buildBlockFromCfg.1*retaddr *label67                ...
   82:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label67                                               ...
   83:  set :buildBlockFromCfg.1:cfg "A~JPJR-overflow-gate8"         CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
   84:  setaddr :buildBlockFromCfg.1*retaddr *label68                ...
   85:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label68                                               ...
   86:  set .graphiteSurplus 80                                      CoreBuilder.mnd: graphiteSurplus = 80;
   87:  set :buildBlockFromCfg:cfg "AÕFFJS-micro-processor9"         CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, coreControllerConfig);
   88:  set :buildBlockFromCfg:config processor10                    ...
   89:  setaddr :buildBlockFromCfg*retaddr *label69                  ...
   90:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label69                                               ...
   91:  set .controller :buildBlockFromCfg*retval                    ...
   92:  write processor1 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
   93:  write processor2 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
   94:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
   95:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
   96:  set *tmp151 AJEMJJ-graphite-press0                           CoreBuilder.mnd: controller.write(@this.read(block), block);
   97:  write *tmp151 :buildBlockFromCfg*retval "AJEMJJ-graphite-pre ...
   98:  set *tmp151 AJTJK-battery1                                  ...
   99:  write *tmp151 :buildBlockFromCfg*retval "AJTJK-battery1"    ...
  100:  set *tmp151 ALTJL-battery2                                  ...
  101:  write *tmp151 :buildBlockFromCfg*retval "ALTJL-battery2"    ...
  102:  set *tmp151 AJRJM-combustion-generator3                     ...
  103:  write *tmp151 :buildBlockFromCfg*retval "AJRJM-combustion-g ...
  104:  set *tmp151 ALMQJN-silicon-smelter4                          ...
  105:  write *tmp151 :buildBlockFromCfg*retval "ALMQJN-silicon-smel ...
  106:  set *tmp151 A{LNJO-inverted-sorter5                          ...
  107:  write *tmp151 :buildBlockFromCfg*retval "A{LNJO-inverted-sor ...
  108:  set *tmp151 A©JNJP-unloader6                                 ...
  109:  write *tmp151 :buildBlockFromCfg*retval "A©JNJP-unloader6"   ...
  110:  set *tmp151 A{HNJQ-inverted-sorter7                          ...
  111:  write *tmp151 :buildBlockFromCfg*retval "A{HNJQ-inverted-sor ...
  112:  set *tmp151 A~JPJR-overflow-gate8                            ...
  113:  write *tmp151 :buildBlockFromCfg*retval "A~JPJR-overflow-gat ...
  114:  set *tmp151 AÕFFJS-micro-processor9                          ...
  115:  write *tmp151 :buildBlockFromCfg*retval "AÕFFJS-micro-proces ...
  116:  set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"           CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  117:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  118:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  119:  set :buildBlockFromCfg.1:cfg "A©FJJU-unloader11"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER2);
  120:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  121:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  122:  set :buildBlockFromCfg.1:cfg "A~DJJV-overflow-gate12"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  123:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  124:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  125:  set :buildBlockFromCfg.1:cfg "A¾BFLW-air-factory13"          CoreBuilder.mnd: buildBlockFromCfg(AIR_FACTORY);
  126:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  127:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  128:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  129:  write 1 processor2 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  130:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  131:  write 5 processor2 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  132:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  133:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  134:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  135:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  136:  set .siliconSurplus 20                                       ...
  137:  setaddr :buildUnits*retaddr *label89                         CoreBuilder.mnd: buildUnits();
  138:  call *label42 *invalid :buildUnits*retval                    ...
        label *label89                                               ...
        label *label90                                               CoreBuilder.mnd: do
  139:  setaddr :supplyBase*retaddr *label93                         CoreBuilder.mnd: supplyBase();
  140:  call *label35 *invalid :supplyBase*retval                    ...
        label *label93                                               ...
  141:  sensor *tmp156 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < 300 then break; end;
  142:  jump *label92 lessThan *tmp156 300                           ...
  143:  read *tmp84 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  144:  jump *label90 lessThan *tmp84 3                              CoreBuilder.mnd: do
        label *label92                                               ...
  145:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  146:  set :buildBlockFromCfg.1:cfg "A©NHJX-unloader14"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  147:  setaddr :buildBlockFromCfg.1*retaddr *label96                ...
  148:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label96                                               ...
  149:  set :buildBlockFromCfg.1:cfg "A{NJJY-inverted-sorter15"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  150:  setaddr :buildBlockFromCfg.1*retaddr *label97                ...
  151:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label97                                               ...
  152:  set :buildBlockFromCfg.1:cfg "ANOMJZ-kiln16"                 CoreBuilder.mnd: buildBlockFromCfg(KILN);
  153:  setaddr :buildBlockFromCfg.1*retaddr *label98                ...
  154:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label98                                               ...
  155:  set :buildBlockFromCfg.1:cfg "A¡AOJ[-water-extractor17"      CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  156:  setaddr :buildBlockFromCfg.1*retaddr *label99                ...
  157:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label99                                               ...
  158:  set :buildBlockFromCfg.1:cfg "AAKJ\-steam-generator18"      CoreBuilder.mnd: buildBlockFromCfg(STEAM_GEN);
  159:  setaddr :buildBlockFromCfg.1*retaddr *label100               ...
  160:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label100                                              ...
  161:  set :buildBlockFromCfg.1:cfg "AKFRJ]-multi-press19"          CoreBuilder.mnd: buildBlockFromCfg(MULTIPRESS);
  162:  setaddr :buildBlockFromCfg.1*retaddr *label101               ...
  163:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label101                                              ...
  164:  set :buildBlockFromCfg.1:cfg "A©HFJ^-unloader20"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER4);
  165:  setaddr :buildBlockFromCfg.1*retaddr *label102               ...
  166:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label102                                              ...
  167:  set :buildBlockFromCfg.1:cfg "A{HDJ_-inverted-sorter21"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT4);
  168:  setaddr :buildBlockFromCfg.1*retaddr *label103               ...
  169:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label103                                              ...
  170:  set :buildBlockFromCfg.1:cfg "AÀF@L`-additive-reconstructor2 CoreBuilder.mnd: buildBlockFromCfg(ADDITIVE_REC);
  171:  setaddr :buildBlockFromCfg.1*retaddr *label104               ...
  172:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label104                                              ...
  173:  setaddr :buildUnits*retaddr *label105                        CoreBuilder.mnd: buildUnits();
  174:  call *label42 *invalid :buildUnits*retval                    ...
        label *label105                                              ...
  175:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  176:  set .metaglassSurplus 100                                    CoreBuilder.mnd: metaglassSurplus = 100;
  177:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  178:  write 2 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  179:  write 2 processor2 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  180:  write 3 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  181:  write 3 processor2 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  182:  set :buildBlockFromCfg.1:cfg "ALSIJa-silicon-smelter23"      CoreBuilder.mnd: buildBlockFromCfg(SMELTER2);
  183:  setaddr :buildBlockFromCfg.1*retaddr *label108               ...
  184:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label108                                              ...
  185:  set :buildBlockFromCfg.1:cfg "A{PJJb-inverted-sorter24"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT5);
  186:  setaddr :buildBlockFromCfg.1*retaddr *label109               ...
  187:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label109                                              ...
  188:  set :buildBlockFromCfg.1:cfg "A{PHJc-inverted-sorter25"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT6);
  189:  setaddr :buildBlockFromCfg.1*retaddr *label110               ...
  190:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label110                                              ...
  191:  setaddr :buildUnits*retaddr *label111                        CoreBuilder.mnd: buildUnits();
  192:  call *label42 *invalid :buildUnits*retval                    ...
        label *label111                                              ...
  193:  write 2 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  194:  write 2 processor2 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
        label *label113                                              CoreBuilder.mnd: while controller.polys < 3 do
  195:  read *tmp85 .controller ".polys"                             ...
  196:  jump *label115 greaterThanEq *tmp85 3                        ...
  197:  setaddr :supplyBase*retaddr *label113                        CoreBuilder.mnd: supplyBase();
  198:  call *label35 *invalid :supplyBase*retval                    ...
        label *label115                                              CoreBuilder.mnd: while controller.polys < 3 do
  199:  write 2 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  200:  write 2 processor2 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
        label *label118                                              CoreBuilder.mnd: while controller.flares < 2 do
  201:  read *tmp83 .controller ".flares"                            ...
  202:  jump *label120 greaterThanEq *tmp83 2                        ...
  203:  setaddr :supplyBase*retaddr *label118                        CoreBuilder.mnd: supplyBase();
  204:  call *label35 *invalid :supplyBase*retval                    ...
        label *label120                                              CoreBuilder.mnd: while controller.flares < 2 do
  205:  write @ore-titanium processor2 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  206:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  207:  read :blocksBuildTitaniumDrills:current processor3 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  208:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  209:  write .coreY processor3 ":findDrillLocation:y"               ...
  210:  write @unit processor3 ":findDrillLocation:unit"             ...
  211:  write @titanium processor3 ":findDrillLocation:item"         ...
  212:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
  213:  write 4 processor3 ":findDrillLocation:size"                 ...
  214:  write 1000000000 processor3 ":findDrillLocation:limit"       ...
  215:  write false processor3 ":findDrillLocation*finished"         ...
  216:  write 1 processor3 "@counter"                                ...
  217:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  218:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  219:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  220:  write false processor5 ":buildTitaniumDrills*finished"       ...
  221:  write 3 processor5 "@counter"                                ...
        label *label123                                              ...
  222:  wait 1e-15                                                   ...
  223:  read *tmp186 processor5 ":buildTitaniumDrills*finished"      ...
  224:  jump *label123 equal *tmp186 false                           ...
  225:  write false processor3 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  226:  write 3 processor3 "@counter"                                ...
  227:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  228:  set .graphiteSurplus 10                                      CoreBuilder.mnd: graphiteSurplus = 10;
  229:  set .metaglassSurplus 50                                     CoreBuilder.mnd: metaglassSurplus = 50;
  230:  write .coreX processor3 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  231:  write .coreY processor3 ":layoutThoriumDrill:y"              ...
  232:  write @unit processor3 ":layoutThoriumDrill:unit"            ...
  233:  write 7 processor3 ":layoutThoriumDrill:limit"               ...
  234:  write false processor3 ":layoutThoriumDrill*finished"        ...
  235:  write 2 processor3 "@counter"                                ...
        label *label125                                              ...
  236:  wait 1e-15                                                   ...
  237:  read *tmp191 processor3 ":layoutThoriumDrill*finished"       ...
  238:  jump *label125 equal *tmp191 false                           ...
  239:  set :meetTarget.1:cfg "AJJJ~-laser-drill52"                 CoreBuilder.mnd: meetTarget(LASER_DRILL);
  240:  setaddr :meetTarget.1*retaddr *label126                      ...
  241:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label126                                              ...
        label *label127                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  242:  wait 1e-15                                                   ...
  243:  read *tmp193 processor3 ":layoutThoriumDrill*finished"       ...
  244:  jump *label127 equal *tmp193 false                           ...
  245:  read :buildThoriumDrill:result processor3 ":layoutThoriumDri ...
  246:  jump *label128 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  247:  set :error:error "Cannot locate spot for thorium drill"      ...
  248:  setaddr :error*retaddr *label130                             ...
  249:  call *label15 *invalid :error*retval                         ...
        label *label130                                              ...
        label *label128                                              ...
  250:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);
  251:  read *tmp55 processor3 ".drillX"                             ...
  252:  write *tmp55 processor5 ":buildBlockAt:x"                    ...
  253:  read *tmp56 processor3 ".drillY"                             ...
  254:  write *tmp56 processor5 ":buildBlockAt:y"                    ...
  255:  write null processor5 ":buildBlockAt:rotation"               ...
  256:  write 0 processor5 ":buildBlockAt:config"                    ...
  257:  write -1 processor5 ":buildBlockAt:index"                    ...
  258:  write false processor5 ":buildBlockAt*finished"              ...
  259:  write 1 processor5 "@counter"                                ...
        label *label131                                              ...
  260:  wait 1e-15                                                   ...
  261:  read *tmp203 processor5 ":buildBlockAt*finished"             ...
  262:  jump *label131 equal *tmp203 false                           ...
  263:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  264:  set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"         CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  265:  read :buildRemoteBlock:x processor3 ".water1X"               ...
  266:  read :buildRemoteBlock:y processor3 ".water1Y"               ...
  267:  setaddr :buildRemoteBlock*retaddr *label132                  ...
  268:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label132                                              ...
  269:  read :buildRemoteBlock:x processor3 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  270:  read :buildRemoteBlock:y processor3 ".water2Y"               ...
  271:  setaddr :buildRemoteBlock*retaddr *label133                  ...
  272:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label133                                              ...
  273:  set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"         CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  274:  read :buildRemoteBlock:x processor3 ".generatorX"            ...
  275:  read :buildRemoteBlock:y processor3 ".generatorY"            ...
  276:  setaddr :buildRemoteBlock*retaddr *label134                  ...
  277:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label134                                              ...
  278:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  279:  set :buildRemoteBlock:cfg "AFHJT-power-node10"              CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
  280:  read :buildRemoteBlock:x processor3 ".node1X"                ...
  281:  read :buildRemoteBlock:y processor3 ".node1Y"                ...
  282:  setaddr :buildRemoteBlock*retaddr *label135                  ...
  283:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label135                                              ...
  284:  read :buildRemoteBlock:x processor3 ".node2X"                CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
  285:  read :buildRemoteBlock:y processor3 ".node2Y"                ...
  286:  setaddr :buildRemoteBlock*retaddr *label136                  ...
  287:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label136                                              ...
  288:  set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"             CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  289:  read :buildRemoteBlock:x processor3 ".panelX"                ...
  290:  read :buildRemoteBlock:y processor3 ".panelY"                ...
  291:  setaddr :buildRemoteBlock*retaddr *label137                  ...
  292:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label137                                              ...
  293:  set :buildRemoteBlock:cfg "AJTJK-battery1"                  CoreBuilder.mnd: thoriumBattery = buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  294:  read :buildRemoteBlock:x processor3 ".batteryX"              ...
  295:  read :buildRemoteBlock:y processor3 ".batteryY"              ...
  296:  setaddr :buildRemoteBlock*retaddr *label138                  ...
  297:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label138                                              ...
  298:  set .thoriumBattery :buildRemoteBlock*retval                 ...
  299:  set :buildRemoteBlock:cfg "A¨JJJ~-container52"               CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  300:  read :buildRemoteBlock:x processor3 ".containerX"            ...
  301:  read :buildRemoteBlock:y processor3 ".containerY"            ...
  302:  setaddr :buildRemoteBlock*retaddr *label139                  ...
  303:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label139                                              ...
  304:  select .thoriumContainer equal :buildRemoteBlock*retval null CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  305:  write .thoriumDrill processor2 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  306:  write .thoriumContainer processor2 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  307:  write .thoriumContainer processor6 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  308:  write false processor6 ":setThoriumContainer*finished"       ...
  309:  write 3 processor6 "@counter"                                ...
        label *label142                                              ...
  310:  wait 1e-15                                                   ...
  311:  read *tmp216 processor6 ":setThoriumContainer*finished"      ...
  312:  jump *label142 equal *tmp216 false                           ...
  313:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
        label *label143                                              CoreBuilder.mnd: while controller.polys < 3 do
  314:  read *tmp85 .controller ".polys"                             ...
  315:  jump *label145 greaterThanEq *tmp85 3                        ...
  316:  setaddr :supplyBase*retaddr *label143                        CoreBuilder.mnd: supplyBase();
  317:  call *label35 *invalid :supplyBase*retval                    ...
        label *label145                                              CoreBuilder.mnd: while controller.polys < 3 do
  318:  set :buildBlockFromCfg.1:cfg "A©JFJd-unloader26"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER5);
  319:  setaddr :buildBlockFromCfg.1*retaddr *label147               ...
  320:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label147                                              ...
  321:  set :buildBlockFromCfg.1:cfg "A{JDJe-inverted-sorter27"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT7);
  322:  setaddr :buildBlockFromCfg.1*retaddr *label148               ...
  323:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label148                                              ...
  324:  set :buildBlockFromCfg.1:cfg "AÁPBJf-multiplicative-reconstr CoreBuilder.mnd: buildBlockFromCfg(MULTIPLICATIVE_REC);
  325:  setaddr :buildBlockFromCfg.1*retaddr *label149               ...
  326:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label149                                              ...
  327:  set .metaglassSurplus 10                                     CoreBuilder.mnd: metaglassSurplus = 10;
  328:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  329:  write 1 processor2 ".megaTarget"                             CoreBuilder.mnd: display.megaTarget = target;
  330:  setaddr :buildUnits*retaddr *label151                        CoreBuilder.mnd: buildUnits();
  331:  call *label42 *invalid :buildUnits*retval                    ...
        label *label151                                              ...
  332:  read *tmp85 .controller ".polys"                             CoreBuilder.mnd: var tmp = controller.polys - 1;
  333:  op sub :tmp *tmp85 1                                         ...
  334:  write :tmp .controller ".polyTarget"                         CoreBuilder.mnd: controller.polyTarget = tmp;
  335:  write :tmp .controller ".polys"                              CoreBuilder.mnd: controller.polys = tmp;
  336:  write :tmp processor2 ".polys"                               CoreBuilder.mnd: display.polys = tmp;
  337:  sensor :x AÁPBJf-multiplicative-reconstructor28 @x           CoreBuilder.mnd: var x = multiplicative_rec.@x;
  338:  sensor :y AÁPBJf-multiplicative-reconstructor28 @y           CoreBuilder.mnd: var y = multiplicative_rec.@y;
        label *label152                                              CoreBuilder.mnd: do
  339:  ucontrol move :x :y 0 0 0                                    CoreBuilder.mnd: move(x, y);
  340:  ucontrol payEnter 0 0 0 0 0                                  CoreBuilder.mnd: payEnter();
  341:  read *tmp86 .controller ".megas"                             CoreBuilder.mnd: while !controller.megas;
  342:  jump *label152 equal *tmp86 false                            CoreBuilder.mnd: do
  343:  write true .controller ".finished"                           CoreBuilder.mnd: controller.finished = true;
  344:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  345:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  346:  control enabled processor6 false 0 0 0                       CoreBuilder.mnd: polyController.enabled = false;
  347:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: oreLocator.enabled = false;
  348:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: blockBuilder.enabled = false;
  349:  control enabled processor11 false 0 0 0                      CoreBuilder.mnd: measurements.enabled = false;
  350:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  351:  setaddr :flagUnits*retaddr *label156                         ...
  352:  call *label43 *invalid :flagUnits*retval                     ...
        label *label156                                              ...
  353:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  354:  setaddr :flagUnits*retaddr *label157                         ...
  355:  call *label43 *invalid :flagUnits*retval                     ...
        label *label157                                              ...
  356:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  357:  setaddr :flagUnits*retaddr *label158                         ...
  358:  call *label43 *invalid :flagUnits*retval                     ...
        label *label158                                              ...
  359:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  360:  setaddr :flagUnits*retaddr *label159                         ...
  361:  call *label43 *invalid :flagUnits*retval                     ...
        label *label159                                              ...
        label *label160                                              CoreBuilder.mnd: while true do
  362:  op sub :lineUpUnits:y @thisy 6                               CoreBuilder.mnd: lineUpUnits(@thisy -  6, @mega);
  363:  set :lineUpUnits:unit @mega                                  ...
  364:  setaddr :lineUpUnits*retaddr *label163                       ...
  365:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label163                                              ...
  366:  op sub :lineUpUnits:y @thisy 10                              CoreBuilder.mnd: lineUpUnits(@thisy - 10, @poly);
  367:  set :lineUpUnits:unit @poly                                  ...
  368:  setaddr :lineUpUnits*retaddr *label164                       ...
  369:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label164                                              ...
  370:  op sub :lineUpUnits:y @thisy 14                              CoreBuilder.mnd: lineUpUnits(@thisy - 14, @mono);
  371:  set :lineUpUnits:unit @mono                                  ...
  372:  setaddr :lineUpUnits*retaddr *label165                       ...
  373:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label165                                              ...
  374:  op sub :lineUpUnits:y @thisy 18                              CoreBuilder.mnd: lineUpUnits(@thisy - 18, @flare);
  375:  set :lineUpUnits:unit @flare                                 ...
  376:  setaddr :lineUpUnits*retaddr *label160                       ...
  377:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label15                                               Actions.mnd: void error(error)
  378:  set .ERROR :error:error                                      Actions.mnd: ERROR = error;
  379:  stop                                                         Actions.mnd: stopProcessor();
  380:  return :error*retaddr                                        Actions.mnd: void error(error)
        label *label35                                               CoreBuilder.mnd: void supplyBase()
  381:  sensor *tmp235 .core @silicon                                CoreBuilder.mnd: monoController.sandTarget = max(0, targetSilicon - core.@silicon);
  382:  op sub *tmp236 silicon *tmp235                               ...
  383:  op max *tmp237 0 *tmp236                                     ...
  384:  write *tmp237 processor7 ".sandTarget"                       ...
  385:  jump *label169 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  386:  write "Phase 2: servicing thorium drill" processor2 ".status Actions.mnd: display.status1 = text;
  387:  sensor *tmp239 .thoriumBattery @totalPower                   CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  388:  jump *label173 greaterThanEq *tmp239 2000                    ...
  389:  sensor *tmp242 .thoriumGenerator @coal                       CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
  390:  jump *label175 notEqual *tmp242 0                            ...
  391:  sensor *tmp245 .core @coal                                   CoreBuilder.mnd: if core.@coal < 50 then
  392:  jump *label177 greaterThanEq *tmp245 50                      ...
  393:  set :supplyBlock:block .thoriumGenerator                     CoreBuilder.mnd: supplyBlock(thoriumGenerator, @coal);
  394:  set :supplyBlock:ore @coal                                   ...
  395:  setaddr :supplyBlock*retaddr *label178                       ...
  396:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label177                                              CoreBuilder.mnd: if core.@coal < 50 then
  397:  sensor *tmp340 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  398:  op min :transportStatus:target *tmp340 30                    ...
  399:  set :transportStatus:item @coal                              ...
  400:  setaddr :transportStatus*retaddr *label532                   ...
  401:  call *label14 *invalid :transportStatus*retval               ...
        label *label532                                              ...
  402:  set :status2:text "Transferring "                            Actions.mnd: status2("Transferring ", item, target);
  403:  set :status2:item @coal                                      ...
  404:  set :status2:block .thoriumGenerator                         ...
  405:  setaddr :status2*retaddr *label533                           ...
  406:  call *label12 *invalid :status2*retval                       ...
        label *label533                                              ...
  407:  set :moveToEmpty:x .coreX                                    Actions.mnd: moveToEmpty(coreX, coreY);
  408:  set :moveToEmpty:y .coreY                                    ...
  409:  setaddr :moveToEmpty*retaddr *label534                       ...
  410:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label534                                              ...
  411:  setaddr :dropAll*retaddr *label535                           Actions.mnd: dropAll();
  412:  call *label19 *invalid :dropAll*retval                       ...
        label *label535                                              ...
        label *label536                                              Actions.mnd: do
  413:  ucontrol itemTake .core @coal 30 0 0                         Actions.mnd: itemTake(core, item, capacity);
  414:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  415:  op notEqual *tmp343 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  416:  op notEqual *tmp344 :supplyBlockFromCore:unitItem @coal      ...
  417:  op land *tmp345 *tmp343 *tmp344                              ...
  418:  jump *label537 equal *tmp345 false                           ...
  419:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label537                                              Actions.mnd: if unitItem != null and unitItem != item then
  420:  sensor *tmp347 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  421:  op lessThan *tmp348 *tmp347 30                               ...
  422:  sensor *tmp349 .core @coal                                   ...
  423:  op land *tmp350 *tmp348 *tmp349                              ...
  424:  jump *label536 notEqual *tmp350 false                        Actions.mnd: do
  425:  set :depositItems:block .thoriumGenerator                    Actions.mnd: depositItems(target, item);
  426:  set :depositItems:item @coal                                 ...
  427:  setaddr :depositItems*retaddr *label541                      ...
  428:  call *label21 *invalid :depositItems*retval                  ...
        label *label541                                              ...
        label *label178                                              CoreBuilder.mnd: if core.@coal < 50 then
        label *label175                                              CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
        label *label173                                              CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  429:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  430:  set :fetchBlock:item @thorium                                ...
  431:  setaddr :fetchBlock*retaddr *label181                        ...
  432:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label181                                              ...
  433:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label169                                              ...
  434:  read *tmp84 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 3 then
  435:  jump *label182 lessThanEq *tmp84 3                           ...
  436:  write "Phase 1: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  437:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  438:  setaddr :mineOre.1*retaddr *label186                         ...
  439:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label186                                              ...
  440:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 3 then
        label *label182                                              ...
  441:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  442:  jump *label188 notEqual A©JNJP-unloader6 null                CoreBuilder.mnd: if unloader1 == null then
  443:  sensor *tmp252 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  444:  jump *label190 greaterThanEq *tmp252 graphite                ...
  445:  sensor *tmp255 AJEMJJ-graphite-press0 @coal                  CoreBuilder.mnd: if press.@coal < 5 then
  446:  jump *label192 greaterThanEq *tmp255 5                       ...
  447:  write "Goal 1: graphite requirement" processor2 ".status1"   Actions.mnd: display.status1 = text;
  448:  set :supplyBlock:block AJEMJJ-graphite-press0                CoreBuilder.mnd: supplyBlock(press, @coal);
  449:  set :supplyBlock:ore @coal                                   ...
  450:  setaddr :supplyBlock*retaddr *label195                       ...
  451:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label195                                              ...
  452:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label192                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label190                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  453:  sensor *tmp258 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  454:  jump *label196 greaterThanEq *tmp258 silicon                 ...
  455:  sensor *tmp261 ALMQJN-silicon-smelter4 @coal                 CoreBuilder.mnd: if smelter.@coal < 5 then
  456:  jump *label198 greaterThanEq *tmp261 5                       ...
  457:  write "Goal 2: coal for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  458:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @coal);
  459:  set :supplyBlock:ore @coal                                   ...
  460:  setaddr :supplyBlock*retaddr *label201                       ...
  461:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label201                                              ...
  462:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  463:  jump *label199 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label198                                              ...
  464:  sensor *tmp264 ALMQJN-silicon-smelter4 @sand                 CoreBuilder.mnd: elsif smelter.@sand < 5 then
  465:  jump *label202 greaterThanEq *tmp264 5                       ...
  466:  write "Goal 3: sand for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  467:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @sand);
  468:  set :supplyBlock:ore @sand                                   ...
  469:  setaddr :supplyBlock*retaddr *label205                       ...
  470:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label205                                              ...
  471:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label202                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label199                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label196                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  472:  sensor *tmp267 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
  473:  jump *label206 greaterThanEq *tmp267 .powerTarget            ...
  474:  sensor *tmp270 AJRJM-combustion-generator3 @coal            CoreBuilder.mnd: if generator.@coal < 2 then
  475:  jump *label208 greaterThanEq *tmp270 2                       ...
  476:  write "Goal 4: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  477:  set :supplyBlock:block AJRJM-combustion-generator3          CoreBuilder.mnd: supplyBlock(generator, @coal);
  478:  set :supplyBlock:ore @coal                                   ...
  479:  setaddr :supplyBlock*retaddr *label211                       ...
  480:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label211                                              ...
  481:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label208                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label206                                              CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
        label *label188                                              CoreBuilder.mnd: if unloader1 == null then
  482:  set *tmp275 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  483:  sensor *tmp273 .core @titanium                               ...
  484:  jump *label213 greaterThanEq *tmp273 titanium                ...
  485:  sensor *tmp276 .core @titanium                               ...
  486:  op sub *tmp277 titanium *tmp276                              ...
  487:  op min *tmp275 7 *tmp277                                     ...
        label *label213                                              ...
  488:  sensor *tmp279 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  489:  jump *label214 greaterThanEq *tmp279 *tmp275                 ...
  490:  jump *label215 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  491:  sensor *tmp284 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
  492:  op mul *tmp285 A©JNJP-unloader6 .powerTarget                 ...
  493:  jump *label218 greaterThanEq *tmp284 *tmp285                 ...
  494:  write "Goal 5: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  495:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  496:  setaddr :mineOre.1*retaddr *label221                         ...
  497:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label221                                              ...
  498:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
        label *label218                                              ...
  499:  sensor *tmp288 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  500:  jump *label222 greaterThanEq *tmp288 silicon                 ...
  501:  write "Goal 6: silicon requirement" processor2 ".status1"    Actions.mnd: display.status1 = text;
  502:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  503:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  504:  select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  505:  setaddr :mineOre.1*retaddr *label227                         CoreBuilder.mnd: mineOre(ore);
  506:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label227                                              ...
  507:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label222                                              ...
  508:  sensor *tmp295 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  509:  jump *label228 greaterThanEq *tmp295 copper                  ...
  510:  write "Goal 7: copper requirement" processor2 ".status1"     Actions.mnd: display.status1 = text;
  511:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  512:  setaddr :mineOre.1*retaddr *label231                         ...
  513:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label231                                              ...
  514:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label228                                              ...
  515:  sensor *tmp298 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  516:  jump *label232 greaterThanEq *tmp298 lead                    ...
  517:  write "Goal 8: lead requirement" processor2 ".status1"       Actions.mnd: display.status1 = text;
  518:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  519:  setaddr :mineOre.1*retaddr *label235                         ...
  520:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label235                                              ...
  521:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label232                                              ...
  522:  sensor *tmp301 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  523:  jump *label236 greaterThanEq *tmp301 metaglass               ...
  524:  write "Goal 9: metaglass requirement" processor2 ".status1"  Actions.mnd: display.status1 = text;
  525:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  526:  setaddr :mineOre.1*retaddr *label239                         ...
  527:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label239                                              ...
  528:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label236                                              ...
  529:  write "Goal 10: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  530:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  531:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  532:  select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supply CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  533:  setaddr :mineOre.1*retaddr *label243                         CoreBuilder.mnd: mineOre(ore);
  534:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label243                                              ...
  535:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label214                                              ...
  536:  write "Goal 11: Fetching titanium" processor2 ".status1"     Actions.mnd: display.status1 = text;
  537:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  538:  set :fetchBlock:item @titanium                               ...
  539:  setaddr :fetchBlock*retaddr *label245                        ...
  540:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label245                                              ...
        label *label215                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  541:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label38                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  542:  op add *tmp308 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  543:  jump *label247 lessThanEq *tmp308 0                          ...
  544:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  545:  setaddr :unpackCfg*retaddr *label249                         ...
  546:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label249                                              ...
  547:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
  548:  set :buildBlock:x :buildRemoteBlock:x                        ...
  549:  set :buildBlock:y :buildRemoteBlock:y                        ...
  550:  set :buildBlock:copper :unpackCfg:cu                         ...
  551:  set :buildBlock:lead :unpackCfg:pb                           ...
  552:  set :buildBlock:graphite :unpackCfg:gr                       ...
  553:  set :buildBlock:silicon :unpackCfg:si                        ...
  554:  set :buildBlock:titanium :unpackCfg:ti                       ...
  555:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  556:  set :buildBlock:thorium :unpackCfg:th                        ...
  557:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  558:  set :buildBlock:config null                                  ...
  559:  set :buildBlock:index :unpackCfg:ind                         ...
  560:  setaddr :buildBlock*retaddr *label250                        ...
  561:  call *label37 *invalid :buildBlock*retval                    ...
        label *label250                                              ...
  562:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  563:  return :buildRemoteBlock*retaddr                             ...
        label *label247                                              CoreBuilder.mnd: if x + y > 0 then
  564:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  565:  return :buildRemoteBlock*retaddr                             ...
        label *label39                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  566:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  567:  setaddr :unpackCfg*retaddr *label252                         ...
  568:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label252                                              ...
  569:  op add *tmp311 .coreX :unpackCfg:x                           CoreBuilder.mnd: var building = buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
  570:  op add *tmp312 .coreY :unpackCfg:y                           ...
  571:  set :buildBlock:block :unpackCfg:type                        ...
  572:  set :buildBlock:x *tmp311                                    ...
  573:  set :buildBlock:y *tmp312                                    ...
  574:  set :buildBlock:copper :unpackCfg:cu                         ...
  575:  set :buildBlock:lead :unpackCfg:pb                           ...
  576:  set :buildBlock:graphite :unpackCfg:gr                       ...
  577:  set :buildBlock:silicon :unpackCfg:si                        ...
  578:  set :buildBlock:titanium :unpackCfg:ti                       ...
  579:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  580:  set :buildBlock:thorium :unpackCfg:th                        ...
  581:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  582:  set :buildBlock:config :buildBlockFromCfg:config             ...
  583:  set :buildBlock:index :unpackCfg:ind                         ...
  584:  setaddr :buildBlock*retaddr *label253                        ...
  585:  call *label37 *invalid :buildBlock*retval                    ...
        label *label253                                              ...
  586:  write :buildBlock*retval @this :buildBlockFromCfg:cfg        CoreBuilder.mnd: @this.write(building, cfg);
  587:  write :buildBlock*retval processor2 :buildBlockFromCfg:cfg   CoreBuilder.mnd: display.write(building, cfg);
  588:  write :buildBlock*retval .controller :buildBlockFromCfg:cfg  CoreBuilder.mnd: controller.write(building, cfg);
  589:  set :buildBlockFromCfg*retval :buildBlock*retval             CoreBuilder.mnd: return building;
  590:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label40                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  591:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  592:  set :buildBlockFromCfg:config null                           ...
  593:  setaddr :buildBlockFromCfg*retaddr *label255                 ...
  594:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label255                                              ...
  595:  return :buildBlockFromCfg.1*retaddr                          CoreBuilder.mnd: def buildBlockFromCfg(cfg)
        label *label41                                               CoreBuilder.mnd: void meetTarget(cfg)
  596:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  597:  setaddr :unpackCfg*retaddr *label257                         ...
  598:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label257                                              ...
  599:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th, false, false);
  600:  set :meetTarget:copper :unpackCfg:cu                         ...
  601:  set :meetTarget:lead :unpackCfg:pb                           ...
  602:  set :meetTarget:graphite :unpackCfg:gr                       ...
  603:  set :meetTarget:silicon :unpackCfg:si                        ...
  604:  set :meetTarget:titanium :unpackCfg:ti                       ...
  605:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  606:  set :meetTarget:thorium :unpackCfg:th                        ...
  607:  set :meetTarget:forBuild false                               ...
  608:  set :meetTarget:isNoTarget false                             ...
  609:  setaddr :meetTarget*retaddr *label258                        ...
  610:  call *label36 *invalid :meetTarget*retval                    ...
        label *label258                                              ...
  611:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label42                                               CoreBuilder.mnd: void buildUnits()
  612:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
  613:  set :meetTarget:copper 0                                     ...
  614:  set :meetTarget:lead 0                                       ...
  615:  set :meetTarget:graphite 0                                   ...
  616:  set :meetTarget:silicon 0                                    ...
  617:  set :meetTarget:titanium 0                                   ...
  618:  set :meetTarget:metaglass 0                                  ...
  619:  set :meetTarget:thorium 0                                    ...
  620:  set :meetTarget:forBuild false                               ...
  621:  set :meetTarget:isNoTarget true                              ...
  622:  setaddr :meetTarget*retaddr *label260                        ...
  623:  call *label36 *invalid :meetTarget*retval                    ...
        label *label260                                              ...
  624:  write 0 processor2 ".totalTargets"                           CoreBuilder.mnd: display.totalTargets = 0;
  625:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  626:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  627:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  628:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  629:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label43                                               CoreBuilder.mnd: void flagUnits(unit)
        label *label262                                              CoreBuilder.mnd: do
  630:  ubind :flagUnits:unit                                        CoreBuilder.mnd: firstUnit = ubind(unit);
  631:  set :flagUnits:firstUnit @unit                               ...
  632:  jump *label262 equal :flagUnits:firstUnit null               CoreBuilder.mnd: do
  633:  set :flagUnits:x @thisx                                      CoreBuilder.mnd: var x = @thisx;
        label *label265                                              CoreBuilder.mnd: do
  634:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  635:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  636:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  637:  jump *label265 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  638:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label44                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  639:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  640:  set :lineUpUnits:firstUnit @unit                             ...
        label *label269                                              CoreBuilder.mnd: do
  641:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  642:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  643:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  644:  sensor *tmp318 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  645:  jump *label272 equal *tmp318 false                           ...
  646:  ucontrol stop 0 0 0 0 0                                      ...
        label *label272                                              ...
  647:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  648:  jump *label269 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  649:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)
        label *label24                                               Actions.mnd: void mineOre(ore)
  650:  set :status2:text "Mining "                                  Actions.mnd: status2("Mining ", ore, "core");
  651:  set :status2:item :mineOre.1:ore                             ...
  652:  set :status2:block "core"                                    ...
  653:  setaddr :status2*retaddr *label276                           ...
  654:  call *label12 *invalid :status2*retval                       ...
        label *label276                                              ...
  655:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  656:  set :mineOre:amount 30                                       ...
  657:  set :mineOre:block .core                                     ...
  658:  setaddr :mineOre*retaddr *label277                           ...
  659:  call *label23 *invalid :mineOre*retval                       ...
        label *label277                                              ...
  660:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label25                                               Actions.mnd: void fetchBlock(block, item)
  661:  sensor *tmp322 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  662:  op min :transportStatus:target *tmp322 30                    ...
  663:  set :transportStatus:item :fetchBlock:item                   ...
  664:  setaddr :transportStatus*retaddr *label279                   ...
  665:  call *label14 *invalid :transportStatus*retval               ...
        label *label279                                              ...
  666:  set :status2:text "Fetching "                                Actions.mnd: status2("Fetching ", item, block);
  667:  set :status2:item :fetchBlock:item                           ...
  668:  set :status2:block :fetchBlock:block                         ...
  669:  setaddr :status2*retaddr *label280                           ...
  670:  call *label12 *invalid :status2*retval                       ...
        label *label280                                              ...
  671:  sensor *tmp324 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  672:  sensor *tmp325 :fetchBlock:block @y                          ...
  673:  set :moveToEmpty:x *tmp324                                   ...
  674:  set :moveToEmpty:y *tmp325                                   ...
  675:  setaddr :moveToEmpty*retaddr *label281                       ...
  676:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label281                                              ...
  677:  setaddr :dropAll*retaddr *label282                           Actions.mnd: dropAll();
  678:  call *label19 *invalid :dropAll*retval                       ...
        label *label282                                              ...
        label *label283                                              Actions.mnd: do
  679:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  680:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  681:  op notEqual *tmp327 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  682:  op notEqual *tmp328 :fetchBlock:unitItem :fetchBlock:item    ...
  683:  op land *tmp329 *tmp327 *tmp328                              ...
  684:  jump *label286 equal *tmp329 false                           ...
  685:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label286                                              Actions.mnd: if unitItem != null and unitItem != item then
  686:  sensor *tmp331 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  687:  op lessThan *tmp332 *tmp331 30                               ...
  688:  sensor *tmp333 :fetchBlock:block :fetchBlock:item            ...
  689:  op land *tmp334 *tmp332 *tmp333                              ...
  690:  jump *label283 notEqual *tmp334 false                        Actions.mnd: do
  691:  set :depositItems:block .core                                Actions.mnd: depositItems(core, item);
  692:  set :depositItems:item :fetchBlock:item                      ...
  693:  setaddr :depositItems*retaddr *label288                      ...
  694:  call *label21 *invalid :depositItems*retval                  ...
        label *label288                                              ...
  695:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label26                                               Actions.mnd: void supplyBlock(block, ore)
  696:  set :status2:text "Supplying "                               Actions.mnd: status2("Supplying ", ore, block);
  697:  set :status2:item :supplyBlock:ore                           ...
  698:  set :status2:block :supplyBlock:block                        ...
  699:  setaddr :status2*retaddr *label290                           ...
  700:  call *label12 *invalid :status2*retval                       ...
        label *label290                                              ...
  701:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  702:  sensor *tmp336 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  703:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp3 ...
  704:  jump *label291 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  705:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  706:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  707:  set :mineOre:block :supplyBlock:block                        ...
  708:  setaddr :mineOre*retaddr *label293                           ...
  709:  call *label23 *invalid :mineOre*retval                       ...
        label *label293                                              ...
        label *label291                                              Actions.mnd: if missing > 0 then
  710:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label29                                               Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
  711:  read *tmp352 :unpackCfg:cfg 1                                Common.mnd: type = lookup(:block, char(cfg, index++) - _Common_offset);
  712:  op sub *tmp353 *tmp352 74                                    ...
  713:  lookup block :unpackCfg:type *tmp353                         ...
  714:  read *tmp356 :unpackCfg:cfg 2                                Common.mnd: x = (char(cfg, index++) - _Common_offset) / 2;
  715:  op sub *tmp357 *tmp356 74                                    ...
  716:  op div :unpackCfg:x *tmp357 2                                ...
  717:  read *tmp360 :unpackCfg:cfg 3                                Common.mnd: y = (char(cfg, index++) - _Common_offset) / 2;
  718:  op sub *tmp361 *tmp360 74                                    ...
  719:  op div :unpackCfg:y *tmp361 2                                ...
  720:  read *tmp364 :unpackCfg:cfg 4                                Common.mnd: rotation = char(cfg, index++) - _Common_offset;
  721:  op sub :unpackCfg:rotation *tmp364 74                        ...
  722:  read *tmp367 :unpackCfg:cfg 5                                Common.mnd: ind = char(cfg, index++) - _Common_offset;
  723:  op sub :unpackCfg:ind *tmp367 74                             ...
  724:  sensor :unpackCfg:cu :unpackCfg:type @copper                 Common.mnd: cu = type.@copper;
  725:  sensor :unpackCfg:pb :unpackCfg:type @lead                   Common.mnd: pb = type.@lead;
  726:  sensor :unpackCfg:gr :unpackCfg:type @graphite               Common.mnd: gr = type.@graphite;
  727:  sensor :unpackCfg:si :unpackCfg:type @silicon                Common.mnd: si = type.@silicon;
  728:  sensor :unpackCfg:ti :unpackCfg:type @titanium               Common.mnd: ti = type.@titanium;
  729:  sensor :unpackCfg:mg :unpackCfg:type @metaglass              Common.mnd: mg = type.@metaglass;
  730:  sensor :unpackCfg:th :unpackCfg:type @thorium                Common.mnd: th = type.@thorium;
  731:  return :unpackCfg*retaddr                                    Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
        label *label36                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
  732:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  733:  op sign *tmp378 :meetTarget:lead 0                           ...
  734:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  735:  op sign *tmp378 :meetTarget:graphite 0                       ...
  736:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  737:  op sign *tmp378 :meetTarget:silicon 0                        ...
  738:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  739:  op sign *tmp378 :meetTarget:titanium 0                       ...
  740:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  741:  op sign *tmp378 :meetTarget:metaglass 0                      ...
  742:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  743:  op sign *tmp378 :meetTarget:thorium 0                        ...
  744:  op add :meetTarget:count :meetTarget:count *tmp378           ...
  745:  write :meetTarget:count processor2 ".totalTargets"           CoreBuilder.mnd: display.totalTargets = count;
  746:  write :meetTarget:block processor2 ".nextBlock"              CoreBuilder.mnd: display.nextBlock = block;
  747:  write :meetTarget:copper processor2 ".targetCopper"          CoreBuilder.mnd: display.targetCopper = copper;
  748:  write :meetTarget:lead processor2 ".targetLead"              CoreBuilder.mnd: display.targetLead = lead;
  749:  write :meetTarget:graphite processor2 ".targetGraphite"      CoreBuilder.mnd: display.targetGraphite = graphite;
  750:  write :meetTarget:silicon processor2 ".targetSilicon"        CoreBuilder.mnd: display.targetSilicon = silicon;
  751:  write :meetTarget:titanium processor2 ".targetTitanium"      CoreBuilder.mnd: display.targetTitanium = titanium;
  752:  write :meetTarget:metaglass processor2 ".targetMetaglass"    CoreBuilder.mnd: display.targetMetaglass = metaglass;
  753:  write :meetTarget:thorium processor2 ".targetThorium"        CoreBuilder.mnd: display.targetThorium = thorium;
  754:  set copper :meetTarget:copper                                CoreBuilder.mnd: targetCopper = copper;
  755:  op add lead :meetTarget:lead .leadSurplus                    CoreBuilder.mnd: targetLead = lead + leadSurplus;
  756:  set graphite :meetTarget:graphite                            CoreBuilder.mnd: targetGraphite = graphite;
  757:  set silicon :meetTarget:silicon                              CoreBuilder.mnd: targetSilicon = silicon;
  758:  set titanium :meetTarget:titanium                            CoreBuilder.mnd: targetTitanium = titanium;
  759:  set metaglass :meetTarget:metaglass                          CoreBuilder.mnd: targetMetaglass = metaglass;
  760:  set thorium :meetTarget:thorium                              CoreBuilder.mnd: targetThorium = thorium;
  761:  set .noTarget :meetTarget:isNoTarget                         CoreBuilder.mnd: noTarget = isNoTarget;
  762:  op add *tmp380 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  763:  write *tmp380 .controller ".pressTarget"                     ...
  764:  op add *tmp381 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  765:  write *tmp381 .controller ".smelterTarget"                   ...
  766:  op add *tmp382 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  767:  write *tmp382 .controller ".kilnTarget"                      ...
  768:  write lead .controller ".leadReserve"                        CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  769:  op sign *tmp384 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  770:  op mul *tmp385 *tmp384 20                                    ...
  771:  op add *tmp386 :meetTarget:silicon *tmp385                   ...
  772:  write *tmp386 .controller ".siliconReserve"                  ...
  773:  op sign *tmp387 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  774:  op mul *tmp388 *tmp387 20                                    ...
  775:  op add *tmp389 :meetTarget:graphite *tmp388                  ...
  776:  write *tmp389 .controller ".graphiteReserve"                 ...
  777:  write lead processor7 ".leadTarget"                          CoreBuilder.mnd: monoController.leadTarget = targetLead;
  778:  write :meetTarget:copper processor7 ".copperTarget"          CoreBuilder.mnd: monoController.copperTarget = targetCopper;
        label *label317                                              CoreBuilder.mnd: while !targetMet() do
  779:  sensor *tmp391 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  780:  jump *label321 greaterThanEq *tmp391 copper                  ...
  781:  set *tmp390 false                                            ...
  782:  jump *label320 always 0 0                                    ...
        label *label321                                              ...
  783:  sensor *tmp394 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  784:  jump *label323 greaterThanEq *tmp394 lead                    ...
  785:  set *tmp390 false                                            ...
  786:  jump *label320 always 0 0                                    ...
        label *label323                                              ...
  787:  sensor *tmp397 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  788:  jump *label325 greaterThanEq *tmp397 graphite                ...
  789:  set *tmp390 false                                            ...
  790:  jump *label320 always 0 0                                    ...
        label *label325                                              ...
  791:  sensor *tmp400 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  792:  jump *label327 greaterThanEq *tmp400 silicon                 ...
  793:  set *tmp390 false                                            ...
  794:  jump *label320 always 0 0                                    ...
        label *label327                                              ...
  795:  sensor *tmp403 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  796:  jump *label329 greaterThanEq *tmp403 titanium                ...
  797:  set *tmp390 false                                            ...
  798:  jump *label320 always 0 0                                    ...
        label *label329                                              ...
  799:  sensor *tmp406 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  800:  jump *label331 greaterThanEq *tmp406 metaglass               ...
  801:  set *tmp390 false                                            ...
  802:  jump *label320 always 0 0                                    ...
        label *label331                                              ...
  803:  sensor *tmp409 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  804:  jump *label333 greaterThanEq *tmp409 thorium                 ...
  805:  set *tmp390 false                                            ...
  806:  jump *label320 always 0 0                                    ...
        label *label333                                              ...
  807:  set *tmp390 true                                             CoreBuilder.mnd: return true;
  808:  jump *label320 always 0 0                                    ...
        label *label320                                              CoreBuilder.mnd: while !targetMet() do
  809:  jump *label319 notEqual *tmp390 false                        ...
  810:  setaddr :supplyBase*retaddr *label317                        CoreBuilder.mnd: supplyBase();
  811:  call *label35 *invalid :supplyBase*retval                    ...
        label *label319                                              CoreBuilder.mnd: while !targetMet() do
  812:  jump *label336 equal :meetTarget:forBuild false              CoreBuilder.mnd: if forBuild then
  813:  write false .controller ":buildStart*finished"               CoreBuilder.mnd: controller.buildStart();
  814:  write 1 .controller "@counter"                               ...
        label *label338                                              ...
  815:  wait 1e-15                                                   ...
  816:  read *tmp414 .controller ":buildStart*finished"              ...
  817:  jump *label338 equal *tmp414 false                           ...
        label *label339                                              CoreBuilder.mnd: while !targetMet() do
  818:  sensor *tmp416 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  819:  jump *label343 greaterThanEq *tmp416 copper                  ...
  820:  set *tmp415 false                                            ...
  821:  jump *label342 always 0 0                                    ...
        label *label343                                              ...
  822:  sensor *tmp419 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  823:  jump *label345 greaterThanEq *tmp419 lead                    ...
  824:  set *tmp415 false                                            ...
  825:  jump *label342 always 0 0                                    ...
        label *label345                                              ...
  826:  sensor *tmp422 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  827:  jump *label347 greaterThanEq *tmp422 graphite                ...
  828:  set *tmp415 false                                            ...
  829:  jump *label342 always 0 0                                    ...
        label *label347                                              ...
  830:  sensor *tmp425 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  831:  jump *label349 greaterThanEq *tmp425 silicon                 ...
  832:  set *tmp415 false                                            ...
  833:  jump *label342 always 0 0                                    ...
        label *label349                                              ...
  834:  sensor *tmp428 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  835:  jump *label351 greaterThanEq *tmp428 titanium                ...
  836:  set *tmp415 false                                            ...
  837:  jump *label342 always 0 0                                    ...
        label *label351                                              ...
  838:  sensor *tmp431 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  839:  jump *label353 greaterThanEq *tmp431 metaglass               ...
  840:  set *tmp415 false                                            ...
  841:  jump *label342 always 0 0                                    ...
        label *label353                                              ...
  842:  sensor *tmp434 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  843:  jump *label355 greaterThanEq *tmp434 thorium                 ...
  844:  set *tmp415 false                                            ...
  845:  jump *label342 always 0 0                                    ...
        label *label355                                              ...
  846:  set *tmp415 true                                             CoreBuilder.mnd: return true;
  847:  jump *label342 always 0 0                                    ...
        label *label342                                              CoreBuilder.mnd: while !targetMet() do
  848:  jump *label341 notEqual *tmp415 false                        ...
  849:  setaddr :supplyBase*retaddr *label339                        CoreBuilder.mnd: supplyBase();
  850:  call *label35 *invalid :supplyBase*retval                    ...
        label *label341                                              CoreBuilder.mnd: while !targetMet() do
        label *label336                                              CoreBuilder.mnd: if forBuild then
  851:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
        label *label37                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
  852:  op notEqual *tmp438 .controller null                         CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, controller != null, false);
  853:  set :meetTarget:block :buildBlock:block                      ...
  854:  set :meetTarget:copper :buildBlock:copper                    ...
  855:  set :meetTarget:lead :buildBlock:lead                        ...
  856:  set :meetTarget:graphite :buildBlock:graphite                ...
  857:  set :meetTarget:silicon :buildBlock:silicon                  ...
  858:  set :meetTarget:titanium :buildBlock:titanium                ...
  859:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  860:  set :meetTarget:thorium :buildBlock:thorium                  ...
  861:  set :meetTarget:forBuild *tmp438                             ...
  862:  set :meetTarget:isNoTarget false                             ...
  863:  setaddr :meetTarget*retaddr *label359                        ...
  864:  call *label36 *invalid :meetTarget*retval                    ...
        label *label359                                              ...
  865:  write :buildBlock:block processor5 ":buildBlockAt:block"     CoreBuilder.mnd: var built = blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
  866:  write :buildBlock:x processor5 ":buildBlockAt:x"             ...
  867:  write :buildBlock:y processor5 ":buildBlockAt:y"             ...
  868:  write :buildBlock:rotation processor5 ":buildBlockAt:rotatio ...
  869:  write :buildBlock:config processor5 ":buildBlockAt:config"   ...
  870:  write :buildBlock:index processor5 ":buildBlockAt:index"     ...
  871:  write false processor5 ":buildBlockAt*finished"              ...
  872:  write 1 processor5 "@counter"                                ...
        label *label360                                              ...
  873:  wait 1e-15                                                   ...
  874:  read *tmp445 processor5 ":buildBlockAt*finished"             ...
  875:  jump *label360 equal *tmp445 false                           ...
  876:  read :buildBlock*retval processor5 ":buildBlockAt*retval"    ...
  877:  write false .controller ":buildStop*finished"                CoreBuilder.mnd: async(controller.buildStop());
  878:  write 2 .controller "@counter"                               ...
  879:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
        label *label12                                               Actions.mnd: void status2(text, item, block)
  880:  write :status2:text processor2 ".status2"                    Actions.mnd: display.status2 = text;
  881:  write :status2:item processor2 ".item2"                      Actions.mnd: display.item2 = item;
  882:  write :status2:block processor2 ".block2"                    Actions.mnd: display.block2 = block;
  883:  return :status2*retaddr                                      Actions.mnd: void status2(text, item, block)
        label *label14                                               Actions.mnd: void transportStatus(target, item)
  884:  write :transportStatus:target processor2 ".transportTarget"  Actions.mnd: display.transportTarget = target;
  885:  write :transportStatus:item processor2 ".transportItem"      Actions.mnd: display.transportItem = item;
  886:  return :transportStatus*retaddr                              Actions.mnd: void transportStatus(target, item)
        label *label18                                               Actions.mnd: void moveToEmpty(x, y)
  887:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label365                                              Actions.mnd: do
  888:  sensor *tmp447 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  889:  jump *label368 equal *tmp447 null                            ...
  890:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label368                                              ...
  891:  ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5 0 0      Actions.mnd: approach(x, y, RADIUS - 0.5);
  892:  ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp450 0    Actions.mnd: while !within(x, y, RADIUS);
  893:  jump *label365 equal *tmp450 false                           Actions.mnd: do
  894:  return :moveToEmpty*retaddr                                  Actions.mnd: void moveToEmpty(x, y)
        label *label19                                               Actions.mnd: void dropAll()
        label *label371                                              Actions.mnd: while @unit.@firstItem != null do
  895:  sensor *tmp452 @unit @firstItem                              ...
  896:  jump *label373 equal *tmp452 null                            ...
  897:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  898:  jump *label371 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label373                                              ...
  899:  return :dropAll*retaddr                                      Actions.mnd: void dropAll()
        label *label21                                               Actions.mnd: void depositItems(block, item)
  900:  write "Depositing..." processor2 ".status3"                  Actions.mnd: display.status3 = text;
  901:  sensor *tmp454 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  902:  jump *label376 notEqual *tmp454 :depositItems:item           ...
  903:  sensor *tmp503 :depositItems:block @x                        Actions.mnd: moveTo(block.@x, block.@y, radius);
  904:  sensor *tmp504 :depositItems:block @y                        ...
  905:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label562                                              Actions.mnd: while !within(x, y, radius) do
  906:  ucontrol within *tmp503 *tmp504 6 *tmp509 0                  ...
  907:  jump *label564 notEqual *tmp509 false                        ...
  908:  ucontrol approach *tmp503 *tmp504 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  909:  jump *label562 always 0 0                                    Actions.mnd: while !within(x, y, radius) do
        label *label564                                              ...
  910:  sensor :depositItems:cap :depositItems:block @itemCapacity   Actions.mnd: var cap = block.@itemCapacity;
        label *label379                                              Actions.mnd: do
  911:  ucontrol itemDrop :depositItems:block 30 0 0 0               Actions.mnd: itemDrop(block, capacity);
  912:  sensor *tmp458 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  913:  op mul *tmp459 *tmp458 :depositItems:cap                     ...
  914:  sensor *tmp460 :depositItems:block :depositItems:item        ...
  915:  jump *label379 greaterThan *tmp459 *tmp460                   Actions.mnd: do
  916:  jump *label377 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label376                                              ...
        label *label382                                              Actions.mnd: while @unit.@firstItem != null do
  917:  sensor *tmp462 @unit @firstItem                              ...
  918:  jump *label384 equal *tmp462 null                            ...
  919:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  920:  jump *label382 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label384                                              ...
        label *label377                                              Actions.mnd: if @unit.@firstItem == item then
  921:  set :transportStatus:target 0                                Actions.mnd: transportStatus(0, null);
  922:  set :transportStatus:item null                               ...
  923:  setaddr :transportStatus*retaddr *label385                   ...
  924:  call *label14 *invalid :transportStatus*retval               ...
        label *label385                                              ...
  925:  return :depositItems*retaddr                                 Actions.mnd: void depositItems(block, item)
        label *label23                                               Actions.mnd: void mineOre(ore, amount, block)
  926:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  927:  set :transportStatus:target :mineOre:amount                  Actions.mnd: transportStatus(amount, ore);
  928:  set :transportStatus:item :mineOre:ore                       ...
  929:  setaddr :transportStatus*retaddr *label387                   ...
  930:  call *label14 *invalid :transportStatus*retval               ...
        label *label387                                              ...
  931:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  932:  jump *label556 notEqual *tmp505 false                        ...
  933:  set :error:error "Cannot locate ore"                         Actions.mnd: error("Cannot locate ore");
  934:  setaddr :error*retaddr *label555                             ...
  935:  call *label15 *invalid :error*retval                         ...
        label *label555                                              ...
        label *label556                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  936:  set :mineOre:x :locateOre:x                                  Actions.mnd: locateOre(ore, out x, out y);
  937:  set :mineOre:y :locateOre:y                                  ...
  938:  set :moveToEmpty:x :locateOre:x                              Actions.mnd: moveToEmpty(x, y);
  939:  set :moveToEmpty:y :locateOre:y                              ...
  940:  setaddr :moveToEmpty*retaddr *label389                       ...
  941:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label389                                              ...
  942:  sensor *tmp465 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  943:  jump *label390 equal *tmp465 :mineOre:ore                    ...
  944:  setaddr :dropAll*retaddr *label392                           ...
  945:  call *label19 *invalid :dropAll*retval                       ...
        label *label392                                              ...
        label *label390                                              ...
  946:  write "Mining..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
  947:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label394                                              Actions.mnd: do
  948:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  949:  op notEqual *tmp470 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  950:  op notEqual *tmp471 :mineOre:item :mineOre:ore               ...
  951:  op land *tmp472 *tmp470 *tmp471                              ...
  952:  jump *label396 notEqual *tmp472 false                        ...
  953:  ucontrol mine :mineOre:x :mineOre:y 0 0 0                    Actions.mnd: mine(x, y);
  954:  jump *label396 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  955:  jump *label401 notEqual .noTarget false                      Actions.mnd: if not noTarget then
  956:  sensor *tmp479 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  957:  jump *label404 greaterThanEq *tmp479 copper                  ...
  958:  set *tmp478 false                                            ...
  959:  jump *label403 always 0 0                                    ...
        label *label404                                              ...
  960:  sensor *tmp482 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  961:  jump *label406 greaterThanEq *tmp482 lead                    ...
  962:  set *tmp478 false                                            ...
  963:  jump *label403 always 0 0                                    ...
        label *label406                                              ...
  964:  sensor *tmp485 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  965:  jump *label408 greaterThanEq *tmp485 graphite                ...
  966:  set *tmp478 false                                            ...
  967:  jump *label403 always 0 0                                    ...
        label *label408                                              ...
  968:  sensor *tmp488 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  969:  jump *label410 greaterThanEq *tmp488 silicon                 ...
  970:  set *tmp478 false                                            ...
  971:  jump *label403 always 0 0                                    ...
        label *label410                                              ...
  972:  sensor *tmp491 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  973:  jump *label412 greaterThanEq *tmp491 titanium                ...
  974:  set *tmp478 false                                            ...
  975:  jump *label403 always 0 0                                    ...
        label *label412                                              ...
  976:  sensor *tmp494 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  977:  jump *label414 greaterThanEq *tmp494 metaglass               ...
  978:  set *tmp478 false                                            ...
  979:  jump *label403 always 0 0                                    ...
        label *label414                                              ...
  980:  sensor *tmp497 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  981:  jump *label416 greaterThanEq *tmp497 thorium                 ...
  982:  set *tmp478 false                                            ...
  983:  jump *label403 always 0 0                                    ...
        label *label416                                              ...
  984:  set *tmp478 true                                             CoreBuilder.mnd: return true;
  985:  jump *label403 always 0 0                                    ...
        label *label403                                              Actions.mnd: if targetMet() then
  986:  jump *label396 notEqual *tmp478 false                        ...
        label *label401                                              Actions.mnd: if not noTarget then
  987:  sensor *tmp501 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  988:  jump *label394 lessThan *tmp501 :mineOre:amount              Actions.mnd: do
        label *label396                                              ...
  989:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  990:  set :depositItems:block :mineOre:block                       Actions.mnd: depositItems(block, ore);
  991:  set :depositItems:item :mineOre:ore                          ...
  992:  setaddr :depositItems*retaddr *label420                      ...
  993:  call *label21 *invalid :depositItems*retval                  ...
        label *label420                                              ...
  994:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)


Performance: parsed in 777 ms, compiled in 449 ms, optimized in 3,577 ms, run in 9 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 1: read *tmp33 processor2 "*signature":
Variable 'processor2' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
