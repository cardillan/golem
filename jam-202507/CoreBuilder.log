  1334 instructions before optimizations.
    76 instructions eliminated by Temp Variables Elimination (2 iterations).
    95 instructions eliminated by Dead Code Elimination (10 iterations).
C:\Home\golem\jam-202507\Actions.mnd:29:14 Variable 'ERROR' is not used.
     1 instructions eliminated by Jump Normalization (5 iterations).
    52 instructions eliminated by Jump Optimization (5 iterations).
    34 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     2 instructions eliminated by If Expression Optimization (3 iterations).
   153 instructions eliminated by Data Flow Optimization (20 passes, 66 iterations).
     1 loops improved by Loop Hoisting.
     7 instructions added by Loop Optimization (3 iterations).
     7 loops improved by Loop Optimization.
     2 instructions eliminated by Loop Unrolling (29 iterations).
     1 loops unrolled by Loop Unrolling.
    71 instructions added by Function Inlining (29 iterations).
    46 function calls inlined by Function Inlining.
     3 instructions eliminated by Jump Straightening (5 iterations).
    11 instructions updated by JumpThreading.
    16 instructions eliminated by Unreachable Code Elimination (2 iterations).
   978 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Unroll iteration loop at CoreBuilder.mnd:229:5               size   -13, benefit     1093.5, efficiency   Infinity (-10 instructions)
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4167.9, efficiency   Infinity
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16313.8, efficiency   Infinity
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency   Infinity
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6789.5, efficiency    452.630
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6789.5, efficiency    150.877
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +177, benefit      283.5, efficiency      1.602
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
  ! Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:499:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2970.4, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5940.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3819.1, efficiency    545.581
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5940.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3394.7, efficiency    565.788
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     1670.7, efficiency    208.838
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1461.9, efficiency   Infinity
  ! Inline function call at Actions.mnd:124:5                    size   +23, benefit     1670.7, efficiency     72.639
  ! Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
  ! Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
  ! Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
  ! Inline function call at Actions.mnd:136:5                    size    +8, benefit     2843.8, efficiency    355.469
  ! Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
  ! Inline function call at Actions.mnd:147:5                    size   +23, benefit     2843.8, efficiency    123.641
  ! Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
  ! Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
  ! Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
  ! Inline function call at Actions.mnd:163:5                    size    +8, benefit     2275.0, efficiency    284.375
  ! Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
  ! Inline function call at Actions.mnd:174:5                    size   +23, benefit     2275.0, efficiency     98.913
    Inline function call at CoreBuilder.mnd:198:5                size    +0, benefit     1990.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
  ! Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:193:5                size    +0, benefit      995.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:130:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:138:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:142:17               size    +0, benefit       62.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:150:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:161:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:164:17               size    +0, benefit       62.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:170:17               size    +0, benefit       31.1, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:173:17               size    +0, benefit       15.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:176:17               size    +0, benefit        7.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:179:17               size    +0, benefit        7.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:187:9                size    +0, benefit      497.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +150, benefit     3037.5, efficiency     20.250
  ! Inline function call at CoreBuilder.mnd:271:5                size   +89, benefit      241.5, efficiency      2.713
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +89, benefit       14.0, efficiency      0.157
  ! Inline function call at CoreBuilder.mnd:380:5                size   +89, benefit       28.0, efficiency      0.315

Pass 1: speed optimization selection (cost limit 8):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4167.9, efficiency   Infinity (-29 instructions)
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16313.8, efficiency   Infinity
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency   Infinity
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6789.5, efficiency    452.630
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6789.5, efficiency    150.877
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +150, benefit       75.0, efficiency      0.500
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:499:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +150, benefit       75.0, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +150, benefit       75.0, efficiency      0.500
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2970.4, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5940.8, efficiency   Infinity
    Inline function call at Actions.mnd:68:5                     size    +7, benefit     3819.1, efficiency    545.581
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5940.8, efficiency   Infinity
    Inline function call at Actions.mnd:77:9                     size    +6, benefit     3394.7, efficiency    565.788
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
    Inline function call at Actions.mnd:105:5                    size    +8, benefit     1670.7, efficiency    208.838
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1461.9, efficiency   Infinity
  ! Inline function call at Actions.mnd:124:5                    size   +23, benefit     1670.7, efficiency     72.639
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +8, benefit     2843.8, efficiency    355.469
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
  ! Inline function call at Actions.mnd:147:5                    size   +23, benefit     2843.8, efficiency    123.641
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +8, benefit     2275.0, efficiency    284.375
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
  ! Inline function call at Actions.mnd:174:5                    size   +23, benefit     2275.0, efficiency     98.913
    Inline function call at CoreBuilder.mnd:198:5                size    +0, benefit     1990.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
  ! Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:193:5                size    +0, benefit      995.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:130:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:138:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:142:17               size    +0, benefit       62.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:150:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:161:17               size    +0, benefit      124.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:164:17               size    +0, benefit       62.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:170:17               size    +0, benefit       31.1, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:173:17               size    +0, benefit       15.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:176:17               size    +0, benefit        7.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:179:17               size    +0, benefit        7.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:187:9                size    +0, benefit      497.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +150, benefit     3037.5, efficiency     20.250
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 37):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16313.8, efficiency   Infinity (-11 instructions)
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency   Infinity
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6789.5, efficiency    452.630
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6789.5, efficiency    150.877
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +124, benefit       75.0, efficiency      0.605
  ! Inline function call at CoreBuilder.mnd:499:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2970.4, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5940.8, efficiency   Infinity
    Inline function call at Actions.mnd:68:5                     size    +7, benefit     3819.1, efficiency    545.581
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5940.8, efficiency   Infinity
    Inline function call at Actions.mnd:77:9                     size    +6, benefit     3394.7, efficiency    565.788
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
    Inline function call at Actions.mnd:105:5                    size    +8, benefit     1670.7, efficiency    208.838
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1461.9, efficiency   Infinity
    Inline function call at Actions.mnd:124:5                    size   +23, benefit     1670.7, efficiency     72.639
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +8, benefit     2843.8, efficiency    355.469
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +23, benefit     2843.8, efficiency    123.641
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +8, benefit     2275.0, efficiency    284.375
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +23, benefit     2275.0, efficiency     98.913
    Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +124, benefit     3037.5, efficiency     24.496
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 48):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency   Infinity (-7 instructions)
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency   Infinity
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6789.5, efficiency    165.596
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     1879.5, efficiency     55.281
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +124, benefit       75.0, efficiency      0.605
  ! Inline function call at CoreBuilder.mnd:499:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:68:5                     size    +5, benefit     3819.1, efficiency    763.813
    Inline function call at Actions.mnd:77:9                     size    +6, benefit     3394.7, efficiency    565.788
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:124:5                    size   +21, benefit     1670.7, efficiency     79.557
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +35, benefit     1599.6, efficiency     45.703
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +21, benefit     2843.8, efficiency    135.417
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +35, benefit      279.9, efficiency      7.998
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +21, benefit     2275.0, efficiency    108.333
    Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +124, benefit     3037.5, efficiency     24.496
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 55):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency   Infinity (-7 instructions)
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6789.5, efficiency    165.596
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     1879.5, efficiency     55.281
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +124, benefit       75.0, efficiency      0.605
  ! Inline function call at CoreBuilder.mnd:499:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:77:9                     size    +7, benefit     3394.7, efficiency    484.961
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:124:5                    size   +21, benefit     1670.7, efficiency     79.557
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +35, benefit     1599.6, efficiency     45.703
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +21, benefit     2843.8, efficiency    135.417
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +35, benefit      279.9, efficiency      7.998
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +21, benefit     2275.0, efficiency    108.333
    Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +124, benefit     3037.5, efficiency     24.496
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 62):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency   Infinity (-5 instructions)
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     1879.5, efficiency     55.281
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +124, benefit       75.0, efficiency      0.605
  ! Inline function call at CoreBuilder.mnd:499:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     1879.5, efficiency    469.885
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +35, benefit     1599.6, efficiency     45.703
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +35, benefit      279.9, efficiency      7.998
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +124, benefit     3037.5, efficiency     24.496
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 67):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency   Infinity (-4 instructions)
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +124, benefit       75.0, efficiency      0.605
  ! Inline function call at CoreBuilder.mnd:499:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +124, benefit       75.0, efficiency      0.605
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:200:5                size   +31, benefit     2275.0, efficiency     73.387
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +124, benefit     3037.5, efficiency     24.496
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 71):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    37213.1, efficiency  37213.135 (+1 instructions)
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4465.6, efficiency    893.115
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      626.5, efficiency    208.838
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2132.8, efficiency    710.938
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +3, benefit     1706.3, efficiency    568.750
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 70):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    21217.0, efficiency  21217.041 (+1 instructions)
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 69):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    21217.0, efficiency  21217.041 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +49, benefit     6789.5, efficiency    138.560
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +25, benefit     1670.7, efficiency     66.828
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +25, benefit     2843.8, efficiency    113.750
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +25, benefit     2275.0, efficiency     91.000
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 68):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13578.9, efficiency   6789.453
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +51, benefit     6789.5, efficiency    133.127
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  * Inline function call at Actions.mnd:88:5                     size    +1, benefit     6789.5, efficiency   6789.453 (-2 instructions)
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +26, benefit     1670.7, efficiency     64.258
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +26, benefit     2843.8, efficiency    109.375
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +26, benefit     2275.0, efficiency     87.500
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 70):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
  * Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +1, benefit     6789.5, efficiency   6789.453 (-7 instructions)
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     1879.5, efficiency     52.209
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     1670.7, efficiency   1670.703
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +37, benefit     1599.6, efficiency     43.233
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     2843.8, efficiency   2843.750
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +37, benefit      279.9, efficiency      7.566
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     2275.0, efficiency   2275.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 77):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7918.1, efficiency   1583.613
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     1879.5, efficiency     53.701
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +31, benefit     2843.8, efficiency     91.734
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +153, benefit       75.0, efficiency      0.490
  ! Inline function call at CoreBuilder.mnd:499:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1599.6, efficiency     44.434
  * Inline function call at Actions.mnd:135:5                    size    +2, benefit     3199.2, efficiency   1599.609 (-2 instructions)
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      279.9, efficiency      7.776
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +32, benefit     2275.0, efficiency     71.094
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +32, benefit      568.8, efficiency     17.773
  ! Inline function call at CoreBuilder.mnd:256:9                size  +153, benefit     3037.5, efficiency     19.853
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 79):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Inline function 'status2' defined at Actions.mnd:11:1        size    +3, benefit     4718.8, efficiency   1572.949 (-11 instructions)
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     1879.5, efficiency     53.701
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1244.1, efficiency     23.474
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     2843.8, efficiency     98.060
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +38, benefit      497.7, efficiency     13.096
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +153, benefit       75.0, efficiency      0.490
  ! Inline function call at CoreBuilder.mnd:499:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +153, benefit       75.0, efficiency      0.490
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1599.6, efficiency    799.805
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1599.6, efficiency     44.434
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:152:5                    size    +2, benefit      559.9, efficiency    279.932
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      279.9, efficiency      7.776
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     2559.4, efficiency   1279.688
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +30, benefit     2275.0, efficiency     75.833
    Inline function call at CoreBuilder.mnd:194:5                size    +9, benefit      995.3, efficiency    110.590
    Inline function call at CoreBuilder.mnd:131:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:139:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:143:17               size   +13, benefit       71.1, efficiency      5.469
    Inline function call at CoreBuilder.mnd:151:17               size   +13, benefit      142.2, efficiency     10.938
    Inline function call at CoreBuilder.mnd:162:17               size    +9, benefit      124.4, efficiency     13.824
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit       62.2, efficiency      6.912
    Inline function call at CoreBuilder.mnd:171:17               size    +9, benefit       31.1, efficiency      3.456
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       15.6, efficiency      1.728
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        7.8, efficiency      0.864
    Inline function call at CoreBuilder.mnd:188:9                size   +30, benefit      568.8, efficiency     18.958
  ! Inline function call at CoreBuilder.mnd:256:9                size  +153, benefit     3037.5, efficiency     19.853
    Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
    Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
    Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 90):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      734.4, efficiency    734.433 (-7 instructions)
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     1879.5, efficiency     53.701
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1244.1, efficiency     30.345
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     2843.8, efficiency     98.060
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:313:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +151, benefit       75.0, efficiency      0.497
  ! Inline function call at CoreBuilder.mnd:499:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:342:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:94:9                     size    +1, benefit      730.9, efficiency    730.933
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1599.6, efficiency     44.434
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      279.9, efficiency      7.776
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +30, benefit     2275.0, efficiency     75.833
    Inline function call at CoreBuilder.mnd:194:5                size    +7, benefit      995.3, efficiency    142.188
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +30, benefit      568.8, efficiency     18.958
  ! Inline function call at CoreBuilder.mnd:256:9                size  +151, benefit     3037.5, efficiency     20.116
    Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
    Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
    Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 97):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223
  * Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4465.6, efficiency    637.939 (+2 instructions)
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     1879.5, efficiency     55.281
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1244.1, efficiency     30.345
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     2843.8, efficiency     98.060
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +151, benefit       75.0, efficiency      0.497
  ! Inline function call at CoreBuilder.mnd:499:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +151, benefit       75.0, efficiency      0.497
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      626.5, efficiency    156.628
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:130:5                    size   +35, benefit     1599.6, efficiency     45.703
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2132.8, efficiency    533.203
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:156:9                    size   +35, benefit      279.9, efficiency      7.998
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:164:5                    size    +4, benefit     1706.3, efficiency    426.563
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +30, benefit     2275.0, efficiency     75.833
    Inline function call at CoreBuilder.mnd:194:5                size    +7, benefit      995.3, efficiency    142.188
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +30, benefit      568.8, efficiency     18.958
  ! Inline function call at CoreBuilder.mnd:256:9                size  +151, benefit     3037.5, efficiency     20.116
    Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
    Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
    Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 95):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6789.5, efficiency    617.223 (-4 instructions)
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +37, benefit     1879.5, efficiency     50.798
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1244.1, efficiency     30.345
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     2843.8, efficiency     88.867
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +154, benefit       75.0, efficiency      0.487
  ! Inline function call at CoreBuilder.mnd:499:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +154, benefit       75.0, efficiency      0.487
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     1670.7, efficiency    278.451
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:130:5                    size   +38, benefit     1599.6, efficiency     42.095
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     2843.8, efficiency    473.958
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:156:9                    size   +38, benefit      279.9, efficiency      7.367
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     2275.0, efficiency    379.167
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +33, benefit     2275.0, efficiency     68.939
    Inline function call at CoreBuilder.mnd:194:5                size    +7, benefit      995.3, efficiency    142.188
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +33, benefit      568.8, efficiency     17.235
  ! Inline function call at CoreBuilder.mnd:256:9                size  +154, benefit     3037.5, efficiency     19.724
    Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
    Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
    Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 99):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  * Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6789.5, efficiency    144.456 (+35 instructions)
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +38, benefit     1879.5, efficiency     49.462
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1244.1, efficiency     30.345
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +35, benefit     2843.8, efficiency     81.250
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +155, benefit       75.0, efficiency      0.484
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +155, benefit       75.0, efficiency      0.484
  ! Inline function call at CoreBuilder.mnd:499:9                size  +155, benefit       75.0, efficiency      0.484
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +155, benefit       75.0, efficiency      0.484
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +155, benefit       75.0, efficiency      0.484
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     1670.7, efficiency     69.613
    Inline function call at Actions.mnd:130:5                    size   +39, benefit     1599.6, efficiency     41.016
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     2843.8, efficiency    118.490
    Inline function call at Actions.mnd:156:9                    size   +39, benefit      279.9, efficiency      7.178
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     2275.0, efficiency     94.792
    Inline function call at CoreBuilder.mnd:201:5                size   +36, benefit     2275.0, efficiency     63.194
    Inline function call at CoreBuilder.mnd:194:5                size    +7, benefit      995.3, efficiency    142.188
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +36, benefit      568.8, efficiency     15.799
  ! Inline function call at CoreBuilder.mnd:256:9                size  +155, benefit     3037.5, efficiency     19.597
    Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
    Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
    Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 64):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +58, benefit     1879.5, efficiency     32.406
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1244.1, efficiency     30.345
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     2843.8, efficiency     50.781
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +176, benefit       75.0, efficiency      0.426
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +176, benefit       75.0, efficiency      0.426
  ! Inline function call at CoreBuilder.mnd:499:9                size  +176, benefit       75.0, efficiency      0.426
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +176, benefit       75.0, efficiency      0.426
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +176, benefit       75.0, efficiency      0.426
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
    Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
    Inline function call at CoreBuilder.mnd:201:5                size   +57, benefit     2275.0, efficiency     39.912
  * Inline function call at CoreBuilder.mnd:194:5                size    +7, benefit      995.3, efficiency    142.188 (+6 instructions)
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +57, benefit      568.8, efficiency      9.978
  ! Inline function call at CoreBuilder.mnd:256:9                size  +176, benefit     3037.5, efficiency     17.259
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 58):
    Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  * Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     2843.8, efficiency     50.781 (+48 instructions)
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
    Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
    Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +182, benefit       75.0, efficiency      0.412
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +182, benefit       75.0, efficiency      0.412
  ! Inline function call at CoreBuilder.mnd:499:9                size  +182, benefit       75.0, efficiency      0.412
    Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
    Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +182, benefit       75.0, efficiency      0.412
    Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +182, benefit       75.0, efficiency      0.412
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
    Inline function call at CoreBuilder.mnd:201:5                size   +57, benefit     2275.0, efficiency     39.912
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
    Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
    Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:188:9                size   +57, benefit      568.8, efficiency      9.978
  ! Inline function call at CoreBuilder.mnd:256:9                size  +182, benefit     3037.5, efficiency     16.690
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
    Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
    Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
    Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
    Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
    Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
    Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 10):
  * Replicate loop condition at CoreBuilder.mnd:493:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 9):
  * Replicate loop condition at CoreBuilder.mnd:498:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 8):
  * Replicate loop condition at CoreBuilder.mnd:516:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 7):
  * Replicate loop condition at CoreBuilder.mnd:526:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
    Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 6):
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +17, benefit      400.0, efficiency     23.529
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
  * Inline function call at CoreBuilder.mnd:566:9                size    +6, benefit      100.0, efficiency     16.667 (+4 instructions)
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
  ! Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
  ! Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 1: speed optimization selection (cost limit 2):
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +157, benefit      283.5, efficiency      1.806
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +20, benefit      310.5, efficiency     15.525
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +59, benefit      124.0, efficiency      2.102
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +11, benefit      300.0, efficiency     27.273
  ! Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:499:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:520:28               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +290, benefit       75.0, efficiency      0.259
  ! Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773
  ! Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
  ! Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +290, benefit     3037.5, efficiency     10.474
  ! Inline function call at CoreBuilder.mnd:271:5                size   +79, benefit      241.5, efficiency      3.057
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +21, benefit       31.5, efficiency      1.500
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +21, benefit      279.0, efficiency     13.286
  ! Inline function call at CoreBuilder.mnd:292:5                size   +20, benefit      112.0, efficiency      5.600
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +79, benefit       14.0, efficiency      0.177
  ! Inline function call at CoreBuilder.mnd:380:5                size   +79, benefit       28.0, efficiency      0.354

Pass 2: speed optimization selection (cost limit 9):
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     3159.2, efficiency     27.002
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      248.8, efficiency      7.318
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +155, benefit      283.5, efficiency      1.829
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +19, benefit      310.5, efficiency     16.342
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +56, benefit      124.0, efficiency      2.214
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +11, benefit      300.0, efficiency     27.273
    Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +19, benefit        4.0, efficiency      0.211
    Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +287, benefit       75.0, efficiency      0.261
    Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +287, benefit       75.0, efficiency      0.261
  ! Inline function call at CoreBuilder.mnd:499:9                size  +287, benefit       75.0, efficiency      0.261
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +287, benefit       75.0, efficiency      0.261
  ! Inline function call at CoreBuilder.mnd:520:28               size   +19, benefit        4.0, efficiency      0.211
    Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +287, benefit       75.0, efficiency      0.261
    Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
    Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
    Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
  * Inline function call at CoreBuilder.mnd:162:17               size    +7, benefit      124.4, efficiency     17.773 (+6 instructions)
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
    Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +287, benefit     3037.5, efficiency     10.584
  ! Inline function call at CoreBuilder.mnd:271:5                size   +78, benefit      241.5, efficiency      3.096
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +20, benefit       31.5, efficiency      1.575
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +20, benefit      279.0, efficiency     13.950
  ! Inline function call at CoreBuilder.mnd:292:5                size   +19, benefit      112.0, efficiency      5.895
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +78, benefit       14.0, efficiency      0.179
  ! Inline function call at CoreBuilder.mnd:380:5                size   +78, benefit       28.0, efficiency      0.359

Pass 2: speed optimization selection (cost limit 3):
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     3319.2, efficiency     18.859
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      124.4, efficiency      4.608
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +155, benefit      283.5, efficiency      1.829
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +19, benefit      310.5, efficiency     16.342
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +56, benefit      124.0, efficiency      2.214
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +11, benefit      300.0, efficiency     27.273
  ! Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:499:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:520:28               size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      160.0, efficiency      2.711
  ! Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
  ! Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +293, benefit     3037.5, efficiency     10.367
  ! Inline function call at CoreBuilder.mnd:271:5                size   +78, benefit      241.5, efficiency      3.096
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +20, benefit       31.5, efficiency      1.575
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +20, benefit      279.0, efficiency     13.950
  ! Inline function call at CoreBuilder.mnd:292:5                size   +19, benefit      112.0, efficiency      5.895
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +78, benefit       14.0, efficiency      0.179
  ! Inline function call at CoreBuilder.mnd:380:5                size   +78, benefit       28.0, efficiency      0.359

Pass 3: speed optimization selection (cost limit 3):
  ! Replicate loop condition at CoreBuilder.mnd:255:5            size   +30, benefit     1012.5, efficiency     33.750
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     3319.2, efficiency     18.859
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      124.4, efficiency      4.608
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      497.7, efficiency     15.552
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:106:1 size   +43, benefit      322.0, efficiency      7.488
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:226:1 size  +155, benefit      283.5, efficiency      1.829
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:270:1 size   +19, benefit      310.5, efficiency     16.342
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:275:1 size  +131, benefit       31.5, efficiency      0.240
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:285:1 size   +56, benefit      124.0, efficiency      2.214
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:291:1 size  +107, benefit       98.0, efficiency      0.916
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:295:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:379:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:573:1 size   +17, benefit       14.0, efficiency      0.824
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:583:1 size   +11, benefit      300.0, efficiency     27.273
  ! Inline function call at CoreBuilder.mnd:398:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:399:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:400:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:405:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:406:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:308:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:409:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:410:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:411:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:416:18               size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:427:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:428:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:443:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:445:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:456:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:457:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:458:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:462:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:463:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:474:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:475:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:480:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:489:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:490:5                size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:491:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:494:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:499:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:339:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:345:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:346:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:347:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:348:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:349:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:350:5                size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:351:24               size   +22, benefit        4.5, efficiency      0.205
  ! Inline function call at CoreBuilder.mnd:517:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:520:28               size   +19, benefit        4.0, efficiency      0.211
  ! Inline function call at CoreBuilder.mnd:521:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:363:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:524:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:527:9                size  +293, benefit       75.0, efficiency      0.256
  ! Inline function call at CoreBuilder.mnd:560:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:561:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:562:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:563:5                size    +6, benefit        3.5, efficiency      0.583
  ! Inline function call at CoreBuilder.mnd:567:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:568:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:569:9                size    +6, benefit      100.0, efficiency     16.667
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1599.6, efficiency     27.112
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      279.9, efficiency      4.745
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1279.7, efficiency     21.690
  ! Inline function call at CoreBuilder.mnd:131:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:139:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at CoreBuilder.mnd:143:17               size   +11, benefit       71.1, efficiency      6.463
  ! Inline function call at CoreBuilder.mnd:151:17               size   +11, benefit      142.2, efficiency     12.926
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      160.0, efficiency      2.711
  ! Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit       62.2, efficiency      8.887
  ! Inline function call at CoreBuilder.mnd:171:17               size    +7, benefit       31.1, efficiency      4.443
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       15.6, efficiency      2.222
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        7.8, efficiency      1.111
  ! Inline function call at CoreBuilder.mnd:256:9                size  +293, benefit     3037.5, efficiency     10.367
  ! Inline function call at CoreBuilder.mnd:271:5                size   +78, benefit      241.5, efficiency      3.096
  ! Inline function call at CoreBuilder.mnd:278:9                size   +22, benefit       28.0, efficiency      1.273
  ! Inline function call at CoreBuilder.mnd:279:16               size   +20, benefit       31.5, efficiency      1.575
  ! Inline function call at CoreBuilder.mnd:287:5                size   +22, benefit      279.0, efficiency     12.682
  ! Inline function call at CoreBuilder.mnd:288:12               size   +20, benefit      279.0, efficiency     13.950
  ! Inline function call at CoreBuilder.mnd:292:5                size   +19, benefit      112.0, efficiency      5.895
  ! Inline function call at CoreBuilder.mnd:297:5                size   +22, benefit       15.0, efficiency      0.682
  ! Inline function call at CoreBuilder.mnd:298:5                size   +78, benefit       14.0, efficiency      0.179
  ! Inline function call at CoreBuilder.mnd:380:5                size   +78, benefit       28.0, efficiency      0.359

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-71 instructions):
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label48 (h:*label48)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label48) (h:*label48)
    45 label *label48
-    * set *tmp125 :buildBlockFromCfg.1*retval
    46 set :buildBlockFromCfg.1:cfg "m*.<2######"
    47 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    48 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
 
    60 setaddr :buildBlockFromCfg.1*retaddr *label51 (h:*label51)
    61 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label51) (h:*label51)
    62 label *label51
-    * set *tmp128 :buildBlockFromCfg.1*retval
    63 set :buildFirstTitaniumDrill:cfg "w**5#-#####"
    64 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    65 setaddr :meetTarget.1*retaddr *label53 (h:*label53)
 
    91 setaddr :error*retaddr *label57 (h:*label57)
    92 call *label13 *invalid :error*retval (m:*label57) (h:*label57)
    93 label *label57
-    * set *tmp143 null
    94 jump *label56 always
    95 label *label55
-    * set *tmp143 null
    96 label *label56
    97 write @pneumatic-drill .display ".nextBlock"
    98 write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
 
   120 setaddr :buildBlockFromCfg.1*retaddr *label60 (h:*label60)
   121 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label60) (h:*label60)
   122 label *label60
-    * set *tmp149 :buildBlockFromCfg.1*retval
   123 set :buildBlockFromCfg.1:cfg "W*-'%######"
   124 setaddr :buildBlockFromCfg.1*retaddr *label61 (h:*label61)
   125 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label61) (h:*label61)
   126 label *label61
-    * set *tmp150 :buildBlockFromCfg.1*retval
   127 set .graphiteSurplus 100
   128 set :buildBlockFromCfg:cfg "®-.}U#U####"
   129 set :buildBlockFromCfg:config processor2
 
   145 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   146 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
   147 label *label63
-    * set *tmp152 :buildBlockFromCfg.1*retval
   148 set :buildBlockFromCfg.1:cfg "(*###A<###"
   149 setaddr :buildBlockFromCfg.1*retaddr *label64 (h:*label64)
   150 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label64) (h:*label64)
 
   183 op lessThan *tmp156 *tmp155 300
   184 jump *label73 equal *tmp156 false
   185 jump *label71 always
-    * set *tmp157 null
   186 jump *label74 always
   187 label *label73
-    * set *tmp157 null
   188 label *label74
   189 label *label70
   190 read *tmp97 .controller ".monos"
 
   196 setaddr :buildBlockFromCfg.1*retaddr *label75 (h:*label75)
   197 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
   198 label *label75
-    * set *tmp159 :buildBlockFromCfg.1*retval
   199 set :buildBlockFromCfg.1:cfg "T,*%%######"
   200 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   201 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
   202 label *label76
-    * set *tmp160 :buildBlockFromCfg.1*retval
   203 set :buildBlockFromCfg.1:cfg "',+_AA#####"
   204 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   205 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
 
   211 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
   212 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label78) (h:*label78)
   213 label *label78
-    * set *tmp162 :buildBlockFromCfg.1*retval
   214 set :buildBlockFromCfg.1:cfg "W'*'%######"
   215 setaddr :buildBlockFromCfg.1*retaddr *label79 (h:*label79)
   216 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label79) (h:*label79)
   217 label *label79
-    * set *tmp163 :buildBlockFromCfg.1*retval
   218 set :buildBlockFromCfg.1:cfg "W&*'%######"
   219 setaddr :buildBlockFromCfg.1*retaddr *label80 (h:*label80)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label80) (h:*label80)
   221 label *label80
-    * set *tmp164 :buildBlockFromCfg.1*retval
   222 set :buildBlockFromCfg.1:cfg "o%+FK<A####"
   223 setaddr :buildBlockFromCfg.1*retaddr *label81 (h:*label81)
   224 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label81) (h:*label81)
 
   248 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   249 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   250 label *label85
-    * set *tmp169 :buildBlockFromCfg.1*retval
   251 set :buildBlockFromCfg.1:cfg "*%ë#}####"
   252 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   253 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
 
   260 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   261 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   262 label *label87
-    * set *tmp171 :buildBlockFromCfg.1*retval
   263 setaddr :buildUnits*retaddr *label88 (h:*label88)
   264 call *label40 *invalid :buildUnits*retval (m:*label88) (h:*label88)
   265 label *label88
 
   280 setaddr :buildBlockFromCfg*retaddr *label91 (h:*label91)
   281 call *label36 *invalid :buildBlockFromCfg*retval (m:*label91) (h:*label91)
   282 label *label91
-    * set *tmp173 :buildBlockFromCfg*retval
   283 setaddr :buildUnits*retaddr *label92 (h:*label92)
   284 call *label40 *invalid :buildUnits*retval (m:*label92) (h:*label92)
   285 label *label92
 
   364 setaddr :error*retaddr *label111 (h:*label111)
   365 call *label13 *invalid :error*retval (m:*label111) (h:*label111)
   366 label *label111
-    * set *tmp198 null
   367 jump *label110 always
   368 label *label109
-    * set *tmp198 null
   369 label *label110
   370 write @laser-drill .blockBuilder ":buildBlockAt:block"
   371 read *tmp54 .oreLocator ".drillX"
 
   390 setaddr :buildRemoteBlock*retaddr *label113 (h:*label113)
   391 call *label35 *invalid :buildRemoteBlock*retval (m:*label113) (h:*label113)
   392 label *label113
-    * set *tmp206 :buildRemoteBlock*retval
   393 set :buildRemoteBlock:cfg "z%-AAA##A##"
   394 read *tmp60 .oreLocator ".water2X"
   395 set :buildRemoteBlock:x *tmp60
 
   398 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   399 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   400 label *label114
-    * set *tmp207 :buildRemoteBlock*retval
   401 set :buildRemoteBlock:cfg "o%+FK<A####"
   402 read *tmp62 .oreLocator ".generatorX"
   403 set :buildRemoteBlock:x *tmp62
 
   416 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   417 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   418 label *label116
-    * set *tmp209 :buildRemoteBlock*retval
   419 set :buildRemoteBlock:cfg "r**#-#+####"
   420 read *tmp66 .oreLocator ".panelX"
   421 set :buildRemoteBlock:x *tmp66
 
   424 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   425 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   426 label *label117
-    * set *tmp210 :buildRemoteBlock*retval
   427 set :buildRemoteBlock:cfg "k*/(7######"
   428 read *tmp68 .oreLocator ".batteryX"
   429 set :buildRemoteBlock:x *tmp68
 
   432 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   433 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   434 label *label118
-    * set *tmp211 :buildRemoteBlock*retval
   435 set :buildRemoteBlock:cfg "**#######"
   436 read *tmp58 .oreLocator ".containerX"
   437 set :buildRemoteBlock:x *tmp58
 
   445 op equal *tmp213 .thoriumContainer null
   446 jump *label120 equal *tmp213 false
   447 set .thoriumContainer .thoriumDrill
-    * set *tmp214 .thoriumContainer
   448 jump *label121 always
   449 label *label120
-    * set *tmp214 null
   450 label *label121
   451 write .thoriumDrill .display ".thoriumDrill"
   452 write .thoriumContainer .display ".thoriumContainer"
 
   484 setaddr :buildBlockFromCfg.1*retaddr *label129 (h:*label129)
   485 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label129) (h:*label129)
   486 label *label129
-    * set *tmp219 :buildBlockFromCfg.1*retval
   487 set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#"
   488 setaddr :buildBlockFromCfg.1*retaddr *label131 (h:*label131)
   489 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label131) (h:*label131)
 
   613 op notEqual *tmp236 *tmp235 null
   614 jump *label166 equal *tmp236 false
   615 ucontrol itemDrop @air 1000
-    * set *tmp237 null
   616 jump *label167 always
   617 label *label166
-    * set *tmp237 null
   618 label *label167
   619 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   620 label *label164
 
   673 op greaterThan *tmp251 *tmp249 *tmp250
   674 jump *label179 notEqual *tmp251 false
   675 label *label181
-    * set *tmp246 null
   676 jump *label177 always
   677 label *label176
   678 label *label182
 
   683 label *label183
   684 jump *label182 always
   685 label *label184
-    * set *tmp246 null
   686 label *label177
   687 set :transportStatus:target 0
   688 set :transportStatus:item null
 
   700 setaddr :error*retaddr *label189 (h:*label189)
   701 call *label13 *invalid :error*retval (m:*label189) (h:*label189)
   702 label *label189
-    * set *tmp257 null
   703 jump *label188 always
   704 label *label187
-    * set *tmp257 null
   705 label *label188
   706 label *label186
   707 return :locateOre*retaddr
 
   731 setaddr :dropAll*retaddr *label196 (h:*label196)
   732 call *label17 *invalid :dropAll*retval (m:*label196) (h:*label196)
   733 label *label196
-    * set *tmp261 null
   734 jump *label195 always
   735 label *label194
-    * set *tmp261 null
   736 label *label195
   737 set :status3:text "Mining..."
   738 setaddr :status3*retaddr *label197 (h:*label197)
 
   748 op land *tmp266 *tmp264 *tmp265
   749 jump *label201 equal *tmp266 false
   750 jump *label200 always
-    * set *tmp267 null
   751 jump *label202 always
   752 label *label201
-    * set *tmp267 null
   753 label *label202
   754 ucontrol mine :mineOre:x :mineOre:y
   755 op greaterThan *tmp268 @second :mineOre:stop
   756 jump *label203 equal *tmp268 false
   757 jump *label200 always
-    * set *tmp269 null
   758 jump *label204 always
   759 label *label203
-    * set *tmp269 null
   760 label *label204
   761 label *label199
   762 sensor *tmp270 @unit @totalItems
 
   822 op land *tmp280 *tmp278 *tmp279
   823 jump *label217 equal *tmp280 false
   824 ucontrol itemDrop @air 1000
-    * set *tmp281 null
   825 jump *label218 always
   826 label *label217
-    * set *tmp281 null
   827 label *label218
   828 label *label215
   829 sensor *tmp282 @unit :fetchBlock:item
 
   860 setaddr :mineOre*retaddr *label224 (h:*label224)
   861 call *label21 *invalid :mineOre*retval (m:*label224) (h:*label224)
   862 label *label224
-    * set *tmp290 null
   863 jump *label223 always
   864 label *label222
-    * set *tmp290 null
   865 label *label223
   866 label *label220
   867 return :supplyBlock*retaddr
 
   897 op land *tmp296 *tmp294 *tmp295
   898 jump *label233 equal *tmp296 false
   899 ucontrol itemDrop @air 1000
-    * set *tmp297 null
   900 jump *label234 always
   901 label *label233
-    * set *tmp297 null
   902 label *label234
   903 label *label231
   904 sensor *tmp298 @unit :supplyBlockFromCore:item
 
   995 call *label23 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   996 label *label243
   997 label *label240
-    * set *tmp338 null
   998 jump *label239 always
   999 label *label238
  1000 read *tmp97 .controller ".monos"
 
  1036 label *label254
  1037 set *tmp348 null
  1038 label *label255
-    * set *tmp345 *tmp348
  1039 jump *label253 always
  1040 label *label252
-    * set *tmp345 null
  1041 label *label253
  1042 sensor *tmp349 .core @silicon
  1043 op lessThan *tmp350 *tmp349 .targetSilicon
 
  1078 label *label265
  1079 set *tmp354 *tmp357
  1080 label *label261
-    * set *tmp351 *tmp354
  1081 jump *label259 always
  1082 label *label258
-    * set *tmp351 null
  1083 label *label259
  1084 sensor *tmp358 .battery @totalPower
  1085 op lessThan *tmp359 *tmp358 .powerTarget
 
  1107 label *label268
  1108 set *tmp360 null
  1109 label *label269
-    * set *tmp342 *tmp360
  1110 jump *label251 always
  1111 label *label250
-    * set *tmp342 null
  1112 label *label251
  1113 sensor *tmp364 .core @titanium
  1114 op lessThan *tmp365 *tmp364 .targetTitanium
 
  1245 label *label278
  1246 set *tmp374 null
  1247 label *label279
-    * set *tmp372 *tmp374
  1248 jump *label277 always
  1249 label *label276
  1250 set :status1:text "Goal 11: Fetching titanium"
 
  1256 setaddr :fetchBlock*retaddr *label307 (h:*label307)
  1257 call *label23 *invalid :fetchBlock*retval (m:*label307) (h:*label307)
  1258 label *label307
-    * set *tmp372 null
  1259 label *label277
  1260 label *label249
  1261 set *tmp340 null
  1262 label *label245
-    * set *tmp338 *tmp340
  1263 label *label239
  1264 label *label237
  1265 return :supplyBase*retaddr
 
  1339 jump *label323 equal *tmp415 false
  1340 set *tmp413 false
  1341 jump *label322 always
-    * set *tmp416 null
  1342 jump *label324 always
  1343 label *label323
-    * set *tmp416 null
  1344 label *label324
  1345 sensor *tmp417 .core @lead
  1346 op lessThan *tmp418 *tmp417 .targetLead
  1347 jump *label325 equal *tmp418 false
  1348 set *tmp413 false
  1349 jump *label322 always
-    * set *tmp419 null
  1350 jump *label326 always
  1351 label *label325
-    * set *tmp419 null
  1352 label *label326
  1353 sensor *tmp420 .core @graphite
  1354 op lessThan *tmp421 *tmp420 .targetGraphite
  1355 jump *label327 equal *tmp421 false
  1356 set *tmp413 false
  1357 jump *label322 always
-    * set *tmp422 null
  1358 jump *label328 always
  1359 label *label327
-    * set *tmp422 null
  1360 label *label328
  1361 sensor *tmp423 .core @silicon
  1362 op lessThan *tmp424 *tmp423 .targetSilicon
  1363 jump *label329 equal *tmp424 false
  1364 set *tmp413 false
  1365 jump *label322 always
-    * set *tmp425 null
  1366 jump *label330 always
  1367 label *label329
-    * set *tmp425 null
  1368 label *label330
  1369 sensor *tmp426 .core @titanium
  1370 op lessThan *tmp427 *tmp426 .targetTitanium
  1371 jump *label331 equal *tmp427 false
  1372 set *tmp413 false
  1373 jump *label322 always
-    * set *tmp428 null
  1374 jump *label332 always
  1375 label *label331
-    * set *tmp428 null
  1376 label *label332
  1377 sensor *tmp429 .core @metaglass
  1378 op lessThan *tmp430 *tmp429 .targetMetaglass
  1379 jump *label333 equal *tmp430 false
  1380 set *tmp413 false
  1381 jump *label322 always
-    * set *tmp431 null
  1382 jump *label334 always
  1383 label *label333
-    * set *tmp431 null
  1384 label *label334
  1385 sensor *tmp432 .core @thorium
  1386 op lessThan *tmp433 *tmp432 .targetThorium
  1387 jump *label335 equal *tmp433 false
  1388 set *tmp413 false
  1389 jump *label322 always
-    * set *tmp434 null
  1390 jump *label336 always
  1391 label *label335
-    * set *tmp434 null
  1392 label *label336
  1393 set *tmp413 true
  1394 jump *label322 always
 
  1469 label *label348
  1470 set :buildRemoteBlock*retval :buildBlock*retval
  1471 jump *label344 always
-    * set *tmp460 null
  1472 jump *label346 always
  1473 label *label345
-    * set *tmp460 null
  1474 label *label346
  1475 set :buildRemoteBlock*retval false
  1476 jump *label344 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-10 instructions):
 
  1009 call *label22 *invalid :mineOre.1*retval (m:*label248) (h:*label248)
  1010 label *label248
  1011 label *label246
-    * set *tmp340 null
  1012 jump *label245 always
  1013 label *label244
  1014 set :supplyBase0:supplied false
 
  1030 call *label24 *invalid :supplyBlock*retval (m:*label257) (h:*label257)
  1031 label *label257
  1032 set :supplyBase0:supplied true
-    * set *tmp348 :supplyBase0:supplied
  1033 jump *label255 always
  1034 label *label254
-    * set *tmp348 null
  1035 label *label255
  1036 jump *label253 always
  1037 label *label252
 
  1052 call *label24 *invalid :supplyBlock*retval (m:*label263) (h:*label263)
  1053 label *label263
  1054 set :supplyBase0:supplied true
-    * set *tmp354 :supplyBase0:supplied
  1055 jump *label261 always
  1056 label *label260
  1057 sensor *tmp355 .smelter @sand
 
  1072 label *label264
  1073 set *tmp357 null
  1074 label *label265
-    * set *tmp354 *tmp357
  1075 label *label261
  1076 jump *label259 always
  1077 label *label258
 
  1097 label *label270
  1098 set *tmp363 null
  1099 label *label271
-    * set *tmp360 *tmp363
  1100 jump *label269 always
  1101 label *label268
-    * set *tmp360 null
  1102 label *label269
  1103 jump *label251 always
  1104 label *label250
 
  1233 label *label285
  1234 set *tmp378 *tmp381
  1235 label *label281
-    * set *tmp374 *tmp378
  1236 jump *label279 always
  1237 label *label278
-    * set *tmp374 null
  1238 label *label279
  1239 jump *label277 always
  1240 label *label276
 
  1249 label *label307
  1250 label *label277
  1251 label *label249
-    * set *tmp340 null
  1252 label *label245
  1253 label *label239
  1254 label *label237

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-6 instructions):
 
  1067 call *label24 *invalid :supplyBlock*retval (m:*label267) (h:*label267)
  1068 label *label267
  1069 set :supplyBase0:supplied true
-    * set *tmp357 :supplyBase0:supplied
  1070 jump *label265 always
  1071 label *label264
-    * set *tmp357 null
  1072 label *label265
  1073 label *label261
  1074 jump *label259 always
 
  1090 call *label24 *invalid :supplyBlock*retval (m:*label273) (h:*label273)
  1091 label *label273
  1092 set :supplyBase0:supplied true
-    * set *tmp363 :supplyBase0:supplied
  1093 jump *label271 always
  1094 label *label270
-    * set *tmp363 null
  1095 label *label271
  1096 jump *label269 always
  1097 label *label268
 
  1128 setaddr :mineOre.1*retaddr *label283 (h:*label283)
  1129 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
  1130 label *label283
-    * set *tmp378 null
  1131 jump *label281 always
  1132 label *label280
  1133 sensor *tmp379 .core @silicon
 
  1226 label *label291
  1227 set *tmp381 *tmp388
  1228 label *label285
-    * set *tmp378 *tmp381
  1229 label *label281
  1230 jump *label279 always
  1231 label *label278

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
  1153 setaddr :mineOre.1*retaddr *label289 (h:*label289)
  1154 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
  1155 label *label289
-    * set *tmp381 null
  1156 jump *label285 always
  1157 label *label284
  1158 sensor *tmp386 .core @copper
 
  1223 label *label295
  1224 set *tmp388 *tmp391
  1225 label *label291
-    * set *tmp381 *tmp388
  1226 label *label285
  1227 label *label281
  1228 jump *label279 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
  1166 setaddr :mineOre.1*retaddr *label293 (h:*label293)
  1167 call *label22 *invalid :mineOre.1*retval (m:*label293) (h:*label293)
  1168 label *label293
-    * set *tmp388 null
  1169 jump *label291 always
  1170 label *label290
  1171 sensor *tmp389 .core @lead
 
  1220 label *label299
  1221 set *tmp391 *tmp394
  1222 label *label295
-    * set *tmp388 *tmp391
  1223 label *label291
  1224 label *label285
  1225 label *label281

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
  1179 setaddr :mineOre.1*retaddr *label297 (h:*label297)
  1180 call *label22 *invalid :mineOre.1*retval (m:*label297) (h:*label297)
  1181 label *label297
-    * set *tmp391 null
  1182 jump *label295 always
  1183 label *label294
  1184 sensor *tmp392 .core @metaglass
 
  1217 label *label305
  1218 set *tmp394 null
  1219 label *label299
-    * set *tmp391 *tmp394
  1220 label *label295
  1221 label *label291
  1222 label *label285

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
  1192 setaddr :mineOre.1*retaddr *label301 (h:*label301)
  1193 call *label22 *invalid :mineOre.1*retval (m:*label301) (h:*label301)
  1194 label *label301
-    * set *tmp394 null
  1195 jump *label299 always
  1196 label *label298
  1197 set :status1:text "Goal 10: supplying base"
 
  1214 setaddr :mineOre.1*retaddr *label305 (h:*label305)
  1215 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
  1216 label *label305
-    * set *tmp394 null
  1217 label *label299
  1218 label *label295
  1219 label *label291

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-76 instructions):
 
    19 write 511 bank1 511
    20 label *label43
    21 ubind @poly
-    * set *tmp119 @unit
-    * set .builder *tmp119
-    * ulocate building core false @copper .coreX .coreY *tmp121 *tmp120
-    * set .core *tmp120
+   22 set .builder @unit
+   23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label44
    25 op equal *tmp122 .core null
    26 jump *label43 notEqual *tmp122 false
 
    29 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
    30 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label46) (h:*label46)
    31 label *label46
-    * set *tmp123 :buildBlockFromCfg.1*retval
-    * set .press *tmp123
+   32 set .press :buildBlockFromCfg.1*retval
    33 set :buildBlockFromCfg.1:cfg "k*/(7######"
    34 setaddr :buildBlockFromCfg.1*retaddr *label47 (h:*label47)
    35 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label47) (h:*label47)
    36 label *label47
-    * set *tmp124 :buildBlockFromCfg.1*retval
-    * set .battery *tmp124
+   37 set .battery :buildBlockFromCfg.1*retval
    38 set :buildBlockFromCfg.1:cfg "k+/(7######"
    39 setaddr :buildBlockFromCfg.1*retaddr *label48 (h:*label48)
    40 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label48) (h:*label48)
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
    45 label *label49
-    * set *tmp126 :buildBlockFromCfg.1*retval
-    * set .generator *tmp126
+   46 set .generator :buildBlockFromCfg.1*retval
    47 set .powerTarget 400
    48 set :buildBlockFromCfg.1:cfg "%+-A<######"
    49 setaddr :buildBlockFromCfg.1*retaddr *label50 (h:*label50)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label50) (h:*label50)
    51 label *label50
-    * set *tmp127 :buildBlockFromCfg.1*retval
-    * set .smelter *tmp127
+   52 set .smelter :buildBlockFromCfg.1*retval
    53 set :buildBlockFromCfg.1:cfg "T+,%%######"
    54 setaddr :buildBlockFromCfg.1*retaddr *label51 (h:*label51)
    55 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label51) (h:*label51)
 
    73 wait 1e-15
    74 read *tmp140 .oreLocator ":findDrillLocation*finished"
    75 jump *label54 equal *tmp140 false
-    * read *tmp137 .oreLocator ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp137
-    * read *tmp138 .oreLocator ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp138
-    * read *tmp141 .oreLocator ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp141
+   76 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
+   77 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
+   78 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
    79 op equal *tmp142 :buildFirstTitaniumDrill:result false
    80 jump *label55 equal *tmp142 false
    81 set :error:error "Cannot locate spot for titanium drill"
 
    94 wait 1e-15
    95 read *tmp146 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
    96 jump *label58 equal *tmp146 false
-    * read *tmp147 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp129 *tmp147
+   97 read *tmp129 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
    98 jump *label52 always
    99 set *tmp129 null
   100 label *label52
 
   104 setaddr :buildBlockFromCfg.1*retaddr *label59 (h:*label59)
   105 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label59) (h:*label59)
   106 label *label59
-    * set *tmp148 :buildBlockFromCfg.1*retval
-    * set .unloader1 *tmp148
+  107 set .unloader1 :buildBlockFromCfg.1*retval
   108 set :buildBlockFromCfg.1:cfg "T),%%######"
   109 setaddr :buildBlockFromCfg.1*retaddr *label60 (h:*label60)
   110 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label60) (h:*label60)
 
   119 setaddr :buildBlockFromCfg*retaddr *label62 (h:*label62)
   120 call *label36 *invalid :buildBlockFromCfg*retval (m:*label62) (h:*label62)
   121 label *label62
-    * set *tmp151 :buildBlockFromCfg*retval
-    * set .controller *tmp151
+  122 set .controller :buildBlockFromCfg*retval
   123 write processor6 .controller ".timer"
   124 write .display .controller ".display"
   125 write .core .controller ".core"
 
   137 setaddr :buildBlockFromCfg.1*retaddr *label64 (h:*label64)
   138 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label64) (h:*label64)
   139 label *label64
-    * set *tmp153 :buildBlockFromCfg.1*retval
-    * write *tmp153 .controller ".unloader2"
+  140 write :buildBlockFromCfg.1*retval .controller ".unloader2"
   141 set :buildBlockFromCfg.1:cfg "'(_i#####&"
   142 setaddr :buildBlockFromCfg.1*retaddr *label65 (h:*label65)
   143 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label65) (h:*label65)
   144 label *label65
-    * set *tmp154 :buildBlockFromCfg.1*retval
-    * set :factory *tmp154
+  145 set :factory :buildBlockFromCfg.1*retval
   146 write :factory .controller ".factory"
   147 write :factory .display ".airFactory"
   148 set :setFlareTarget:target 1
 
   190 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   191 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
   192 label *label77
-    * set *tmp161 :buildBlockFromCfg.1*retval
-    * set .kiln *tmp161
+  193 set .kiln :buildBlockFromCfg.1*retval
   194 write .kiln .controller ".kiln"
   195 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   196 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
 
   208 setaddr :buildBlockFromCfg.1*retaddr *label81 (h:*label81)
   209 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label81) (h:*label81)
   210 label *label81
-    * set *tmp165 :buildBlockFromCfg.1*retval
-    * write *tmp165 .controller ".generator2"
+  211 write :buildBlockFromCfg.1*retval .controller ".generator2"
   212 set :buildBlockFromCfg.1:cfg "$(.#U<###"
   213 setaddr :buildBlockFromCfg.1*retaddr *label82 (h:*label82)
   214 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label82) (h:*label82)
   215 label *label82
-    * set *tmp166 :buildBlockFromCfg.1*retval
-    * write *tmp166 .controller ".multipress"
+  216 write :buildBlockFromCfg.1*retval .controller ".multipress"
   217 set .graphiteSurplus 200
   218 set :buildBlockFromCfg.1:cfg " '%-#2#####"
   219 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   221 label *label83
-    * set *tmp167 :buildBlockFromCfg.1*retval
-    * write *tmp167 .controller ".payloadRouter"
+  222 write :buildBlockFromCfg.1*retval .controller ".payloadRouter"
   223 set :buildBlockFromCfg.1:cfg "*(###A<###"
   224 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   226 label *label84
-    * set *tmp168 :buildBlockFromCfg.1*retval
-    * write *tmp168 .controller ".unloader4"
+  227 write :buildBlockFromCfg.1*retval .controller ".unloader4"
   228 set :buildBlockFromCfg.1:cfg "X*''%######"
   229 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   230 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
 
   233 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   234 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   235 label *label86
-    * set *tmp170 :buildBlockFromCfg.1*retval
-    * set :reconstructor *tmp170
+  236 set :reconstructor :buildBlockFromCfg.1*retval
   237 write :reconstructor .controller ".reconstructor"
   238 write :reconstructor .display ".reconstructor"
   239 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
 
   253 setaddr :buildBlockFromCfg.1*retaddr *label90 (h:*label90)
   254 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label90) (h:*label90)
   255 label *label90
-    * set *tmp172 :buildBlockFromCfg.1*retval
-    * write *tmp172 .controller ".smelter2"
+  256 write :buildBlockFromCfg.1*retval .controller ".smelter2"
   257 set :buildBlockFromCfg:cfg "--###A<###"
   258 set :buildBlockFromCfg:config @sand
   259 setaddr :buildBlockFromCfg*retaddr *label91 (h:*label91)
 
   293 write @ore-titanium .display ".nextBlock"
   294 wait 0.000000001
   295 ubind @flare
-    * read *tmp52 .oreLocator ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp52
+  296 read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
   297 write .coreX .oreLocator ":findDrillLocation:x"
   298 write .coreY .oreLocator ":findDrillLocation:y"
   299 write @unit .oreLocator ":findDrillLocation:unit"
 
   334 wait 1e-15
   335 read *tmp195 .oreLocator ":layoutThoriumDrill*finished"
   336 jump *label108 equal *tmp195 false
-    * read *tmp196 .oreLocator ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp196
+  337 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
   338 op equal *tmp197 :buildThoriumDrill:result false
   339 jump *label109 equal *tmp197 false
   340 set :error:error "Cannot locate spot for thorium drill"
 
   357 wait 1e-15
   358 read *tmp204 .blockBuilder ":buildBlockAt*finished"
   359 jump *label112 equal *tmp204 false
-    * read *tmp205 .blockBuilder ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp205
+  360 read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
   361 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read *tmp56 .oreLocator ".water1X"
-    * set :buildRemoteBlock:x *tmp56
-    * read *tmp57 .oreLocator ".water1Y"
-    * set :buildRemoteBlock:y *tmp57
+  362 read :buildRemoteBlock:x .oreLocator ".water1X"
+  363 read :buildRemoteBlock:y .oreLocator ".water1Y"
   364 setaddr :buildRemoteBlock*retaddr *label113 (h:*label113)
   365 call *label35 *invalid :buildRemoteBlock*retval (m:*label113) (h:*label113)
   366 label *label113
   367 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read *tmp60 .oreLocator ".water2X"
-    * set :buildRemoteBlock:x *tmp60
-    * read *tmp61 .oreLocator ".water2Y"
-    * set :buildRemoteBlock:y *tmp61
+  368 read :buildRemoteBlock:x .oreLocator ".water2X"
+  369 read :buildRemoteBlock:y .oreLocator ".water2Y"
   370 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   371 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   372 label *label114
   373 set :buildRemoteBlock:cfg "o%+FK<A####"
-    * read *tmp62 .oreLocator ".generatorX"
-    * set :buildRemoteBlock:x *tmp62
-    * read *tmp63 .oreLocator ".generatorY"
-    * set :buildRemoteBlock:y *tmp63
+  374 read :buildRemoteBlock:x .oreLocator ".generatorX"
+  375 read :buildRemoteBlock:y .oreLocator ".generatorY"
   376 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   377 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   378 label *label115
-    * set *tmp208 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp208
+  379 set .thoriumGenerator :buildRemoteBlock*retval
   380 set :buildRemoteBlock:cfg "g)'%)######"
-    * read *tmp64 .oreLocator ".nodeX"
-    * set :buildRemoteBlock:x *tmp64
-    * read *tmp65 .oreLocator ".nodeY"
-    * set :buildRemoteBlock:y *tmp65
+  381 read :buildRemoteBlock:x .oreLocator ".nodeX"
+  382 read :buildRemoteBlock:y .oreLocator ".nodeY"
   383 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   384 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   385 label *label116
   386 set :buildRemoteBlock:cfg "r**#-#+####"
-    * read *tmp66 .oreLocator ".panelX"
-    * set :buildRemoteBlock:x *tmp66
-    * read *tmp67 .oreLocator ".panelY"
-    * set :buildRemoteBlock:y *tmp67
+  387 read :buildRemoteBlock:x .oreLocator ".panelX"
+  388 read :buildRemoteBlock:y .oreLocator ".panelY"
   389 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   390 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   391 label *label117
   392 set :buildRemoteBlock:cfg "k*/(7######"
-    * read *tmp68 .oreLocator ".batteryX"
-    * set :buildRemoteBlock:x *tmp68
-    * read *tmp69 .oreLocator ".batteryY"
-    * set :buildRemoteBlock:y *tmp69
+  393 read :buildRemoteBlock:x .oreLocator ".batteryX"
+  394 read :buildRemoteBlock:y .oreLocator ".batteryY"
   395 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   396 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   397 label *label118
   398 set :buildRemoteBlock:cfg "**#######"
-    * read *tmp58 .oreLocator ".containerX"
-    * set :buildRemoteBlock:x *tmp58
-    * read *tmp59 .oreLocator ".containerY"
-    * set :buildRemoteBlock:y *tmp59
+  399 read :buildRemoteBlock:x .oreLocator ".containerX"
+  400 read :buildRemoteBlock:y .oreLocator ".containerY"
   401 setaddr :buildRemoteBlock*retaddr *label119 (h:*label119)
   402 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   403 label *label119
-    * set *tmp212 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp212
+  404 set .thoriumContainer :buildRemoteBlock*retval
   405 op equal *tmp213 .thoriumContainer null
   406 jump *label120 equal *tmp213 false
   407 set .thoriumContainer .thoriumDrill
 
   438 setaddr :buildBlockFromCfg*retaddr *label128 (h:*label128)
   439 call *label36 *invalid :buildBlockFromCfg*retval (m:*label128) (h:*label128)
   440 label *label128
-    * set *tmp218 :buildBlockFromCfg*retval
-    * write *tmp218 .controller ".unloader6"
+  441 write :buildBlockFromCfg*retval .controller ".unloader6"
   442 set :buildBlockFromCfg.1:cfg "X+''%######"
   443 setaddr :buildBlockFromCfg.1*retaddr *label129 (h:*label129)
   444 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label129) (h:*label129)
 
   487 label *label141
   488 label *label142
   489 jump *label144 equal true false
-    * op sub *tmp226 @thisy 6
-    * set :lineUpUnits:y *tmp226
+  490 op sub :lineUpUnits:y @thisy 6
   491 set :lineUpUnits:unit @mega
   492 setaddr :lineUpUnits*retaddr *label145 (h:*label145)
   493 call *label42 *invalid :lineUpUnits*retval (m:*label145) (h:*label145)
   494 label *label145
-    * op sub *tmp227 @thisy 10
-    * set :lineUpUnits:y *tmp227
+  495 op sub :lineUpUnits:y @thisy 10
   496 set :lineUpUnits:unit @poly
   497 setaddr :lineUpUnits*retaddr *label146 (h:*label146)
   498 call *label42 *invalid :lineUpUnits*retval (m:*label146) (h:*label146)
   499 label *label146
-    * op sub *tmp228 @thisy 14
-    * set :lineUpUnits:y *tmp228
+  500 op sub :lineUpUnits:y @thisy 14
   501 set :lineUpUnits:unit @mono
   502 setaddr :lineUpUnits*retaddr *label147 (h:*label147)
   503 call *label42 *invalid :lineUpUnits*retval (m:*label147) (h:*label147)
   504 label *label147
-    * op sub *tmp229 @thisy 18
-    * set :lineUpUnits:y *tmp229
+  505 op sub :lineUpUnits:y @thisy 18
   506 set :lineUpUnits:unit @flare
   507 setaddr :lineUpUnits*retaddr *label148 (h:*label148)
   508 call *label42 *invalid :lineUpUnits*retval (m:*label148) (h:*label148)
 
   617 setaddr :moveToBlock*retaddr *label178 (h:*label178)
   618 call *label18 *invalid :moveToBlock*retval (m:*label178) (h:*label178)
   619 label *label178
-    * sensor *tmp247 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp247
+  620 sensor :depositItems:cap :depositItems:block @itemCapacity
   621 label *label179
   622 ucontrol itemDrop :depositItems:block 30
   623 label *label180
 
   647 return :depositItems*retaddr
   648 end
   649 label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 *tmp255
+  650 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 0
   651 op equal *tmp256 *tmp254 false
   652 jump *label187 equal *tmp256 false
   653 set :error:error "Cannot locate ore"
 
   661 return :locateOre*retaddr
   662 end
   663 label *label21
-    * op min *tmp258 :mineOre:amount 30
-    * set :mineOre:amount *tmp258
+  664 op min :mineOre:amount :mineOre:amount 30
   665 set :transportStatus:target :mineOre:amount
   666 set :transportStatus:item :mineOre:ore
   667 setaddr :transportStatus*retaddr *label191 (h:*label191)
 
   691 setaddr :status3*retaddr *label197 (h:*label197)
   692 call *label11 *invalid :status3*retval (m:*label197) (h:*label197)
   693 label *label197
-    * op add *tmp262 @second 10
-    * set :mineOre:stop *tmp262
+  694 op add :mineOre:stop @second 10
   695 label *label198
-    * sensor *tmp263 @unit @firstItem
-    * set :mineOre:item *tmp263
+  696 sensor :mineOre:item @unit @firstItem
   697 op notEqual *tmp264 :mineOre:item null
   698 op notEqual *tmp265 :mineOre:item :mineOre:ore
   699 op land *tmp266 *tmp264 *tmp265
 
   730 setaddr :status2*retaddr *label207 (h:*label207)
   731 call *label10 *invalid :status2*retval (m:*label207) (h:*label207)
   732 label *label207
-    * set *tmp272 :mineOre.1:ore
-    * set :mineOre:ore *tmp272
+  733 set :mineOre:ore :mineOre.1:ore
   734 set :mineOre:amount 30
   735 set :mineOre:block .core
   736 setaddr :mineOre*retaddr *label208 (h:*label208)
 
   741 end
   742 label *label23
   743 sensor *tmp273 :fetchBlock:block @itemCapacity
-    * op min *tmp274 *tmp273 30
-    * set :transportStatus:target *tmp274
+  744 op min :transportStatus:target *tmp273 30
   745 set :transportStatus:item :fetchBlock:item
   746 setaddr :transportStatus*retaddr *label210 (h:*label210)
   747 call *label12 *invalid :transportStatus*retval (m:*label210) (h:*label210)
 
   764 label *label213
   765 label *label214
   766 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp277 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp277
+  767 sensor :fetchBlock:unitItem @unit @firstItem
   768 op notEqual *tmp278 :fetchBlock:unitItem null
   769 op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
   770 op land *tmp280 *tmp278 *tmp279
 
   795 setaddr :status2*retaddr *label221 (h:*label221)
   796 call *label10 *invalid :status2*retval (m:*label221) (h:*label221)
   797 label *label221
-    * sensor *tmp286 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp286
+  798 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   799 sensor *tmp287 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp288 :supplyBlock:blockCapacity *tmp287
-    * set :supplyBlock:missing *tmp288
+  800 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp287
   801 op greaterThan *tmp289 :supplyBlock:missing 0
   802 jump *label222 equal *tmp289 false
   803 set :mineOre:ore :supplyBlock:ore
 
   814 end
   815 label *label25
   816 sensor *tmp291 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp292 *tmp291 30
-    * set :transportStatus:target *tmp292
+  817 op min :transportStatus:target *tmp291 30
   818 set :transportStatus:item :supplyBlockFromCore:item
   819 setaddr :transportStatus*retaddr *label226 (h:*label226)
   820 call *label12 *invalid :transportStatus*retval (m:*label226) (h:*label226)
 
   835 label *label229
   836 label *label230
   837 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp293 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp293
+  838 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   839 op notEqual *tmp294 :supplyBlockFromCore:unitItem null
   840 op notEqual *tmp295 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
   841 op land *tmp296 *tmp294 *tmp295
 
   865 op add :unpackCfg:index :unpackCfg:index 1
   866 read *tmp303 :unpackCfg:cfg *tmp302
   867 op sub *tmp304 *tmp303 35
-    * lookup block *tmp305 *tmp304
-    * set :unpackCfg:type *tmp305
+  868 lookup block :unpackCfg:type *tmp304
   869 set *tmp306 :unpackCfg:index
   870 op add :unpackCfg:index :unpackCfg:index 1
   871 read *tmp307 :unpackCfg:cfg *tmp306
   872 op sub *tmp308 *tmp307 35
-    * op sub *tmp309 *tmp308 7
-    * set :unpackCfg:x *tmp309
+  873 op sub :unpackCfg:x *tmp308 7
   874 set *tmp310 :unpackCfg:index
   875 op add :unpackCfg:index :unpackCfg:index 1
   876 read *tmp311 :unpackCfg:cfg *tmp310
   877 op sub *tmp312 *tmp311 35
-    * op sub *tmp313 *tmp312 7
-    * set :unpackCfg:y *tmp313
+  878 op sub :unpackCfg:y *tmp312 7
   879 set *tmp314 :unpackCfg:index
   880 op add :unpackCfg:index :unpackCfg:index 1
   881 read *tmp315 :unpackCfg:cfg *tmp314
-    * op sub *tmp316 *tmp315 35
-    * set :unpackCfg:cu *tmp316
+  882 op sub :unpackCfg:cu *tmp315 35
   883 set *tmp317 :unpackCfg:index
   884 op add :unpackCfg:index :unpackCfg:index 1
   885 read *tmp318 :unpackCfg:cfg *tmp317
-    * op sub *tmp319 *tmp318 35
-    * set :unpackCfg:pb *tmp319
+  886 op sub :unpackCfg:pb *tmp318 35
   887 set *tmp320 :unpackCfg:index
   888 op add :unpackCfg:index :unpackCfg:index 1
   889 read *tmp321 :unpackCfg:cfg *tmp320
-    * op sub *tmp322 *tmp321 35
-    * set :unpackCfg:gr *tmp322
+  890 op sub :unpackCfg:gr *tmp321 35
   891 set *tmp323 :unpackCfg:index
   892 op add :unpackCfg:index :unpackCfg:index 1
   893 read *tmp324 :unpackCfg:cfg *tmp323
-    * op sub *tmp325 *tmp324 35
-    * set :unpackCfg:si *tmp325
+  894 op sub :unpackCfg:si *tmp324 35
   895 set *tmp326 :unpackCfg:index
   896 op add :unpackCfg:index :unpackCfg:index 1
   897 read *tmp327 :unpackCfg:cfg *tmp326
-    * op sub *tmp328 *tmp327 35
-    * set :unpackCfg:ti *tmp328
+  898 op sub :unpackCfg:ti *tmp327 35
   899 set *tmp329 :unpackCfg:index
   900 op add :unpackCfg:index :unpackCfg:index 1
   901 read *tmp330 :unpackCfg:cfg *tmp329
-    * op sub *tmp331 *tmp330 35
-    * set :unpackCfg:mg *tmp331
+  902 op sub :unpackCfg:mg *tmp330 35
   903 set *tmp332 :unpackCfg:index
   904 op add :unpackCfg:index :unpackCfg:index 1
   905 read *tmp333 :unpackCfg:cfg *tmp332
-    * op sub *tmp334 *tmp333 35
-    * set :unpackCfg:th *tmp334
+  906 op sub :unpackCfg:th *tmp333 35
   907 set *tmp335 :unpackCfg:index
   908 op add :unpackCfg:index :unpackCfg:index 1
   909 read *tmp336 :unpackCfg:cfg *tmp335
-    * op sub *tmp337 *tmp336 35
-    * set :unpackCfg:rotation *tmp337
+  910 op sub :unpackCfg:rotation *tmp336 35
   911 label *label236
   912 return :unpackCfg*retaddr
   913 end
 
  1037 jump *label274 equal *tmp365 false
  1038 sensor *tmp367 .core @titanium
  1039 op sub *tmp368 .targetTitanium *tmp367
-    * op min *tmp369 7 *tmp368
-    * set *tmp366 *tmp369
+ 1040 op min *tmp366 7 *tmp368
  1041 jump *label275 always
  1042 label *label274
  1043 set *tmp366 100
 
  1069 setaddr :status1*retaddr *label286 (h:*label286)
  1070 call *label9 *invalid :status1*retval (m:*label286) (h:*label286)
  1071 label *label286
-    * sensor *tmp382 .core @coal
-    * set :supplyBase0:coal *tmp382
-    * sensor *tmp383 .core @sand
-    * set :supplyBase0:sand *tmp383
+ 1072 sensor :supplyBase0:coal .core @coal
+ 1073 sensor :supplyBase0:sand .core @sand
  1074 op lessThan *tmp384 :supplyBase0:coal :supplyBase0:sand
  1075 jump *label287 equal *tmp384 false
  1076 set *tmp385 @coal
 
  1128 setaddr :status1*retaddr *label302 (h:*label302)
  1129 call *label9 *invalid :status1*retval (m:*label302) (h:*label302)
  1130 label *label302
-    * sensor *tmp395 .core @coal
-    * set :supplyBase0:coal.1 *tmp395
-    * sensor *tmp396 .core @sand
-    * set :supplyBase0:sand.1 *tmp396
+ 1131 sensor :supplyBase0:coal.1 .core @coal
+ 1132 sensor :supplyBase0:sand.1 .core @sand
  1133 op lessThanEq *tmp397 :supplyBase0:coal.1 :supplyBase0:sand.1
  1134 jump *label303 equal *tmp397 false
  1135 set *tmp398 @coal
 
  1214 write :meetTarget:thorium .display ".targetThorium"
  1215 set .targetCopper :meetTarget:copper
  1216 op add *tmp401 :meetTarget:lead .leadSurplus
-    * op add *tmp402 *tmp401 1
-    * set .targetLead *tmp402
+ 1217 op add .targetLead *tmp401 1
  1218 set .targetGraphite :meetTarget:graphite
  1219 set .targetSilicon :meetTarget:silicon
  1220 set .targetTitanium :meetTarget:titanium
 
  1331 wait 1e-15
  1332 read *tmp456 .blockBuilder ":buildBlockAt*finished"
  1333 jump *label343 equal *tmp456 false
-    * read *tmp457 .blockBuilder ":buildBlockAt*retval"
-    * set :buildBlock*retval *tmp457
+ 1334 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1335 jump *label341 always
  1336 set :buildBlock*retval null
  1337 label *label341
 
  1420 return :buildBlockFromCfg*retaddr
  1421 end
  1422 label *label37
-    * set *tmp463 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp463
+ 1423 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
  1424 set :buildBlockFromCfg:config null
  1425 setaddr :buildBlockFromCfg*retaddr *label353 (h:*label353)
  1426 call *label36 *invalid :buildBlockFromCfg*retval (m:*label353) (h:*label353)
 
  1495 ubind :lineUpUnits:unit
  1496 set :lineUpUnits:firstUnit @unit
  1497 label *label367
-    * sensor *tmp472 @unit @flag
-    * set :lineUpUnits:x *tmp472
+ 1498 sensor :lineUpUnits:x @unit @flag
  1499 ucontrol itemDrop @air 1000
  1500 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1501 ubind :lineUpUnits:unit

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   486 call *label41 *invalid :flagUnits*retval (m:*label141) (h:*label141)
   487 label *label141
   488 label *label142
-    * jump *label144 equal true false
   489 op sub :lineUpUnits:y @thisy 6
   490 set :lineUpUnits:unit @mega
   491 setaddr :lineUpUnits*retaddr *label145 (h:*label145)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-52 instructions):
 
    22 set .builder @unit
    23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label44
-    * op equal *tmp122 .core null
-    * jump *label43 notEqual *tmp122 false
+   25 jump *label43 equal .core null
    26 label *label45
    27 set :buildBlockFromCfg.1:cfg "#'+nA######"
    28 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
 
    75 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
    76 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
    77 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
-    * op equal *tmp142 :buildFirstTitaniumDrill:result false
-    * jump *label55 equal *tmp142 false
+   78 jump *label55 notEqual :buildFirstTitaniumDrill:result false
    79 set :error:error "Cannot locate spot for titanium drill"
    80 setaddr :error*retaddr *label57 (h:*label57)
    81 call *label13 *invalid :error*retval (m:*label57) (h:*label57)
 
   164 call *label32 *invalid :supplyBase*retval (m:*label72) (h:*label72)
   165 label *label72
   166 sensor *tmp155 .battery @totalPower
-    * op lessThan *tmp156 *tmp155 300
-    * jump *label73 equal *tmp156 false
+  167 jump *label73 greaterThanEq *tmp155 300
   168 jump *label71 always
   169 jump *label74 always
   170 label *label73
   171 label *label74
   172 label *label70
   173 read *tmp97 .controller ".monos"
-    * op lessThan *tmp158 *tmp97 3
-    * jump *label69 notEqual *tmp158 false
+  174 jump *label69 lessThan *tmp97 3
   175 label *label71
   176 set .siliconSurplus 65
   177 set :buildBlockFromCfg.1:cfg ",)###A<###"
 
   260 label *label92
   261 label *label93
   262 read *tmp98 .controller ".polys"
-    * op lessThan *tmp174 *tmp98 3
-    * jump *label95 equal *tmp174 false
+  263 jump *label95 greaterThanEq *tmp98 3
   264 setaddr :supplyBase*retaddr *label96 (h:*label96)
   265 call *label32 *invalid :supplyBase*retval (m:*label96) (h:*label96)
   266 label *label96
 
   273 label *label97
   274 label *label98
   275 read *tmp96 .controller ".flares"
-    * op lessThan *tmp175 *tmp96 2
-    * jump *label100 equal *tmp175 false
+  276 jump *label100 greaterThanEq *tmp96 2
   277 setaddr :supplyBase*retaddr *label101 (h:*label101)
   278 call *label32 *invalid :supplyBase*retval (m:*label101) (h:*label101)
   279 label *label101
 
   329 read *tmp195 .oreLocator ":layoutThoriumDrill*finished"
   330 jump *label108 equal *tmp195 false
   331 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
-    * op equal *tmp197 :buildThoriumDrill:result false
-    * jump *label109 equal *tmp197 false
+  332 jump *label109 notEqual :buildThoriumDrill:result false
   333 set :error:error "Cannot locate spot for thorium drill"
   334 setaddr :error*retaddr *label111 (h:*label111)
   335 call *label13 *invalid :error*retval (m:*label111) (h:*label111)
 
   395 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   396 label *label119
   397 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp213 .thoriumContainer null
-    * jump *label120 equal *tmp213 false
+  398 jump *label120 notEqual .thoriumContainer null
   399 set .thoriumContainer .thoriumDrill
   400 jump *label121 always
   401 label *label120
 
   417 label *label123
   418 label *label124
   419 read *tmp98 .controller ".polys"
-    * op lessThan *tmp217 *tmp98 5
-    * jump *label126 equal *tmp217 false
+  420 jump *label126 greaterThanEq *tmp98 5
   421 setaddr :supplyBase*retaddr *label127 (h:*label127)
   422 call *label32 *invalid :supplyBase*retval (m:*label127) (h:*label127)
   423 label *label127
 
   447 label *label132
   448 label *label133
   449 read *tmp99 .controller ".megas"
-    * op lessThan *tmp220 *tmp99 1
-    * jump *label135 equal *tmp220 false
+  450 jump *label135 greaterThanEq *tmp99 1
   451 setaddr :supplyBase*retaddr *label136 (h:*label136)
   452 call *label32 *invalid :supplyBase*retval (m:*label136) (h:*label136)
   453 label *label136
 
   537 label *label155
   538 label *label156
   539 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
-    * op equal *tmp231 *tmp230 false
-    * jump *label158 equal *tmp231 false
+  540 jump *label158 notEqual *tmp230 false
   541 op sub *tmp232 :moveTo:radius 0.5
   542 ucontrol approach :moveTo:x :moveTo:y *tmp232
   543 label *label157
 
   553 label *label162
   554 label *label163
   555 sensor *tmp235 @unit @firstItem
-    * op notEqual *tmp236 *tmp235 null
-    * jump *label166 equal *tmp236 false
+  556 jump *label166 equal *tmp235 null
   557 ucontrol itemDrop @air 1000
   558 jump *label167 always
   559 label *label166
 
   561 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   562 label *label164
   563 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
-    * op equal *tmp239 *tmp238 false
-    * jump *label163 notEqual *tmp239 false
+  564 jump *label163 equal *tmp238 false
   565 label *label165
   566 label *label161
   567 return :moveToEmpty*retaddr
 
   569 label *label17
   570 label *label169
   571 sensor *tmp240 @unit @firstItem
-    * op notEqual *tmp241 *tmp240 null
-    * jump *label171 equal *tmp241 false
+  572 jump *label171 equal *tmp240 null
   573 ucontrol itemDrop @air 1000
   574 label *label170
   575 jump *label169 always
 
   595 call *label11 *invalid :status3*retval (m:*label175) (h:*label175)
   596 label *label175
   597 sensor *tmp244 @unit @firstItem
-    * op equal *tmp245 *tmp244 :depositItems:item
-    * jump *label176 equal *tmp245 false
+  598 jump *label176 notEqual *tmp244 :depositItems:item
   599 set :moveToBlock:block :depositItems:block
   600 set :moveToBlock:radius 6
   601 setaddr :moveToBlock*retaddr *label178 (h:*label178)
 
   608 sensor *tmp248 @unit @firstItem
   609 op mul *tmp249 *tmp248 :depositItems:cap
   610 sensor *tmp250 :depositItems:block :depositItems:item
-    * op greaterThan *tmp251 *tmp249 *tmp250
-    * jump *label179 notEqual *tmp251 false
+  611 jump *label179 greaterThan *tmp249 *tmp250
   612 label *label181
   613 jump *label177 always
   614 label *label176
   615 label *label182
   616 sensor *tmp252 @unit @firstItem
-    * op notEqual *tmp253 *tmp252 null
-    * jump *label184 equal *tmp253 false
+  617 jump *label184 equal *tmp252 null
   618 ucontrol itemDrop @air 1000
   619 label *label183
   620 jump *label182 always
 
   630 end
   631 label *label20
   632 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 0
-    * op equal *tmp256 *tmp254 false
-    * jump *label187 equal *tmp256 false
+  633 jump *label187 notEqual *tmp254 false
   634 set :error:error "Cannot locate ore"
   635 setaddr :error*retaddr *label189 (h:*label189)
   636 call *label13 *invalid :error*retval (m:*label189) (h:*label189)
 
   660 call *label16 *invalid :moveToEmpty*retval (m:*label193) (h:*label193)
   661 label *label193
   662 sensor *tmp259 @unit @firstItem
-    * op notEqual *tmp260 *tmp259 :mineOre:ore
-    * jump *label194 equal *tmp260 false
+  663 jump *label194 equal *tmp259 :mineOre:ore
   664 setaddr :dropAll*retaddr *label196 (h:*label196)
   665 call *label17 *invalid :dropAll*retval (m:*label196) (h:*label196)
   666 label *label196
 
   683 label *label201
   684 label *label202
   685 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp268 @second :mineOre:stop
-    * jump *label203 equal *tmp268 false
+  686 jump *label203 lessThanEq @second :mineOre:stop
   687 jump *label200 always
   688 jump *label204 always
   689 label *label203
   690 label *label204
   691 label *label199
   692 sensor *tmp270 @unit @totalItems
-    * op lessThan *tmp271 *tmp270 :mineOre:amount
-    * jump *label198 notEqual *tmp271 false
+  693 jump *label198 lessThan *tmp270 :mineOre:amount
   694 label *label200
   695 ucontrol unbind
   696 set :depositItems:block :mineOre:block
 
   776 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   777 sensor *tmp287 :supplyBlock:block :supplyBlock:ore
   778 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp287
-    * op greaterThan *tmp289 :supplyBlock:missing 0
-    * jump *label222 equal *tmp289 false
+  779 jump *label222 lessThanEq :supplyBlock:missing 0
   780 set :mineOre:ore :supplyBlock:ore
   781 set :mineOre:amount :supplyBlock:blockCapacity
   782 set :mineOre:block :supplyBlock:block
 
   908 jump *label239 always
   909 label *label238
   910 read *tmp97 .controller ".monos"
-    * op greaterThan *tmp339 *tmp97 3
-    * jump *label244 equal *tmp339 false
+  911 jump *label244 lessThanEq *tmp97 3
   912 set :status1:text "Phase 1: supplying base"
   913 setaddr :status1*retaddr *label247 (h:*label247)
   914 call *label9 *invalid :status1*retval (m:*label247) (h:*label247)
 
   921 jump *label245 always
   922 label *label244
   923 set :supplyBase0:supplied false
-    * op equal *tmp341 .unloader1 null
-    * jump *label250 equal *tmp341 false
+  924 jump *label250 notEqual .unloader1 null
   925 sensor *tmp343 .core @graphite
-    * op lessThan *tmp344 *tmp343 .targetGraphite
-    * jump *label252 equal *tmp344 false
+  926 jump *label252 greaterThanEq *tmp343 .targetGraphite
   927 sensor *tmp346 .press @coal
-    * op lessThan *tmp347 *tmp346 5
-    * jump *label254 equal *tmp347 false
+  928 jump *label254 greaterThanEq *tmp346 5
   929 set :status1:text "Goal 1: graphite requirement"
   930 setaddr :status1*retaddr *label256 (h:*label256)
   931 call *label9 *invalid :status1*retval (m:*label256) (h:*label256)
 
   943 label *label252
   944 label *label253
   945 sensor *tmp349 .core @silicon
-    * op lessThan *tmp350 *tmp349 .targetSilicon
-    * jump *label258 equal *tmp350 false
+  946 jump *label258 greaterThanEq *tmp349 .targetSilicon
   947 sensor *tmp352 .smelter @coal
-    * op lessThan *tmp353 *tmp352 5
-    * jump *label260 equal *tmp353 false
+  948 jump *label260 greaterThanEq *tmp352 5
   949 set :status1:text "Goal 2: coal for silicon requirement"
   950 setaddr :status1*retaddr *label262 (h:*label262)
   951 call *label9 *invalid :status1*retval (m:*label262) (h:*label262)
 
   959 jump *label261 always
   960 label *label260
   961 sensor *tmp355 .smelter @sand
-    * op lessThan *tmp356 *tmp355 5
-    * jump *label264 equal *tmp356 false
+  962 jump *label264 greaterThanEq *tmp355 5
   963 set :status1:text "Goal 3: sand for silicon requirement"
   964 setaddr :status1*retaddr *label266 (h:*label266)
   965 call *label9 *invalid :status1*retval (m:*label266) (h:*label266)
 
   978 label *label258
   979 label *label259
   980 sensor *tmp358 .battery @totalPower
-    * op lessThan *tmp359 *tmp358 .powerTarget
-    * jump *label268 equal *tmp359 false
+  981 jump *label268 greaterThanEq *tmp358 .powerTarget
   982 sensor *tmp361 .generator @coal
-    * op lessThan *tmp362 *tmp361 2
-    * jump *label270 equal *tmp362 false
+  983 jump *label270 greaterThanEq *tmp361 2
   984 set :status1:text "Goal 4: supplying generator"
   985 setaddr :status1*retaddr *label272 (h:*label272)
   986 call *label9 *invalid :status1*retval (m:*label272) (h:*label272)
 
  1001 label *label250
  1002 label *label251
  1003 sensor *tmp364 .core @titanium
-    * op lessThan *tmp365 *tmp364 .targetTitanium
-    * jump *label274 equal *tmp365 false
+ 1004 jump *label274 greaterThanEq *tmp364 .targetTitanium
  1005 sensor *tmp367 .core @titanium
  1006 op sub *tmp368 .targetTitanium *tmp367
  1007 op min *tmp366 7 *tmp368
 
  1011 label *label275
  1012 set :supplyBase0:titaniumTrigger *tmp366
  1013 sensor *tmp370 .titaniumDrill @titanium
-    * op lessThan *tmp371 *tmp370 :supplyBase0:titaniumTrigger
-    * jump *label276 equal *tmp371 false
-    * op equal *tmp373 :supplyBase0:supplied false
-    * jump *label278 equal *tmp373 false
+ 1014 jump *label276 greaterThanEq *tmp370 :supplyBase0:titaniumTrigger
+ 1015 jump *label278 notEqual :supplyBase0:supplied false
  1016 sensor *tmp375 .battery @totalPower
  1017 op mul *tmp376 .unloader1 .powerTarget
-    * op lessThan *tmp377 *tmp375 *tmp376
-    * jump *label280 equal *tmp377 false
+ 1018 jump *label280 greaterThanEq *tmp375 *tmp376
  1019 set :status1:text "Goal 5: supplying generator"
  1020 setaddr :status1*retaddr *label282 (h:*label282)
  1021 call *label9 *invalid :status1*retval (m:*label282) (h:*label282)
 
  1027 jump *label281 always
  1028 label *label280
  1029 sensor *tmp379 .core @silicon
-    * op lessThan *tmp380 *tmp379 .targetSilicon
-    * jump *label284 equal *tmp380 false
+ 1030 jump *label284 greaterThanEq *tmp379 .targetSilicon
  1031 set :status1:text "Goal 6: silicon requirement"
  1032 setaddr :status1*retaddr *label286 (h:*label286)
  1033 call *label9 *invalid :status1*retval (m:*label286) (h:*label286)
  1034 label *label286
  1035 sensor :supplyBase0:coal .core @coal
  1036 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp384 :supplyBase0:coal :supplyBase0:sand
-    * jump *label287 equal *tmp384 false
+ 1037 jump *label287 greaterThanEq :supplyBase0:coal :supplyBase0:sand
  1038 set *tmp385 @coal
  1039 jump *label288 always
  1040 label *label287
 
  1048 jump *label285 always
  1049 label *label284
  1050 sensor *tmp386 .core @copper
-    * op lessThan *tmp387 *tmp386 .targetCopper
-    * jump *label290 equal *tmp387 false
+ 1051 jump *label290 greaterThanEq *tmp386 .targetCopper
  1052 set :status1:text "Goal 7: copper requirement"
  1053 setaddr :status1*retaddr *label292 (h:*label292)
  1054 call *label9 *invalid :status1*retval (m:*label292) (h:*label292)
 
  1060 jump *label291 always
  1061 label *label290
  1062 sensor *tmp389 .core @lead
-    * op lessThan *tmp390 *tmp389 .targetLead
-    * jump *label294 equal *tmp390 false
+ 1063 jump *label294 greaterThanEq *tmp389 .targetLead
  1064 set :status1:text "Goal 8: lead requirement"
  1065 setaddr :status1*retaddr *label296 (h:*label296)
  1066 call *label9 *invalid :status1*retval (m:*label296) (h:*label296)
 
  1072 jump *label295 always
  1073 label *label294
  1074 sensor *tmp392 .core @metaglass
-    * op lessThan *tmp393 *tmp392 .targetMetaglass
-    * jump *label298 equal *tmp393 false
+ 1075 jump *label298 greaterThanEq *tmp392 .targetMetaglass
  1076 set :status1:text "Goal 9: metaglass requirement"
  1077 setaddr :status1*retaddr *label300 (h:*label300)
  1078 call *label9 *invalid :status1*retval (m:*label300) (h:*label300)
 
  1089 label *label302
  1090 sensor :supplyBase0:coal.1 .core @coal
  1091 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp397 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label303 equal *tmp397 false
+ 1092 jump *label303 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
  1093 set *tmp398 @coal
  1094 jump *label304 always
  1095 label *label303
 
  1196 write *tmp412 .controller ".graphiteReserve"
  1197 label *label319
  1198 sensor *tmp414 .core @copper
-    * op lessThan *tmp415 *tmp414 .targetCopper
-    * jump *label323 equal *tmp415 false
+ 1199 jump *label323 greaterThanEq *tmp414 .targetCopper
  1200 set *tmp413 false
  1201 jump *label322 always
  1202 jump *label324 always
  1203 label *label323
  1204 label *label324
  1205 sensor *tmp417 .core @lead
-    * op lessThan *tmp418 *tmp417 .targetLead
-    * jump *label325 equal *tmp418 false
+ 1206 jump *label325 greaterThanEq *tmp417 .targetLead
  1207 set *tmp413 false
  1208 jump *label322 always
  1209 jump *label326 always
  1210 label *label325
  1211 label *label326
  1212 sensor *tmp420 .core @graphite
-    * op lessThan *tmp421 *tmp420 .targetGraphite
-    * jump *label327 equal *tmp421 false
+ 1213 jump *label327 greaterThanEq *tmp420 .targetGraphite
  1214 set *tmp413 false
  1215 jump *label322 always
  1216 jump *label328 always
  1217 label *label327
  1218 label *label328
  1219 sensor *tmp423 .core @silicon
-    * op lessThan *tmp424 *tmp423 .targetSilicon
-    * jump *label329 equal *tmp424 false
+ 1220 jump *label329 greaterThanEq *tmp423 .targetSilicon
  1221 set *tmp413 false
  1222 jump *label322 always
  1223 jump *label330 always
  1224 label *label329
  1225 label *label330
  1226 sensor *tmp426 .core @titanium
-    * op lessThan *tmp427 *tmp426 .targetTitanium
-    * jump *label331 equal *tmp427 false
+ 1227 jump *label331 greaterThanEq *tmp426 .targetTitanium
  1228 set *tmp413 false
  1229 jump *label322 always
  1230 jump *label332 always
  1231 label *label331
  1232 label *label332
  1233 sensor *tmp429 .core @metaglass
-    * op lessThan *tmp430 *tmp429 .targetMetaglass
-    * jump *label333 equal *tmp430 false
+ 1234 jump *label333 greaterThanEq *tmp429 .targetMetaglass
  1235 set *tmp413 false
  1236 jump *label322 always
  1237 jump *label334 always
  1238 label *label333
  1239 label *label334
  1240 sensor *tmp432 .core @thorium
-    * op lessThan *tmp433 *tmp432 .targetThorium
-    * jump *label335 equal *tmp433 false
+ 1241 jump *label335 greaterThanEq *tmp432 .targetThorium
  1242 set *tmp413 false
  1243 jump *label322 always
  1244 jump *label336 always
 
  1248 jump *label322 always
  1249 set *tmp413 null
  1250 label *label322
-    * op equal *tmp435 *tmp413 false
-    * jump *label321 equal *tmp435 false
+ 1251 jump *label321 notEqual *tmp413 false
  1252 setaddr :supplyBase*retaddr *label337 (h:*label337)
  1253 call *label32 *invalid :supplyBase*retval (m:*label337) (h:*label337)
  1254 label *label337
 
  1289 end
  1290 label *label35
  1291 op add *tmp458 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp459 *tmp458 0
-    * jump *label345 equal *tmp459 false
+ 1292 jump *label345 lessThanEq *tmp458 0
  1293 set :unpackCfg:cfg :buildRemoteBlock:cfg
  1294 setaddr :unpackCfg*retaddr *label347 (h:*label347)
  1295 call *label31 *invalid :unpackCfg*retval (m:*label347) (h:*label347)
 
  1434 op add :flagUnits:x :flagUnits:x 4
  1435 ubind :flagUnits:unit
  1436 label *label364
-    * op notEqual *tmp471 @unit :flagUnits:firstUnit
-    * jump *label363 notEqual *tmp471 false
+ 1437 jump *label363 notEqual @unit :flagUnits:firstUnit
  1438 label *label365
  1439 label *label362
  1440 return :flagUnits*retaddr
 
  1448 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1449 ubind :lineUpUnits:unit
  1450 label *label368
-    * op notEqual *tmp473 @unit :lineUpUnits:firstUnit
-    * jump *label367 notEqual *tmp473 false
+ 1451 jump *label367 notEqual @unit :lineUpUnits:firstUnit
  1452 label *label369
  1453 label *label366
  1454 return :lineUpUnits*retaddr

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-28 instructions):
 
    80 setaddr :error*retaddr *label57 (h:*label57)
    81 call *label13 *invalid :error*retval (m:*label57) (h:*label57)
    82 label *label57
-    * jump *label56 always
    83 label *label55
    84 label *label56
    85 write @pneumatic-drill .display ".nextBlock"
 
   165 sensor *tmp155 .battery @totalPower
   166 jump *label73 greaterThanEq *tmp155 300
   167 jump *label71 always
-    * jump *label74 always
   168 label *label73
   169 label *label74
   170 label *label70
 
   332 setaddr :error*retaddr *label111 (h:*label111)
   333 call *label13 *invalid :error*retval (m:*label111) (h:*label111)
   334 label *label111
-    * jump *label110 always
   335 label *label109
   336 label *label110
   337 write @laser-drill .blockBuilder ":buildBlockAt:block"
 
   394 set .thoriumContainer :buildRemoteBlock*retval
   395 jump *label120 notEqual .thoriumContainer null
   396 set .thoriumContainer .thoriumDrill
-    * jump *label121 always
   397 label *label120
   398 label *label121
   399 write .thoriumDrill .display ".thoriumDrill"
 
   551 sensor *tmp235 @unit @firstItem
   552 jump *label166 equal *tmp235 null
   553 ucontrol itemDrop @air 1000
-    * jump *label167 always
   554 label *label166
   555 label *label167
   556 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
   630 setaddr :error*retaddr *label189 (h:*label189)
   631 call *label13 *invalid :error*retval (m:*label189) (h:*label189)
   632 label *label189
-    * jump *label188 always
   633 label *label187
   634 label *label188
   635 label *label186
 
   658 setaddr :dropAll*retaddr *label196 (h:*label196)
   659 call *label17 *invalid :dropAll*retval (m:*label196) (h:*label196)
   660 label *label196
-    * jump *label195 always
   661 label *label194
   662 label *label195
   663 set :status3:text "Mining..."
 
   672 op land *tmp266 *tmp264 *tmp265
   673 jump *label201 equal *tmp266 false
   674 jump *label200 always
-    * jump *label202 always
   675 label *label201
   676 label *label202
   677 ucontrol mine :mineOre:x :mineOre:y
   678 jump *label203 lessThanEq @second :mineOre:stop
   679 jump *label200 always
-    * jump *label204 always
   680 label *label203
   681 label *label204
   682 label *label199
 
   739 op land *tmp280 *tmp278 *tmp279
   740 jump *label217 equal *tmp280 false
   741 ucontrol itemDrop @air 1000
-    * jump *label218 always
   742 label *label217
   743 label *label218
   744 label *label215
 
   773 setaddr :mineOre*retaddr *label224 (h:*label224)
   774 call *label21 *invalid :mineOre*retval (m:*label224) (h:*label224)
   775 label *label224
-    * jump *label223 always
   776 label *label222
   777 label *label223
   778 label *label220
 
   807 op land *tmp296 *tmp294 *tmp295
   808 jump *label233 equal *tmp296 false
   809 ucontrol itemDrop @air 1000
-    * jump *label234 always
   810 label *label233
   811 label *label234
   812 label *label231
 
   924 call *label24 *invalid :supplyBlock*retval (m:*label257) (h:*label257)
   925 label *label257
   926 set :supplyBase0:supplied true
-    * jump *label255 always
   927 label *label254
   928 label *label255
-    * jump *label253 always
   929 label *label252
   930 label *label253
   931 sensor *tmp349 .core @silicon
 
   956 call *label24 *invalid :supplyBlock*retval (m:*label267) (h:*label267)
   957 label *label267
   958 set :supplyBase0:supplied true
-    * jump *label265 always
   959 label *label264
   960 label *label265
   961 label *label261
-    * jump *label259 always
   962 label *label258
   963 label *label259
   964 sensor *tmp358 .battery @totalPower
 
   975 call *label24 *invalid :supplyBlock*retval (m:*label273) (h:*label273)
   976 label *label273
   977 set :supplyBase0:supplied true
-    * jump *label271 always
   978 label *label270
   979 label *label271
-    * jump *label269 always
   980 label *label268
   981 label *label269
-    * jump *label251 always
   982 label *label250
   983 label *label251
   984 sensor *tmp364 .core @titanium
 
  1086 label *label291
  1087 label *label285
  1088 label *label281
-    * jump *label279 always
  1089 label *label278
  1090 label *label279
  1091 jump *label277 always
 
  1179 jump *label323 greaterThanEq *tmp414 .targetCopper
  1180 set *tmp413 false
  1181 jump *label322 always
-    * jump *label324 always
  1182 label *label323
  1183 label *label324
  1184 sensor *tmp417 .core @lead
  1185 jump *label325 greaterThanEq *tmp417 .targetLead
  1186 set *tmp413 false
  1187 jump *label322 always
-    * jump *label326 always
  1188 label *label325
  1189 label *label326
  1190 sensor *tmp420 .core @graphite
  1191 jump *label327 greaterThanEq *tmp420 .targetGraphite
  1192 set *tmp413 false
  1193 jump *label322 always
-    * jump *label328 always
  1194 label *label327
  1195 label *label328
  1196 sensor *tmp423 .core @silicon
  1197 jump *label329 greaterThanEq *tmp423 .targetSilicon
  1198 set *tmp413 false
  1199 jump *label322 always
-    * jump *label330 always
  1200 label *label329
  1201 label *label330
  1202 sensor *tmp426 .core @titanium
  1203 jump *label331 greaterThanEq *tmp426 .targetTitanium
  1204 set *tmp413 false
  1205 jump *label322 always
-    * jump *label332 always
  1206 label *label331
  1207 label *label332
  1208 sensor *tmp429 .core @metaglass
  1209 jump *label333 greaterThanEq *tmp429 .targetMetaglass
  1210 set *tmp413 false
  1211 jump *label322 always
-    * jump *label334 always
  1212 label *label333
  1213 label *label334
  1214 sensor *tmp432 .core @thorium
  1215 jump *label335 greaterThanEq *tmp432 .targetThorium
  1216 set *tmp413 false
  1217 jump *label322 always
-    * jump *label336 always
  1218 label *label335
  1219 label *label336
  1220 set *tmp413 true
 
  1293 label *label348
  1294 set :buildRemoteBlock*retval :buildBlock*retval
  1295 jump *label344 always
-    * jump *label346 always
  1296 label *label345
  1297 label *label346
  1298 set :buildRemoteBlock*retval false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-8 instructions):
 
     8 set .smelter null
     9 set .titaniumDrill null
    10 set .unloader1 null
-    * set .kiln null
-    * set .thoriumDrill null
    11 set .thoriumContainer null
    12 set .thoriumGenerator null
    13 set .leadSurplus 0
 
    52 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label51) (h:*label51)
    53 label *label51
    54 set :buildFirstTitaniumDrill:cfg "w**5#-#####"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   55 set :meetTarget.1:cfg "w**5#-#####"
    56 setaddr :meetTarget.1*retaddr *label53 (h:*label53)
    57 call *label38 *invalid :meetTarget.1*retval (m:*label53) (h:*label53)
    58 label *label53
-    * write @titanium .display ".nextBlock"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 2 .oreLocator ":findDrillLocation:size"
-    * write 4 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+   59 write @titanium processor1 ".nextBlock"
+   60 write .coreX processor4 ":findDrillLocation:x"
+   61 write .coreY processor4 ":findDrillLocation:y"
+   62 write @unit processor4 ":findDrillLocation:unit"
+   63 write @titanium processor4 ":findDrillLocation:item"
+   64 write @ore-titanium processor4 ":findDrillLocation:ore"
+   65 write 2 processor4 ":findDrillLocation:size"
+   66 write 4 processor4 ":findDrillLocation:limit"
+   67 write false processor4 ":findDrillLocation*finished"
+   68 write 1 processor4 "@counter"
    69 label *label54
    70 wait 1e-15
-    * read *tmp140 .oreLocator ":findDrillLocation*finished"
+   71 read *tmp140 processor4 ":findDrillLocation*finished"
    72 jump *label54 equal *tmp140 false
-    * read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
-    * read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
-    * read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
+   73 read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocation:dx"
+   74 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
+   75 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    76 jump *label55 notEqual :buildFirstTitaniumDrill:result false
    77 set :error:error "Cannot locate spot for titanium drill"
    78 setaddr :error*retaddr *label57 (h:*label57)
 
    80 label *label57
    81 label *label55
    82 label *label56
-    * write @pneumatic-drill .display ".nextBlock"
-    * write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
-    * write :buildFirstTitaniumDrill:dy .blockBuilder ":buildFirstTitaniumDrillAt:y"
-    * write false .blockBuilder ":buildFirstTitaniumDrillAt*finished"
-    * write 2 .blockBuilder "@counter"
+   83 write @pneumatic-drill processor1 ".nextBlock"
+   84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
+   85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
+   86 write false processor5 ":buildFirstTitaniumDrillAt*finished"
+   87 write 2 processor5 "@counter"
    88 label *label58
    89 wait 1e-15
-    * read *tmp146 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
+   90 read *tmp146 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label58 equal *tmp146 false
-    * read *tmp129 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
+   92 read *tmp129 processor5 ":buildFirstTitaniumDrillAt*retval"
    93 jump *label52 always
-    * set *tmp129 null
    94 label *label52
    95 set .titaniumDrill *tmp129
-    * write .titaniumDrill .display ".titaniumDrill"
+   96 write *tmp129 processor1 ".titaniumDrill"
    97 set :buildBlockFromCfg.1:cfg "*,###A<###"
    98 setaddr :buildBlockFromCfg.1*retaddr *label59 (h:*label59)
    99 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label59) (h:*label59)
 
   114 call *label36 *invalid :buildBlockFromCfg*retval (m:*label62) (h:*label62)
   115 label *label62
   116 set .controller :buildBlockFromCfg*retval
-    * write processor6 .controller ".timer"
-    * write .display .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
-    * write .battery .controller ".battery"
-    * write .generator .controller ".generator"
-    * write .smelter .controller ".smelter"
-    * write .press .controller ".press"
-    * write .unloader1 .controller ".unloader1"
+  117 write processor6 :buildBlockFromCfg*retval ".timer"
+  118 write processor1 :buildBlockFromCfg*retval ".display"
+  119 write .core :buildBlockFromCfg*retval ".core"
+  120 write bank1 :buildBlockFromCfg*retval ".bank"
+  121 write .battery :buildBlockFromCfg*retval ".battery"
+  122 write .generator :buildBlockFromCfg*retval ".generator"
+  123 write .smelter :buildBlockFromCfg*retval ".smelter"
+  124 write .press :buildBlockFromCfg*retval ".press"
+  125 write .unloader1 :buildBlockFromCfg*retval ".unloader1"
   126 set :buildBlockFromCfg.1:cfg "g)'%)######"
   127 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   128 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
 
   137 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label65) (h:*label65)
   138 label *label65
   139 set :factory :buildBlockFromCfg.1*retval
-    * write :factory .controller ".factory"
-    * write :factory .display ".airFactory"
+  140 write :buildBlockFromCfg.1*retval .controller ".factory"
+  141 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   142 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
-    * write :setFlareTarget:target .display ".flareTarget"
+  143 write 1 .controller ".flareTarget"
+  144 write 1 processor1 ".flareTarget"
   145 label *label66
   146 set :setMonoTarget:target 3
-    * write :setMonoTarget:target .controller ".monoTarget"
-    * write :setMonoTarget:target .display ".monoTarget"
+  147 write 3 .controller ".monoTarget"
+  148 write 3 processor1 ".monoTarget"
   149 label *label67
   150 write 85 .controller ".pressTarget"
   151 write 150 .controller ".smelterTarget"
   152 write 30 .controller ".kilnTarget"
   153 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  154 set .siliconSurplus 20
   155 setaddr :buildUnits*retaddr *label68 (h:*label68)
   156 call *label40 *invalid :buildUnits*retval (m:*label68) (h:*label68)
   157 label *label68
 
   182 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
   183 label *label77
   184 set .kiln :buildBlockFromCfg.1*retval
-    * write .kiln .controller ".kiln"
+  185 write :buildBlockFromCfg.1*retval .controller ".kiln"
   186 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   187 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
   188 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label78) (h:*label78)
 
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   226 label *label86
   227 set :reconstructor :buildBlockFromCfg.1*retval
-    * write :reconstructor .controller ".reconstructor"
-    * write :reconstructor .display ".reconstructor"
+  228 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
+  229 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   230 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
   231 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   232 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
 
   237 set .siliconSurplus 1000
   238 set .metaglassSurplus 200
   239 set :setPolyTarget:target 6
-    * write :setPolyTarget:target .controller ".polyTarget"
-    * write :setPolyTarget:target .display ".polyTarget"
+  240 write 6 .controller ".polyTarget"
+  241 write 6 processor1 ".polyTarget"
   242 label *label89
   243 set :buildBlockFromCfg.1:cfg "%-)A<######"
   244 setaddr :buildBlockFromCfg.1*retaddr *label90 (h:*label90)
 
   263 jump *label93 always
   264 label *label95
   265 set :setFlareTarget.1:target 3
-    * write :setFlareTarget.1:target .controller ".flareTarget"
-    * write :setFlareTarget.1:target .display ".flareTarget"
+  266 write 3 .controller ".flareTarget"
+  267 write 3 processor1 ".flareTarget"
   268 label *label97
   269 label *label98
   270 read *tmp96 .controller ".flares"
 
   276 jump *label98 always
   277 label *label100
   278 set :setMonoTarget.1:target 5
-    * write :setMonoTarget.1:target .controller ".monoTarget"
-    * write :setMonoTarget.1:target .display ".monoTarget"
+  279 write 5 .controller ".monoTarget"
+  280 write 5 processor1 ".monoTarget"
   281 label *label102
-    * write @ore-titanium .display ".nextBlock"
+  282 write @ore-titanium processor1 ".nextBlock"
   283 wait 0.000000001
   284 ubind @flare
-    * read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 4 .oreLocator ":findDrillLocation:size"
-    * write 1000000000 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+  285 read :blocksBuildTitaniumDrills:current processor4 ".locations"
+  286 write .coreX processor4 ":findDrillLocation:x"
+  287 write .coreY processor4 ":findDrillLocation:y"
+  288 write @unit processor4 ":findDrillLocation:unit"
+  289 write @titanium processor4 ":findDrillLocation:item"
+  290 write @ore-titanium processor4 ":findDrillLocation:ore"
+  291 write 4 processor4 ":findDrillLocation:size"
+  292 write 1000000000 processor4 ":findDrillLocation:limit"
+  293 write false processor4 ":findDrillLocation*finished"
+  294 write 1 processor4 "@counter"
   295 ubind .builder
-    * write .controller .blockBuilder ":buildTitaniumDrills:aController"
-    * write :blocksBuildTitaniumDrills:current .blockBuilder ":buildTitaniumDrills:current"
-    * write false .blockBuilder ":buildTitaniumDrills*finished"
-    * write 3 .blockBuilder "@counter"
+  296 write .controller processor5 ":buildTitaniumDrills:aController"
+  297 write :blocksBuildTitaniumDrills:current processor5 ":buildTitaniumDrills:current"
+  298 write false processor5 ":buildTitaniumDrills*finished"
+  299 write 3 processor5 "@counter"
   300 label *label104
   301 wait 1e-15
-    * read *tmp188 .blockBuilder ":buildTitaniumDrills*finished"
+  302 read *tmp188 processor5 ":buildTitaniumDrills*finished"
   303 jump *label104 equal *tmp188 false
-    * write false .oreLocator ":stopLocation*finished"
-    * write 3 .oreLocator "@counter"
+  304 write false processor4 ":stopLocation*finished"
+  305 write 3 processor4 "@counter"
   306 label *label103
-    * write null .display ".nextBlock"
-    * write .coreX .oreLocator ":layoutThoriumDrill:x"
-    * write .coreY .oreLocator ":layoutThoriumDrill:y"
-    * write @unit .oreLocator ":layoutThoriumDrill:unit"
-    * write 7 .oreLocator ":layoutThoriumDrill:limit"
-    * write false .oreLocator ":layoutThoriumDrill*finished"
-    * write 2 .oreLocator "@counter"
+  307 write null processor1 ".nextBlock"
+  308 write .coreX processor4 ":layoutThoriumDrill:x"
+  309 write .coreY processor4 ":layoutThoriumDrill:y"
+  310 write @unit processor4 ":layoutThoriumDrill:unit"
+  311 write 7 processor4 ":layoutThoriumDrill:limit"
+  312 write false processor4 ":layoutThoriumDrill*finished"
+  313 write 2 processor4 "@counter"
   314 label *label106
   315 wait 1e-15
-    * read *tmp193 .oreLocator ":layoutThoriumDrill*finished"
+  316 read *tmp193 processor4 ":layoutThoriumDrill*finished"
   317 jump *label106 equal *tmp193 false
   318 set :meetTarget.1:cfg "x**F#AA7###"
   319 setaddr :meetTarget.1*retaddr *label107 (h:*label107)
 
   321 label *label107
   322 label *label108
   323 wait 1e-15
-    * read *tmp195 .oreLocator ":layoutThoriumDrill*finished"
+  324 read *tmp195 processor4 ":layoutThoriumDrill*finished"
   325 jump *label108 equal *tmp195 false
-    * read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
+  326 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   327 jump *label109 notEqual :buildThoriumDrill:result false
   328 set :error:error "Cannot locate spot for thorium drill"
   329 setaddr :error*retaddr *label111 (h:*label111)
 
   331 label *label111
   332 label *label109
   333 label *label110
-    * write @laser-drill .blockBuilder ":buildBlockAt:block"
-    * read *tmp54 .oreLocator ".drillX"
-    * write *tmp54 .blockBuilder ":buildBlockAt:x"
-    * read *tmp55 .oreLocator ".drillY"
-    * write *tmp55 .blockBuilder ":buildBlockAt:y"
-    * write null .blockBuilder ":buildBlockAt:rotation"
-    * write 0 .blockBuilder ":buildBlockAt:config"
-    * write false .blockBuilder ":buildBlockAt*finished"
-    * write 1 .blockBuilder "@counter"
+  334 write @laser-drill processor5 ":buildBlockAt:block"
+  335 read *tmp54 processor4 ".drillX"
+  336 write *tmp54 processor5 ":buildBlockAt:x"
+  337 read *tmp55 processor4 ".drillY"
+  338 write *tmp55 processor5 ":buildBlockAt:y"
+  339 write null processor5 ":buildBlockAt:rotation"
+  340 write 0 processor5 ":buildBlockAt:config"
+  341 write false processor5 ":buildBlockAt*finished"
+  342 write 1 processor5 "@counter"
   343 label *label112
   344 wait 1e-15
-    * read *tmp204 .blockBuilder ":buildBlockAt*finished"
+  345 read *tmp204 processor5 ":buildBlockAt*finished"
   346 jump *label112 equal *tmp204 false
-    * read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
+  347 read .thoriumDrill processor5 ":buildBlockAt*retval"
   348 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read :buildRemoteBlock:x .oreLocator ".water1X"
-    * read :buildRemoteBlock:y .oreLocator ".water1Y"
+  349 read :buildRemoteBlock:x processor4 ".water1X"
+  350 read :buildRemoteBlock:y processor4 ".water1Y"
   351 setaddr :buildRemoteBlock*retaddr *label113 (h:*label113)
   352 call *label35 *invalid :buildRemoteBlock*retval (m:*label113) (h:*label113)
   353 label *label113
-    * set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read :buildRemoteBlock:x .oreLocator ".water2X"
-    * read :buildRemoteBlock:y .oreLocator ".water2Y"
+  354 read :buildRemoteBlock:x processor4 ".water2X"
+  355 read :buildRemoteBlock:y processor4 ".water2Y"
   356 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   357 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   358 label *label114
   359 set :buildRemoteBlock:cfg "o%+FK<A####"
-    * read :buildRemoteBlock:x .oreLocator ".generatorX"
-    * read :buildRemoteBlock:y .oreLocator ".generatorY"
+  360 read :buildRemoteBlock:x processor4 ".generatorX"
+  361 read :buildRemoteBlock:y processor4 ".generatorY"
   362 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   363 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   364 label *label115
   365 set .thoriumGenerator :buildRemoteBlock*retval
   366 set :buildRemoteBlock:cfg "g)'%)######"
-    * read :buildRemoteBlock:x .oreLocator ".nodeX"
-    * read :buildRemoteBlock:y .oreLocator ".nodeY"
+  367 read :buildRemoteBlock:x processor4 ".nodeX"
+  368 read :buildRemoteBlock:y processor4 ".nodeY"
   369 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   370 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   371 label *label116
   372 set :buildRemoteBlock:cfg "r**#-#+####"
-    * read :buildRemoteBlock:x .oreLocator ".panelX"
-    * read :buildRemoteBlock:y .oreLocator ".panelY"
+  373 read :buildRemoteBlock:x processor4 ".panelX"
+  374 read :buildRemoteBlock:y processor4 ".panelY"
   375 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   376 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   377 label *label117
   378 set :buildRemoteBlock:cfg "k*/(7######"
-    * read :buildRemoteBlock:x .oreLocator ".batteryX"
-    * read :buildRemoteBlock:y .oreLocator ".batteryY"
+  379 read :buildRemoteBlock:x processor4 ".batteryX"
+  380 read :buildRemoteBlock:y processor4 ".batteryY"
   381 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   382 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   383 label *label118
   384 set :buildRemoteBlock:cfg "**#######"
-    * read :buildRemoteBlock:x .oreLocator ".containerX"
-    * read :buildRemoteBlock:y .oreLocator ".containerY"
+  385 read :buildRemoteBlock:x processor4 ".containerX"
+  386 read :buildRemoteBlock:y processor4 ".containerY"
   387 setaddr :buildRemoteBlock*retaddr *label119 (h:*label119)
   388 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   389 label *label119
   390 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label120 notEqual .thoriumContainer null
+  391 jump *label120 notEqual :buildRemoteBlock*retval null
   392 set .thoriumContainer .thoriumDrill
   393 label *label120
   394 label *label121
-    * write .thoriumDrill .display ".thoriumDrill"
-    * write .thoriumContainer .display ".thoriumContainer"
-    * write .thoriumContainer .polyController ":setThoriumContainer:container"
-    * write false .polyController ":setThoriumContainer*finished"
-    * write 3 .polyController "@counter"
+  395 write .thoriumDrill processor1 ".thoriumDrill"
+  396 write .thoriumContainer processor1 ".thoriumContainer"
+  397 write .thoriumContainer processor3 ":setThoriumContainer:container"
+  398 write false processor3 ":setThoriumContainer*finished"
+  399 write 3 processor3 "@counter"
   400 label *label122
   401 wait 1e-15
-    * read *tmp216 .polyController ":setThoriumContainer*finished"
+  402 read *tmp216 processor3 ":setThoriumContainer*finished"
   403 jump *label122 equal *tmp216 false
   404 label *label105
-    * write null .display ".nextBlock"
+  405 write null processor1 ".nextBlock"
   406 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
-    * write :setMegaTarget:target .display ".megaTarget"
+  407 write 1 .controller ".megaTarget"
+  408 write 1 processor1 ".megaTarget"
   409 label *label123
   410 label *label124
   411 read *tmp98 .controller ".polys"
 
   431 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label131) (h:*label131)
   432 label *label131
   433 set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
-    * write :buildMultiplicativeReconstructor:multiReconstructor .controller ".multiReconstructor"
-    * write :buildMultiplicativeReconstructor:multiReconstructor .display ".multiReconstructor"
+  434 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
+  435 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   436 label *label130
   437 setaddr :buildUnits*retaddr *label132 (h:*label132)
   438 call *label40 *invalid :buildUnits*retval (m:*label132) (h:*label132)
 
   644 label *label192
   645 set :mineOre:x :locateOre:x
   646 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+  647 set :moveToEmpty:x :locateOre:x
+  648 set :moveToEmpty:y :locateOre:y
   649 setaddr :moveToEmpty*retaddr *label193 (h:*label193)
   650 call *label16 *invalid :moveToEmpty*retval (m:*label193) (h:*label193)
   651 label *label193
 
   822 end
   823 label *label31
   824 set :unpackCfg:index 0
-    * set *tmp302 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  825 set *tmp302 0
+  826 op add :unpackCfg:index 0 1
   827 read *tmp303 :unpackCfg:cfg *tmp302
   828 op sub *tmp304 *tmp303 35
   829 lookup block :unpackCfg:type *tmp304
-    * set *tmp306 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  830 set *tmp306 1
+  831 op add :unpackCfg:index 1 1
   832 read *tmp307 :unpackCfg:cfg *tmp306
   833 op sub *tmp308 *tmp307 35
-    * op sub :unpackCfg:x *tmp308 7
-    * set *tmp310 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  834 op sub :unpackCfg:x *tmp307 42
+  835 set *tmp310 2
+  836 op add :unpackCfg:index 2 1
   837 read *tmp311 :unpackCfg:cfg *tmp310
   838 op sub *tmp312 *tmp311 35
-    * op sub :unpackCfg:y *tmp312 7
-    * set *tmp314 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  839 op sub :unpackCfg:y *tmp311 42
+  840 set *tmp314 3
+  841 op add :unpackCfg:index 3 1
   842 read *tmp315 :unpackCfg:cfg *tmp314
   843 op sub :unpackCfg:cu *tmp315 35
-    * set *tmp317 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  844 set *tmp317 4
+  845 op add :unpackCfg:index 4 1
   846 read *tmp318 :unpackCfg:cfg *tmp317
   847 op sub :unpackCfg:pb *tmp318 35
-    * set *tmp320 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  848 set *tmp320 5
+  849 op add :unpackCfg:index 5 1
   850 read *tmp321 :unpackCfg:cfg *tmp320
   851 op sub :unpackCfg:gr *tmp321 35
-    * set *tmp323 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  852 set *tmp323 6
+  853 op add :unpackCfg:index 6 1
   854 read *tmp324 :unpackCfg:cfg *tmp323
   855 op sub :unpackCfg:si *tmp324 35
-    * set *tmp326 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  856 set *tmp326 7
+  857 op add :unpackCfg:index 7 1
   858 read *tmp327 :unpackCfg:cfg *tmp326
   859 op sub :unpackCfg:ti *tmp327 35
-    * set *tmp329 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  860 set *tmp329 8
+  861 op add :unpackCfg:index 8 1
   862 read *tmp330 :unpackCfg:cfg *tmp329
   863 op sub :unpackCfg:mg *tmp330 35
-    * set *tmp332 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  864 set *tmp332 9
+  865 op add :unpackCfg:index 9 1
   866 read *tmp333 :unpackCfg:cfg *tmp332
   867 op sub :unpackCfg:th *tmp333 35
-    * set *tmp335 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  868 set *tmp335 10
+  869 op add :unpackCfg:index 10 1
   870 read *tmp336 :unpackCfg:cfg *tmp335
   871 op sub :unpackCfg:rotation *tmp336 35
   872 label *label236
 
   988 label *label275
   989 set :supplyBase0:titaniumTrigger *tmp366
   990 sensor *tmp370 .titaniumDrill @titanium
-    * jump *label276 greaterThanEq *tmp370 :supplyBase0:titaniumTrigger
+  991 jump *label276 greaterThanEq *tmp370 *tmp366
   992 jump *label278 notEqual :supplyBase0:supplied false
   993 sensor *tmp375 .battery @totalPower
   994 op mul *tmp376 .unloader1 .powerTarget
 
  1018 set *tmp385 @sand
  1019 label *label288
  1020 set :supplyBase0:ore *tmp385
-    * set :mineOre.1:ore :supplyBase0:ore
+ 1021 set :mineOre.1:ore *tmp385
  1022 setaddr :mineOre.1*retaddr *label289 (h:*label289)
  1023 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
  1024 label *label289
 
  1073 set *tmp398 @sand
  1074 label *label304
  1075 set :supplyBase0:ore.1 *tmp398
-    * set :mineOre.1:ore :supplyBase0:ore.1
+ 1076 set :mineOre.1:ore *tmp398
  1077 setaddr :mineOre.1*retaddr *label305 (h:*label305)
  1078 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
  1079 label *label305
 
  1161 op add *tmp405 :meetTarget:metaglass .metaglassSurplus
  1162 write *tmp405 .controller ".kilnTarget"
  1163 op add *tmp406 :meetTarget:lead .leadSurplus
-    * write *tmp406 .controller ".leadReserve"
+ 1164 write *tmp401 .controller ".leadReserve"
  1165 op sign *tmp407 :meetTarget:silicon
  1166 op mul *tmp408 *tmp407 20
  1167 op add *tmp409 :meetTarget:silicon *tmp408
 
  1215 label *label336
  1216 set *tmp413 true
  1217 jump *label322 always
-    * set *tmp413 null
  1218 label *label322
  1219 jump *label321 notEqual *tmp413 false
  1220 setaddr :supplyBase*retaddr *label337 (h:*label337)
 
  1251 jump *label343 equal *tmp456 false
  1252 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1253 jump *label341 always
-    * set :buildBlock*retval null
  1254 label *label341
  1255 return :buildBlock*retaddr
  1256 end
 
  1270 set :buildRemoteBlock:mg :unpackCfg:mg
  1271 set :buildRemoteBlock:th :unpackCfg:th
  1272 set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildBlock:block :buildRemoteBlock:type
+ 1273 set :buildBlock:block :unpackCfg:type
  1274 set :buildBlock:x :buildRemoteBlock:x
  1275 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+ 1276 set :buildBlock:copper :unpackCfg:cu
+ 1277 set :buildBlock:lead :unpackCfg:pb
+ 1278 set :buildBlock:graphite :unpackCfg:gr
+ 1279 set :buildBlock:silicon :unpackCfg:si
+ 1280 set :buildBlock:titanium :unpackCfg:ti
+ 1281 set :buildBlock:metaglass :unpackCfg:mg
+ 1282 set :buildBlock:thorium :unpackCfg:th
+ 1283 set :buildBlock:rotation :unpackCfg:rotation
  1284 set :buildBlock:config null
  1285 setaddr :buildBlock*retaddr *label348 (h:*label348)
  1286 call *label34 *invalid :buildBlock*retval (m:*label348) (h:*label348)
 
  1291 label *label346
  1292 set :buildRemoteBlock*retval false
  1293 jump *label344 always
-    * set :buildRemoteBlock*retval null
  1294 label *label344
  1295 return :buildRemoteBlock*retaddr
  1296 end
 
  1310 set :buildBlockFromCfg:mg :unpackCfg:mg
  1311 set :buildBlockFromCfg:th :unpackCfg:th
  1312 set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * op add *tmp461 .coreX :buildBlockFromCfg:x
-    * op add *tmp462 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+ 1313 op add *tmp461 .coreX :unpackCfg:x
+ 1314 op add *tmp462 .coreY :unpackCfg:y
+ 1315 set :buildBlock:block :unpackCfg:type
  1316 set :buildBlock:x *tmp461
  1317 set :buildBlock:y *tmp462
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+ 1318 set :buildBlock:copper :unpackCfg:cu
+ 1319 set :buildBlock:lead :unpackCfg:pb
+ 1320 set :buildBlock:graphite :unpackCfg:gr
+ 1321 set :buildBlock:silicon :unpackCfg:si
+ 1322 set :buildBlock:titanium :unpackCfg:ti
+ 1323 set :buildBlock:metaglass :unpackCfg:mg
+ 1324 set :buildBlock:thorium :unpackCfg:th
+ 1325 set :buildBlock:rotation :unpackCfg:rotation
  1326 set :buildBlock:config :buildBlockFromCfg:config
  1327 setaddr :buildBlock*retaddr *label351 (h:*label351)
  1328 call *label34 *invalid :buildBlock*retval (m:*label351) (h:*label351)
  1329 label *label351
  1330 set :buildBlockFromCfg*retval :buildBlock*retval
  1331 jump *label349 always
-    * set :buildBlockFromCfg*retval null
  1332 label *label349
  1333 return :buildBlockFromCfg*retaddr
  1334 end
 
  1355 set :meetTarget.1:ti :unpackCfg:ti
  1356 set :meetTarget.1:mg :unpackCfg:mg
  1357 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+ 1358 set :meetTarget:block :unpackCfg:type
+ 1359 set :meetTarget:copper :unpackCfg:cu
+ 1360 set :meetTarget:lead :unpackCfg:pb
+ 1361 set :meetTarget:graphite :unpackCfg:gr
+ 1362 set :meetTarget:silicon :unpackCfg:si
+ 1363 set :meetTarget:titanium :unpackCfg:ti
+ 1364 set :meetTarget:metaglass :unpackCfg:mg
+ 1365 set :meetTarget:thorium :unpackCfg:th
  1366 setaddr :meetTarget*retaddr *label356 (h:*label356)
  1367 call *label33 *invalid :meetTarget*retval (m:*label356) (h:*label356)
  1368 label *label356

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-59 instructions):
     0 set .ERROR ""
     1 set .display processor1
-    * set .polyController processor3
     2 set .blockBuilder processor5
-    * set .oreLocator processor4
     3 set .press null
     4 set .generator null
     5 set .battery null
 
    49 setaddr :buildBlockFromCfg.1*retaddr *label51 (h:*label51)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label51) (h:*label51)
    51 label *label51
-    * set :buildFirstTitaniumDrill:cfg "w**5#-#####"
    52 set :meetTarget.1:cfg "w**5#-#####"
    53 setaddr :meetTarget.1*retaddr *label53 (h:*label53)
    54 call *label38 *invalid :meetTarget.1*retval (m:*label53) (h:*label53)
 
   133 setaddr :buildBlockFromCfg.1*retaddr *label65 (h:*label65)
   134 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label65) (h:*label65)
   135 label *label65
-    * set :factory :buildBlockFromCfg.1*retval
   136 write :buildBlockFromCfg.1*retval .controller ".factory"
   137 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
-    * set :setFlareTarget:target 1
   138 write 1 .controller ".flareTarget"
   139 write 1 processor1 ".flareTarget"
   140 label *label66
-    * set :setMonoTarget:target 3
   141 write 3 .controller ".monoTarget"
   142 write 3 processor1 ".monoTarget"
   143 label *label67
 
   175 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   176 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
   177 label *label77
-    * set .kiln :buildBlockFromCfg.1*retval
   178 write :buildBlockFromCfg.1*retval .controller ".kiln"
   179 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   180 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
 
   217 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   218 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   219 label *label86
-    * set :reconstructor :buildBlockFromCfg.1*retval
   220 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
   221 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   222 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
 
   228 label *label88
   229 set .siliconSurplus 1000
   230 set .metaglassSurplus 200
-    * set :setPolyTarget:target 6
   231 write 6 .controller ".polyTarget"
   232 write 6 processor1 ".polyTarget"
   233 label *label89
 
   253 label *label94
   254 jump *label93 always
   255 label *label95
-    * set :setFlareTarget.1:target 3
   256 write 3 .controller ".flareTarget"
   257 write 3 processor1 ".flareTarget"
   258 label *label97
 
   265 label *label99
   266 jump *label98 always
   267 label *label100
-    * set :setMonoTarget.1:target 5
   268 write 5 .controller ".monoTarget"
   269 write 5 processor1 ".monoTarget"
   270 label *label102
 
   392 jump *label122 equal *tmp216 false
   393 label *label105
   394 write null processor1 ".nextBlock"
-    * set :setMegaTarget:target 1
   395 write 1 .controller ".megaTarget"
   396 write 1 processor1 ".megaTarget"
   397 label *label123
 
   418 setaddr :buildBlockFromCfg.1*retaddr *label131 (h:*label131)
   419 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label131) (h:*label131)
   420 label *label131
-    * set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
   421 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   422 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   423 label *label130
 
   808 return :supplyBlockFromCore*retaddr
   809 end
   810 label *label31
-    * set :unpackCfg:index 0
   811 set *tmp302 0
-    * op add :unpackCfg:index 0 1
-    * read *tmp303 :unpackCfg:cfg *tmp302
+  812 read *tmp303 :unpackCfg:cfg 0
   813 op sub *tmp304 *tmp303 35
   814 lookup block :unpackCfg:type *tmp304
   815 set *tmp306 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp307 :unpackCfg:cfg *tmp306
-    * op sub *tmp308 *tmp307 35
+  816 read *tmp307 :unpackCfg:cfg 1
   817 op sub :unpackCfg:x *tmp307 42
   818 set *tmp310 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp311 :unpackCfg:cfg *tmp310
-    * op sub *tmp312 *tmp311 35
+  819 read *tmp311 :unpackCfg:cfg 2
   820 op sub :unpackCfg:y *tmp311 42
   821 set *tmp314 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp315 :unpackCfg:cfg *tmp314
+  822 read *tmp315 :unpackCfg:cfg 3
   823 op sub :unpackCfg:cu *tmp315 35
   824 set *tmp317 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp318 :unpackCfg:cfg *tmp317
+  825 read *tmp318 :unpackCfg:cfg 4
   826 op sub :unpackCfg:pb *tmp318 35
   827 set *tmp320 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp321 :unpackCfg:cfg *tmp320
+  828 read *tmp321 :unpackCfg:cfg 5
   829 op sub :unpackCfg:gr *tmp321 35
   830 set *tmp323 6
-    * op add :unpackCfg:index 6 1
-    * read *tmp324 :unpackCfg:cfg *tmp323
+  831 read *tmp324 :unpackCfg:cfg 6
   832 op sub :unpackCfg:si *tmp324 35
   833 set *tmp326 7
-    * op add :unpackCfg:index 7 1
-    * read *tmp327 :unpackCfg:cfg *tmp326
+  834 read *tmp327 :unpackCfg:cfg 7
   835 op sub :unpackCfg:ti *tmp327 35
   836 set *tmp329 8
-    * op add :unpackCfg:index 8 1
-    * read *tmp330 :unpackCfg:cfg *tmp329
+  837 read *tmp330 :unpackCfg:cfg 8
   838 op sub :unpackCfg:mg *tmp330 35
   839 set *tmp332 9
-    * op add :unpackCfg:index 9 1
-    * read *tmp333 :unpackCfg:cfg *tmp332
+  840 read *tmp333 :unpackCfg:cfg 9
   841 op sub :unpackCfg:th *tmp333 35
   842 set *tmp335 10
-    * op add :unpackCfg:index 10 1
-    * read *tmp336 :unpackCfg:cfg *tmp335
+  843 read *tmp336 :unpackCfg:cfg 10
   844 op sub :unpackCfg:rotation *tmp336 35
   845 label *label236
   846 return :unpackCfg*retaddr
 
   959 label *label274
   960 set *tmp366 100
   961 label *label275
-    * set :supplyBase0:titaniumTrigger *tmp366
   962 sensor *tmp370 .titaniumDrill @titanium
   963 jump *label276 greaterThanEq *tmp370 *tmp366
   964 jump *label278 notEqual :supplyBase0:supplied false
 
   989 label *label287
   990 set *tmp385 @sand
   991 label *label288
-    * set :supplyBase0:ore *tmp385
   992 set :mineOre.1:ore *tmp385
   993 setaddr :mineOre.1*retaddr *label289 (h:*label289)
   994 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
 
  1043 label *label303
  1044 set *tmp398 @sand
  1045 label *label304
-    * set :supplyBase0:ore.1 *tmp398
  1046 set :mineOre.1:ore *tmp398
  1047 setaddr :mineOre.1*retaddr *label305 (h:*label305)
  1048 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
 
  1130 write *tmp404 .controller ".smelterTarget"
  1131 op add *tmp405 :meetTarget:metaglass .metaglassSurplus
  1132 write *tmp405 .controller ".kilnTarget"
-    * op add *tmp406 :meetTarget:lead .leadSurplus
  1133 write *tmp401 .controller ".leadReserve"
  1134 op sign *tmp407 :meetTarget:silicon
  1135 op mul *tmp408 *tmp407 20
 
  1230 setaddr :unpackCfg*retaddr *label347 (h:*label347)
  1231 call *label31 *invalid :unpackCfg*retval (m:*label347) (h:*label347)
  1232 label *label347
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
  1233 set :buildBlock:block :unpackCfg:type
  1234 set :buildBlock:x :buildRemoteBlock:x
  1235 set :buildBlock:y :buildRemoteBlock:y
 
  1259 setaddr :unpackCfg*retaddr *label350 (h:*label350)
  1260 call *label31 *invalid :unpackCfg*retval (m:*label350) (h:*label350)
  1261 label *label350
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
  1262 op add *tmp461 .coreX :unpackCfg:x
  1263 op add *tmp462 .coreY :unpackCfg:y
  1264 set :buildBlock:block :unpackCfg:type
 
  1296 setaddr :unpackCfg*retaddr *label355 (h:*label355)
  1297 call *label31 *invalid :unpackCfg*retval (m:*label355) (h:*label355)
  1298 label *label355
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
  1299 set :meetTarget:block :unpackCfg:type
  1300 set :meetTarget:copper :unpackCfg:cu
  1301 set :meetTarget:lead :unpackCfg:pb

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-11 instructions):
 
   808 return :supplyBlockFromCore*retaddr
   809 end
   810 label *label31
-    * set *tmp302 0
   811 read *tmp303 :unpackCfg:cfg 0
   812 op sub *tmp304 *tmp303 35
   813 lookup block :unpackCfg:type *tmp304
-    * set *tmp306 1
   814 read *tmp307 :unpackCfg:cfg 1
   815 op sub :unpackCfg:x *tmp307 42
-    * set *tmp310 2
   816 read *tmp311 :unpackCfg:cfg 2
   817 op sub :unpackCfg:y *tmp311 42
-    * set *tmp314 3
   818 read *tmp315 :unpackCfg:cfg 3
   819 op sub :unpackCfg:cu *tmp315 35
-    * set *tmp317 4
   820 read *tmp318 :unpackCfg:cfg 4
   821 op sub :unpackCfg:pb *tmp318 35
-    * set *tmp320 5
   822 read *tmp321 :unpackCfg:cfg 5
   823 op sub :unpackCfg:gr *tmp321 35
-    * set *tmp323 6
   824 read *tmp324 :unpackCfg:cfg 6
   825 op sub :unpackCfg:si *tmp324 35
-    * set *tmp326 7
   826 read *tmp327 :unpackCfg:cfg 7
   827 op sub :unpackCfg:ti *tmp327 35
-    * set *tmp329 8
   828 read *tmp330 :unpackCfg:cfg 8
   829 op sub :unpackCfg:mg *tmp330 35
-    * set *tmp332 9
   830 read *tmp333 :unpackCfg:cfg 9
   831 op sub :unpackCfg:th *tmp333 35
-    * set *tmp335 10
   832 read *tmp336 :unpackCfg:cfg 10
   833 op sub :unpackCfg:rotation *tmp336 35
   834 label *label236

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
   514 setaddr :status3*retaddr *label155 (h:*label155)
   515 call *label11 *invalid :status3*retval (m:*label155) (h:*label155)
   516 label *label155
+  517 op sub *tmp232 :moveTo:radius 0.5
   518 label *label156
   519 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
   520 jump *label158 notEqual *tmp230 false
-    * op sub *tmp232 :moveTo:radius 0.5
   521 ucontrol approach :moveTo:x :moveTo:y *tmp232
   522 label *label157
   523 jump *label156 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   939 label *label269
   940 label *label250
   941 label *label251
+  942 set *tmp366 100
   943 sensor *tmp364 .core @titanium
-    * jump *label274 greaterThanEq *tmp364 .targetTitanium
+  944 jump *label275 greaterThanEq *tmp364 .targetTitanium
   945 sensor *tmp367 .core @titanium
   946 op sub *tmp368 .targetTitanium *tmp367
   947 op min *tmp366 7 *tmp368
   948 jump *label275 always
-    * label *label274
-    * set *tmp366 100
   949 label *label275
   950 sensor *tmp370 .titaniumDrill @titanium
   951 jump *label276 greaterThanEq *tmp370 *tmp366
 
   971 label *label286
   972 sensor :supplyBase0:coal .core @coal
   973 sensor :supplyBase0:sand .core @sand
-    * jump *label287 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp385 @coal
+  974 set :mineOre.1:ore @sand
+  975 jump *label288 greaterThanEq :supplyBase0:coal :supplyBase0:sand
+  976 set :mineOre.1:ore @coal
   977 jump *label288 always
-    * label *label287
-    * set *tmp385 @sand
   978 label *label288
-    * set :mineOre.1:ore *tmp385
   979 setaddr :mineOre.1*retaddr *label289 (h:*label289)
   980 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
   981 label *label289
 
  1023 label *label302
  1024 sensor :supplyBase0:coal.1 .core @coal
  1025 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label303 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp398 @coal
+ 1026 set :mineOre.1:ore @sand
+ 1027 jump *label304 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
+ 1028 set :mineOre.1:ore @coal
  1029 jump *label304 always
-    * label *label303
-    * set *tmp398 @sand
  1030 label *label304
-    * set :mineOre.1:ore *tmp398
  1031 setaddr :mineOre.1*retaddr *label305 (h:*label305)
  1032 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
  1033 label *label305

Modifications by Unroll iteration loop at CoreBuilder.mnd:229:5 (-2 instructions):
 
  1058 end
  1059 label *label33
  1060 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp399 *label312
-    * jump *label309 always
-    * multilabel *label312 (m:marker0)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp399 *label313
-    * jump *label309 always
-    * multilabel *label313 (m:marker0)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp399 *label314
-    * jump *label309 always
-    * multilabel *label314 (m:marker0)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp399 *label315
-    * jump *label309 always
-    * multilabel *label315 (m:marker0)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp399 *label316
-    * jump *label309 always
-    * multilabel *label316 (m:marker0)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp399 *label317
-    * jump *label309 always
-    * multilabel *label317 (m:marker0)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp399 *label318
-    * label *label309
-    * op sign *tmp400 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label310
-    * multijump *tmp399 0 0 (m:marker0)
-    * multilabel *label318 (m:marker0)
-    * label *label311
+ 1061 set :meetTarget:t :meetTarget:copper
+ 1062 label *label370
+ 1063 op sign *tmp400 :meetTarget:t
+ 1064 op add :meetTarget:count :meetTarget:count *tmp400
+ 1065 label *label371
+ 1066 set :meetTarget:t :meetTarget:lead
+ 1067 label *label374
+ 1068 op sign *tmp400 :meetTarget:t
+ 1069 op add :meetTarget:count :meetTarget:count *tmp400
+ 1070 label *label375
+ 1071 set :meetTarget:t :meetTarget:graphite
+ 1072 label *label378
+ 1073 op sign *tmp400 :meetTarget:t
+ 1074 op add :meetTarget:count :meetTarget:count *tmp400
+ 1075 label *label379
+ 1076 set :meetTarget:t :meetTarget:silicon
+ 1077 label *label382
+ 1078 op sign *tmp400 :meetTarget:t
+ 1079 op add :meetTarget:count :meetTarget:count *tmp400
+ 1080 label *label383
+ 1081 set :meetTarget:t :meetTarget:titanium
+ 1082 label *label386
+ 1083 op sign *tmp400 :meetTarget:t
+ 1084 op add :meetTarget:count :meetTarget:count *tmp400
+ 1085 label *label387
+ 1086 set :meetTarget:t :meetTarget:metaglass
+ 1087 label *label390
+ 1088 op sign *tmp400 :meetTarget:t
+ 1089 op add :meetTarget:count :meetTarget:count *tmp400
+ 1090 label *label391
+ 1091 set :meetTarget:t :meetTarget:thorium
+ 1092 label *label394
+ 1093 op sign *tmp400 :meetTarget:t
+ 1094 op add :meetTarget:count :meetTarget:count *tmp400
+ 1095 label *label395
+ 1096 label *label311
  1097 write :meetTarget:count .display ".totalTargets"
  1098 write :meetTarget:block .display ".nextBlock"
  1099 write :meetTarget:copper .display ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1060 set :meetTarget:count 0
  1061 set :meetTarget:t :meetTarget:copper
  1062 label *label370
-    * op sign *tmp400 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp400
+ 1063 op sign *tmp400 :meetTarget:copper
+ 1064 op add :meetTarget:count 0 *tmp400
  1065 label *label371
  1066 set :meetTarget:t :meetTarget:lead
  1067 label *label374
-    * op sign *tmp400 :meetTarget:t
+ 1068 op sign *tmp400 :meetTarget:lead
  1069 op add :meetTarget:count :meetTarget:count *tmp400
  1070 label *label375
  1071 set :meetTarget:t :meetTarget:graphite
  1072 label *label378
-    * op sign *tmp400 :meetTarget:t
+ 1073 op sign *tmp400 :meetTarget:graphite
  1074 op add :meetTarget:count :meetTarget:count *tmp400
  1075 label *label379
  1076 set :meetTarget:t :meetTarget:silicon
  1077 label *label382
-    * op sign *tmp400 :meetTarget:t
+ 1078 op sign *tmp400 :meetTarget:silicon
  1079 op add :meetTarget:count :meetTarget:count *tmp400
  1080 label *label383
  1081 set :meetTarget:t :meetTarget:titanium
  1082 label *label386
-    * op sign *tmp400 :meetTarget:t
+ 1083 op sign *tmp400 :meetTarget:titanium
  1084 op add :meetTarget:count :meetTarget:count *tmp400
  1085 label *label387
  1086 set :meetTarget:t :meetTarget:metaglass
  1087 label *label390
-    * op sign *tmp400 :meetTarget:t
+ 1088 op sign *tmp400 :meetTarget:metaglass
  1089 op add :meetTarget:count :meetTarget:count *tmp400
  1090 label *label391
  1091 set :meetTarget:t :meetTarget:thorium
  1092 label *label394
-    * op sign *tmp400 :meetTarget:t
+ 1093 op sign *tmp400 :meetTarget:thorium
  1094 op add :meetTarget:count :meetTarget:count *tmp400
  1095 label *label395
  1096 label *label311

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1057 return :supplyBase*retaddr
  1058 end
  1059 label *label33
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1060 label *label370
  1061 op sign *tmp400 :meetTarget:copper
  1062 op add :meetTarget:count 0 *tmp400
  1063 label *label371
-    * set :meetTarget:t :meetTarget:lead
  1064 label *label374
  1065 op sign *tmp400 :meetTarget:lead
  1066 op add :meetTarget:count :meetTarget:count *tmp400
  1067 label *label375
-    * set :meetTarget:t :meetTarget:graphite
  1068 label *label378
  1069 op sign *tmp400 :meetTarget:graphite
  1070 op add :meetTarget:count :meetTarget:count *tmp400
  1071 label *label379
-    * set :meetTarget:t :meetTarget:silicon
  1072 label *label382
  1073 op sign *tmp400 :meetTarget:silicon
  1074 op add :meetTarget:count :meetTarget:count *tmp400
  1075 label *label383
-    * set :meetTarget:t :meetTarget:titanium
  1076 label *label386
  1077 op sign *tmp400 :meetTarget:titanium
  1078 op add :meetTarget:count :meetTarget:count *tmp400
  1079 label *label387
-    * set :meetTarget:t :meetTarget:metaglass
  1080 label *label390
  1081 op sign *tmp400 :meetTarget:metaglass
  1082 op add :meetTarget:count :meetTarget:count *tmp400
  1083 label *label391
-    * set :meetTarget:t :meetTarget:thorium
  1084 label *label394
  1085 op sign *tmp400 :meetTarget:thorium
  1086 op add :meetTarget:count :meetTarget:count *tmp400

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   480 label *label144
   481 label *label137
   482 end
-    * label *label9
-    * write :status1:text .display ".status1"
-    * label *label149
-    * return :status1*retaddr
-    * end
   483 label *label10
   484 write :status2:text .display ".status2"
   485 write :status2:item .display ".item2"
 
   832 label *label32
   833 jump *label238 equal .thoriumContainer false
   834 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label241 (h:*label241)
-    * call *label9 *invalid :status1*retval (m:*label241) (h:*label241)
-    * label *label241
+  835 label *label399
+  836 write :status1:text .display ".status1"
+  837 label *label400
   838 set :supplyBlockFromCore:target .thoriumGenerator
   839 set :supplyBlockFromCore:item @coal
   840 setaddr :supplyBlockFromCore*retaddr *label242 (h:*label242)
 
   851 read *tmp97 .controller ".monos"
   852 jump *label244 lessThanEq *tmp97 3
   853 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label247 (h:*label247)
-    * call *label9 *invalid :status1*retval (m:*label247) (h:*label247)
-    * label *label247
+  854 label *label401
+  855 write :status1:text .display ".status1"
+  856 label *label402
   857 set :mineOre.1:ore @coal
   858 setaddr :mineOre.1*retaddr *label248 (h:*label248)
   859 call *label22 *invalid :mineOre.1*retval (m:*label248) (h:*label248)
 
   868 sensor *tmp346 .press @coal
   869 jump *label254 greaterThanEq *tmp346 5
   870 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label256 (h:*label256)
-    * call *label9 *invalid :status1*retval (m:*label256) (h:*label256)
-    * label *label256
+  871 label *label403
+  872 write :status1:text .display ".status1"
+  873 label *label404
   874 set :supplyBlock:block .press
   875 set :supplyBlock:ore @coal
   876 setaddr :supplyBlock*retaddr *label257 (h:*label257)
 
   886 sensor *tmp352 .smelter @coal
   887 jump *label260 greaterThanEq *tmp352 5
   888 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label262 (h:*label262)
-    * call *label9 *invalid :status1*retval (m:*label262) (h:*label262)
-    * label *label262
+  889 label *label405
+  890 write :status1:text .display ".status1"
+  891 label *label406
   892 set :supplyBlock:block .smelter
   893 set :supplyBlock:ore @coal
   894 setaddr :supplyBlock*retaddr *label263 (h:*label263)
 
   900 sensor *tmp355 .smelter @sand
   901 jump *label264 greaterThanEq *tmp355 5
   902 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label266 (h:*label266)
-    * call *label9 *invalid :status1*retval (m:*label266) (h:*label266)
-    * label *label266
+  903 label *label407
+  904 write :status1:text .display ".status1"
+  905 label *label408
   906 set :supplyBlock:block .smelter
   907 set :supplyBlock:ore @sand
   908 setaddr :supplyBlock*retaddr *label267 (h:*label267)
 
   919 sensor *tmp361 .generator @coal
   920 jump *label270 greaterThanEq *tmp361 2
   921 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label272 (h:*label272)
-    * call *label9 *invalid :status1*retval (m:*label272) (h:*label272)
-    * label *label272
+  922 label *label409
+  923 write :status1:text .display ".status1"
+  924 label *label410
   925 set :supplyBlock:block .generator
   926 set :supplyBlock:ore @coal
   927 setaddr :supplyBlock*retaddr *label273 (h:*label273)
 
   949 op mul *tmp376 .unloader1 .powerTarget
   950 jump *label280 greaterThanEq *tmp375 *tmp376
   951 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label282 (h:*label282)
-    * call *label9 *invalid :status1*retval (m:*label282) (h:*label282)
-    * label *label282
+  952 label *label411
+  953 write :status1:text .display ".status1"
+  954 label *label412
   955 set :mineOre.1:ore @coal
   956 setaddr :mineOre.1*retaddr *label283 (h:*label283)
   957 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
 
   961 sensor *tmp379 .core @silicon
   962 jump *label284 greaterThanEq *tmp379 .targetSilicon
   963 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label286 (h:*label286)
-    * call *label9 *invalid :status1*retval (m:*label286) (h:*label286)
-    * label *label286
+  964 label *label413
+  965 write :status1:text .display ".status1"
+  966 label *label414
   967 sensor :supplyBase0:coal .core @coal
   968 sensor :supplyBase0:sand .core @sand
   969 set :mineOre.1:ore @sand
 
   979 sensor *tmp386 .core @copper
   980 jump *label290 greaterThanEq *tmp386 .targetCopper
   981 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label292 (h:*label292)
-    * call *label9 *invalid :status1*retval (m:*label292) (h:*label292)
-    * label *label292
+  982 label *label415
+  983 write :status1:text .display ".status1"
+  984 label *label416
   985 set :mineOre.1:ore @copper
   986 setaddr :mineOre.1*retaddr *label293 (h:*label293)
   987 call *label22 *invalid :mineOre.1*retval (m:*label293) (h:*label293)
 
   991 sensor *tmp389 .core @lead
   992 jump *label294 greaterThanEq *tmp389 .targetLead
   993 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label296 (h:*label296)
-    * call *label9 *invalid :status1*retval (m:*label296) (h:*label296)
-    * label *label296
+  994 label *label417
+  995 write :status1:text .display ".status1"
+  996 label *label418
   997 set :mineOre.1:ore @lead
   998 setaddr :mineOre.1*retaddr *label297 (h:*label297)
   999 call *label22 *invalid :mineOre.1*retval (m:*label297) (h:*label297)
 
  1003 sensor *tmp392 .core @metaglass
  1004 jump *label298 greaterThanEq *tmp392 .targetMetaglass
  1005 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label300 (h:*label300)
-    * call *label9 *invalid :status1*retval (m:*label300) (h:*label300)
-    * label *label300
+ 1006 label *label419
+ 1007 write :status1:text .display ".status1"
+ 1008 label *label420
  1009 set :mineOre.1:ore @sand
  1010 setaddr :mineOre.1*retaddr *label301 (h:*label301)
  1011 call *label22 *invalid :mineOre.1*retval (m:*label301) (h:*label301)
 
  1013 jump *label299 always
  1014 label *label298
  1015 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label302 (h:*label302)
-    * call *label9 *invalid :status1*retval (m:*label302) (h:*label302)
-    * label *label302
+ 1016 label *label421
+ 1017 write :status1:text .display ".status1"
+ 1018 label *label422
  1019 sensor :supplyBase0:coal.1 .core @coal
  1020 sensor :supplyBase0:sand.1 .core @sand
  1021 set :mineOre.1:ore @sand
 
  1036 jump *label277 always
  1037 label *label276
  1038 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label306 (h:*label306)
-    * call *label9 *invalid :status1*retval (m:*label306) (h:*label306)
-    * label *label306
+ 1039 label *label423
+ 1040 write :status1:text .display ".status1"
+ 1041 label *label424
  1042 set :fetchBlock:block .titaniumDrill
  1043 set :fetchBlock:item @titanium
  1044 setaddr :fetchBlock*retaddr *label307 (h:*label307)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   833 jump *label238 equal .thoriumContainer false
   834 set :status1:text "Phase 2: servicing thorium drill"
   835 label *label399
-    * write :status1:text .display ".status1"
+  836 write "Phase 2: servicing thorium drill" .display ".status1"
   837 label *label400
   838 set :supplyBlockFromCore:target .thoriumGenerator
   839 set :supplyBlockFromCore:item @coal
 
   852 jump *label244 lessThanEq *tmp97 3
   853 set :status1:text "Phase 1: supplying base"
   854 label *label401
-    * write :status1:text .display ".status1"
+  855 write "Phase 1: supplying base" .display ".status1"
   856 label *label402
   857 set :mineOre.1:ore @coal
   858 setaddr :mineOre.1*retaddr *label248 (h:*label248)
 
   869 jump *label254 greaterThanEq *tmp346 5
   870 set :status1:text "Goal 1: graphite requirement"
   871 label *label403
-    * write :status1:text .display ".status1"
+  872 write "Goal 1: graphite requirement" .display ".status1"
   873 label *label404
   874 set :supplyBlock:block .press
   875 set :supplyBlock:ore @coal
 
   887 jump *label260 greaterThanEq *tmp352 5
   888 set :status1:text "Goal 2: coal for silicon requirement"
   889 label *label405
-    * write :status1:text .display ".status1"
+  890 write "Goal 2: coal for silicon requirement" .display ".status1"
   891 label *label406
   892 set :supplyBlock:block .smelter
   893 set :supplyBlock:ore @coal
 
   901 jump *label264 greaterThanEq *tmp355 5
   902 set :status1:text "Goal 3: sand for silicon requirement"
   903 label *label407
-    * write :status1:text .display ".status1"
+  904 write "Goal 3: sand for silicon requirement" .display ".status1"
   905 label *label408
   906 set :supplyBlock:block .smelter
   907 set :supplyBlock:ore @sand
 
   920 jump *label270 greaterThanEq *tmp361 2
   921 set :status1:text "Goal 4: supplying generator"
   922 label *label409
-    * write :status1:text .display ".status1"
+  923 write "Goal 4: supplying generator" .display ".status1"
   924 label *label410
   925 set :supplyBlock:block .generator
   926 set :supplyBlock:ore @coal
 
   950 jump *label280 greaterThanEq *tmp375 *tmp376
   951 set :status1:text "Goal 5: supplying generator"
   952 label *label411
-    * write :status1:text .display ".status1"
+  953 write "Goal 5: supplying generator" .display ".status1"
   954 label *label412
   955 set :mineOre.1:ore @coal
   956 setaddr :mineOre.1*retaddr *label283 (h:*label283)
 
   962 jump *label284 greaterThanEq *tmp379 .targetSilicon
   963 set :status1:text "Goal 6: silicon requirement"
   964 label *label413
-    * write :status1:text .display ".status1"
+  965 write "Goal 6: silicon requirement" .display ".status1"
   966 label *label414
   967 sensor :supplyBase0:coal .core @coal
   968 sensor :supplyBase0:sand .core @sand
 
   980 jump *label290 greaterThanEq *tmp386 .targetCopper
   981 set :status1:text "Goal 7: copper requirement"
   982 label *label415
-    * write :status1:text .display ".status1"
+  983 write "Goal 7: copper requirement" .display ".status1"
   984 label *label416
   985 set :mineOre.1:ore @copper
   986 setaddr :mineOre.1*retaddr *label293 (h:*label293)
 
   992 jump *label294 greaterThanEq *tmp389 .targetLead
   993 set :status1:text "Goal 8: lead requirement"
   994 label *label417
-    * write :status1:text .display ".status1"
+  995 write "Goal 8: lead requirement" .display ".status1"
   996 label *label418
   997 set :mineOre.1:ore @lead
   998 setaddr :mineOre.1*retaddr *label297 (h:*label297)
 
  1004 jump *label298 greaterThanEq *tmp392 .targetMetaglass
  1005 set :status1:text "Goal 9: metaglass requirement"
  1006 label *label419
-    * write :status1:text .display ".status1"
+ 1007 write "Goal 9: metaglass requirement" .display ".status1"
  1008 label *label420
  1009 set :mineOre.1:ore @sand
  1010 setaddr :mineOre.1*retaddr *label301 (h:*label301)
 
  1014 label *label298
  1015 set :status1:text "Goal 10: supplying base"
  1016 label *label421
-    * write :status1:text .display ".status1"
+ 1017 write "Goal 10: supplying base" .display ".status1"
  1018 label *label422
  1019 sensor :supplyBase0:coal.1 .core @coal
  1020 sensor :supplyBase0:sand.1 .core @sand
 
  1037 label *label276
  1038 set :status1:text "Goal 11: Fetching titanium"
  1039 label *label423
-    * write :status1:text .display ".status1"
+ 1040 write "Goal 11: Fetching titanium" .display ".status1"
  1041 label *label424
  1042 set :fetchBlock:block .titaniumDrill
  1043 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   831 end
   832 label *label32
   833 jump *label238 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   834 label *label399
   835 write "Phase 2: servicing thorium drill" .display ".status1"
   836 label *label400
 
   849 label *label238
   850 read *tmp97 .controller ".monos"
   851 jump *label244 lessThanEq *tmp97 3
-    * set :status1:text "Phase 1: supplying base"
   852 label *label401
   853 write "Phase 1: supplying base" .display ".status1"
   854 label *label402
 
   865 jump *label252 greaterThanEq *tmp343 .targetGraphite
   866 sensor *tmp346 .press @coal
   867 jump *label254 greaterThanEq *tmp346 5
-    * set :status1:text "Goal 1: graphite requirement"
   868 label *label403
   869 write "Goal 1: graphite requirement" .display ".status1"
   870 label *label404
 
   882 jump *label258 greaterThanEq *tmp349 .targetSilicon
   883 sensor *tmp352 .smelter @coal
   884 jump *label260 greaterThanEq *tmp352 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   885 label *label405
   886 write "Goal 2: coal for silicon requirement" .display ".status1"
   887 label *label406
 
   895 label *label260
   896 sensor *tmp355 .smelter @sand
   897 jump *label264 greaterThanEq *tmp355 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   898 label *label407
   899 write "Goal 3: sand for silicon requirement" .display ".status1"
   900 label *label408
 
   913 jump *label268 greaterThanEq *tmp358 .powerTarget
   914 sensor *tmp361 .generator @coal
   915 jump *label270 greaterThanEq *tmp361 2
-    * set :status1:text "Goal 4: supplying generator"
   916 label *label409
   917 write "Goal 4: supplying generator" .display ".status1"
   918 label *label410
 
   942 sensor *tmp375 .battery @totalPower
   943 op mul *tmp376 .unloader1 .powerTarget
   944 jump *label280 greaterThanEq *tmp375 *tmp376
-    * set :status1:text "Goal 5: supplying generator"
   945 label *label411
   946 write "Goal 5: supplying generator" .display ".status1"
   947 label *label412
 
   953 label *label280
   954 sensor *tmp379 .core @silicon
   955 jump *label284 greaterThanEq *tmp379 .targetSilicon
-    * set :status1:text "Goal 6: silicon requirement"
   956 label *label413
   957 write "Goal 6: silicon requirement" .display ".status1"
   958 label *label414
 
   970 label *label284
   971 sensor *tmp386 .core @copper
   972 jump *label290 greaterThanEq *tmp386 .targetCopper
-    * set :status1:text "Goal 7: copper requirement"
   973 label *label415
   974 write "Goal 7: copper requirement" .display ".status1"
   975 label *label416
 
   981 label *label290
   982 sensor *tmp389 .core @lead
   983 jump *label294 greaterThanEq *tmp389 .targetLead
-    * set :status1:text "Goal 8: lead requirement"
   984 label *label417
   985 write "Goal 8: lead requirement" .display ".status1"
   986 label *label418
 
   992 label *label294
   993 sensor *tmp392 .core @metaglass
   994 jump *label298 greaterThanEq *tmp392 .targetMetaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   995 label *label419
   996 write "Goal 9: metaglass requirement" .display ".status1"
   997 label *label420
 
  1001 label *label301
  1002 jump *label299 always
  1003 label *label298
-    * set :status1:text "Goal 10: supplying base"
  1004 label *label421
  1005 write "Goal 10: supplying base" .display ".status1"
  1006 label *label422
 
  1023 label *label279
  1024 jump *label277 always
  1025 label *label276
-    * set :status1:text "Goal 11: Fetching titanium"
  1026 label *label423
  1027 write "Goal 11: Fetching titanium" .display ".status1"
  1028 label *label424

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
   487 label *label150
   488 return :status2*retaddr
   489 end
-    * label *label11
-    * write :status3:text .display ".status3"
-    * label *label151
-    * return :status3*retaddr
-    * end
   490 label *label12
   491 write :transportStatus:target .display ".transportTarget"
   492 write :transportStatus:item .display ".transportItem"
 
   501 end
   502 label *label14
   503 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label155 (h:*label155)
-    * call *label11 *invalid :status3*retval (m:*label155) (h:*label155)
-    * label *label155
+  504 label *label425
+  505 write :status3:text .display ".status3"
+  506 label *label426
   507 op sub *tmp232 :moveTo:radius 0.5
   508 label *label156
   509 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
 
   517 end
   518 label *label16
   519 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label162 (h:*label162)
-    * call *label11 *invalid :status3*retval (m:*label162) (h:*label162)
-    * label *label162
+  520 label *label427
+  521 write :status3:text .display ".status3"
+  522 label *label428
   523 label *label163
   524 sensor *tmp235 @unit @firstItem
   525 jump *label166 equal *tmp235 null
 
   559 end
   560 label *label19
   561 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label175 (h:*label175)
-    * call *label11 *invalid :status3*retval (m:*label175) (h:*label175)
-    * label *label175
+  562 label *label429
+  563 write :status3:text .display ".status3"
+  564 label *label430
   565 sensor *tmp244 @unit @firstItem
   566 jump *label176 notEqual *tmp244 :depositItems:item
   567 set :moveToBlock:block :depositItems:block
 
   634 label *label194
   635 label *label195
   636 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label197 (h:*label197)
-    * call *label11 *invalid :status3*retval (m:*label197) (h:*label197)
-    * label *label197
+  637 label *label431
+  638 write :status3:text .display ".status3"
+  639 label *label432
   640 op add :mineOre:stop @second 10
   641 label *label198
   642 sensor :mineOre:item @unit @firstItem

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   502 label *label14
   503 set :status3:text "Moving..."
   504 label *label425
-    * write :status3:text .display ".status3"
+  505 write "Moving..." .display ".status3"
   506 label *label426
   507 op sub *tmp232 :moveTo:radius 0.5
   508 label *label156
 
   518 label *label16
   519 set :status3:text "Moving..."
   520 label *label427
-    * write :status3:text .display ".status3"
+  521 write "Moving..." .display ".status3"
   522 label *label428
   523 label *label163
   524 sensor *tmp235 @unit @firstItem
 
   560 label *label19
   561 set :status3:text "Depositing..."
   562 label *label429
-    * write :status3:text .display ".status3"
+  563 write "Depositing..." .display ".status3"
   564 label *label430
   565 sensor *tmp244 @unit @firstItem
   566 jump *label176 notEqual *tmp244 :depositItems:item
 
   635 label *label195
   636 set :status3:text "Mining..."
   637 label *label431
-    * write :status3:text .display ".status3"
+  638 write "Mining..." .display ".status3"
   639 label *label432
   640 op add :mineOre:stop @second 10
   641 label *label198

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   500 return :error*retaddr
   501 end
   502 label *label14
-    * set :status3:text "Moving..."
   503 label *label425
   504 write "Moving..." .display ".status3"
   505 label *label426
 
   515 return :moveTo*retaddr
   516 end
   517 label *label16
-    * set :status3:text "Moving..."
   518 label *label427
   519 write "Moving..." .display ".status3"
   520 label *label428
 
   556 return :moveToBlock*retaddr
   557 end
   558 label *label19
-    * set :status3:text "Depositing..."
   559 label *label429
   560 write "Depositing..." .display ".status3"
   561 label *label430
 
   630 label *label196
   631 label *label194
   632 label *label195
-    * set :status3:text "Mining..."
   633 label *label431
   634 write "Mining..." .display ".status3"
   635 label *label432

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
   499 label *label153
   500 return :error*retaddr
   501 end
-    * label *label14
-    * label *label425
-    * write "Moving..." .display ".status3"
-    * label *label426
-    * op sub *tmp232 :moveTo:radius 0.5
-    * label *label156
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
-    * jump *label158 notEqual *tmp230 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp232
-    * label *label157
-    * jump *label156 always
-    * label *label158
-    * label *label154
-    * return :moveTo*retaddr
-    * end
   502 label *label16
   503 label *label427
   504 write "Moving..." .display ".status3"
 
   534 set :moveTo:x *tmp242
   535 set :moveTo:y *tmp243
   536 set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label173 (h:*label173)
-    * call *label14 *invalid :moveTo*retval (m:*label173) (h:*label173)
-    * label *label173
+  537 label *label433
+  538 label *label434
+  539 write "Moving..." .display ".status3"
+  540 label *label435
+  541 op sub *tmp232 :moveTo:radius 0.5
+  542 label *label436
+  543 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
+  544 jump *label438 notEqual *tmp230 false
+  545 ucontrol approach :moveTo:x :moveTo:y *tmp232
+  546 label *label437
+  547 jump *label436 always
+  548 label *label438
+  549 label *label439
   550 label *label172
   551 return :moveToBlock*retaddr
   552 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   538 label *label434
   539 write "Moving..." .display ".status3"
   540 label *label435
-    * op sub *tmp232 :moveTo:radius 0.5
+  541 op sub *tmp232 :moveToBlock:radius 0.5
   542 label *label436
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp230
+  543 ucontrol within *tmp242 *tmp243 :moveToBlock:radius *tmp230
   544 jump *label438 notEqual *tmp230 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp232
+  545 ucontrol approach *tmp242 *tmp243 *tmp232
   546 label *label437
   547 jump *label436 always
   548 label *label438

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   531 label *label18
   532 sensor *tmp242 :moveToBlock:block @x
   533 sensor *tmp243 :moveToBlock:block @y
-    * set :moveTo:x *tmp242
-    * set :moveTo:y *tmp243
-    * set :moveTo:radius :moveToBlock:radius
   534 label *label433
   535 label *label434
   536 write "Moving..." .display ".status3"

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
   528 label *label168
   529 return :dropAll*retaddr
   530 end
-    * label *label18
-    * sensor *tmp242 :moveToBlock:block @x
-    * sensor *tmp243 :moveToBlock:block @y
-    * label *label433
-    * label *label434
-    * write "Moving..." .display ".status3"
-    * label *label435
-    * op sub *tmp232 :moveToBlock:radius 0.5
-    * label *label436
-    * ucontrol within *tmp242 *tmp243 :moveToBlock:radius *tmp230
-    * jump *label438 notEqual *tmp230 false
-    * ucontrol approach *tmp242 *tmp243 *tmp232
-    * label *label437
-    * jump *label436 always
-    * label *label438
-    * label *label439
-    * label *label172
-    * return :moveToBlock*retaddr
-    * end
   531 label *label19
   532 label *label429
   533 write "Depositing..." .display ".status3"
 
   536 jump *label176 notEqual *tmp244 :depositItems:item
   537 set :moveToBlock:block :depositItems:block
   538 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label178 (h:*label178)
-    * call *label18 *invalid :moveToBlock*retval (m:*label178) (h:*label178)
-    * label *label178
+  539 label *label440
+  540 sensor *tmp242 :moveToBlock:block @x
+  541 sensor *tmp243 :moveToBlock:block @y
+  542 label *label441
+  543 label *label442
+  544 write "Moving..." .display ".status3"
+  545 label *label443
+  546 op sub *tmp232 :moveToBlock:radius 0.5
+  547 label *label444
+  548 ucontrol within *tmp242 *tmp243 :moveToBlock:radius *tmp230
+  549 jump *label446 notEqual *tmp230 false
+  550 ucontrol approach *tmp242 *tmp243 *tmp232
+  551 label *label445
+  552 jump *label444 always
+  553 label *label446
+  554 label *label447
+  555 label *label448
   556 sensor :depositItems:cap :depositItems:block @itemCapacity
   557 label *label179
   558 ucontrol itemDrop :depositItems:block 30

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   537 set :moveToBlock:block :depositItems:block
   538 set :moveToBlock:radius 6
   539 label *label440
-    * sensor *tmp242 :moveToBlock:block @x
-    * sensor *tmp243 :moveToBlock:block @y
+  540 sensor *tmp242 :depositItems:block @x
+  541 sensor *tmp243 :depositItems:block @y
   542 label *label441
   543 label *label442
   544 write "Moving..." .display ".status3"
   545 label *label443
-    * op sub *tmp232 :moveToBlock:radius 0.5
+  546 op sub *tmp232 6 0.5
   547 label *label444
-    * ucontrol within *tmp242 *tmp243 :moveToBlock:radius *tmp230
+  548 ucontrol within *tmp242 *tmp243 6 *tmp230
   549 jump *label446 notEqual *tmp230 false
-    * ucontrol approach *tmp242 *tmp243 *tmp232
+  550 ucontrol approach *tmp242 *tmp243 5.5
   551 label *label445
   552 jump *label444 always
   553 label *label446

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   534 label *label430
   535 sensor *tmp244 @unit @firstItem
   536 jump *label176 notEqual *tmp244 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
   537 label *label440
   538 sensor *tmp242 :depositItems:block @x
   539 sensor *tmp243 :depositItems:block @y
 
   541 label *label442
   542 write "Moving..." .display ".status3"
   543 label *label443
-    * op sub *tmp232 6 0.5
   544 label *label444
   545 ucontrol within *tmp242 *tmp243 6 *tmp230
   546 jump *label446 notEqual *tmp230 false

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
   577 label *label174
   578 return :depositItems*retaddr
   579 end
-    * label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 0
-    * jump *label187 notEqual *tmp254 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label189 (h:*label189)
-    * call *label13 *invalid :error*retval (m:*label189) (h:*label189)
-    * label *label189
-    * label *label187
-    * label *label188
-    * label *label186
-    * return :locateOre*retaddr
-    * end
   580 label *label21
   581 op min :mineOre:amount :mineOre:amount 30
   582 set :transportStatus:target :mineOre:amount
 
   585 call *label12 *invalid :transportStatus*retval (m:*label191) (h:*label191)
   586 label *label191
   587 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label192 (h:*label192)
-    * call *label20 *invalid :locateOre*retval (m:*label192) (h:*label192)
-    * label *label192
+  588 label *label449
+  589 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 0
+  590 jump *label451 notEqual *tmp254 false
+  591 set :error:error "Cannot locate ore"
+  592 setaddr :error*retaddr *label450 (h:*label450)
+  593 call *label13 *invalid :error*retval (m:*label450) (h:*label450)
+  594 label *label450
+  595 label *label451
+  596 label *label452
+  597 label *label453
   598 set :mineOre:x :locateOre:x
   599 set :mineOre:y :locateOre:y
   600 set :moveToEmpty:x :locateOre:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   586 label *label191
   587 set :locateOre:ore :mineOre:ore
   588 label *label449
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp254 0
+  589 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   590 jump *label451 notEqual *tmp254 false
   591 set :error:error "Cannot locate ore"
   592 setaddr :error*retaddr *label450 (h:*label450)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
   584 setaddr :transportStatus*retaddr *label191 (h:*label191)
   585 call *label12 *invalid :transportStatus*retval (m:*label191) (h:*label191)
   586 label *label191
-    * set :locateOre:ore :mineOre:ore
   587 label *label449
   588 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   589 jump *label451 notEqual *tmp254 false

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 (-4 instructions):
 
   725 label *label220
   726 return :supplyBlock*retaddr
   727 end
-    * label *label25
-    * sensor *tmp291 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp291 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label226 (h:*label226)
-    * call *label12 *invalid :transportStatus*retval (m:*label226) (h:*label226)
-    * label *label226
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label227 (h:*label227)
-    * call *label10 *invalid :status2*retval (m:*label227) (h:*label227)
-    * label *label227
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label228 (h:*label228)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label228) (h:*label228)
-    * label *label228
-    * setaddr :dropAll*retaddr *label229 (h:*label229)
-    * call *label17 *invalid :dropAll*retval (m:*label229) (h:*label229)
-    * label *label229
-    * label *label230
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp294 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp295 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp296 *tmp294 *tmp295
-    * jump *label233 equal *tmp296 false
-    * ucontrol itemDrop @air 1000
-    * label *label233
-    * label *label234
-    * label *label231
-    * sensor *tmp298 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp299 *tmp298 30
-    * sensor *tmp300 .core :supplyBlockFromCore:item
-    * op land *tmp301 *tmp299 *tmp300
-    * jump *label230 notEqual *tmp301 false
-    * label *label232
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label235 (h:*label235)
-    * call *label19 *invalid :depositItems*retval (m:*label235) (h:*label235)
-    * label *label235
-    * label *label225
-    * return :supplyBlockFromCore*retaddr
-    * end
   728 label *label31
   729 read *tmp303 :unpackCfg:cfg 0
   730 op sub *tmp304 *tmp303 35
 
   759 label *label400
   760 set :supplyBlockFromCore:target .thoriumGenerator
   761 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label242 (h:*label242)
-    * call *label25 *invalid :supplyBlockFromCore*retval (m:*label242) (h:*label242)
-    * label *label242
+  762 label *label454
+  763 sensor *tmp291 :supplyBlockFromCore:target @itemCapacity
+  764 op min :transportStatus:target *tmp291 30
+  765 set :transportStatus:item :supplyBlockFromCore:item
+  766 setaddr :transportStatus*retaddr *label455 (h:*label455)
+  767 call *label12 *invalid :transportStatus*retval (m:*label455) (h:*label455)
+  768 label *label455
+  769 set :status2:text "Transferring "
+  770 set :status2:item :supplyBlockFromCore:item
+  771 set :status2:block :supplyBlockFromCore:target
+  772 setaddr :status2*retaddr *label456 (h:*label456)
+  773 call *label10 *invalid :status2*retval (m:*label456) (h:*label456)
+  774 label *label456
+  775 set :moveToEmpty:x .coreX
+  776 set :moveToEmpty:y .coreY
+  777 setaddr :moveToEmpty*retaddr *label457 (h:*label457)
+  778 call *label16 *invalid :moveToEmpty*retval (m:*label457) (h:*label457)
+  779 label *label457
+  780 setaddr :dropAll*retaddr *label458 (h:*label458)
+  781 call *label17 *invalid :dropAll*retval (m:*label458) (h:*label458)
+  782 label *label458
+  783 label *label459
+  784 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  785 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  786 op notEqual *tmp294 :supplyBlockFromCore:unitItem null
+  787 op notEqual *tmp295 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  788 op land *tmp296 *tmp294 *tmp295
+  789 jump *label460 equal *tmp296 false
+  790 ucontrol itemDrop @air 1000
+  791 label *label460
+  792 label *label461
+  793 label *label462
+  794 sensor *tmp298 @unit :supplyBlockFromCore:item
+  795 op lessThan *tmp299 *tmp298 30
+  796 sensor *tmp300 .core :supplyBlockFromCore:item
+  797 op land *tmp301 *tmp299 *tmp300
+  798 jump *label459 notEqual *tmp301 false
+  799 label *label463
+  800 set :depositItems:block :supplyBlockFromCore:target
+  801 set :depositItems:item :supplyBlockFromCore:item
+  802 setaddr :depositItems*retaddr *label464 (h:*label464)
+  803 call *label19 *invalid :depositItems*retval (m:*label464) (h:*label464)
+  804 label *label464
+  805 label *label465
   806 set :fetchBlock:block .thoriumContainer
   807 set :fetchBlock:item @thorium
   808 setaddr :fetchBlock*retaddr *label243 (h:*label243)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   760 set :supplyBlockFromCore:target .thoriumGenerator
   761 set :supplyBlockFromCore:item @coal
   762 label *label454
-    * sensor *tmp291 :supplyBlockFromCore:target @itemCapacity
+  763 sensor *tmp291 .thoriumGenerator @itemCapacity
   764 op min :transportStatus:target *tmp291 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  765 set :transportStatus:item @coal
   766 setaddr :transportStatus*retaddr *label455 (h:*label455)
   767 call *label12 *invalid :transportStatus*retval (m:*label455) (h:*label455)
   768 label *label455

Modifications by Replicate loop condition at Actions.mnd:61:5 (+1 instructions):
 
   521 label *label169
   522 sensor *tmp240 @unit @firstItem
   523 jump *label171 equal *tmp240 null
+  524 label *label466
   525 ucontrol itemDrop @air 1000
   526 label *label170
-    * jump *label169 always
+  527 sensor *tmp240 @unit @firstItem
+  528 jump *label466 notEqual *tmp240 null
   529 label *label171
   530 label *label168
   531 return :dropAll*retaddr

Modifications by Replicate loop condition at Actions.mnd:39:5 (+1 instructions):
 
   546 label *label444
   547 ucontrol within *tmp242 *tmp243 6 *tmp230
   548 jump *label446 notEqual *tmp230 false
+  549 label *label467
   550 ucontrol approach *tmp242 *tmp243 5.5
   551 label *label445
-    * jump *label444 always
+  552 ucontrol within *tmp242 *tmp243 6 *tmp230
+  553 jump *label467 equal *tmp230 false
   554 label *label446
   555 label *label447
   556 label *label448

Modifications by Replicate loop condition at Actions.mnd:84:9 (+1 instructions):
 
   568 label *label182
   569 sensor *tmp252 @unit @firstItem
   570 jump *label184 equal *tmp252 null
+  571 label *label468
   572 ucontrol itemDrop @air 1000
   573 label *label183
-    * jump *label182 always
+  574 sensor *tmp252 @unit @firstItem
+  575 jump *label468 notEqual *tmp252 null
   576 label *label184
   577 label *label177
   578 set :transportStatus:target 0

Modifications by Inline function call at Actions.mnd:88:5:
 
   577 label *label177
   578 set :transportStatus:target 0
   579 set :transportStatus:item null
-    * setaddr :transportStatus*retaddr *label185 (h:*label185)
-    * call *label12 *invalid :transportStatus*retval (m:*label185) (h:*label185)
-    * label *label185
+  580 label *label469
+  581 write :transportStatus:target .display ".transportTarget"
+  582 write :transportStatus:item .display ".transportItem"
+  583 label *label470
   584 label *label174
   585 return :depositItems*retaddr
   586 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   578 set :transportStatus:target 0
   579 set :transportStatus:item null
   580 label *label469
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  581 write 0 .display ".transportTarget"
+  582 write null .display ".transportItem"
   583 label *label470
   584 label *label174
   585 return :depositItems*retaddr

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   575 jump *label468 notEqual *tmp252 null
   576 label *label184
   577 label *label177
-    * set :transportStatus:target 0
-    * set :transportStatus:item null
   578 label *label469
   579 write 0 .display ".transportTarget"
   580 write null .display ".transportItem"

Modifications by Inline function 'transportStatus' defined at Actions.mnd:21:1 (-4 instructions):
 
   487 label *label150
   488 return :status2*retaddr
   489 end
-    * label *label12
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
-    * label *label152
-    * return :transportStatus*retaddr
-    * end
   490 label *label13
   491 set .ERROR :error:error
   492 stop
 
   580 op min :mineOre:amount :mineOre:amount 30
   581 set :transportStatus:target :mineOre:amount
   582 set :transportStatus:item :mineOre:ore
-    * setaddr :transportStatus*retaddr *label191 (h:*label191)
-    * call *label12 *invalid :transportStatus*retval (m:*label191) (h:*label191)
-    * label *label191
+  583 label *label471
+  584 write :transportStatus:target .display ".transportTarget"
+  585 write :transportStatus:item .display ".transportItem"
+  586 label *label472
   587 label *label449
   588 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   589 jump *label451 notEqual *tmp254 false
 
   659 sensor *tmp273 :fetchBlock:block @itemCapacity
   660 op min :transportStatus:target *tmp273 30
   661 set :transportStatus:item :fetchBlock:item
-    * setaddr :transportStatus*retaddr *label210 (h:*label210)
-    * call *label12 *invalid :transportStatus*retval (m:*label210) (h:*label210)
-    * label *label210
+  662 label *label473
+  663 write :transportStatus:target .display ".transportTarget"
+  664 write :transportStatus:item .display ".transportItem"
+  665 label *label474
   666 set :status2:text "Fetching "
   667 set :status2:item :fetchBlock:item
   668 set :status2:block :fetchBlock:block
 
   764 sensor *tmp291 .thoriumGenerator @itemCapacity
   765 op min :transportStatus:target *tmp291 30
   766 set :transportStatus:item @coal
-    * setaddr :transportStatus*retaddr *label455 (h:*label455)
-    * call *label12 *invalid :transportStatus*retval (m:*label455) (h:*label455)
-    * label *label455
+  767 label *label475
+  768 write :transportStatus:target .display ".transportTarget"
+  769 write :transportStatus:item .display ".transportItem"
+  770 label *label476
   771 set :status2:text "Transferring "
   772 set :status2:item :supplyBlockFromCore:item
   773 set :status2:block :supplyBlockFromCore:target

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   581 set :transportStatus:target :mineOre:amount
   582 set :transportStatus:item :mineOre:ore
   583 label *label471
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  584 write :mineOre:amount .display ".transportTarget"
+  585 write :mineOre:ore .display ".transportItem"
   586 label *label472
   587 label *label449
   588 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
 
   661 set :transportStatus:item :fetchBlock:item
   662 label *label473
   663 write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  664 write :fetchBlock:item .display ".transportItem"
   665 label *label474
   666 set :status2:text "Fetching "
   667 set :status2:item :fetchBlock:item
 
   766 set :transportStatus:item @coal
   767 label *label475
   768 write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  769 write @coal .display ".transportItem"
   770 label *label476
   771 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  772 set :status2:item @coal
+  773 set :status2:block .thoriumGenerator
   774 setaddr :status2*retaddr *label456 (h:*label456)
   775 call *label10 *invalid :status2*retval (m:*label456) (h:*label456)
   776 label *label456

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   579 label *label21
   580 op min :mineOre:amount :mineOre:amount 30
   581 set :transportStatus:target :mineOre:amount
-    * set :transportStatus:item :mineOre:ore
   582 label *label471
   583 write :mineOre:amount .display ".transportTarget"
   584 write :mineOre:ore .display ".transportItem"
 
   657 label *label23
   658 sensor *tmp273 :fetchBlock:block @itemCapacity
   659 op min :transportStatus:target *tmp273 30
-    * set :transportStatus:item :fetchBlock:item
   660 label *label473
   661 write :transportStatus:target .display ".transportTarget"
   662 write :fetchBlock:item .display ".transportItem"
 
   761 label *label454
   762 sensor *tmp291 .thoriumGenerator @itemCapacity
   763 op min :transportStatus:target *tmp291 30
-    * set :transportStatus:item @coal
   764 label *label475
   765 write :transportStatus:target .display ".transportTarget"
   766 write @coal .display ".transportItem"

Modifications by Inline function call at Actions.mnd:135:5 (+1 instructions):
 
   664 set :status2:text "Fetching "
   665 set :status2:item :fetchBlock:item
   666 set :status2:block :fetchBlock:block
-    * setaddr :status2*retaddr *label211 (h:*label211)
-    * call *label10 *invalid :status2*retval (m:*label211) (h:*label211)
-    * label *label211
+  667 label *label477
+  668 write :status2:text .display ".status2"
+  669 write :status2:item .display ".item2"
+  670 write :status2:block .display ".block2"
+  671 label *label478
   672 sensor *tmp275 :fetchBlock:block @x
   673 sensor *tmp276 :fetchBlock:block @y
   674 set :moveToEmpty:x *tmp275

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   665 set :status2:item :fetchBlock:item
   666 set :status2:block :fetchBlock:block
   667 label *label477
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  668 write "Fetching " .display ".status2"
+  669 write :fetchBlock:item .display ".item2"
+  670 write :fetchBlock:block .display ".block2"
   671 label *label478
   672 sensor *tmp275 :fetchBlock:block @x
   673 sensor *tmp276 :fetchBlock:block @y

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   661 write :transportStatus:target .display ".transportTarget"
   662 write :fetchBlock:item .display ".transportItem"
   663 label *label474
-    * set :status2:text "Fetching "
-    * set :status2:item :fetchBlock:item
-    * set :status2:block :fetchBlock:block
   664 label *label477
   665 write "Fetching " .display ".status2"
   666 write :fetchBlock:item .display ".item2"

Modifications by Inline function 'status2' defined at Actions.mnd:11:1 (-2 instructions):
 
   480 label *label144
   481 label *label137
   482 end
-    * label *label10
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
-    * label *label150
-    * return :status2*retaddr
-    * end
   483 label *label13
   484 set .ERROR :error:error
   485 stop
 
   635 set :status2:text "Mining "
   636 set :status2:item :mineOre.1:ore
   637 set :status2:block "core"
-    * setaddr :status2*retaddr *label207 (h:*label207)
-    * call *label10 *invalid :status2*retval (m:*label207) (h:*label207)
-    * label *label207
+  638 label *label479
+  639 write :status2:text .display ".status2"
+  640 write :status2:item .display ".item2"
+  641 write :status2:block .display ".block2"
+  642 label *label480
   643 set :mineOre:ore :mineOre.1:ore
   644 set :mineOre:amount 30
   645 set :mineOre:block .core
 
   700 set :status2:text "Supplying "
   701 set :status2:item :supplyBlock:ore
   702 set :status2:block :supplyBlock:block
-    * setaddr :status2*retaddr *label221 (h:*label221)
-    * call *label10 *invalid :status2*retval (m:*label221) (h:*label221)
-    * label *label221
+  703 label *label481
+  704 write :status2:text .display ".status2"
+  705 write :status2:item .display ".item2"
+  706 write :status2:block .display ".block2"
+  707 label *label482
   708 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   709 sensor *tmp287 :supplyBlock:block :supplyBlock:ore
   710 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp287
 
   764 set :status2:text "Transferring "
   765 set :status2:item @coal
   766 set :status2:block .thoriumGenerator
-    * setaddr :status2*retaddr *label456 (h:*label456)
-    * call *label10 *invalid :status2*retval (m:*label456) (h:*label456)
-    * label *label456
+  767 label *label483
+  768 write :status2:text .display ".status2"
+  769 write :status2:item .display ".item2"
+  770 write :status2:block .display ".block2"
+  771 label *label484
   772 set :moveToEmpty:x .coreX
   773 set :moveToEmpty:y .coreY
   774 setaddr :moveToEmpty*retaddr *label457 (h:*label457)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   636 set :status2:item :mineOre.1:ore
   637 set :status2:block "core"
   638 label *label479
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  639 write "Mining " .display ".status2"
+  640 write :mineOre.1:ore .display ".item2"
+  641 write "core" .display ".block2"
   642 label *label480
   643 set :mineOre:ore :mineOre.1:ore
   644 set :mineOre:amount 30
 
   701 set :status2:item :supplyBlock:ore
   702 set :status2:block :supplyBlock:block
   703 label *label481
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  704 write "Supplying " .display ".status2"
+  705 write :supplyBlock:ore .display ".item2"
+  706 write :supplyBlock:block .display ".block2"
   707 label *label482
   708 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   709 sensor *tmp287 :supplyBlock:block :supplyBlock:ore
 
   765 set :status2:item @coal
   766 set :status2:block .thoriumGenerator
   767 label *label483
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  768 write "Transferring " .display ".status2"
+  769 write @coal .display ".item2"
+  770 write .thoriumGenerator .display ".block2"
   771 label *label484
   772 set :moveToEmpty:x .coreX
   773 set :moveToEmpty:y .coreY

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   632 return :mineOre*retaddr
   633 end
   634 label *label22
-    * set :status2:text "Mining "
-    * set :status2:item :mineOre.1:ore
-    * set :status2:block "core"
   635 label *label479
   636 write "Mining " .display ".status2"
   637 write :mineOre.1:ore .display ".item2"
 
   694 return :fetchBlock*retaddr
   695 end
   696 label *label24
-    * set :status2:text "Supplying "
-    * set :status2:item :supplyBlock:ore
-    * set :status2:block :supplyBlock:block
   697 label *label481
   698 write "Supplying " .display ".status2"
   699 write :supplyBlock:ore .display ".item2"
 
   755 write :transportStatus:target .display ".transportTarget"
   756 write @coal .display ".transportItem"
   757 label *label476
-    * set :status2:text "Transferring "
-    * set :status2:item @coal
-    * set :status2:block .thoriumGenerator
   758 label *label483
   759 write "Transferring " .display ".status2"
   760 write @coal .display ".item2"

Modifications by Inline function 'error' defined at Actions.mnd:31:1 (-4 instructions):
 
    72 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    73 jump *label55 notEqual :buildFirstTitaniumDrill:result false
    74 set :error:error "Cannot locate spot for titanium drill"
-    * setaddr :error*retaddr *label57 (h:*label57)
-    * call *label13 *invalid :error*retval (m:*label57) (h:*label57)
-    * label *label57
+   75 label *label485
+   76 set .ERROR :error:error
+   77 stop
+   78 label *label486
    79 label *label55
    80 label *label56
    81 write @pneumatic-drill processor1 ".nextBlock"
 
   316 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   317 jump *label109 notEqual :buildThoriumDrill:result false
   318 set :error:error "Cannot locate spot for thorium drill"
-    * setaddr :error*retaddr *label111 (h:*label111)
-    * call *label13 *invalid :error*retval (m:*label111) (h:*label111)
-    * label *label111
+  319 label *label487
+  320 set .ERROR :error:error
+  321 stop
+  322 label *label488
   323 label *label109
   324 label *label110
   325 write @laser-drill processor5 ":buildBlockAt:block"
 
   482 label *label144
   483 label *label137
   484 end
-    * label *label13
-    * set .ERROR :error:error
-    * stop
-    * label *label153
-    * return :error*retaddr
-    * end
   485 label *label16
   486 label *label427
   487 write "Moving..." .display ".status3"
 
   576 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   577 jump *label451 notEqual *tmp254 false
   578 set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label450 (h:*label450)
-    * call *label13 *invalid :error*retval (m:*label450) (h:*label450)
-    * label *label450
+  579 label *label489
+  580 set .ERROR :error:error
+  581 stop
+  582 label *label490
   583 label *label451
   584 label *label452
   585 label *label453

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    73 jump *label55 notEqual :buildFirstTitaniumDrill:result false
    74 set :error:error "Cannot locate spot for titanium drill"
    75 label *label485
-    * set .ERROR :error:error
+   76 set .ERROR "Cannot locate spot for titanium drill"
    77 stop
    78 label *label486
    79 label *label55
 
   317 jump *label109 notEqual :buildThoriumDrill:result false
   318 set :error:error "Cannot locate spot for thorium drill"
   319 label *label487
-    * set .ERROR :error:error
+  320 set .ERROR "Cannot locate spot for thorium drill"
   321 stop
   322 label *label488
   323 label *label109
 
   577 jump *label451 notEqual *tmp254 false
   578 set :error:error "Cannot locate ore"
   579 label *label489
-    * set .ERROR :error:error
+  580 set .ERROR "Cannot locate ore"
   581 stop
   582 label *label490
   583 label *label451

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
    71 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
    72 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    73 jump *label55 notEqual :buildFirstTitaniumDrill:result false
-    * set :error:error "Cannot locate spot for titanium drill"
    74 label *label485
    75 set .ERROR "Cannot locate spot for titanium drill"
    76 stop
 
   314 jump *label108 equal *tmp195 false
   315 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   316 jump *label109 notEqual :buildThoriumDrill:result false
-    * set :error:error "Cannot locate spot for thorium drill"
   317 label *label487
   318 set .ERROR "Cannot locate spot for thorium drill"
   319 stop
 
   573 label *label449
   574 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   575 jump *label451 notEqual *tmp254 false
-    * set :error:error "Cannot locate ore"
   576 label *label489
   577 set .ERROR "Cannot locate ore"
   578 stop

Modifications by Inline function 'dropAll' defined at Actions.mnd:59:1 (+2 instructions):
 
   498 label *label161
   499 return :moveToEmpty*retaddr
   500 end
-    * label *label17
-    * label *label169
-    * sensor *tmp240 @unit @firstItem
-    * jump *label171 equal *tmp240 null
-    * label *label466
-    * ucontrol itemDrop @air 1000
-    * label *label170
-    * sensor *tmp240 @unit @firstItem
-    * jump *label466 notEqual *tmp240 null
-    * label *label171
-    * label *label168
-    * return :dropAll*retaddr
-    * end
   501 label *label19
   502 label *label429
   503 write "Depositing..." .display ".status3"
 
   576 label *label193
   577 sensor *tmp259 @unit @firstItem
   578 jump *label194 equal *tmp259 :mineOre:ore
-    * setaddr :dropAll*retaddr *label196 (h:*label196)
-    * call *label17 *invalid :dropAll*retval (m:*label196) (h:*label196)
-    * label *label196
+  579 label *label491
+  580 label *label492
+  581 sensor *tmp240 @unit @firstItem
+  582 jump *label495 equal *tmp240 null
+  583 label *label493
+  584 ucontrol itemDrop @air 1000
+  585 label *label494
+  586 sensor *tmp240 @unit @firstItem
+  587 jump *label493 notEqual *tmp240 null
+  588 label *label495
+  589 label *label496
   590 label *label194
   591 label *label195
   592 label *label431
 
   654 setaddr :moveToEmpty*retaddr *label212 (h:*label212)
   655 call *label16 *invalid :moveToEmpty*retval (m:*label212) (h:*label212)
   656 label *label212
-    * setaddr :dropAll*retaddr *label213 (h:*label213)
-    * call *label17 *invalid :dropAll*retval (m:*label213) (h:*label213)
-    * label *label213
+  657 label *label497
+  658 label *label498
+  659 sensor *tmp240 @unit @firstItem
+  660 jump *label501 equal *tmp240 null
+  661 label *label499
+  662 ucontrol itemDrop @air 1000
+  663 label *label500
+  664 sensor *tmp240 @unit @firstItem
+  665 jump *label499 notEqual *tmp240 null
+  666 label *label501
+  667 label *label502
   668 label *label214
   669 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
   670 sensor :fetchBlock:unitItem @unit @firstItem
 
   762 setaddr :moveToEmpty*retaddr *label457 (h:*label457)
   763 call *label16 *invalid :moveToEmpty*retval (m:*label457) (h:*label457)
   764 label *label457
-    * setaddr :dropAll*retaddr *label458 (h:*label458)
-    * call *label17 *invalid :dropAll*retval (m:*label458) (h:*label458)
-    * label *label458
+  765 label *label503
+  766 label *label504
+  767 sensor *tmp240 @unit @firstItem
+  768 jump *label507 equal *tmp240 null
+  769 label *label505
+  770 ucontrol itemDrop @air 1000
+  771 label *label506
+  772 sensor *tmp240 @unit @firstItem
+  773 jump *label505 notEqual *tmp240 null
+  774 label *label507
+  775 label *label508
   776 label *label459
   777 ucontrol itemTake .core :supplyBlockFromCore:item 30
   778 sensor :supplyBlockFromCore:unitItem @unit @firstItem

Modifications by Inline function 'moveToEmpty' defined at Actions.mnd:50:1 (+6 instructions):
 
   480 label *label144
   481 label *label137
   482 end
-    * label *label16
-    * label *label427
-    * write "Moving..." .display ".status3"
-    * label *label428
-    * label *label163
-    * sensor *tmp235 @unit @firstItem
-    * jump *label166 equal *tmp235 null
-    * ucontrol itemDrop @air 1000
-    * label *label166
-    * label *label167
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label164
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
-    * jump *label163 equal *tmp238 false
-    * label *label165
-    * label *label161
-    * return :moveToEmpty*retaddr
-    * end
   483 label *label19
   484 label *label429
   485 write "Depositing..." .display ".status3"
 
   553 set :mineOre:y :locateOre:y
   554 set :moveToEmpty:x :locateOre:x
   555 set :moveToEmpty:y :locateOre:y
-    * setaddr :moveToEmpty*retaddr *label193 (h:*label193)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label193) (h:*label193)
-    * label *label193
+  556 label *label509
+  557 label *label510
+  558 write "Moving..." .display ".status3"
+  559 label *label511
+  560 label *label512
+  561 sensor *tmp235 @unit @firstItem
+  562 jump *label513 equal *tmp235 null
+  563 ucontrol itemDrop @air 1000
+  564 label *label513
+  565 label *label514
+  566 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  567 label *label515
+  568 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  569 jump *label512 equal *tmp238 false
+  570 label *label516
+  571 label *label517
   572 sensor *tmp259 @unit @firstItem
   573 jump *label194 equal *tmp259 :mineOre:ore
   574 label *label491
 
   646 sensor *tmp276 :fetchBlock:block @y
   647 set :moveToEmpty:x *tmp275
   648 set :moveToEmpty:y *tmp276
-    * setaddr :moveToEmpty*retaddr *label212 (h:*label212)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label212) (h:*label212)
-    * label *label212
+  649 label *label518
+  650 label *label519
+  651 write "Moving..." .display ".status3"
+  652 label *label520
+  653 label *label521
+  654 sensor *tmp235 @unit @firstItem
+  655 jump *label522 equal *tmp235 null
+  656 ucontrol itemDrop @air 1000
+  657 label *label522
+  658 label *label523
+  659 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  660 label *label524
+  661 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  662 jump *label521 equal *tmp238 false
+  663 label *label525
+  664 label *label526
   665 label *label497
   666 label *label498
   667 sensor *tmp240 @unit @firstItem
 
   767 label *label484
   768 set :moveToEmpty:x .coreX
   769 set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label457 (h:*label457)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label457) (h:*label457)
-    * label *label457
+  770 label *label527
+  771 label *label528
+  772 write "Moving..." .display ".status3"
+  773 label *label529
+  774 label *label530
+  775 sensor *tmp235 @unit @firstItem
+  776 jump *label531 equal *tmp235 null
+  777 ucontrol itemDrop @air 1000
+  778 label *label531
+  779 label *label532
+  780 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  781 label *label533
+  782 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  783 jump *label530 equal *tmp238 false
+  784 label *label534
+  785 label *label535
   786 label *label503
   787 label *label504
   788 sensor *tmp240 @unit @firstItem

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   563 ucontrol itemDrop @air 1000
   564 label *label513
   565 label *label514
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  566 ucontrol approach :locateOre:x :locateOre:y 5.5
   567 label *label515
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  568 ucontrol within :locateOre:x :locateOre:y 6 *tmp238
   569 jump *label512 equal *tmp238 false
   570 label *label516
   571 label *label517
 
   597 jump *label200 always
   598 label *label201
   599 label *label202
-    * ucontrol mine :mineOre:x :mineOre:y
+  600 ucontrol mine :locateOre:x :locateOre:y
   601 jump *label203 lessThanEq @second :mineOre:stop
   602 jump *label200 always
   603 label *label203
 
   656 ucontrol itemDrop @air 1000
   657 label *label522
   658 label *label523
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  659 ucontrol approach *tmp275 *tmp276 5.5
   660 label *label524
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  661 ucontrol within *tmp275 *tmp276 6 *tmp238
   662 jump *label521 equal *tmp238 false
   663 label *label525
   664 label *label526
 
   777 ucontrol itemDrop @air 1000
   778 label *label531
   779 label *label532
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  780 ucontrol approach .coreX .coreY 5.5
   781 label *label533
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp238
+  782 ucontrol within .coreX .coreY 6 *tmp238
   783 jump *label530 equal *tmp238 false
   784 label *label534
   785 label *label535
 
   795 label *label507
   796 label *label508
   797 label *label459
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
+  798 ucontrol itemTake .core @coal 30
   799 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   800 op notEqual *tmp294 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp295 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  801 op notEqual *tmp295 :supplyBlockFromCore:unitItem @coal
   802 op land *tmp296 *tmp294 *tmp295
   803 jump *label460 equal *tmp296 false
   804 ucontrol itemDrop @air 1000
   805 label *label460
   806 label *label461
   807 label *label462
-    * sensor *tmp298 @unit :supplyBlockFromCore:item
+  808 sensor *tmp298 @unit @coal
   809 op lessThan *tmp299 *tmp298 30
-    * sensor *tmp300 .core :supplyBlockFromCore:item
+  810 sensor *tmp300 .core @coal
   811 op land *tmp301 *tmp299 *tmp300
   812 jump *label459 notEqual *tmp301 false
   813 label *label463
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  814 set :depositItems:block .thoriumGenerator
+  815 set :depositItems:item @coal
   816 setaddr :depositItems*retaddr *label464 (h:*label464)
   817 call *label19 *invalid :depositItems*retval (m:*label464) (h:*label464)
   818 label *label464

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
   549 label *label451
   550 label *label452
   551 label *label453
-    * set :mineOre:x :locateOre:x
-    * set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :locateOre:x
-    * set :moveToEmpty:y :locateOre:y
   552 label *label509
   553 label *label510
   554 write "Moving..." .display ".status3"
 
   640 label *label478
   641 sensor *tmp275 :fetchBlock:block @x
   642 sensor *tmp276 :fetchBlock:block @y
-    * set :moveToEmpty:x *tmp275
-    * set :moveToEmpty:y *tmp276
   643 label *label518
   644 label *label519
   645 write "Moving..." .display ".status3"
 
   745 label *label399
   746 write "Phase 2: servicing thorium drill" .display ".status1"
   747 label *label400
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   748 label *label454
   749 sensor *tmp291 .thoriumGenerator @itemCapacity
   750 op min :transportStatus:target *tmp291 30
 
   757 write @coal .display ".item2"
   758 write .thoriumGenerator .display ".block2"
   759 label *label484
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
   760 label *label527
   761 label *label528
   762 write "Moving..." .display ".status3"

Modifications by Inline function 'depositItems' defined at Actions.mnd:74:1 (+42 instructions):
 
   480 label *label144
   481 label *label137
   482 end
-    * label *label19
-    * label *label429
-    * write "Depositing..." .display ".status3"
-    * label *label430
-    * sensor *tmp244 @unit @firstItem
-    * jump *label176 notEqual *tmp244 :depositItems:item
-    * label *label440
-    * sensor *tmp242 :depositItems:block @x
-    * sensor *tmp243 :depositItems:block @y
-    * label *label441
-    * label *label442
-    * write "Moving..." .display ".status3"
-    * label *label443
-    * label *label444
-    * ucontrol within *tmp242 *tmp243 6 *tmp230
-    * jump *label446 notEqual *tmp230 false
-    * label *label467
-    * ucontrol approach *tmp242 *tmp243 5.5
-    * label *label445
-    * ucontrol within *tmp242 *tmp243 6 *tmp230
-    * jump *label467 equal *tmp230 false
-    * label *label446
-    * label *label447
-    * label *label448
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
-    * label *label179
-    * ucontrol itemDrop :depositItems:block 30
-    * label *label180
-    * sensor *tmp248 @unit @firstItem
-    * op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 :depositItems:block :depositItems:item
-    * jump *label179 greaterThan *tmp249 *tmp250
-    * label *label181
-    * jump *label177 always
-    * label *label176
-    * label *label182
-    * sensor *tmp252 @unit @firstItem
-    * jump *label184 equal *tmp252 null
-    * label *label468
-    * ucontrol itemDrop @air 1000
-    * label *label183
-    * sensor *tmp252 @unit @firstItem
-    * jump *label468 notEqual *tmp252 null
-    * label *label184
-    * label *label177
-    * label *label469
-    * write 0 .display ".transportTarget"
-    * write null .display ".transportItem"
-    * label *label470
-    * label *label174
-    * return :depositItems*retaddr
-    * end
   483 label *label21
   484 op min :mineOre:amount :mineOre:amount 30
   485 set :transportStatus:target :mineOre:amount
 
   553 ucontrol unbind
   554 set :depositItems:block :mineOre:block
   555 set :depositItems:item :mineOre:ore
-    * setaddr :depositItems*retaddr *label205 (h:*label205)
-    * call *label19 *invalid :depositItems*retval (m:*label205) (h:*label205)
-    * label *label205
+  556 label *label536
+  557 label *label537
+  558 write "Depositing..." .display ".status3"
+  559 label *label538
+  560 sensor *tmp244 @unit @firstItem
+  561 jump *label552 notEqual *tmp244 :depositItems:item
+  562 label *label539
+  563 sensor *tmp242 :depositItems:block @x
+  564 sensor *tmp243 :depositItems:block @y
+  565 label *label540
+  566 label *label541
+  567 write "Moving..." .display ".status3"
+  568 label *label542
+  569 label *label543
+  570 ucontrol within *tmp242 *tmp243 6 *tmp230
+  571 jump *label546 notEqual *tmp230 false
+  572 label *label544
+  573 ucontrol approach *tmp242 *tmp243 5.5
+  574 label *label545
+  575 ucontrol within *tmp242 *tmp243 6 *tmp230
+  576 jump *label544 equal *tmp230 false
+  577 label *label546
+  578 label *label547
+  579 label *label548
+  580 sensor :depositItems:cap :depositItems:block @itemCapacity
+  581 label *label549
+  582 ucontrol itemDrop :depositItems:block 30
+  583 label *label550
+  584 sensor *tmp248 @unit @firstItem
+  585 op mul *tmp249 *tmp248 :depositItems:cap
+  586 sensor *tmp250 :depositItems:block :depositItems:item
+  587 jump *label549 greaterThan *tmp249 *tmp250
+  588 label *label551
+  589 jump *label557 always
+  590 label *label552
+  591 label *label553
+  592 sensor *tmp252 @unit @firstItem
+  593 jump *label556 equal *tmp252 null
+  594 label *label554
+  595 ucontrol itemDrop @air 1000
+  596 label *label555
+  597 sensor *tmp252 @unit @firstItem
+  598 jump *label554 notEqual *tmp252 null
+  599 label *label556
+  600 label *label557
+  601 label *label558
+  602 write 0 .display ".transportTarget"
+  603 write null .display ".transportItem"
+  604 label *label559
+  605 label *label560
   606 label *label190
   607 return :mineOre*retaddr
   608 end
 
   681 label *label216
   682 set :depositItems:block .core
   683 set :depositItems:item :fetchBlock:item
-    * setaddr :depositItems*retaddr *label219 (h:*label219)
-    * call *label19 *invalid :depositItems*retval (m:*label219) (h:*label219)
-    * label *label219
+  684 label *label561
+  685 label *label562
+  686 write "Depositing..." .display ".status3"
+  687 label *label563
+  688 sensor *tmp244 @unit @firstItem
+  689 jump *label577 notEqual *tmp244 :depositItems:item
+  690 label *label564
+  691 sensor *tmp242 :depositItems:block @x
+  692 sensor *tmp243 :depositItems:block @y
+  693 label *label565
+  694 label *label566
+  695 write "Moving..." .display ".status3"
+  696 label *label567
+  697 label *label568
+  698 ucontrol within *tmp242 *tmp243 6 *tmp230
+  699 jump *label571 notEqual *tmp230 false
+  700 label *label569
+  701 ucontrol approach *tmp242 *tmp243 5.5
+  702 label *label570
+  703 ucontrol within *tmp242 *tmp243 6 *tmp230
+  704 jump *label569 equal *tmp230 false
+  705 label *label571
+  706 label *label572
+  707 label *label573
+  708 sensor :depositItems:cap :depositItems:block @itemCapacity
+  709 label *label574
+  710 ucontrol itemDrop :depositItems:block 30
+  711 label *label575
+  712 sensor *tmp248 @unit @firstItem
+  713 op mul *tmp249 *tmp248 :depositItems:cap
+  714 sensor *tmp250 :depositItems:block :depositItems:item
+  715 jump *label574 greaterThan *tmp249 *tmp250
+  716 label *label576
+  717 jump *label582 always
+  718 label *label577
+  719 label *label578
+  720 sensor *tmp252 @unit @firstItem
+  721 jump *label581 equal *tmp252 null
+  722 label *label579
+  723 ucontrol itemDrop @air 1000
+  724 label *label580
+  725 sensor *tmp252 @unit @firstItem
+  726 jump *label579 notEqual *tmp252 null
+  727 label *label581
+  728 label *label582
+  729 label *label583
+  730 write 0 .display ".transportTarget"
+  731 write null .display ".transportItem"
+  732 label *label584
+  733 label *label585
   734 label *label209
   735 return :fetchBlock*retaddr
   736 end
 
   845 label *label463
   846 set :depositItems:block .thoriumGenerator
   847 set :depositItems:item @coal
-    * setaddr :depositItems*retaddr *label464 (h:*label464)
-    * call *label19 *invalid :depositItems*retval (m:*label464) (h:*label464)
-    * label *label464
+  848 label *label586
+  849 label *label587
+  850 write "Depositing..." .display ".status3"
+  851 label *label588
+  852 sensor *tmp244 @unit @firstItem
+  853 jump *label602 notEqual *tmp244 :depositItems:item
+  854 label *label589
+  855 sensor *tmp242 :depositItems:block @x
+  856 sensor *tmp243 :depositItems:block @y
+  857 label *label590
+  858 label *label591
+  859 write "Moving..." .display ".status3"
+  860 label *label592
+  861 label *label593
+  862 ucontrol within *tmp242 *tmp243 6 *tmp230
+  863 jump *label596 notEqual *tmp230 false
+  864 label *label594
+  865 ucontrol approach *tmp242 *tmp243 5.5
+  866 label *label595
+  867 ucontrol within *tmp242 *tmp243 6 *tmp230
+  868 jump *label594 equal *tmp230 false
+  869 label *label596
+  870 label *label597
+  871 label *label598
+  872 sensor :depositItems:cap :depositItems:block @itemCapacity
+  873 label *label599
+  874 ucontrol itemDrop :depositItems:block 30
+  875 label *label600
+  876 sensor *tmp248 @unit @firstItem
+  877 op mul *tmp249 *tmp248 :depositItems:cap
+  878 sensor *tmp250 :depositItems:block :depositItems:item
+  879 jump *label599 greaterThan *tmp249 *tmp250
+  880 label *label601
+  881 jump *label607 always
+  882 label *label602
+  883 label *label603
+  884 sensor *tmp252 @unit @firstItem
+  885 jump *label606 equal *tmp252 null
+  886 label *label604
+  887 ucontrol itemDrop @air 1000
+  888 label *label605
+  889 sensor *tmp252 @unit @firstItem
+  890 jump *label604 notEqual *tmp252 null
+  891 label *label606
+  892 label *label607
+  893 label *label608
+  894 write 0 .display ".transportTarget"
+  895 write null .display ".transportItem"
+  896 label *label609
+  897 label *label610
   898 label *label465
   899 set :fetchBlock:block .thoriumContainer
   900 set :fetchBlock:item @thorium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   482 end
   483 label *label21
   484 op min :mineOre:amount :mineOre:amount 30
-    * set :transportStatus:target :mineOre:amount
   485 label *label471
   486 write :mineOre:amount .display ".transportTarget"
   487 write :mineOre:ore .display ".transportItem"
 
   557 write "Depositing..." .display ".status3"
   558 label *label538
   559 sensor *tmp244 @unit @firstItem
-    * jump *label552 notEqual *tmp244 :depositItems:item
+  560 jump *label552 notEqual *tmp244 :mineOre:ore
   561 label *label539
-    * sensor *tmp242 :depositItems:block @x
-    * sensor *tmp243 :depositItems:block @y
+  562 sensor *tmp242 :mineOre:block @x
+  563 sensor *tmp243 :mineOre:block @y
   564 label *label540
   565 label *label541
   566 write "Moving..." .display ".status3"
 
   576 label *label546
   577 label *label547
   578 label *label548
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  579 sensor :depositItems:cap :mineOre:block @itemCapacity
   580 label *label549
-    * ucontrol itemDrop :depositItems:block 30
+  581 ucontrol itemDrop :mineOre:block 30
   582 label *label550
   583 sensor *tmp248 @unit @firstItem
   584 op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 :depositItems:block :depositItems:item
+  585 sensor *tmp250 :mineOre:block :mineOre:ore
   586 jump *label549 greaterThan *tmp249 *tmp250
   587 label *label551
   588 jump *label557 always
 
   685 write "Depositing..." .display ".status3"
   686 label *label563
   687 sensor *tmp244 @unit @firstItem
-    * jump *label577 notEqual *tmp244 :depositItems:item
+  688 jump *label577 notEqual *tmp244 :fetchBlock:item
   689 label *label564
-    * sensor *tmp242 :depositItems:block @x
-    * sensor *tmp243 :depositItems:block @y
+  690 sensor *tmp242 .core @x
+  691 sensor *tmp243 .core @y
   692 label *label565
   693 label *label566
   694 write "Moving..." .display ".status3"
 
   704 label *label571
   705 label *label572
   706 label *label573
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  707 sensor :depositItems:cap .core @itemCapacity
   708 label *label574
-    * ucontrol itemDrop :depositItems:block 30
+  709 ucontrol itemDrop .core 30
   710 label *label575
   711 sensor *tmp248 @unit @firstItem
   712 op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 :depositItems:block :depositItems:item
+  713 sensor *tmp250 .core :fetchBlock:item
   714 jump *label574 greaterThan *tmp249 *tmp250
   715 label *label576
   716 jump *label582 always
 
   849 write "Depositing..." .display ".status3"
   850 label *label588
   851 sensor *tmp244 @unit @firstItem
-    * jump *label602 notEqual *tmp244 :depositItems:item
+  852 jump *label602 notEqual *tmp244 @coal
   853 label *label589
-    * sensor *tmp242 :depositItems:block @x
-    * sensor *tmp243 :depositItems:block @y
+  854 sensor *tmp242 .thoriumGenerator @x
+  855 sensor *tmp243 .thoriumGenerator @y
   856 label *label590
   857 label *label591
   858 write "Moving..." .display ".status3"
 
   868 label *label596
   869 label *label597
   870 label *label598
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  871 sensor :depositItems:cap .thoriumGenerator @itemCapacity
   872 label *label599
-    * ucontrol itemDrop :depositItems:block 30
+  873 ucontrol itemDrop .thoriumGenerator 30
   874 label *label600
   875 sensor *tmp248 @unit @firstItem
   876 op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 :depositItems:block :depositItems:item
+  877 sensor *tmp250 .thoriumGenerator @coal
   878 jump *label599 greaterThan *tmp249 *tmp250
   879 label *label601
   880 jump *label607 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   550 jump *label198 lessThan *tmp270 :mineOre:amount
   551 label *label200
   552 ucontrol unbind
-    * set :depositItems:block :mineOre:block
-    * set :depositItems:item :mineOre:ore
   553 label *label536
   554 label *label537
   555 write "Depositing..." .display ".status3"
 
   676 op land *tmp285 *tmp283 *tmp284
   677 jump *label214 notEqual *tmp285 false
   678 label *label216
-    * set :depositItems:block .core
-    * set :depositItems:item :fetchBlock:item
   679 label *label561
   680 label *label562
   681 write "Depositing..." .display ".status3"
 
   838 op land *tmp301 *tmp299 *tmp300
   839 jump *label459 notEqual *tmp301 false
   840 label *label463
-    * set :depositItems:block .thoriumGenerator
-    * set :depositItems:item @coal
   841 label *label586
   842 label *label587
   843 write "Depositing..." .display ".status3"

Modifications by Inline function call at CoreBuilder.mnd:194:5 (+6 instructions):
 
   903 write "Phase 1: supplying base" .display ".status1"
   904 label *label402
   905 set :mineOre.1:ore @coal
-    * setaddr :mineOre.1*retaddr *label248 (h:*label248)
-    * call *label22 *invalid :mineOre.1*retval (m:*label248) (h:*label248)
-    * label *label248
+  906 label *label611
+  907 label *label612
+  908 write "Mining " .display ".status2"
+  909 write :mineOre.1:ore .display ".item2"
+  910 write "core" .display ".block2"
+  911 label *label613
+  912 set :mineOre:ore :mineOre.1:ore
+  913 set :mineOre:amount 30
+  914 set :mineOre:block .core
+  915 setaddr :mineOre*retaddr *label614 (h:*label614)
+  916 call *label21 *invalid :mineOre*retval (m:*label614) (h:*label614)
+  917 label *label614
+  918 label *label615
   919 label *label246
   920 jump *label245 always
   921 label *label244

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   906 label *label611
   907 label *label612
   908 write "Mining " .display ".status2"
-    * write :mineOre.1:ore .display ".item2"
+  909 write @coal .display ".item2"
   910 write "core" .display ".block2"
   911 label *label613
-    * set :mineOre:ore :mineOre.1:ore
+  912 set :mineOre:ore @coal
   913 set :mineOre:amount 30
   914 set :mineOre:block .core
   915 setaddr :mineOre*retaddr *label614 (h:*label614)

Modifications by Inline function 'fetchBlock' defined at Actions.mnd:133:1 (+52 instructions):
 
   618 label *label206
   619 return :mineOre.1*retaddr
   620 end
-    * label *label23
-    * sensor *tmp273 :fetchBlock:block @itemCapacity
-    * op min :transportStatus:target *tmp273 30
-    * label *label473
-    * write :transportStatus:target .display ".transportTarget"
-    * write :fetchBlock:item .display ".transportItem"
-    * label *label474
-    * label *label477
-    * write "Fetching " .display ".status2"
-    * write :fetchBlock:item .display ".item2"
-    * write :fetchBlock:block .display ".block2"
-    * label *label478
-    * sensor *tmp275 :fetchBlock:block @x
-    * sensor *tmp276 :fetchBlock:block @y
-    * label *label518
-    * label *label519
-    * write "Moving..." .display ".status3"
-    * label *label520
-    * label *label521
-    * sensor *tmp235 @unit @firstItem
-    * jump *label522 equal *tmp235 null
-    * ucontrol itemDrop @air 1000
-    * label *label522
-    * label *label523
-    * ucontrol approach *tmp275 *tmp276 5.5
-    * label *label524
-    * ucontrol within *tmp275 *tmp276 6 *tmp238
-    * jump *label521 equal *tmp238 false
-    * label *label525
-    * label *label526
-    * label *label497
-    * label *label498
-    * sensor *tmp240 @unit @firstItem
-    * jump *label501 equal *tmp240 null
-    * label *label499
-    * ucontrol itemDrop @air 1000
-    * label *label500
-    * sensor *tmp240 @unit @firstItem
-    * jump *label499 notEqual *tmp240 null
-    * label *label501
-    * label *label502
-    * label *label214
-    * ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor :fetchBlock:unitItem @unit @firstItem
-    * op notEqual *tmp278 :fetchBlock:unitItem null
-    * op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
-    * op land *tmp280 *tmp278 *tmp279
-    * jump *label217 equal *tmp280 false
-    * ucontrol itemDrop @air 1000
-    * label *label217
-    * label *label218
-    * label *label215
-    * sensor *tmp282 @unit :fetchBlock:item
-    * op lessThan *tmp283 *tmp282 30
-    * sensor *tmp284 :fetchBlock:block :fetchBlock:item
-    * op land *tmp285 *tmp283 *tmp284
-    * jump *label214 notEqual *tmp285 false
-    * label *label216
-    * label *label561
-    * label *label562
-    * write "Depositing..." .display ".status3"
-    * label *label563
-    * sensor *tmp244 @unit @firstItem
-    * jump *label577 notEqual *tmp244 :fetchBlock:item
-    * label *label564
-    * sensor *tmp242 .core @x
-    * sensor *tmp243 .core @y
-    * label *label565
-    * label *label566
-    * write "Moving..." .display ".status3"
-    * label *label567
-    * label *label568
-    * ucontrol within *tmp242 *tmp243 6 *tmp230
-    * jump *label571 notEqual *tmp230 false
-    * label *label569
-    * ucontrol approach *tmp242 *tmp243 5.5
-    * label *label570
-    * ucontrol within *tmp242 *tmp243 6 *tmp230
-    * jump *label569 equal *tmp230 false
-    * label *label571
-    * label *label572
-    * label *label573
-    * sensor :depositItems:cap .core @itemCapacity
-    * label *label574
-    * ucontrol itemDrop .core 30
-    * label *label575
-    * sensor *tmp248 @unit @firstItem
-    * op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 .core :fetchBlock:item
-    * jump *label574 greaterThan *tmp249 *tmp250
-    * label *label576
-    * jump *label582 always
-    * label *label577
-    * label *label578
-    * sensor *tmp252 @unit @firstItem
-    * jump *label581 equal *tmp252 null
-    * label *label579
-    * ucontrol itemDrop @air 1000
-    * label *label580
-    * sensor *tmp252 @unit @firstItem
-    * jump *label579 notEqual *tmp252 null
-    * label *label581
-    * label *label582
-    * label *label583
-    * write 0 .display ".transportTarget"
-    * write null .display ".transportItem"
-    * label *label584
-    * label *label585
-    * label *label209
-    * return :fetchBlock*retaddr
-    * end
   621 label *label24
   622 label *label481
   623 write "Supplying " .display ".status2"
 
   780 label *label465
   781 set :fetchBlock:block .thoriumContainer
   782 set :fetchBlock:item @thorium
-    * setaddr :fetchBlock*retaddr *label243 (h:*label243)
-    * call *label23 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
-    * label *label243
+  783 label *label616
+  784 sensor *tmp273 :fetchBlock:block @itemCapacity
+  785 op min :transportStatus:target *tmp273 30
+  786 label *label617
+  787 write :transportStatus:target .display ".transportTarget"
+  788 write :fetchBlock:item .display ".transportItem"
+  789 label *label618
+  790 label *label619
+  791 write "Fetching " .display ".status2"
+  792 write :fetchBlock:item .display ".item2"
+  793 write :fetchBlock:block .display ".block2"
+  794 label *label620
+  795 sensor *tmp275 :fetchBlock:block @x
+  796 sensor *tmp276 :fetchBlock:block @y
+  797 label *label621
+  798 label *label622
+  799 write "Moving..." .display ".status3"
+  800 label *label623
+  801 label *label624
+  802 sensor *tmp235 @unit @firstItem
+  803 jump *label625 equal *tmp235 null
+  804 ucontrol itemDrop @air 1000
+  805 label *label625
+  806 label *label626
+  807 ucontrol approach *tmp275 *tmp276 5.5
+  808 label *label627
+  809 ucontrol within *tmp275 *tmp276 6 *tmp238
+  810 jump *label624 equal *tmp238 false
+  811 label *label628
+  812 label *label629
+  813 label *label630
+  814 label *label631
+  815 sensor *tmp240 @unit @firstItem
+  816 jump *label634 equal *tmp240 null
+  817 label *label632
+  818 ucontrol itemDrop @air 1000
+  819 label *label633
+  820 sensor *tmp240 @unit @firstItem
+  821 jump *label632 notEqual *tmp240 null
+  822 label *label634
+  823 label *label635
+  824 label *label636
+  825 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
+  826 sensor :fetchBlock:unitItem @unit @firstItem
+  827 op notEqual *tmp278 :fetchBlock:unitItem null
+  828 op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
+  829 op land *tmp280 *tmp278 *tmp279
+  830 jump *label637 equal *tmp280 false
+  831 ucontrol itemDrop @air 1000
+  832 label *label637
+  833 label *label638
+  834 label *label639
+  835 sensor *tmp282 @unit :fetchBlock:item
+  836 op lessThan *tmp283 *tmp282 30
+  837 sensor *tmp284 :fetchBlock:block :fetchBlock:item
+  838 op land *tmp285 *tmp283 *tmp284
+  839 jump *label636 notEqual *tmp285 false
+  840 label *label640
+  841 label *label641
+  842 label *label642
+  843 write "Depositing..." .display ".status3"
+  844 label *label643
+  845 sensor *tmp244 @unit @firstItem
+  846 jump *label657 notEqual *tmp244 :fetchBlock:item
+  847 label *label644
+  848 sensor *tmp242 .core @x
+  849 sensor *tmp243 .core @y
+  850 label *label645
+  851 label *label646
+  852 write "Moving..." .display ".status3"
+  853 label *label647
+  854 label *label648
+  855 ucontrol within *tmp242 *tmp243 6 *tmp230
+  856 jump *label651 notEqual *tmp230 false
+  857 label *label649
+  858 ucontrol approach *tmp242 *tmp243 5.5
+  859 label *label650
+  860 ucontrol within *tmp242 *tmp243 6 *tmp230
+  861 jump *label649 equal *tmp230 false
+  862 label *label651
+  863 label *label652
+  864 label *label653
+  865 sensor :depositItems:cap .core @itemCapacity
+  866 label *label654
+  867 ucontrol itemDrop .core 30
+  868 label *label655
+  869 sensor *tmp248 @unit @firstItem
+  870 op mul *tmp249 *tmp248 :depositItems:cap
+  871 sensor *tmp250 .core :fetchBlock:item
+  872 jump *label654 greaterThan *tmp249 *tmp250
+  873 label *label656
+  874 jump *label662 always
+  875 label *label657
+  876 label *label658
+  877 sensor *tmp252 @unit @firstItem
+  878 jump *label661 equal *tmp252 null
+  879 label *label659
+  880 ucontrol itemDrop @air 1000
+  881 label *label660
+  882 sensor *tmp252 @unit @firstItem
+  883 jump *label659 notEqual *tmp252 null
+  884 label *label661
+  885 label *label662
+  886 label *label663
+  887 write 0 .display ".transportTarget"
+  888 write null .display ".transportItem"
+  889 label *label664
+  890 label *label665
+  891 label *label666
   892 label *label240
   893 jump *label239 always
   894 label *label238
 
  1083 label *label424
  1084 set :fetchBlock:block .titaniumDrill
  1085 set :fetchBlock:item @titanium
-    * setaddr :fetchBlock*retaddr *label307 (h:*label307)
-    * call *label23 *invalid :fetchBlock*retval (m:*label307) (h:*label307)
-    * label *label307
+ 1086 label *label667
+ 1087 sensor *tmp273 :fetchBlock:block @itemCapacity
+ 1088 op min :transportStatus:target *tmp273 30
+ 1089 label *label668
+ 1090 write :transportStatus:target .display ".transportTarget"
+ 1091 write :fetchBlock:item .display ".transportItem"
+ 1092 label *label669
+ 1093 label *label670
+ 1094 write "Fetching " .display ".status2"
+ 1095 write :fetchBlock:item .display ".item2"
+ 1096 write :fetchBlock:block .display ".block2"
+ 1097 label *label671
+ 1098 sensor *tmp275 :fetchBlock:block @x
+ 1099 sensor *tmp276 :fetchBlock:block @y
+ 1100 label *label672
+ 1101 label *label673
+ 1102 write "Moving..." .display ".status3"
+ 1103 label *label674
+ 1104 label *label675
+ 1105 sensor *tmp235 @unit @firstItem
+ 1106 jump *label676 equal *tmp235 null
+ 1107 ucontrol itemDrop @air 1000
+ 1108 label *label676
+ 1109 label *label677
+ 1110 ucontrol approach *tmp275 *tmp276 5.5
+ 1111 label *label678
+ 1112 ucontrol within *tmp275 *tmp276 6 *tmp238
+ 1113 jump *label675 equal *tmp238 false
+ 1114 label *label679
+ 1115 label *label680
+ 1116 label *label681
+ 1117 label *label682
+ 1118 sensor *tmp240 @unit @firstItem
+ 1119 jump *label685 equal *tmp240 null
+ 1120 label *label683
+ 1121 ucontrol itemDrop @air 1000
+ 1122 label *label684
+ 1123 sensor *tmp240 @unit @firstItem
+ 1124 jump *label683 notEqual *tmp240 null
+ 1125 label *label685
+ 1126 label *label686
+ 1127 label *label687
+ 1128 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
+ 1129 sensor :fetchBlock:unitItem @unit @firstItem
+ 1130 op notEqual *tmp278 :fetchBlock:unitItem null
+ 1131 op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
+ 1132 op land *tmp280 *tmp278 *tmp279
+ 1133 jump *label688 equal *tmp280 false
+ 1134 ucontrol itemDrop @air 1000
+ 1135 label *label688
+ 1136 label *label689
+ 1137 label *label690
+ 1138 sensor *tmp282 @unit :fetchBlock:item
+ 1139 op lessThan *tmp283 *tmp282 30
+ 1140 sensor *tmp284 :fetchBlock:block :fetchBlock:item
+ 1141 op land *tmp285 *tmp283 *tmp284
+ 1142 jump *label687 notEqual *tmp285 false
+ 1143 label *label691
+ 1144 label *label692
+ 1145 label *label693
+ 1146 write "Depositing..." .display ".status3"
+ 1147 label *label694
+ 1148 sensor *tmp244 @unit @firstItem
+ 1149 jump *label708 notEqual *tmp244 :fetchBlock:item
+ 1150 label *label695
+ 1151 sensor *tmp242 .core @x
+ 1152 sensor *tmp243 .core @y
+ 1153 label *label696
+ 1154 label *label697
+ 1155 write "Moving..." .display ".status3"
+ 1156 label *label698
+ 1157 label *label699
+ 1158 ucontrol within *tmp242 *tmp243 6 *tmp230
+ 1159 jump *label702 notEqual *tmp230 false
+ 1160 label *label700
+ 1161 ucontrol approach *tmp242 *tmp243 5.5
+ 1162 label *label701
+ 1163 ucontrol within *tmp242 *tmp243 6 *tmp230
+ 1164 jump *label700 equal *tmp230 false
+ 1165 label *label702
+ 1166 label *label703
+ 1167 label *label704
+ 1168 sensor :depositItems:cap .core @itemCapacity
+ 1169 label *label705
+ 1170 ucontrol itemDrop .core 30
+ 1171 label *label706
+ 1172 sensor *tmp248 @unit @firstItem
+ 1173 op mul *tmp249 *tmp248 :depositItems:cap
+ 1174 sensor *tmp250 .core :fetchBlock:item
+ 1175 jump *label705 greaterThan *tmp249 *tmp250
+ 1176 label *label707
+ 1177 jump *label713 always
+ 1178 label *label708
+ 1179 label *label709
+ 1180 sensor *tmp252 @unit @firstItem
+ 1181 jump *label712 equal *tmp252 null
+ 1182 label *label710
+ 1183 ucontrol itemDrop @air 1000
+ 1184 label *label711
+ 1185 sensor *tmp252 @unit @firstItem
+ 1186 jump *label710 notEqual *tmp252 null
+ 1187 label *label712
+ 1188 label *label713
+ 1189 label *label714
+ 1190 write 0 .display ".transportTarget"
+ 1191 write null .display ".transportItem"
+ 1192 label *label715
+ 1193 label *label716
+ 1194 label *label717
  1195 label *label277
  1196 label *label249
  1197 label *label245

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   781 set :fetchBlock:block .thoriumContainer
   782 set :fetchBlock:item @thorium
   783 label *label616
-    * sensor *tmp273 :fetchBlock:block @itemCapacity
+  784 sensor *tmp273 .thoriumContainer @itemCapacity
   785 op min :transportStatus:target *tmp273 30
   786 label *label617
   787 write :transportStatus:target .display ".transportTarget"
-    * write :fetchBlock:item .display ".transportItem"
+  788 write @thorium .display ".transportItem"
   789 label *label618
   790 label *label619
   791 write "Fetching " .display ".status2"
-    * write :fetchBlock:item .display ".item2"
-    * write :fetchBlock:block .display ".block2"
+  792 write @thorium .display ".item2"
+  793 write .thoriumContainer .display ".block2"
   794 label *label620
-    * sensor *tmp275 :fetchBlock:block @x
-    * sensor *tmp276 :fetchBlock:block @y
+  795 sensor *tmp275 .thoriumContainer @x
+  796 sensor *tmp276 .thoriumContainer @y
   797 label *label621
   798 label *label622
   799 write "Moving..." .display ".status3"
 
   822 label *label634
   823 label *label635
   824 label *label636
-    * ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
+  825 ucontrol itemTake .thoriumContainer @thorium 30
   826 sensor :fetchBlock:unitItem @unit @firstItem
   827 op notEqual *tmp278 :fetchBlock:unitItem null
-    * op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
+  828 op notEqual *tmp279 :fetchBlock:unitItem @thorium
   829 op land *tmp280 *tmp278 *tmp279
   830 jump *label637 equal *tmp280 false
   831 ucontrol itemDrop @air 1000
   832 label *label637
   833 label *label638
   834 label *label639
-    * sensor *tmp282 @unit :fetchBlock:item
+  835 sensor *tmp282 @unit @thorium
   836 op lessThan *tmp283 *tmp282 30
-    * sensor *tmp284 :fetchBlock:block :fetchBlock:item
+  837 sensor *tmp284 .thoriumContainer @thorium
   838 op land *tmp285 *tmp283 *tmp284
   839 jump *label636 notEqual *tmp285 false
   840 label *label640
 
   843 write "Depositing..." .display ".status3"
   844 label *label643
   845 sensor *tmp244 @unit @firstItem
-    * jump *label657 notEqual *tmp244 :fetchBlock:item
+  846 jump *label657 notEqual *tmp244 @thorium
   847 label *label644
   848 sensor *tmp242 .core @x
   849 sensor *tmp243 .core @y
 
   868 label *label655
   869 sensor *tmp248 @unit @firstItem
   870 op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 .core :fetchBlock:item
+  871 sensor *tmp250 .core @thorium
   872 jump *label654 greaterThan *tmp249 *tmp250
   873 label *label656
   874 jump *label662 always
 
  1084 set :fetchBlock:block .titaniumDrill
  1085 set :fetchBlock:item @titanium
  1086 label *label667
-    * sensor *tmp273 :fetchBlock:block @itemCapacity
+ 1087 sensor *tmp273 .titaniumDrill @itemCapacity
  1088 op min :transportStatus:target *tmp273 30
  1089 label *label668
  1090 write :transportStatus:target .display ".transportTarget"
-    * write :fetchBlock:item .display ".transportItem"
+ 1091 write @titanium .display ".transportItem"
  1092 label *label669
  1093 label *label670
  1094 write "Fetching " .display ".status2"
-    * write :fetchBlock:item .display ".item2"
-    * write :fetchBlock:block .display ".block2"
+ 1095 write @titanium .display ".item2"
+ 1096 write .titaniumDrill .display ".block2"
  1097 label *label671
-    * sensor *tmp275 :fetchBlock:block @x
-    * sensor *tmp276 :fetchBlock:block @y
+ 1098 sensor *tmp275 .titaniumDrill @x
+ 1099 sensor *tmp276 .titaniumDrill @y
  1100 label *label672
  1101 label *label673
  1102 write "Moving..." .display ".status3"
 
  1125 label *label685
  1126 label *label686
  1127 label *label687
-    * ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
+ 1128 ucontrol itemTake .titaniumDrill @titanium 30
  1129 sensor :fetchBlock:unitItem @unit @firstItem
  1130 op notEqual *tmp278 :fetchBlock:unitItem null
-    * op notEqual *tmp279 :fetchBlock:unitItem :fetchBlock:item
+ 1131 op notEqual *tmp279 :fetchBlock:unitItem @titanium
  1132 op land *tmp280 *tmp278 *tmp279
  1133 jump *label688 equal *tmp280 false
  1134 ucontrol itemDrop @air 1000
  1135 label *label688
  1136 label *label689
  1137 label *label690
-    * sensor *tmp282 @unit :fetchBlock:item
+ 1138 sensor *tmp282 @unit @titanium
  1139 op lessThan *tmp283 *tmp282 30
-    * sensor *tmp284 :fetchBlock:block :fetchBlock:item
+ 1140 sensor *tmp284 .titaniumDrill @titanium
  1141 op land *tmp285 *tmp283 *tmp284
  1142 jump *label687 notEqual *tmp285 false
  1143 label *label691
 
  1146 write "Depositing..." .display ".status3"
  1147 label *label694
  1148 sensor *tmp244 @unit @firstItem
-    * jump *label708 notEqual *tmp244 :fetchBlock:item
+ 1149 jump *label708 notEqual *tmp244 @titanium
  1150 label *label695
  1151 sensor *tmp242 .core @x
  1152 sensor *tmp243 .core @y
 
  1171 label *label706
  1172 sensor *tmp248 @unit @firstItem
  1173 op mul *tmp249 *tmp248 :depositItems:cap
-    * sensor *tmp250 .core :fetchBlock:item
+ 1174 sensor *tmp250 .core @titanium
  1175 jump *label705 greaterThan *tmp249 *tmp250
  1176 label *label707
  1177 jump *label713 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   778 label *label609
   779 label *label610
   780 label *label465
-    * set :fetchBlock:block .thoriumContainer
-    * set :fetchBlock:item @thorium
   781 label *label616
   782 sensor *tmp273 .thoriumContainer @itemCapacity
   783 op min :transportStatus:target *tmp273 30
 
  1079 label *label423
  1080 write "Goal 11: Fetching titanium" .display ".status1"
  1081 label *label424
-    * set :fetchBlock:block .titaniumDrill
-    * set :fetchBlock:item @titanium
  1082 label *label667
  1083 sensor *tmp273 .titaniumDrill @itemCapacity
  1084 op min :transportStatus:target *tmp273 30

Modifications by Replicate loop condition at CoreBuilder.mnd:493:5 (+1 instructions):
 
   247 label *label93
   248 read *tmp98 .controller ".polys"
   249 jump *label95 greaterThanEq *tmp98 3
+  250 label *label718
   251 setaddr :supplyBase*retaddr *label96 (h:*label96)
   252 call *label32 *invalid :supplyBase*retval (m:*label96) (h:*label96)
   253 label *label96
   254 label *label94
-    * jump *label93 always
+  255 read *tmp98 .controller ".polys"
+  256 jump *label718 lessThan *tmp98 3
   257 label *label95
   258 write 3 .controller ".flareTarget"
   259 write 3 processor1 ".flareTarget"

Modifications by Replicate loop condition at CoreBuilder.mnd:498:5 (+1 instructions):
 
   261 label *label98
   262 read *tmp96 .controller ".flares"
   263 jump *label100 greaterThanEq *tmp96 2
+  264 label *label719
   265 setaddr :supplyBase*retaddr *label101 (h:*label101)
   266 call *label32 *invalid :supplyBase*retval (m:*label101) (h:*label101)
   267 label *label101
   268 label *label99
-    * jump *label98 always
+  269 read *tmp96 .controller ".flares"
+  270 jump *label719 lessThan *tmp96 2
   271 label *label100
   272 write 5 .controller ".monoTarget"
   273 write 5 processor1 ".monoTarget"

Modifications by Replicate loop condition at CoreBuilder.mnd:516:5 (+1 instructions):
 
   402 label *label124
   403 read *tmp98 .controller ".polys"
   404 jump *label126 greaterThanEq *tmp98 5
+  405 label *label720
   406 setaddr :supplyBase*retaddr *label127 (h:*label127)
   407 call *label32 *invalid :supplyBase*retval (m:*label127) (h:*label127)
   408 label *label127
   409 label *label125
-    * jump *label124 always
+  410 read *tmp98 .controller ".polys"
+  411 jump *label720 lessThan *tmp98 5
   412 label *label126
   413 set :buildBlockFromCfg:cfg "+(###A<###"
   414 set :buildBlockFromCfg:config @silicon

Modifications by Replicate loop condition at CoreBuilder.mnd:526:5 (+1 instructions):
 
   433 label *label133
   434 read *tmp99 .controller ".megas"
   435 jump *label135 greaterThanEq *tmp99 1
+  436 label *label721
   437 setaddr :supplyBase*retaddr *label136 (h:*label136)
   438 call *label32 *invalid :supplyBase*retval (m:*label136) (h:*label136)
   439 label *label136
   440 label *label134
-    * jump *label133 always
+  441 read *tmp99 .controller ".megas"
+  442 jump *label721 lessThan *tmp99 1
   443 label *label135
   444 control enabled processor7 false
   445 control enabled processor8 false

Modifications by Inline function call at CoreBuilder.mnd:566:9 (+5 instructions):
 
   465 label *label142
   466 op sub :lineUpUnits:y @thisy 6
   467 set :lineUpUnits:unit @mega
-    * setaddr :lineUpUnits*retaddr *label145 (h:*label145)
-    * call *label42 *invalid :lineUpUnits*retval (m:*label145) (h:*label145)
-    * label *label145
+  468 label *label722
+  469 ubind :lineUpUnits:unit
+  470 set :lineUpUnits:firstUnit @unit
+  471 label *label723
+  472 sensor :lineUpUnits:x @unit @flag
+  473 ucontrol itemDrop @air 1000
+  474 ucontrol move :lineUpUnits:x :lineUpUnits:y
+  475 ubind :lineUpUnits:unit
+  476 label *label724
+  477 jump *label723 notEqual @unit :lineUpUnits:firstUnit
+  478 label *label725
+  479 label *label726
   480 op sub :lineUpUnits:y @thisy 10
   481 set :lineUpUnits:unit @poly
   482 setaddr :lineUpUnits*retaddr *label146 (h:*label146)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   466 op sub :lineUpUnits:y @thisy 6
   467 set :lineUpUnits:unit @mega
   468 label *label722
-    * ubind :lineUpUnits:unit
+  469 ubind @mega
   470 set :lineUpUnits:firstUnit @unit
   471 label *label723
   472 sensor :lineUpUnits:x @unit @flag
   473 ucontrol itemDrop @air 1000
   474 ucontrol move :lineUpUnits:x :lineUpUnits:y
-    * ubind :lineUpUnits:unit
+  475 ubind @mega
   476 label *label724
   477 jump *label723 notEqual @unit :lineUpUnits:firstUnit
   478 label *label725

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
   464 label *label141
   465 label *label142
   466 op sub :lineUpUnits:y @thisy 6
-    * set :lineUpUnits:unit @mega
   467 label *label722
   468 ubind @mega
   469 set :lineUpUnits:firstUnit @unit

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-6 instructions):
 
    87 read *tmp146 processor5 ":buildFirstTitaniumDrillAt*finished"
    88 jump *label58 equal *tmp146 false
    89 read *tmp129 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label52 always
    90 label *label52
    91 set .titaniumDrill *tmp129
    92 write *tmp129 processor1 ".titaniumDrill"
 
  1002 sensor *tmp367 .core @titanium
  1003 op sub *tmp368 .targetTitanium *tmp367
  1004 op min *tmp366 7 *tmp368
-    * jump *label275 always
  1005 label *label275
  1006 sensor *tmp370 .titaniumDrill @titanium
  1007 jump *label276 greaterThanEq *tmp370 *tmp366
 
  1028 set :mineOre.1:ore @sand
  1029 jump *label288 greaterThanEq :supplyBase0:coal :supplyBase0:sand
  1030 set :mineOre.1:ore @coal
-    * jump *label288 always
  1031 label *label288
  1032 setaddr :mineOre.1*retaddr *label289 (h:*label289)
  1033 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
 
  1075 set :mineOre.1:ore @sand
  1076 jump *label304 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
  1077 set :mineOre.1:ore @coal
-    * jump *label304 always
  1078 label *label304
  1079 setaddr :mineOre.1*retaddr *label305 (h:*label305)
  1080 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
 
  1349 read *tmp456 .blockBuilder ":buildBlockAt*finished"
  1350 jump *label343 equal *tmp456 false
  1351 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * jump *label341 always
  1352 label *label341
  1353 return :buildBlock*retaddr
  1354 end
 
  1406 call *label34 *invalid :buildBlock*retval (m:*label351) (h:*label351)
  1407 label *label351
  1408 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label349 always
  1409 label *label349
  1410 return :buildBlockFromCfg*retaddr
  1411 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
  1210 label *label33
  1211 label *label370
  1212 op sign *tmp400 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp400
+ 1213 set :meetTarget:count *tmp400
  1214 label *label371
  1215 label *label374
  1216 op sign *tmp400 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1209 end
  1210 label *label33
  1211 label *label370
-    * op sign *tmp400 :meetTarget:copper
-    * set :meetTarget:count *tmp400
+ 1212 op sign :meetTarget:count :meetTarget:copper
  1213 label *label371
  1214 label *label374
  1215 op sign *tmp400 :meetTarget:lead

Modifications by Inline function call at CoreBuilder.mnd:162:17 (+6 instructions):
 
  1013 write "Goal 5: supplying generator" .display ".status1"
  1014 label *label412
  1015 set :mineOre.1:ore @coal
-    * setaddr :mineOre.1*retaddr *label283 (h:*label283)
-    * call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
-    * label *label283
+ 1016 label *label727
+ 1017 label *label728
+ 1018 write "Mining " .display ".status2"
+ 1019 write :mineOre.1:ore .display ".item2"
+ 1020 write "core" .display ".block2"
+ 1021 label *label729
+ 1022 set :mineOre:ore :mineOre.1:ore
+ 1023 set :mineOre:amount 30
+ 1024 set :mineOre:block .core
+ 1025 setaddr :mineOre*retaddr *label730 (h:*label730)
+ 1026 call *label21 *invalid :mineOre*retval (m:*label730) (h:*label730)
+ 1027 label *label730
+ 1028 label *label731
  1029 jump *label281 always
  1030 label *label280
  1031 sensor *tmp379 .core @silicon

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
  1016 label *label727
  1017 label *label728
  1018 write "Mining " .display ".status2"
-    * write :mineOre.1:ore .display ".item2"
+ 1019 write @coal .display ".item2"
  1020 write "core" .display ".block2"
  1021 label *label729
-    * set :mineOre:ore :mineOre.1:ore
+ 1022 set :mineOre:ore @coal
  1023 set :mineOre:amount 30
  1024 set :mineOre:block .core
  1025 setaddr :mineOre*retaddr *label730 (h:*label730)

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    17 ubind @poly
    18 set .builder @unit
    19 ulocate building core false @copper .coreX .coreY 0 .core
-    * label *label44
    20 jump *label43 equal .core null
-    * label *label45
    21 set :buildBlockFromCfg.1:cfg "#'+nA######"
    22 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
    23 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label46) (h:*label46)
 
    69 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
    70 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    71 jump *label55 notEqual :buildFirstTitaniumDrill:result false
-    * label *label485
    72 set .ERROR "Cannot locate spot for titanium drill"
    73 stop
-    * label *label486
    74 label *label55
-    * label *label56
    75 write @pneumatic-drill processor1 ".nextBlock"
    76 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    77 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    82 read *tmp146 processor5 ":buildFirstTitaniumDrillAt*finished"
    83 jump *label58 equal *tmp146 false
    84 read *tmp129 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label52
    85 set .titaniumDrill *tmp129
    86 write *tmp129 processor1 ".titaniumDrill"
    87 set :buildBlockFromCfg.1:cfg "*,###A<###"
 
   130 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   131 write 1 .controller ".flareTarget"
   132 write 1 processor1 ".flareTarget"
-    * label *label66
   133 write 3 .controller ".monoTarget"
   134 write 3 processor1 ".monoTarget"
-    * label *label67
   135 write 85 .controller ".pressTarget"
   136 write 150 .controller ".smelterTarget"
   137 write 30 .controller ".kilnTarget"
 
   148 jump *label73 greaterThanEq *tmp155 300
   149 jump *label71 always
   150 label *label73
-    * label *label74
-    * label *label70
   151 read *tmp97 .controller ".monos"
   152 jump *label69 lessThan *tmp97 3
   153 label *label71
 
   219 set .metaglassSurplus 200
   220 write 6 .controller ".polyTarget"
   221 write 6 processor1 ".polyTarget"
-    * label *label89
   222 set :buildBlockFromCfg.1:cfg "%-)A<######"
   223 setaddr :buildBlockFromCfg.1*retaddr *label90 (h:*label90)
   224 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label90) (h:*label90)
 
   232 setaddr :buildUnits*retaddr *label92 (h:*label92)
   233 call *label40 *invalid :buildUnits*retval (m:*label92) (h:*label92)
   234 label *label92
-    * label *label93
   235 read *tmp98 .controller ".polys"
   236 jump *label95 greaterThanEq *tmp98 3
   237 label *label718
   238 setaddr :supplyBase*retaddr *label96 (h:*label96)
   239 call *label32 *invalid :supplyBase*retval (m:*label96) (h:*label96)
   240 label *label96
-    * label *label94
   241 read *tmp98 .controller ".polys"
   242 jump *label718 lessThan *tmp98 3
   243 label *label95
   244 write 3 .controller ".flareTarget"
   245 write 3 processor1 ".flareTarget"
-    * label *label97
-    * label *label98
   246 read *tmp96 .controller ".flares"
   247 jump *label100 greaterThanEq *tmp96 2
   248 label *label719
   249 setaddr :supplyBase*retaddr *label101 (h:*label101)
   250 call *label32 *invalid :supplyBase*retval (m:*label101) (h:*label101)
   251 label *label101
-    * label *label99
   252 read *tmp96 .controller ".flares"
   253 jump *label719 lessThan *tmp96 2
   254 label *label100
   255 write 5 .controller ".monoTarget"
   256 write 5 processor1 ".monoTarget"
-    * label *label102
   257 write @ore-titanium processor1 ".nextBlock"
   258 wait 0.000000001
   259 ubind @flare
 
   278 jump *label104 equal *tmp188 false
   279 write false processor4 ":stopLocation*finished"
   280 write 3 processor4 "@counter"
-    * label *label103
   281 write null processor1 ".nextBlock"
   282 write .coreX processor4 ":layoutThoriumDrill:x"
   283 write .coreY processor4 ":layoutThoriumDrill:y"
 
   299 jump *label108 equal *tmp195 false
   300 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   301 jump *label109 notEqual :buildThoriumDrill:result false
-    * label *label487
   302 set .ERROR "Cannot locate spot for thorium drill"
   303 stop
-    * label *label488
   304 label *label109
-    * label *label110
   305 write @laser-drill processor5 ":buildBlockAt:block"
   306 read *tmp54 processor4 ".drillX"
   307 write *tmp54 processor5 ":buildBlockAt:x"
 
   362 jump *label120 notEqual :buildRemoteBlock*retval null
   363 set .thoriumContainer .thoriumDrill
   364 label *label120
-    * label *label121
   365 write .thoriumDrill processor1 ".thoriumDrill"
   366 write .thoriumContainer processor1 ".thoriumContainer"
   367 write .thoriumContainer processor3 ":setThoriumContainer:container"
 
   371 wait 1e-15
   372 read *tmp216 processor3 ":setThoriumContainer*finished"
   373 jump *label122 equal *tmp216 false
-    * label *label105
   374 write null processor1 ".nextBlock"
   375 write 1 .controller ".megaTarget"
   376 write 1 processor1 ".megaTarget"
-    * label *label123
-    * label *label124
   377 read *tmp98 .controller ".polys"
   378 jump *label126 greaterThanEq *tmp98 5
   379 label *label720
   380 setaddr :supplyBase*retaddr *label127 (h:*label127)
   381 call *label32 *invalid :supplyBase*retval (m:*label127) (h:*label127)
   382 label *label127
-    * label *label125
   383 read *tmp98 .controller ".polys"
   384 jump *label720 lessThan *tmp98 5
   385 label *label126
 
   399 label *label131
   400 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   401 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
-    * label *label130
   402 setaddr :buildUnits*retaddr *label132 (h:*label132)
   403 call *label40 *invalid :buildUnits*retval (m:*label132) (h:*label132)
   404 label *label132
-    * label *label133
   405 read *tmp99 .controller ".megas"
   406 jump *label135 greaterThanEq *tmp99 1
   407 label *label721
   408 setaddr :supplyBase*retaddr *label136 (h:*label136)
   409 call *label32 *invalid :supplyBase*retval (m:*label136) (h:*label136)
   410 label *label136
-    * label *label134
   411 read *tmp99 .controller ".megas"
   412 jump *label721 lessThan *tmp99 1
   413 label *label135
 
   434 label *label141
   435 label *label142
   436 op sub :lineUpUnits:y @thisy 6
-    * label *label722
   437 ubind @mega
   438 set :lineUpUnits:firstUnit @unit
   439 label *label723
 
   441 ucontrol itemDrop @air 1000
   442 ucontrol move :lineUpUnits:x :lineUpUnits:y
   443 ubind @mega
-    * label *label724
   444 jump *label723 notEqual @unit :lineUpUnits:firstUnit
-    * label *label725
-    * label *label726
   445 op sub :lineUpUnits:y @thisy 10
   446 set :lineUpUnits:unit @poly
   447 setaddr :lineUpUnits*retaddr *label146 (h:*label146)
 
   457 setaddr :lineUpUnits*retaddr *label148 (h:*label148)
   458 call *label42 *invalid :lineUpUnits*retval (m:*label148) (h:*label148)
   459 label *label148
-    * label *label143
   460 jump *label142 always
-    * label *label144
-    * label *label137
   461 end
   462 label *label21
   463 op min :mineOre:amount :mineOre:amount 30
-    * label *label471
   464 write :mineOre:amount .display ".transportTarget"
   465 write :mineOre:ore .display ".transportItem"
-    * label *label472
-    * label *label449
   466 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp254 0
   467 jump *label451 notEqual *tmp254 false
-    * label *label489
   468 set .ERROR "Cannot locate ore"
   469 stop
-    * label *label490
   470 label *label451
-    * label *label452
-    * label *label453
-    * label *label509
-    * label *label510
   471 write "Moving..." .display ".status3"
-    * label *label511
   472 label *label512
   473 sensor *tmp235 @unit @firstItem
   474 jump *label513 equal *tmp235 null
   475 ucontrol itemDrop @air 1000
   476 label *label513
-    * label *label514
   477 ucontrol approach :locateOre:x :locateOre:y 5.5
-    * label *label515
   478 ucontrol within :locateOre:x :locateOre:y 6 *tmp238
   479 jump *label512 equal *tmp238 false
-    * label *label516
-    * label *label517
   480 sensor *tmp259 @unit @firstItem
   481 jump *label194 equal *tmp259 :mineOre:ore
-    * label *label491
-    * label *label492
   482 sensor *tmp240 @unit @firstItem
   483 jump *label495 equal *tmp240 null
   484 label *label493
   485 ucontrol itemDrop @air 1000
-    * label *label494
   486 sensor *tmp240 @unit @firstItem
   487 jump *label493 notEqual *tmp240 null
   488 label *label495
-    * label *label496
   489 label *label194
-    * label *label195
-    * label *label431
   490 write "Mining..." .display ".status3"
-    * label *label432
   491 op add :mineOre:stop @second 10
   492 label *label198
   493 sensor :mineOre:item @unit @firstItem
 
   497 jump *label201 equal *tmp266 false
   498 jump *label200 always
   499 label *label201
-    * label *label202
   500 ucontrol mine :locateOre:x :locateOre:y
   501 jump *label203 lessThanEq @second :mineOre:stop
   502 jump *label200 always
   503 label *label203
-    * label *label204
-    * label *label199
   504 sensor *tmp270 @unit @totalItems
   505 jump *label198 lessThan *tmp270 :mineOre:amount
   506 label *label200
   507 ucontrol unbind
-    * label *label536
-    * label *label537
   508 write "Depositing..." .display ".status3"
-    * label *label538
   509 sensor *tmp244 @unit @firstItem
   510 jump *label552 notEqual *tmp244 :mineOre:ore
-    * label *label539
   511 sensor *tmp242 :mineOre:block @x
   512 sensor *tmp243 :mineOre:block @y
-    * label *label540
-    * label *label541
   513 write "Moving..." .display ".status3"
-    * label *label542
-    * label *label543
   514 ucontrol within *tmp242 *tmp243 6 *tmp230
   515 jump *label546 notEqual *tmp230 false
   516 label *label544
   517 ucontrol approach *tmp242 *tmp243 5.5
-    * label *label545
   518 ucontrol within *tmp242 *tmp243 6 *tmp230
   519 jump *label544 equal *tmp230 false
   520 label *label546
-    * label *label547
-    * label *label548
   521 sensor :depositItems:cap :mineOre:block @itemCapacity
   522 label *label549
   523 ucontrol itemDrop :mineOre:block 30
-    * label *label550
   524 sensor *tmp248 @unit @firstItem
   525 op mul *tmp249 *tmp248 :depositItems:cap
   526 sensor *tmp250 :mineOre:block :mineOre:ore
   527 jump *label549 greaterThan *tmp249 *tmp250
-    * label *label551
   528 jump *label557 always
   529 label *label552
-    * label *label553
   530 sensor *tmp252 @unit @firstItem
   531 jump *label556 equal *tmp252 null
   532 label *label554
   533 ucontrol itemDrop @air 1000
-    * label *label555
   534 sensor *tmp252 @unit @firstItem
   535 jump *label554 notEqual *tmp252 null
   536 label *label556
   537 label *label557
-    * label *label558
   538 write 0 .display ".transportTarget"
   539 write null .display ".transportItem"
-    * label *label559
-    * label *label560
-    * label *label190
   540 return :mineOre*retaddr
   541 end
   542 label *label22
-    * label *label479
   543 write "Mining " .display ".status2"
   544 write :mineOre.1:ore .display ".item2"
   545 write "core" .display ".block2"
-    * label *label480
   546 set :mineOre:ore :mineOre.1:ore
   547 set :mineOre:amount 30
   548 set :mineOre:block .core
   549 setaddr :mineOre*retaddr *label208 (h:*label208)
   550 call *label21 *invalid :mineOre*retval (m:*label208) (h:*label208)
   551 label *label208
-    * label *label206
   552 return :mineOre.1*retaddr
   553 end
   554 label *label24
-    * label *label481
   555 write "Supplying " .display ".status2"
   556 write :supplyBlock:ore .display ".item2"
   557 write :supplyBlock:block .display ".block2"
-    * label *label482
   558 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   559 sensor *tmp287 :supplyBlock:block :supplyBlock:ore
   560 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp287
 
   566 call *label21 *invalid :mineOre*retval (m:*label224) (h:*label224)
   567 label *label224
   568 label *label222
-    * label *label223
-    * label *label220
   569 return :supplyBlock*retaddr
   570 end
   571 label *label31
 
   592 op sub :unpackCfg:th *tmp333 35
   593 read *tmp336 :unpackCfg:cfg 10
   594 op sub :unpackCfg:rotation *tmp336 35
-    * label *label236
   595 return :unpackCfg*retaddr
   596 end
   597 label *label32
   598 jump *label238 equal .thoriumContainer false
-    * label *label399
   599 write "Phase 2: servicing thorium drill" .display ".status1"
-    * label *label400
-    * label *label454
   600 sensor *tmp291 .thoriumGenerator @itemCapacity
   601 op min :transportStatus:target *tmp291 30
-    * label *label475
   602 write :transportStatus:target .display ".transportTarget"
   603 write @coal .display ".transportItem"
-    * label *label476
-    * label *label483
   604 write "Transferring " .display ".status2"
   605 write @coal .display ".item2"
   606 write .thoriumGenerator .display ".block2"
-    * label *label484
-    * label *label527
-    * label *label528
   607 write "Moving..." .display ".status3"
-    * label *label529
   608 label *label530
   609 sensor *tmp235 @unit @firstItem
   610 jump *label531 equal *tmp235 null
   611 ucontrol itemDrop @air 1000
   612 label *label531
-    * label *label532
   613 ucontrol approach .coreX .coreY 5.5
-    * label *label533
   614 ucontrol within .coreX .coreY 6 *tmp238
   615 jump *label530 equal *tmp238 false
-    * label *label534
-    * label *label535
-    * label *label503
-    * label *label504
   616 sensor *tmp240 @unit @firstItem
   617 jump *label507 equal *tmp240 null
   618 label *label505
   619 ucontrol itemDrop @air 1000
-    * label *label506
   620 sensor *tmp240 @unit @firstItem
   621 jump *label505 notEqual *tmp240 null
   622 label *label507
-    * label *label508
   623 label *label459
   624 ucontrol itemTake .core @coal 30
   625 sensor :supplyBlockFromCore:unitItem @unit @firstItem
 
   629 jump *label460 equal *tmp296 false
   630 ucontrol itemDrop @air 1000
   631 label *label460
-    * label *label461
-    * label *label462
   632 sensor *tmp298 @unit @coal
   633 op lessThan *tmp299 *tmp298 30
   634 sensor *tmp300 .core @coal
   635 op land *tmp301 *tmp299 *tmp300
   636 jump *label459 notEqual *tmp301 false
-    * label *label463
-    * label *label586
-    * label *label587
   637 write "Depositing..." .display ".status3"
-    * label *label588
   638 sensor *tmp244 @unit @firstItem
   639 jump *label602 notEqual *tmp244 @coal
-    * label *label589
   640 sensor *tmp242 .thoriumGenerator @x
   641 sensor *tmp243 .thoriumGenerator @y
-    * label *label590
-    * label *label591
   642 write "Moving..." .display ".status3"
-    * label *label592
-    * label *label593
   643 ucontrol within *tmp242 *tmp243 6 *tmp230
   644 jump *label596 notEqual *tmp230 false
   645 label *label594
   646 ucontrol approach *tmp242 *tmp243 5.5
-    * label *label595
   647 ucontrol within *tmp242 *tmp243 6 *tmp230
   648 jump *label594 equal *tmp230 false
   649 label *label596
-    * label *label597
-    * label *label598
   650 sensor :depositItems:cap .thoriumGenerator @itemCapacity
   651 label *label599
   652 ucontrol itemDrop .thoriumGenerator 30
-    * label *label600
   653 sensor *tmp248 @unit @firstItem
   654 op mul *tmp249 *tmp248 :depositItems:cap
   655 sensor *tmp250 .thoriumGenerator @coal
   656 jump *label599 greaterThan *tmp249 *tmp250
-    * label *label601
   657 jump *label607 always
   658 label *label602
-    * label *label603
   659 sensor *tmp252 @unit @firstItem
   660 jump *label606 equal *tmp252 null
   661 label *label604
   662 ucontrol itemDrop @air 1000
-    * label *label605
   663 sensor *tmp252 @unit @firstItem
   664 jump *label604 notEqual *tmp252 null
   665 label *label606
   666 label *label607
-    * label *label608
   667 write 0 .display ".transportTarget"
   668 write null .display ".transportItem"
-    * label *label609
-    * label *label610
-    * label *label465
-    * label *label616
   669 sensor *tmp273 .thoriumContainer @itemCapacity
   670 op min :transportStatus:target *tmp273 30
-    * label *label617
   671 write :transportStatus:target .display ".transportTarget"
   672 write @thorium .display ".transportItem"
-    * label *label618
-    * label *label619
   673 write "Fetching " .display ".status2"
   674 write @thorium .display ".item2"
   675 write .thoriumContainer .display ".block2"
-    * label *label620
   676 sensor *tmp275 .thoriumContainer @x
   677 sensor *tmp276 .thoriumContainer @y
-    * label *label621
-    * label *label622
   678 write "Moving..." .display ".status3"
-    * label *label623
   679 label *label624
   680 sensor *tmp235 @unit @firstItem
   681 jump *label625 equal *tmp235 null
   682 ucontrol itemDrop @air 1000
   683 label *label625
-    * label *label626
   684 ucontrol approach *tmp275 *tmp276 5.5
-    * label *label627
   685 ucontrol within *tmp275 *tmp276 6 *tmp238
   686 jump *label624 equal *tmp238 false
-    * label *label628
-    * label *label629
-    * label *label630
-    * label *label631
   687 sensor *tmp240 @unit @firstItem
   688 jump *label634 equal *tmp240 null
   689 label *label632
   690 ucontrol itemDrop @air 1000
-    * label *label633
   691 sensor *tmp240 @unit @firstItem
   692 jump *label632 notEqual *tmp240 null
   693 label *label634
-    * label *label635
   694 label *label636
   695 ucontrol itemTake .thoriumContainer @thorium 30
   696 sensor :fetchBlock:unitItem @unit @firstItem
 
   700 jump *label637 equal *tmp280 false
   701 ucontrol itemDrop @air 1000
   702 label *label637
-    * label *label638
-    * label *label639
   703 sensor *tmp282 @unit @thorium
   704 op lessThan *tmp283 *tmp282 30
   705 sensor *tmp284 .thoriumContainer @thorium
   706 op land *tmp285 *tmp283 *tmp284
   707 jump *label636 notEqual *tmp285 false
-    * label *label640
-    * label *label641
-    * label *label642
   708 write "Depositing..." .display ".status3"
-    * label *label643
   709 sensor *tmp244 @unit @firstItem
   710 jump *label657 notEqual *tmp244 @thorium
-    * label *label644
   711 sensor *tmp242 .core @x
   712 sensor *tmp243 .core @y
-    * label *label645
-    * label *label646
   713 write "Moving..." .display ".status3"
-    * label *label647
-    * label *label648
   714 ucontrol within *tmp242 *tmp243 6 *tmp230
   715 jump *label651 notEqual *tmp230 false
   716 label *label649
   717 ucontrol approach *tmp242 *tmp243 5.5
-    * label *label650
   718 ucontrol within *tmp242 *tmp243 6 *tmp230
   719 jump *label649 equal *tmp230 false
   720 label *label651
-    * label *label652
-    * label *label653
   721 sensor :depositItems:cap .core @itemCapacity
   722 label *label654
   723 ucontrol itemDrop .core 30
-    * label *label655
   724 sensor *tmp248 @unit @firstItem
   725 op mul *tmp249 *tmp248 :depositItems:cap
   726 sensor *tmp250 .core @thorium
   727 jump *label654 greaterThan *tmp249 *tmp250
-    * label *label656
   728 jump *label662 always
   729 label *label657
-    * label *label658
   730 sensor *tmp252 @unit @firstItem
   731 jump *label661 equal *tmp252 null
   732 label *label659
   733 ucontrol itemDrop @air 1000
-    * label *label660
   734 sensor *tmp252 @unit @firstItem
   735 jump *label659 notEqual *tmp252 null
   736 label *label661
   737 label *label662
-    * label *label663
   738 write 0 .display ".transportTarget"
   739 write null .display ".transportItem"
-    * label *label664
-    * label *label665
-    * label *label666
-    * label *label240
   740 jump *label239 always
   741 label *label238
   742 read *tmp97 .controller ".monos"
   743 jump *label244 lessThanEq *tmp97 3
-    * label *label401
   744 write "Phase 1: supplying base" .display ".status1"
-    * label *label402
   745 set :mineOre.1:ore @coal
-    * label *label611
-    * label *label612
   746 write "Mining " .display ".status2"
   747 write @coal .display ".item2"
   748 write "core" .display ".block2"
-    * label *label613
   749 set :mineOre:ore @coal
   750 set :mineOre:amount 30
   751 set :mineOre:block .core
   752 setaddr :mineOre*retaddr *label614 (h:*label614)
   753 call *label21 *invalid :mineOre*retval (m:*label614) (h:*label614)
   754 label *label614
-    * label *label615
-    * label *label246
   755 jump *label245 always
   756 label *label244
   757 set :supplyBase0:supplied false
 
   760 jump *label252 greaterThanEq *tmp343 .targetGraphite
   761 sensor *tmp346 .press @coal
   762 jump *label254 greaterThanEq *tmp346 5
-    * label *label403
   763 write "Goal 1: graphite requirement" .display ".status1"
-    * label *label404
   764 set :supplyBlock:block .press
   765 set :supplyBlock:ore @coal
   766 setaddr :supplyBlock*retaddr *label257 (h:*label257)
 
   768 label *label257
   769 set :supplyBase0:supplied true
   770 label *label254
-    * label *label255
   771 label *label252
-    * label *label253
   772 sensor *tmp349 .core @silicon
   773 jump *label258 greaterThanEq *tmp349 .targetSilicon
   774 sensor *tmp352 .smelter @coal
   775 jump *label260 greaterThanEq *tmp352 5
-    * label *label405
   776 write "Goal 2: coal for silicon requirement" .display ".status1"
-    * label *label406
   777 set :supplyBlock:block .smelter
   778 set :supplyBlock:ore @coal
   779 setaddr :supplyBlock*retaddr *label263 (h:*label263)
 
   784 label *label260
   785 sensor *tmp355 .smelter @sand
   786 jump *label264 greaterThanEq *tmp355 5
-    * label *label407
   787 write "Goal 3: sand for silicon requirement" .display ".status1"
-    * label *label408
   788 set :supplyBlock:block .smelter
   789 set :supplyBlock:ore @sand
   790 setaddr :supplyBlock*retaddr *label267 (h:*label267)
 
   792 label *label267
   793 set :supplyBase0:supplied true
   794 label *label264
-    * label *label265
   795 label *label261
   796 label *label258
-    * label *label259
   797 sensor *tmp358 .battery @totalPower
   798 jump *label268 greaterThanEq *tmp358 .powerTarget
   799 sensor *tmp361 .generator @coal
   800 jump *label270 greaterThanEq *tmp361 2
-    * label *label409
   801 write "Goal 4: supplying generator" .display ".status1"
-    * label *label410
   802 set :supplyBlock:block .generator
   803 set :supplyBlock:ore @coal
   804 setaddr :supplyBlock*retaddr *label273 (h:*label273)
 
   806 label *label273
   807 set :supplyBase0:supplied true
   808 label *label270
-    * label *label271
   809 label *label268
-    * label *label269
   810 label *label250
-    * label *label251
   811 set *tmp366 100
   812 sensor *tmp364 .core @titanium
   813 jump *label275 greaterThanEq *tmp364 .targetTitanium
 
   821 sensor *tmp375 .battery @totalPower
   822 op mul *tmp376 .unloader1 .powerTarget
   823 jump *label280 greaterThanEq *tmp375 *tmp376
-    * label *label411
   824 write "Goal 5: supplying generator" .display ".status1"
-    * label *label412
   825 set :mineOre.1:ore @coal
-    * label *label727
-    * label *label728
   826 write "Mining " .display ".status2"
   827 write @coal .display ".item2"
   828 write "core" .display ".block2"
-    * label *label729
   829 set :mineOre:ore @coal
   830 set :mineOre:amount 30
   831 set :mineOre:block .core
   832 setaddr :mineOre*retaddr *label730 (h:*label730)
   833 call *label21 *invalid :mineOre*retval (m:*label730) (h:*label730)
   834 label *label730
-    * label *label731
   835 jump *label281 always
   836 label *label280
   837 sensor *tmp379 .core @silicon
   838 jump *label284 greaterThanEq *tmp379 .targetSilicon
-    * label *label413
   839 write "Goal 6: silicon requirement" .display ".status1"
-    * label *label414
   840 sensor :supplyBase0:coal .core @coal
   841 sensor :supplyBase0:sand .core @sand
   842 set :mineOre.1:ore @sand
 
   850 label *label284
   851 sensor *tmp386 .core @copper
   852 jump *label290 greaterThanEq *tmp386 .targetCopper
-    * label *label415
   853 write "Goal 7: copper requirement" .display ".status1"
-    * label *label416
   854 set :mineOre.1:ore @copper
   855 setaddr :mineOre.1*retaddr *label293 (h:*label293)
   856 call *label22 *invalid :mineOre.1*retval (m:*label293) (h:*label293)
 
   859 label *label290
   860 sensor *tmp389 .core @lead
   861 jump *label294 greaterThanEq *tmp389 .targetLead
-    * label *label417
   862 write "Goal 8: lead requirement" .display ".status1"
-    * label *label418
   863 set :mineOre.1:ore @lead
   864 setaddr :mineOre.1*retaddr *label297 (h:*label297)
   865 call *label22 *invalid :mineOre.1*retval (m:*label297) (h:*label297)
 
   868 label *label294
   869 sensor *tmp392 .core @metaglass
   870 jump *label298 greaterThanEq *tmp392 .targetMetaglass
-    * label *label419
   871 write "Goal 9: metaglass requirement" .display ".status1"
-    * label *label420
   872 set :mineOre.1:ore @sand
   873 setaddr :mineOre.1*retaddr *label301 (h:*label301)
   874 call *label22 *invalid :mineOre.1*retval (m:*label301) (h:*label301)
   875 label *label301
   876 jump *label299 always
   877 label *label298
-    * label *label421
   878 write "Goal 10: supplying base" .display ".status1"
-    * label *label422
   879 sensor :supplyBase0:coal.1 .core @coal
   880 sensor :supplyBase0:sand.1 .core @sand
   881 set :mineOre.1:ore @sand
 
   891 label *label285
   892 label *label281
   893 label *label278
-    * label *label279
   894 jump *label277 always
   895 label *label276
-    * label *label423
   896 write "Goal 11: Fetching titanium" .display ".status1"
-    * label *label424
-    * label *label667
   897 sensor *tmp273 .titaniumDrill @itemCapacity
   898 op min :transportStatus:target *tmp273 30
-    * label *label668
   899 write :transportStatus:target .display ".transportTarget"
   900 write @titanium .display ".transportItem"
-    * label *label669
-    * label *label670
   901 write "Fetching " .display ".status2"
   902 write @titanium .display ".item2"
   903 write .titaniumDrill .display ".block2"
-    * label *label671
   904 sensor *tmp275 .titaniumDrill @x
   905 sensor *tmp276 .titaniumDrill @y
-    * label *label672
-    * label *label673
   906 write "Moving..." .display ".status3"
-    * label *label674
   907 label *label675
   908 sensor *tmp235 @unit @firstItem
   909 jump *label676 equal *tmp235 null
   910 ucontrol itemDrop @air 1000
   911 label *label676
-    * label *label677
   912 ucontrol approach *tmp275 *tmp276 5.5
-    * label *label678
   913 ucontrol within *tmp275 *tmp276 6 *tmp238
   914 jump *label675 equal *tmp238 false
-    * label *label679
-    * label *label680
-    * label *label681
-    * label *label682
   915 sensor *tmp240 @unit @firstItem
   916 jump *label685 equal *tmp240 null
   917 label *label683
   918 ucontrol itemDrop @air 1000
-    * label *label684
   919 sensor *tmp240 @unit @firstItem
   920 jump *label683 notEqual *tmp240 null
   921 label *label685
-    * label *label686
   922 label *label687
   923 ucontrol itemTake .titaniumDrill @titanium 30
   924 sensor :fetchBlock:unitItem @unit @firstItem
 
   928 jump *label688 equal *tmp280 false
   929 ucontrol itemDrop @air 1000
   930 label *label688
-    * label *label689
-    * label *label690
   931 sensor *tmp282 @unit @titanium
   932 op lessThan *tmp283 *tmp282 30
   933 sensor *tmp284 .titaniumDrill @titanium
   934 op land *tmp285 *tmp283 *tmp284
   935 jump *label687 notEqual *tmp285 false
-    * label *label691
-    * label *label692
-    * label *label693
   936 write "Depositing..." .display ".status3"
-    * label *label694
   937 sensor *tmp244 @unit @firstItem
   938 jump *label708 notEqual *tmp244 @titanium
-    * label *label695
   939 sensor *tmp242 .core @x
   940 sensor *tmp243 .core @y
-    * label *label696
-    * label *label697
   941 write "Moving..." .display ".status3"
-    * label *label698
-    * label *label699
   942 ucontrol within *tmp242 *tmp243 6 *tmp230
   943 jump *label702 notEqual *tmp230 false
   944 label *label700
   945 ucontrol approach *tmp242 *tmp243 5.5
-    * label *label701
   946 ucontrol within *tmp242 *tmp243 6 *tmp230
   947 jump *label700 equal *tmp230 false
   948 label *label702
-    * label *label703
-    * label *label704
   949 sensor :depositItems:cap .core @itemCapacity
   950 label *label705
   951 ucontrol itemDrop .core 30
-    * label *label706
   952 sensor *tmp248 @unit @firstItem
   953 op mul *tmp249 *tmp248 :depositItems:cap
   954 sensor *tmp250 .core @titanium
   955 jump *label705 greaterThan *tmp249 *tmp250
-    * label *label707
   956 jump *label713 always
   957 label *label708
-    * label *label709
   958 sensor *tmp252 @unit @firstItem
   959 jump *label712 equal *tmp252 null
   960 label *label710
   961 ucontrol itemDrop @air 1000
-    * label *label711
   962 sensor *tmp252 @unit @firstItem
   963 jump *label710 notEqual *tmp252 null
   964 label *label712
   965 label *label713
-    * label *label714
   966 write 0 .display ".transportTarget"
   967 write null .display ".transportItem"
-    * label *label715
-    * label *label716
-    * label *label717
   968 label *label277
-    * label *label249
   969 label *label245
   970 label *label239
-    * label *label237
   971 return :supplyBase*retaddr
   972 end
   973 label *label33
-    * label *label370
   974 op sign :meetTarget:count :meetTarget:copper
-    * label *label371
-    * label *label374
   975 op sign *tmp400 :meetTarget:lead
   976 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label375
-    * label *label378
   977 op sign *tmp400 :meetTarget:graphite
   978 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label379
-    * label *label382
   979 op sign *tmp400 :meetTarget:silicon
   980 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label383
-    * label *label386
   981 op sign *tmp400 :meetTarget:titanium
   982 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label387
-    * label *label390
   983 op sign *tmp400 :meetTarget:metaglass
   984 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label391
-    * label *label394
   985 op sign *tmp400 :meetTarget:thorium
   986 op add :meetTarget:count :meetTarget:count *tmp400
-    * label *label395
-    * label *label311
   987 write :meetTarget:count .display ".totalTargets"
   988 write :meetTarget:block .display ".nextBlock"
   989 write :meetTarget:copper .display ".targetCopper"
 
  1022 set *tmp413 false
  1023 jump *label322 always
  1024 label *label323
-    * label *label324
  1025 sensor *tmp417 .core @lead
  1026 jump *label325 greaterThanEq *tmp417 .targetLead
  1027 set *tmp413 false
  1028 jump *label322 always
  1029 label *label325
-    * label *label326
  1030 sensor *tmp420 .core @graphite
  1031 jump *label327 greaterThanEq *tmp420 .targetGraphite
  1032 set *tmp413 false
  1033 jump *label322 always
  1034 label *label327
-    * label *label328
  1035 sensor *tmp423 .core @silicon
  1036 jump *label329 greaterThanEq *tmp423 .targetSilicon
  1037 set *tmp413 false
  1038 jump *label322 always
  1039 label *label329
-    * label *label330
  1040 sensor *tmp426 .core @titanium
  1041 jump *label331 greaterThanEq *tmp426 .targetTitanium
  1042 set *tmp413 false
  1043 jump *label322 always
  1044 label *label331
-    * label *label332
  1045 sensor *tmp429 .core @metaglass
  1046 jump *label333 greaterThanEq *tmp429 .targetMetaglass
  1047 set *tmp413 false
  1048 jump *label322 always
  1049 label *label333
-    * label *label334
  1050 sensor *tmp432 .core @thorium
  1051 jump *label335 greaterThanEq *tmp432 .targetThorium
  1052 set *tmp413 false
  1053 jump *label322 always
  1054 label *label335
-    * label *label336
  1055 set *tmp413 true
  1056 jump *label322 always
  1057 label *label322
 
  1059 setaddr :supplyBase*retaddr *label337 (h:*label337)
  1060 call *label32 *invalid :supplyBase*retval (m:*label337) (h:*label337)
  1061 label *label337
-    * label *label320
  1062 jump *label319 always
  1063 label *label321
-    * label *label308
  1064 return :meetTarget*retaddr
  1065 end
  1066 label *label34
 
  1087 read *tmp456 .blockBuilder ":buildBlockAt*finished"
  1088 jump *label343 equal *tmp456 false
  1089 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * label *label341
  1090 return :buildBlock*retaddr
  1091 end
  1092 label *label35
 
  1114 set :buildRemoteBlock*retval :buildBlock*retval
  1115 jump *label344 always
  1116 label *label345
-    * label *label346
  1117 set :buildRemoteBlock*retval false
  1118 jump *label344 always
  1119 label *label344
 
  1142 call *label34 *invalid :buildBlock*retval (m:*label351) (h:*label351)
  1143 label *label351
  1144 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label349
  1145 return :buildBlockFromCfg*retaddr
  1146 end
  1147 label *label37
 
  1151 call *label36 *invalid :buildBlockFromCfg*retval (m:*label353) (h:*label353)
  1152 label *label353
  1153 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
-    * label *label352
  1154 return :buildBlockFromCfg.1*retaddr
  1155 end
  1156 label *label38
 
  1169 setaddr :meetTarget*retaddr *label356 (h:*label356)
  1170 call *label33 *invalid :meetTarget*retval (m:*label356) (h:*label356)
  1171 label *label356
-    * label *label354
  1172 return :meetTarget.1*retaddr
  1173 end
  1174 label *label40
 
  1188 write 0 .controller ".leadReserve"
  1189 write 0 .controller ".siliconReserve"
  1190 write 0 .controller ".graphiteReserve"
-    * label *label360
  1191 return :buildUnits*retaddr
  1192 end
  1193 label *label41
 
  1198 ucontrol flag :flagUnits:x
  1199 op add :flagUnits:x :flagUnits:x 4
  1200 ubind :flagUnits:unit
-    * label *label364
  1201 jump *label363 notEqual @unit :flagUnits:firstUnit
-    * label *label365
-    * label *label362
  1202 return :flagUnits*retaddr
  1203 end
  1204 label *label42
 
  1209 ucontrol itemDrop @air 1000
  1210 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1211 ubind :lineUpUnits:unit
-    * label *label368
  1212 jump *label367 notEqual @unit :lineUpUnits:firstUnit
-    * label *label369
-    * label *label366
  1213 return :lineUpUnits*retaddr
  1214 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-3 instructions):
 
   145 call *label32 *invalid :supplyBase*retval (m:*label72) (h:*label72)
   146 label *label72
   147 sensor *tmp155 .battery @totalPower
-    * jump *label73 greaterThanEq *tmp155 300
-    * jump *label71 always
+  148 jump *label71 lessThan *tmp155 300
   149 label *label73
   150 read *tmp97 .controller ".monos"
   151 jump *label69 lessThan *tmp97 3
 
   493 op notEqual *tmp264 :mineOre:item null
   494 op notEqual *tmp265 :mineOre:item :mineOre:ore
   495 op land *tmp266 *tmp264 *tmp265
-    * jump *label201 equal *tmp266 false
-    * jump *label200 always
+  496 jump *label200 notEqual *tmp266 false
   497 label *label201
   498 ucontrol mine :locateOre:x :locateOre:y
-    * jump *label203 lessThanEq @second :mineOre:stop
-    * jump *label200 always
+  499 jump *label200 greaterThan @second :mineOre:stop
   500 label *label203
   501 sensor *tmp270 @unit @totalItems
   502 jump *label198 lessThan *tmp270 :mineOre:amount

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   146 label *label72
   147 sensor *tmp155 .battery @totalPower
   148 jump *label71 lessThan *tmp155 300
-    * label *label73
   149 read *tmp97 .controller ".monos"
   150 jump *label69 lessThan *tmp97 3
   151 label *label71
 
   493 op notEqual *tmp265 :mineOre:item :mineOre:ore
   494 op land *tmp266 *tmp264 *tmp265
   495 jump *label200 notEqual *tmp266 false
-    * label *label201
   496 ucontrol mine :locateOre:x :locateOre:y
   497 jump *label200 greaterThan @second :mineOre:stop
-    * label *label203
   498 sensor *tmp270 @unit @totalItems
   499 jump *label198 lessThan *tmp270 :mineOre:amount
   500 label *label200

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   731 label *label662
   732 write 0 .display ".transportTarget"
   733 write null .display ".transportItem"
-    * jump *label239 always
+  734 return :supplyBase*retaddr
   735 label *label238
   736 read *tmp97 .controller ".monos"
   737 jump *label244 lessThanEq *tmp97 3
 
   746 setaddr :mineOre*retaddr *label614 (h:*label614)
   747 call *label21 *invalid :mineOre*retval (m:*label614) (h:*label614)
   748 label *label614
-    * jump *label245 always
+  749 return :supplyBase*retaddr
   750 label *label244
   751 set :supplyBase0:supplied false
   752 jump *label250 notEqual .unloader1 null
 
   811 label *label275
   812 sensor *tmp370 .titaniumDrill @titanium
   813 jump *label276 greaterThanEq *tmp370 *tmp366
-    * jump *label278 notEqual :supplyBase0:supplied false
+  814 jump *label277 notEqual :supplyBase0:supplied false
   815 sensor *tmp375 .battery @totalPower
   816 op mul *tmp376 .unloader1 .powerTarget
   817 jump *label280 greaterThanEq *tmp375 *tmp376
 
   826 setaddr :mineOre*retaddr *label730 (h:*label730)
   827 call *label21 *invalid :mineOre*retval (m:*label730) (h:*label730)
   828 label *label730
-    * jump *label281 always
+  829 return :supplyBase*retaddr
   830 label *label280
   831 sensor *tmp379 .core @silicon
   832 jump *label284 greaterThanEq *tmp379 .targetSilicon
 
   840 setaddr :mineOre.1*retaddr *label289 (h:*label289)
   841 call *label22 *invalid :mineOre.1*retval (m:*label289) (h:*label289)
   842 label *label289
-    * jump *label285 always
+  843 return :supplyBase*retaddr
   844 label *label284
   845 sensor *tmp386 .core @copper
   846 jump *label290 greaterThanEq *tmp386 .targetCopper
 
   849 setaddr :mineOre.1*retaddr *label293 (h:*label293)
   850 call *label22 *invalid :mineOre.1*retval (m:*label293) (h:*label293)
   851 label *label293
-    * jump *label291 always
+  852 return :supplyBase*retaddr
   853 label *label290
   854 sensor *tmp389 .core @lead
   855 jump *label294 greaterThanEq *tmp389 .targetLead
 
   858 setaddr :mineOre.1*retaddr *label297 (h:*label297)
   859 call *label22 *invalid :mineOre.1*retval (m:*label297) (h:*label297)
   860 label *label297
-    * jump *label295 always
+  861 return :supplyBase*retaddr
   862 label *label294
   863 sensor *tmp392 .core @metaglass
   864 jump *label298 greaterThanEq *tmp392 .targetMetaglass
 
   867 setaddr :mineOre.1*retaddr *label301 (h:*label301)
   868 call *label22 *invalid :mineOre.1*retval (m:*label301) (h:*label301)
   869 label *label301
-    * jump *label299 always
+  870 return :supplyBase*retaddr
   871 label *label298
   872 write "Goal 10: supplying base" .display ".status1"
   873 sensor :supplyBase0:coal.1 .core @coal
 
   885 label *label285
   886 label *label281
   887 label *label278
-    * jump *label277 always
+  888 return :supplyBase*retaddr
   889 label *label276
   890 write "Goal 11: Fetching titanium" .display ".status1"
   891 sensor *tmp273 .titaniumDrill @itemCapacity
 
  1106 call *label34 *invalid :buildBlock*retval (m:*label348) (h:*label348)
  1107 label *label348
  1108 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label344 always
+ 1109 return :buildRemoteBlock*retaddr
  1110 label *label345
  1111 set :buildRemoteBlock*retval false
-    * jump *label344 always
+ 1112 return :buildRemoteBlock*retaddr
  1113 label *label344
  1114 return :buildRemoteBlock*retaddr
  1115 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-16 instructions):
 
   456 call *label42 *invalid :lineUpUnits*retval (m:*label148) (h:*label148)
   457 label *label148
   458 jump *label142 always
-    * end
   459 label *label21
   460 op min :mineOre:amount :mineOre:amount 30
   461 write :mineOre:amount .display ".transportTarget"
 
   531 write 0 .display ".transportTarget"
   532 write null .display ".transportItem"
   533 return :mineOre*retaddr
-    * end
   534 label *label22
   535 write "Mining " .display ".status2"
   536 write :mineOre.1:ore .display ".item2"
 
   542 call *label21 *invalid :mineOre*retval (m:*label208) (h:*label208)
   543 label *label208
   544 return :mineOre.1*retaddr
-    * end
   545 label *label24
   546 write "Supplying " .display ".status2"
   547 write :supplyBlock:ore .display ".item2"
 
   558 label *label224
   559 label *label222
   560 return :supplyBlock*retaddr
-    * end
   561 label *label31
   562 read *tmp303 :unpackCfg:cfg 0
   563 op sub *tmp304 *tmp303 35
 
   583 read *tmp336 :unpackCfg:cfg 10
   584 op sub :unpackCfg:rotation *tmp336 35
   585 return :unpackCfg*retaddr
-    * end
   586 label *label32
   587 jump *label238 equal .thoriumContainer false
   588 write "Phase 2: servicing thorium drill" .display ".status1"
 
   874 setaddr :mineOre.1*retaddr *label305 (h:*label305)
   875 call *label22 *invalid :mineOre.1*retval (m:*label305) (h:*label305)
   876 label *label305
-    * label *label299
-    * label *label295
-    * label *label291
-    * label *label285
-    * label *label281
-    * label *label278
   877 return :supplyBase*retaddr
   878 label *label276
   879 write "Goal 11: Fetching titanium" .display ".status1"
 
   949 write 0 .display ".transportTarget"
   950 write null .display ".transportItem"
   951 label *label277
-    * label *label245
-    * label *label239
   952 return :supplyBase*retaddr
-    * end
   953 label *label33
   954 op sign :meetTarget:count :meetTarget:copper
   955 op sign *tmp400 :meetTarget:lead
 
  1042 jump *label319 always
  1043 label *label321
  1044 return :meetTarget*retaddr
-    * end
  1045 label *label34
  1046 set :meetTarget:block :buildBlock:block
  1047 set :meetTarget:copper :buildBlock:copper
 
  1067 jump *label343 equal *tmp456 false
  1068 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1069 return :buildBlock*retaddr
-    * end
  1070 label *label35
  1071 op add *tmp458 :buildRemoteBlock:x :buildRemoteBlock:y
  1072 jump *label345 lessThanEq *tmp458 0
 
  1094 label *label345
  1095 set :buildRemoteBlock*retval false
  1096 return :buildRemoteBlock*retaddr
-    * label *label344
-    * return :buildRemoteBlock*retaddr
-    * end
  1097 label *label36
  1098 set :unpackCfg:cfg :buildBlockFromCfg:cfg
  1099 setaddr :unpackCfg*retaddr *label350 (h:*label350)
 
  1118 label *label351
  1119 set :buildBlockFromCfg*retval :buildBlock*retval
  1120 return :buildBlockFromCfg*retaddr
-    * end
  1121 label *label37
  1122 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
  1123 set :buildBlockFromCfg:config null
 
  1126 label *label353
  1127 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
  1128 return :buildBlockFromCfg.1*retaddr
-    * end
  1129 label *label38
  1130 set :unpackCfg:cfg :meetTarget.1:cfg
  1131 setaddr :unpackCfg*retaddr *label355 (h:*label355)
 
  1143 call *label33 *invalid :meetTarget*retval (m:*label356) (h:*label356)
  1144 label *label356
  1145 return :meetTarget.1*retaddr
-    * end
  1146 label *label40
  1147 set :meetTarget:block 0
  1148 set :meetTarget:copper 0
 
  1161 write 0 .controller ".siliconReserve"
  1162 write 0 .controller ".graphiteReserve"
  1163 return :buildUnits*retaddr
-    * end
  1164 label *label41
  1165 ubind :flagUnits:unit
  1166 set :flagUnits:firstUnit @unit
 
  1171 ubind :flagUnits:unit
  1172 jump *label363 notEqual @unit :flagUnits:firstUnit
  1173 return :flagUnits*retaddr
-    * end
  1174 label *label42
  1175 ubind :lineUpUnits:unit
  1176 set :lineUpUnits:firstUnit @unit
 
  1181 ubind :lineUpUnits:unit
  1182 jump *label367 notEqual @unit :lineUpUnits:firstUnit
  1183 return :lineUpUnits*retaddr
-    * end

Final code before resolving virtual instructions:

    0:  jump *label732 always 0 0
    1:  draw triangle bank1 processor1 processor2 processor3 processor4 processor5
    2:  draw triangle processor6 processor7 processor8 .ERROR .battery .blockBuilder
    3:  draw triangle .builder .controller .core .coreX .coreY .display
    4:  draw triangle .generator .graphiteSurplus .leadSurplus .metaglassSurplus .powerTarget .press
    5:  draw triangle .siliconSurplus .smelter .targetCopper .targetGraphite .targetLead .targetMetaglass
    6:  draw triangle .targetSilicon .targetThorium .targetTitanium .thoriumContainer .thoriumDrill .thoriumGenerator
    7:  draw triangle .titaniumDrill .unloader1 :blocksBuildTitaniumDrills:current :buildBlock:block :buildBlock:config :buildBlock:copper
    8:  draw triangle :buildBlock:graphite :buildBlock:lead :buildBlock:metaglass :buildBlock:rotation :buildBlock:silicon :buildBlock:thorium
    9:  draw triangle :buildBlock:titanium :buildBlock:x :buildBlock:y :buildBlockFromCfg.1:cfg :buildBlockFromCfg:cfg :buildBlockFromCfg:config
   10:  draw triangle :buildFirstTitaniumDrill:dx :buildFirstTitaniumDrill:dy :buildFirstTitaniumDrill:result :buildRemoteBlock:cfg :buildRemoteBlock:x :buildRemoteBlock:y
   11:  draw triangle :buildThoriumDrill:result :depositItems:cap :fetchBlock:unitItem :flagUnits:firstUnit :flagUnits:unit :flagUnits:x
   12:  draw triangle :lineUpUnits:firstUnit :lineUpUnits:unit :lineUpUnits:x :lineUpUnits:y :locateOre:x :locateOre:y
   13:  draw triangle :meetTarget:block :meetTarget.1:cfg :meetTarget:copper :meetTarget:count :meetTarget:graphite :meetTarget:lead
   14:  draw triangle :meetTarget:metaglass :meetTarget:silicon :meetTarget:thorium :meetTarget:titanium :mineOre:amount :mineOre:block
   15:  draw triangle :mineOre:item :mineOre.1:ore :mineOre:ore :mineOre:stop :supplyBase0:coal.1 :supplyBase0:coal
   16:  draw triangle :supplyBase0:sand.1 :supplyBase0:sand :supplyBase0:supplied :supplyBlock:block :supplyBlock:blockCapacity :supplyBlock:missing
   17:  draw triangle :supplyBlock:ore :supplyBlockFromCore:unitItem :transportStatus:target :unpackCfg:cfg :unpackCfg:cu :unpackCfg:gr
   18:  draw triangle :unpackCfg:mg :unpackCfg:pb :unpackCfg:rotation :unpackCfg:si :unpackCfg:th :unpackCfg:ti
   19:  draw triangle :unpackCfg:type :unpackCfg:x :unpackCfg:y 0 0 0
        label *label732
   20:  set .ERROR ""                                                Actions.mnd: volatile var ERROR = "";
   21:  set .display processor1                                      CoreBuilder.mnd: var display = processor1,
   22:  set .blockBuilder processor5                                 ...
   23:  set .press null                                              CoreBuilder.mnd: var
   24:  set .generator null                                          ...
   25:  set .battery null                                            ...
   26:  set .smelter null                                            ...
   27:  set .titaniumDrill null                                      ...
   28:  set .unloader1 null                                          ...
   29:  set .thoriumContainer null                                   ...
   30:  set .thoriumGenerator null                                   ...
   31:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   32:  set .graphiteSurplus 20                                      ...
   33:  set .siliconSurplus 20                                       ...
   34:  set .metaglassSurplus 20                                     ...
   35:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label43                                               CoreBuilder.mnd: do
   36:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   37:  set .builder @unit                                           ...
   38:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   39:  jump *label43 equal .core null                               CoreBuilder.mnd: do
   40:  set :buildBlockFromCfg.1:cfg "#'+nA######"                   CoreBuilder.mnd: press = buildBlockFromCfg(PRESS);
   41:  setaddr :buildBlockFromCfg.1*retaddr *label46                ...
   42:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label46                                               ...
   43:  set .press :buildBlockFromCfg.1*retval                       ...
   44:  set :buildBlockFromCfg.1:cfg "k*/(7######"                   CoreBuilder.mnd: battery = buildBlockFromCfg(BATTERY1);
   45:  setaddr :buildBlockFromCfg.1*retaddr *label47                ...
   46:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label47                                               ...
   47:  set .battery :buildBlockFromCfg.1*retval                     ...
   48:  set :buildBlockFromCfg.1:cfg "k+/(7######"                   CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   49:  setaddr :buildBlockFromCfg.1*retaddr *label48                ...
   50:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label48                                               ...
   51:  set :buildBlockFromCfg.1:cfg "m*.<2######"                   CoreBuilder.mnd: generator = buildBlockFromCfg(GENERATOR);
   52:  setaddr :buildBlockFromCfg.1*retaddr *label49                ...
   53:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label49                                               ...
   54:  set .generator :buildBlockFromCfg.1*retval                   ...
   55:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   56:  set :buildBlockFromCfg.1:cfg "%+-A<######"                   CoreBuilder.mnd: smelter = buildBlockFromCfg(SMELTER);
   57:  setaddr :buildBlockFromCfg.1*retaddr *label50                ...
   58:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label50                                               ...
   59:  set .smelter :buildBlockFromCfg.1*retval                     ...
   60:  set :buildBlockFromCfg.1:cfg "T+,%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   61:  setaddr :buildBlockFromCfg.1*retaddr *label51                ...
   62:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label51                                               ...
   63:  set :meetTarget.1:cfg "w**5#-#####"                          CoreBuilder.mnd: meetTarget(cfg);
   64:  setaddr :meetTarget.1*retaddr *label53                       ...
   65:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label53                                               ...
   66:  write @titanium processor1 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   67:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   68:  write .coreY processor4 ":findDrillLocation:y"               ...
   69:  write @unit processor4 ":findDrillLocation:unit"             ...
   70:  write @titanium processor4 ":findDrillLocation:item"         ...
   71:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
   72:  write 2 processor4 ":findDrillLocation:size"                 ...
   73:  write 4 processor4 ":findDrillLocation:limit"                ...
   74:  write false processor4 ":findDrillLocation*finished"         ...
   75:  write 1 processor4 "@counter"                                ...
        label *label54                                               ...
   76:  wait 1e-15                                                   ...
   77:  read *tmp140 processor4 ":findDrillLocation*finished"        ...
   78:  jump *label54 equal *tmp140 false                            ...
   79:  read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocat ...
   80:  read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocat ...
   81:  read :buildFirstTitaniumDrill:result processor4 ":findDrillL ...
   82:  jump *label55 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   83:  set .ERROR "Cannot locate spot for titanium drill"           Actions.mnd: ERROR = error;
   84:  stop                                                         Actions.mnd: stopProcessor();
        label *label55                                               CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   85:  write @pneumatic-drill processor1 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   86:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   87:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   88:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   89:  write 2 processor5 "@counter"                                ...
        label *label58                                               ...
   90:  wait 1e-15                                                   ...
   91:  read *tmp146 processor5 ":buildFirstTitaniumDrillAt*finished ...
   92:  jump *label58 equal *tmp146 false                            ...
   93:  read *tmp129 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   94:  set .titaniumDrill *tmp129                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   95:  write *tmp129 processor1 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   96:  set :buildBlockFromCfg.1:cfg "*,###A<###"                   CoreBuilder.mnd: unloader1 = buildBlockFromCfg(UNLOADER1);
   97:  setaddr :buildBlockFromCfg.1*retaddr *label59                ...
   98:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label59                                               ...
   99:  set .unloader1 :buildBlockFromCfg.1*retval                   ...
  100:  set :buildBlockFromCfg.1:cfg "T),%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
  101:  setaddr :buildBlockFromCfg.1*retaddr *label60                ...
  102:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label60                                               ...
  103:  set :buildBlockFromCfg.1:cfg "W*-'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
  104:  setaddr :buildBlockFromCfg.1*retaddr *label61                ...
  105:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label61                                               ...
  106:  set .graphiteSurplus 100                                     CoreBuilder.mnd: graphiteSurplus = 100;
  107:  set :buildBlockFromCfg:cfg "®-.}U#U####"                     CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, processor2);
  108:  set :buildBlockFromCfg:config processor2                     ...
  109:  setaddr :buildBlockFromCfg*retaddr *label62                  ...
  110:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label62                                               ...
  111:  set .controller :buildBlockFromCfg*retval                    ...
  112:  write processor6 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
  113:  write processor1 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
  114:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
  115:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
  116:  write .battery :buildBlockFromCfg*retval ".battery"          CoreBuilder.mnd: controller.battery = battery;
  117:  write .generator :buildBlockFromCfg*retval ".generator"      CoreBuilder.mnd: controller.generator = generator;
  118:  write .smelter :buildBlockFromCfg*retval ".smelter"          CoreBuilder.mnd: controller.smelter = smelter;
  119:  write .press :buildBlockFromCfg*retval ".press"              CoreBuilder.mnd: controller.press = press;
  120:  write .unloader1 :buildBlockFromCfg*retval ".unloader1"      CoreBuilder.mnd: controller.unloader1 = unloader1;
  121:  set :buildBlockFromCfg.1:cfg "g)'%)######"                   CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  122:  setaddr :buildBlockFromCfg.1*retaddr *label63                ...
  123:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label63                                               ...
  124:  set :buildBlockFromCfg.1:cfg "(*###A<###"                   CoreBuilder.mnd: controller.unloader2 = buildBlockFromCfg(UNLOADER2);
  125:  setaddr :buildBlockFromCfg.1*retaddr *label64                ...
  126:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label64                                               ...
  127:  write :buildBlockFromCfg.1*retval .controller ".unloader2"   ...
  128:  set :buildBlockFromCfg.1:cfg "'(_i#####&"                   CoreBuilder.mnd: var factory = buildBlockFromCfg(AIR_FACTORY);
  129:  setaddr :buildBlockFromCfg.1*retaddr *label65                ...
  130:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label65                                               ...
  131:  write :buildBlockFromCfg.1*retval .controller ".factory"     CoreBuilder.mnd: controller.factory = factory;
  132:  write :buildBlockFromCfg.1*retval processor1 ".airFactory"   CoreBuilder.mnd: display.airFactory = factory;
  133:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  134:  write 1 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  135:  write 3 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  136:  write 3 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  137:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  138:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  139:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  140:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  141:  set .siliconSurplus 20                                       ...
  142:  setaddr :buildUnits*retaddr *label68                         CoreBuilder.mnd: buildUnits();
  143:  call *label40 *invalid :buildUnits*retval                    ...
        label *label68                                               ...
        label *label69                                               CoreBuilder.mnd: do
  144:  setaddr :supplyBase*retaddr *label72                         CoreBuilder.mnd: supplyBase();
  145:  call *label32 *invalid :supplyBase*retval                    ...
        label *label72                                               ...
  146:  sensor *tmp155 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < 300 then break; end;
  147:  jump *label71 lessThan *tmp155 300                           ...
  148:  read *tmp97 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  149:  jump *label69 lessThan *tmp97 3                              CoreBuilder.mnd: do
        label *label71                                               ...
  150:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  151:  set :buildBlockFromCfg.1:cfg ",)###A<###"                   CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  152:  setaddr :buildBlockFromCfg.1*retaddr *label75                ...
  153:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label75                                               ...
  154:  set :buildBlockFromCfg.1:cfg "T,*%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  155:  setaddr :buildBlockFromCfg.1*retaddr *label76                ...
  156:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label76                                               ...
  157:  set :buildBlockFromCfg.1:cfg "',+_AA#####"                   CoreBuilder.mnd: kiln = buildBlockFromCfg(KILN);
  158:  setaddr :buildBlockFromCfg.1*retaddr *label77                ...
  159:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label77                                               ...
  160:  write :buildBlockFromCfg.1*retval .controller ".kiln"        CoreBuilder.mnd: controller.kiln = kiln;
  161:  set :buildBlockFromCfg.1:cfg "z%-AAA##A##"                   CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  162:  setaddr :buildBlockFromCfg.1*retaddr *label78                ...
  163:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label78                                               ...
  164:  set :buildBlockFromCfg.1:cfg "W'*'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  165:  setaddr :buildBlockFromCfg.1*retaddr *label79                ...
  166:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label79                                               ...
  167:  set :buildBlockFromCfg.1:cfg "W&*'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  168:  setaddr :buildBlockFromCfg.1*retaddr *label80                ...
  169:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label80                                               ...
  170:  set :buildBlockFromCfg.1:cfg "o%+FK<A####"                   CoreBuilder.mnd: controller.generator2 = buildBlockFromCfg(STEAM_GEN);
  171:  setaddr :buildBlockFromCfg.1*retaddr *label81                ...
  172:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label81                                               ...
  173:  write :buildBlockFromCfg.1*retval .controller ".generator2"  ...
  174:  set :buildBlockFromCfg.1:cfg "$(.#U<###"                   CoreBuilder.mnd: controller.multipress = buildBlockFromCfg(MULTIPRESS);
  175:  setaddr :buildBlockFromCfg.1*retaddr *label82                ...
  176:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label82                                               ...
  177:  write :buildBlockFromCfg.1*retval .controller ".multipress"  ...
  178:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  179:  set :buildBlockFromCfg.1:cfg " '%-#2#####"                   CoreBuilder.mnd: controller.payloadRouter = buildBlockFromCfg(PAYLOAD_ROUTER);
  180:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  181:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  182:  write :buildBlockFromCfg.1*retval .controller ".payloadRoute ...
  183:  set :buildBlockFromCfg.1:cfg "*(###A<###"                   CoreBuilder.mnd: controller.unloader4 = buildBlockFromCfg(UNLOADER4);
  184:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  185:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  186:  write :buildBlockFromCfg.1*retval .controller ".unloader4"   ...
  187:  set :buildBlockFromCfg.1:cfg "X*''%######"                   CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE);
  188:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  189:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  190:  set :buildBlockFromCfg.1:cfg "*%ë#}####"                   CoreBuilder.mnd: var reconstructor = buildBlockFromCfg(ADDITIVE_REC);
  191:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  192:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  193:  write :buildBlockFromCfg.1*retval .controller ".reconstructo CoreBuilder.mnd: controller.reconstructor = reconstructor;
  194:  write :buildBlockFromCfg.1*retval processor1 ".reconstructor CoreBuilder.mnd: display.reconstructor = reconstructor;
  195:  set :buildBlockFromCfg.1:cfg "l/-#U#A7###"                   CoreBuilder.mnd: buildBlockFromCfg(BATTERY_LARGE);
  196:  setaddr :buildBlockFromCfg.1*retaddr *label87                ...
  197:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label87                                               ...
  198:  setaddr :buildUnits*retaddr *label88                         CoreBuilder.mnd: buildUnits();
  199:  call *label40 *invalid :buildUnits*retval                    ...
        label *label88                                               ...
  200:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  201:  set .metaglassSurplus 200                                    CoreBuilder.mnd: metaglassSurplus = 200;
  202:  write 6 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  203:  write 6 processor1 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  204:  set :buildBlockFromCfg.1:cfg "%-)A<######"                   CoreBuilder.mnd: controller.smelter2 = buildBlockFromCfg(SMELTER2);
  205:  setaddr :buildBlockFromCfg.1*retaddr *label90                ...
  206:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label90                                               ...
  207:  write :buildBlockFromCfg.1*retval .controller ".smelter2"    ...
  208:  set :buildBlockFromCfg:cfg "--###A<###"                     CoreBuilder.mnd: buildBlockFromCfg(UNLOADER5, @sand);
  209:  set :buildBlockFromCfg:config @sand                          ...
  210:  setaddr :buildBlockFromCfg*retaddr *label91                  ...
  211:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label91                                               ...
  212:  setaddr :buildUnits*retaddr *label92                         CoreBuilder.mnd: buildUnits();
  213:  call *label40 *invalid :buildUnits*retval                    ...
        label *label92                                               ...
  214:  read *tmp98 .controller ".polys"                             CoreBuilder.mnd: while controller.polys < 3 do
  215:  jump *label95 greaterThanEq *tmp98 3                         ...
        label *label718                                              ...
  216:  setaddr :supplyBase*retaddr *label96                         CoreBuilder.mnd: supplyBase();
  217:  call *label32 *invalid :supplyBase*retval                    ...
        label *label96                                               ...
  218:  read *tmp98 .controller ".polys"                             CoreBuilder.mnd: while controller.polys < 3 do
  219:  jump *label718 lessThan *tmp98 3                             ...
        label *label95                                               ...
  220:  write 3 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  221:  write 3 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  222:  read *tmp96 .controller ".flares"                            CoreBuilder.mnd: while controller.flares < 2 do
  223:  jump *label100 greaterThanEq *tmp96 2                        ...
        label *label719                                              ...
  224:  setaddr :supplyBase*retaddr *label101                        CoreBuilder.mnd: supplyBase();
  225:  call *label32 *invalid :supplyBase*retval                    ...
        label *label101                                              ...
  226:  read *tmp96 .controller ".flares"                            CoreBuilder.mnd: while controller.flares < 2 do
  227:  jump *label719 lessThan *tmp96 2                             ...
        label *label100                                              ...
  228:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  229:  write 5 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  230:  write @ore-titanium processor1 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  231:  wait 0.000000001                                             CoreBuilder.mnd: wait(1e-9);
  232:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  233:  read :blocksBuildTitaniumDrills:current processor4 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  234:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  235:  write .coreY processor4 ":findDrillLocation:y"               ...
  236:  write @unit processor4 ":findDrillLocation:unit"             ...
  237:  write @titanium processor4 ":findDrillLocation:item"         ...
  238:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
  239:  write 4 processor4 ":findDrillLocation:size"                 ...
  240:  write 1000000000 processor4 ":findDrillLocation:limit"       ...
  241:  write false processor4 ":findDrillLocation*finished"         ...
  242:  write 1 processor4 "@counter"                                ...
  243:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  244:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  245:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  246:  write false processor5 ":buildTitaniumDrills*finished"       ...
  247:  write 3 processor5 "@counter"                                ...
        label *label104                                              ...
  248:  wait 1e-15                                                   ...
  249:  read *tmp188 processor5 ":buildTitaniumDrills*finished"      ...
  250:  jump *label104 equal *tmp188 false                           ...
  251:  write false processor4 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  252:  write 3 processor4 "@counter"                                ...
  253:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  254:  write .coreX processor4 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  255:  write .coreY processor4 ":layoutThoriumDrill:y"              ...
  256:  write @unit processor4 ":layoutThoriumDrill:unit"            ...
  257:  write 7 processor4 ":layoutThoriumDrill:limit"               ...
  258:  write false processor4 ":layoutThoriumDrill*finished"        ...
  259:  write 2 processor4 "@counter"                                ...
        label *label106                                              ...
  260:  wait 1e-15                                                   ...
  261:  read *tmp193 processor4 ":layoutThoriumDrill*finished"       ...
  262:  jump *label106 equal *tmp193 false                           ...
  263:  set :meetTarget.1:cfg "x**F#AA7###"                          CoreBuilder.mnd: meetTarget(LASER_DRILL);
  264:  setaddr :meetTarget.1*retaddr *label107                      ...
  265:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label107                                              ...
        label *label108                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  266:  wait 1e-15                                                   ...
  267:  read *tmp195 processor4 ":layoutThoriumDrill*finished"       ...
  268:  jump *label108 equal *tmp195 false                           ...
  269:  read :buildThoriumDrill:result processor4 ":layoutThoriumDri ...
  270:  jump *label109 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  271:  set .ERROR "Cannot locate spot for thorium drill"            Actions.mnd: ERROR = error;
  272:  stop                                                         Actions.mnd: stopProcessor();
        label *label109                                              CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  273:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0);
  274:  read *tmp54 processor4 ".drillX"                             ...
  275:  write *tmp54 processor5 ":buildBlockAt:x"                    ...
  276:  read *tmp55 processor4 ".drillY"                             ...
  277:  write *tmp55 processor5 ":buildBlockAt:y"                    ...
  278:  write null processor5 ":buildBlockAt:rotation"               ...
  279:  write 0 processor5 ":buildBlockAt:config"                    ...
  280:  write false processor5 ":buildBlockAt*finished"              ...
  281:  write 1 processor5 "@counter"                                ...
        label *label112                                              ...
  282:  wait 1e-15                                                   ...
  283:  read *tmp204 processor5 ":buildBlockAt*finished"             ...
  284:  jump *label112 equal *tmp204 false                           ...
  285:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  286:  set :buildRemoteBlock:cfg "z%-AAA##A##"                      CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  287:  read :buildRemoteBlock:x processor4 ".water1X"               ...
  288:  read :buildRemoteBlock:y processor4 ".water1Y"               ...
  289:  setaddr :buildRemoteBlock*retaddr *label113                  ...
  290:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label113                                              ...
  291:  read :buildRemoteBlock:x processor4 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  292:  read :buildRemoteBlock:y processor4 ".water2Y"               ...
  293:  setaddr :buildRemoteBlock*retaddr *label114                  ...
  294:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label114                                              ...
  295:  set :buildRemoteBlock:cfg "o%+FK<A####"                      CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  296:  read :buildRemoteBlock:x processor4 ".generatorX"            ...
  297:  read :buildRemoteBlock:y processor4 ".generatorY"            ...
  298:  setaddr :buildRemoteBlock*retaddr *label115                  ...
  299:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label115                                              ...
  300:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  301:  set :buildRemoteBlock:cfg "g)'%)######"                      CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.nodeX, oreLocator.nodeY);
  302:  read :buildRemoteBlock:x processor4 ".nodeX"                 ...
  303:  read :buildRemoteBlock:y processor4 ".nodeY"                 ...
  304:  setaddr :buildRemoteBlock*retaddr *label116                  ...
  305:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label116                                              ...
  306:  set :buildRemoteBlock:cfg "r**#-#+####"                      CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  307:  read :buildRemoteBlock:x processor4 ".panelX"                ...
  308:  read :buildRemoteBlock:y processor4 ".panelY"                ...
  309:  setaddr :buildRemoteBlock*retaddr *label117                  ...
  310:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label117                                              ...
  311:  set :buildRemoteBlock:cfg "k*/(7######"                      CoreBuilder.mnd: buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  312:  read :buildRemoteBlock:x processor4 ".batteryX"              ...
  313:  read :buildRemoteBlock:y processor4 ".batteryY"              ...
  314:  setaddr :buildRemoteBlock*retaddr *label118                  ...
  315:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label118                                              ...
  316:  set :buildRemoteBlock:cfg "**#######"                      CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  317:  read :buildRemoteBlock:x processor4 ".containerX"            ...
  318:  read :buildRemoteBlock:y processor4 ".containerY"            ...
  319:  setaddr :buildRemoteBlock*retaddr *label119                  ...
  320:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label119                                              ...
  321:  set .thoriumContainer :buildRemoteBlock*retval               ...
  322:  jump *label120 notEqual :buildRemoteBlock*retval null        CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  323:  set .thoriumContainer .thoriumDrill                          ...
        label *label120                                              ...
  324:  write .thoriumDrill processor1 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  325:  write .thoriumContainer processor1 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  326:  write .thoriumContainer processor3 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  327:  write false processor3 ":setThoriumContainer*finished"       ...
  328:  write 3 processor3 "@counter"                                ...
        label *label122                                              ...
  329:  wait 1e-15                                                   ...
  330:  read *tmp216 processor3 ":setThoriumContainer*finished"      ...
  331:  jump *label122 equal *tmp216 false                           ...
  332:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  333:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  334:  write 1 processor1 ".megaTarget"                             CoreBuilder.mnd: display.megaTarget = target;
  335:  read *tmp98 .controller ".polys"                             CoreBuilder.mnd: while controller.polys < 5 do
  336:  jump *label126 greaterThanEq *tmp98 5                        ...
        label *label720                                              ...
  337:  setaddr :supplyBase*retaddr *label127                        CoreBuilder.mnd: supplyBase();
  338:  call *label32 *invalid :supplyBase*retval                    ...
        label *label127                                              ...
  339:  read *tmp98 .controller ".polys"                             CoreBuilder.mnd: while controller.polys < 5 do
  340:  jump *label720 lessThan *tmp98 5                             ...
        label *label126                                              ...
  341:  set :buildBlockFromCfg:cfg "+(###A<###"                     CoreBuilder.mnd: controller.unloader6 = buildBlockFromCfg(UNLOADER6, @silicon);
  342:  set :buildBlockFromCfg:config @silicon                       ...
  343:  setaddr :buildBlockFromCfg*retaddr *label128                 ...
  344:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label128                                              ...
  345:  write :buildBlockFromCfg*retval .controller ".unloader6"     ...
  346:  set :buildBlockFromCfg.1:cfg "X+''%######"                   CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE2);
  347:  setaddr :buildBlockFromCfg.1*retaddr *label129               ...
  348:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label129                                              ...
  349:  set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#"                   CoreBuilder.mnd: var multiReconstructor = buildBlockFromCfg(MULTIPLICATIVE_REC);
  350:  setaddr :buildBlockFromCfg.1*retaddr *label131               ...
  351:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label131                                              ...
  352:  write :buildBlockFromCfg.1*retval .controller ".multiReconst CoreBuilder.mnd: controller.multiReconstructor = multiReconstructor;
  353:  write :buildBlockFromCfg.1*retval processor1 ".multiReconstr CoreBuilder.mnd: display.multiReconstructor = multiReconstructor;
  354:  setaddr :buildUnits*retaddr *label132                        CoreBuilder.mnd: buildUnits();
  355:  call *label40 *invalid :buildUnits*retval                    ...
        label *label132                                              ...
  356:  read *tmp99 .controller ".megas"                             CoreBuilder.mnd: while controller.megas < 1 do
  357:  jump *label135 greaterThanEq *tmp99 1                        ...
        label *label721                                              ...
  358:  setaddr :supplyBase*retaddr *label136                        CoreBuilder.mnd: supplyBase();
  359:  call *label32 *invalid :supplyBase*retval                    ...
        label *label136                                              ...
  360:  read *tmp99 .controller ".megas"                             CoreBuilder.mnd: while controller.megas < 1 do
  361:  jump *label721 lessThan *tmp99 1                             ...
        label *label135                                              ...
  362:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  363:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  364:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: processor3.enabled = false;
  365:  control enabled processor4 false 0 0 0                       CoreBuilder.mnd: processor4.enabled = false;
  366:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: processor5.enabled = false;
  367:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  368:  setaddr :flagUnits*retaddr *label138                         ...
  369:  call *label41 *invalid :flagUnits*retval                     ...
        label *label138                                              ...
  370:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  371:  setaddr :flagUnits*retaddr *label139                         ...
  372:  call *label41 *invalid :flagUnits*retval                     ...
        label *label139                                              ...
  373:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  374:  setaddr :flagUnits*retaddr *label140                         ...
  375:  call *label41 *invalid :flagUnits*retval                     ...
        label *label140                                              ...
  376:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  377:  setaddr :flagUnits*retaddr *label141                         ...
  378:  call *label41 *invalid :flagUnits*retval                     ...
        label *label141                                              ...
        label *label142                                              CoreBuilder.mnd: while true do
  379:  op sub :lineUpUnits:y @thisy 6                               CoreBuilder.mnd: lineUpUnits(@thisy -  6, @mega);
  380:  ubind @mega                                                  CoreBuilder.mnd: var firstUnit = ubind(unit);
  381:  set :lineUpUnits:firstUnit @unit                             ...
        label *label723                                              CoreBuilder.mnd: do
  382:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  383:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  384:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  385:  ubind @mega                                                  CoreBuilder.mnd: ubind(unit);
  386:  jump *label723 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  387:  op sub :lineUpUnits:y @thisy 10                              CoreBuilder.mnd: lineUpUnits(@thisy - 10, @poly);
  388:  set :lineUpUnits:unit @poly                                  ...
  389:  setaddr :lineUpUnits*retaddr *label146                       ...
  390:  call *label42 *invalid :lineUpUnits*retval                   ...
        label *label146                                              ...
  391:  op sub :lineUpUnits:y @thisy 14                              CoreBuilder.mnd: lineUpUnits(@thisy - 14, @mono);
  392:  set :lineUpUnits:unit @mono                                  ...
  393:  setaddr :lineUpUnits*retaddr *label147                       ...
  394:  call *label42 *invalid :lineUpUnits*retval                   ...
        label *label147                                              ...
  395:  op sub :lineUpUnits:y @thisy 18                              CoreBuilder.mnd: lineUpUnits(@thisy - 18, @flare);
  396:  set :lineUpUnits:unit @flare                                 ...
  397:  setaddr :lineUpUnits*retaddr *label148                       ...
  398:  call *label42 *invalid :lineUpUnits*retval                   ...
        label *label148                                              ...
  399:  jump *label142 always 0 0                                    CoreBuilder.mnd: while true do
        label *label21                                               Actions.mnd: void mineOre(ore, amount, block)
  400:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  401:  write :mineOre:amount .display ".transportTarget"            Actions.mnd: display.transportTarget = target;
  402:  write :mineOre:ore .display ".transportItem"                 Actions.mnd: display.transportItem = item;
  403:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  404:  jump *label451 notEqual *tmp254 false                        ...
  405:  set .ERROR "Cannot locate ore"                               Actions.mnd: ERROR = error;
  406:  stop                                                         Actions.mnd: stopProcessor();
        label *label451                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  407:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label512                                              Actions.mnd: do
  408:  sensor *tmp235 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  409:  jump *label513 equal *tmp235 null                            ...
  410:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label513                                              ...
  411:  ucontrol approach :locateOre:x :locateOre:y 5.5 0 0          Actions.mnd: approach(x, y, RADIUS - 0.5);
  412:  ucontrol within :locateOre:x :locateOre:y 6 *tmp238 0        Actions.mnd: while !within(x, y, RADIUS);
  413:  jump *label512 equal *tmp238 false                           Actions.mnd: do
  414:  sensor *tmp259 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  415:  jump *label194 equal *tmp259 :mineOre:ore                    ...
  416:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  417:  jump *label495 equal *tmp240 null                            ...
        label *label493                                              ...
  418:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  419:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  420:  jump *label493 notEqual *tmp240 null                         ...
        label *label495                                              ...
        label *label194                                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  421:  write "Mining..." .display ".status3"                        Actions.mnd: display.status3 = text;
  422:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label198                                              Actions.mnd: do
  423:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  424:  op notEqual *tmp264 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  425:  op notEqual *tmp265 :mineOre:item :mineOre:ore               ...
  426:  op land *tmp266 *tmp264 *tmp265                              ...
  427:  jump *label200 notEqual *tmp266 false                        ...
  428:  ucontrol mine :locateOre:x :locateOre:y 0 0 0                Actions.mnd: mine(x, y);
  429:  jump *label200 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  430:  sensor *tmp270 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  431:  jump *label198 lessThan *tmp270 :mineOre:amount              Actions.mnd: do
        label *label200                                              ...
  432:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  433:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  434:  sensor *tmp244 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  435:  jump *label552 notEqual *tmp244 :mineOre:ore                 ...
  436:  sensor *tmp242 :mineOre:block @x                             Actions.mnd: moveTo(block.@x, block.@y, radius);
  437:  sensor *tmp243 :mineOre:block @y                             ...
  438:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  439:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  440:  jump *label546 notEqual *tmp230 false                        ...
        label *label544                                              ...
  441:  ucontrol approach *tmp242 *tmp243 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  442:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  443:  jump *label544 equal *tmp230 false                           ...
        label *label546                                              ...
  444:  sensor :depositItems:cap :mineOre:block @itemCapacity        Actions.mnd: var cap = block.@itemCapacity;
        label *label549                                              Actions.mnd: do
  445:  ucontrol itemDrop :mineOre:block 30 0 0 0                    Actions.mnd: itemDrop(block, capacity);
  446:  sensor *tmp248 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  447:  op mul *tmp249 *tmp248 :depositItems:cap                     ...
  448:  sensor *tmp250 :mineOre:block :mineOre:ore                   ...
  449:  jump *label549 greaterThan *tmp249 *tmp250                   Actions.mnd: do
  450:  jump *label557 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label552                                              ...
  451:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  452:  jump *label556 equal *tmp252 null                            ...
        label *label554                                              ...
  453:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  454:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  455:  jump *label554 notEqual *tmp252 null                         ...
        label *label556                                              ...
        label *label557                                              Actions.mnd: if @unit.@firstItem == item then
  456:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  457:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
  458:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)
        label *label22                                               Actions.mnd: void mineOre(ore)
  459:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  460:  write :mineOre.1:ore .display ".item2"                       Actions.mnd: display.item2 = item;
  461:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  462:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  463:  set :mineOre:amount 30                                       ...
  464:  set :mineOre:block .core                                     ...
  465:  setaddr :mineOre*retaddr *label208                           ...
  466:  call *label21 *invalid :mineOre*retval                       ...
        label *label208                                              ...
  467:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label24                                               Actions.mnd: void supplyBlock(block, ore)
  468:  write "Supplying " .display ".status2"                       Actions.mnd: display.status2 = text;
  469:  write :supplyBlock:ore .display ".item2"                     Actions.mnd: display.item2 = item;
  470:  write :supplyBlock:block .display ".block2"                  Actions.mnd: display.block2 = block;
  471:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  472:  sensor *tmp287 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  473:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp2 ...
  474:  jump *label222 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  475:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  476:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  477:  set :mineOre:block :supplyBlock:block                        ...
  478:  setaddr :mineOre*retaddr *label224                           ...
  479:  call *label21 *invalid :mineOre*retval                       ...
        label *label224                                              ...
        label *label222                                              Actions.mnd: if missing > 0 then
  480:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label31                                               CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation)
  481:  read *tmp303 :unpackCfg:cfg 0                                CoreBuilder.mnd: type = lookup(:block, char(cfg, index++) - 35);
  482:  op sub *tmp304 *tmp303 35                                    ...
  483:  lookup block :unpackCfg:type *tmp304                         ...
  484:  read *tmp307 :unpackCfg:cfg 1                                CoreBuilder.mnd: x = char(cfg, index++) - 35 - 7;
  485:  op sub :unpackCfg:x *tmp307 42                               ...
  486:  read *tmp311 :unpackCfg:cfg 2                                CoreBuilder.mnd: y = char(cfg, index++) - 35 - 7;
  487:  op sub :unpackCfg:y *tmp311 42                               ...
  488:  read *tmp315 :unpackCfg:cfg 3                                CoreBuilder.mnd: cu = char(cfg, index++) - 35;
  489:  op sub :unpackCfg:cu *tmp315 35                              ...
  490:  read *tmp318 :unpackCfg:cfg 4                                CoreBuilder.mnd: pb = char(cfg, index++) - 35;
  491:  op sub :unpackCfg:pb *tmp318 35                              ...
  492:  read *tmp321 :unpackCfg:cfg 5                                CoreBuilder.mnd: gr = char(cfg, index++) - 35;
  493:  op sub :unpackCfg:gr *tmp321 35                              ...
  494:  read *tmp324 :unpackCfg:cfg 6                                CoreBuilder.mnd: si = char(cfg, index++) - 35;
  495:  op sub :unpackCfg:si *tmp324 35                              ...
  496:  read *tmp327 :unpackCfg:cfg 7                                CoreBuilder.mnd: ti = char(cfg, index++) - 35;
  497:  op sub :unpackCfg:ti *tmp327 35                              ...
  498:  read *tmp330 :unpackCfg:cfg 8                                CoreBuilder.mnd: mg = char(cfg, index++) - 35;
  499:  op sub :unpackCfg:mg *tmp330 35                              ...
  500:  read *tmp333 :unpackCfg:cfg 9                                CoreBuilder.mnd: th = char(cfg, index++) - 35;
  501:  op sub :unpackCfg:th *tmp333 35                              ...
  502:  read *tmp336 :unpackCfg:cfg 10                               CoreBuilder.mnd: rotation = char(cfg, index++) - 35;
  503:  op sub :unpackCfg:rotation *tmp336 35                        ...
  504:  return :unpackCfg*retaddr                                    CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation)
        label *label32                                               CoreBuilder.mnd: void supplyBase()
  505:  jump *label238 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  506:  write "Phase 2: servicing thorium drill" .display ".status1" Actions.mnd: display.status1 = text;
  507:  sensor *tmp291 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  508:  op min :transportStatus:target *tmp291 30                    ...
  509:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  510:  write @coal .display ".transportItem"                        Actions.mnd: display.transportItem = item;
  511:  write "Transferring " .display ".status2"                    Actions.mnd: display.status2 = text;
  512:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  513:  write .thoriumGenerator .display ".block2"                   Actions.mnd: display.block2 = block;
  514:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label530                                              Actions.mnd: do
  515:  sensor *tmp235 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  516:  jump *label531 equal *tmp235 null                            ...
  517:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label531                                              ...
  518:  ucontrol approach .coreX .coreY 5.5 0 0                      Actions.mnd: approach(x, y, RADIUS - 0.5);
  519:  ucontrol within .coreX .coreY 6 *tmp238 0                    Actions.mnd: while !within(x, y, RADIUS);
  520:  jump *label530 equal *tmp238 false                           Actions.mnd: do
  521:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  522:  jump *label507 equal *tmp240 null                            ...
        label *label505                                              ...
  523:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  524:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  525:  jump *label505 notEqual *tmp240 null                         ...
        label *label507                                              ...
        label *label459                                              Actions.mnd: do
  526:  ucontrol itemTake .core @coal 30 0 0                         Actions.mnd: itemTake(core, item, capacity);
  527:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  528:  op notEqual *tmp294 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  529:  op notEqual *tmp295 :supplyBlockFromCore:unitItem @coal      ...
  530:  op land *tmp296 *tmp294 *tmp295                              ...
  531:  jump *label460 equal *tmp296 false                           ...
  532:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label460                                              Actions.mnd: if unitItem != null and unitItem != item then
  533:  sensor *tmp298 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  534:  op lessThan *tmp299 *tmp298 30                               ...
  535:  sensor *tmp300 .core @coal                                   ...
  536:  op land *tmp301 *tmp299 *tmp300                              ...
  537:  jump *label459 notEqual *tmp301 false                        Actions.mnd: do
  538:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  539:  sensor *tmp244 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  540:  jump *label602 notEqual *tmp244 @coal                        ...
  541:  sensor *tmp242 .thoriumGenerator @x                          Actions.mnd: moveTo(block.@x, block.@y, radius);
  542:  sensor *tmp243 .thoriumGenerator @y                          ...
  543:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  544:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  545:  jump *label596 notEqual *tmp230 false                        ...
        label *label594                                              ...
  546:  ucontrol approach *tmp242 *tmp243 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  547:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  548:  jump *label594 equal *tmp230 false                           ...
        label *label596                                              ...
  549:  sensor :depositItems:cap .thoriumGenerator @itemCapacity     Actions.mnd: var cap = block.@itemCapacity;
        label *label599                                              Actions.mnd: do
  550:  ucontrol itemDrop .thoriumGenerator 30 0 0 0                 Actions.mnd: itemDrop(block, capacity);
  551:  sensor *tmp248 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  552:  op mul *tmp249 *tmp248 :depositItems:cap                     ...
  553:  sensor *tmp250 .thoriumGenerator @coal                       ...
  554:  jump *label599 greaterThan *tmp249 *tmp250                   Actions.mnd: do
  555:  jump *label607 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label602                                              ...
  556:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  557:  jump *label606 equal *tmp252 null                            ...
        label *label604                                              ...
  558:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  559:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  560:  jump *label604 notEqual *tmp252 null                         ...
        label *label606                                              ...
        label *label607                                              Actions.mnd: if @unit.@firstItem == item then
  561:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  562:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
  563:  sensor *tmp273 .thoriumContainer @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  564:  op min :transportStatus:target *tmp273 30                    ...
  565:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  566:  write @thorium .display ".transportItem"                     Actions.mnd: display.transportItem = item;
  567:  write "Fetching " .display ".status2"                        Actions.mnd: display.status2 = text;
  568:  write @thorium .display ".item2"                             Actions.mnd: display.item2 = item;
  569:  write .thoriumContainer .display ".block2"                   Actions.mnd: display.block2 = block;
  570:  sensor *tmp275 .thoriumContainer @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  571:  sensor *tmp276 .thoriumContainer @y                          ...
  572:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label624                                              Actions.mnd: do
  573:  sensor *tmp235 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  574:  jump *label625 equal *tmp235 null                            ...
  575:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label625                                              ...
  576:  ucontrol approach *tmp275 *tmp276 5.5 0 0                    Actions.mnd: approach(x, y, RADIUS - 0.5);
  577:  ucontrol within *tmp275 *tmp276 6 *tmp238 0                  Actions.mnd: while !within(x, y, RADIUS);
  578:  jump *label624 equal *tmp238 false                           Actions.mnd: do
  579:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  580:  jump *label634 equal *tmp240 null                            ...
        label *label632                                              ...
  581:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  582:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  583:  jump *label632 notEqual *tmp240 null                         ...
        label *label634                                              ...
        label *label636                                              Actions.mnd: do
  584:  ucontrol itemTake .thoriumContainer @thorium 30 0 0          Actions.mnd: itemTake(block, item, capacity);
  585:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  586:  op notEqual *tmp278 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  587:  op notEqual *tmp279 :fetchBlock:unitItem @thorium            ...
  588:  op land *tmp280 *tmp278 *tmp279                              ...
  589:  jump *label637 equal *tmp280 false                           ...
  590:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label637                                              Actions.mnd: if unitItem != null and unitItem != item then
  591:  sensor *tmp282 @unit @thorium                                Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  592:  op lessThan *tmp283 *tmp282 30                               ...
  593:  sensor *tmp284 .thoriumContainer @thorium                    ...
  594:  op land *tmp285 *tmp283 *tmp284                              ...
  595:  jump *label636 notEqual *tmp285 false                        Actions.mnd: do
  596:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  597:  sensor *tmp244 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  598:  jump *label657 notEqual *tmp244 @thorium                     ...
  599:  sensor *tmp242 .core @x                                      Actions.mnd: moveTo(block.@x, block.@y, radius);
  600:  sensor *tmp243 .core @y                                      ...
  601:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  602:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  603:  jump *label651 notEqual *tmp230 false                        ...
        label *label649                                              ...
  604:  ucontrol approach *tmp242 *tmp243 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  605:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  606:  jump *label649 equal *tmp230 false                           ...
        label *label651                                              ...
  607:  sensor :depositItems:cap .core @itemCapacity                 Actions.mnd: var cap = block.@itemCapacity;
        label *label654                                              Actions.mnd: do
  608:  ucontrol itemDrop .core 30 0 0 0                             Actions.mnd: itemDrop(block, capacity);
  609:  sensor *tmp248 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  610:  op mul *tmp249 *tmp248 :depositItems:cap                     ...
  611:  sensor *tmp250 .core @thorium                                ...
  612:  jump *label654 greaterThan *tmp249 *tmp250                   Actions.mnd: do
  613:  jump *label662 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label657                                              ...
  614:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  615:  jump *label661 equal *tmp252 null                            ...
        label *label659                                              ...
  616:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  617:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  618:  jump *label659 notEqual *tmp252 null                         ...
        label *label661                                              ...
        label *label662                                              Actions.mnd: if @unit.@firstItem == item then
  619:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  620:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
  621:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label238                                              ...
  622:  read *tmp97 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 3 then
  623:  jump *label244 lessThanEq *tmp97 3                           ...
  624:  write "Phase 1: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  625:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  626:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  627:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  628:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  629:  set :mineOre:ore @coal                                       Actions.mnd: mineOre(ore, capacity, core);
  630:  set :mineOre:amount 30                                       ...
  631:  set :mineOre:block .core                                     ...
  632:  setaddr :mineOre*retaddr *label614                           ...
  633:  call *label21 *invalid :mineOre*retval                       ...
        label *label614                                              ...
  634:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 3 then
        label *label244                                              ...
  635:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  636:  jump *label250 notEqual .unloader1 null                      CoreBuilder.mnd: if unloader1 == null then
  637:  sensor *tmp343 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  638:  jump *label252 greaterThanEq *tmp343 .targetGraphite         ...
  639:  sensor *tmp346 .press @coal                                  CoreBuilder.mnd: if press.@coal < 5 then
  640:  jump *label254 greaterThanEq *tmp346 5                       ...
  641:  write "Goal 1: graphite requirement" .display ".status1"     Actions.mnd: display.status1 = text;
  642:  set :supplyBlock:block .press                                CoreBuilder.mnd: supplyBlock(press, @coal);
  643:  set :supplyBlock:ore @coal                                   ...
  644:  setaddr :supplyBlock*retaddr *label257                       ...
  645:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label257                                              ...
  646:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label254                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label252                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  647:  sensor *tmp349 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  648:  jump *label258 greaterThanEq *tmp349 .targetSilicon          ...
  649:  sensor *tmp352 .smelter @coal                                CoreBuilder.mnd: if smelter.@coal < 5 then
  650:  jump *label260 greaterThanEq *tmp352 5                       ...
  651:  write "Goal 2: coal for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  652:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @coal);
  653:  set :supplyBlock:ore @coal                                   ...
  654:  setaddr :supplyBlock*retaddr *label263                       ...
  655:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label263                                              ...
  656:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  657:  jump *label261 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label260                                              ...
  658:  sensor *tmp355 .smelter @sand                                CoreBuilder.mnd: elsif smelter.@sand < 5 then
  659:  jump *label264 greaterThanEq *tmp355 5                       ...
  660:  write "Goal 3: sand for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  661:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @sand);
  662:  set :supplyBlock:ore @sand                                   ...
  663:  setaddr :supplyBlock*retaddr *label267                       ...
  664:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label267                                              ...
  665:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label264                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label261                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label258                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  666:  sensor *tmp358 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < powerTarget then
  667:  jump *label268 greaterThanEq *tmp358 .powerTarget            ...
  668:  sensor *tmp361 .generator @coal                              CoreBuilder.mnd: if generator.@coal < 2 then
  669:  jump *label270 greaterThanEq *tmp361 2                       ...
  670:  write "Goal 4: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  671:  set :supplyBlock:block .generator                            CoreBuilder.mnd: supplyBlock(generator, @coal);
  672:  set :supplyBlock:ore @coal                                   ...
  673:  setaddr :supplyBlock*retaddr *label273                       ...
  674:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label273                                              ...
  675:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label270                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label268                                              CoreBuilder.mnd: if battery.@totalPower < powerTarget then
        label *label250                                              CoreBuilder.mnd: if unloader1 == null then
  676:  set *tmp366 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  677:  sensor *tmp364 .core @titanium                               ...
  678:  jump *label275 greaterThanEq *tmp364 .targetTitanium         ...
  679:  sensor *tmp367 .core @titanium                               ...
  680:  op sub *tmp368 .targetTitanium *tmp367                       ...
  681:  op min *tmp366 7 *tmp368                                     ...
        label *label275                                              ...
  682:  sensor *tmp370 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  683:  jump *label276 greaterThanEq *tmp370 *tmp366                 ...
  684:  jump *label277 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  685:  sensor *tmp375 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
  686:  op mul *tmp376 .unloader1 .powerTarget                       ...
  687:  jump *label280 greaterThanEq *tmp375 *tmp376                 ...
  688:  write "Goal 5: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  689:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  690:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  691:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  692:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  693:  set :mineOre:ore @coal                                       Actions.mnd: mineOre(ore, capacity, core);
  694:  set :mineOre:amount 30                                       ...
  695:  set :mineOre:block .core                                     ...
  696:  setaddr :mineOre*retaddr *label730                           ...
  697:  call *label21 *invalid :mineOre*retval                       ...
        label *label730                                              ...
  698:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
        label *label280                                              ...
  699:  sensor *tmp379 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  700:  jump *label284 greaterThanEq *tmp379 .targetSilicon          ...
  701:  write "Goal 6: silicon requirement" .display ".status1"      Actions.mnd: display.status1 = text;
  702:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  703:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  704:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  705:  jump *label288 greaterThanEq :supplyBase0:coal :supplyBase0: ...
  706:  set :mineOre.1:ore @coal                                     ...
        label *label288                                              ...
  707:  setaddr :mineOre.1*retaddr *label289                         CoreBuilder.mnd: mineOre(ore);
  708:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label289                                              ...
  709:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label284                                              ...
  710:  sensor *tmp386 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  711:  jump *label290 greaterThanEq *tmp386 .targetCopper           ...
  712:  write "Goal 7: copper requirement" .display ".status1"       Actions.mnd: display.status1 = text;
  713:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  714:  setaddr :mineOre.1*retaddr *label293                         ...
  715:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label293                                              ...
  716:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label290                                              ...
  717:  sensor *tmp389 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  718:  jump *label294 greaterThanEq *tmp389 .targetLead             ...
  719:  write "Goal 8: lead requirement" .display ".status1"         Actions.mnd: display.status1 = text;
  720:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  721:  setaddr :mineOre.1*retaddr *label297                         ...
  722:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label297                                              ...
  723:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label294                                              ...
  724:  sensor *tmp392 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  725:  jump *label298 greaterThanEq *tmp392 .targetMetaglass        ...
  726:  write "Goal 9: metaglass requirement" .display ".status1"    Actions.mnd: display.status1 = text;
  727:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  728:  setaddr :mineOre.1*retaddr *label301                         ...
  729:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label301                                              ...
  730:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label298                                              ...
  731:  write "Goal 10: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  732:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  733:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  734:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  735:  jump *label304 greaterThan :supplyBase0:coal.1 :supplyBase0: ...
  736:  set :mineOre.1:ore @coal                                     ...
        label *label304                                              ...
  737:  setaddr :mineOre.1*retaddr *label305                         CoreBuilder.mnd: mineOre(ore);
  738:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label305                                              ...
  739:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label276                                              ...
  740:  write "Goal 11: Fetching titanium" .display ".status1"       Actions.mnd: display.status1 = text;
  741:  sensor *tmp273 .titaniumDrill @itemCapacity                  Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  742:  op min :transportStatus:target *tmp273 30                    ...
  743:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  744:  write @titanium .display ".transportItem"                    Actions.mnd: display.transportItem = item;
  745:  write "Fetching " .display ".status2"                        Actions.mnd: display.status2 = text;
  746:  write @titanium .display ".item2"                            Actions.mnd: display.item2 = item;
  747:  write .titaniumDrill .display ".block2"                      Actions.mnd: display.block2 = block;
  748:  sensor *tmp275 .titaniumDrill @x                             Actions.mnd: moveToEmpty(block.@x, block.@y);
  749:  sensor *tmp276 .titaniumDrill @y                             ...
  750:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label675                                              Actions.mnd: do
  751:  sensor *tmp235 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  752:  jump *label676 equal *tmp235 null                            ...
  753:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label676                                              ...
  754:  ucontrol approach *tmp275 *tmp276 5.5 0 0                    Actions.mnd: approach(x, y, RADIUS - 0.5);
  755:  ucontrol within *tmp275 *tmp276 6 *tmp238 0                  Actions.mnd: while !within(x, y, RADIUS);
  756:  jump *label675 equal *tmp238 false                           Actions.mnd: do
  757:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  758:  jump *label685 equal *tmp240 null                            ...
        label *label683                                              ...
  759:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  760:  sensor *tmp240 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  761:  jump *label683 notEqual *tmp240 null                         ...
        label *label685                                              ...
        label *label687                                              Actions.mnd: do
  762:  ucontrol itemTake .titaniumDrill @titanium 30 0 0            Actions.mnd: itemTake(block, item, capacity);
  763:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  764:  op notEqual *tmp278 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  765:  op notEqual *tmp279 :fetchBlock:unitItem @titanium           ...
  766:  op land *tmp280 *tmp278 *tmp279                              ...
  767:  jump *label688 equal *tmp280 false                           ...
  768:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label688                                              Actions.mnd: if unitItem != null and unitItem != item then
  769:  sensor *tmp282 @unit @titanium                               Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  770:  op lessThan *tmp283 *tmp282 30                               ...
  771:  sensor *tmp284 .titaniumDrill @titanium                      ...
  772:  op land *tmp285 *tmp283 *tmp284                              ...
  773:  jump *label687 notEqual *tmp285 false                        Actions.mnd: do
  774:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  775:  sensor *tmp244 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  776:  jump *label708 notEqual *tmp244 @titanium                    ...
  777:  sensor *tmp242 .core @x                                      Actions.mnd: moveTo(block.@x, block.@y, radius);
  778:  sensor *tmp243 .core @y                                      ...
  779:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  780:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  781:  jump *label702 notEqual *tmp230 false                        ...
        label *label700                                              ...
  782:  ucontrol approach *tmp242 *tmp243 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  783:  ucontrol within *tmp242 *tmp243 6 *tmp230 0                  Actions.mnd: while !within(x, y, radius) do
  784:  jump *label700 equal *tmp230 false                           ...
        label *label702                                              ...
  785:  sensor :depositItems:cap .core @itemCapacity                 Actions.mnd: var cap = block.@itemCapacity;
        label *label705                                              Actions.mnd: do
  786:  ucontrol itemDrop .core 30 0 0 0                             Actions.mnd: itemDrop(block, capacity);
  787:  sensor *tmp248 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  788:  op mul *tmp249 *tmp248 :depositItems:cap                     ...
  789:  sensor *tmp250 .core @titanium                               ...
  790:  jump *label705 greaterThan *tmp249 *tmp250                   Actions.mnd: do
  791:  jump *label713 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label708                                              ...
  792:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  793:  jump *label712 equal *tmp252 null                            ...
        label *label710                                              ...
  794:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  795:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  796:  jump *label710 notEqual *tmp252 null                         ...
        label *label712                                              ...
        label *label713                                              Actions.mnd: if @unit.@firstItem == item then
  797:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  798:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
        label *label277                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  799:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label33                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
  800:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  801:  op sign *tmp400 :meetTarget:lead 0                           ...
  802:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  803:  op sign *tmp400 :meetTarget:graphite 0                       ...
  804:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  805:  op sign *tmp400 :meetTarget:silicon 0                        ...
  806:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  807:  op sign *tmp400 :meetTarget:titanium 0                       ...
  808:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  809:  op sign *tmp400 :meetTarget:metaglass 0                      ...
  810:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  811:  op sign *tmp400 :meetTarget:thorium 0                        ...
  812:  op add :meetTarget:count :meetTarget:count *tmp400           ...
  813:  write :meetTarget:count .display ".totalTargets"             CoreBuilder.mnd: display.totalTargets = count;
  814:  write :meetTarget:block .display ".nextBlock"                CoreBuilder.mnd: display.nextBlock = block;
  815:  write :meetTarget:copper .display ".targetCopper"            CoreBuilder.mnd: display.targetCopper = copper;
  816:  write :meetTarget:lead .display ".targetLead"                CoreBuilder.mnd: display.targetLead = lead;
  817:  write :meetTarget:graphite .display ".targetGraphite"        CoreBuilder.mnd: display.targetGraphite = graphite;
  818:  write :meetTarget:silicon .display ".targetSilicon"          CoreBuilder.mnd: display.targetSilicon = silicon;
  819:  write :meetTarget:titanium .display ".targetTitanium"        CoreBuilder.mnd: display.targetTitanium = titanium;
  820:  write :meetTarget:metaglass .display ".targetMetaglass"      CoreBuilder.mnd: display.targetMetaglass = metaglass;
  821:  write :meetTarget:thorium .display ".targetThorium"          CoreBuilder.mnd: display.targetThorium = thorium;
  822:  set .targetCopper :meetTarget:copper                         CoreBuilder.mnd: targetCopper = copper;
  823:  op add *tmp401 :meetTarget:lead .leadSurplus                 CoreBuilder.mnd: targetLead = lead + leadSurplus + 1;
  824:  op add .targetLead *tmp401 1                                 ...
  825:  set .targetGraphite :meetTarget:graphite                     CoreBuilder.mnd: targetGraphite = graphite;
  826:  set .targetSilicon :meetTarget:silicon                       CoreBuilder.mnd: targetSilicon = silicon;
  827:  set .targetTitanium :meetTarget:titanium                     CoreBuilder.mnd: targetTitanium = titanium;
  828:  set .targetMetaglass :meetTarget:metaglass                   CoreBuilder.mnd: targetMetaglass = metaglass;
  829:  set .targetThorium :meetTarget:thorium                       CoreBuilder.mnd: targetThorium = thorium;
  830:  op add *tmp403 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  831:  write *tmp403 .controller ".pressTarget"                     ...
  832:  op add *tmp404 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  833:  write *tmp404 .controller ".smelterTarget"                   ...
  834:  op add *tmp405 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  835:  write *tmp405 .controller ".kilnTarget"                      ...
  836:  write *tmp401 .controller ".leadReserve"                     CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  837:  op sign *tmp407 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  838:  op mul *tmp408 *tmp407 20                                    ...
  839:  op add *tmp409 :meetTarget:silicon *tmp408                   ...
  840:  write *tmp409 .controller ".siliconReserve"                  ...
  841:  op sign *tmp410 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  842:  op mul *tmp411 *tmp410 20                                    ...
  843:  op add *tmp412 :meetTarget:graphite *tmp411                  ...
  844:  write *tmp412 .controller ".graphiteReserve"                 ...
        label *label319                                              CoreBuilder.mnd: while !targetMet() do
  845:  sensor *tmp414 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  846:  jump *label323 greaterThanEq *tmp414 .targetCopper           ...
  847:  set *tmp413 false                                            ...
  848:  jump *label322 always 0 0                                    ...
        label *label323                                              ...
  849:  sensor *tmp417 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  850:  jump *label325 greaterThanEq *tmp417 .targetLead             ...
  851:  set *tmp413 false                                            ...
  852:  jump *label322 always 0 0                                    ...
        label *label325                                              ...
  853:  sensor *tmp420 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  854:  jump *label327 greaterThanEq *tmp420 .targetGraphite         ...
  855:  set *tmp413 false                                            ...
  856:  jump *label322 always 0 0                                    ...
        label *label327                                              ...
  857:  sensor *tmp423 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  858:  jump *label329 greaterThanEq *tmp423 .targetSilicon          ...
  859:  set *tmp413 false                                            ...
  860:  jump *label322 always 0 0                                    ...
        label *label329                                              ...
  861:  sensor *tmp426 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  862:  jump *label331 greaterThanEq *tmp426 .targetTitanium         ...
  863:  set *tmp413 false                                            ...
  864:  jump *label322 always 0 0                                    ...
        label *label331                                              ...
  865:  sensor *tmp429 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  866:  jump *label333 greaterThanEq *tmp429 .targetMetaglass        ...
  867:  set *tmp413 false                                            ...
  868:  jump *label322 always 0 0                                    ...
        label *label333                                              ...
  869:  sensor *tmp432 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  870:  jump *label335 greaterThanEq *tmp432 .targetThorium          ...
  871:  set *tmp413 false                                            ...
  872:  jump *label322 always 0 0                                    ...
        label *label335                                              ...
  873:  set *tmp413 true                                             CoreBuilder.mnd: return true;
  874:  jump *label322 always 0 0                                    ...
        label *label322                                              CoreBuilder.mnd: while !targetMet() do
  875:  jump *label321 notEqual *tmp413 false                        ...
  876:  setaddr :supplyBase*retaddr *label337                        CoreBuilder.mnd: supplyBase();
  877:  call *label32 *invalid :supplyBase*retval                    ...
        label *label337                                              ...
  878:  jump *label319 always 0 0                                    CoreBuilder.mnd: while !targetMet() do
        label *label321                                              ...
  879:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
        label *label34                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config)
  880:  set :meetTarget:block :buildBlock:block                      CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium);
  881:  set :meetTarget:copper :buildBlock:copper                    ...
  882:  set :meetTarget:lead :buildBlock:lead                        ...
  883:  set :meetTarget:graphite :buildBlock:graphite                ...
  884:  set :meetTarget:silicon :buildBlock:silicon                  ...
  885:  set :meetTarget:titanium :buildBlock:titanium                ...
  886:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  887:  set :meetTarget:thorium :buildBlock:thorium                  ...
  888:  setaddr :meetTarget*retaddr *label342                        ...
  889:  call *label33 *invalid :meetTarget*retval                    ...
        label *label342                                              ...
  890:  write :buildBlock:block .blockBuilder ":buildBlockAt:block"  CoreBuilder.mnd: return blockBuilder.buildBlockAt(block, x, y, rotation, config);
  891:  write :buildBlock:x .blockBuilder ":buildBlockAt:x"          ...
  892:  write :buildBlock:y .blockBuilder ":buildBlockAt:y"          ...
  893:  write :buildBlock:rotation .blockBuilder ":buildBlockAt:rota ...
  894:  write :buildBlock:config .blockBuilder ":buildBlockAt:config ...
  895:  write false .blockBuilder ":buildBlockAt*finished"           ...
  896:  write 1 .blockBuilder "@counter"                             ...
        label *label343                                              ...
  897:  wait 1e-15                                                   ...
  898:  read *tmp456 .blockBuilder ":buildBlockAt*finished"          ...
  899:  jump *label343 equal *tmp456 false                           ...
  900:  read :buildBlock*retval .blockBuilder ":buildBlockAt*retval" ...
  901:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config)
        label *label35                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  902:  op add *tmp458 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  903:  jump *label345 lessThanEq *tmp458 0                          ...
  904:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
  905:  setaddr :unpackCfg*retaddr *label347                         ...
  906:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label347                                              ...
  907:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null);
  908:  set :buildBlock:x :buildRemoteBlock:x                        ...
  909:  set :buildBlock:y :buildRemoteBlock:y                        ...
  910:  set :buildBlock:copper :unpackCfg:cu                         ...
  911:  set :buildBlock:lead :unpackCfg:pb                           ...
  912:  set :buildBlock:graphite :unpackCfg:gr                       ...
  913:  set :buildBlock:silicon :unpackCfg:si                        ...
  914:  set :buildBlock:titanium :unpackCfg:ti                       ...
  915:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  916:  set :buildBlock:thorium :unpackCfg:th                        ...
  917:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  918:  set :buildBlock:config null                                  ...
  919:  setaddr :buildBlock*retaddr *label348                        ...
  920:  call *label34 *invalid :buildBlock*retval                    ...
        label *label348                                              ...
  921:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  922:  return :buildRemoteBlock*retaddr                             ...
        label *label345                                              CoreBuilder.mnd: if x + y > 0 then
  923:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  924:  return :buildRemoteBlock*retaddr                             ...
        label *label36                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  925:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
  926:  setaddr :unpackCfg*retaddr *label350                         ...
  927:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label350                                              ...
  928:  op add *tmp461 .coreX :unpackCfg:x                           CoreBuilder.mnd: return buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config);
  929:  op add *tmp462 .coreY :unpackCfg:y                           ...
  930:  set :buildBlock:block :unpackCfg:type                        ...
  931:  set :buildBlock:x *tmp461                                    ...
  932:  set :buildBlock:y *tmp462                                    ...
  933:  set :buildBlock:copper :unpackCfg:cu                         ...
  934:  set :buildBlock:lead :unpackCfg:pb                           ...
  935:  set :buildBlock:graphite :unpackCfg:gr                       ...
  936:  set :buildBlock:silicon :unpackCfg:si                        ...
  937:  set :buildBlock:titanium :unpackCfg:ti                       ...
  938:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  939:  set :buildBlock:thorium :unpackCfg:th                        ...
  940:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  941:  set :buildBlock:config :buildBlockFromCfg:config             ...
  942:  setaddr :buildBlock*retaddr *label351                        ...
  943:  call *label34 *invalid :buildBlock*retval                    ...
        label *label351                                              ...
  944:  set :buildBlockFromCfg*retval :buildBlock*retval             ...
  945:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label37                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  946:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  947:  set :buildBlockFromCfg:config null                           ...
  948:  setaddr :buildBlockFromCfg*retaddr *label353                 ...
  949:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label353                                              ...
  950:  set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval    CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  951:  return :buildBlockFromCfg.1*retaddr                          ...
        label *label38                                               CoreBuilder.mnd: void meetTarget(cfg)
  952:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  953:  setaddr :unpackCfg*retaddr *label355                         ...
  954:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label355                                              ...
  955:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th);
  956:  set :meetTarget:copper :unpackCfg:cu                         ...
  957:  set :meetTarget:lead :unpackCfg:pb                           ...
  958:  set :meetTarget:graphite :unpackCfg:gr                       ...
  959:  set :meetTarget:silicon :unpackCfg:si                        ...
  960:  set :meetTarget:titanium :unpackCfg:ti                       ...
  961:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  962:  set :meetTarget:thorium :unpackCfg:th                        ...
  963:  setaddr :meetTarget*retaddr *label356                        ...
  964:  call *label33 *invalid :meetTarget*retval                    ...
        label *label356                                              ...
  965:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label40                                               CoreBuilder.mnd: void buildUnits()
  966:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0);
  967:  set :meetTarget:copper 0                                     ...
  968:  set :meetTarget:lead 0                                       ...
  969:  set :meetTarget:graphite 0                                   ...
  970:  set :meetTarget:silicon 0                                    ...
  971:  set :meetTarget:titanium 0                                   ...
  972:  set :meetTarget:metaglass 0                                  ...
  973:  set :meetTarget:thorium 0                                    ...
  974:  setaddr :meetTarget*retaddr *label361                        ...
  975:  call *label33 *invalid :meetTarget*retval                    ...
        label *label361                                              ...
  976:  write 0 .display ".totalTargets"                             CoreBuilder.mnd: display.totalTargets = 0;
  977:  write null .display ".nextBlock"                             CoreBuilder.mnd: display.nextBlock = null;
  978:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  979:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  980:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  981:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label41                                               CoreBuilder.mnd: void flagUnits(unit)
  982:  ubind :flagUnits:unit                                        CoreBuilder.mnd: var firstUnit = ubind(unit);
  983:  set :flagUnits:firstUnit @unit                               ...
  984:  set :flagUnits:x @thisx                                      CoreBuilder.mnd: var x = @thisx;
        label *label363                                              CoreBuilder.mnd: do
  985:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  986:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  987:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  988:  jump *label363 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  989:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label42                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  990:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  991:  set :lineUpUnits:firstUnit @unit                             ...
        label *label367                                              CoreBuilder.mnd: do
  992:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  993:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  994:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  995:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  996:  jump *label367 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  997:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)


Performance: parsed in 976 ms, compiled in 502 ms, optimized in 3,328 ms, run in 6 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (18 steps):
The program didn't generate any output.
Execution exception at instruction 36: ubind @poly:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
