  1537 instructions before optimizations.
    69 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
   153 instructions eliminated by Dead Code Elimination (10 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    73 instructions eliminated by Jump Optimization (5 iterations).
    53 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions modified by Expression Optimization (3 iterations).
     7 instructions eliminated by If Expression Optimization (4 iterations).
   113 instructions eliminated by Data Flow Optimization (10 passes, 31 iterations).
     1 loops improved by Loop Hoisting.
     4 instructions eliminated by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
    39 instructions eliminated by Function Inlining (11 iterations).
    21 function calls inlined by Function Inlining.
     4 instructions eliminated by Jump Straightening (5 iterations).
    12 instructions updated by Jump Threading.
     7 calls threaded by Jump Threading.
    30 instructions eliminated by Unreachable Code Elimination (2 iterations).
   991 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  * Unroll iteration loop at CoreBuilder.mnd:352:5               size   -19, benefit       39.0, efficiency   Infinity (-13 instructions)
    Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      945.0, efficiency   Infinity
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      280.0, efficiency      1.073
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:417:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +166, benefit     2625.0, efficiency     15.813
  ! Inline function call at CoreBuilder.mnd:211:13               size  +166, benefit     1312.5, efficiency      7.907
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      240.0, efficiency      1.832
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  * Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      945.0, efficiency   Infinity (-10 instructions)
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      280.0, efficiency      1.073
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:417:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +166, benefit     2625.0, efficiency     15.813
  ! Inline function call at CoreBuilder.mnd:211:13               size  +166, benefit     1312.5, efficiency      7.907
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      240.0, efficiency      1.832
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5175.5, efficiency   Infinity (-29 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:417:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2471.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1235.9, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      154.5, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       77.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       38.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       19.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.7, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      618.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +166, benefit     2625.0, efficiency     15.813
  ! Inline function call at CoreBuilder.mnd:211:13               size  +166, benefit     1312.5, efficiency      7.907
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      353.1, efficiency   Infinity (-6 instructions)
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +140, benefit       75.0, efficiency      0.536
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +140, benefit       75.0, efficiency      0.536
  ! Inline function call at CoreBuilder.mnd:417:9                size  +140, benefit       75.0, efficiency      0.536
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +140, benefit       75.0, efficiency      0.536
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at CoreBuilder.mnd:136:17               size   +31, benefit      353.1, efficiency     11.391
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:205:9                size  +140, benefit     2625.0, efficiency     18.750
  ! Inline function call at CoreBuilder.mnd:211:13               size  +140, benefit     1312.5, efficiency      9.375
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6135.5, efficiency    409.036
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6135.5, efficiency    136.345
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    15391.3, efficiency   Infinity (-11 instructions)
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:417:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +8, benefit      353.1, efficiency     44.141
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +23, benefit      353.1, efficiency     15.353
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3531.3, efficiency    441.406
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3531.3, efficiency    153.533
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2625.0, efficiency     15.625
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1312.5, efficiency      7.813
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5368.6, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5368.6, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2251.2, efficiency    281.396
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1969.8, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2251.2, efficiency     97.877
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3451.2, efficiency    493.035
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2684.3, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6135.5, efficiency    149.647
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2532.6, efficiency     37.800
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3067.8, efficiency   Infinity (-6 instructions)
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:417:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +21, benefit      353.1, efficiency     16.815
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1986.3, efficiency     29.211
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +21, benefit     3531.3, efficiency    168.155
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      546.2, efficiency      8.033
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2625.0, efficiency     15.625
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1312.5, efficiency      7.813
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3067.8, efficiency    511.296
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +21, benefit     2251.2, efficiency    107.199
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2532.6, efficiency     37.800
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2532.6, efficiency   Infinity (-5 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:417:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1986.3, efficiency     29.211
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      546.2, efficiency      8.033
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2625.0, efficiency     15.625
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1312.5, efficiency      7.813
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2532.6, efficiency    633.142
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3451.2, efficiency   Infinity (-8 instructions)
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:417:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2625.0, efficiency     15.625
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1312.5, efficiency      7.813
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3451.2, efficiency    690.249
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      104.0, efficiency      4.522
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      280.0, efficiency      1.162
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      285.0, efficiency     10.556
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:417:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      247.0, efficiency      8.821
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit      100.0, efficiency      4.167
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2625.0, efficiency     15.625
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1312.5, efficiency      7.813
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      240.0, efficiency      1.983
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 2: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      104.0, efficiency      4.727
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      280.0, efficiency      1.172
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      285.0, efficiency     11.400
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:417:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      247.0, efficiency      9.500
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit      100.0, efficiency      4.348
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2625.0, efficiency     15.909
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1312.5, efficiency      7.955
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      240.0, efficiency      2.000
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Pass 3: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:411:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:416:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      875.0, efficiency     29.167
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      437.5, efficiency     14.583
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    31312.3, efficiency  31312.256
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    19173.6, efficiency  19173.584
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      988.4, efficiency    988.388
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      104.0, efficiency      4.727
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +71, benefit       87.5, efficiency      1.232
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:503:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:517:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1544.9, efficiency     29.149
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3531.3, efficiency    110.352
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      971.1, efficiency     19.041
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      296.0, efficiency      8.000
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      280.0, efficiency      1.172
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      285.0, efficiency     11.400
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7448.7, efficiency   1489.746
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    12271.1, efficiency   6135.547
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6135.5, efficiency    557.777
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3757.5, efficiency    751.494
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6135.5, efficiency    130.544
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2532.6, efficiency     36.704
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:345:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:358:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:361:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:372:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:374:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:386:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:387:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:390:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:393:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:409:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:412:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:417:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:441:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:445:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:490:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:491:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:496:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:497:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      353.1, efficiency     27.163
  ! Inline function call at Actions.mnd:166:5                    size    +1, benefit      353.1, efficiency    353.125
  ! Inline function call at Actions.mnd:167:5                    size    +2, benefit      397.3, efficiency    198.633
  ! Inline function call at Actions.mnd:168:5                    size    +6, benefit      353.1, efficiency     58.854
  ! Inline function call at Actions.mnd:169:5                    size    +3, benefit      264.8, efficiency     88.281
  ! Inline function call at Actions.mnd:179:5                    size   +24, benefit      353.1, efficiency     14.714
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2825.0, efficiency     85.606
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1235.9, efficiency    137.326
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       88.3, efficiency      6.791
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      176.6, efficiency     13.582
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      154.5, efficiency     17.166
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       77.2, efficiency      8.583
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       38.6, efficiency      4.291
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       19.3, efficiency      2.146
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.7, efficiency      1.073
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      706.3, efficiency     21.402
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      247.0, efficiency     13.000
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      247.0, efficiency      9.500
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit      100.0, efficiency      4.348
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1986.3, efficiency    993.164
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1986.3, efficiency     28.376
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3531.3, efficiency   3531.250
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3972.7, efficiency   1986.328
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3531.3, efficiency    588.542
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2648.4, efficiency    882.813
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3531.3, efficiency    147.135
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1092.5, efficiency    546.240
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      546.2, efficiency      7.803
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2625.0, efficiency     15.909
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1312.5, efficiency      7.955
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      240.0, efficiency      2.000
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6135.5, efficiency   6135.547
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2251.2, efficiency   2251.172
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      984.9, efficiency    984.888
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2251.2, efficiency    375.195
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      844.2, efficiency    281.396
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2251.2, efficiency     93.799

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-121 instructions):
 
    38 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    39 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
    40 label *label53
-    * set *tmp122 :buildBlockFromCfg.1*retval
    41 set :buildBlockFromCfg.1:cfg "AJTJK-battery1"
    42 setaddr :buildBlockFromCfg.1*retaddr *label54 (h:*label54)
    43 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label54) (h:*label54)
    44 label *label54
-    * set *tmp123 :buildBlockFromCfg.1*retval
    45 set :buildBlockFromCfg.1:cfg "ALTJL-battery2"
    46 setaddr :buildBlockFromCfg.1*retaddr *label55 (h:*label55)
    47 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label55) (h:*label55)
    48 label *label55
-    * set *tmp124 :buildBlockFromCfg.1*retval
    49 set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"
    50 setaddr :buildBlockFromCfg.1*retaddr *label56 (h:*label56)
    51 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label56) (h:*label56)
    52 label *label56
-    * set *tmp125 :buildBlockFromCfg.1*retval
    53 set .powerTarget 400
    54 set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"
    55 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
    57 label *label57
-    * set *tmp126 :buildBlockFromCfg.1*retval
    58 set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"
    59 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    60 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    61 label *label58
-    * set *tmp127 :buildBlockFromCfg.1*retval
    62 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    63 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    64 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
 
    90 setaddr :error*retaddr *label64 (h:*label64)
    91 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    92 label *label64
-    * set *tmp142 null
    93 jump *label63 always
    94 label *label62
-    * set *tmp142 null
    95 label *label63
    96 write @pneumatic-drill processor2 ".nextBlock"
    97 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
 
   113 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   114 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
   115 label *label66
-    * set *tmp147 :buildBlockFromCfg.1*retval
   116 set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"
   117 setaddr :buildBlockFromCfg.1*retaddr *label67 (h:*label67)
   118 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label67) (h:*label67)
   119 label *label67
-    * set *tmp148 :buildBlockFromCfg.1*retval
   120 set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"
   121 setaddr :buildBlockFromCfg.1*retaddr *label68 (h:*label68)
   122 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label68) (h:*label68)
   123 label *label68
-    * set *tmp149 :buildBlockFromCfg.1*retval
   124 set .graphiteSurplus 80
   125 set :buildBlockFromCfg:cfg "AÕFDJS-micro-processor9"
   126 set :buildBlockFromCfg:config processor10
 
   182 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   183 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   184 label *label83
-    * set *tmp153 :buildBlockFromCfg.1*retval
   185 set :buildBlockFromCfg.1:cfg "A©FHJU-unloader11"
   186 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   187 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   188 label *label84
-    * set *tmp154 :buildBlockFromCfg.1*retval
   189 set :buildBlockFromCfg.1:cfg "A~FJJV-overflow-gate12"
   190 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   191 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   192 label *label85
-    * set *tmp155 :buildBlockFromCfg.1*retval
   193 set :buildBlockFromCfg.1:cfg "A~DJJW-overflow-gate13"
   194 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   195 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   196 label *label86
-    * set *tmp156 :buildBlockFromCfg.1*retval
   197 set :buildBlockFromCfg.1:cfg "A¾BFLX-air-factory14"
   198 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   199 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   200 label *label87
-    * set *tmp157 :buildBlockFromCfg.1*retval
   201 set :setFlareTarget:target 1
   202 write :setFlareTarget:target .controller ".flareTarget"
   203 write :setFlareTarget:target processor2 ".flareTarget"
 
   222 op lessThan *tmp159 *tmp158 300
   223 jump *label95 equal *tmp159 false
   224 jump *label93 always
-    * set *tmp160 null
   225 jump *label96 always
   226 label *label95
-    * set *tmp160 null
   227 label *label96
   228 label *label92
   229 read *tmp84 .controller ".monos"
 
   235 setaddr :buildBlockFromCfg.1*retaddr *label97 (h:*label97)
   236 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label97) (h:*label97)
   237 label *label97
-    * set *tmp162 :buildBlockFromCfg.1*retval
   238 set :buildBlockFromCfg.1:cfg "A{NJJZ-inverted-sorter16"
   239 setaddr :buildBlockFromCfg.1*retaddr *label98 (h:*label98)
   240 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label98) (h:*label98)
   241 label *label98
-    * set *tmp163 :buildBlockFromCfg.1*retval
   242 set :buildBlockFromCfg.1:cfg "ANOMJ[-kiln17"
   243 setaddr :buildBlockFromCfg.1*retaddr *label99 (h:*label99)
   244 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label99) (h:*label99)
   245 label *label99
-    * set *tmp164 :buildBlockFromCfg.1*retval
   246 set :buildBlockFromCfg.1:cfg "A¡AOJ\-water-extractor18"
   247 setaddr :buildBlockFromCfg.1*retaddr *label100 (h:*label100)
   248 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label100) (h:*label100)
   249 label *label100
-    * set *tmp165 :buildBlockFromCfg.1*retval
   250 set :buildBlockFromCfg.1:cfg "AAKJ^-steam-generator20"
   251 setaddr :buildBlockFromCfg.1*retaddr *label101 (h:*label101)
   252 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label101) (h:*label101)
   253 label *label101
-    * set *tmp166 :buildBlockFromCfg.1*retval
   254 set :buildBlockFromCfg.1:cfg "AKFRJa-multi-press23"
   255 setaddr :buildBlockFromCfg.1*retaddr *label102 (h:*label102)
   256 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label102) (h:*label102)
   257 label *label102
-    * set *tmp167 :buildBlockFromCfg.1*retval
   258 set :buildBlockFromCfg.1:cfg "ALQIJ_-silicon-smelter21"
   259 setaddr :buildBlockFromCfg.1*retaddr *label103 (h:*label103)
   260 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label103) (h:*label103)
   261 label *label103
-    * set *tmp168 :buildBlockFromCfg.1*retval
   262 set :buildBlockFromCfg.1:cfg "A©HFJb-unloader24"
   263 setaddr :buildBlockFromCfg.1*retaddr *label104 (h:*label104)
   264 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label104) (h:*label104)
   265 label *label104
-    * set *tmp169 :buildBlockFromCfg.1*retval
   266 set :buildBlockFromCfg.1:cfg "A{HDJc-inverted-sorter25"
   267 setaddr :buildBlockFromCfg.1*retaddr *label105 (h:*label105)
   268 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label105) (h:*label105)
   269 label *label105
-    * set *tmp170 :buildBlockFromCfg.1*retval
   270 set :buildBlockFromCfg.1:cfg "AÀF@Ld-additive-reconstructor26"
   271 setaddr :buildBlockFromCfg.1*retaddr *label106 (h:*label106)
   272 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label106) (h:*label106)
   273 label *label106
-    * set *tmp171 :buildBlockFromCfg.1*retval
   274 set .siliconSurplus 1000
   275 set .siliconMonoSurplus 20
   276 set .metaglassSurplus 100
 
   364 setaddr :error*retaddr *label127 (h:*label127)
   365 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   366 label *label127
-    * set *tmp196 null
   367 jump *label126 always
   368 label *label125
-    * set *tmp196 null
   369 label *label126
   370 write @laser-drill processor5 ":buildBlockAt:block"
   371 read *tmp55 processor3 ".drillX"
 
   391 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   392 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   393 label *label129
-    * set *tmp205 :buildRemoteBlock*retval
   394 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
   395 read *tmp61 processor3 ".water2X"
   396 set :buildRemoteBlock:x *tmp61
 
   399 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
   400 call *label38 *invalid :buildRemoteBlock*retval (m:*label130) (h:*label130)
   401 label *label130
-    * set *tmp206 :buildRemoteBlock*retval
   402 set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"
   403 read *tmp63 processor3 ".generatorX"
   404 set :buildRemoteBlock:x *tmp63
 
   417 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   418 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   419 label *label132
-    * set *tmp208 :buildRemoteBlock*retval
   420 set :buildRemoteBlock:cfg "AFFJT-power-node10"
   421 read *tmp67 processor3 ".node2X"
   422 set :buildRemoteBlock:x *tmp67
 
   425 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   426 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   427 label *label133
-    * set *tmp209 :buildRemoteBlock*retval
   428 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
   429 read *tmp69 processor3 ".panelX"
   430 set :buildRemoteBlock:x *tmp69
 
   433 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   434 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   435 label *label134
-    * set *tmp210 :buildRemoteBlock*retval
   436 set :buildRemoteBlock:cfg "AJTJK-battery1"
   437 read *tmp71 processor3 ".batteryX"
   438 set :buildRemoteBlock:x *tmp71
 
   456 op equal *tmp213 .thoriumContainer null
   457 jump *label137 equal *tmp213 false
   458 set .thoriumContainer .thoriumDrill
-    * set *tmp214 .thoriumContainer
   459 jump *label138 always
   460 label *label137
-    * set *tmp214 null
   461 label *label138
   462 write .thoriumDrill processor2 ".thoriumDrill"
   463 write .thoriumContainer processor2 ".thoriumContainer"
 
   486 setaddr :buildBlockFromCfg.1*retaddr *label144 (h:*label144)
   487 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   488 label *label144
-    * set *tmp218 :buildBlockFromCfg.1*retval
   489 set .metaglassSurplus 10
   490 set :setMegaTarget:target 1
   491 write :setMegaTarget:target .controller ".megaTarget"
 
   612 label *label170
   613 set *tmp243 null
   614 label *label171
-    * set *tmp240 *tmp243
   615 jump *label169 always
   616 label *label168
-    * set *tmp240 null
   617 label *label169
   618 set :fetchBlock:block .thoriumContainer
   619 set :fetchBlock:item @thorium
 
   627 write :setPolyTarget.1:target .controller ".polyTarget"
   628 write :setPolyTarget.1:target processor2 ".polyTarget"
   629 label *label179
-    * set *tmp249 null
   630 jump *label178 always
   631 label *label177
-    * set *tmp249 null
   632 label *label178
   633 label *label166
-    * set *tmp237 null
   634 jump *label165 always
   635 label *label164
   636 read *tmp84 .controller ".monos"
 
   672 label *label190
   673 set *tmp259 null
   674 label *label191
-    * set *tmp256 *tmp259
   675 jump *label189 always
   676 label *label188
-    * set *tmp256 null
   677 label *label189
   678 sensor *tmp260 .core @silicon
   679 op lessThan *tmp261 *tmp260 silicon
 
   714 label *label201
   715 set *tmp265 *tmp268
   716 label *label197
-    * set *tmp262 *tmp265
   717 jump *label195 always
   718 label *label194
-    * set *tmp262 null
   719 label *label195
   720 sensor *tmp269 AJTJK-battery1 @totalPower
   721 op lessThan *tmp270 *tmp269 .powerTarget
 
   743 label *label204
   744 set *tmp271 null
   745 label *label205
-    * set *tmp253 *tmp271
   746 jump *label187 always
   747 label *label186
-    * set *tmp253 null
   748 label *label187
   749 sensor *tmp275 .core @titanium
   750 op lessThan *tmp276 *tmp275 titanium
 
   881 label *label214
   882 set *tmp285 null
   883 label *label215
-    * set *tmp283 *tmp285
   884 jump *label213 always
   885 label *label212
   886 set :status1:text "Goal 11: Fetching titanium"
 
   892 setaddr :fetchBlock*retaddr *label243 (h:*label243)
   893 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   894 label *label243
-    * set *tmp283 null
   895 label *label213
   896 label *label185
   897 set *tmp251 null
   898 label *label181
-    * set *tmp237 *tmp251
   899 label *label165
   900 label *label163
   901 return :supplyBase*retaddr
 
   936 label *label248
   937 set :buildRemoteBlock*retval :buildBlock*retval
   938 jump *label244 always
-    * set *tmp312 null
   939 jump *label246 always
   940 label *label245
-    * set *tmp312 null
   941 label *label246
   942 set :buildRemoteBlock*retval false
   943 jump *label244 always
 
  1084 sensor *tmp320 @unit @mining
  1085 jump *label270 equal *tmp320 false
  1086 ucontrol stop
-    * set *tmp321 null
  1087 jump *label271 always
  1088 label *label270
-    * set *tmp321 null
  1089 label *label271
  1090 ubind :lineUpUnits:unit
  1091 label *label268
 
  1150 op land *tmp331 *tmp329 *tmp330
  1151 jump *label284 equal *tmp331 false
  1152 ucontrol itemDrop @air 1000
-    * set *tmp332 null
  1153 jump *label285 always
  1154 label *label284
-    * set *tmp332 null
  1155 label *label285
  1156 label *label282
  1157 sensor *tmp333 @unit :fetchBlock:item
 
  1188 setaddr :mineOre*retaddr *label291 (h:*label291)
  1189 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
  1190 label *label291
-    * set *tmp341 null
  1191 jump *label290 always
  1192 label *label289
-    * set *tmp341 null
  1193 label *label290
  1194 label *label287
  1195 return :supplyBlock*retaddr
 
  1225 op land *tmp347 *tmp345 *tmp346
  1226 jump *label300 equal *tmp347 false
  1227 ucontrol itemDrop @air 1000
-    * set *tmp348 null
  1228 jump *label301 always
  1229 label *label300
-    * set *tmp348 null
  1230 label *label301
  1231 label *label298
  1232 sensor *tmp349 @unit :supplyBlockFromCore:item
 
  1288 sensor *tmp377 :unpackCfg:type @thorium
  1289 set :unpackCfg:th *tmp377
  1290 sensor *tmp378 :unpackCfg:type @size
-    * set :unpackCfg:size *tmp378
  1291 label *label303
  1292 return :unpackCfg*retaddr
  1293 end
 
  1368 jump *label319 equal *tmp394 false
  1369 set *tmp392 false
  1370 jump *label318 always
-    * set *tmp395 null
  1371 jump *label320 always
  1372 label *label319
-    * set *tmp395 null
  1373 label *label320
  1374 sensor *tmp396 .core @lead
  1375 op lessThan *tmp397 *tmp396 lead
  1376 jump *label321 equal *tmp397 false
  1377 set *tmp392 false
  1378 jump *label318 always
-    * set *tmp398 null
  1379 jump *label322 always
  1380 label *label321
-    * set *tmp398 null
  1381 label *label322
  1382 sensor *tmp399 .core @graphite
  1383 op lessThan *tmp400 *tmp399 graphite
  1384 jump *label323 equal *tmp400 false
  1385 set *tmp392 false
  1386 jump *label318 always
-    * set *tmp401 null
  1387 jump *label324 always
  1388 label *label323
-    * set *tmp401 null
  1389 label *label324
  1390 sensor *tmp402 .core @silicon
  1391 op lessThan *tmp403 *tmp402 silicon
  1392 jump *label325 equal *tmp403 false
  1393 set *tmp392 false
  1394 jump *label318 always
-    * set *tmp404 null
  1395 jump *label326 always
  1396 label *label325
-    * set *tmp404 null
  1397 label *label326
  1398 sensor *tmp405 .core @titanium
  1399 op lessThan *tmp406 *tmp405 titanium
  1400 jump *label327 equal *tmp406 false
  1401 set *tmp392 false
  1402 jump *label318 always
-    * set *tmp407 null
  1403 jump *label328 always
  1404 label *label327
-    * set *tmp407 null
  1405 label *label328
  1406 sensor *tmp408 .core @metaglass
  1407 op lessThan *tmp409 *tmp408 metaglass
  1408 jump *label329 equal *tmp409 false
  1409 set *tmp392 false
  1410 jump *label318 always
-    * set *tmp410 null
  1411 jump *label330 always
  1412 label *label329
-    * set *tmp410 null
  1413 label *label330
  1414 sensor *tmp411 .core @thorium
  1415 op lessThan *tmp412 *tmp411 thorium
  1416 jump *label331 equal *tmp412 false
  1417 set *tmp392 false
  1418 jump *label318 always
-    * set *tmp413 null
  1419 jump *label332 always
  1420 label *label331
-    * set *tmp413 null
  1421 label *label332
  1422 set *tmp392 true
  1423 jump *label318 always
 
  1444 jump *label341 equal *tmp419 false
  1445 set *tmp417 false
  1446 jump *label340 always
-    * set *tmp420 null
  1447 jump *label342 always
  1448 label *label341
-    * set *tmp420 null
  1449 label *label342
  1450 sensor *tmp421 .core @lead
  1451 op lessThan *tmp422 *tmp421 lead
  1452 jump *label343 equal *tmp422 false
  1453 set *tmp417 false
  1454 jump *label340 always
-    * set *tmp423 null
  1455 jump *label344 always
  1456 label *label343
-    * set *tmp423 null
  1457 label *label344
  1458 sensor *tmp424 .core @graphite
  1459 op lessThan *tmp425 *tmp424 graphite
  1460 jump *label345 equal *tmp425 false
  1461 set *tmp417 false
  1462 jump *label340 always
-    * set *tmp426 null
  1463 jump *label346 always
  1464 label *label345
-    * set *tmp426 null
  1465 label *label346
  1466 sensor *tmp427 .core @silicon
  1467 op lessThan *tmp428 *tmp427 silicon
  1468 jump *label347 equal *tmp428 false
  1469 set *tmp417 false
  1470 jump *label340 always
-    * set *tmp429 null
  1471 jump *label348 always
  1472 label *label347
-    * set *tmp429 null
  1473 label *label348
  1474 sensor *tmp430 .core @titanium
  1475 op lessThan *tmp431 *tmp430 titanium
  1476 jump *label349 equal *tmp431 false
  1477 set *tmp417 false
  1478 jump *label340 always
-    * set *tmp432 null
  1479 jump *label350 always
  1480 label *label349
-    * set *tmp432 null
  1481 label *label350
  1482 sensor *tmp433 .core @metaglass
  1483 op lessThan *tmp434 *tmp433 metaglass
  1484 jump *label351 equal *tmp434 false
  1485 set *tmp417 false
  1486 jump *label340 always
-    * set *tmp435 null
  1487 jump *label352 always
  1488 label *label351
-    * set *tmp435 null
  1489 label *label352
  1490 sensor *tmp436 .core @thorium
  1491 op lessThan *tmp437 *tmp436 thorium
  1492 jump *label353 equal *tmp437 false
  1493 set *tmp417 false
  1494 jump *label340 always
-    * set *tmp438 null
  1495 jump *label354 always
  1496 label *label353
-    * set *tmp438 null
  1497 label *label354
  1498 set *tmp417 true
  1499 jump *label340 always
 
  1507 label *label338
  1508 jump *label337 always
  1509 label *label339
-    * set *tmp415 null
  1510 jump *label335 always
  1511 label *label334
-    * set *tmp415 null
  1512 label *label335
  1513 label *label304
  1514 return :meetTarget*retaddr
 
  1573 op notEqual *tmp450 *tmp449 null
  1574 jump *label366 equal *tmp450 false
  1575 ucontrol itemDrop @air 1000
-    * set *tmp451 null
  1576 jump *label367 always
  1577 label *label366
-    * set *tmp451 null
  1578 label *label367
  1579 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1580 label *label364
 
  1621 op greaterThan *tmp463 *tmp461 *tmp462
  1622 jump *label377 notEqual *tmp463 false
  1623 label *label379
-    * set *tmp458 null
  1624 jump *label375 always
  1625 label *label374
  1626 label *label380
 
  1631 label *label381
  1632 jump *label380 always
  1633 label *label382
-    * set *tmp458 null
  1634 label *label375
  1635 set :transportStatus:target 0
  1636 set :transportStatus:item null
 
  1665 setaddr :dropAll*retaddr *label390 (h:*label390)
  1666 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1667 label *label390
-    * set *tmp469 null
  1668 jump *label389 always
  1669 label *label388
-    * set *tmp469 null
  1670 label *label389
  1671 set :status3:text "Mining..."
  1672 setaddr :status3*retaddr *label391 (h:*label391)
 
  1682 op land *tmp474 *tmp472 *tmp473
  1683 jump *label395 equal *tmp474 false
  1684 jump *label394 always
-    * set *tmp475 null
  1685 jump *label396 always
  1686 label *label395
-    * set *tmp475 null
  1687 label *label396
  1688 ucontrol mine :mineOre:x :mineOre:y
  1689 op greaterThan *tmp476 @second :mineOre:stop
  1690 jump *label397 equal *tmp476 false
  1691 jump *label394 always
-    * set *tmp477 null
  1692 jump *label398 always
  1693 label *label397
-    * set *tmp477 null
  1694 label *label398
  1695 op equal *tmp478 .noTarget false
  1696 jump *label399 equal *tmp478 false
 
  1699 jump *label402 equal *tmp482 false
  1700 set *tmp480 false
  1701 jump *label401 always
-    * set *tmp483 null
  1702 jump *label403 always
  1703 label *label402
-    * set *tmp483 null
  1704 label *label403
  1705 sensor *tmp484 .core @lead
  1706 op lessThan *tmp485 *tmp484 lead
  1707 jump *label404 equal *tmp485 false
  1708 set *tmp480 false
  1709 jump *label401 always
-    * set *tmp486 null
  1710 jump *label405 always
  1711 label *label404
-    * set *tmp486 null
  1712 label *label405
  1713 sensor *tmp487 .core @graphite
  1714 op lessThan *tmp488 *tmp487 graphite
  1715 jump *label406 equal *tmp488 false
  1716 set *tmp480 false
  1717 jump *label401 always
-    * set *tmp489 null
  1718 jump *label407 always
  1719 label *label406
-    * set *tmp489 null
  1720 label *label407
  1721 sensor *tmp490 .core @silicon
  1722 op lessThan *tmp491 *tmp490 silicon
  1723 jump *label408 equal *tmp491 false
  1724 set *tmp480 false
  1725 jump *label401 always
-    * set *tmp492 null
  1726 jump *label409 always
  1727 label *label408
-    * set *tmp492 null
  1728 label *label409
  1729 sensor *tmp493 .core @titanium
  1730 op lessThan *tmp494 *tmp493 titanium
  1731 jump *label410 equal *tmp494 false
  1732 set *tmp480 false
  1733 jump *label401 always
-    * set *tmp495 null
  1734 jump *label411 always
  1735 label *label410
-    * set *tmp495 null
  1736 label *label411
  1737 sensor *tmp496 .core @metaglass
  1738 op lessThan *tmp497 *tmp496 metaglass
  1739 jump *label412 equal *tmp497 false
  1740 set *tmp480 false
  1741 jump *label401 always
-    * set *tmp498 null
  1742 jump *label413 always
  1743 label *label412
-    * set *tmp498 null
  1744 label *label413
  1745 sensor *tmp499 .core @thorium
  1746 op lessThan *tmp500 *tmp499 thorium
  1747 jump *label414 equal *tmp500 false
  1748 set *tmp480 false
  1749 jump *label401 always
-    * set *tmp501 null
  1750 jump *label415 always
  1751 label *label414
-    * set *tmp501 null
  1752 label *label415
  1753 set *tmp480 true
  1754 jump *label401 always
 
  1761 label *label416
  1762 set *tmp502 null
  1763 label *label417
-    * set *tmp479 *tmp502
  1764 jump *label400 always
  1765 label *label399
-    * set *tmp479 null
  1766 label *label400
  1767 label *label393
  1768 sensor *tmp503 @unit @totalItems
 
  1803 setaddr :error*retaddr *label425 (h:*label425)
  1804 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
  1805 label *label425
-    * set *tmp510 null
  1806 jump *label424 always
  1807 label *label423
-    * set *tmp510 null
  1808 label *label424
  1809 label *label422
  1810 return :locateOre*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-16 instructions):
 
   607 label *label175
   608 set *tmp246 null
   609 label *label173
-    * set *tmp243 *tmp246
   610 jump *label171 always
   611 label *label170
-    * set *tmp243 null
   612 label *label171
   613 jump *label169 always
   614 label *label168
 
   643 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   644 label *label184
   645 label *label182
-    * set *tmp251 null
   646 jump *label181 always
   647 label *label180
   648 set :supplyBase0:supplied false
 
   664 call *label26 *invalid :supplyBlock*retval (m:*label193) (h:*label193)
   665 label *label193
   666 set :supplyBase0:supplied true
-    * set *tmp259 :supplyBase0:supplied
   667 jump *label191 always
   668 label *label190
-    * set *tmp259 null
   669 label *label191
   670 jump *label189 always
   671 label *label188
 
   686 call *label26 *invalid :supplyBlock*retval (m:*label199) (h:*label199)
   687 label *label199
   688 set :supplyBase0:supplied true
-    * set *tmp265 :supplyBase0:supplied
   689 jump *label197 always
   690 label *label196
   691 sensor *tmp266 ALMQJN-silicon-smelter4 @sand
 
   706 label *label200
   707 set *tmp268 null
   708 label *label201
-    * set *tmp265 *tmp268
   709 label *label197
   710 jump *label195 always
   711 label *label194
 
   731 label *label206
   732 set *tmp274 null
   733 label *label207
-    * set *tmp271 *tmp274
   734 jump *label205 always
   735 label *label204
-    * set *tmp271 null
   736 label *label205
   737 jump *label187 always
   738 label *label186
 
   867 label *label221
   868 set *tmp289 *tmp292
   869 label *label217
-    * set *tmp285 *tmp289
   870 jump *label215 always
   871 label *label214
-    * set *tmp285 null
   872 label *label215
   873 jump *label213 always
   874 label *label212
 
   883 label *label243
   884 label *label213
   885 label *label185
-    * set *tmp251 null
   886 label *label181
   887 label *label165
   888 label *label163
 
   985 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   986 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   987 label *label253
-    * set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
   988 label *label252
   989 return :buildBlockFromCfg.1*retaddr
   990 end
 
  1274 set :unpackCfg:mg *tmp376
  1275 sensor *tmp377 :unpackCfg:type @thorium
  1276 set :unpackCfg:th *tmp377
-    * sensor *tmp378 :unpackCfg:type @size
  1277 label *label303
  1278 return :unpackCfg*retaddr
  1279 end
 
  1742 label *label401
  1743 jump *label416 equal *tmp480 false
  1744 jump *label394 always
-    * set *tmp502 null
  1745 jump *label417 always
  1746 label *label416
-    * set *tmp502 null
  1747 label *label417
  1748 jump *label400 always
  1749 label *label399

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-8 instructions):
 
   597 setaddr :supplyBlock*retaddr *label174 (h:*label174)
   598 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
   599 label *label174
-    * set *tmp246 null
   600 jump *label173 always
   601 label *label172
   602 set :supplyBlockFromCore:target .thoriumGenerator
 
   604 setaddr :supplyBlockFromCore*retaddr *label175 (h:*label175)
   605 call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
   606 label *label175
-    * set *tmp246 null
   607 label *label173
   608 jump *label171 always
   609 label *label170
 
   699 call *label26 *invalid :supplyBlock*retval (m:*label203) (h:*label203)
   700 label *label203
   701 set :supplyBase0:supplied true
-    * set *tmp268 :supplyBase0:supplied
   702 jump *label201 always
   703 label *label200
-    * set *tmp268 null
   704 label *label201
   705 label *label197
   706 jump *label195 always
 
   722 call *label26 *invalid :supplyBlock*retval (m:*label209) (h:*label209)
   723 label *label209
   724 set :supplyBase0:supplied true
-    * set *tmp274 :supplyBase0:supplied
   725 jump *label207 always
   726 label *label206
-    * set *tmp274 null
   727 label *label207
   728 jump *label205 always
   729 label *label204
 
   760 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   761 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
   762 label *label219
-    * set *tmp289 null
   763 jump *label217 always
   764 label *label216
   765 sensor *tmp290 .core @silicon
 
   858 label *label227
   859 set *tmp292 *tmp299
   860 label *label221
-    * set *tmp289 *tmp292
   861 label *label217
   862 jump *label215 always
   863 label *label214

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   785 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   786 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   787 label *label225
-    * set *tmp292 null
   788 jump *label221 always
   789 label *label220
   790 sensor *tmp297 .core @copper
 
   855 label *label231
   856 set *tmp299 *tmp302
   857 label *label227
-    * set *tmp292 *tmp299
   858 label *label221
   859 label *label217
   860 jump *label215 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
   798 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   799 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
   800 label *label229
-    * set *tmp299 null
   801 jump *label227 always
   802 label *label226
   803 sensor *tmp300 .core @lead
 
   852 label *label235
   853 set *tmp302 *tmp305
   854 label *label231
-    * set *tmp299 *tmp302
   855 label *label227
   856 label *label221
   857 label *label217

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
   811 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   812 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
   813 label *label233
-    * set *tmp302 null
   814 jump *label231 always
   815 label *label230
   816 sensor *tmp303 .core @metaglass
 
   849 label *label241
   850 set *tmp305 null
   851 label *label235
-    * set *tmp302 *tmp305
   852 label *label231
   853 label *label227
   854 label *label221

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
   824 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   825 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   826 label *label237
-    * set *tmp305 null
   827 jump *label235 always
   828 label *label234
   829 set :status1:text "Goal 10: supplying base"
 
   846 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   847 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   848 label *label241
-    * set *tmp305 null
   849 label *label235
   850 label *label231
   851 label *label227

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-69 instructions):
 
    26 write 511 bank1 511
    27 label *label50
    28 ubind @poly
-    * set *tmp118 @unit
-    * set .builder *tmp118
-    * ulocate building core false @copper .coreX .coreY *tmp120 *tmp119
-    * set .core *tmp119
+   29 set .builder @unit
+   30 ulocate building core false @copper .coreX .coreY *tmp120 .core
    31 label *label51
    32 op equal *tmp121 .core null
    33 jump *label50 notEqual *tmp121 false
 
    76 wait 1e-15
    77 read *tmp139 processor3 ":findDrillLocation*finished"
    78 jump *label61 equal *tmp139 false
-    * read *tmp136 processor3 ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp136
-    * read *tmp137 processor3 ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp137
-    * read *tmp140 processor3 ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp140
+   79 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
+   80 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
+   81 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
    82 op equal *tmp141 :buildFirstTitaniumDrill:result false
    83 jump *label62 equal *tmp141 false
    84 set :error:error "Cannot locate spot for titanium drill"
 
    97 wait 1e-15
    98 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    99 jump *label65 equal *tmp145 false
-    * read *tmp146 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp128 *tmp146
+  100 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
   101 jump *label59 always
   102 set *tmp128 null
   103 label *label59
 
   121 setaddr :buildBlockFromCfg*retaddr *label69 (h:*label69)
   122 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   123 label *label69
-    * set *tmp150 :buildBlockFromCfg*retval
-    * set .controller *tmp150
+  124 set .controller :buildBlockFromCfg*retval
   125 write processor1 .controller ".timer"
   126 write processor2 .controller ".display"
   127 write .core .controller ".core"
 
   305 label *label117
   306 write @ore-titanium processor2 ".nextBlock"
   307 ubind @flare
-    * read *tmp53 processor3 ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp53
+  308 read :blocksBuildTitaniumDrills:current processor3 ".locations"
   309 write .coreX processor3 ":findDrillLocation:x"
   310 write .coreY processor3 ":findDrillLocation:y"
   311 write @unit processor3 ":findDrillLocation:unit"
 
   348 wait 1e-15
   349 read *tmp193 processor3 ":layoutThoriumDrill*finished"
   350 jump *label124 equal *tmp193 false
-    * read *tmp194 processor3 ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp194
+  351 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
   352 op equal *tmp195 :buildThoriumDrill:result false
   353 jump *label125 equal *tmp195 false
   354 set :error:error "Cannot locate spot for thorium drill"
 
   372 wait 1e-15
   373 read *tmp203 processor5 ":buildBlockAt*finished"
   374 jump *label128 equal *tmp203 false
-    * read *tmp204 processor5 ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp204
+  375 read .thoriumDrill processor5 ":buildBlockAt*retval"
   376 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
-    * read *tmp57 processor3 ".water1X"
-    * set :buildRemoteBlock:x *tmp57
-    * read *tmp58 processor3 ".water1Y"
-    * set :buildRemoteBlock:y *tmp58
+  377 read :buildRemoteBlock:x processor3 ".water1X"
+  378 read :buildRemoteBlock:y processor3 ".water1Y"
   379 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   380 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   381 label *label129
   382 set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
-    * read *tmp61 processor3 ".water2X"
-    * set :buildRemoteBlock:x *tmp61
-    * read *tmp62 processor3 ".water2Y"
-    * set :buildRemoteBlock:y *tmp62
+  383 read :buildRemoteBlock:x processor3 ".water2X"
+  384 read :buildRemoteBlock:y processor3 ".water2Y"
   385 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
   386 call *label38 *invalid :buildRemoteBlock*retval (m:*label130) (h:*label130)
   387 label *label130
   388 set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"
-    * read *tmp63 processor3 ".generatorX"
-    * set :buildRemoteBlock:x *tmp63
-    * read *tmp64 processor3 ".generatorY"
-    * set :buildRemoteBlock:y *tmp64
+  389 read :buildRemoteBlock:x processor3 ".generatorX"
+  390 read :buildRemoteBlock:y processor3 ".generatorY"
   391 setaddr :buildRemoteBlock*retaddr *label131 (h:*label131)
   392 call *label38 *invalid :buildRemoteBlock*retval (m:*label131) (h:*label131)
   393 label *label131
-    * set *tmp207 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp207
+  394 set .thoriumGenerator :buildRemoteBlock*retval
   395 set :buildRemoteBlock:cfg "AFFJT-power-node10"
-    * read *tmp65 processor3 ".node1X"
-    * set :buildRemoteBlock:x *tmp65
-    * read *tmp66 processor3 ".node1Y"
-    * set :buildRemoteBlock:y *tmp66
+  396 read :buildRemoteBlock:x processor3 ".node1X"
+  397 read :buildRemoteBlock:y processor3 ".node1Y"
   398 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   399 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   400 label *label132
   401 set :buildRemoteBlock:cfg "AFFJT-power-node10"
-    * read *tmp67 processor3 ".node2X"
-    * set :buildRemoteBlock:x *tmp67
-    * read *tmp68 processor3 ".node2Y"
-    * set :buildRemoteBlock:y *tmp68
+  402 read :buildRemoteBlock:x processor3 ".node2X"
+  403 read :buildRemoteBlock:y processor3 ".node2Y"
   404 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   405 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   406 label *label133
   407 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
-    * read *tmp69 processor3 ".panelX"
-    * set :buildRemoteBlock:x *tmp69
-    * read *tmp70 processor3 ".panelY"
-    * set :buildRemoteBlock:y *tmp70
+  408 read :buildRemoteBlock:x processor3 ".panelX"
+  409 read :buildRemoteBlock:y processor3 ".panelY"
   410 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   411 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   412 label *label134
   413 set :buildRemoteBlock:cfg "AJTJK-battery1"
-    * read *tmp71 processor3 ".batteryX"
-    * set :buildRemoteBlock:x *tmp71
-    * read *tmp72 processor3 ".batteryY"
-    * set :buildRemoteBlock:y *tmp72
+  414 read :buildRemoteBlock:x processor3 ".batteryX"
+  415 read :buildRemoteBlock:y processor3 ".batteryY"
   416 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   417 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   418 label *label135
-    * set *tmp211 :buildRemoteBlock*retval
-    * set .thoriumBattery *tmp211
+  419 set .thoriumBattery :buildRemoteBlock*retval
   420 set :buildRemoteBlock:cfg "A¨JJJ~-container52"
-    * read *tmp59 processor3 ".containerX"
-    * set :buildRemoteBlock:x *tmp59
-    * read *tmp60 processor3 ".containerY"
-    * set :buildRemoteBlock:y *tmp60
+  421 read :buildRemoteBlock:x processor3 ".containerX"
+  422 read :buildRemoteBlock:y processor3 ".containerY"
   423 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   424 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   425 label *label136
-    * set *tmp212 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp212
+  426 set .thoriumContainer :buildRemoteBlock*retval
   427 op equal *tmp213 .thoriumContainer null
   428 jump *label137 equal *tmp213 false
   429 set .thoriumContainer .thoriumDrill
 
   466 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
   467 label *label146
   468 read *tmp85 .controller ".polys"
-    * op sub *tmp219 *tmp85 1
-    * set :tmp *tmp219
+  469 op sub :tmp *tmp85 1
   470 write :tmp .controller ".polyTarget"
   471 write :tmp .controller ".polys"
   472 write :tmp processor2 ".polys"
-    * sensor *tmp220 AÁNBJe-multiplicative-reconstructor27 @x
-    * set :x *tmp220
-    * sensor *tmp221 AÁNBJe-multiplicative-reconstructor27 @y
-    * set :y *tmp221
+  473 sensor :x AÁNBJe-multiplicative-reconstructor27 @x
+  474 sensor :y AÁNBJe-multiplicative-reconstructor27 @y
   475 label *label147
   476 ucontrol move :x :y
   477 ucontrol payEnter
 
   505 label *label154
   506 label *label155
   507 jump *label157 equal true false
-    * op sub *tmp229 @thisy 6
-    * set :lineUpUnits:y *tmp229
+  508 op sub :lineUpUnits:y @thisy 6
   509 set :lineUpUnits:unit @mega
   510 setaddr :lineUpUnits*retaddr *label158 (h:*label158)
   511 call *label44 *invalid :lineUpUnits*retval (m:*label158) (h:*label158)
   512 label *label158
-    * op sub *tmp230 @thisy 10
-    * set :lineUpUnits:y *tmp230
+  513 op sub :lineUpUnits:y @thisy 10
   514 set :lineUpUnits:unit @poly
   515 setaddr :lineUpUnits*retaddr *label159 (h:*label159)
   516 call *label44 *invalid :lineUpUnits*retval (m:*label159) (h:*label159)
   517 label *label159
-    * op sub *tmp231 @thisy 14
-    * set :lineUpUnits:y *tmp231
+  518 op sub :lineUpUnits:y @thisy 14
   519 set :lineUpUnits:unit @mono
   520 setaddr :lineUpUnits*retaddr *label160 (h:*label160)
   521 call *label44 *invalid :lineUpUnits*retval (m:*label160) (h:*label160)
   522 label *label160
-    * op sub *tmp232 @thisy 18
-    * set :lineUpUnits:y *tmp232
+  523 op sub :lineUpUnits:y @thisy 18
   524 set :lineUpUnits:unit @flare
   525 setaddr :lineUpUnits*retaddr *label161 (h:*label161)
   526 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
 
   700 jump *label210 equal *tmp276 false
   701 sensor *tmp278 .core @titanium
   702 op sub *tmp279 titanium *tmp278
-    * op min *tmp280 7 *tmp279
-    * set *tmp277 *tmp280
+  703 op min *tmp277 7 *tmp279
   704 jump *label211 always
   705 label *label210
   706 set *tmp277 100
 
   732 setaddr :status1*retaddr *label222 (h:*label222)
   733 call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
   734 label *label222
-    * sensor *tmp293 .core @coal
-    * set :supplyBase0:coal *tmp293
-    * sensor *tmp294 .core @sand
-    * set :supplyBase0:sand *tmp294
+  735 sensor :supplyBase0:coal .core @coal
+  736 sensor :supplyBase0:sand .core @sand
   737 op lessThan *tmp295 :supplyBase0:coal :supplyBase0:sand
   738 jump *label223 equal *tmp295 false
   739 set *tmp296 @coal
 
   791 setaddr :status1*retaddr *label238 (h:*label238)
   792 call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
   793 label *label238
-    * sensor *tmp306 .core @coal
-    * set :supplyBase0:coal.1 *tmp306
-    * sensor *tmp307 .core @sand
-    * set :supplyBase0:sand.1 *tmp307
+  794 sensor :supplyBase0:coal.1 .core @coal
+  795 sensor :supplyBase0:sand.1 .core @sand
   796 op lessThanEq *tmp308 :supplyBase0:coal.1 :supplyBase0:sand.1
   797 jump *label239 equal *tmp308 false
   798 set *tmp309 @coal
 
   922 return :buildBlockFromCfg*retaddr
   923 end
   924 label *label40
-    * set *tmp315 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp315
+  925 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   926 set :buildBlockFromCfg:config null
   927 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   928 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
 
   984 label *label43
   985 label *label260
   986 ubind :flagUnits:unit
-    * set *tmp316 @unit
-    * set :flagUnits:firstUnit *tmp316
+  987 set :flagUnits:firstUnit @unit
   988 label *label261
   989 op equal *tmp317 :flagUnits:firstUnit null
   990 jump *label260 notEqual *tmp317 false
 
  1005 ubind :lineUpUnits:unit
  1006 set :lineUpUnits:firstUnit @unit
  1007 label *label267
-    * sensor *tmp319 @unit @flag
-    * set :lineUpUnits:x *tmp319
+ 1008 sensor :lineUpUnits:x @unit @flag
  1009 ucontrol itemDrop @air 1000
  1010 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1011 sensor *tmp320 @unit @mining
 
  1034 setaddr :status2*retaddr *label274 (h:*label274)
  1035 call *label12 *invalid :status2*retval (m:*label274) (h:*label274)
  1036 label *label274
-    * set *tmp323 :mineOre.1:ore
-    * set :mineOre:ore *tmp323
+ 1037 set :mineOre:ore :mineOre.1:ore
  1038 set :mineOre:amount 30
  1039 set :mineOre:block .core
  1040 setaddr :mineOre*retaddr *label275 (h:*label275)
 
  1045 end
  1046 label *label25
  1047 sensor *tmp324 :fetchBlock:block @itemCapacity
-    * op min *tmp325 *tmp324 30
-    * set :transportStatus:target *tmp325
+ 1048 op min :transportStatus:target *tmp324 30
  1049 set :transportStatus:item :fetchBlock:item
  1050 setaddr :transportStatus*retaddr *label277 (h:*label277)
  1051 call *label14 *invalid :transportStatus*retval (m:*label277) (h:*label277)
 
  1068 label *label280
  1069 label *label281
  1070 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp328 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp328
+ 1071 sensor :fetchBlock:unitItem @unit @firstItem
  1072 op notEqual *tmp329 :fetchBlock:unitItem null
  1073 op notEqual *tmp330 :fetchBlock:unitItem :fetchBlock:item
  1074 op land *tmp331 *tmp329 *tmp330
 
  1099 setaddr :status2*retaddr *label288 (h:*label288)
  1100 call *label12 *invalid :status2*retval (m:*label288) (h:*label288)
  1101 label *label288
-    * sensor *tmp337 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp337
+ 1102 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1103 sensor *tmp338 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp339 :supplyBlock:blockCapacity *tmp338
-    * set :supplyBlock:missing *tmp339
+ 1104 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp338
  1105 op greaterThan *tmp340 :supplyBlock:missing 0
  1106 jump *label289 equal *tmp340 false
  1107 set :mineOre:ore :supplyBlock:ore
 
  1118 end
  1119 label *label27
  1120 sensor *tmp342 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp343 *tmp342 30
-    * set :transportStatus:target *tmp343
+ 1121 op min :transportStatus:target *tmp342 30
  1122 set :transportStatus:item :supplyBlockFromCore:item
  1123 setaddr :transportStatus*retaddr *label293 (h:*label293)
  1124 call *label14 *invalid :transportStatus*retval (m:*label293) (h:*label293)
 
  1139 label *label296
  1140 label *label297
  1141 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp344 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp344
+ 1142 sensor :supplyBlockFromCore:unitItem @unit @firstItem
  1143 op notEqual *tmp345 :supplyBlockFromCore:unitItem null
  1144 op notEqual *tmp346 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
  1145 op land *tmp347 *tmp345 *tmp346
 
  1169 op add :unpackCfg:index :unpackCfg:index 1
  1170 read *tmp354 :unpackCfg:cfg *tmp353
  1171 op sub *tmp355 *tmp354 74
-    * lookup block *tmp356 *tmp355
-    * set :unpackCfg:type *tmp356
+ 1172 lookup block :unpackCfg:type *tmp355
  1173 set *tmp357 :unpackCfg:index
  1174 op add :unpackCfg:index :unpackCfg:index 1
  1175 read *tmp358 :unpackCfg:cfg *tmp357
  1176 op sub *tmp359 *tmp358 74
-    * op div *tmp360 *tmp359 2
-    * set :unpackCfg:x *tmp360
+ 1177 op div :unpackCfg:x *tmp359 2
  1178 set *tmp361 :unpackCfg:index
  1179 op add :unpackCfg:index :unpackCfg:index 1
  1180 read *tmp362 :unpackCfg:cfg *tmp361
  1181 op sub *tmp363 *tmp362 74
-    * op div *tmp364 *tmp363 2
-    * set :unpackCfg:y *tmp364
+ 1182 op div :unpackCfg:y *tmp363 2
  1183 set *tmp365 :unpackCfg:index
  1184 op add :unpackCfg:index :unpackCfg:index 1
  1185 read *tmp366 :unpackCfg:cfg *tmp365
-    * op sub *tmp367 *tmp366 74
-    * set :unpackCfg:rotation *tmp367
+ 1186 op sub :unpackCfg:rotation *tmp366 74
  1187 set *tmp368 :unpackCfg:index
  1188 op add :unpackCfg:index :unpackCfg:index 1
  1189 read *tmp369 :unpackCfg:cfg *tmp368
-    * op sub *tmp370 *tmp369 74
-    * set :unpackCfg:ind *tmp370
-    * sensor *tmp371 :unpackCfg:type @copper
-    * set :unpackCfg:cu *tmp371
-    * sensor *tmp372 :unpackCfg:type @lead
-    * set :unpackCfg:pb *tmp372
-    * sensor *tmp373 :unpackCfg:type @graphite
-    * set :unpackCfg:gr *tmp373
-    * sensor *tmp374 :unpackCfg:type @silicon
-    * set :unpackCfg:si *tmp374
-    * sensor *tmp375 :unpackCfg:type @titanium
-    * set :unpackCfg:ti *tmp375
-    * sensor *tmp376 :unpackCfg:type @metaglass
-    * set :unpackCfg:mg *tmp376
-    * sensor *tmp377 :unpackCfg:type @thorium
-    * set :unpackCfg:th *tmp377
+ 1190 op sub :unpackCfg:ind *tmp369 74
+ 1191 sensor :unpackCfg:cu :unpackCfg:type @copper
+ 1192 sensor :unpackCfg:pb :unpackCfg:type @lead
+ 1193 sensor :unpackCfg:gr :unpackCfg:type @graphite
+ 1194 sensor :unpackCfg:si :unpackCfg:type @silicon
+ 1195 sensor :unpackCfg:ti :unpackCfg:type @titanium
+ 1196 sensor :unpackCfg:mg :unpackCfg:type @metaglass
+ 1197 sensor :unpackCfg:th :unpackCfg:type @thorium
  1198 label *label303
  1199 return :unpackCfg*retaddr
  1200 end
 
  1243 write :meetTarget:metaglass processor2 ".targetMetaglass"
  1244 write :meetTarget:thorium processor2 ".targetThorium"
  1245 set copper :meetTarget:copper
-    * op add *tmp381 :meetTarget:lead .leadSurplus
-    * set lead *tmp381
+ 1246 op add lead :meetTarget:lead .leadSurplus
  1247 set graphite :meetTarget:graphite
  1248 set silicon :meetTarget:silicon
  1249 set titanium :meetTarget:titanium
 
  1446 wait 1e-15
  1447 read *tmp447 processor5 ":buildBlockAt*finished"
  1448 jump *label358 equal *tmp447 false
-    * read *tmp448 processor5 ":buildBlockAt*retval"
-    * set :buildBlock:built *tmp448
+ 1449 read :buildBlock:built processor5 ":buildBlockAt*retval"
  1450 write false .controller ":buildStop*finished"
  1451 write 2 .controller "@counter"
  1452 set :buildBlock*retval :buildBlock:built
 
  1515 setaddr :moveToBlock*retaddr *label376 (h:*label376)
  1516 call *label20 *invalid :moveToBlock*retval (m:*label376) (h:*label376)
  1517 label *label376
-    * sensor *tmp459 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp459
+ 1518 sensor :depositItems:cap :depositItems:block @itemCapacity
  1519 label *label377
  1520 ucontrol itemDrop :depositItems:block 30
  1521 label *label378
 
  1545 return :depositItems*retaddr
  1546 end
  1547 label *label23
-    * op min *tmp466 :mineOre:amount 30
-    * set :mineOre:amount *tmp466
+ 1548 op min :mineOre:amount :mineOre:amount 30
  1549 set :transportStatus:target :mineOre:amount
  1550 set :transportStatus:item :mineOre:ore
  1551 setaddr :transportStatus*retaddr *label385 (h:*label385)
 
  1575 setaddr :status3*retaddr *label391 (h:*label391)
  1576 call *label13 *invalid :status3*retval (m:*label391) (h:*label391)
  1577 label *label391
-    * op add *tmp470 @second 10
-    * set :mineOre:stop *tmp470
+ 1578 op add :mineOre:stop @second 10
  1579 label *label392
-    * sensor *tmp471 @unit @firstItem
-    * set :mineOre:item *tmp471
+ 1580 sensor :mineOre:item @unit @firstItem
  1581 op notEqual *tmp472 :mineOre:item null
  1582 op notEqual *tmp473 :mineOre:item :mineOre:ore
  1583 op land *tmp474 *tmp472 *tmp473

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   504 call *label43 *invalid :flagUnits*retval (m:*label154) (h:*label154)
   505 label *label154
   506 label *label155
-    * jump *label157 equal true false
   507 op sub :lineUpUnits:y @thisy 6
   508 set :lineUpUnits:unit @mega
   509 setaddr :lineUpUnits*retaddr *label158 (h:*label158)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-73 instructions):
 
    29 set .builder @unit
    30 ulocate building core false @copper .coreX .coreY *tmp120 .core
    31 label *label51
-    * op equal *tmp121 .core null
-    * jump *label50 notEqual *tmp121 false
+   32 jump *label50 equal .core null
    33 label *label52
    34 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    35 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
    78 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
    79 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
    80 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
-    * op equal *tmp141 :buildFirstTitaniumDrill:result false
-    * jump *label62 equal *tmp141 false
+   81 jump *label62 notEqual :buildFirstTitaniumDrill:result false
    82 set :error:error "Cannot locate spot for titanium drill"
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
 
   210 call *label35 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   211 label *label94
   212 sensor *tmp158 AJTJK-battery1 @totalPower
-    * op lessThan *tmp159 *tmp158 300
-    * jump *label95 equal *tmp159 false
+  213 jump *label95 greaterThanEq *tmp158 300
   214 jump *label93 always
   215 jump *label96 always
   216 label *label95
   217 label *label96
   218 label *label92
   219 read *tmp84 .controller ".monos"
-    * op lessThan *tmp161 *tmp84 3
-    * jump *label91 notEqual *tmp161 false
+  220 jump *label91 lessThan *tmp84 3
   221 label *label93
   222 set .siliconSurplus 65
   223 set :buildBlockFromCfg.1:cfg "A©NHJY-unloader15"
 
   277 label *label109
   278 label *label110
   279 read *tmp85 .controller ".polys"
-    * op lessThan *tmp172 *tmp85 2
-    * jump *label112 equal *tmp172 false
+  280 jump *label112 greaterThanEq *tmp85 2
   281 setaddr :supplyBase*retaddr *label113 (h:*label113)
   282 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   283 label *label113
 
   290 label *label114
   291 label *label115
   292 read *tmp83 .controller ".flares"
-    * op lessThan *tmp173 *tmp83 2
-    * jump *label117 equal *tmp173 false
+  293 jump *label117 greaterThanEq *tmp83 2
   294 setaddr :supplyBase*retaddr *label118 (h:*label118)
   295 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   296 label *label118
 
   343 read *tmp193 processor3 ":layoutThoriumDrill*finished"
   344 jump *label124 equal *tmp193 false
   345 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
-    * op equal *tmp195 :buildThoriumDrill:result false
-    * jump *label125 equal *tmp195 false
+  346 jump *label125 notEqual :buildThoriumDrill:result false
   347 set :error:error "Cannot locate spot for thorium drill"
   348 setaddr :error*retaddr *label127 (h:*label127)
   349 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
 
   417 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   418 label *label136
   419 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp213 .thoriumContainer null
-    * jump *label137 equal *tmp213 false
+  420 jump *label137 notEqual .thoriumContainer null
   421 set .thoriumContainer .thoriumDrill
   422 jump *label138 always
   423 label *label137
 
   435 write null processor2 ".nextBlock"
   436 label *label140
   437 read *tmp85 .controller ".polys"
-    * op lessThan *tmp217 *tmp85 3
-    * jump *label142 equal *tmp217 false
+  438 jump *label142 greaterThanEq *tmp85 3
   439 setaddr :supplyBase*retaddr *label143 (h:*label143)
   440 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   441 label *label143
 
   468 ucontrol payEnter
   469 label *label148
   470 read *tmp86 .controller ".megas"
-    * op equal *tmp222 *tmp86 false
-    * jump *label147 notEqual *tmp222 false
+  471 jump *label147 equal *tmp86 false
   472 label *label149
   473 write true .controller ".finished"
   474 control enabled processor8 false
 
   537 call *label11 *invalid :status1*retval (m:*label167) (h:*label167)
   538 label *label167
   539 sensor *tmp238 .thoriumBattery @totalPower
-    * op lessThan *tmp239 *tmp238 2000
-    * jump *label168 equal *tmp239 false
+  540 jump *label168 greaterThanEq *tmp238 2000
   541 sensor *tmp241 .thoriumGenerator @coal
-    * op equal *tmp242 *tmp241 0
-    * jump *label170 equal *tmp242 false
+  542 jump *label170 notEqual *tmp241 0
   543 sensor *tmp244 .core @coal
-    * op lessThan *tmp245 *tmp244 50
-    * jump *label172 equal *tmp245 false
+  544 jump *label172 greaterThanEq *tmp244 50
   545 set :supplyBlock:block .thoriumGenerator
   546 set :supplyBlock:ore @coal
   547 setaddr :supplyBlock*retaddr *label174 (h:*label174)
 
   567 call *label25 *invalid :fetchBlock*retval (m:*label176) (h:*label176)
   568 label *label176
   569 sensor *tmp247 .core @thorium
-    * op greaterThan *tmp248 *tmp247 400
-    * jump *label177 equal *tmp248 false
+  570 jump *label177 lessThanEq *tmp247 400
   571 set :setPolyTarget.1:target 4
   572 write :setPolyTarget.1:target .controller ".polyTarget"
   573 write :setPolyTarget.1:target processor2 ".polyTarget"
 
   579 jump *label165 always
   580 label *label164
   581 read *tmp84 .controller ".monos"
-    * op greaterThan *tmp250 *tmp84 1
-    * jump *label180 equal *tmp250 false
+  582 jump *label180 lessThanEq *tmp84 1
   583 set :status1:text "Phase 1: supplying base"
   584 setaddr :status1*retaddr *label183 (h:*label183)
   585 call *label11 *invalid :status1*retval (m:*label183) (h:*label183)
 
   592 jump *label181 always
   593 label *label180
   594 set :supplyBase0:supplied false
-    * op equal *tmp252 A©JNJP-unloader6 null
-    * jump *label186 equal *tmp252 false
+  595 jump *label186 notEqual A©JNJP-unloader6 null
   596 sensor *tmp254 .core @graphite
-    * op lessThan *tmp255 *tmp254 graphite
-    * jump *label188 equal *tmp255 false
+  597 jump *label188 greaterThanEq *tmp254 graphite
   598 sensor *tmp257 AJEMJJ-graphite-press0 @coal
-    * op lessThan *tmp258 *tmp257 5
-    * jump *label190 equal *tmp258 false
+  599 jump *label190 greaterThanEq *tmp257 5
   600 set :status1:text "Goal 1: graphite requirement"
   601 setaddr :status1*retaddr *label192 (h:*label192)
   602 call *label11 *invalid :status1*retval (m:*label192) (h:*label192)
 
   614 label *label188
   615 label *label189
   616 sensor *tmp260 .core @silicon
-    * op lessThan *tmp261 *tmp260 silicon
-    * jump *label194 equal *tmp261 false
+  617 jump *label194 greaterThanEq *tmp260 silicon
   618 sensor *tmp263 ALMQJN-silicon-smelter4 @coal
-    * op lessThan *tmp264 *tmp263 5
-    * jump *label196 equal *tmp264 false
+  619 jump *label196 greaterThanEq *tmp263 5
   620 set :status1:text "Goal 2: coal for silicon requirement"
   621 setaddr :status1*retaddr *label198 (h:*label198)
   622 call *label11 *invalid :status1*retval (m:*label198) (h:*label198)
 
   630 jump *label197 always
   631 label *label196
   632 sensor *tmp266 ALMQJN-silicon-smelter4 @sand
-    * op lessThan *tmp267 *tmp266 5
-    * jump *label200 equal *tmp267 false
+  633 jump *label200 greaterThanEq *tmp266 5
   634 set :status1:text "Goal 3: sand for silicon requirement"
   635 setaddr :status1*retaddr *label202 (h:*label202)
   636 call *label11 *invalid :status1*retval (m:*label202) (h:*label202)
 
   649 label *label194
   650 label *label195
   651 sensor *tmp269 AJTJK-battery1 @totalPower
-    * op lessThan *tmp270 *tmp269 .powerTarget
-    * jump *label204 equal *tmp270 false
+  652 jump *label204 greaterThanEq *tmp269 .powerTarget
   653 sensor *tmp272 AJRJM-combustion-generator3 @coal
-    * op lessThan *tmp273 *tmp272 2
-    * jump *label206 equal *tmp273 false
+  654 jump *label206 greaterThanEq *tmp272 2
   655 set :status1:text "Goal 4: supplying generator"
   656 setaddr :status1*retaddr *label208 (h:*label208)
   657 call *label11 *invalid :status1*retval (m:*label208) (h:*label208)
 
   672 label *label186
   673 label *label187
   674 sensor *tmp275 .core @titanium
-    * op lessThan *tmp276 *tmp275 titanium
-    * jump *label210 equal *tmp276 false
+  675 jump *label210 greaterThanEq *tmp275 titanium
   676 sensor *tmp278 .core @titanium
   677 op sub *tmp279 titanium *tmp278
   678 op min *tmp277 7 *tmp279
 
   682 label *label211
   683 set :supplyBase0:titaniumTrigger *tmp277
   684 sensor *tmp281 .titaniumDrill @titanium
-    * op lessThan *tmp282 *tmp281 :supplyBase0:titaniumTrigger
-    * jump *label212 equal *tmp282 false
-    * op equal *tmp284 :supplyBase0:supplied false
-    * jump *label214 equal *tmp284 false
+  685 jump *label212 greaterThanEq *tmp281 :supplyBase0:titaniumTrigger
+  686 jump *label214 notEqual :supplyBase0:supplied false
   687 sensor *tmp286 AJTJK-battery1 @totalPower
   688 op mul *tmp287 A©JNJP-unloader6 .powerTarget
-    * op lessThan *tmp288 *tmp286 *tmp287
-    * jump *label216 equal *tmp288 false
+  689 jump *label216 greaterThanEq *tmp286 *tmp287
   690 set :status1:text "Goal 5: supplying generator"
   691 setaddr :status1*retaddr *label218 (h:*label218)
   692 call *label11 *invalid :status1*retval (m:*label218) (h:*label218)
 
   698 jump *label217 always
   699 label *label216
   700 sensor *tmp290 .core @silicon
-    * op lessThan *tmp291 *tmp290 silicon
-    * jump *label220 equal *tmp291 false
+  701 jump *label220 greaterThanEq *tmp290 silicon
   702 set :status1:text "Goal 6: silicon requirement"
   703 setaddr :status1*retaddr *label222 (h:*label222)
   704 call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
   705 label *label222
   706 sensor :supplyBase0:coal .core @coal
   707 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp295 :supplyBase0:coal :supplyBase0:sand
-    * jump *label223 equal *tmp295 false
+  708 jump *label223 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   709 set *tmp296 @coal
   710 jump *label224 always
   711 label *label223
 
   719 jump *label221 always
   720 label *label220
   721 sensor *tmp297 .core @copper
-    * op lessThan *tmp298 *tmp297 copper
-    * jump *label226 equal *tmp298 false
+  722 jump *label226 greaterThanEq *tmp297 copper
   723 set :status1:text "Goal 7: copper requirement"
   724 setaddr :status1*retaddr *label228 (h:*label228)
   725 call *label11 *invalid :status1*retval (m:*label228) (h:*label228)
 
   731 jump *label227 always
   732 label *label226
   733 sensor *tmp300 .core @lead
-    * op lessThan *tmp301 *tmp300 lead
-    * jump *label230 equal *tmp301 false
+  734 jump *label230 greaterThanEq *tmp300 lead
   735 set :status1:text "Goal 8: lead requirement"
   736 setaddr :status1*retaddr *label232 (h:*label232)
   737 call *label11 *invalid :status1*retval (m:*label232) (h:*label232)
 
   743 jump *label231 always
   744 label *label230
   745 sensor *tmp303 .core @metaglass
-    * op lessThan *tmp304 *tmp303 metaglass
-    * jump *label234 equal *tmp304 false
+  746 jump *label234 greaterThanEq *tmp303 metaglass
   747 set :status1:text "Goal 9: metaglass requirement"
   748 setaddr :status1*retaddr *label236 (h:*label236)
   749 call *label11 *invalid :status1*retval (m:*label236) (h:*label236)
 
   760 label *label238
   761 sensor :supplyBase0:coal.1 .core @coal
   762 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp308 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label239 equal *tmp308 false
+  763 jump *label239 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
   764 set *tmp309 @coal
   765 jump *label240 always
   766 label *label239
 
   799 end
   800 label *label38
   801 op add *tmp310 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp311 *tmp310 0
-    * jump *label245 equal *tmp311 false
+  802 jump *label245 lessThanEq *tmp310 0
   803 set :unpackCfg:cfg :buildRemoteBlock:cfg
   804 setaddr :unpackCfg*retaddr *label247 (h:*label247)
   805 call *label29 *invalid :unpackCfg*retval (m:*label247) (h:*label247)
 
   951 ubind :flagUnits:unit
   952 set :flagUnits:firstUnit @unit
   953 label *label261
-    * op equal *tmp317 :flagUnits:firstUnit null
-    * jump *label260 notEqual *tmp317 false
+  954 jump *label260 equal :flagUnits:firstUnit null
   955 label *label262
   956 set :flagUnits:x @thisx
   957 label *label263
 
   959 op add :flagUnits:x :flagUnits:x 4
   960 ubind :flagUnits:unit
   961 label *label264
-    * op notEqual *tmp318 @unit :flagUnits:firstUnit
-    * jump *label263 notEqual *tmp318 false
+  962 jump *label263 notEqual @unit :flagUnits:firstUnit
   963 label *label265
   964 label *label259
   965 return :flagUnits*retaddr
 
   979 label *label271
   980 ubind :lineUpUnits:unit
   981 label *label268
-    * op notEqual *tmp322 @unit :lineUpUnits:firstUnit
-    * jump *label267 notEqual *tmp322 false
+  982 jump *label267 notEqual @unit :lineUpUnits:firstUnit
   983 label *label269
   984 label *label266
   985 return :lineUpUnits*retaddr
 
  1064 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1065 sensor *tmp338 :supplyBlock:block :supplyBlock:ore
  1066 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp338
-    * op greaterThan *tmp340 :supplyBlock:missing 0
-    * jump *label289 equal *tmp340 false
+ 1067 jump *label289 lessThanEq :supplyBlock:missing 0
  1068 set :mineOre:ore :supplyBlock:ore
  1069 set :mineOre:amount :supplyBlock:blockCapacity
  1070 set :mineOre:block :supplyBlock:block
 
  1231 write copper processor7 ".copperTarget"
  1232 label *label315
  1233 sensor *tmp393 .core @copper
-    * op lessThan *tmp394 *tmp393 copper
-    * jump *label319 equal *tmp394 false
+ 1234 jump *label319 greaterThanEq *tmp393 copper
  1235 set *tmp392 false
  1236 jump *label318 always
  1237 jump *label320 always
  1238 label *label319
  1239 label *label320
  1240 sensor *tmp396 .core @lead
-    * op lessThan *tmp397 *tmp396 lead
-    * jump *label321 equal *tmp397 false
+ 1241 jump *label321 greaterThanEq *tmp396 lead
  1242 set *tmp392 false
  1243 jump *label318 always
  1244 jump *label322 always
  1245 label *label321
  1246 label *label322
  1247 sensor *tmp399 .core @graphite
-    * op lessThan *tmp400 *tmp399 graphite
-    * jump *label323 equal *tmp400 false
+ 1248 jump *label323 greaterThanEq *tmp399 graphite
  1249 set *tmp392 false
  1250 jump *label318 always
  1251 jump *label324 always
  1252 label *label323
  1253 label *label324
  1254 sensor *tmp402 .core @silicon
-    * op lessThan *tmp403 *tmp402 silicon
-    * jump *label325 equal *tmp403 false
+ 1255 jump *label325 greaterThanEq *tmp402 silicon
  1256 set *tmp392 false
  1257 jump *label318 always
  1258 jump *label326 always
  1259 label *label325
  1260 label *label326
  1261 sensor *tmp405 .core @titanium
-    * op lessThan *tmp406 *tmp405 titanium
-    * jump *label327 equal *tmp406 false
+ 1262 jump *label327 greaterThanEq *tmp405 titanium
  1263 set *tmp392 false
  1264 jump *label318 always
  1265 jump *label328 always
  1266 label *label327
  1267 label *label328
  1268 sensor *tmp408 .core @metaglass
-    * op lessThan *tmp409 *tmp408 metaglass
-    * jump *label329 equal *tmp409 false
+ 1269 jump *label329 greaterThanEq *tmp408 metaglass
  1270 set *tmp392 false
  1271 jump *label318 always
  1272 jump *label330 always
  1273 label *label329
  1274 label *label330
  1275 sensor *tmp411 .core @thorium
-    * op lessThan *tmp412 *tmp411 thorium
-    * jump *label331 equal *tmp412 false
+ 1276 jump *label331 greaterThanEq *tmp411 thorium
  1277 set *tmp392 false
  1278 jump *label318 always
  1279 jump *label332 always
 
  1283 jump *label318 always
  1284 set *tmp392 null
  1285 label *label318
-    * op equal *tmp414 *tmp392 false
-    * jump *label317 equal *tmp414 false
+ 1286 jump *label317 notEqual *tmp392 false
  1287 setaddr :supplyBase*retaddr *label333 (h:*label333)
  1288 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1289 label *label333
 
  1299 jump *label336 equal *tmp416 false
  1300 label *label337
  1301 sensor *tmp418 .core @copper
-    * op lessThan *tmp419 *tmp418 copper
-    * jump *label341 equal *tmp419 false
+ 1302 jump *label341 greaterThanEq *tmp418 copper
  1303 set *tmp417 false
  1304 jump *label340 always
  1305 jump *label342 always
  1306 label *label341
  1307 label *label342
  1308 sensor *tmp421 .core @lead
-    * op lessThan *tmp422 *tmp421 lead
-    * jump *label343 equal *tmp422 false
+ 1309 jump *label343 greaterThanEq *tmp421 lead
  1310 set *tmp417 false
  1311 jump *label340 always
  1312 jump *label344 always
  1313 label *label343
  1314 label *label344
  1315 sensor *tmp424 .core @graphite
-    * op lessThan *tmp425 *tmp424 graphite
-    * jump *label345 equal *tmp425 false
+ 1316 jump *label345 greaterThanEq *tmp424 graphite
  1317 set *tmp417 false
  1318 jump *label340 always
  1319 jump *label346 always
  1320 label *label345
  1321 label *label346
  1322 sensor *tmp427 .core @silicon
-    * op lessThan *tmp428 *tmp427 silicon
-    * jump *label347 equal *tmp428 false
+ 1323 jump *label347 greaterThanEq *tmp427 silicon
  1324 set *tmp417 false
  1325 jump *label340 always
  1326 jump *label348 always
  1327 label *label347
  1328 label *label348
  1329 sensor *tmp430 .core @titanium
-    * op lessThan *tmp431 *tmp430 titanium
-    * jump *label349 equal *tmp431 false
+ 1330 jump *label349 greaterThanEq *tmp430 titanium
  1331 set *tmp417 false
  1332 jump *label340 always
  1333 jump *label350 always
  1334 label *label349
  1335 label *label350
  1336 sensor *tmp433 .core @metaglass
-    * op lessThan *tmp434 *tmp433 metaglass
-    * jump *label351 equal *tmp434 false
+ 1337 jump *label351 greaterThanEq *tmp433 metaglass
  1338 set *tmp417 false
  1339 jump *label340 always
  1340 jump *label352 always
  1341 label *label351
  1342 label *label352
  1343 sensor *tmp436 .core @thorium
-    * op lessThan *tmp437 *tmp436 thorium
-    * jump *label353 equal *tmp437 false
+ 1344 jump *label353 greaterThanEq *tmp436 thorium
  1345 set *tmp417 false
  1346 jump *label340 always
  1347 jump *label354 always
 
  1351 jump *label340 always
  1352 set *tmp417 null
  1353 label *label340
-    * op equal *tmp439 *tmp417 false
-    * jump *label339 equal *tmp439 false
+ 1354 jump *label339 notEqual *tmp417 false
  1355 setaddr :supplyBase*retaddr *label355 (h:*label355)
  1356 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1357 label *label355
 
  1420 label *label362
  1421 label *label363
  1422 sensor *tmp449 @unit @firstItem
-    * op notEqual *tmp450 *tmp449 null
-    * jump *label366 equal *tmp450 false
+ 1423 jump *label366 equal *tmp449 null
  1424 ucontrol itemDrop @air 1000
  1425 jump *label367 always
  1426 label *label366
 
  1428 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1429 label *label364
  1430 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp452
-    * op equal *tmp453 *tmp452 false
-    * jump *label363 notEqual *tmp453 false
+ 1431 jump *label363 equal *tmp452 false
  1432 label *label365
  1433 label *label361
  1434 return :moveToEmpty*retaddr
 
  1436 label *label19
  1437 label *label369
  1438 sensor *tmp454 @unit @firstItem
-    * op notEqual *tmp455 *tmp454 null
-    * jump *label371 equal *tmp455 false
+ 1439 jump *label371 equal *tmp454 null
  1440 ucontrol itemDrop @air 1000
  1441 label *label370
  1442 jump *label369 always
 
  1450 call *label13 *invalid :status3*retval (m:*label373) (h:*label373)
  1451 label *label373
  1452 sensor *tmp456 @unit @firstItem
-    * op equal *tmp457 *tmp456 :depositItems:item
-    * jump *label374 equal *tmp457 false
+ 1453 jump *label374 notEqual *tmp456 :depositItems:item
  1454 set :moveToBlock:block :depositItems:block
  1455 set :moveToBlock:radius 6
  1456 setaddr :moveToBlock*retaddr *label376 (h:*label376)
 
  1463 sensor *tmp460 @unit @firstItem
  1464 op mul *tmp461 *tmp460 :depositItems:cap
  1465 sensor *tmp462 :depositItems:block :depositItems:item
-    * op greaterThan *tmp463 *tmp461 *tmp462
-    * jump *label377 notEqual *tmp463 false
+ 1466 jump *label377 greaterThan *tmp461 *tmp462
  1467 label *label379
  1468 jump *label375 always
  1469 label *label374
  1470 label *label380
  1471 sensor *tmp464 @unit @firstItem
-    * op notEqual *tmp465 *tmp464 null
-    * jump *label382 equal *tmp465 false
+ 1472 jump *label382 equal *tmp464 null
  1473 ucontrol itemDrop @air 1000
  1474 label *label381
  1475 jump *label380 always
 
  1502 call *label18 *invalid :moveToEmpty*retval (m:*label387) (h:*label387)
  1503 label *label387
  1504 sensor *tmp467 @unit @firstItem
-    * op notEqual *tmp468 *tmp467 :mineOre:ore
-    * jump *label388 equal *tmp468 false
+ 1505 jump *label388 equal *tmp467 :mineOre:ore
  1506 setaddr :dropAll*retaddr *label390 (h:*label390)
  1507 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1508 label *label390
 
  1525 label *label395
  1526 label *label396
  1527 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp476 @second :mineOre:stop
-    * jump *label397 equal *tmp476 false
+ 1528 jump *label397 lessThanEq @second :mineOre:stop
  1529 jump *label394 always
  1530 jump *label398 always
  1531 label *label397
  1532 label *label398
-    * op equal *tmp478 .noTarget false
-    * jump *label399 equal *tmp478 false
+ 1533 jump *label399 notEqual .noTarget false
  1534 sensor *tmp481 .core @copper
-    * op lessThan *tmp482 *tmp481 copper
-    * jump *label402 equal *tmp482 false
+ 1535 jump *label402 greaterThanEq *tmp481 copper
  1536 set *tmp480 false
  1537 jump *label401 always
  1538 jump *label403 always
  1539 label *label402
  1540 label *label403
  1541 sensor *tmp484 .core @lead
-    * op lessThan *tmp485 *tmp484 lead
-    * jump *label404 equal *tmp485 false
+ 1542 jump *label404 greaterThanEq *tmp484 lead
  1543 set *tmp480 false
  1544 jump *label401 always
  1545 jump *label405 always
  1546 label *label404
  1547 label *label405
  1548 sensor *tmp487 .core @graphite
-    * op lessThan *tmp488 *tmp487 graphite
-    * jump *label406 equal *tmp488 false
+ 1549 jump *label406 greaterThanEq *tmp487 graphite
  1550 set *tmp480 false
  1551 jump *label401 always
  1552 jump *label407 always
  1553 label *label406
  1554 label *label407
  1555 sensor *tmp490 .core @silicon
-    * op lessThan *tmp491 *tmp490 silicon
-    * jump *label408 equal *tmp491 false
+ 1556 jump *label408 greaterThanEq *tmp490 silicon
  1557 set *tmp480 false
  1558 jump *label401 always
  1559 jump *label409 always
  1560 label *label408
  1561 label *label409
  1562 sensor *tmp493 .core @titanium
-    * op lessThan *tmp494 *tmp493 titanium
-    * jump *label410 equal *tmp494 false
+ 1563 jump *label410 greaterThanEq *tmp493 titanium
  1564 set *tmp480 false
  1565 jump *label401 always
  1566 jump *label411 always
  1567 label *label410
  1568 label *label411
  1569 sensor *tmp496 .core @metaglass
-    * op lessThan *tmp497 *tmp496 metaglass
-    * jump *label412 equal *tmp497 false
+ 1570 jump *label412 greaterThanEq *tmp496 metaglass
  1571 set *tmp480 false
  1572 jump *label401 always
  1573 jump *label413 always
  1574 label *label412
  1575 label *label413
  1576 sensor *tmp499 .core @thorium
-    * op lessThan *tmp500 *tmp499 thorium
-    * jump *label414 equal *tmp500 false
+ 1577 jump *label414 greaterThanEq *tmp499 thorium
  1578 set *tmp480 false
  1579 jump *label401 always
  1580 jump *label415 always
 
  1594 label *label400
  1595 label *label393
  1596 sensor *tmp503 @unit @totalItems
-    * op lessThan *tmp504 *tmp503 :mineOre:amount
-    * jump *label392 notEqual *tmp504 false
+ 1597 jump *label392 lessThan *tmp503 :mineOre:amount
  1598 label *label394
  1599 ucontrol unbind
  1600 set :depositItems:block :mineOre:block
 
  1624 end
  1625 label *label22
  1626 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
-    * op equal *tmp509 *tmp507 false
-    * jump *label423 equal *tmp509 false
+ 1627 jump *label423 notEqual *tmp507 false
  1628 set :error:error "Cannot locate ore"
  1629 setaddr :error*retaddr *label425 (h:*label425)
  1630 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
 
  1642 label *label427
  1643 label *label428
  1644 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511
-    * op equal *tmp512 *tmp511 false
-    * jump *label430 equal *tmp512 false
+ 1645 jump *label430 notEqual *tmp511 false
  1646 op sub *tmp513 :moveTo:radius 0.5
  1647 ucontrol approach :moveTo:x :moveTo:y *tmp513
  1648 label *label429

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-49 instructions):
 
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    85 label *label64
-    * jump *label63 always
    86 label *label62
    87 label *label63
    88 write @pneumatic-drill processor2 ".nextBlock"
 
   211 sensor *tmp158 AJTJK-battery1 @totalPower
   212 jump *label95 greaterThanEq *tmp158 300
   213 jump *label93 always
-    * jump *label96 always
   214 label *label95
   215 label *label96
   216 label *label92
 
   346 setaddr :error*retaddr *label127 (h:*label127)
   347 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   348 label *label127
-    * jump *label126 always
   349 label *label125
   350 label *label126
   351 write @laser-drill processor5 ":buildBlockAt:block"
 
   416 set .thoriumContainer :buildRemoteBlock*retval
   417 jump *label137 notEqual .thoriumContainer null
   418 set .thoriumContainer .thoriumDrill
-    * jump *label138 always
   419 label *label137
   420 label *label138
   421 write .thoriumDrill processor2 ".thoriumDrill"
 
   551 call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
   552 label *label175
   553 label *label173
-    * jump *label171 always
   554 label *label170
   555 label *label171
-    * jump *label169 always
   556 label *label168
   557 label *label169
   558 set :fetchBlock:block .thoriumContainer
 
   566 write :setPolyTarget.1:target .controller ".polyTarget"
   567 write :setPolyTarget.1:target processor2 ".polyTarget"
   568 label *label179
-    * jump *label178 always
   569 label *label177
   570 label *label178
   571 label *label166
 
   600 call *label26 *invalid :supplyBlock*retval (m:*label193) (h:*label193)
   601 label *label193
   602 set :supplyBase0:supplied true
-    * jump *label191 always
   603 label *label190
   604 label *label191
-    * jump *label189 always
   605 label *label188
   606 label *label189
   607 sensor *tmp260 .core @silicon
 
   632 call *label26 *invalid :supplyBlock*retval (m:*label203) (h:*label203)
   633 label *label203
   634 set :supplyBase0:supplied true
-    * jump *label201 always
   635 label *label200
   636 label *label201
   637 label *label197
-    * jump *label195 always
   638 label *label194
   639 label *label195
   640 sensor *tmp269 AJTJK-battery1 @totalPower
 
   651 call *label26 *invalid :supplyBlock*retval (m:*label209) (h:*label209)
   652 label *label209
   653 set :supplyBase0:supplied true
-    * jump *label207 always
   654 label *label206
   655 label *label207
-    * jump *label205 always
   656 label *label204
   657 label *label205
-    * jump *label187 always
   658 label *label186
   659 label *label187
   660 sensor *tmp275 .core @titanium
 
   762 label *label227
   763 label *label221
   764 label *label217
-    * jump *label215 always
   765 label *label214
   766 label *label215
   767 jump *label213 always
 
   817 label *label248
   818 set :buildRemoteBlock*retval :buildBlock*retval
   819 jump *label244 always
-    * jump *label246 always
   820 label *label245
   821 label *label246
   822 set :buildRemoteBlock*retval false
 
   958 sensor *tmp320 @unit @mining
   959 jump *label270 equal *tmp320 false
   960 ucontrol stop
-    * jump *label271 always
   961 label *label270
   962 label *label271
   963 ubind :lineUpUnits:unit
 
  1019 op land *tmp331 *tmp329 *tmp330
  1020 jump *label284 equal *tmp331 false
  1021 ucontrol itemDrop @air 1000
-    * jump *label285 always
  1022 label *label284
  1023 label *label285
  1024 label *label282
 
  1053 setaddr :mineOre*retaddr *label291 (h:*label291)
  1054 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
  1055 label *label291
-    * jump *label290 always
  1056 label *label289
  1057 label *label290
  1058 label *label287
 
  1087 op land *tmp347 *tmp345 *tmp346
  1088 jump *label300 equal *tmp347 false
  1089 ucontrol itemDrop @air 1000
-    * jump *label301 always
  1090 label *label300
  1091 label *label301
  1092 label *label298
 
  1214 jump *label319 greaterThanEq *tmp393 copper
  1215 set *tmp392 false
  1216 jump *label318 always
-    * jump *label320 always
  1217 label *label319
  1218 label *label320
  1219 sensor *tmp396 .core @lead
  1220 jump *label321 greaterThanEq *tmp396 lead
  1221 set *tmp392 false
  1222 jump *label318 always
-    * jump *label322 always
  1223 label *label321
  1224 label *label322
  1225 sensor *tmp399 .core @graphite
  1226 jump *label323 greaterThanEq *tmp399 graphite
  1227 set *tmp392 false
  1228 jump *label318 always
-    * jump *label324 always
  1229 label *label323
  1230 label *label324
  1231 sensor *tmp402 .core @silicon
  1232 jump *label325 greaterThanEq *tmp402 silicon
  1233 set *tmp392 false
  1234 jump *label318 always
-    * jump *label326 always
  1235 label *label325
  1236 label *label326
  1237 sensor *tmp405 .core @titanium
  1238 jump *label327 greaterThanEq *tmp405 titanium
  1239 set *tmp392 false
  1240 jump *label318 always
-    * jump *label328 always
  1241 label *label327
  1242 label *label328
  1243 sensor *tmp408 .core @metaglass
  1244 jump *label329 greaterThanEq *tmp408 metaglass
  1245 set *tmp392 false
  1246 jump *label318 always
-    * jump *label330 always
  1247 label *label329
  1248 label *label330
  1249 sensor *tmp411 .core @thorium
  1250 jump *label331 greaterThanEq *tmp411 thorium
  1251 set *tmp392 false
  1252 jump *label318 always
-    * jump *label332 always
  1253 label *label331
  1254 label *label332
  1255 set *tmp392 true
 
  1275 jump *label341 greaterThanEq *tmp418 copper
  1276 set *tmp417 false
  1277 jump *label340 always
-    * jump *label342 always
  1278 label *label341
  1279 label *label342
  1280 sensor *tmp421 .core @lead
  1281 jump *label343 greaterThanEq *tmp421 lead
  1282 set *tmp417 false
  1283 jump *label340 always
-    * jump *label344 always
  1284 label *label343
  1285 label *label344
  1286 sensor *tmp424 .core @graphite
  1287 jump *label345 greaterThanEq *tmp424 graphite
  1288 set *tmp417 false
  1289 jump *label340 always
-    * jump *label346 always
  1290 label *label345
  1291 label *label346
  1292 sensor *tmp427 .core @silicon
  1293 jump *label347 greaterThanEq *tmp427 silicon
  1294 set *tmp417 false
  1295 jump *label340 always
-    * jump *label348 always
  1296 label *label347
  1297 label *label348
  1298 sensor *tmp430 .core @titanium
  1299 jump *label349 greaterThanEq *tmp430 titanium
  1300 set *tmp417 false
  1301 jump *label340 always
-    * jump *label350 always
  1302 label *label349
  1303 label *label350
  1304 sensor *tmp433 .core @metaglass
  1305 jump *label351 greaterThanEq *tmp433 metaglass
  1306 set *tmp417 false
  1307 jump *label340 always
-    * jump *label352 always
  1308 label *label351
  1309 label *label352
  1310 sensor *tmp436 .core @thorium
  1311 jump *label353 greaterThanEq *tmp436 thorium
  1312 set *tmp417 false
  1313 jump *label340 always
-    * jump *label354 always
  1314 label *label353
  1315 label *label354
  1316 set *tmp417 true
 
  1324 label *label338
  1325 jump *label337 always
  1326 label *label339
-    * jump *label335 always
  1327 label *label334
  1328 label *label335
  1329 label *label304
 
  1387 sensor *tmp449 @unit @firstItem
  1388 jump *label366 equal *tmp449 null
  1389 ucontrol itemDrop @air 1000
-    * jump *label367 always
  1390 label *label366
  1391 label *label367
  1392 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
  1470 setaddr :dropAll*retaddr *label390 (h:*label390)
  1471 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1472 label *label390
-    * jump *label389 always
  1473 label *label388
  1474 label *label389
  1475 set :status3:text "Mining..."
 
  1484 op land *tmp474 *tmp472 *tmp473
  1485 jump *label395 equal *tmp474 false
  1486 jump *label394 always
-    * jump *label396 always
  1487 label *label395
  1488 label *label396
  1489 ucontrol mine :mineOre:x :mineOre:y
  1490 jump *label397 lessThanEq @second :mineOre:stop
  1491 jump *label394 always
-    * jump *label398 always
  1492 label *label397
  1493 label *label398
  1494 jump *label399 notEqual .noTarget false
 
  1496 jump *label402 greaterThanEq *tmp481 copper
  1497 set *tmp480 false
  1498 jump *label401 always
-    * jump *label403 always
  1499 label *label402
  1500 label *label403
  1501 sensor *tmp484 .core @lead
  1502 jump *label404 greaterThanEq *tmp484 lead
  1503 set *tmp480 false
  1504 jump *label401 always
-    * jump *label405 always
  1505 label *label404
  1506 label *label405
  1507 sensor *tmp487 .core @graphite
  1508 jump *label406 greaterThanEq *tmp487 graphite
  1509 set *tmp480 false
  1510 jump *label401 always
-    * jump *label407 always
  1511 label *label406
  1512 label *label407
  1513 sensor *tmp490 .core @silicon
  1514 jump *label408 greaterThanEq *tmp490 silicon
  1515 set *tmp480 false
  1516 jump *label401 always
-    * jump *label409 always
  1517 label *label408
  1518 label *label409
  1519 sensor *tmp493 .core @titanium
  1520 jump *label410 greaterThanEq *tmp493 titanium
  1521 set *tmp480 false
  1522 jump *label401 always
-    * jump *label411 always
  1523 label *label410
  1524 label *label411
  1525 sensor *tmp496 .core @metaglass
  1526 jump *label412 greaterThanEq *tmp496 metaglass
  1527 set *tmp480 false
  1528 jump *label401 always
-    * jump *label413 always
  1529 label *label412
  1530 label *label413
  1531 sensor *tmp499 .core @thorium
  1532 jump *label414 greaterThanEq *tmp499 thorium
  1533 set *tmp480 false
  1534 jump *label401 always
-    * jump *label415 always
  1535 label *label414
  1536 label *label415
  1537 set *tmp480 true
 
  1540 label *label401
  1541 jump *label416 equal *tmp480 false
  1542 jump *label394 always
-    * jump *label417 always
  1543 label *label416
  1544 label *label417
-    * jump *label400 always
  1545 label *label399
  1546 label *label400
  1547 label *label393
 
  1581 setaddr :error*retaddr *label425 (h:*label425)
  1582 call *label15 *invalid :error*retval (m:*label425) (h:*label425)
  1583 label *label425
-    * jump *label424 always
  1584 label *label423
  1585 label *label424
  1586 label *label422

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    14 read *tmp116 processor5 "*signature"
    15 jump *label49 notEqual *tmp116 "319badb7a8e178a4:v1"
    16 set .titaniumDrill null
-    * set .thoriumDrill null
    17 set .thoriumBattery null
    18 set .thoriumContainer null
    19 set .thoriumGenerator null
 
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
    58 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   59 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    60 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    61 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
    62 label *label60
 
    95 jump *label65 equal *tmp145 false
    96 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
    97 jump *label59 always
-    * set *tmp128 null
    98 label *label59
    99 set .titaniumDrill *tmp128
-    * write .titaniumDrill processor2 ".titaniumDrill"
+  100 write *tmp128 processor2 ".titaniumDrill"
   101 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
   102 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   103 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
 
   117 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   118 label *label69
   119 set .controller :buildBlockFromCfg*retval
-    * write processor1 .controller ".timer"
-    * write processor2 .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
+  120 write processor1 :buildBlockFromCfg*retval ".timer"
+  121 write processor2 :buildBlockFromCfg*retval ".display"
+  122 write .core :buildBlockFromCfg*retval ".core"
+  123 write bank1 :buildBlockFromCfg*retval ".bank"
   124 set :block "AJEMJJ-graphite-press0"
   125 setaddr *tmp151 *label73
   126 jump *label70 always
 
   161 setaddr *tmp151 *label82
   162 label *label70
   163 read *tmp152 @this :block
-    * write *tmp152 .controller :block
+  164 write *tmp152 :buildBlockFromCfg*retval :block
   165 label *label71
   166 multijump *tmp151 0 0 (m:marker0)
   167 multilabel *label82 (m:marker0)
 
   187 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   188 label *label87
   189 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
-    * write :setFlareTarget:target processor2 ".flareTarget"
+  190 write 1 .controller ".flareTarget"
+  191 write 1 processor2 ".flareTarget"
   192 label *label88
   193 set :setMonoTarget:target 5
-    * write :setMonoTarget:target .controller ".monoTarget"
-    * write :setMonoTarget:target processor2 ".monoTarget"
+  194 write 5 .controller ".monoTarget"
+  195 write 5 processor2 ".monoTarget"
   196 label *label89
   197 write 85 .controller ".pressTarget"
   198 write 150 .controller ".smelterTarget"
   199 write 30 .controller ".kilnTarget"
   200 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  201 set .siliconSurplus 20
   202 setaddr :buildUnits*retaddr *label90 (h:*label90)
   203 call *label42 *invalid :buildUnits*retval (m:*label90) (h:*label90)
   204 label *label90
 
   261 set .metaglassSurplus 100
   262 set .graphiteSurplus 200
   263 set :setMonoTarget.1:target 2
-    * write :setMonoTarget.1:target .controller ".monoTarget"
-    * write :setMonoTarget.1:target processor2 ".monoTarget"
+  264 write 2 .controller ".monoTarget"
+  265 write 2 processor2 ".monoTarget"
   266 label *label107
   267 set :setPolyTarget:target 3
-    * write :setPolyTarget:target .controller ".polyTarget"
-    * write :setPolyTarget:target processor2 ".polyTarget"
+  268 write 3 .controller ".polyTarget"
+  269 write 3 processor2 ".polyTarget"
   270 label *label108
   271 setaddr :buildUnits*retaddr *label109 (h:*label109)
   272 call *label42 *invalid :buildUnits*retval (m:*label109) (h:*label109)
 
   281 jump *label110 always
   282 label *label112
   283 set :setFlareTarget.1:target 2
-    * write :setFlareTarget.1:target .controller ".flareTarget"
-    * write :setFlareTarget.1:target processor2 ".flareTarget"
+  284 write 2 .controller ".flareTarget"
+  285 write 2 processor2 ".flareTarget"
   286 label *label114
   287 label *label115
   288 read *tmp83 .controller ".flares"
 
   386 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   387 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   388 label *label132
-    * set :buildRemoteBlock:cfg "AFFJT-power-node10"
   389 read :buildRemoteBlock:x processor3 ".node2X"
   390 read :buildRemoteBlock:y processor3 ".node2Y"
   391 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
 
   411 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   412 label *label136
   413 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label137 notEqual .thoriumContainer null
+  414 jump *label137 notEqual :buildRemoteBlock*retval null
   415 set .thoriumContainer .thoriumDrill
   416 label *label137
   417 label *label138
 
   443 label *label144
   444 set .metaglassSurplus 10
   445 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
-    * write :setMegaTarget:target processor2 ".megaTarget"
+  446 write 1 .controller ".megaTarget"
+  447 write 1 processor2 ".megaTarget"
   448 label *label145
   449 setaddr :buildUnits*retaddr *label146 (h:*label146)
   450 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
 
   560 sensor *tmp247 .core @thorium
   561 jump *label177 lessThanEq *tmp247 400
   562 set :setPolyTarget.1:target 4
-    * write :setPolyTarget.1:target .controller ".polyTarget"
-    * write :setPolyTarget.1:target processor2 ".polyTarget"
+  563 write 4 .controller ".polyTarget"
+  564 write 4 processor2 ".polyTarget"
   565 label *label179
   566 label *label177
   567 label *label178
 
   665 label *label211
   666 set :supplyBase0:titaniumTrigger *tmp277
   667 sensor *tmp281 .titaniumDrill @titanium
-    * jump *label212 greaterThanEq *tmp281 :supplyBase0:titaniumTrigger
+  668 jump *label212 greaterThanEq *tmp281 *tmp277
   669 jump *label214 notEqual :supplyBase0:supplied false
   670 sensor *tmp286 AJTJK-battery1 @totalPower
   671 op mul *tmp287 A©JNJP-unloader6 .powerTarget
 
   695 set *tmp296 @sand
   696 label *label224
   697 set :supplyBase0:ore *tmp296
-    * set :mineOre.1:ore :supplyBase0:ore
+  698 set :mineOre.1:ore *tmp296
   699 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   700 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   701 label *label225
 
   750 set *tmp309 @sand
   751 label *label240
   752 set :supplyBase0:ore.1 *tmp309
-    * set :mineOre.1:ore :supplyBase0:ore.1
+  753 set :mineOre.1:ore *tmp309
   754 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   755 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   756 label *label241
 
   796 set :buildRemoteBlock:th :unpackCfg:th
   797 set :buildRemoteBlock:rotation :unpackCfg:rotation
   798 set :buildRemoteBlock:index :unpackCfg:ind
-    * set :buildBlock:block :buildRemoteBlock:type
+  799 set :buildBlock:block :unpackCfg:type
   800 set :buildBlock:x :buildRemoteBlock:x
   801 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+  802 set :buildBlock:copper :unpackCfg:cu
+  803 set :buildBlock:lead :unpackCfg:pb
+  804 set :buildBlock:graphite :unpackCfg:gr
+  805 set :buildBlock:silicon :unpackCfg:si
+  806 set :buildBlock:titanium :unpackCfg:ti
+  807 set :buildBlock:metaglass :unpackCfg:mg
+  808 set :buildBlock:thorium :unpackCfg:th
+  809 set :buildBlock:rotation :unpackCfg:rotation
   810 set :buildBlock:config null
-    * set :buildBlock:index :buildRemoteBlock:index
+  811 set :buildBlock:index :unpackCfg:ind
   812 setaddr :buildBlock*retaddr *label248 (h:*label248)
   813 call *label37 *invalid :buildBlock*retval (m:*label248) (h:*label248)
   814 label *label248
 
   818 label *label246
   819 set :buildRemoteBlock*retval false
   820 jump *label244 always
-    * set :buildRemoteBlock*retval null
   821 label *label244
   822 return :buildRemoteBlock*retaddr
   823 end
 
   838 set :buildBlockFromCfg:th :unpackCfg:th
   839 set :buildBlockFromCfg:rotation :unpackCfg:rotation
   840 set :buildBlockFromCfg:index :unpackCfg:ind
-    * op add *tmp313 .coreX :buildBlockFromCfg:x
-    * op add *tmp314 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+  841 op add *tmp313 .coreX :unpackCfg:x
+  842 op add *tmp314 .coreY :unpackCfg:y
+  843 set :buildBlock:block :unpackCfg:type
   844 set :buildBlock:x *tmp313
   845 set :buildBlock:y *tmp314
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+  846 set :buildBlock:copper :unpackCfg:cu
+  847 set :buildBlock:lead :unpackCfg:pb
+  848 set :buildBlock:graphite :unpackCfg:gr
+  849 set :buildBlock:silicon :unpackCfg:si
+  850 set :buildBlock:titanium :unpackCfg:ti
+  851 set :buildBlock:metaglass :unpackCfg:mg
+  852 set :buildBlock:thorium :unpackCfg:th
+  853 set :buildBlock:rotation :unpackCfg:rotation
   854 set :buildBlock:config :buildBlockFromCfg:config
-    * set :buildBlock:index :buildBlockFromCfg:index
+  855 set :buildBlock:index :unpackCfg:ind
   856 setaddr :buildBlock*retaddr *label251 (h:*label251)
   857 call *label37 *invalid :buildBlock*retval (m:*label251) (h:*label251)
   858 label *label251
   859 set :buildBlockFromCfg:building :buildBlock*retval
-    * write :buildBlockFromCfg:building @this :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building processor2 :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building .controller :buildBlockFromCfg:cfg
-    * set :buildBlockFromCfg*retval :buildBlockFromCfg:building
+  860 write :buildBlock*retval @this :buildBlockFromCfg:cfg
+  861 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
+  862 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
+  863 set :buildBlockFromCfg*retval :buildBlock*retval
   864 jump *label249 always
-    * set :buildBlockFromCfg*retval null
   865 label *label249
   866 return :buildBlockFromCfg*retaddr
   867 end
 
   887 set :meetTarget.1:ti :unpackCfg:ti
   888 set :meetTarget.1:mg :unpackCfg:mg
   889 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+  890 set :meetTarget:block :unpackCfg:type
+  891 set :meetTarget:copper :unpackCfg:cu
+  892 set :meetTarget:lead :unpackCfg:pb
+  893 set :meetTarget:graphite :unpackCfg:gr
+  894 set :meetTarget:silicon :unpackCfg:si
+  895 set :meetTarget:titanium :unpackCfg:ti
+  896 set :meetTarget:metaglass :unpackCfg:mg
+  897 set :meetTarget:thorium :unpackCfg:th
   898 set :meetTarget:forBuild false
   899 set :meetTarget:isNoTarget false
   900 setaddr :meetTarget*retaddr *label256 (h:*label256)
 
  1101 end
  1102 label *label29
  1103 set :unpackCfg:index 1
-    * set *tmp353 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1104 set *tmp353 1
+ 1105 op add :unpackCfg:index 1 1
  1106 read *tmp354 :unpackCfg:cfg *tmp353
  1107 op sub *tmp355 *tmp354 74
  1108 lookup block :unpackCfg:type *tmp355
-    * set *tmp357 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1109 set *tmp357 2
+ 1110 op add :unpackCfg:index 2 1
  1111 read *tmp358 :unpackCfg:cfg *tmp357
  1112 op sub *tmp359 *tmp358 74
  1113 op div :unpackCfg:x *tmp359 2
-    * set *tmp361 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1114 set *tmp361 3
+ 1115 op add :unpackCfg:index 3 1
  1116 read *tmp362 :unpackCfg:cfg *tmp361
  1117 op sub *tmp363 *tmp362 74
  1118 op div :unpackCfg:y *tmp363 2
-    * set *tmp365 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1119 set *tmp365 4
+ 1120 op add :unpackCfg:index 4 1
  1121 read *tmp366 :unpackCfg:cfg *tmp365
  1122 op sub :unpackCfg:rotation *tmp366 74
-    * set *tmp368 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1123 set *tmp368 5
+ 1124 op add :unpackCfg:index 5 1
  1125 read *tmp369 :unpackCfg:cfg *tmp368
  1126 op sub :unpackCfg:ind *tmp369 74
  1127 sensor :unpackCfg:cu :unpackCfg:type @copper
 
  1193 op add *tmp384 :meetTarget:metaglass .metaglassSurplus
  1194 write *tmp384 .controller ".kilnTarget"
  1195 op add *tmp385 :meetTarget:lead .leadSurplus
-    * write *tmp385 .controller ".leadReserve"
+ 1196 write lead .controller ".leadReserve"
  1197 op sign *tmp386 :meetTarget:silicon
  1198 op mul *tmp387 *tmp386 20
  1199 op add *tmp388 :meetTarget:silicon *tmp387
 
  1203 op add *tmp391 :meetTarget:graphite *tmp390
  1204 write *tmp391 .controller ".graphiteReserve"
  1205 write lead processor7 ".leadTarget"
-    * write copper processor7 ".copperTarget"
+ 1206 write :meetTarget:copper processor7 ".copperTarget"
  1207 label *label315
  1208 sensor *tmp393 .core @copper
  1209 jump *label319 greaterThanEq *tmp393 copper
 
  1249 label *label332
  1250 set *tmp392 true
  1251 jump *label318 always
-    * set *tmp392 null
  1252 label *label318
  1253 jump *label317 notEqual *tmp392 false
  1254 setaddr :supplyBase*retaddr *label333 (h:*label333)
 
  1309 label *label354
  1310 set *tmp417 true
  1311 jump *label340 always
-    * set *tmp417 null
  1312 label *label340
  1313 jump *label339 notEqual *tmp417 false
  1314 setaddr :supplyBase*retaddr *label355 (h:*label355)
 
  1354 write 2 .controller "@counter"
  1355 set :buildBlock*retval :buildBlock:built
  1356 jump *label356 always
-    * set :buildBlock*retval null
  1357 label *label356
  1358 return :buildBlock*retaddr
  1359 end
 
  1452 label *label386
  1453 set :mineOre:x :locateOre:x
  1454 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+ 1455 set :moveToEmpty:x :locateOre:x
+ 1456 set :moveToEmpty:y :locateOre:y
  1457 setaddr :moveToEmpty*retaddr *label387 (h:*label387)
  1458 call *label18 *invalid :moveToEmpty*retval (m:*label387) (h:*label387)
  1459 label *label387
 
  1528 label *label415
  1529 set *tmp480 true
  1530 jump *label401 always
-    * set *tmp480 null
  1531 label *label401
  1532 jump *label416 equal *tmp480 false
  1533 jump *label394 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-50 instructions):
 
    55 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
-    * set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    58 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    59 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    60 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
 
   185 setaddr :buildBlockFromCfg.1*retaddr *label87 (h:*label87)
   186 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label87) (h:*label87)
   187 label *label87
-    * set :setFlareTarget:target 1
   188 write 1 .controller ".flareTarget"
   189 write 1 processor2 ".flareTarget"
   190 label *label88
-    * set :setMonoTarget:target 5
   191 write 5 .controller ".monoTarget"
   192 write 5 processor2 ".monoTarget"
   193 label *label89
 
   257 set .siliconMonoSurplus 20
   258 set .metaglassSurplus 100
   259 set .graphiteSurplus 200
-    * set :setMonoTarget.1:target 2
   260 write 2 .controller ".monoTarget"
   261 write 2 processor2 ".monoTarget"
   262 label *label107
-    * set :setPolyTarget:target 3
   263 write 3 .controller ".polyTarget"
   264 write 3 processor2 ".polyTarget"
   265 label *label108
 
   275 label *label111
   276 jump *label110 always
   277 label *label112
-    * set :setFlareTarget.1:target 2
   278 write 2 .controller ".flareTarget"
   279 write 2 processor2 ".flareTarget"
   280 label *label114
 
   361 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   362 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   363 label *label129
-    * set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"
   364 read :buildRemoteBlock:x processor3 ".water2X"
   365 read :buildRemoteBlock:y processor3 ".water2Y"
   366 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
 
   435 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   436 label *label144
   437 set .metaglassSurplus 10
-    * set :setMegaTarget:target 1
   438 write 1 .controller ".megaTarget"
   439 write 1 processor2 ".megaTarget"
   440 label *label145
 
   551 label *label176
   552 sensor *tmp247 .core @thorium
   553 jump *label177 lessThanEq *tmp247 400
-    * set :setPolyTarget.1:target 4
   554 write 4 .controller ".polyTarget"
   555 write 4 processor2 ".polyTarget"
   556 label *label179
 
   654 label *label210
   655 set *tmp277 100
   656 label *label211
-    * set :supplyBase0:titaniumTrigger *tmp277
   657 sensor *tmp281 .titaniumDrill @titanium
   658 jump *label212 greaterThanEq *tmp281 *tmp277
   659 jump *label214 notEqual :supplyBase0:supplied false
 
   684 label *label223
   685 set *tmp296 @sand
   686 label *label224
-    * set :supplyBase0:ore *tmp296
   687 set :mineOre.1:ore *tmp296
   688 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   689 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
 
   738 label *label239
   739 set *tmp309 @sand
   740 label *label240
-    * set :supplyBase0:ore.1 *tmp309
   741 set :mineOre.1:ore *tmp309
   742 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   743 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
 
   774 setaddr :unpackCfg*retaddr *label247 (h:*label247)
   775 call *label29 *invalid :unpackCfg*retval (m:*label247) (h:*label247)
   776 label *label247
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildRemoteBlock:index :unpackCfg:ind
   777 set :buildBlock:block :unpackCfg:type
   778 set :buildBlock:x :buildRemoteBlock:x
   779 set :buildBlock:y :buildRemoteBlock:y
 
   804 setaddr :unpackCfg*retaddr *label250 (h:*label250)
   805 call *label29 *invalid :unpackCfg*retval (m:*label250) (h:*label250)
   806 label *label250
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * set :buildBlockFromCfg:index :unpackCfg:ind
   807 op add *tmp313 .coreX :unpackCfg:x
   808 op add *tmp314 .coreY :unpackCfg:y
   809 set :buildBlock:block :unpackCfg:type
 
   822 setaddr :buildBlock*retaddr *label251 (h:*label251)
   823 call *label37 *invalid :buildBlock*retval (m:*label251) (h:*label251)
   824 label *label251
-    * set :buildBlockFromCfg:building :buildBlock*retval
   825 write :buildBlock*retval @this :buildBlockFromCfg:cfg
   826 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   827 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
 
   844 setaddr :unpackCfg*retaddr *label255 (h:*label255)
   845 call *label29 *invalid :unpackCfg*retval (m:*label255) (h:*label255)
   846 label *label255
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
   847 set :meetTarget:block :unpackCfg:type
   848 set :meetTarget:copper :unpackCfg:cu
   849 set :meetTarget:lead :unpackCfg:pb
 
  1057 return :supplyBlockFromCore*retaddr
  1058 end
  1059 label *label29
-    * set :unpackCfg:index 1
  1060 set *tmp353 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp354 :unpackCfg:cfg *tmp353
+ 1061 read *tmp354 :unpackCfg:cfg 1
  1062 op sub *tmp355 *tmp354 74
  1063 lookup block :unpackCfg:type *tmp355
  1064 set *tmp357 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp358 :unpackCfg:cfg *tmp357
+ 1065 read *tmp358 :unpackCfg:cfg 2
  1066 op sub *tmp359 *tmp358 74
  1067 op div :unpackCfg:x *tmp359 2
  1068 set *tmp361 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp362 :unpackCfg:cfg *tmp361
+ 1069 read *tmp362 :unpackCfg:cfg 3
  1070 op sub *tmp363 *tmp362 74
  1071 op div :unpackCfg:y *tmp363 2
  1072 set *tmp365 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp366 :unpackCfg:cfg *tmp365
+ 1073 read *tmp366 :unpackCfg:cfg 4
  1074 op sub :unpackCfg:rotation *tmp366 74
  1075 set *tmp368 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp369 :unpackCfg:cfg *tmp368
+ 1076 read *tmp369 :unpackCfg:cfg 5
  1077 op sub :unpackCfg:ind *tmp369 74
  1078 sensor :unpackCfg:cu :unpackCfg:type @copper
  1079 sensor :unpackCfg:pb :unpackCfg:type @lead
 
  1143 write *tmp383 .controller ".smelterTarget"
  1144 op add *tmp384 :meetTarget:metaglass .metaglassSurplus
  1145 write *tmp384 .controller ".kilnTarget"
-    * op add *tmp385 :meetTarget:lead .leadSurplus
  1146 write lead .controller ".leadReserve"
  1147 op sign *tmp386 :meetTarget:silicon
  1148 op mul *tmp387 *tmp386 20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-5 instructions):
 
  1057 return :supplyBlockFromCore*retaddr
  1058 end
  1059 label *label29
-    * set *tmp353 1
  1060 read *tmp354 :unpackCfg:cfg 1
  1061 op sub *tmp355 *tmp354 74
  1062 lookup block :unpackCfg:type *tmp355
-    * set *tmp357 2
  1063 read *tmp358 :unpackCfg:cfg 2
  1064 op sub *tmp359 *tmp358 74
  1065 op div :unpackCfg:x *tmp359 2
-    * set *tmp361 3
  1066 read *tmp362 :unpackCfg:cfg 3
  1067 op sub *tmp363 *tmp362 74
  1068 op div :unpackCfg:y *tmp363 2
-    * set *tmp365 4
  1069 read *tmp366 :unpackCfg:cfg 4
  1070 op sub :unpackCfg:rotation *tmp366 74
-    * set *tmp368 5
  1071 read *tmp369 :unpackCfg:cfg 5
  1072 op sub :unpackCfg:ind *tmp369 74
  1073 sensor :unpackCfg:cu :unpackCfg:type @copper

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
  1527 setaddr :status3*retaddr *label427 (h:*label427)
  1528 call *label13 *invalid :status3*retval (m:*label427) (h:*label427)
  1529 label *label427
+ 1530 op sub *tmp513 :moveTo:radius 0.5
  1531 label *label428
  1532 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511
  1533 jump *label430 notEqual *tmp511 false
-    * op sub *tmp513 :moveTo:radius 0.5
  1534 ucontrol approach :moveTo:x :moveTo:y *tmp513
  1535 label *label429
  1536 jump *label428 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-7 instructions):
 
   404 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   405 label *label136
   406 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label137 notEqual :buildRemoteBlock*retval null
-    * set .thoriumContainer .thoriumDrill
-    * label *label137
-    * label *label138
+  407 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
   408 write .thoriumDrill processor2 ".thoriumDrill"
   409 write .thoriumContainer processor2 ".thoriumContainer"
   410 write .thoriumContainer processor6 ":setThoriumContainer:container"
 
   675 label *label222
   676 sensor :supplyBase0:coal .core @coal
   677 sensor :supplyBase0:sand .core @sand
-    * jump *label223 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp296 @coal
-    * jump *label224 always
-    * label *label223
-    * set *tmp296 @sand
-    * label *label224
+  678 select *tmp296 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   679 set :mineOre.1:ore *tmp296
   680 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   681 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
 
   724 label *label238
   725 sensor :supplyBase0:coal.1 .core @coal
   726 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label239 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp309 @coal
-    * jump *label240 always
-    * label *label239
-    * set *tmp309 @sand
-    * label *label240
+  727 select *tmp309 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   728 set :mineOre.1:ore *tmp309
   729 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   730 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 2:
 
   642 label *label205
   643 label *label186
   644 label *label187
+  645 set *tmp277 100
   646 sensor *tmp275 .core @titanium
-    * jump *label210 greaterThanEq *tmp275 titanium
+  647 jump *label211 greaterThanEq *tmp275 titanium
   648 sensor *tmp278 .core @titanium
   649 op sub *tmp279 titanium *tmp278
   650 op min *tmp277 7 *tmp279
   651 jump *label211 always
-    * label *label210
-    * set *tmp277 100
   652 label *label211
   653 sensor *tmp281 .titaniumDrill @titanium
   654 jump *label212 greaterThanEq *tmp281 *tmp277

Modifications by Unroll iteration loop at CoreBuilder.mnd:352:5 (-2 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
-    * setaddr *tmp151 *label73
-    * jump *label70 always
-    * multilabel *label73 (m:marker0)
-    * set :block "AJTJK-battery1"
-    * setaddr *tmp151 *label74
-    * jump *label70 always
-    * multilabel *label74 (m:marker0)
-    * set :block "ALTJL-battery2"
-    * setaddr *tmp151 *label75
-    * jump *label70 always
-    * multilabel *label75 (m:marker0)
-    * set :block "AJRJM-combustion-generator3"
-    * setaddr *tmp151 *label76
-    * jump *label70 always
-    * multilabel *label76 (m:marker0)
-    * set :block "ALMQJN-silicon-smelter4"
-    * setaddr *tmp151 *label77
-    * jump *label70 always
-    * multilabel *label77 (m:marker0)
-    * set :block "A{LNJO-inverted-sorter5"
-    * setaddr *tmp151 *label78
-    * jump *label70 always
-    * multilabel *label78 (m:marker0)
-    * set :block "A©JNJP-unloader6"
-    * setaddr *tmp151 *label79
-    * jump *label70 always
-    * multilabel *label79 (m:marker0)
-    * set :block "A{HNJQ-inverted-sorter7"
-    * setaddr *tmp151 *label80
-    * jump *label70 always
-    * multilabel *label80 (m:marker0)
-    * set :block "AJPJR-underflow-gate8"
-    * setaddr *tmp151 *label81
-    * jump *label70 always
-    * multilabel *label81 (m:marker0)
-    * set :block "AÕFDJS-micro-processor9"
-    * setaddr *tmp151 *label82
-    * label *label70
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
-    * label *label71
-    * multijump *tmp151 0 0 (m:marker0)
-    * multilabel *label82 (m:marker0)
-    * label *label72
+  123 set :block "AJEMJJ-graphite-press0"
+  124 label *label433
+  125 read *tmp152 @this :block
+  126 write *tmp152 :buildBlockFromCfg*retval :block
+  127 label *label434
+  128 set :block "AJTJK-battery1"
+  129 label *label437
+  130 read *tmp152 @this :block
+  131 write *tmp152 :buildBlockFromCfg*retval :block
+  132 label *label438
+  133 set :block "ALTJL-battery2"
+  134 label *label441
+  135 read *tmp152 @this :block
+  136 write *tmp152 :buildBlockFromCfg*retval :block
+  137 label *label442
+  138 set :block "AJRJM-combustion-generator3"
+  139 label *label445
+  140 read *tmp152 @this :block
+  141 write *tmp152 :buildBlockFromCfg*retval :block
+  142 label *label446
+  143 set :block "ALMQJN-silicon-smelter4"
+  144 label *label449
+  145 read *tmp152 @this :block
+  146 write *tmp152 :buildBlockFromCfg*retval :block
+  147 label *label450
+  148 set :block "A{LNJO-inverted-sorter5"
+  149 label *label453
+  150 read *tmp152 @this :block
+  151 write *tmp152 :buildBlockFromCfg*retval :block
+  152 label *label454
+  153 set :block "A©JNJP-unloader6"
+  154 label *label457
+  155 read *tmp152 @this :block
+  156 write *tmp152 :buildBlockFromCfg*retval :block
+  157 label *label458
+  158 set :block "A{HNJQ-inverted-sorter7"
+  159 label *label461
+  160 read *tmp152 @this :block
+  161 write *tmp152 :buildBlockFromCfg*retval :block
+  162 label *label462
+  163 set :block "AJPJR-underflow-gate8"
+  164 label *label465
+  165 read *tmp152 @this :block
+  166 write *tmp152 :buildBlockFromCfg*retval :block
+  167 label *label466
+  168 set :block "AÕFDJS-micro-processor9"
+  169 label *label469
+  170 read *tmp152 @this :block
+  171 write *tmp152 :buildBlockFromCfg*retval :block
+  172 label *label470
+  173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
   175 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   176 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   122 write bank1 :buildBlockFromCfg*retval ".bank"
   123 set :block "AJEMJJ-graphite-press0"
   124 label *label433
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  125 read *tmp152 @this "AJEMJJ-graphite-press0"
+  126 write *tmp152 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   127 label *label434
   128 set :block "AJTJK-battery1"
   129 label *label437
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  130 read *tmp152 @this "AJTJK-battery1"
+  131 write *tmp152 :buildBlockFromCfg*retval "AJTJK-battery1"
   132 label *label438
   133 set :block "ALTJL-battery2"
   134 label *label441
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  135 read *tmp152 @this "ALTJL-battery2"
+  136 write *tmp152 :buildBlockFromCfg*retval "ALTJL-battery2"
   137 label *label442
   138 set :block "AJRJM-combustion-generator3"
   139 label *label445
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  140 read *tmp152 @this "AJRJM-combustion-generator3"
+  141 write *tmp152 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   142 label *label446
   143 set :block "ALMQJN-silicon-smelter4"
   144 label *label449
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  145 read *tmp152 @this "ALMQJN-silicon-smelter4"
+  146 write *tmp152 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   147 label *label450
   148 set :block "A{LNJO-inverted-sorter5"
   149 label *label453
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  150 read *tmp152 @this "A{LNJO-inverted-sorter5"
+  151 write *tmp152 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   152 label *label454
   153 set :block "A©JNJP-unloader6"
   154 label *label457
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  155 read *tmp152 @this "A©JNJP-unloader6"
+  156 write *tmp152 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   157 label *label458
   158 set :block "A{HNJQ-inverted-sorter7"
   159 label *label461
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  160 read *tmp152 @this "A{HNJQ-inverted-sorter7"
+  161 write *tmp152 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   162 label *label462
   163 set :block "AJPJR-underflow-gate8"
   164 label *label465
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  165 read *tmp152 @this "AJPJR-underflow-gate8"
+  166 write *tmp152 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   167 label *label466
   168 set :block "AÕFDJS-micro-processor9"
   169 label *label469
-    * read *tmp152 @this :block
-    * write *tmp152 :buildBlockFromCfg*retval :block
+  170 read *tmp152 @this "AÕFDJS-micro-processor9"
+  171 write *tmp152 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
   172 label *label470
   173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
 
   410 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   411 label *label136
   412 set .thoriumContainer :buildRemoteBlock*retval
-    * select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
+  413 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   414 write .thoriumDrill processor2 ".thoriumDrill"
   415 write .thoriumContainer processor2 ".thoriumContainer"
   416 write .thoriumContainer processor6 ":setThoriumContainer:container"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
   123 label *label433
   124 read *tmp152 @this "AJEMJJ-graphite-press0"
   125 write *tmp152 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   126 label *label434
-    * set :block "AJTJK-battery1"
   127 label *label437
   128 read *tmp152 @this "AJTJK-battery1"
   129 write *tmp152 :buildBlockFromCfg*retval "AJTJK-battery1"
   130 label *label438
-    * set :block "ALTJL-battery2"
   131 label *label441
   132 read *tmp152 @this "ALTJL-battery2"
   133 write *tmp152 :buildBlockFromCfg*retval "ALTJL-battery2"
   134 label *label442
-    * set :block "AJRJM-combustion-generator3"
   135 label *label445
   136 read *tmp152 @this "AJRJM-combustion-generator3"
   137 write *tmp152 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   138 label *label446
-    * set :block "ALMQJN-silicon-smelter4"
   139 label *label449
   140 read *tmp152 @this "ALMQJN-silicon-smelter4"
   141 write *tmp152 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   142 label *label450
-    * set :block "A{LNJO-inverted-sorter5"
   143 label *label453
   144 read *tmp152 @this "A{LNJO-inverted-sorter5"
   145 write *tmp152 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   146 label *label454
-    * set :block "A©JNJP-unloader6"
   147 label *label457
   148 read *tmp152 @this "A©JNJP-unloader6"
   149 write *tmp152 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   150 label *label458
-    * set :block "A{HNJQ-inverted-sorter7"
   151 label *label461
   152 read *tmp152 @this "A{HNJQ-inverted-sorter7"
   153 write *tmp152 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   154 label *label462
-    * set :block "AJPJR-underflow-gate8"
   155 label *label465
   156 read *tmp152 @this "AJPJR-underflow-gate8"
   157 write *tmp152 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   158 label *label466
-    * set :block "AÕFDJS-micro-processor9"
   159 label *label469
   160 read *tmp152 @this "AÕFDJS-micro-processor9"
   161 write *tmp152 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
 
   399 setaddr :buildRemoteBlock*retaddr *label136 (h:*label136)
   400 call *label38 *invalid :buildRemoteBlock*retval (m:*label136) (h:*label136)
   401 label *label136
-    * set .thoriumContainer :buildRemoteBlock*retval
   402 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   403 write .thoriumDrill processor2 ".thoriumDrill"
   404 write .thoriumContainer processor2 ".thoriumContainer"

Modifications by Unroll iteration loop at CoreBuilder.mnd:174:5 (-2 instructions):
 
  1063 end
  1064 label *label36
  1065 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp379 *label308
-    * jump *label305 always
-    * multilabel *label308 (m:marker1)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp379 *label309
-    * jump *label305 always
-    * multilabel *label309 (m:marker1)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp379 *label310
-    * jump *label305 always
-    * multilabel *label310 (m:marker1)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp379 *label311
-    * jump *label305 always
-    * multilabel *label311 (m:marker1)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp379 *label312
-    * jump *label305 always
-    * multilabel *label312 (m:marker1)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp379 *label313
-    * jump *label305 always
-    * multilabel *label313 (m:marker1)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp379 *label314
-    * label *label305
-    * op sign *tmp380 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label306
-    * multijump *tmp379 0 0 (m:marker1)
-    * multilabel *label314 (m:marker1)
-    * label *label307
+ 1066 set :meetTarget:t :meetTarget:copper
+ 1067 label *label474
+ 1068 op sign *tmp380 :meetTarget:t
+ 1069 op add :meetTarget:count :meetTarget:count *tmp380
+ 1070 label *label475
+ 1071 set :meetTarget:t :meetTarget:lead
+ 1072 label *label478
+ 1073 op sign *tmp380 :meetTarget:t
+ 1074 op add :meetTarget:count :meetTarget:count *tmp380
+ 1075 label *label479
+ 1076 set :meetTarget:t :meetTarget:graphite
+ 1077 label *label482
+ 1078 op sign *tmp380 :meetTarget:t
+ 1079 op add :meetTarget:count :meetTarget:count *tmp380
+ 1080 label *label483
+ 1081 set :meetTarget:t :meetTarget:silicon
+ 1082 label *label486
+ 1083 op sign *tmp380 :meetTarget:t
+ 1084 op add :meetTarget:count :meetTarget:count *tmp380
+ 1085 label *label487
+ 1086 set :meetTarget:t :meetTarget:titanium
+ 1087 label *label490
+ 1088 op sign *tmp380 :meetTarget:t
+ 1089 op add :meetTarget:count :meetTarget:count *tmp380
+ 1090 label *label491
+ 1091 set :meetTarget:t :meetTarget:metaglass
+ 1092 label *label494
+ 1093 op sign *tmp380 :meetTarget:t
+ 1094 op add :meetTarget:count :meetTarget:count *tmp380
+ 1095 label *label495
+ 1096 set :meetTarget:t :meetTarget:thorium
+ 1097 label *label498
+ 1098 op sign *tmp380 :meetTarget:t
+ 1099 op add :meetTarget:count :meetTarget:count *tmp380
+ 1100 label *label499
+ 1101 label *label307
  1102 write :meetTarget:count processor2 ".totalTargets"
  1103 write :meetTarget:block processor2 ".nextBlock"
  1104 write :meetTarget:copper processor2 ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1065 set :meetTarget:count 0
  1066 set :meetTarget:t :meetTarget:copper
  1067 label *label474
-    * op sign *tmp380 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp380
+ 1068 op sign *tmp380 :meetTarget:copper
+ 1069 op add :meetTarget:count 0 *tmp380
  1070 label *label475
  1071 set :meetTarget:t :meetTarget:lead
  1072 label *label478
-    * op sign *tmp380 :meetTarget:t
+ 1073 op sign *tmp380 :meetTarget:lead
  1074 op add :meetTarget:count :meetTarget:count *tmp380
  1075 label *label479
  1076 set :meetTarget:t :meetTarget:graphite
  1077 label *label482
-    * op sign *tmp380 :meetTarget:t
+ 1078 op sign *tmp380 :meetTarget:graphite
  1079 op add :meetTarget:count :meetTarget:count *tmp380
  1080 label *label483
  1081 set :meetTarget:t :meetTarget:silicon
  1082 label *label486
-    * op sign *tmp380 :meetTarget:t
+ 1083 op sign *tmp380 :meetTarget:silicon
  1084 op add :meetTarget:count :meetTarget:count *tmp380
  1085 label *label487
  1086 set :meetTarget:t :meetTarget:titanium
  1087 label *label490
-    * op sign *tmp380 :meetTarget:t
+ 1088 op sign *tmp380 :meetTarget:titanium
  1089 op add :meetTarget:count :meetTarget:count *tmp380
  1090 label *label491
  1091 set :meetTarget:t :meetTarget:metaglass
  1092 label *label494
-    * op sign *tmp380 :meetTarget:t
+ 1093 op sign *tmp380 :meetTarget:metaglass
  1094 op add :meetTarget:count :meetTarget:count *tmp380
  1095 label *label495
  1096 set :meetTarget:t :meetTarget:thorium
  1097 label *label498
-    * op sign *tmp380 :meetTarget:t
+ 1098 op sign *tmp380 :meetTarget:thorium
  1099 op add :meetTarget:count :meetTarget:count *tmp380
  1100 label *label499
  1101 label *label307

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1062 return :unpackCfg*retaddr
  1063 end
  1064 label *label36
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1065 label *label474
  1066 op sign *tmp380 :meetTarget:copper
  1067 op add :meetTarget:count 0 *tmp380
  1068 label *label475
-    * set :meetTarget:t :meetTarget:lead
  1069 label *label478
  1070 op sign *tmp380 :meetTarget:lead
  1071 op add :meetTarget:count :meetTarget:count *tmp380
  1072 label *label479
-    * set :meetTarget:t :meetTarget:graphite
  1073 label *label482
  1074 op sign *tmp380 :meetTarget:graphite
  1075 op add :meetTarget:count :meetTarget:count *tmp380
  1076 label *label483
-    * set :meetTarget:t :meetTarget:silicon
  1077 label *label486
  1078 op sign *tmp380 :meetTarget:silicon
  1079 op add :meetTarget:count :meetTarget:count *tmp380
  1080 label *label487
-    * set :meetTarget:t :meetTarget:titanium
  1081 label *label490
  1082 op sign *tmp380 :meetTarget:titanium
  1083 op add :meetTarget:count :meetTarget:count *tmp380
  1084 label *label491
-    * set :meetTarget:t :meetTarget:metaglass
  1085 label *label494
  1086 op sign *tmp380 :meetTarget:metaglass
  1087 op add :meetTarget:count :meetTarget:count *tmp380
  1088 label *label495
-    * set :meetTarget:t :meetTarget:thorium
  1089 label *label498
  1090 op sign *tmp380 :meetTarget:thorium
  1091 op add :meetTarget:count :meetTarget:count *tmp380

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   510 write *tmp236 processor7 ".sandTarget"
   511 jump *label164 equal .thoriumContainer false
   512 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label167 (h:*label167)
-    * call *label11 *invalid :status1*retval (m:*label167) (h:*label167)
-    * label *label167
+  513 label *label503
+  514 write :status1:text processor2 ".status1"
+  515 label *label504
   516 sensor *tmp238 .thoriumBattery @totalPower
   517 jump *label168 greaterThanEq *tmp238 2000
   518 sensor *tmp241 .thoriumGenerator @coal
 
   554 read *tmp84 .controller ".monos"
   555 jump *label180 lessThanEq *tmp84 1
   556 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label183 (h:*label183)
-    * call *label11 *invalid :status1*retval (m:*label183) (h:*label183)
-    * label *label183
+  557 label *label505
+  558 write :status1:text processor2 ".status1"
+  559 label *label506
   560 set :mineOre.1:ore @coal
   561 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   562 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
 
   571 sensor *tmp257 AJEMJJ-graphite-press0 @coal
   572 jump *label190 greaterThanEq *tmp257 5
   573 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label192 (h:*label192)
-    * call *label11 *invalid :status1*retval (m:*label192) (h:*label192)
-    * label *label192
+  574 label *label507
+  575 write :status1:text processor2 ".status1"
+  576 label *label508
   577 set :supplyBlock:block AJEMJJ-graphite-press0
   578 set :supplyBlock:ore @coal
   579 setaddr :supplyBlock*retaddr *label193 (h:*label193)
 
   589 sensor *tmp263 ALMQJN-silicon-smelter4 @coal
   590 jump *label196 greaterThanEq *tmp263 5
   591 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label198 (h:*label198)
-    * call *label11 *invalid :status1*retval (m:*label198) (h:*label198)
-    * label *label198
+  592 label *label509
+  593 write :status1:text processor2 ".status1"
+  594 label *label510
   595 set :supplyBlock:block ALMQJN-silicon-smelter4
   596 set :supplyBlock:ore @coal
   597 setaddr :supplyBlock*retaddr *label199 (h:*label199)
 
   603 sensor *tmp266 ALMQJN-silicon-smelter4 @sand
   604 jump *label200 greaterThanEq *tmp266 5
   605 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label202 (h:*label202)
-    * call *label11 *invalid :status1*retval (m:*label202) (h:*label202)
-    * label *label202
+  606 label *label511
+  607 write :status1:text processor2 ".status1"
+  608 label *label512
   609 set :supplyBlock:block ALMQJN-silicon-smelter4
   610 set :supplyBlock:ore @sand
   611 setaddr :supplyBlock*retaddr *label203 (h:*label203)
 
   622 sensor *tmp272 AJRJM-combustion-generator3 @coal
   623 jump *label206 greaterThanEq *tmp272 2
   624 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label208 (h:*label208)
-    * call *label11 *invalid :status1*retval (m:*label208) (h:*label208)
-    * label *label208
+  625 label *label513
+  626 write :status1:text processor2 ".status1"
+  627 label *label514
   628 set :supplyBlock:block AJRJM-combustion-generator3
   629 set :supplyBlock:ore @coal
   630 setaddr :supplyBlock*retaddr *label209 (h:*label209)
 
   652 op mul *tmp287 A©JNJP-unloader6 .powerTarget
   653 jump *label216 greaterThanEq *tmp286 *tmp287
   654 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label218 (h:*label218)
-    * call *label11 *invalid :status1*retval (m:*label218) (h:*label218)
-    * label *label218
+  655 label *label515
+  656 write :status1:text processor2 ".status1"
+  657 label *label516
   658 set :mineOre.1:ore @coal
   659 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   660 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
 
   664 sensor *tmp290 .core @silicon
   665 jump *label220 greaterThanEq *tmp290 silicon
   666 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label222 (h:*label222)
-    * call *label11 *invalid :status1*retval (m:*label222) (h:*label222)
-    * label *label222
+  667 label *label517
+  668 write :status1:text processor2 ".status1"
+  669 label *label518
   670 sensor :supplyBase0:coal .core @coal
   671 sensor :supplyBase0:sand .core @sand
   672 select *tmp296 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   679 sensor *tmp297 .core @copper
   680 jump *label226 greaterThanEq *tmp297 copper
   681 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label228 (h:*label228)
-    * call *label11 *invalid :status1*retval (m:*label228) (h:*label228)
-    * label *label228
+  682 label *label519
+  683 write :status1:text processor2 ".status1"
+  684 label *label520
   685 set :mineOre.1:ore @copper
   686 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   687 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
 
   691 sensor *tmp300 .core @lead
   692 jump *label230 greaterThanEq *tmp300 lead
   693 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label232 (h:*label232)
-    * call *label11 *invalid :status1*retval (m:*label232) (h:*label232)
-    * label *label232
+  694 label *label521
+  695 write :status1:text processor2 ".status1"
+  696 label *label522
   697 set :mineOre.1:ore @lead
   698 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   699 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
 
   703 sensor *tmp303 .core @metaglass
   704 jump *label234 greaterThanEq *tmp303 metaglass
   705 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label236 (h:*label236)
-    * call *label11 *invalid :status1*retval (m:*label236) (h:*label236)
-    * label *label236
+  706 label *label523
+  707 write :status1:text processor2 ".status1"
+  708 label *label524
   709 set :mineOre.1:ore @sand
   710 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   711 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
 
   713 jump *label235 always
   714 label *label234
   715 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label238 (h:*label238)
-    * call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
-    * label *label238
+  716 label *label525
+  717 write :status1:text processor2 ".status1"
+  718 label *label526
   719 sensor :supplyBase0:coal.1 .core @coal
   720 sensor :supplyBase0:sand.1 .core @sand
   721 select *tmp309 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   733 jump *label213 always
   734 label *label212
   735 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label242 (h:*label242)
-    * call *label11 *invalid :status1*retval (m:*label242) (h:*label242)
-    * label *label242
+  736 label *label527
+  737 write :status1:text processor2 ".status1"
+  738 label *label528
   739 set :fetchBlock:block .titaniumDrill
   740 set :fetchBlock:item @titanium
   741 setaddr :fetchBlock*retaddr *label243 (h:*label243)
 
   900 label *label266
   901 return :lineUpUnits*retaddr
   902 end
-    * label *label11
-    * write :status1:text processor2 ".status1"
-    * label *label272
-    * return :status1*retaddr
-    * end
   903 label *label24
   904 set :status2:text "Mining "
   905 set :status2:item :mineOre.1:ore

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   511 jump *label164 equal .thoriumContainer false
   512 set :status1:text "Phase 2: servicing thorium drill"
   513 label *label503
-    * write :status1:text processor2 ".status1"
+  514 write "Phase 2: servicing thorium drill" processor2 ".status1"
   515 label *label504
   516 sensor *tmp238 .thoriumBattery @totalPower
   517 jump *label168 greaterThanEq *tmp238 2000
 
   555 jump *label180 lessThanEq *tmp84 1
   556 set :status1:text "Phase 1: supplying base"
   557 label *label505
-    * write :status1:text processor2 ".status1"
+  558 write "Phase 1: supplying base" processor2 ".status1"
   559 label *label506
   560 set :mineOre.1:ore @coal
   561 setaddr :mineOre.1*retaddr *label184 (h:*label184)
 
   572 jump *label190 greaterThanEq *tmp257 5
   573 set :status1:text "Goal 1: graphite requirement"
   574 label *label507
-    * write :status1:text processor2 ".status1"
+  575 write "Goal 1: graphite requirement" processor2 ".status1"
   576 label *label508
   577 set :supplyBlock:block AJEMJJ-graphite-press0
   578 set :supplyBlock:ore @coal
 
   590 jump *label196 greaterThanEq *tmp263 5
   591 set :status1:text "Goal 2: coal for silicon requirement"
   592 label *label509
-    * write :status1:text processor2 ".status1"
+  593 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   594 label *label510
   595 set :supplyBlock:block ALMQJN-silicon-smelter4
   596 set :supplyBlock:ore @coal
 
   604 jump *label200 greaterThanEq *tmp266 5
   605 set :status1:text "Goal 3: sand for silicon requirement"
   606 label *label511
-    * write :status1:text processor2 ".status1"
+  607 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   608 label *label512
   609 set :supplyBlock:block ALMQJN-silicon-smelter4
   610 set :supplyBlock:ore @sand
 
   623 jump *label206 greaterThanEq *tmp272 2
   624 set :status1:text "Goal 4: supplying generator"
   625 label *label513
-    * write :status1:text processor2 ".status1"
+  626 write "Goal 4: supplying generator" processor2 ".status1"
   627 label *label514
   628 set :supplyBlock:block AJRJM-combustion-generator3
   629 set :supplyBlock:ore @coal
 
   653 jump *label216 greaterThanEq *tmp286 *tmp287
   654 set :status1:text "Goal 5: supplying generator"
   655 label *label515
-    * write :status1:text processor2 ".status1"
+  656 write "Goal 5: supplying generator" processor2 ".status1"
   657 label *label516
   658 set :mineOre.1:ore @coal
   659 setaddr :mineOre.1*retaddr *label219 (h:*label219)
 
   665 jump *label220 greaterThanEq *tmp290 silicon
   666 set :status1:text "Goal 6: silicon requirement"
   667 label *label517
-    * write :status1:text processor2 ".status1"
+  668 write "Goal 6: silicon requirement" processor2 ".status1"
   669 label *label518
   670 sensor :supplyBase0:coal .core @coal
   671 sensor :supplyBase0:sand .core @sand
 
   680 jump *label226 greaterThanEq *tmp297 copper
   681 set :status1:text "Goal 7: copper requirement"
   682 label *label519
-    * write :status1:text processor2 ".status1"
+  683 write "Goal 7: copper requirement" processor2 ".status1"
   684 label *label520
   685 set :mineOre.1:ore @copper
   686 setaddr :mineOre.1*retaddr *label229 (h:*label229)
 
   692 jump *label230 greaterThanEq *tmp300 lead
   693 set :status1:text "Goal 8: lead requirement"
   694 label *label521
-    * write :status1:text processor2 ".status1"
+  695 write "Goal 8: lead requirement" processor2 ".status1"
   696 label *label522
   697 set :mineOre.1:ore @lead
   698 setaddr :mineOre.1*retaddr *label233 (h:*label233)
 
   704 jump *label234 greaterThanEq *tmp303 metaglass
   705 set :status1:text "Goal 9: metaglass requirement"
   706 label *label523
-    * write :status1:text processor2 ".status1"
+  707 write "Goal 9: metaglass requirement" processor2 ".status1"
   708 label *label524
   709 set :mineOre.1:ore @sand
   710 setaddr :mineOre.1*retaddr *label237 (h:*label237)
 
   714 label *label234
   715 set :status1:text "Goal 10: supplying base"
   716 label *label525
-    * write :status1:text processor2 ".status1"
+  717 write "Goal 10: supplying base" processor2 ".status1"
   718 label *label526
   719 sensor :supplyBase0:coal.1 .core @coal
   720 sensor :supplyBase0:sand.1 .core @sand
 
   734 label *label212
   735 set :status1:text "Goal 11: Fetching titanium"
   736 label *label527
-    * write :status1:text processor2 ".status1"
+  737 write "Goal 11: Fetching titanium" processor2 ".status1"
   738 label *label528
   739 set :fetchBlock:block .titaniumDrill
   740 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   509 op max *tmp236 0 *tmp235
   510 write *tmp236 processor7 ".sandTarget"
   511 jump *label164 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   512 label *label503
   513 write "Phase 2: servicing thorium drill" processor2 ".status1"
   514 label *label504
 
   552 label *label164
   553 read *tmp84 .controller ".monos"
   554 jump *label180 lessThanEq *tmp84 1
-    * set :status1:text "Phase 1: supplying base"
   555 label *label505
   556 write "Phase 1: supplying base" processor2 ".status1"
   557 label *label506
 
   568 jump *label188 greaterThanEq *tmp254 graphite
   569 sensor *tmp257 AJEMJJ-graphite-press0 @coal
   570 jump *label190 greaterThanEq *tmp257 5
-    * set :status1:text "Goal 1: graphite requirement"
   571 label *label507
   572 write "Goal 1: graphite requirement" processor2 ".status1"
   573 label *label508
 
   585 jump *label194 greaterThanEq *tmp260 silicon
   586 sensor *tmp263 ALMQJN-silicon-smelter4 @coal
   587 jump *label196 greaterThanEq *tmp263 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   588 label *label509
   589 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   590 label *label510
 
   598 label *label196
   599 sensor *tmp266 ALMQJN-silicon-smelter4 @sand
   600 jump *label200 greaterThanEq *tmp266 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   601 label *label511
   602 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   603 label *label512
 
   616 jump *label204 greaterThanEq *tmp269 .powerTarget
   617 sensor *tmp272 AJRJM-combustion-generator3 @coal
   618 jump *label206 greaterThanEq *tmp272 2
-    * set :status1:text "Goal 4: supplying generator"
   619 label *label513
   620 write "Goal 4: supplying generator" processor2 ".status1"
   621 label *label514
 
   645 sensor *tmp286 AJTJK-battery1 @totalPower
   646 op mul *tmp287 A©JNJP-unloader6 .powerTarget
   647 jump *label216 greaterThanEq *tmp286 *tmp287
-    * set :status1:text "Goal 5: supplying generator"
   648 label *label515
   649 write "Goal 5: supplying generator" processor2 ".status1"
   650 label *label516
 
   656 label *label216
   657 sensor *tmp290 .core @silicon
   658 jump *label220 greaterThanEq *tmp290 silicon
-    * set :status1:text "Goal 6: silicon requirement"
   659 label *label517
   660 write "Goal 6: silicon requirement" processor2 ".status1"
   661 label *label518
 
   670 label *label220
   671 sensor *tmp297 .core @copper
   672 jump *label226 greaterThanEq *tmp297 copper
-    * set :status1:text "Goal 7: copper requirement"
   673 label *label519
   674 write "Goal 7: copper requirement" processor2 ".status1"
   675 label *label520
 
   681 label *label226
   682 sensor *tmp300 .core @lead
   683 jump *label230 greaterThanEq *tmp300 lead
-    * set :status1:text "Goal 8: lead requirement"
   684 label *label521
   685 write "Goal 8: lead requirement" processor2 ".status1"
   686 label *label522
 
   692 label *label230
   693 sensor *tmp303 .core @metaglass
   694 jump *label234 greaterThanEq *tmp303 metaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   695 label *label523
   696 write "Goal 9: metaglass requirement" processor2 ".status1"
   697 label *label524
 
   701 label *label237
   702 jump *label235 always
   703 label *label234
-    * set :status1:text "Goal 10: supplying base"
   704 label *label525
   705 write "Goal 10: supplying base" processor2 ".status1"
   706 label *label526
 
   720 label *label215
   721 jump *label213 always
   722 label *label212
-    * set :status1:text "Goal 11: Fetching titanium"
   723 label *label527
   724 write "Goal 11: Fetching titanium" processor2 ".status1"
   725 label *label528

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 (-4 instructions):
 
   527 label *label172
   528 set :supplyBlockFromCore:target .thoriumGenerator
   529 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label175 (h:*label175)
-    * call *label27 *invalid :supplyBlockFromCore*retval (m:*label175) (h:*label175)
-    * label *label175
+  530 label *label529
+  531 sensor *tmp342 :supplyBlockFromCore:target @itemCapacity
+  532 op min :transportStatus:target *tmp342 30
+  533 set :transportStatus:item :supplyBlockFromCore:item
+  534 setaddr :transportStatus*retaddr *label530 (h:*label530)
+  535 call *label14 *invalid :transportStatus*retval (m:*label530) (h:*label530)
+  536 label *label530
+  537 set :status2:text "Transferring "
+  538 set :status2:item :supplyBlockFromCore:item
+  539 set :status2:block :supplyBlockFromCore:target
+  540 setaddr :status2*retaddr *label531 (h:*label531)
+  541 call *label12 *invalid :status2*retval (m:*label531) (h:*label531)
+  542 label *label531
+  543 set :moveToEmpty:x .coreX
+  544 set :moveToEmpty:y .coreY
+  545 setaddr :moveToEmpty*retaddr *label532 (h:*label532)
+  546 call *label18 *invalid :moveToEmpty*retval (m:*label532) (h:*label532)
+  547 label *label532
+  548 setaddr :dropAll*retaddr *label533 (h:*label533)
+  549 call *label19 *invalid :dropAll*retval (m:*label533) (h:*label533)
+  550 label *label533
+  551 label *label534
+  552 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  553 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  554 op notEqual *tmp345 :supplyBlockFromCore:unitItem null
+  555 op notEqual *tmp346 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  556 op land *tmp347 *tmp345 *tmp346
+  557 jump *label535 equal *tmp347 false
+  558 ucontrol itemDrop @air 1000
+  559 label *label535
+  560 label *label536
+  561 label *label537
+  562 sensor *tmp349 @unit :supplyBlockFromCore:item
+  563 op lessThan *tmp350 *tmp349 30
+  564 sensor *tmp351 .core :supplyBlockFromCore:item
+  565 op land *tmp352 *tmp350 *tmp351
+  566 jump *label534 notEqual *tmp352 false
+  567 label *label538
+  568 set :depositItems:block :supplyBlockFromCore:target
+  569 set :depositItems:item :supplyBlockFromCore:item
+  570 setaddr :depositItems*retaddr *label539 (h:*label539)
+  571 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
+  572 label *label539
+  573 label *label540
   574 label *label173
   575 label *label170
   576 label *label171
 
  1014 label *label287
  1015 return :supplyBlock*retaddr
  1016 end
-    * label *label27
-    * sensor *tmp342 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp342 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label293 (h:*label293)
-    * call *label14 *invalid :transportStatus*retval (m:*label293) (h:*label293)
-    * label *label293
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label294 (h:*label294)
-    * call *label12 *invalid :status2*retval (m:*label294) (h:*label294)
-    * label *label294
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label295 (h:*label295)
-    * call *label18 *invalid :moveToEmpty*retval (m:*label295) (h:*label295)
-    * label *label295
-    * setaddr :dropAll*retaddr *label296 (h:*label296)
-    * call *label19 *invalid :dropAll*retval (m:*label296) (h:*label296)
-    * label *label296
-    * label *label297
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp345 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp346 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp347 *tmp345 *tmp346
-    * jump *label300 equal *tmp347 false
-    * ucontrol itemDrop @air 1000
-    * label *label300
-    * label *label301
-    * label *label298
-    * sensor *tmp349 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp350 *tmp349 30
-    * sensor *tmp351 .core :supplyBlockFromCore:item
-    * op land *tmp352 *tmp350 *tmp351
-    * jump *label297 notEqual *tmp352 false
-    * label *label299
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label302 (h:*label302)
-    * call *label21 *invalid :depositItems*retval (m:*label302) (h:*label302)
-    * label *label302
-    * label *label292
-    * return :supplyBlockFromCore*retaddr
-    * end
  1017 label *label29
  1018 read *tmp354 :unpackCfg:cfg 1
  1019 op sub *tmp355 *tmp354 74

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   528 set :supplyBlockFromCore:target .thoriumGenerator
   529 set :supplyBlockFromCore:item @coal
   530 label *label529
-    * sensor *tmp342 :supplyBlockFromCore:target @itemCapacity
+  531 sensor *tmp342 .thoriumGenerator @itemCapacity
   532 op min :transportStatus:target *tmp342 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  533 set :transportStatus:item @coal
   534 setaddr :transportStatus*retaddr *label530 (h:*label530)
   535 call *label14 *invalid :transportStatus*retval (m:*label530) (h:*label530)
   536 label *label530
   537 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  538 set :status2:item @coal
+  539 set :status2:block .thoriumGenerator
   540 setaddr :status2*retaddr *label531 (h:*label531)
   541 call *label12 *invalid :status2*retval (m:*label531) (h:*label531)
   542 label *label531
 
   549 call *label19 *invalid :dropAll*retval (m:*label533) (h:*label533)
   550 label *label533
   551 label *label534
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
+  552 ucontrol itemTake .core @coal 30
   553 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   554 op notEqual *tmp345 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp346 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  555 op notEqual *tmp346 :supplyBlockFromCore:unitItem @coal
   556 op land *tmp347 *tmp345 *tmp346
   557 jump *label535 equal *tmp347 false
   558 ucontrol itemDrop @air 1000
   559 label *label535
   560 label *label536
   561 label *label537
-    * sensor *tmp349 @unit :supplyBlockFromCore:item
+  562 sensor *tmp349 @unit @coal
   563 op lessThan *tmp350 *tmp349 30
-    * sensor *tmp351 .core :supplyBlockFromCore:item
+  564 sensor *tmp351 .core @coal
   565 op land *tmp352 *tmp350 *tmp351
   566 jump *label534 notEqual *tmp352 false
   567 label *label538
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  568 set :depositItems:block .thoriumGenerator
+  569 set :depositItems:item @coal
   570 setaddr :depositItems*retaddr *label539 (h:*label539)
   571 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
   572 label *label539

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   525 label *label174
   526 jump *label173 always
   527 label *label172
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   528 label *label529
   529 sensor *tmp342 .thoriumGenerator @itemCapacity
   530 op min :transportStatus:target *tmp342 30

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
  1268 end
  1269 label *label18
  1270 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label362 (h:*label362)
-    * call *label13 *invalid :status3*retval (m:*label362) (h:*label362)
-    * label *label362
+ 1271 label *label541
+ 1272 write :status3:text processor2 ".status3"
+ 1273 label *label542
  1274 label *label363
  1275 sensor *tmp449 @unit @firstItem
  1276 jump *label366 equal *tmp449 null
 
  1298 end
  1299 label *label21
  1300 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label373 (h:*label373)
-    * call *label13 *invalid :status3*retval (m:*label373) (h:*label373)
-    * label *label373
+ 1301 label *label543
+ 1302 write :status3:text processor2 ".status3"
+ 1303 label *label544
  1304 sensor *tmp456 @unit @firstItem
  1305 jump *label374 notEqual *tmp456 :depositItems:item
  1306 set :moveToBlock:block :depositItems:block
 
  1361 label *label388
  1362 label *label389
  1363 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label391 (h:*label391)
-    * call *label13 *invalid :status3*retval (m:*label391) (h:*label391)
-    * label *label391
+ 1364 label *label545
+ 1365 write :status3:text processor2 ".status3"
+ 1366 label *label546
  1367 op add :mineOre:stop @second 10
  1368 label *label392
  1369 sensor :mineOre:item @unit @firstItem
 
  1444 label *label384
  1445 return :mineOre*retaddr
  1446 end
-    * label *label13
-    * write :status3:text processor2 ".status3"
-    * label *label419
-    * return :status3*retaddr
-    * end
  1447 label *label20
  1448 sensor *tmp505 :moveToBlock:block @x
  1449 sensor *tmp506 :moveToBlock:block @y
 
  1470 end
  1471 label *label16
  1472 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label427 (h:*label427)
-    * call *label13 *invalid :status3*retval (m:*label427) (h:*label427)
-    * label *label427
+ 1473 label *label547
+ 1474 write :status3:text processor2 ".status3"
+ 1475 label *label548
  1476 op sub *tmp513 :moveTo:radius 0.5
  1477 label *label428
  1478 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1269 label *label18
  1270 set :status3:text "Moving..."
  1271 label *label541
-    * write :status3:text processor2 ".status3"
+ 1272 write "Moving..." processor2 ".status3"
  1273 label *label542
  1274 label *label363
  1275 sensor *tmp449 @unit @firstItem
 
  1299 label *label21
  1300 set :status3:text "Depositing..."
  1301 label *label543
-    * write :status3:text processor2 ".status3"
+ 1302 write "Depositing..." processor2 ".status3"
  1303 label *label544
  1304 sensor *tmp456 @unit @firstItem
  1305 jump *label374 notEqual *tmp456 :depositItems:item
 
  1362 label *label389
  1363 set :status3:text "Mining..."
  1364 label *label545
-    * write :status3:text processor2 ".status3"
+ 1365 write "Mining..." processor2 ".status3"
  1366 label *label546
  1367 op add :mineOre:stop @second 10
  1368 label *label392
 
  1471 label *label16
  1472 set :status3:text "Moving..."
  1473 label *label547
-    * write :status3:text processor2 ".status3"
+ 1474 write "Moving..." processor2 ".status3"
  1475 label *label548
  1476 op sub *tmp513 :moveTo:radius 0.5
  1477 label *label428

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1267 return :transportStatus*retaddr
  1268 end
  1269 label *label18
-    * set :status3:text "Moving..."
  1270 label *label541
  1271 write "Moving..." processor2 ".status3"
  1272 label *label542
 
  1296 return :dropAll*retaddr
  1297 end
  1298 label *label21
-    * set :status3:text "Depositing..."
  1299 label *label543
  1300 write "Depositing..." processor2 ".status3"
  1301 label *label544
 
  1358 label *label390
  1359 label *label388
  1360 label *label389
-    * set :status3:text "Mining..."
  1361 label *label545
  1362 write "Mining..." processor2 ".status3"
  1363 label *label546
 
  1466 return :locateOre*retaddr
  1467 end
  1468 label *label16
-    * set :status3:text "Moving..."
  1469 label *label547
  1470 write "Moving..." processor2 ".status3"
  1471 label *label548

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
  1303 jump *label374 notEqual *tmp456 :depositItems:item
  1304 set :moveToBlock:block :depositItems:block
  1305 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label376 (h:*label376)
-    * call *label20 *invalid :moveToBlock*retval (m:*label376) (h:*label376)
-    * label *label376
+ 1306 label *label549
+ 1307 sensor *tmp505 :moveToBlock:block @x
+ 1308 sensor *tmp506 :moveToBlock:block @y
+ 1309 set :moveTo:x *tmp505
+ 1310 set :moveTo:y *tmp506
+ 1311 set :moveTo:radius :moveToBlock:radius
+ 1312 setaddr :moveTo*retaddr *label550 (h:*label550)
+ 1313 call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
+ 1314 label *label550
+ 1315 label *label551
  1316 sensor :depositItems:cap :depositItems:block @itemCapacity
  1317 label *label377
  1318 ucontrol itemDrop :depositItems:block 30
 
  1448 label *label384
  1449 return :mineOre*retaddr
  1450 end
-    * label *label20
-    * sensor *tmp505 :moveToBlock:block @x
-    * sensor *tmp506 :moveToBlock:block @y
-    * set :moveTo:x *tmp505
-    * set :moveTo:y *tmp506
-    * set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label421 (h:*label421)
-    * call *label16 *invalid :moveTo*retval (m:*label421) (h:*label421)
-    * label *label421
-    * label *label420
-    * return :moveToBlock*retaddr
-    * end
  1451 label *label22
  1452 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
  1453 jump *label423 notEqual *tmp507 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1304 set :moveToBlock:block :depositItems:block
  1305 set :moveToBlock:radius 6
  1306 label *label549
-    * sensor *tmp505 :moveToBlock:block @x
-    * sensor *tmp506 :moveToBlock:block @y
+ 1307 sensor *tmp505 :depositItems:block @x
+ 1308 sensor *tmp506 :depositItems:block @y
  1309 set :moveTo:x *tmp505
  1310 set :moveTo:y *tmp506
-    * set :moveTo:radius :moveToBlock:radius
+ 1311 set :moveTo:radius 6
  1312 setaddr :moveTo*retaddr *label550 (h:*label550)
  1313 call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
  1314 label *label550

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
  1301 label *label544
  1302 sensor *tmp456 @unit @firstItem
  1303 jump *label374 notEqual *tmp456 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
  1304 label *label549
  1305 sensor *tmp505 :depositItems:block @x
  1306 sensor *tmp506 :depositItems:block @y

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
  1346 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1347 label *label385
  1348 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label386 (h:*label386)
-    * call *label22 *invalid :locateOre*retval (m:*label386) (h:*label386)
-    * label *label386
+ 1349 label *label552
+ 1350 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
+ 1351 jump *label554 notEqual *tmp507 false
+ 1352 set :error:error "Cannot locate ore"
+ 1353 setaddr :error*retaddr *label553 (h:*label553)
+ 1354 call *label15 *invalid :error*retval (m:*label553) (h:*label553)
+ 1355 label *label553
+ 1356 label *label554
+ 1357 label *label555
+ 1358 label *label556
  1359 set :mineOre:x :locateOre:x
  1360 set :mineOre:y :locateOre:y
  1361 set :moveToEmpty:x :locateOre:x
 
  1453 label *label384
  1454 return :mineOre*retaddr
  1455 end
-    * label *label22
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
-    * jump *label423 notEqual *tmp507 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label425 (h:*label425)
-    * call *label15 *invalid :error*retval (m:*label425) (h:*label425)
-    * label *label425
-    * label *label423
-    * label *label424
-    * label *label422
-    * return :locateOre*retaddr
-    * end
  1456 label *label16
  1457 label *label547
  1458 write "Moving..." processor2 ".status3"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1347 label *label385
  1348 set :locateOre:ore :mineOre:ore
  1349 label *label552
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
+ 1350 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
  1351 jump *label554 notEqual *tmp507 false
  1352 set :error:error "Cannot locate ore"
  1353 setaddr :error*retaddr *label553 (h:*label553)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
  1345 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1346 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1347 label *label385
-    * set :locateOre:ore :mineOre:ore
  1348 label *label552
  1349 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
  1350 jump *label554 notEqual *tmp507 false

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
  1307 set :moveTo:x *tmp505
  1308 set :moveTo:y *tmp506
  1309 set :moveTo:radius 6
-    * setaddr :moveTo*retaddr *label550 (h:*label550)
-    * call *label16 *invalid :moveTo*retval (m:*label550) (h:*label550)
-    * label *label550
+ 1310 label *label557
+ 1311 label *label558
+ 1312 write "Moving..." processor2 ".status3"
+ 1313 label *label559
+ 1314 op sub *tmp513 :moveTo:radius 0.5
+ 1315 label *label560
+ 1316 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511
+ 1317 jump *label562 notEqual *tmp511 false
+ 1318 ucontrol approach :moveTo:x :moveTo:y *tmp513
+ 1319 label *label561
+ 1320 jump *label560 always
+ 1321 label *label562
+ 1322 label *label563
  1323 label *label551
  1324 sensor :depositItems:cap :depositItems:block @itemCapacity
  1325 label *label377
 
  1462 label *label384
  1463 return :mineOre*retaddr
  1464 end
-    * label *label16
-    * label *label547
-    * write "Moving..." processor2 ".status3"
-    * label *label548
-    * op sub *tmp513 :moveTo:radius 0.5
-    * label *label428
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511
-    * jump *label430 notEqual *tmp511 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp513
-    * label *label429
-    * jump *label428 always
-    * label *label430
-    * label *label426
-    * return :moveTo*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1311 label *label558
  1312 write "Moving..." processor2 ".status3"
  1313 label *label559
-    * op sub *tmp513 :moveTo:radius 0.5
+ 1314 op sub *tmp513 6 0.5
  1315 label *label560
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp511
+ 1316 ucontrol within *tmp505 *tmp506 6 *tmp511
  1317 jump *label562 notEqual *tmp511 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp513
+ 1318 ucontrol approach *tmp505 *tmp506 5.5
  1319 label *label561
  1320 jump *label560 always
  1321 label *label562

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1304 label *label549
  1305 sensor *tmp505 :depositItems:block @x
  1306 sensor *tmp506 :depositItems:block @y
-    * set :moveTo:x *tmp505
-    * set :moveTo:y *tmp506
-    * set :moveTo:radius 6
  1307 label *label557
  1308 label *label558
  1309 write "Moving..." processor2 ".status3"
  1310 label *label559
-    * op sub *tmp513 6 0.5
  1311 label *label560
  1312 ucontrol within *tmp505 *tmp506 6 *tmp511
  1313 jump *label562 notEqual *tmp511 false

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-4 instructions):
 
    93 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    94 jump *label65 equal *tmp145 false
    95 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label59 always
    96 label *label59
    97 set .titaniumDrill *tmp128
    98 write *tmp128 processor2 ".titaniumDrill"
 
   675 sensor *tmp278 .core @titanium
   676 op sub *tmp279 titanium *tmp278
   677 op min *tmp277 7 *tmp279
-    * jump *label211 always
   678 label *label211
   679 sensor *tmp281 .titaniumDrill @titanium
   680 jump *label212 greaterThanEq *tmp281 *tmp277
 
   831 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   832 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   833 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label249 always
   834 label *label249
   835 return :buildBlockFromCfg*retaddr
   836 end
 
  1246 write false .controller ":buildStop*finished"
  1247 write 2 .controller "@counter"
  1248 set :buildBlock*retval :buildBlock:built
-    * jump *label356 always
  1249 label *label356
  1250 return :buildBlock*retaddr
  1251 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   120 write .core :buildBlockFromCfg*retval ".core"
   121 write bank1 :buildBlockFromCfg*retval ".bank"
   122 label *label433
-    * read *tmp152 @this "AJEMJJ-graphite-press0"
+  123 set *tmp152 AJEMJJ-graphite-press0
   124 write *tmp152 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   125 label *label434
   126 label *label437
-    * read *tmp152 @this "AJTJK-battery1"
+  127 set *tmp152 AJTJK-battery1
   128 write *tmp152 :buildBlockFromCfg*retval "AJTJK-battery1"
   129 label *label438
   130 label *label441
-    * read *tmp152 @this "ALTJL-battery2"
+  131 set *tmp152 ALTJL-battery2
   132 write *tmp152 :buildBlockFromCfg*retval "ALTJL-battery2"
   133 label *label442
   134 label *label445
-    * read *tmp152 @this "AJRJM-combustion-generator3"
+  135 set *tmp152 AJRJM-combustion-generator3
   136 write *tmp152 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   137 label *label446
   138 label *label449
-    * read *tmp152 @this "ALMQJN-silicon-smelter4"
+  139 set *tmp152 ALMQJN-silicon-smelter4
   140 write *tmp152 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   141 label *label450
   142 label *label453
-    * read *tmp152 @this "A{LNJO-inverted-sorter5"
+  143 set *tmp152 A{LNJO-inverted-sorter5
   144 write *tmp152 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   145 label *label454
   146 label *label457
-    * read *tmp152 @this "A©JNJP-unloader6"
+  147 set *tmp152 A©JNJP-unloader6
   148 write *tmp152 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   149 label *label458
   150 label *label461
-    * read *tmp152 @this "A{HNJQ-inverted-sorter7"
+  151 set *tmp152 A{HNJQ-inverted-sorter7
   152 write *tmp152 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   153 label *label462
   154 label *label465
-    * read *tmp152 @this "AJPJR-underflow-gate8"
+  155 set *tmp152 AJPJR-underflow-gate8
   156 write *tmp152 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   157 label *label466
   158 label *label469
-    * read *tmp152 @this "AÕFDJS-micro-processor9"
+  159 set *tmp152 AÕFDJS-micro-processor9
   160 write *tmp152 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
   161 label *label470
   162 label *label72
 
  1036 label *label36
  1037 label *label474
  1038 op sign *tmp380 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp380
+ 1039 set :meetTarget:count *tmp380
  1040 label *label475
  1041 label *label478
  1042 op sign *tmp380 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-4 instructions):
 
   698 label *label518
   699 sensor :supplyBase0:coal .core @coal
   700 sensor :supplyBase0:sand .core @sand
-    * select *tmp296 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
-    * set :mineOre.1:ore *tmp296
+  701 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   702 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   703 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   704 label *label225
 
   742 label *label526
   743 sensor :supplyBase0:coal.1 .core @coal
   744 sensor :supplyBase0:sand.1 .core @sand
-    * select *tmp309 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
-    * set :mineOre.1:ore *tmp309
+  745 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   746 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   747 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   748 label *label241
 
  1033 end
  1034 label *label36
  1035 label *label474
-    * op sign *tmp380 :meetTarget:copper
-    * set :meetTarget:count *tmp380
+ 1036 op sign :meetTarget:count :meetTarget:copper
  1037 label *label475
  1038 label *label478
  1039 op sign *tmp380 :meetTarget:lead
 
  1239 wait 1e-15
  1240 read *tmp447 processor5 ":buildBlockAt*finished"
  1241 jump *label358 equal *tmp447 false
-    * read :buildBlock:built processor5 ":buildBlockAt*retval"
+ 1242 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1243 write false .controller ":buildStop*finished"
  1244 write 2 .controller "@counter"
-    * set :buildBlock*retval :buildBlock:built
  1245 label *label356
  1246 return :buildBlock*retaddr
  1247 end

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    27 ubind @poly
    28 set .builder @unit
    29 ulocate building core false @copper .coreX .coreY *tmp120 .core
-    * label *label51
    30 jump *label50 equal .core null
-    * label *label52
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    33 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
 
    80 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    81 label *label64
    82 label *label62
-    * label *label63
    83 write @pneumatic-drill processor2 ".nextBlock"
    84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    90 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label65 equal *tmp145 false
    92 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label59
    93 set .titaniumDrill *tmp128
    94 write *tmp128 processor2 ".titaniumDrill"
    95 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
 
   115 write processor2 :buildBlockFromCfg*retval ".display"
   116 write .core :buildBlockFromCfg*retval ".core"
   117 write bank1 :buildBlockFromCfg*retval ".bank"
-    * label *label433
   118 set *tmp152 AJEMJJ-graphite-press0
   119 write *tmp152 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
-    * label *label434
-    * label *label437
   120 set *tmp152 AJTJK-battery1
   121 write *tmp152 :buildBlockFromCfg*retval "AJTJK-battery1"
-    * label *label438
-    * label *label441
   122 set *tmp152 ALTJL-battery2
   123 write *tmp152 :buildBlockFromCfg*retval "ALTJL-battery2"
-    * label *label442
-    * label *label445
   124 set *tmp152 AJRJM-combustion-generator3
   125 write *tmp152 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
-    * label *label446
-    * label *label449
   126 set *tmp152 ALMQJN-silicon-smelter4
   127 write *tmp152 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
-    * label *label450
-    * label *label453
   128 set *tmp152 A{LNJO-inverted-sorter5
   129 write *tmp152 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
-    * label *label454
-    * label *label457
   130 set *tmp152 A©JNJP-unloader6
   131 write *tmp152 :buildBlockFromCfg*retval "A©JNJP-unloader6"
-    * label *label458
-    * label *label461
   132 set *tmp152 A{HNJQ-inverted-sorter7
   133 write *tmp152 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
-    * label *label462
-    * label *label465
   134 set *tmp152 AJPJR-underflow-gate8
   135 write *tmp152 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
-    * label *label466
-    * label *label469
   136 set *tmp152 AÕFDJS-micro-processor9
   137 write *tmp152 :buildBlockFromCfg*retval "AÕFDJS-micro-processor9"
-    * label *label470
-    * label *label72
   138 set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"
   139 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   140 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
 
   157 label *label87
   158 write 1 .controller ".flareTarget"
   159 write 1 processor2 ".flareTarget"
-    * label *label88
   160 write 5 .controller ".monoTarget"
   161 write 5 processor2 ".monoTarget"
-    * label *label89
   162 write 85 .controller ".pressTarget"
   163 write 150 .controller ".smelterTarget"
   164 write 30 .controller ".kilnTarget"
 
   175 jump *label95 greaterThanEq *tmp158 300
   176 jump *label93 always
   177 label *label95
-    * label *label96
-    * label *label92
   178 read *tmp84 .controller ".monos"
   179 jump *label91 lessThan *tmp84 3
   180 label *label93
 
   225 set .graphiteSurplus 200
   226 write 2 .controller ".monoTarget"
   227 write 2 processor2 ".monoTarget"
-    * label *label107
   228 write 3 .controller ".polyTarget"
   229 write 3 processor2 ".polyTarget"
-    * label *label108
   230 setaddr :buildUnits*retaddr *label109 (h:*label109)
   231 call *label42 *invalid :buildUnits*retval (m:*label109) (h:*label109)
   232 label *label109
 
   236 setaddr :supplyBase*retaddr *label113 (h:*label113)
   237 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   238 label *label113
-    * label *label111
   239 jump *label110 always
   240 label *label112
   241 write 2 .controller ".flareTarget"
   242 write 2 processor2 ".flareTarget"
-    * label *label114
   243 label *label115
   244 read *tmp83 .controller ".flares"
   245 jump *label117 greaterThanEq *tmp83 2
   246 setaddr :supplyBase*retaddr *label118 (h:*label118)
   247 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   248 label *label118
-    * label *label116
   249 jump *label115 always
   250 label *label117
   251 write @ore-titanium processor2 ".nextBlock"
 
   271 jump *label120 equal *tmp186 false
   272 write false processor3 ":stopLocation*finished"
   273 write 3 processor3 "@counter"
-    * label *label119
   274 write null processor2 ".nextBlock"
   275 set .graphiteSurplus 10
   276 set .metaglassSurplus 50
 
   299 call *label15 *invalid :error*retval (m:*label127) (h:*label127)
   300 label *label127
   301 label *label125
-    * label *label126
   302 write @laser-drill processor5 ":buildBlockAt:block"
   303 read *tmp55 processor3 ".drillX"
   304 write *tmp55 processor5 ":buildBlockAt:x"
 
   372 wait 1e-15
   373 read *tmp216 processor6 ":setThoriumContainer*finished"
   374 jump *label139 equal *tmp216 false
-    * label *label121
   375 write null processor2 ".nextBlock"
   376 label *label140
   377 read *tmp85 .controller ".polys"
 
   379 setaddr :supplyBase*retaddr *label143 (h:*label143)
   380 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   381 label *label143
-    * label *label141
   382 jump *label140 always
   383 label *label142
   384 write 3200 .controller ".powerTarget"
 
   390 set .metaglassSurplus 10
   391 write 1 .controller ".megaTarget"
   392 write 1 processor2 ".megaTarget"
-    * label *label145
   393 setaddr :buildUnits*retaddr *label146 (h:*label146)
   394 call *label42 *invalid :buildUnits*retval (m:*label146) (h:*label146)
   395 label *label146
 
   403 label *label147
   404 ucontrol move :x :y
   405 ucontrol payEnter
-    * label *label148
   406 read *tmp86 .controller ".megas"
   407 jump *label147 equal *tmp86 false
-    * label *label149
   408 write true .controller ".finished"
   409 control enabled processor8 false
   410 control enabled processor7 false
 
   449 setaddr :lineUpUnits*retaddr *label161 (h:*label161)
   450 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
   451 label *label161
-    * label *label156
   452 jump *label155 always
-    * label *label157
-    * label *label150
   453 end
   454 label *label15
   455 set .ERROR :error:error
   456 stop
-    * label *label162
   457 return :error*retaddr
   458 end
   459 label *label35
 
   463 op max *tmp236 0 *tmp235
   464 write *tmp236 processor7 ".sandTarget"
   465 jump *label164 equal .thoriumContainer false
-    * label *label503
   466 write "Phase 2: servicing thorium drill" processor2 ".status1"
-    * label *label504
   467 sensor *tmp238 .thoriumBattery @totalPower
   468 jump *label168 greaterThanEq *tmp238 2000
   469 sensor *tmp241 .thoriumGenerator @coal
 
   477 label *label174
   478 jump *label173 always
   479 label *label172
-    * label *label529
   480 sensor *tmp342 .thoriumGenerator @itemCapacity
   481 op min :transportStatus:target *tmp342 30
   482 set :transportStatus:item @coal
 
   506 jump *label535 equal *tmp347 false
   507 ucontrol itemDrop @air 1000
   508 label *label535
-    * label *label536
-    * label *label537
   509 sensor *tmp349 @unit @coal
   510 op lessThan *tmp350 *tmp349 30
   511 sensor *tmp351 .core @coal
   512 op land *tmp352 *tmp350 *tmp351
   513 jump *label534 notEqual *tmp352 false
-    * label *label538
   514 set :depositItems:block .thoriumGenerator
   515 set :depositItems:item @coal
   516 setaddr :depositItems*retaddr *label539 (h:*label539)
   517 call *label21 *invalid :depositItems*retval (m:*label539) (h:*label539)
   518 label *label539
-    * label *label540
   519 label *label173
   520 label *label170
-    * label *label171
   521 label *label168
-    * label *label169
   522 set :fetchBlock:block .thoriumContainer
   523 set :fetchBlock:item @thorium
   524 setaddr :fetchBlock*retaddr *label176 (h:*label176)
 
   528 jump *label177 lessThanEq *tmp247 400
   529 write 4 .controller ".polyTarget"
   530 write 4 processor2 ".polyTarget"
-    * label *label179
   531 label *label177
-    * label *label178
-    * label *label166
   532 jump *label165 always
   533 label *label164
   534 read *tmp84 .controller ".monos"
   535 jump *label180 lessThanEq *tmp84 1
-    * label *label505
   536 write "Phase 1: supplying base" processor2 ".status1"
-    * label *label506
   537 set :mineOre.1:ore @coal
   538 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   539 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   540 label *label184
-    * label *label182
   541 jump *label181 always
   542 label *label180
   543 set :supplyBase0:supplied false
 
   546 jump *label188 greaterThanEq *tmp254 graphite
   547 sensor *tmp257 AJEMJJ-graphite-press0 @coal
   548 jump *label190 greaterThanEq *tmp257 5
-    * label *label507
   549 write "Goal 1: graphite requirement" processor2 ".status1"
-    * label *label508
   550 set :supplyBlock:block AJEMJJ-graphite-press0
   551 set :supplyBlock:ore @coal
   552 setaddr :supplyBlock*retaddr *label193 (h:*label193)
 
   554 label *label193
   555 set :supplyBase0:supplied true
   556 label *label190
-    * label *label191
   557 label *label188
-    * label *label189
   558 sensor *tmp260 .core @silicon
   559 jump *label194 greaterThanEq *tmp260 silicon
   560 sensor *tmp263 ALMQJN-silicon-smelter4 @coal
   561 jump *label196 greaterThanEq *tmp263 5
-    * label *label509
   562 write "Goal 2: coal for silicon requirement" processor2 ".status1"
-    * label *label510
   563 set :supplyBlock:block ALMQJN-silicon-smelter4
   564 set :supplyBlock:ore @coal
   565 setaddr :supplyBlock*retaddr *label199 (h:*label199)
 
   570 label *label196
   571 sensor *tmp266 ALMQJN-silicon-smelter4 @sand
   572 jump *label200 greaterThanEq *tmp266 5
-    * label *label511
   573 write "Goal 3: sand for silicon requirement" processor2 ".status1"
-    * label *label512
   574 set :supplyBlock:block ALMQJN-silicon-smelter4
   575 set :supplyBlock:ore @sand
   576 setaddr :supplyBlock*retaddr *label203 (h:*label203)
 
   578 label *label203
   579 set :supplyBase0:supplied true
   580 label *label200
-    * label *label201
   581 label *label197
   582 label *label194
-    * label *label195
   583 sensor *tmp269 AJTJK-battery1 @totalPower
   584 jump *label204 greaterThanEq *tmp269 .powerTarget
   585 sensor *tmp272 AJRJM-combustion-generator3 @coal
   586 jump *label206 greaterThanEq *tmp272 2
-    * label *label513
   587 write "Goal 4: supplying generator" processor2 ".status1"
-    * label *label514
   588 set :supplyBlock:block AJRJM-combustion-generator3
   589 set :supplyBlock:ore @coal
   590 setaddr :supplyBlock*retaddr *label209 (h:*label209)
 
   592 label *label209
   593 set :supplyBase0:supplied true
   594 label *label206
-    * label *label207
   595 label *label204
-    * label *label205
   596 label *label186
-    * label *label187
   597 set *tmp277 100
   598 sensor *tmp275 .core @titanium
   599 jump *label211 greaterThanEq *tmp275 titanium
 
   607 sensor *tmp286 AJTJK-battery1 @totalPower
   608 op mul *tmp287 A©JNJP-unloader6 .powerTarget
   609 jump *label216 greaterThanEq *tmp286 *tmp287
-    * label *label515
   610 write "Goal 5: supplying generator" processor2 ".status1"
-    * label *label516
   611 set :mineOre.1:ore @coal
   612 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   613 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
 
   616 label *label216
   617 sensor *tmp290 .core @silicon
   618 jump *label220 greaterThanEq *tmp290 silicon
-    * label *label517
   619 write "Goal 6: silicon requirement" processor2 ".status1"
-    * label *label518
   620 sensor :supplyBase0:coal .core @coal
   621 sensor :supplyBase0:sand .core @sand
   622 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   627 label *label220
   628 sensor *tmp297 .core @copper
   629 jump *label226 greaterThanEq *tmp297 copper
-    * label *label519
   630 write "Goal 7: copper requirement" processor2 ".status1"
-    * label *label520
   631 set :mineOre.1:ore @copper
   632 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   633 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
 
   636 label *label226
   637 sensor *tmp300 .core @lead
   638 jump *label230 greaterThanEq *tmp300 lead
-    * label *label521
   639 write "Goal 8: lead requirement" processor2 ".status1"
-    * label *label522
   640 set :mineOre.1:ore @lead
   641 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   642 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
 
   645 label *label230
   646 sensor *tmp303 .core @metaglass
   647 jump *label234 greaterThanEq *tmp303 metaglass
-    * label *label523
   648 write "Goal 9: metaglass requirement" processor2 ".status1"
-    * label *label524
   649 set :mineOre.1:ore @sand
   650 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   651 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   652 label *label237
   653 jump *label235 always
   654 label *label234
-    * label *label525
   655 write "Goal 10: supplying base" processor2 ".status1"
-    * label *label526
   656 sensor :supplyBase0:coal.1 .core @coal
   657 sensor :supplyBase0:sand.1 .core @sand
   658 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   665 label *label221
   666 label *label217
   667 label *label214
-    * label *label215
   668 jump *label213 always
   669 label *label212
-    * label *label527
   670 write "Goal 11: Fetching titanium" processor2 ".status1"
-    * label *label528
   671 set :fetchBlock:block .titaniumDrill
   672 set :fetchBlock:item @titanium
   673 setaddr :fetchBlock*retaddr *label243 (h:*label243)
   674 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   675 label *label243
   676 label *label213
-    * label *label185
   677 label *label181
   678 label *label165
-    * label *label163
   679 return :supplyBase*retaddr
   680 end
   681 label *label38
 
   704 set :buildRemoteBlock*retval :buildBlock*retval
   705 jump *label244 always
   706 label *label245
-    * label *label246
   707 set :buildRemoteBlock*retval false
   708 jump *label244 always
   709 label *label244
 
   736 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   737 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   738 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label249
   739 return :buildBlockFromCfg*retaddr
   740 end
   741 label *label40
 
   744 setaddr :buildBlockFromCfg*retaddr *label253 (h:*label253)
   745 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   746 label *label253
-    * label *label252
   747 return :buildBlockFromCfg.1*retaddr
   748 end
   749 label *label41
 
   764 setaddr :meetTarget*retaddr *label256 (h:*label256)
   765 call *label36 *invalid :meetTarget*retval (m:*label256) (h:*label256)
   766 label *label256
-    * label *label254
   767 return :meetTarget.1*retaddr
   768 end
   769 label *label42
 
   785 write 0 .controller ".leadReserve"
   786 write 0 .controller ".siliconReserve"
   787 write 0 .controller ".graphiteReserve"
-    * label *label257
   788 return :buildUnits*retaddr
   789 end
   790 label *label43
   791 label *label260
   792 ubind :flagUnits:unit
   793 set :flagUnits:firstUnit @unit
-    * label *label261
   794 jump *label260 equal :flagUnits:firstUnit null
-    * label *label262
   795 set :flagUnits:x @thisx
   796 label *label263
   797 ucontrol flag :flagUnits:x
   798 op add :flagUnits:x :flagUnits:x 4
   799 ubind :flagUnits:unit
-    * label *label264
   800 jump *label263 notEqual @unit :flagUnits:firstUnit
-    * label *label265
-    * label *label259
   801 return :flagUnits*retaddr
   802 end
   803 label *label44
 
   811 jump *label270 equal *tmp320 false
   812 ucontrol stop
   813 label *label270
-    * label *label271
   814 ubind :lineUpUnits:unit
-    * label *label268
   815 jump *label267 notEqual @unit :lineUpUnits:firstUnit
-    * label *label269
-    * label *label266
   816 return :lineUpUnits*retaddr
   817 end
   818 label *label24
 
   828 setaddr :mineOre*retaddr *label275 (h:*label275)
   829 call *label23 *invalid :mineOre*retval (m:*label275) (h:*label275)
   830 label *label275
-    * label *label273
   831 return :mineOre.1*retaddr
   832 end
   833 label *label25
 
   862 jump *label284 equal *tmp331 false
   863 ucontrol itemDrop @air 1000
   864 label *label284
-    * label *label285
-    * label *label282
   865 sensor *tmp333 @unit :fetchBlock:item
   866 op lessThan *tmp334 *tmp333 30
   867 sensor *tmp335 :fetchBlock:block :fetchBlock:item
   868 op land *tmp336 *tmp334 *tmp335
   869 jump *label281 notEqual *tmp336 false
-    * label *label283
   870 set :depositItems:block .core
   871 set :depositItems:item :fetchBlock:item
   872 setaddr :depositItems*retaddr *label286 (h:*label286)
   873 call *label21 *invalid :depositItems*retval (m:*label286) (h:*label286)
   874 label *label286
-    * label *label276
   875 return :fetchBlock*retaddr
   876 end
   877 label *label26
 
   892 call *label23 *invalid :mineOre*retval (m:*label291) (h:*label291)
   893 label *label291
   894 label *label289
-    * label *label290
-    * label *label287
   895 return :supplyBlock*retaddr
   896 end
   897 label *label29
 
   915 sensor :unpackCfg:ti :unpackCfg:type @titanium
   916 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   917 sensor :unpackCfg:th :unpackCfg:type @thorium
-    * label *label303
   918 return :unpackCfg*retaddr
   919 end
   920 label *label36
-    * label *label474
   921 op sign :meetTarget:count :meetTarget:copper
-    * label *label475
-    * label *label478
   922 op sign *tmp380 :meetTarget:lead
   923 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label479
-    * label *label482
   924 op sign *tmp380 :meetTarget:graphite
   925 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label483
-    * label *label486
   926 op sign *tmp380 :meetTarget:silicon
   927 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label487
-    * label *label490
   928 op sign *tmp380 :meetTarget:titanium
   929 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label491
-    * label *label494
   930 op sign *tmp380 :meetTarget:metaglass
   931 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label495
-    * label *label498
   932 op sign *tmp380 :meetTarget:thorium
   933 op add :meetTarget:count :meetTarget:count *tmp380
-    * label *label499
-    * label *label307
   934 write :meetTarget:count processor2 ".totalTargets"
   935 write :meetTarget:block processor2 ".nextBlock"
   936 write :meetTarget:copper processor2 ".targetCopper"
 
   971 set *tmp392 false
   972 jump *label318 always
   973 label *label319
-    * label *label320
   974 sensor *tmp396 .core @lead
   975 jump *label321 greaterThanEq *tmp396 lead
   976 set *tmp392 false
   977 jump *label318 always
   978 label *label321
-    * label *label322
   979 sensor *tmp399 .core @graphite
   980 jump *label323 greaterThanEq *tmp399 graphite
   981 set *tmp392 false
   982 jump *label318 always
   983 label *label323
-    * label *label324
   984 sensor *tmp402 .core @silicon
   985 jump *label325 greaterThanEq *tmp402 silicon
   986 set *tmp392 false
   987 jump *label318 always
   988 label *label325
-    * label *label326
   989 sensor *tmp405 .core @titanium
   990 jump *label327 greaterThanEq *tmp405 titanium
   991 set *tmp392 false
   992 jump *label318 always
   993 label *label327
-    * label *label328
   994 sensor *tmp408 .core @metaglass
   995 jump *label329 greaterThanEq *tmp408 metaglass
   996 set *tmp392 false
   997 jump *label318 always
   998 label *label329
-    * label *label330
   999 sensor *tmp411 .core @thorium
  1000 jump *label331 greaterThanEq *tmp411 thorium
  1001 set *tmp392 false
  1002 jump *label318 always
  1003 label *label331
-    * label *label332
  1004 set *tmp392 true
  1005 jump *label318 always
  1006 label *label318
 
  1008 setaddr :supplyBase*retaddr *label333 (h:*label333)
  1009 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1010 label *label333
-    * label *label316
  1011 jump *label315 always
  1012 label *label317
  1013 jump *label334 equal :meetTarget:forBuild false
 
  1023 set *tmp417 false
  1024 jump *label340 always
  1025 label *label341
-    * label *label342
  1026 sensor *tmp421 .core @lead
  1027 jump *label343 greaterThanEq *tmp421 lead
  1028 set *tmp417 false
  1029 jump *label340 always
  1030 label *label343
-    * label *label344
  1031 sensor *tmp424 .core @graphite
  1032 jump *label345 greaterThanEq *tmp424 graphite
  1033 set *tmp417 false
  1034 jump *label340 always
  1035 label *label345
-    * label *label346
  1036 sensor *tmp427 .core @silicon
  1037 jump *label347 greaterThanEq *tmp427 silicon
  1038 set *tmp417 false
  1039 jump *label340 always
  1040 label *label347
-    * label *label348
  1041 sensor *tmp430 .core @titanium
  1042 jump *label349 greaterThanEq *tmp430 titanium
  1043 set *tmp417 false
  1044 jump *label340 always
  1045 label *label349
-    * label *label350
  1046 sensor *tmp433 .core @metaglass
  1047 jump *label351 greaterThanEq *tmp433 metaglass
  1048 set *tmp417 false
  1049 jump *label340 always
  1050 label *label351
-    * label *label352
  1051 sensor *tmp436 .core @thorium
  1052 jump *label353 greaterThanEq *tmp436 thorium
  1053 set *tmp417 false
  1054 jump *label340 always
  1055 label *label353
-    * label *label354
  1056 set *tmp417 true
  1057 jump *label340 always
  1058 label *label340
 
  1060 setaddr :supplyBase*retaddr *label355 (h:*label355)
  1061 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1062 label *label355
-    * label *label338
  1063 jump *label337 always
  1064 label *label339
  1065 label *label334
-    * label *label335
-    * label *label304
  1066 return :meetTarget*retaddr
  1067 end
  1068 label *label37
 
  1095 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1096 write false .controller ":buildStop*finished"
  1097 write 2 .controller "@counter"
-    * label *label356
  1098 return :buildBlock*retaddr
  1099 end
  1100 label *label12
  1101 write :status2:text processor2 ".status2"
  1102 write :status2:item processor2 ".item2"
  1103 write :status2:block processor2 ".block2"
-    * label *label359
  1104 return :status2*retaddr
  1105 end
  1106 label *label14
  1107 write :transportStatus:target processor2 ".transportTarget"
  1108 write :transportStatus:item processor2 ".transportItem"
-    * label *label360
  1109 return :transportStatus*retaddr
  1110 end
  1111 label *label18
-    * label *label541
  1112 write "Moving..." processor2 ".status3"
-    * label *label542
  1113 label *label363
  1114 sensor *tmp449 @unit @firstItem
  1115 jump *label366 equal *tmp449 null
  1116 ucontrol itemDrop @air 1000
  1117 label *label366
-    * label *label367
  1118 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label364
  1119 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp452
  1120 jump *label363 equal *tmp452 false
-    * label *label365
-    * label *label361
  1121 return :moveToEmpty*retaddr
  1122 end
  1123 label *label19
 
  1125 sensor *tmp454 @unit @firstItem
  1126 jump *label371 equal *tmp454 null
  1127 ucontrol itemDrop @air 1000
-    * label *label370
  1128 jump *label369 always
  1129 label *label371
-    * label *label368
  1130 return :dropAll*retaddr
  1131 end
  1132 label *label21
-    * label *label543
  1133 write "Depositing..." processor2 ".status3"
-    * label *label544
  1134 sensor *tmp456 @unit @firstItem
  1135 jump *label374 notEqual *tmp456 :depositItems:item
-    * label *label549
  1136 sensor *tmp505 :depositItems:block @x
  1137 sensor *tmp506 :depositItems:block @y
-    * label *label557
-    * label *label558
  1138 write "Moving..." processor2 ".status3"
-    * label *label559
  1139 label *label560
  1140 ucontrol within *tmp505 *tmp506 6 *tmp511
  1141 jump *label562 notEqual *tmp511 false
  1142 ucontrol approach *tmp505 *tmp506 5.5
-    * label *label561
  1143 jump *label560 always
  1144 label *label562
-    * label *label563
-    * label *label551
  1145 sensor :depositItems:cap :depositItems:block @itemCapacity
  1146 label *label377
  1147 ucontrol itemDrop :depositItems:block 30
-    * label *label378
  1148 sensor *tmp460 @unit @firstItem
  1149 op mul *tmp461 *tmp460 :depositItems:cap
  1150 sensor *tmp462 :depositItems:block :depositItems:item
  1151 jump *label377 greaterThan *tmp461 *tmp462
-    * label *label379
  1152 jump *label375 always
  1153 label *label374
  1154 label *label380
  1155 sensor *tmp464 @unit @firstItem
  1156 jump *label382 equal *tmp464 null
  1157 ucontrol itemDrop @air 1000
-    * label *label381
  1158 jump *label380 always
  1159 label *label382
  1160 label *label375
 
  1163 setaddr :transportStatus*retaddr *label383 (h:*label383)
  1164 call *label14 *invalid :transportStatus*retval (m:*label383) (h:*label383)
  1165 label *label383
-    * label *label372
  1166 return :depositItems*retaddr
  1167 end
  1168 label *label23
 
  1172 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1173 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1174 label *label385
-    * label *label552
  1175 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
  1176 jump *label554 notEqual *tmp507 false
  1177 set :error:error "Cannot locate ore"
 
  1179 call *label15 *invalid :error*retval (m:*label553) (h:*label553)
  1180 label *label553
  1181 label *label554
-    * label *label555
-    * label *label556
  1182 set :mineOre:x :locateOre:x
  1183 set :mineOre:y :locateOre:y
  1184 set :moveToEmpty:x :locateOre:x
 
  1192 call *label19 *invalid :dropAll*retval (m:*label390) (h:*label390)
  1193 label *label390
  1194 label *label388
-    * label *label389
-    * label *label545
  1195 write "Mining..." processor2 ".status3"
-    * label *label546
  1196 op add :mineOre:stop @second 10
  1197 label *label392
  1198 sensor :mineOre:item @unit @firstItem
 
  1202 jump *label395 equal *tmp474 false
  1203 jump *label394 always
  1204 label *label395
-    * label *label396
  1205 ucontrol mine :mineOre:x :mineOre:y
  1206 jump *label397 lessThanEq @second :mineOre:stop
  1207 jump *label394 always
  1208 label *label397
-    * label *label398
  1209 jump *label399 notEqual .noTarget false
  1210 sensor *tmp481 .core @copper
  1211 jump *label402 greaterThanEq *tmp481 copper
  1212 set *tmp480 false
  1213 jump *label401 always
  1214 label *label402
-    * label *label403
  1215 sensor *tmp484 .core @lead
  1216 jump *label404 greaterThanEq *tmp484 lead
  1217 set *tmp480 false
  1218 jump *label401 always
  1219 label *label404
-    * label *label405
  1220 sensor *tmp487 .core @graphite
  1221 jump *label406 greaterThanEq *tmp487 graphite
  1222 set *tmp480 false
  1223 jump *label401 always
  1224 label *label406
-    * label *label407
  1225 sensor *tmp490 .core @silicon
  1226 jump *label408 greaterThanEq *tmp490 silicon
  1227 set *tmp480 false
  1228 jump *label401 always
  1229 label *label408
-    * label *label409
  1230 sensor *tmp493 .core @titanium
  1231 jump *label410 greaterThanEq *tmp493 titanium
  1232 set *tmp480 false
  1233 jump *label401 always
  1234 label *label410
-    * label *label411
  1235 sensor *tmp496 .core @metaglass
  1236 jump *label412 greaterThanEq *tmp496 metaglass
  1237 set *tmp480 false
  1238 jump *label401 always
  1239 label *label412
-    * label *label413
  1240 sensor *tmp499 .core @thorium
  1241 jump *label414 greaterThanEq *tmp499 thorium
  1242 set *tmp480 false
  1243 jump *label401 always
  1244 label *label414
-    * label *label415
  1245 set *tmp480 true
  1246 jump *label401 always
  1247 label *label401
  1248 jump *label416 equal *tmp480 false
  1249 jump *label394 always
  1250 label *label416
-    * label *label417
  1251 label *label399
-    * label *label400
-    * label *label393
  1252 sensor *tmp503 @unit @totalItems
  1253 jump *label392 lessThan *tmp503 :mineOre:amount
  1254 label *label394
 
  1258 setaddr :depositItems*retaddr *label418 (h:*label418)
  1259 call *label21 *invalid :depositItems*retval (m:*label418) (h:*label418)
  1260 label *label418
-    * label *label384
  1261 return :mineOre*retaddr
  1262 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-4 instructions):
 
   172 call *label35 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   173 label *label94
   174 sensor *tmp158 AJTJK-battery1 @totalPower
-    * jump *label95 greaterThanEq *tmp158 300
-    * jump *label93 always
+  175 jump *label93 lessThan *tmp158 300
   176 label *label95
   177 read *tmp84 .controller ".monos"
   178 jump *label91 lessThan *tmp84 3
 
  1198 op notEqual *tmp472 :mineOre:item null
  1199 op notEqual *tmp473 :mineOre:item :mineOre:ore
  1200 op land *tmp474 *tmp472 *tmp473
-    * jump *label395 equal *tmp474 false
-    * jump *label394 always
+ 1201 jump *label394 notEqual *tmp474 false
  1202 label *label395
  1203 ucontrol mine :mineOre:x :mineOre:y
-    * jump *label397 lessThanEq @second :mineOre:stop
-    * jump *label394 always
+ 1204 jump *label394 greaterThan @second :mineOre:stop
  1205 label *label397
  1206 jump *label399 notEqual .noTarget false
  1207 sensor *tmp481 .core @copper
 
  1242 set *tmp480 true
  1243 jump *label401 always
  1244 label *label401
-    * jump *label416 equal *tmp480 false
-    * jump *label394 always
+ 1245 jump *label394 notEqual *tmp480 false
  1246 label *label416
  1247 label *label399
  1248 sensor *tmp503 @unit @totalItems

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   173 label *label94
   174 sensor *tmp158 AJTJK-battery1 @totalPower
   175 jump *label93 lessThan *tmp158 300
-    * label *label95
   176 read *tmp84 .controller ".monos"
   177 jump *label91 lessThan *tmp84 3
   178 label *label93
 
  1198 op notEqual *tmp473 :mineOre:item :mineOre:ore
  1199 op land *tmp474 *tmp472 *tmp473
  1200 jump *label394 notEqual *tmp474 false
-    * label *label395
  1201 ucontrol mine :mineOre:x :mineOre:y
  1202 jump *label394 greaterThan @second :mineOre:stop
-    * label *label397
  1203 jump *label399 notEqual .noTarget false
  1204 sensor *tmp481 .core @copper
  1205 jump *label402 greaterThanEq *tmp481 copper
 
  1240 jump *label401 always
  1241 label *label401
  1242 jump *label394 notEqual *tmp480 false
-    * label *label416
  1243 label *label399
  1244 sensor *tmp503 @unit @totalItems
  1245 jump *label392 lessThan *tmp503 :mineOre:amount

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   231 label *label110
   232 read *tmp85 .controller ".polys"
   233 jump *label112 greaterThanEq *tmp85 2
-    * setaddr :supplyBase*retaddr *label113 (h:*label113)
+  234 setaddr :supplyBase*retaddr *label110 (h:*label113)
   235 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
   236 label *label113
   237 jump *label110 always
 
   241 label *label115
   242 read *tmp83 .controller ".flares"
   243 jump *label117 greaterThanEq *tmp83 2
-    * setaddr :supplyBase*retaddr *label118 (h:*label118)
+  244 setaddr :supplyBase*retaddr *label115 (h:*label118)
   245 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
   246 label *label118
   247 jump *label115 always
 
   374 label *label140
   375 read *tmp85 .controller ".polys"
   376 jump *label142 greaterThanEq *tmp85 3
-    * setaddr :supplyBase*retaddr *label143 (h:*label143)
+  377 setaddr :supplyBase*retaddr *label140 (h:*label143)
   378 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
   379 label *label143
   380 jump *label140 always
 
   444 label *label160
   445 op sub :lineUpUnits:y @thisy 18
   446 set :lineUpUnits:unit @flare
-    * setaddr :lineUpUnits*retaddr *label161 (h:*label161)
+  447 setaddr :lineUpUnits*retaddr *label155 (h:*label161)
   448 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
   449 label *label161
   450 jump *label155 always
 
   470 jump *label172 greaterThanEq *tmp244 50
   471 set :supplyBlock:block .thoriumGenerator
   472 set :supplyBlock:ore @coal
-    * setaddr :supplyBlock*retaddr *label174 (h:*label174)
+  473 setaddr :supplyBlock*retaddr *label173 (h:*label174)
   474 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
   475 label *label174
   476 jump *label173 always
 
   523 call *label25 *invalid :fetchBlock*retval (m:*label176) (h:*label176)
   524 label *label176
   525 sensor *tmp247 .core @thorium
-    * jump *label177 lessThanEq *tmp247 400
+  526 jump *label165 lessThanEq *tmp247 400
   527 write 4 .controller ".polyTarget"
   528 write 4 processor2 ".polyTarget"
   529 label *label177
-    * jump *label165 always
+  530 return :supplyBase*retaddr
   531 label *label164
   532 read *tmp84 .controller ".monos"
   533 jump *label180 lessThanEq *tmp84 1
 
   536 setaddr :mineOre.1*retaddr *label184 (h:*label184)
   537 call *label24 *invalid :mineOre.1*retval (m:*label184) (h:*label184)
   538 label *label184
-    * jump *label181 always
+  539 return :supplyBase*retaddr
   540 label *label180
   541 set :supplyBase0:supplied false
   542 jump *label186 notEqual A©JNJP-unloader6 null
 
   601 label *label211
   602 sensor *tmp281 .titaniumDrill @titanium
   603 jump *label212 greaterThanEq *tmp281 *tmp277
-    * jump *label214 notEqual :supplyBase0:supplied false
+  604 jump *label213 notEqual :supplyBase0:supplied false
   605 sensor *tmp286 AJTJK-battery1 @totalPower
   606 op mul *tmp287 A©JNJP-unloader6 .powerTarget
   607 jump *label216 greaterThanEq *tmp286 *tmp287
 
   610 setaddr :mineOre.1*retaddr *label219 (h:*label219)
   611 call *label24 *invalid :mineOre.1*retval (m:*label219) (h:*label219)
   612 label *label219
-    * jump *label217 always
+  613 return :supplyBase*retaddr
   614 label *label216
   615 sensor *tmp290 .core @silicon
   616 jump *label220 greaterThanEq *tmp290 silicon
 
   621 setaddr :mineOre.1*retaddr *label225 (h:*label225)
   622 call *label24 *invalid :mineOre.1*retval (m:*label225) (h:*label225)
   623 label *label225
-    * jump *label221 always
+  624 return :supplyBase*retaddr
   625 label *label220
   626 sensor *tmp297 .core @copper
   627 jump *label226 greaterThanEq *tmp297 copper
 
   630 setaddr :mineOre.1*retaddr *label229 (h:*label229)
   631 call *label24 *invalid :mineOre.1*retval (m:*label229) (h:*label229)
   632 label *label229
-    * jump *label227 always
+  633 return :supplyBase*retaddr
   634 label *label226
   635 sensor *tmp300 .core @lead
   636 jump *label230 greaterThanEq *tmp300 lead
 
   639 setaddr :mineOre.1*retaddr *label233 (h:*label233)
   640 call *label24 *invalid :mineOre.1*retval (m:*label233) (h:*label233)
   641 label *label233
-    * jump *label231 always
+  642 return :supplyBase*retaddr
   643 label *label230
   644 sensor *tmp303 .core @metaglass
   645 jump *label234 greaterThanEq *tmp303 metaglass
 
   648 setaddr :mineOre.1*retaddr *label237 (h:*label237)
   649 call *label24 *invalid :mineOre.1*retval (m:*label237) (h:*label237)
   650 label *label237
-    * jump *label235 always
+  651 return :supplyBase*retaddr
   652 label *label234
   653 write "Goal 10: supplying base" processor2 ".status1"
   654 sensor :supplyBase0:coal.1 .core @coal
 
   663 label *label221
   664 label *label217
   665 label *label214
-    * jump *label213 always
+  666 return :supplyBase*retaddr
   667 label *label212
   668 write "Goal 11: Fetching titanium" processor2 ".status1"
   669 set :fetchBlock:block .titaniumDrill
 
   700 call *label37 *invalid :buildBlock*retval (m:*label248) (h:*label248)
   701 label *label248
   702 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label244 always
+  703 return :buildRemoteBlock*retaddr
   704 label *label245
   705 set :buildRemoteBlock*retval false
-    * jump *label244 always
+  706 return :buildRemoteBlock*retaddr
   707 label *label244
   708 return :buildRemoteBlock*retaddr
   709 end
 
  1003 jump *label318 always
  1004 label *label318
  1005 jump *label317 notEqual *tmp392 false
-    * setaddr :supplyBase*retaddr *label333 (h:*label333)
+ 1006 setaddr :supplyBase*retaddr *label315 (h:*label333)
  1007 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
  1008 label *label333
  1009 jump *label315 always
 
  1055 jump *label340 always
  1056 label *label340
  1057 jump *label339 notEqual *tmp417 false
-    * setaddr :supplyBase*retaddr *label355 (h:*label355)
+ 1058 setaddr :supplyBase*retaddr *label337 (h:*label355)
  1059 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
  1060 label *label355
  1061 jump *label337 always

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-30 instructions):
 
   233 jump *label112 greaterThanEq *tmp85 2
   234 setaddr :supplyBase*retaddr *label110 (h:*label113)
   235 call *label35 *invalid :supplyBase*retval (m:*label113) (h:*label113)
-    * label *label113
-    * jump *label110 always
   236 label *label112
   237 write 2 .controller ".flareTarget"
   238 write 2 processor2 ".flareTarget"
 
   241 jump *label117 greaterThanEq *tmp83 2
   242 setaddr :supplyBase*retaddr *label115 (h:*label118)
   243 call *label35 *invalid :supplyBase*retval (m:*label118) (h:*label118)
-    * label *label118
-    * jump *label115 always
   244 label *label117
   245 write @ore-titanium processor2 ".nextBlock"
   246 ubind @flare
 
   372 jump *label142 greaterThanEq *tmp85 3
   373 setaddr :supplyBase*retaddr *label140 (h:*label143)
   374 call *label35 *invalid :supplyBase*retval (m:*label143) (h:*label143)
-    * label *label143
-    * jump *label140 always
   375 label *label142
   376 write 3200 .controller ".powerTarget"
   377 set .siliconMonoSurplus 130
 
   440 set :lineUpUnits:unit @flare
   441 setaddr :lineUpUnits*retaddr *label155 (h:*label161)
   442 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
-    * label *label161
-    * jump *label155 always
-    * end
   443 label *label15
   444 set .ERROR :error:error
   445 stop
   446 return :error*retaddr
-    * end
   447 label *label35
   448 op add *tmp233 .siliconMonoSurplus silicon
   449 sensor *tmp234 .core @silicon
 
   462 set :supplyBlock:ore @coal
   463 setaddr :supplyBlock*retaddr *label173 (h:*label174)
   464 call *label26 *invalid :supplyBlock*retval (m:*label174) (h:*label174)
-    * label *label174
-    * jump *label173 always
   465 label *label172
   466 sensor *tmp342 .thoriumGenerator @itemCapacity
   467 op min :transportStatus:target *tmp342 30
 
   514 jump *label165 lessThanEq *tmp247 400
   515 write 4 .controller ".polyTarget"
   516 write 4 processor2 ".polyTarget"
-    * label *label177
   517 return :supplyBase*retaddr
   518 label *label164
   519 read *tmp84 .controller ".monos"
 
   644 setaddr :mineOre.1*retaddr *label241 (h:*label241)
   645 call *label24 *invalid :mineOre.1*retval (m:*label241) (h:*label241)
   646 label *label241
-    * label *label235
-    * label *label231
-    * label *label227
-    * label *label221
-    * label *label217
-    * label *label214
   647 return :supplyBase*retaddr
   648 label *label212
   649 write "Goal 11: Fetching titanium" processor2 ".status1"
 
   653 call *label25 *invalid :fetchBlock*retval (m:*label243) (h:*label243)
   654 label *label243
   655 label *label213
-    * label *label181
   656 label *label165
   657 return :supplyBase*retaddr
-    * end
   658 label *label38
   659 op add *tmp310 :buildRemoteBlock:x :buildRemoteBlock:y
   660 jump *label245 lessThanEq *tmp310 0
 
   683 label *label245
   684 set :buildRemoteBlock*retval false
   685 return :buildRemoteBlock*retaddr
-    * label *label244
-    * return :buildRemoteBlock*retaddr
-    * end
   686 label *label39
   687 set :unpackCfg:cfg :buildBlockFromCfg:cfg
   688 setaddr :unpackCfg*retaddr *label250 (h:*label250)
 
   711 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   712 set :buildBlockFromCfg*retval :buildBlock*retval
   713 return :buildBlockFromCfg*retaddr
-    * end
   714 label *label40
   715 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   716 set :buildBlockFromCfg:config null
 
   718 call *label39 *invalid :buildBlockFromCfg*retval (m:*label253) (h:*label253)
   719 label *label253
   720 return :buildBlockFromCfg.1*retaddr
-    * end
   721 label *label41
   722 set :unpackCfg:cfg :meetTarget.1:cfg
   723 setaddr :unpackCfg*retaddr *label255 (h:*label255)
 
   737 call *label36 *invalid :meetTarget*retval (m:*label256) (h:*label256)
   738 label *label256
   739 return :meetTarget.1*retaddr
-    * end
   740 label *label42
   741 set :meetTarget:block 0
   742 set :meetTarget:copper 0
 
   757 write 0 .controller ".siliconReserve"
   758 write 0 .controller ".graphiteReserve"
   759 return :buildUnits*retaddr
-    * end
   760 label *label43
   761 label *label260
   762 ubind :flagUnits:unit
 
   769 ubind :flagUnits:unit
   770 jump *label263 notEqual @unit :flagUnits:firstUnit
   771 return :flagUnits*retaddr
-    * end
   772 label *label44
   773 ubind :lineUpUnits:unit
   774 set :lineUpUnits:firstUnit @unit
 
   783 ubind :lineUpUnits:unit
   784 jump *label267 notEqual @unit :lineUpUnits:firstUnit
   785 return :lineUpUnits*retaddr
-    * end
   786 label *label24
   787 set :status2:text "Mining "
   788 set :status2:item :mineOre.1:ore
 
   797 call *label23 *invalid :mineOre*retval (m:*label275) (h:*label275)
   798 label *label275
   799 return :mineOre.1*retaddr
-    * end
   800 label *label25
   801 sensor *tmp324 :fetchBlock:block @itemCapacity
   802 op min :transportStatus:target *tmp324 30
 
   840 call *label21 *invalid :depositItems*retval (m:*label286) (h:*label286)
   841 label *label286
   842 return :fetchBlock*retaddr
-    * end
   843 label *label26
   844 set :status2:text "Supplying "
   845 set :status2:item :supplyBlock:ore
 
   859 label *label291
   860 label *label289
   861 return :supplyBlock*retaddr
-    * end
   862 label *label29
   863 read *tmp354 :unpackCfg:cfg 1
   864 op sub *tmp355 *tmp354 74
 
   881 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   882 sensor :unpackCfg:th :unpackCfg:type @thorium
   883 return :unpackCfg*retaddr
-    * end
   884 label *label36
   885 op sign :meetTarget:count :meetTarget:copper
   886 op sign *tmp380 :meetTarget:lead
 
   971 jump *label317 notEqual *tmp392 false
   972 setaddr :supplyBase*retaddr *label315 (h:*label333)
   973 call *label35 *invalid :supplyBase*retval (m:*label333) (h:*label333)
-    * label *label333
-    * jump *label315 always
   974 label *label317
   975 jump *label334 equal :meetTarget:forBuild false
   976 write false .controller ":buildStart*finished"
 
  1021 jump *label339 notEqual *tmp417 false
  1022 setaddr :supplyBase*retaddr *label337 (h:*label355)
  1023 call *label35 *invalid :supplyBase*retval (m:*label355) (h:*label355)
-    * label *label355
-    * jump *label337 always
  1024 label *label339
  1025 label *label334
  1026 return :meetTarget*retaddr
-    * end
  1027 label *label37
  1028 op notEqual *tmp440 .controller null
  1029 set :meetTarget:block :buildBlock:block
 
  1055 write false .controller ":buildStop*finished"
  1056 write 2 .controller "@counter"
  1057 return :buildBlock*retaddr
-    * end
  1058 label *label12
  1059 write :status2:text processor2 ".status2"
  1060 write :status2:item processor2 ".item2"
  1061 write :status2:block processor2 ".block2"
  1062 return :status2*retaddr
-    * end
  1063 label *label14
  1064 write :transportStatus:target processor2 ".transportTarget"
  1065 write :transportStatus:item processor2 ".transportItem"
  1066 return :transportStatus*retaddr
-    * end
  1067 label *label18
  1068 write "Moving..." processor2 ".status3"
  1069 label *label363
 
  1075 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp452
  1076 jump *label363 equal *tmp452 false
  1077 return :moveToEmpty*retaddr
-    * end
  1078 label *label19
  1079 label *label369
  1080 sensor *tmp454 @unit @firstItem
 
  1083 jump *label369 always
  1084 label *label371
  1085 return :dropAll*retaddr
-    * end
  1086 label *label21
  1087 write "Depositing..." processor2 ".status3"
  1088 sensor *tmp456 @unit @firstItem
 
  1118 call *label14 *invalid :transportStatus*retval (m:*label383) (h:*label383)
  1119 label *label383
  1120 return :depositItems*retaddr
-    * end
  1121 label *label23
  1122 op min :mineOre:amount :mineOre:amount 30
  1123 set :transportStatus:target :mineOre:amount
 
  1206 call *label21 *invalid :depositItems*retval (m:*label418) (h:*label418)
  1207 label *label418
  1208 return :mineOre*retaddr
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    26 label *label50
    27 ubind @poly
    28 set .builder @unit
-    * ulocate building core false @copper .coreX .coreY *tmp120 .core
+   29 ulocate building core false @copper .coreX .coreY 0 .core
    30 jump *label50 equal .core null
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
  1125 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1126 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1127 label *label385
-    * ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp507 *tmp508
+ 1128 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp507 0
  1129 jump *label554 notEqual *tmp507 false
  1130 set :error:error "Cannot locate ore"
  1131 setaddr :error*retaddr *label553 (h:*label553)

Final code before resolving virtual instructions:

    0:  set .ERROR ""                                                Actions.mnd: remote var ERROR = "";
        label *label45                                               CoreBuilder.mnd: require "Display.mnd" remote display;
    1:  read *tmp33 processor2 "*signature"                          ...
    2:  jump *label45 notEqual *tmp33 "0:v1"                         ...
        label *label46                                               CoreBuilder.mnd: require "OreLocator.mnd" remote oreLocator;
    3:  read *tmp73 processor3 "*signature"                          ...
    4:  jump *label46 notEqual *tmp73 "3290b8c661787058:v1"          ...
        label *label47                                               CoreBuilder.mnd: require "MonoController.mnd" remote monoController;
    5:  read *tmp98 processor7 "*signature"                          ...
    6:  jump *label47 notEqual *tmp98 "0:v1"                         ...
        label *label48                                               CoreBuilder.mnd: require "PolyController.mnd" remote polyController;
    7:  read *tmp100 processor6 "*signature"                         ...
    8:  jump *label48 notEqual *tmp100 "5f95d6f938a8462e:v1"         ...
        label *label49                                               CoreBuilder.mnd: require "BlockBuilder.mnd" remote blockBuilder;
    9:  read *tmp116 processor5 "*signature"                         ...
   10:  jump *label49 notEqual *tmp116 "319badb7a8e178a4:v1"         ...
   11:  set .titaniumDrill null                                      CoreBuilder.mnd: var
   12:  set .thoriumBattery null                                     ...
   13:  set .thoriumContainer null                                   ...
   14:  set .thoriumGenerator null                                   ...
   15:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   16:  set .graphiteSurplus 20                                      ...
   17:  set .siliconSurplus 20                                       ...
   18:  set .siliconMonoSurplus 0                                    ...
   19:  set .metaglassSurplus 20                                     ...
   20:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label50                                               CoreBuilder.mnd: do
   21:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   22:  set .builder @unit                                           ...
   23:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   24:  jump *label50 equal .core null                               CoreBuilder.mnd: do
   25:  set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"        CoreBuilder.mnd: buildBlockFromCfg(PRESS);
   26:  setaddr :buildBlockFromCfg.1*retaddr *label53                ...
   27:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label53                                               ...
   28:  set :buildBlockFromCfg.1:cfg "AJTJK-battery1"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY1);
   29:  setaddr :buildBlockFromCfg.1*retaddr *label54                ...
   30:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label54                                               ...
   31:  set :buildBlockFromCfg.1:cfg "ALTJL-battery2"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   32:  setaddr :buildBlockFromCfg.1*retaddr *label55                ...
   33:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label55                                               ...
   34:  set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"  CoreBuilder.mnd: buildBlockFromCfg(GENERATOR);
   35:  setaddr :buildBlockFromCfg.1*retaddr *label56                ...
   36:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label56                                               ...
   37:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   38:  set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"       CoreBuilder.mnd: buildBlockFromCfg(SMELTER);
   39:  setaddr :buildBlockFromCfg.1*retaddr *label57                ...
   40:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label57                                               ...
   41:  set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   42:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
   43:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
   44:  set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"             CoreBuilder.mnd: meetTarget(cfg);
   45:  setaddr :meetTarget.1*retaddr *label60                       ...
   46:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label60                                               ...
   47:  write @titanium processor2 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   48:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   49:  write .coreY processor3 ":findDrillLocation:y"               ...
   50:  write @unit processor3 ":findDrillLocation:unit"             ...
   51:  write @titanium processor3 ":findDrillLocation:item"         ...
   52:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
   53:  write 2 processor3 ":findDrillLocation:size"                 ...
   54:  write 4 processor3 ":findDrillLocation:limit"                ...
   55:  write false processor3 ":findDrillLocation*finished"         ...
   56:  write 1 processor3 "@counter"                                ...
        label *label61                                               ...
   57:  wait 1e-15                                                   ...
   58:  read *tmp139 processor3 ":findDrillLocation*finished"        ...
   59:  jump *label61 equal *tmp139 false                            ...
   60:  read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocat ...
   61:  read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocat ...
   62:  read :buildFirstTitaniumDrill:result processor3 ":findDrillL ...
   63:  jump *label62 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   64:  set :error:error "Cannot locate spot for titanium drill"     ...
   65:  setaddr :error*retaddr *label64                              ...
   66:  call *label15 *invalid :error*retval                         ...
        label *label64                                               ...
        label *label62                                               ...
   67:  write @pneumatic-drill processor2 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   68:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   69:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   70:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   71:  write 2 processor5 "@counter"                                ...
        label *label65                                               ...
   72:  wait 1e-15                                                   ...
   73:  read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished ...
   74:  jump *label65 equal *tmp145 false                            ...
   75:  read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   76:  set .titaniumDrill *tmp128                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   77:  write *tmp128 processor2 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   78:  set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"              CoreBuilder.mnd: buildBlockFromCfg(UNLOADER1);
   79:  setaddr :buildBlockFromCfg.1*retaddr *label66                ...
   80:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label66                                               ...
   81:  set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
   82:  setaddr :buildBlockFromCfg.1*retaddr *label67                ...
   83:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label67                                               ...
   84:  set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
   85:  setaddr :buildBlockFromCfg.1*retaddr *label68                ...
   86:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label68                                               ...
   87:  set .graphiteSurplus 80                                      CoreBuilder.mnd: graphiteSurplus = 80;
   88:  set :buildBlockFromCfg:cfg "AÕFDJS-micro-processor9"         CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, coreControllerConfig);
   89:  set :buildBlockFromCfg:config processor10                    ...
   90:  setaddr :buildBlockFromCfg*retaddr *label69                  ...
   91:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label69                                               ...
   92:  set .controller :buildBlockFromCfg*retval                    ...
   93:  write processor1 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
   94:  write processor2 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
   95:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
   96:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
   97:  set *tmp152 AJEMJJ-graphite-press0                           CoreBuilder.mnd: controller.write(@this.read(block), block);
   98:  write *tmp152 :buildBlockFromCfg*retval "AJEMJJ-graphite-pre ...
   99:  set *tmp152 AJTJK-battery1                                  ...
  100:  write *tmp152 :buildBlockFromCfg*retval "AJTJK-battery1"    ...
  101:  set *tmp152 ALTJL-battery2                                  ...
  102:  write *tmp152 :buildBlockFromCfg*retval "ALTJL-battery2"    ...
  103:  set *tmp152 AJRJM-combustion-generator3                     ...
  104:  write *tmp152 :buildBlockFromCfg*retval "AJRJM-combustion-g ...
  105:  set *tmp152 ALMQJN-silicon-smelter4                          ...
  106:  write *tmp152 :buildBlockFromCfg*retval "ALMQJN-silicon-smel ...
  107:  set *tmp152 A{LNJO-inverted-sorter5                          ...
  108:  write *tmp152 :buildBlockFromCfg*retval "A{LNJO-inverted-sor ...
  109:  set *tmp152 A©JNJP-unloader6                                 ...
  110:  write *tmp152 :buildBlockFromCfg*retval "A©JNJP-unloader6"   ...
  111:  set *tmp152 A{HNJQ-inverted-sorter7                          ...
  112:  write *tmp152 :buildBlockFromCfg*retval "A{HNJQ-inverted-sor ...
  113:  set *tmp152 AJPJR-underflow-gate8                           ...
  114:  write *tmp152 :buildBlockFromCfg*retval "AJPJR-underflow-ga ...
  115:  set *tmp152 AÕFDJS-micro-processor9                          ...
  116:  write *tmp152 :buildBlockFromCfg*retval "AÕFDJS-micro-proces ...
  117:  set :buildBlockFromCfg.1:cfg "AFFJT-power-node10"           CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  118:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  119:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  120:  set :buildBlockFromCfg.1:cfg "A©FHJU-unloader11"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER2);
  121:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  122:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  123:  set :buildBlockFromCfg.1:cfg "A~FJJV-overflow-gate12"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  124:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  125:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  126:  set :buildBlockFromCfg.1:cfg "A~DJJW-overflow-gate13"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  127:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  128:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  129:  set :buildBlockFromCfg.1:cfg "A¾BFLX-air-factory14"          CoreBuilder.mnd: buildBlockFromCfg(AIR_FACTORY);
  130:  setaddr :buildBlockFromCfg.1*retaddr *label87                ...
  131:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label87                                               ...
  132:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  133:  write 1 processor2 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  134:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  135:  write 5 processor2 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  136:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  137:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  138:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  139:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  140:  set .siliconSurplus 20                                       ...
  141:  setaddr :buildUnits*retaddr *label90                         CoreBuilder.mnd: buildUnits();
  142:  call *label42 *invalid :buildUnits*retval                    ...
        label *label90                                               ...
        label *label91                                               CoreBuilder.mnd: do
  143:  setaddr :supplyBase*retaddr *label94                         CoreBuilder.mnd: supplyBase();
  144:  call *label35 *invalid :supplyBase*retval                    ...
        label *label94                                               ...
  145:  sensor *tmp158 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < 300 then break; end;
  146:  jump *label93 lessThan *tmp158 300                           ...
  147:  read *tmp84 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  148:  jump *label91 lessThan *tmp84 3                              CoreBuilder.mnd: do
        label *label93                                               ...
  149:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  150:  set :buildBlockFromCfg.1:cfg "A©NHJY-unloader15"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  151:  setaddr :buildBlockFromCfg.1*retaddr *label97                ...
  152:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label97                                               ...
  153:  set :buildBlockFromCfg.1:cfg "A{NJJZ-inverted-sorter16"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  154:  setaddr :buildBlockFromCfg.1*retaddr *label98                ...
  155:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label98                                               ...
  156:  set :buildBlockFromCfg.1:cfg "ANOMJ[-kiln17"                 CoreBuilder.mnd: buildBlockFromCfg(KILN);
  157:  setaddr :buildBlockFromCfg.1*retaddr *label99                ...
  158:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label99                                               ...
  159:  set :buildBlockFromCfg.1:cfg "A¡AOJ\-water-extractor18"      CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  160:  setaddr :buildBlockFromCfg.1*retaddr *label100               ...
  161:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label100                                              ...
  162:  set :buildBlockFromCfg.1:cfg "AAKJ^-steam-generator20"      CoreBuilder.mnd: buildBlockFromCfg(STEAM_GEN);
  163:  setaddr :buildBlockFromCfg.1*retaddr *label101               ...
  164:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label101                                              ...
  165:  set :buildBlockFromCfg.1:cfg "AKFRJa-multi-press23"          CoreBuilder.mnd: buildBlockFromCfg(MULTIPRESS);
  166:  setaddr :buildBlockFromCfg.1*retaddr *label102               ...
  167:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label102                                              ...
  168:  set :buildBlockFromCfg.1:cfg "ALQIJ_-silicon-smelter21"      CoreBuilder.mnd: buildBlockFromCfg(SMELTER2);
  169:  setaddr :buildBlockFromCfg.1*retaddr *label103               ...
  170:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label103                                              ...
  171:  set :buildBlockFromCfg.1:cfg "A©HFJb-unloader24"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER4);
  172:  setaddr :buildBlockFromCfg.1*retaddr *label104               ...
  173:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label104                                              ...
  174:  set :buildBlockFromCfg.1:cfg "A{HDJc-inverted-sorter25"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT4);
  175:  setaddr :buildBlockFromCfg.1*retaddr *label105               ...
  176:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label105                                              ...
  177:  set :buildBlockFromCfg.1:cfg "AÀF@Ld-additive-reconstructor2 CoreBuilder.mnd: buildBlockFromCfg(ADDITIVE_REC);
  178:  setaddr :buildBlockFromCfg.1*retaddr *label106               ...
  179:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label106                                              ...
  180:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  181:  set .siliconMonoSurplus 20                                   CoreBuilder.mnd: siliconMonoSurplus = 20;
  182:  set .metaglassSurplus 100                                    CoreBuilder.mnd: metaglassSurplus = 100;
  183:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  184:  write 2 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  185:  write 2 processor2 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  186:  write 3 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  187:  write 3 processor2 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  188:  setaddr :buildUnits*retaddr *label109                        CoreBuilder.mnd: buildUnits();
  189:  call *label42 *invalid :buildUnits*retval                    ...
        label *label109                                              ...
        label *label110                                              CoreBuilder.mnd: while controller.polys < 2 do
  190:  read *tmp85 .controller ".polys"                             ...
  191:  jump *label112 greaterThanEq *tmp85 2                        ...
  192:  setaddr :supplyBase*retaddr *label110                        CoreBuilder.mnd: supplyBase();
  193:  call *label35 *invalid :supplyBase*retval                    ...
        label *label112                                              CoreBuilder.mnd: while controller.polys < 2 do
  194:  write 2 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  195:  write 2 processor2 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
        label *label115                                              CoreBuilder.mnd: while controller.flares < 2 do
  196:  read *tmp83 .controller ".flares"                            ...
  197:  jump *label117 greaterThanEq *tmp83 2                        ...
  198:  setaddr :supplyBase*retaddr *label115                        CoreBuilder.mnd: supplyBase();
  199:  call *label35 *invalid :supplyBase*retval                    ...
        label *label117                                              CoreBuilder.mnd: while controller.flares < 2 do
  200:  write @ore-titanium processor2 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  201:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  202:  read :blocksBuildTitaniumDrills:current processor3 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  203:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  204:  write .coreY processor3 ":findDrillLocation:y"               ...
  205:  write @unit processor3 ":findDrillLocation:unit"             ...
  206:  write @titanium processor3 ":findDrillLocation:item"         ...
  207:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
  208:  write 4 processor3 ":findDrillLocation:size"                 ...
  209:  write 1000000000 processor3 ":findDrillLocation:limit"       ...
  210:  write false processor3 ":findDrillLocation*finished"         ...
  211:  write 1 processor3 "@counter"                                ...
  212:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  213:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  214:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  215:  write false processor5 ":buildTitaniumDrills*finished"       ...
  216:  write 3 processor5 "@counter"                                ...
        label *label120                                              ...
  217:  wait 1e-15                                                   ...
  218:  read *tmp186 processor5 ":buildTitaniumDrills*finished"      ...
  219:  jump *label120 equal *tmp186 false                           ...
  220:  write false processor3 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  221:  write 3 processor3 "@counter"                                ...
  222:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  223:  set .graphiteSurplus 10                                      CoreBuilder.mnd: graphiteSurplus = 10;
  224:  set .metaglassSurplus 50                                     CoreBuilder.mnd: metaglassSurplus = 50;
  225:  write .coreX processor3 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  226:  write .coreY processor3 ":layoutThoriumDrill:y"              ...
  227:  write @unit processor3 ":layoutThoriumDrill:unit"            ...
  228:  write 7 processor3 ":layoutThoriumDrill:limit"               ...
  229:  write false processor3 ":layoutThoriumDrill*finished"        ...
  230:  write 2 processor3 "@counter"                                ...
        label *label122                                              ...
  231:  wait 1e-15                                                   ...
  232:  read *tmp191 processor3 ":layoutThoriumDrill*finished"       ...
  233:  jump *label122 equal *tmp191 false                           ...
  234:  set :meetTarget.1:cfg "AJJJ~-laser-drill52"                 CoreBuilder.mnd: meetTarget(LASER_DRILL);
  235:  setaddr :meetTarget.1*retaddr *label123                      ...
  236:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label123                                              ...
        label *label124                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  237:  wait 1e-15                                                   ...
  238:  read *tmp193 processor3 ":layoutThoriumDrill*finished"       ...
  239:  jump *label124 equal *tmp193 false                           ...
  240:  read :buildThoriumDrill:result processor3 ":layoutThoriumDri ...
  241:  jump *label125 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  242:  set :error:error "Cannot locate spot for thorium drill"      ...
  243:  setaddr :error*retaddr *label127                             ...
  244:  call *label15 *invalid :error*retval                         ...
        label *label127                                              ...
        label *label125                                              ...
  245:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);
  246:  read *tmp55 processor3 ".drillX"                             ...
  247:  write *tmp55 processor5 ":buildBlockAt:x"                    ...
  248:  read *tmp56 processor3 ".drillY"                             ...
  249:  write *tmp56 processor5 ":buildBlockAt:y"                    ...
  250:  write null processor5 ":buildBlockAt:rotation"               ...
  251:  write 0 processor5 ":buildBlockAt:config"                    ...
  252:  write -1 processor5 ":buildBlockAt:index"                    ...
  253:  write false processor5 ":buildBlockAt*finished"              ...
  254:  write 1 processor5 "@counter"                                ...
        label *label128                                              ...
  255:  wait 1e-15                                                   ...
  256:  read *tmp203 processor5 ":buildBlockAt*finished"             ...
  257:  jump *label128 equal *tmp203 false                           ...
  258:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  259:  set :buildRemoteBlock:cfg "A¡AOJ\-water-extractor18"         CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  260:  read :buildRemoteBlock:x processor3 ".water1X"               ...
  261:  read :buildRemoteBlock:y processor3 ".water1Y"               ...
  262:  setaddr :buildRemoteBlock*retaddr *label129                  ...
  263:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label129                                              ...
  264:  read :buildRemoteBlock:x processor3 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  265:  read :buildRemoteBlock:y processor3 ".water2Y"               ...
  266:  setaddr :buildRemoteBlock*retaddr *label130                  ...
  267:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label130                                              ...
  268:  set :buildRemoteBlock:cfg "AAKJ^-steam-generator20"         CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  269:  read :buildRemoteBlock:x processor3 ".generatorX"            ...
  270:  read :buildRemoteBlock:y processor3 ".generatorY"            ...
  271:  setaddr :buildRemoteBlock*retaddr *label131                  ...
  272:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label131                                              ...
  273:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  274:  set :buildRemoteBlock:cfg "AFFJT-power-node10"              CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
  275:  read :buildRemoteBlock:x processor3 ".node1X"                ...
  276:  read :buildRemoteBlock:y processor3 ".node1Y"                ...
  277:  setaddr :buildRemoteBlock*retaddr *label132                  ...
  278:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label132                                              ...
  279:  read :buildRemoteBlock:x processor3 ".node2X"                CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
  280:  read :buildRemoteBlock:y processor3 ".node2Y"                ...
  281:  setaddr :buildRemoteBlock*retaddr *label133                  ...
  282:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label133                                              ...
  283:  set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"             CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  284:  read :buildRemoteBlock:x processor3 ".panelX"                ...
  285:  read :buildRemoteBlock:y processor3 ".panelY"                ...
  286:  setaddr :buildRemoteBlock*retaddr *label134                  ...
  287:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label134                                              ...
  288:  set :buildRemoteBlock:cfg "AJTJK-battery1"                  CoreBuilder.mnd: thoriumBattery = buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  289:  read :buildRemoteBlock:x processor3 ".batteryX"              ...
  290:  read :buildRemoteBlock:y processor3 ".batteryY"              ...
  291:  setaddr :buildRemoteBlock*retaddr *label135                  ...
  292:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label135                                              ...
  293:  set .thoriumBattery :buildRemoteBlock*retval                 ...
  294:  set :buildRemoteBlock:cfg "A¨JJJ~-container52"               CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  295:  read :buildRemoteBlock:x processor3 ".containerX"            ...
  296:  read :buildRemoteBlock:y processor3 ".containerY"            ...
  297:  setaddr :buildRemoteBlock*retaddr *label136                  ...
  298:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label136                                              ...
  299:  select .thoriumContainer equal :buildRemoteBlock*retval null CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  300:  write .thoriumDrill processor2 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  301:  write .thoriumContainer processor2 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  302:  write .thoriumContainer processor6 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  303:  write false processor6 ":setThoriumContainer*finished"       ...
  304:  write 3 processor6 "@counter"                                ...
        label *label139                                              ...
  305:  wait 1e-15                                                   ...
  306:  read *tmp216 processor6 ":setThoriumContainer*finished"      ...
  307:  jump *label139 equal *tmp216 false                           ...
  308:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
        label *label140                                              CoreBuilder.mnd: while controller.polys < 3 do
  309:  read *tmp85 .controller ".polys"                             ...
  310:  jump *label142 greaterThanEq *tmp85 3                        ...
  311:  setaddr :supplyBase*retaddr *label140                        CoreBuilder.mnd: supplyBase();
  312:  call *label35 *invalid :supplyBase*retval                    ...
        label *label142                                              CoreBuilder.mnd: while controller.polys < 3 do
  313:  write 3200 .controller ".powerTarget"                        CoreBuilder.mnd: controller.powerTarget = 3200;
  314:  set .siliconMonoSurplus 130                                  CoreBuilder.mnd: siliconMonoSurplus = 130;
  315:  set :buildBlockFromCfg.1:cfg "AÁNBJe-multiplicative-reconstr CoreBuilder.mnd: buildBlockFromCfg(MULTIPLICATIVE_REC);
  316:  setaddr :buildBlockFromCfg.1*retaddr *label144               ...
  317:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label144                                              ...
  318:  set .metaglassSurplus 10                                     CoreBuilder.mnd: metaglassSurplus = 10;
  319:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  320:  write 1 processor2 ".megaTarget"                             CoreBuilder.mnd: display.megaTarget = target;
  321:  setaddr :buildUnits*retaddr *label146                        CoreBuilder.mnd: buildUnits();
  322:  call *label42 *invalid :buildUnits*retval                    ...
        label *label146                                              ...
  323:  read *tmp85 .controller ".polys"                             CoreBuilder.mnd: var tmp = controller.polys - 1;
  324:  op sub :tmp *tmp85 1                                         ...
  325:  write :tmp .controller ".polyTarget"                         CoreBuilder.mnd: controller.polyTarget = tmp;
  326:  write :tmp .controller ".polys"                              CoreBuilder.mnd: controller.polys = tmp;
  327:  write :tmp processor2 ".polys"                               CoreBuilder.mnd: display.polys = tmp;
  328:  sensor :x AÁNBJe-multiplicative-reconstructor27 @x           CoreBuilder.mnd: var x = multiplicative_rec.@x;
  329:  sensor :y AÁNBJe-multiplicative-reconstructor27 @y           CoreBuilder.mnd: var y = multiplicative_rec.@y;
        label *label147                                              CoreBuilder.mnd: do
  330:  ucontrol move :x :y 0 0 0                                    CoreBuilder.mnd: move(x, y);
  331:  ucontrol payEnter 0 0 0 0 0                                  CoreBuilder.mnd: payEnter();
  332:  read *tmp86 .controller ".megas"                             CoreBuilder.mnd: while !controller.megas;
  333:  jump *label147 equal *tmp86 false                            CoreBuilder.mnd: do
  334:  write true .controller ".finished"                           CoreBuilder.mnd: controller.finished = true;
  335:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  336:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  337:  control enabled processor6 false 0 0 0                       CoreBuilder.mnd: polyController.enabled = false;
  338:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: oreLocator.enabled = false;
  339:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: blockBuilder.enabled = false;
  340:  control enabled processor11 false 0 0 0                      CoreBuilder.mnd: measurements.enabled = false;
  341:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  342:  setaddr :flagUnits*retaddr *label151                         ...
  343:  call *label43 *invalid :flagUnits*retval                     ...
        label *label151                                              ...
  344:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  345:  setaddr :flagUnits*retaddr *label152                         ...
  346:  call *label43 *invalid :flagUnits*retval                     ...
        label *label152                                              ...
  347:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  348:  setaddr :flagUnits*retaddr *label153                         ...
  349:  call *label43 *invalid :flagUnits*retval                     ...
        label *label153                                              ...
  350:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  351:  setaddr :flagUnits*retaddr *label154                         ...
  352:  call *label43 *invalid :flagUnits*retval                     ...
        label *label154                                              ...
        label *label155                                              CoreBuilder.mnd: while true do
  353:  op sub :lineUpUnits:y @thisy 6                               CoreBuilder.mnd: lineUpUnits(@thisy -  6, @mega);
  354:  set :lineUpUnits:unit @mega                                  ...
  355:  setaddr :lineUpUnits*retaddr *label158                       ...
  356:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label158                                              ...
  357:  op sub :lineUpUnits:y @thisy 10                              CoreBuilder.mnd: lineUpUnits(@thisy - 10, @poly);
  358:  set :lineUpUnits:unit @poly                                  ...
  359:  setaddr :lineUpUnits*retaddr *label159                       ...
  360:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label159                                              ...
  361:  op sub :lineUpUnits:y @thisy 14                              CoreBuilder.mnd: lineUpUnits(@thisy - 14, @mono);
  362:  set :lineUpUnits:unit @mono                                  ...
  363:  setaddr :lineUpUnits*retaddr *label160                       ...
  364:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label160                                              ...
  365:  op sub :lineUpUnits:y @thisy 18                              CoreBuilder.mnd: lineUpUnits(@thisy - 18, @flare);
  366:  set :lineUpUnits:unit @flare                                 ...
  367:  setaddr :lineUpUnits*retaddr *label155                       ...
  368:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label15                                               Actions.mnd: void error(error)
  369:  set .ERROR :error:error                                      Actions.mnd: ERROR = error;
  370:  stop                                                         Actions.mnd: stopProcessor();
  371:  return :error*retaddr                                        Actions.mnd: void error(error)
        label *label35                                               CoreBuilder.mnd: void supplyBase()
  372:  op add *tmp233 .siliconMonoSurplus silicon                   CoreBuilder.mnd: monoController.sandTarget = max(0, siliconMonoSurplus + targetSilicon - core.@silicon);
  373:  sensor *tmp234 .core @silicon                                ...
  374:  op sub *tmp235 *tmp233 *tmp234                               ...
  375:  op max *tmp236 0 *tmp235                                     ...
  376:  write *tmp236 processor7 ".sandTarget"                       ...
  377:  jump *label164 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  378:  write "Phase 2: servicing thorium drill" processor2 ".status Actions.mnd: display.status1 = text;
  379:  sensor *tmp238 .thoriumBattery @totalPower                   CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  380:  jump *label168 greaterThanEq *tmp238 2000                    ...
  381:  sensor *tmp241 .thoriumGenerator @coal                       CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
  382:  jump *label170 notEqual *tmp241 0                            ...
  383:  sensor *tmp244 .core @coal                                   CoreBuilder.mnd: if core.@coal < 50 then
  384:  jump *label172 greaterThanEq *tmp244 50                      ...
  385:  set :supplyBlock:block .thoriumGenerator                     CoreBuilder.mnd: supplyBlock(thoriumGenerator, @coal);
  386:  set :supplyBlock:ore @coal                                   ...
  387:  setaddr :supplyBlock*retaddr *label173                       ...
  388:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label172                                              CoreBuilder.mnd: if core.@coal < 50 then
  389:  sensor *tmp342 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  390:  op min :transportStatus:target *tmp342 30                    ...
  391:  set :transportStatus:item @coal                              ...
  392:  setaddr :transportStatus*retaddr *label530                   ...
  393:  call *label14 *invalid :transportStatus*retval               ...
        label *label530                                              ...
  394:  set :status2:text "Transferring "                            Actions.mnd: status2("Transferring ", item, target);
  395:  set :status2:item @coal                                      ...
  396:  set :status2:block .thoriumGenerator                         ...
  397:  setaddr :status2*retaddr *label531                           ...
  398:  call *label12 *invalid :status2*retval                       ...
        label *label531                                              ...
  399:  set :moveToEmpty:x .coreX                                    Actions.mnd: moveToEmpty(coreX, coreY);
  400:  set :moveToEmpty:y .coreY                                    ...
  401:  setaddr :moveToEmpty*retaddr *label532                       ...
  402:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label532                                              ...
  403:  setaddr :dropAll*retaddr *label533                           Actions.mnd: dropAll();
  404:  call *label19 *invalid :dropAll*retval                       ...
        label *label533                                              ...
        label *label534                                              Actions.mnd: do
  405:  ucontrol itemTake .core @coal 30 0 0                         Actions.mnd: itemTake(core, item, capacity);
  406:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  407:  op notEqual *tmp345 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  408:  op notEqual *tmp346 :supplyBlockFromCore:unitItem @coal      ...
  409:  op land *tmp347 *tmp345 *tmp346                              ...
  410:  jump *label535 equal *tmp347 false                           ...
  411:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label535                                              Actions.mnd: if unitItem != null and unitItem != item then
  412:  sensor *tmp349 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  413:  op lessThan *tmp350 *tmp349 30                               ...
  414:  sensor *tmp351 .core @coal                                   ...
  415:  op land *tmp352 *tmp350 *tmp351                              ...
  416:  jump *label534 notEqual *tmp352 false                        Actions.mnd: do
  417:  set :depositItems:block .thoriumGenerator                    Actions.mnd: depositItems(target, item);
  418:  set :depositItems:item @coal                                 ...
  419:  setaddr :depositItems*retaddr *label539                      ...
  420:  call *label21 *invalid :depositItems*retval                  ...
        label *label539                                              ...
        label *label173                                              CoreBuilder.mnd: if core.@coal < 50 then
        label *label170                                              CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
        label *label168                                              CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  421:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  422:  set :fetchBlock:item @thorium                                ...
  423:  setaddr :fetchBlock*retaddr *label176                        ...
  424:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label176                                              ...
  425:  sensor *tmp247 .core @thorium                                CoreBuilder.mnd: if core.@thorium > 400 then
  426:  jump *label165 lessThanEq *tmp247 400                        ...
  427:  write 4 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  428:  write 4 processor2 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  429:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label164                                              ...
  430:  read *tmp84 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 1 then
  431:  jump *label180 lessThanEq *tmp84 1                           ...
  432:  write "Phase 1: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  433:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  434:  setaddr :mineOre.1*retaddr *label184                         ...
  435:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label184                                              ...
  436:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 1 then
        label *label180                                              ...
  437:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  438:  jump *label186 notEqual A©JNJP-unloader6 null                CoreBuilder.mnd: if unloader1 == null then
  439:  sensor *tmp254 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  440:  jump *label188 greaterThanEq *tmp254 graphite                ...
  441:  sensor *tmp257 AJEMJJ-graphite-press0 @coal                  CoreBuilder.mnd: if press.@coal < 5 then
  442:  jump *label190 greaterThanEq *tmp257 5                       ...
  443:  write "Goal 1: graphite requirement" processor2 ".status1"   Actions.mnd: display.status1 = text;
  444:  set :supplyBlock:block AJEMJJ-graphite-press0                CoreBuilder.mnd: supplyBlock(press, @coal);
  445:  set :supplyBlock:ore @coal                                   ...
  446:  setaddr :supplyBlock*retaddr *label193                       ...
  447:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label193                                              ...
  448:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label190                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label188                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  449:  sensor *tmp260 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  450:  jump *label194 greaterThanEq *tmp260 silicon                 ...
  451:  sensor *tmp263 ALMQJN-silicon-smelter4 @coal                 CoreBuilder.mnd: if smelter.@coal < 5 then
  452:  jump *label196 greaterThanEq *tmp263 5                       ...
  453:  write "Goal 2: coal for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  454:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @coal);
  455:  set :supplyBlock:ore @coal                                   ...
  456:  setaddr :supplyBlock*retaddr *label199                       ...
  457:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label199                                              ...
  458:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  459:  jump *label197 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label196                                              ...
  460:  sensor *tmp266 ALMQJN-silicon-smelter4 @sand                 CoreBuilder.mnd: elsif smelter.@sand < 5 then
  461:  jump *label200 greaterThanEq *tmp266 5                       ...
  462:  write "Goal 3: sand for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  463:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @sand);
  464:  set :supplyBlock:ore @sand                                   ...
  465:  setaddr :supplyBlock*retaddr *label203                       ...
  466:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label203                                              ...
  467:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label200                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label197                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label194                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  468:  sensor *tmp269 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
  469:  jump *label204 greaterThanEq *tmp269 .powerTarget            ...
  470:  sensor *tmp272 AJRJM-combustion-generator3 @coal            CoreBuilder.mnd: if generator.@coal < 2 then
  471:  jump *label206 greaterThanEq *tmp272 2                       ...
  472:  write "Goal 4: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  473:  set :supplyBlock:block AJRJM-combustion-generator3          CoreBuilder.mnd: supplyBlock(generator, @coal);
  474:  set :supplyBlock:ore @coal                                   ...
  475:  setaddr :supplyBlock*retaddr *label209                       ...
  476:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label209                                              ...
  477:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label206                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label204                                              CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
        label *label186                                              CoreBuilder.mnd: if unloader1 == null then
  478:  set *tmp277 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  479:  sensor *tmp275 .core @titanium                               ...
  480:  jump *label211 greaterThanEq *tmp275 titanium                ...
  481:  sensor *tmp278 .core @titanium                               ...
  482:  op sub *tmp279 titanium *tmp278                              ...
  483:  op min *tmp277 7 *tmp279                                     ...
        label *label211                                              ...
  484:  sensor *tmp281 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  485:  jump *label212 greaterThanEq *tmp281 *tmp277                 ...
  486:  jump *label213 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  487:  sensor *tmp286 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
  488:  op mul *tmp287 A©JNJP-unloader6 .powerTarget                 ...
  489:  jump *label216 greaterThanEq *tmp286 *tmp287                 ...
  490:  write "Goal 5: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  491:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  492:  setaddr :mineOre.1*retaddr *label219                         ...
  493:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label219                                              ...
  494:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
        label *label216                                              ...
  495:  sensor *tmp290 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  496:  jump *label220 greaterThanEq *tmp290 silicon                 ...
  497:  write "Goal 6: silicon requirement" processor2 ".status1"    Actions.mnd: display.status1 = text;
  498:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  499:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  500:  select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  501:  setaddr :mineOre.1*retaddr *label225                         CoreBuilder.mnd: mineOre(ore);
  502:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label225                                              ...
  503:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label220                                              ...
  504:  sensor *tmp297 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  505:  jump *label226 greaterThanEq *tmp297 copper                  ...
  506:  write "Goal 7: copper requirement" processor2 ".status1"     Actions.mnd: display.status1 = text;
  507:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  508:  setaddr :mineOre.1*retaddr *label229                         ...
  509:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label229                                              ...
  510:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label226                                              ...
  511:  sensor *tmp300 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  512:  jump *label230 greaterThanEq *tmp300 lead                    ...
  513:  write "Goal 8: lead requirement" processor2 ".status1"       Actions.mnd: display.status1 = text;
  514:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  515:  setaddr :mineOre.1*retaddr *label233                         ...
  516:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label233                                              ...
  517:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label230                                              ...
  518:  sensor *tmp303 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  519:  jump *label234 greaterThanEq *tmp303 metaglass               ...
  520:  write "Goal 9: metaglass requirement" processor2 ".status1"  Actions.mnd: display.status1 = text;
  521:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  522:  setaddr :mineOre.1*retaddr *label237                         ...
  523:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label237                                              ...
  524:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label234                                              ...
  525:  write "Goal 10: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  526:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  527:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  528:  select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supply CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  529:  setaddr :mineOre.1*retaddr *label241                         CoreBuilder.mnd: mineOre(ore);
  530:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label241                                              ...
  531:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label212                                              ...
  532:  write "Goal 11: Fetching titanium" processor2 ".status1"     Actions.mnd: display.status1 = text;
  533:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  534:  set :fetchBlock:item @titanium                               ...
  535:  setaddr :fetchBlock*retaddr *label243                        ...
  536:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label243                                              ...
        label *label213                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label165                                              CoreBuilder.mnd: if thoriumContainer then
  537:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label38                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  538:  op add *tmp310 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  539:  jump *label245 lessThanEq *tmp310 0                          ...
  540:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  541:  setaddr :unpackCfg*retaddr *label247                         ...
  542:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label247                                              ...
  543:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
  544:  set :buildBlock:x :buildRemoteBlock:x                        ...
  545:  set :buildBlock:y :buildRemoteBlock:y                        ...
  546:  set :buildBlock:copper :unpackCfg:cu                         ...
  547:  set :buildBlock:lead :unpackCfg:pb                           ...
  548:  set :buildBlock:graphite :unpackCfg:gr                       ...
  549:  set :buildBlock:silicon :unpackCfg:si                        ...
  550:  set :buildBlock:titanium :unpackCfg:ti                       ...
  551:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  552:  set :buildBlock:thorium :unpackCfg:th                        ...
  553:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  554:  set :buildBlock:config null                                  ...
  555:  set :buildBlock:index :unpackCfg:ind                         ...
  556:  setaddr :buildBlock*retaddr *label248                        ...
  557:  call *label37 *invalid :buildBlock*retval                    ...
        label *label248                                              ...
  558:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  559:  return :buildRemoteBlock*retaddr                             ...
        label *label245                                              CoreBuilder.mnd: if x + y > 0 then
  560:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  561:  return :buildRemoteBlock*retaddr                             ...
        label *label39                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  562:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  563:  setaddr :unpackCfg*retaddr *label250                         ...
  564:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label250                                              ...
  565:  op add *tmp313 .coreX :unpackCfg:x                           CoreBuilder.mnd: var building = buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
  566:  op add *tmp314 .coreY :unpackCfg:y                           ...
  567:  set :buildBlock:block :unpackCfg:type                        ...
  568:  set :buildBlock:x *tmp313                                    ...
  569:  set :buildBlock:y *tmp314                                    ...
  570:  set :buildBlock:copper :unpackCfg:cu                         ...
  571:  set :buildBlock:lead :unpackCfg:pb                           ...
  572:  set :buildBlock:graphite :unpackCfg:gr                       ...
  573:  set :buildBlock:silicon :unpackCfg:si                        ...
  574:  set :buildBlock:titanium :unpackCfg:ti                       ...
  575:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  576:  set :buildBlock:thorium :unpackCfg:th                        ...
  577:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  578:  set :buildBlock:config :buildBlockFromCfg:config             ...
  579:  set :buildBlock:index :unpackCfg:ind                         ...
  580:  setaddr :buildBlock*retaddr *label251                        ...
  581:  call *label37 *invalid :buildBlock*retval                    ...
        label *label251                                              ...
  582:  write :buildBlock*retval @this :buildBlockFromCfg:cfg        CoreBuilder.mnd: @this.write(building, cfg);
  583:  write :buildBlock*retval processor2 :buildBlockFromCfg:cfg   CoreBuilder.mnd: display.write(building, cfg);
  584:  write :buildBlock*retval .controller :buildBlockFromCfg:cfg  CoreBuilder.mnd: controller.write(building, cfg);
  585:  set :buildBlockFromCfg*retval :buildBlock*retval             CoreBuilder.mnd: return building;
  586:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label40                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  587:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  588:  set :buildBlockFromCfg:config null                           ...
  589:  setaddr :buildBlockFromCfg*retaddr *label253                 ...
  590:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label253                                              ...
  591:  return :buildBlockFromCfg.1*retaddr                          CoreBuilder.mnd: def buildBlockFromCfg(cfg)
        label *label41                                               CoreBuilder.mnd: void meetTarget(cfg)
  592:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  593:  setaddr :unpackCfg*retaddr *label255                         ...
  594:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label255                                              ...
  595:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th, false, false);
  596:  set :meetTarget:copper :unpackCfg:cu                         ...
  597:  set :meetTarget:lead :unpackCfg:pb                           ...
  598:  set :meetTarget:graphite :unpackCfg:gr                       ...
  599:  set :meetTarget:silicon :unpackCfg:si                        ...
  600:  set :meetTarget:titanium :unpackCfg:ti                       ...
  601:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  602:  set :meetTarget:thorium :unpackCfg:th                        ...
  603:  set :meetTarget:forBuild false                               ...
  604:  set :meetTarget:isNoTarget false                             ...
  605:  setaddr :meetTarget*retaddr *label256                        ...
  606:  call *label36 *invalid :meetTarget*retval                    ...
        label *label256                                              ...
  607:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label42                                               CoreBuilder.mnd: void buildUnits()
  608:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
  609:  set :meetTarget:copper 0                                     ...
  610:  set :meetTarget:lead 0                                       ...
  611:  set :meetTarget:graphite 0                                   ...
  612:  set :meetTarget:silicon 0                                    ...
  613:  set :meetTarget:titanium 0                                   ...
  614:  set :meetTarget:metaglass 0                                  ...
  615:  set :meetTarget:thorium 0                                    ...
  616:  set :meetTarget:forBuild false                               ...
  617:  set :meetTarget:isNoTarget true                              ...
  618:  setaddr :meetTarget*retaddr *label258                        ...
  619:  call *label36 *invalid :meetTarget*retval                    ...
        label *label258                                              ...
  620:  write 0 processor2 ".totalTargets"                           CoreBuilder.mnd: display.totalTargets = 0;
  621:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  622:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  623:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  624:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  625:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label43                                               CoreBuilder.mnd: void flagUnits(unit)
        label *label260                                              CoreBuilder.mnd: do
  626:  ubind :flagUnits:unit                                        CoreBuilder.mnd: firstUnit = ubind(unit);
  627:  set :flagUnits:firstUnit @unit                               ...
  628:  jump *label260 equal :flagUnits:firstUnit null               CoreBuilder.mnd: do
  629:  set :flagUnits:x @thisx                                      CoreBuilder.mnd: var x = @thisx;
        label *label263                                              CoreBuilder.mnd: do
  630:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  631:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  632:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  633:  jump *label263 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  634:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label44                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  635:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  636:  set :lineUpUnits:firstUnit @unit                             ...
        label *label267                                              CoreBuilder.mnd: do
  637:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  638:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  639:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  640:  sensor *tmp320 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  641:  jump *label270 equal *tmp320 false                           ...
  642:  ucontrol stop 0 0 0 0 0                                      ...
        label *label270                                              ...
  643:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  644:  jump *label267 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  645:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)
        label *label24                                               Actions.mnd: void mineOre(ore)
  646:  set :status2:text "Mining "                                  Actions.mnd: status2("Mining ", ore, "core");
  647:  set :status2:item :mineOre.1:ore                             ...
  648:  set :status2:block "core"                                    ...
  649:  setaddr :status2*retaddr *label274                           ...
  650:  call *label12 *invalid :status2*retval                       ...
        label *label274                                              ...
  651:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  652:  set :mineOre:amount 30                                       ...
  653:  set :mineOre:block .core                                     ...
  654:  setaddr :mineOre*retaddr *label275                           ...
  655:  call *label23 *invalid :mineOre*retval                       ...
        label *label275                                              ...
  656:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label25                                               Actions.mnd: void fetchBlock(block, item)
  657:  sensor *tmp324 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  658:  op min :transportStatus:target *tmp324 30                    ...
  659:  set :transportStatus:item :fetchBlock:item                   ...
  660:  setaddr :transportStatus*retaddr *label277                   ...
  661:  call *label14 *invalid :transportStatus*retval               ...
        label *label277                                              ...
  662:  set :status2:text "Fetching "                                Actions.mnd: status2("Fetching ", item, block);
  663:  set :status2:item :fetchBlock:item                           ...
  664:  set :status2:block :fetchBlock:block                         ...
  665:  setaddr :status2*retaddr *label278                           ...
  666:  call *label12 *invalid :status2*retval                       ...
        label *label278                                              ...
  667:  sensor *tmp326 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  668:  sensor *tmp327 :fetchBlock:block @y                          ...
  669:  set :moveToEmpty:x *tmp326                                   ...
  670:  set :moveToEmpty:y *tmp327                                   ...
  671:  setaddr :moveToEmpty*retaddr *label279                       ...
  672:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label279                                              ...
  673:  setaddr :dropAll*retaddr *label280                           Actions.mnd: dropAll();
  674:  call *label19 *invalid :dropAll*retval                       ...
        label *label280                                              ...
        label *label281                                              Actions.mnd: do
  675:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  676:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  677:  op notEqual *tmp329 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  678:  op notEqual *tmp330 :fetchBlock:unitItem :fetchBlock:item    ...
  679:  op land *tmp331 *tmp329 *tmp330                              ...
  680:  jump *label284 equal *tmp331 false                           ...
  681:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label284                                              Actions.mnd: if unitItem != null and unitItem != item then
  682:  sensor *tmp333 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  683:  op lessThan *tmp334 *tmp333 30                               ...
  684:  sensor *tmp335 :fetchBlock:block :fetchBlock:item            ...
  685:  op land *tmp336 *tmp334 *tmp335                              ...
  686:  jump *label281 notEqual *tmp336 false                        Actions.mnd: do
  687:  set :depositItems:block .core                                Actions.mnd: depositItems(core, item);
  688:  set :depositItems:item :fetchBlock:item                      ...
  689:  setaddr :depositItems*retaddr *label286                      ...
  690:  call *label21 *invalid :depositItems*retval                  ...
        label *label286                                              ...
  691:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label26                                               Actions.mnd: void supplyBlock(block, ore)
  692:  set :status2:text "Supplying "                               Actions.mnd: status2("Supplying ", ore, block);
  693:  set :status2:item :supplyBlock:ore                           ...
  694:  set :status2:block :supplyBlock:block                        ...
  695:  setaddr :status2*retaddr *label288                           ...
  696:  call *label12 *invalid :status2*retval                       ...
        label *label288                                              ...
  697:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  698:  sensor *tmp338 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  699:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp3 ...
  700:  jump *label289 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  701:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  702:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  703:  set :mineOre:block :supplyBlock:block                        ...
  704:  setaddr :mineOre*retaddr *label291                           ...
  705:  call *label23 *invalid :mineOre*retval                       ...
        label *label291                                              ...
        label *label289                                              Actions.mnd: if missing > 0 then
  706:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label29                                               Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
  707:  read *tmp354 :unpackCfg:cfg 1                                Common.mnd: type = lookup(:block, char(cfg, index++) - _Common_offset);
  708:  op sub *tmp355 *tmp354 74                                    ...
  709:  lookup block :unpackCfg:type *tmp355                         ...
  710:  read *tmp358 :unpackCfg:cfg 2                                Common.mnd: x = (char(cfg, index++) - _Common_offset) / 2;
  711:  op sub *tmp359 *tmp358 74                                    ...
  712:  op div :unpackCfg:x *tmp359 2                                ...
  713:  read *tmp362 :unpackCfg:cfg 3                                Common.mnd: y = (char(cfg, index++) - _Common_offset) / 2;
  714:  op sub *tmp363 *tmp362 74                                    ...
  715:  op div :unpackCfg:y *tmp363 2                                ...
  716:  read *tmp366 :unpackCfg:cfg 4                                Common.mnd: rotation = char(cfg, index++) - _Common_offset;
  717:  op sub :unpackCfg:rotation *tmp366 74                        ...
  718:  read *tmp369 :unpackCfg:cfg 5                                Common.mnd: ind = char(cfg, index++) - _Common_offset;
  719:  op sub :unpackCfg:ind *tmp369 74                             ...
  720:  sensor :unpackCfg:cu :unpackCfg:type @copper                 Common.mnd: cu = type.@copper;
  721:  sensor :unpackCfg:pb :unpackCfg:type @lead                   Common.mnd: pb = type.@lead;
  722:  sensor :unpackCfg:gr :unpackCfg:type @graphite               Common.mnd: gr = type.@graphite;
  723:  sensor :unpackCfg:si :unpackCfg:type @silicon                Common.mnd: si = type.@silicon;
  724:  sensor :unpackCfg:ti :unpackCfg:type @titanium               Common.mnd: ti = type.@titanium;
  725:  sensor :unpackCfg:mg :unpackCfg:type @metaglass              Common.mnd: mg = type.@metaglass;
  726:  sensor :unpackCfg:th :unpackCfg:type @thorium                Common.mnd: th = type.@thorium;
  727:  return :unpackCfg*retaddr                                    Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
        label *label36                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
  728:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  729:  op sign *tmp380 :meetTarget:lead 0                           ...
  730:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  731:  op sign *tmp380 :meetTarget:graphite 0                       ...
  732:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  733:  op sign *tmp380 :meetTarget:silicon 0                        ...
  734:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  735:  op sign *tmp380 :meetTarget:titanium 0                       ...
  736:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  737:  op sign *tmp380 :meetTarget:metaglass 0                      ...
  738:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  739:  op sign *tmp380 :meetTarget:thorium 0                        ...
  740:  op add :meetTarget:count :meetTarget:count *tmp380           ...
  741:  write :meetTarget:count processor2 ".totalTargets"           CoreBuilder.mnd: display.totalTargets = count;
  742:  write :meetTarget:block processor2 ".nextBlock"              CoreBuilder.mnd: display.nextBlock = block;
  743:  write :meetTarget:copper processor2 ".targetCopper"          CoreBuilder.mnd: display.targetCopper = copper;
  744:  write :meetTarget:lead processor2 ".targetLead"              CoreBuilder.mnd: display.targetLead = lead;
  745:  write :meetTarget:graphite processor2 ".targetGraphite"      CoreBuilder.mnd: display.targetGraphite = graphite;
  746:  write :meetTarget:silicon processor2 ".targetSilicon"        CoreBuilder.mnd: display.targetSilicon = silicon;
  747:  write :meetTarget:titanium processor2 ".targetTitanium"      CoreBuilder.mnd: display.targetTitanium = titanium;
  748:  write :meetTarget:metaglass processor2 ".targetMetaglass"    CoreBuilder.mnd: display.targetMetaglass = metaglass;
  749:  write :meetTarget:thorium processor2 ".targetThorium"        CoreBuilder.mnd: display.targetThorium = thorium;
  750:  set copper :meetTarget:copper                                CoreBuilder.mnd: targetCopper = copper;
  751:  op add lead :meetTarget:lead .leadSurplus                    CoreBuilder.mnd: targetLead = lead + leadSurplus;
  752:  set graphite :meetTarget:graphite                            CoreBuilder.mnd: targetGraphite = graphite;
  753:  set silicon :meetTarget:silicon                              CoreBuilder.mnd: targetSilicon = silicon;
  754:  set titanium :meetTarget:titanium                            CoreBuilder.mnd: targetTitanium = titanium;
  755:  set metaglass :meetTarget:metaglass                          CoreBuilder.mnd: targetMetaglass = metaglass;
  756:  set thorium :meetTarget:thorium                              CoreBuilder.mnd: targetThorium = thorium;
  757:  set .noTarget :meetTarget:isNoTarget                         CoreBuilder.mnd: noTarget = isNoTarget;
  758:  op add *tmp382 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  759:  write *tmp382 .controller ".pressTarget"                     ...
  760:  op add *tmp383 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  761:  write *tmp383 .controller ".smelterTarget"                   ...
  762:  op add *tmp384 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  763:  write *tmp384 .controller ".kilnTarget"                      ...
  764:  write lead .controller ".leadReserve"                        CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  765:  op sign *tmp386 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  766:  op mul *tmp387 *tmp386 20                                    ...
  767:  op add *tmp388 :meetTarget:silicon *tmp387                   ...
  768:  write *tmp388 .controller ".siliconReserve"                  ...
  769:  op sign *tmp389 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  770:  op mul *tmp390 *tmp389 20                                    ...
  771:  op add *tmp391 :meetTarget:graphite *tmp390                  ...
  772:  write *tmp391 .controller ".graphiteReserve"                 ...
  773:  write lead processor7 ".leadTarget"                          CoreBuilder.mnd: monoController.leadTarget = targetLead;
  774:  write :meetTarget:copper processor7 ".copperTarget"          CoreBuilder.mnd: monoController.copperTarget = targetCopper;
        label *label315                                              CoreBuilder.mnd: while !targetMet() do
  775:  sensor *tmp393 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  776:  jump *label319 greaterThanEq *tmp393 copper                  ...
  777:  set *tmp392 false                                            ...
  778:  jump *label318 always 0 0                                    ...
        label *label319                                              ...
  779:  sensor *tmp396 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  780:  jump *label321 greaterThanEq *tmp396 lead                    ...
  781:  set *tmp392 false                                            ...
  782:  jump *label318 always 0 0                                    ...
        label *label321                                              ...
  783:  sensor *tmp399 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  784:  jump *label323 greaterThanEq *tmp399 graphite                ...
  785:  set *tmp392 false                                            ...
  786:  jump *label318 always 0 0                                    ...
        label *label323                                              ...
  787:  sensor *tmp402 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  788:  jump *label325 greaterThanEq *tmp402 silicon                 ...
  789:  set *tmp392 false                                            ...
  790:  jump *label318 always 0 0                                    ...
        label *label325                                              ...
  791:  sensor *tmp405 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  792:  jump *label327 greaterThanEq *tmp405 titanium                ...
  793:  set *tmp392 false                                            ...
  794:  jump *label318 always 0 0                                    ...
        label *label327                                              ...
  795:  sensor *tmp408 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  796:  jump *label329 greaterThanEq *tmp408 metaglass               ...
  797:  set *tmp392 false                                            ...
  798:  jump *label318 always 0 0                                    ...
        label *label329                                              ...
  799:  sensor *tmp411 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  800:  jump *label331 greaterThanEq *tmp411 thorium                 ...
  801:  set *tmp392 false                                            ...
  802:  jump *label318 always 0 0                                    ...
        label *label331                                              ...
  803:  set *tmp392 true                                             CoreBuilder.mnd: return true;
  804:  jump *label318 always 0 0                                    ...
        label *label318                                              CoreBuilder.mnd: while !targetMet() do
  805:  jump *label317 notEqual *tmp392 false                        ...
  806:  setaddr :supplyBase*retaddr *label315                        CoreBuilder.mnd: supplyBase();
  807:  call *label35 *invalid :supplyBase*retval                    ...
        label *label317                                              CoreBuilder.mnd: while !targetMet() do
  808:  jump *label334 equal :meetTarget:forBuild false              CoreBuilder.mnd: if forBuild then
  809:  write false .controller ":buildStart*finished"               CoreBuilder.mnd: controller.buildStart();
  810:  write 1 .controller "@counter"                               ...
        label *label336                                              ...
  811:  wait 1e-15                                                   ...
  812:  read *tmp416 .controller ":buildStart*finished"              ...
  813:  jump *label336 equal *tmp416 false                           ...
        label *label337                                              CoreBuilder.mnd: while !targetMet() do
  814:  sensor *tmp418 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  815:  jump *label341 greaterThanEq *tmp418 copper                  ...
  816:  set *tmp417 false                                            ...
  817:  jump *label340 always 0 0                                    ...
        label *label341                                              ...
  818:  sensor *tmp421 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  819:  jump *label343 greaterThanEq *tmp421 lead                    ...
  820:  set *tmp417 false                                            ...
  821:  jump *label340 always 0 0                                    ...
        label *label343                                              ...
  822:  sensor *tmp424 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  823:  jump *label345 greaterThanEq *tmp424 graphite                ...
  824:  set *tmp417 false                                            ...
  825:  jump *label340 always 0 0                                    ...
        label *label345                                              ...
  826:  sensor *tmp427 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  827:  jump *label347 greaterThanEq *tmp427 silicon                 ...
  828:  set *tmp417 false                                            ...
  829:  jump *label340 always 0 0                                    ...
        label *label347                                              ...
  830:  sensor *tmp430 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  831:  jump *label349 greaterThanEq *tmp430 titanium                ...
  832:  set *tmp417 false                                            ...
  833:  jump *label340 always 0 0                                    ...
        label *label349                                              ...
  834:  sensor *tmp433 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  835:  jump *label351 greaterThanEq *tmp433 metaglass               ...
  836:  set *tmp417 false                                            ...
  837:  jump *label340 always 0 0                                    ...
        label *label351                                              ...
  838:  sensor *tmp436 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  839:  jump *label353 greaterThanEq *tmp436 thorium                 ...
  840:  set *tmp417 false                                            ...
  841:  jump *label340 always 0 0                                    ...
        label *label353                                              ...
  842:  set *tmp417 true                                             CoreBuilder.mnd: return true;
  843:  jump *label340 always 0 0                                    ...
        label *label340                                              CoreBuilder.mnd: while !targetMet() do
  844:  jump *label339 notEqual *tmp417 false                        ...
  845:  setaddr :supplyBase*retaddr *label337                        CoreBuilder.mnd: supplyBase();
  846:  call *label35 *invalid :supplyBase*retval                    ...
        label *label339                                              CoreBuilder.mnd: while !targetMet() do
        label *label334                                              CoreBuilder.mnd: if forBuild then
  847:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
        label *label37                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
  848:  op notEqual *tmp440 .controller null                         CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, controller != null, false);
  849:  set :meetTarget:block :buildBlock:block                      ...
  850:  set :meetTarget:copper :buildBlock:copper                    ...
  851:  set :meetTarget:lead :buildBlock:lead                        ...
  852:  set :meetTarget:graphite :buildBlock:graphite                ...
  853:  set :meetTarget:silicon :buildBlock:silicon                  ...
  854:  set :meetTarget:titanium :buildBlock:titanium                ...
  855:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  856:  set :meetTarget:thorium :buildBlock:thorium                  ...
  857:  set :meetTarget:forBuild *tmp440                             ...
  858:  set :meetTarget:isNoTarget false                             ...
  859:  setaddr :meetTarget*retaddr *label357                        ...
  860:  call *label36 *invalid :meetTarget*retval                    ...
        label *label357                                              ...
  861:  write :buildBlock:block processor5 ":buildBlockAt:block"     CoreBuilder.mnd: var built = blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
  862:  write :buildBlock:x processor5 ":buildBlockAt:x"             ...
  863:  write :buildBlock:y processor5 ":buildBlockAt:y"             ...
  864:  write :buildBlock:rotation processor5 ":buildBlockAt:rotatio ...
  865:  write :buildBlock:config processor5 ":buildBlockAt:config"   ...
  866:  write :buildBlock:index processor5 ":buildBlockAt:index"     ...
  867:  write false processor5 ":buildBlockAt*finished"              ...
  868:  write 1 processor5 "@counter"                                ...
        label *label358                                              ...
  869:  wait 1e-15                                                   ...
  870:  read *tmp447 processor5 ":buildBlockAt*finished"             ...
  871:  jump *label358 equal *tmp447 false                           ...
  872:  read :buildBlock*retval processor5 ":buildBlockAt*retval"    ...
  873:  write false .controller ":buildStop*finished"                CoreBuilder.mnd: async(controller.buildStop());
  874:  write 2 .controller "@counter"                               ...
  875:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
        label *label12                                               Actions.mnd: void status2(text, item, block)
  876:  write :status2:text processor2 ".status2"                    Actions.mnd: display.status2 = text;
  877:  write :status2:item processor2 ".item2"                      Actions.mnd: display.item2 = item;
  878:  write :status2:block processor2 ".block2"                    Actions.mnd: display.block2 = block;
  879:  return :status2*retaddr                                      Actions.mnd: void status2(text, item, block)
        label *label14                                               Actions.mnd: void transportStatus(target, item)
  880:  write :transportStatus:target processor2 ".transportTarget"  Actions.mnd: display.transportTarget = target;
  881:  write :transportStatus:item processor2 ".transportItem"      Actions.mnd: display.transportItem = item;
  882:  return :transportStatus*retaddr                              Actions.mnd: void transportStatus(target, item)
        label *label18                                               Actions.mnd: void moveToEmpty(x, y)
  883:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label363                                              Actions.mnd: do
  884:  sensor *tmp449 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  885:  jump *label366 equal *tmp449 null                            ...
  886:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label366                                              ...
  887:  ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5 0 0      Actions.mnd: approach(x, y, RADIUS - 0.5);
  888:  ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp452 0    Actions.mnd: while !within(x, y, RADIUS);
  889:  jump *label363 equal *tmp452 false                           Actions.mnd: do
  890:  return :moveToEmpty*retaddr                                  Actions.mnd: void moveToEmpty(x, y)
        label *label19                                               Actions.mnd: void dropAll()
        label *label369                                              Actions.mnd: while @unit.@firstItem != null do
  891:  sensor *tmp454 @unit @firstItem                              ...
  892:  jump *label371 equal *tmp454 null                            ...
  893:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  894:  jump *label369 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label371                                              ...
  895:  return :dropAll*retaddr                                      Actions.mnd: void dropAll()
        label *label21                                               Actions.mnd: void depositItems(block, item)
  896:  write "Depositing..." processor2 ".status3"                  Actions.mnd: display.status3 = text;
  897:  sensor *tmp456 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  898:  jump *label374 notEqual *tmp456 :depositItems:item           ...
  899:  sensor *tmp505 :depositItems:block @x                        Actions.mnd: moveTo(block.@x, block.@y, radius);
  900:  sensor *tmp506 :depositItems:block @y                        ...
  901:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label560                                              Actions.mnd: while !within(x, y, radius) do
  902:  ucontrol within *tmp505 *tmp506 6 *tmp511 0                  ...
  903:  jump *label562 notEqual *tmp511 false                        ...
  904:  ucontrol approach *tmp505 *tmp506 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  905:  jump *label560 always 0 0                                    Actions.mnd: while !within(x, y, radius) do
        label *label562                                              ...
  906:  sensor :depositItems:cap :depositItems:block @itemCapacity   Actions.mnd: var cap = block.@itemCapacity;
        label *label377                                              Actions.mnd: do
  907:  ucontrol itemDrop :depositItems:block 30 0 0 0               Actions.mnd: itemDrop(block, capacity);
  908:  sensor *tmp460 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  909:  op mul *tmp461 *tmp460 :depositItems:cap                     ...
  910:  sensor *tmp462 :depositItems:block :depositItems:item        ...
  911:  jump *label377 greaterThan *tmp461 *tmp462                   Actions.mnd: do
  912:  jump *label375 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label374                                              ...
        label *label380                                              Actions.mnd: while @unit.@firstItem != null do
  913:  sensor *tmp464 @unit @firstItem                              ...
  914:  jump *label382 equal *tmp464 null                            ...
  915:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  916:  jump *label380 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label382                                              ...
        label *label375                                              Actions.mnd: if @unit.@firstItem == item then
  917:  set :transportStatus:target 0                                Actions.mnd: transportStatus(0, null);
  918:  set :transportStatus:item null                               ...
  919:  setaddr :transportStatus*retaddr *label383                   ...
  920:  call *label14 *invalid :transportStatus*retval               ...
        label *label383                                              ...
  921:  return :depositItems*retaddr                                 Actions.mnd: void depositItems(block, item)
        label *label23                                               Actions.mnd: void mineOre(ore, amount, block)
  922:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  923:  set :transportStatus:target :mineOre:amount                  Actions.mnd: transportStatus(amount, ore);
  924:  set :transportStatus:item :mineOre:ore                       ...
  925:  setaddr :transportStatus*retaddr *label385                   ...
  926:  call *label14 *invalid :transportStatus*retval               ...
        label *label385                                              ...
  927:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  928:  jump *label554 notEqual *tmp507 false                        ...
  929:  set :error:error "Cannot locate ore"                         Actions.mnd: error("Cannot locate ore");
  930:  setaddr :error*retaddr *label553                             ...
  931:  call *label15 *invalid :error*retval                         ...
        label *label553                                              ...
        label *label554                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  932:  set :mineOre:x :locateOre:x                                  Actions.mnd: locateOre(ore, out x, out y);
  933:  set :mineOre:y :locateOre:y                                  ...
  934:  set :moveToEmpty:x :locateOre:x                              Actions.mnd: moveToEmpty(x, y);
  935:  set :moveToEmpty:y :locateOre:y                              ...
  936:  setaddr :moveToEmpty*retaddr *label387                       ...
  937:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label387                                              ...
  938:  sensor *tmp467 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  939:  jump *label388 equal *tmp467 :mineOre:ore                    ...
  940:  setaddr :dropAll*retaddr *label390                           ...
  941:  call *label19 *invalid :dropAll*retval                       ...
        label *label390                                              ...
        label *label388                                              ...
  942:  write "Mining..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
  943:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label392                                              Actions.mnd: do
  944:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  945:  op notEqual *tmp472 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  946:  op notEqual *tmp473 :mineOre:item :mineOre:ore               ...
  947:  op land *tmp474 *tmp472 *tmp473                              ...
  948:  jump *label394 notEqual *tmp474 false                        ...
  949:  ucontrol mine :mineOre:x :mineOre:y 0 0 0                    Actions.mnd: mine(x, y);
  950:  jump *label394 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  951:  jump *label399 notEqual .noTarget false                      Actions.mnd: if not noTarget then
  952:  sensor *tmp481 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  953:  jump *label402 greaterThanEq *tmp481 copper                  ...
  954:  set *tmp480 false                                            ...
  955:  jump *label401 always 0 0                                    ...
        label *label402                                              ...
  956:  sensor *tmp484 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  957:  jump *label404 greaterThanEq *tmp484 lead                    ...
  958:  set *tmp480 false                                            ...
  959:  jump *label401 always 0 0                                    ...
        label *label404                                              ...
  960:  sensor *tmp487 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  961:  jump *label406 greaterThanEq *tmp487 graphite                ...
  962:  set *tmp480 false                                            ...
  963:  jump *label401 always 0 0                                    ...
        label *label406                                              ...
  964:  sensor *tmp490 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  965:  jump *label408 greaterThanEq *tmp490 silicon                 ...
  966:  set *tmp480 false                                            ...
  967:  jump *label401 always 0 0                                    ...
        label *label408                                              ...
  968:  sensor *tmp493 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  969:  jump *label410 greaterThanEq *tmp493 titanium                ...
  970:  set *tmp480 false                                            ...
  971:  jump *label401 always 0 0                                    ...
        label *label410                                              ...
  972:  sensor *tmp496 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  973:  jump *label412 greaterThanEq *tmp496 metaglass               ...
  974:  set *tmp480 false                                            ...
  975:  jump *label401 always 0 0                                    ...
        label *label412                                              ...
  976:  sensor *tmp499 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  977:  jump *label414 greaterThanEq *tmp499 thorium                 ...
  978:  set *tmp480 false                                            ...
  979:  jump *label401 always 0 0                                    ...
        label *label414                                              ...
  980:  set *tmp480 true                                             CoreBuilder.mnd: return true;
  981:  jump *label401 always 0 0                                    ...
        label *label401                                              Actions.mnd: if targetMet() then
  982:  jump *label394 notEqual *tmp480 false                        ...
        label *label399                                              Actions.mnd: if not noTarget then
  983:  sensor *tmp503 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  984:  jump *label392 lessThan *tmp503 :mineOre:amount              Actions.mnd: do
        label *label394                                              ...
  985:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  986:  set :depositItems:block :mineOre:block                       Actions.mnd: depositItems(block, ore);
  987:  set :depositItems:item :mineOre:ore                          ...
  988:  setaddr :depositItems*retaddr *label418                      ...
  989:  call *label21 *invalid :depositItems*retval                  ...
        label *label418                                              ...
  990:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)


Performance: parsed in 1,053 ms, compiled in 524 ms, optimized in 3,445 ms, run in 11 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: success.

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 1: read *tmp33 processor2 "*signature":
Variable 'processor2' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
