  1272 instructions before optimizations.
    71 instructions eliminated by Temp Variables Elimination (2 iterations).
    95 instructions eliminated by Dead Code Elimination (10 iterations).
C:\Home\golem\jam-202507\Actions.mnd:29:14 Variable 'ERROR' is not used.
     1 instructions eliminated by Jump Normalization (5 iterations).
    49 instructions eliminated by Jump Optimization (5 iterations).
    34 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     2 instructions eliminated by If Expression Optimization (3 iterations).
   111 instructions eliminated by Data Flow Optimization (9 passes, 27 iterations).
     1 loops improved by Loop Hoisting.
     2 instructions eliminated by Loop Unrolling (10 iterations).
     1 loops unrolled by Loop Unrolling.
    39 instructions eliminated by Function Inlining (10 iterations).
    21 function calls inlined by Function Inlining.
     3 instructions eliminated by Jump Straightening (5 iterations).
    11 instructions updated by JumpThreading.
    21 instructions eliminated by Unreachable Code Elimination (2 iterations).
   844 instructions after optimizations.

Pass 1: size optimization selection (cost limit 0):
  * Unroll iteration loop at CoreBuilder.mnd:226:5               size   -13, benefit     1093.5, efficiency     13.000 (-10 instructions)
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4167.9, efficiency      1.000
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16313.8, efficiency      1.000
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency      1.000
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency      1.000
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000

Pass 1: size optimization selection (cost limit 0):
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4167.9, efficiency      1.000
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16313.8, efficiency      1.000 (-11 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency      1.000
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency      1.000
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000

Pass 1: size optimization selection (cost limit 0):
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4167.9, efficiency      1.000 (-29 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency      1.000
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency      1.000
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000

Pass 1: size optimization selection (cost limit 0):
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3819.1, efficiency      1.000 (-7 instructions)
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency      1.000
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000

Pass 1: size optimization selection (cost limit 0):
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3394.7, efficiency      1.000 (-7 instructions)
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000

Pass 1: size optimization selection (cost limit 0):
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     2275.0, efficiency      1.000 (-4 instructions)

Pass 1: size optimization selection (cost limit 0):
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     1879.5, efficiency      1.000 (-5 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-71 instructions):
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label46) (h:*label46)
    45 label *label46
-    * set *tmp124 :buildBlockFromCfg.1*retval
    46 set :buildBlockFromCfg.1:cfg "m*.<2######"
    47 setaddr :buildBlockFromCfg.1*retaddr *label47 (h:*label47)
    48 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label47) (h:*label47)
 
    60 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    61 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
    62 label *label49
-    * set *tmp127 :buildBlockFromCfg.1*retval
    63 set :buildFirstTitaniumDrill:cfg "w**5#-#####"
    64 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    65 setaddr :meetTarget.1*retaddr *label51 (h:*label51)
 
    91 setaddr :error*retaddr *label55 (h:*label55)
    92 call *label13 *invalid :error*retval (m:*label55) (h:*label55)
    93 label *label55
-    * set *tmp142 null
    94 jump *label54 always
    95 label *label53
-    * set *tmp142 null
    96 label *label54
    97 write @pneumatic-drill .display ".nextBlock"
    98 write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
 
   120 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
   121 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
   122 label *label58
-    * set *tmp148 :buildBlockFromCfg.1*retval
   123 set :buildBlockFromCfg.1:cfg "W*-'%######"
   124 setaddr :buildBlockFromCfg.1*retaddr *label59 (h:*label59)
   125 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label59) (h:*label59)
   126 label *label59
-    * set *tmp149 :buildBlockFromCfg.1*retval
   127 set .graphiteSurplus 100
   128 set :buildBlockFromCfg:cfg "®-.}U#U####"
   129 set :buildBlockFromCfg:config processor2
 
   145 setaddr :buildBlockFromCfg.1*retaddr *label61 (h:*label61)
   146 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label61) (h:*label61)
   147 label *label61
-    * set *tmp151 :buildBlockFromCfg.1*retval
   148 set :buildBlockFromCfg.1:cfg "(*###A<###"
   149 setaddr :buildBlockFromCfg.1*retaddr *label62 (h:*label62)
   150 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label62) (h:*label62)
 
   183 op lessThan *tmp155 *tmp154 300
   184 jump *label71 equal *tmp155 false
   185 jump *label69 always
-    * set *tmp156 null
   186 jump *label72 always
   187 label *label71
-    * set *tmp156 null
   188 label *label72
   189 label *label68
   190 read *tmp96 .controller ".monos"
 
   196 setaddr :buildBlockFromCfg.1*retaddr *label73 (h:*label73)
   197 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label73) (h:*label73)
   198 label *label73
-    * set *tmp158 :buildBlockFromCfg.1*retval
   199 set :buildBlockFromCfg.1:cfg "T,*%%######"
   200 setaddr :buildBlockFromCfg.1*retaddr *label74 (h:*label74)
   201 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label74) (h:*label74)
   202 label *label74
-    * set *tmp159 :buildBlockFromCfg.1*retval
   203 set :buildBlockFromCfg.1:cfg "',+_AA#####"
   204 setaddr :buildBlockFromCfg.1*retaddr *label75 (h:*label75)
   205 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
 
   211 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   212 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
   213 label *label76
-    * set *tmp161 :buildBlockFromCfg.1*retval
   214 set :buildBlockFromCfg.1:cfg "W'*'%######"
   215 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   216 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
   217 label *label77
-    * set *tmp162 :buildBlockFromCfg.1*retval
   218 set :buildBlockFromCfg.1:cfg "W&*'%######"
   219 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label78) (h:*label78)
   221 label *label78
-    * set *tmp163 :buildBlockFromCfg.1*retval
   222 set :buildBlockFromCfg.1:cfg "o%+FK<A####"
   223 setaddr :buildBlockFromCfg.1*retaddr *label79 (h:*label79)
   224 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label79) (h:*label79)
 
   248 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   249 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   250 label *label83
-    * set *tmp168 :buildBlockFromCfg.1*retval
   251 set :buildBlockFromCfg.1:cfg "*%ë#}####"
   252 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   253 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
 
   260 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   261 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   262 label *label85
-    * set *tmp170 :buildBlockFromCfg.1*retval
   263 setaddr :buildUnits*retaddr *label86 (h:*label86)
   264 call *label40 *invalid :buildUnits*retval (m:*label86) (h:*label86)
   265 label *label86
 
   280 setaddr :buildBlockFromCfg*retaddr *label89 (h:*label89)
   281 call *label36 *invalid :buildBlockFromCfg*retval (m:*label89) (h:*label89)
   282 label *label89
-    * set *tmp172 :buildBlockFromCfg*retval
   283 setaddr :buildUnits*retaddr *label90 (h:*label90)
   284 call *label40 *invalid :buildUnits*retval (m:*label90) (h:*label90)
   285 label *label90
 
   364 setaddr :error*retaddr *label109 (h:*label109)
   365 call *label13 *invalid :error*retval (m:*label109) (h:*label109)
   366 label *label109
-    * set *tmp197 null
   367 jump *label108 always
   368 label *label107
-    * set *tmp197 null
   369 label *label108
   370 write @laser-drill .blockBuilder ":buildBlockAt:block"
   371 read *tmp53 .oreLocator ".drillX"
 
   390 setaddr :buildRemoteBlock*retaddr *label111 (h:*label111)
   391 call *label35 *invalid :buildRemoteBlock*retval (m:*label111) (h:*label111)
   392 label *label111
-    * set *tmp205 :buildRemoteBlock*retval
   393 set :buildRemoteBlock:cfg "z%-AAA##A##"
   394 read *tmp59 .oreLocator ".water2X"
   395 set :buildRemoteBlock:x *tmp59
 
   398 setaddr :buildRemoteBlock*retaddr *label112 (h:*label112)
   399 call *label35 *invalid :buildRemoteBlock*retval (m:*label112) (h:*label112)
   400 label *label112
-    * set *tmp206 :buildRemoteBlock*retval
   401 set :buildRemoteBlock:cfg "o%+FK<A####"
   402 read *tmp61 .oreLocator ".generatorX"
   403 set :buildRemoteBlock:x *tmp61
 
   416 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   417 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   418 label *label114
-    * set *tmp208 :buildRemoteBlock*retval
   419 set :buildRemoteBlock:cfg "r**#-#+####"
   420 read *tmp65 .oreLocator ".panelX"
   421 set :buildRemoteBlock:x *tmp65
 
   424 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   425 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   426 label *label115
-    * set *tmp209 :buildRemoteBlock*retval
   427 set :buildRemoteBlock:cfg "k*/(7######"
   428 read *tmp67 .oreLocator ".batteryX"
   429 set :buildRemoteBlock:x *tmp67
 
   432 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   433 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   434 label *label116
-    * set *tmp210 :buildRemoteBlock*retval
   435 set :buildRemoteBlock:cfg "**#######"
   436 read *tmp57 .oreLocator ".containerX"
   437 set :buildRemoteBlock:x *tmp57
 
   445 op equal *tmp212 .thoriumContainer null
   446 jump *label118 equal *tmp212 false
   447 set .thoriumContainer .thoriumDrill
-    * set *tmp213 .thoriumContainer
   448 jump *label119 always
   449 label *label118
-    * set *tmp213 null
   450 label *label119
   451 write .thoriumDrill .display ".thoriumDrill"
   452 write .thoriumContainer .display ".thoriumContainer"
 
   484 setaddr :buildBlockFromCfg.1*retaddr *label127 (h:*label127)
   485 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label127) (h:*label127)
   486 label *label127
-    * set *tmp218 :buildBlockFromCfg.1*retval
   487 set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#"
   488 setaddr :buildBlockFromCfg.1*retaddr *label129 (h:*label129)
   489 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label129) (h:*label129)
 
   560 op notEqual *tmp225 *tmp224 null
   561 jump *label152 equal *tmp225 false
   562 ucontrol itemDrop @air 1000
-    * set *tmp226 null
   563 jump *label153 always
   564 label *label152
-    * set *tmp226 null
   565 label *label153
   566 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   567 label *label150
 
   620 op greaterThan *tmp240 *tmp238 *tmp239
   621 jump *label165 notEqual *tmp240 false
   622 label *label167
-    * set *tmp235 null
   623 jump *label163 always
   624 label *label162
   625 label *label168
 
   630 label *label169
   631 jump *label168 always
   632 label *label170
-    * set *tmp235 null
   633 label *label163
   634 set :transportStatus:target 0
   635 set :transportStatus:item null
 
   647 setaddr :error*retaddr *label175 (h:*label175)
   648 call *label13 *invalid :error*retval (m:*label175) (h:*label175)
   649 label *label175
-    * set *tmp246 null
   650 jump *label174 always
   651 label *label173
-    * set *tmp246 null
   652 label *label174
   653 label *label172
   654 return :locateOre*retaddr
 
   678 setaddr :dropAll*retaddr *label182 (h:*label182)
   679 call *label17 *invalid :dropAll*retval (m:*label182) (h:*label182)
   680 label *label182
-    * set *tmp250 null
   681 jump *label181 always
   682 label *label180
-    * set *tmp250 null
   683 label *label181
   684 set :status3:text "Mining..."
   685 setaddr :status3*retaddr *label183 (h:*label183)
 
   695 op land *tmp255 *tmp253 *tmp254
   696 jump *label187 equal *tmp255 false
   697 jump *label186 always
-    * set *tmp256 null
   698 jump *label188 always
   699 label *label187
-    * set *tmp256 null
   700 label *label188
   701 ucontrol mine :mineOre:x :mineOre:y
   702 op greaterThan *tmp257 @second :mineOre:stop
   703 jump *label189 equal *tmp257 false
   704 jump *label186 always
-    * set *tmp258 null
   705 jump *label190 always
   706 label *label189
-    * set *tmp258 null
   707 label *label190
   708 label *label185
   709 sensor *tmp259 @unit @totalItems
 
   769 op land *tmp269 *tmp267 *tmp268
   770 jump *label203 equal *tmp269 false
   771 ucontrol itemDrop @air 1000
-    * set *tmp270 null
   772 jump *label204 always
   773 label *label203
-    * set *tmp270 null
   774 label *label204
   775 label *label201
   776 sensor *tmp271 @unit :fetchBlock:item
 
   807 setaddr :mineOre*retaddr *label210 (h:*label210)
   808 call *label21 *invalid :mineOre*retval (m:*label210) (h:*label210)
   809 label *label210
-    * set *tmp279 null
   810 jump *label209 always
   811 label *label208
-    * set *tmp279 null
   812 label *label209
   813 label *label206
   814 return :supplyBlock*retaddr
 
   844 op land *tmp285 *tmp283 *tmp284
   845 jump *label219 equal *tmp285 false
   846 ucontrol itemDrop @air 1000
-    * set *tmp286 null
   847 jump *label220 always
   848 label *label219
-    * set *tmp286 null
   849 label *label220
   850 label *label217
   851 sensor *tmp287 @unit :supplyBlockFromCore:item
 
   942 call *label23 *invalid :fetchBlock*retval (m:*label229) (h:*label229)
   943 label *label229
   944 label *label226
-    * set *tmp327 null
   945 jump *label225 always
   946 label *label224
   947 read *tmp96 .controller ".monos"
 
   983 label *label240
   984 set *tmp337 null
   985 label *label241
-    * set *tmp334 *tmp337
   986 jump *label239 always
   987 label *label238
-    * set *tmp334 null
   988 label *label239
   989 sensor *tmp338 .core @silicon
   990 op lessThan *tmp339 *tmp338 .targetSilicon
 
  1025 label *label251
  1026 set *tmp343 *tmp346
  1027 label *label247
-    * set *tmp340 *tmp343
  1028 jump *label245 always
  1029 label *label244
-    * set *tmp340 null
  1030 label *label245
  1031 sensor *tmp347 .battery @totalPower
  1032 op lessThan *tmp348 *tmp347 .powerTarget
 
  1054 label *label254
  1055 set *tmp349 null
  1056 label *label255
-    * set *tmp331 *tmp349
  1057 jump *label237 always
  1058 label *label236
-    * set *tmp331 null
  1059 label *label237
  1060 sensor *tmp353 .core @titanium
  1061 op lessThan *tmp354 *tmp353 .targetTitanium
 
  1192 label *label264
  1193 set *tmp363 null
  1194 label *label265
-    * set *tmp361 *tmp363
  1195 jump *label263 always
  1196 label *label262
  1197 set :status1:text "Goal 11: Fetching titanium"
 
  1203 setaddr :fetchBlock*retaddr *label293 (h:*label293)
  1204 call *label23 *invalid :fetchBlock*retval (m:*label293) (h:*label293)
  1205 label *label293
-    * set *tmp361 null
  1206 label *label263
  1207 label *label235
  1208 set *tmp329 null
  1209 label *label231
-    * set *tmp327 *tmp329
  1210 label *label225
  1211 label *label223
  1212 return :supplyBase*retaddr
 
  1286 jump *label309 equal *tmp404 false
  1287 set *tmp402 false
  1288 jump *label308 always
-    * set *tmp405 null
  1289 jump *label310 always
  1290 label *label309
-    * set *tmp405 null
  1291 label *label310
  1292 sensor *tmp406 .core @lead
  1293 op lessThan *tmp407 *tmp406 .targetLead
  1294 jump *label311 equal *tmp407 false
  1295 set *tmp402 false
  1296 jump *label308 always
-    * set *tmp408 null
  1297 jump *label312 always
  1298 label *label311
-    * set *tmp408 null
  1299 label *label312
  1300 sensor *tmp409 .core @graphite
  1301 op lessThan *tmp410 *tmp409 .targetGraphite
  1302 jump *label313 equal *tmp410 false
  1303 set *tmp402 false
  1304 jump *label308 always
-    * set *tmp411 null
  1305 jump *label314 always
  1306 label *label313
-    * set *tmp411 null
  1307 label *label314
  1308 sensor *tmp412 .core @silicon
  1309 op lessThan *tmp413 *tmp412 .targetSilicon
  1310 jump *label315 equal *tmp413 false
  1311 set *tmp402 false
  1312 jump *label308 always
-    * set *tmp414 null
  1313 jump *label316 always
  1314 label *label315
-    * set *tmp414 null
  1315 label *label316
  1316 sensor *tmp415 .core @titanium
  1317 op lessThan *tmp416 *tmp415 .targetTitanium
  1318 jump *label317 equal *tmp416 false
  1319 set *tmp402 false
  1320 jump *label308 always
-    * set *tmp417 null
  1321 jump *label318 always
  1322 label *label317
-    * set *tmp417 null
  1323 label *label318
  1324 sensor *tmp418 .core @metaglass
  1325 op lessThan *tmp419 *tmp418 .targetMetaglass
  1326 jump *label319 equal *tmp419 false
  1327 set *tmp402 false
  1328 jump *label308 always
-    * set *tmp420 null
  1329 jump *label320 always
  1330 label *label319
-    * set *tmp420 null
  1331 label *label320
  1332 sensor *tmp421 .core @thorium
  1333 op lessThan *tmp422 *tmp421 .targetThorium
  1334 jump *label321 equal *tmp422 false
  1335 set *tmp402 false
  1336 jump *label308 always
-    * set *tmp423 null
  1337 jump *label322 always
  1338 label *label321
-    * set *tmp423 null
  1339 label *label322
  1340 set *tmp402 true
  1341 jump *label308 always
 
  1416 label *label334
  1417 set :buildRemoteBlock*retval :buildBlock*retval
  1418 jump *label330 always
-    * set *tmp449 null
  1419 jump *label332 always
  1420 label *label331
-    * set *tmp449 null
  1421 label *label332
  1422 set :buildRemoteBlock*retval false
  1423 jump *label330 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-10 instructions):
 
   956 call *label22 *invalid :mineOre.1*retval (m:*label234) (h:*label234)
   957 label *label234
   958 label *label232
-    * set *tmp329 null
   959 jump *label231 always
   960 label *label230
   961 set :supplyBase0:supplied false
 
   977 call *label24 *invalid :supplyBlock*retval (m:*label243) (h:*label243)
   978 label *label243
   979 set :supplyBase0:supplied true
-    * set *tmp337 :supplyBase0:supplied
   980 jump *label241 always
   981 label *label240
-    * set *tmp337 null
   982 label *label241
   983 jump *label239 always
   984 label *label238
 
   999 call *label24 *invalid :supplyBlock*retval (m:*label249) (h:*label249)
  1000 label *label249
  1001 set :supplyBase0:supplied true
-    * set *tmp343 :supplyBase0:supplied
  1002 jump *label247 always
  1003 label *label246
  1004 sensor *tmp344 .smelter @sand
 
  1019 label *label250
  1020 set *tmp346 null
  1021 label *label251
-    * set *tmp343 *tmp346
  1022 label *label247
  1023 jump *label245 always
  1024 label *label244
 
  1044 label *label256
  1045 set *tmp352 null
  1046 label *label257
-    * set *tmp349 *tmp352
  1047 jump *label255 always
  1048 label *label254
-    * set *tmp349 null
  1049 label *label255
  1050 jump *label237 always
  1051 label *label236
 
  1180 label *label271
  1181 set *tmp367 *tmp370
  1182 label *label267
-    * set *tmp363 *tmp367
  1183 jump *label265 always
  1184 label *label264
-    * set *tmp363 null
  1185 label *label265
  1186 jump *label263 always
  1187 label *label262
 
  1196 label *label293
  1197 label *label263
  1198 label *label235
-    * set *tmp329 null
  1199 label *label231
  1200 label *label225
  1201 label *label223

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-6 instructions):
 
  1014 call *label24 *invalid :supplyBlock*retval (m:*label253) (h:*label253)
  1015 label *label253
  1016 set :supplyBase0:supplied true
-    * set *tmp346 :supplyBase0:supplied
  1017 jump *label251 always
  1018 label *label250
-    * set *tmp346 null
  1019 label *label251
  1020 label *label247
  1021 jump *label245 always
 
  1037 call *label24 *invalid :supplyBlock*retval (m:*label259) (h:*label259)
  1038 label *label259
  1039 set :supplyBase0:supplied true
-    * set *tmp352 :supplyBase0:supplied
  1040 jump *label257 always
  1041 label *label256
-    * set *tmp352 null
  1042 label *label257
  1043 jump *label255 always
  1044 label *label254
 
  1075 setaddr :mineOre.1*retaddr *label269 (h:*label269)
  1076 call *label22 *invalid :mineOre.1*retval (m:*label269) (h:*label269)
  1077 label *label269
-    * set *tmp367 null
  1078 jump *label267 always
  1079 label *label266
  1080 sensor *tmp368 .core @silicon
 
  1173 label *label277
  1174 set *tmp370 *tmp377
  1175 label *label271
-    * set *tmp367 *tmp370
  1176 label *label267
  1177 jump *label265 always
  1178 label *label264

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
  1100 setaddr :mineOre.1*retaddr *label275 (h:*label275)
  1101 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
  1102 label *label275
-    * set *tmp370 null
  1103 jump *label271 always
  1104 label *label270
  1105 sensor *tmp375 .core @copper
 
  1170 label *label281
  1171 set *tmp377 *tmp380
  1172 label *label277
-    * set *tmp370 *tmp377
  1173 label *label271
  1174 label *label267
  1175 jump *label265 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
  1113 setaddr :mineOre.1*retaddr *label279 (h:*label279)
  1114 call *label22 *invalid :mineOre.1*retval (m:*label279) (h:*label279)
  1115 label *label279
-    * set *tmp377 null
  1116 jump *label277 always
  1117 label *label276
  1118 sensor *tmp378 .core @lead
 
  1167 label *label285
  1168 set *tmp380 *tmp383
  1169 label *label281
-    * set *tmp377 *tmp380
  1170 label *label277
  1171 label *label271
  1172 label *label267

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
  1126 setaddr :mineOre.1*retaddr *label283 (h:*label283)
  1127 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
  1128 label *label283
-    * set *tmp380 null
  1129 jump *label281 always
  1130 label *label280
  1131 sensor *tmp381 .core @metaglass
 
  1164 label *label291
  1165 set *tmp383 null
  1166 label *label285
-    * set *tmp380 *tmp383
  1167 label *label281
  1168 label *label277
  1169 label *label271

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
  1139 setaddr :mineOre.1*retaddr *label287 (h:*label287)
  1140 call *label22 *invalid :mineOre.1*retval (m:*label287) (h:*label287)
  1141 label *label287
-    * set *tmp383 null
  1142 jump *label285 always
  1143 label *label284
  1144 set :status1:text "Goal 10: supplying base"
 
  1161 setaddr :mineOre.1*retaddr *label291 (h:*label291)
  1162 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
  1163 label *label291
-    * set *tmp383 null
  1164 label *label285
  1165 label *label281
  1166 label *label277

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-71 instructions):
 
    19 write 511 bank1 511
    20 label *label41
    21 ubind @poly
-    * set *tmp118 @unit
-    * set .builder *tmp118
-    * ulocate building core false @copper .coreX .coreY *tmp120 *tmp119
-    * set .core *tmp119
+   22 set .builder @unit
+   23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label42
    25 op equal *tmp121 .core null
    26 jump *label41 notEqual *tmp121 false
 
    29 setaddr :buildBlockFromCfg.1*retaddr *label44 (h:*label44)
    30 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label44) (h:*label44)
    31 label *label44
-    * set *tmp122 :buildBlockFromCfg.1*retval
-    * set .press *tmp122
+   32 set .press :buildBlockFromCfg.1*retval
    33 set :buildBlockFromCfg.1:cfg "k*/(7######"
    34 setaddr :buildBlockFromCfg.1*retaddr *label45 (h:*label45)
    35 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label45) (h:*label45)
    36 label *label45
-    * set *tmp123 :buildBlockFromCfg.1*retval
-    * set .battery *tmp123
+   37 set .battery :buildBlockFromCfg.1*retval
    38 set :buildBlockFromCfg.1:cfg "k+/(7######"
    39 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
    40 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label46) (h:*label46)
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label47 (h:*label47)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label47) (h:*label47)
    45 label *label47
-    * set *tmp125 :buildBlockFromCfg.1*retval
-    * set .generator *tmp125
+   46 set .generator :buildBlockFromCfg.1*retval
    47 set .powerTarget 400
    48 set :buildBlockFromCfg.1:cfg "%+-A<######"
    49 setaddr :buildBlockFromCfg.1*retaddr *label48 (h:*label48)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label48) (h:*label48)
    51 label *label48
-    * set *tmp126 :buildBlockFromCfg.1*retval
-    * set .smelter *tmp126
+   52 set .smelter :buildBlockFromCfg.1*retval
    53 set :buildBlockFromCfg.1:cfg "T+,%%######"
    54 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    55 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
 
    73 wait 1e-15
    74 read *tmp139 .oreLocator ":findDrillLocation*finished"
    75 jump *label52 equal *tmp139 false
-    * read *tmp136 .oreLocator ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp136
-    * read *tmp137 .oreLocator ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp137
-    * read *tmp140 .oreLocator ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp140
+   76 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
+   77 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
+   78 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
    79 op equal *tmp141 :buildFirstTitaniumDrill:result false
    80 jump *label53 equal *tmp141 false
    81 set :error:error "Cannot locate spot for titanium drill"
 
    94 wait 1e-15
    95 read *tmp145 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
    96 jump *label56 equal *tmp145 false
-    * read *tmp146 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp128 *tmp146
+   97 read *tmp128 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
    98 jump *label50 always
    99 set *tmp128 null
   100 label *label50
 
   104 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
   105 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
   106 label *label57
-    * set *tmp147 :buildBlockFromCfg.1*retval
-    * set .unloader1 *tmp147
+  107 set .unloader1 :buildBlockFromCfg.1*retval
   108 set :buildBlockFromCfg.1:cfg "T),%%######"
   109 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
   110 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
 
   119 setaddr :buildBlockFromCfg*retaddr *label60 (h:*label60)
   120 call *label36 *invalid :buildBlockFromCfg*retval (m:*label60) (h:*label60)
   121 label *label60
-    * set *tmp150 :buildBlockFromCfg*retval
-    * set .controller *tmp150
+  122 set .controller :buildBlockFromCfg*retval
   123 write processor6 .controller ".timer"
   124 write .display .controller ".display"
   125 write .core .controller ".core"
 
   137 setaddr :buildBlockFromCfg.1*retaddr *label62 (h:*label62)
   138 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label62) (h:*label62)
   139 label *label62
-    * set *tmp152 :buildBlockFromCfg.1*retval
-    * write *tmp152 .controller ".unloader2"
+  140 write :buildBlockFromCfg.1*retval .controller ".unloader2"
   141 set :buildBlockFromCfg.1:cfg "'(_i#####&"
   142 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   143 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
   144 label *label63
-    * set *tmp153 :buildBlockFromCfg.1*retval
-    * set :factory *tmp153
+  145 set :factory :buildBlockFromCfg.1*retval
   146 write :factory .controller ".factory"
   147 write :factory .display ".airFactory"
   148 set :setFlareTarget:target 1
 
   190 setaddr :buildBlockFromCfg.1*retaddr *label75 (h:*label75)
   191 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
   192 label *label75
-    * set *tmp160 :buildBlockFromCfg.1*retval
-    * set .kiln *tmp160
+  193 set .kiln :buildBlockFromCfg.1*retval
   194 write .kiln .controller ".kiln"
   195 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   196 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
 
   208 setaddr :buildBlockFromCfg.1*retaddr *label79 (h:*label79)
   209 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label79) (h:*label79)
   210 label *label79
-    * set *tmp164 :buildBlockFromCfg.1*retval
-    * write *tmp164 .controller ".generator2"
+  211 write :buildBlockFromCfg.1*retval .controller ".generator2"
   212 set :buildBlockFromCfg.1:cfg "$(.#U<###"
   213 setaddr :buildBlockFromCfg.1*retaddr *label80 (h:*label80)
   214 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label80) (h:*label80)
   215 label *label80
-    * set *tmp165 :buildBlockFromCfg.1*retval
-    * write *tmp165 .controller ".multipress"
+  216 write :buildBlockFromCfg.1*retval .controller ".multipress"
   217 set .graphiteSurplus 200
   218 set :buildBlockFromCfg.1:cfg " '%-#2#####"
   219 setaddr :buildBlockFromCfg.1*retaddr *label81 (h:*label81)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label81) (h:*label81)
   221 label *label81
-    * set *tmp166 :buildBlockFromCfg.1*retval
-    * write *tmp166 .controller ".payloadRouter"
+  222 write :buildBlockFromCfg.1*retval .controller ".payloadRouter"
   223 set :buildBlockFromCfg.1:cfg "*(###A<###"
   224 setaddr :buildBlockFromCfg.1*retaddr *label82 (h:*label82)
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label82) (h:*label82)
   226 label *label82
-    * set *tmp167 :buildBlockFromCfg.1*retval
-    * write *tmp167 .controller ".unloader4"
+  227 write :buildBlockFromCfg.1*retval .controller ".unloader4"
   228 set :buildBlockFromCfg.1:cfg "X*''%######"
   229 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   230 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
 
   233 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   234 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   235 label *label84
-    * set *tmp169 :buildBlockFromCfg.1*retval
-    * set :reconstructor *tmp169
+  236 set :reconstructor :buildBlockFromCfg.1*retval
   237 write :reconstructor .controller ".reconstructor"
   238 write :reconstructor .display ".reconstructor"
   239 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
 
   253 setaddr :buildBlockFromCfg.1*retaddr *label88 (h:*label88)
   254 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label88) (h:*label88)
   255 label *label88
-    * set *tmp171 :buildBlockFromCfg.1*retval
-    * write *tmp171 .controller ".smelter2"
+  256 write :buildBlockFromCfg.1*retval .controller ".smelter2"
   257 set :buildBlockFromCfg:cfg "--###A<###"
   258 set :buildBlockFromCfg:config @sand
   259 setaddr :buildBlockFromCfg*retaddr *label89 (h:*label89)
 
   293 write @ore-titanium .display ".nextBlock"
   294 wait 0.000000001
   295 ubind @flare
-    * read *tmp51 .oreLocator ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp51
+  296 read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
   297 write .coreX .oreLocator ":findDrillLocation:x"
   298 write .coreY .oreLocator ":findDrillLocation:y"
   299 write @unit .oreLocator ":findDrillLocation:unit"
 
   334 wait 1e-15
   335 read *tmp194 .oreLocator ":layoutThoriumDrill*finished"
   336 jump *label106 equal *tmp194 false
-    * read *tmp195 .oreLocator ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp195
+  337 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
   338 op equal *tmp196 :buildThoriumDrill:result false
   339 jump *label107 equal *tmp196 false
   340 set :error:error "Cannot locate spot for thorium drill"
 
   357 wait 1e-15
   358 read *tmp203 .blockBuilder ":buildBlockAt*finished"
   359 jump *label110 equal *tmp203 false
-    * read *tmp204 .blockBuilder ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp204
+  360 read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
   361 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read *tmp55 .oreLocator ".water1X"
-    * set :buildRemoteBlock:x *tmp55
-    * read *tmp56 .oreLocator ".water1Y"
-    * set :buildRemoteBlock:y *tmp56
+  362 read :buildRemoteBlock:x .oreLocator ".water1X"
+  363 read :buildRemoteBlock:y .oreLocator ".water1Y"
   364 setaddr :buildRemoteBlock*retaddr *label111 (h:*label111)
   365 call *label35 *invalid :buildRemoteBlock*retval (m:*label111) (h:*label111)
   366 label *label111
   367 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read *tmp59 .oreLocator ".water2X"
-    * set :buildRemoteBlock:x *tmp59
-    * read *tmp60 .oreLocator ".water2Y"
-    * set :buildRemoteBlock:y *tmp60
+  368 read :buildRemoteBlock:x .oreLocator ".water2X"
+  369 read :buildRemoteBlock:y .oreLocator ".water2Y"
   370 setaddr :buildRemoteBlock*retaddr *label112 (h:*label112)
   371 call *label35 *invalid :buildRemoteBlock*retval (m:*label112) (h:*label112)
   372 label *label112
   373 set :buildRemoteBlock:cfg "o%+FK<A####"
-    * read *tmp61 .oreLocator ".generatorX"
-    * set :buildRemoteBlock:x *tmp61
-    * read *tmp62 .oreLocator ".generatorY"
-    * set :buildRemoteBlock:y *tmp62
+  374 read :buildRemoteBlock:x .oreLocator ".generatorX"
+  375 read :buildRemoteBlock:y .oreLocator ".generatorY"
   376 setaddr :buildRemoteBlock*retaddr *label113 (h:*label113)
   377 call *label35 *invalid :buildRemoteBlock*retval (m:*label113) (h:*label113)
   378 label *label113
-    * set *tmp207 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp207
+  379 set .thoriumGenerator :buildRemoteBlock*retval
   380 set :buildRemoteBlock:cfg "g)'%)######"
-    * read *tmp63 .oreLocator ".nodeX"
-    * set :buildRemoteBlock:x *tmp63
-    * read *tmp64 .oreLocator ".nodeY"
-    * set :buildRemoteBlock:y *tmp64
+  381 read :buildRemoteBlock:x .oreLocator ".nodeX"
+  382 read :buildRemoteBlock:y .oreLocator ".nodeY"
   383 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   384 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   385 label *label114
   386 set :buildRemoteBlock:cfg "r**#-#+####"
-    * read *tmp65 .oreLocator ".panelX"
-    * set :buildRemoteBlock:x *tmp65
-    * read *tmp66 .oreLocator ".panelY"
-    * set :buildRemoteBlock:y *tmp66
+  387 read :buildRemoteBlock:x .oreLocator ".panelX"
+  388 read :buildRemoteBlock:y .oreLocator ".panelY"
   389 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   390 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   391 label *label115
   392 set :buildRemoteBlock:cfg "k*/(7######"
-    * read *tmp67 .oreLocator ".batteryX"
-    * set :buildRemoteBlock:x *tmp67
-    * read *tmp68 .oreLocator ".batteryY"
-    * set :buildRemoteBlock:y *tmp68
+  393 read :buildRemoteBlock:x .oreLocator ".batteryX"
+  394 read :buildRemoteBlock:y .oreLocator ".batteryY"
   395 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   396 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   397 label *label116
   398 set :buildRemoteBlock:cfg "**#######"
-    * read *tmp57 .oreLocator ".containerX"
-    * set :buildRemoteBlock:x *tmp57
-    * read *tmp58 .oreLocator ".containerY"
-    * set :buildRemoteBlock:y *tmp58
+  399 read :buildRemoteBlock:x .oreLocator ".containerX"
+  400 read :buildRemoteBlock:y .oreLocator ".containerY"
   401 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   402 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   403 label *label117
-    * set *tmp211 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp211
+  404 set .thoriumContainer :buildRemoteBlock*retval
   405 op equal *tmp212 .thoriumContainer null
   406 jump *label118 equal *tmp212 false
   407 set .thoriumContainer .thoriumDrill
 
   438 setaddr :buildBlockFromCfg*retaddr *label126 (h:*label126)
   439 call *label36 *invalid :buildBlockFromCfg*retval (m:*label126) (h:*label126)
   440 label *label126
-    * set *tmp217 :buildBlockFromCfg*retval
-    * write *tmp217 .controller ".unloader6"
+  441 write :buildBlockFromCfg*retval .controller ".unloader6"
   442 set :buildBlockFromCfg.1:cfg "X+''%######"
   443 setaddr :buildBlockFromCfg.1*retaddr *label127 (h:*label127)
   444 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label127) (h:*label127)
 
   568 setaddr :moveToBlock*retaddr *label164 (h:*label164)
   569 call *label18 *invalid :moveToBlock*retval (m:*label164) (h:*label164)
   570 label *label164
-    * sensor *tmp236 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp236
+  571 sensor :depositItems:cap :depositItems:block @itemCapacity
   572 label *label165
   573 ucontrol itemDrop :depositItems:block 30
   574 label *label166
 
   598 return :depositItems*retaddr
   599 end
   600 label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 *tmp244
+  601 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 0
   602 op equal *tmp245 *tmp243 false
   603 jump *label173 equal *tmp245 false
   604 set :error:error "Cannot locate ore"
 
   612 return :locateOre*retaddr
   613 end
   614 label *label21
-    * op min *tmp247 :mineOre:amount 30
-    * set :mineOre:amount *tmp247
+  615 op min :mineOre:amount :mineOre:amount 30
   616 set :transportStatus:target :mineOre:amount
   617 set :transportStatus:item :mineOre:ore
   618 setaddr :transportStatus*retaddr *label177 (h:*label177)
 
   642 setaddr :status3*retaddr *label183 (h:*label183)
   643 call *label11 *invalid :status3*retval (m:*label183) (h:*label183)
   644 label *label183
-    * op add *tmp251 @second 10
-    * set :mineOre:stop *tmp251
+  645 op add :mineOre:stop @second 10
   646 label *label184
-    * sensor *tmp252 @unit @firstItem
-    * set :mineOre:item *tmp252
+  647 sensor :mineOre:item @unit @firstItem
   648 op notEqual *tmp253 :mineOre:item null
   649 op notEqual *tmp254 :mineOre:item :mineOre:ore
   650 op land *tmp255 *tmp253 *tmp254
 
   681 setaddr :status2*retaddr *label193 (h:*label193)
   682 call *label10 *invalid :status2*retval (m:*label193) (h:*label193)
   683 label *label193
-    * set *tmp261 :mineOre.1:ore
-    * set :mineOre:ore *tmp261
+  684 set :mineOre:ore :mineOre.1:ore
   685 set :mineOre:amount 30
   686 set :mineOre:block .core
   687 setaddr :mineOre*retaddr *label194 (h:*label194)
 
   692 end
   693 label *label23
   694 sensor *tmp262 :fetchBlock:block @itemCapacity
-    * op min *tmp263 *tmp262 30
-    * set :transportStatus:target *tmp263
+  695 op min :transportStatus:target *tmp262 30
   696 set :transportStatus:item :fetchBlock:item
   697 setaddr :transportStatus*retaddr *label196 (h:*label196)
   698 call *label12 *invalid :transportStatus*retval (m:*label196) (h:*label196)
 
   715 label *label199
   716 label *label200
   717 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp266 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp266
+  718 sensor :fetchBlock:unitItem @unit @firstItem
   719 op notEqual *tmp267 :fetchBlock:unitItem null
   720 op notEqual *tmp268 :fetchBlock:unitItem :fetchBlock:item
   721 op land *tmp269 *tmp267 *tmp268
 
   746 setaddr :status2*retaddr *label207 (h:*label207)
   747 call *label10 *invalid :status2*retval (m:*label207) (h:*label207)
   748 label *label207
-    * sensor *tmp275 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp275
+  749 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   750 sensor *tmp276 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp277 :supplyBlock:blockCapacity *tmp276
-    * set :supplyBlock:missing *tmp277
+  751 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp276
   752 op greaterThan *tmp278 :supplyBlock:missing 0
   753 jump *label208 equal *tmp278 false
   754 set :mineOre:ore :supplyBlock:ore
 
   765 end
   766 label *label25
   767 sensor *tmp280 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp281 *tmp280 30
-    * set :transportStatus:target *tmp281
+  768 op min :transportStatus:target *tmp280 30
   769 set :transportStatus:item :supplyBlockFromCore:item
   770 setaddr :transportStatus*retaddr *label212 (h:*label212)
   771 call *label12 *invalid :transportStatus*retval (m:*label212) (h:*label212)
 
   786 label *label215
   787 label *label216
   788 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp282 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp282
+  789 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   790 op notEqual *tmp283 :supplyBlockFromCore:unitItem null
   791 op notEqual *tmp284 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
   792 op land *tmp285 *tmp283 *tmp284
 
   816 op add :unpackCfg:index :unpackCfg:index 1
   817 read *tmp292 :unpackCfg:cfg *tmp291
   818 op sub *tmp293 *tmp292 35
-    * lookup block *tmp294 *tmp293
-    * set :unpackCfg:type *tmp294
+  819 lookup block :unpackCfg:type *tmp293
   820 set *tmp295 :unpackCfg:index
   821 op add :unpackCfg:index :unpackCfg:index 1
   822 read *tmp296 :unpackCfg:cfg *tmp295
   823 op sub *tmp297 *tmp296 35
-    * op sub *tmp298 *tmp297 7
-    * set :unpackCfg:x *tmp298
+  824 op sub :unpackCfg:x *tmp297 7
   825 set *tmp299 :unpackCfg:index
   826 op add :unpackCfg:index :unpackCfg:index 1
   827 read *tmp300 :unpackCfg:cfg *tmp299
   828 op sub *tmp301 *tmp300 35
-    * op sub *tmp302 *tmp301 7
-    * set :unpackCfg:y *tmp302
+  829 op sub :unpackCfg:y *tmp301 7
   830 set *tmp303 :unpackCfg:index
   831 op add :unpackCfg:index :unpackCfg:index 1
   832 read *tmp304 :unpackCfg:cfg *tmp303
-    * op sub *tmp305 *tmp304 35
-    * set :unpackCfg:cu *tmp305
+  833 op sub :unpackCfg:cu *tmp304 35
   834 set *tmp306 :unpackCfg:index
   835 op add :unpackCfg:index :unpackCfg:index 1
   836 read *tmp307 :unpackCfg:cfg *tmp306
-    * op sub *tmp308 *tmp307 35
-    * set :unpackCfg:pb *tmp308
+  837 op sub :unpackCfg:pb *tmp307 35
   838 set *tmp309 :unpackCfg:index
   839 op add :unpackCfg:index :unpackCfg:index 1
   840 read *tmp310 :unpackCfg:cfg *tmp309
-    * op sub *tmp311 *tmp310 35
-    * set :unpackCfg:gr *tmp311
+  841 op sub :unpackCfg:gr *tmp310 35
   842 set *tmp312 :unpackCfg:index
   843 op add :unpackCfg:index :unpackCfg:index 1
   844 read *tmp313 :unpackCfg:cfg *tmp312
-    * op sub *tmp314 *tmp313 35
-    * set :unpackCfg:si *tmp314
+  845 op sub :unpackCfg:si *tmp313 35
   846 set *tmp315 :unpackCfg:index
   847 op add :unpackCfg:index :unpackCfg:index 1
   848 read *tmp316 :unpackCfg:cfg *tmp315
-    * op sub *tmp317 *tmp316 35
-    * set :unpackCfg:ti *tmp317
+  849 op sub :unpackCfg:ti *tmp316 35
   850 set *tmp318 :unpackCfg:index
   851 op add :unpackCfg:index :unpackCfg:index 1
   852 read *tmp319 :unpackCfg:cfg *tmp318
-    * op sub *tmp320 *tmp319 35
-    * set :unpackCfg:mg *tmp320
+  853 op sub :unpackCfg:mg *tmp319 35
   854 set *tmp321 :unpackCfg:index
   855 op add :unpackCfg:index :unpackCfg:index 1
   856 read *tmp322 :unpackCfg:cfg *tmp321
-    * op sub *tmp323 *tmp322 35
-    * set :unpackCfg:th *tmp323
+  857 op sub :unpackCfg:th *tmp322 35
   858 set *tmp324 :unpackCfg:index
   859 op add :unpackCfg:index :unpackCfg:index 1
   860 read *tmp325 :unpackCfg:cfg *tmp324
-    * op sub *tmp326 *tmp325 35
-    * set :unpackCfg:rotation *tmp326
+  861 op sub :unpackCfg:rotation *tmp325 35
   862 label *label222
   863 return :unpackCfg*retaddr
   864 end
 
   988 jump *label260 equal *tmp354 false
   989 sensor *tmp356 .core @titanium
   990 op sub *tmp357 .targetTitanium *tmp356
-    * op min *tmp358 7 *tmp357
-    * set *tmp355 *tmp358
+  991 op min *tmp355 7 *tmp357
   992 jump *label261 always
   993 label *label260
   994 set *tmp355 100
 
  1020 setaddr :status1*retaddr *label272 (h:*label272)
  1021 call *label9 *invalid :status1*retval (m:*label272) (h:*label272)
  1022 label *label272
-    * sensor *tmp371 .core @coal
-    * set :supplyBase0:coal *tmp371
-    * sensor *tmp372 .core @sand
-    * set :supplyBase0:sand *tmp372
+ 1023 sensor :supplyBase0:coal .core @coal
+ 1024 sensor :supplyBase0:sand .core @sand
  1025 op lessThan *tmp373 :supplyBase0:coal :supplyBase0:sand
  1026 jump *label273 equal *tmp373 false
  1027 set *tmp374 @coal
 
  1079 setaddr :status1*retaddr *label288 (h:*label288)
  1080 call *label9 *invalid :status1*retval (m:*label288) (h:*label288)
  1081 label *label288
-    * sensor *tmp384 .core @coal
-    * set :supplyBase0:coal.1 *tmp384
-    * sensor *tmp385 .core @sand
-    * set :supplyBase0:sand.1 *tmp385
+ 1082 sensor :supplyBase0:coal.1 .core @coal
+ 1083 sensor :supplyBase0:sand.1 .core @sand
  1084 op lessThanEq *tmp386 :supplyBase0:coal.1 :supplyBase0:sand.1
  1085 jump *label289 equal *tmp386 false
  1086 set *tmp387 @coal
 
  1165 write :meetTarget:thorium .display ".targetThorium"
  1166 set .targetCopper :meetTarget:copper
  1167 op add *tmp390 :meetTarget:lead .leadSurplus
-    * op add *tmp391 *tmp390 1
-    * set .targetLead *tmp391
+ 1168 op add .targetLead *tmp390 1
  1169 set .targetGraphite :meetTarget:graphite
  1170 set .targetSilicon :meetTarget:silicon
  1171 set .targetTitanium :meetTarget:titanium
 
  1282 wait 1e-15
  1283 read *tmp445 .blockBuilder ":buildBlockAt*finished"
  1284 jump *label329 equal *tmp445 false
-    * read *tmp446 .blockBuilder ":buildBlockAt*retval"
-    * set :buildBlock*retval *tmp446
+ 1285 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1286 jump *label327 always
  1287 set :buildBlock*retval null
  1288 label *label327
 
  1371 return :buildBlockFromCfg*retaddr
  1372 end
  1373 label *label37
-    * set *tmp452 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp452
+ 1374 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
  1375 set :buildBlockFromCfg:config null
  1376 setaddr :buildBlockFromCfg*retaddr *label339 (h:*label339)
  1377 call *label36 *invalid :buildBlockFromCfg*retval (m:*label339) (h:*label339)

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   455 call *label40 *invalid :buildUnits*retval (m:*label130) (h:*label130)
   456 label *label130
   457 label *label131
-    * jump *label133 equal true false
   458 setaddr :supplyBase*retaddr *label134 (h:*label134)
   459 call *label32 *invalid :supplyBase*retval (m:*label134) (h:*label134)
   460 label *label134

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-49 instructions):
 
    22 set .builder @unit
    23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label42
-    * op equal *tmp121 .core null
-    * jump *label41 notEqual *tmp121 false
+   25 jump *label41 equal .core null
    26 label *label43
    27 set :buildBlockFromCfg.1:cfg "#'+nA######"
    28 setaddr :buildBlockFromCfg.1*retaddr *label44 (h:*label44)
 
    75 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
    76 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
    77 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
-    * op equal *tmp141 :buildFirstTitaniumDrill:result false
-    * jump *label53 equal *tmp141 false
+   78 jump *label53 notEqual :buildFirstTitaniumDrill:result false
    79 set :error:error "Cannot locate spot for titanium drill"
    80 setaddr :error*retaddr *label55 (h:*label55)
    81 call *label13 *invalid :error*retval (m:*label55) (h:*label55)
 
   164 call *label32 *invalid :supplyBase*retval (m:*label70) (h:*label70)
   165 label *label70
   166 sensor *tmp154 .battery @totalPower
-    * op lessThan *tmp155 *tmp154 300
-    * jump *label71 equal *tmp155 false
+  167 jump *label71 greaterThanEq *tmp154 300
   168 jump *label69 always
   169 jump *label72 always
   170 label *label71
   171 label *label72
   172 label *label68
   173 read *tmp96 .controller ".monos"
-    * op lessThan *tmp157 *tmp96 3
-    * jump *label67 notEqual *tmp157 false
+  174 jump *label67 lessThan *tmp96 3
   175 label *label69
   176 set .siliconSurplus 65
   177 set :buildBlockFromCfg.1:cfg ",)###A<###"
 
   260 label *label90
   261 label *label91
   262 read *tmp97 .controller ".polys"
-    * op lessThan *tmp173 *tmp97 3
-    * jump *label93 equal *tmp173 false
+  263 jump *label93 greaterThanEq *tmp97 3
   264 setaddr :supplyBase*retaddr *label94 (h:*label94)
   265 call *label32 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   266 label *label94
 
   273 label *label95
   274 label *label96
   275 read *tmp95 .controller ".flares"
-    * op lessThan *tmp174 *tmp95 2
-    * jump *label98 equal *tmp174 false
+  276 jump *label98 greaterThanEq *tmp95 2
   277 setaddr :supplyBase*retaddr *label99 (h:*label99)
   278 call *label32 *invalid :supplyBase*retval (m:*label99) (h:*label99)
   279 label *label99
 
   329 read *tmp194 .oreLocator ":layoutThoriumDrill*finished"
   330 jump *label106 equal *tmp194 false
   331 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
-    * op equal *tmp196 :buildThoriumDrill:result false
-    * jump *label107 equal *tmp196 false
+  332 jump *label107 notEqual :buildThoriumDrill:result false
   333 set :error:error "Cannot locate spot for thorium drill"
   334 setaddr :error*retaddr *label109 (h:*label109)
   335 call *label13 *invalid :error*retval (m:*label109) (h:*label109)
 
   395 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   396 label *label117
   397 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp212 .thoriumContainer null
-    * jump *label118 equal *tmp212 false
+  398 jump *label118 notEqual .thoriumContainer null
   399 set .thoriumContainer .thoriumDrill
   400 jump *label119 always
   401 label *label118
 
   417 label *label121
   418 label *label122
   419 read *tmp97 .controller ".polys"
-    * op lessThan *tmp216 *tmp97 6
-    * jump *label124 equal *tmp216 false
+  420 jump *label124 greaterThanEq *tmp97 6
   421 setaddr :supplyBase*retaddr *label125 (h:*label125)
   422 call *label32 *invalid :supplyBase*retval (m:*label125) (h:*label125)
   423 label *label125
 
   489 label *label141
   490 label *label142
   491 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
-    * op equal *tmp220 *tmp219 false
-    * jump *label144 equal *tmp220 false
+  492 jump *label144 notEqual *tmp219 false
   493 op sub *tmp221 :moveTo:radius 0.5
   494 ucontrol approach :moveTo:x :moveTo:y *tmp221
   495 label *label143
 
   505 label *label148
   506 label *label149
   507 sensor *tmp224 @unit @firstItem
-    * op notEqual *tmp225 *tmp224 null
-    * jump *label152 equal *tmp225 false
+  508 jump *label152 equal *tmp224 null
   509 ucontrol itemDrop @air 1000
   510 jump *label153 always
   511 label *label152
 
   513 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   514 label *label150
   515 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp227
-    * op equal *tmp228 *tmp227 false
-    * jump *label149 notEqual *tmp228 false
+  516 jump *label149 equal *tmp227 false
   517 label *label151
   518 label *label147
   519 return :moveToEmpty*retaddr
 
   521 label *label17
   522 label *label155
   523 sensor *tmp229 @unit @firstItem
-    * op notEqual *tmp230 *tmp229 null
-    * jump *label157 equal *tmp230 false
+  524 jump *label157 equal *tmp229 null
   525 ucontrol itemDrop @air 1000
   526 label *label156
   527 jump *label155 always
 
   547 call *label11 *invalid :status3*retval (m:*label161) (h:*label161)
   548 label *label161
   549 sensor *tmp233 @unit @firstItem
-    * op equal *tmp234 *tmp233 :depositItems:item
-    * jump *label162 equal *tmp234 false
+  550 jump *label162 notEqual *tmp233 :depositItems:item
   551 set :moveToBlock:block :depositItems:block
   552 set :moveToBlock:radius 6
   553 setaddr :moveToBlock*retaddr *label164 (h:*label164)
 
   560 sensor *tmp237 @unit @firstItem
   561 op mul *tmp238 *tmp237 :depositItems:cap
   562 sensor *tmp239 :depositItems:block :depositItems:item
-    * op greaterThan *tmp240 *tmp238 *tmp239
-    * jump *label165 notEqual *tmp240 false
+  563 jump *label165 greaterThan *tmp238 *tmp239
   564 label *label167
   565 jump *label163 always
   566 label *label162
   567 label *label168
   568 sensor *tmp241 @unit @firstItem
-    * op notEqual *tmp242 *tmp241 null
-    * jump *label170 equal *tmp242 false
+  569 jump *label170 equal *tmp241 null
   570 ucontrol itemDrop @air 1000
   571 label *label169
   572 jump *label168 always
 
   582 end
   583 label *label20
   584 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 0
-    * op equal *tmp245 *tmp243 false
-    * jump *label173 equal *tmp245 false
+  585 jump *label173 notEqual *tmp243 false
   586 set :error:error "Cannot locate ore"
   587 setaddr :error*retaddr *label175 (h:*label175)
   588 call *label13 *invalid :error*retval (m:*label175) (h:*label175)
 
   612 call *label16 *invalid :moveToEmpty*retval (m:*label179) (h:*label179)
   613 label *label179
   614 sensor *tmp248 @unit @firstItem
-    * op notEqual *tmp249 *tmp248 :mineOre:ore
-    * jump *label180 equal *tmp249 false
+  615 jump *label180 equal *tmp248 :mineOre:ore
   616 setaddr :dropAll*retaddr *label182 (h:*label182)
   617 call *label17 *invalid :dropAll*retval (m:*label182) (h:*label182)
   618 label *label182
 
   635 label *label187
   636 label *label188
   637 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp257 @second :mineOre:stop
-    * jump *label189 equal *tmp257 false
+  638 jump *label189 lessThanEq @second :mineOre:stop
   639 jump *label186 always
   640 jump *label190 always
   641 label *label189
   642 label *label190
   643 label *label185
   644 sensor *tmp259 @unit @totalItems
-    * op lessThan *tmp260 *tmp259 :mineOre:amount
-    * jump *label184 notEqual *tmp260 false
+  645 jump *label184 lessThan *tmp259 :mineOre:amount
   646 label *label186
   647 ucontrol unbind
   648 set :depositItems:block :mineOre:block
 
   728 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   729 sensor *tmp276 :supplyBlock:block :supplyBlock:ore
   730 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp276
-    * op greaterThan *tmp278 :supplyBlock:missing 0
-    * jump *label208 equal *tmp278 false
+  731 jump *label208 lessThanEq :supplyBlock:missing 0
   732 set :mineOre:ore :supplyBlock:ore
   733 set :mineOre:amount :supplyBlock:blockCapacity
   734 set :mineOre:block :supplyBlock:block
 
   860 jump *label225 always
   861 label *label224
   862 read *tmp96 .controller ".monos"
-    * op greaterThan *tmp328 *tmp96 3
-    * jump *label230 equal *tmp328 false
+  863 jump *label230 lessThanEq *tmp96 3
   864 set :status1:text "Phase 1: supplying base"
   865 setaddr :status1*retaddr *label233 (h:*label233)
   866 call *label9 *invalid :status1*retval (m:*label233) (h:*label233)
 
   873 jump *label231 always
   874 label *label230
   875 set :supplyBase0:supplied false
-    * op equal *tmp330 .unloader1 null
-    * jump *label236 equal *tmp330 false
+  876 jump *label236 notEqual .unloader1 null
   877 sensor *tmp332 .core @graphite
-    * op lessThan *tmp333 *tmp332 .targetGraphite
-    * jump *label238 equal *tmp333 false
+  878 jump *label238 greaterThanEq *tmp332 .targetGraphite
   879 sensor *tmp335 .press @coal
-    * op lessThan *tmp336 *tmp335 5
-    * jump *label240 equal *tmp336 false
+  880 jump *label240 greaterThanEq *tmp335 5
   881 set :status1:text "Goal 1: graphite requirement"
   882 setaddr :status1*retaddr *label242 (h:*label242)
   883 call *label9 *invalid :status1*retval (m:*label242) (h:*label242)
 
   895 label *label238
   896 label *label239
   897 sensor *tmp338 .core @silicon
-    * op lessThan *tmp339 *tmp338 .targetSilicon
-    * jump *label244 equal *tmp339 false
+  898 jump *label244 greaterThanEq *tmp338 .targetSilicon
   899 sensor *tmp341 .smelter @coal
-    * op lessThan *tmp342 *tmp341 5
-    * jump *label246 equal *tmp342 false
+  900 jump *label246 greaterThanEq *tmp341 5
   901 set :status1:text "Goal 2: coal for silicon requirement"
   902 setaddr :status1*retaddr *label248 (h:*label248)
   903 call *label9 *invalid :status1*retval (m:*label248) (h:*label248)
 
   911 jump *label247 always
   912 label *label246
   913 sensor *tmp344 .smelter @sand
-    * op lessThan *tmp345 *tmp344 5
-    * jump *label250 equal *tmp345 false
+  914 jump *label250 greaterThanEq *tmp344 5
   915 set :status1:text "Goal 3: sand for silicon requirement"
   916 setaddr :status1*retaddr *label252 (h:*label252)
   917 call *label9 *invalid :status1*retval (m:*label252) (h:*label252)
 
   930 label *label244
   931 label *label245
   932 sensor *tmp347 .battery @totalPower
-    * op lessThan *tmp348 *tmp347 .powerTarget
-    * jump *label254 equal *tmp348 false
+  933 jump *label254 greaterThanEq *tmp347 .powerTarget
   934 sensor *tmp350 .generator @coal
-    * op lessThan *tmp351 *tmp350 2
-    * jump *label256 equal *tmp351 false
+  935 jump *label256 greaterThanEq *tmp350 2
   936 set :status1:text "Goal 4: supplying generator"
   937 setaddr :status1*retaddr *label258 (h:*label258)
   938 call *label9 *invalid :status1*retval (m:*label258) (h:*label258)
 
   953 label *label236
   954 label *label237
   955 sensor *tmp353 .core @titanium
-    * op lessThan *tmp354 *tmp353 .targetTitanium
-    * jump *label260 equal *tmp354 false
+  956 jump *label260 greaterThanEq *tmp353 .targetTitanium
   957 sensor *tmp356 .core @titanium
   958 op sub *tmp357 .targetTitanium *tmp356
   959 op min *tmp355 7 *tmp357
 
   963 label *label261
   964 set :supplyBase0:titaniumTrigger *tmp355
   965 sensor *tmp359 .titaniumDrill @titanium
-    * op lessThan *tmp360 *tmp359 :supplyBase0:titaniumTrigger
-    * jump *label262 equal *tmp360 false
-    * op equal *tmp362 :supplyBase0:supplied false
-    * jump *label264 equal *tmp362 false
+  966 jump *label262 greaterThanEq *tmp359 :supplyBase0:titaniumTrigger
+  967 jump *label264 notEqual :supplyBase0:supplied false
   968 sensor *tmp364 .battery @totalPower
   969 op mul *tmp365 .unloader1 .powerTarget
-    * op lessThan *tmp366 *tmp364 *tmp365
-    * jump *label266 equal *tmp366 false
+  970 jump *label266 greaterThanEq *tmp364 *tmp365
   971 set :status1:text "Goal 5: supplying generator"
   972 setaddr :status1*retaddr *label268 (h:*label268)
   973 call *label9 *invalid :status1*retval (m:*label268) (h:*label268)
 
   979 jump *label267 always
   980 label *label266
   981 sensor *tmp368 .core @silicon
-    * op lessThan *tmp369 *tmp368 .targetSilicon
-    * jump *label270 equal *tmp369 false
+  982 jump *label270 greaterThanEq *tmp368 .targetSilicon
   983 set :status1:text "Goal 6: silicon requirement"
   984 setaddr :status1*retaddr *label272 (h:*label272)
   985 call *label9 *invalid :status1*retval (m:*label272) (h:*label272)
   986 label *label272
   987 sensor :supplyBase0:coal .core @coal
   988 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp373 :supplyBase0:coal :supplyBase0:sand
-    * jump *label273 equal *tmp373 false
+  989 jump *label273 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   990 set *tmp374 @coal
   991 jump *label274 always
   992 label *label273
 
  1000 jump *label271 always
  1001 label *label270
  1002 sensor *tmp375 .core @copper
-    * op lessThan *tmp376 *tmp375 .targetCopper
-    * jump *label276 equal *tmp376 false
+ 1003 jump *label276 greaterThanEq *tmp375 .targetCopper
  1004 set :status1:text "Goal 7: copper requirement"
  1005 setaddr :status1*retaddr *label278 (h:*label278)
  1006 call *label9 *invalid :status1*retval (m:*label278) (h:*label278)
 
  1012 jump *label277 always
  1013 label *label276
  1014 sensor *tmp378 .core @lead
-    * op lessThan *tmp379 *tmp378 .targetLead
-    * jump *label280 equal *tmp379 false
+ 1015 jump *label280 greaterThanEq *tmp378 .targetLead
  1016 set :status1:text "Goal 8: lead requirement"
  1017 setaddr :status1*retaddr *label282 (h:*label282)
  1018 call *label9 *invalid :status1*retval (m:*label282) (h:*label282)
 
  1024 jump *label281 always
  1025 label *label280
  1026 sensor *tmp381 .core @metaglass
-    * op lessThan *tmp382 *tmp381 .targetMetaglass
-    * jump *label284 equal *tmp382 false
+ 1027 jump *label284 greaterThanEq *tmp381 .targetMetaglass
  1028 set :status1:text "Goal 9: metaglass requirement"
  1029 setaddr :status1*retaddr *label286 (h:*label286)
  1030 call *label9 *invalid :status1*retval (m:*label286) (h:*label286)
 
  1041 label *label288
  1042 sensor :supplyBase0:coal.1 .core @coal
  1043 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp386 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label289 equal *tmp386 false
+ 1044 jump *label289 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
  1045 set *tmp387 @coal
  1046 jump *label290 always
  1047 label *label289
 
  1148 write *tmp401 .controller ".graphiteReserve"
  1149 label *label305
  1150 sensor *tmp403 .core @copper
-    * op lessThan *tmp404 *tmp403 .targetCopper
-    * jump *label309 equal *tmp404 false
+ 1151 jump *label309 greaterThanEq *tmp403 .targetCopper
  1152 set *tmp402 false
  1153 jump *label308 always
  1154 jump *label310 always
  1155 label *label309
  1156 label *label310
  1157 sensor *tmp406 .core @lead
-    * op lessThan *tmp407 *tmp406 .targetLead
-    * jump *label311 equal *tmp407 false
+ 1158 jump *label311 greaterThanEq *tmp406 .targetLead
  1159 set *tmp402 false
  1160 jump *label308 always
  1161 jump *label312 always
  1162 label *label311
  1163 label *label312
  1164 sensor *tmp409 .core @graphite
-    * op lessThan *tmp410 *tmp409 .targetGraphite
-    * jump *label313 equal *tmp410 false
+ 1165 jump *label313 greaterThanEq *tmp409 .targetGraphite
  1166 set *tmp402 false
  1167 jump *label308 always
  1168 jump *label314 always
  1169 label *label313
  1170 label *label314
  1171 sensor *tmp412 .core @silicon
-    * op lessThan *tmp413 *tmp412 .targetSilicon
-    * jump *label315 equal *tmp413 false
+ 1172 jump *label315 greaterThanEq *tmp412 .targetSilicon
  1173 set *tmp402 false
  1174 jump *label308 always
  1175 jump *label316 always
  1176 label *label315
  1177 label *label316
  1178 sensor *tmp415 .core @titanium
-    * op lessThan *tmp416 *tmp415 .targetTitanium
-    * jump *label317 equal *tmp416 false
+ 1179 jump *label317 greaterThanEq *tmp415 .targetTitanium
  1180 set *tmp402 false
  1181 jump *label308 always
  1182 jump *label318 always
  1183 label *label317
  1184 label *label318
  1185 sensor *tmp418 .core @metaglass
-    * op lessThan *tmp419 *tmp418 .targetMetaglass
-    * jump *label319 equal *tmp419 false
+ 1186 jump *label319 greaterThanEq *tmp418 .targetMetaglass
  1187 set *tmp402 false
  1188 jump *label308 always
  1189 jump *label320 always
  1190 label *label319
  1191 label *label320
  1192 sensor *tmp421 .core @thorium
-    * op lessThan *tmp422 *tmp421 .targetThorium
-    * jump *label321 equal *tmp422 false
+ 1193 jump *label321 greaterThanEq *tmp421 .targetThorium
  1194 set *tmp402 false
  1195 jump *label308 always
  1196 jump *label322 always
 
  1200 jump *label308 always
  1201 set *tmp402 null
  1202 label *label308
-    * op equal *tmp424 *tmp402 false
-    * jump *label307 equal *tmp424 false
+ 1203 jump *label307 notEqual *tmp402 false
  1204 setaddr :supplyBase*retaddr *label323 (h:*label323)
  1205 call *label32 *invalid :supplyBase*retval (m:*label323) (h:*label323)
  1206 label *label323
 
  1241 end
  1242 label *label35
  1243 op add *tmp447 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp448 *tmp447 0
-    * jump *label331 equal *tmp448 false
+ 1244 jump *label331 lessThanEq *tmp447 0
  1245 set :unpackCfg:cfg :buildRemoteBlock:cfg
  1246 setaddr :unpackCfg*retaddr *label333 (h:*label333)
  1247 call *label31 *invalid :unpackCfg*retval (m:*label333) (h:*label333)

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-28 instructions):
 
    80 setaddr :error*retaddr *label55 (h:*label55)
    81 call *label13 *invalid :error*retval (m:*label55) (h:*label55)
    82 label *label55
-    * jump *label54 always
    83 label *label53
    84 label *label54
    85 write @pneumatic-drill .display ".nextBlock"
 
   165 sensor *tmp154 .battery @totalPower
   166 jump *label71 greaterThanEq *tmp154 300
   167 jump *label69 always
-    * jump *label72 always
   168 label *label71
   169 label *label72
   170 label *label68
 
   332 setaddr :error*retaddr *label109 (h:*label109)
   333 call *label13 *invalid :error*retval (m:*label109) (h:*label109)
   334 label *label109
-    * jump *label108 always
   335 label *label107
   336 label *label108
   337 write @laser-drill .blockBuilder ":buildBlockAt:block"
 
   394 set .thoriumContainer :buildRemoteBlock*retval
   395 jump *label118 notEqual .thoriumContainer null
   396 set .thoriumContainer .thoriumDrill
-    * jump *label119 always
   397 label *label118
   398 label *label119
   399 write .thoriumDrill .display ".thoriumDrill"
 
   503 sensor *tmp224 @unit @firstItem
   504 jump *label152 equal *tmp224 null
   505 ucontrol itemDrop @air 1000
-    * jump *label153 always
   506 label *label152
   507 label *label153
   508 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
   582 setaddr :error*retaddr *label175 (h:*label175)
   583 call *label13 *invalid :error*retval (m:*label175) (h:*label175)
   584 label *label175
-    * jump *label174 always
   585 label *label173
   586 label *label174
   587 label *label172
 
   610 setaddr :dropAll*retaddr *label182 (h:*label182)
   611 call *label17 *invalid :dropAll*retval (m:*label182) (h:*label182)
   612 label *label182
-    * jump *label181 always
   613 label *label180
   614 label *label181
   615 set :status3:text "Mining..."
 
   624 op land *tmp255 *tmp253 *tmp254
   625 jump *label187 equal *tmp255 false
   626 jump *label186 always
-    * jump *label188 always
   627 label *label187
   628 label *label188
   629 ucontrol mine :mineOre:x :mineOre:y
   630 jump *label189 lessThanEq @second :mineOre:stop
   631 jump *label186 always
-    * jump *label190 always
   632 label *label189
   633 label *label190
   634 label *label185
 
   691 op land *tmp269 *tmp267 *tmp268
   692 jump *label203 equal *tmp269 false
   693 ucontrol itemDrop @air 1000
-    * jump *label204 always
   694 label *label203
   695 label *label204
   696 label *label201
 
   725 setaddr :mineOre*retaddr *label210 (h:*label210)
   726 call *label21 *invalid :mineOre*retval (m:*label210) (h:*label210)
   727 label *label210
-    * jump *label209 always
   728 label *label208
   729 label *label209
   730 label *label206
 
   759 op land *tmp285 *tmp283 *tmp284
   760 jump *label219 equal *tmp285 false
   761 ucontrol itemDrop @air 1000
-    * jump *label220 always
   762 label *label219
   763 label *label220
   764 label *label217
 
   876 call *label24 *invalid :supplyBlock*retval (m:*label243) (h:*label243)
   877 label *label243
   878 set :supplyBase0:supplied true
-    * jump *label241 always
   879 label *label240
   880 label *label241
-    * jump *label239 always
   881 label *label238
   882 label *label239
   883 sensor *tmp338 .core @silicon
 
   908 call *label24 *invalid :supplyBlock*retval (m:*label253) (h:*label253)
   909 label *label253
   910 set :supplyBase0:supplied true
-    * jump *label251 always
   911 label *label250
   912 label *label251
   913 label *label247
-    * jump *label245 always
   914 label *label244
   915 label *label245
   916 sensor *tmp347 .battery @totalPower
 
   927 call *label24 *invalid :supplyBlock*retval (m:*label259) (h:*label259)
   928 label *label259
   929 set :supplyBase0:supplied true
-    * jump *label257 always
   930 label *label256
   931 label *label257
-    * jump *label255 always
   932 label *label254
   933 label *label255
-    * jump *label237 always
   934 label *label236
   935 label *label237
   936 sensor *tmp353 .core @titanium
 
  1038 label *label277
  1039 label *label271
  1040 label *label267
-    * jump *label265 always
  1041 label *label264
  1042 label *label265
  1043 jump *label263 always
 
  1131 jump *label309 greaterThanEq *tmp403 .targetCopper
  1132 set *tmp402 false
  1133 jump *label308 always
-    * jump *label310 always
  1134 label *label309
  1135 label *label310
  1136 sensor *tmp406 .core @lead
  1137 jump *label311 greaterThanEq *tmp406 .targetLead
  1138 set *tmp402 false
  1139 jump *label308 always
-    * jump *label312 always
  1140 label *label311
  1141 label *label312
  1142 sensor *tmp409 .core @graphite
  1143 jump *label313 greaterThanEq *tmp409 .targetGraphite
  1144 set *tmp402 false
  1145 jump *label308 always
-    * jump *label314 always
  1146 label *label313
  1147 label *label314
  1148 sensor *tmp412 .core @silicon
  1149 jump *label315 greaterThanEq *tmp412 .targetSilicon
  1150 set *tmp402 false
  1151 jump *label308 always
-    * jump *label316 always
  1152 label *label315
  1153 label *label316
  1154 sensor *tmp415 .core @titanium
  1155 jump *label317 greaterThanEq *tmp415 .targetTitanium
  1156 set *tmp402 false
  1157 jump *label308 always
-    * jump *label318 always
  1158 label *label317
  1159 label *label318
  1160 sensor *tmp418 .core @metaglass
  1161 jump *label319 greaterThanEq *tmp418 .targetMetaglass
  1162 set *tmp402 false
  1163 jump *label308 always
-    * jump *label320 always
  1164 label *label319
  1165 label *label320
  1166 sensor *tmp421 .core @thorium
  1167 jump *label321 greaterThanEq *tmp421 .targetThorium
  1168 set *tmp402 false
  1169 jump *label308 always
-    * jump *label322 always
  1170 label *label321
  1171 label *label322
  1172 set *tmp402 true
 
  1245 label *label334
  1246 set :buildRemoteBlock*retval :buildBlock*retval
  1247 jump *label330 always
-    * jump *label332 always
  1248 label *label331
  1249 label *label332
  1250 set :buildRemoteBlock*retval false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-8 instructions):
 
     8 set .smelter null
     9 set .titaniumDrill null
    10 set .unloader1 null
-    * set .kiln null
-    * set .thoriumDrill null
    11 set .thoriumContainer null
    12 set .thoriumGenerator null
    13 set .leadSurplus 0
 
    52 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
    53 label *label49
    54 set :buildFirstTitaniumDrill:cfg "w**5#-#####"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   55 set :meetTarget.1:cfg "w**5#-#####"
    56 setaddr :meetTarget.1*retaddr *label51 (h:*label51)
    57 call *label38 *invalid :meetTarget.1*retval (m:*label51) (h:*label51)
    58 label *label51
-    * write @titanium .display ".nextBlock"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 2 .oreLocator ":findDrillLocation:size"
-    * write 4 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+   59 write @titanium processor1 ".nextBlock"
+   60 write .coreX processor4 ":findDrillLocation:x"
+   61 write .coreY processor4 ":findDrillLocation:y"
+   62 write @unit processor4 ":findDrillLocation:unit"
+   63 write @titanium processor4 ":findDrillLocation:item"
+   64 write @ore-titanium processor4 ":findDrillLocation:ore"
+   65 write 2 processor4 ":findDrillLocation:size"
+   66 write 4 processor4 ":findDrillLocation:limit"
+   67 write false processor4 ":findDrillLocation*finished"
+   68 write 1 processor4 "@counter"
    69 label *label52
    70 wait 1e-15
-    * read *tmp139 .oreLocator ":findDrillLocation*finished"
+   71 read *tmp139 processor4 ":findDrillLocation*finished"
    72 jump *label52 equal *tmp139 false
-    * read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
-    * read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
-    * read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
+   73 read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocation:dx"
+   74 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
+   75 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    76 jump *label53 notEqual :buildFirstTitaniumDrill:result false
    77 set :error:error "Cannot locate spot for titanium drill"
    78 setaddr :error*retaddr *label55 (h:*label55)
 
    80 label *label55
    81 label *label53
    82 label *label54
-    * write @pneumatic-drill .display ".nextBlock"
-    * write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
-    * write :buildFirstTitaniumDrill:dy .blockBuilder ":buildFirstTitaniumDrillAt:y"
-    * write false .blockBuilder ":buildFirstTitaniumDrillAt*finished"
-    * write 2 .blockBuilder "@counter"
+   83 write @pneumatic-drill processor1 ".nextBlock"
+   84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
+   85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
+   86 write false processor5 ":buildFirstTitaniumDrillAt*finished"
+   87 write 2 processor5 "@counter"
    88 label *label56
    89 wait 1e-15
-    * read *tmp145 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
+   90 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label56 equal *tmp145 false
-    * read *tmp128 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
+   92 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
    93 jump *label50 always
-    * set *tmp128 null
    94 label *label50
    95 set .titaniumDrill *tmp128
-    * write .titaniumDrill .display ".titaniumDrill"
+   96 write *tmp128 processor1 ".titaniumDrill"
    97 set :buildBlockFromCfg.1:cfg "*,###A<###"
    98 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
    99 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
 
   114 call *label36 *invalid :buildBlockFromCfg*retval (m:*label60) (h:*label60)
   115 label *label60
   116 set .controller :buildBlockFromCfg*retval
-    * write processor6 .controller ".timer"
-    * write .display .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
-    * write .battery .controller ".battery"
-    * write .generator .controller ".generator"
-    * write .smelter .controller ".smelter"
-    * write .press .controller ".press"
-    * write .unloader1 .controller ".unloader1"
+  117 write processor6 :buildBlockFromCfg*retval ".timer"
+  118 write processor1 :buildBlockFromCfg*retval ".display"
+  119 write .core :buildBlockFromCfg*retval ".core"
+  120 write bank1 :buildBlockFromCfg*retval ".bank"
+  121 write .battery :buildBlockFromCfg*retval ".battery"
+  122 write .generator :buildBlockFromCfg*retval ".generator"
+  123 write .smelter :buildBlockFromCfg*retval ".smelter"
+  124 write .press :buildBlockFromCfg*retval ".press"
+  125 write .unloader1 :buildBlockFromCfg*retval ".unloader1"
   126 set :buildBlockFromCfg.1:cfg "g)'%)######"
   127 setaddr :buildBlockFromCfg.1*retaddr *label61 (h:*label61)
   128 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label61) (h:*label61)
 
   137 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
   138 label *label63
   139 set :factory :buildBlockFromCfg.1*retval
-    * write :factory .controller ".factory"
-    * write :factory .display ".airFactory"
+  140 write :buildBlockFromCfg.1*retval .controller ".factory"
+  141 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   142 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
-    * write :setFlareTarget:target .display ".flareTarget"
+  143 write 1 .controller ".flareTarget"
+  144 write 1 processor1 ".flareTarget"
   145 label *label64
   146 set :setMonoTarget:target 3
-    * write :setMonoTarget:target .controller ".monoTarget"
-    * write :setMonoTarget:target .display ".monoTarget"
+  147 write 3 .controller ".monoTarget"
+  148 write 3 processor1 ".monoTarget"
   149 label *label65
   150 write 85 .controller ".pressTarget"
   151 write 150 .controller ".smelterTarget"
   152 write 30 .controller ".kilnTarget"
   153 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  154 set .siliconSurplus 20
   155 setaddr :buildUnits*retaddr *label66 (h:*label66)
   156 call *label40 *invalid :buildUnits*retval (m:*label66) (h:*label66)
   157 label *label66
 
   182 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
   183 label *label75
   184 set .kiln :buildBlockFromCfg.1*retval
-    * write .kiln .controller ".kiln"
+  185 write :buildBlockFromCfg.1*retval .controller ".kiln"
   186 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   187 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   188 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
 
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   226 label *label84
   227 set :reconstructor :buildBlockFromCfg.1*retval
-    * write :reconstructor .controller ".reconstructor"
-    * write :reconstructor .display ".reconstructor"
+  228 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
+  229 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   230 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
   231 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   232 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
 
   237 set .siliconSurplus 1000
   238 set .metaglassSurplus 200
   239 set :setPolyTarget:target 6
-    * write :setPolyTarget:target .controller ".polyTarget"
-    * write :setPolyTarget:target .display ".polyTarget"
+  240 write 6 .controller ".polyTarget"
+  241 write 6 processor1 ".polyTarget"
   242 label *label87
   243 set :buildBlockFromCfg.1:cfg "%-)A<######"
   244 setaddr :buildBlockFromCfg.1*retaddr *label88 (h:*label88)
 
   263 jump *label91 always
   264 label *label93
   265 set :setFlareTarget.1:target 3
-    * write :setFlareTarget.1:target .controller ".flareTarget"
-    * write :setFlareTarget.1:target .display ".flareTarget"
+  266 write 3 .controller ".flareTarget"
+  267 write 3 processor1 ".flareTarget"
   268 label *label95
   269 label *label96
   270 read *tmp95 .controller ".flares"
 
   276 jump *label96 always
   277 label *label98
   278 set :setMonoTarget.1:target 8
-    * write :setMonoTarget.1:target .controller ".monoTarget"
-    * write :setMonoTarget.1:target .display ".monoTarget"
+  279 write 8 .controller ".monoTarget"
+  280 write 8 processor1 ".monoTarget"
   281 label *label100
-    * write @ore-titanium .display ".nextBlock"
+  282 write @ore-titanium processor1 ".nextBlock"
   283 wait 0.000000001
   284 ubind @flare
-    * read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 4 .oreLocator ":findDrillLocation:size"
-    * write 1000000000 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+  285 read :blocksBuildTitaniumDrills:current processor4 ".locations"
+  286 write .coreX processor4 ":findDrillLocation:x"
+  287 write .coreY processor4 ":findDrillLocation:y"
+  288 write @unit processor4 ":findDrillLocation:unit"
+  289 write @titanium processor4 ":findDrillLocation:item"
+  290 write @ore-titanium processor4 ":findDrillLocation:ore"
+  291 write 4 processor4 ":findDrillLocation:size"
+  292 write 1000000000 processor4 ":findDrillLocation:limit"
+  293 write false processor4 ":findDrillLocation*finished"
+  294 write 1 processor4 "@counter"
   295 ubind .builder
-    * write .controller .blockBuilder ":buildTitaniumDrills:aController"
-    * write :blocksBuildTitaniumDrills:current .blockBuilder ":buildTitaniumDrills:current"
-    * write false .blockBuilder ":buildTitaniumDrills*finished"
-    * write 3 .blockBuilder "@counter"
+  296 write .controller processor5 ":buildTitaniumDrills:aController"
+  297 write :blocksBuildTitaniumDrills:current processor5 ":buildTitaniumDrills:current"
+  298 write false processor5 ":buildTitaniumDrills*finished"
+  299 write 3 processor5 "@counter"
   300 label *label102
   301 wait 1e-15
-    * read *tmp187 .blockBuilder ":buildTitaniumDrills*finished"
+  302 read *tmp187 processor5 ":buildTitaniumDrills*finished"
   303 jump *label102 equal *tmp187 false
-    * write false .oreLocator ":stopLocation*finished"
-    * write 3 .oreLocator "@counter"
+  304 write false processor4 ":stopLocation*finished"
+  305 write 3 processor4 "@counter"
   306 label *label101
-    * write null .display ".nextBlock"
-    * write .coreX .oreLocator ":layoutThoriumDrill:x"
-    * write .coreY .oreLocator ":layoutThoriumDrill:y"
-    * write @unit .oreLocator ":layoutThoriumDrill:unit"
-    * write 7 .oreLocator ":layoutThoriumDrill:limit"
-    * write false .oreLocator ":layoutThoriumDrill*finished"
-    * write 2 .oreLocator "@counter"
+  307 write null processor1 ".nextBlock"
+  308 write .coreX processor4 ":layoutThoriumDrill:x"
+  309 write .coreY processor4 ":layoutThoriumDrill:y"
+  310 write @unit processor4 ":layoutThoriumDrill:unit"
+  311 write 7 processor4 ":layoutThoriumDrill:limit"
+  312 write false processor4 ":layoutThoriumDrill*finished"
+  313 write 2 processor4 "@counter"
   314 label *label104
   315 wait 1e-15
-    * read *tmp192 .oreLocator ":layoutThoriumDrill*finished"
+  316 read *tmp192 processor4 ":layoutThoriumDrill*finished"
   317 jump *label104 equal *tmp192 false
   318 set :meetTarget.1:cfg "x**F#AA7###"
   319 setaddr :meetTarget.1*retaddr *label105 (h:*label105)
 
   321 label *label105
   322 label *label106
   323 wait 1e-15
-    * read *tmp194 .oreLocator ":layoutThoriumDrill*finished"
+  324 read *tmp194 processor4 ":layoutThoriumDrill*finished"
   325 jump *label106 equal *tmp194 false
-    * read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
+  326 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   327 jump *label107 notEqual :buildThoriumDrill:result false
   328 set :error:error "Cannot locate spot for thorium drill"
   329 setaddr :error*retaddr *label109 (h:*label109)
 
   331 label *label109
   332 label *label107
   333 label *label108
-    * write @laser-drill .blockBuilder ":buildBlockAt:block"
-    * read *tmp53 .oreLocator ".drillX"
-    * write *tmp53 .blockBuilder ":buildBlockAt:x"
-    * read *tmp54 .oreLocator ".drillY"
-    * write *tmp54 .blockBuilder ":buildBlockAt:y"
-    * write null .blockBuilder ":buildBlockAt:rotation"
-    * write 0 .blockBuilder ":buildBlockAt:config"
-    * write false .blockBuilder ":buildBlockAt*finished"
-    * write 1 .blockBuilder "@counter"
+  334 write @laser-drill processor5 ":buildBlockAt:block"
+  335 read *tmp53 processor4 ".drillX"
+  336 write *tmp53 processor5 ":buildBlockAt:x"
+  337 read *tmp54 processor4 ".drillY"
+  338 write *tmp54 processor5 ":buildBlockAt:y"
+  339 write null processor5 ":buildBlockAt:rotation"
+  340 write 0 processor5 ":buildBlockAt:config"
+  341 write false processor5 ":buildBlockAt*finished"
+  342 write 1 processor5 "@counter"
   343 label *label110
   344 wait 1e-15
-    * read *tmp203 .blockBuilder ":buildBlockAt*finished"
+  345 read *tmp203 processor5 ":buildBlockAt*finished"
   346 jump *label110 equal *tmp203 false
-    * read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
+  347 read .thoriumDrill processor5 ":buildBlockAt*retval"
   348 set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read :buildRemoteBlock:x .oreLocator ".water1X"
-    * read :buildRemoteBlock:y .oreLocator ".water1Y"
+  349 read :buildRemoteBlock:x processor4 ".water1X"
+  350 read :buildRemoteBlock:y processor4 ".water1Y"
   351 setaddr :buildRemoteBlock*retaddr *label111 (h:*label111)
   352 call *label35 *invalid :buildRemoteBlock*retval (m:*label111) (h:*label111)
   353 label *label111
-    * set :buildRemoteBlock:cfg "z%-AAA##A##"
-    * read :buildRemoteBlock:x .oreLocator ".water2X"
-    * read :buildRemoteBlock:y .oreLocator ".water2Y"
+  354 read :buildRemoteBlock:x processor4 ".water2X"
+  355 read :buildRemoteBlock:y processor4 ".water2Y"
   356 setaddr :buildRemoteBlock*retaddr *label112 (h:*label112)
   357 call *label35 *invalid :buildRemoteBlock*retval (m:*label112) (h:*label112)
   358 label *label112
   359 set :buildRemoteBlock:cfg "o%+FK<A####"
-    * read :buildRemoteBlock:x .oreLocator ".generatorX"
-    * read :buildRemoteBlock:y .oreLocator ".generatorY"
+  360 read :buildRemoteBlock:x processor4 ".generatorX"
+  361 read :buildRemoteBlock:y processor4 ".generatorY"
   362 setaddr :buildRemoteBlock*retaddr *label113 (h:*label113)
   363 call *label35 *invalid :buildRemoteBlock*retval (m:*label113) (h:*label113)
   364 label *label113
   365 set .thoriumGenerator :buildRemoteBlock*retval
   366 set :buildRemoteBlock:cfg "g)'%)######"
-    * read :buildRemoteBlock:x .oreLocator ".nodeX"
-    * read :buildRemoteBlock:y .oreLocator ".nodeY"
+  367 read :buildRemoteBlock:x processor4 ".nodeX"
+  368 read :buildRemoteBlock:y processor4 ".nodeY"
   369 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   370 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   371 label *label114
   372 set :buildRemoteBlock:cfg "r**#-#+####"
-    * read :buildRemoteBlock:x .oreLocator ".panelX"
-    * read :buildRemoteBlock:y .oreLocator ".panelY"
+  373 read :buildRemoteBlock:x processor4 ".panelX"
+  374 read :buildRemoteBlock:y processor4 ".panelY"
   375 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   376 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   377 label *label115
   378 set :buildRemoteBlock:cfg "k*/(7######"
-    * read :buildRemoteBlock:x .oreLocator ".batteryX"
-    * read :buildRemoteBlock:y .oreLocator ".batteryY"
+  379 read :buildRemoteBlock:x processor4 ".batteryX"
+  380 read :buildRemoteBlock:y processor4 ".batteryY"
   381 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   382 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   383 label *label116
   384 set :buildRemoteBlock:cfg "**#######"
-    * read :buildRemoteBlock:x .oreLocator ".containerX"
-    * read :buildRemoteBlock:y .oreLocator ".containerY"
+  385 read :buildRemoteBlock:x processor4 ".containerX"
+  386 read :buildRemoteBlock:y processor4 ".containerY"
   387 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   388 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   389 label *label117
   390 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label118 notEqual .thoriumContainer null
+  391 jump *label118 notEqual :buildRemoteBlock*retval null
   392 set .thoriumContainer .thoriumDrill
   393 label *label118
   394 label *label119
-    * write .thoriumDrill .display ".thoriumDrill"
-    * write .thoriumContainer .display ".thoriumContainer"
-    * write .thoriumContainer .polyController ":setThoriumContainer:container"
-    * write false .polyController ":setThoriumContainer*finished"
-    * write 3 .polyController "@counter"
+  395 write .thoriumDrill processor1 ".thoriumDrill"
+  396 write .thoriumContainer processor1 ".thoriumContainer"
+  397 write .thoriumContainer processor3 ":setThoriumContainer:container"
+  398 write false processor3 ":setThoriumContainer*finished"
+  399 write 3 processor3 "@counter"
   400 label *label120
   401 wait 1e-15
-    * read *tmp215 .polyController ":setThoriumContainer*finished"
+  402 read *tmp215 processor3 ":setThoriumContainer*finished"
   403 jump *label120 equal *tmp215 false
   404 label *label103
-    * write null .display ".nextBlock"
+  405 write null processor1 ".nextBlock"
   406 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
-    * write :setMegaTarget:target .display ".megaTarget"
+  407 write 1 .controller ".megaTarget"
+  408 write 1 processor1 ".megaTarget"
   409 label *label121
   410 label *label122
   411 read *tmp97 .controller ".polys"
 
   431 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label129) (h:*label129)
   432 label *label129
   433 set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
-    * write :buildMultiplicativeReconstructor:multiReconstructor .controller ".multiReconstructor"
-    * write :buildMultiplicativeReconstructor:multiReconstructor .display ".multiReconstructor"
+  434 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
+  435 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   436 label *label128
   437 setaddr :buildUnits*retaddr *label130 (h:*label130)
   438 call *label40 *invalid :buildUnits*retval (m:*label130) (h:*label130)
 
   596 label *label178
   597 set :mineOre:x :locateOre:x
   598 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+  599 set :moveToEmpty:x :locateOre:x
+  600 set :moveToEmpty:y :locateOre:y
   601 setaddr :moveToEmpty*retaddr *label179 (h:*label179)
   602 call *label16 *invalid :moveToEmpty*retval (m:*label179) (h:*label179)
   603 label *label179
 
   774 end
   775 label *label31
   776 set :unpackCfg:index 0
-    * set *tmp291 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  777 set *tmp291 0
+  778 op add :unpackCfg:index 0 1
   779 read *tmp292 :unpackCfg:cfg *tmp291
   780 op sub *tmp293 *tmp292 35
   781 lookup block :unpackCfg:type *tmp293
-    * set *tmp295 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  782 set *tmp295 1
+  783 op add :unpackCfg:index 1 1
   784 read *tmp296 :unpackCfg:cfg *tmp295
   785 op sub *tmp297 *tmp296 35
-    * op sub :unpackCfg:x *tmp297 7
-    * set *tmp299 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  786 op sub :unpackCfg:x *tmp296 42
+  787 set *tmp299 2
+  788 op add :unpackCfg:index 2 1
   789 read *tmp300 :unpackCfg:cfg *tmp299
   790 op sub *tmp301 *tmp300 35
-    * op sub :unpackCfg:y *tmp301 7
-    * set *tmp303 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  791 op sub :unpackCfg:y *tmp300 42
+  792 set *tmp303 3
+  793 op add :unpackCfg:index 3 1
   794 read *tmp304 :unpackCfg:cfg *tmp303
   795 op sub :unpackCfg:cu *tmp304 35
-    * set *tmp306 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  796 set *tmp306 4
+  797 op add :unpackCfg:index 4 1
   798 read *tmp307 :unpackCfg:cfg *tmp306
   799 op sub :unpackCfg:pb *tmp307 35
-    * set *tmp309 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  800 set *tmp309 5
+  801 op add :unpackCfg:index 5 1
   802 read *tmp310 :unpackCfg:cfg *tmp309
   803 op sub :unpackCfg:gr *tmp310 35
-    * set *tmp312 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  804 set *tmp312 6
+  805 op add :unpackCfg:index 6 1
   806 read *tmp313 :unpackCfg:cfg *tmp312
   807 op sub :unpackCfg:si *tmp313 35
-    * set *tmp315 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  808 set *tmp315 7
+  809 op add :unpackCfg:index 7 1
   810 read *tmp316 :unpackCfg:cfg *tmp315
   811 op sub :unpackCfg:ti *tmp316 35
-    * set *tmp318 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  812 set *tmp318 8
+  813 op add :unpackCfg:index 8 1
   814 read *tmp319 :unpackCfg:cfg *tmp318
   815 op sub :unpackCfg:mg *tmp319 35
-    * set *tmp321 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  816 set *tmp321 9
+  817 op add :unpackCfg:index 9 1
   818 read *tmp322 :unpackCfg:cfg *tmp321
   819 op sub :unpackCfg:th *tmp322 35
-    * set *tmp324 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  820 set *tmp324 10
+  821 op add :unpackCfg:index 10 1
   822 read *tmp325 :unpackCfg:cfg *tmp324
   823 op sub :unpackCfg:rotation *tmp325 35
   824 label *label222
 
   940 label *label261
   941 set :supplyBase0:titaniumTrigger *tmp355
   942 sensor *tmp359 .titaniumDrill @titanium
-    * jump *label262 greaterThanEq *tmp359 :supplyBase0:titaniumTrigger
+  943 jump *label262 greaterThanEq *tmp359 *tmp355
   944 jump *label264 notEqual :supplyBase0:supplied false
   945 sensor *tmp364 .battery @totalPower
   946 op mul *tmp365 .unloader1 .powerTarget
 
   970 set *tmp374 @sand
   971 label *label274
   972 set :supplyBase0:ore *tmp374
-    * set :mineOre.1:ore :supplyBase0:ore
+  973 set :mineOre.1:ore *tmp374
   974 setaddr :mineOre.1*retaddr *label275 (h:*label275)
   975 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
   976 label *label275
 
  1025 set *tmp387 @sand
  1026 label *label290
  1027 set :supplyBase0:ore.1 *tmp387
-    * set :mineOre.1:ore :supplyBase0:ore.1
+ 1028 set :mineOre.1:ore *tmp387
  1029 setaddr :mineOre.1*retaddr *label291 (h:*label291)
  1030 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
  1031 label *label291
 
  1113 op add *tmp394 :meetTarget:metaglass .metaglassSurplus
  1114 write *tmp394 .controller ".kilnTarget"
  1115 op add *tmp395 :meetTarget:lead .leadSurplus
-    * write *tmp395 .controller ".leadReserve"
+ 1116 write *tmp390 .controller ".leadReserve"
  1117 op sign *tmp396 :meetTarget:silicon
  1118 op mul *tmp397 *tmp396 20
  1119 op add *tmp398 :meetTarget:silicon *tmp397
 
  1167 label *label322
  1168 set *tmp402 true
  1169 jump *label308 always
-    * set *tmp402 null
  1170 label *label308
  1171 jump *label307 notEqual *tmp402 false
  1172 setaddr :supplyBase*retaddr *label323 (h:*label323)
 
  1203 jump *label329 equal *tmp445 false
  1204 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1205 jump *label327 always
-    * set :buildBlock*retval null
  1206 label *label327
  1207 return :buildBlock*retaddr
  1208 end
 
  1222 set :buildRemoteBlock:mg :unpackCfg:mg
  1223 set :buildRemoteBlock:th :unpackCfg:th
  1224 set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildBlock:block :buildRemoteBlock:type
+ 1225 set :buildBlock:block :unpackCfg:type
  1226 set :buildBlock:x :buildRemoteBlock:x
  1227 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+ 1228 set :buildBlock:copper :unpackCfg:cu
+ 1229 set :buildBlock:lead :unpackCfg:pb
+ 1230 set :buildBlock:graphite :unpackCfg:gr
+ 1231 set :buildBlock:silicon :unpackCfg:si
+ 1232 set :buildBlock:titanium :unpackCfg:ti
+ 1233 set :buildBlock:metaglass :unpackCfg:mg
+ 1234 set :buildBlock:thorium :unpackCfg:th
+ 1235 set :buildBlock:rotation :unpackCfg:rotation
  1236 set :buildBlock:config null
  1237 setaddr :buildBlock*retaddr *label334 (h:*label334)
  1238 call *label34 *invalid :buildBlock*retval (m:*label334) (h:*label334)
 
  1243 label *label332
  1244 set :buildRemoteBlock*retval false
  1245 jump *label330 always
-    * set :buildRemoteBlock*retval null
  1246 label *label330
  1247 return :buildRemoteBlock*retaddr
  1248 end
 
  1262 set :buildBlockFromCfg:mg :unpackCfg:mg
  1263 set :buildBlockFromCfg:th :unpackCfg:th
  1264 set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * op add *tmp450 .coreX :buildBlockFromCfg:x
-    * op add *tmp451 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+ 1265 op add *tmp450 .coreX :unpackCfg:x
+ 1266 op add *tmp451 .coreY :unpackCfg:y
+ 1267 set :buildBlock:block :unpackCfg:type
  1268 set :buildBlock:x *tmp450
  1269 set :buildBlock:y *tmp451
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+ 1270 set :buildBlock:copper :unpackCfg:cu
+ 1271 set :buildBlock:lead :unpackCfg:pb
+ 1272 set :buildBlock:graphite :unpackCfg:gr
+ 1273 set :buildBlock:silicon :unpackCfg:si
+ 1274 set :buildBlock:titanium :unpackCfg:ti
+ 1275 set :buildBlock:metaglass :unpackCfg:mg
+ 1276 set :buildBlock:thorium :unpackCfg:th
+ 1277 set :buildBlock:rotation :unpackCfg:rotation
  1278 set :buildBlock:config :buildBlockFromCfg:config
  1279 setaddr :buildBlock*retaddr *label337 (h:*label337)
  1280 call *label34 *invalid :buildBlock*retval (m:*label337) (h:*label337)
  1281 label *label337
  1282 set :buildBlockFromCfg*retval :buildBlock*retval
  1283 jump *label335 always
-    * set :buildBlockFromCfg*retval null
  1284 label *label335
  1285 return :buildBlockFromCfg*retaddr
  1286 end
 
  1307 set :meetTarget.1:ti :unpackCfg:ti
  1308 set :meetTarget.1:mg :unpackCfg:mg
  1309 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+ 1310 set :meetTarget:block :unpackCfg:type
+ 1311 set :meetTarget:copper :unpackCfg:cu
+ 1312 set :meetTarget:lead :unpackCfg:pb
+ 1313 set :meetTarget:graphite :unpackCfg:gr
+ 1314 set :meetTarget:silicon :unpackCfg:si
+ 1315 set :meetTarget:titanium :unpackCfg:ti
+ 1316 set :meetTarget:metaglass :unpackCfg:mg
+ 1317 set :meetTarget:thorium :unpackCfg:th
  1318 setaddr :meetTarget*retaddr *label342 (h:*label342)
  1319 call *label33 *invalid :meetTarget*retval (m:*label342) (h:*label342)
  1320 label *label342

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-59 instructions):
     0 set .ERROR ""
     1 set .display processor1
-    * set .polyController processor3
     2 set .blockBuilder processor5
-    * set .oreLocator processor4
     3 set .press null
     4 set .generator null
     5 set .battery null
 
    49 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
    51 label *label49
-    * set :buildFirstTitaniumDrill:cfg "w**5#-#####"
    52 set :meetTarget.1:cfg "w**5#-#####"
    53 setaddr :meetTarget.1*retaddr *label51 (h:*label51)
    54 call *label38 *invalid :meetTarget.1*retval (m:*label51) (h:*label51)
 
   133 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   134 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
   135 label *label63
-    * set :factory :buildBlockFromCfg.1*retval
   136 write :buildBlockFromCfg.1*retval .controller ".factory"
   137 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
-    * set :setFlareTarget:target 1
   138 write 1 .controller ".flareTarget"
   139 write 1 processor1 ".flareTarget"
   140 label *label64
-    * set :setMonoTarget:target 3
   141 write 3 .controller ".monoTarget"
   142 write 3 processor1 ".monoTarget"
   143 label *label65
 
   175 setaddr :buildBlockFromCfg.1*retaddr *label75 (h:*label75)
   176 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
   177 label *label75
-    * set .kiln :buildBlockFromCfg.1*retval
   178 write :buildBlockFromCfg.1*retval .controller ".kiln"
   179 set :buildBlockFromCfg.1:cfg "z%-AAA##A##"
   180 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
 
   217 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   218 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   219 label *label84
-    * set :reconstructor :buildBlockFromCfg.1*retval
   220 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
   221 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   222 set :buildBlockFromCfg.1:cfg "l/-#U#A7###"
 
   228 label *label86
   229 set .siliconSurplus 1000
   230 set .metaglassSurplus 200
-    * set :setPolyTarget:target 6
   231 write 6 .controller ".polyTarget"
   232 write 6 processor1 ".polyTarget"
   233 label *label87
 
   253 label *label92
   254 jump *label91 always
   255 label *label93
-    * set :setFlareTarget.1:target 3
   256 write 3 .controller ".flareTarget"
   257 write 3 processor1 ".flareTarget"
   258 label *label95
 
   265 label *label97
   266 jump *label96 always
   267 label *label98
-    * set :setMonoTarget.1:target 8
   268 write 8 .controller ".monoTarget"
   269 write 8 processor1 ".monoTarget"
   270 label *label100
 
   392 jump *label120 equal *tmp215 false
   393 label *label103
   394 write null processor1 ".nextBlock"
-    * set :setMegaTarget:target 1
   395 write 1 .controller ".megaTarget"
   396 write 1 processor1 ".megaTarget"
   397 label *label121
 
   418 setaddr :buildBlockFromCfg.1*retaddr *label129 (h:*label129)
   419 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label129) (h:*label129)
   420 label *label129
-    * set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
   421 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   422 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   423 label *label128
 
   760 return :supplyBlockFromCore*retaddr
   761 end
   762 label *label31
-    * set :unpackCfg:index 0
   763 set *tmp291 0
-    * op add :unpackCfg:index 0 1
-    * read *tmp292 :unpackCfg:cfg *tmp291
+  764 read *tmp292 :unpackCfg:cfg 0
   765 op sub *tmp293 *tmp292 35
   766 lookup block :unpackCfg:type *tmp293
   767 set *tmp295 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp296 :unpackCfg:cfg *tmp295
-    * op sub *tmp297 *tmp296 35
+  768 read *tmp296 :unpackCfg:cfg 1
   769 op sub :unpackCfg:x *tmp296 42
   770 set *tmp299 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp300 :unpackCfg:cfg *tmp299
-    * op sub *tmp301 *tmp300 35
+  771 read *tmp300 :unpackCfg:cfg 2
   772 op sub :unpackCfg:y *tmp300 42
   773 set *tmp303 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp304 :unpackCfg:cfg *tmp303
+  774 read *tmp304 :unpackCfg:cfg 3
   775 op sub :unpackCfg:cu *tmp304 35
   776 set *tmp306 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp307 :unpackCfg:cfg *tmp306
+  777 read *tmp307 :unpackCfg:cfg 4
   778 op sub :unpackCfg:pb *tmp307 35
   779 set *tmp309 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp310 :unpackCfg:cfg *tmp309
+  780 read *tmp310 :unpackCfg:cfg 5
   781 op sub :unpackCfg:gr *tmp310 35
   782 set *tmp312 6
-    * op add :unpackCfg:index 6 1
-    * read *tmp313 :unpackCfg:cfg *tmp312
+  783 read *tmp313 :unpackCfg:cfg 6
   784 op sub :unpackCfg:si *tmp313 35
   785 set *tmp315 7
-    * op add :unpackCfg:index 7 1
-    * read *tmp316 :unpackCfg:cfg *tmp315
+  786 read *tmp316 :unpackCfg:cfg 7
   787 op sub :unpackCfg:ti *tmp316 35
   788 set *tmp318 8
-    * op add :unpackCfg:index 8 1
-    * read *tmp319 :unpackCfg:cfg *tmp318
+  789 read *tmp319 :unpackCfg:cfg 8
   790 op sub :unpackCfg:mg *tmp319 35
   791 set *tmp321 9
-    * op add :unpackCfg:index 9 1
-    * read *tmp322 :unpackCfg:cfg *tmp321
+  792 read *tmp322 :unpackCfg:cfg 9
   793 op sub :unpackCfg:th *tmp322 35
   794 set *tmp324 10
-    * op add :unpackCfg:index 10 1
-    * read *tmp325 :unpackCfg:cfg *tmp324
+  795 read *tmp325 :unpackCfg:cfg 10
   796 op sub :unpackCfg:rotation *tmp325 35
   797 label *label222
   798 return :unpackCfg*retaddr
 
   911 label *label260
   912 set *tmp355 100
   913 label *label261
-    * set :supplyBase0:titaniumTrigger *tmp355
   914 sensor *tmp359 .titaniumDrill @titanium
   915 jump *label262 greaterThanEq *tmp359 *tmp355
   916 jump *label264 notEqual :supplyBase0:supplied false
 
   941 label *label273
   942 set *tmp374 @sand
   943 label *label274
-    * set :supplyBase0:ore *tmp374
   944 set :mineOre.1:ore *tmp374
   945 setaddr :mineOre.1*retaddr *label275 (h:*label275)
   946 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
 
   995 label *label289
   996 set *tmp387 @sand
   997 label *label290
-    * set :supplyBase0:ore.1 *tmp387
   998 set :mineOre.1:ore *tmp387
   999 setaddr :mineOre.1*retaddr *label291 (h:*label291)
  1000 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
 
  1082 write *tmp393 .controller ".smelterTarget"
  1083 op add *tmp394 :meetTarget:metaglass .metaglassSurplus
  1084 write *tmp394 .controller ".kilnTarget"
-    * op add *tmp395 :meetTarget:lead .leadSurplus
  1085 write *tmp390 .controller ".leadReserve"
  1086 op sign *tmp396 :meetTarget:silicon
  1087 op mul *tmp397 *tmp396 20
 
  1182 setaddr :unpackCfg*retaddr *label333 (h:*label333)
  1183 call *label31 *invalid :unpackCfg*retval (m:*label333) (h:*label333)
  1184 label *label333
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
  1185 set :buildBlock:block :unpackCfg:type
  1186 set :buildBlock:x :buildRemoteBlock:x
  1187 set :buildBlock:y :buildRemoteBlock:y
 
  1211 setaddr :unpackCfg*retaddr *label336 (h:*label336)
  1212 call *label31 *invalid :unpackCfg*retval (m:*label336) (h:*label336)
  1213 label *label336
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
  1214 op add *tmp450 .coreX :unpackCfg:x
  1215 op add *tmp451 .coreY :unpackCfg:y
  1216 set :buildBlock:block :unpackCfg:type
 
  1248 setaddr :unpackCfg*retaddr *label341 (h:*label341)
  1249 call *label31 *invalid :unpackCfg*retval (m:*label341) (h:*label341)
  1250 label *label341
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
  1251 set :meetTarget:block :unpackCfg:type
  1252 set :meetTarget:copper :unpackCfg:cu
  1253 set :meetTarget:lead :unpackCfg:pb

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-11 instructions):
 
   760 return :supplyBlockFromCore*retaddr
   761 end
   762 label *label31
-    * set *tmp291 0
   763 read *tmp292 :unpackCfg:cfg 0
   764 op sub *tmp293 *tmp292 35
   765 lookup block :unpackCfg:type *tmp293
-    * set *tmp295 1
   766 read *tmp296 :unpackCfg:cfg 1
   767 op sub :unpackCfg:x *tmp296 42
-    * set *tmp299 2
   768 read *tmp300 :unpackCfg:cfg 2
   769 op sub :unpackCfg:y *tmp300 42
-    * set *tmp303 3
   770 read *tmp304 :unpackCfg:cfg 3
   771 op sub :unpackCfg:cu *tmp304 35
-    * set *tmp306 4
   772 read *tmp307 :unpackCfg:cfg 4
   773 op sub :unpackCfg:pb *tmp307 35
-    * set *tmp309 5
   774 read *tmp310 :unpackCfg:cfg 5
   775 op sub :unpackCfg:gr *tmp310 35
-    * set *tmp312 6
   776 read *tmp313 :unpackCfg:cfg 6
   777 op sub :unpackCfg:si *tmp313 35
-    * set *tmp315 7
   778 read *tmp316 :unpackCfg:cfg 7
   779 op sub :unpackCfg:ti *tmp316 35
-    * set *tmp318 8
   780 read *tmp319 :unpackCfg:cfg 8
   781 op sub :unpackCfg:mg *tmp319 35
-    * set *tmp321 9
   782 read *tmp322 :unpackCfg:cfg 9
   783 op sub :unpackCfg:th *tmp322 35
-    * set *tmp324 10
   784 read *tmp325 :unpackCfg:cfg 10
   785 op sub :unpackCfg:rotation *tmp325 35
   786 label *label222

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
   466 setaddr :status3*retaddr *label141 (h:*label141)
   467 call *label11 *invalid :status3*retval (m:*label141) (h:*label141)
   468 label *label141
+  469 op sub *tmp221 :moveTo:radius 0.5
   470 label *label142
   471 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
   472 jump *label144 notEqual *tmp219 false
-    * op sub *tmp221 :moveTo:radius 0.5
   473 ucontrol approach :moveTo:x :moveTo:y *tmp221
   474 label *label143
   475 jump *label142 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   891 label *label255
   892 label *label236
   893 label *label237
+  894 set *tmp355 100
   895 sensor *tmp353 .core @titanium
-    * jump *label260 greaterThanEq *tmp353 .targetTitanium
+  896 jump *label261 greaterThanEq *tmp353 .targetTitanium
   897 sensor *tmp356 .core @titanium
   898 op sub *tmp357 .targetTitanium *tmp356
   899 op min *tmp355 7 *tmp357
   900 jump *label261 always
-    * label *label260
-    * set *tmp355 100
   901 label *label261
   902 sensor *tmp359 .titaniumDrill @titanium
   903 jump *label262 greaterThanEq *tmp359 *tmp355
 
   923 label *label272
   924 sensor :supplyBase0:coal .core @coal
   925 sensor :supplyBase0:sand .core @sand
-    * jump *label273 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp374 @coal
+  926 set :mineOre.1:ore @sand
+  927 jump *label274 greaterThanEq :supplyBase0:coal :supplyBase0:sand
+  928 set :mineOre.1:ore @coal
   929 jump *label274 always
-    * label *label273
-    * set *tmp374 @sand
   930 label *label274
-    * set :mineOre.1:ore *tmp374
   931 setaddr :mineOre.1*retaddr *label275 (h:*label275)
   932 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
   933 label *label275
 
   975 label *label288
   976 sensor :supplyBase0:coal.1 .core @coal
   977 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label289 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp387 @coal
+  978 set :mineOre.1:ore @sand
+  979 jump *label290 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
+  980 set :mineOre.1:ore @coal
   981 jump *label290 always
-    * label *label289
-    * set *tmp387 @sand
   982 label *label290
-    * set :mineOre.1:ore *tmp387
   983 setaddr :mineOre.1*retaddr *label291 (h:*label291)
   984 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
   985 label *label291

Modifications by Unroll iteration loop at CoreBuilder.mnd:226:5 (-2 instructions):
 
  1010 end
  1011 label *label33
  1012 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp388 *label298
-    * jump *label295 always
-    * multilabel *label298 (m:marker0)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp388 *label299
-    * jump *label295 always
-    * multilabel *label299 (m:marker0)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp388 *label300
-    * jump *label295 always
-    * multilabel *label300 (m:marker0)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp388 *label301
-    * jump *label295 always
-    * multilabel *label301 (m:marker0)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp388 *label302
-    * jump *label295 always
-    * multilabel *label302 (m:marker0)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp388 *label303
-    * jump *label295 always
-    * multilabel *label303 (m:marker0)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp388 *label304
-    * label *label295
-    * op sign *tmp389 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label296
-    * multijump *tmp388 0 0 (m:marker0)
-    * multilabel *label304 (m:marker0)
-    * label *label297
+ 1013 set :meetTarget:t :meetTarget:copper
+ 1014 label *label348
+ 1015 op sign *tmp389 :meetTarget:t
+ 1016 op add :meetTarget:count :meetTarget:count *tmp389
+ 1017 label *label349
+ 1018 set :meetTarget:t :meetTarget:lead
+ 1019 label *label352
+ 1020 op sign *tmp389 :meetTarget:t
+ 1021 op add :meetTarget:count :meetTarget:count *tmp389
+ 1022 label *label353
+ 1023 set :meetTarget:t :meetTarget:graphite
+ 1024 label *label356
+ 1025 op sign *tmp389 :meetTarget:t
+ 1026 op add :meetTarget:count :meetTarget:count *tmp389
+ 1027 label *label357
+ 1028 set :meetTarget:t :meetTarget:silicon
+ 1029 label *label360
+ 1030 op sign *tmp389 :meetTarget:t
+ 1031 op add :meetTarget:count :meetTarget:count *tmp389
+ 1032 label *label361
+ 1033 set :meetTarget:t :meetTarget:titanium
+ 1034 label *label364
+ 1035 op sign *tmp389 :meetTarget:t
+ 1036 op add :meetTarget:count :meetTarget:count *tmp389
+ 1037 label *label365
+ 1038 set :meetTarget:t :meetTarget:metaglass
+ 1039 label *label368
+ 1040 op sign *tmp389 :meetTarget:t
+ 1041 op add :meetTarget:count :meetTarget:count *tmp389
+ 1042 label *label369
+ 1043 set :meetTarget:t :meetTarget:thorium
+ 1044 label *label372
+ 1045 op sign *tmp389 :meetTarget:t
+ 1046 op add :meetTarget:count :meetTarget:count *tmp389
+ 1047 label *label373
+ 1048 label *label297
  1049 write :meetTarget:count .display ".totalTargets"
  1050 write :meetTarget:block .display ".nextBlock"
  1051 write :meetTarget:copper .display ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1012 set :meetTarget:count 0
  1013 set :meetTarget:t :meetTarget:copper
  1014 label *label348
-    * op sign *tmp389 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp389
+ 1015 op sign *tmp389 :meetTarget:copper
+ 1016 op add :meetTarget:count 0 *tmp389
  1017 label *label349
  1018 set :meetTarget:t :meetTarget:lead
  1019 label *label352
-    * op sign *tmp389 :meetTarget:t
+ 1020 op sign *tmp389 :meetTarget:lead
  1021 op add :meetTarget:count :meetTarget:count *tmp389
  1022 label *label353
  1023 set :meetTarget:t :meetTarget:graphite
  1024 label *label356
-    * op sign *tmp389 :meetTarget:t
+ 1025 op sign *tmp389 :meetTarget:graphite
  1026 op add :meetTarget:count :meetTarget:count *tmp389
  1027 label *label357
  1028 set :meetTarget:t :meetTarget:silicon
  1029 label *label360
-    * op sign *tmp389 :meetTarget:t
+ 1030 op sign *tmp389 :meetTarget:silicon
  1031 op add :meetTarget:count :meetTarget:count *tmp389
  1032 label *label361
  1033 set :meetTarget:t :meetTarget:titanium
  1034 label *label364
-    * op sign *tmp389 :meetTarget:t
+ 1035 op sign *tmp389 :meetTarget:titanium
  1036 op add :meetTarget:count :meetTarget:count *tmp389
  1037 label *label365
  1038 set :meetTarget:t :meetTarget:metaglass
  1039 label *label368
-    * op sign *tmp389 :meetTarget:t
+ 1040 op sign *tmp389 :meetTarget:metaglass
  1041 op add :meetTarget:count :meetTarget:count *tmp389
  1042 label *label369
  1043 set :meetTarget:t :meetTarget:thorium
  1044 label *label372
-    * op sign *tmp389 :meetTarget:t
+ 1045 op sign *tmp389 :meetTarget:thorium
  1046 op add :meetTarget:count :meetTarget:count *tmp389
  1047 label *label373
  1048 label *label297

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1009 return :supplyBase*retaddr
  1010 end
  1011 label *label33
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1012 label *label348
  1013 op sign *tmp389 :meetTarget:copper
  1014 op add :meetTarget:count 0 *tmp389
  1015 label *label349
-    * set :meetTarget:t :meetTarget:lead
  1016 label *label352
  1017 op sign *tmp389 :meetTarget:lead
  1018 op add :meetTarget:count :meetTarget:count *tmp389
  1019 label *label353
-    * set :meetTarget:t :meetTarget:graphite
  1020 label *label356
  1021 op sign *tmp389 :meetTarget:graphite
  1022 op add :meetTarget:count :meetTarget:count *tmp389
  1023 label *label357
-    * set :meetTarget:t :meetTarget:silicon
  1024 label *label360
  1025 op sign *tmp389 :meetTarget:silicon
  1026 op add :meetTarget:count :meetTarget:count *tmp389
  1027 label *label361
-    * set :meetTarget:t :meetTarget:titanium
  1028 label *label364
  1029 op sign *tmp389 :meetTarget:titanium
  1030 op add :meetTarget:count :meetTarget:count *tmp389
  1031 label *label365
-    * set :meetTarget:t :meetTarget:metaglass
  1032 label *label368
  1033 op sign *tmp389 :meetTarget:metaglass
  1034 op add :meetTarget:count :meetTarget:count *tmp389
  1035 label *label369
-    * set :meetTarget:t :meetTarget:thorium
  1036 label *label372
  1037 op sign *tmp389 :meetTarget:thorium
  1038 op add :meetTarget:count :meetTarget:count *tmp389

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
   444 label *label136
   445 return :status2*retaddr
   446 end
-    * label *label11
-    * write :status3:text .display ".status3"
-    * label *label137
-    * return :status3*retaddr
-    * end
   447 label *label12
   448 write :transportStatus:target .display ".transportTarget"
   449 write :transportStatus:item .display ".transportItem"
 
   458 end
   459 label *label14
   460 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label141 (h:*label141)
-    * call *label11 *invalid :status3*retval (m:*label141) (h:*label141)
-    * label *label141
+  461 label *label377
+  462 write :status3:text .display ".status3"
+  463 label *label378
   464 op sub *tmp221 :moveTo:radius 0.5
   465 label *label142
   466 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
 
   474 end
   475 label *label16
   476 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label148 (h:*label148)
-    * call *label11 *invalid :status3*retval (m:*label148) (h:*label148)
-    * label *label148
+  477 label *label379
+  478 write :status3:text .display ".status3"
+  479 label *label380
   480 label *label149
   481 sensor *tmp224 @unit @firstItem
   482 jump *label152 equal *tmp224 null
 
   516 end
   517 label *label19
   518 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label161 (h:*label161)
-    * call *label11 *invalid :status3*retval (m:*label161) (h:*label161)
-    * label *label161
+  519 label *label381
+  520 write :status3:text .display ".status3"
+  521 label *label382
   522 sensor *tmp233 @unit @firstItem
   523 jump *label162 notEqual *tmp233 :depositItems:item
   524 set :moveToBlock:block :depositItems:block
 
   591 label *label180
   592 label *label181
   593 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label183 (h:*label183)
-    * call *label11 *invalid :status3*retval (m:*label183) (h:*label183)
-    * label *label183
+  594 label *label383
+  595 write :status3:text .display ".status3"
+  596 label *label384
   597 op add :mineOre:stop @second 10
   598 label *label184
   599 sensor :mineOre:item @unit @firstItem

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   459 label *label14
   460 set :status3:text "Moving..."
   461 label *label377
-    * write :status3:text .display ".status3"
+  462 write "Moving..." .display ".status3"
   463 label *label378
   464 op sub *tmp221 :moveTo:radius 0.5
   465 label *label142
 
   475 label *label16
   476 set :status3:text "Moving..."
   477 label *label379
-    * write :status3:text .display ".status3"
+  478 write "Moving..." .display ".status3"
   479 label *label380
   480 label *label149
   481 sensor *tmp224 @unit @firstItem
 
   517 label *label19
   518 set :status3:text "Depositing..."
   519 label *label381
-    * write :status3:text .display ".status3"
+  520 write "Depositing..." .display ".status3"
   521 label *label382
   522 sensor *tmp233 @unit @firstItem
   523 jump *label162 notEqual *tmp233 :depositItems:item
 
   592 label *label181
   593 set :status3:text "Mining..."
   594 label *label383
-    * write :status3:text .display ".status3"
+  595 write "Mining..." .display ".status3"
   596 label *label384
   597 op add :mineOre:stop @second 10
   598 label *label184

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   457 return :error*retaddr
   458 end
   459 label *label14
-    * set :status3:text "Moving..."
   460 label *label377
   461 write "Moving..." .display ".status3"
   462 label *label378
 
   472 return :moveTo*retaddr
   473 end
   474 label *label16
-    * set :status3:text "Moving..."
   475 label *label379
   476 write "Moving..." .display ".status3"
   477 label *label380
 
   513 return :moveToBlock*retaddr
   514 end
   515 label *label19
-    * set :status3:text "Depositing..."
   516 label *label381
   517 write "Depositing..." .display ".status3"
   518 label *label382
 
   587 label *label182
   588 label *label180
   589 label *label181
-    * set :status3:text "Mining..."
   590 label *label383
   591 write "Mining..." .display ".status3"
   592 label *label384

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   432 jump *label131 always
   433 label *label133
   434 end
-    * label *label9
-    * write :status1:text .display ".status1"
-    * label *label135
-    * return :status1*retaddr
-    * end
   435 label *label10
   436 write :status2:text .display ".status2"
   437 write :status2:item .display ".item2"
 
   775 label *label32
   776 jump *label224 equal .thoriumContainer false
   777 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label227 (h:*label227)
-    * call *label9 *invalid :status1*retval (m:*label227) (h:*label227)
-    * label *label227
+  778 label *label385
+  779 write :status1:text .display ".status1"
+  780 label *label386
   781 set :supplyBlockFromCore:target .thoriumGenerator
   782 set :supplyBlockFromCore:item @coal
   783 setaddr :supplyBlockFromCore*retaddr *label228 (h:*label228)
 
   794 read *tmp96 .controller ".monos"
   795 jump *label230 lessThanEq *tmp96 3
   796 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label233 (h:*label233)
-    * call *label9 *invalid :status1*retval (m:*label233) (h:*label233)
-    * label *label233
+  797 label *label387
+  798 write :status1:text .display ".status1"
+  799 label *label388
   800 set :mineOre.1:ore @coal
   801 setaddr :mineOre.1*retaddr *label234 (h:*label234)
   802 call *label22 *invalid :mineOre.1*retval (m:*label234) (h:*label234)
 
   811 sensor *tmp335 .press @coal
   812 jump *label240 greaterThanEq *tmp335 5
   813 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label242 (h:*label242)
-    * call *label9 *invalid :status1*retval (m:*label242) (h:*label242)
-    * label *label242
+  814 label *label389
+  815 write :status1:text .display ".status1"
+  816 label *label390
   817 set :supplyBlock:block .press
   818 set :supplyBlock:ore @coal
   819 setaddr :supplyBlock*retaddr *label243 (h:*label243)
 
   829 sensor *tmp341 .smelter @coal
   830 jump *label246 greaterThanEq *tmp341 5
   831 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label248 (h:*label248)
-    * call *label9 *invalid :status1*retval (m:*label248) (h:*label248)
-    * label *label248
+  832 label *label391
+  833 write :status1:text .display ".status1"
+  834 label *label392
   835 set :supplyBlock:block .smelter
   836 set :supplyBlock:ore @coal
   837 setaddr :supplyBlock*retaddr *label249 (h:*label249)
 
   843 sensor *tmp344 .smelter @sand
   844 jump *label250 greaterThanEq *tmp344 5
   845 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label252 (h:*label252)
-    * call *label9 *invalid :status1*retval (m:*label252) (h:*label252)
-    * label *label252
+  846 label *label393
+  847 write :status1:text .display ".status1"
+  848 label *label394
   849 set :supplyBlock:block .smelter
   850 set :supplyBlock:ore @sand
   851 setaddr :supplyBlock*retaddr *label253 (h:*label253)
 
   862 sensor *tmp350 .generator @coal
   863 jump *label256 greaterThanEq *tmp350 2
   864 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label258 (h:*label258)
-    * call *label9 *invalid :status1*retval (m:*label258) (h:*label258)
-    * label *label258
+  865 label *label395
+  866 write :status1:text .display ".status1"
+  867 label *label396
   868 set :supplyBlock:block .generator
   869 set :supplyBlock:ore @coal
   870 setaddr :supplyBlock*retaddr *label259 (h:*label259)
 
   892 op mul *tmp365 .unloader1 .powerTarget
   893 jump *label266 greaterThanEq *tmp364 *tmp365
   894 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label268 (h:*label268)
-    * call *label9 *invalid :status1*retval (m:*label268) (h:*label268)
-    * label *label268
+  895 label *label397
+  896 write :status1:text .display ".status1"
+  897 label *label398
   898 set :mineOre.1:ore @coal
   899 setaddr :mineOre.1*retaddr *label269 (h:*label269)
   900 call *label22 *invalid :mineOre.1*retval (m:*label269) (h:*label269)
 
   904 sensor *tmp368 .core @silicon
   905 jump *label270 greaterThanEq *tmp368 .targetSilicon
   906 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label272 (h:*label272)
-    * call *label9 *invalid :status1*retval (m:*label272) (h:*label272)
-    * label *label272
+  907 label *label399
+  908 write :status1:text .display ".status1"
+  909 label *label400
   910 sensor :supplyBase0:coal .core @coal
   911 sensor :supplyBase0:sand .core @sand
   912 set :mineOre.1:ore @sand
 
   922 sensor *tmp375 .core @copper
   923 jump *label276 greaterThanEq *tmp375 .targetCopper
   924 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label278 (h:*label278)
-    * call *label9 *invalid :status1*retval (m:*label278) (h:*label278)
-    * label *label278
+  925 label *label401
+  926 write :status1:text .display ".status1"
+  927 label *label402
   928 set :mineOre.1:ore @copper
   929 setaddr :mineOre.1*retaddr *label279 (h:*label279)
   930 call *label22 *invalid :mineOre.1*retval (m:*label279) (h:*label279)
 
   934 sensor *tmp378 .core @lead
   935 jump *label280 greaterThanEq *tmp378 .targetLead
   936 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label282 (h:*label282)
-    * call *label9 *invalid :status1*retval (m:*label282) (h:*label282)
-    * label *label282
+  937 label *label403
+  938 write :status1:text .display ".status1"
+  939 label *label404
   940 set :mineOre.1:ore @lead
   941 setaddr :mineOre.1*retaddr *label283 (h:*label283)
   942 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
 
   946 sensor *tmp381 .core @metaglass
   947 jump *label284 greaterThanEq *tmp381 .targetMetaglass
   948 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label286 (h:*label286)
-    * call *label9 *invalid :status1*retval (m:*label286) (h:*label286)
-    * label *label286
+  949 label *label405
+  950 write :status1:text .display ".status1"
+  951 label *label406
   952 set :mineOre.1:ore @sand
   953 setaddr :mineOre.1*retaddr *label287 (h:*label287)
   954 call *label22 *invalid :mineOre.1*retval (m:*label287) (h:*label287)
 
   956 jump *label285 always
   957 label *label284
   958 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label288 (h:*label288)
-    * call *label9 *invalid :status1*retval (m:*label288) (h:*label288)
-    * label *label288
+  959 label *label407
+  960 write :status1:text .display ".status1"
+  961 label *label408
   962 sensor :supplyBase0:coal.1 .core @coal
   963 sensor :supplyBase0:sand.1 .core @sand
   964 set :mineOre.1:ore @sand
 
   979 jump *label263 always
   980 label *label262
   981 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label292 (h:*label292)
-    * call *label9 *invalid :status1*retval (m:*label292) (h:*label292)
-    * label *label292
+  982 label *label409
+  983 write :status1:text .display ".status1"
+  984 label *label410
   985 set :fetchBlock:block .titaniumDrill
   986 set :fetchBlock:item @titanium
   987 setaddr :fetchBlock*retaddr *label293 (h:*label293)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   776 jump *label224 equal .thoriumContainer false
   777 set :status1:text "Phase 2: servicing thorium drill"
   778 label *label385
-    * write :status1:text .display ".status1"
+  779 write "Phase 2: servicing thorium drill" .display ".status1"
   780 label *label386
   781 set :supplyBlockFromCore:target .thoriumGenerator
   782 set :supplyBlockFromCore:item @coal
 
   795 jump *label230 lessThanEq *tmp96 3
   796 set :status1:text "Phase 1: supplying base"
   797 label *label387
-    * write :status1:text .display ".status1"
+  798 write "Phase 1: supplying base" .display ".status1"
   799 label *label388
   800 set :mineOre.1:ore @coal
   801 setaddr :mineOre.1*retaddr *label234 (h:*label234)
 
   812 jump *label240 greaterThanEq *tmp335 5
   813 set :status1:text "Goal 1: graphite requirement"
   814 label *label389
-    * write :status1:text .display ".status1"
+  815 write "Goal 1: graphite requirement" .display ".status1"
   816 label *label390
   817 set :supplyBlock:block .press
   818 set :supplyBlock:ore @coal
 
   830 jump *label246 greaterThanEq *tmp341 5
   831 set :status1:text "Goal 2: coal for silicon requirement"
   832 label *label391
-    * write :status1:text .display ".status1"
+  833 write "Goal 2: coal for silicon requirement" .display ".status1"
   834 label *label392
   835 set :supplyBlock:block .smelter
   836 set :supplyBlock:ore @coal
 
   844 jump *label250 greaterThanEq *tmp344 5
   845 set :status1:text "Goal 3: sand for silicon requirement"
   846 label *label393
-    * write :status1:text .display ".status1"
+  847 write "Goal 3: sand for silicon requirement" .display ".status1"
   848 label *label394
   849 set :supplyBlock:block .smelter
   850 set :supplyBlock:ore @sand
 
   863 jump *label256 greaterThanEq *tmp350 2
   864 set :status1:text "Goal 4: supplying generator"
   865 label *label395
-    * write :status1:text .display ".status1"
+  866 write "Goal 4: supplying generator" .display ".status1"
   867 label *label396
   868 set :supplyBlock:block .generator
   869 set :supplyBlock:ore @coal
 
   893 jump *label266 greaterThanEq *tmp364 *tmp365
   894 set :status1:text "Goal 5: supplying generator"
   895 label *label397
-    * write :status1:text .display ".status1"
+  896 write "Goal 5: supplying generator" .display ".status1"
   897 label *label398
   898 set :mineOre.1:ore @coal
   899 setaddr :mineOre.1*retaddr *label269 (h:*label269)
 
   905 jump *label270 greaterThanEq *tmp368 .targetSilicon
   906 set :status1:text "Goal 6: silicon requirement"
   907 label *label399
-    * write :status1:text .display ".status1"
+  908 write "Goal 6: silicon requirement" .display ".status1"
   909 label *label400
   910 sensor :supplyBase0:coal .core @coal
   911 sensor :supplyBase0:sand .core @sand
 
   923 jump *label276 greaterThanEq *tmp375 .targetCopper
   924 set :status1:text "Goal 7: copper requirement"
   925 label *label401
-    * write :status1:text .display ".status1"
+  926 write "Goal 7: copper requirement" .display ".status1"
   927 label *label402
   928 set :mineOre.1:ore @copper
   929 setaddr :mineOre.1*retaddr *label279 (h:*label279)
 
   935 jump *label280 greaterThanEq *tmp378 .targetLead
   936 set :status1:text "Goal 8: lead requirement"
   937 label *label403
-    * write :status1:text .display ".status1"
+  938 write "Goal 8: lead requirement" .display ".status1"
   939 label *label404
   940 set :mineOre.1:ore @lead
   941 setaddr :mineOre.1*retaddr *label283 (h:*label283)
 
   947 jump *label284 greaterThanEq *tmp381 .targetMetaglass
   948 set :status1:text "Goal 9: metaglass requirement"
   949 label *label405
-    * write :status1:text .display ".status1"
+  950 write "Goal 9: metaglass requirement" .display ".status1"
   951 label *label406
   952 set :mineOre.1:ore @sand
   953 setaddr :mineOre.1*retaddr *label287 (h:*label287)
 
   957 label *label284
   958 set :status1:text "Goal 10: supplying base"
   959 label *label407
-    * write :status1:text .display ".status1"
+  960 write "Goal 10: supplying base" .display ".status1"
   961 label *label408
   962 sensor :supplyBase0:coal.1 .core @coal
   963 sensor :supplyBase0:sand.1 .core @sand
 
   980 label *label262
   981 set :status1:text "Goal 11: Fetching titanium"
   982 label *label409
-    * write :status1:text .display ".status1"
+  983 write "Goal 11: Fetching titanium" .display ".status1"
   984 label *label410
   985 set :fetchBlock:block .titaniumDrill
   986 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   774 end
   775 label *label32
   776 jump *label224 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   777 label *label385
   778 write "Phase 2: servicing thorium drill" .display ".status1"
   779 label *label386
 
   792 label *label224
   793 read *tmp96 .controller ".monos"
   794 jump *label230 lessThanEq *tmp96 3
-    * set :status1:text "Phase 1: supplying base"
   795 label *label387
   796 write "Phase 1: supplying base" .display ".status1"
   797 label *label388
 
   808 jump *label238 greaterThanEq *tmp332 .targetGraphite
   809 sensor *tmp335 .press @coal
   810 jump *label240 greaterThanEq *tmp335 5
-    * set :status1:text "Goal 1: graphite requirement"
   811 label *label389
   812 write "Goal 1: graphite requirement" .display ".status1"
   813 label *label390
 
   825 jump *label244 greaterThanEq *tmp338 .targetSilicon
   826 sensor *tmp341 .smelter @coal
   827 jump *label246 greaterThanEq *tmp341 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   828 label *label391
   829 write "Goal 2: coal for silicon requirement" .display ".status1"
   830 label *label392
 
   838 label *label246
   839 sensor *tmp344 .smelter @sand
   840 jump *label250 greaterThanEq *tmp344 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   841 label *label393
   842 write "Goal 3: sand for silicon requirement" .display ".status1"
   843 label *label394
 
   856 jump *label254 greaterThanEq *tmp347 .powerTarget
   857 sensor *tmp350 .generator @coal
   858 jump *label256 greaterThanEq *tmp350 2
-    * set :status1:text "Goal 4: supplying generator"
   859 label *label395
   860 write "Goal 4: supplying generator" .display ".status1"
   861 label *label396
 
   885 sensor *tmp364 .battery @totalPower
   886 op mul *tmp365 .unloader1 .powerTarget
   887 jump *label266 greaterThanEq *tmp364 *tmp365
-    * set :status1:text "Goal 5: supplying generator"
   888 label *label397
   889 write "Goal 5: supplying generator" .display ".status1"
   890 label *label398
 
   896 label *label266
   897 sensor *tmp368 .core @silicon
   898 jump *label270 greaterThanEq *tmp368 .targetSilicon
-    * set :status1:text "Goal 6: silicon requirement"
   899 label *label399
   900 write "Goal 6: silicon requirement" .display ".status1"
   901 label *label400
 
   913 label *label270
   914 sensor *tmp375 .core @copper
   915 jump *label276 greaterThanEq *tmp375 .targetCopper
-    * set :status1:text "Goal 7: copper requirement"
   916 label *label401
   917 write "Goal 7: copper requirement" .display ".status1"
   918 label *label402
 
   924 label *label276
   925 sensor *tmp378 .core @lead
   926 jump *label280 greaterThanEq *tmp378 .targetLead
-    * set :status1:text "Goal 8: lead requirement"
   927 label *label403
   928 write "Goal 8: lead requirement" .display ".status1"
   929 label *label404
 
   935 label *label280
   936 sensor *tmp381 .core @metaglass
   937 jump *label284 greaterThanEq *tmp381 .targetMetaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   938 label *label405
   939 write "Goal 9: metaglass requirement" .display ".status1"
   940 label *label406
 
   944 label *label287
   945 jump *label285 always
   946 label *label284
-    * set :status1:text "Goal 10: supplying base"
   947 label *label407
   948 write "Goal 10: supplying base" .display ".status1"
   949 label *label408
 
   966 label *label265
   967 jump *label263 always
   968 label *label262
-    * set :status1:text "Goal 11: Fetching titanium"
   969 label *label409
   970 write "Goal 11: Fetching titanium" .display ".status1"
   971 label *label410

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
   451 label *label139
   452 return :error*retaddr
   453 end
-    * label *label14
-    * label *label377
-    * write "Moving..." .display ".status3"
-    * label *label378
-    * op sub *tmp221 :moveTo:radius 0.5
-    * label *label142
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
-    * jump *label144 notEqual *tmp219 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp221
-    * label *label143
-    * jump *label142 always
-    * label *label144
-    * label *label140
-    * return :moveTo*retaddr
-    * end
   454 label *label16
   455 label *label379
   456 write "Moving..." .display ".status3"
 
   486 set :moveTo:x *tmp231
   487 set :moveTo:y *tmp232
   488 set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label159 (h:*label159)
-    * call *label14 *invalid :moveTo*retval (m:*label159) (h:*label159)
-    * label *label159
+  489 label *label411
+  490 label *label412
+  491 write "Moving..." .display ".status3"
+  492 label *label413
+  493 op sub *tmp221 :moveTo:radius 0.5
+  494 label *label414
+  495 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
+  496 jump *label416 notEqual *tmp219 false
+  497 ucontrol approach :moveTo:x :moveTo:y *tmp221
+  498 label *label415
+  499 jump *label414 always
+  500 label *label416
+  501 label *label417
   502 label *label158
   503 return :moveToBlock*retaddr
   504 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   490 label *label412
   491 write "Moving..." .display ".status3"
   492 label *label413
-    * op sub *tmp221 :moveTo:radius 0.5
+  493 op sub *tmp221 :moveToBlock:radius 0.5
   494 label *label414
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp219
+  495 ucontrol within *tmp231 *tmp232 :moveToBlock:radius *tmp219
   496 jump *label416 notEqual *tmp219 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp221
+  497 ucontrol approach *tmp231 *tmp232 *tmp221
   498 label *label415
   499 jump *label414 always
   500 label *label416

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   483 label *label18
   484 sensor *tmp231 :moveToBlock:block @x
   485 sensor *tmp232 :moveToBlock:block @y
-    * set :moveTo:x *tmp231
-    * set :moveTo:y *tmp232
-    * set :moveTo:radius :moveToBlock:radius
   486 label *label411
   487 label *label412
   488 write "Moving..." .display ".status3"

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
   480 label *label154
   481 return :dropAll*retaddr
   482 end
-    * label *label18
-    * sensor *tmp231 :moveToBlock:block @x
-    * sensor *tmp232 :moveToBlock:block @y
-    * label *label411
-    * label *label412
-    * write "Moving..." .display ".status3"
-    * label *label413
-    * op sub *tmp221 :moveToBlock:radius 0.5
-    * label *label414
-    * ucontrol within *tmp231 *tmp232 :moveToBlock:radius *tmp219
-    * jump *label416 notEqual *tmp219 false
-    * ucontrol approach *tmp231 *tmp232 *tmp221
-    * label *label415
-    * jump *label414 always
-    * label *label416
-    * label *label417
-    * label *label158
-    * return :moveToBlock*retaddr
-    * end
   483 label *label19
   484 label *label381
   485 write "Depositing..." .display ".status3"
 
   488 jump *label162 notEqual *tmp233 :depositItems:item
   489 set :moveToBlock:block :depositItems:block
   490 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label164 (h:*label164)
-    * call *label18 *invalid :moveToBlock*retval (m:*label164) (h:*label164)
-    * label *label164
+  491 label *label418
+  492 sensor *tmp231 :moveToBlock:block @x
+  493 sensor *tmp232 :moveToBlock:block @y
+  494 label *label419
+  495 label *label420
+  496 write "Moving..." .display ".status3"
+  497 label *label421
+  498 op sub *tmp221 :moveToBlock:radius 0.5
+  499 label *label422
+  500 ucontrol within *tmp231 *tmp232 :moveToBlock:radius *tmp219
+  501 jump *label424 notEqual *tmp219 false
+  502 ucontrol approach *tmp231 *tmp232 *tmp221
+  503 label *label423
+  504 jump *label422 always
+  505 label *label424
+  506 label *label425
+  507 label *label426
   508 sensor :depositItems:cap :depositItems:block @itemCapacity
   509 label *label165
   510 ucontrol itemDrop :depositItems:block 30

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   489 set :moveToBlock:block :depositItems:block
   490 set :moveToBlock:radius 6
   491 label *label418
-    * sensor *tmp231 :moveToBlock:block @x
-    * sensor *tmp232 :moveToBlock:block @y
+  492 sensor *tmp231 :depositItems:block @x
+  493 sensor *tmp232 :depositItems:block @y
   494 label *label419
   495 label *label420
   496 write "Moving..." .display ".status3"
   497 label *label421
-    * op sub *tmp221 :moveToBlock:radius 0.5
+  498 op sub *tmp221 6 0.5
   499 label *label422
-    * ucontrol within *tmp231 *tmp232 :moveToBlock:radius *tmp219
+  500 ucontrol within *tmp231 *tmp232 6 *tmp219
   501 jump *label424 notEqual *tmp219 false
-    * ucontrol approach *tmp231 *tmp232 *tmp221
+  502 ucontrol approach *tmp231 *tmp232 5.5
   503 label *label423
   504 jump *label422 always
   505 label *label424

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   486 label *label382
   487 sensor *tmp233 @unit @firstItem
   488 jump *label162 notEqual *tmp233 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
   489 label *label418
   490 sensor *tmp231 :depositItems:block @x
   491 sensor *tmp232 :depositItems:block @y
 
   493 label *label420
   494 write "Moving..." .display ".status3"
   495 label *label421
-    * op sub *tmp221 6 0.5
   496 label *label422
   497 ucontrol within *tmp231 *tmp232 6 *tmp219
   498 jump *label424 notEqual *tmp219 false

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 (-4 instructions):
 
   683 label *label206
   684 return :supplyBlock*retaddr
   685 end
-    * label *label25
-    * sensor *tmp280 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp280 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label212 (h:*label212)
-    * call *label12 *invalid :transportStatus*retval (m:*label212) (h:*label212)
-    * label *label212
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label213 (h:*label213)
-    * call *label10 *invalid :status2*retval (m:*label213) (h:*label213)
-    * label *label213
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label214 (h:*label214)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label214) (h:*label214)
-    * label *label214
-    * setaddr :dropAll*retaddr *label215 (h:*label215)
-    * call *label17 *invalid :dropAll*retval (m:*label215) (h:*label215)
-    * label *label215
-    * label *label216
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp283 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp284 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp285 *tmp283 *tmp284
-    * jump *label219 equal *tmp285 false
-    * ucontrol itemDrop @air 1000
-    * label *label219
-    * label *label220
-    * label *label217
-    * sensor *tmp287 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp288 *tmp287 30
-    * sensor *tmp289 .core :supplyBlockFromCore:item
-    * op land *tmp290 *tmp288 *tmp289
-    * jump *label216 notEqual *tmp290 false
-    * label *label218
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label221 (h:*label221)
-    * call *label19 *invalid :depositItems*retval (m:*label221) (h:*label221)
-    * label *label221
-    * label *label211
-    * return :supplyBlockFromCore*retaddr
-    * end
   686 label *label31
   687 read *tmp292 :unpackCfg:cfg 0
   688 op sub *tmp293 *tmp292 35
 
   717 label *label386
   718 set :supplyBlockFromCore:target .thoriumGenerator
   719 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label228 (h:*label228)
-    * call *label25 *invalid :supplyBlockFromCore*retval (m:*label228) (h:*label228)
-    * label *label228
+  720 label *label427
+  721 sensor *tmp280 :supplyBlockFromCore:target @itemCapacity
+  722 op min :transportStatus:target *tmp280 30
+  723 set :transportStatus:item :supplyBlockFromCore:item
+  724 setaddr :transportStatus*retaddr *label428 (h:*label428)
+  725 call *label12 *invalid :transportStatus*retval (m:*label428) (h:*label428)
+  726 label *label428
+  727 set :status2:text "Transferring "
+  728 set :status2:item :supplyBlockFromCore:item
+  729 set :status2:block :supplyBlockFromCore:target
+  730 setaddr :status2*retaddr *label429 (h:*label429)
+  731 call *label10 *invalid :status2*retval (m:*label429) (h:*label429)
+  732 label *label429
+  733 set :moveToEmpty:x .coreX
+  734 set :moveToEmpty:y .coreY
+  735 setaddr :moveToEmpty*retaddr *label430 (h:*label430)
+  736 call *label16 *invalid :moveToEmpty*retval (m:*label430) (h:*label430)
+  737 label *label430
+  738 setaddr :dropAll*retaddr *label431 (h:*label431)
+  739 call *label17 *invalid :dropAll*retval (m:*label431) (h:*label431)
+  740 label *label431
+  741 label *label432
+  742 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  743 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  744 op notEqual *tmp283 :supplyBlockFromCore:unitItem null
+  745 op notEqual *tmp284 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  746 op land *tmp285 *tmp283 *tmp284
+  747 jump *label433 equal *tmp285 false
+  748 ucontrol itemDrop @air 1000
+  749 label *label433
+  750 label *label434
+  751 label *label435
+  752 sensor *tmp287 @unit :supplyBlockFromCore:item
+  753 op lessThan *tmp288 *tmp287 30
+  754 sensor *tmp289 .core :supplyBlockFromCore:item
+  755 op land *tmp290 *tmp288 *tmp289
+  756 jump *label432 notEqual *tmp290 false
+  757 label *label436
+  758 set :depositItems:block :supplyBlockFromCore:target
+  759 set :depositItems:item :supplyBlockFromCore:item
+  760 setaddr :depositItems*retaddr *label437 (h:*label437)
+  761 call *label19 *invalid :depositItems*retval (m:*label437) (h:*label437)
+  762 label *label437
+  763 label *label438
   764 set :fetchBlock:block .thoriumContainer
   765 set :fetchBlock:item @thorium
   766 setaddr :fetchBlock*retaddr *label229 (h:*label229)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   718 set :supplyBlockFromCore:target .thoriumGenerator
   719 set :supplyBlockFromCore:item @coal
   720 label *label427
-    * sensor *tmp280 :supplyBlockFromCore:target @itemCapacity
+  721 sensor *tmp280 .thoriumGenerator @itemCapacity
   722 op min :transportStatus:target *tmp280 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  723 set :transportStatus:item @coal
   724 setaddr :transportStatus*retaddr *label428 (h:*label428)
   725 call *label12 *invalid :transportStatus*retval (m:*label428) (h:*label428)
   726 label *label428

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
   529 label *label160
   530 return :depositItems*retaddr
   531 end
-    * label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 0
-    * jump *label173 notEqual *tmp243 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label175 (h:*label175)
-    * call *label13 *invalid :error*retval (m:*label175) (h:*label175)
-    * label *label175
-    * label *label173
-    * label *label174
-    * label *label172
-    * return :locateOre*retaddr
-    * end
   532 label *label21
   533 op min :mineOre:amount :mineOre:amount 30
   534 set :transportStatus:target :mineOre:amount
 
   537 call *label12 *invalid :transportStatus*retval (m:*label177) (h:*label177)
   538 label *label177
   539 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label178 (h:*label178)
-    * call *label20 *invalid :locateOre*retval (m:*label178) (h:*label178)
-    * label *label178
+  540 label *label439
+  541 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 0
+  542 jump *label441 notEqual *tmp243 false
+  543 set :error:error "Cannot locate ore"
+  544 setaddr :error*retaddr *label440 (h:*label440)
+  545 call *label13 *invalid :error*retval (m:*label440) (h:*label440)
+  546 label *label440
+  547 label *label441
+  548 label *label442
+  549 label *label443
   550 set :mineOre:x :locateOre:x
   551 set :mineOre:y :locateOre:y
   552 set :moveToEmpty:x :locateOre:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   538 label *label177
   539 set :locateOre:ore :mineOre:ore
   540 label *label439
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp243 0
+  541 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp243 0
   542 jump *label441 notEqual *tmp243 false
   543 set :error:error "Cannot locate ore"
   544 setaddr :error*retaddr *label440 (h:*label440)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
   536 setaddr :transportStatus*retaddr *label177 (h:*label177)
   537 call *label12 *invalid :transportStatus*retval (m:*label177) (h:*label177)
   538 label *label177
-    * set :locateOre:ore :mineOre:ore
   539 label *label439
   540 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp243 0
   541 jump *label441 notEqual *tmp243 false

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-6 instructions):
 
    87 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    88 jump *label56 equal *tmp145 false
    89 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label50 always
    90 label *label50
    91 set .titaniumDrill *tmp128
    92 write *tmp128 processor1 ".titaniumDrill"
 
   849 sensor *tmp356 .core @titanium
   850 op sub *tmp357 .targetTitanium *tmp356
   851 op min *tmp355 7 *tmp357
-    * jump *label261 always
   852 label *label261
   853 sensor *tmp359 .titaniumDrill @titanium
   854 jump *label262 greaterThanEq *tmp359 *tmp355
 
   875 set :mineOre.1:ore @sand
   876 jump *label274 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   877 set :mineOre.1:ore @coal
-    * jump *label274 always
   878 label *label274
   879 setaddr :mineOre.1*retaddr *label275 (h:*label275)
   880 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
 
   922 set :mineOre.1:ore @sand
   923 jump *label290 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
   924 set :mineOre.1:ore @coal
-    * jump *label290 always
   925 label *label290
   926 setaddr :mineOre.1*retaddr *label291 (h:*label291)
   927 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
 
  1092 read *tmp445 .blockBuilder ":buildBlockAt*finished"
  1093 jump *label329 equal *tmp445 false
  1094 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * jump *label327 always
  1095 label *label327
  1096 return :buildBlock*retaddr
  1097 end
 
  1149 call *label34 *invalid :buildBlock*retval (m:*label337) (h:*label337)
  1150 label *label337
  1151 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label335 always
  1152 label *label335
  1153 return :buildBlockFromCfg*retaddr
  1154 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   953 label *label33
   954 label *label348
   955 op sign *tmp389 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp389
+  956 set :meetTarget:count *tmp389
   957 label *label349
   958 label *label352
   959 op sign *tmp389 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
   952 end
   953 label *label33
   954 label *label348
-    * op sign *tmp389 :meetTarget:copper
-    * set :meetTarget:count *tmp389
+  955 op sign :meetTarget:count :meetTarget:copper
   956 label *label349
   957 label *label352
   958 op sign *tmp389 :meetTarget:lead

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    17 ubind @poly
    18 set .builder @unit
    19 ulocate building core false @copper .coreX .coreY 0 .core
-    * label *label42
    20 jump *label41 equal .core null
-    * label *label43
    21 set :buildBlockFromCfg.1:cfg "#'+nA######"
    22 setaddr :buildBlockFromCfg.1*retaddr *label44 (h:*label44)
    23 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label44) (h:*label44)
 
    74 call *label13 *invalid :error*retval (m:*label55) (h:*label55)
    75 label *label55
    76 label *label53
-    * label *label54
    77 write @pneumatic-drill processor1 ".nextBlock"
    78 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    79 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    84 read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished"
    85 jump *label56 equal *tmp145 false
    86 read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label50
    87 set .titaniumDrill *tmp128
    88 write *tmp128 processor1 ".titaniumDrill"
    89 set :buildBlockFromCfg.1:cfg "*,###A<###"
 
   132 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   133 write 1 .controller ".flareTarget"
   134 write 1 processor1 ".flareTarget"
-    * label *label64
   135 write 3 .controller ".monoTarget"
   136 write 3 processor1 ".monoTarget"
-    * label *label65
   137 write 85 .controller ".pressTarget"
   138 write 150 .controller ".smelterTarget"
   139 write 30 .controller ".kilnTarget"
 
   150 jump *label71 greaterThanEq *tmp154 300
   151 jump *label69 always
   152 label *label71
-    * label *label72
-    * label *label68
   153 read *tmp96 .controller ".monos"
   154 jump *label67 lessThan *tmp96 3
   155 label *label69
 
   221 set .metaglassSurplus 200
   222 write 6 .controller ".polyTarget"
   223 write 6 processor1 ".polyTarget"
-    * label *label87
   224 set :buildBlockFromCfg.1:cfg "%-)A<######"
   225 setaddr :buildBlockFromCfg.1*retaddr *label88 (h:*label88)
   226 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label88) (h:*label88)
 
   240 setaddr :supplyBase*retaddr *label94 (h:*label94)
   241 call *label32 *invalid :supplyBase*retval (m:*label94) (h:*label94)
   242 label *label94
-    * label *label92
   243 jump *label91 always
   244 label *label93
   245 write 3 .controller ".flareTarget"
   246 write 3 processor1 ".flareTarget"
-    * label *label95
   247 label *label96
   248 read *tmp95 .controller ".flares"
   249 jump *label98 greaterThanEq *tmp95 2
   250 setaddr :supplyBase*retaddr *label99 (h:*label99)
   251 call *label32 *invalid :supplyBase*retval (m:*label99) (h:*label99)
   252 label *label99
-    * label *label97
   253 jump *label96 always
   254 label *label98
   255 write 8 .controller ".monoTarget"
   256 write 8 processor1 ".monoTarget"
-    * label *label100
   257 write @ore-titanium processor1 ".nextBlock"
   258 wait 0.000000001
   259 ubind @flare
 
   278 jump *label102 equal *tmp187 false
   279 write false processor4 ":stopLocation*finished"
   280 write 3 processor4 "@counter"
-    * label *label101
   281 write null processor1 ".nextBlock"
   282 write .coreX processor4 ":layoutThoriumDrill:x"
   283 write .coreY processor4 ":layoutThoriumDrill:y"
 
   304 call *label13 *invalid :error*retval (m:*label109) (h:*label109)
   305 label *label109
   306 label *label107
-    * label *label108
   307 write @laser-drill processor5 ":buildBlockAt:block"
   308 read *tmp53 processor4 ".drillX"
   309 write *tmp53 processor5 ":buildBlockAt:x"
 
   364 jump *label118 notEqual :buildRemoteBlock*retval null
   365 set .thoriumContainer .thoriumDrill
   366 label *label118
-    * label *label119
   367 write .thoriumDrill processor1 ".thoriumDrill"
   368 write .thoriumContainer processor1 ".thoriumContainer"
   369 write .thoriumContainer processor3 ":setThoriumContainer:container"
 
   373 wait 1e-15
   374 read *tmp215 processor3 ":setThoriumContainer*finished"
   375 jump *label120 equal *tmp215 false
-    * label *label103
   376 write null processor1 ".nextBlock"
   377 write 1 .controller ".megaTarget"
   378 write 1 processor1 ".megaTarget"
-    * label *label121
   379 label *label122
   380 read *tmp97 .controller ".polys"
   381 jump *label124 greaterThanEq *tmp97 6
   382 setaddr :supplyBase*retaddr *label125 (h:*label125)
   383 call *label32 *invalid :supplyBase*retval (m:*label125) (h:*label125)
   384 label *label125
-    * label *label123
   385 jump *label122 always
   386 label *label124
   387 set :buildBlockFromCfg:cfg "+(###A<###"
 
   400 label *label129
   401 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   402 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
-    * label *label128
   403 setaddr :buildUnits*retaddr *label130 (h:*label130)
   404 call *label40 *invalid :buildUnits*retval (m:*label130) (h:*label130)
   405 label *label130
 
   407 setaddr :supplyBase*retaddr *label134 (h:*label134)
   408 call *label32 *invalid :supplyBase*retval (m:*label134) (h:*label134)
   409 label *label134
-    * label *label132
   410 jump *label131 always
-    * label *label133
   411 end
   412 label *label10
   413 write :status2:text .display ".status2"
   414 write :status2:item .display ".item2"
   415 write :status2:block .display ".block2"
-    * label *label136
   416 return :status2*retaddr
   417 end
   418 label *label12
   419 write :transportStatus:target .display ".transportTarget"
   420 write :transportStatus:item .display ".transportItem"
-    * label *label138
   421 return :transportStatus*retaddr
   422 end
   423 label *label13
   424 set .ERROR :error:error
   425 stop
-    * label *label139
   426 return :error*retaddr
   427 end
   428 label *label16
-    * label *label379
   429 write "Moving..." .display ".status3"
-    * label *label380
   430 label *label149
   431 sensor *tmp224 @unit @firstItem
   432 jump *label152 equal *tmp224 null
   433 ucontrol itemDrop @air 1000
   434 label *label152
-    * label *label153
   435 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label150
   436 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp227
   437 jump *label149 equal *tmp227 false
-    * label *label151
-    * label *label147
   438 return :moveToEmpty*retaddr
   439 end
   440 label *label17
 
   442 sensor *tmp229 @unit @firstItem
   443 jump *label157 equal *tmp229 null
   444 ucontrol itemDrop @air 1000
-    * label *label156
   445 jump *label155 always
   446 label *label157
-    * label *label154
   447 return :dropAll*retaddr
   448 end
   449 label *label19
-    * label *label381
   450 write "Depositing..." .display ".status3"
-    * label *label382
   451 sensor *tmp233 @unit @firstItem
   452 jump *label162 notEqual *tmp233 :depositItems:item
-    * label *label418
   453 sensor *tmp231 :depositItems:block @x
   454 sensor *tmp232 :depositItems:block @y
-    * label *label419
-    * label *label420
   455 write "Moving..." .display ".status3"
-    * label *label421
   456 label *label422
   457 ucontrol within *tmp231 *tmp232 6 *tmp219
   458 jump *label424 notEqual *tmp219 false
   459 ucontrol approach *tmp231 *tmp232 5.5
-    * label *label423
   460 jump *label422 always
   461 label *label424
-    * label *label425
-    * label *label426
   462 sensor :depositItems:cap :depositItems:block @itemCapacity
   463 label *label165
   464 ucontrol itemDrop :depositItems:block 30
-    * label *label166
   465 sensor *tmp237 @unit @firstItem
   466 op mul *tmp238 *tmp237 :depositItems:cap
   467 sensor *tmp239 :depositItems:block :depositItems:item
   468 jump *label165 greaterThan *tmp238 *tmp239
-    * label *label167
   469 jump *label163 always
   470 label *label162
   471 label *label168
   472 sensor *tmp241 @unit @firstItem
   473 jump *label170 equal *tmp241 null
   474 ucontrol itemDrop @air 1000
-    * label *label169
   475 jump *label168 always
   476 label *label170
   477 label *label163
 
   480 setaddr :transportStatus*retaddr *label171 (h:*label171)
   481 call *label12 *invalid :transportStatus*retval (m:*label171) (h:*label171)
   482 label *label171
-    * label *label160
   483 return :depositItems*retaddr
   484 end
   485 label *label21
 
   489 setaddr :transportStatus*retaddr *label177 (h:*label177)
   490 call *label12 *invalid :transportStatus*retval (m:*label177) (h:*label177)
   491 label *label177
-    * label *label439
   492 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp243 0
   493 jump *label441 notEqual *tmp243 false
   494 set :error:error "Cannot locate ore"
 
   496 call *label13 *invalid :error*retval (m:*label440) (h:*label440)
   497 label *label440
   498 label *label441
-    * label *label442
-    * label *label443
   499 set :mineOre:x :locateOre:x
   500 set :mineOre:y :locateOre:y
   501 set :moveToEmpty:x :locateOre:x
 
   509 call *label17 *invalid :dropAll*retval (m:*label182) (h:*label182)
   510 label *label182
   511 label *label180
-    * label *label181
-    * label *label383
   512 write "Mining..." .display ".status3"
-    * label *label384
   513 op add :mineOre:stop @second 10
   514 label *label184
   515 sensor :mineOre:item @unit @firstItem
 
   519 jump *label187 equal *tmp255 false
   520 jump *label186 always
   521 label *label187
-    * label *label188
   522 ucontrol mine :mineOre:x :mineOre:y
   523 jump *label189 lessThanEq @second :mineOre:stop
   524 jump *label186 always
   525 label *label189
-    * label *label190
-    * label *label185
   526 sensor *tmp259 @unit @totalItems
   527 jump *label184 lessThan *tmp259 :mineOre:amount
   528 label *label186
 
   532 setaddr :depositItems*retaddr *label191 (h:*label191)
   533 call *label19 *invalid :depositItems*retval (m:*label191) (h:*label191)
   534 label *label191
-    * label *label176
   535 return :mineOre*retaddr
   536 end
   537 label *label22
 
   547 setaddr :mineOre*retaddr *label194 (h:*label194)
   548 call *label21 *invalid :mineOre*retval (m:*label194) (h:*label194)
   549 label *label194
-    * label *label192
   550 return :mineOre.1*retaddr
   551 end
   552 label *label23
 
   581 jump *label203 equal *tmp269 false
   582 ucontrol itemDrop @air 1000
   583 label *label203
-    * label *label204
-    * label *label201
   584 sensor *tmp271 @unit :fetchBlock:item
   585 op lessThan *tmp272 *tmp271 30
   586 sensor *tmp273 :fetchBlock:block :fetchBlock:item
   587 op land *tmp274 *tmp272 *tmp273
   588 jump *label200 notEqual *tmp274 false
-    * label *label202
   589 set :depositItems:block .core
   590 set :depositItems:item :fetchBlock:item
   591 setaddr :depositItems*retaddr *label205 (h:*label205)
   592 call *label19 *invalid :depositItems*retval (m:*label205) (h:*label205)
   593 label *label205
-    * label *label195
   594 return :fetchBlock*retaddr
   595 end
   596 label *label24
 
   611 call *label21 *invalid :mineOre*retval (m:*label210) (h:*label210)
   612 label *label210
   613 label *label208
-    * label *label209
-    * label *label206
   614 return :supplyBlock*retaddr
   615 end
   616 label *label31
 
   637 op sub :unpackCfg:th *tmp322 35
   638 read *tmp325 :unpackCfg:cfg 10
   639 op sub :unpackCfg:rotation *tmp325 35
-    * label *label222
   640 return :unpackCfg*retaddr
   641 end
   642 label *label32
   643 jump *label224 equal .thoriumContainer false
-    * label *label385
   644 write "Phase 2: servicing thorium drill" .display ".status1"
-    * label *label386
   645 set :supplyBlockFromCore:target .thoriumGenerator
   646 set :supplyBlockFromCore:item @coal
-    * label *label427
   647 sensor *tmp280 .thoriumGenerator @itemCapacity
   648 op min :transportStatus:target *tmp280 30
   649 set :transportStatus:item @coal
 
   673 jump *label433 equal *tmp285 false
   674 ucontrol itemDrop @air 1000
   675 label *label433
-    * label *label434
-    * label *label435
   676 sensor *tmp287 @unit :supplyBlockFromCore:item
   677 op lessThan *tmp288 *tmp287 30
   678 sensor *tmp289 .core :supplyBlockFromCore:item
   679 op land *tmp290 *tmp288 *tmp289
   680 jump *label432 notEqual *tmp290 false
-    * label *label436
   681 set :depositItems:block :supplyBlockFromCore:target
   682 set :depositItems:item :supplyBlockFromCore:item
   683 setaddr :depositItems*retaddr *label437 (h:*label437)
   684 call *label19 *invalid :depositItems*retval (m:*label437) (h:*label437)
   685 label *label437
-    * label *label438
   686 set :fetchBlock:block .thoriumContainer
   687 set :fetchBlock:item @thorium
   688 setaddr :fetchBlock*retaddr *label229 (h:*label229)
   689 call *label23 *invalid :fetchBlock*retval (m:*label229) (h:*label229)
   690 label *label229
-    * label *label226
   691 jump *label225 always
   692 label *label224
   693 read *tmp96 .controller ".monos"
   694 jump *label230 lessThanEq *tmp96 3
-    * label *label387
   695 write "Phase 1: supplying base" .display ".status1"
-    * label *label388
   696 set :mineOre.1:ore @coal
   697 setaddr :mineOre.1*retaddr *label234 (h:*label234)
   698 call *label22 *invalid :mineOre.1*retval (m:*label234) (h:*label234)
   699 label *label234
-    * label *label232
   700 jump *label231 always
   701 label *label230
   702 set :supplyBase0:supplied false
 
   705 jump *label238 greaterThanEq *tmp332 .targetGraphite
   706 sensor *tmp335 .press @coal
   707 jump *label240 greaterThanEq *tmp335 5
-    * label *label389
   708 write "Goal 1: graphite requirement" .display ".status1"
-    * label *label390
   709 set :supplyBlock:block .press
   710 set :supplyBlock:ore @coal
   711 setaddr :supplyBlock*retaddr *label243 (h:*label243)
 
   713 label *label243
   714 set :supplyBase0:supplied true
   715 label *label240
-    * label *label241
   716 label *label238
-    * label *label239
   717 sensor *tmp338 .core @silicon
   718 jump *label244 greaterThanEq *tmp338 .targetSilicon
   719 sensor *tmp341 .smelter @coal
   720 jump *label246 greaterThanEq *tmp341 5
-    * label *label391
   721 write "Goal 2: coal for silicon requirement" .display ".status1"
-    * label *label392
   722 set :supplyBlock:block .smelter
   723 set :supplyBlock:ore @coal
   724 setaddr :supplyBlock*retaddr *label249 (h:*label249)
 
   729 label *label246
   730 sensor *tmp344 .smelter @sand
   731 jump *label250 greaterThanEq *tmp344 5
-    * label *label393
   732 write "Goal 3: sand for silicon requirement" .display ".status1"
-    * label *label394
   733 set :supplyBlock:block .smelter
   734 set :supplyBlock:ore @sand
   735 setaddr :supplyBlock*retaddr *label253 (h:*label253)
 
   737 label *label253
   738 set :supplyBase0:supplied true
   739 label *label250
-    * label *label251
   740 label *label247
   741 label *label244
-    * label *label245
   742 sensor *tmp347 .battery @totalPower
   743 jump *label254 greaterThanEq *tmp347 .powerTarget
   744 sensor *tmp350 .generator @coal
   745 jump *label256 greaterThanEq *tmp350 2
-    * label *label395
   746 write "Goal 4: supplying generator" .display ".status1"
-    * label *label396
   747 set :supplyBlock:block .generator
   748 set :supplyBlock:ore @coal
   749 setaddr :supplyBlock*retaddr *label259 (h:*label259)
 
   751 label *label259
   752 set :supplyBase0:supplied true
   753 label *label256
-    * label *label257
   754 label *label254
-    * label *label255
   755 label *label236
-    * label *label237
   756 set *tmp355 100
   757 sensor *tmp353 .core @titanium
   758 jump *label261 greaterThanEq *tmp353 .targetTitanium
 
   766 sensor *tmp364 .battery @totalPower
   767 op mul *tmp365 .unloader1 .powerTarget
   768 jump *label266 greaterThanEq *tmp364 *tmp365
-    * label *label397
   769 write "Goal 5: supplying generator" .display ".status1"
-    * label *label398
   770 set :mineOre.1:ore @coal
   771 setaddr :mineOre.1*retaddr *label269 (h:*label269)
   772 call *label22 *invalid :mineOre.1*retval (m:*label269) (h:*label269)
 
   775 label *label266
   776 sensor *tmp368 .core @silicon
   777 jump *label270 greaterThanEq *tmp368 .targetSilicon
-    * label *label399
   778 write "Goal 6: silicon requirement" .display ".status1"
-    * label *label400
   779 sensor :supplyBase0:coal .core @coal
   780 sensor :supplyBase0:sand .core @sand
   781 set :mineOre.1:ore @sand
 
   789 label *label270
   790 sensor *tmp375 .core @copper
   791 jump *label276 greaterThanEq *tmp375 .targetCopper
-    * label *label401
   792 write "Goal 7: copper requirement" .display ".status1"
-    * label *label402
   793 set :mineOre.1:ore @copper
   794 setaddr :mineOre.1*retaddr *label279 (h:*label279)
   795 call *label22 *invalid :mineOre.1*retval (m:*label279) (h:*label279)
 
   798 label *label276
   799 sensor *tmp378 .core @lead
   800 jump *label280 greaterThanEq *tmp378 .targetLead
-    * label *label403
   801 write "Goal 8: lead requirement" .display ".status1"
-    * label *label404
   802 set :mineOre.1:ore @lead
   803 setaddr :mineOre.1*retaddr *label283 (h:*label283)
   804 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
 
   807 label *label280
   808 sensor *tmp381 .core @metaglass
   809 jump *label284 greaterThanEq *tmp381 .targetMetaglass
-    * label *label405
   810 write "Goal 9: metaglass requirement" .display ".status1"
-    * label *label406
   811 set :mineOre.1:ore @sand
   812 setaddr :mineOre.1*retaddr *label287 (h:*label287)
   813 call *label22 *invalid :mineOre.1*retval (m:*label287) (h:*label287)
   814 label *label287
   815 jump *label285 always
   816 label *label284
-    * label *label407
   817 write "Goal 10: supplying base" .display ".status1"
-    * label *label408
   818 sensor :supplyBase0:coal.1 .core @coal
   819 sensor :supplyBase0:sand.1 .core @sand
   820 set :mineOre.1:ore @sand
 
   830 label *label271
   831 label *label267
   832 label *label264
-    * label *label265
   833 jump *label263 always
   834 label *label262
-    * label *label409
   835 write "Goal 11: Fetching titanium" .display ".status1"
-    * label *label410
   836 set :fetchBlock:block .titaniumDrill
   837 set :fetchBlock:item @titanium
   838 setaddr :fetchBlock*retaddr *label293 (h:*label293)
   839 call *label23 *invalid :fetchBlock*retval (m:*label293) (h:*label293)
   840 label *label293
   841 label *label263
-    * label *label235
   842 label *label231
   843 label *label225
-    * label *label223
   844 return :supplyBase*retaddr
   845 end
   846 label *label33
-    * label *label348
   847 op sign :meetTarget:count :meetTarget:copper
-    * label *label349
-    * label *label352
   848 op sign *tmp389 :meetTarget:lead
   849 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label353
-    * label *label356
   850 op sign *tmp389 :meetTarget:graphite
   851 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label357
-    * label *label360
   852 op sign *tmp389 :meetTarget:silicon
   853 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label361
-    * label *label364
   854 op sign *tmp389 :meetTarget:titanium
   855 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label365
-    * label *label368
   856 op sign *tmp389 :meetTarget:metaglass
   857 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label369
-    * label *label372
   858 op sign *tmp389 :meetTarget:thorium
   859 op add :meetTarget:count :meetTarget:count *tmp389
-    * label *label373
-    * label *label297
   860 write :meetTarget:count .display ".totalTargets"
   861 write :meetTarget:block .display ".nextBlock"
   862 write :meetTarget:copper .display ".targetCopper"
 
   895 set *tmp402 false
   896 jump *label308 always
   897 label *label309
-    * label *label310
   898 sensor *tmp406 .core @lead
   899 jump *label311 greaterThanEq *tmp406 .targetLead
   900 set *tmp402 false
   901 jump *label308 always
   902 label *label311
-    * label *label312
   903 sensor *tmp409 .core @graphite
   904 jump *label313 greaterThanEq *tmp409 .targetGraphite
   905 set *tmp402 false
   906 jump *label308 always
   907 label *label313
-    * label *label314
   908 sensor *tmp412 .core @silicon
   909 jump *label315 greaterThanEq *tmp412 .targetSilicon
   910 set *tmp402 false
   911 jump *label308 always
   912 label *label315
-    * label *label316
   913 sensor *tmp415 .core @titanium
   914 jump *label317 greaterThanEq *tmp415 .targetTitanium
   915 set *tmp402 false
   916 jump *label308 always
   917 label *label317
-    * label *label318
   918 sensor *tmp418 .core @metaglass
   919 jump *label319 greaterThanEq *tmp418 .targetMetaglass
   920 set *tmp402 false
   921 jump *label308 always
   922 label *label319
-    * label *label320
   923 sensor *tmp421 .core @thorium
   924 jump *label321 greaterThanEq *tmp421 .targetThorium
   925 set *tmp402 false
   926 jump *label308 always
   927 label *label321
-    * label *label322
   928 set *tmp402 true
   929 jump *label308 always
   930 label *label308
 
   932 setaddr :supplyBase*retaddr *label323 (h:*label323)
   933 call *label32 *invalid :supplyBase*retval (m:*label323) (h:*label323)
   934 label *label323
-    * label *label306
   935 jump *label305 always
   936 label *label307
-    * label *label294
   937 return :meetTarget*retaddr
   938 end
   939 label *label34
 
   960 read *tmp445 .blockBuilder ":buildBlockAt*finished"
   961 jump *label329 equal *tmp445 false
   962 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * label *label327
   963 return :buildBlock*retaddr
   964 end
   965 label *label35
 
   987 set :buildRemoteBlock*retval :buildBlock*retval
   988 jump *label330 always
   989 label *label331
-    * label *label332
   990 set :buildRemoteBlock*retval false
   991 jump *label330 always
   992 label *label330
 
  1015 call *label34 *invalid :buildBlock*retval (m:*label337) (h:*label337)
  1016 label *label337
  1017 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label335
  1018 return :buildBlockFromCfg*retaddr
  1019 end
  1020 label *label37
 
  1024 call *label36 *invalid :buildBlockFromCfg*retval (m:*label339) (h:*label339)
  1025 label *label339
  1026 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
-    * label *label338
  1027 return :buildBlockFromCfg.1*retaddr
  1028 end
  1029 label *label38
 
  1042 setaddr :meetTarget*retaddr *label342 (h:*label342)
  1043 call *label33 *invalid :meetTarget*retval (m:*label342) (h:*label342)
  1044 label *label342
-    * label *label340
  1045 return :meetTarget.1*retaddr
  1046 end
  1047 label *label40
 
  1061 write 0 .controller ".leadReserve"
  1062 write 0 .controller ".siliconReserve"
  1063 write 0 .controller ".graphiteReserve"
-    * label *label346
  1064 return :buildUnits*retaddr
  1065 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-3 instructions):
 
   147 call *label32 *invalid :supplyBase*retval (m:*label70) (h:*label70)
   148 label *label70
   149 sensor *tmp154 .battery @totalPower
-    * jump *label71 greaterThanEq *tmp154 300
-    * jump *label69 always
+  150 jump *label69 lessThan *tmp154 300
   151 label *label71
   152 read *tmp96 .controller ".monos"
   153 jump *label67 lessThan *tmp96 3
 
   515 op notEqual *tmp253 :mineOre:item null
   516 op notEqual *tmp254 :mineOre:item :mineOre:ore
   517 op land *tmp255 *tmp253 *tmp254
-    * jump *label187 equal *tmp255 false
-    * jump *label186 always
+  518 jump *label186 notEqual *tmp255 false
   519 label *label187
   520 ucontrol mine :mineOre:x :mineOre:y
-    * jump *label189 lessThanEq @second :mineOre:stop
-    * jump *label186 always
+  521 jump *label186 greaterThan @second :mineOre:stop
   522 label *label189
   523 sensor *tmp259 @unit @totalItems
   524 jump *label184 lessThan *tmp259 :mineOre:amount

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   148 label *label70
   149 sensor *tmp154 .battery @totalPower
   150 jump *label69 lessThan *tmp154 300
-    * label *label71
   151 read *tmp96 .controller ".monos"
   152 jump *label67 lessThan *tmp96 3
   153 label *label69
 
   515 op notEqual *tmp254 :mineOre:item :mineOre:ore
   516 op land *tmp255 *tmp253 *tmp254
   517 jump *label186 notEqual *tmp255 false
-    * label *label187
   518 ucontrol mine :mineOre:x :mineOre:y
   519 jump *label186 greaterThan @second :mineOre:stop
-    * label *label189
   520 sensor *tmp259 @unit @totalItems
   521 jump *label184 lessThan *tmp259 :mineOre:amount
   522 label *label186

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   682 setaddr :fetchBlock*retaddr *label229 (h:*label229)
   683 call *label23 *invalid :fetchBlock*retval (m:*label229) (h:*label229)
   684 label *label229
-    * jump *label225 always
+  685 return :supplyBase*retaddr
   686 label *label224
   687 read *tmp96 .controller ".monos"
   688 jump *label230 lessThanEq *tmp96 3
 
   691 setaddr :mineOre.1*retaddr *label234 (h:*label234)
   692 call *label22 *invalid :mineOre.1*retval (m:*label234) (h:*label234)
   693 label *label234
-    * jump *label231 always
+  694 return :supplyBase*retaddr
   695 label *label230
   696 set :supplyBase0:supplied false
   697 jump *label236 notEqual .unloader1 null
 
   756 label *label261
   757 sensor *tmp359 .titaniumDrill @titanium
   758 jump *label262 greaterThanEq *tmp359 *tmp355
-    * jump *label264 notEqual :supplyBase0:supplied false
+  759 jump *label263 notEqual :supplyBase0:supplied false
   760 sensor *tmp364 .battery @totalPower
   761 op mul *tmp365 .unloader1 .powerTarget
   762 jump *label266 greaterThanEq *tmp364 *tmp365
 
   765 setaddr :mineOre.1*retaddr *label269 (h:*label269)
   766 call *label22 *invalid :mineOre.1*retval (m:*label269) (h:*label269)
   767 label *label269
-    * jump *label267 always
+  768 return :supplyBase*retaddr
   769 label *label266
   770 sensor *tmp368 .core @silicon
   771 jump *label270 greaterThanEq *tmp368 .targetSilicon
 
   779 setaddr :mineOre.1*retaddr *label275 (h:*label275)
   780 call *label22 *invalid :mineOre.1*retval (m:*label275) (h:*label275)
   781 label *label275
-    * jump *label271 always
+  782 return :supplyBase*retaddr
   783 label *label270
   784 sensor *tmp375 .core @copper
   785 jump *label276 greaterThanEq *tmp375 .targetCopper
 
   788 setaddr :mineOre.1*retaddr *label279 (h:*label279)
   789 call *label22 *invalid :mineOre.1*retval (m:*label279) (h:*label279)
   790 label *label279
-    * jump *label277 always
+  791 return :supplyBase*retaddr
   792 label *label276
   793 sensor *tmp378 .core @lead
   794 jump *label280 greaterThanEq *tmp378 .targetLead
 
   797 setaddr :mineOre.1*retaddr *label283 (h:*label283)
   798 call *label22 *invalid :mineOre.1*retval (m:*label283) (h:*label283)
   799 label *label283
-    * jump *label281 always
+  800 return :supplyBase*retaddr
   801 label *label280
   802 sensor *tmp381 .core @metaglass
   803 jump *label284 greaterThanEq *tmp381 .targetMetaglass
 
   806 setaddr :mineOre.1*retaddr *label287 (h:*label287)
   807 call *label22 *invalid :mineOre.1*retval (m:*label287) (h:*label287)
   808 label *label287
-    * jump *label285 always
+  809 return :supplyBase*retaddr
   810 label *label284
   811 write "Goal 10: supplying base" .display ".status1"
   812 sensor :supplyBase0:coal.1 .core @coal
 
   824 label *label271
   825 label *label267
   826 label *label264
-    * jump *label263 always
+  827 return :supplyBase*retaddr
   828 label *label262
   829 write "Goal 11: Fetching titanium" .display ".status1"
   830 set :fetchBlock:block .titaniumDrill
 
   979 call *label34 *invalid :buildBlock*retval (m:*label334) (h:*label334)
   980 label *label334
   981 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label330 always
+  982 return :buildRemoteBlock*retaddr
   983 label *label331
   984 set :buildRemoteBlock*retval false
-    * jump *label330 always
+  985 return :buildRemoteBlock*retaddr
   986 label *label330
   987 return :buildRemoteBlock*retaddr
   988 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-21 instructions):
 
   406 call *label32 *invalid :supplyBase*retval (m:*label134) (h:*label134)
   407 label *label134
   408 jump *label131 always
-    * end
   409 label *label10
   410 write :status2:text .display ".status2"
   411 write :status2:item .display ".item2"
   412 write :status2:block .display ".block2"
   413 return :status2*retaddr
-    * end
   414 label *label12
   415 write :transportStatus:target .display ".transportTarget"
   416 write :transportStatus:item .display ".transportItem"
   417 return :transportStatus*retaddr
-    * end
   418 label *label13
   419 set .ERROR :error:error
   420 stop
   421 return :error*retaddr
-    * end
   422 label *label16
   423 write "Moving..." .display ".status3"
   424 label *label149
 
   430 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp227
   431 jump *label149 equal *tmp227 false
   432 return :moveToEmpty*retaddr
-    * end
   433 label *label17
   434 label *label155
   435 sensor *tmp229 @unit @firstItem
 
   438 jump *label155 always
   439 label *label157
   440 return :dropAll*retaddr
-    * end
   441 label *label19
   442 write "Depositing..." .display ".status3"
   443 sensor *tmp233 @unit @firstItem
 
   473 call *label12 *invalid :transportStatus*retval (m:*label171) (h:*label171)
   474 label *label171
   475 return :depositItems*retaddr
-    * end
   476 label *label21
   477 op min :mineOre:amount :mineOre:amount 30
   478 set :transportStatus:target :mineOre:amount
 
   520 call *label19 *invalid :depositItems*retval (m:*label191) (h:*label191)
   521 label *label191
   522 return :mineOre*retaddr
-    * end
   523 label *label22
   524 set :status2:text "Mining "
   525 set :status2:item :mineOre.1:ore
 
   534 call *label21 *invalid :mineOre*retval (m:*label194) (h:*label194)
   535 label *label194
   536 return :mineOre.1*retaddr
-    * end
   537 label *label23
   538 sensor *tmp262 :fetchBlock:block @itemCapacity
   539 op min :transportStatus:target *tmp262 30
 
   577 call *label19 *invalid :depositItems*retval (m:*label205) (h:*label205)
   578 label *label205
   579 return :fetchBlock*retaddr
-    * end
   580 label *label24
   581 set :status2:text "Supplying "
   582 set :status2:item :supplyBlock:ore
 
   596 label *label210
   597 label *label208
   598 return :supplyBlock*retaddr
-    * end
   599 label *label31
   600 read *tmp292 :unpackCfg:cfg 0
   601 op sub *tmp293 *tmp292 35
 
   621 read *tmp325 :unpackCfg:cfg 10
   622 op sub :unpackCfg:rotation *tmp325 35
   623 return :unpackCfg*retaddr
-    * end
   624 label *label32
   625 jump *label224 equal .thoriumContainer false
   626 write "Phase 2: servicing thorium drill" .display ".status1"
 
   806 setaddr :mineOre.1*retaddr *label291 (h:*label291)
   807 call *label22 *invalid :mineOre.1*retval (m:*label291) (h:*label291)
   808 label *label291
-    * label *label285
-    * label *label281
-    * label *label277
-    * label *label271
-    * label *label267
-    * label *label264
   809 return :supplyBase*retaddr
   810 label *label262
   811 write "Goal 11: Fetching titanium" .display ".status1"
 
   815 call *label23 *invalid :fetchBlock*retval (m:*label293) (h:*label293)
   816 label *label293
   817 label *label263
-    * label *label231
-    * label *label225
   818 return :supplyBase*retaddr
-    * end
   819 label *label33
   820 op sign :meetTarget:count :meetTarget:copper
   821 op sign *tmp389 :meetTarget:lead
 
   908 jump *label305 always
   909 label *label307
   910 return :meetTarget*retaddr
-    * end
   911 label *label34
   912 set :meetTarget:block :buildBlock:block
   913 set :meetTarget:copper :buildBlock:copper
 
   933 jump *label329 equal *tmp445 false
   934 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
   935 return :buildBlock*retaddr
-    * end
   936 label *label35
   937 op add *tmp447 :buildRemoteBlock:x :buildRemoteBlock:y
   938 jump *label331 lessThanEq *tmp447 0
 
   960 label *label331
   961 set :buildRemoteBlock*retval false
   962 return :buildRemoteBlock*retaddr
-    * label *label330
-    * return :buildRemoteBlock*retaddr
-    * end
   963 label *label36
   964 set :unpackCfg:cfg :buildBlockFromCfg:cfg
   965 setaddr :unpackCfg*retaddr *label336 (h:*label336)
 
   984 label *label337
   985 set :buildBlockFromCfg*retval :buildBlock*retval
   986 return :buildBlockFromCfg*retaddr
-    * end
   987 label *label37
   988 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   989 set :buildBlockFromCfg:config null
 
   992 label *label339
   993 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
   994 return :buildBlockFromCfg.1*retaddr
-    * end
   995 label *label38
   996 set :unpackCfg:cfg :meetTarget.1:cfg
   997 setaddr :unpackCfg*retaddr *label341 (h:*label341)
 
  1009 call *label33 *invalid :meetTarget*retval (m:*label342) (h:*label342)
  1010 label *label342
  1011 return :meetTarget.1*retaddr
-    * end
  1012 label *label40
  1013 set :meetTarget:block 0
  1014 set :meetTarget:copper 0
 
  1027 write 0 .controller ".siliconReserve"
  1028 write 0 .controller ".graphiteReserve"
  1029 return :buildUnits*retaddr
-    * end

Final code before resolving virtual instructions:

    0:  jump *label444 always 0 0
    1:  draw triangle bank1 processor1 processor2 processor3 processor4 processor5
    2:  draw triangle processor6 .ERROR .battery .blockBuilder .builder .controller
    3:  draw triangle .core .coreX .coreY .display .generator .graphiteSurplus
    4:  draw triangle .leadSurplus .metaglassSurplus .powerTarget .press .siliconSurplus .smelter
    5:  draw triangle .targetCopper .targetGraphite .targetLead .targetMetaglass .targetSilicon .targetThorium
    6:  draw triangle .targetTitanium .thoriumContainer .thoriumDrill .thoriumGenerator .titaniumDrill .unloader1
    7:  draw triangle :blocksBuildTitaniumDrills:current :buildBlock:block :buildBlock:config :buildBlock:copper :buildBlock:graphite :buildBlock:lead
    8:  draw triangle :buildBlock:metaglass :buildBlock:rotation :buildBlock:silicon :buildBlock:thorium :buildBlock:titanium :buildBlock:x
    9:  draw triangle :buildBlock:y :buildBlockFromCfg.1:cfg :buildBlockFromCfg:cfg :buildBlockFromCfg:config :buildFirstTitaniumDrill:dx :buildFirstTitaniumDrill:dy
   10:  draw triangle :buildFirstTitaniumDrill:result :buildRemoteBlock:cfg :buildRemoteBlock:x :buildRemoteBlock:y :buildThoriumDrill:result :depositItems:block
   11:  draw triangle :depositItems:cap :depositItems:item :error:error :fetchBlock:block :fetchBlock:item :fetchBlock:unitItem
   12:  draw triangle :locateOre:x :locateOre:y :meetTarget:block :meetTarget.1:cfg :meetTarget:copper :meetTarget:count
   13:  draw triangle :meetTarget:graphite :meetTarget:lead :meetTarget:metaglass :meetTarget:silicon :meetTarget:thorium :meetTarget:titanium
   14:  draw triangle :mineOre:amount :mineOre:block :mineOre:item :mineOre.1:ore :mineOre:ore :mineOre:stop
   15:  draw triangle :mineOre:x :mineOre:y :moveToEmpty:x :moveToEmpty:y :status2:block :status2:item
   16:  draw triangle :status2:text :supplyBase0:coal.1 :supplyBase0:coal :supplyBase0:sand.1 :supplyBase0:sand :supplyBase0:supplied
   17:  draw triangle :supplyBlock:block :supplyBlock:blockCapacity :supplyBlock:missing :supplyBlock:ore :supplyBlockFromCore:item :supplyBlockFromCore:target
   18:  draw triangle :supplyBlockFromCore:unitItem :transportStatus:item :transportStatus:target :unpackCfg:cfg :unpackCfg:cu :unpackCfg:gr
   19:  draw triangle :unpackCfg:mg :unpackCfg:pb :unpackCfg:rotation :unpackCfg:si :unpackCfg:th :unpackCfg:ti
   20:  draw triangle :unpackCfg:type :unpackCfg:x :unpackCfg:y 0 0 0
        label *label444
   21:  set .ERROR ""                                                Actions.mnd: volatile var ERROR = "";
   22:  set .display processor1                                      CoreBuilder.mnd: var display = processor1,
   23:  set .blockBuilder processor5                                 ...
   24:  set .press null                                              CoreBuilder.mnd: var
   25:  set .generator null                                          ...
   26:  set .battery null                                            ...
   27:  set .smelter null                                            ...
   28:  set .titaniumDrill null                                      ...
   29:  set .unloader1 null                                          ...
   30:  set .thoriumContainer null                                   ...
   31:  set .thoriumGenerator null                                   ...
   32:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   33:  set .graphiteSurplus 20                                      ...
   34:  set .siliconSurplus 20                                       ...
   35:  set .metaglassSurplus 20                                     ...
   36:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label41                                               CoreBuilder.mnd: do
   37:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   38:  set .builder @unit                                           ...
   39:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   40:  jump *label41 equal .core null                               CoreBuilder.mnd: do
   41:  set :buildBlockFromCfg.1:cfg "#'+nA######"                   CoreBuilder.mnd: press = buildBlockFromCfg(PRESS);
   42:  setaddr :buildBlockFromCfg.1*retaddr *label44                ...
   43:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label44                                               ...
   44:  set .press :buildBlockFromCfg.1*retval                       ...
   45:  set :buildBlockFromCfg.1:cfg "k*/(7######"                   CoreBuilder.mnd: battery = buildBlockFromCfg(BATTERY1);
   46:  setaddr :buildBlockFromCfg.1*retaddr *label45                ...
   47:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label45                                               ...
   48:  set .battery :buildBlockFromCfg.1*retval                     ...
   49:  set :buildBlockFromCfg.1:cfg "k+/(7######"                   CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   50:  setaddr :buildBlockFromCfg.1*retaddr *label46                ...
   51:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label46                                               ...
   52:  set :buildBlockFromCfg.1:cfg "m*.<2######"                   CoreBuilder.mnd: generator = buildBlockFromCfg(GENERATOR);
   53:  setaddr :buildBlockFromCfg.1*retaddr *label47                ...
   54:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label47                                               ...
   55:  set .generator :buildBlockFromCfg.1*retval                   ...
   56:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   57:  set :buildBlockFromCfg.1:cfg "%+-A<######"                   CoreBuilder.mnd: smelter = buildBlockFromCfg(SMELTER);
   58:  setaddr :buildBlockFromCfg.1*retaddr *label48                ...
   59:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label48                                               ...
   60:  set .smelter :buildBlockFromCfg.1*retval                     ...
   61:  set :buildBlockFromCfg.1:cfg "T+,%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   62:  setaddr :buildBlockFromCfg.1*retaddr *label49                ...
   63:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label49                                               ...
   64:  set :meetTarget.1:cfg "w**5#-#####"                          CoreBuilder.mnd: meetTarget(cfg);
   65:  setaddr :meetTarget.1*retaddr *label51                       ...
   66:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label51                                               ...
   67:  write @titanium processor1 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   68:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   69:  write .coreY processor4 ":findDrillLocation:y"               ...
   70:  write @unit processor4 ":findDrillLocation:unit"             ...
   71:  write @titanium processor4 ":findDrillLocation:item"         ...
   72:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
   73:  write 2 processor4 ":findDrillLocation:size"                 ...
   74:  write 4 processor4 ":findDrillLocation:limit"                ...
   75:  write false processor4 ":findDrillLocation*finished"         ...
   76:  write 1 processor4 "@counter"                                ...
        label *label52                                               ...
   77:  wait 1e-15                                                   ...
   78:  read *tmp139 processor4 ":findDrillLocation*finished"        ...
   79:  jump *label52 equal *tmp139 false                            ...
   80:  read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocat ...
   81:  read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocat ...
   82:  read :buildFirstTitaniumDrill:result processor4 ":findDrillL ...
   83:  jump *label53 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   84:  set :error:error "Cannot locate spot for titanium drill"     ...
   85:  setaddr :error*retaddr *label55                              ...
   86:  call *label13 *invalid :error*retval                         ...
        label *label55                                               ...
        label *label53                                               ...
   87:  write @pneumatic-drill processor1 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   88:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   89:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   90:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   91:  write 2 processor5 "@counter"                                ...
        label *label56                                               ...
   92:  wait 1e-15                                                   ...
   93:  read *tmp145 processor5 ":buildFirstTitaniumDrillAt*finished ...
   94:  jump *label56 equal *tmp145 false                            ...
   95:  read *tmp128 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   96:  set .titaniumDrill *tmp128                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   97:  write *tmp128 processor1 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   98:  set :buildBlockFromCfg.1:cfg "*,###A<###"                   CoreBuilder.mnd: unloader1 = buildBlockFromCfg(UNLOADER1);
   99:  setaddr :buildBlockFromCfg.1*retaddr *label57                ...
  100:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label57                                               ...
  101:  set .unloader1 :buildBlockFromCfg.1*retval                   ...
  102:  set :buildBlockFromCfg.1:cfg "T),%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
  103:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
  104:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
  105:  set :buildBlockFromCfg.1:cfg "W*-'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
  106:  setaddr :buildBlockFromCfg.1*retaddr *label59                ...
  107:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label59                                               ...
  108:  set .graphiteSurplus 100                                     CoreBuilder.mnd: graphiteSurplus = 100;
  109:  set :buildBlockFromCfg:cfg "®-.}U#U####"                     CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, processor2);
  110:  set :buildBlockFromCfg:config processor2                     ...
  111:  setaddr :buildBlockFromCfg*retaddr *label60                  ...
  112:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label60                                               ...
  113:  set .controller :buildBlockFromCfg*retval                    ...
  114:  write processor6 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
  115:  write processor1 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
  116:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
  117:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
  118:  write .battery :buildBlockFromCfg*retval ".battery"          CoreBuilder.mnd: controller.battery = battery;
  119:  write .generator :buildBlockFromCfg*retval ".generator"      CoreBuilder.mnd: controller.generator = generator;
  120:  write .smelter :buildBlockFromCfg*retval ".smelter"          CoreBuilder.mnd: controller.smelter = smelter;
  121:  write .press :buildBlockFromCfg*retval ".press"              CoreBuilder.mnd: controller.press = press;
  122:  write .unloader1 :buildBlockFromCfg*retval ".unloader1"      CoreBuilder.mnd: controller.unloader1 = unloader1;
  123:  set :buildBlockFromCfg.1:cfg "g)'%)######"                   CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  124:  setaddr :buildBlockFromCfg.1*retaddr *label61                ...
  125:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label61                                               ...
  126:  set :buildBlockFromCfg.1:cfg "(*###A<###"                   CoreBuilder.mnd: controller.unloader2 = buildBlockFromCfg(UNLOADER2);
  127:  setaddr :buildBlockFromCfg.1*retaddr *label62                ...
  128:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label62                                               ...
  129:  write :buildBlockFromCfg.1*retval .controller ".unloader2"   ...
  130:  set :buildBlockFromCfg.1:cfg "'(_i#####&"                   CoreBuilder.mnd: var factory = buildBlockFromCfg(AIR_FACTORY);
  131:  setaddr :buildBlockFromCfg.1*retaddr *label63                ...
  132:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label63                                               ...
  133:  write :buildBlockFromCfg.1*retval .controller ".factory"     CoreBuilder.mnd: controller.factory = factory;
  134:  write :buildBlockFromCfg.1*retval processor1 ".airFactory"   CoreBuilder.mnd: display.airFactory = factory;
  135:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  136:  write 1 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  137:  write 3 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  138:  write 3 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  139:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  140:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  141:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  142:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  143:  set .siliconSurplus 20                                       ...
  144:  setaddr :buildUnits*retaddr *label66                         CoreBuilder.mnd: buildUnits();
  145:  call *label40 *invalid :buildUnits*retval                    ...
        label *label66                                               ...
        label *label67                                               CoreBuilder.mnd: do
  146:  setaddr :supplyBase*retaddr *label70                         CoreBuilder.mnd: supplyBase();
  147:  call *label32 *invalid :supplyBase*retval                    ...
        label *label70                                               ...
  148:  sensor *tmp154 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < 300 then break; end;
  149:  jump *label69 lessThan *tmp154 300                           ...
  150:  read *tmp96 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  151:  jump *label67 lessThan *tmp96 3                              CoreBuilder.mnd: do
        label *label69                                               ...
  152:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  153:  set :buildBlockFromCfg.1:cfg ",)###A<###"                   CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  154:  setaddr :buildBlockFromCfg.1*retaddr *label73                ...
  155:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label73                                               ...
  156:  set :buildBlockFromCfg.1:cfg "T,*%%######"                   CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  157:  setaddr :buildBlockFromCfg.1*retaddr *label74                ...
  158:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label74                                               ...
  159:  set :buildBlockFromCfg.1:cfg "',+_AA#####"                   CoreBuilder.mnd: kiln = buildBlockFromCfg(KILN);
  160:  setaddr :buildBlockFromCfg.1*retaddr *label75                ...
  161:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label75                                               ...
  162:  write :buildBlockFromCfg.1*retval .controller ".kiln"        CoreBuilder.mnd: controller.kiln = kiln;
  163:  set :buildBlockFromCfg.1:cfg "z%-AAA##A##"                   CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  164:  setaddr :buildBlockFromCfg.1*retaddr *label76                ...
  165:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label76                                               ...
  166:  set :buildBlockFromCfg.1:cfg "W'*'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  167:  setaddr :buildBlockFromCfg.1*retaddr *label77                ...
  168:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label77                                               ...
  169:  set :buildBlockFromCfg.1:cfg "W&*'%######"                   CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  170:  setaddr :buildBlockFromCfg.1*retaddr *label78                ...
  171:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label78                                               ...
  172:  set :buildBlockFromCfg.1:cfg "o%+FK<A####"                   CoreBuilder.mnd: controller.generator2 = buildBlockFromCfg(STEAM_GEN);
  173:  setaddr :buildBlockFromCfg.1*retaddr *label79                ...
  174:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label79                                               ...
  175:  write :buildBlockFromCfg.1*retval .controller ".generator2"  ...
  176:  set :buildBlockFromCfg.1:cfg "$(.#U<###"                   CoreBuilder.mnd: controller.multipress = buildBlockFromCfg(MULTIPRESS);
  177:  setaddr :buildBlockFromCfg.1*retaddr *label80                ...
  178:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label80                                               ...
  179:  write :buildBlockFromCfg.1*retval .controller ".multipress"  ...
  180:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  181:  set :buildBlockFromCfg.1:cfg " '%-#2#####"                   CoreBuilder.mnd: controller.payloadRouter = buildBlockFromCfg(PAYLOAD_ROUTER);
  182:  setaddr :buildBlockFromCfg.1*retaddr *label81                ...
  183:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label81                                               ...
  184:  write :buildBlockFromCfg.1*retval .controller ".payloadRoute ...
  185:  set :buildBlockFromCfg.1:cfg "*(###A<###"                   CoreBuilder.mnd: controller.unloader4 = buildBlockFromCfg(UNLOADER4);
  186:  setaddr :buildBlockFromCfg.1*retaddr *label82                ...
  187:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label82                                               ...
  188:  write :buildBlockFromCfg.1*retval .controller ".unloader4"   ...
  189:  set :buildBlockFromCfg.1:cfg "X*''%######"                   CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE);
  190:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  191:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  192:  set :buildBlockFromCfg.1:cfg "*%ë#}####"                   CoreBuilder.mnd: var reconstructor = buildBlockFromCfg(ADDITIVE_REC);
  193:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  194:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  195:  write :buildBlockFromCfg.1*retval .controller ".reconstructo CoreBuilder.mnd: controller.reconstructor = reconstructor;
  196:  write :buildBlockFromCfg.1*retval processor1 ".reconstructor CoreBuilder.mnd: display.reconstructor = reconstructor;
  197:  set :buildBlockFromCfg.1:cfg "l/-#U#A7###"                   CoreBuilder.mnd: buildBlockFromCfg(BATTERY_LARGE);
  198:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  199:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  200:  setaddr :buildUnits*retaddr *label86                         CoreBuilder.mnd: buildUnits();
  201:  call *label40 *invalid :buildUnits*retval                    ...
        label *label86                                               ...
  202:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  203:  set .metaglassSurplus 200                                    CoreBuilder.mnd: metaglassSurplus = 200;
  204:  write 6 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  205:  write 6 processor1 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  206:  set :buildBlockFromCfg.1:cfg "%-)A<######"                   CoreBuilder.mnd: controller.smelter2 = buildBlockFromCfg(SMELTER2);
  207:  setaddr :buildBlockFromCfg.1*retaddr *label88                ...
  208:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label88                                               ...
  209:  write :buildBlockFromCfg.1*retval .controller ".smelter2"    ...
  210:  set :buildBlockFromCfg:cfg "--###A<###"                     CoreBuilder.mnd: buildBlockFromCfg(UNLOADER5, @sand);
  211:  set :buildBlockFromCfg:config @sand                          ...
  212:  setaddr :buildBlockFromCfg*retaddr *label89                  ...
  213:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label89                                               ...
  214:  setaddr :buildUnits*retaddr *label90                         CoreBuilder.mnd: buildUnits();
  215:  call *label40 *invalid :buildUnits*retval                    ...
        label *label90                                               ...
        label *label91                                               CoreBuilder.mnd: while controller.polys < 3 do
  216:  read *tmp97 .controller ".polys"                             ...
  217:  jump *label93 greaterThanEq *tmp97 3                         ...
  218:  setaddr :supplyBase*retaddr *label94                         CoreBuilder.mnd: supplyBase();
  219:  call *label32 *invalid :supplyBase*retval                    ...
        label *label94                                               ...
  220:  jump *label91 always 0 0                                     CoreBuilder.mnd: while controller.polys < 3 do
        label *label93                                               ...
  221:  write 3 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  222:  write 3 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
        label *label96                                               CoreBuilder.mnd: while controller.flares < 2 do
  223:  read *tmp95 .controller ".flares"                            ...
  224:  jump *label98 greaterThanEq *tmp95 2                         ...
  225:  setaddr :supplyBase*retaddr *label99                         CoreBuilder.mnd: supplyBase();
  226:  call *label32 *invalid :supplyBase*retval                    ...
        label *label99                                               ...
  227:  jump *label96 always 0 0                                     CoreBuilder.mnd: while controller.flares < 2 do
        label *label98                                               ...
  228:  write 8 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  229:  write 8 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  230:  write @ore-titanium processor1 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  231:  wait 0.000000001                                             CoreBuilder.mnd: wait(1e-9);
  232:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  233:  read :blocksBuildTitaniumDrills:current processor4 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  234:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  235:  write .coreY processor4 ":findDrillLocation:y"               ...
  236:  write @unit processor4 ":findDrillLocation:unit"             ...
  237:  write @titanium processor4 ":findDrillLocation:item"         ...
  238:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
  239:  write 4 processor4 ":findDrillLocation:size"                 ...
  240:  write 1000000000 processor4 ":findDrillLocation:limit"       ...
  241:  write false processor4 ":findDrillLocation*finished"         ...
  242:  write 1 processor4 "@counter"                                ...
  243:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  244:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  245:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  246:  write false processor5 ":buildTitaniumDrills*finished"       ...
  247:  write 3 processor5 "@counter"                                ...
        label *label102                                              ...
  248:  wait 1e-15                                                   ...
  249:  read *tmp187 processor5 ":buildTitaniumDrills*finished"      ...
  250:  jump *label102 equal *tmp187 false                           ...
  251:  write false processor4 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  252:  write 3 processor4 "@counter"                                ...
  253:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  254:  write .coreX processor4 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  255:  write .coreY processor4 ":layoutThoriumDrill:y"              ...
  256:  write @unit processor4 ":layoutThoriumDrill:unit"            ...
  257:  write 7 processor4 ":layoutThoriumDrill:limit"               ...
  258:  write false processor4 ":layoutThoriumDrill*finished"        ...
  259:  write 2 processor4 "@counter"                                ...
        label *label104                                              ...
  260:  wait 1e-15                                                   ...
  261:  read *tmp192 processor4 ":layoutThoriumDrill*finished"       ...
  262:  jump *label104 equal *tmp192 false                           ...
  263:  set :meetTarget.1:cfg "x**F#AA7###"                          CoreBuilder.mnd: meetTarget(LASER_DRILL);
  264:  setaddr :meetTarget.1*retaddr *label105                      ...
  265:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label105                                              ...
        label *label106                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  266:  wait 1e-15                                                   ...
  267:  read *tmp194 processor4 ":layoutThoriumDrill*finished"       ...
  268:  jump *label106 equal *tmp194 false                           ...
  269:  read :buildThoriumDrill:result processor4 ":layoutThoriumDri ...
  270:  jump *label107 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  271:  set :error:error "Cannot locate spot for thorium drill"      ...
  272:  setaddr :error*retaddr *label109                             ...
  273:  call *label13 *invalid :error*retval                         ...
        label *label109                                              ...
        label *label107                                              ...
  274:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0);
  275:  read *tmp53 processor4 ".drillX"                             ...
  276:  write *tmp53 processor5 ":buildBlockAt:x"                    ...
  277:  read *tmp54 processor4 ".drillY"                             ...
  278:  write *tmp54 processor5 ":buildBlockAt:y"                    ...
  279:  write null processor5 ":buildBlockAt:rotation"               ...
  280:  write 0 processor5 ":buildBlockAt:config"                    ...
  281:  write false processor5 ":buildBlockAt*finished"              ...
  282:  write 1 processor5 "@counter"                                ...
        label *label110                                              ...
  283:  wait 1e-15                                                   ...
  284:  read *tmp203 processor5 ":buildBlockAt*finished"             ...
  285:  jump *label110 equal *tmp203 false                           ...
  286:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  287:  set :buildRemoteBlock:cfg "z%-AAA##A##"                      CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  288:  read :buildRemoteBlock:x processor4 ".water1X"               ...
  289:  read :buildRemoteBlock:y processor4 ".water1Y"               ...
  290:  setaddr :buildRemoteBlock*retaddr *label111                  ...
  291:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label111                                              ...
  292:  read :buildRemoteBlock:x processor4 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  293:  read :buildRemoteBlock:y processor4 ".water2Y"               ...
  294:  setaddr :buildRemoteBlock*retaddr *label112                  ...
  295:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label112                                              ...
  296:  set :buildRemoteBlock:cfg "o%+FK<A####"                      CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  297:  read :buildRemoteBlock:x processor4 ".generatorX"            ...
  298:  read :buildRemoteBlock:y processor4 ".generatorY"            ...
  299:  setaddr :buildRemoteBlock*retaddr *label113                  ...
  300:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label113                                              ...
  301:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  302:  set :buildRemoteBlock:cfg "g)'%)######"                      CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.nodeX, oreLocator.nodeY);
  303:  read :buildRemoteBlock:x processor4 ".nodeX"                 ...
  304:  read :buildRemoteBlock:y processor4 ".nodeY"                 ...
  305:  setaddr :buildRemoteBlock*retaddr *label114                  ...
  306:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label114                                              ...
  307:  set :buildRemoteBlock:cfg "r**#-#+####"                      CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  308:  read :buildRemoteBlock:x processor4 ".panelX"                ...
  309:  read :buildRemoteBlock:y processor4 ".panelY"                ...
  310:  setaddr :buildRemoteBlock*retaddr *label115                  ...
  311:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label115                                              ...
  312:  set :buildRemoteBlock:cfg "k*/(7######"                      CoreBuilder.mnd: buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  313:  read :buildRemoteBlock:x processor4 ".batteryX"              ...
  314:  read :buildRemoteBlock:y processor4 ".batteryY"              ...
  315:  setaddr :buildRemoteBlock*retaddr *label116                  ...
  316:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label116                                              ...
  317:  set :buildRemoteBlock:cfg "**#######"                      CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  318:  read :buildRemoteBlock:x processor4 ".containerX"            ...
  319:  read :buildRemoteBlock:y processor4 ".containerY"            ...
  320:  setaddr :buildRemoteBlock*retaddr *label117                  ...
  321:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label117                                              ...
  322:  set .thoriumContainer :buildRemoteBlock*retval               ...
  323:  jump *label118 notEqual :buildRemoteBlock*retval null        CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  324:  set .thoriumContainer .thoriumDrill                          ...
        label *label118                                              ...
  325:  write .thoriumDrill processor1 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  326:  write .thoriumContainer processor1 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  327:  write .thoriumContainer processor3 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  328:  write false processor3 ":setThoriumContainer*finished"       ...
  329:  write 3 processor3 "@counter"                                ...
        label *label120                                              ...
  330:  wait 1e-15                                                   ...
  331:  read *tmp215 processor3 ":setThoriumContainer*finished"      ...
  332:  jump *label120 equal *tmp215 false                           ...
  333:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  334:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  335:  write 1 processor1 ".megaTarget"                             CoreBuilder.mnd: display.megaTarget = target;
        label *label122                                              CoreBuilder.mnd: while controller.polys < 6 do
  336:  read *tmp97 .controller ".polys"                             ...
  337:  jump *label124 greaterThanEq *tmp97 6                        ...
  338:  setaddr :supplyBase*retaddr *label125                        CoreBuilder.mnd: supplyBase();
  339:  call *label32 *invalid :supplyBase*retval                    ...
        label *label125                                              ...
  340:  jump *label122 always 0 0                                    CoreBuilder.mnd: while controller.polys < 6 do
        label *label124                                              ...
  341:  set :buildBlockFromCfg:cfg "+(###A<###"                     CoreBuilder.mnd: controller.unloader6 = buildBlockFromCfg(UNLOADER6, @silicon);
  342:  set :buildBlockFromCfg:config @silicon                       ...
  343:  setaddr :buildBlockFromCfg*retaddr *label126                 ...
  344:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label126                                              ...
  345:  write :buildBlockFromCfg*retval .controller ".unloader6"     ...
  346:  set :buildBlockFromCfg.1:cfg "X+''%######"                   CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE2);
  347:  setaddr :buildBlockFromCfg.1*retaddr *label127               ...
  348:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label127                                              ...
  349:  set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#"                   CoreBuilder.mnd: var multiReconstructor = buildBlockFromCfg(MULTIPLICATIVE_REC);
  350:  setaddr :buildBlockFromCfg.1*retaddr *label129               ...
  351:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label129                                              ...
  352:  write :buildBlockFromCfg.1*retval .controller ".multiReconst CoreBuilder.mnd: controller.multiReconstructor = multiReconstructor;
  353:  write :buildBlockFromCfg.1*retval processor1 ".multiReconstr CoreBuilder.mnd: display.multiReconstructor = multiReconstructor;
  354:  setaddr :buildUnits*retaddr *label130                        CoreBuilder.mnd: buildUnits();
  355:  call *label40 *invalid :buildUnits*retval                    ...
        label *label130                                              ...
        label *label131                                              CoreBuilder.mnd: while true do
  356:  setaddr :supplyBase*retaddr *label134                        CoreBuilder.mnd: supplyBase();
  357:  call *label32 *invalid :supplyBase*retval                    ...
        label *label134                                              ...
  358:  jump *label131 always 0 0                                    CoreBuilder.mnd: while true do
        label *label10                                               Actions.mnd: void status2(text, item, block)
  359:  write :status2:text .display ".status2"                      Actions.mnd: display.status2 = text;
  360:  write :status2:item .display ".item2"                        Actions.mnd: display.item2 = item;
  361:  write :status2:block .display ".block2"                      Actions.mnd: display.block2 = block;
  362:  return :status2*retaddr                                      Actions.mnd: void status2(text, item, block)
        label *label12                                               Actions.mnd: void transportStatus(target, item)
  363:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  364:  write :transportStatus:item .display ".transportItem"        Actions.mnd: display.transportItem = item;
  365:  return :transportStatus*retaddr                              Actions.mnd: void transportStatus(target, item)
        label *label13                                               Actions.mnd: void error(error)
  366:  set .ERROR :error:error                                      Actions.mnd: ERROR = error;
  367:  stop                                                         Actions.mnd: stopProcessor();
  368:  return :error*retaddr                                        Actions.mnd: void error(error)
        label *label16                                               Actions.mnd: void moveToEmpty(x, y)
  369:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label149                                              Actions.mnd: do
  370:  sensor *tmp224 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  371:  jump *label152 equal *tmp224 null                            ...
  372:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label152                                              ...
  373:  ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5 0 0      Actions.mnd: approach(x, y, RADIUS - 0.5);
  374:  ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp227 0    Actions.mnd: while !within(x, y, RADIUS);
  375:  jump *label149 equal *tmp227 false                           Actions.mnd: do
  376:  return :moveToEmpty*retaddr                                  Actions.mnd: void moveToEmpty(x, y)
        label *label17                                               Actions.mnd: void dropAll()
        label *label155                                              Actions.mnd: while @unit.@firstItem != null do
  377:  sensor *tmp229 @unit @firstItem                              ...
  378:  jump *label157 equal *tmp229 null                            ...
  379:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  380:  jump *label155 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label157                                              ...
  381:  return :dropAll*retaddr                                      Actions.mnd: void dropAll()
        label *label19                                               Actions.mnd: void depositItems(block, item)
  382:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  383:  sensor *tmp233 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  384:  jump *label162 notEqual *tmp233 :depositItems:item           ...
  385:  sensor *tmp231 :depositItems:block @x                        Actions.mnd: moveTo(block.@x, block.@y, radius);
  386:  sensor *tmp232 :depositItems:block @y                        ...
  387:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label422                                              Actions.mnd: while !within(x, y, radius) do
  388:  ucontrol within *tmp231 *tmp232 6 *tmp219 0                  ...
  389:  jump *label424 notEqual *tmp219 false                        ...
  390:  ucontrol approach *tmp231 *tmp232 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  391:  jump *label422 always 0 0                                    Actions.mnd: while !within(x, y, radius) do
        label *label424                                              ...
  392:  sensor :depositItems:cap :depositItems:block @itemCapacity   Actions.mnd: var cap = block.@itemCapacity;
        label *label165                                              Actions.mnd: do
  393:  ucontrol itemDrop :depositItems:block 30 0 0 0               Actions.mnd: itemDrop(block, capacity);
  394:  sensor *tmp237 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  395:  op mul *tmp238 *tmp237 :depositItems:cap                     ...
  396:  sensor *tmp239 :depositItems:block :depositItems:item        ...
  397:  jump *label165 greaterThan *tmp238 *tmp239                   Actions.mnd: do
  398:  jump *label163 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label162                                              ...
        label *label168                                              Actions.mnd: while @unit.@firstItem != null do
  399:  sensor *tmp241 @unit @firstItem                              ...
  400:  jump *label170 equal *tmp241 null                            ...
  401:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  402:  jump *label168 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label170                                              ...
        label *label163                                              Actions.mnd: if @unit.@firstItem == item then
  403:  set :transportStatus:target 0                                Actions.mnd: transportStatus(0, null);
  404:  set :transportStatus:item null                               ...
  405:  setaddr :transportStatus*retaddr *label171                   ...
  406:  call *label12 *invalid :transportStatus*retval               ...
        label *label171                                              ...
  407:  return :depositItems*retaddr                                 Actions.mnd: void depositItems(block, item)
        label *label21                                               Actions.mnd: void mineOre(ore, amount, block)
  408:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  409:  set :transportStatus:target :mineOre:amount                  Actions.mnd: transportStatus(amount, ore);
  410:  set :transportStatus:item :mineOre:ore                       ...
  411:  setaddr :transportStatus*retaddr *label177                   ...
  412:  call *label12 *invalid :transportStatus*retval               ...
        label *label177                                              ...
  413:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  414:  jump *label441 notEqual *tmp243 false                        ...
  415:  set :error:error "Cannot locate ore"                         Actions.mnd: error("Cannot locate ore");
  416:  setaddr :error*retaddr *label440                             ...
  417:  call *label13 *invalid :error*retval                         ...
        label *label440                                              ...
        label *label441                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  418:  set :mineOre:x :locateOre:x                                  Actions.mnd: locateOre(ore, out x, out y);
  419:  set :mineOre:y :locateOre:y                                  ...
  420:  set :moveToEmpty:x :locateOre:x                              Actions.mnd: moveToEmpty(x, y);
  421:  set :moveToEmpty:y :locateOre:y                              ...
  422:  setaddr :moveToEmpty*retaddr *label179                       ...
  423:  call *label16 *invalid :moveToEmpty*retval                   ...
        label *label179                                              ...
  424:  sensor *tmp248 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  425:  jump *label180 equal *tmp248 :mineOre:ore                    ...
  426:  setaddr :dropAll*retaddr *label182                           ...
  427:  call *label17 *invalid :dropAll*retval                       ...
        label *label182                                              ...
        label *label180                                              ...
  428:  write "Mining..." .display ".status3"                        Actions.mnd: display.status3 = text;
  429:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label184                                              Actions.mnd: do
  430:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  431:  op notEqual *tmp253 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  432:  op notEqual *tmp254 :mineOre:item :mineOre:ore               ...
  433:  op land *tmp255 *tmp253 *tmp254                              ...
  434:  jump *label186 notEqual *tmp255 false                        ...
  435:  ucontrol mine :mineOre:x :mineOre:y 0 0 0                    Actions.mnd: mine(x, y);
  436:  jump *label186 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  437:  sensor *tmp259 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  438:  jump *label184 lessThan *tmp259 :mineOre:amount              Actions.mnd: do
        label *label186                                              ...
  439:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  440:  set :depositItems:block :mineOre:block                       Actions.mnd: depositItems(block, ore);
  441:  set :depositItems:item :mineOre:ore                          ...
  442:  setaddr :depositItems*retaddr *label191                      ...
  443:  call *label19 *invalid :depositItems*retval                  ...
        label *label191                                              ...
  444:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)
        label *label22                                               Actions.mnd: void mineOre(ore)
  445:  set :status2:text "Mining "                                  Actions.mnd: status2("Mining ", ore, "core");
  446:  set :status2:item :mineOre.1:ore                             ...
  447:  set :status2:block "core"                                    ...
  448:  setaddr :status2*retaddr *label193                           ...
  449:  call *label10 *invalid :status2*retval                       ...
        label *label193                                              ...
  450:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  451:  set :mineOre:amount 30                                       ...
  452:  set :mineOre:block .core                                     ...
  453:  setaddr :mineOre*retaddr *label194                           ...
  454:  call *label21 *invalid :mineOre*retval                       ...
        label *label194                                              ...
  455:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label23                                               Actions.mnd: void fetchBlock(block, item)
  456:  sensor *tmp262 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  457:  op min :transportStatus:target *tmp262 30                    ...
  458:  set :transportStatus:item :fetchBlock:item                   ...
  459:  setaddr :transportStatus*retaddr *label196                   ...
  460:  call *label12 *invalid :transportStatus*retval               ...
        label *label196                                              ...
  461:  set :status2:text "Fetching "                                Actions.mnd: status2("Fetching ", item, block);
  462:  set :status2:item :fetchBlock:item                           ...
  463:  set :status2:block :fetchBlock:block                         ...
  464:  setaddr :status2*retaddr *label197                           ...
  465:  call *label10 *invalid :status2*retval                       ...
        label *label197                                              ...
  466:  sensor *tmp264 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  467:  sensor *tmp265 :fetchBlock:block @y                          ...
  468:  set :moveToEmpty:x *tmp264                                   ...
  469:  set :moveToEmpty:y *tmp265                                   ...
  470:  setaddr :moveToEmpty*retaddr *label198                       ...
  471:  call *label16 *invalid :moveToEmpty*retval                   ...
        label *label198                                              ...
  472:  setaddr :dropAll*retaddr *label199                           Actions.mnd: dropAll();
  473:  call *label17 *invalid :dropAll*retval                       ...
        label *label199                                              ...
        label *label200                                              Actions.mnd: do
  474:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  475:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  476:  op notEqual *tmp267 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  477:  op notEqual *tmp268 :fetchBlock:unitItem :fetchBlock:item    ...
  478:  op land *tmp269 *tmp267 *tmp268                              ...
  479:  jump *label203 equal *tmp269 false                           ...
  480:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label203                                              Actions.mnd: if unitItem != null and unitItem != item then
  481:  sensor *tmp271 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  482:  op lessThan *tmp272 *tmp271 30                               ...
  483:  sensor *tmp273 :fetchBlock:block :fetchBlock:item            ...
  484:  op land *tmp274 *tmp272 *tmp273                              ...
  485:  jump *label200 notEqual *tmp274 false                        Actions.mnd: do
  486:  set :depositItems:block .core                                Actions.mnd: depositItems(core, item);
  487:  set :depositItems:item :fetchBlock:item                      ...
  488:  setaddr :depositItems*retaddr *label205                      ...
  489:  call *label19 *invalid :depositItems*retval                  ...
        label *label205                                              ...
  490:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label24                                               Actions.mnd: void supplyBlock(block, ore)
  491:  set :status2:text "Supplying "                               Actions.mnd: status2("Supplying ", ore, block);
  492:  set :status2:item :supplyBlock:ore                           ...
  493:  set :status2:block :supplyBlock:block                        ...
  494:  setaddr :status2*retaddr *label207                           ...
  495:  call *label10 *invalid :status2*retval                       ...
        label *label207                                              ...
  496:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  497:  sensor *tmp276 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  498:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp2 ...
  499:  jump *label208 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  500:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  501:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  502:  set :mineOre:block :supplyBlock:block                        ...
  503:  setaddr :mineOre*retaddr *label210                           ...
  504:  call *label21 *invalid :mineOre*retval                       ...
        label *label210                                              ...
        label *label208                                              Actions.mnd: if missing > 0 then
  505:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label31                                               CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation)
  506:  read *tmp292 :unpackCfg:cfg 0                                CoreBuilder.mnd: type = lookup(:block, char(cfg, index++) - 35);
  507:  op sub *tmp293 *tmp292 35                                    ...
  508:  lookup block :unpackCfg:type *tmp293                         ...
  509:  read *tmp296 :unpackCfg:cfg 1                                CoreBuilder.mnd: x = char(cfg, index++) - 35 - 7;
  510:  op sub :unpackCfg:x *tmp296 42                               ...
  511:  read *tmp300 :unpackCfg:cfg 2                                CoreBuilder.mnd: y = char(cfg, index++) - 35 - 7;
  512:  op sub :unpackCfg:y *tmp300 42                               ...
  513:  read *tmp304 :unpackCfg:cfg 3                                CoreBuilder.mnd: cu = char(cfg, index++) - 35;
  514:  op sub :unpackCfg:cu *tmp304 35                              ...
  515:  read *tmp307 :unpackCfg:cfg 4                                CoreBuilder.mnd: pb = char(cfg, index++) - 35;
  516:  op sub :unpackCfg:pb *tmp307 35                              ...
  517:  read *tmp310 :unpackCfg:cfg 5                                CoreBuilder.mnd: gr = char(cfg, index++) - 35;
  518:  op sub :unpackCfg:gr *tmp310 35                              ...
  519:  read *tmp313 :unpackCfg:cfg 6                                CoreBuilder.mnd: si = char(cfg, index++) - 35;
  520:  op sub :unpackCfg:si *tmp313 35                              ...
  521:  read *tmp316 :unpackCfg:cfg 7                                CoreBuilder.mnd: ti = char(cfg, index++) - 35;
  522:  op sub :unpackCfg:ti *tmp316 35                              ...
  523:  read *tmp319 :unpackCfg:cfg 8                                CoreBuilder.mnd: mg = char(cfg, index++) - 35;
  524:  op sub :unpackCfg:mg *tmp319 35                              ...
  525:  read *tmp322 :unpackCfg:cfg 9                                CoreBuilder.mnd: th = char(cfg, index++) - 35;
  526:  op sub :unpackCfg:th *tmp322 35                              ...
  527:  read *tmp325 :unpackCfg:cfg 10                               CoreBuilder.mnd: rotation = char(cfg, index++) - 35;
  528:  op sub :unpackCfg:rotation *tmp325 35                        ...
  529:  return :unpackCfg*retaddr                                    CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation)
        label *label32                                               CoreBuilder.mnd: void supplyBase()
  530:  jump *label224 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  531:  write "Phase 2: servicing thorium drill" .display ".status1" Actions.mnd: display.status1 = text;
  532:  set :supplyBlockFromCore:target .thoriumGenerator            CoreBuilder.mnd: supplyBlockFromCore(thoriumGenerator, @coal);
  533:  set :supplyBlockFromCore:item @coal                          ...
  534:  sensor *tmp280 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  535:  op min :transportStatus:target *tmp280 30                    ...
  536:  set :transportStatus:item @coal                              ...
  537:  setaddr :transportStatus*retaddr *label428                   ...
  538:  call *label12 *invalid :transportStatus*retval               ...
        label *label428                                              ...
  539:  set :status2:text "Transferring "                            Actions.mnd: status2("Transferring ", item, target);
  540:  set :status2:item :supplyBlockFromCore:item                  ...
  541:  set :status2:block :supplyBlockFromCore:target               ...
  542:  setaddr :status2*retaddr *label429                           ...
  543:  call *label10 *invalid :status2*retval                       ...
        label *label429                                              ...
  544:  set :moveToEmpty:x .coreX                                    Actions.mnd: moveToEmpty(coreX, coreY);
  545:  set :moveToEmpty:y .coreY                                    ...
  546:  setaddr :moveToEmpty*retaddr *label430                       ...
  547:  call *label16 *invalid :moveToEmpty*retval                   ...
        label *label430                                              ...
  548:  setaddr :dropAll*retaddr *label431                           Actions.mnd: dropAll();
  549:  call *label17 *invalid :dropAll*retval                       ...
        label *label431                                              ...
        label *label432                                              Actions.mnd: do
  550:  ucontrol itemTake .core :supplyBlockFromCore:item 30 0 0     Actions.mnd: itemTake(core, item, capacity);
  551:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  552:  op notEqual *tmp283 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  553:  op notEqual *tmp284 :supplyBlockFromCore:unitItem :supplyBlo ...
  554:  op land *tmp285 *tmp283 *tmp284                              ...
  555:  jump *label433 equal *tmp285 false                           ...
  556:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label433                                              Actions.mnd: if unitItem != null and unitItem != item then
  557:  sensor *tmp287 @unit :supplyBlockFromCore:item               Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  558:  op lessThan *tmp288 *tmp287 30                               ...
  559:  sensor *tmp289 .core :supplyBlockFromCore:item               ...
  560:  op land *tmp290 *tmp288 *tmp289                              ...
  561:  jump *label432 notEqual *tmp290 false                        Actions.mnd: do
  562:  set :depositItems:block :supplyBlockFromCore:target          Actions.mnd: depositItems(target, item);
  563:  set :depositItems:item :supplyBlockFromCore:item             ...
  564:  setaddr :depositItems*retaddr *label437                      ...
  565:  call *label19 *invalid :depositItems*retval                  ...
        label *label437                                              ...
  566:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  567:  set :fetchBlock:item @thorium                                ...
  568:  setaddr :fetchBlock*retaddr *label229                        ...
  569:  call *label23 *invalid :fetchBlock*retval                    ...
        label *label229                                              ...
  570:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label224                                              ...
  571:  read *tmp96 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 3 then
  572:  jump *label230 lessThanEq *tmp96 3                           ...
  573:  write "Phase 1: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  574:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  575:  setaddr :mineOre.1*retaddr *label234                         ...
  576:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label234                                              ...
  577:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 3 then
        label *label230                                              ...
  578:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  579:  jump *label236 notEqual .unloader1 null                      CoreBuilder.mnd: if unloader1 == null then
  580:  sensor *tmp332 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  581:  jump *label238 greaterThanEq *tmp332 .targetGraphite         ...
  582:  sensor *tmp335 .press @coal                                  CoreBuilder.mnd: if press.@coal < 5 then
  583:  jump *label240 greaterThanEq *tmp335 5                       ...
  584:  write "Goal 1: graphite requirement" .display ".status1"     Actions.mnd: display.status1 = text;
  585:  set :supplyBlock:block .press                                CoreBuilder.mnd: supplyBlock(press, @coal);
  586:  set :supplyBlock:ore @coal                                   ...
  587:  setaddr :supplyBlock*retaddr *label243                       ...
  588:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label243                                              ...
  589:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label240                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label238                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  590:  sensor *tmp338 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  591:  jump *label244 greaterThanEq *tmp338 .targetSilicon          ...
  592:  sensor *tmp341 .smelter @coal                                CoreBuilder.mnd: if smelter.@coal < 5 then
  593:  jump *label246 greaterThanEq *tmp341 5                       ...
  594:  write "Goal 2: coal for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  595:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @coal);
  596:  set :supplyBlock:ore @coal                                   ...
  597:  setaddr :supplyBlock*retaddr *label249                       ...
  598:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label249                                              ...
  599:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  600:  jump *label247 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label246                                              ...
  601:  sensor *tmp344 .smelter @sand                                CoreBuilder.mnd: elsif smelter.@sand < 5 then
  602:  jump *label250 greaterThanEq *tmp344 5                       ...
  603:  write "Goal 3: sand for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  604:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @sand);
  605:  set :supplyBlock:ore @sand                                   ...
  606:  setaddr :supplyBlock*retaddr *label253                       ...
  607:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label253                                              ...
  608:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label250                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label247                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label244                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  609:  sensor *tmp347 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < powerTarget then
  610:  jump *label254 greaterThanEq *tmp347 .powerTarget            ...
  611:  sensor *tmp350 .generator @coal                              CoreBuilder.mnd: if generator.@coal < 2 then
  612:  jump *label256 greaterThanEq *tmp350 2                       ...
  613:  write "Goal 4: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  614:  set :supplyBlock:block .generator                            CoreBuilder.mnd: supplyBlock(generator, @coal);
  615:  set :supplyBlock:ore @coal                                   ...
  616:  setaddr :supplyBlock*retaddr *label259                       ...
  617:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label259                                              ...
  618:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label256                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label254                                              CoreBuilder.mnd: if battery.@totalPower < powerTarget then
        label *label236                                              CoreBuilder.mnd: if unloader1 == null then
  619:  set *tmp355 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  620:  sensor *tmp353 .core @titanium                               ...
  621:  jump *label261 greaterThanEq *tmp353 .targetTitanium         ...
  622:  sensor *tmp356 .core @titanium                               ...
  623:  op sub *tmp357 .targetTitanium *tmp356                       ...
  624:  op min *tmp355 7 *tmp357                                     ...
        label *label261                                              ...
  625:  sensor *tmp359 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  626:  jump *label262 greaterThanEq *tmp359 *tmp355                 ...
  627:  jump *label263 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  628:  sensor *tmp364 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
  629:  op mul *tmp365 .unloader1 .powerTarget                       ...
  630:  jump *label266 greaterThanEq *tmp364 *tmp365                 ...
  631:  write "Goal 5: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  632:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  633:  setaddr :mineOre.1*retaddr *label269                         ...
  634:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label269                                              ...
  635:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
        label *label266                                              ...
  636:  sensor *tmp368 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  637:  jump *label270 greaterThanEq *tmp368 .targetSilicon          ...
  638:  write "Goal 6: silicon requirement" .display ".status1"      Actions.mnd: display.status1 = text;
  639:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  640:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  641:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  642:  jump *label274 greaterThanEq :supplyBase0:coal :supplyBase0: ...
  643:  set :mineOre.1:ore @coal                                     ...
        label *label274                                              ...
  644:  setaddr :mineOre.1*retaddr *label275                         CoreBuilder.mnd: mineOre(ore);
  645:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label275                                              ...
  646:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label270                                              ...
  647:  sensor *tmp375 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  648:  jump *label276 greaterThanEq *tmp375 .targetCopper           ...
  649:  write "Goal 7: copper requirement" .display ".status1"       Actions.mnd: display.status1 = text;
  650:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  651:  setaddr :mineOre.1*retaddr *label279                         ...
  652:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label279                                              ...
  653:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label276                                              ...
  654:  sensor *tmp378 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  655:  jump *label280 greaterThanEq *tmp378 .targetLead             ...
  656:  write "Goal 8: lead requirement" .display ".status1"         Actions.mnd: display.status1 = text;
  657:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  658:  setaddr :mineOre.1*retaddr *label283                         ...
  659:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label283                                              ...
  660:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label280                                              ...
  661:  sensor *tmp381 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  662:  jump *label284 greaterThanEq *tmp381 .targetMetaglass        ...
  663:  write "Goal 9: metaglass requirement" .display ".status1"    Actions.mnd: display.status1 = text;
  664:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  665:  setaddr :mineOre.1*retaddr *label287                         ...
  666:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label287                                              ...
  667:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label284                                              ...
  668:  write "Goal 10: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  669:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  670:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  671:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  672:  jump *label290 greaterThan :supplyBase0:coal.1 :supplyBase0: ...
  673:  set :mineOre.1:ore @coal                                     ...
        label *label290                                              ...
  674:  setaddr :mineOre.1*retaddr *label291                         CoreBuilder.mnd: mineOre(ore);
  675:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label291                                              ...
  676:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label262                                              ...
  677:  write "Goal 11: Fetching titanium" .display ".status1"       Actions.mnd: display.status1 = text;
  678:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  679:  set :fetchBlock:item @titanium                               ...
  680:  setaddr :fetchBlock*retaddr *label293                        ...
  681:  call *label23 *invalid :fetchBlock*retval                    ...
        label *label293                                              ...
        label *label263                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  682:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label33                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
  683:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  684:  op sign *tmp389 :meetTarget:lead 0                           ...
  685:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  686:  op sign *tmp389 :meetTarget:graphite 0                       ...
  687:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  688:  op sign *tmp389 :meetTarget:silicon 0                        ...
  689:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  690:  op sign *tmp389 :meetTarget:titanium 0                       ...
  691:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  692:  op sign *tmp389 :meetTarget:metaglass 0                      ...
  693:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  694:  op sign *tmp389 :meetTarget:thorium 0                        ...
  695:  op add :meetTarget:count :meetTarget:count *tmp389           ...
  696:  write :meetTarget:count .display ".totalTargets"             CoreBuilder.mnd: display.totalTargets = count;
  697:  write :meetTarget:block .display ".nextBlock"                CoreBuilder.mnd: display.nextBlock = block;
  698:  write :meetTarget:copper .display ".targetCopper"            CoreBuilder.mnd: display.targetCopper = copper;
  699:  write :meetTarget:lead .display ".targetLead"                CoreBuilder.mnd: display.targetLead = lead;
  700:  write :meetTarget:graphite .display ".targetGraphite"        CoreBuilder.mnd: display.targetGraphite = graphite;
  701:  write :meetTarget:silicon .display ".targetSilicon"          CoreBuilder.mnd: display.targetSilicon = silicon;
  702:  write :meetTarget:titanium .display ".targetTitanium"        CoreBuilder.mnd: display.targetTitanium = titanium;
  703:  write :meetTarget:metaglass .display ".targetMetaglass"      CoreBuilder.mnd: display.targetMetaglass = metaglass;
  704:  write :meetTarget:thorium .display ".targetThorium"          CoreBuilder.mnd: display.targetThorium = thorium;
  705:  set .targetCopper :meetTarget:copper                         CoreBuilder.mnd: targetCopper = copper;
  706:  op add *tmp390 :meetTarget:lead .leadSurplus                 CoreBuilder.mnd: targetLead = lead + leadSurplus + 1;
  707:  op add .targetLead *tmp390 1                                 ...
  708:  set .targetGraphite :meetTarget:graphite                     CoreBuilder.mnd: targetGraphite = graphite;
  709:  set .targetSilicon :meetTarget:silicon                       CoreBuilder.mnd: targetSilicon = silicon;
  710:  set .targetTitanium :meetTarget:titanium                     CoreBuilder.mnd: targetTitanium = titanium;
  711:  set .targetMetaglass :meetTarget:metaglass                   CoreBuilder.mnd: targetMetaglass = metaglass;
  712:  set .targetThorium :meetTarget:thorium                       CoreBuilder.mnd: targetThorium = thorium;
  713:  op add *tmp392 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  714:  write *tmp392 .controller ".pressTarget"                     ...
  715:  op add *tmp393 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  716:  write *tmp393 .controller ".smelterTarget"                   ...
  717:  op add *tmp394 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  718:  write *tmp394 .controller ".kilnTarget"                      ...
  719:  write *tmp390 .controller ".leadReserve"                     CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  720:  op sign *tmp396 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  721:  op mul *tmp397 *tmp396 20                                    ...
  722:  op add *tmp398 :meetTarget:silicon *tmp397                   ...
  723:  write *tmp398 .controller ".siliconReserve"                  ...
  724:  op sign *tmp399 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  725:  op mul *tmp400 *tmp399 20                                    ...
  726:  op add *tmp401 :meetTarget:graphite *tmp400                  ...
  727:  write *tmp401 .controller ".graphiteReserve"                 ...
        label *label305                                              CoreBuilder.mnd: while !targetMet() do
  728:  sensor *tmp403 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  729:  jump *label309 greaterThanEq *tmp403 .targetCopper           ...
  730:  set *tmp402 false                                            ...
  731:  jump *label308 always 0 0                                    ...
        label *label309                                              ...
  732:  sensor *tmp406 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  733:  jump *label311 greaterThanEq *tmp406 .targetLead             ...
  734:  set *tmp402 false                                            ...
  735:  jump *label308 always 0 0                                    ...
        label *label311                                              ...
  736:  sensor *tmp409 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  737:  jump *label313 greaterThanEq *tmp409 .targetGraphite         ...
  738:  set *tmp402 false                                            ...
  739:  jump *label308 always 0 0                                    ...
        label *label313                                              ...
  740:  sensor *tmp412 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  741:  jump *label315 greaterThanEq *tmp412 .targetSilicon          ...
  742:  set *tmp402 false                                            ...
  743:  jump *label308 always 0 0                                    ...
        label *label315                                              ...
  744:  sensor *tmp415 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  745:  jump *label317 greaterThanEq *tmp415 .targetTitanium         ...
  746:  set *tmp402 false                                            ...
  747:  jump *label308 always 0 0                                    ...
        label *label317                                              ...
  748:  sensor *tmp418 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  749:  jump *label319 greaterThanEq *tmp418 .targetMetaglass        ...
  750:  set *tmp402 false                                            ...
  751:  jump *label308 always 0 0                                    ...
        label *label319                                              ...
  752:  sensor *tmp421 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  753:  jump *label321 greaterThanEq *tmp421 .targetThorium          ...
  754:  set *tmp402 false                                            ...
  755:  jump *label308 always 0 0                                    ...
        label *label321                                              ...
  756:  set *tmp402 true                                             CoreBuilder.mnd: return true;
  757:  jump *label308 always 0 0                                    ...
        label *label308                                              CoreBuilder.mnd: while !targetMet() do
  758:  jump *label307 notEqual *tmp402 false                        ...
  759:  setaddr :supplyBase*retaddr *label323                        CoreBuilder.mnd: supplyBase();
  760:  call *label32 *invalid :supplyBase*retval                    ...
        label *label323                                              ...
  761:  jump *label305 always 0 0                                    CoreBuilder.mnd: while !targetMet() do
        label *label307                                              ...
  762:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
        label *label34                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config)
  763:  set :meetTarget:block :buildBlock:block                      CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium);
  764:  set :meetTarget:copper :buildBlock:copper                    ...
  765:  set :meetTarget:lead :buildBlock:lead                        ...
  766:  set :meetTarget:graphite :buildBlock:graphite                ...
  767:  set :meetTarget:silicon :buildBlock:silicon                  ...
  768:  set :meetTarget:titanium :buildBlock:titanium                ...
  769:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  770:  set :meetTarget:thorium :buildBlock:thorium                  ...
  771:  setaddr :meetTarget*retaddr *label328                        ...
  772:  call *label33 *invalid :meetTarget*retval                    ...
        label *label328                                              ...
  773:  write :buildBlock:block .blockBuilder ":buildBlockAt:block"  CoreBuilder.mnd: return blockBuilder.buildBlockAt(block, x, y, rotation, config);
  774:  write :buildBlock:x .blockBuilder ":buildBlockAt:x"          ...
  775:  write :buildBlock:y .blockBuilder ":buildBlockAt:y"          ...
  776:  write :buildBlock:rotation .blockBuilder ":buildBlockAt:rota ...
  777:  write :buildBlock:config .blockBuilder ":buildBlockAt:config ...
  778:  write false .blockBuilder ":buildBlockAt*finished"           ...
  779:  write 1 .blockBuilder "@counter"                             ...
        label *label329                                              ...
  780:  wait 1e-15                                                   ...
  781:  read *tmp445 .blockBuilder ":buildBlockAt*finished"          ...
  782:  jump *label329 equal *tmp445 false                           ...
  783:  read :buildBlock*retval .blockBuilder ":buildBlockAt*retval" ...
  784:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config)
        label *label35                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  785:  op add *tmp447 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  786:  jump *label331 lessThanEq *tmp447 0                          ...
  787:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
  788:  setaddr :unpackCfg*retaddr *label333                         ...
  789:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label333                                              ...
  790:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null);
  791:  set :buildBlock:x :buildRemoteBlock:x                        ...
  792:  set :buildBlock:y :buildRemoteBlock:y                        ...
  793:  set :buildBlock:copper :unpackCfg:cu                         ...
  794:  set :buildBlock:lead :unpackCfg:pb                           ...
  795:  set :buildBlock:graphite :unpackCfg:gr                       ...
  796:  set :buildBlock:silicon :unpackCfg:si                        ...
  797:  set :buildBlock:titanium :unpackCfg:ti                       ...
  798:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  799:  set :buildBlock:thorium :unpackCfg:th                        ...
  800:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  801:  set :buildBlock:config null                                  ...
  802:  setaddr :buildBlock*retaddr *label334                        ...
  803:  call *label34 *invalid :buildBlock*retval                    ...
        label *label334                                              ...
  804:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  805:  return :buildRemoteBlock*retaddr                             ...
        label *label331                                              CoreBuilder.mnd: if x + y > 0 then
  806:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  807:  return :buildRemoteBlock*retaddr                             ...
        label *label36                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  808:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
  809:  setaddr :unpackCfg*retaddr *label336                         ...
  810:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label336                                              ...
  811:  op add *tmp450 .coreX :unpackCfg:x                           CoreBuilder.mnd: return buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config);
  812:  op add *tmp451 .coreY :unpackCfg:y                           ...
  813:  set :buildBlock:block :unpackCfg:type                        ...
  814:  set :buildBlock:x *tmp450                                    ...
  815:  set :buildBlock:y *tmp451                                    ...
  816:  set :buildBlock:copper :unpackCfg:cu                         ...
  817:  set :buildBlock:lead :unpackCfg:pb                           ...
  818:  set :buildBlock:graphite :unpackCfg:gr                       ...
  819:  set :buildBlock:silicon :unpackCfg:si                        ...
  820:  set :buildBlock:titanium :unpackCfg:ti                       ...
  821:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  822:  set :buildBlock:thorium :unpackCfg:th                        ...
  823:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  824:  set :buildBlock:config :buildBlockFromCfg:config             ...
  825:  setaddr :buildBlock*retaddr *label337                        ...
  826:  call *label34 *invalid :buildBlock*retval                    ...
        label *label337                                              ...
  827:  set :buildBlockFromCfg*retval :buildBlock*retval             ...
  828:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label37                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  829:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  830:  set :buildBlockFromCfg:config null                           ...
  831:  setaddr :buildBlockFromCfg*retaddr *label339                 ...
  832:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label339                                              ...
  833:  set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval    CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  834:  return :buildBlockFromCfg.1*retaddr                          ...
        label *label38                                               CoreBuilder.mnd: void meetTarget(cfg)
  835:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  836:  setaddr :unpackCfg*retaddr *label341                         ...
  837:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label341                                              ...
  838:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th);
  839:  set :meetTarget:copper :unpackCfg:cu                         ...
  840:  set :meetTarget:lead :unpackCfg:pb                           ...
  841:  set :meetTarget:graphite :unpackCfg:gr                       ...
  842:  set :meetTarget:silicon :unpackCfg:si                        ...
  843:  set :meetTarget:titanium :unpackCfg:ti                       ...
  844:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  845:  set :meetTarget:thorium :unpackCfg:th                        ...
  846:  setaddr :meetTarget*retaddr *label342                        ...
  847:  call *label33 *invalid :meetTarget*retval                    ...
        label *label342                                              ...
  848:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label40                                               CoreBuilder.mnd: void buildUnits()
  849:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0);
  850:  set :meetTarget:copper 0                                     ...
  851:  set :meetTarget:lead 0                                       ...
  852:  set :meetTarget:graphite 0                                   ...
  853:  set :meetTarget:silicon 0                                    ...
  854:  set :meetTarget:titanium 0                                   ...
  855:  set :meetTarget:metaglass 0                                  ...
  856:  set :meetTarget:thorium 0                                    ...
  857:  setaddr :meetTarget*retaddr *label347                        ...
  858:  call *label33 *invalid :meetTarget*retval                    ...
        label *label347                                              ...
  859:  write 0 .display ".totalTargets"                             CoreBuilder.mnd: display.totalTargets = 0;
  860:  write null .display ".nextBlock"                             CoreBuilder.mnd: display.nextBlock = null;
  861:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  862:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  863:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  864:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()


Performance: parsed in 1,006 ms, compiled in 505 ms, optimized in 1,702 ms, run in 10 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (18 steps):
The program didn't generate any output.
Execution exception at instruction 37: ubind @poly:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
