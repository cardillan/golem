  1537 instructions before optimizations.
    70 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
   152 instructions eliminated by Dead Code Elimination (10 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    73 instructions eliminated by Jump Optimization (5 iterations).
    53 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions modified by Expression Optimization (3 iterations).
     7 instructions eliminated by If Expression Optimization (4 iterations).
   116 instructions eliminated by Data Flow Optimization (10 passes, 31 iterations).
     1 loops improved by Loop Hoisting.
     4 instructions eliminated by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
    39 instructions eliminated by Function Inlining (11 iterations).
    21 function calls inlined by Function Inlining.
     4 instructions eliminated by Jump Straightening (5 iterations).
    12 instructions updated by Jump Threading.
     7 calls threaded by Jump Threading.
    30 instructions eliminated by Unreachable Code Elimination (2 iterations).
   988 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  * Unroll iteration loop at CoreBuilder.mnd:351:5               size   -19, benefit       39.0, efficiency   Infinity (-13 instructions)
    Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      918.0, efficiency   Infinity
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5038.1, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      343.8, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      272.0, efficiency      1.042
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     5972.7, efficiency    398.177
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     5972.7, efficiency    132.726
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    14982.7, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:416:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2406.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at CoreBuilder.mnd:136:17               size   +32, benefit      343.8, efficiency     10.742
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1203.1, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       37.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       18.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      601.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3437.5, efficiency    429.688
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3437.5, efficiency    149.457
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +8, benefit      343.8, efficiency     42.969
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +23, benefit      343.8, efficiency     14.946
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2550.0, efficiency     15.455
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1275.0, efficiency      7.727
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      232.0, efficiency      1.771
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5226.1, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5226.1, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2191.4, efficiency    273.926
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1917.5, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2191.4, efficiency     95.279
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3359.6, efficiency    479.946
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2613.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  * Unroll iteration loop at CoreBuilder.mnd:174:5               size   -13, benefit      918.0, efficiency   Infinity (-10 instructions)
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5038.1, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      343.8, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +261, benefit      272.0, efficiency      1.042
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     5972.7, efficiency    398.177
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     5972.7, efficiency    132.726
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    14982.7, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:416:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2406.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at CoreBuilder.mnd:136:17               size   +32, benefit      343.8, efficiency     10.742
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1203.1, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       37.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       18.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      601.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +131, benefit       16.0, efficiency      0.122
  ! Inline function call at CoreBuilder.mnd:309:5                size  +131, benefit       24.0, efficiency      0.183
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3437.5, efficiency    429.688
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3437.5, efficiency    149.457
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +8, benefit      343.8, efficiency     42.969
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +23, benefit      343.8, efficiency     14.946
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2550.0, efficiency     15.455
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1275.0, efficiency      7.727
  ! Inline function call at CoreBuilder.mnd:219:5                size  +131, benefit      232.0, efficiency      1.771
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5226.1, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5226.1, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2191.4, efficiency    273.926
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1917.5, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2191.4, efficiency     95.279
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3359.6, efficiency    479.946
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2613.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     5038.1, efficiency   Infinity (-29 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      343.8, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     5972.7, efficiency    398.177
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     5972.7, efficiency    132.726
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    14982.7, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:416:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:129:5                size    +0, benefit     2406.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at CoreBuilder.mnd:136:17               size   +32, benefit      343.8, efficiency     10.742
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
    Inline function call at CoreBuilder.mnd:124:5                size    +0, benefit     1203.1, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
    Inline function call at CoreBuilder.mnd:61:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:69:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:73:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
    Inline function call at CoreBuilder.mnd:81:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
    Inline function call at CoreBuilder.mnd:92:17                size    +0, benefit      150.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
    Inline function call at CoreBuilder.mnd:95:17                size    +0, benefit       75.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
    Inline function call at CoreBuilder.mnd:101:17               size    +0, benefit       37.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
    Inline function call at CoreBuilder.mnd:104:17               size    +0, benefit       18.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
    Inline function call at CoreBuilder.mnd:107:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:110:17               size    +0, benefit        9.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
    Inline function call at CoreBuilder.mnd:118:9                size    +0, benefit      601.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3437.5, efficiency    429.688
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3437.5, efficiency    149.457
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +8, benefit      343.8, efficiency     42.969
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +23, benefit      343.8, efficiency     14.946
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2550.0, efficiency     15.455
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1275.0, efficiency      7.727
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5226.1, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5226.1, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2191.4, efficiency    273.926
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1917.5, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2191.4, efficiency     95.279
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3359.6, efficiency    479.946
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2613.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 size    -1, benefit      343.8, efficiency   Infinity (-6 instructions)
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     5972.7, efficiency    398.177
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     5972.7, efficiency    132.726
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    14982.7, efficiency   Infinity
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:416:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +139, benefit       75.0, efficiency      0.540
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at CoreBuilder.mnd:136:17               size   +32, benefit      343.8, efficiency     10.742
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3437.5, efficiency    429.688
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3437.5, efficiency    149.457
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +8, benefit      343.8, efficiency     42.969
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +23, benefit      343.8, efficiency     14.946
  ! Inline function call at CoreBuilder.mnd:205:9                size  +139, benefit     2550.0, efficiency     18.345
  ! Inline function call at CoreBuilder.mnd:211:13               size  +139, benefit     1275.0, efficiency      9.173
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5226.1, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5226.1, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2191.4, efficiency    273.926
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1917.5, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2191.4, efficiency     95.279
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3359.6, efficiency    479.946
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2613.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     5972.7, efficiency    398.177
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     5972.7, efficiency    132.726
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    14982.7, efficiency   Infinity (-11 instructions)
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:416:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +8, benefit      343.8, efficiency     42.969
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +23, benefit      343.8, efficiency     14.946
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +8, benefit     3437.5, efficiency    429.688
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +23, benefit     3437.5, efficiency    149.457
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2550.0, efficiency     15.179
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1275.0, efficiency      7.589
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5226.1, efficiency   Infinity
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5226.1, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2191.4, efficiency    273.926
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     1917.5, efficiency   Infinity
  ! Inline function call at Actions.mnd:129:5                    size   +23, benefit     2191.4, efficiency     95.279
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3359.6, efficiency    479.946
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2613.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     5972.7, efficiency    145.675
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2465.3, efficiency     36.796
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     2986.3, efficiency   Infinity (-6 instructions)
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:416:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +21, benefit      343.8, efficiency     16.369
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1933.6, efficiency     28.435
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +21, benefit     3437.5, efficiency    163.690
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      531.7, efficiency      7.820
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2550.0, efficiency     15.179
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1275.0, efficiency      7.589
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     2986.3, efficiency    497.721
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +21, benefit     2191.4, efficiency    104.353
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3359.6, efficiency    671.924
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     5972.7, efficiency    127.078
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +67, benefit     2465.3, efficiency     36.796
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2465.3, efficiency   Infinity (-5 instructions)
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:416:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +24, benefit      343.8, efficiency     14.323
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +68, benefit     1933.6, efficiency     28.435
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3437.5, efficiency    143.229
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +68, benefit      531.7, efficiency      7.820
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2550.0, efficiency     15.179
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1275.0, efficiency      7.589
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3359.6, efficiency    671.924
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2465.3, efficiency    616.333
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2191.4, efficiency     91.309
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     5972.7, efficiency    127.078
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3359.6, efficiency   Infinity (-8 instructions)
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:416:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +24, benefit      343.8, efficiency     14.323
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3437.5, efficiency    143.229
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2550.0, efficiency     15.179
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1275.0, efficiency      7.589
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
  ! Inline function call at Actions.mnd:68:5                     size    +5, benefit     3359.6, efficiency    671.924
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2191.4, efficiency     91.309

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +23, benefit      100.0, efficiency      4.348
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +241, benefit      272.0, efficiency      1.129
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +27, benefit      275.5, efficiency     10.204
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     5972.7, efficiency    127.078
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +24, benefit        4.0, efficiency      0.167
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:416:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +168, benefit       75.0, efficiency      0.446
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +24, benefit      343.8, efficiency     14.323
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +28, benefit       38.0, efficiency      1.357
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +28, benefit      237.5, efficiency      8.482
  ! Inline function call at CoreBuilder.mnd:246:5                size   +24, benefit       96.0, efficiency      4.000
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +121, benefit       16.0, efficiency      0.132
  ! Inline function call at CoreBuilder.mnd:309:5                size  +121, benefit       24.0, efficiency      0.198
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3437.5, efficiency    143.229
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at CoreBuilder.mnd:205:9                size  +168, benefit     2550.0, efficiency     15.179
  ! Inline function call at CoreBuilder.mnd:211:13               size  +168, benefit     1275.0, efficiency      7.589
  ! Inline function call at CoreBuilder.mnd:219:5                size  +121, benefit      232.0, efficiency      1.917
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2191.4, efficiency     91.309

Pass 2: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      100.0, efficiency      4.545
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      272.0, efficiency      1.138
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      275.5, efficiency     11.020
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     5972.7, efficiency    127.078
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:416:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +24, benefit      343.8, efficiency     14.323
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      237.5, efficiency      9.135
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit       96.0, efficiency      4.174
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3437.5, efficiency    143.229
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2550.0, efficiency     15.455
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1275.0, efficiency      7.727
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      232.0, efficiency      1.933
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2191.4, efficiency     91.309

Pass 3: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:410:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:415:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:434:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:204:5            size   +30, benefit      850.0, efficiency     28.333
  ! Replicate loop condition at CoreBuilder.mnd:210:9            size   +30, benefit      425.0, efficiency     14.167
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    30481.0, efficiency  30480.957
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    18664.6, efficiency  18664.551
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit      962.2, efficiency    962.240
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:225:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:235:1 size   +22, benefit      100.0, efficiency      4.545
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:245:1 size   +68, benefit       84.0, efficiency      1.235
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:249:1 size   +13, benefit        7.0, efficiency      0.538
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:308:1 size   +31, benefit        9.0, efficiency      0.290
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:505:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:519:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function 'mineOre' defined at Actions.mnd:133:1       size   +53, benefit     1503.9, efficiency     28.376
  ! Inline function 'fetchBlock' defined at Actions.mnd:138:1    size   +32, benefit     3437.5, efficiency    107.422
  ! Inline function 'supplyBlock' defined at Actions.mnd:156:1   size   +51, benefit      945.3, efficiency     18.536
  ! Inline function 'unpackCfg' defined at Common.mnd:9:1        size   +37, benefit      286.5, efficiency      7.743
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:171:1 size  +239, benefit      272.0, efficiency      1.138
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:218:1 size   +25, benefit      275.5, efficiency     11.020
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     7251.0, efficiency   1450.195
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    11945.3, efficiency   5972.656
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     5972.7, efficiency    542.969
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     3657.7, efficiency    731.543
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     5972.7, efficiency    127.078
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +69, benefit     2465.3, efficiency     35.729
  ! Inline function call at CoreBuilder.mnd:327:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:328:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:329:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:330:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:334:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:335:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:256:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:261:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:338:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:339:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:340:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:344:18               size   +23, benefit        4.0, efficiency      0.174
  ! Inline function call at CoreBuilder.mnd:355:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:356:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:357:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:359:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:370:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:372:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:383:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:384:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:385:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:388:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:389:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:391:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:394:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:397:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:398:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:399:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:408:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:411:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:416:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:285:5                size   +14, benefit        3.5, efficiency      0.250
  ! Inline function call at CoreBuilder.mnd:288:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:291:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:292:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:293:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:294:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:295:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:296:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:297:22               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:298:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:435:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:444:5                size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at CoreBuilder.mnd:450:5                size   +16, benefit        3.0, efficiency      0.188
  ! Inline function call at CoreBuilder.mnd:492:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:493:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:494:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:495:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:498:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:499:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:500:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:501:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:134:17               size   +13, benefit      343.8, efficiency     26.442
  ! Inline function call at Actions.mnd:167:5                    size    +1, benefit      343.8, efficiency    343.750
  ! Inline function call at Actions.mnd:168:5                    size    +2, benefit      386.7, efficiency    193.359
  ! Inline function call at Actions.mnd:169:5                    size    +6, benefit      343.8, efficiency     57.292
  ! Inline function call at Actions.mnd:170:5                    size    +3, benefit      257.8, efficiency     85.938
  ! Inline function call at Actions.mnd:180:5                    size   +24, benefit      343.8, efficiency     14.323
  ! Inline function call at CoreBuilder.mnd:140:5                size   +33, benefit     2750.0, efficiency     83.333
  ! Inline function call at CoreBuilder.mnd:125:5                size    +9, benefit     1203.1, efficiency    133.681
  ! Inline function call at CoreBuilder.mnd:62:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:70:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:74:17                size   +13, benefit       85.9, efficiency      6.611
  ! Inline function call at CoreBuilder.mnd:82:17                size   +13, benefit      171.9, efficiency     13.221
  ! Inline function call at CoreBuilder.mnd:93:17                size    +9, benefit      150.4, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:99:17                size    +9, benefit       75.2, efficiency      8.355
  ! Inline function call at CoreBuilder.mnd:102:17               size    +9, benefit       37.6, efficiency      4.178
  ! Inline function call at CoreBuilder.mnd:105:17               size    +9, benefit       18.8, efficiency      2.089
  ! Inline function call at CoreBuilder.mnd:108:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:114:17               size    +9, benefit        9.4, efficiency      1.044
  ! Inline function call at CoreBuilder.mnd:119:9                size   +33, benefit      687.5, efficiency     20.833
  ! Inline function call at CoreBuilder.mnd:228:9                size   +19, benefit       34.0, efficiency      1.789
  ! Inline function call at CoreBuilder.mnd:229:16               size   +26, benefit       38.0, efficiency      1.462
  ! Inline function call at CoreBuilder.mnd:237:5                size   +19, benefit      237.5, efficiency     12.500
  ! Inline function call at CoreBuilder.mnd:238:20               size   +26, benefit      237.5, efficiency      9.135
  ! Inline function call at CoreBuilder.mnd:246:5                size   +23, benefit       96.0, efficiency      4.174
  ! Inline function call at CoreBuilder.mnd:251:5                size   +19, benefit       15.0, efficiency      0.789
  ! Inline function call at CoreBuilder.mnd:252:5                size  +120, benefit       16.0, efficiency      0.133
  ! Inline function call at CoreBuilder.mnd:309:5                size  +120, benefit       24.0, efficiency      0.200
  ! Inline function call at Actions.mnd:134:5                    size    +2, benefit     1933.6, efficiency    966.797
  ! Inline function call at Actions.mnd:135:5                    size   +70, benefit     1933.6, efficiency     27.623
  ! Inline function call at Actions.mnd:139:5                    size    +1, benefit     3437.5, efficiency   3437.500
  ! Inline function call at Actions.mnd:140:5                    size    +2, benefit     3867.2, efficiency   1933.594
  ! Inline function call at Actions.mnd:141:5                    size    +6, benefit     3437.5, efficiency    572.917
  ! Inline function call at Actions.mnd:142:5                    size    +3, benefit     2578.1, efficiency    859.375
  ! Inline function call at Actions.mnd:152:5                    size   +24, benefit     3437.5, efficiency    143.229
  ! Inline function call at Actions.mnd:157:5                    size    +2, benefit     1063.5, efficiency    531.738
  ! Inline function call at Actions.mnd:161:9                    size   +70, benefit      531.7, efficiency      7.596
  ! Inline function call at CoreBuilder.mnd:205:9                size  +165, benefit     2550.0, efficiency     15.455
  ! Inline function call at CoreBuilder.mnd:211:13               size  +165, benefit     1275.0, efficiency      7.727
  ! Inline function call at CoreBuilder.mnd:219:5                size  +120, benefit      232.0, efficiency      1.933
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     5972.7, efficiency   5972.656
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2191.4, efficiency   2191.406
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit      958.7, efficiency    958.740
  ! Inline function call at Actions.mnd:105:5                    size    +6, benefit     2191.4, efficiency    365.234
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      821.8, efficiency    273.926
  ! Inline function call at Actions.mnd:129:5                    size   +24, benefit     2191.4, efficiency     91.309

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-120 instructions):
 
    38 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    39 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
    40 label *label53
-    * set *tmp118 :buildBlockFromCfg.1*retval
    41 set :buildBlockFromCfg.1:cfg "AJTJK-battery1"
    42 setaddr :buildBlockFromCfg.1*retaddr *label54 (h:*label54)
    43 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label54) (h:*label54)
    44 label *label54
-    * set *tmp119 :buildBlockFromCfg.1*retval
    45 set :buildBlockFromCfg.1:cfg "ALTJL-battery2"
    46 setaddr :buildBlockFromCfg.1*retaddr *label55 (h:*label55)
    47 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label55) (h:*label55)
    48 label *label55
-    * set *tmp120 :buildBlockFromCfg.1*retval
    49 set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"
    50 setaddr :buildBlockFromCfg.1*retaddr *label56 (h:*label56)
    51 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label56) (h:*label56)
    52 label *label56
-    * set *tmp121 :buildBlockFromCfg.1*retval
    53 set .powerTarget 400
    54 set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"
    55 setaddr :buildBlockFromCfg.1*retaddr *label57 (h:*label57)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label57) (h:*label57)
    57 label *label57
-    * set *tmp122 :buildBlockFromCfg.1*retval
    58 set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"
    59 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    60 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    61 label *label58
-    * set *tmp123 :buildBlockFromCfg.1*retval
    62 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    63 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    64 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
 
    90 setaddr :error*retaddr *label64 (h:*label64)
    91 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    92 label *label64
-    * set *tmp138 null
    93 jump *label63 always
    94 label *label62
-    * set *tmp138 null
    95 label *label63
    96 write @pneumatic-drill processor2 ".nextBlock"
    97 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
 
   113 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   114 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
   115 label *label66
-    * set *tmp143 :buildBlockFromCfg.1*retval
   116 set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"
   117 setaddr :buildBlockFromCfg.1*retaddr *label67 (h:*label67)
   118 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label67) (h:*label67)
   119 label *label67
-    * set *tmp144 :buildBlockFromCfg.1*retval
   120 set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"
   121 setaddr :buildBlockFromCfg.1*retaddr *label68 (h:*label68)
   122 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label68) (h:*label68)
   123 label *label68
-    * set *tmp145 :buildBlockFromCfg.1*retval
   124 set .graphiteSurplus 80
   125 set :buildBlockFromCfg:cfg "AÕFFJS-micro-processor9"
   126 set :buildBlockFromCfg:config processor10
 
   182 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   183 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   184 label *label83
-    * set *tmp149 :buildBlockFromCfg.1*retval
   185 set :buildBlockFromCfg.1:cfg "A©FJJU-unloader11"
   186 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   187 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   188 label *label84
-    * set *tmp150 :buildBlockFromCfg.1*retval
   189 set :buildBlockFromCfg.1:cfg "A~DJJV-overflow-gate12"
   190 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   191 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   192 label *label85
-    * set *tmp151 :buildBlockFromCfg.1*retval
   193 set :buildBlockFromCfg.1:cfg "A¾BFLW-air-factory13"
   194 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   195 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   196 label *label86
-    * set *tmp152 :buildBlockFromCfg.1*retval
   197 set :setFlareTarget:target 1
   198 write :setFlareTarget:target .controller ".flareTarget"
   199 label *label87
 
   216 op lessThan *tmp154 *tmp153 300
   217 jump *label94 equal *tmp154 false
   218 jump *label92 always
-    * set *tmp155 null
   219 jump *label95 always
   220 label *label94
-    * set *tmp155 null
   221 label *label95
   222 label *label91
   223 read *tmp80 .controller ".monos"
 
   229 setaddr :buildBlockFromCfg.1*retaddr *label96 (h:*label96)
   230 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label96) (h:*label96)
   231 label *label96
-    * set *tmp157 :buildBlockFromCfg.1*retval
   232 set :buildBlockFromCfg.1:cfg "A{NJJY-inverted-sorter15"
   233 setaddr :buildBlockFromCfg.1*retaddr *label97 (h:*label97)
   234 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label97) (h:*label97)
   235 label *label97
-    * set *tmp158 :buildBlockFromCfg.1*retval
   236 set :buildBlockFromCfg.1:cfg "ANOMJZ-kiln16"
   237 setaddr :buildBlockFromCfg.1*retaddr *label98 (h:*label98)
   238 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label98) (h:*label98)
   239 label *label98
-    * set *tmp159 :buildBlockFromCfg.1*retval
   240 set :buildBlockFromCfg.1:cfg "A¡AOJ[-water-extractor17"
   241 setaddr :buildBlockFromCfg.1*retaddr *label99 (h:*label99)
   242 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label99) (h:*label99)
   243 label *label99
-    * set *tmp160 :buildBlockFromCfg.1*retval
   244 set :buildBlockFromCfg.1:cfg "AAKJ\-steam-generator18"
   245 setaddr :buildBlockFromCfg.1*retaddr *label100 (h:*label100)
   246 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label100) (h:*label100)
   247 label *label100
-    * set *tmp161 :buildBlockFromCfg.1*retval
   248 set :buildBlockFromCfg.1:cfg "AKFRJ_-multi-press21"
   249 setaddr :buildBlockFromCfg.1*retaddr *label101 (h:*label101)
   250 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label101) (h:*label101)
   251 label *label101
-    * set *tmp162 :buildBlockFromCfg.1*retval
   252 set .graphiteSurplus 200
   253 set :buildBlockFromCfg.1:cfg "ALQIJ^-silicon-smelter20"
   254 setaddr :buildBlockFromCfg.1*retaddr *label102 (h:*label102)
   255 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label102) (h:*label102)
   256 label *label102
-    * set *tmp163 :buildBlockFromCfg.1*retval
   257 set :buildBlockFromCfg.1:cfg "A©HFJa-unloader23"
   258 setaddr :buildBlockFromCfg.1*retaddr *label103 (h:*label103)
   259 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label103) (h:*label103)
   260 label *label103
-    * set *tmp164 :buildBlockFromCfg.1*retval
   261 set :buildBlockFromCfg.1:cfg "A{HDJb-inverted-sorter24"
   262 setaddr :buildBlockFromCfg.1*retaddr *label104 (h:*label104)
   263 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label104) (h:*label104)
   264 label *label104
-    * set *tmp165 :buildBlockFromCfg.1*retval
   265 set :buildBlockFromCfg.1:cfg "AÀF@Lc-additive-reconstructor25"
   266 setaddr :buildBlockFromCfg.1*retaddr *label105 (h:*label105)
   267 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label105) (h:*label105)
   268 label *label105
-    * set *tmp166 :buildBlockFromCfg.1*retval
   269 set .siliconSurplus 1000
   270 set .siliconMonoSurplus 20
   271 set .metaglassSurplus 100
 
   356 setaddr :error*retaddr *label126 (h:*label126)
   357 call *label15 *invalid :error*retval (m:*label126) (h:*label126)
   358 label *label126
-    * set *tmp191 null
   359 jump *label125 always
   360 label *label124
-    * set *tmp191 null
   361 label *label125
   362 write @laser-drill processor5 ":buildBlockAt:block"
   363 read *tmp51 processor3 ".drillX"
 
   383 setaddr :buildRemoteBlock*retaddr *label128 (h:*label128)
   384 call *label38 *invalid :buildRemoteBlock*retval (m:*label128) (h:*label128)
   385 label *label128
-    * set *tmp200 :buildRemoteBlock*retval
   386 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
   387 read *tmp57 processor3 ".water2X"
   388 set :buildRemoteBlock:x *tmp57
 
   391 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   392 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   393 label *label129
-    * set *tmp201 :buildRemoteBlock*retval
   394 set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"
   395 read *tmp59 processor3 ".generatorX"
   396 set :buildRemoteBlock:x *tmp59
 
   409 setaddr :buildRemoteBlock*retaddr *label131 (h:*label131)
   410 call *label38 *invalid :buildRemoteBlock*retval (m:*label131) (h:*label131)
   411 label *label131
-    * set *tmp203 :buildRemoteBlock*retval
   412 set :buildRemoteBlock:cfg "AFHJT-power-node10"
   413 read *tmp63 processor3 ".node2X"
   414 set :buildRemoteBlock:x *tmp63
 
   417 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   418 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   419 label *label132
-    * set *tmp204 :buildRemoteBlock*retval
   420 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
   421 read *tmp65 processor3 ".panelX"
   422 set :buildRemoteBlock:x *tmp65
 
   425 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   426 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   427 label *label133
-    * set *tmp205 :buildRemoteBlock*retval
   428 set :buildRemoteBlock:cfg "AJTJK-battery1"
   429 read *tmp67 processor3 ".batteryX"
   430 set :buildRemoteBlock:x *tmp67
 
   448 op equal *tmp208 .thoriumContainer null
   449 jump *label136 equal *tmp208 false
   450 set .thoriumContainer .thoriumDrill
-    * set *tmp209 .thoriumContainer
   451 jump *label137 always
   452 label *label136
-    * set *tmp209 null
   453 label *label137
   454 write .thoriumDrill processor2 ".thoriumDrill"
   455 write .thoriumContainer processor2 ".thoriumContainer"
 
   482 setaddr :buildBlockFromCfg.1*retaddr *label144 (h:*label144)
   483 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   484 label *label144
-    * set *tmp213 :buildBlockFromCfg.1*retval
   485 set .metaglassSurplus 10
   486 set :setPolyTarget.1:target 0
   487 write :setPolyTarget.1:target .controller ".polyTarget"
 
   614 label *label172
   615 set *tmp239 null
   616 label *label173
-    * set *tmp236 *tmp239
   617 jump *label171 always
   618 label *label170
-    * set *tmp236 null
   619 label *label171
   620 set :fetchBlock:block .thoriumContainer
   621 set :fetchBlock:item @thorium
 
   628 set :setPolyTarget.2:target 4
   629 write :setPolyTarget.2:target .controller ".polyTarget"
   630 label *label181
-    * set *tmp245 null
   631 jump *label180 always
   632 label *label179
-    * set *tmp245 null
   633 label *label180
   634 label *label168
-    * set *tmp233 null
   635 jump *label167 always
   636 label *label166
   637 read *tmp80 .controller ".monos"
 
   673 label *label192
   674 set *tmp255 null
   675 label *label193
-    * set *tmp252 *tmp255
   676 jump *label191 always
   677 label *label190
-    * set *tmp252 null
   678 label *label191
   679 sensor *tmp256 .core @silicon
   680 op lessThan *tmp257 *tmp256 silicon
 
   715 label *label203
   716 set *tmp261 *tmp264
   717 label *label199
-    * set *tmp258 *tmp261
   718 jump *label197 always
   719 label *label196
-    * set *tmp258 null
   720 label *label197
   721 sensor *tmp265 AJTJK-battery1 @totalPower
   722 op lessThan *tmp266 *tmp265 .powerTarget
 
   744 label *label206
   745 set *tmp267 null
   746 label *label207
-    * set *tmp249 *tmp267
   747 jump *label189 always
   748 label *label188
-    * set *tmp249 null
   749 label *label189
   750 sensor *tmp271 .core @titanium
   751 op lessThan *tmp272 *tmp271 titanium
 
   882 label *label216
   883 set *tmp281 null
   884 label *label217
-    * set *tmp279 *tmp281
   885 jump *label215 always
   886 label *label214
   887 set :status1:text "Goal 11: Fetching titanium"
 
   893 setaddr :fetchBlock*retaddr *label245 (h:*label245)
   894 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   895 label *label245
-    * set *tmp279 null
   896 label *label215
   897 label *label187
   898 set *tmp247 null
   899 label *label183
-    * set *tmp233 *tmp247
   900 label *label167
   901 label *label165
   902 return :supplyBase*retaddr
 
   937 label *label250
   938 set :buildRemoteBlock*retval :buildBlock*retval
   939 jump *label246 always
-    * set *tmp308 null
   940 jump *label248 always
   941 label *label247
-    * set *tmp308 null
   942 label *label248
   943 set :buildRemoteBlock*retval false
   944 jump *label246 always
 
  1086 sensor *tmp317 @unit @mining
  1087 jump *label272 equal *tmp317 false
  1088 ucontrol stop
-    * set *tmp318 null
  1089 jump *label273 always
  1090 label *label272
-    * set *tmp318 null
  1091 label *label273
  1092 ubind :lineUpUnits:unit
  1093 label *label270
 
  1152 op land *tmp328 *tmp326 *tmp327
  1153 jump *label286 equal *tmp328 false
  1154 ucontrol itemDrop @air 1000
-    * set *tmp329 null
  1155 jump *label287 always
  1156 label *label286
-    * set *tmp329 null
  1157 label *label287
  1158 label *label284
  1159 sensor *tmp330 @unit :fetchBlock:item
 
  1190 setaddr :mineOre*retaddr *label293 (h:*label293)
  1191 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
  1192 label *label293
-    * set *tmp338 null
  1193 jump *label292 always
  1194 label *label291
-    * set *tmp338 null
  1195 label *label292
  1196 label *label289
  1197 return :supplyBlock*retaddr
 
  1228 op land *tmp344 *tmp342 *tmp343
  1229 jump *label302 equal *tmp344 false
  1230 ucontrol itemDrop @air 1000
-    * set *tmp345 null
  1231 jump *label303 always
  1232 label *label302
-    * set *tmp345 null
  1233 label *label303
  1234 label *label300
  1235 sensor *tmp346 @unit :supplyBlockFromCore:item
 
  1291 sensor *tmp374 :unpackCfg:type @thorium
  1292 set :unpackCfg:th *tmp374
  1293 sensor *tmp375 :unpackCfg:type @size
-    * set :unpackCfg:size *tmp375
  1294 label *label305
  1295 return :unpackCfg*retaddr
  1296 end
 
  1371 jump *label321 equal *tmp391 false
  1372 set *tmp389 false
  1373 jump *label320 always
-    * set *tmp392 null
  1374 jump *label322 always
  1375 label *label321
-    * set *tmp392 null
  1376 label *label322
  1377 sensor *tmp393 .core @lead
  1378 op lessThan *tmp394 *tmp393 lead
  1379 jump *label323 equal *tmp394 false
  1380 set *tmp389 false
  1381 jump *label320 always
-    * set *tmp395 null
  1382 jump *label324 always
  1383 label *label323
-    * set *tmp395 null
  1384 label *label324
  1385 sensor *tmp396 .core @graphite
  1386 op lessThan *tmp397 *tmp396 graphite
  1387 jump *label325 equal *tmp397 false
  1388 set *tmp389 false
  1389 jump *label320 always
-    * set *tmp398 null
  1390 jump *label326 always
  1391 label *label325
-    * set *tmp398 null
  1392 label *label326
  1393 sensor *tmp399 .core @silicon
  1394 op lessThan *tmp400 *tmp399 silicon
  1395 jump *label327 equal *tmp400 false
  1396 set *tmp389 false
  1397 jump *label320 always
-    * set *tmp401 null
  1398 jump *label328 always
  1399 label *label327
-    * set *tmp401 null
  1400 label *label328
  1401 sensor *tmp402 .core @titanium
  1402 op lessThan *tmp403 *tmp402 titanium
  1403 jump *label329 equal *tmp403 false
  1404 set *tmp389 false
  1405 jump *label320 always
-    * set *tmp404 null
  1406 jump *label330 always
  1407 label *label329
-    * set *tmp404 null
  1408 label *label330
  1409 sensor *tmp405 .core @metaglass
  1410 op lessThan *tmp406 *tmp405 metaglass
  1411 jump *label331 equal *tmp406 false
  1412 set *tmp389 false
  1413 jump *label320 always
-    * set *tmp407 null
  1414 jump *label332 always
  1415 label *label331
-    * set *tmp407 null
  1416 label *label332
  1417 sensor *tmp408 .core @thorium
  1418 op lessThan *tmp409 *tmp408 thorium
  1419 jump *label333 equal *tmp409 false
  1420 set *tmp389 false
  1421 jump *label320 always
-    * set *tmp410 null
  1422 jump *label334 always
  1423 label *label333
-    * set *tmp410 null
  1424 label *label334
  1425 set *tmp389 true
  1426 jump *label320 always
 
  1447 jump *label343 equal *tmp416 false
  1448 set *tmp414 false
  1449 jump *label342 always
-    * set *tmp417 null
  1450 jump *label344 always
  1451 label *label343
-    * set *tmp417 null
  1452 label *label344
  1453 sensor *tmp418 .core @lead
  1454 op lessThan *tmp419 *tmp418 lead
  1455 jump *label345 equal *tmp419 false
  1456 set *tmp414 false
  1457 jump *label342 always
-    * set *tmp420 null
  1458 jump *label346 always
  1459 label *label345
-    * set *tmp420 null
  1460 label *label346
  1461 sensor *tmp421 .core @graphite
  1462 op lessThan *tmp422 *tmp421 graphite
  1463 jump *label347 equal *tmp422 false
  1464 set *tmp414 false
  1465 jump *label342 always
-    * set *tmp423 null
  1466 jump *label348 always
  1467 label *label347
-    * set *tmp423 null
  1468 label *label348
  1469 sensor *tmp424 .core @silicon
  1470 op lessThan *tmp425 *tmp424 silicon
  1471 jump *label349 equal *tmp425 false
  1472 set *tmp414 false
  1473 jump *label342 always
-    * set *tmp426 null
  1474 jump *label350 always
  1475 label *label349
-    * set *tmp426 null
  1476 label *label350
  1477 sensor *tmp427 .core @titanium
  1478 op lessThan *tmp428 *tmp427 titanium
  1479 jump *label351 equal *tmp428 false
  1480 set *tmp414 false
  1481 jump *label342 always
-    * set *tmp429 null
  1482 jump *label352 always
  1483 label *label351
-    * set *tmp429 null
  1484 label *label352
  1485 sensor *tmp430 .core @metaglass
  1486 op lessThan *tmp431 *tmp430 metaglass
  1487 jump *label353 equal *tmp431 false
  1488 set *tmp414 false
  1489 jump *label342 always
-    * set *tmp432 null
  1490 jump *label354 always
  1491 label *label353
-    * set *tmp432 null
  1492 label *label354
  1493 sensor *tmp433 .core @thorium
  1494 op lessThan *tmp434 *tmp433 thorium
  1495 jump *label355 equal *tmp434 false
  1496 set *tmp414 false
  1497 jump *label342 always
-    * set *tmp435 null
  1498 jump *label356 always
  1499 label *label355
-    * set *tmp435 null
  1500 label *label356
  1501 set *tmp414 true
  1502 jump *label342 always
 
  1510 label *label340
  1511 jump *label339 always
  1512 label *label341
-    * set *tmp412 null
  1513 jump *label337 always
  1514 label *label336
-    * set *tmp412 null
  1515 label *label337
  1516 label *label306
  1517 return :meetTarget*retaddr
 
  1576 op notEqual *tmp447 *tmp446 null
  1577 jump *label368 equal *tmp447 false
  1578 ucontrol itemDrop @air 1000
-    * set *tmp448 null
  1579 jump *label369 always
  1580 label *label368
-    * set *tmp448 null
  1581 label *label369
  1582 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1583 label *label366
 
  1624 op greaterThan *tmp460 *tmp458 *tmp459
  1625 jump *label379 notEqual *tmp460 false
  1626 label *label381
-    * set *tmp455 null
  1627 jump *label377 always
  1628 label *label376
  1629 label *label382
 
  1634 label *label383
  1635 jump *label382 always
  1636 label *label384
-    * set *tmp455 null
  1637 label *label377
  1638 set :transportStatus:target 0
  1639 set :transportStatus:item null
 
  1668 setaddr :dropAll*retaddr *label392 (h:*label392)
  1669 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1670 label *label392
-    * set *tmp466 null
  1671 jump *label391 always
  1672 label *label390
-    * set *tmp466 null
  1673 label *label391
  1674 set :status3:text "Mining..."
  1675 setaddr :status3*retaddr *label393 (h:*label393)
 
  1685 op land *tmp471 *tmp469 *tmp470
  1686 jump *label397 equal *tmp471 false
  1687 jump *label396 always
-    * set *tmp472 null
  1688 jump *label398 always
  1689 label *label397
-    * set *tmp472 null
  1690 label *label398
  1691 ucontrol mine :mineOre:x :mineOre:y
  1692 op greaterThan *tmp473 @second :mineOre:stop
  1693 jump *label399 equal *tmp473 false
  1694 jump *label396 always
-    * set *tmp474 null
  1695 jump *label400 always
  1696 label *label399
-    * set *tmp474 null
  1697 label *label400
  1698 op equal *tmp475 .noTarget false
  1699 jump *label401 equal *tmp475 false
 
  1702 jump *label404 equal *tmp479 false
  1703 set *tmp477 false
  1704 jump *label403 always
-    * set *tmp480 null
  1705 jump *label405 always
  1706 label *label404
-    * set *tmp480 null
  1707 label *label405
  1708 sensor *tmp481 .core @lead
  1709 op lessThan *tmp482 *tmp481 lead
  1710 jump *label406 equal *tmp482 false
  1711 set *tmp477 false
  1712 jump *label403 always
-    * set *tmp483 null
  1713 jump *label407 always
  1714 label *label406
-    * set *tmp483 null
  1715 label *label407
  1716 sensor *tmp484 .core @graphite
  1717 op lessThan *tmp485 *tmp484 graphite
  1718 jump *label408 equal *tmp485 false
  1719 set *tmp477 false
  1720 jump *label403 always
-    * set *tmp486 null
  1721 jump *label409 always
  1722 label *label408
-    * set *tmp486 null
  1723 label *label409
  1724 sensor *tmp487 .core @silicon
  1725 op lessThan *tmp488 *tmp487 silicon
  1726 jump *label410 equal *tmp488 false
  1727 set *tmp477 false
  1728 jump *label403 always
-    * set *tmp489 null
  1729 jump *label411 always
  1730 label *label410
-    * set *tmp489 null
  1731 label *label411
  1732 sensor *tmp490 .core @titanium
  1733 op lessThan *tmp491 *tmp490 titanium
  1734 jump *label412 equal *tmp491 false
  1735 set *tmp477 false
  1736 jump *label403 always
-    * set *tmp492 null
  1737 jump *label413 always
  1738 label *label412
-    * set *tmp492 null
  1739 label *label413
  1740 sensor *tmp493 .core @metaglass
  1741 op lessThan *tmp494 *tmp493 metaglass
  1742 jump *label414 equal *tmp494 false
  1743 set *tmp477 false
  1744 jump *label403 always
-    * set *tmp495 null
  1745 jump *label415 always
  1746 label *label414
-    * set *tmp495 null
  1747 label *label415
  1748 sensor *tmp496 .core @thorium
  1749 op lessThan *tmp497 *tmp496 thorium
  1750 jump *label416 equal *tmp497 false
  1751 set *tmp477 false
  1752 jump *label403 always
-    * set *tmp498 null
  1753 jump *label417 always
  1754 label *label416
-    * set *tmp498 null
  1755 label *label417
  1756 set *tmp477 true
  1757 jump *label403 always
 
  1764 label *label418
  1765 set *tmp499 null
  1766 label *label419
-    * set *tmp476 *tmp499
  1767 jump *label402 always
  1768 label *label401
-    * set *tmp476 null
  1769 label *label402
  1770 label *label395
  1771 sensor *tmp500 @unit @totalItems
 
  1806 setaddr :error*retaddr *label427 (h:*label427)
  1807 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
  1808 label *label427
-    * set *tmp507 null
  1809 jump *label426 always
  1810 label *label425
-    * set *tmp507 null
  1811 label *label426
  1812 label *label424
  1813 return :locateOre*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-16 instructions):
 
   609 label *label177
   610 set *tmp242 null
   611 label *label175
-    * set *tmp239 *tmp242
   612 jump *label173 always
   613 label *label172
-    * set *tmp239 null
   614 label *label173
   615 jump *label171 always
   616 label *label170
 
   644 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   645 label *label186
   646 label *label184
-    * set *tmp247 null
   647 jump *label183 always
   648 label *label182
   649 set :supplyBase0:supplied false
 
   665 call *label26 *invalid :supplyBlock*retval (m:*label195) (h:*label195)
   666 label *label195
   667 set :supplyBase0:supplied true
-    * set *tmp255 :supplyBase0:supplied
   668 jump *label193 always
   669 label *label192
-    * set *tmp255 null
   670 label *label193
   671 jump *label191 always
   672 label *label190
 
   687 call *label26 *invalid :supplyBlock*retval (m:*label201) (h:*label201)
   688 label *label201
   689 set :supplyBase0:supplied true
-    * set *tmp261 :supplyBase0:supplied
   690 jump *label199 always
   691 label *label198
   692 sensor *tmp262 ALMQJN-silicon-smelter4 @sand
 
   707 label *label202
   708 set *tmp264 null
   709 label *label203
-    * set *tmp261 *tmp264
   710 label *label199
   711 jump *label197 always
   712 label *label196
 
   732 label *label208
   733 set *tmp270 null
   734 label *label209
-    * set *tmp267 *tmp270
   735 jump *label207 always
   736 label *label206
-    * set *tmp267 null
   737 label *label207
   738 jump *label189 always
   739 label *label188
 
   868 label *label223
   869 set *tmp285 *tmp288
   870 label *label219
-    * set *tmp281 *tmp285
   871 jump *label217 always
   872 label *label216
-    * set *tmp281 null
   873 label *label217
   874 jump *label215 always
   875 label *label214
 
   884 label *label245
   885 label *label215
   886 label *label187
-    * set *tmp247 null
   887 label *label183
   888 label *label167
   889 label *label165
 
   986 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   987 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   988 label *label255
-    * set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
   989 label *label254
   990 return :buildBlockFromCfg.1*retaddr
   991 end
 
  1277 set :unpackCfg:mg *tmp373
  1278 sensor *tmp374 :unpackCfg:type @thorium
  1279 set :unpackCfg:th *tmp374
-    * sensor *tmp375 :unpackCfg:type @size
  1280 label *label305
  1281 return :unpackCfg*retaddr
  1282 end
 
  1745 label *label403
  1746 jump *label418 equal *tmp477 false
  1747 jump *label396 always
-    * set *tmp499 null
  1748 jump *label419 always
  1749 label *label418
-    * set *tmp499 null
  1750 label *label419
  1751 jump *label402 always
  1752 label *label401

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-8 instructions):
 
   599 setaddr :supplyBlock*retaddr *label176 (h:*label176)
   600 call *label26 *invalid :supplyBlock*retval (m:*label176) (h:*label176)
   601 label *label176
-    * set *tmp242 null
   602 jump *label175 always
   603 label *label174
   604 set :supplyBlockFromCore:target .thoriumGenerator
 
   606 setaddr :supplyBlockFromCore*retaddr *label177 (h:*label177)
   607 call *label27 *invalid :supplyBlockFromCore*retval (m:*label177) (h:*label177)
   608 label *label177
-    * set *tmp242 null
   609 label *label175
   610 jump *label173 always
   611 label *label172
 
   700 call *label26 *invalid :supplyBlock*retval (m:*label205) (h:*label205)
   701 label *label205
   702 set :supplyBase0:supplied true
-    * set *tmp264 :supplyBase0:supplied
   703 jump *label203 always
   704 label *label202
-    * set *tmp264 null
   705 label *label203
   706 label *label199
   707 jump *label197 always
 
   723 call *label26 *invalid :supplyBlock*retval (m:*label211) (h:*label211)
   724 label *label211
   725 set :supplyBase0:supplied true
-    * set *tmp270 :supplyBase0:supplied
   726 jump *label209 always
   727 label *label208
-    * set *tmp270 null
   728 label *label209
   729 jump *label207 always
   730 label *label206
 
   761 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   762 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
   763 label *label221
-    * set *tmp285 null
   764 jump *label219 always
   765 label *label218
   766 sensor *tmp286 .core @silicon
 
   859 label *label229
   860 set *tmp288 *tmp295
   861 label *label223
-    * set *tmp285 *tmp288
   862 label *label219
   863 jump *label217 always
   864 label *label216

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   786 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   787 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   788 label *label227
-    * set *tmp288 null
   789 jump *label223 always
   790 label *label222
   791 sensor *tmp293 .core @copper
 
   856 label *label233
   857 set *tmp295 *tmp298
   858 label *label229
-    * set *tmp288 *tmp295
   859 label *label223
   860 label *label219
   861 jump *label217 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
   799 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   800 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
   801 label *label231
-    * set *tmp295 null
   802 jump *label229 always
   803 label *label228
   804 sensor *tmp296 .core @lead
 
   853 label *label237
   854 set *tmp298 *tmp301
   855 label *label233
-    * set *tmp295 *tmp298
   856 label *label229
   857 label *label223
   858 label *label219

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
   812 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   813 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
   814 label *label235
-    * set *tmp298 null
   815 jump *label233 always
   816 label *label232
   817 sensor *tmp299 .core @metaglass
 
   850 label *label243
   851 set *tmp301 null
   852 label *label237
-    * set *tmp298 *tmp301
   853 label *label233
   854 label *label229
   855 label *label223

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
   825 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   826 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   827 label *label239
-    * set *tmp301 null
   828 jump *label237 always
   829 label *label236
   830 set :status1:text "Goal 10: supplying base"
 
   847 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   848 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   849 label *label243
-    * set *tmp301 null
   850 label *label237
   851 label *label233
   852 label *label229

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-70 instructions):
 
    26 write 511 bank1 511
    27 label *label50
    28 ubind @poly
-    * set *tmp114 @unit
-    * set .builder *tmp114
-    * ulocate building core false @copper .coreX .coreY *tmp116 *tmp115
-    * set .core *tmp115
+   29 set .builder @unit
+   30 ulocate building core false @copper .coreX .coreY *tmp116 .core
    31 label *label51
    32 op equal *tmp117 .core null
    33 jump *label50 notEqual *tmp117 false
 
    76 wait 1e-15
    77 read *tmp135 processor3 ":findDrillLocation*finished"
    78 jump *label61 equal *tmp135 false
-    * read *tmp132 processor3 ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp132
-    * read *tmp133 processor3 ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp133
-    * read *tmp136 processor3 ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp136
+   79 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
+   80 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
+   81 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
    82 op equal *tmp137 :buildFirstTitaniumDrill:result false
    83 jump *label62 equal *tmp137 false
    84 set :error:error "Cannot locate spot for titanium drill"
 
    97 wait 1e-15
    98 read *tmp141 processor5 ":buildFirstTitaniumDrillAt*finished"
    99 jump *label65 equal *tmp141 false
-    * read *tmp142 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp124 *tmp142
+  100 read *tmp124 processor5 ":buildFirstTitaniumDrillAt*retval"
   101 jump *label59 always
   102 set *tmp124 null
   103 label *label59
 
   121 setaddr :buildBlockFromCfg*retaddr *label69 (h:*label69)
   122 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   123 label *label69
-    * set *tmp146 :buildBlockFromCfg*retval
-    * set .controller *tmp146
+  124 set .controller :buildBlockFromCfg*retval
   125 write processor1 .controller ".timer"
   126 write processor2 .controller ".display"
   127 write .core .controller ".core"
 
   296 label *label116
   297 write @ore-titanium processor2 ".nextBlock"
   298 ubind @flare
-    * read *tmp49 processor3 ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp49
+  299 read :blocksBuildTitaniumDrills:current processor3 ".locations"
   300 write .coreX processor3 ":findDrillLocation:x"
   301 write .coreY processor3 ":findDrillLocation:y"
   302 write @unit processor3 ":findDrillLocation:unit"
 
   340 wait 1e-15
   341 read *tmp188 processor3 ":layoutThoriumDrill*finished"
   342 jump *label123 equal *tmp188 false
-    * read *tmp189 processor3 ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp189
+  343 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
   344 op equal *tmp190 :buildThoriumDrill:result false
   345 jump *label124 equal *tmp190 false
   346 set :error:error "Cannot locate spot for thorium drill"
 
   364 wait 1e-15
   365 read *tmp198 processor5 ":buildBlockAt*finished"
   366 jump *label127 equal *tmp198 false
-    * read *tmp199 processor5 ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp199
+  367 read .thoriumDrill processor5 ":buildBlockAt*retval"
   368 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
-    * read *tmp53 processor3 ".water1X"
-    * set :buildRemoteBlock:x *tmp53
-    * read *tmp54 processor3 ".water1Y"
-    * set :buildRemoteBlock:y *tmp54
+  369 read :buildRemoteBlock:x processor3 ".water1X"
+  370 read :buildRemoteBlock:y processor3 ".water1Y"
   371 setaddr :buildRemoteBlock*retaddr *label128 (h:*label128)
   372 call *label38 *invalid :buildRemoteBlock*retval (m:*label128) (h:*label128)
   373 label *label128
   374 set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
-    * read *tmp57 processor3 ".water2X"
-    * set :buildRemoteBlock:x *tmp57
-    * read *tmp58 processor3 ".water2Y"
-    * set :buildRemoteBlock:y *tmp58
+  375 read :buildRemoteBlock:x processor3 ".water2X"
+  376 read :buildRemoteBlock:y processor3 ".water2Y"
   377 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
   378 call *label38 *invalid :buildRemoteBlock*retval (m:*label129) (h:*label129)
   379 label *label129
   380 set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"
-    * read *tmp59 processor3 ".generatorX"
-    * set :buildRemoteBlock:x *tmp59
-    * read *tmp60 processor3 ".generatorY"
-    * set :buildRemoteBlock:y *tmp60
+  381 read :buildRemoteBlock:x processor3 ".generatorX"
+  382 read :buildRemoteBlock:y processor3 ".generatorY"
   383 setaddr :buildRemoteBlock*retaddr *label130 (h:*label130)
   384 call *label38 *invalid :buildRemoteBlock*retval (m:*label130) (h:*label130)
   385 label *label130
-    * set *tmp202 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp202
+  386 set .thoriumGenerator :buildRemoteBlock*retval
   387 set :buildRemoteBlock:cfg "AFHJT-power-node10"
-    * read *tmp61 processor3 ".node1X"
-    * set :buildRemoteBlock:x *tmp61
-    * read *tmp62 processor3 ".node1Y"
-    * set :buildRemoteBlock:y *tmp62
+  388 read :buildRemoteBlock:x processor3 ".node1X"
+  389 read :buildRemoteBlock:y processor3 ".node1Y"
   390 setaddr :buildRemoteBlock*retaddr *label131 (h:*label131)
   391 call *label38 *invalid :buildRemoteBlock*retval (m:*label131) (h:*label131)
   392 label *label131
   393 set :buildRemoteBlock:cfg "AFHJT-power-node10"
-    * read *tmp63 processor3 ".node2X"
-    * set :buildRemoteBlock:x *tmp63
-    * read *tmp64 processor3 ".node2Y"
-    * set :buildRemoteBlock:y *tmp64
+  394 read :buildRemoteBlock:x processor3 ".node2X"
+  395 read :buildRemoteBlock:y processor3 ".node2Y"
   396 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
   397 call *label38 *invalid :buildRemoteBlock*retval (m:*label132) (h:*label132)
   398 label *label132
   399 set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"
-    * read *tmp65 processor3 ".panelX"
-    * set :buildRemoteBlock:x *tmp65
-    * read *tmp66 processor3 ".panelY"
-    * set :buildRemoteBlock:y *tmp66
+  400 read :buildRemoteBlock:x processor3 ".panelX"
+  401 read :buildRemoteBlock:y processor3 ".panelY"
   402 setaddr :buildRemoteBlock*retaddr *label133 (h:*label133)
   403 call *label38 *invalid :buildRemoteBlock*retval (m:*label133) (h:*label133)
   404 label *label133
   405 set :buildRemoteBlock:cfg "AJTJK-battery1"
-    * read *tmp67 processor3 ".batteryX"
-    * set :buildRemoteBlock:x *tmp67
-    * read *tmp68 processor3 ".batteryY"
-    * set :buildRemoteBlock:y *tmp68
+  406 read :buildRemoteBlock:x processor3 ".batteryX"
+  407 read :buildRemoteBlock:y processor3 ".batteryY"
   408 setaddr :buildRemoteBlock*retaddr *label134 (h:*label134)
   409 call *label38 *invalid :buildRemoteBlock*retval (m:*label134) (h:*label134)
   410 label *label134
-    * set *tmp206 :buildRemoteBlock*retval
-    * set .thoriumBattery *tmp206
+  411 set .thoriumBattery :buildRemoteBlock*retval
   412 set :buildRemoteBlock:cfg "A¨JJJ~-container52"
-    * read *tmp55 processor3 ".containerX"
-    * set :buildRemoteBlock:x *tmp55
-    * read *tmp56 processor3 ".containerY"
-    * set :buildRemoteBlock:y *tmp56
+  413 read :buildRemoteBlock:x processor3 ".containerX"
+  414 read :buildRemoteBlock:y processor3 ".containerY"
   415 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   416 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   417 label *label135
-    * set *tmp207 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp207
+  418 set .thoriumContainer :buildRemoteBlock*retval
   419 op equal *tmp208 .thoriumContainer null
   420 jump *label136 equal *tmp208 false
   421 set .thoriumContainer .thoriumDrill
 
   467 call *label42 *invalid :buildUnits*retval (m:*label148) (h:*label148)
   468 label *label148
   469 read *tmp81 .controller ".polys"
-    * op sub *tmp214 *tmp81 1
-    * set :tmp *tmp214
+  470 op sub :tmp *tmp81 1
   471 write :tmp .controller ".polyTarget"
   472 write :tmp .controller ".polys"
   473 write :tmp processor2 ".polys"
-    * sensor *tmp215 AÁNBJd-multiplicative-reconstructor26 @x
-    * set :x *tmp215
-    * sensor *tmp216 AÁNBJd-multiplicative-reconstructor26 @y
-    * set :y *tmp216
+  474 sensor :x AÁNBJd-multiplicative-reconstructor26 @x
+  475 sensor :y AÁNBJd-multiplicative-reconstructor26 @y
   476 label *label149
   477 ucontrol move :x :y
   478 ucontrol payEnter
 
   507 label *label156
   508 label *label157
   509 jump *label159 equal true false
-    * op add *tmp225 .coreY 6
-    * set :lineUpUnits:y *tmp225
+  510 op add :lineUpUnits:y .coreY 6
   511 set :lineUpUnits:unit @mega
   512 setaddr :lineUpUnits*retaddr *label160 (h:*label160)
   513 call *label44 *invalid :lineUpUnits*retval (m:*label160) (h:*label160)
   514 label *label160
-    * op add *tmp226 .coreY 2
-    * set :lineUpUnits:y *tmp226
+  515 op add :lineUpUnits:y .coreY 2
   516 set :lineUpUnits:unit @poly
   517 setaddr :lineUpUnits*retaddr *label161 (h:*label161)
   518 call *label44 *invalid :lineUpUnits*retval (m:*label161) (h:*label161)
   519 label *label161
-    * op sub *tmp227 .coreY 2
-    * set :lineUpUnits:y *tmp227
+  520 op sub :lineUpUnits:y .coreY 2
   521 set :lineUpUnits:unit @mono
   522 setaddr :lineUpUnits*retaddr *label162 (h:*label162)
   523 call *label44 *invalid :lineUpUnits*retval (m:*label162) (h:*label162)
   524 label *label162
-    * op sub *tmp228 .coreY 6
-    * set :lineUpUnits:y *tmp228
+  525 op sub :lineUpUnits:y .coreY 6
   526 set :lineUpUnits:unit @flare
   527 setaddr :lineUpUnits*retaddr *label163 (h:*label163)
   528 call *label44 *invalid :lineUpUnits*retval (m:*label163) (h:*label163)
 
   701 jump *label212 equal *tmp272 false
   702 sensor *tmp274 .core @titanium
   703 op sub *tmp275 titanium *tmp274
-    * op min *tmp276 7 *tmp275
-    * set *tmp273 *tmp276
+  704 op min *tmp273 7 *tmp275
   705 jump *label213 always
   706 label *label212
   707 set *tmp273 100
 
   733 setaddr :status1*retaddr *label224 (h:*label224)
   734 call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
   735 label *label224
-    * sensor *tmp289 .core @coal
-    * set :supplyBase0:coal *tmp289
-    * sensor *tmp290 .core @sand
-    * set :supplyBase0:sand *tmp290
+  736 sensor :supplyBase0:coal .core @coal
+  737 sensor :supplyBase0:sand .core @sand
   738 op lessThan *tmp291 :supplyBase0:coal :supplyBase0:sand
   739 jump *label225 equal *tmp291 false
   740 set *tmp292 @coal
 
   792 setaddr :status1*retaddr *label240 (h:*label240)
   793 call *label11 *invalid :status1*retval (m:*label240) (h:*label240)
   794 label *label240
-    * sensor *tmp302 .core @coal
-    * set :supplyBase0:coal.1 *tmp302
-    * sensor *tmp303 .core @sand
-    * set :supplyBase0:sand.1 *tmp303
+  795 sensor :supplyBase0:coal.1 .core @coal
+  796 sensor :supplyBase0:sand.1 .core @sand
   797 op lessThanEq *tmp304 :supplyBase0:coal.1 :supplyBase0:sand.1
   798 jump *label241 equal *tmp304 false
   799 set *tmp305 @coal
 
   923 return :buildBlockFromCfg*retaddr
   924 end
   925 label *label40
-    * set *tmp311 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp311
+  926 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   927 set :buildBlockFromCfg:config null
   928 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   929 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
 
   985 label *label43
   986 label *label262
   987 ubind :flagUnits:unit
-    * set *tmp312 @unit
-    * set :flagUnits:firstUnit *tmp312
+  988 set :flagUnits:firstUnit @unit
   989 label *label263
   990 op equal *tmp313 :flagUnits:firstUnit null
   991 jump *label262 notEqual *tmp313 false
   992 label *label264
-    * op add *tmp314 .coreX 8
-    * set :flagUnits:x *tmp314
+  993 op add :flagUnits:x .coreX 8
   994 label *label265
   995 ucontrol flag :flagUnits:x
   996 op add :flagUnits:x :flagUnits:x 4
 
  1006 ubind :lineUpUnits:unit
  1007 set :lineUpUnits:firstUnit @unit
  1008 label *label269
-    * sensor *tmp316 @unit @flag
-    * set :lineUpUnits:x *tmp316
+ 1009 sensor :lineUpUnits:x @unit @flag
  1010 ucontrol itemDrop @air 1000
  1011 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1012 sensor *tmp317 @unit @mining
 
  1035 setaddr :status2*retaddr *label276 (h:*label276)
  1036 call *label12 *invalid :status2*retval (m:*label276) (h:*label276)
  1037 label *label276
-    * set *tmp320 :mineOre.1:ore
-    * set :mineOre:ore *tmp320
+ 1038 set :mineOre:ore :mineOre.1:ore
  1039 set :mineOre:amount 30
  1040 set :mineOre:block .core
  1041 setaddr :mineOre*retaddr *label277 (h:*label277)
 
  1046 end
  1047 label *label25
  1048 sensor *tmp321 :fetchBlock:block @itemCapacity
-    * op min *tmp322 *tmp321 30
-    * set :transportStatus:target *tmp322
+ 1049 op min :transportStatus:target *tmp321 30
  1050 set :transportStatus:item :fetchBlock:item
  1051 setaddr :transportStatus*retaddr *label279 (h:*label279)
  1052 call *label14 *invalid :transportStatus*retval (m:*label279) (h:*label279)
 
  1069 label *label282
  1070 label *label283
  1071 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp325 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp325
+ 1072 sensor :fetchBlock:unitItem @unit @firstItem
  1073 op notEqual *tmp326 :fetchBlock:unitItem null
  1074 op notEqual *tmp327 :fetchBlock:unitItem :fetchBlock:item
  1075 op land *tmp328 *tmp326 *tmp327
 
  1100 setaddr :status2*retaddr *label290 (h:*label290)
  1101 call *label12 *invalid :status2*retval (m:*label290) (h:*label290)
  1102 label *label290
-    * sensor *tmp334 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp334
+ 1103 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1104 sensor *tmp335 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp336 :supplyBlock:blockCapacity *tmp335
-    * set :supplyBlock:missing *tmp336
+ 1105 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp335
  1106 op greaterThan *tmp337 :supplyBlock:missing 0
  1107 jump *label291 equal *tmp337 false
  1108 set :mineOre:ore :supplyBlock:ore
 
  1119 end
  1120 label *label27
  1121 sensor *tmp339 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp340 *tmp339 30
-    * set :supplyBlockFromCore:cap *tmp340
+ 1122 op min :supplyBlockFromCore:cap *tmp339 30
  1123 set :transportStatus:target :supplyBlockFromCore:cap
  1124 set :transportStatus:item :supplyBlockFromCore:item
  1125 setaddr :transportStatus*retaddr *label295 (h:*label295)
 
  1141 label *label298
  1142 label *label299
  1143 ucontrol itemTake .core :supplyBlockFromCore:item :supplyBlockFromCore:cap
-    * sensor *tmp341 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp341
+ 1144 sensor :supplyBlockFromCore:unitItem @unit @firstItem
  1145 op notEqual *tmp342 :supplyBlockFromCore:unitItem null
  1146 op notEqual *tmp343 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
  1147 op land *tmp344 *tmp342 *tmp343
 
  1171 op add :unpackCfg:index :unpackCfg:index 1
  1172 read *tmp351 :unpackCfg:cfg *tmp350
  1173 op sub *tmp352 *tmp351 74
-    * lookup block *tmp353 *tmp352
-    * set :unpackCfg:type *tmp353
+ 1174 lookup block :unpackCfg:type *tmp352
  1175 set *tmp354 :unpackCfg:index
  1176 op add :unpackCfg:index :unpackCfg:index 1
  1177 read *tmp355 :unpackCfg:cfg *tmp354
  1178 op sub *tmp356 *tmp355 74
-    * op div *tmp357 *tmp356 2
-    * set :unpackCfg:x *tmp357
+ 1179 op div :unpackCfg:x *tmp356 2
  1180 set *tmp358 :unpackCfg:index
  1181 op add :unpackCfg:index :unpackCfg:index 1
  1182 read *tmp359 :unpackCfg:cfg *tmp358
  1183 op sub *tmp360 *tmp359 74
-    * op div *tmp361 *tmp360 2
-    * set :unpackCfg:y *tmp361
+ 1184 op div :unpackCfg:y *tmp360 2
  1185 set *tmp362 :unpackCfg:index
  1186 op add :unpackCfg:index :unpackCfg:index 1
  1187 read *tmp363 :unpackCfg:cfg *tmp362
-    * op sub *tmp364 *tmp363 74
-    * set :unpackCfg:rotation *tmp364
+ 1188 op sub :unpackCfg:rotation *tmp363 74
  1189 set *tmp365 :unpackCfg:index
  1190 op add :unpackCfg:index :unpackCfg:index 1
  1191 read *tmp366 :unpackCfg:cfg *tmp365
-    * op sub *tmp367 *tmp366 74
-    * set :unpackCfg:ind *tmp367
-    * sensor *tmp368 :unpackCfg:type @copper
-    * set :unpackCfg:cu *tmp368
-    * sensor *tmp369 :unpackCfg:type @lead
-    * set :unpackCfg:pb *tmp369
-    * sensor *tmp370 :unpackCfg:type @graphite
-    * set :unpackCfg:gr *tmp370
-    * sensor *tmp371 :unpackCfg:type @silicon
-    * set :unpackCfg:si *tmp371
-    * sensor *tmp372 :unpackCfg:type @titanium
-    * set :unpackCfg:ti *tmp372
-    * sensor *tmp373 :unpackCfg:type @metaglass
-    * set :unpackCfg:mg *tmp373
-    * sensor *tmp374 :unpackCfg:type @thorium
-    * set :unpackCfg:th *tmp374
+ 1192 op sub :unpackCfg:ind *tmp366 74
+ 1193 sensor :unpackCfg:cu :unpackCfg:type @copper
+ 1194 sensor :unpackCfg:pb :unpackCfg:type @lead
+ 1195 sensor :unpackCfg:gr :unpackCfg:type @graphite
+ 1196 sensor :unpackCfg:si :unpackCfg:type @silicon
+ 1197 sensor :unpackCfg:ti :unpackCfg:type @titanium
+ 1198 sensor :unpackCfg:mg :unpackCfg:type @metaglass
+ 1199 sensor :unpackCfg:th :unpackCfg:type @thorium
  1200 label *label305
  1201 return :unpackCfg*retaddr
  1202 end
 
  1245 write :meetTarget:metaglass processor2 ".targetMetaglass"
  1246 write :meetTarget:thorium processor2 ".targetThorium"
  1247 set copper :meetTarget:copper
-    * op add *tmp378 :meetTarget:lead .leadSurplus
-    * set lead *tmp378
+ 1248 op add lead :meetTarget:lead .leadSurplus
  1249 set graphite :meetTarget:graphite
  1250 set silicon :meetTarget:silicon
  1251 set titanium :meetTarget:titanium
 
  1448 wait 1e-15
  1449 read *tmp444 processor5 ":buildBlockAt*finished"
  1450 jump *label360 equal *tmp444 false
-    * read *tmp445 processor5 ":buildBlockAt*retval"
-    * set :buildBlock:built *tmp445
+ 1451 read :buildBlock:built processor5 ":buildBlockAt*retval"
  1452 write false .controller ":buildStop*finished"
  1453 write 2 .controller "@counter"
  1454 set :buildBlock*retval :buildBlock:built
 
  1517 setaddr :moveToBlock*retaddr *label378 (h:*label378)
  1518 call *label20 *invalid :moveToBlock*retval (m:*label378) (h:*label378)
  1519 label *label378
-    * sensor *tmp456 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp456
+ 1520 sensor :depositItems:cap :depositItems:block @itemCapacity
  1521 label *label379
  1522 ucontrol itemDrop :depositItems:block 30
  1523 label *label380
 
  1547 return :depositItems*retaddr
  1548 end
  1549 label *label23
-    * op min *tmp463 :mineOre:amount 30
-    * set :mineOre:amount *tmp463
+ 1550 op min :mineOre:amount :mineOre:amount 30
  1551 set :transportStatus:target :mineOre:amount
  1552 set :transportStatus:item :mineOre:ore
  1553 setaddr :transportStatus*retaddr *label387 (h:*label387)
 
  1577 setaddr :status3*retaddr *label393 (h:*label393)
  1578 call *label13 *invalid :status3*retval (m:*label393) (h:*label393)
  1579 label *label393
-    * op add *tmp467 @second 10
-    * set :mineOre:stop *tmp467
+ 1580 op add :mineOre:stop @second 10
  1581 label *label394
-    * sensor *tmp468 @unit @firstItem
-    * set :mineOre:item *tmp468
+ 1582 sensor :mineOre:item @unit @firstItem
  1583 op notEqual *tmp469 :mineOre:item null
  1584 op notEqual *tmp470 :mineOre:item :mineOre:ore
  1585 op land *tmp471 *tmp469 *tmp470

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   506 call *label43 *invalid :flagUnits*retval (m:*label156) (h:*label156)
   507 label *label156
   508 label *label157
-    * jump *label159 equal true false
   509 op add :lineUpUnits:y .coreY 6
   510 set :lineUpUnits:unit @mega
   511 setaddr :lineUpUnits*retaddr *label160 (h:*label160)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-73 instructions):
 
    29 set .builder @unit
    30 ulocate building core false @copper .coreX .coreY *tmp116 .core
    31 label *label51
-    * op equal *tmp117 .core null
-    * jump *label50 notEqual *tmp117 false
+   32 jump *label50 equal .core null
    33 label *label52
    34 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    35 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
    78 read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocation:dx"
    79 read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocation:dy"
    80 read :buildFirstTitaniumDrill:result processor3 ":findDrillLocation*retval"
-    * op equal *tmp137 :buildFirstTitaniumDrill:result false
-    * jump *label62 equal *tmp137 false
+   81 jump *label62 notEqual :buildFirstTitaniumDrill:result false
    82 set :error:error "Cannot locate spot for titanium drill"
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
 
   204 call *label35 *invalid :supplyBase*retval (m:*label93) (h:*label93)
   205 label *label93
   206 sensor *tmp153 AJTJK-battery1 @totalPower
-    * op lessThan *tmp154 *tmp153 300
-    * jump *label94 equal *tmp154 false
+  207 jump *label94 greaterThanEq *tmp153 300
   208 jump *label92 always
   209 jump *label95 always
   210 label *label94
   211 label *label95
   212 label *label91
   213 read *tmp80 .controller ".monos"
-    * op lessThan *tmp156 *tmp80 3
-    * jump *label90 notEqual *tmp156 false
+  214 jump *label90 lessThan *tmp80 3
   215 label *label92
   216 set .siliconSurplus 65
   217 set :buildBlockFromCfg.1:cfg "A©NHJX-unloader14"
 
   269 label *label108
   270 label *label109
   271 read *tmp81 .controller ".polys"
-    * op lessThan *tmp167 *tmp81 2
-    * jump *label111 equal *tmp167 false
+  272 jump *label111 greaterThanEq *tmp81 2
   273 setaddr :supplyBase*retaddr *label112 (h:*label112)
   274 call *label35 *invalid :supplyBase*retval (m:*label112) (h:*label112)
   275 label *label112
 
   281 label *label113
   282 label *label114
   283 read *tmp79 .controller ".flares"
-    * op lessThan *tmp168 *tmp79 2
-    * jump *label116 equal *tmp168 false
+  284 jump *label116 greaterThanEq *tmp79 2
   285 setaddr :supplyBase*retaddr *label117 (h:*label117)
   286 call *label35 *invalid :supplyBase*retval (m:*label117) (h:*label117)
   287 label *label117
 
   335 read *tmp188 processor3 ":layoutThoriumDrill*finished"
   336 jump *label123 equal *tmp188 false
   337 read :buildThoriumDrill:result processor3 ":layoutThoriumDrill*retval"
-    * op equal *tmp190 :buildThoriumDrill:result false
-    * jump *label124 equal *tmp190 false
+  338 jump *label124 notEqual :buildThoriumDrill:result false
   339 set :error:error "Cannot locate spot for thorium drill"
   340 setaddr :error*retaddr *label126 (h:*label126)
   341 call *label15 *invalid :error*retval (m:*label126) (h:*label126)
 
   409 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   410 label *label135
   411 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp208 .thoriumContainer null
-    * jump *label136 equal *tmp208 false
+  412 jump *label136 notEqual .thoriumContainer null
   413 set .thoriumContainer .thoriumDrill
   414 jump *label137 always
   415 label *label136
 
   427 write null processor2 ".nextBlock"
   428 label *label139
   429 read *tmp81 .controller ".polys"
-    * op lessThan *tmp212 *tmp81 3
-    * jump *label141 equal *tmp212 false
+  430 jump *label141 greaterThanEq *tmp81 3
   431 setaddr :supplyBase*retaddr *label142 (h:*label142)
   432 call *label35 *invalid :supplyBase*retval (m:*label142) (h:*label142)
   433 label *label142
 
   469 ucontrol payEnter
   470 label *label150
   471 read *tmp82 .controller ".megas"
-    * op equal *tmp217 *tmp82 false
-    * jump *label149 notEqual *tmp217 false
+  472 jump *label149 equal *tmp82 false
   473 label *label151
   474 write true .controller ".finished"
   475 control enabled processor1 false
 
   539 call *label11 *invalid :status1*retval (m:*label169) (h:*label169)
   540 label *label169
   541 sensor *tmp234 .thoriumBattery @totalPower
-    * op lessThan *tmp235 *tmp234 2000
-    * jump *label170 equal *tmp235 false
+  542 jump *label170 greaterThanEq *tmp234 2000
   543 sensor *tmp237 .thoriumGenerator @coal
-    * op equal *tmp238 *tmp237 0
-    * jump *label172 equal *tmp238 false
+  544 jump *label172 notEqual *tmp237 0
   545 sensor *tmp240 .core @coal
-    * op lessThan *tmp241 *tmp240 50
-    * jump *label174 equal *tmp241 false
+  546 jump *label174 greaterThanEq *tmp240 50
   547 set :supplyBlock:block .thoriumGenerator
   548 set :supplyBlock:ore @coal
   549 setaddr :supplyBlock*retaddr *label176 (h:*label176)
 
   569 call *label25 *invalid :fetchBlock*retval (m:*label178) (h:*label178)
   570 label *label178
   571 sensor *tmp243 .core @thorium
-    * op greaterThan *tmp244 *tmp243 400
-    * jump *label179 equal *tmp244 false
+  572 jump *label179 lessThanEq *tmp243 400
   573 set :setPolyTarget.2:target 4
   574 write :setPolyTarget.2:target .controller ".polyTarget"
   575 label *label181
 
   580 jump *label167 always
   581 label *label166
   582 read *tmp80 .controller ".monos"
-    * op greaterThan *tmp246 *tmp80 1
-    * jump *label182 equal *tmp246 false
+  583 jump *label182 lessThanEq *tmp80 1
   584 set :status1:text "Phase 1: supplying base"
   585 setaddr :status1*retaddr *label185 (h:*label185)
   586 call *label11 *invalid :status1*retval (m:*label185) (h:*label185)
 
   593 jump *label183 always
   594 label *label182
   595 set :supplyBase0:supplied false
-    * op equal *tmp248 A©JNJP-unloader6 null
-    * jump *label188 equal *tmp248 false
+  596 jump *label188 notEqual A©JNJP-unloader6 null
   597 sensor *tmp250 .core @graphite
-    * op lessThan *tmp251 *tmp250 graphite
-    * jump *label190 equal *tmp251 false
+  598 jump *label190 greaterThanEq *tmp250 graphite
   599 sensor *tmp253 AJEMJJ-graphite-press0 @coal
-    * op lessThan *tmp254 *tmp253 5
-    * jump *label192 equal *tmp254 false
+  600 jump *label192 greaterThanEq *tmp253 5
   601 set :status1:text "Goal 1: graphite requirement"
   602 setaddr :status1*retaddr *label194 (h:*label194)
   603 call *label11 *invalid :status1*retval (m:*label194) (h:*label194)
 
   615 label *label190
   616 label *label191
   617 sensor *tmp256 .core @silicon
-    * op lessThan *tmp257 *tmp256 silicon
-    * jump *label196 equal *tmp257 false
+  618 jump *label196 greaterThanEq *tmp256 silicon
   619 sensor *tmp259 ALMQJN-silicon-smelter4 @coal
-    * op lessThan *tmp260 *tmp259 5
-    * jump *label198 equal *tmp260 false
+  620 jump *label198 greaterThanEq *tmp259 5
   621 set :status1:text "Goal 2: coal for silicon requirement"
   622 setaddr :status1*retaddr *label200 (h:*label200)
   623 call *label11 *invalid :status1*retval (m:*label200) (h:*label200)
 
   631 jump *label199 always
   632 label *label198
   633 sensor *tmp262 ALMQJN-silicon-smelter4 @sand
-    * op lessThan *tmp263 *tmp262 5
-    * jump *label202 equal *tmp263 false
+  634 jump *label202 greaterThanEq *tmp262 5
   635 set :status1:text "Goal 3: sand for silicon requirement"
   636 setaddr :status1*retaddr *label204 (h:*label204)
   637 call *label11 *invalid :status1*retval (m:*label204) (h:*label204)
 
   650 label *label196
   651 label *label197
   652 sensor *tmp265 AJTJK-battery1 @totalPower
-    * op lessThan *tmp266 *tmp265 .powerTarget
-    * jump *label206 equal *tmp266 false
+  653 jump *label206 greaterThanEq *tmp265 .powerTarget
   654 sensor *tmp268 AJRJM-combustion-generator3 @coal
-    * op lessThan *tmp269 *tmp268 2
-    * jump *label208 equal *tmp269 false
+  655 jump *label208 greaterThanEq *tmp268 2
   656 set :status1:text "Goal 4: supplying generator"
   657 setaddr :status1*retaddr *label210 (h:*label210)
   658 call *label11 *invalid :status1*retval (m:*label210) (h:*label210)
 
   673 label *label188
   674 label *label189
   675 sensor *tmp271 .core @titanium
-    * op lessThan *tmp272 *tmp271 titanium
-    * jump *label212 equal *tmp272 false
+  676 jump *label212 greaterThanEq *tmp271 titanium
   677 sensor *tmp274 .core @titanium
   678 op sub *tmp275 titanium *tmp274
   679 op min *tmp273 7 *tmp275
 
   683 label *label213
   684 set :supplyBase0:titaniumTrigger *tmp273
   685 sensor *tmp277 .titaniumDrill @titanium
-    * op lessThan *tmp278 *tmp277 :supplyBase0:titaniumTrigger
-    * jump *label214 equal *tmp278 false
-    * op equal *tmp280 :supplyBase0:supplied false
-    * jump *label216 equal *tmp280 false
+  686 jump *label214 greaterThanEq *tmp277 :supplyBase0:titaniumTrigger
+  687 jump *label216 notEqual :supplyBase0:supplied false
   688 sensor *tmp282 AJTJK-battery1 @totalPower
   689 op mul *tmp283 A©JNJP-unloader6 .powerTarget
-    * op lessThan *tmp284 *tmp282 *tmp283
-    * jump *label218 equal *tmp284 false
+  690 jump *label218 greaterThanEq *tmp282 *tmp283
   691 set :status1:text "Goal 5: supplying generator"
   692 setaddr :status1*retaddr *label220 (h:*label220)
   693 call *label11 *invalid :status1*retval (m:*label220) (h:*label220)
 
   699 jump *label219 always
   700 label *label218
   701 sensor *tmp286 .core @silicon
-    * op lessThan *tmp287 *tmp286 silicon
-    * jump *label222 equal *tmp287 false
+  702 jump *label222 greaterThanEq *tmp286 silicon
   703 set :status1:text "Goal 6: silicon requirement"
   704 setaddr :status1*retaddr *label224 (h:*label224)
   705 call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
   706 label *label224
   707 sensor :supplyBase0:coal .core @coal
   708 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp291 :supplyBase0:coal :supplyBase0:sand
-    * jump *label225 equal *tmp291 false
+  709 jump *label225 greaterThanEq :supplyBase0:coal :supplyBase0:sand
   710 set *tmp292 @coal
   711 jump *label226 always
   712 label *label225
 
   720 jump *label223 always
   721 label *label222
   722 sensor *tmp293 .core @copper
-    * op lessThan *tmp294 *tmp293 copper
-    * jump *label228 equal *tmp294 false
+  723 jump *label228 greaterThanEq *tmp293 copper
   724 set :status1:text "Goal 7: copper requirement"
   725 setaddr :status1*retaddr *label230 (h:*label230)
   726 call *label11 *invalid :status1*retval (m:*label230) (h:*label230)
 
   732 jump *label229 always
   733 label *label228
   734 sensor *tmp296 .core @lead
-    * op lessThan *tmp297 *tmp296 lead
-    * jump *label232 equal *tmp297 false
+  735 jump *label232 greaterThanEq *tmp296 lead
   736 set :status1:text "Goal 8: lead requirement"
   737 setaddr :status1*retaddr *label234 (h:*label234)
   738 call *label11 *invalid :status1*retval (m:*label234) (h:*label234)
 
   744 jump *label233 always
   745 label *label232
   746 sensor *tmp299 .core @metaglass
-    * op lessThan *tmp300 *tmp299 metaglass
-    * jump *label236 equal *tmp300 false
+  747 jump *label236 greaterThanEq *tmp299 metaglass
   748 set :status1:text "Goal 9: metaglass requirement"
   749 setaddr :status1*retaddr *label238 (h:*label238)
   750 call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
 
   761 label *label240
   762 sensor :supplyBase0:coal.1 .core @coal
   763 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp304 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label241 equal *tmp304 false
+  764 jump *label241 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
   765 set *tmp305 @coal
   766 jump *label242 always
   767 label *label241
 
   800 end
   801 label *label38
   802 op add *tmp306 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp307 *tmp306 0
-    * jump *label247 equal *tmp307 false
+  803 jump *label247 lessThanEq *tmp306 0
   804 set :unpackCfg:cfg :buildRemoteBlock:cfg
   805 setaddr :unpackCfg*retaddr *label249 (h:*label249)
   806 call *label29 *invalid :unpackCfg*retval (m:*label249) (h:*label249)
 
   952 ubind :flagUnits:unit
   953 set :flagUnits:firstUnit @unit
   954 label *label263
-    * op equal *tmp313 :flagUnits:firstUnit null
-    * jump *label262 notEqual *tmp313 false
+  955 jump *label262 equal :flagUnits:firstUnit null
   956 label *label264
   957 op add :flagUnits:x .coreX 8
   958 label *label265
 
   960 op add :flagUnits:x :flagUnits:x 4
   961 ubind :flagUnits:unit
   962 label *label266
-    * op notEqual *tmp315 @unit :flagUnits:firstUnit
-    * jump *label265 notEqual *tmp315 false
+  963 jump *label265 notEqual @unit :flagUnits:firstUnit
   964 label *label267
   965 label *label261
   966 return :flagUnits*retaddr
 
   980 label *label273
   981 ubind :lineUpUnits:unit
   982 label *label270
-    * op notEqual *tmp319 @unit :lineUpUnits:firstUnit
-    * jump *label269 notEqual *tmp319 false
+  983 jump *label269 notEqual @unit :lineUpUnits:firstUnit
   984 label *label271
   985 label *label268
   986 return :lineUpUnits*retaddr
 
  1065 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
  1066 sensor *tmp335 :supplyBlock:block :supplyBlock:ore
  1067 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp335
-    * op greaterThan *tmp337 :supplyBlock:missing 0
-    * jump *label291 equal *tmp337 false
+ 1068 jump *label291 lessThanEq :supplyBlock:missing 0
  1069 set :mineOre:ore :supplyBlock:ore
  1070 set :mineOre:amount :supplyBlock:blockCapacity
  1071 set :mineOre:block :supplyBlock:block
 
  1233 write copper processor7 ".copperTarget"
  1234 label *label317
  1235 sensor *tmp390 .core @copper
-    * op lessThan *tmp391 *tmp390 copper
-    * jump *label321 equal *tmp391 false
+ 1236 jump *label321 greaterThanEq *tmp390 copper
  1237 set *tmp389 false
  1238 jump *label320 always
  1239 jump *label322 always
  1240 label *label321
  1241 label *label322
  1242 sensor *tmp393 .core @lead
-    * op lessThan *tmp394 *tmp393 lead
-    * jump *label323 equal *tmp394 false
+ 1243 jump *label323 greaterThanEq *tmp393 lead
  1244 set *tmp389 false
  1245 jump *label320 always
  1246 jump *label324 always
  1247 label *label323
  1248 label *label324
  1249 sensor *tmp396 .core @graphite
-    * op lessThan *tmp397 *tmp396 graphite
-    * jump *label325 equal *tmp397 false
+ 1250 jump *label325 greaterThanEq *tmp396 graphite
  1251 set *tmp389 false
  1252 jump *label320 always
  1253 jump *label326 always
  1254 label *label325
  1255 label *label326
  1256 sensor *tmp399 .core @silicon
-    * op lessThan *tmp400 *tmp399 silicon
-    * jump *label327 equal *tmp400 false
+ 1257 jump *label327 greaterThanEq *tmp399 silicon
  1258 set *tmp389 false
  1259 jump *label320 always
  1260 jump *label328 always
  1261 label *label327
  1262 label *label328
  1263 sensor *tmp402 .core @titanium
-    * op lessThan *tmp403 *tmp402 titanium
-    * jump *label329 equal *tmp403 false
+ 1264 jump *label329 greaterThanEq *tmp402 titanium
  1265 set *tmp389 false
  1266 jump *label320 always
  1267 jump *label330 always
  1268 label *label329
  1269 label *label330
  1270 sensor *tmp405 .core @metaglass
-    * op lessThan *tmp406 *tmp405 metaglass
-    * jump *label331 equal *tmp406 false
+ 1271 jump *label331 greaterThanEq *tmp405 metaglass
  1272 set *tmp389 false
  1273 jump *label320 always
  1274 jump *label332 always
  1275 label *label331
  1276 label *label332
  1277 sensor *tmp408 .core @thorium
-    * op lessThan *tmp409 *tmp408 thorium
-    * jump *label333 equal *tmp409 false
+ 1278 jump *label333 greaterThanEq *tmp408 thorium
  1279 set *tmp389 false
  1280 jump *label320 always
  1281 jump *label334 always
 
  1285 jump *label320 always
  1286 set *tmp389 null
  1287 label *label320
-    * op equal *tmp411 *tmp389 false
-    * jump *label319 equal *tmp411 false
+ 1288 jump *label319 notEqual *tmp389 false
  1289 setaddr :supplyBase*retaddr *label335 (h:*label335)
  1290 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1291 label *label335
 
  1301 jump *label338 equal *tmp413 false
  1302 label *label339
  1303 sensor *tmp415 .core @copper
-    * op lessThan *tmp416 *tmp415 copper
-    * jump *label343 equal *tmp416 false
+ 1304 jump *label343 greaterThanEq *tmp415 copper
  1305 set *tmp414 false
  1306 jump *label342 always
  1307 jump *label344 always
  1308 label *label343
  1309 label *label344
  1310 sensor *tmp418 .core @lead
-    * op lessThan *tmp419 *tmp418 lead
-    * jump *label345 equal *tmp419 false
+ 1311 jump *label345 greaterThanEq *tmp418 lead
  1312 set *tmp414 false
  1313 jump *label342 always
  1314 jump *label346 always
  1315 label *label345
  1316 label *label346
  1317 sensor *tmp421 .core @graphite
-    * op lessThan *tmp422 *tmp421 graphite
-    * jump *label347 equal *tmp422 false
+ 1318 jump *label347 greaterThanEq *tmp421 graphite
  1319 set *tmp414 false
  1320 jump *label342 always
  1321 jump *label348 always
  1322 label *label347
  1323 label *label348
  1324 sensor *tmp424 .core @silicon
-    * op lessThan *tmp425 *tmp424 silicon
-    * jump *label349 equal *tmp425 false
+ 1325 jump *label349 greaterThanEq *tmp424 silicon
  1326 set *tmp414 false
  1327 jump *label342 always
  1328 jump *label350 always
  1329 label *label349
  1330 label *label350
  1331 sensor *tmp427 .core @titanium
-    * op lessThan *tmp428 *tmp427 titanium
-    * jump *label351 equal *tmp428 false
+ 1332 jump *label351 greaterThanEq *tmp427 titanium
  1333 set *tmp414 false
  1334 jump *label342 always
  1335 jump *label352 always
  1336 label *label351
  1337 label *label352
  1338 sensor *tmp430 .core @metaglass
-    * op lessThan *tmp431 *tmp430 metaglass
-    * jump *label353 equal *tmp431 false
+ 1339 jump *label353 greaterThanEq *tmp430 metaglass
  1340 set *tmp414 false
  1341 jump *label342 always
  1342 jump *label354 always
  1343 label *label353
  1344 label *label354
  1345 sensor *tmp433 .core @thorium
-    * op lessThan *tmp434 *tmp433 thorium
-    * jump *label355 equal *tmp434 false
+ 1346 jump *label355 greaterThanEq *tmp433 thorium
  1347 set *tmp414 false
  1348 jump *label342 always
  1349 jump *label356 always
 
  1353 jump *label342 always
  1354 set *tmp414 null
  1355 label *label342
-    * op equal *tmp436 *tmp414 false
-    * jump *label341 equal *tmp436 false
+ 1356 jump *label341 notEqual *tmp414 false
  1357 setaddr :supplyBase*retaddr *label357 (h:*label357)
  1358 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1359 label *label357
 
  1422 label *label364
  1423 label *label365
  1424 sensor *tmp446 @unit @firstItem
-    * op notEqual *tmp447 *tmp446 null
-    * jump *label368 equal *tmp447 false
+ 1425 jump *label368 equal *tmp446 null
  1426 ucontrol itemDrop @air 1000
  1427 jump *label369 always
  1428 label *label368
 
  1430 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
  1431 label *label366
  1432 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp449
-    * op equal *tmp450 *tmp449 false
-    * jump *label365 notEqual *tmp450 false
+ 1433 jump *label365 equal *tmp449 false
  1434 label *label367
  1435 label *label363
  1436 return :moveToEmpty*retaddr
 
  1438 label *label19
  1439 label *label371
  1440 sensor *tmp451 @unit @firstItem
-    * op notEqual *tmp452 *tmp451 null
-    * jump *label373 equal *tmp452 false
+ 1441 jump *label373 equal *tmp451 null
  1442 ucontrol itemDrop @air 1000
  1443 label *label372
  1444 jump *label371 always
 
  1452 call *label13 *invalid :status3*retval (m:*label375) (h:*label375)
  1453 label *label375
  1454 sensor *tmp453 @unit @firstItem
-    * op equal *tmp454 *tmp453 :depositItems:item
-    * jump *label376 equal *tmp454 false
+ 1455 jump *label376 notEqual *tmp453 :depositItems:item
  1456 set :moveToBlock:block :depositItems:block
  1457 set :moveToBlock:radius 6
  1458 setaddr :moveToBlock*retaddr *label378 (h:*label378)
 
  1465 sensor *tmp457 @unit @firstItem
  1466 op mul *tmp458 *tmp457 :depositItems:cap
  1467 sensor *tmp459 :depositItems:block :depositItems:item
-    * op greaterThan *tmp460 *tmp458 *tmp459
-    * jump *label379 notEqual *tmp460 false
+ 1468 jump *label379 greaterThan *tmp458 *tmp459
  1469 label *label381
  1470 jump *label377 always
  1471 label *label376
  1472 label *label382
  1473 sensor *tmp461 @unit @firstItem
-    * op notEqual *tmp462 *tmp461 null
-    * jump *label384 equal *tmp462 false
+ 1474 jump *label384 equal *tmp461 null
  1475 ucontrol itemDrop @air 1000
  1476 label *label383
  1477 jump *label382 always
 
  1504 call *label18 *invalid :moveToEmpty*retval (m:*label389) (h:*label389)
  1505 label *label389
  1506 sensor *tmp464 @unit @firstItem
-    * op notEqual *tmp465 *tmp464 :mineOre:ore
-    * jump *label390 equal *tmp465 false
+ 1507 jump *label390 equal *tmp464 :mineOre:ore
  1508 setaddr :dropAll*retaddr *label392 (h:*label392)
  1509 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1510 label *label392
 
  1527 label *label397
  1528 label *label398
  1529 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp473 @second :mineOre:stop
-    * jump *label399 equal *tmp473 false
+ 1530 jump *label399 lessThanEq @second :mineOre:stop
  1531 jump *label396 always
  1532 jump *label400 always
  1533 label *label399
  1534 label *label400
-    * op equal *tmp475 .noTarget false
-    * jump *label401 equal *tmp475 false
+ 1535 jump *label401 notEqual .noTarget false
  1536 sensor *tmp478 .core @copper
-    * op lessThan *tmp479 *tmp478 copper
-    * jump *label404 equal *tmp479 false
+ 1537 jump *label404 greaterThanEq *tmp478 copper
  1538 set *tmp477 false
  1539 jump *label403 always
  1540 jump *label405 always
  1541 label *label404
  1542 label *label405
  1543 sensor *tmp481 .core @lead
-    * op lessThan *tmp482 *tmp481 lead
-    * jump *label406 equal *tmp482 false
+ 1544 jump *label406 greaterThanEq *tmp481 lead
  1545 set *tmp477 false
  1546 jump *label403 always
  1547 jump *label407 always
  1548 label *label406
  1549 label *label407
  1550 sensor *tmp484 .core @graphite
-    * op lessThan *tmp485 *tmp484 graphite
-    * jump *label408 equal *tmp485 false
+ 1551 jump *label408 greaterThanEq *tmp484 graphite
  1552 set *tmp477 false
  1553 jump *label403 always
  1554 jump *label409 always
  1555 label *label408
  1556 label *label409
  1557 sensor *tmp487 .core @silicon
-    * op lessThan *tmp488 *tmp487 silicon
-    * jump *label410 equal *tmp488 false
+ 1558 jump *label410 greaterThanEq *tmp487 silicon
  1559 set *tmp477 false
  1560 jump *label403 always
  1561 jump *label411 always
  1562 label *label410
  1563 label *label411
  1564 sensor *tmp490 .core @titanium
-    * op lessThan *tmp491 *tmp490 titanium
-    * jump *label412 equal *tmp491 false
+ 1565 jump *label412 greaterThanEq *tmp490 titanium
  1566 set *tmp477 false
  1567 jump *label403 always
  1568 jump *label413 always
  1569 label *label412
  1570 label *label413
  1571 sensor *tmp493 .core @metaglass
-    * op lessThan *tmp494 *tmp493 metaglass
-    * jump *label414 equal *tmp494 false
+ 1572 jump *label414 greaterThanEq *tmp493 metaglass
  1573 set *tmp477 false
  1574 jump *label403 always
  1575 jump *label415 always
  1576 label *label414
  1577 label *label415
  1578 sensor *tmp496 .core @thorium
-    * op lessThan *tmp497 *tmp496 thorium
-    * jump *label416 equal *tmp497 false
+ 1579 jump *label416 greaterThanEq *tmp496 thorium
  1580 set *tmp477 false
  1581 jump *label403 always
  1582 jump *label417 always
 
  1596 label *label402
  1597 label *label395
  1598 sensor *tmp500 @unit @totalItems
-    * op lessThan *tmp501 *tmp500 :mineOre:amount
-    * jump *label394 notEqual *tmp501 false
+ 1599 jump *label394 lessThan *tmp500 :mineOre:amount
  1600 label *label396
  1601 ucontrol unbind
  1602 set :depositItems:block :mineOre:block
 
  1626 end
  1627 label *label22
  1628 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
-    * op equal *tmp506 *tmp504 false
-    * jump *label425 equal *tmp506 false
+ 1629 jump *label425 notEqual *tmp504 false
  1630 set :error:error "Cannot locate ore"
  1631 setaddr :error*retaddr *label427 (h:*label427)
  1632 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
 
  1644 label *label429
  1645 label *label430
  1646 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508
-    * op equal *tmp509 *tmp508 false
-    * jump *label432 equal *tmp509 false
+ 1647 jump *label432 notEqual *tmp508 false
  1648 op sub *tmp510 :moveTo:radius 0.5
  1649 ucontrol approach :moveTo:x :moveTo:y *tmp510
  1650 label *label431

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-49 instructions):
 
    83 setaddr :error*retaddr *label64 (h:*label64)
    84 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    85 label *label64
-    * jump *label63 always
    86 label *label62
    87 label *label63
    88 write @pneumatic-drill processor2 ".nextBlock"
 
   205 sensor *tmp153 AJTJK-battery1 @totalPower
   206 jump *label94 greaterThanEq *tmp153 300
   207 jump *label92 always
-    * jump *label95 always
   208 label *label94
   209 label *label95
   210 label *label91
 
   338 setaddr :error*retaddr *label126 (h:*label126)
   339 call *label15 *invalid :error*retval (m:*label126) (h:*label126)
   340 label *label126
-    * jump *label125 always
   341 label *label124
   342 label *label125
   343 write @laser-drill processor5 ":buildBlockAt:block"
 
   408 set .thoriumContainer :buildRemoteBlock*retval
   409 jump *label136 notEqual .thoriumContainer null
   410 set .thoriumContainer .thoriumDrill
-    * jump *label137 always
   411 label *label136
   412 label *label137
   413 write .thoriumDrill processor2 ".thoriumDrill"
 
   553 call *label27 *invalid :supplyBlockFromCore*retval (m:*label177) (h:*label177)
   554 label *label177
   555 label *label175
-    * jump *label173 always
   556 label *label172
   557 label *label173
-    * jump *label171 always
   558 label *label170
   559 label *label171
   560 set :fetchBlock:block .thoriumContainer
 
   567 set :setPolyTarget.2:target 4
   568 write :setPolyTarget.2:target .controller ".polyTarget"
   569 label *label181
-    * jump *label180 always
   570 label *label179
   571 label *label180
   572 label *label168
 
   601 call *label26 *invalid :supplyBlock*retval (m:*label195) (h:*label195)
   602 label *label195
   603 set :supplyBase0:supplied true
-    * jump *label193 always
   604 label *label192
   605 label *label193
-    * jump *label191 always
   606 label *label190
   607 label *label191
   608 sensor *tmp256 .core @silicon
 
   633 call *label26 *invalid :supplyBlock*retval (m:*label205) (h:*label205)
   634 label *label205
   635 set :supplyBase0:supplied true
-    * jump *label203 always
   636 label *label202
   637 label *label203
   638 label *label199
-    * jump *label197 always
   639 label *label196
   640 label *label197
   641 sensor *tmp265 AJTJK-battery1 @totalPower
 
   652 call *label26 *invalid :supplyBlock*retval (m:*label211) (h:*label211)
   653 label *label211
   654 set :supplyBase0:supplied true
-    * jump *label209 always
   655 label *label208
   656 label *label209
-    * jump *label207 always
   657 label *label206
   658 label *label207
-    * jump *label189 always
   659 label *label188
   660 label *label189
   661 sensor *tmp271 .core @titanium
 
   763 label *label229
   764 label *label223
   765 label *label219
-    * jump *label217 always
   766 label *label216
   767 label *label217
   768 jump *label215 always
 
   818 label *label250
   819 set :buildRemoteBlock*retval :buildBlock*retval
   820 jump *label246 always
-    * jump *label248 always
   821 label *label247
   822 label *label248
   823 set :buildRemoteBlock*retval false
 
   959 sensor *tmp317 @unit @mining
   960 jump *label272 equal *tmp317 false
   961 ucontrol stop
-    * jump *label273 always
   962 label *label272
   963 label *label273
   964 ubind :lineUpUnits:unit
 
  1020 op land *tmp328 *tmp326 *tmp327
  1021 jump *label286 equal *tmp328 false
  1022 ucontrol itemDrop @air 1000
-    * jump *label287 always
  1023 label *label286
  1024 label *label287
  1025 label *label284
 
  1054 setaddr :mineOre*retaddr *label293 (h:*label293)
  1055 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
  1056 label *label293
-    * jump *label292 always
  1057 label *label291
  1058 label *label292
  1059 label *label289
 
  1089 op land *tmp344 *tmp342 *tmp343
  1090 jump *label302 equal *tmp344 false
  1091 ucontrol itemDrop @air 1000
-    * jump *label303 always
  1092 label *label302
  1093 label *label303
  1094 label *label300
 
  1216 jump *label321 greaterThanEq *tmp390 copper
  1217 set *tmp389 false
  1218 jump *label320 always
-    * jump *label322 always
  1219 label *label321
  1220 label *label322
  1221 sensor *tmp393 .core @lead
  1222 jump *label323 greaterThanEq *tmp393 lead
  1223 set *tmp389 false
  1224 jump *label320 always
-    * jump *label324 always
  1225 label *label323
  1226 label *label324
  1227 sensor *tmp396 .core @graphite
  1228 jump *label325 greaterThanEq *tmp396 graphite
  1229 set *tmp389 false
  1230 jump *label320 always
-    * jump *label326 always
  1231 label *label325
  1232 label *label326
  1233 sensor *tmp399 .core @silicon
  1234 jump *label327 greaterThanEq *tmp399 silicon
  1235 set *tmp389 false
  1236 jump *label320 always
-    * jump *label328 always
  1237 label *label327
  1238 label *label328
  1239 sensor *tmp402 .core @titanium
  1240 jump *label329 greaterThanEq *tmp402 titanium
  1241 set *tmp389 false
  1242 jump *label320 always
-    * jump *label330 always
  1243 label *label329
  1244 label *label330
  1245 sensor *tmp405 .core @metaglass
  1246 jump *label331 greaterThanEq *tmp405 metaglass
  1247 set *tmp389 false
  1248 jump *label320 always
-    * jump *label332 always
  1249 label *label331
  1250 label *label332
  1251 sensor *tmp408 .core @thorium
  1252 jump *label333 greaterThanEq *tmp408 thorium
  1253 set *tmp389 false
  1254 jump *label320 always
-    * jump *label334 always
  1255 label *label333
  1256 label *label334
  1257 set *tmp389 true
 
  1277 jump *label343 greaterThanEq *tmp415 copper
  1278 set *tmp414 false
  1279 jump *label342 always
-    * jump *label344 always
  1280 label *label343
  1281 label *label344
  1282 sensor *tmp418 .core @lead
  1283 jump *label345 greaterThanEq *tmp418 lead
  1284 set *tmp414 false
  1285 jump *label342 always
-    * jump *label346 always
  1286 label *label345
  1287 label *label346
  1288 sensor *tmp421 .core @graphite
  1289 jump *label347 greaterThanEq *tmp421 graphite
  1290 set *tmp414 false
  1291 jump *label342 always
-    * jump *label348 always
  1292 label *label347
  1293 label *label348
  1294 sensor *tmp424 .core @silicon
  1295 jump *label349 greaterThanEq *tmp424 silicon
  1296 set *tmp414 false
  1297 jump *label342 always
-    * jump *label350 always
  1298 label *label349
  1299 label *label350
  1300 sensor *tmp427 .core @titanium
  1301 jump *label351 greaterThanEq *tmp427 titanium
  1302 set *tmp414 false
  1303 jump *label342 always
-    * jump *label352 always
  1304 label *label351
  1305 label *label352
  1306 sensor *tmp430 .core @metaglass
  1307 jump *label353 greaterThanEq *tmp430 metaglass
  1308 set *tmp414 false
  1309 jump *label342 always
-    * jump *label354 always
  1310 label *label353
  1311 label *label354
  1312 sensor *tmp433 .core @thorium
  1313 jump *label355 greaterThanEq *tmp433 thorium
  1314 set *tmp414 false
  1315 jump *label342 always
-    * jump *label356 always
  1316 label *label355
  1317 label *label356
  1318 set *tmp414 true
 
  1326 label *label340
  1327 jump *label339 always
  1328 label *label341
-    * jump *label337 always
  1329 label *label336
  1330 label *label337
  1331 label *label306
 
  1389 sensor *tmp446 @unit @firstItem
  1390 jump *label368 equal *tmp446 null
  1391 ucontrol itemDrop @air 1000
-    * jump *label369 always
  1392 label *label368
  1393 label *label369
  1394 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
  1472 setaddr :dropAll*retaddr *label392 (h:*label392)
  1473 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1474 label *label392
-    * jump *label391 always
  1475 label *label390
  1476 label *label391
  1477 set :status3:text "Mining..."
 
  1486 op land *tmp471 *tmp469 *tmp470
  1487 jump *label397 equal *tmp471 false
  1488 jump *label396 always
-    * jump *label398 always
  1489 label *label397
  1490 label *label398
  1491 ucontrol mine :mineOre:x :mineOre:y
  1492 jump *label399 lessThanEq @second :mineOre:stop
  1493 jump *label396 always
-    * jump *label400 always
  1494 label *label399
  1495 label *label400
  1496 jump *label401 notEqual .noTarget false
 
  1498 jump *label404 greaterThanEq *tmp478 copper
  1499 set *tmp477 false
  1500 jump *label403 always
-    * jump *label405 always
  1501 label *label404
  1502 label *label405
  1503 sensor *tmp481 .core @lead
  1504 jump *label406 greaterThanEq *tmp481 lead
  1505 set *tmp477 false
  1506 jump *label403 always
-    * jump *label407 always
  1507 label *label406
  1508 label *label407
  1509 sensor *tmp484 .core @graphite
  1510 jump *label408 greaterThanEq *tmp484 graphite
  1511 set *tmp477 false
  1512 jump *label403 always
-    * jump *label409 always
  1513 label *label408
  1514 label *label409
  1515 sensor *tmp487 .core @silicon
  1516 jump *label410 greaterThanEq *tmp487 silicon
  1517 set *tmp477 false
  1518 jump *label403 always
-    * jump *label411 always
  1519 label *label410
  1520 label *label411
  1521 sensor *tmp490 .core @titanium
  1522 jump *label412 greaterThanEq *tmp490 titanium
  1523 set *tmp477 false
  1524 jump *label403 always
-    * jump *label413 always
  1525 label *label412
  1526 label *label413
  1527 sensor *tmp493 .core @metaglass
  1528 jump *label414 greaterThanEq *tmp493 metaglass
  1529 set *tmp477 false
  1530 jump *label403 always
-    * jump *label415 always
  1531 label *label414
  1532 label *label415
  1533 sensor *tmp496 .core @thorium
  1534 jump *label416 greaterThanEq *tmp496 thorium
  1535 set *tmp477 false
  1536 jump *label403 always
-    * jump *label417 always
  1537 label *label416
  1538 label *label417
  1539 set *tmp477 true
 
  1542 label *label403
  1543 jump *label418 equal *tmp477 false
  1544 jump *label396 always
-    * jump *label419 always
  1545 label *label418
  1546 label *label419
-    * jump *label402 always
  1547 label *label401
  1548 label *label402
  1549 label *label395
 
  1583 setaddr :error*retaddr *label427 (h:*label427)
  1584 call *label15 *invalid :error*retval (m:*label427) (h:*label427)
  1585 label *label427
-    * jump *label426 always
  1586 label *label425
  1587 label *label426
  1588 label *label424

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    14 read *tmp112 processor5 "*signature"
    15 jump *label49 notEqual *tmp112 "319badb7a8e178a4:v1"
    16 set .titaniumDrill null
-    * set .thoriumDrill null
    17 set .thoriumBattery null
    18 set .thoriumContainer null
    19 set .thoriumGenerator null
 
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
    58 set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   59 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    60 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    61 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
    62 label *label60
 
    95 jump *label65 equal *tmp141 false
    96 read *tmp124 processor5 ":buildFirstTitaniumDrillAt*retval"
    97 jump *label59 always
-    * set *tmp124 null
    98 label *label59
    99 set .titaniumDrill *tmp124
-    * write .titaniumDrill processor2 ".titaniumDrill"
+  100 write *tmp124 processor2 ".titaniumDrill"
   101 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
   102 setaddr :buildBlockFromCfg.1*retaddr *label66 (h:*label66)
   103 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label66) (h:*label66)
 
   117 call *label39 *invalid :buildBlockFromCfg*retval (m:*label69) (h:*label69)
   118 label *label69
   119 set .controller :buildBlockFromCfg*retval
-    * write processor1 .controller ".timer"
-    * write processor2 .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
+  120 write processor1 :buildBlockFromCfg*retval ".timer"
+  121 write processor2 :buildBlockFromCfg*retval ".display"
+  122 write .core :buildBlockFromCfg*retval ".core"
+  123 write bank1 :buildBlockFromCfg*retval ".bank"
   124 set :block "AJEMJJ-graphite-press0"
   125 setaddr *tmp147 *label73
   126 jump *label70 always
 
   161 setaddr *tmp147 *label82
   162 label *label70
   163 read *tmp148 @this :block
-    * write *tmp148 .controller :block
+  164 write *tmp148 :buildBlockFromCfg*retval :block
   165 label *label71
   166 multijump *tmp147 0 0 (m:marker0)
   167 multilabel *label82 (m:marker0)
 
   183 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   184 label *label86
   185 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
+  186 write 1 .controller ".flareTarget"
   187 label *label87
   188 set :setMonoTarget:target 5
-    * write :setMonoTarget:target .controller ".monoTarget"
+  189 write 5 .controller ".monoTarget"
   190 label *label88
   191 write 85 .controller ".pressTarget"
   192 write 150 .controller ".smelterTarget"
   193 write 30 .controller ".kilnTarget"
   194 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  195 set .siliconSurplus 20
   196 setaddr :buildUnits*retaddr *label89 (h:*label89)
   197 call *label42 *invalid :buildUnits*retval (m:*label89) (h:*label89)
   198 label *label89
 
   255 set .siliconMonoSurplus 20
   256 set .metaglassSurplus 100
   257 set :setMonoTarget.1:target 4
-    * write :setMonoTarget.1:target .controller ".monoTarget"
+  258 write 4 .controller ".monoTarget"
   259 label *label106
   260 set :setPolyTarget:target 3
-    * write :setPolyTarget:target .controller ".polyTarget"
+  261 write 3 .controller ".polyTarget"
   262 label *label107
   263 setaddr :buildUnits*retaddr *label108 (h:*label108)
   264 call *label42 *invalid :buildUnits*retval (m:*label108) (h:*label108)
 
   273 jump *label109 always
   274 label *label111
   275 set :setFlareTarget.1:target 2
-    * write :setFlareTarget.1:target .controller ".flareTarget"
+  276 write 2 .controller ".flareTarget"
   277 label *label113
   278 label *label114
   279 read *tmp79 .controller ".flares"
 
   378 setaddr :buildRemoteBlock*retaddr *label131 (h:*label131)
   379 call *label38 *invalid :buildRemoteBlock*retval (m:*label131) (h:*label131)
   380 label *label131
-    * set :buildRemoteBlock:cfg "AFHJT-power-node10"
   381 read :buildRemoteBlock:x processor3 ".node2X"
   382 read :buildRemoteBlock:y processor3 ".node2Y"
   383 setaddr :buildRemoteBlock*retaddr *label132 (h:*label132)
 
   403 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   404 label *label135
   405 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label136 notEqual .thoriumContainer null
+  406 jump *label136 notEqual :buildRemoteBlock*retval null
   407 set .thoriumContainer .thoriumDrill
   408 label *label136
   409 label *label137
 
   428 jump *label139 always
   429 label *label141
   430 set :setMonoTarget.2:target 0
-    * write :setMonoTarget.2:target .controller ".monoTarget"
+  431 write 0 .controller ".monoTarget"
   432 label *label143
   433 write 3209 .controller ".powerTarget"
   434 set .siliconMonoSurplus 120
 
   439 label *label144
   440 set .metaglassSurplus 10
   441 set :setPolyTarget.1:target 0
-    * write :setPolyTarget.1:target .controller ".polyTarget"
+  442 write 0 .controller ".polyTarget"
   443 label *label145
   444 set :setFlareTarget.2:target 0
-    * write :setFlareTarget.2:target .controller ".flareTarget"
+  445 write 0 .controller ".flareTarget"
   446 label *label146
   447 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
+  448 write 1 .controller ".megaTarget"
   449 label *label147
   450 setaddr :buildUnits*retaddr *label148 (h:*label148)
   451 call *label42 *invalid :buildUnits*retval (m:*label148) (h:*label148)
 
   562 sensor *tmp243 .core @thorium
   563 jump *label179 lessThanEq *tmp243 400
   564 set :setPolyTarget.2:target 4
-    * write :setPolyTarget.2:target .controller ".polyTarget"
+  565 write 4 .controller ".polyTarget"
   566 label *label181
   567 label *label179
   568 label *label180
 
   666 label *label213
   667 set :supplyBase0:titaniumTrigger *tmp273
   668 sensor *tmp277 .titaniumDrill @titanium
-    * jump *label214 greaterThanEq *tmp277 :supplyBase0:titaniumTrigger
+  669 jump *label214 greaterThanEq *tmp277 *tmp273
   670 jump *label216 notEqual :supplyBase0:supplied false
   671 sensor *tmp282 AJTJK-battery1 @totalPower
   672 op mul *tmp283 A©JNJP-unloader6 .powerTarget
 
   696 set *tmp292 @sand
   697 label *label226
   698 set :supplyBase0:ore *tmp292
-    * set :mineOre.1:ore :supplyBase0:ore
+  699 set :mineOre.1:ore *tmp292
   700 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   701 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   702 label *label227
 
   751 set *tmp305 @sand
   752 label *label242
   753 set :supplyBase0:ore.1 *tmp305
-    * set :mineOre.1:ore :supplyBase0:ore.1
+  754 set :mineOre.1:ore *tmp305
   755 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   756 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   757 label *label243
 
   797 set :buildRemoteBlock:th :unpackCfg:th
   798 set :buildRemoteBlock:rotation :unpackCfg:rotation
   799 set :buildRemoteBlock:index :unpackCfg:ind
-    * set :buildBlock:block :buildRemoteBlock:type
+  800 set :buildBlock:block :unpackCfg:type
   801 set :buildBlock:x :buildRemoteBlock:x
   802 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+  803 set :buildBlock:copper :unpackCfg:cu
+  804 set :buildBlock:lead :unpackCfg:pb
+  805 set :buildBlock:graphite :unpackCfg:gr
+  806 set :buildBlock:silicon :unpackCfg:si
+  807 set :buildBlock:titanium :unpackCfg:ti
+  808 set :buildBlock:metaglass :unpackCfg:mg
+  809 set :buildBlock:thorium :unpackCfg:th
+  810 set :buildBlock:rotation :unpackCfg:rotation
   811 set :buildBlock:config null
-    * set :buildBlock:index :buildRemoteBlock:index
+  812 set :buildBlock:index :unpackCfg:ind
   813 setaddr :buildBlock*retaddr *label250 (h:*label250)
   814 call *label37 *invalid :buildBlock*retval (m:*label250) (h:*label250)
   815 label *label250
 
   819 label *label248
   820 set :buildRemoteBlock*retval false
   821 jump *label246 always
-    * set :buildRemoteBlock*retval null
   822 label *label246
   823 return :buildRemoteBlock*retaddr
   824 end
 
   839 set :buildBlockFromCfg:th :unpackCfg:th
   840 set :buildBlockFromCfg:rotation :unpackCfg:rotation
   841 set :buildBlockFromCfg:index :unpackCfg:ind
-    * op add *tmp309 .coreX :buildBlockFromCfg:x
-    * op add *tmp310 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+  842 op add *tmp309 .coreX :unpackCfg:x
+  843 op add *tmp310 .coreY :unpackCfg:y
+  844 set :buildBlock:block :unpackCfg:type
   845 set :buildBlock:x *tmp309
   846 set :buildBlock:y *tmp310
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+  847 set :buildBlock:copper :unpackCfg:cu
+  848 set :buildBlock:lead :unpackCfg:pb
+  849 set :buildBlock:graphite :unpackCfg:gr
+  850 set :buildBlock:silicon :unpackCfg:si
+  851 set :buildBlock:titanium :unpackCfg:ti
+  852 set :buildBlock:metaglass :unpackCfg:mg
+  853 set :buildBlock:thorium :unpackCfg:th
+  854 set :buildBlock:rotation :unpackCfg:rotation
   855 set :buildBlock:config :buildBlockFromCfg:config
-    * set :buildBlock:index :buildBlockFromCfg:index
+  856 set :buildBlock:index :unpackCfg:ind
   857 setaddr :buildBlock*retaddr *label253 (h:*label253)
   858 call *label37 *invalid :buildBlock*retval (m:*label253) (h:*label253)
   859 label *label253
   860 set :buildBlockFromCfg:building :buildBlock*retval
-    * write :buildBlockFromCfg:building @this :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building processor2 :buildBlockFromCfg:cfg
-    * write :buildBlockFromCfg:building .controller :buildBlockFromCfg:cfg
-    * set :buildBlockFromCfg*retval :buildBlockFromCfg:building
+  861 write :buildBlock*retval @this :buildBlockFromCfg:cfg
+  862 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
+  863 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
+  864 set :buildBlockFromCfg*retval :buildBlock*retval
   865 jump *label251 always
-    * set :buildBlockFromCfg*retval null
   866 label *label251
   867 return :buildBlockFromCfg*retaddr
   868 end
 
   888 set :meetTarget.1:ti :unpackCfg:ti
   889 set :meetTarget.1:mg :unpackCfg:mg
   890 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+  891 set :meetTarget:block :unpackCfg:type
+  892 set :meetTarget:copper :unpackCfg:cu
+  893 set :meetTarget:lead :unpackCfg:pb
+  894 set :meetTarget:graphite :unpackCfg:gr
+  895 set :meetTarget:silicon :unpackCfg:si
+  896 set :meetTarget:titanium :unpackCfg:ti
+  897 set :meetTarget:metaglass :unpackCfg:mg
+  898 set :meetTarget:thorium :unpackCfg:th
   899 set :meetTarget:forBuild false
   900 set :meetTarget:isNoTarget false
   901 setaddr :meetTarget*retaddr *label258 (h:*label258)
 
  1103 end
  1104 label *label29
  1105 set :unpackCfg:index 1
-    * set *tmp350 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1106 set *tmp350 1
+ 1107 op add :unpackCfg:index 1 1
  1108 read *tmp351 :unpackCfg:cfg *tmp350
  1109 op sub *tmp352 *tmp351 74
  1110 lookup block :unpackCfg:type *tmp352
-    * set *tmp354 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1111 set *tmp354 2
+ 1112 op add :unpackCfg:index 2 1
  1113 read *tmp355 :unpackCfg:cfg *tmp354
  1114 op sub *tmp356 *tmp355 74
  1115 op div :unpackCfg:x *tmp356 2
-    * set *tmp358 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1116 set *tmp358 3
+ 1117 op add :unpackCfg:index 3 1
  1118 read *tmp359 :unpackCfg:cfg *tmp358
  1119 op sub *tmp360 *tmp359 74
  1120 op div :unpackCfg:y *tmp360 2
-    * set *tmp362 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1121 set *tmp362 4
+ 1122 op add :unpackCfg:index 4 1
  1123 read *tmp363 :unpackCfg:cfg *tmp362
  1124 op sub :unpackCfg:rotation *tmp363 74
-    * set *tmp365 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+ 1125 set *tmp365 5
+ 1126 op add :unpackCfg:index 5 1
  1127 read *tmp366 :unpackCfg:cfg *tmp365
  1128 op sub :unpackCfg:ind *tmp366 74
  1129 sensor :unpackCfg:cu :unpackCfg:type @copper
 
  1195 op add *tmp381 :meetTarget:metaglass .metaglassSurplus
  1196 write *tmp381 .controller ".kilnTarget"
  1197 op add *tmp382 :meetTarget:lead .leadSurplus
-    * write *tmp382 .controller ".leadReserve"
+ 1198 write lead .controller ".leadReserve"
  1199 op sign *tmp383 :meetTarget:silicon
  1200 op mul *tmp384 *tmp383 20
  1201 op add *tmp385 :meetTarget:silicon *tmp384
 
  1205 op add *tmp388 :meetTarget:graphite *tmp387
  1206 write *tmp388 .controller ".graphiteReserve"
  1207 write lead processor7 ".leadTarget"
-    * write copper processor7 ".copperTarget"
+ 1208 write :meetTarget:copper processor7 ".copperTarget"
  1209 label *label317
  1210 sensor *tmp390 .core @copper
  1211 jump *label321 greaterThanEq *tmp390 copper
 
  1251 label *label334
  1252 set *tmp389 true
  1253 jump *label320 always
-    * set *tmp389 null
  1254 label *label320
  1255 jump *label319 notEqual *tmp389 false
  1256 setaddr :supplyBase*retaddr *label335 (h:*label335)
 
  1311 label *label356
  1312 set *tmp414 true
  1313 jump *label342 always
-    * set *tmp414 null
  1314 label *label342
  1315 jump *label341 notEqual *tmp414 false
  1316 setaddr :supplyBase*retaddr *label357 (h:*label357)
 
  1356 write 2 .controller "@counter"
  1357 set :buildBlock*retval :buildBlock:built
  1358 jump *label358 always
-    * set :buildBlock*retval null
  1359 label *label358
  1360 return :buildBlock*retaddr
  1361 end
 
  1454 label *label388
  1455 set :mineOre:x :locateOre:x
  1456 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+ 1457 set :moveToEmpty:x :locateOre:x
+ 1458 set :moveToEmpty:y :locateOre:y
  1459 setaddr :moveToEmpty*retaddr *label389 (h:*label389)
  1460 call *label18 *invalid :moveToEmpty*retval (m:*label389) (h:*label389)
  1461 label *label389
 
  1530 label *label417
  1531 set *tmp477 true
  1532 jump *label403 always
-    * set *tmp477 null
  1533 label *label403
  1534 jump *label418 equal *tmp477 false
  1535 jump *label396 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-53 instructions):
 
    55 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    56 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
    57 label *label58
-    * set :buildFirstTitaniumDrill:cfg "AJJJ~-pneumatic-drill52"
    58 set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"
    59 setaddr :meetTarget.1*retaddr *label60 (h:*label60)
    60 call *label41 *invalid :meetTarget.1*retval (m:*label60) (h:*label60)
 
   181 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   182 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   183 label *label86
-    * set :setFlareTarget:target 1
   184 write 1 .controller ".flareTarget"
   185 label *label87
-    * set :setMonoTarget:target 5
   186 write 5 .controller ".monoTarget"
   187 label *label88
   188 write 85 .controller ".pressTarget"
 
   251 set .siliconSurplus 1000
   252 set .siliconMonoSurplus 20
   253 set .metaglassSurplus 100
-    * set :setMonoTarget.1:target 4
   254 write 4 .controller ".monoTarget"
   255 label *label106
-    * set :setPolyTarget:target 3
   256 write 3 .controller ".polyTarget"
   257 label *label107
   258 setaddr :buildUnits*retaddr *label108 (h:*label108)
 
   267 label *label110
   268 jump *label109 always
   269 label *label111
-    * set :setFlareTarget.1:target 2
   270 write 2 .controller ".flareTarget"
   271 label *label113
   272 label *label114
 
   353 setaddr :buildRemoteBlock*retaddr *label128 (h:*label128)
   354 call *label38 *invalid :buildRemoteBlock*retval (m:*label128) (h:*label128)
   355 label *label128
-    * set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"
   356 read :buildRemoteBlock:x processor3 ".water2X"
   357 read :buildRemoteBlock:y processor3 ".water2Y"
   358 setaddr :buildRemoteBlock*retaddr *label129 (h:*label129)
 
   420 label *label140
   421 jump *label139 always
   422 label *label141
-    * set :setMonoTarget.2:target 0
   423 write 0 .controller ".monoTarget"
   424 label *label143
   425 write 3209 .controller ".powerTarget"
 
   430 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label144) (h:*label144)
   431 label *label144
   432 set .metaglassSurplus 10
-    * set :setPolyTarget.1:target 0
   433 write 0 .controller ".polyTarget"
   434 label *label145
-    * set :setFlareTarget.2:target 0
   435 write 0 .controller ".flareTarget"
   436 label *label146
-    * set :setMegaTarget:target 1
   437 write 1 .controller ".megaTarget"
   438 label *label147
   439 setaddr :buildUnits*retaddr *label148 (h:*label148)
 
   550 label *label178
   551 sensor *tmp243 .core @thorium
   552 jump *label179 lessThanEq *tmp243 400
-    * set :setPolyTarget.2:target 4
   553 write 4 .controller ".polyTarget"
   554 label *label181
   555 label *label179
 
   652 label *label212
   653 set *tmp273 100
   654 label *label213
-    * set :supplyBase0:titaniumTrigger *tmp273
   655 sensor *tmp277 .titaniumDrill @titanium
   656 jump *label214 greaterThanEq *tmp277 *tmp273
   657 jump *label216 notEqual :supplyBase0:supplied false
 
   682 label *label225
   683 set *tmp292 @sand
   684 label *label226
-    * set :supplyBase0:ore *tmp292
   685 set :mineOre.1:ore *tmp292
   686 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   687 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
 
   736 label *label241
   737 set *tmp305 @sand
   738 label *label242
-    * set :supplyBase0:ore.1 *tmp305
   739 set :mineOre.1:ore *tmp305
   740 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   741 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
 
   772 setaddr :unpackCfg*retaddr *label249 (h:*label249)
   773 call *label29 *invalid :unpackCfg*retval (m:*label249) (h:*label249)
   774 label *label249
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildRemoteBlock:index :unpackCfg:ind
   775 set :buildBlock:block :unpackCfg:type
   776 set :buildBlock:x :buildRemoteBlock:x
   777 set :buildBlock:y :buildRemoteBlock:y
 
   802 setaddr :unpackCfg*retaddr *label252 (h:*label252)
   803 call *label29 *invalid :unpackCfg*retval (m:*label252) (h:*label252)
   804 label *label252
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * set :buildBlockFromCfg:index :unpackCfg:ind
   805 op add *tmp309 .coreX :unpackCfg:x
   806 op add *tmp310 .coreY :unpackCfg:y
   807 set :buildBlock:block :unpackCfg:type
 
   820 setaddr :buildBlock*retaddr *label253 (h:*label253)
   821 call *label37 *invalid :buildBlock*retval (m:*label253) (h:*label253)
   822 label *label253
-    * set :buildBlockFromCfg:building :buildBlock*retval
   823 write :buildBlock*retval @this :buildBlockFromCfg:cfg
   824 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   825 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
 
   842 setaddr :unpackCfg*retaddr *label257 (h:*label257)
   843 call *label29 *invalid :unpackCfg*retval (m:*label257) (h:*label257)
   844 label *label257
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
   845 set :meetTarget:block :unpackCfg:type
   846 set :meetTarget:copper :unpackCfg:cu
   847 set :meetTarget:lead :unpackCfg:pb
 
  1056 return :supplyBlockFromCore*retaddr
  1057 end
  1058 label *label29
-    * set :unpackCfg:index 1
  1059 set *tmp350 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp351 :unpackCfg:cfg *tmp350
+ 1060 read *tmp351 :unpackCfg:cfg 1
  1061 op sub *tmp352 *tmp351 74
  1062 lookup block :unpackCfg:type *tmp352
  1063 set *tmp354 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp355 :unpackCfg:cfg *tmp354
+ 1064 read *tmp355 :unpackCfg:cfg 2
  1065 op sub *tmp356 *tmp355 74
  1066 op div :unpackCfg:x *tmp356 2
  1067 set *tmp358 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp359 :unpackCfg:cfg *tmp358
+ 1068 read *tmp359 :unpackCfg:cfg 3
  1069 op sub *tmp360 *tmp359 74
  1070 op div :unpackCfg:y *tmp360 2
  1071 set *tmp362 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp363 :unpackCfg:cfg *tmp362
+ 1072 read *tmp363 :unpackCfg:cfg 4
  1073 op sub :unpackCfg:rotation *tmp363 74
  1074 set *tmp365 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp366 :unpackCfg:cfg *tmp365
+ 1075 read *tmp366 :unpackCfg:cfg 5
  1076 op sub :unpackCfg:ind *tmp366 74
  1077 sensor :unpackCfg:cu :unpackCfg:type @copper
  1078 sensor :unpackCfg:pb :unpackCfg:type @lead
 
  1142 write *tmp380 .controller ".smelterTarget"
  1143 op add *tmp381 :meetTarget:metaglass .metaglassSurplus
  1144 write *tmp381 .controller ".kilnTarget"
-    * op add *tmp382 :meetTarget:lead .leadSurplus
  1145 write lead .controller ".leadReserve"
  1146 op sign *tmp383 :meetTarget:silicon
  1147 op mul *tmp384 *tmp383 20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-5 instructions):
 
  1056 return :supplyBlockFromCore*retaddr
  1057 end
  1058 label *label29
-    * set *tmp350 1
  1059 read *tmp351 :unpackCfg:cfg 1
  1060 op sub *tmp352 *tmp351 74
  1061 lookup block :unpackCfg:type *tmp352
-    * set *tmp354 2
  1062 read *tmp355 :unpackCfg:cfg 2
  1063 op sub *tmp356 *tmp355 74
  1064 op div :unpackCfg:x *tmp356 2
-    * set *tmp358 3
  1065 read *tmp359 :unpackCfg:cfg 3
  1066 op sub *tmp360 *tmp359 74
  1067 op div :unpackCfg:y *tmp360 2
-    * set *tmp362 4
  1068 read *tmp363 :unpackCfg:cfg 4
  1069 op sub :unpackCfg:rotation *tmp363 74
-    * set *tmp365 5
  1070 read *tmp366 :unpackCfg:cfg 5
  1071 op sub :unpackCfg:ind *tmp366 74
  1072 sensor :unpackCfg:cu :unpackCfg:type @copper

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
  1526 setaddr :status3*retaddr *label429 (h:*label429)
  1527 call *label13 *invalid :status3*retval (m:*label429) (h:*label429)
  1528 label *label429
+ 1529 op sub *tmp510 :moveTo:radius 0.5
  1530 label *label430
  1531 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508
  1532 jump *label432 notEqual *tmp508 false
-    * op sub *tmp510 :moveTo:radius 0.5
  1533 ucontrol approach :moveTo:x :moveTo:y *tmp510
  1534 label *label431
  1535 jump *label430 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-7 instructions):
 
   396 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   397 label *label135
   398 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label136 notEqual :buildRemoteBlock*retval null
-    * set .thoriumContainer .thoriumDrill
-    * label *label136
-    * label *label137
+  399 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
   400 write .thoriumDrill processor2 ".thoriumDrill"
   401 write .thoriumContainer processor2 ".thoriumContainer"
   402 write .thoriumContainer processor6 ":setThoriumContainer:container"
 
   673 label *label224
   674 sensor :supplyBase0:coal .core @coal
   675 sensor :supplyBase0:sand .core @sand
-    * jump *label225 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp292 @coal
-    * jump *label226 always
-    * label *label225
-    * set *tmp292 @sand
-    * label *label226
+  676 select *tmp292 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   677 set :mineOre.1:ore *tmp292
   678 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   679 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
 
   722 label *label240
   723 sensor :supplyBase0:coal.1 .core @coal
   724 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label241 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp305 @coal
-    * jump *label242 always
-    * label *label241
-    * set *tmp305 @sand
-    * label *label242
+  725 select *tmp305 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   726 set :mineOre.1:ore *tmp305
   727 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   728 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 2:
 
   640 label *label207
   641 label *label188
   642 label *label189
+  643 set *tmp273 100
   644 sensor *tmp271 .core @titanium
-    * jump *label212 greaterThanEq *tmp271 titanium
+  645 jump *label213 greaterThanEq *tmp271 titanium
   646 sensor *tmp274 .core @titanium
   647 op sub *tmp275 titanium *tmp274
   648 op min *tmp273 7 *tmp275
   649 jump *label213 always
-    * label *label212
-    * set *tmp273 100
   650 label *label213
   651 sensor *tmp277 .titaniumDrill @titanium
   652 jump *label214 greaterThanEq *tmp277 *tmp273

Modifications by Unroll iteration loop at CoreBuilder.mnd:351:5 (-2 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
-    * setaddr *tmp147 *label73
-    * jump *label70 always
-    * multilabel *label73 (m:marker0)
-    * set :block "AJTJK-battery1"
-    * setaddr *tmp147 *label74
-    * jump *label70 always
-    * multilabel *label74 (m:marker0)
-    * set :block "ALTJL-battery2"
-    * setaddr *tmp147 *label75
-    * jump *label70 always
-    * multilabel *label75 (m:marker0)
-    * set :block "AJRJM-combustion-generator3"
-    * setaddr *tmp147 *label76
-    * jump *label70 always
-    * multilabel *label76 (m:marker0)
-    * set :block "ALMQJN-silicon-smelter4"
-    * setaddr *tmp147 *label77
-    * jump *label70 always
-    * multilabel *label77 (m:marker0)
-    * set :block "A{LNJO-inverted-sorter5"
-    * setaddr *tmp147 *label78
-    * jump *label70 always
-    * multilabel *label78 (m:marker0)
-    * set :block "A©JNJP-unloader6"
-    * setaddr *tmp147 *label79
-    * jump *label70 always
-    * multilabel *label79 (m:marker0)
-    * set :block "A{HNJQ-inverted-sorter7"
-    * setaddr *tmp147 *label80
-    * jump *label70 always
-    * multilabel *label80 (m:marker0)
-    * set :block "AJPJR-underflow-gate8"
-    * setaddr *tmp147 *label81
-    * jump *label70 always
-    * multilabel *label81 (m:marker0)
-    * set :block "AÕFFJS-micro-processor9"
-    * setaddr *tmp147 *label82
-    * label *label70
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
-    * label *label71
-    * multijump *tmp147 0 0 (m:marker0)
-    * multilabel *label82 (m:marker0)
-    * label *label72
+  123 set :block "AJEMJJ-graphite-press0"
+  124 label *label435
+  125 read *tmp148 @this :block
+  126 write *tmp148 :buildBlockFromCfg*retval :block
+  127 label *label436
+  128 set :block "AJTJK-battery1"
+  129 label *label439
+  130 read *tmp148 @this :block
+  131 write *tmp148 :buildBlockFromCfg*retval :block
+  132 label *label440
+  133 set :block "ALTJL-battery2"
+  134 label *label443
+  135 read *tmp148 @this :block
+  136 write *tmp148 :buildBlockFromCfg*retval :block
+  137 label *label444
+  138 set :block "AJRJM-combustion-generator3"
+  139 label *label447
+  140 read *tmp148 @this :block
+  141 write *tmp148 :buildBlockFromCfg*retval :block
+  142 label *label448
+  143 set :block "ALMQJN-silicon-smelter4"
+  144 label *label451
+  145 read *tmp148 @this :block
+  146 write *tmp148 :buildBlockFromCfg*retval :block
+  147 label *label452
+  148 set :block "A{LNJO-inverted-sorter5"
+  149 label *label455
+  150 read *tmp148 @this :block
+  151 write *tmp148 :buildBlockFromCfg*retval :block
+  152 label *label456
+  153 set :block "A©JNJP-unloader6"
+  154 label *label459
+  155 read *tmp148 @this :block
+  156 write *tmp148 :buildBlockFromCfg*retval :block
+  157 label *label460
+  158 set :block "A{HNJQ-inverted-sorter7"
+  159 label *label463
+  160 read *tmp148 @this :block
+  161 write *tmp148 :buildBlockFromCfg*retval :block
+  162 label *label464
+  163 set :block "AJPJR-underflow-gate8"
+  164 label *label467
+  165 read *tmp148 @this :block
+  166 write *tmp148 :buildBlockFromCfg*retval :block
+  167 label *label468
+  168 set :block "AÕFFJS-micro-processor9"
+  169 label *label471
+  170 read *tmp148 @this :block
+  171 write *tmp148 :buildBlockFromCfg*retval :block
+  172 label *label472
+  173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
   175 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   176 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   122 write bank1 :buildBlockFromCfg*retval ".bank"
   123 set :block "AJEMJJ-graphite-press0"
   124 label *label435
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  125 read *tmp148 @this "AJEMJJ-graphite-press0"
+  126 write *tmp148 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   127 label *label436
   128 set :block "AJTJK-battery1"
   129 label *label439
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  130 read *tmp148 @this "AJTJK-battery1"
+  131 write *tmp148 :buildBlockFromCfg*retval "AJTJK-battery1"
   132 label *label440
   133 set :block "ALTJL-battery2"
   134 label *label443
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  135 read *tmp148 @this "ALTJL-battery2"
+  136 write *tmp148 :buildBlockFromCfg*retval "ALTJL-battery2"
   137 label *label444
   138 set :block "AJRJM-combustion-generator3"
   139 label *label447
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  140 read *tmp148 @this "AJRJM-combustion-generator3"
+  141 write *tmp148 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   142 label *label448
   143 set :block "ALMQJN-silicon-smelter4"
   144 label *label451
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  145 read *tmp148 @this "ALMQJN-silicon-smelter4"
+  146 write *tmp148 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   147 label *label452
   148 set :block "A{LNJO-inverted-sorter5"
   149 label *label455
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  150 read *tmp148 @this "A{LNJO-inverted-sorter5"
+  151 write *tmp148 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   152 label *label456
   153 set :block "A©JNJP-unloader6"
   154 label *label459
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  155 read *tmp148 @this "A©JNJP-unloader6"
+  156 write *tmp148 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   157 label *label460
   158 set :block "A{HNJQ-inverted-sorter7"
   159 label *label463
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  160 read *tmp148 @this "A{HNJQ-inverted-sorter7"
+  161 write *tmp148 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   162 label *label464
   163 set :block "AJPJR-underflow-gate8"
   164 label *label467
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  165 read *tmp148 @this "AJPJR-underflow-gate8"
+  166 write *tmp148 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   167 label *label468
   168 set :block "AÕFFJS-micro-processor9"
   169 label *label471
-    * read *tmp148 @this :block
-    * write *tmp148 :buildBlockFromCfg*retval :block
+  170 read *tmp148 @this "AÕFFJS-micro-processor9"
+  171 write *tmp148 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
   172 label *label472
   173 label *label72
   174 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
 
   402 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   403 label *label135
   404 set .thoriumContainer :buildRemoteBlock*retval
-    * select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill .thoriumContainer
+  405 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   406 write .thoriumDrill processor2 ".thoriumDrill"
   407 write .thoriumContainer processor2 ".thoriumContainer"
   408 write .thoriumContainer processor6 ":setThoriumContainer:container"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
 
   120 write processor2 :buildBlockFromCfg*retval ".display"
   121 write .core :buildBlockFromCfg*retval ".core"
   122 write bank1 :buildBlockFromCfg*retval ".bank"
-    * set :block "AJEMJJ-graphite-press0"
   123 label *label435
   124 read *tmp148 @this "AJEMJJ-graphite-press0"
   125 write *tmp148 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   126 label *label436
-    * set :block "AJTJK-battery1"
   127 label *label439
   128 read *tmp148 @this "AJTJK-battery1"
   129 write *tmp148 :buildBlockFromCfg*retval "AJTJK-battery1"
   130 label *label440
-    * set :block "ALTJL-battery2"
   131 label *label443
   132 read *tmp148 @this "ALTJL-battery2"
   133 write *tmp148 :buildBlockFromCfg*retval "ALTJL-battery2"
   134 label *label444
-    * set :block "AJRJM-combustion-generator3"
   135 label *label447
   136 read *tmp148 @this "AJRJM-combustion-generator3"
   137 write *tmp148 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   138 label *label448
-    * set :block "ALMQJN-silicon-smelter4"
   139 label *label451
   140 read *tmp148 @this "ALMQJN-silicon-smelter4"
   141 write *tmp148 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   142 label *label452
-    * set :block "A{LNJO-inverted-sorter5"
   143 label *label455
   144 read *tmp148 @this "A{LNJO-inverted-sorter5"
   145 write *tmp148 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   146 label *label456
-    * set :block "A©JNJP-unloader6"
   147 label *label459
   148 read *tmp148 @this "A©JNJP-unloader6"
   149 write *tmp148 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   150 label *label460
-    * set :block "A{HNJQ-inverted-sorter7"
   151 label *label463
   152 read *tmp148 @this "A{HNJQ-inverted-sorter7"
   153 write *tmp148 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   154 label *label464
-    * set :block "AJPJR-underflow-gate8"
   155 label *label467
   156 read *tmp148 @this "AJPJR-underflow-gate8"
   157 write *tmp148 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   158 label *label468
-    * set :block "AÕFFJS-micro-processor9"
   159 label *label471
   160 read *tmp148 @this "AÕFFJS-micro-processor9"
   161 write *tmp148 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
 
   391 setaddr :buildRemoteBlock*retaddr *label135 (h:*label135)
   392 call *label38 *invalid :buildRemoteBlock*retval (m:*label135) (h:*label135)
   393 label *label135
-    * set .thoriumContainer :buildRemoteBlock*retval
   394 select .thoriumContainer equal :buildRemoteBlock*retval null .thoriumDrill :buildRemoteBlock*retval
   395 write .thoriumDrill processor2 ".thoriumDrill"
   396 write .thoriumContainer processor2 ".thoriumContainer"

Modifications by Unroll iteration loop at CoreBuilder.mnd:174:5 (-2 instructions):
 
  1062 end
  1063 label *label36
  1064 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp376 *label310
-    * jump *label307 always
-    * multilabel *label310 (m:marker1)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp376 *label311
-    * jump *label307 always
-    * multilabel *label311 (m:marker1)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp376 *label312
-    * jump *label307 always
-    * multilabel *label312 (m:marker1)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp376 *label313
-    * jump *label307 always
-    * multilabel *label313 (m:marker1)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp376 *label314
-    * jump *label307 always
-    * multilabel *label314 (m:marker1)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp376 *label315
-    * jump *label307 always
-    * multilabel *label315 (m:marker1)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp376 *label316
-    * label *label307
-    * op sign *tmp377 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label308
-    * multijump *tmp376 0 0 (m:marker1)
-    * multilabel *label316 (m:marker1)
-    * label *label309
+ 1065 set :meetTarget:t :meetTarget:copper
+ 1066 label *label476
+ 1067 op sign *tmp377 :meetTarget:t
+ 1068 op add :meetTarget:count :meetTarget:count *tmp377
+ 1069 label *label477
+ 1070 set :meetTarget:t :meetTarget:lead
+ 1071 label *label480
+ 1072 op sign *tmp377 :meetTarget:t
+ 1073 op add :meetTarget:count :meetTarget:count *tmp377
+ 1074 label *label481
+ 1075 set :meetTarget:t :meetTarget:graphite
+ 1076 label *label484
+ 1077 op sign *tmp377 :meetTarget:t
+ 1078 op add :meetTarget:count :meetTarget:count *tmp377
+ 1079 label *label485
+ 1080 set :meetTarget:t :meetTarget:silicon
+ 1081 label *label488
+ 1082 op sign *tmp377 :meetTarget:t
+ 1083 op add :meetTarget:count :meetTarget:count *tmp377
+ 1084 label *label489
+ 1085 set :meetTarget:t :meetTarget:titanium
+ 1086 label *label492
+ 1087 op sign *tmp377 :meetTarget:t
+ 1088 op add :meetTarget:count :meetTarget:count *tmp377
+ 1089 label *label493
+ 1090 set :meetTarget:t :meetTarget:metaglass
+ 1091 label *label496
+ 1092 op sign *tmp377 :meetTarget:t
+ 1093 op add :meetTarget:count :meetTarget:count *tmp377
+ 1094 label *label497
+ 1095 set :meetTarget:t :meetTarget:thorium
+ 1096 label *label500
+ 1097 op sign *tmp377 :meetTarget:t
+ 1098 op add :meetTarget:count :meetTarget:count *tmp377
+ 1099 label *label501
+ 1100 label *label309
  1101 write :meetTarget:count processor2 ".totalTargets"
  1102 write :meetTarget:block processor2 ".nextBlock"
  1103 write :meetTarget:copper processor2 ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1064 set :meetTarget:count 0
  1065 set :meetTarget:t :meetTarget:copper
  1066 label *label476
-    * op sign *tmp377 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp377
+ 1067 op sign *tmp377 :meetTarget:copper
+ 1068 op add :meetTarget:count 0 *tmp377
  1069 label *label477
  1070 set :meetTarget:t :meetTarget:lead
  1071 label *label480
-    * op sign *tmp377 :meetTarget:t
+ 1072 op sign *tmp377 :meetTarget:lead
  1073 op add :meetTarget:count :meetTarget:count *tmp377
  1074 label *label481
  1075 set :meetTarget:t :meetTarget:graphite
  1076 label *label484
-    * op sign *tmp377 :meetTarget:t
+ 1077 op sign *tmp377 :meetTarget:graphite
  1078 op add :meetTarget:count :meetTarget:count *tmp377
  1079 label *label485
  1080 set :meetTarget:t :meetTarget:silicon
  1081 label *label488
-    * op sign *tmp377 :meetTarget:t
+ 1082 op sign *tmp377 :meetTarget:silicon
  1083 op add :meetTarget:count :meetTarget:count *tmp377
  1084 label *label489
  1085 set :meetTarget:t :meetTarget:titanium
  1086 label *label492
-    * op sign *tmp377 :meetTarget:t
+ 1087 op sign *tmp377 :meetTarget:titanium
  1088 op add :meetTarget:count :meetTarget:count *tmp377
  1089 label *label493
  1090 set :meetTarget:t :meetTarget:metaglass
  1091 label *label496
-    * op sign *tmp377 :meetTarget:t
+ 1092 op sign *tmp377 :meetTarget:metaglass
  1093 op add :meetTarget:count :meetTarget:count *tmp377
  1094 label *label497
  1095 set :meetTarget:t :meetTarget:thorium
  1096 label *label500
-    * op sign *tmp377 :meetTarget:t
+ 1097 op sign *tmp377 :meetTarget:thorium
  1098 op add :meetTarget:count :meetTarget:count *tmp377
  1099 label *label501
  1100 label *label309

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1061 return :unpackCfg*retaddr
  1062 end
  1063 label *label36
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1064 label *label476
  1065 op sign *tmp377 :meetTarget:copper
  1066 op add :meetTarget:count 0 *tmp377
  1067 label *label477
-    * set :meetTarget:t :meetTarget:lead
  1068 label *label480
  1069 op sign *tmp377 :meetTarget:lead
  1070 op add :meetTarget:count :meetTarget:count *tmp377
  1071 label *label481
-    * set :meetTarget:t :meetTarget:graphite
  1072 label *label484
  1073 op sign *tmp377 :meetTarget:graphite
  1074 op add :meetTarget:count :meetTarget:count *tmp377
  1075 label *label485
-    * set :meetTarget:t :meetTarget:silicon
  1076 label *label488
  1077 op sign *tmp377 :meetTarget:silicon
  1078 op add :meetTarget:count :meetTarget:count *tmp377
  1079 label *label489
-    * set :meetTarget:t :meetTarget:titanium
  1080 label *label492
  1081 op sign *tmp377 :meetTarget:titanium
  1082 op add :meetTarget:count :meetTarget:count *tmp377
  1083 label *label493
-    * set :meetTarget:t :meetTarget:metaglass
  1084 label *label496
  1085 op sign *tmp377 :meetTarget:metaglass
  1086 op add :meetTarget:count :meetTarget:count *tmp377
  1087 label *label497
-    * set :meetTarget:t :meetTarget:thorium
  1088 label *label500
  1089 op sign *tmp377 :meetTarget:thorium
  1090 op add :meetTarget:count :meetTarget:count *tmp377

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   509 write *tmp232 processor7 ".sandTarget"
   510 jump *label166 equal .thoriumContainer false
   511 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label169 (h:*label169)
-    * call *label11 *invalid :status1*retval (m:*label169) (h:*label169)
-    * label *label169
+  512 label *label505
+  513 write :status1:text processor2 ".status1"
+  514 label *label506
   515 sensor *tmp234 .thoriumBattery @totalPower
   516 jump *label170 greaterThanEq *tmp234 2000
   517 sensor *tmp237 .thoriumGenerator @coal
 
   552 read *tmp80 .controller ".monos"
   553 jump *label182 lessThanEq *tmp80 1
   554 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label185 (h:*label185)
-    * call *label11 *invalid :status1*retval (m:*label185) (h:*label185)
-    * label *label185
+  555 label *label507
+  556 write :status1:text processor2 ".status1"
+  557 label *label508
   558 set :mineOre.1:ore @coal
   559 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   560 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
 
   569 sensor *tmp253 AJEMJJ-graphite-press0 @coal
   570 jump *label192 greaterThanEq *tmp253 5
   571 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label194 (h:*label194)
-    * call *label11 *invalid :status1*retval (m:*label194) (h:*label194)
-    * label *label194
+  572 label *label509
+  573 write :status1:text processor2 ".status1"
+  574 label *label510
   575 set :supplyBlock:block AJEMJJ-graphite-press0
   576 set :supplyBlock:ore @coal
   577 setaddr :supplyBlock*retaddr *label195 (h:*label195)
 
   587 sensor *tmp259 ALMQJN-silicon-smelter4 @coal
   588 jump *label198 greaterThanEq *tmp259 5
   589 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label200 (h:*label200)
-    * call *label11 *invalid :status1*retval (m:*label200) (h:*label200)
-    * label *label200
+  590 label *label511
+  591 write :status1:text processor2 ".status1"
+  592 label *label512
   593 set :supplyBlock:block ALMQJN-silicon-smelter4
   594 set :supplyBlock:ore @coal
   595 setaddr :supplyBlock*retaddr *label201 (h:*label201)
 
   601 sensor *tmp262 ALMQJN-silicon-smelter4 @sand
   602 jump *label202 greaterThanEq *tmp262 5
   603 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label204 (h:*label204)
-    * call *label11 *invalid :status1*retval (m:*label204) (h:*label204)
-    * label *label204
+  604 label *label513
+  605 write :status1:text processor2 ".status1"
+  606 label *label514
   607 set :supplyBlock:block ALMQJN-silicon-smelter4
   608 set :supplyBlock:ore @sand
   609 setaddr :supplyBlock*retaddr *label205 (h:*label205)
 
   620 sensor *tmp268 AJRJM-combustion-generator3 @coal
   621 jump *label208 greaterThanEq *tmp268 2
   622 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label210 (h:*label210)
-    * call *label11 *invalid :status1*retval (m:*label210) (h:*label210)
-    * label *label210
+  623 label *label515
+  624 write :status1:text processor2 ".status1"
+  625 label *label516
   626 set :supplyBlock:block AJRJM-combustion-generator3
   627 set :supplyBlock:ore @coal
   628 setaddr :supplyBlock*retaddr *label211 (h:*label211)
 
   650 op mul *tmp283 A©JNJP-unloader6 .powerTarget
   651 jump *label218 greaterThanEq *tmp282 *tmp283
   652 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label220 (h:*label220)
-    * call *label11 *invalid :status1*retval (m:*label220) (h:*label220)
-    * label *label220
+  653 label *label517
+  654 write :status1:text processor2 ".status1"
+  655 label *label518
   656 set :mineOre.1:ore @coal
   657 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   658 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
 
   662 sensor *tmp286 .core @silicon
   663 jump *label222 greaterThanEq *tmp286 silicon
   664 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label224 (h:*label224)
-    * call *label11 *invalid :status1*retval (m:*label224) (h:*label224)
-    * label *label224
+  665 label *label519
+  666 write :status1:text processor2 ".status1"
+  667 label *label520
   668 sensor :supplyBase0:coal .core @coal
   669 sensor :supplyBase0:sand .core @sand
   670 select *tmp292 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   677 sensor *tmp293 .core @copper
   678 jump *label228 greaterThanEq *tmp293 copper
   679 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label230 (h:*label230)
-    * call *label11 *invalid :status1*retval (m:*label230) (h:*label230)
-    * label *label230
+  680 label *label521
+  681 write :status1:text processor2 ".status1"
+  682 label *label522
   683 set :mineOre.1:ore @copper
   684 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   685 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
 
   689 sensor *tmp296 .core @lead
   690 jump *label232 greaterThanEq *tmp296 lead
   691 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label234 (h:*label234)
-    * call *label11 *invalid :status1*retval (m:*label234) (h:*label234)
-    * label *label234
+  692 label *label523
+  693 write :status1:text processor2 ".status1"
+  694 label *label524
   695 set :mineOre.1:ore @lead
   696 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   697 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
 
   701 sensor *tmp299 .core @metaglass
   702 jump *label236 greaterThanEq *tmp299 metaglass
   703 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label238 (h:*label238)
-    * call *label11 *invalid :status1*retval (m:*label238) (h:*label238)
-    * label *label238
+  704 label *label525
+  705 write :status1:text processor2 ".status1"
+  706 label *label526
   707 set :mineOre.1:ore @sand
   708 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   709 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
 
   711 jump *label237 always
   712 label *label236
   713 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label240 (h:*label240)
-    * call *label11 *invalid :status1*retval (m:*label240) (h:*label240)
-    * label *label240
+  714 label *label527
+  715 write :status1:text processor2 ".status1"
+  716 label *label528
   717 sensor :supplyBase0:coal.1 .core @coal
   718 sensor :supplyBase0:sand.1 .core @sand
   719 select *tmp305 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   731 jump *label215 always
   732 label *label214
   733 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label244 (h:*label244)
-    * call *label11 *invalid :status1*retval (m:*label244) (h:*label244)
-    * label *label244
+  734 label *label529
+  735 write :status1:text processor2 ".status1"
+  736 label *label530
   737 set :fetchBlock:block .titaniumDrill
   738 set :fetchBlock:item @titanium
   739 setaddr :fetchBlock*retaddr *label245 (h:*label245)
 
   898 label *label268
   899 return :lineUpUnits*retaddr
   900 end
-    * label *label11
-    * write :status1:text processor2 ".status1"
-    * label *label274
-    * return :status1*retaddr
-    * end
   901 label *label24
   902 set :status2:text "Mining "
   903 set :status2:item :mineOre.1:ore

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   510 jump *label166 equal .thoriumContainer false
   511 set :status1:text "Phase 2: servicing thorium drill"
   512 label *label505
-    * write :status1:text processor2 ".status1"
+  513 write "Phase 2: servicing thorium drill" processor2 ".status1"
   514 label *label506
   515 sensor *tmp234 .thoriumBattery @totalPower
   516 jump *label170 greaterThanEq *tmp234 2000
 
   553 jump *label182 lessThanEq *tmp80 1
   554 set :status1:text "Phase 1: supplying base"
   555 label *label507
-    * write :status1:text processor2 ".status1"
+  556 write "Phase 1: supplying base" processor2 ".status1"
   557 label *label508
   558 set :mineOre.1:ore @coal
   559 setaddr :mineOre.1*retaddr *label186 (h:*label186)
 
   570 jump *label192 greaterThanEq *tmp253 5
   571 set :status1:text "Goal 1: graphite requirement"
   572 label *label509
-    * write :status1:text processor2 ".status1"
+  573 write "Goal 1: graphite requirement" processor2 ".status1"
   574 label *label510
   575 set :supplyBlock:block AJEMJJ-graphite-press0
   576 set :supplyBlock:ore @coal
 
   588 jump *label198 greaterThanEq *tmp259 5
   589 set :status1:text "Goal 2: coal for silicon requirement"
   590 label *label511
-    * write :status1:text processor2 ".status1"
+  591 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   592 label *label512
   593 set :supplyBlock:block ALMQJN-silicon-smelter4
   594 set :supplyBlock:ore @coal
 
   602 jump *label202 greaterThanEq *tmp262 5
   603 set :status1:text "Goal 3: sand for silicon requirement"
   604 label *label513
-    * write :status1:text processor2 ".status1"
+  605 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   606 label *label514
   607 set :supplyBlock:block ALMQJN-silicon-smelter4
   608 set :supplyBlock:ore @sand
 
   621 jump *label208 greaterThanEq *tmp268 2
   622 set :status1:text "Goal 4: supplying generator"
   623 label *label515
-    * write :status1:text processor2 ".status1"
+  624 write "Goal 4: supplying generator" processor2 ".status1"
   625 label *label516
   626 set :supplyBlock:block AJRJM-combustion-generator3
   627 set :supplyBlock:ore @coal
 
   651 jump *label218 greaterThanEq *tmp282 *tmp283
   652 set :status1:text "Goal 5: supplying generator"
   653 label *label517
-    * write :status1:text processor2 ".status1"
+  654 write "Goal 5: supplying generator" processor2 ".status1"
   655 label *label518
   656 set :mineOre.1:ore @coal
   657 setaddr :mineOre.1*retaddr *label221 (h:*label221)
 
   663 jump *label222 greaterThanEq *tmp286 silicon
   664 set :status1:text "Goal 6: silicon requirement"
   665 label *label519
-    * write :status1:text processor2 ".status1"
+  666 write "Goal 6: silicon requirement" processor2 ".status1"
   667 label *label520
   668 sensor :supplyBase0:coal .core @coal
   669 sensor :supplyBase0:sand .core @sand
 
   678 jump *label228 greaterThanEq *tmp293 copper
   679 set :status1:text "Goal 7: copper requirement"
   680 label *label521
-    * write :status1:text processor2 ".status1"
+  681 write "Goal 7: copper requirement" processor2 ".status1"
   682 label *label522
   683 set :mineOre.1:ore @copper
   684 setaddr :mineOre.1*retaddr *label231 (h:*label231)
 
   690 jump *label232 greaterThanEq *tmp296 lead
   691 set :status1:text "Goal 8: lead requirement"
   692 label *label523
-    * write :status1:text processor2 ".status1"
+  693 write "Goal 8: lead requirement" processor2 ".status1"
   694 label *label524
   695 set :mineOre.1:ore @lead
   696 setaddr :mineOre.1*retaddr *label235 (h:*label235)
 
   702 jump *label236 greaterThanEq *tmp299 metaglass
   703 set :status1:text "Goal 9: metaglass requirement"
   704 label *label525
-    * write :status1:text processor2 ".status1"
+  705 write "Goal 9: metaglass requirement" processor2 ".status1"
   706 label *label526
   707 set :mineOre.1:ore @sand
   708 setaddr :mineOre.1*retaddr *label239 (h:*label239)
 
   712 label *label236
   713 set :status1:text "Goal 10: supplying base"
   714 label *label527
-    * write :status1:text processor2 ".status1"
+  715 write "Goal 10: supplying base" processor2 ".status1"
   716 label *label528
   717 sensor :supplyBase0:coal.1 .core @coal
   718 sensor :supplyBase0:sand.1 .core @sand
 
   732 label *label214
   733 set :status1:text "Goal 11: Fetching titanium"
   734 label *label529
-    * write :status1:text processor2 ".status1"
+  735 write "Goal 11: Fetching titanium" processor2 ".status1"
   736 label *label530
   737 set :fetchBlock:block .titaniumDrill
   738 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   508 op max *tmp232 0 *tmp231
   509 write *tmp232 processor7 ".sandTarget"
   510 jump *label166 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   511 label *label505
   512 write "Phase 2: servicing thorium drill" processor2 ".status1"
   513 label *label506
 
   550 label *label166
   551 read *tmp80 .controller ".monos"
   552 jump *label182 lessThanEq *tmp80 1
-    * set :status1:text "Phase 1: supplying base"
   553 label *label507
   554 write "Phase 1: supplying base" processor2 ".status1"
   555 label *label508
 
   566 jump *label190 greaterThanEq *tmp250 graphite
   567 sensor *tmp253 AJEMJJ-graphite-press0 @coal
   568 jump *label192 greaterThanEq *tmp253 5
-    * set :status1:text "Goal 1: graphite requirement"
   569 label *label509
   570 write "Goal 1: graphite requirement" processor2 ".status1"
   571 label *label510
 
   583 jump *label196 greaterThanEq *tmp256 silicon
   584 sensor *tmp259 ALMQJN-silicon-smelter4 @coal
   585 jump *label198 greaterThanEq *tmp259 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   586 label *label511
   587 write "Goal 2: coal for silicon requirement" processor2 ".status1"
   588 label *label512
 
   596 label *label198
   597 sensor *tmp262 ALMQJN-silicon-smelter4 @sand
   598 jump *label202 greaterThanEq *tmp262 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   599 label *label513
   600 write "Goal 3: sand for silicon requirement" processor2 ".status1"
   601 label *label514
 
   614 jump *label206 greaterThanEq *tmp265 .powerTarget
   615 sensor *tmp268 AJRJM-combustion-generator3 @coal
   616 jump *label208 greaterThanEq *tmp268 2
-    * set :status1:text "Goal 4: supplying generator"
   617 label *label515
   618 write "Goal 4: supplying generator" processor2 ".status1"
   619 label *label516
 
   643 sensor *tmp282 AJTJK-battery1 @totalPower
   644 op mul *tmp283 A©JNJP-unloader6 .powerTarget
   645 jump *label218 greaterThanEq *tmp282 *tmp283
-    * set :status1:text "Goal 5: supplying generator"
   646 label *label517
   647 write "Goal 5: supplying generator" processor2 ".status1"
   648 label *label518
 
   654 label *label218
   655 sensor *tmp286 .core @silicon
   656 jump *label222 greaterThanEq *tmp286 silicon
-    * set :status1:text "Goal 6: silicon requirement"
   657 label *label519
   658 write "Goal 6: silicon requirement" processor2 ".status1"
   659 label *label520
 
   668 label *label222
   669 sensor *tmp293 .core @copper
   670 jump *label228 greaterThanEq *tmp293 copper
-    * set :status1:text "Goal 7: copper requirement"
   671 label *label521
   672 write "Goal 7: copper requirement" processor2 ".status1"
   673 label *label522
 
   679 label *label228
   680 sensor *tmp296 .core @lead
   681 jump *label232 greaterThanEq *tmp296 lead
-    * set :status1:text "Goal 8: lead requirement"
   682 label *label523
   683 write "Goal 8: lead requirement" processor2 ".status1"
   684 label *label524
 
   690 label *label232
   691 sensor *tmp299 .core @metaglass
   692 jump *label236 greaterThanEq *tmp299 metaglass
-    * set :status1:text "Goal 9: metaglass requirement"
   693 label *label525
   694 write "Goal 9: metaglass requirement" processor2 ".status1"
   695 label *label526
 
   699 label *label239
   700 jump *label237 always
   701 label *label236
-    * set :status1:text "Goal 10: supplying base"
   702 label *label527
   703 write "Goal 10: supplying base" processor2 ".status1"
   704 label *label528
 
   718 label *label217
   719 jump *label215 always
   720 label *label214
-    * set :status1:text "Goal 11: Fetching titanium"
   721 label *label529
   722 write "Goal 11: Fetching titanium" processor2 ".status1"
   723 label *label530

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:165:1 (-4 instructions):
 
   526 label *label174
   527 set :supplyBlockFromCore:target .thoriumGenerator
   528 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label177 (h:*label177)
-    * call *label27 *invalid :supplyBlockFromCore*retval (m:*label177) (h:*label177)
-    * label *label177
+  529 label *label531
+  530 sensor *tmp339 :supplyBlockFromCore:target @itemCapacity
+  531 op min :supplyBlockFromCore:cap *tmp339 30
+  532 set :transportStatus:target :supplyBlockFromCore:cap
+  533 set :transportStatus:item :supplyBlockFromCore:item
+  534 setaddr :transportStatus*retaddr *label532 (h:*label532)
+  535 call *label14 *invalid :transportStatus*retval (m:*label532) (h:*label532)
+  536 label *label532
+  537 set :status2:text "Transferring "
+  538 set :status2:item :supplyBlockFromCore:item
+  539 set :status2:block :supplyBlockFromCore:target
+  540 setaddr :status2*retaddr *label533 (h:*label533)
+  541 call *label12 *invalid :status2*retval (m:*label533) (h:*label533)
+  542 label *label533
+  543 set :moveToEmpty:x .coreX
+  544 set :moveToEmpty:y .coreY
+  545 setaddr :moveToEmpty*retaddr *label534 (h:*label534)
+  546 call *label18 *invalid :moveToEmpty*retval (m:*label534) (h:*label534)
+  547 label *label534
+  548 setaddr :dropAll*retaddr *label535 (h:*label535)
+  549 call *label19 *invalid :dropAll*retval (m:*label535) (h:*label535)
+  550 label *label535
+  551 label *label536
+  552 ucontrol itemTake .core :supplyBlockFromCore:item :supplyBlockFromCore:cap
+  553 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  554 op notEqual *tmp342 :supplyBlockFromCore:unitItem null
+  555 op notEqual *tmp343 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  556 op land *tmp344 *tmp342 *tmp343
+  557 jump *label537 equal *tmp344 false
+  558 ucontrol itemDrop @air 1000
+  559 label *label537
+  560 label *label538
+  561 label *label539
+  562 sensor *tmp346 @unit :supplyBlockFromCore:item
+  563 op lessThan *tmp347 *tmp346 :supplyBlockFromCore:cap
+  564 sensor *tmp348 .core :supplyBlockFromCore:item
+  565 op land *tmp349 *tmp347 *tmp348
+  566 jump *label536 notEqual *tmp349 false
+  567 label *label540
+  568 set :depositItems:block :supplyBlockFromCore:target
+  569 set :depositItems:item :supplyBlockFromCore:item
+  570 setaddr :depositItems*retaddr *label541 (h:*label541)
+  571 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
+  572 label *label541
+  573 label *label542
   574 label *label175
   575 label *label172
   576 label *label173
 
  1013 label *label289
  1014 return :supplyBlock*retaddr
  1015 end
-    * label *label27
-    * sensor *tmp339 :supplyBlockFromCore:target @itemCapacity
-    * op min :supplyBlockFromCore:cap *tmp339 30
-    * set :transportStatus:target :supplyBlockFromCore:cap
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label295 (h:*label295)
-    * call *label14 *invalid :transportStatus*retval (m:*label295) (h:*label295)
-    * label *label295
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label296 (h:*label296)
-    * call *label12 *invalid :status2*retval (m:*label296) (h:*label296)
-    * label *label296
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label297 (h:*label297)
-    * call *label18 *invalid :moveToEmpty*retval (m:*label297) (h:*label297)
-    * label *label297
-    * setaddr :dropAll*retaddr *label298 (h:*label298)
-    * call *label19 *invalid :dropAll*retval (m:*label298) (h:*label298)
-    * label *label298
-    * label *label299
-    * ucontrol itemTake .core :supplyBlockFromCore:item :supplyBlockFromCore:cap
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp342 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp343 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp344 *tmp342 *tmp343
-    * jump *label302 equal *tmp344 false
-    * ucontrol itemDrop @air 1000
-    * label *label302
-    * label *label303
-    * label *label300
-    * sensor *tmp346 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp347 *tmp346 :supplyBlockFromCore:cap
-    * sensor *tmp348 .core :supplyBlockFromCore:item
-    * op land *tmp349 *tmp347 *tmp348
-    * jump *label299 notEqual *tmp349 false
-    * label *label301
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label304 (h:*label304)
-    * call *label21 *invalid :depositItems*retval (m:*label304) (h:*label304)
-    * label *label304
-    * label *label294
-    * return :supplyBlockFromCore*retaddr
-    * end
  1016 label *label29
  1017 read *tmp351 :unpackCfg:cfg 1
  1018 op sub *tmp352 *tmp351 74

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   527 set :supplyBlockFromCore:target .thoriumGenerator
   528 set :supplyBlockFromCore:item @coal
   529 label *label531
-    * sensor *tmp339 :supplyBlockFromCore:target @itemCapacity
+  530 sensor *tmp339 .thoriumGenerator @itemCapacity
   531 op min :supplyBlockFromCore:cap *tmp339 30
   532 set :transportStatus:target :supplyBlockFromCore:cap
-    * set :transportStatus:item :supplyBlockFromCore:item
+  533 set :transportStatus:item @coal
   534 setaddr :transportStatus*retaddr *label532 (h:*label532)
   535 call *label14 *invalid :transportStatus*retval (m:*label532) (h:*label532)
   536 label *label532
   537 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  538 set :status2:item @coal
+  539 set :status2:block .thoriumGenerator
   540 setaddr :status2*retaddr *label533 (h:*label533)
   541 call *label12 *invalid :status2*retval (m:*label533) (h:*label533)
   542 label *label533
 
   549 call *label19 *invalid :dropAll*retval (m:*label535) (h:*label535)
   550 label *label535
   551 label *label536
-    * ucontrol itemTake .core :supplyBlockFromCore:item :supplyBlockFromCore:cap
+  552 ucontrol itemTake .core @coal :supplyBlockFromCore:cap
   553 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   554 op notEqual *tmp342 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp343 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  555 op notEqual *tmp343 :supplyBlockFromCore:unitItem @coal
   556 op land *tmp344 *tmp342 *tmp343
   557 jump *label537 equal *tmp344 false
   558 ucontrol itemDrop @air 1000
   559 label *label537
   560 label *label538
   561 label *label539
-    * sensor *tmp346 @unit :supplyBlockFromCore:item
+  562 sensor *tmp346 @unit @coal
   563 op lessThan *tmp347 *tmp346 :supplyBlockFromCore:cap
-    * sensor *tmp348 .core :supplyBlockFromCore:item
+  564 sensor *tmp348 .core @coal
   565 op land *tmp349 *tmp347 *tmp348
   566 jump *label536 notEqual *tmp349 false
   567 label *label540
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  568 set :depositItems:block .thoriumGenerator
+  569 set :depositItems:item @coal
   570 setaddr :depositItems*retaddr *label541 (h:*label541)
   571 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
   572 label *label541

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   524 label *label176
   525 jump *label175 always
   526 label *label174
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   527 label *label531
   528 sensor *tmp339 .thoriumGenerator @itemCapacity
   529 op min :supplyBlockFromCore:cap *tmp339 30

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
  1267 end
  1268 label *label18
  1269 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label364 (h:*label364)
-    * call *label13 *invalid :status3*retval (m:*label364) (h:*label364)
-    * label *label364
+ 1270 label *label543
+ 1271 write :status3:text processor2 ".status3"
+ 1272 label *label544
  1273 label *label365
  1274 sensor *tmp446 @unit @firstItem
  1275 jump *label368 equal *tmp446 null
 
  1297 end
  1298 label *label21
  1299 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label375 (h:*label375)
-    * call *label13 *invalid :status3*retval (m:*label375) (h:*label375)
-    * label *label375
+ 1300 label *label545
+ 1301 write :status3:text processor2 ".status3"
+ 1302 label *label546
  1303 sensor *tmp453 @unit @firstItem
  1304 jump *label376 notEqual *tmp453 :depositItems:item
  1305 set :moveToBlock:block :depositItems:block
 
  1360 label *label390
  1361 label *label391
  1362 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label393 (h:*label393)
-    * call *label13 *invalid :status3*retval (m:*label393) (h:*label393)
-    * label *label393
+ 1363 label *label547
+ 1364 write :status3:text processor2 ".status3"
+ 1365 label *label548
  1366 op add :mineOre:stop @second 10
  1367 label *label394
  1368 sensor :mineOre:item @unit @firstItem
 
  1443 label *label386
  1444 return :mineOre*retaddr
  1445 end
-    * label *label13
-    * write :status3:text processor2 ".status3"
-    * label *label421
-    * return :status3*retaddr
-    * end
  1446 label *label20
  1447 sensor *tmp502 :moveToBlock:block @x
  1448 sensor *tmp503 :moveToBlock:block @y
 
  1469 end
  1470 label *label16
  1471 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label429 (h:*label429)
-    * call *label13 *invalid :status3*retval (m:*label429) (h:*label429)
-    * label *label429
+ 1472 label *label549
+ 1473 write :status3:text processor2 ".status3"
+ 1474 label *label550
  1475 op sub *tmp510 :moveTo:radius 0.5
  1476 label *label430
  1477 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1268 label *label18
  1269 set :status3:text "Moving..."
  1270 label *label543
-    * write :status3:text processor2 ".status3"
+ 1271 write "Moving..." processor2 ".status3"
  1272 label *label544
  1273 label *label365
  1274 sensor *tmp446 @unit @firstItem
 
  1298 label *label21
  1299 set :status3:text "Depositing..."
  1300 label *label545
-    * write :status3:text processor2 ".status3"
+ 1301 write "Depositing..." processor2 ".status3"
  1302 label *label546
  1303 sensor *tmp453 @unit @firstItem
  1304 jump *label376 notEqual *tmp453 :depositItems:item
 
  1361 label *label391
  1362 set :status3:text "Mining..."
  1363 label *label547
-    * write :status3:text processor2 ".status3"
+ 1364 write "Mining..." processor2 ".status3"
  1365 label *label548
  1366 op add :mineOre:stop @second 10
  1367 label *label394
 
  1470 label *label16
  1471 set :status3:text "Moving..."
  1472 label *label549
-    * write :status3:text processor2 ".status3"
+ 1473 write "Moving..." processor2 ".status3"
  1474 label *label550
  1475 op sub *tmp510 :moveTo:radius 0.5
  1476 label *label430

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1266 return :transportStatus*retaddr
  1267 end
  1268 label *label18
-    * set :status3:text "Moving..."
  1269 label *label543
  1270 write "Moving..." processor2 ".status3"
  1271 label *label544
 
  1295 return :dropAll*retaddr
  1296 end
  1297 label *label21
-    * set :status3:text "Depositing..."
  1298 label *label545
  1299 write "Depositing..." processor2 ".status3"
  1300 label *label546
 
  1357 label *label392
  1358 label *label390
  1359 label *label391
-    * set :status3:text "Mining..."
  1360 label *label547
  1361 write "Mining..." processor2 ".status3"
  1362 label *label548
 
  1465 return :locateOre*retaddr
  1466 end
  1467 label *label16
-    * set :status3:text "Moving..."
  1468 label *label549
  1469 write "Moving..." processor2 ".status3"
  1470 label *label550

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
  1302 jump *label376 notEqual *tmp453 :depositItems:item
  1303 set :moveToBlock:block :depositItems:block
  1304 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label378 (h:*label378)
-    * call *label20 *invalid :moveToBlock*retval (m:*label378) (h:*label378)
-    * label *label378
+ 1305 label *label551
+ 1306 sensor *tmp502 :moveToBlock:block @x
+ 1307 sensor *tmp503 :moveToBlock:block @y
+ 1308 set :moveTo:x *tmp502
+ 1309 set :moveTo:y *tmp503
+ 1310 set :moveTo:radius :moveToBlock:radius
+ 1311 setaddr :moveTo*retaddr *label552 (h:*label552)
+ 1312 call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
+ 1313 label *label552
+ 1314 label *label553
  1315 sensor :depositItems:cap :depositItems:block @itemCapacity
  1316 label *label379
  1317 ucontrol itemDrop :depositItems:block 30
 
  1447 label *label386
  1448 return :mineOre*retaddr
  1449 end
-    * label *label20
-    * sensor *tmp502 :moveToBlock:block @x
-    * sensor *tmp503 :moveToBlock:block @y
-    * set :moveTo:x *tmp502
-    * set :moveTo:y *tmp503
-    * set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label423 (h:*label423)
-    * call *label16 *invalid :moveTo*retval (m:*label423) (h:*label423)
-    * label *label423
-    * label *label422
-    * return :moveToBlock*retaddr
-    * end
  1450 label *label22
  1451 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
  1452 jump *label425 notEqual *tmp504 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1303 set :moveToBlock:block :depositItems:block
  1304 set :moveToBlock:radius 6
  1305 label *label551
-    * sensor *tmp502 :moveToBlock:block @x
-    * sensor *tmp503 :moveToBlock:block @y
+ 1306 sensor *tmp502 :depositItems:block @x
+ 1307 sensor *tmp503 :depositItems:block @y
  1308 set :moveTo:x *tmp502
  1309 set :moveTo:y *tmp503
-    * set :moveTo:radius :moveToBlock:radius
+ 1310 set :moveTo:radius 6
  1311 setaddr :moveTo*retaddr *label552 (h:*label552)
  1312 call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
  1313 label *label552

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
  1300 label *label546
  1301 sensor *tmp453 @unit @firstItem
  1302 jump *label376 notEqual *tmp453 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
  1303 label *label551
  1304 sensor *tmp502 :depositItems:block @x
  1305 sensor *tmp503 :depositItems:block @y

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
  1345 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1346 label *label387
  1347 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label388 (h:*label388)
-    * call *label22 *invalid :locateOre*retval (m:*label388) (h:*label388)
-    * label *label388
+ 1348 label *label554
+ 1349 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
+ 1350 jump *label556 notEqual *tmp504 false
+ 1351 set :error:error "Cannot locate ore"
+ 1352 setaddr :error*retaddr *label555 (h:*label555)
+ 1353 call *label15 *invalid :error*retval (m:*label555) (h:*label555)
+ 1354 label *label555
+ 1355 label *label556
+ 1356 label *label557
+ 1357 label *label558
  1358 set :mineOre:x :locateOre:x
  1359 set :mineOre:y :locateOre:y
  1360 set :moveToEmpty:x :locateOre:x
 
  1452 label *label386
  1453 return :mineOre*retaddr
  1454 end
-    * label *label22
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
-    * jump *label425 notEqual *tmp504 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label427 (h:*label427)
-    * call *label15 *invalid :error*retval (m:*label427) (h:*label427)
-    * label *label427
-    * label *label425
-    * label *label426
-    * label *label424
-    * return :locateOre*retaddr
-    * end
  1455 label *label16
  1456 label *label549
  1457 write "Moving..." processor2 ".status3"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1346 label *label387
  1347 set :locateOre:ore :mineOre:ore
  1348 label *label554
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
+ 1349 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
  1350 jump *label556 notEqual *tmp504 false
  1351 set :error:error "Cannot locate ore"
  1352 setaddr :error*retaddr *label555 (h:*label555)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
  1344 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1345 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1346 label *label387
-    * set :locateOre:ore :mineOre:ore
  1347 label *label554
  1348 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
  1349 jump *label556 notEqual *tmp504 false

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
  1306 set :moveTo:x *tmp502
  1307 set :moveTo:y *tmp503
  1308 set :moveTo:radius 6
-    * setaddr :moveTo*retaddr *label552 (h:*label552)
-    * call *label16 *invalid :moveTo*retval (m:*label552) (h:*label552)
-    * label *label552
+ 1309 label *label559
+ 1310 label *label560
+ 1311 write "Moving..." processor2 ".status3"
+ 1312 label *label561
+ 1313 op sub *tmp510 :moveTo:radius 0.5
+ 1314 label *label562
+ 1315 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508
+ 1316 jump *label564 notEqual *tmp508 false
+ 1317 ucontrol approach :moveTo:x :moveTo:y *tmp510
+ 1318 label *label563
+ 1319 jump *label562 always
+ 1320 label *label564
+ 1321 label *label565
  1322 label *label553
  1323 sensor :depositItems:cap :depositItems:block @itemCapacity
  1324 label *label379
 
  1461 label *label386
  1462 return :mineOre*retaddr
  1463 end
-    * label *label16
-    * label *label549
-    * write "Moving..." processor2 ".status3"
-    * label *label550
-    * op sub *tmp510 :moveTo:radius 0.5
-    * label *label430
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508
-    * jump *label432 notEqual *tmp508 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp510
-    * label *label431
-    * jump *label430 always
-    * label *label432
-    * label *label428
-    * return :moveTo*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1310 label *label560
  1311 write "Moving..." processor2 ".status3"
  1312 label *label561
-    * op sub *tmp510 :moveTo:radius 0.5
+ 1313 op sub *tmp510 6 0.5
  1314 label *label562
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp508
+ 1315 ucontrol within *tmp502 *tmp503 6 *tmp508
  1316 jump *label564 notEqual *tmp508 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp510
+ 1317 ucontrol approach *tmp502 *tmp503 5.5
  1318 label *label563
  1319 jump *label562 always
  1320 label *label564

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
  1303 label *label551
  1304 sensor *tmp502 :depositItems:block @x
  1305 sensor *tmp503 :depositItems:block @y
-    * set :moveTo:x *tmp502
-    * set :moveTo:y *tmp503
-    * set :moveTo:radius 6
  1306 label *label559
  1307 label *label560
  1308 write "Moving..." processor2 ".status3"
  1309 label *label561
-    * op sub *tmp510 6 0.5
  1310 label *label562
  1311 ucontrol within *tmp502 *tmp503 6 *tmp508
  1312 jump *label564 notEqual *tmp508 false

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-4 instructions):
 
    93 read *tmp141 processor5 ":buildFirstTitaniumDrillAt*finished"
    94 jump *label65 equal *tmp141 false
    95 read *tmp124 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label59 always
    96 label *label59
    97 set .titaniumDrill *tmp124
    98 write *tmp124 processor2 ".titaniumDrill"
 
   674 sensor *tmp274 .core @titanium
   675 op sub *tmp275 titanium *tmp274
   676 op min *tmp273 7 *tmp275
-    * jump *label213 always
   677 label *label213
   678 sensor *tmp277 .titaniumDrill @titanium
   679 jump *label214 greaterThanEq *tmp277 *tmp273
 
   830 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   831 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   832 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label251 always
   833 label *label251
   834 return :buildBlockFromCfg*retaddr
   835 end
 
  1245 write false .controller ":buildStop*finished"
  1246 write 2 .controller "@counter"
  1247 set :buildBlock*retval :buildBlock:built
-    * jump *label358 always
  1248 label *label358
  1249 return :buildBlock*retaddr
  1250 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   120 write .core :buildBlockFromCfg*retval ".core"
   121 write bank1 :buildBlockFromCfg*retval ".bank"
   122 label *label435
-    * read *tmp148 @this "AJEMJJ-graphite-press0"
+  123 set *tmp148 AJEMJJ-graphite-press0
   124 write *tmp148 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
   125 label *label436
   126 label *label439
-    * read *tmp148 @this "AJTJK-battery1"
+  127 set *tmp148 AJTJK-battery1
   128 write *tmp148 :buildBlockFromCfg*retval "AJTJK-battery1"
   129 label *label440
   130 label *label443
-    * read *tmp148 @this "ALTJL-battery2"
+  131 set *tmp148 ALTJL-battery2
   132 write *tmp148 :buildBlockFromCfg*retval "ALTJL-battery2"
   133 label *label444
   134 label *label447
-    * read *tmp148 @this "AJRJM-combustion-generator3"
+  135 set *tmp148 AJRJM-combustion-generator3
   136 write *tmp148 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
   137 label *label448
   138 label *label451
-    * read *tmp148 @this "ALMQJN-silicon-smelter4"
+  139 set *tmp148 ALMQJN-silicon-smelter4
   140 write *tmp148 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
   141 label *label452
   142 label *label455
-    * read *tmp148 @this "A{LNJO-inverted-sorter5"
+  143 set *tmp148 A{LNJO-inverted-sorter5
   144 write *tmp148 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
   145 label *label456
   146 label *label459
-    * read *tmp148 @this "A©JNJP-unloader6"
+  147 set *tmp148 A©JNJP-unloader6
   148 write *tmp148 :buildBlockFromCfg*retval "A©JNJP-unloader6"
   149 label *label460
   150 label *label463
-    * read *tmp148 @this "A{HNJQ-inverted-sorter7"
+  151 set *tmp148 A{HNJQ-inverted-sorter7
   152 write *tmp148 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
   153 label *label464
   154 label *label467
-    * read *tmp148 @this "AJPJR-underflow-gate8"
+  155 set *tmp148 AJPJR-underflow-gate8
   156 write *tmp148 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
   157 label *label468
   158 label *label471
-    * read *tmp148 @this "AÕFFJS-micro-processor9"
+  159 set *tmp148 AÕFFJS-micro-processor9
   160 write *tmp148 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
   161 label *label472
   162 label *label72
 
  1035 label *label36
  1036 label *label476
  1037 op sign *tmp377 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp377
+ 1038 set :meetTarget:count *tmp377
  1039 label *label477
  1040 label *label480
  1041 op sign *tmp377 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-4 instructions):
 
   697 label *label520
   698 sensor :supplyBase0:coal .core @coal
   699 sensor :supplyBase0:sand .core @sand
-    * select *tmp292 lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
-    * set :mineOre.1:ore *tmp292
+  700 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
   701 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   702 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   703 label *label227
 
   741 label *label528
   742 sensor :supplyBase0:coal.1 .core @coal
   743 sensor :supplyBase0:sand.1 .core @sand
-    * select *tmp305 lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
-    * set :mineOre.1:ore *tmp305
+  744 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
   745 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   746 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   747 label *label243
 
  1032 end
  1033 label *label36
  1034 label *label476
-    * op sign *tmp377 :meetTarget:copper
-    * set :meetTarget:count *tmp377
+ 1035 op sign :meetTarget:count :meetTarget:copper
  1036 label *label477
  1037 label *label480
  1038 op sign *tmp377 :meetTarget:lead
 
  1238 wait 1e-15
  1239 read *tmp444 processor5 ":buildBlockAt*finished"
  1240 jump *label360 equal *tmp444 false
-    * read :buildBlock:built processor5 ":buildBlockAt*retval"
+ 1241 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1242 write false .controller ":buildStop*finished"
  1243 write 2 .controller "@counter"
-    * set :buildBlock*retval :buildBlock:built
  1244 label *label358
  1245 return :buildBlock*retaddr
  1246 end

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    27 ubind @poly
    28 set .builder @unit
    29 ulocate building core false @copper .coreX .coreY *tmp116 .core
-    * label *label51
    30 jump *label50 equal .core null
-    * label *label52
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
    33 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label53) (h:*label53)
 
    80 call *label15 *invalid :error*retval (m:*label64) (h:*label64)
    81 label *label64
    82 label *label62
-    * label *label63
    83 write @pneumatic-drill processor2 ".nextBlock"
    84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    90 read *tmp141 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label65 equal *tmp141 false
    92 read *tmp124 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label59
    93 set .titaniumDrill *tmp124
    94 write *tmp124 processor2 ".titaniumDrill"
    95 set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"
 
   115 write processor2 :buildBlockFromCfg*retval ".display"
   116 write .core :buildBlockFromCfg*retval ".core"
   117 write bank1 :buildBlockFromCfg*retval ".bank"
-    * label *label435
   118 set *tmp148 AJEMJJ-graphite-press0
   119 write *tmp148 :buildBlockFromCfg*retval "AJEMJJ-graphite-press0"
-    * label *label436
-    * label *label439
   120 set *tmp148 AJTJK-battery1
   121 write *tmp148 :buildBlockFromCfg*retval "AJTJK-battery1"
-    * label *label440
-    * label *label443
   122 set *tmp148 ALTJL-battery2
   123 write *tmp148 :buildBlockFromCfg*retval "ALTJL-battery2"
-    * label *label444
-    * label *label447
   124 set *tmp148 AJRJM-combustion-generator3
   125 write *tmp148 :buildBlockFromCfg*retval "AJRJM-combustion-generator3"
-    * label *label448
-    * label *label451
   126 set *tmp148 ALMQJN-silicon-smelter4
   127 write *tmp148 :buildBlockFromCfg*retval "ALMQJN-silicon-smelter4"
-    * label *label452
-    * label *label455
   128 set *tmp148 A{LNJO-inverted-sorter5
   129 write *tmp148 :buildBlockFromCfg*retval "A{LNJO-inverted-sorter5"
-    * label *label456
-    * label *label459
   130 set *tmp148 A©JNJP-unloader6
   131 write *tmp148 :buildBlockFromCfg*retval "A©JNJP-unloader6"
-    * label *label460
-    * label *label463
   132 set *tmp148 A{HNJQ-inverted-sorter7
   133 write *tmp148 :buildBlockFromCfg*retval "A{HNJQ-inverted-sorter7"
-    * label *label464
-    * label *label467
   134 set *tmp148 AJPJR-underflow-gate8
   135 write *tmp148 :buildBlockFromCfg*retval "AJPJR-underflow-gate8"
-    * label *label468
-    * label *label471
   136 set *tmp148 AÕFFJS-micro-processor9
   137 write *tmp148 :buildBlockFromCfg*retval "AÕFFJS-micro-processor9"
-    * label *label472
-    * label *label72
   138 set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"
   139 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   140 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
 
   152 call *label40 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   153 label *label86
   154 write 1 .controller ".flareTarget"
-    * label *label87
   155 write 5 .controller ".monoTarget"
-    * label *label88
   156 write 85 .controller ".pressTarget"
   157 write 150 .controller ".smelterTarget"
   158 write 30 .controller ".kilnTarget"
 
   169 jump *label94 greaterThanEq *tmp153 300
   170 jump *label92 always
   171 label *label94
-    * label *label95
-    * label *label91
   172 read *tmp80 .controller ".monos"
   173 jump *label90 lessThan *tmp80 3
   174 label *label92
 
   218 set .siliconMonoSurplus 20
   219 set .metaglassSurplus 100
   220 write 4 .controller ".monoTarget"
-    * label *label106
   221 write 3 .controller ".polyTarget"
-    * label *label107
   222 setaddr :buildUnits*retaddr *label108 (h:*label108)
   223 call *label42 *invalid :buildUnits*retval (m:*label108) (h:*label108)
   224 label *label108
 
   228 setaddr :supplyBase*retaddr *label112 (h:*label112)
   229 call *label35 *invalid :supplyBase*retval (m:*label112) (h:*label112)
   230 label *label112
-    * label *label110
   231 jump *label109 always
   232 label *label111
   233 write 2 .controller ".flareTarget"
-    * label *label113
   234 label *label114
   235 read *tmp79 .controller ".flares"
   236 jump *label116 greaterThanEq *tmp79 2
   237 setaddr :supplyBase*retaddr *label117 (h:*label117)
   238 call *label35 *invalid :supplyBase*retval (m:*label117) (h:*label117)
   239 label *label117
-    * label *label115
   240 jump *label114 always
   241 label *label116
   242 write @ore-titanium processor2 ".nextBlock"
 
   262 jump *label119 equal *tmp181 false
   263 write false processor3 ":stopLocation*finished"
   264 write 3 processor3 "@counter"
-    * label *label118
   265 write null processor2 ".nextBlock"
   266 set .graphiteSurplus 10
   267 set .metaglassSurplus 50
 
   291 call *label15 *invalid :error*retval (m:*label126) (h:*label126)
   292 label *label126
   293 label *label124
-    * label *label125
   294 write @laser-drill processor5 ":buildBlockAt:block"
   295 read *tmp51 processor3 ".drillX"
   296 write *tmp51 processor5 ":buildBlockAt:x"
 
   364 wait 1e-15
   365 read *tmp211 processor6 ":setThoriumContainer*finished"
   366 jump *label138 equal *tmp211 false
-    * label *label120
   367 write null processor2 ".nextBlock"
   368 label *label139
   369 read *tmp81 .controller ".polys"
 
   371 setaddr :supplyBase*retaddr *label142 (h:*label142)
   372 call *label35 *invalid :supplyBase*retval (m:*label142) (h:*label142)
   373 label *label142
-    * label *label140
   374 jump *label139 always
   375 label *label141
   376 write 0 .controller ".monoTarget"
-    * label *label143
   377 write 3209 .controller ".powerTarget"
   378 set .siliconMonoSurplus 120
   379 set .leadSurplus 0
 
   383 label *label144
   384 set .metaglassSurplus 10
   385 write 0 .controller ".polyTarget"
-    * label *label145
   386 write 0 .controller ".flareTarget"
-    * label *label146
   387 write 1 .controller ".megaTarget"
-    * label *label147
   388 setaddr :buildUnits*retaddr *label148 (h:*label148)
   389 call *label42 *invalid :buildUnits*retval (m:*label148) (h:*label148)
   390 label *label148
 
   398 label *label149
   399 ucontrol move :x :y
   400 ucontrol payEnter
-    * label *label150
   401 read *tmp82 .controller ".megas"
   402 jump *label149 equal *tmp82 false
-    * label *label151
   403 write true .controller ".finished"
   404 control enabled processor1 false
   405 control enabled processor8 false
 
   445 setaddr :lineUpUnits*retaddr *label163 (h:*label163)
   446 call *label44 *invalid :lineUpUnits*retval (m:*label163) (h:*label163)
   447 label *label163
-    * label *label158
   448 jump *label157 always
-    * label *label159
-    * label *label152
   449 end
   450 label *label15
   451 set .ERROR :error:error
   452 stop
-    * label *label164
   453 return :error*retaddr
   454 end
   455 label *label35
 
   459 op max *tmp232 0 *tmp231
   460 write *tmp232 processor7 ".sandTarget"
   461 jump *label166 equal .thoriumContainer false
-    * label *label505
   462 write "Phase 2: servicing thorium drill" processor2 ".status1"
-    * label *label506
   463 sensor *tmp234 .thoriumBattery @totalPower
   464 jump *label170 greaterThanEq *tmp234 2000
   465 sensor *tmp237 .thoriumGenerator @coal
 
   473 label *label176
   474 jump *label175 always
   475 label *label174
-    * label *label531
   476 sensor *tmp339 .thoriumGenerator @itemCapacity
   477 op min :supplyBlockFromCore:cap *tmp339 30
   478 set :transportStatus:target :supplyBlockFromCore:cap
 
   503 jump *label537 equal *tmp344 false
   504 ucontrol itemDrop @air 1000
   505 label *label537
-    * label *label538
-    * label *label539
   506 sensor *tmp346 @unit @coal
   507 op lessThan *tmp347 *tmp346 :supplyBlockFromCore:cap
   508 sensor *tmp348 .core @coal
   509 op land *tmp349 *tmp347 *tmp348
   510 jump *label536 notEqual *tmp349 false
-    * label *label540
   511 set :depositItems:block .thoriumGenerator
   512 set :depositItems:item @coal
   513 setaddr :depositItems*retaddr *label541 (h:*label541)
   514 call *label21 *invalid :depositItems*retval (m:*label541) (h:*label541)
   515 label *label541
-    * label *label542
   516 label *label175
   517 label *label172
-    * label *label173
   518 label *label170
-    * label *label171
   519 set :fetchBlock:block .thoriumContainer
   520 set :fetchBlock:item @thorium
   521 setaddr :fetchBlock*retaddr *label178 (h:*label178)
 
   524 sensor *tmp243 .core @thorium
   525 jump *label179 lessThanEq *tmp243 400
   526 write 4 .controller ".polyTarget"
-    * label *label181
   527 label *label179
-    * label *label180
-    * label *label168
   528 jump *label167 always
   529 label *label166
   530 read *tmp80 .controller ".monos"
   531 jump *label182 lessThanEq *tmp80 1
-    * label *label507
   532 write "Phase 1: supplying base" processor2 ".status1"
-    * label *label508
   533 set :mineOre.1:ore @coal
   534 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   535 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   536 label *label186
-    * label *label184
   537 jump *label183 always
   538 label *label182
   539 set :supplyBase0:supplied false
 
   542 jump *label190 greaterThanEq *tmp250 graphite
   543 sensor *tmp253 AJEMJJ-graphite-press0 @coal
   544 jump *label192 greaterThanEq *tmp253 5
-    * label *label509
   545 write "Goal 1: graphite requirement" processor2 ".status1"
-    * label *label510
   546 set :supplyBlock:block AJEMJJ-graphite-press0
   547 set :supplyBlock:ore @coal
   548 setaddr :supplyBlock*retaddr *label195 (h:*label195)
 
   550 label *label195
   551 set :supplyBase0:supplied true
   552 label *label192
-    * label *label193
   553 label *label190
-    * label *label191
   554 sensor *tmp256 .core @silicon
   555 jump *label196 greaterThanEq *tmp256 silicon
   556 sensor *tmp259 ALMQJN-silicon-smelter4 @coal
   557 jump *label198 greaterThanEq *tmp259 5
-    * label *label511
   558 write "Goal 2: coal for silicon requirement" processor2 ".status1"
-    * label *label512
   559 set :supplyBlock:block ALMQJN-silicon-smelter4
   560 set :supplyBlock:ore @coal
   561 setaddr :supplyBlock*retaddr *label201 (h:*label201)
 
   566 label *label198
   567 sensor *tmp262 ALMQJN-silicon-smelter4 @sand
   568 jump *label202 greaterThanEq *tmp262 5
-    * label *label513
   569 write "Goal 3: sand for silicon requirement" processor2 ".status1"
-    * label *label514
   570 set :supplyBlock:block ALMQJN-silicon-smelter4
   571 set :supplyBlock:ore @sand
   572 setaddr :supplyBlock*retaddr *label205 (h:*label205)
 
   574 label *label205
   575 set :supplyBase0:supplied true
   576 label *label202
-    * label *label203
   577 label *label199
   578 label *label196
-    * label *label197
   579 sensor *tmp265 AJTJK-battery1 @totalPower
   580 jump *label206 greaterThanEq *tmp265 .powerTarget
   581 sensor *tmp268 AJRJM-combustion-generator3 @coal
   582 jump *label208 greaterThanEq *tmp268 2
-    * label *label515
   583 write "Goal 4: supplying generator" processor2 ".status1"
-    * label *label516
   584 set :supplyBlock:block AJRJM-combustion-generator3
   585 set :supplyBlock:ore @coal
   586 setaddr :supplyBlock*retaddr *label211 (h:*label211)
 
   588 label *label211
   589 set :supplyBase0:supplied true
   590 label *label208
-    * label *label209
   591 label *label206
-    * label *label207
   592 label *label188
-    * label *label189
   593 set *tmp273 100
   594 sensor *tmp271 .core @titanium
   595 jump *label213 greaterThanEq *tmp271 titanium
 
   603 sensor *tmp282 AJTJK-battery1 @totalPower
   604 op mul *tmp283 A©JNJP-unloader6 .powerTarget
   605 jump *label218 greaterThanEq *tmp282 *tmp283
-    * label *label517
   606 write "Goal 5: supplying generator" processor2 ".status1"
-    * label *label518
   607 set :mineOre.1:ore @coal
   608 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   609 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
 
   612 label *label218
   613 sensor *tmp286 .core @silicon
   614 jump *label222 greaterThanEq *tmp286 silicon
-    * label *label519
   615 write "Goal 6: silicon requirement" processor2 ".status1"
-    * label *label520
   616 sensor :supplyBase0:coal .core @coal
   617 sensor :supplyBase0:sand .core @sand
   618 select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase0:sand @coal @sand
 
   623 label *label222
   624 sensor *tmp293 .core @copper
   625 jump *label228 greaterThanEq *tmp293 copper
-    * label *label521
   626 write "Goal 7: copper requirement" processor2 ".status1"
-    * label *label522
   627 set :mineOre.1:ore @copper
   628 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   629 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
 
   632 label *label228
   633 sensor *tmp296 .core @lead
   634 jump *label232 greaterThanEq *tmp296 lead
-    * label *label523
   635 write "Goal 8: lead requirement" processor2 ".status1"
-    * label *label524
   636 set :mineOre.1:ore @lead
   637 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   638 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
 
   641 label *label232
   642 sensor *tmp299 .core @metaglass
   643 jump *label236 greaterThanEq *tmp299 metaglass
-    * label *label525
   644 write "Goal 9: metaglass requirement" processor2 ".status1"
-    * label *label526
   645 set :mineOre.1:ore @sand
   646 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   647 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   648 label *label239
   649 jump *label237 always
   650 label *label236
-    * label *label527
   651 write "Goal 10: supplying base" processor2 ".status1"
-    * label *label528
   652 sensor :supplyBase0:coal.1 .core @coal
   653 sensor :supplyBase0:sand.1 .core @sand
   654 select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supplyBase0:sand.1 @coal @sand
 
   661 label *label223
   662 label *label219
   663 label *label216
-    * label *label217
   664 jump *label215 always
   665 label *label214
-    * label *label529
   666 write "Goal 11: Fetching titanium" processor2 ".status1"
-    * label *label530
   667 set :fetchBlock:block .titaniumDrill
   668 set :fetchBlock:item @titanium
   669 setaddr :fetchBlock*retaddr *label245 (h:*label245)
   670 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   671 label *label245
   672 label *label215
-    * label *label187
   673 label *label183
   674 label *label167
-    * label *label165
   675 return :supplyBase*retaddr
   676 end
   677 label *label38
 
   700 set :buildRemoteBlock*retval :buildBlock*retval
   701 jump *label246 always
   702 label *label247
-    * label *label248
   703 set :buildRemoteBlock*retval false
   704 jump *label246 always
   705 label *label246
 
   732 write :buildBlock*retval processor2 :buildBlockFromCfg:cfg
   733 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   734 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label251
   735 return :buildBlockFromCfg*retaddr
   736 end
   737 label *label40
 
   740 setaddr :buildBlockFromCfg*retaddr *label255 (h:*label255)
   741 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   742 label *label255
-    * label *label254
   743 return :buildBlockFromCfg.1*retaddr
   744 end
   745 label *label41
 
   760 setaddr :meetTarget*retaddr *label258 (h:*label258)
   761 call *label36 *invalid :meetTarget*retval (m:*label258) (h:*label258)
   762 label *label258
-    * label *label256
   763 return :meetTarget.1*retaddr
   764 end
   765 label *label42
 
   781 write 0 .controller ".leadReserve"
   782 write 0 .controller ".siliconReserve"
   783 write 0 .controller ".graphiteReserve"
-    * label *label259
   784 return :buildUnits*retaddr
   785 end
   786 label *label43
   787 label *label262
   788 ubind :flagUnits:unit
   789 set :flagUnits:firstUnit @unit
-    * label *label263
   790 jump *label262 equal :flagUnits:firstUnit null
-    * label *label264
   791 op add :flagUnits:x .coreX 8
   792 label *label265
   793 ucontrol flag :flagUnits:x
   794 op add :flagUnits:x :flagUnits:x 4
   795 ubind :flagUnits:unit
-    * label *label266
   796 jump *label265 notEqual @unit :flagUnits:firstUnit
-    * label *label267
-    * label *label261
   797 return :flagUnits*retaddr
   798 end
   799 label *label44
 
   807 jump *label272 equal *tmp317 false
   808 ucontrol stop
   809 label *label272
-    * label *label273
   810 ubind :lineUpUnits:unit
-    * label *label270
   811 jump *label269 notEqual @unit :lineUpUnits:firstUnit
-    * label *label271
-    * label *label268
   812 return :lineUpUnits*retaddr
   813 end
   814 label *label24
 
   824 setaddr :mineOre*retaddr *label277 (h:*label277)
   825 call *label23 *invalid :mineOre*retval (m:*label277) (h:*label277)
   826 label *label277
-    * label *label275
   827 return :mineOre.1*retaddr
   828 end
   829 label *label25
 
   858 jump *label286 equal *tmp328 false
   859 ucontrol itemDrop @air 1000
   860 label *label286
-    * label *label287
-    * label *label284
   861 sensor *tmp330 @unit :fetchBlock:item
   862 op lessThan *tmp331 *tmp330 30
   863 sensor *tmp332 :fetchBlock:block :fetchBlock:item
   864 op land *tmp333 *tmp331 *tmp332
   865 jump *label283 notEqual *tmp333 false
-    * label *label285
   866 set :depositItems:block .core
   867 set :depositItems:item :fetchBlock:item
   868 setaddr :depositItems*retaddr *label288 (h:*label288)
   869 call *label21 *invalid :depositItems*retval (m:*label288) (h:*label288)
   870 label *label288
-    * label *label278
   871 return :fetchBlock*retaddr
   872 end
   873 label *label26
 
   888 call *label23 *invalid :mineOre*retval (m:*label293) (h:*label293)
   889 label *label293
   890 label *label291
-    * label *label292
-    * label *label289
   891 return :supplyBlock*retaddr
   892 end
   893 label *label29
 
   911 sensor :unpackCfg:ti :unpackCfg:type @titanium
   912 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   913 sensor :unpackCfg:th :unpackCfg:type @thorium
-    * label *label305
   914 return :unpackCfg*retaddr
   915 end
   916 label *label36
-    * label *label476
   917 op sign :meetTarget:count :meetTarget:copper
-    * label *label477
-    * label *label480
   918 op sign *tmp377 :meetTarget:lead
   919 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label481
-    * label *label484
   920 op sign *tmp377 :meetTarget:graphite
   921 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label485
-    * label *label488
   922 op sign *tmp377 :meetTarget:silicon
   923 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label489
-    * label *label492
   924 op sign *tmp377 :meetTarget:titanium
   925 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label493
-    * label *label496
   926 op sign *tmp377 :meetTarget:metaglass
   927 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label497
-    * label *label500
   928 op sign *tmp377 :meetTarget:thorium
   929 op add :meetTarget:count :meetTarget:count *tmp377
-    * label *label501
-    * label *label309
   930 write :meetTarget:count processor2 ".totalTargets"
   931 write :meetTarget:block processor2 ".nextBlock"
   932 write :meetTarget:copper processor2 ".targetCopper"
 
   967 set *tmp389 false
   968 jump *label320 always
   969 label *label321
-    * label *label322
   970 sensor *tmp393 .core @lead
   971 jump *label323 greaterThanEq *tmp393 lead
   972 set *tmp389 false
   973 jump *label320 always
   974 label *label323
-    * label *label324
   975 sensor *tmp396 .core @graphite
   976 jump *label325 greaterThanEq *tmp396 graphite
   977 set *tmp389 false
   978 jump *label320 always
   979 label *label325
-    * label *label326
   980 sensor *tmp399 .core @silicon
   981 jump *label327 greaterThanEq *tmp399 silicon
   982 set *tmp389 false
   983 jump *label320 always
   984 label *label327
-    * label *label328
   985 sensor *tmp402 .core @titanium
   986 jump *label329 greaterThanEq *tmp402 titanium
   987 set *tmp389 false
   988 jump *label320 always
   989 label *label329
-    * label *label330
   990 sensor *tmp405 .core @metaglass
   991 jump *label331 greaterThanEq *tmp405 metaglass
   992 set *tmp389 false
   993 jump *label320 always
   994 label *label331
-    * label *label332
   995 sensor *tmp408 .core @thorium
   996 jump *label333 greaterThanEq *tmp408 thorium
   997 set *tmp389 false
   998 jump *label320 always
   999 label *label333
-    * label *label334
  1000 set *tmp389 true
  1001 jump *label320 always
  1002 label *label320
 
  1004 setaddr :supplyBase*retaddr *label335 (h:*label335)
  1005 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1006 label *label335
-    * label *label318
  1007 jump *label317 always
  1008 label *label319
  1009 jump *label336 equal :meetTarget:forBuild false
 
  1019 set *tmp414 false
  1020 jump *label342 always
  1021 label *label343
-    * label *label344
  1022 sensor *tmp418 .core @lead
  1023 jump *label345 greaterThanEq *tmp418 lead
  1024 set *tmp414 false
  1025 jump *label342 always
  1026 label *label345
-    * label *label346
  1027 sensor *tmp421 .core @graphite
  1028 jump *label347 greaterThanEq *tmp421 graphite
  1029 set *tmp414 false
  1030 jump *label342 always
  1031 label *label347
-    * label *label348
  1032 sensor *tmp424 .core @silicon
  1033 jump *label349 greaterThanEq *tmp424 silicon
  1034 set *tmp414 false
  1035 jump *label342 always
  1036 label *label349
-    * label *label350
  1037 sensor *tmp427 .core @titanium
  1038 jump *label351 greaterThanEq *tmp427 titanium
  1039 set *tmp414 false
  1040 jump *label342 always
  1041 label *label351
-    * label *label352
  1042 sensor *tmp430 .core @metaglass
  1043 jump *label353 greaterThanEq *tmp430 metaglass
  1044 set *tmp414 false
  1045 jump *label342 always
  1046 label *label353
-    * label *label354
  1047 sensor *tmp433 .core @thorium
  1048 jump *label355 greaterThanEq *tmp433 thorium
  1049 set *tmp414 false
  1050 jump *label342 always
  1051 label *label355
-    * label *label356
  1052 set *tmp414 true
  1053 jump *label342 always
  1054 label *label342
 
  1056 setaddr :supplyBase*retaddr *label357 (h:*label357)
  1057 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1058 label *label357
-    * label *label340
  1059 jump *label339 always
  1060 label *label341
  1061 label *label336
-    * label *label337
-    * label *label306
  1062 return :meetTarget*retaddr
  1063 end
  1064 label *label37
 
  1091 read :buildBlock*retval processor5 ":buildBlockAt*retval"
  1092 write false .controller ":buildStop*finished"
  1093 write 2 .controller "@counter"
-    * label *label358
  1094 return :buildBlock*retaddr
  1095 end
  1096 label *label12
  1097 write :status2:text processor2 ".status2"
  1098 write :status2:item processor2 ".item2"
  1099 write :status2:block processor2 ".block2"
-    * label *label361
  1100 return :status2*retaddr
  1101 end
  1102 label *label14
  1103 write :transportStatus:target processor2 ".transportTarget"
  1104 write :transportStatus:item processor2 ".transportItem"
-    * label *label362
  1105 return :transportStatus*retaddr
  1106 end
  1107 label *label18
-    * label *label543
  1108 write "Moving..." processor2 ".status3"
-    * label *label544
  1109 label *label365
  1110 sensor *tmp446 @unit @firstItem
  1111 jump *label368 equal *tmp446 null
  1112 ucontrol itemDrop @air 1000
  1113 label *label368
-    * label *label369
  1114 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label366
  1115 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp449
  1116 jump *label365 equal *tmp449 false
-    * label *label367
-    * label *label363
  1117 return :moveToEmpty*retaddr
  1118 end
  1119 label *label19
 
  1121 sensor *tmp451 @unit @firstItem
  1122 jump *label373 equal *tmp451 null
  1123 ucontrol itemDrop @air 1000
-    * label *label372
  1124 jump *label371 always
  1125 label *label373
-    * label *label370
  1126 return :dropAll*retaddr
  1127 end
  1128 label *label21
-    * label *label545
  1129 write "Depositing..." processor2 ".status3"
-    * label *label546
  1130 sensor *tmp453 @unit @firstItem
  1131 jump *label376 notEqual *tmp453 :depositItems:item
-    * label *label551
  1132 sensor *tmp502 :depositItems:block @x
  1133 sensor *tmp503 :depositItems:block @y
-    * label *label559
-    * label *label560
  1134 write "Moving..." processor2 ".status3"
-    * label *label561
  1135 label *label562
  1136 ucontrol within *tmp502 *tmp503 6 *tmp508
  1137 jump *label564 notEqual *tmp508 false
  1138 ucontrol approach *tmp502 *tmp503 5.5
-    * label *label563
  1139 jump *label562 always
  1140 label *label564
-    * label *label565
-    * label *label553
  1141 sensor :depositItems:cap :depositItems:block @itemCapacity
  1142 label *label379
  1143 ucontrol itemDrop :depositItems:block 30
-    * label *label380
  1144 sensor *tmp457 @unit @firstItem
  1145 op mul *tmp458 *tmp457 :depositItems:cap
  1146 sensor *tmp459 :depositItems:block :depositItems:item
  1147 jump *label379 greaterThan *tmp458 *tmp459
-    * label *label381
  1148 jump *label377 always
  1149 label *label376
  1150 label *label382
  1151 sensor *tmp461 @unit @firstItem
  1152 jump *label384 equal *tmp461 null
  1153 ucontrol itemDrop @air 1000
-    * label *label383
  1154 jump *label382 always
  1155 label *label384
  1156 label *label377
 
  1159 setaddr :transportStatus*retaddr *label385 (h:*label385)
  1160 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1161 label *label385
-    * label *label374
  1162 return :depositItems*retaddr
  1163 end
  1164 label *label23
 
  1168 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1169 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1170 label *label387
-    * label *label554
  1171 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
  1172 jump *label556 notEqual *tmp504 false
  1173 set :error:error "Cannot locate ore"
 
  1175 call *label15 *invalid :error*retval (m:*label555) (h:*label555)
  1176 label *label555
  1177 label *label556
-    * label *label557
-    * label *label558
  1178 set :mineOre:x :locateOre:x
  1179 set :mineOre:y :locateOre:y
  1180 set :moveToEmpty:x :locateOre:x
 
  1188 call *label19 *invalid :dropAll*retval (m:*label392) (h:*label392)
  1189 label *label392
  1190 label *label390
-    * label *label391
-    * label *label547
  1191 write "Mining..." processor2 ".status3"
-    * label *label548
  1192 op add :mineOre:stop @second 10
  1193 label *label394
  1194 sensor :mineOre:item @unit @firstItem
 
  1198 jump *label397 equal *tmp471 false
  1199 jump *label396 always
  1200 label *label397
-    * label *label398
  1201 ucontrol mine :mineOre:x :mineOre:y
  1202 jump *label399 lessThanEq @second :mineOre:stop
  1203 jump *label396 always
  1204 label *label399
-    * label *label400
  1205 jump *label401 notEqual .noTarget false
  1206 sensor *tmp478 .core @copper
  1207 jump *label404 greaterThanEq *tmp478 copper
  1208 set *tmp477 false
  1209 jump *label403 always
  1210 label *label404
-    * label *label405
  1211 sensor *tmp481 .core @lead
  1212 jump *label406 greaterThanEq *tmp481 lead
  1213 set *tmp477 false
  1214 jump *label403 always
  1215 label *label406
-    * label *label407
  1216 sensor *tmp484 .core @graphite
  1217 jump *label408 greaterThanEq *tmp484 graphite
  1218 set *tmp477 false
  1219 jump *label403 always
  1220 label *label408
-    * label *label409
  1221 sensor *tmp487 .core @silicon
  1222 jump *label410 greaterThanEq *tmp487 silicon
  1223 set *tmp477 false
  1224 jump *label403 always
  1225 label *label410
-    * label *label411
  1226 sensor *tmp490 .core @titanium
  1227 jump *label412 greaterThanEq *tmp490 titanium
  1228 set *tmp477 false
  1229 jump *label403 always
  1230 label *label412
-    * label *label413
  1231 sensor *tmp493 .core @metaglass
  1232 jump *label414 greaterThanEq *tmp493 metaglass
  1233 set *tmp477 false
  1234 jump *label403 always
  1235 label *label414
-    * label *label415
  1236 sensor *tmp496 .core @thorium
  1237 jump *label416 greaterThanEq *tmp496 thorium
  1238 set *tmp477 false
  1239 jump *label403 always
  1240 label *label416
-    * label *label417
  1241 set *tmp477 true
  1242 jump *label403 always
  1243 label *label403
  1244 jump *label418 equal *tmp477 false
  1245 jump *label396 always
  1246 label *label418
-    * label *label419
  1247 label *label401
-    * label *label402
-    * label *label395
  1248 sensor *tmp500 @unit @totalItems
  1249 jump *label394 lessThan *tmp500 :mineOre:amount
  1250 label *label396
 
  1254 setaddr :depositItems*retaddr *label420 (h:*label420)
  1255 call *label21 *invalid :depositItems*retval (m:*label420) (h:*label420)
  1256 label *label420
-    * label *label386
  1257 return :mineOre*retaddr
  1258 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-4 instructions):
 
   166 call *label35 *invalid :supplyBase*retval (m:*label93) (h:*label93)
   167 label *label93
   168 sensor *tmp153 AJTJK-battery1 @totalPower
-    * jump *label94 greaterThanEq *tmp153 300
-    * jump *label92 always
+  169 jump *label92 lessThan *tmp153 300
   170 label *label94
   171 read *tmp80 .controller ".monos"
   172 jump *label90 lessThan *tmp80 3
 
  1194 op notEqual *tmp469 :mineOre:item null
  1195 op notEqual *tmp470 :mineOre:item :mineOre:ore
  1196 op land *tmp471 *tmp469 *tmp470
-    * jump *label397 equal *tmp471 false
-    * jump *label396 always
+ 1197 jump *label396 notEqual *tmp471 false
  1198 label *label397
  1199 ucontrol mine :mineOre:x :mineOre:y
-    * jump *label399 lessThanEq @second :mineOre:stop
-    * jump *label396 always
+ 1200 jump *label396 greaterThan @second :mineOre:stop
  1201 label *label399
  1202 jump *label401 notEqual .noTarget false
  1203 sensor *tmp478 .core @copper
 
  1238 set *tmp477 true
  1239 jump *label403 always
  1240 label *label403
-    * jump *label418 equal *tmp477 false
-    * jump *label396 always
+ 1241 jump *label396 notEqual *tmp477 false
  1242 label *label418
  1243 label *label401
  1244 sensor *tmp500 @unit @totalItems

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   167 label *label93
   168 sensor *tmp153 AJTJK-battery1 @totalPower
   169 jump *label92 lessThan *tmp153 300
-    * label *label94
   170 read *tmp80 .controller ".monos"
   171 jump *label90 lessThan *tmp80 3
   172 label *label92
 
  1194 op notEqual *tmp470 :mineOre:item :mineOre:ore
  1195 op land *tmp471 *tmp469 *tmp470
  1196 jump *label396 notEqual *tmp471 false
-    * label *label397
  1197 ucontrol mine :mineOre:x :mineOre:y
  1198 jump *label396 greaterThan @second :mineOre:stop
-    * label *label399
  1199 jump *label401 notEqual .noTarget false
  1200 sensor *tmp478 .core @copper
  1201 jump *label404 greaterThanEq *tmp478 copper
 
  1236 jump *label403 always
  1237 label *label403
  1238 jump *label396 notEqual *tmp477 false
-    * label *label418
  1239 label *label401
  1240 sensor *tmp500 @unit @totalItems
  1241 jump *label394 lessThan *tmp500 :mineOre:amount

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   223 label *label109
   224 read *tmp81 .controller ".polys"
   225 jump *label111 greaterThanEq *tmp81 2
-    * setaddr :supplyBase*retaddr *label112 (h:*label112)
+  226 setaddr :supplyBase*retaddr *label109 (h:*label112)
   227 call *label35 *invalid :supplyBase*retval (m:*label112) (h:*label112)
   228 label *label112
   229 jump *label109 always
 
   232 label *label114
   233 read *tmp79 .controller ".flares"
   234 jump *label116 greaterThanEq *tmp79 2
-    * setaddr :supplyBase*retaddr *label117 (h:*label117)
+  235 setaddr :supplyBase*retaddr *label114 (h:*label117)
   236 call *label35 *invalid :supplyBase*retval (m:*label117) (h:*label117)
   237 label *label117
   238 jump *label114 always
 
   366 label *label139
   367 read *tmp81 .controller ".polys"
   368 jump *label141 greaterThanEq *tmp81 3
-    * setaddr :supplyBase*retaddr *label142 (h:*label142)
+  369 setaddr :supplyBase*retaddr *label139 (h:*label142)
   370 call *label35 *invalid :supplyBase*retval (m:*label142) (h:*label142)
   371 label *label142
   372 jump *label139 always
 
   440 label *label162
   441 op sub :lineUpUnits:y .coreY 6
   442 set :lineUpUnits:unit @flare
-    * setaddr :lineUpUnits*retaddr *label163 (h:*label163)
+  443 setaddr :lineUpUnits*retaddr *label157 (h:*label163)
   444 call *label44 *invalid :lineUpUnits*retval (m:*label163) (h:*label163)
   445 label *label163
   446 jump *label157 always
 
   466 jump *label174 greaterThanEq *tmp240 50
   467 set :supplyBlock:block .thoriumGenerator
   468 set :supplyBlock:ore @coal
-    * setaddr :supplyBlock*retaddr *label176 (h:*label176)
+  469 setaddr :supplyBlock*retaddr *label175 (h:*label176)
   470 call *label26 *invalid :supplyBlock*retval (m:*label176) (h:*label176)
   471 label *label176
   472 jump *label175 always
 
   520 call *label25 *invalid :fetchBlock*retval (m:*label178) (h:*label178)
   521 label *label178
   522 sensor *tmp243 .core @thorium
-    * jump *label179 lessThanEq *tmp243 400
+  523 jump *label167 lessThanEq *tmp243 400
   524 write 4 .controller ".polyTarget"
   525 label *label179
-    * jump *label167 always
+  526 return :supplyBase*retaddr
   527 label *label166
   528 read *tmp80 .controller ".monos"
   529 jump *label182 lessThanEq *tmp80 1
 
   532 setaddr :mineOre.1*retaddr *label186 (h:*label186)
   533 call *label24 *invalid :mineOre.1*retval (m:*label186) (h:*label186)
   534 label *label186
-    * jump *label183 always
+  535 return :supplyBase*retaddr
   536 label *label182
   537 set :supplyBase0:supplied false
   538 jump *label188 notEqual A©JNJP-unloader6 null
 
   597 label *label213
   598 sensor *tmp277 .titaniumDrill @titanium
   599 jump *label214 greaterThanEq *tmp277 *tmp273
-    * jump *label216 notEqual :supplyBase0:supplied false
+  600 jump *label215 notEqual :supplyBase0:supplied false
   601 sensor *tmp282 AJTJK-battery1 @totalPower
   602 op mul *tmp283 A©JNJP-unloader6 .powerTarget
   603 jump *label218 greaterThanEq *tmp282 *tmp283
 
   606 setaddr :mineOre.1*retaddr *label221 (h:*label221)
   607 call *label24 *invalid :mineOre.1*retval (m:*label221) (h:*label221)
   608 label *label221
-    * jump *label219 always
+  609 return :supplyBase*retaddr
   610 label *label218
   611 sensor *tmp286 .core @silicon
   612 jump *label222 greaterThanEq *tmp286 silicon
 
   617 setaddr :mineOre.1*retaddr *label227 (h:*label227)
   618 call *label24 *invalid :mineOre.1*retval (m:*label227) (h:*label227)
   619 label *label227
-    * jump *label223 always
+  620 return :supplyBase*retaddr
   621 label *label222
   622 sensor *tmp293 .core @copper
   623 jump *label228 greaterThanEq *tmp293 copper
 
   626 setaddr :mineOre.1*retaddr *label231 (h:*label231)
   627 call *label24 *invalid :mineOre.1*retval (m:*label231) (h:*label231)
   628 label *label231
-    * jump *label229 always
+  629 return :supplyBase*retaddr
   630 label *label228
   631 sensor *tmp296 .core @lead
   632 jump *label232 greaterThanEq *tmp296 lead
 
   635 setaddr :mineOre.1*retaddr *label235 (h:*label235)
   636 call *label24 *invalid :mineOre.1*retval (m:*label235) (h:*label235)
   637 label *label235
-    * jump *label233 always
+  638 return :supplyBase*retaddr
   639 label *label232
   640 sensor *tmp299 .core @metaglass
   641 jump *label236 greaterThanEq *tmp299 metaglass
 
   644 setaddr :mineOre.1*retaddr *label239 (h:*label239)
   645 call *label24 *invalid :mineOre.1*retval (m:*label239) (h:*label239)
   646 label *label239
-    * jump *label237 always
+  647 return :supplyBase*retaddr
   648 label *label236
   649 write "Goal 10: supplying base" processor2 ".status1"
   650 sensor :supplyBase0:coal.1 .core @coal
 
   659 label *label223
   660 label *label219
   661 label *label216
-    * jump *label215 always
+  662 return :supplyBase*retaddr
   663 label *label214
   664 write "Goal 11: Fetching titanium" processor2 ".status1"
   665 set :fetchBlock:block .titaniumDrill
 
   696 call *label37 *invalid :buildBlock*retval (m:*label250) (h:*label250)
   697 label *label250
   698 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label246 always
+  699 return :buildRemoteBlock*retaddr
   700 label *label247
   701 set :buildRemoteBlock*retval false
-    * jump *label246 always
+  702 return :buildRemoteBlock*retaddr
   703 label *label246
   704 return :buildRemoteBlock*retaddr
   705 end
 
   999 jump *label320 always
  1000 label *label320
  1001 jump *label319 notEqual *tmp389 false
-    * setaddr :supplyBase*retaddr *label335 (h:*label335)
+ 1002 setaddr :supplyBase*retaddr *label317 (h:*label335)
  1003 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
  1004 label *label335
  1005 jump *label317 always
 
  1051 jump *label342 always
  1052 label *label342
  1053 jump *label341 notEqual *tmp414 false
-    * setaddr :supplyBase*retaddr *label357 (h:*label357)
+ 1054 setaddr :supplyBase*retaddr *label339 (h:*label357)
  1055 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
  1056 label *label357
  1057 jump *label339 always

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-30 instructions):
 
   225 jump *label111 greaterThanEq *tmp81 2
   226 setaddr :supplyBase*retaddr *label109 (h:*label112)
   227 call *label35 *invalid :supplyBase*retval (m:*label112) (h:*label112)
-    * label *label112
-    * jump *label109 always
   228 label *label111
   229 write 2 .controller ".flareTarget"
   230 label *label114
 
   232 jump *label116 greaterThanEq *tmp79 2
   233 setaddr :supplyBase*retaddr *label114 (h:*label117)
   234 call *label35 *invalid :supplyBase*retval (m:*label117) (h:*label117)
-    * label *label117
-    * jump *label114 always
   235 label *label116
   236 write @ore-titanium processor2 ".nextBlock"
   237 ubind @flare
 
   364 jump *label141 greaterThanEq *tmp81 3
   365 setaddr :supplyBase*retaddr *label139 (h:*label142)
   366 call *label35 *invalid :supplyBase*retval (m:*label142) (h:*label142)
-    * label *label142
-    * jump *label139 always
   367 label *label141
   368 write 0 .controller ".monoTarget"
   369 write 3209 .controller ".powerTarget"
 
   436 set :lineUpUnits:unit @flare
   437 setaddr :lineUpUnits*retaddr *label157 (h:*label163)
   438 call *label44 *invalid :lineUpUnits*retval (m:*label163) (h:*label163)
-    * label *label163
-    * jump *label157 always
-    * end
   439 label *label15
   440 set .ERROR :error:error
   441 stop
   442 return :error*retaddr
-    * end
   443 label *label35
   444 op add *tmp229 .siliconMonoSurplus silicon
   445 sensor *tmp230 .core @silicon
 
   458 set :supplyBlock:ore @coal
   459 setaddr :supplyBlock*retaddr *label175 (h:*label176)
   460 call *label26 *invalid :supplyBlock*retval (m:*label176) (h:*label176)
-    * label *label176
-    * jump *label175 always
   461 label *label174
   462 sensor *tmp339 .thoriumGenerator @itemCapacity
   463 op min :supplyBlockFromCore:cap *tmp339 30
 
   510 sensor *tmp243 .core @thorium
   511 jump *label167 lessThanEq *tmp243 400
   512 write 4 .controller ".polyTarget"
-    * label *label179
   513 return :supplyBase*retaddr
   514 label *label166
   515 read *tmp80 .controller ".monos"
 
   640 setaddr :mineOre.1*retaddr *label243 (h:*label243)
   641 call *label24 *invalid :mineOre.1*retval (m:*label243) (h:*label243)
   642 label *label243
-    * label *label237
-    * label *label233
-    * label *label229
-    * label *label223
-    * label *label219
-    * label *label216
   643 return :supplyBase*retaddr
   644 label *label214
   645 write "Goal 11: Fetching titanium" processor2 ".status1"
 
   649 call *label25 *invalid :fetchBlock*retval (m:*label245) (h:*label245)
   650 label *label245
   651 label *label215
-    * label *label183
   652 label *label167
   653 return :supplyBase*retaddr
-    * end
   654 label *label38
   655 op add *tmp306 :buildRemoteBlock:x :buildRemoteBlock:y
   656 jump *label247 lessThanEq *tmp306 0
 
   679 label *label247
   680 set :buildRemoteBlock*retval false
   681 return :buildRemoteBlock*retaddr
-    * label *label246
-    * return :buildRemoteBlock*retaddr
-    * end
   682 label *label39
   683 set :unpackCfg:cfg :buildBlockFromCfg:cfg
   684 setaddr :unpackCfg*retaddr *label252 (h:*label252)
 
   707 write :buildBlock*retval .controller :buildBlockFromCfg:cfg
   708 set :buildBlockFromCfg*retval :buildBlock*retval
   709 return :buildBlockFromCfg*retaddr
-    * end
   710 label *label40
   711 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
   712 set :buildBlockFromCfg:config null
 
   714 call *label39 *invalid :buildBlockFromCfg*retval (m:*label255) (h:*label255)
   715 label *label255
   716 return :buildBlockFromCfg.1*retaddr
-    * end
   717 label *label41
   718 set :unpackCfg:cfg :meetTarget.1:cfg
   719 setaddr :unpackCfg*retaddr *label257 (h:*label257)
 
   733 call *label36 *invalid :meetTarget*retval (m:*label258) (h:*label258)
   734 label *label258
   735 return :meetTarget.1*retaddr
-    * end
   736 label *label42
   737 set :meetTarget:block 0
   738 set :meetTarget:copper 0
 
   753 write 0 .controller ".siliconReserve"
   754 write 0 .controller ".graphiteReserve"
   755 return :buildUnits*retaddr
-    * end
   756 label *label43
   757 label *label262
   758 ubind :flagUnits:unit
 
   765 ubind :flagUnits:unit
   766 jump *label265 notEqual @unit :flagUnits:firstUnit
   767 return :flagUnits*retaddr
-    * end
   768 label *label44
   769 ubind :lineUpUnits:unit
   770 set :lineUpUnits:firstUnit @unit
 
   779 ubind :lineUpUnits:unit
   780 jump *label269 notEqual @unit :lineUpUnits:firstUnit
   781 return :lineUpUnits*retaddr
-    * end
   782 label *label24
   783 set :status2:text "Mining "
   784 set :status2:item :mineOre.1:ore
 
   793 call *label23 *invalid :mineOre*retval (m:*label277) (h:*label277)
   794 label *label277
   795 return :mineOre.1*retaddr
-    * end
   796 label *label25
   797 sensor *tmp321 :fetchBlock:block @itemCapacity
   798 op min :transportStatus:target *tmp321 30
 
   836 call *label21 *invalid :depositItems*retval (m:*label288) (h:*label288)
   837 label *label288
   838 return :fetchBlock*retaddr
-    * end
   839 label *label26
   840 set :status2:text "Supplying "
   841 set :status2:item :supplyBlock:ore
 
   855 label *label293
   856 label *label291
   857 return :supplyBlock*retaddr
-    * end
   858 label *label29
   859 read *tmp351 :unpackCfg:cfg 1
   860 op sub *tmp352 *tmp351 74
 
   877 sensor :unpackCfg:mg :unpackCfg:type @metaglass
   878 sensor :unpackCfg:th :unpackCfg:type @thorium
   879 return :unpackCfg*retaddr
-    * end
   880 label *label36
   881 op sign :meetTarget:count :meetTarget:copper
   882 op sign *tmp377 :meetTarget:lead
 
   967 jump *label319 notEqual *tmp389 false
   968 setaddr :supplyBase*retaddr *label317 (h:*label335)
   969 call *label35 *invalid :supplyBase*retval (m:*label335) (h:*label335)
-    * label *label335
-    * jump *label317 always
   970 label *label319
   971 jump *label336 equal :meetTarget:forBuild false
   972 write false .controller ":buildStart*finished"
 
  1017 jump *label341 notEqual *tmp414 false
  1018 setaddr :supplyBase*retaddr *label339 (h:*label357)
  1019 call *label35 *invalid :supplyBase*retval (m:*label357) (h:*label357)
-    * label *label357
-    * jump *label339 always
  1020 label *label341
  1021 label *label336
  1022 return :meetTarget*retaddr
-    * end
  1023 label *label37
  1024 op notEqual *tmp437 .controller null
  1025 set :meetTarget:block :buildBlock:block
 
  1051 write false .controller ":buildStop*finished"
  1052 write 2 .controller "@counter"
  1053 return :buildBlock*retaddr
-    * end
  1054 label *label12
  1055 write :status2:text processor2 ".status2"
  1056 write :status2:item processor2 ".item2"
  1057 write :status2:block processor2 ".block2"
  1058 return :status2*retaddr
-    * end
  1059 label *label14
  1060 write :transportStatus:target processor2 ".transportTarget"
  1061 write :transportStatus:item processor2 ".transportItem"
  1062 return :transportStatus*retaddr
-    * end
  1063 label *label18
  1064 write "Moving..." processor2 ".status3"
  1065 label *label365
 
  1071 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp449
  1072 jump *label365 equal *tmp449 false
  1073 return :moveToEmpty*retaddr
-    * end
  1074 label *label19
  1075 label *label371
  1076 sensor *tmp451 @unit @firstItem
 
  1079 jump *label371 always
  1080 label *label373
  1081 return :dropAll*retaddr
-    * end
  1082 label *label21
  1083 write "Depositing..." processor2 ".status3"
  1084 sensor *tmp453 @unit @firstItem
 
  1114 call *label14 *invalid :transportStatus*retval (m:*label385) (h:*label385)
  1115 label *label385
  1116 return :depositItems*retaddr
-    * end
  1117 label *label23
  1118 op min :mineOre:amount :mineOre:amount 30
  1119 set :transportStatus:target :mineOre:amount
 
  1202 call *label21 *invalid :depositItems*retval (m:*label420) (h:*label420)
  1203 label *label420
  1204 return :mineOre*retaddr
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    26 label *label50
    27 ubind @poly
    28 set .builder @unit
-    * ulocate building core false @copper .coreX .coreY *tmp116 .core
+   29 ulocate building core false @copper .coreX .coreY 0 .core
    30 jump *label50 equal .core null
    31 set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"
    32 setaddr :buildBlockFromCfg.1*retaddr *label53 (h:*label53)
 
  1121 setaddr :transportStatus*retaddr *label387 (h:*label387)
  1122 call *label14 *invalid :transportStatus*retval (m:*label387) (h:*label387)
  1123 label *label387
-    * ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp504 *tmp505
+ 1124 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp504 0
  1125 jump *label556 notEqual *tmp504 false
  1126 set :error:error "Cannot locate ore"
  1127 setaddr :error*retaddr *label555 (h:*label555)

Final code before resolving virtual instructions:

    0:  set .ERROR ""                                                Actions.mnd: remote var ERROR = "";
        label *label45                                               CoreBuilder.mnd: require "Display.mnd" remote display;
    1:  read *tmp30 processor2 "*signature"                          ...
    2:  jump *label45 notEqual *tmp30 "0:v1"                         ...
        label *label46                                               CoreBuilder.mnd: require "OreLocator.mnd" remote oreLocator;
    3:  read *tmp69 processor3 "*signature"                          ...
    4:  jump *label46 notEqual *tmp69 "3290b8c661787058:v1"          ...
        label *label47                                               CoreBuilder.mnd: require "MonoController.mnd" remote monoController;
    5:  read *tmp94 processor7 "*signature"                          ...
    6:  jump *label47 notEqual *tmp94 "0:v1"                         ...
        label *label48                                               CoreBuilder.mnd: require "PolyController.mnd" remote polyController;
    7:  read *tmp96 processor6 "*signature"                          ...
    8:  jump *label48 notEqual *tmp96 "5f95d6f938a8462e:v1"          ...
        label *label49                                               CoreBuilder.mnd: require "BlockBuilder.mnd" remote blockBuilder;
    9:  read *tmp112 processor5 "*signature"                         ...
   10:  jump *label49 notEqual *tmp112 "319badb7a8e178a4:v1"         ...
   11:  set .titaniumDrill null                                      CoreBuilder.mnd: var
   12:  set .thoriumBattery null                                     ...
   13:  set .thoriumContainer null                                   ...
   14:  set .thoriumGenerator null                                   ...
   15:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   16:  set .graphiteSurplus 20                                      ...
   17:  set .siliconSurplus 20                                       ...
   18:  set .siliconMonoSurplus 0                                    ...
   19:  set .metaglassSurplus 20                                     ...
   20:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label50                                               CoreBuilder.mnd: do
   21:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   22:  set .builder @unit                                           ...
   23:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   24:  jump *label50 equal .core null                               CoreBuilder.mnd: do
   25:  set :buildBlockFromCfg.1:cfg "AJEMJJ-graphite-press0"        CoreBuilder.mnd: buildBlockFromCfg(PRESS);
   26:  setaddr :buildBlockFromCfg.1*retaddr *label53                ...
   27:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label53                                               ...
   28:  set :buildBlockFromCfg.1:cfg "AJTJK-battery1"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY1);
   29:  setaddr :buildBlockFromCfg.1*retaddr *label54                ...
   30:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label54                                               ...
   31:  set :buildBlockFromCfg.1:cfg "ALTJL-battery2"               CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   32:  setaddr :buildBlockFromCfg.1*retaddr *label55                ...
   33:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label55                                               ...
   34:  set :buildBlockFromCfg.1:cfg "AJRJM-combustion-generator3"  CoreBuilder.mnd: buildBlockFromCfg(GENERATOR);
   35:  setaddr :buildBlockFromCfg.1*retaddr *label56                ...
   36:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label56                                               ...
   37:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   38:  set :buildBlockFromCfg.1:cfg "ALMQJN-silicon-smelter4"       CoreBuilder.mnd: buildBlockFromCfg(SMELTER);
   39:  setaddr :buildBlockFromCfg.1*retaddr *label57                ...
   40:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label57                                               ...
   41:  set :buildBlockFromCfg.1:cfg "A{LNJO-inverted-sorter5"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   42:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
   43:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
   44:  set :meetTarget.1:cfg "AJJJ~-pneumatic-drill52"             CoreBuilder.mnd: meetTarget(cfg);
   45:  setaddr :meetTarget.1*retaddr *label60                       ...
   46:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label60                                               ...
   47:  write @ore-titanium processor2 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
   48:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   49:  write .coreY processor3 ":findDrillLocation:y"               ...
   50:  write @unit processor3 ":findDrillLocation:unit"             ...
   51:  write @titanium processor3 ":findDrillLocation:item"         ...
   52:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
   53:  write 2 processor3 ":findDrillLocation:size"                 ...
   54:  write 4 processor3 ":findDrillLocation:limit"                ...
   55:  write false processor3 ":findDrillLocation*finished"         ...
   56:  write 1 processor3 "@counter"                                ...
        label *label61                                               ...
   57:  wait 1e-15                                                   ...
   58:  read *tmp135 processor3 ":findDrillLocation*finished"        ...
   59:  jump *label61 equal *tmp135 false                            ...
   60:  read :buildFirstTitaniumDrill:dx processor3 ":findDrillLocat ...
   61:  read :buildFirstTitaniumDrill:dy processor3 ":findDrillLocat ...
   62:  read :buildFirstTitaniumDrill:result processor3 ":findDrillL ...
   63:  jump *label62 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   64:  set :error:error "Cannot locate spot for titanium drill"     ...
   65:  setaddr :error*retaddr *label64                              ...
   66:  call *label15 *invalid :error*retval                         ...
        label *label64                                               ...
        label *label62                                               ...
   67:  write @pneumatic-drill processor2 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   68:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   69:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   70:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   71:  write 2 processor5 "@counter"                                ...
        label *label65                                               ...
   72:  wait 1e-15                                                   ...
   73:  read *tmp141 processor5 ":buildFirstTitaniumDrillAt*finished ...
   74:  jump *label65 equal *tmp141 false                            ...
   75:  read *tmp124 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   76:  set .titaniumDrill *tmp124                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   77:  write *tmp124 processor2 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   78:  set :buildBlockFromCfg.1:cfg "A©JNJP-unloader6"              CoreBuilder.mnd: buildBlockFromCfg(UNLOADER1);
   79:  setaddr :buildBlockFromCfg.1*retaddr *label66                ...
   80:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label66                                               ...
   81:  set :buildBlockFromCfg.1:cfg "A{HNJQ-inverted-sorter7"       CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
   82:  setaddr :buildBlockFromCfg.1*retaddr *label67                ...
   83:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label67                                               ...
   84:  set :buildBlockFromCfg.1:cfg "AJPJR-underflow-gate8"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
   85:  setaddr :buildBlockFromCfg.1*retaddr *label68                ...
   86:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label68                                               ...
   87:  set .graphiteSurplus 80                                      CoreBuilder.mnd: graphiteSurplus = 80;
   88:  set :buildBlockFromCfg:cfg "AÕFFJS-micro-processor9"         CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, coreControllerConfig);
   89:  set :buildBlockFromCfg:config processor10                    ...
   90:  setaddr :buildBlockFromCfg*retaddr *label69                  ...
   91:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label69                                               ...
   92:  set .controller :buildBlockFromCfg*retval                    ...
   93:  write processor1 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
   94:  write processor2 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
   95:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
   96:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
   97:  set *tmp148 AJEMJJ-graphite-press0                           CoreBuilder.mnd: controller.write(@this.read(block), block);
   98:  write *tmp148 :buildBlockFromCfg*retval "AJEMJJ-graphite-pre ...
   99:  set *tmp148 AJTJK-battery1                                  ...
  100:  write *tmp148 :buildBlockFromCfg*retval "AJTJK-battery1"    ...
  101:  set *tmp148 ALTJL-battery2                                  ...
  102:  write *tmp148 :buildBlockFromCfg*retval "ALTJL-battery2"    ...
  103:  set *tmp148 AJRJM-combustion-generator3                     ...
  104:  write *tmp148 :buildBlockFromCfg*retval "AJRJM-combustion-g ...
  105:  set *tmp148 ALMQJN-silicon-smelter4                          ...
  106:  write *tmp148 :buildBlockFromCfg*retval "ALMQJN-silicon-smel ...
  107:  set *tmp148 A{LNJO-inverted-sorter5                          ...
  108:  write *tmp148 :buildBlockFromCfg*retval "A{LNJO-inverted-sor ...
  109:  set *tmp148 A©JNJP-unloader6                                 ...
  110:  write *tmp148 :buildBlockFromCfg*retval "A©JNJP-unloader6"   ...
  111:  set *tmp148 A{HNJQ-inverted-sorter7                          ...
  112:  write *tmp148 :buildBlockFromCfg*retval "A{HNJQ-inverted-sor ...
  113:  set *tmp148 AJPJR-underflow-gate8                           ...
  114:  write *tmp148 :buildBlockFromCfg*retval "AJPJR-underflow-ga ...
  115:  set *tmp148 AÕFFJS-micro-processor9                          ...
  116:  write *tmp148 :buildBlockFromCfg*retval "AÕFFJS-micro-proces ...
  117:  set :buildBlockFromCfg.1:cfg "AFHJT-power-node10"           CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  118:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  119:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  120:  set :buildBlockFromCfg.1:cfg "A©FJJU-unloader11"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER2);
  121:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  122:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  123:  set :buildBlockFromCfg.1:cfg "A~DJJV-overflow-gate12"        CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  124:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  125:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  126:  set :buildBlockFromCfg.1:cfg "A¾BFLW-air-factory13"          CoreBuilder.mnd: buildBlockFromCfg(AIR_FACTORY);
  127:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  128:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  129:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  130:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  131:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  132:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  133:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  134:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  135:  set .siliconSurplus 20                                       ...
  136:  setaddr :buildUnits*retaddr *label89                         CoreBuilder.mnd: buildUnits();
  137:  call *label42 *invalid :buildUnits*retval                    ...
        label *label89                                               ...
        label *label90                                               CoreBuilder.mnd: do
  138:  setaddr :supplyBase*retaddr *label93                         CoreBuilder.mnd: supplyBase();
  139:  call *label35 *invalid :supplyBase*retval                    ...
        label *label93                                               ...
  140:  sensor *tmp153 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < 300 then break; end;
  141:  jump *label92 lessThan *tmp153 300                           ...
  142:  read *tmp80 .controller ".monos"                             CoreBuilder.mnd: while controller.monos < 3;
  143:  jump *label90 lessThan *tmp80 3                              CoreBuilder.mnd: do
        label *label92                                               ...
  144:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  145:  set :buildBlockFromCfg.1:cfg "A©NHJX-unloader14"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  146:  setaddr :buildBlockFromCfg.1*retaddr *label96                ...
  147:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label96                                               ...
  148:  set :buildBlockFromCfg.1:cfg "A{NJJY-inverted-sorter15"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  149:  setaddr :buildBlockFromCfg.1*retaddr *label97                ...
  150:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label97                                               ...
  151:  set :buildBlockFromCfg.1:cfg "ANOMJZ-kiln16"                 CoreBuilder.mnd: buildBlockFromCfg(KILN);
  152:  setaddr :buildBlockFromCfg.1*retaddr *label98                ...
  153:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label98                                               ...
  154:  set :buildBlockFromCfg.1:cfg "A¡AOJ[-water-extractor17"      CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  155:  setaddr :buildBlockFromCfg.1*retaddr *label99                ...
  156:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label99                                               ...
  157:  set :buildBlockFromCfg.1:cfg "AAKJ\-steam-generator18"      CoreBuilder.mnd: buildBlockFromCfg(STEAM_GEN);
  158:  setaddr :buildBlockFromCfg.1*retaddr *label100               ...
  159:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label100                                              ...
  160:  set :buildBlockFromCfg.1:cfg "AKFRJ_-multi-press21"          CoreBuilder.mnd: buildBlockFromCfg(MULTIPRESS);
  161:  setaddr :buildBlockFromCfg.1*retaddr *label101               ...
  162:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label101                                              ...
  163:  set .graphiteSurplus 200                                     CoreBuilder.mnd: graphiteSurplus = 200;
  164:  set :buildBlockFromCfg.1:cfg "ALQIJ^-silicon-smelter20"      CoreBuilder.mnd: buildBlockFromCfg(SMELTER2);
  165:  setaddr :buildBlockFromCfg.1*retaddr *label102               ...
  166:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label102                                              ...
  167:  set :buildBlockFromCfg.1:cfg "A©HFJa-unloader23"             CoreBuilder.mnd: buildBlockFromCfg(UNLOADER4);
  168:  setaddr :buildBlockFromCfg.1*retaddr *label103               ...
  169:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label103                                              ...
  170:  set :buildBlockFromCfg.1:cfg "A{HDJb-inverted-sorter24"      CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT4);
  171:  setaddr :buildBlockFromCfg.1*retaddr *label104               ...
  172:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label104                                              ...
  173:  set :buildBlockFromCfg.1:cfg "AÀF@Lc-additive-reconstructor2 CoreBuilder.mnd: buildBlockFromCfg(ADDITIVE_REC);
  174:  setaddr :buildBlockFromCfg.1*retaddr *label105               ...
  175:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label105                                              ...
  176:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  177:  set .siliconMonoSurplus 20                                   CoreBuilder.mnd: siliconMonoSurplus = 20;
  178:  set .metaglassSurplus 100                                    CoreBuilder.mnd: metaglassSurplus = 100;
  179:  write 4 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  180:  write 3 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  181:  setaddr :buildUnits*retaddr *label108                        CoreBuilder.mnd: buildUnits();
  182:  call *label42 *invalid :buildUnits*retval                    ...
        label *label108                                              ...
        label *label109                                              CoreBuilder.mnd: while controller.polys < 2 do
  183:  read *tmp81 .controller ".polys"                             ...
  184:  jump *label111 greaterThanEq *tmp81 2                        ...
  185:  setaddr :supplyBase*retaddr *label109                        CoreBuilder.mnd: supplyBase();
  186:  call *label35 *invalid :supplyBase*retval                    ...
        label *label111                                              CoreBuilder.mnd: while controller.polys < 2 do
  187:  write 2 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
        label *label114                                              CoreBuilder.mnd: while controller.flares < 2 do
  188:  read *tmp79 .controller ".flares"                            ...
  189:  jump *label116 greaterThanEq *tmp79 2                        ...
  190:  setaddr :supplyBase*retaddr *label114                        CoreBuilder.mnd: supplyBase();
  191:  call *label35 *invalid :supplyBase*retval                    ...
        label *label116                                              CoreBuilder.mnd: while controller.flares < 2 do
  192:  write @ore-titanium processor2 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  193:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  194:  read :blocksBuildTitaniumDrills:current processor3 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  195:  write .coreX processor3 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  196:  write .coreY processor3 ":findDrillLocation:y"               ...
  197:  write @unit processor3 ":findDrillLocation:unit"             ...
  198:  write @titanium processor3 ":findDrillLocation:item"         ...
  199:  write @ore-titanium processor3 ":findDrillLocation:ore"      ...
  200:  write 4 processor3 ":findDrillLocation:size"                 ...
  201:  write 1000000000 processor3 ":findDrillLocation:limit"       ...
  202:  write false processor3 ":findDrillLocation*finished"         ...
  203:  write 1 processor3 "@counter"                                ...
  204:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  205:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  206:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  207:  write false processor5 ":buildTitaniumDrills*finished"       ...
  208:  write 3 processor5 "@counter"                                ...
        label *label119                                              ...
  209:  wait 1e-15                                                   ...
  210:  read *tmp181 processor5 ":buildTitaniumDrills*finished"      ...
  211:  jump *label119 equal *tmp181 false                           ...
  212:  write false processor3 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  213:  write 3 processor3 "@counter"                                ...
  214:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  215:  set .graphiteSurplus 10                                      CoreBuilder.mnd: graphiteSurplus = 10;
  216:  set .metaglassSurplus 50                                     CoreBuilder.mnd: metaglassSurplus = 50;
  217:  write @ore-thorium processor2 ".nextBlock"                   CoreBuilder.mnd: display.nextBlock = @ore-thorium;
  218:  write .coreX processor3 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  219:  write .coreY processor3 ":layoutThoriumDrill:y"              ...
  220:  write @unit processor3 ":layoutThoriumDrill:unit"            ...
  221:  write 7 processor3 ":layoutThoriumDrill:limit"               ...
  222:  write false processor3 ":layoutThoriumDrill*finished"        ...
  223:  write 2 processor3 "@counter"                                ...
        label *label121                                              ...
  224:  wait 1e-15                                                   ...
  225:  read *tmp186 processor3 ":layoutThoriumDrill*finished"       ...
  226:  jump *label121 equal *tmp186 false                           ...
  227:  set :meetTarget.1:cfg "AJJJ~-laser-drill52"                 CoreBuilder.mnd: meetTarget(LASER_DRILL);
  228:  setaddr :meetTarget.1*retaddr *label122                      ...
  229:  call *label41 *invalid :meetTarget.1*retval                  ...
        label *label122                                              ...
        label *label123                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  230:  wait 1e-15                                                   ...
  231:  read *tmp188 processor3 ":layoutThoriumDrill*finished"       ...
  232:  jump *label123 equal *tmp188 false                           ...
  233:  read :buildThoriumDrill:result processor3 ":layoutThoriumDri ...
  234:  jump *label124 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  235:  set :error:error "Cannot locate spot for thorium drill"      ...
  236:  setaddr :error*retaddr *label126                             ...
  237:  call *label15 *invalid :error*retval                         ...
        label *label126                                              ...
        label *label124                                              ...
  238:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);
  239:  read *tmp51 processor3 ".drillX"                             ...
  240:  write *tmp51 processor5 ":buildBlockAt:x"                    ...
  241:  read *tmp52 processor3 ".drillY"                             ...
  242:  write *tmp52 processor5 ":buildBlockAt:y"                    ...
  243:  write null processor5 ":buildBlockAt:rotation"               ...
  244:  write 0 processor5 ":buildBlockAt:config"                    ...
  245:  write -1 processor5 ":buildBlockAt:index"                    ...
  246:  write false processor5 ":buildBlockAt*finished"              ...
  247:  write 1 processor5 "@counter"                                ...
        label *label127                                              ...
  248:  wait 1e-15                                                   ...
  249:  read *tmp198 processor5 ":buildBlockAt*finished"             ...
  250:  jump *label127 equal *tmp198 false                           ...
  251:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  252:  set :buildRemoteBlock:cfg "A¡AOJ[-water-extractor17"         CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  253:  read :buildRemoteBlock:x processor3 ".water1X"               ...
  254:  read :buildRemoteBlock:y processor3 ".water1Y"               ...
  255:  setaddr :buildRemoteBlock*retaddr *label128                  ...
  256:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label128                                              ...
  257:  read :buildRemoteBlock:x processor3 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  258:  read :buildRemoteBlock:y processor3 ".water2Y"               ...
  259:  setaddr :buildRemoteBlock*retaddr *label129                  ...
  260:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label129                                              ...
  261:  set :buildRemoteBlock:cfg "AAKJ\-steam-generator18"         CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  262:  read :buildRemoteBlock:x processor3 ".generatorX"            ...
  263:  read :buildRemoteBlock:y processor3 ".generatorY"            ...
  264:  setaddr :buildRemoteBlock*retaddr *label130                  ...
  265:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label130                                              ...
  266:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  267:  set :buildRemoteBlock:cfg "AFHJT-power-node10"              CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
  268:  read :buildRemoteBlock:x processor3 ".node1X"                ...
  269:  read :buildRemoteBlock:y processor3 ".node1Y"                ...
  270:  setaddr :buildRemoteBlock*retaddr *label131                  ...
  271:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label131                                              ...
  272:  read :buildRemoteBlock:x processor3 ".node2X"                CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
  273:  read :buildRemoteBlock:y processor3 ".node2Y"                ...
  274:  setaddr :buildRemoteBlock*retaddr *label132                  ...
  275:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label132                                              ...
  276:  set :buildRemoteBlock:cfg "AJJJ~-solar-panel52"             CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  277:  read :buildRemoteBlock:x processor3 ".panelX"                ...
  278:  read :buildRemoteBlock:y processor3 ".panelY"                ...
  279:  setaddr :buildRemoteBlock*retaddr *label133                  ...
  280:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label133                                              ...
  281:  set :buildRemoteBlock:cfg "AJTJK-battery1"                  CoreBuilder.mnd: thoriumBattery = buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  282:  read :buildRemoteBlock:x processor3 ".batteryX"              ...
  283:  read :buildRemoteBlock:y processor3 ".batteryY"              ...
  284:  setaddr :buildRemoteBlock*retaddr *label134                  ...
  285:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label134                                              ...
  286:  set .thoriumBattery :buildRemoteBlock*retval                 ...
  287:  set :buildRemoteBlock:cfg "A¨JJJ~-container52"               CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  288:  read :buildRemoteBlock:x processor3 ".containerX"            ...
  289:  read :buildRemoteBlock:y processor3 ".containerY"            ...
  290:  setaddr :buildRemoteBlock*retaddr *label135                  ...
  291:  call *label38 *invalid :buildRemoteBlock*retval              ...
        label *label135                                              ...
  292:  select .thoriumContainer equal :buildRemoteBlock*retval null CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  293:  write .thoriumDrill processor2 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  294:  write .thoriumContainer processor2 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  295:  write .thoriumContainer processor6 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  296:  write false processor6 ":setThoriumContainer*finished"       ...
  297:  write 3 processor6 "@counter"                                ...
        label *label138                                              ...
  298:  wait 1e-15                                                   ...
  299:  read *tmp211 processor6 ":setThoriumContainer*finished"      ...
  300:  jump *label138 equal *tmp211 false                           ...
  301:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
        label *label139                                              CoreBuilder.mnd: while controller.polys < 3 do
  302:  read *tmp81 .controller ".polys"                             ...
  303:  jump *label141 greaterThanEq *tmp81 3                        ...
  304:  setaddr :supplyBase*retaddr *label139                        CoreBuilder.mnd: supplyBase();
  305:  call *label35 *invalid :supplyBase*retval                    ...
        label *label141                                              CoreBuilder.mnd: while controller.polys < 3 do
  306:  write 0 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  307:  write 3209 .controller ".powerTarget"                        CoreBuilder.mnd: controller.powerTarget = 3209;
  308:  set .siliconMonoSurplus 120                                  CoreBuilder.mnd: siliconMonoSurplus = 120;
  309:  set .leadSurplus 0                                           CoreBuilder.mnd: leadSurplus = 0;
  310:  set :buildBlockFromCfg.1:cfg "AÁNBJd-multiplicative-reconstr CoreBuilder.mnd: buildBlockFromCfg(MULTIPLICATIVE_REC);
  311:  setaddr :buildBlockFromCfg.1*retaddr *label144               ...
  312:  call *label40 *invalid :buildBlockFromCfg.1*retval           ...
        label *label144                                              ...
  313:  set .metaglassSurplus 10                                     CoreBuilder.mnd: metaglassSurplus = 10;
  314:  write 0 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  315:  write 0 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  316:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  317:  setaddr :buildUnits*retaddr *label148                        CoreBuilder.mnd: buildUnits();
  318:  call *label42 *invalid :buildUnits*retval                    ...
        label *label148                                              ...
  319:  read *tmp81 .controller ".polys"                             CoreBuilder.mnd: var tmp = controller.polys - 1;
  320:  op sub :tmp *tmp81 1                                         ...
  321:  write :tmp .controller ".polyTarget"                         CoreBuilder.mnd: controller.polyTarget = tmp;
  322:  write :tmp .controller ".polys"                              CoreBuilder.mnd: controller.polys = tmp;
  323:  write :tmp processor2 ".polys"                               CoreBuilder.mnd: display.polys = tmp;
  324:  sensor :x AÁNBJd-multiplicative-reconstructor26 @x           CoreBuilder.mnd: var x = multiplicative_rec.@x;
  325:  sensor :y AÁNBJd-multiplicative-reconstructor26 @y           CoreBuilder.mnd: var y = multiplicative_rec.@y;
        label *label149                                              CoreBuilder.mnd: do
  326:  ucontrol move :x :y 0 0 0                                    CoreBuilder.mnd: move(x, y);
  327:  ucontrol payEnter 0 0 0 0 0                                  CoreBuilder.mnd: payEnter();
  328:  read *tmp82 .controller ".megas"                             CoreBuilder.mnd: while !controller.megas;
  329:  jump *label149 equal *tmp82 false                            CoreBuilder.mnd: do
  330:  write true .controller ".finished"                           CoreBuilder.mnd: controller.finished = true;
  331:  control enabled processor1 false 0 0 0                       CoreBuilder.mnd: timer.enabled = false;
  332:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  333:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  334:  control enabled processor6 false 0 0 0                       CoreBuilder.mnd: polyController.enabled = false;
  335:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: oreLocator.enabled = false;
  336:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: blockBuilder.enabled = false;
  337:  control enabled processor11 false 0 0 0                      CoreBuilder.mnd: measurements.enabled = false;
  338:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  339:  setaddr :flagUnits*retaddr *label153                         ...
  340:  call *label43 *invalid :flagUnits*retval                     ...
        label *label153                                              ...
  341:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  342:  setaddr :flagUnits*retaddr *label154                         ...
  343:  call *label43 *invalid :flagUnits*retval                     ...
        label *label154                                              ...
  344:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  345:  setaddr :flagUnits*retaddr *label155                         ...
  346:  call *label43 *invalid :flagUnits*retval                     ...
        label *label155                                              ...
  347:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  348:  setaddr :flagUnits*retaddr *label156                         ...
  349:  call *label43 *invalid :flagUnits*retval                     ...
        label *label156                                              ...
        label *label157                                              CoreBuilder.mnd: while true do
  350:  op add :lineUpUnits:y .coreY 6                               CoreBuilder.mnd: lineUpUnits(coreY + 6, @mega);
  351:  set :lineUpUnits:unit @mega                                  ...
  352:  setaddr :lineUpUnits*retaddr *label160                       ...
  353:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label160                                              ...
  354:  op add :lineUpUnits:y .coreY 2                               CoreBuilder.mnd: lineUpUnits(coreY + 2, @poly);
  355:  set :lineUpUnits:unit @poly                                  ...
  356:  setaddr :lineUpUnits*retaddr *label161                       ...
  357:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label161                                              ...
  358:  op sub :lineUpUnits:y .coreY 2                               CoreBuilder.mnd: lineUpUnits(coreY - 2, @mono);
  359:  set :lineUpUnits:unit @mono                                  ...
  360:  setaddr :lineUpUnits*retaddr *label162                       ...
  361:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label162                                              ...
  362:  op sub :lineUpUnits:y .coreY 6                               CoreBuilder.mnd: lineUpUnits(coreY - 6, @flare);
  363:  set :lineUpUnits:unit @flare                                 ...
  364:  setaddr :lineUpUnits*retaddr *label157                       ...
  365:  call *label44 *invalid :lineUpUnits*retval                   ...
        label *label15                                               Actions.mnd: void error(error)
  366:  set .ERROR :error:error                                      Actions.mnd: ERROR = error;
  367:  stop                                                         Actions.mnd: stopProcessor();
  368:  return :error*retaddr                                        Actions.mnd: void error(error)
        label *label35                                               CoreBuilder.mnd: void supplyBase()
  369:  op add *tmp229 .siliconMonoSurplus silicon                   CoreBuilder.mnd: monoController.sandTarget = max(0, siliconMonoSurplus + targetSilicon - core.@silicon);
  370:  sensor *tmp230 .core @silicon                                ...
  371:  op sub *tmp231 *tmp229 *tmp230                               ...
  372:  op max *tmp232 0 *tmp231                                     ...
  373:  write *tmp232 processor7 ".sandTarget"                       ...
  374:  jump *label166 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  375:  write "Phase 2: servicing thorium drill" processor2 ".status Actions.mnd: display.status1 = text;
  376:  sensor *tmp234 .thoriumBattery @totalPower                   CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  377:  jump *label170 greaterThanEq *tmp234 2000                    ...
  378:  sensor *tmp237 .thoriumGenerator @coal                       CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
  379:  jump *label172 notEqual *tmp237 0                            ...
  380:  sensor *tmp240 .core @coal                                   CoreBuilder.mnd: if core.@coal < 50 then
  381:  jump *label174 greaterThanEq *tmp240 50                      ...
  382:  set :supplyBlock:block .thoriumGenerator                     CoreBuilder.mnd: supplyBlock(thoriumGenerator, @coal);
  383:  set :supplyBlock:ore @coal                                   ...
  384:  setaddr :supplyBlock*retaddr *label175                       ...
  385:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label174                                              CoreBuilder.mnd: if core.@coal < 50 then
  386:  sensor *tmp339 .thoriumGenerator @itemCapacity               Actions.mnd: var cap = min(target.@itemCapacity, capacity);
  387:  op min :supplyBlockFromCore:cap *tmp339 30                   ...
  388:  set :transportStatus:target :supplyBlockFromCore:cap         Actions.mnd: transportStatus(cap, item);
  389:  set :transportStatus:item @coal                              ...
  390:  setaddr :transportStatus*retaddr *label532                   ...
  391:  call *label14 *invalid :transportStatus*retval               ...
        label *label532                                              ...
  392:  set :status2:text "Transferring "                            Actions.mnd: status2("Transferring ", item, target);
  393:  set :status2:item @coal                                      ...
  394:  set :status2:block .thoriumGenerator                         ...
  395:  setaddr :status2*retaddr *label533                           ...
  396:  call *label12 *invalid :status2*retval                       ...
        label *label533                                              ...
  397:  set :moveToEmpty:x .coreX                                    Actions.mnd: moveToEmpty(coreX, coreY);
  398:  set :moveToEmpty:y .coreY                                    ...
  399:  setaddr :moveToEmpty*retaddr *label534                       ...
  400:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label534                                              ...
  401:  setaddr :dropAll*retaddr *label535                           Actions.mnd: dropAll();
  402:  call *label19 *invalid :dropAll*retval                       ...
        label *label535                                              ...
        label *label536                                              Actions.mnd: do
  403:  ucontrol itemTake .core @coal :supplyBlockFromCore:cap 0 0   Actions.mnd: itemTake(core, item, cap);
  404:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  405:  op notEqual *tmp342 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  406:  op notEqual *tmp343 :supplyBlockFromCore:unitItem @coal      ...
  407:  op land *tmp344 *tmp342 *tmp343                              ...
  408:  jump *label537 equal *tmp344 false                           ...
  409:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label537                                              Actions.mnd: if unitItem != null and unitItem != item then
  410:  sensor *tmp346 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < cap and core.sensor(item);
  411:  op lessThan *tmp347 *tmp346 :supplyBlockFromCore:cap         ...
  412:  sensor *tmp348 .core @coal                                   ...
  413:  op land *tmp349 *tmp347 *tmp348                              ...
  414:  jump *label536 notEqual *tmp349 false                        Actions.mnd: do
  415:  set :depositItems:block .thoriumGenerator                    Actions.mnd: depositItems(target, item);
  416:  set :depositItems:item @coal                                 ...
  417:  setaddr :depositItems*retaddr *label541                      ...
  418:  call *label21 *invalid :depositItems*retval                  ...
        label *label541                                              ...
        label *label175                                              CoreBuilder.mnd: if core.@coal < 50 then
        label *label172                                              CoreBuilder.mnd: if thoriumGenerator.@coal == 0 then
        label *label170                                              CoreBuilder.mnd: if thoriumBattery.@totalPower < 2000 then
  419:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  420:  set :fetchBlock:item @thorium                                ...
  421:  setaddr :fetchBlock*retaddr *label178                        ...
  422:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label178                                              ...
  423:  sensor *tmp243 .core @thorium                                CoreBuilder.mnd: if core.@thorium > 400 then
  424:  jump *label167 lessThanEq *tmp243 400                        ...
  425:  write 4 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  426:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label166                                              ...
  427:  read *tmp80 .controller ".monos"                             CoreBuilder.mnd: elsif controller.monos > 1 then
  428:  jump *label182 lessThanEq *tmp80 1                           ...
  429:  write "Phase 1: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  430:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  431:  setaddr :mineOre.1*retaddr *label186                         ...
  432:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label186                                              ...
  433:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 1 then
        label *label182                                              ...
  434:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  435:  jump *label188 notEqual A©JNJP-unloader6 null                CoreBuilder.mnd: if unloader1 == null then
  436:  sensor *tmp250 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  437:  jump *label190 greaterThanEq *tmp250 graphite                ...
  438:  sensor *tmp253 AJEMJJ-graphite-press0 @coal                  CoreBuilder.mnd: if press.@coal < 5 then
  439:  jump *label192 greaterThanEq *tmp253 5                       ...
  440:  write "Goal 1: graphite requirement" processor2 ".status1"   Actions.mnd: display.status1 = text;
  441:  set :supplyBlock:block AJEMJJ-graphite-press0                CoreBuilder.mnd: supplyBlock(press, @coal);
  442:  set :supplyBlock:ore @coal                                   ...
  443:  setaddr :supplyBlock*retaddr *label195                       ...
  444:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label195                                              ...
  445:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label192                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label190                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  446:  sensor *tmp256 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  447:  jump *label196 greaterThanEq *tmp256 silicon                 ...
  448:  sensor *tmp259 ALMQJN-silicon-smelter4 @coal                 CoreBuilder.mnd: if smelter.@coal < 5 then
  449:  jump *label198 greaterThanEq *tmp259 5                       ...
  450:  write "Goal 2: coal for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  451:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @coal);
  452:  set :supplyBlock:ore @coal                                   ...
  453:  setaddr :supplyBlock*retaddr *label201                       ...
  454:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label201                                              ...
  455:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  456:  jump *label199 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label198                                              ...
  457:  sensor *tmp262 ALMQJN-silicon-smelter4 @sand                 CoreBuilder.mnd: elsif smelter.@sand < 5 then
  458:  jump *label202 greaterThanEq *tmp262 5                       ...
  459:  write "Goal 3: sand for silicon requirement" processor2 ".st Actions.mnd: display.status1 = text;
  460:  set :supplyBlock:block ALMQJN-silicon-smelter4               CoreBuilder.mnd: supplyBlock(smelter, @sand);
  461:  set :supplyBlock:ore @sand                                   ...
  462:  setaddr :supplyBlock*retaddr *label205                       ...
  463:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label205                                              ...
  464:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label202                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label199                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label196                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  465:  sensor *tmp265 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
  466:  jump *label206 greaterThanEq *tmp265 .powerTarget            ...
  467:  sensor *tmp268 AJRJM-combustion-generator3 @coal            CoreBuilder.mnd: if generator.@coal < 2 then
  468:  jump *label208 greaterThanEq *tmp268 2                       ...
  469:  write "Goal 4: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  470:  set :supplyBlock:block AJRJM-combustion-generator3          CoreBuilder.mnd: supplyBlock(generator, @coal);
  471:  set :supplyBlock:ore @coal                                   ...
  472:  setaddr :supplyBlock*retaddr *label211                       ...
  473:  call *label26 *invalid :supplyBlock*retval                   ...
        label *label211                                              ...
  474:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label208                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label206                                              CoreBuilder.mnd: if battery1.@totalPower < powerTarget then
        label *label188                                              CoreBuilder.mnd: if unloader1 == null then
  475:  set *tmp273 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  476:  sensor *tmp271 .core @titanium                               ...
  477:  jump *label213 greaterThanEq *tmp271 titanium                ...
  478:  sensor *tmp274 .core @titanium                               ...
  479:  op sub *tmp275 titanium *tmp274                              ...
  480:  op min *tmp273 7 *tmp275                                     ...
        label *label213                                              ...
  481:  sensor *tmp277 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  482:  jump *label214 greaterThanEq *tmp277 *tmp273                 ...
  483:  jump *label215 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  484:  sensor *tmp282 AJTJK-battery1 @totalPower                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
  485:  op mul *tmp283 A©JNJP-unloader6 .powerTarget                 ...
  486:  jump *label218 greaterThanEq *tmp282 *tmp283                 ...
  487:  write "Goal 5: supplying generator" processor2 ".status1"    Actions.mnd: display.status1 = text;
  488:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  489:  setaddr :mineOre.1*retaddr *label221                         ...
  490:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label221                                              ...
  491:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery1.@totalPower < unloader1 * powerTarget then
        label *label218                                              ...
  492:  sensor *tmp286 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  493:  jump *label222 greaterThanEq *tmp286 silicon                 ...
  494:  write "Goal 6: silicon requirement" processor2 ".status1"    Actions.mnd: display.status1 = text;
  495:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  496:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  497:  select :mineOre.1:ore lessThan :supplyBase0:coal :supplyBase CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  498:  setaddr :mineOre.1*retaddr *label227                         CoreBuilder.mnd: mineOre(ore);
  499:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label227                                              ...
  500:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label222                                              ...
  501:  sensor *tmp293 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  502:  jump *label228 greaterThanEq *tmp293 copper                  ...
  503:  write "Goal 7: copper requirement" processor2 ".status1"     Actions.mnd: display.status1 = text;
  504:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  505:  setaddr :mineOre.1*retaddr *label231                         ...
  506:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label231                                              ...
  507:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label228                                              ...
  508:  sensor *tmp296 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  509:  jump *label232 greaterThanEq *tmp296 lead                    ...
  510:  write "Goal 8: lead requirement" processor2 ".status1"       Actions.mnd: display.status1 = text;
  511:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  512:  setaddr :mineOre.1*retaddr *label235                         ...
  513:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label235                                              ...
  514:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label232                                              ...
  515:  sensor *tmp299 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  516:  jump *label236 greaterThanEq *tmp299 metaglass               ...
  517:  write "Goal 9: metaglass requirement" processor2 ".status1"  Actions.mnd: display.status1 = text;
  518:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  519:  setaddr :mineOre.1*retaddr *label239                         ...
  520:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label239                                              ...
  521:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label236                                              ...
  522:  write "Goal 10: supplying base" processor2 ".status1"        Actions.mnd: display.status1 = text;
  523:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  524:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  525:  select :mineOre.1:ore lessThanEq :supplyBase0:coal.1 :supply CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  526:  setaddr :mineOre.1*retaddr *label243                         CoreBuilder.mnd: mineOre(ore);
  527:  call *label24 *invalid :mineOre.1*retval                     ...
        label *label243                                              ...
  528:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label214                                              ...
  529:  write "Goal 11: Fetching titanium" processor2 ".status1"     Actions.mnd: display.status1 = text;
  530:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  531:  set :fetchBlock:item @titanium                               ...
  532:  setaddr :fetchBlock*retaddr *label245                        ...
  533:  call *label25 *invalid :fetchBlock*retval                    ...
        label *label245                                              ...
        label *label215                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label167                                              CoreBuilder.mnd: if thoriumContainer then
  534:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label38                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  535:  op add *tmp306 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  536:  jump *label247 lessThanEq *tmp306 0                          ...
  537:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  538:  setaddr :unpackCfg*retaddr *label249                         ...
  539:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label249                                              ...
  540:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
  541:  set :buildBlock:x :buildRemoteBlock:x                        ...
  542:  set :buildBlock:y :buildRemoteBlock:y                        ...
  543:  set :buildBlock:copper :unpackCfg:cu                         ...
  544:  set :buildBlock:lead :unpackCfg:pb                           ...
  545:  set :buildBlock:graphite :unpackCfg:gr                       ...
  546:  set :buildBlock:silicon :unpackCfg:si                        ...
  547:  set :buildBlock:titanium :unpackCfg:ti                       ...
  548:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  549:  set :buildBlock:thorium :unpackCfg:th                        ...
  550:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  551:  set :buildBlock:config null                                  ...
  552:  set :buildBlock:index :unpackCfg:ind                         ...
  553:  setaddr :buildBlock*retaddr *label250                        ...
  554:  call *label37 *invalid :buildBlock*retval                    ...
        label *label250                                              ...
  555:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  556:  return :buildRemoteBlock*retaddr                             ...
        label *label247                                              CoreBuilder.mnd: if x + y > 0 then
  557:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  558:  return :buildRemoteBlock*retaddr                             ...
        label *label39                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  559:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
  560:  setaddr :unpackCfg*retaddr *label252                         ...
  561:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label252                                              ...
  562:  op add *tmp309 .coreX :unpackCfg:x                           CoreBuilder.mnd: var building = buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
  563:  op add *tmp310 .coreY :unpackCfg:y                           ...
  564:  set :buildBlock:block :unpackCfg:type                        ...
  565:  set :buildBlock:x *tmp309                                    ...
  566:  set :buildBlock:y *tmp310                                    ...
  567:  set :buildBlock:copper :unpackCfg:cu                         ...
  568:  set :buildBlock:lead :unpackCfg:pb                           ...
  569:  set :buildBlock:graphite :unpackCfg:gr                       ...
  570:  set :buildBlock:silicon :unpackCfg:si                        ...
  571:  set :buildBlock:titanium :unpackCfg:ti                       ...
  572:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  573:  set :buildBlock:thorium :unpackCfg:th                        ...
  574:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  575:  set :buildBlock:config :buildBlockFromCfg:config             ...
  576:  set :buildBlock:index :unpackCfg:ind                         ...
  577:  setaddr :buildBlock*retaddr *label253                        ...
  578:  call *label37 *invalid :buildBlock*retval                    ...
        label *label253                                              ...
  579:  write :buildBlock*retval @this :buildBlockFromCfg:cfg        CoreBuilder.mnd: @this.write(building, cfg);
  580:  write :buildBlock*retval processor2 :buildBlockFromCfg:cfg   CoreBuilder.mnd: display.write(building, cfg);
  581:  write :buildBlock*retval .controller :buildBlockFromCfg:cfg  CoreBuilder.mnd: controller.write(building, cfg);
  582:  set :buildBlockFromCfg*retval :buildBlock*retval             CoreBuilder.mnd: return building;
  583:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label40                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  584:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  585:  set :buildBlockFromCfg:config null                           ...
  586:  setaddr :buildBlockFromCfg*retaddr *label255                 ...
  587:  call *label39 *invalid :buildBlockFromCfg*retval             ...
        label *label255                                              ...
  588:  return :buildBlockFromCfg.1*retaddr                          CoreBuilder.mnd: def buildBlockFromCfg(cfg)
        label *label41                                               CoreBuilder.mnd: void meetTarget(cfg)
  589:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  590:  setaddr :unpackCfg*retaddr *label257                         ...
  591:  call *label29 *invalid :unpackCfg*retval                     ...
        label *label257                                              ...
  592:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th, false, false);
  593:  set :meetTarget:copper :unpackCfg:cu                         ...
  594:  set :meetTarget:lead :unpackCfg:pb                           ...
  595:  set :meetTarget:graphite :unpackCfg:gr                       ...
  596:  set :meetTarget:silicon :unpackCfg:si                        ...
  597:  set :meetTarget:titanium :unpackCfg:ti                       ...
  598:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  599:  set :meetTarget:thorium :unpackCfg:th                        ...
  600:  set :meetTarget:forBuild false                               ...
  601:  set :meetTarget:isNoTarget false                             ...
  602:  setaddr :meetTarget*retaddr *label258                        ...
  603:  call *label36 *invalid :meetTarget*retval                    ...
        label *label258                                              ...
  604:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label42                                               CoreBuilder.mnd: void buildUnits()
  605:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
  606:  set :meetTarget:copper 0                                     ...
  607:  set :meetTarget:lead 0                                       ...
  608:  set :meetTarget:graphite 0                                   ...
  609:  set :meetTarget:silicon 0                                    ...
  610:  set :meetTarget:titanium 0                                   ...
  611:  set :meetTarget:metaglass 0                                  ...
  612:  set :meetTarget:thorium 0                                    ...
  613:  set :meetTarget:forBuild false                               ...
  614:  set :meetTarget:isNoTarget true                              ...
  615:  setaddr :meetTarget*retaddr *label260                        ...
  616:  call *label36 *invalid :meetTarget*retval                    ...
        label *label260                                              ...
  617:  write 0 processor2 ".totalTargets"                           CoreBuilder.mnd: display.totalTargets = 0;
  618:  write null processor2 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  619:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  620:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  621:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  622:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label43                                               CoreBuilder.mnd: void flagUnits(unit)
        label *label262                                              CoreBuilder.mnd: do
  623:  ubind :flagUnits:unit                                        CoreBuilder.mnd: firstUnit = ubind(unit);
  624:  set :flagUnits:firstUnit @unit                               ...
  625:  jump *label262 equal :flagUnits:firstUnit null               CoreBuilder.mnd: do
  626:  op add :flagUnits:x .coreX 8                                 CoreBuilder.mnd: var x = coreX + 8;
        label *label265                                              CoreBuilder.mnd: do
  627:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  628:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  629:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  630:  jump *label265 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  631:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label44                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  632:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  633:  set :lineUpUnits:firstUnit @unit                             ...
        label *label269                                              CoreBuilder.mnd: do
  634:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  635:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  636:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  637:  sensor *tmp317 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  638:  jump *label272 equal *tmp317 false                           ...
  639:  ucontrol stop 0 0 0 0 0                                      ...
        label *label272                                              ...
  640:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  641:  jump *label269 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  642:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)
        label *label24                                               Actions.mnd: void mineOre(ore)
  643:  set :status2:text "Mining "                                  Actions.mnd: status2("Mining ", ore, "core");
  644:  set :status2:item :mineOre.1:ore                             ...
  645:  set :status2:block "core"                                    ...
  646:  setaddr :status2*retaddr *label276                           ...
  647:  call *label12 *invalid :status2*retval                       ...
        label *label276                                              ...
  648:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  649:  set :mineOre:amount 30                                       ...
  650:  set :mineOre:block .core                                     ...
  651:  setaddr :mineOre*retaddr *label277                           ...
  652:  call *label23 *invalid :mineOre*retval                       ...
        label *label277                                              ...
  653:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label25                                               Actions.mnd: void fetchBlock(block, item)
  654:  sensor *tmp321 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  655:  op min :transportStatus:target *tmp321 30                    ...
  656:  set :transportStatus:item :fetchBlock:item                   ...
  657:  setaddr :transportStatus*retaddr *label279                   ...
  658:  call *label14 *invalid :transportStatus*retval               ...
        label *label279                                              ...
  659:  set :status2:text "Fetching "                                Actions.mnd: status2("Fetching ", item, block);
  660:  set :status2:item :fetchBlock:item                           ...
  661:  set :status2:block :fetchBlock:block                         ...
  662:  setaddr :status2*retaddr *label280                           ...
  663:  call *label12 *invalid :status2*retval                       ...
        label *label280                                              ...
  664:  sensor *tmp323 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  665:  sensor *tmp324 :fetchBlock:block @y                          ...
  666:  set :moveToEmpty:x *tmp323                                   ...
  667:  set :moveToEmpty:y *tmp324                                   ...
  668:  setaddr :moveToEmpty*retaddr *label281                       ...
  669:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label281                                              ...
  670:  setaddr :dropAll*retaddr *label282                           Actions.mnd: dropAll();
  671:  call *label19 *invalid :dropAll*retval                       ...
        label *label282                                              ...
        label *label283                                              Actions.mnd: do
  672:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  673:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  674:  op notEqual *tmp326 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  675:  op notEqual *tmp327 :fetchBlock:unitItem :fetchBlock:item    ...
  676:  op land *tmp328 *tmp326 *tmp327                              ...
  677:  jump *label286 equal *tmp328 false                           ...
  678:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label286                                              Actions.mnd: if unitItem != null and unitItem != item then
  679:  sensor *tmp330 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  680:  op lessThan *tmp331 *tmp330 30                               ...
  681:  sensor *tmp332 :fetchBlock:block :fetchBlock:item            ...
  682:  op land *tmp333 *tmp331 *tmp332                              ...
  683:  jump *label283 notEqual *tmp333 false                        Actions.mnd: do
  684:  set :depositItems:block .core                                Actions.mnd: depositItems(core, item);
  685:  set :depositItems:item :fetchBlock:item                      ...
  686:  setaddr :depositItems*retaddr *label288                      ...
  687:  call *label21 *invalid :depositItems*retval                  ...
        label *label288                                              ...
  688:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label26                                               Actions.mnd: void supplyBlock(block, ore)
  689:  set :status2:text "Supplying "                               Actions.mnd: status2("Supplying ", ore, block);
  690:  set :status2:item :supplyBlock:ore                           ...
  691:  set :status2:block :supplyBlock:block                        ...
  692:  setaddr :status2*retaddr *label290                           ...
  693:  call *label12 *invalid :status2*retval                       ...
        label *label290                                              ...
  694:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  695:  sensor *tmp335 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  696:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp3 ...
  697:  jump *label291 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  698:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  699:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  700:  set :mineOre:block :supplyBlock:block                        ...
  701:  setaddr :mineOre*retaddr *label293                           ...
  702:  call *label23 *invalid :mineOre*retval                       ...
        label *label293                                              ...
        label *label291                                              Actions.mnd: if missing > 0 then
  703:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label29                                               Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
  704:  read *tmp351 :unpackCfg:cfg 1                                Common.mnd: type = lookup(:block, char(cfg, index++) - _Common_offset);
  705:  op sub *tmp352 *tmp351 74                                    ...
  706:  lookup block :unpackCfg:type *tmp352                         ...
  707:  read *tmp355 :unpackCfg:cfg 2                                Common.mnd: x = (char(cfg, index++) - _Common_offset) / 2;
  708:  op sub *tmp356 *tmp355 74                                    ...
  709:  op div :unpackCfg:x *tmp356 2                                ...
  710:  read *tmp359 :unpackCfg:cfg 3                                Common.mnd: y = (char(cfg, index++) - _Common_offset) / 2;
  711:  op sub *tmp360 *tmp359 74                                    ...
  712:  op div :unpackCfg:y *tmp360 2                                ...
  713:  read *tmp363 :unpackCfg:cfg 4                                Common.mnd: rotation = char(cfg, index++) - _Common_offset;
  714:  op sub :unpackCfg:rotation *tmp363 74                        ...
  715:  read *tmp366 :unpackCfg:cfg 5                                Common.mnd: ind = char(cfg, index++) - _Common_offset;
  716:  op sub :unpackCfg:ind *tmp366 74                             ...
  717:  sensor :unpackCfg:cu :unpackCfg:type @copper                 Common.mnd: cu = type.@copper;
  718:  sensor :unpackCfg:pb :unpackCfg:type @lead                   Common.mnd: pb = type.@lead;
  719:  sensor :unpackCfg:gr :unpackCfg:type @graphite               Common.mnd: gr = type.@graphite;
  720:  sensor :unpackCfg:si :unpackCfg:type @silicon                Common.mnd: si = type.@silicon;
  721:  sensor :unpackCfg:ti :unpackCfg:type @titanium               Common.mnd: ti = type.@titanium;
  722:  sensor :unpackCfg:mg :unpackCfg:type @metaglass              Common.mnd: mg = type.@metaglass;
  723:  sensor :unpackCfg:th :unpackCfg:type @thorium                Common.mnd: th = type.@thorium;
  724:  return :unpackCfg*retaddr                                    Common.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out size, out ind)
        label *label36                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
  725:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  726:  op sign *tmp377 :meetTarget:lead 0                           ...
  727:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  728:  op sign *tmp377 :meetTarget:graphite 0                       ...
  729:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  730:  op sign *tmp377 :meetTarget:silicon 0                        ...
  731:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  732:  op sign *tmp377 :meetTarget:titanium 0                       ...
  733:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  734:  op sign *tmp377 :meetTarget:metaglass 0                      ...
  735:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  736:  op sign *tmp377 :meetTarget:thorium 0                        ...
  737:  op add :meetTarget:count :meetTarget:count *tmp377           ...
  738:  write :meetTarget:count processor2 ".totalTargets"           CoreBuilder.mnd: display.totalTargets = count;
  739:  write :meetTarget:block processor2 ".nextBlock"              CoreBuilder.mnd: display.nextBlock = block;
  740:  write :meetTarget:copper processor2 ".targetCopper"          CoreBuilder.mnd: display.targetCopper = copper;
  741:  write :meetTarget:lead processor2 ".targetLead"              CoreBuilder.mnd: display.targetLead = lead;
  742:  write :meetTarget:graphite processor2 ".targetGraphite"      CoreBuilder.mnd: display.targetGraphite = graphite;
  743:  write :meetTarget:silicon processor2 ".targetSilicon"        CoreBuilder.mnd: display.targetSilicon = silicon;
  744:  write :meetTarget:titanium processor2 ".targetTitanium"      CoreBuilder.mnd: display.targetTitanium = titanium;
  745:  write :meetTarget:metaglass processor2 ".targetMetaglass"    CoreBuilder.mnd: display.targetMetaglass = metaglass;
  746:  write :meetTarget:thorium processor2 ".targetThorium"        CoreBuilder.mnd: display.targetThorium = thorium;
  747:  set copper :meetTarget:copper                                CoreBuilder.mnd: targetCopper = copper;
  748:  op add lead :meetTarget:lead .leadSurplus                    CoreBuilder.mnd: targetLead = lead + leadSurplus;
  749:  set graphite :meetTarget:graphite                            CoreBuilder.mnd: targetGraphite = graphite;
  750:  set silicon :meetTarget:silicon                              CoreBuilder.mnd: targetSilicon = silicon;
  751:  set titanium :meetTarget:titanium                            CoreBuilder.mnd: targetTitanium = titanium;
  752:  set metaglass :meetTarget:metaglass                          CoreBuilder.mnd: targetMetaglass = metaglass;
  753:  set thorium :meetTarget:thorium                              CoreBuilder.mnd: targetThorium = thorium;
  754:  set .noTarget :meetTarget:isNoTarget                         CoreBuilder.mnd: noTarget = isNoTarget;
  755:  op add *tmp379 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  756:  write *tmp379 .controller ".pressTarget"                     ...
  757:  op add *tmp380 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  758:  write *tmp380 .controller ".smelterTarget"                   ...
  759:  op add *tmp381 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  760:  write *tmp381 .controller ".kilnTarget"                      ...
  761:  write lead .controller ".leadReserve"                        CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  762:  op sign *tmp383 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  763:  op mul *tmp384 *tmp383 20                                    ...
  764:  op add *tmp385 :meetTarget:silicon *tmp384                   ...
  765:  write *tmp385 .controller ".siliconReserve"                  ...
  766:  op sign *tmp386 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  767:  op mul *tmp387 *tmp386 20                                    ...
  768:  op add *tmp388 :meetTarget:graphite *tmp387                  ...
  769:  write *tmp388 .controller ".graphiteReserve"                 ...
  770:  write lead processor7 ".leadTarget"                          CoreBuilder.mnd: monoController.leadTarget = targetLead;
  771:  write :meetTarget:copper processor7 ".copperTarget"          CoreBuilder.mnd: monoController.copperTarget = targetCopper;
        label *label317                                              CoreBuilder.mnd: while !targetMet() do
  772:  sensor *tmp390 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  773:  jump *label321 greaterThanEq *tmp390 copper                  ...
  774:  set *tmp389 false                                            ...
  775:  jump *label320 always 0 0                                    ...
        label *label321                                              ...
  776:  sensor *tmp393 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  777:  jump *label323 greaterThanEq *tmp393 lead                    ...
  778:  set *tmp389 false                                            ...
  779:  jump *label320 always 0 0                                    ...
        label *label323                                              ...
  780:  sensor *tmp396 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  781:  jump *label325 greaterThanEq *tmp396 graphite                ...
  782:  set *tmp389 false                                            ...
  783:  jump *label320 always 0 0                                    ...
        label *label325                                              ...
  784:  sensor *tmp399 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  785:  jump *label327 greaterThanEq *tmp399 silicon                 ...
  786:  set *tmp389 false                                            ...
  787:  jump *label320 always 0 0                                    ...
        label *label327                                              ...
  788:  sensor *tmp402 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  789:  jump *label329 greaterThanEq *tmp402 titanium                ...
  790:  set *tmp389 false                                            ...
  791:  jump *label320 always 0 0                                    ...
        label *label329                                              ...
  792:  sensor *tmp405 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  793:  jump *label331 greaterThanEq *tmp405 metaglass               ...
  794:  set *tmp389 false                                            ...
  795:  jump *label320 always 0 0                                    ...
        label *label331                                              ...
  796:  sensor *tmp408 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  797:  jump *label333 greaterThanEq *tmp408 thorium                 ...
  798:  set *tmp389 false                                            ...
  799:  jump *label320 always 0 0                                    ...
        label *label333                                              ...
  800:  set *tmp389 true                                             CoreBuilder.mnd: return true;
  801:  jump *label320 always 0 0                                    ...
        label *label320                                              CoreBuilder.mnd: while !targetMet() do
  802:  jump *label319 notEqual *tmp389 false                        ...
  803:  setaddr :supplyBase*retaddr *label317                        CoreBuilder.mnd: supplyBase();
  804:  call *label35 *invalid :supplyBase*retval                    ...
        label *label319                                              CoreBuilder.mnd: while !targetMet() do
  805:  jump *label336 equal :meetTarget:forBuild false              CoreBuilder.mnd: if forBuild then
  806:  write false .controller ":buildStart*finished"               CoreBuilder.mnd: controller.buildStart();
  807:  write 1 .controller "@counter"                               ...
        label *label338                                              ...
  808:  wait 1e-15                                                   ...
  809:  read *tmp413 .controller ":buildStart*finished"              ...
  810:  jump *label338 equal *tmp413 false                           ...
        label *label339                                              CoreBuilder.mnd: while !targetMet() do
  811:  sensor *tmp415 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  812:  jump *label343 greaterThanEq *tmp415 copper                  ...
  813:  set *tmp414 false                                            ...
  814:  jump *label342 always 0 0                                    ...
        label *label343                                              ...
  815:  sensor *tmp418 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  816:  jump *label345 greaterThanEq *tmp418 lead                    ...
  817:  set *tmp414 false                                            ...
  818:  jump *label342 always 0 0                                    ...
        label *label345                                              ...
  819:  sensor *tmp421 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  820:  jump *label347 greaterThanEq *tmp421 graphite                ...
  821:  set *tmp414 false                                            ...
  822:  jump *label342 always 0 0                                    ...
        label *label347                                              ...
  823:  sensor *tmp424 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  824:  jump *label349 greaterThanEq *tmp424 silicon                 ...
  825:  set *tmp414 false                                            ...
  826:  jump *label342 always 0 0                                    ...
        label *label349                                              ...
  827:  sensor *tmp427 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  828:  jump *label351 greaterThanEq *tmp427 titanium                ...
  829:  set *tmp414 false                                            ...
  830:  jump *label342 always 0 0                                    ...
        label *label351                                              ...
  831:  sensor *tmp430 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  832:  jump *label353 greaterThanEq *tmp430 metaglass               ...
  833:  set *tmp414 false                                            ...
  834:  jump *label342 always 0 0                                    ...
        label *label353                                              ...
  835:  sensor *tmp433 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  836:  jump *label355 greaterThanEq *tmp433 thorium                 ...
  837:  set *tmp414 false                                            ...
  838:  jump *label342 always 0 0                                    ...
        label *label355                                              ...
  839:  set *tmp414 true                                             CoreBuilder.mnd: return true;
  840:  jump *label342 always 0 0                                    ...
        label *label342                                              CoreBuilder.mnd: while !targetMet() do
  841:  jump *label341 notEqual *tmp414 false                        ...
  842:  setaddr :supplyBase*retaddr *label339                        CoreBuilder.mnd: supplyBase();
  843:  call *label35 *invalid :supplyBase*retval                    ...
        label *label341                                              CoreBuilder.mnd: while !targetMet() do
        label *label336                                              CoreBuilder.mnd: if forBuild then
  844:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
        label *label37                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
  845:  op notEqual *tmp437 .controller null                         CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, controller != null, false);
  846:  set :meetTarget:block :buildBlock:block                      ...
  847:  set :meetTarget:copper :buildBlock:copper                    ...
  848:  set :meetTarget:lead :buildBlock:lead                        ...
  849:  set :meetTarget:graphite :buildBlock:graphite                ...
  850:  set :meetTarget:silicon :buildBlock:silicon                  ...
  851:  set :meetTarget:titanium :buildBlock:titanium                ...
  852:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  853:  set :meetTarget:thorium :buildBlock:thorium                  ...
  854:  set :meetTarget:forBuild *tmp437                             ...
  855:  set :meetTarget:isNoTarget false                             ...
  856:  setaddr :meetTarget*retaddr *label359                        ...
  857:  call *label36 *invalid :meetTarget*retval                    ...
        label *label359                                              ...
  858:  write :buildBlock:block processor5 ":buildBlockAt:block"     CoreBuilder.mnd: var built = blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
  859:  write :buildBlock:x processor5 ":buildBlockAt:x"             ...
  860:  write :buildBlock:y processor5 ":buildBlockAt:y"             ...
  861:  write :buildBlock:rotation processor5 ":buildBlockAt:rotatio ...
  862:  write :buildBlock:config processor5 ":buildBlockAt:config"   ...
  863:  write :buildBlock:index processor5 ":buildBlockAt:index"     ...
  864:  write false processor5 ":buildBlockAt*finished"              ...
  865:  write 1 processor5 "@counter"                                ...
        label *label360                                              ...
  866:  wait 1e-15                                                   ...
  867:  read *tmp444 processor5 ":buildBlockAt*finished"             ...
  868:  jump *label360 equal *tmp444 false                           ...
  869:  read :buildBlock*retval processor5 ":buildBlockAt*retval"    ...
  870:  write false .controller ":buildStop*finished"                CoreBuilder.mnd: async(controller.buildStop());
  871:  write 2 .controller "@counter"                               ...
  872:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
        label *label12                                               Actions.mnd: void status2(text, item, block)
  873:  write :status2:text processor2 ".status2"                    Actions.mnd: display.status2 = text;
  874:  write :status2:item processor2 ".item2"                      Actions.mnd: display.item2 = item;
  875:  write :status2:block processor2 ".block2"                    Actions.mnd: display.block2 = block;
  876:  return :status2*retaddr                                      Actions.mnd: void status2(text, item, block)
        label *label14                                               Actions.mnd: void transportStatus(target, item)
  877:  write :transportStatus:target processor2 ".transportTarget"  Actions.mnd: display.transportTarget = target;
  878:  write :transportStatus:item processor2 ".transportItem"      Actions.mnd: display.transportItem = item;
  879:  return :transportStatus*retaddr                              Actions.mnd: void transportStatus(target, item)
        label *label18                                               Actions.mnd: void moveToEmpty(x, y)
  880:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label365                                              Actions.mnd: do
  881:  sensor *tmp446 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  882:  jump *label368 equal *tmp446 null                            ...
  883:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label368                                              ...
  884:  ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5 0 0      Actions.mnd: approach(x, y, RADIUS - 0.5);
  885:  ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp449 0    Actions.mnd: while !within(x, y, RADIUS);
  886:  jump *label365 equal *tmp449 false                           Actions.mnd: do
  887:  return :moveToEmpty*retaddr                                  Actions.mnd: void moveToEmpty(x, y)
        label *label19                                               Actions.mnd: void dropAll()
        label *label371                                              Actions.mnd: while @unit.@firstItem != null do
  888:  sensor *tmp451 @unit @firstItem                              ...
  889:  jump *label373 equal *tmp451 null                            ...
  890:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  891:  jump *label371 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label373                                              ...
  892:  return :dropAll*retaddr                                      Actions.mnd: void dropAll()
        label *label21                                               Actions.mnd: void depositItems(block, item)
  893:  write "Depositing..." processor2 ".status3"                  Actions.mnd: display.status3 = text;
  894:  sensor *tmp453 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  895:  jump *label376 notEqual *tmp453 :depositItems:item           ...
  896:  sensor *tmp502 :depositItems:block @x                        Actions.mnd: moveTo(block.@x, block.@y, radius);
  897:  sensor *tmp503 :depositItems:block @y                        ...
  898:  write "Moving..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
        label *label562                                              Actions.mnd: while !within(x, y, radius) do
  899:  ucontrol within *tmp502 *tmp503 6 *tmp508 0                  ...
  900:  jump *label564 notEqual *tmp508 false                        ...
  901:  ucontrol approach *tmp502 *tmp503 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  902:  jump *label562 always 0 0                                    Actions.mnd: while !within(x, y, radius) do
        label *label564                                              ...
  903:  sensor :depositItems:cap :depositItems:block @itemCapacity   Actions.mnd: var cap = block.@itemCapacity;
        label *label379                                              Actions.mnd: do
  904:  ucontrol itemDrop :depositItems:block 30 0 0 0               Actions.mnd: itemDrop(block, capacity);
  905:  sensor *tmp457 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  906:  op mul *tmp458 *tmp457 :depositItems:cap                     ...
  907:  sensor *tmp459 :depositItems:block :depositItems:item        ...
  908:  jump *label379 greaterThan *tmp458 *tmp459                   Actions.mnd: do
  909:  jump *label377 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label376                                              ...
        label *label382                                              Actions.mnd: while @unit.@firstItem != null do
  910:  sensor *tmp461 @unit @firstItem                              ...
  911:  jump *label384 equal *tmp461 null                            ...
  912:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  913:  jump *label382 always 0 0                                    Actions.mnd: while @unit.@firstItem != null do
        label *label384                                              ...
        label *label377                                              Actions.mnd: if @unit.@firstItem == item then
  914:  set :transportStatus:target 0                                Actions.mnd: transportStatus(0, null);
  915:  set :transportStatus:item null                               ...
  916:  setaddr :transportStatus*retaddr *label385                   ...
  917:  call *label14 *invalid :transportStatus*retval               ...
        label *label385                                              ...
  918:  return :depositItems*retaddr                                 Actions.mnd: void depositItems(block, item)
        label *label23                                               Actions.mnd: void mineOre(ore, amount, block)
  919:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  920:  set :transportStatus:target :mineOre:amount                  Actions.mnd: transportStatus(amount, ore);
  921:  set :transportStatus:item :mineOre:ore                       ...
  922:  setaddr :transportStatus*retaddr *label387                   ...
  923:  call *label14 *invalid :transportStatus*retval               ...
        label *label387                                              ...
  924:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  925:  jump *label556 notEqual *tmp504 false                        ...
  926:  set :error:error "Cannot locate ore"                         Actions.mnd: error("Cannot locate ore");
  927:  setaddr :error*retaddr *label555                             ...
  928:  call *label15 *invalid :error*retval                         ...
        label *label555                                              ...
        label *label556                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  929:  set :mineOre:x :locateOre:x                                  Actions.mnd: locateOre(ore, out x, out y);
  930:  set :mineOre:y :locateOre:y                                  ...
  931:  set :moveToEmpty:x :locateOre:x                              Actions.mnd: moveToEmpty(x, y);
  932:  set :moveToEmpty:y :locateOre:y                              ...
  933:  setaddr :moveToEmpty*retaddr *label389                       ...
  934:  call *label18 *invalid :moveToEmpty*retval                   ...
        label *label389                                              ...
  935:  sensor *tmp464 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  936:  jump *label390 equal *tmp464 :mineOre:ore                    ...
  937:  setaddr :dropAll*retaddr *label392                           ...
  938:  call *label19 *invalid :dropAll*retval                       ...
        label *label392                                              ...
        label *label390                                              ...
  939:  write "Mining..." processor2 ".status3"                      Actions.mnd: display.status3 = text;
  940:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label394                                              Actions.mnd: do
  941:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  942:  op notEqual *tmp469 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  943:  op notEqual *tmp470 :mineOre:item :mineOre:ore               ...
  944:  op land *tmp471 *tmp469 *tmp470                              ...
  945:  jump *label396 notEqual *tmp471 false                        ...
  946:  ucontrol mine :mineOre:x :mineOre:y 0 0 0                    Actions.mnd: mine(x, y);
  947:  jump *label396 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  948:  jump *label401 notEqual .noTarget false                      Actions.mnd: if not noTarget then
  949:  sensor *tmp478 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  950:  jump *label404 greaterThanEq *tmp478 copper                  ...
  951:  set *tmp477 false                                            ...
  952:  jump *label403 always 0 0                                    ...
        label *label404                                              ...
  953:  sensor *tmp481 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  954:  jump *label406 greaterThanEq *tmp481 lead                    ...
  955:  set *tmp477 false                                            ...
  956:  jump *label403 always 0 0                                    ...
        label *label406                                              ...
  957:  sensor *tmp484 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  958:  jump *label408 greaterThanEq *tmp484 graphite                ...
  959:  set *tmp477 false                                            ...
  960:  jump *label403 always 0 0                                    ...
        label *label408                                              ...
  961:  sensor *tmp487 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  962:  jump *label410 greaterThanEq *tmp487 silicon                 ...
  963:  set *tmp477 false                                            ...
  964:  jump *label403 always 0 0                                    ...
        label *label410                                              ...
  965:  sensor *tmp490 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  966:  jump *label412 greaterThanEq *tmp490 titanium                ...
  967:  set *tmp477 false                                            ...
  968:  jump *label403 always 0 0                                    ...
        label *label412                                              ...
  969:  sensor *tmp493 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  970:  jump *label414 greaterThanEq *tmp493 metaglass               ...
  971:  set *tmp477 false                                            ...
  972:  jump *label403 always 0 0                                    ...
        label *label414                                              ...
  973:  sensor *tmp496 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  974:  jump *label416 greaterThanEq *tmp496 thorium                 ...
  975:  set *tmp477 false                                            ...
  976:  jump *label403 always 0 0                                    ...
        label *label416                                              ...
  977:  set *tmp477 true                                             CoreBuilder.mnd: return true;
  978:  jump *label403 always 0 0                                    ...
        label *label403                                              Actions.mnd: if targetMet() then
  979:  jump *label396 notEqual *tmp477 false                        ...
        label *label401                                              Actions.mnd: if not noTarget then
  980:  sensor *tmp500 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  981:  jump *label394 lessThan *tmp500 :mineOre:amount              Actions.mnd: do
        label *label396                                              ...
  982:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  983:  set :depositItems:block :mineOre:block                       Actions.mnd: depositItems(block, ore);
  984:  set :depositItems:item :mineOre:ore                          ...
  985:  setaddr :depositItems*retaddr *label420                      ...
  986:  call *label21 *invalid :depositItems*retval                  ...
        label *label420                                              ...
  987:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)


Performance: parsed in 779 ms, compiled in 415 ms, optimized in 3,615 ms, run in 16 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 1: read *tmp30 processor2 "*signature":
Variable 'processor2' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
