  1393 instructions before optimizations.
    80 instructions eliminated by Temp Variables Elimination (2 iterations).
   106 instructions eliminated by Dead Code Elimination (10 iterations).
C:\Home\golem\jam-202507\CoreBuilder.mnd:123:9 Variable 'unpackCfg.size' is not used.
C:\Home\golem\jam-202507\Actions.mnd:29:14 Variable 'ERROR' is not used.
     1 instructions eliminated by Jump Normalization (5 iterations).
    54 instructions eliminated by Jump Optimization (5 iterations).
    35 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     2 instructions eliminated by If Expression Optimization (3 iterations).
   155 instructions eliminated by Data Flow Optimization (21 passes, 67 iterations).
     1 loops improved by Loop Hoisting.
     7 instructions added by Loop Optimization (3 iterations).
     7 loops improved by Loop Optimization.
     2 instructions eliminated by Loop Unrolling (29 iterations).
     1 loops unrolled by Loop Unrolling.
    32 instructions added by Function Inlining (29 iterations).
    45 function calls inlined by Function Inlining.
     3 instructions eliminated by Jump Straightening (5 iterations).
    12 instructions updated by JumpThreading.
    17 instructions eliminated by Unreachable Code Elimination (2 iterations).
   977 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Unroll iteration loop at CoreBuilder.mnd:241:5               size   -13, benefit     1161.0, efficiency   Infinity (-10 instructions)
    Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4396.9, efficiency   Infinity
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16422.7, efficiency   Infinity
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3691.4, efficiency   Infinity
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6562.5, efficiency    437.500
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3281.3, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6562.5, efficiency    145.833
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +181, benefit      301.0, efficiency      1.663
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:503:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2871.1, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3691.4, efficiency    527.344
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3281.3, efficiency    546.875
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2362.5, efficiency    295.313
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2067.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:124:5                    size   +23, benefit     2362.5, efficiency    102.717
  ! Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
  ! Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
  ! Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
  ! Inline function call at Actions.mnd:136:5                    size    +8, benefit     3000.0, efficiency    375.000
  ! Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
  ! Inline function call at Actions.mnd:147:5                    size   +23, benefit     3000.0, efficiency    130.435
  ! Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
  ! Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
  ! Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
  ! Inline function call at Actions.mnd:163:5                    size    +8, benefit     1200.0, efficiency    150.000
  ! Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
  ! Inline function call at Actions.mnd:174:5                    size   +23, benefit     1200.0, efficiency     52.174
    Inline function call at CoreBuilder.mnd:204:5                size    +0, benefit     2100.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:199:5                size    +0, benefit     1050.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:136:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:144:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:148:17               size    +0, benefit       65.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:156:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:167:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:170:17               size    +0, benefit       65.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:176:17               size    +0, benefit       32.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:179:17               size    +0, benefit       16.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:182:17               size    +0, benefit        8.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:185:17               size    +0, benefit        8.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:193:9                size    +0, benefit      525.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +161, benefit     3225.0, efficiency     20.031
  ! Inline function call at CoreBuilder.mnd:278:5                size   +91, benefit      259.0, efficiency      2.846
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +91, benefit       14.0, efficiency      0.154
  ! Inline function call at CoreBuilder.mnd:382:5                size   +91, benefit       28.0, efficiency      0.308

Pass 1: speed optimization selection (cost limit 0):
  ! Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
  ! Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'status1' defined at Actions.mnd:7:1         size    -1, benefit     4396.9, efficiency   Infinity (-29 instructions)
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16422.7, efficiency   Infinity
  ! Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
  ! Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3691.4, efficiency   Infinity
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6562.5, efficiency    437.500
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3281.3, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6562.5, efficiency    145.833
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:503:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +161, benefit       75.0, efficiency      0.466
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2871.1, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3691.4, efficiency    527.344
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3281.3, efficiency    546.875
  ! Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
  ! Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
  ! Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2362.5, efficiency    295.313
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2067.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:124:5                    size   +23, benefit     2362.5, efficiency    102.717
  ! Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
  ! Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
  ! Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
  ! Inline function call at Actions.mnd:136:5                    size    +8, benefit     3000.0, efficiency    375.000
  ! Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
  ! Inline function call at Actions.mnd:147:5                    size   +23, benefit     3000.0, efficiency    130.435
  ! Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
  ! Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
  ! Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
  ! Inline function call at Actions.mnd:163:5                    size    +8, benefit     1200.0, efficiency    150.000
  ! Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
  ! Inline function call at Actions.mnd:174:5                    size   +23, benefit     1200.0, efficiency     52.174
    Inline function call at CoreBuilder.mnd:204:5                size    +0, benefit     2100.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:199:5                size    +0, benefit     1050.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:136:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:144:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:148:17               size    +0, benefit       65.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:156:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:167:17               size    +0, benefit      131.3, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:170:17               size    +0, benefit       65.6, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:176:17               size    +0, benefit       32.8, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:179:17               size    +0, benefit       16.4, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:182:17               size    +0, benefit        8.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:185:17               size    +0, benefit        8.2, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:193:9                size    +0, benefit      525.0, efficiency   Infinity
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +161, benefit     3225.0, efficiency     20.031
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 2):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
  * Inline function 'status3' defined at Actions.mnd:17:1        size    -1, benefit    16422.7, efficiency   Infinity (-11 instructions)
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3691.4, efficiency   Infinity
  ! Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +15, benefit     6562.5, efficiency    437.500
  ! Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3281.3, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +45, benefit     6562.5, efficiency    145.833
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:503:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:38:5                     size    +0, benefit     2871.1, efficiency   Infinity
    Inline function call at Actions.mnd:51:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:68:5                     size    +7, benefit     3691.4, efficiency    527.344
    Inline function call at Actions.mnd:75:5                     size    +0, benefit     5742.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:77:9                     size    +6, benefit     3281.3, efficiency    546.875
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
  ! Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
  ! Inline function call at Actions.mnd:105:5                    size    +8, benefit     2362.5, efficiency    295.313
  ! Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:108:5                    size    +0, benefit     2067.2, efficiency   Infinity
  ! Inline function call at Actions.mnd:124:5                    size   +23, benefit     2362.5, efficiency    102.717
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
  ! Inline function call at Actions.mnd:136:5                    size    +8, benefit     3000.0, efficiency    375.000
  ! Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
  ! Inline function call at Actions.mnd:147:5                    size   +23, benefit     3000.0, efficiency    130.435
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
  ! Inline function call at Actions.mnd:163:5                    size    +8, benefit     1200.0, efficiency    150.000
  ! Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
  ! Inline function call at Actions.mnd:174:5                    size   +23, benefit     1200.0, efficiency     52.174
  ! Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
  ! Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
  ! Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
  ! Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
  ! Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
  ! Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
  ! Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
  ! Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
  ! Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
  ! Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
  ! Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +135, benefit     3225.0, efficiency     23.889
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 13):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
  * Inline function 'moveTo' defined at Actions.mnd:37:1         size    -1, benefit     3691.4, efficiency   Infinity (-7 instructions)
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
    Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3281.3, efficiency   Infinity
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6562.5, efficiency    160.061
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     2657.8, efficiency     78.171
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:503:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:68:5                     size    +5, benefit     3691.4, efficiency    738.281
    Inline function call at Actions.mnd:77:9                     size    +6, benefit     3281.3, efficiency    546.875
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
  ! Inline function call at Actions.mnd:124:5                    size   +21, benefit     2362.5, efficiency    112.500
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +35, benefit     1687.5, efficiency     48.214
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
  ! Inline function call at Actions.mnd:147:5                    size   +21, benefit     3000.0, efficiency    142.857
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +35, benefit      970.3, efficiency     27.723
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
  ! Inline function call at Actions.mnd:174:5                    size   +21, benefit     1200.0, efficiency     57.143
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +135, benefit     3225.0, efficiency     23.889
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 20):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
  * Inline function 'moveToBlock' defined at Actions.mnd:67:1    size    -1, benefit     3281.3, efficiency   Infinity (-7 instructions)
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +41, benefit     6562.5, efficiency    160.061
    Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     2657.8, efficiency     78.171
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:503:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:77:9                     size    +7, benefit     3281.3, efficiency    468.750
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
  ! Inline function call at Actions.mnd:124:5                    size   +21, benefit     2362.5, efficiency    112.500
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +35, benefit     1687.5, efficiency     48.214
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
  ! Inline function call at Actions.mnd:147:5                    size   +21, benefit     3000.0, efficiency    142.857
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +35, benefit      970.3, efficiency     27.723
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
  ! Inline function call at Actions.mnd:174:5                    size   +21, benefit     1200.0, efficiency     57.143
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +135, benefit     3225.0, efficiency     23.889
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 27):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
  * Inline function 'locateOre' defined at Actions.mnd:92:1      size    -1, benefit     2657.8, efficiency   Infinity (-5 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     2657.8, efficiency     78.171
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
    Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:503:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:103:5                    size    +4, benefit     2657.8, efficiency    664.453
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +35, benefit     1687.5, efficiency     48.214
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +35, benefit      970.3, efficiency     27.723
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
  ! Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +135, benefit     3225.0, efficiency     23.889
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 32):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  * Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 size    -1, benefit     1200.0, efficiency   Infinity (-4 instructions)
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +135, benefit       75.0, efficiency      0.556
  ! Inline function call at CoreBuilder.mnd:503:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +135, benefit       75.0, efficiency      0.556
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at CoreBuilder.mnd:209:9                size   +31, benefit     1200.0, efficiency     38.710
  ! Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
  ! Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +135, benefit     3225.0, efficiency     23.889
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 36):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:61:5                 size    +1, benefit    33632.8, efficiency  33632.813 (+1 instructions)
    Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +5, benefit     4035.9, efficiency    807.188
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +3, benefit      885.9, efficiency    295.313
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +3, benefit     2250.0, efficiency    750.000
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +3, benefit      900.0, efficiency    300.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 35):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:39:5                 size    +1, benefit    20507.8, efficiency  20507.813 (+1 instructions)
    Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 34):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  * Replicate loop condition at Actions.mnd:84:9                 size    +1, benefit    20507.8, efficiency  20507.813 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +49, benefit     6562.5, efficiency    133.929
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +25, benefit     2362.5, efficiency     94.500
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +25, benefit     3000.0, efficiency    120.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +25, benefit     1200.0, efficiency     48.000
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 33):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +2, benefit    13125.0, efficiency   6562.500
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +51, benefit     6562.5, efficiency    128.676
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  * Inline function call at Actions.mnd:88:5                     size    +1, benefit     6562.5, efficiency   6562.500 (-2 instructions)
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +26, benefit     2362.5, efficiency     90.865
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +26, benefit     3000.0, efficiency    115.385
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +26, benefit     1200.0, efficiency     46.154
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 35):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
  * Inline function 'transportStatus' defined at Actions.mnd:21:1 size    +1, benefit     6562.5, efficiency   6562.500 (-7 instructions)
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +36, benefit     2657.8, efficiency     73.828
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:101:5                    size    +1, benefit     2362.5, efficiency   2362.500
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
  ! Inline function call at Actions.mnd:130:5                    size   +37, benefit     1687.5, efficiency     45.608
    Inline function call at Actions.mnd:134:5                    size    +1, benefit     3000.0, efficiency   3000.000
    Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
  ! Inline function call at Actions.mnd:156:9                    size   +37, benefit      970.3, efficiency     26.225
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:161:5                    size    +1, benefit     1200.0, efficiency   1200.000
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 42):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'status2' defined at Actions.mnd:11:1        size    +5, benefit     8353.1, efficiency   1670.625
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     2657.8, efficiency     75.938
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +31, benefit     3000.0, efficiency     96.774
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:503:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1687.5, efficiency     46.875
  * Inline function call at Actions.mnd:135:5                    size    +2, benefit     3375.0, efficiency   1687.500 (-2 instructions)
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      970.3, efficiency     26.953
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +32, benefit     2400.0, efficiency     75.000
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +32, benefit      600.0, efficiency     18.750
  ! Inline function call at CoreBuilder.mnd:271:9                size  +164, benefit     3225.0, efficiency     19.665
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 44):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'status2' defined at Actions.mnd:11:1        size    +3, benefit     4978.1, efficiency   1659.375 (-11 instructions)
    Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
  ! Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     2657.8, efficiency     75.938
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +53, benefit     1312.5, efficiency     24.764
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     3000.0, efficiency    103.448
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +51, benefit     1725.0, efficiency     33.824
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +164, benefit       75.0, efficiency      0.457
  ! Inline function call at CoreBuilder.mnd:503:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +164, benefit       75.0, efficiency      0.457
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:129:5                    size    +2, benefit     1687.5, efficiency    843.750
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1687.5, efficiency     46.875
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:152:5                    size    +2, benefit     1940.6, efficiency    970.313
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      970.3, efficiency     26.953
    Inline function call at CoreBuilder.mnd:207:9                size   +13, benefit     1200.0, efficiency     92.308
    Inline function call at Actions.mnd:162:5                    size    +2, benefit     1350.0, efficiency    675.000
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +30, benefit     2400.0, efficiency     80.000
    Inline function call at CoreBuilder.mnd:200:5                size    +9, benefit     1050.0, efficiency    116.667
    Inline function call at CoreBuilder.mnd:137:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:145:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:149:17               size   +13, benefit       75.0, efficiency      5.769
    Inline function call at CoreBuilder.mnd:157:17               size   +13, benefit      150.0, efficiency     11.538
    Inline function call at CoreBuilder.mnd:168:17               size    +9, benefit      131.3, efficiency     14.583
    Inline function call at CoreBuilder.mnd:174:17               size    +9, benefit       65.6, efficiency      7.292
    Inline function call at CoreBuilder.mnd:177:17               size    +9, benefit       32.8, efficiency      3.646
    Inline function call at CoreBuilder.mnd:180:17               size    +9, benefit       16.4, efficiency      1.823
    Inline function call at CoreBuilder.mnd:183:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:189:17               size    +9, benefit        8.2, efficiency      0.911
    Inline function call at CoreBuilder.mnd:194:9                size   +30, benefit      600.0, efficiency     20.000
  ! Inline function call at CoreBuilder.mnd:271:9                size  +164, benefit     3225.0, efficiency     19.665
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 55):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'error' defined at Actions.mnd:31:1          size    +1, benefit     1037.1, efficiency   1037.094 (-7 instructions)
    Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +35, benefit     2657.8, efficiency     75.938
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1312.5, efficiency     32.012
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     3000.0, efficiency    103.448
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:314:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +162, benefit       75.0, efficiency      0.463
  ! Inline function call at CoreBuilder.mnd:503:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:343:21               size    +1, benefit        1.8, efficiency      1.750
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:94:9                     size    +1, benefit     1033.6, efficiency   1033.594
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:130:5                    size   +36, benefit     1687.5, efficiency     46.875
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:156:9                    size   +36, benefit      970.3, efficiency     26.953
    Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +30, benefit     2400.0, efficiency     80.000
    Inline function call at CoreBuilder.mnd:200:5                size    +7, benefit     1050.0, efficiency    150.000
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:194:9                size   +30, benefit      600.0, efficiency     20.000
  ! Inline function call at CoreBuilder.mnd:271:9                size  +162, benefit     3225.0, efficiency     19.907
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 62):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'moveToEmpty' defined at Actions.mnd:50:1    size   +11, benefit     6562.5, efficiency    596.591 (+0 instructions)
    Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +34, benefit     2657.8, efficiency     78.171
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1312.5, efficiency     32.012
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +29, benefit     3000.0, efficiency    103.448
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +162, benefit       75.0, efficiency      0.463
  ! Inline function call at CoreBuilder.mnd:503:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +162, benefit       75.0, efficiency      0.463
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:105:5                    size    +6, benefit     2362.5, efficiency    393.750
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:130:5                    size   +35, benefit     1687.5, efficiency     48.214
    Inline function call at Actions.mnd:136:5                    size    +6, benefit     3000.0, efficiency    500.000
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:156:9                    size   +35, benefit      970.3, efficiency     27.723
    Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091
    Inline function call at Actions.mnd:163:5                    size    +6, benefit     1200.0, efficiency    200.000
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +30, benefit     2400.0, efficiency     80.000
    Inline function call at CoreBuilder.mnd:200:5                size    +7, benefit     1050.0, efficiency    150.000
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:194:9                size   +30, benefit      600.0, efficiency     20.000
  ! Inline function call at CoreBuilder.mnd:271:9                size  +162, benefit     3225.0, efficiency     19.907
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 62):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'dropAll' defined at Actions.mnd:59:1        size    +7, benefit     4035.9, efficiency    576.563 (-2 instructions)
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +37, benefit     2657.8, efficiency     71.833
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1312.5, efficiency     32.012
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +32, benefit     3000.0, efficiency     93.750
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +165, benefit       75.0, efficiency      0.455
  ! Inline function call at CoreBuilder.mnd:503:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +165, benefit       75.0, efficiency      0.455
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:106:37                   size    +4, benefit      885.9, efficiency    221.484
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:130:5                    size   +38, benefit     1687.5, efficiency     44.408
    Inline function call at Actions.mnd:137:5                    size    +4, benefit     2250.0, efficiency    562.500
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:156:9                    size   +38, benefit      970.3, efficiency     25.535
    Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091
    Inline function call at Actions.mnd:164:5                    size    +4, benefit      900.0, efficiency    225.000
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +33, benefit     2400.0, efficiency     72.727
    Inline function call at CoreBuilder.mnd:200:5                size    +7, benefit     1050.0, efficiency    150.000
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:194:9                size   +33, benefit      600.0, efficiency     18.182
  ! Inline function call at CoreBuilder.mnd:271:9                size  +165, benefit     3225.0, efficiency     19.545
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 64):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
    Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628
    Inline function 'mineOre' defined at Actions.mnd:99:1        size   +38, benefit     2657.8, efficiency     69.942
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +41, benefit     1312.5, efficiency     32.012
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +35, benefit     3000.0, efficiency     85.714
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
    Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +166, benefit       75.0, efficiency      0.452
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +166, benefit       75.0, efficiency      0.452
  ! Inline function call at CoreBuilder.mnd:503:9                size  +166, benefit       75.0, efficiency      0.452
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +166, benefit       75.0, efficiency      0.452
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +166, benefit       75.0, efficiency      0.452
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:130:5                    size   +39, benefit     1687.5, efficiency     43.269
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:156:9                    size   +39, benefit      970.3, efficiency     24.880
    Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +36, benefit     2400.0, efficiency     66.667
  * Inline function call at CoreBuilder.mnd:200:5                size    +7, benefit     1050.0, efficiency    150.000 (+6 instructions)
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:194:9                size   +36, benefit      600.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:271:9                size  +166, benefit     3225.0, efficiency     19.428
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 58):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  * Inline function 'depositItems' defined at Actions.mnd:74:1   size   +47, benefit     6562.5, efficiency    139.628 (+35 instructions)
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size   +77, benefit     4007.8, efficiency     52.050
    Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
    Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +35, benefit     3000.0, efficiency     85.714
    Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
    Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
    Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
    Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +172, benefit       75.0, efficiency      0.436
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +172, benefit       75.0, efficiency      0.436
  ! Inline function call at CoreBuilder.mnd:503:9                size  +172, benefit       75.0, efficiency      0.436
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +172, benefit       75.0, efficiency      0.436
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +172, benefit       75.0, efficiency      0.436
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at Actions.mnd:124:5                    size   +24, benefit     2362.5, efficiency     98.438
    Inline function call at Actions.mnd:130:5                    size   +39, benefit     1687.5, efficiency     43.269
    Inline function call at Actions.mnd:147:5                    size   +24, benefit     3000.0, efficiency    125.000
    Inline function call at Actions.mnd:156:9                    size   +39, benefit      970.3, efficiency     24.880
    Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091
    Inline function call at Actions.mnd:174:5                    size   +24, benefit     1200.0, efficiency     50.000
    Inline function call at CoreBuilder.mnd:211:5                size   +36, benefit     2400.0, efficiency     66.667
    Inline function call at Actions.mnd:130:5                    size   +39, benefit     1350.0, efficiency     34.615
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:194:9                size   +36, benefit      600.0, efficiency     16.667
  ! Inline function call at CoreBuilder.mnd:271:9                size  +172, benefit     3225.0, efficiency     18.750
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
    Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
    Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
    Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 23):
    Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +117, benefit     4007.8, efficiency     34.255
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +43, benefit     1725.0, efficiency     40.116
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
    Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
    Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +193, benefit       75.0, efficiency      0.389
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +193, benefit       75.0, efficiency      0.389
  ! Inline function call at CoreBuilder.mnd:503:9                size  +193, benefit       75.0, efficiency      0.389
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
    Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +193, benefit       75.0, efficiency      0.389
    Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +193, benefit       75.0, efficiency      0.389
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  * Inline function call at CoreBuilder.mnd:207:9                size   +11, benefit     1200.0, efficiency    109.091 (+10 instructions)
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +193, benefit     3225.0, efficiency     16.710
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
    Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
    Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
    Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 13):
  * Replicate loop condition at CoreBuilder.mnd:497:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     4682.8, efficiency     26.607
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:503:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +203, benefit     3225.0, efficiency     15.887
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 12):
  * Replicate loop condition at CoreBuilder.mnd:502:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     4682.8, efficiency     26.607
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:503:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +203, benefit     3225.0, efficiency     15.887
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 11):
  * Replicate loop condition at CoreBuilder.mnd:521:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     4682.8, efficiency     26.607
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
    Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:503:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
    Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
    Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +203, benefit     3225.0, efficiency     15.887
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 10):
  * Replicate loop condition at CoreBuilder.mnd:532:5            size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     4682.8, efficiency     26.607
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:503:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
    Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +203, benefit     3225.0, efficiency     15.887
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 9):
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +176, benefit     4682.8, efficiency     26.607
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +34, benefit      262.5, efficiency      7.721
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:503:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +203, benefit       75.0, efficiency      0.369
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +203, benefit       75.0, efficiency      0.369
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
  * Inline function call at CoreBuilder.mnd:168:17               size    +7, benefit      131.3, efficiency     18.750 (+6 instructions)
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +203, benefit     3225.0, efficiency     15.887
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 1: speed optimization selection (cost limit 3):
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +235, benefit     4851.6, efficiency     20.645
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      131.3, efficiency      4.861
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +161, benefit      301.0, efficiency      1.870
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +21, benefit      351.5, efficiency     16.738
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +62, benefit      132.0, efficiency      2.129
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +209, benefit       75.0, efficiency      0.359
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +209, benefit       75.0, efficiency      0.359
  ! Inline function call at CoreBuilder.mnd:503:9                size  +209, benefit       75.0, efficiency      0.359
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +209, benefit       75.0, efficiency      0.359
  ! Inline function call at CoreBuilder.mnd:525:28               size   +21, benefit        4.0, efficiency      0.190
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +209, benefit       75.0, efficiency      0.359
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      168.8, efficiency      2.860
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
  ! Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +209, benefit     3225.0, efficiency     15.431
  ! Inline function call at CoreBuilder.mnd:278:5                size   +81, benefit      259.0, efficiency      3.198
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +22, benefit       38.0, efficiency      1.727
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +22, benefit      313.5, efficiency     14.250
  ! Inline function call at CoreBuilder.mnd:299:5                size   +21, benefit      120.0, efficiency      5.714
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +81, benefit       14.0, efficiency      0.173
  ! Inline function call at CoreBuilder.mnd:382:5                size   +81, benefit       28.0, efficiency      0.346

Pass 2: speed optimization selection (cost limit 10):
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +235, benefit     4851.6, efficiency     20.645
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      131.3, efficiency      4.861
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +159, benefit      301.0, efficiency      1.893
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +20, benefit      351.5, efficiency     17.575
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +59, benefit      132.0, efficiency      2.237
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +26, benefit      400.0, efficiency     15.385
    Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
    Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +206, benefit       75.0, efficiency      0.364
    Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
    Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:503:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:525:28               size   +20, benefit        4.0, efficiency      0.200
    Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
    Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +206, benefit       75.0, efficiency      0.364
    Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
    Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  * Inline function call at CoreBuilder.mnd:572:9                size    +9, benefit      100.0, efficiency     11.111 (+7 instructions)
    Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
    Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      168.8, efficiency      2.860
    Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
    Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
    Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
    Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
    Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +206, benefit     3225.0, efficiency     15.655
  ! Inline function call at CoreBuilder.mnd:278:5                size   +80, benefit      259.0, efficiency      3.238
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +21, benefit       38.0, efficiency      1.810
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +21, benefit      313.5, efficiency     14.929
  ! Inline function call at CoreBuilder.mnd:299:5                size   +20, benefit      120.0, efficiency      6.000
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +80, benefit       14.0, efficiency      0.175
  ! Inline function call at CoreBuilder.mnd:382:5                size   +80, benefit       28.0, efficiency      0.350

Pass 2: speed optimization selection (cost limit 3):
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +235, benefit     4851.6, efficiency     20.645
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      131.3, efficiency      4.861
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +159, benefit      301.0, efficiency      1.893
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +20, benefit      351.5, efficiency     17.575
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +59, benefit      132.0, efficiency      2.237
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +17, benefit      300.0, efficiency     17.647
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:503:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:525:28               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      168.8, efficiency      2.860
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
  ! Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +206, benefit     3225.0, efficiency     15.655
  ! Inline function call at CoreBuilder.mnd:278:5                size   +80, benefit      259.0, efficiency      3.238
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +21, benefit       38.0, efficiency      1.810
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +21, benefit      313.5, efficiency     14.929
  ! Inline function call at CoreBuilder.mnd:299:5                size   +20, benefit      120.0, efficiency      6.000
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +80, benefit       14.0, efficiency      0.175
  ! Inline function call at CoreBuilder.mnd:382:5                size   +80, benefit       28.0, efficiency      0.350

Pass 3: speed optimization selection (cost limit 3):
  ! Replicate loop condition at CoreBuilder.mnd:270:5            size   +30, benefit     1075.0, efficiency     35.833
  ! Inline function 'mineOre' defined at Actions.mnd:99:1        size  +235, benefit     4851.6, efficiency     20.645
  ! Inline function 'mineOre' defined at Actions.mnd:128:1       size   +27, benefit      131.3, efficiency      4.861
  ! Inline function 'fetchBlock' defined at Actions.mnd:133:1    size   +56, benefit     3000.0, efficiency     53.571
  ! Inline function 'supplyBlock' defined at Actions.mnd:151:1   size   +32, benefit      525.0, efficiency     16.406
  ! Inline function 'unpackCfg' defined at CoreBuilder.mnd:110:1 size   +47, benefit      362.5, efficiency      7.713
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:238:1 size  +159, benefit      301.0, efficiency      1.893
  ! Inline function 'buildBlock' defined at CoreBuilder.mnd:277:1 size   +20, benefit      351.5, efficiency     17.575
  ! Inline function 'buildRemoteBlock' defined at CoreBuilder.mnd:282:1 size  +160, benefit       36.0, efficiency      0.225
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:292:1 size   +59, benefit      132.0, efficiency      2.237
  ! Inline function 'buildBlockFromCfg' defined at CoreBuilder.mnd:298:1 size  +115, benefit      105.0, efficiency      0.913
  ! Inline function 'meetTarget' defined at CoreBuilder.mnd:302:1 size   +11, benefit        7.0, efficiency      0.636
  ! Inline function 'buildUnits' defined at CoreBuilder.mnd:381:1 size   +41, benefit       12.0, efficiency      0.293
  ! Inline function 'flagUnits' defined at CoreBuilder.mnd:579:1 size   +20, benefit       14.0, efficiency      0.700
  ! Inline function 'lineUpUnits' defined at CoreBuilder.mnd:593:1 size   +17, benefit      300.0, efficiency     17.647
  ! Inline function call at CoreBuilder.mnd:400:13               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:401:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:402:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:403:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:407:15               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:408:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:309:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:411:17               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:412:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:413:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:418:18               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:429:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:430:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:432:19               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:445:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:447:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:458:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:459:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:460:12               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:464:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:465:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:466:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:467:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:469:29               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:476:32               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:477:28               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:478:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:479:25               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:482:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:484:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:491:27               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:492:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:493:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:494:5                size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:495:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:498:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:503:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:340:5                size   +12, benefit        3.5, efficiency      0.292
  ! Inline function call at CoreBuilder.mnd:346:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:347:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:348:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:349:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:350:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:351:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:352:5                size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:353:24               size   +23, benefit        4.5, efficiency      0.196
  ! Inline function call at CoreBuilder.mnd:522:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:525:28               size   +20, benefit        4.0, efficiency      0.200
  ! Inline function call at CoreBuilder.mnd:526:5                size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:365:30               size    +4, benefit        3.5, efficiency      0.875
  ! Inline function call at CoreBuilder.mnd:530:5                size   +14, benefit        3.0, efficiency      0.214
  ! Inline function call at CoreBuilder.mnd:533:9                size  +206, benefit       75.0, efficiency      0.364
  ! Inline function call at CoreBuilder.mnd:566:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:567:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:568:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:569:5                size    +7, benefit        3.5, efficiency      0.500
  ! Inline function call at CoreBuilder.mnd:573:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:574:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at CoreBuilder.mnd:575:9                size    +9, benefit      100.0, efficiency     11.111
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1687.5, efficiency     28.602
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      970.3, efficiency     16.446
  ! Inline function call at Actions.mnd:156:9                    size   +59, benefit      675.0, efficiency     11.441
  ! Inline function call at CoreBuilder.mnd:211:5                size   +57, benefit     2400.0, efficiency     42.105
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit     1350.0, efficiency     22.881
  ! Inline function call at CoreBuilder.mnd:137:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:145:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at CoreBuilder.mnd:149:17               size   +11, benefit       75.0, efficiency      6.818
  ! Inline function call at CoreBuilder.mnd:157:17               size   +11, benefit      150.0, efficiency     13.636
  ! Inline function call at Actions.mnd:130:5                    size   +59, benefit      168.8, efficiency      2.860
  ! Inline function call at CoreBuilder.mnd:174:17               size    +7, benefit       65.6, efficiency      9.375
  ! Inline function call at CoreBuilder.mnd:177:17               size    +7, benefit       32.8, efficiency      4.688
  ! Inline function call at CoreBuilder.mnd:180:17               size    +7, benefit       16.4, efficiency      2.344
  ! Inline function call at CoreBuilder.mnd:183:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:189:17               size    +7, benefit        8.2, efficiency      1.172
  ! Inline function call at CoreBuilder.mnd:194:9                size   +57, benefit      600.0, efficiency     10.526
  ! Inline function call at CoreBuilder.mnd:271:9                size  +206, benefit     3225.0, efficiency     15.655
  ! Inline function call at CoreBuilder.mnd:278:5                size   +80, benefit      259.0, efficiency      3.238
  ! Inline function call at CoreBuilder.mnd:285:9                size   +24, benefit       34.0, efficiency      1.417
  ! Inline function call at CoreBuilder.mnd:286:16               size   +21, benefit       38.0, efficiency      1.810
  ! Inline function call at CoreBuilder.mnd:294:5                size   +24, benefit      313.5, efficiency     13.063
  ! Inline function call at CoreBuilder.mnd:295:12               size   +21, benefit      313.5, efficiency     14.929
  ! Inline function call at CoreBuilder.mnd:299:5                size   +20, benefit      120.0, efficiency      6.000
  ! Inline function call at CoreBuilder.mnd:304:5                size   +24, benefit       15.0, efficiency      0.625
  ! Inline function call at CoreBuilder.mnd:305:5                size   +80, benefit       14.0, efficiency      0.175
  ! Inline function call at CoreBuilder.mnd:382:5                size   +80, benefit       28.0, efficiency      0.350

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-79 instructions):
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label47 (h:*label47)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label47) (h:*label47)
    45 label *label47
-    * set *tmp133 :buildBlockFromCfg.1*retval
    46 set :buildBlockFromCfg.1:cfg "m*.<2######$&"
    47 setaddr :buildBlockFromCfg.1*retaddr *label48 (h:*label48)
    48 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label48) (h:*label48)
 
    60 setaddr :buildBlockFromCfg.1*retaddr *label50 (h:*label50)
    61 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label50) (h:*label50)
    62 label *label50
-    * set *tmp136 :buildBlockFromCfg.1*retval
    63 set :buildFirstTitaniumDrill:cfg "w**5#-#####%)"
    64 set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
    65 setaddr :meetTarget.1*retaddr *label52 (h:*label52)
 
    91 setaddr :error*retaddr *label56 (h:*label56)
    92 call *label13 *invalid :error*retval (m:*label56) (h:*label56)
    93 label *label56
-    * set *tmp151 null
    94 jump *label55 always
    95 label *label54
-    * set *tmp151 null
    96 label *label55
    97 write @pneumatic-drill .display ".nextBlock"
    98 write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
 
   120 setaddr :buildBlockFromCfg.1*retaddr *label59 (h:*label59)
   121 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label59) (h:*label59)
   122 label *label59
-    * set *tmp157 :buildBlockFromCfg.1*retval
   123 set :buildBlockFromCfg.1:cfg "W*-'%######$,"
   124 setaddr :buildBlockFromCfg.1*retaddr *label60 (h:*label60)
   125 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label60) (h:*label60)
   126 label *label60
-    * set *tmp158 :buildBlockFromCfg.1*retval
   127 set .graphiteSurplus 100
   128 set :buildBlockFromCfg:cfg "®-.}U#U####$-"
   129 set :buildBlockFromCfg:config processor2
 
   145 setaddr :buildBlockFromCfg.1*retaddr *label62 (h:*label62)
   146 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label62) (h:*label62)
   147 label *label62
-    * set *tmp160 :buildBlockFromCfg.1*retval
   148 set :buildBlockFromCfg.1:cfg "(*###A<###$/"
   149 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   150 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
 
   183 op lessThan *tmp164 *tmp163 300
   184 jump *label72 equal *tmp164 false
   185 jump *label70 always
-    * set *tmp165 null
   186 jump *label73 always
   187 label *label72
-    * set *tmp165 null
   188 label *label73
   189 label *label69
   190 read *tmp101 .controller ".monos"
 
   196 setaddr :buildBlockFromCfg.1*retaddr *label74 (h:*label74)
   197 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label74) (h:*label74)
   198 label *label74
-    * set *tmp167 :buildBlockFromCfg.1*retval
   199 set :buildBlockFromCfg.1:cfg "T,*%%######$2"
   200 setaddr :buildBlockFromCfg.1*retaddr *label75 (h:*label75)
   201 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label75) (h:*label75)
   202 label *label75
-    * set *tmp168 :buildBlockFromCfg.1*retval
   203 set :buildBlockFromCfg.1:cfg "',+_AA#####%3"
   204 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   205 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
 
   211 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   212 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
   213 label *label77
-    * set *tmp170 :buildBlockFromCfg.1*retval
   214 set :buildBlockFromCfg.1:cfg "W'*'%######$5"
   215 setaddr :buildBlockFromCfg.1*retaddr *label78 (h:*label78)
   216 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label78) (h:*label78)
   217 label *label78
-    * set *tmp171 :buildBlockFromCfg.1*retval
   218 set :buildBlockFromCfg.1:cfg "W&*'%######$6"
   219 setaddr :buildBlockFromCfg.1*retaddr *label79 (h:*label79)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label79) (h:*label79)
   221 label *label79
-    * set *tmp172 :buildBlockFromCfg.1*retval
   222 set :buildBlockFromCfg.1:cfg "o%+FK<A####%7"
   223 setaddr :buildBlockFromCfg.1*retaddr *label80 (h:*label80)
   224 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label80) (h:*label80)
 
   248 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   249 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
   250 label *label84
-    * set *tmp177 :buildBlockFromCfg.1*retval
   251 set :buildBlockFromCfg.1:cfg "*%ë#}####&="
   252 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   253 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
 
   260 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   261 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
   262 label *label86
-    * set *tmp179 :buildBlockFromCfg.1*retval
   263 setaddr :buildUnits*retaddr *label87 (h:*label87)
   264 call *label39 *invalid :buildUnits*retval (m:*label87) (h:*label87)
   265 label *label87
 
   279 setaddr :buildBlockFromCfg.1*retaddr *label90 (h:*label90)
   280 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label90) (h:*label90)
   281 label *label90
-    * set *tmp181 :buildBlockFromCfg.1*retval
   282 set :buildBlockFromCfg.1:cfg "T-)%%######$E"
   283 setaddr :buildBlockFromCfg.1*retaddr *label91 (h:*label91)
   284 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label91) (h:*label91)
   285 label *label91
-    * set *tmp182 :buildBlockFromCfg.1*retval
   286 set :buildBlockFromCfg:cfg "--###A<###$F"
   287 set :buildBlockFromCfg:config @sand
   288 setaddr :buildBlockFromCfg*retaddr *label92 (h:*label92)
   289 call *label36 *invalid :buildBlockFromCfg*retval (m:*label92) (h:*label92)
   290 label *label92
-    * set *tmp183 :buildBlockFromCfg*retval
   291 setaddr :buildUnits*retaddr *label93 (h:*label93)
   292 call *label39 *invalid :buildUnits*retval (m:*label93) (h:*label93)
   293 label *label93
 
   373 setaddr :error*retaddr *label112 (h:*label112)
   374 call *label13 *invalid :error*retval (m:*label112) (h:*label112)
   375 label *label112
-    * set *tmp208 null
   376 jump *label111 always
   377 label *label110
-    * set *tmp208 null
   378 label *label111
   379 write @laser-drill .blockBuilder ":buildBlockAt:block"
   380 read *tmp56 .oreLocator ".drillX"
 
   400 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   401 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   402 label *label114
-    * set *tmp217 :buildRemoteBlock*retval
   403 set :buildRemoteBlock:cfg "z%-AAA##A##%4"
   404 read *tmp62 .oreLocator ".water2X"
   405 set :buildRemoteBlock:x *tmp62
 
   408 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   409 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   410 label *label115
-    * set *tmp218 :buildRemoteBlock*retval
   411 set :buildRemoteBlock:cfg "o%+FK<A####%7"
   412 read *tmp64 .oreLocator ".generatorX"
   413 set :buildRemoteBlock:x *tmp64
 
   426 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   427 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   428 label *label117
-    * set *tmp220 :buildRemoteBlock*retval
   429 set :buildRemoteBlock:cfg "g)'%)######$."
   430 read *tmp68 .oreLocator ".node2X"
   431 set :buildRemoteBlock:x *tmp68
 
   434 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   435 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   436 label *label118
-    * set *tmp221 :buildRemoteBlock*retval
   437 set :buildRemoteBlock:cfg "r**#-#+####$A"
   438 read *tmp70 .oreLocator ".panelX"
   439 set :buildRemoteBlock:x *tmp70
 
   442 setaddr :buildRemoteBlock*retaddr *label119 (h:*label119)
   443 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   444 label *label119
-    * set *tmp222 :buildRemoteBlock*retval
   445 set :buildRemoteBlock:cfg "k*/(7######$$"
   446 read *tmp72 .oreLocator ".batteryX"
   447 set :buildRemoteBlock:x *tmp72
 
   450 setaddr :buildRemoteBlock*retaddr *label120 (h:*label120)
   451 call *label35 *invalid :buildRemoteBlock*retval (m:*label120) (h:*label120)
   452 label *label120
-    * set *tmp223 :buildRemoteBlock*retval
   453 set :buildRemoteBlock:cfg "**#######%B"
   454 read *tmp60 .oreLocator ".containerX"
   455 set :buildRemoteBlock:x *tmp60
 
   463 op equal *tmp225 .thoriumContainer null
   464 jump *label122 equal *tmp225 false
   465 set .thoriumContainer .thoriumDrill
-    * set *tmp226 .thoriumContainer
   466 jump *label123 always
   467 label *label122
-    * set *tmp226 null
   468 label *label123
   469 write .thoriumDrill .display ".thoriumDrill"
   470 write .thoriumContainer .display ".thoriumContainer"
 
   502 setaddr :buildBlockFromCfg.1*retaddr *label131 (h:*label131)
   503 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label131) (h:*label131)
   504 label *label131
-    * set *tmp231 :buildBlockFromCfg.1*retval
   505 set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#(I"
   506 setaddr :buildBlockFromCfg.1*retaddr *label133 (h:*label133)
   507 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label133) (h:*label133)
 
   632 op notEqual *tmp248 *tmp247 null
   633 jump *label168 equal *tmp248 false
   634 ucontrol itemDrop @air 1000
-    * set *tmp249 null
   635 jump *label169 always
   636 label *label168
-    * set *tmp249 null
   637 label *label169
   638 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   639 label *label166
 
   692 op greaterThan *tmp263 *tmp261 *tmp262
   693 jump *label181 notEqual *tmp263 false
   694 label *label183
-    * set *tmp258 null
   695 jump *label179 always
   696 label *label178
   697 label *label184
 
   702 label *label185
   703 jump *label184 always
   704 label *label186
-    * set *tmp258 null
   705 label *label179
   706 set :transportStatus:target 0
   707 set :transportStatus:item null
 
   719 setaddr :error*retaddr *label191 (h:*label191)
   720 call *label13 *invalid :error*retval (m:*label191) (h:*label191)
   721 label *label191
-    * set *tmp269 null
   722 jump *label190 always
   723 label *label189
-    * set *tmp269 null
   724 label *label190
   725 label *label188
   726 return :locateOre*retaddr
 
   750 setaddr :dropAll*retaddr *label198 (h:*label198)
   751 call *label17 *invalid :dropAll*retval (m:*label198) (h:*label198)
   752 label *label198
-    * set *tmp273 null
   753 jump *label197 always
   754 label *label196
-    * set *tmp273 null
   755 label *label197
   756 set :status3:text "Mining..."
   757 setaddr :status3*retaddr *label199 (h:*label199)
 
   767 op land *tmp278 *tmp276 *tmp277
   768 jump *label203 equal *tmp278 false
   769 jump *label202 always
-    * set *tmp279 null
   770 jump *label204 always
   771 label *label203
-    * set *tmp279 null
   772 label *label204
   773 ucontrol mine :mineOre:x :mineOre:y
   774 op greaterThan *tmp280 @second :mineOre:stop
   775 jump *label205 equal *tmp280 false
   776 jump *label202 always
-    * set *tmp281 null
   777 jump *label206 always
   778 label *label205
-    * set *tmp281 null
   779 label *label206
   780 label *label201
   781 sensor *tmp282 @unit @totalItems
 
   841 op land *tmp292 *tmp290 *tmp291
   842 jump *label219 equal *tmp292 false
   843 ucontrol itemDrop @air 1000
-    * set *tmp293 null
   844 jump *label220 always
   845 label *label219
-    * set *tmp293 null
   846 label *label220
   847 label *label217
   848 sensor *tmp294 @unit :fetchBlock:item
 
   879 setaddr :mineOre*retaddr *label226 (h:*label226)
   880 call *label21 *invalid :mineOre*retval (m:*label226) (h:*label226)
   881 label *label226
-    * set *tmp302 null
   882 jump *label225 always
   883 label *label224
-    * set *tmp302 null
   884 label *label225
   885 label *label222
   886 return :supplyBlock*retaddr
 
   916 op land *tmp308 *tmp306 *tmp307
   917 jump *label235 equal *tmp308 false
   918 ucontrol itemDrop @air 1000
-    * set *tmp309 null
   919 jump *label236 always
   920 label *label235
-    * set *tmp309 null
   921 label *label236
   922 label *label233
   923 sensor *tmp310 @unit :supplyBlockFromCore:item
 
   998 op add :unpackCfg:index :unpackCfg:index 1
   999 read *tmp351 :unpackCfg:cfg *tmp350
  1000 op sub *tmp352 *tmp351 35
-    * set :unpackCfg:size *tmp352
  1001 set *tmp353 :unpackCfg:index
  1002 op add :unpackCfg:index :unpackCfg:index 1
  1003 read *tmp354 :unpackCfg:cfg *tmp353
 
  1024 setaddr :supplyBlock*retaddr *label246 (h:*label246)
  1025 call *label24 *invalid :supplyBlock*retval (m:*label246) (h:*label246)
  1026 label *label246
-    * set *tmp362 null
  1027 jump *label245 always
  1028 label *label244
  1029 set :supplyBlockFromCore:target .thoriumGenerator
 
  1031 setaddr :supplyBlockFromCore*retaddr *label247 (h:*label247)
  1032 call *label25 *invalid :supplyBlockFromCore*retval (m:*label247) (h:*label247)
  1033 label *label247
-    * set *tmp362 null
  1034 label *label245
  1035 set :fetchBlock:block .thoriumContainer
  1036 set :fetchBlock:item @thorium
 
  1038 call *label23 *invalid :fetchBlock*retval (m:*label248) (h:*label248)
  1039 label *label248
  1040 label *label242
-    * set *tmp359 null
  1041 jump *label241 always
  1042 label *label240
  1043 read *tmp101 .controller ".monos"
 
  1079 label *label259
  1080 set *tmp372 null
  1081 label *label260
-    * set *tmp369 *tmp372
  1082 jump *label258 always
  1083 label *label257
-    * set *tmp369 null
  1084 label *label258
  1085 sensor *tmp373 .core @silicon
  1086 op lessThan *tmp374 *tmp373 .targetSilicon
 
  1121 label *label270
  1122 set *tmp378 *tmp381
  1123 label *label266
-    * set *tmp375 *tmp378
  1124 jump *label264 always
  1125 label *label263
-    * set *tmp375 null
  1126 label *label264
  1127 sensor *tmp382 .battery @totalPower
  1128 op lessThan *tmp383 *tmp382 .powerTarget
 
  1150 label *label273
  1151 set *tmp384 null
  1152 label *label274
-    * set *tmp366 *tmp384
  1153 jump *label256 always
  1154 label *label255
-    * set *tmp366 null
  1155 label *label256
  1156 sensor *tmp388 .core @titanium
  1157 op lessThan *tmp389 *tmp388 .targetTitanium
 
  1288 label *label283
  1289 set *tmp398 null
  1290 label *label284
-    * set *tmp396 *tmp398
  1291 jump *label282 always
  1292 label *label281
  1293 set :status1:text "Goal 11: Fetching titanium"
 
  1299 setaddr :fetchBlock*retaddr *label312 (h:*label312)
  1300 call *label23 *invalid :fetchBlock*retval (m:*label312) (h:*label312)
  1301 label *label312
-    * set *tmp396 null
  1302 label *label282
  1303 label *label254
  1304 set *tmp364 null
  1305 label *label250
-    * set *tmp359 *tmp364
  1306 label *label241
  1307 label *label239
  1308 return :supplyBase*retaddr
 
  1384 jump *label328 equal *tmp439 false
  1385 set *tmp437 false
  1386 jump *label327 always
-    * set *tmp440 null
  1387 jump *label329 always
  1388 label *label328
-    * set *tmp440 null
  1389 label *label329
  1390 sensor *tmp441 .core @lead
  1391 op lessThan *tmp442 *tmp441 .targetLead
  1392 jump *label330 equal *tmp442 false
  1393 set *tmp437 false
  1394 jump *label327 always
-    * set *tmp443 null
  1395 jump *label331 always
  1396 label *label330
-    * set *tmp443 null
  1397 label *label331
  1398 sensor *tmp444 .core @graphite
  1399 op lessThan *tmp445 *tmp444 .targetGraphite
  1400 jump *label332 equal *tmp445 false
  1401 set *tmp437 false
  1402 jump *label327 always
-    * set *tmp446 null
  1403 jump *label333 always
  1404 label *label332
-    * set *tmp446 null
  1405 label *label333
  1406 sensor *tmp447 .core @silicon
  1407 op lessThan *tmp448 *tmp447 .targetSilicon
  1408 jump *label334 equal *tmp448 false
  1409 set *tmp437 false
  1410 jump *label327 always
-    * set *tmp449 null
  1411 jump *label335 always
  1412 label *label334
-    * set *tmp449 null
  1413 label *label335
  1414 sensor *tmp450 .core @titanium
  1415 op lessThan *tmp451 *tmp450 .targetTitanium
  1416 jump *label336 equal *tmp451 false
  1417 set *tmp437 false
  1418 jump *label327 always
-    * set *tmp452 null
  1419 jump *label337 always
  1420 label *label336
-    * set *tmp452 null
  1421 label *label337
  1422 sensor *tmp453 .core @metaglass
  1423 op lessThan *tmp454 *tmp453 .targetMetaglass
  1424 jump *label338 equal *tmp454 false
  1425 set *tmp437 false
  1426 jump *label327 always
-    * set *tmp455 null
  1427 jump *label339 always
  1428 label *label338
-    * set *tmp455 null
  1429 label *label339
  1430 sensor *tmp456 .core @thorium
  1431 op lessThan *tmp457 *tmp456 .targetThorium
  1432 jump *label340 equal *tmp457 false
  1433 set *tmp437 false
  1434 jump *label327 always
-    * set *tmp458 null
  1435 jump *label341 always
  1436 label *label340
-    * set *tmp458 null
  1437 label *label341
  1438 set *tmp437 true
  1439 jump *label327 always
 
  1517 label *label350
  1518 set :buildRemoteBlock*retval :buildBlock*retval
  1519 jump *label346 always
-    * set *tmp470 null
  1520 jump *label348 always
  1521 label *label347
-    * set *tmp470 null
  1522 label *label348
  1523 set :buildRemoteBlock*retval false
  1524 jump *label346 always
 
  1657 sensor *tmp478 @unit @mining
  1658 jump *label372 equal *tmp478 false
  1659 ucontrol stop
-    * set *tmp479 null
  1660 jump *label373 always
  1661 label *label372
-    * set *tmp479 null
  1662 label *label373
  1663 ubind :lineUpUnits:unit
  1664 label *label370

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-11 instructions):
 
   997 set *tmp350 :unpackCfg:index
   998 op add :unpackCfg:index :unpackCfg:index 1
   999 read *tmp351 :unpackCfg:cfg *tmp350
-    * op sub *tmp352 *tmp351 35
  1000 set *tmp353 :unpackCfg:index
  1001 op add :unpackCfg:index :unpackCfg:index 1
  1002 read *tmp354 :unpackCfg:cfg *tmp353
 
  1051 call *label22 *invalid :mineOre.1*retval (m:*label253) (h:*label253)
  1052 label *label253
  1053 label *label251
-    * set *tmp364 null
  1054 jump *label250 always
  1055 label *label249
  1056 set :supplyBase0:supplied false
 
  1072 call *label24 *invalid :supplyBlock*retval (m:*label262) (h:*label262)
  1073 label *label262
  1074 set :supplyBase0:supplied true
-    * set *tmp372 :supplyBase0:supplied
  1075 jump *label260 always
  1076 label *label259
-    * set *tmp372 null
  1077 label *label260
  1078 jump *label258 always
  1079 label *label257
 
  1094 call *label24 *invalid :supplyBlock*retval (m:*label268) (h:*label268)
  1095 label *label268
  1096 set :supplyBase0:supplied true
-    * set *tmp378 :supplyBase0:supplied
  1097 jump *label266 always
  1098 label *label265
  1099 sensor *tmp379 .smelter @sand
 
  1114 label *label269
  1115 set *tmp381 null
  1116 label *label270
-    * set *tmp378 *tmp381
  1117 label *label266
  1118 jump *label264 always
  1119 label *label263
 
  1139 label *label275
  1140 set *tmp387 null
  1141 label *label276
-    * set *tmp384 *tmp387
  1142 jump *label274 always
  1143 label *label273
-    * set *tmp384 null
  1144 label *label274
  1145 jump *label256 always
  1146 label *label255
 
  1275 label *label290
  1276 set *tmp402 *tmp405
  1277 label *label286
-    * set *tmp398 *tmp402
  1278 jump *label284 always
  1279 label *label283
-    * set *tmp398 null
  1280 label *label284
  1281 jump *label282 always
  1282 label *label281
 
  1291 label *label312
  1292 label *label282
  1293 label *label254
-    * set *tmp364 null
  1294 label *label250
  1295 label *label241
  1296 label *label239

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-7 instructions):
 
   996 set :unpackCfg:rotation *tmp349
   997 set *tmp350 :unpackCfg:index
   998 op add :unpackCfg:index :unpackCfg:index 1
-    * read *tmp351 :unpackCfg:cfg *tmp350
   999 set *tmp353 :unpackCfg:index
  1000 op add :unpackCfg:index :unpackCfg:index 1
  1001 read *tmp354 :unpackCfg:cfg *tmp353
 
  1108 call *label24 *invalid :supplyBlock*retval (m:*label272) (h:*label272)
  1109 label *label272
  1110 set :supplyBase0:supplied true
-    * set *tmp381 :supplyBase0:supplied
  1111 jump *label270 always
  1112 label *label269
-    * set *tmp381 null
  1113 label *label270
  1114 label *label266
  1115 jump *label264 always
 
  1131 call *label24 *invalid :supplyBlock*retval (m:*label278) (h:*label278)
  1132 label *label278
  1133 set :supplyBase0:supplied true
-    * set *tmp387 :supplyBase0:supplied
  1134 jump *label276 always
  1135 label *label275
-    * set *tmp387 null
  1136 label *label276
  1137 jump *label274 always
  1138 label *label273
 
  1169 setaddr :mineOre.1*retaddr *label288 (h:*label288)
  1170 call *label22 *invalid :mineOre.1*retval (m:*label288) (h:*label288)
  1171 label *label288
-    * set *tmp402 null
  1172 jump *label286 always
  1173 label *label285
  1174 sensor *tmp403 .core @silicon
 
  1267 label *label296
  1268 set *tmp405 *tmp412
  1269 label *label290
-    * set *tmp402 *tmp405
  1270 label *label286
  1271 jump *label284 always
  1272 label *label283

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-3 instructions):
 
   994 read *tmp348 :unpackCfg:cfg *tmp347
   995 op sub *tmp349 *tmp348 35
   996 set :unpackCfg:rotation *tmp349
-    * set *tmp350 :unpackCfg:index
   997 op add :unpackCfg:index :unpackCfg:index 1
   998 set *tmp353 :unpackCfg:index
   999 op add :unpackCfg:index :unpackCfg:index 1
 
  1193 setaddr :mineOre.1*retaddr *label294 (h:*label294)
  1194 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
  1195 label *label294
-    * set *tmp405 null
  1196 jump *label290 always
  1197 label *label289
  1198 sensor *tmp410 .core @copper
 
  1263 label *label300
  1264 set *tmp412 *tmp415
  1265 label *label296
-    * set *tmp405 *tmp412
  1266 label *label290
  1267 label *label286
  1268 jump *label284 always

Modifications by Initial phase, Dead Code Elimination, iteration 5 (-2 instructions):
 
  1206 setaddr :mineOre.1*retaddr *label298 (h:*label298)
  1207 call *label22 *invalid :mineOre.1*retval (m:*label298) (h:*label298)
  1208 label *label298
-    * set *tmp412 null
  1209 jump *label296 always
  1210 label *label295
  1211 sensor *tmp413 .core @lead
 
  1260 label *label304
  1261 set *tmp415 *tmp418
  1262 label *label300
-    * set *tmp412 *tmp415
  1263 label *label296
  1264 label *label290
  1265 label *label286

Modifications by Initial phase, Dead Code Elimination, iteration 6 (-2 instructions):
 
  1219 setaddr :mineOre.1*retaddr *label302 (h:*label302)
  1220 call *label22 *invalid :mineOre.1*retval (m:*label302) (h:*label302)
  1221 label *label302
-    * set *tmp415 null
  1222 jump *label300 always
  1223 label *label299
  1224 sensor *tmp416 .core @metaglass
 
  1257 label *label310
  1258 set *tmp418 null
  1259 label *label304
-    * set *tmp415 *tmp418
  1260 label *label300
  1261 label *label296
  1262 label *label290

Modifications by Initial phase, Dead Code Elimination, iteration 7 (-2 instructions):
 
  1232 setaddr :mineOre.1*retaddr *label306 (h:*label306)
  1233 call *label22 *invalid :mineOre.1*retval (m:*label306) (h:*label306)
  1234 label *label306
-    * set *tmp418 null
  1235 jump *label304 always
  1236 label *label303
  1237 set :status1:text "Goal 10: supplying base"
 
  1254 setaddr :mineOre.1*retaddr *label310 (h:*label310)
  1255 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
  1256 label *label310
-    * set *tmp418 null
  1257 label *label304
  1258 label *label300
  1259 label *label296

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-80 instructions):
 
    19 write 511 bank1 511
    20 label *label42
    21 ubind @poly
-    * set *tmp127 @unit
-    * set .builder *tmp127
-    * ulocate building core false @copper .coreX .coreY *tmp129 *tmp128
-    * set .core *tmp128
+   22 set .builder @unit
+   23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label43
    25 op equal *tmp130 .core null
    26 jump *label42 notEqual *tmp130 false
 
    29 setaddr :buildBlockFromCfg.1*retaddr *label45 (h:*label45)
    30 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label45) (h:*label45)
    31 label *label45
-    * set *tmp131 :buildBlockFromCfg.1*retval
-    * set .press *tmp131
+   32 set .press :buildBlockFromCfg.1*retval
    33 set :buildBlockFromCfg.1:cfg "k*/(7######$$"
    34 setaddr :buildBlockFromCfg.1*retaddr *label46 (h:*label46)
    35 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label46) (h:*label46)
    36 label *label46
-    * set *tmp132 :buildBlockFromCfg.1*retval
-    * set .battery *tmp132
+   37 set .battery :buildBlockFromCfg.1*retval
    38 set :buildBlockFromCfg.1:cfg "k+/(7######$%"
    39 setaddr :buildBlockFromCfg.1*retaddr *label47 (h:*label47)
    40 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label47) (h:*label47)
 
    43 setaddr :buildBlockFromCfg.1*retaddr *label48 (h:*label48)
    44 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label48) (h:*label48)
    45 label *label48
-    * set *tmp134 :buildBlockFromCfg.1*retval
-    * set .generator *tmp134
+   46 set .generator :buildBlockFromCfg.1*retval
    47 set .powerTarget 400
    48 set :buildBlockFromCfg.1:cfg "%+-A<######%'"
    49 setaddr :buildBlockFromCfg.1*retaddr *label49 (h:*label49)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label49) (h:*label49)
    51 label *label49
-    * set *tmp135 :buildBlockFromCfg.1*retval
-    * set .smelter *tmp135
+   52 set .smelter :buildBlockFromCfg.1*retval
    53 set :buildBlockFromCfg.1:cfg "T+,%%######$("
    54 setaddr :buildBlockFromCfg.1*retaddr *label50 (h:*label50)
    55 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label50) (h:*label50)
 
    73 wait 1e-15
    74 read *tmp148 .oreLocator ":findDrillLocation*finished"
    75 jump *label53 equal *tmp148 false
-    * read *tmp145 .oreLocator ":findDrillLocation:dx"
-    * set :buildFirstTitaniumDrill:dx *tmp145
-    * read *tmp146 .oreLocator ":findDrillLocation:dy"
-    * set :buildFirstTitaniumDrill:dy *tmp146
-    * read *tmp149 .oreLocator ":findDrillLocation*retval"
-    * set :buildFirstTitaniumDrill:result *tmp149
+   76 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
+   77 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
+   78 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
    79 op equal *tmp150 :buildFirstTitaniumDrill:result false
    80 jump *label54 equal *tmp150 false
    81 set :error:error "Cannot locate spot for titanium drill"
 
    94 wait 1e-15
    95 read *tmp154 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
    96 jump *label57 equal *tmp154 false
-    * read *tmp155 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
-    * set *tmp137 *tmp155
+   97 read *tmp137 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
    98 jump *label51 always
    99 set *tmp137 null
   100 label *label51
 
   104 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
   105 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
   106 label *label58
-    * set *tmp156 :buildBlockFromCfg.1*retval
-    * set .unloader1 *tmp156
+  107 set .unloader1 :buildBlockFromCfg.1*retval
   108 set :buildBlockFromCfg.1:cfg "T),%%######$+"
   109 setaddr :buildBlockFromCfg.1*retaddr *label59 (h:*label59)
   110 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label59) (h:*label59)
 
   119 setaddr :buildBlockFromCfg*retaddr *label61 (h:*label61)
   120 call *label36 *invalid :buildBlockFromCfg*retval (m:*label61) (h:*label61)
   121 label *label61
-    * set *tmp159 :buildBlockFromCfg*retval
-    * set .controller *tmp159
+  122 set .controller :buildBlockFromCfg*retval
   123 write processor6 .controller ".timer"
   124 write .display .controller ".display"
   125 write .core .controller ".core"
 
   137 setaddr :buildBlockFromCfg.1*retaddr *label63 (h:*label63)
   138 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label63) (h:*label63)
   139 label *label63
-    * set *tmp161 :buildBlockFromCfg.1*retval
-    * write *tmp161 .controller ".unloader2"
+  140 write :buildBlockFromCfg.1*retval .controller ".unloader2"
   141 set :buildBlockFromCfg.1:cfg "'(_i#####&&0"
   142 setaddr :buildBlockFromCfg.1*retaddr *label64 (h:*label64)
   143 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label64) (h:*label64)
   144 label *label64
-    * set *tmp162 :buildBlockFromCfg.1*retval
-    * set :factory *tmp162
+  145 set :factory :buildBlockFromCfg.1*retval
   146 write :factory .controller ".factory"
   147 write :factory .display ".airFactory"
   148 set :setFlareTarget:target 1
 
   190 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   191 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
   192 label *label76
-    * set *tmp169 :buildBlockFromCfg.1*retval
-    * set .kiln *tmp169
+  193 set .kiln :buildBlockFromCfg.1*retval
   194 write .kiln .controller ".kiln"
   195 set :buildBlockFromCfg.1:cfg "z%-AAA##A##%4"
   196 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
 
   208 setaddr :buildBlockFromCfg.1*retaddr *label80 (h:*label80)
   209 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label80) (h:*label80)
   210 label *label80
-    * set *tmp173 :buildBlockFromCfg.1*retval
-    * write *tmp173 .controller ".generator2"
+  211 write :buildBlockFromCfg.1*retval .controller ".generator2"
   212 set :buildBlockFromCfg.1:cfg "$(.#U<###&8"
   213 setaddr :buildBlockFromCfg.1*retaddr *label81 (h:*label81)
   214 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label81) (h:*label81)
   215 label *label81
-    * set *tmp174 :buildBlockFromCfg.1*retval
-    * write *tmp174 .controller ".multipress"
+  216 write :buildBlockFromCfg.1*retval .controller ".multipress"
   217 set .graphiteSurplus 150
   218 set :buildBlockFromCfg.1:cfg " '%-#2#####&:"
   219 setaddr :buildBlockFromCfg.1*retaddr *label82 (h:*label82)
   220 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label82) (h:*label82)
   221 label *label82
-    * set *tmp175 :buildBlockFromCfg.1*retval
-    * write *tmp175 .controller ".payloadRouter"
+  222 write :buildBlockFromCfg.1*retval .controller ".payloadRouter"
   223 set :buildBlockFromCfg.1:cfg "*(###A<###$;"
   224 setaddr :buildBlockFromCfg.1*retaddr *label83 (h:*label83)
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label83) (h:*label83)
   226 label *label83
-    * set *tmp176 :buildBlockFromCfg.1*retval
-    * write *tmp176 .controller ".unloader4"
+  227 write :buildBlockFromCfg.1*retval .controller ".unloader4"
   228 set :buildBlockFromCfg.1:cfg "X*''%######$<"
   229 setaddr :buildBlockFromCfg.1*retaddr *label84 (h:*label84)
   230 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label84) (h:*label84)
 
   233 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   234 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   235 label *label85
-    * set *tmp178 :buildBlockFromCfg.1*retval
-    * set :reconstructor *tmp178
+  236 set :reconstructor :buildBlockFromCfg.1*retval
   237 write :reconstructor .controller ".reconstructor"
   238 write :reconstructor .display ".reconstructor"
   239 set :buildBlockFromCfg.1:cfg "l/,#U#A7###&>"
 
   253 setaddr :buildBlockFromCfg.1*retaddr *label89 (h:*label89)
   254 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label89) (h:*label89)
   255 label *label89
-    * set *tmp180 :buildBlockFromCfg.1*retval
-    * write *tmp180 .controller ".smelter2"
+  256 write :buildBlockFromCfg.1*retval .controller ".smelter2"
   257 set :buildBlockFromCfg.1:cfg "T-*%%######$D"
   258 setaddr :buildBlockFromCfg.1*retaddr *label90 (h:*label90)
   259 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label90) (h:*label90)
 
   302 write @ore-titanium .display ".nextBlock"
   303 wait 0.000000001
   304 ubind @flare
-    * read *tmp54 .oreLocator ".locations"
-    * set :blocksBuildTitaniumDrills:current *tmp54
+  305 read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
   306 write .coreX .oreLocator ":findDrillLocation:x"
   307 write .coreY .oreLocator ":findDrillLocation:y"
   308 write @unit .oreLocator ":findDrillLocation:unit"
 
   343 wait 1e-15
   344 read *tmp205 .oreLocator ":layoutThoriumDrill*finished"
   345 jump *label109 equal *tmp205 false
-    * read *tmp206 .oreLocator ":layoutThoriumDrill*retval"
-    * set :buildThoriumDrill:result *tmp206
+  346 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
   347 op equal *tmp207 :buildThoriumDrill:result false
   348 jump *label110 equal *tmp207 false
   349 set :error:error "Cannot locate spot for thorium drill"
 
   367 wait 1e-15
   368 read *tmp215 .blockBuilder ":buildBlockAt*finished"
   369 jump *label113 equal *tmp215 false
-    * read *tmp216 .blockBuilder ":buildBlockAt*retval"
-    * set .thoriumDrill *tmp216
+  370 read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
   371 set :buildRemoteBlock:cfg "z%-AAA##A##%4"
-    * read *tmp58 .oreLocator ".water1X"
-    * set :buildRemoteBlock:x *tmp58
-    * read *tmp59 .oreLocator ".water1Y"
-    * set :buildRemoteBlock:y *tmp59
+  372 read :buildRemoteBlock:x .oreLocator ".water1X"
+  373 read :buildRemoteBlock:y .oreLocator ".water1Y"
   374 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   375 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   376 label *label114
   377 set :buildRemoteBlock:cfg "z%-AAA##A##%4"
-    * read *tmp62 .oreLocator ".water2X"
-    * set :buildRemoteBlock:x *tmp62
-    * read *tmp63 .oreLocator ".water2Y"
-    * set :buildRemoteBlock:y *tmp63
+  378 read :buildRemoteBlock:x .oreLocator ".water2X"
+  379 read :buildRemoteBlock:y .oreLocator ".water2Y"
   380 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   381 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   382 label *label115
   383 set :buildRemoteBlock:cfg "o%+FK<A####%7"
-    * read *tmp64 .oreLocator ".generatorX"
-    * set :buildRemoteBlock:x *tmp64
-    * read *tmp65 .oreLocator ".generatorY"
-    * set :buildRemoteBlock:y *tmp65
+  384 read :buildRemoteBlock:x .oreLocator ".generatorX"
+  385 read :buildRemoteBlock:y .oreLocator ".generatorY"
   386 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   387 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   388 label *label116
-    * set *tmp219 :buildRemoteBlock*retval
-    * set .thoriumGenerator *tmp219
+  389 set .thoriumGenerator :buildRemoteBlock*retval
   390 set :buildRemoteBlock:cfg "g)'%)######$."
-    * read *tmp66 .oreLocator ".node1X"
-    * set :buildRemoteBlock:x *tmp66
-    * read *tmp67 .oreLocator ".node1Y"
-    * set :buildRemoteBlock:y *tmp67
+  391 read :buildRemoteBlock:x .oreLocator ".node1X"
+  392 read :buildRemoteBlock:y .oreLocator ".node1Y"
   393 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   394 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   395 label *label117
   396 set :buildRemoteBlock:cfg "g)'%)######$."
-    * read *tmp68 .oreLocator ".node2X"
-    * set :buildRemoteBlock:x *tmp68
-    * read *tmp69 .oreLocator ".node2Y"
-    * set :buildRemoteBlock:y *tmp69
+  397 read :buildRemoteBlock:x .oreLocator ".node2X"
+  398 read :buildRemoteBlock:y .oreLocator ".node2Y"
   399 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   400 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   401 label *label118
   402 set :buildRemoteBlock:cfg "r**#-#+####$A"
-    * read *tmp70 .oreLocator ".panelX"
-    * set :buildRemoteBlock:x *tmp70
-    * read *tmp71 .oreLocator ".panelY"
-    * set :buildRemoteBlock:y *tmp71
+  403 read :buildRemoteBlock:x .oreLocator ".panelX"
+  404 read :buildRemoteBlock:y .oreLocator ".panelY"
   405 setaddr :buildRemoteBlock*retaddr *label119 (h:*label119)
   406 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   407 label *label119
   408 set :buildRemoteBlock:cfg "k*/(7######$$"
-    * read *tmp72 .oreLocator ".batteryX"
-    * set :buildRemoteBlock:x *tmp72
-    * read *tmp73 .oreLocator ".batteryY"
-    * set :buildRemoteBlock:y *tmp73
+  409 read :buildRemoteBlock:x .oreLocator ".batteryX"
+  410 read :buildRemoteBlock:y .oreLocator ".batteryY"
   411 setaddr :buildRemoteBlock*retaddr *label120 (h:*label120)
   412 call *label35 *invalid :buildRemoteBlock*retval (m:*label120) (h:*label120)
   413 label *label120
   414 set :buildRemoteBlock:cfg "**#######%B"
-    * read *tmp60 .oreLocator ".containerX"
-    * set :buildRemoteBlock:x *tmp60
-    * read *tmp61 .oreLocator ".containerY"
-    * set :buildRemoteBlock:y *tmp61
+  415 read :buildRemoteBlock:x .oreLocator ".containerX"
+  416 read :buildRemoteBlock:y .oreLocator ".containerY"
   417 setaddr :buildRemoteBlock*retaddr *label121 (h:*label121)
   418 call *label35 *invalid :buildRemoteBlock*retval (m:*label121) (h:*label121)
   419 label *label121
-    * set *tmp224 :buildRemoteBlock*retval
-    * set .thoriumContainer *tmp224
+  420 set .thoriumContainer :buildRemoteBlock*retval
   421 op equal *tmp225 .thoriumContainer null
   422 jump *label122 equal *tmp225 false
   423 set .thoriumContainer .thoriumDrill
 
   454 setaddr :buildBlockFromCfg*retaddr *label130 (h:*label130)
   455 call *label36 *invalid :buildBlockFromCfg*retval (m:*label130) (h:*label130)
   456 label *label130
-    * set *tmp230 :buildBlockFromCfg*retval
-    * write *tmp230 .controller ".unloader6"
+  457 write :buildBlockFromCfg*retval .controller ".unloader6"
   458 set :buildBlockFromCfg.1:cfg "X+''%######$H"
   459 setaddr :buildBlockFromCfg.1*retaddr *label131 (h:*label131)
   460 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label131) (h:*label131)
 
   504 label *label143
   505 label *label144
   506 jump *label146 equal true false
-    * op sub *tmp238 @thisy 6
-    * set :lineUpUnits:y *tmp238
+  507 op sub :lineUpUnits:y @thisy 6
   508 set :lineUpUnits:unit @mega
   509 setaddr :lineUpUnits*retaddr *label147 (h:*label147)
   510 call *label41 *invalid :lineUpUnits*retval (m:*label147) (h:*label147)
   511 label *label147
-    * op sub *tmp239 @thisy 10
-    * set :lineUpUnits:y *tmp239
+  512 op sub :lineUpUnits:y @thisy 10
   513 set :lineUpUnits:unit @poly
   514 setaddr :lineUpUnits*retaddr *label148 (h:*label148)
   515 call *label41 *invalid :lineUpUnits*retval (m:*label148) (h:*label148)
   516 label *label148
-    * op sub *tmp240 @thisy 14
-    * set :lineUpUnits:y *tmp240
+  517 op sub :lineUpUnits:y @thisy 14
   518 set :lineUpUnits:unit @mono
   519 setaddr :lineUpUnits*retaddr *label149 (h:*label149)
   520 call *label41 *invalid :lineUpUnits*retval (m:*label149) (h:*label149)
   521 label *label149
-    * op sub *tmp241 @thisy 18
-    * set :lineUpUnits:y *tmp241
+  522 op sub :lineUpUnits:y @thisy 18
   523 set :lineUpUnits:unit @flare
   524 setaddr :lineUpUnits*retaddr *label150 (h:*label150)
   525 call *label41 *invalid :lineUpUnits*retval (m:*label150) (h:*label150)
 
   634 setaddr :moveToBlock*retaddr *label180 (h:*label180)
   635 call *label18 *invalid :moveToBlock*retval (m:*label180) (h:*label180)
   636 label *label180
-    * sensor *tmp259 :depositItems:block @itemCapacity
-    * set :depositItems:cap *tmp259
+  637 sensor :depositItems:cap :depositItems:block @itemCapacity
   638 label *label181
   639 ucontrol itemDrop :depositItems:block 30
   640 label *label182
 
   664 return :depositItems*retaddr
   665 end
   666 label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 *tmp267
+  667 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 0
   668 op equal *tmp268 *tmp266 false
   669 jump *label189 equal *tmp268 false
   670 set :error:error "Cannot locate ore"
 
   678 return :locateOre*retaddr
   679 end
   680 label *label21
-    * op min *tmp270 :mineOre:amount 30
-    * set :mineOre:amount *tmp270
+  681 op min :mineOre:amount :mineOre:amount 30
   682 set :transportStatus:target :mineOre:amount
   683 set :transportStatus:item :mineOre:ore
   684 setaddr :transportStatus*retaddr *label193 (h:*label193)
 
   708 setaddr :status3*retaddr *label199 (h:*label199)
   709 call *label11 *invalid :status3*retval (m:*label199) (h:*label199)
   710 label *label199
-    * op add *tmp274 @second 10
-    * set :mineOre:stop *tmp274
+  711 op add :mineOre:stop @second 10
   712 label *label200
-    * sensor *tmp275 @unit @firstItem
-    * set :mineOre:item *tmp275
+  713 sensor :mineOre:item @unit @firstItem
   714 op notEqual *tmp276 :mineOre:item null
   715 op notEqual *tmp277 :mineOre:item :mineOre:ore
   716 op land *tmp278 *tmp276 *tmp277
 
   747 setaddr :status2*retaddr *label209 (h:*label209)
   748 call *label10 *invalid :status2*retval (m:*label209) (h:*label209)
   749 label *label209
-    * set *tmp284 :mineOre.1:ore
-    * set :mineOre:ore *tmp284
+  750 set :mineOre:ore :mineOre.1:ore
   751 set :mineOre:amount 30
   752 set :mineOre:block .core
   753 setaddr :mineOre*retaddr *label210 (h:*label210)
 
   758 end
   759 label *label23
   760 sensor *tmp285 :fetchBlock:block @itemCapacity
-    * op min *tmp286 *tmp285 30
-    * set :transportStatus:target *tmp286
+  761 op min :transportStatus:target *tmp285 30
   762 set :transportStatus:item :fetchBlock:item
   763 setaddr :transportStatus*retaddr *label212 (h:*label212)
   764 call *label12 *invalid :transportStatus*retval (m:*label212) (h:*label212)
 
   781 label *label215
   782 label *label216
   783 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
-    * sensor *tmp289 @unit @firstItem
-    * set :fetchBlock:unitItem *tmp289
+  784 sensor :fetchBlock:unitItem @unit @firstItem
   785 op notEqual *tmp290 :fetchBlock:unitItem null
   786 op notEqual *tmp291 :fetchBlock:unitItem :fetchBlock:item
   787 op land *tmp292 *tmp290 *tmp291
 
   812 setaddr :status2*retaddr *label223 (h:*label223)
   813 call *label10 *invalid :status2*retval (m:*label223) (h:*label223)
   814 label *label223
-    * sensor *tmp298 :supplyBlock:block @itemCapacity
-    * set :supplyBlock:blockCapacity *tmp298
+  815 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   816 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
-    * op sub *tmp300 :supplyBlock:blockCapacity *tmp299
-    * set :supplyBlock:missing *tmp300
+  817 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
   818 op greaterThan *tmp301 :supplyBlock:missing 0
   819 jump *label224 equal *tmp301 false
   820 set :mineOre:ore :supplyBlock:ore
 
   831 end
   832 label *label25
   833 sensor *tmp303 :supplyBlockFromCore:target @itemCapacity
-    * op min *tmp304 *tmp303 30
-    * set :transportStatus:target *tmp304
+  834 op min :transportStatus:target *tmp303 30
   835 set :transportStatus:item :supplyBlockFromCore:item
   836 setaddr :transportStatus*retaddr *label228 (h:*label228)
   837 call *label12 *invalid :transportStatus*retval (m:*label228) (h:*label228)
 
   852 label *label231
   853 label *label232
   854 ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor *tmp305 @unit @firstItem
-    * set :supplyBlockFromCore:unitItem *tmp305
+  855 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   856 op notEqual *tmp306 :supplyBlockFromCore:unitItem null
   857 op notEqual *tmp307 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
   858 op land *tmp308 *tmp306 *tmp307
 
   882 op add :unpackCfg:index :unpackCfg:index 1
   883 read *tmp315 :unpackCfg:cfg *tmp314
   884 op sub *tmp316 *tmp315 35
-    * lookup block *tmp317 *tmp316
-    * set :unpackCfg:type *tmp317
+  885 lookup block :unpackCfg:type *tmp316
   886 set *tmp318 :unpackCfg:index
   887 op add :unpackCfg:index :unpackCfg:index 1
   888 read *tmp319 :unpackCfg:cfg *tmp318
   889 op sub *tmp320 *tmp319 35
-    * op sub *tmp321 *tmp320 7
-    * set :unpackCfg:x *tmp321
+  890 op sub :unpackCfg:x *tmp320 7
   891 set *tmp322 :unpackCfg:index
   892 op add :unpackCfg:index :unpackCfg:index 1
   893 read *tmp323 :unpackCfg:cfg *tmp322
   894 op sub *tmp324 *tmp323 35
-    * op sub *tmp325 *tmp324 7
-    * set :unpackCfg:y *tmp325
+  895 op sub :unpackCfg:y *tmp324 7
   896 set *tmp326 :unpackCfg:index
   897 op add :unpackCfg:index :unpackCfg:index 1
   898 read *tmp327 :unpackCfg:cfg *tmp326
-    * op sub *tmp328 *tmp327 35
-    * set :unpackCfg:cu *tmp328
+  899 op sub :unpackCfg:cu *tmp327 35
   900 set *tmp329 :unpackCfg:index
   901 op add :unpackCfg:index :unpackCfg:index 1
   902 read *tmp330 :unpackCfg:cfg *tmp329
-    * op sub *tmp331 *tmp330 35
-    * set :unpackCfg:pb *tmp331
+  903 op sub :unpackCfg:pb *tmp330 35
   904 set *tmp332 :unpackCfg:index
   905 op add :unpackCfg:index :unpackCfg:index 1
   906 read *tmp333 :unpackCfg:cfg *tmp332
-    * op sub *tmp334 *tmp333 35
-    * set :unpackCfg:gr *tmp334
+  907 op sub :unpackCfg:gr *tmp333 35
   908 set *tmp335 :unpackCfg:index
   909 op add :unpackCfg:index :unpackCfg:index 1
   910 read *tmp336 :unpackCfg:cfg *tmp335
-    * op sub *tmp337 *tmp336 35
-    * set :unpackCfg:si *tmp337
+  911 op sub :unpackCfg:si *tmp336 35
   912 set *tmp338 :unpackCfg:index
   913 op add :unpackCfg:index :unpackCfg:index 1
   914 read *tmp339 :unpackCfg:cfg *tmp338
-    * op sub *tmp340 *tmp339 35
-    * set :unpackCfg:ti *tmp340
+  915 op sub :unpackCfg:ti *tmp339 35
   916 set *tmp341 :unpackCfg:index
   917 op add :unpackCfg:index :unpackCfg:index 1
   918 read *tmp342 :unpackCfg:cfg *tmp341
-    * op sub *tmp343 *tmp342 35
-    * set :unpackCfg:mg *tmp343
+  919 op sub :unpackCfg:mg *tmp342 35
   920 set *tmp344 :unpackCfg:index
   921 op add :unpackCfg:index :unpackCfg:index 1
   922 read *tmp345 :unpackCfg:cfg *tmp344
-    * op sub *tmp346 *tmp345 35
-    * set :unpackCfg:th *tmp346
+  923 op sub :unpackCfg:th *tmp345 35
   924 set *tmp347 :unpackCfg:index
   925 op add :unpackCfg:index :unpackCfg:index 1
   926 read *tmp348 :unpackCfg:cfg *tmp347
-    * op sub *tmp349 *tmp348 35
-    * set :unpackCfg:rotation *tmp349
+  927 op sub :unpackCfg:rotation *tmp348 35
   928 op add :unpackCfg:index :unpackCfg:index 1
   929 set *tmp353 :unpackCfg:index
   930 op add :unpackCfg:index :unpackCfg:index 1
   931 read *tmp354 :unpackCfg:cfg *tmp353
-    * op sub *tmp355 *tmp354 35
-    * set :unpackCfg:ind *tmp355
+  932 op sub :unpackCfg:ind *tmp354 35
   933 label *label238
   934 return :unpackCfg*retaddr
   935 end
 
  1074 jump *label279 equal *tmp389 false
  1075 sensor *tmp391 .core @titanium
  1076 op sub *tmp392 .targetTitanium *tmp391
-    * op min *tmp393 7 *tmp392
-    * set *tmp390 *tmp393
+ 1077 op min *tmp390 7 *tmp392
  1078 jump *label280 always
  1079 label *label279
  1080 set *tmp390 100
 
  1106 setaddr :status1*retaddr *label291 (h:*label291)
  1107 call *label9 *invalid :status1*retval (m:*label291) (h:*label291)
  1108 label *label291
-    * sensor *tmp406 .core @coal
-    * set :supplyBase0:coal *tmp406
-    * sensor *tmp407 .core @sand
-    * set :supplyBase0:sand *tmp407
+ 1109 sensor :supplyBase0:coal .core @coal
+ 1110 sensor :supplyBase0:sand .core @sand
  1111 op lessThan *tmp408 :supplyBase0:coal :supplyBase0:sand
  1112 jump *label292 equal *tmp408 false
  1113 set *tmp409 @coal
 
  1165 setaddr :status1*retaddr *label307 (h:*label307)
  1166 call *label9 *invalid :status1*retval (m:*label307) (h:*label307)
  1167 label *label307
-    * sensor *tmp419 .core @coal
-    * set :supplyBase0:coal.1 *tmp419
-    * sensor *tmp420 .core @sand
-    * set :supplyBase0:sand.1 *tmp420
+ 1168 sensor :supplyBase0:coal.1 .core @coal
+ 1169 sensor :supplyBase0:sand.1 .core @sand
  1170 op lessThanEq *tmp421 :supplyBase0:coal.1 :supplyBase0:sand.1
  1171 jump *label308 equal *tmp421 false
  1172 set *tmp422 @coal
 
  1251 write :meetTarget:thorium .display ".targetThorium"
  1252 set .targetCopper :meetTarget:copper
  1253 op add *tmp425 :meetTarget:lead .leadSurplus
-    * op add *tmp426 *tmp425 1
-    * set .targetLead *tmp426
+ 1254 op add .targetLead *tmp425 1
  1255 set .targetGraphite :meetTarget:graphite
  1256 set .targetSilicon :meetTarget:silicon
  1257 set .targetTitanium :meetTarget:titanium
 
  1371 wait 1e-15
  1372 read *tmp466 .blockBuilder ":buildBlockAt*finished"
  1373 jump *label345 equal *tmp466 false
-    * read *tmp467 .blockBuilder ":buildBlockAt*retval"
-    * set :buildBlock*retval *tmp467
+ 1374 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1375 jump *label343 always
  1376 set :buildBlock*retval null
  1377 label *label343
 
  1464 return :buildBlockFromCfg*retaddr
  1465 end
  1466 label *label37
-    * set *tmp473 :buildBlockFromCfg.1:cfg
-    * set :buildBlockFromCfg:cfg *tmp473
+ 1467 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
  1468 set :buildBlockFromCfg:config null
  1469 setaddr :buildBlockFromCfg*retaddr *label355 (h:*label355)
  1470 call *label36 *invalid :buildBlockFromCfg*retval (m:*label355) (h:*label355)
 
  1523 label *label40
  1524 label *label362
  1525 ubind :flagUnits:unit
-    * set *tmp474 @unit
-    * set :flagUnits:firstUnit *tmp474
+ 1526 set :flagUnits:firstUnit @unit
  1527 label *label363
  1528 op equal *tmp475 :flagUnits:firstUnit null
  1529 jump *label362 notEqual *tmp475 false
 
  1544 ubind :lineUpUnits:unit
  1545 set :lineUpUnits:firstUnit @unit
  1546 label *label369
-    * sensor *tmp477 @unit @flag
-    * set :lineUpUnits:x *tmp477
+ 1547 sensor :lineUpUnits:x @unit @flag
  1548 ucontrol itemDrop @air 1000
  1549 ucontrol move :lineUpUnits:x :lineUpUnits:y
  1550 sensor *tmp478 @unit @mining

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
   503 call *label40 *invalid :flagUnits*retval (m:*label143) (h:*label143)
   504 label *label143
   505 label *label144
-    * jump *label146 equal true false
   506 op sub :lineUpUnits:y @thisy 6
   507 set :lineUpUnits:unit @mega
   508 setaddr :lineUpUnits*retaddr *label147 (h:*label147)

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-54 instructions):
 
    22 set .builder @unit
    23 ulocate building core false @copper .coreX .coreY 0 .core
    24 label *label43
-    * op equal *tmp130 .core null
-    * jump *label42 notEqual *tmp130 false
+   25 jump *label42 equal .core null
    26 label *label44
    27 set :buildBlockFromCfg.1:cfg "#'+nA######%#"
    28 setaddr :buildBlockFromCfg.1*retaddr *label45 (h:*label45)
 
    75 read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
    76 read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
    77 read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
-    * op equal *tmp150 :buildFirstTitaniumDrill:result false
-    * jump *label54 equal *tmp150 false
+   78 jump *label54 notEqual :buildFirstTitaniumDrill:result false
    79 set :error:error "Cannot locate spot for titanium drill"
    80 setaddr :error*retaddr *label56 (h:*label56)
    81 call *label13 *invalid :error*retval (m:*label56) (h:*label56)
 
   164 call *label32 *invalid :supplyBase*retval (m:*label71) (h:*label71)
   165 label *label71
   166 sensor *tmp163 .battery @totalPower
-    * op lessThan *tmp164 *tmp163 300
-    * jump *label72 equal *tmp164 false
+  167 jump *label72 greaterThanEq *tmp163 300
   168 jump *label70 always
   169 jump *label73 always
   170 label *label72
   171 label *label73
   172 label *label69
   173 read *tmp101 .controller ".monos"
-    * op lessThan *tmp166 *tmp101 3
-    * jump *label68 notEqual *tmp166 false
+  174 jump *label68 lessThan *tmp101 3
   175 label *label70
   176 set .siliconSurplus 65
   177 set :buildBlockFromCfg.1:cfg ",)###A<###$1"
 
   268 label *label93
   269 label *label94
   270 read *tmp102 .controller ".polys"
-    * op lessThan *tmp184 *tmp102 3
-    * jump *label96 equal *tmp184 false
+  271 jump *label96 greaterThanEq *tmp102 3
   272 setaddr :supplyBase*retaddr *label97 (h:*label97)
   273 call *label32 *invalid :supplyBase*retval (m:*label97) (h:*label97)
   274 label *label97
 
   281 label *label98
   282 label *label99
   283 read *tmp100 .controller ".flares"
-    * op lessThan *tmp185 *tmp100 2
-    * jump *label101 equal *tmp185 false
+  284 jump *label101 greaterThanEq *tmp100 2
   285 setaddr :supplyBase*retaddr *label102 (h:*label102)
   286 call *label32 *invalid :supplyBase*retval (m:*label102) (h:*label102)
   287 label *label102
 
   338 read *tmp205 .oreLocator ":layoutThoriumDrill*finished"
   339 jump *label109 equal *tmp205 false
   340 read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
-    * op equal *tmp207 :buildThoriumDrill:result false
-    * jump *label110 equal *tmp207 false
+  341 jump *label110 notEqual :buildThoriumDrill:result false
   342 set :error:error "Cannot locate spot for thorium drill"
   343 setaddr :error*retaddr *label112 (h:*label112)
   344 call *label13 *invalid :error*retval (m:*label112) (h:*label112)
 
   411 call *label35 *invalid :buildRemoteBlock*retval (m:*label121) (h:*label121)
   412 label *label121
   413 set .thoriumContainer :buildRemoteBlock*retval
-    * op equal *tmp225 .thoriumContainer null
-    * jump *label122 equal *tmp225 false
+  414 jump *label122 notEqual .thoriumContainer null
   415 set .thoriumContainer .thoriumDrill
   416 jump *label123 always
   417 label *label122
 
   433 label *label125
   434 label *label126
   435 read *tmp102 .controller ".polys"
-    * op lessThan *tmp229 *tmp102 5
-    * jump *label128 equal *tmp229 false
+  436 jump *label128 greaterThanEq *tmp102 5
   437 setaddr :supplyBase*retaddr *label129 (h:*label129)
   438 call *label32 *invalid :supplyBase*retval (m:*label129) (h:*label129)
   439 label *label129
 
   464 label *label134
   465 label *label135
   466 read *tmp103 .controller ".megas"
-    * op lessThan *tmp232 *tmp103 1
-    * jump *label137 equal *tmp232 false
+  467 jump *label137 greaterThanEq *tmp103 1
   468 setaddr :supplyBase*retaddr *label138 (h:*label138)
   469 call *label32 *invalid :supplyBase*retval (m:*label138) (h:*label138)
   470 label *label138
 
   554 label *label157
   555 label *label158
   556 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
-    * op equal *tmp243 *tmp242 false
-    * jump *label160 equal *tmp243 false
+  557 jump *label160 notEqual *tmp242 false
   558 op sub *tmp244 :moveTo:radius 0.5
   559 ucontrol approach :moveTo:x :moveTo:y *tmp244
   560 label *label159
 
   570 label *label164
   571 label *label165
   572 sensor *tmp247 @unit @firstItem
-    * op notEqual *tmp248 *tmp247 null
-    * jump *label168 equal *tmp248 false
+  573 jump *label168 equal *tmp247 null
   574 ucontrol itemDrop @air 1000
   575 jump *label169 always
   576 label *label168
 
   578 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
   579 label *label166
   580 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
-    * op equal *tmp251 *tmp250 false
-    * jump *label165 notEqual *tmp251 false
+  581 jump *label165 equal *tmp250 false
   582 label *label167
   583 label *label163
   584 return :moveToEmpty*retaddr
 
   586 label *label17
   587 label *label171
   588 sensor *tmp252 @unit @firstItem
-    * op notEqual *tmp253 *tmp252 null
-    * jump *label173 equal *tmp253 false
+  589 jump *label173 equal *tmp252 null
   590 ucontrol itemDrop @air 1000
   591 label *label172
   592 jump *label171 always
 
   612 call *label11 *invalid :status3*retval (m:*label177) (h:*label177)
   613 label *label177
   614 sensor *tmp256 @unit @firstItem
-    * op equal *tmp257 *tmp256 :depositItems:item
-    * jump *label178 equal *tmp257 false
+  615 jump *label178 notEqual *tmp256 :depositItems:item
   616 set :moveToBlock:block :depositItems:block
   617 set :moveToBlock:radius 6
   618 setaddr :moveToBlock*retaddr *label180 (h:*label180)
 
   625 sensor *tmp260 @unit @firstItem
   626 op mul *tmp261 *tmp260 :depositItems:cap
   627 sensor *tmp262 :depositItems:block :depositItems:item
-    * op greaterThan *tmp263 *tmp261 *tmp262
-    * jump *label181 notEqual *tmp263 false
+  628 jump *label181 greaterThan *tmp261 *tmp262
   629 label *label183
   630 jump *label179 always
   631 label *label178
   632 label *label184
   633 sensor *tmp264 @unit @firstItem
-    * op notEqual *tmp265 *tmp264 null
-    * jump *label186 equal *tmp265 false
+  634 jump *label186 equal *tmp264 null
   635 ucontrol itemDrop @air 1000
   636 label *label185
   637 jump *label184 always
 
   647 end
   648 label *label20
   649 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 0
-    * op equal *tmp268 *tmp266 false
-    * jump *label189 equal *tmp268 false
+  650 jump *label189 notEqual *tmp266 false
   651 set :error:error "Cannot locate ore"
   652 setaddr :error*retaddr *label191 (h:*label191)
   653 call *label13 *invalid :error*retval (m:*label191) (h:*label191)
 
   677 call *label16 *invalid :moveToEmpty*retval (m:*label195) (h:*label195)
   678 label *label195
   679 sensor *tmp271 @unit @firstItem
-    * op notEqual *tmp272 *tmp271 :mineOre:ore
-    * jump *label196 equal *tmp272 false
+  680 jump *label196 equal *tmp271 :mineOre:ore
   681 setaddr :dropAll*retaddr *label198 (h:*label198)
   682 call *label17 *invalid :dropAll*retval (m:*label198) (h:*label198)
   683 label *label198
 
   700 label *label203
   701 label *label204
   702 ucontrol mine :mineOre:x :mineOre:y
-    * op greaterThan *tmp280 @second :mineOre:stop
-    * jump *label205 equal *tmp280 false
+  703 jump *label205 lessThanEq @second :mineOre:stop
   704 jump *label202 always
   705 jump *label206 always
   706 label *label205
   707 label *label206
   708 label *label201
   709 sensor *tmp282 @unit @totalItems
-    * op lessThan *tmp283 *tmp282 :mineOre:amount
-    * jump *label200 notEqual *tmp283 false
+  710 jump *label200 lessThan *tmp282 :mineOre:amount
   711 label *label202
   712 ucontrol unbind
   713 set :depositItems:block :mineOre:block
 
   793 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   794 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
   795 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
-    * op greaterThan *tmp301 :supplyBlock:missing 0
-    * jump *label224 equal *tmp301 false
+  796 jump *label224 lessThanEq :supplyBlock:missing 0
   797 set :mineOre:ore :supplyBlock:ore
   798 set :mineOre:amount :supplyBlock:blockCapacity
   799 set :mineOre:block :supplyBlock:block
 
   921 call *label9 *invalid :status1*retval (m:*label243) (h:*label243)
   922 label *label243
   923 sensor *tmp360 .core @coal
-    * op lessThan *tmp361 *tmp360 50
-    * jump *label244 equal *tmp361 false
+  924 jump *label244 greaterThanEq *tmp360 50
   925 set :supplyBlock:block .thoriumGenerator
   926 set :supplyBlock:ore @coal
   927 setaddr :supplyBlock*retaddr *label246 (h:*label246)
 
   944 jump *label241 always
   945 label *label240
   946 read *tmp101 .controller ".monos"
-    * op greaterThan *tmp363 *tmp101 3
-    * jump *label249 equal *tmp363 false
+  947 jump *label249 lessThanEq *tmp101 3
   948 set :status1:text "Phase 1: supplying base"
   949 setaddr :status1*retaddr *label252 (h:*label252)
   950 call *label9 *invalid :status1*retval (m:*label252) (h:*label252)
 
   957 jump *label250 always
   958 label *label249
   959 set :supplyBase0:supplied false
-    * op equal *tmp365 .unloader1 null
-    * jump *label255 equal *tmp365 false
+  960 jump *label255 notEqual .unloader1 null
   961 sensor *tmp367 .core @graphite
-    * op lessThan *tmp368 *tmp367 .targetGraphite
-    * jump *label257 equal *tmp368 false
+  962 jump *label257 greaterThanEq *tmp367 .targetGraphite
   963 sensor *tmp370 .press @coal
-    * op lessThan *tmp371 *tmp370 5
-    * jump *label259 equal *tmp371 false
+  964 jump *label259 greaterThanEq *tmp370 5
   965 set :status1:text "Goal 1: graphite requirement"
   966 setaddr :status1*retaddr *label261 (h:*label261)
   967 call *label9 *invalid :status1*retval (m:*label261) (h:*label261)
 
   979 label *label257
   980 label *label258
   981 sensor *tmp373 .core @silicon
-    * op lessThan *tmp374 *tmp373 .targetSilicon
-    * jump *label263 equal *tmp374 false
+  982 jump *label263 greaterThanEq *tmp373 .targetSilicon
   983 sensor *tmp376 .smelter @coal
-    * op lessThan *tmp377 *tmp376 5
-    * jump *label265 equal *tmp377 false
+  984 jump *label265 greaterThanEq *tmp376 5
   985 set :status1:text "Goal 2: coal for silicon requirement"
   986 setaddr :status1*retaddr *label267 (h:*label267)
   987 call *label9 *invalid :status1*retval (m:*label267) (h:*label267)
 
   995 jump *label266 always
   996 label *label265
   997 sensor *tmp379 .smelter @sand
-    * op lessThan *tmp380 *tmp379 5
-    * jump *label269 equal *tmp380 false
+  998 jump *label269 greaterThanEq *tmp379 5
   999 set :status1:text "Goal 3: sand for silicon requirement"
  1000 setaddr :status1*retaddr *label271 (h:*label271)
  1001 call *label9 *invalid :status1*retval (m:*label271) (h:*label271)
 
  1014 label *label263
  1015 label *label264
  1016 sensor *tmp382 .battery @totalPower
-    * op lessThan *tmp383 *tmp382 .powerTarget
-    * jump *label273 equal *tmp383 false
+ 1017 jump *label273 greaterThanEq *tmp382 .powerTarget
  1018 sensor *tmp385 .generator @coal
-    * op lessThan *tmp386 *tmp385 2
-    * jump *label275 equal *tmp386 false
+ 1019 jump *label275 greaterThanEq *tmp385 2
  1020 set :status1:text "Goal 4: supplying generator"
  1021 setaddr :status1*retaddr *label277 (h:*label277)
  1022 call *label9 *invalid :status1*retval (m:*label277) (h:*label277)
 
  1037 label *label255
  1038 label *label256
  1039 sensor *tmp388 .core @titanium
-    * op lessThan *tmp389 *tmp388 .targetTitanium
-    * jump *label279 equal *tmp389 false
+ 1040 jump *label279 greaterThanEq *tmp388 .targetTitanium
  1041 sensor *tmp391 .core @titanium
  1042 op sub *tmp392 .targetTitanium *tmp391
  1043 op min *tmp390 7 *tmp392
 
  1047 label *label280
  1048 set :supplyBase0:titaniumTrigger *tmp390
  1049 sensor *tmp394 .titaniumDrill @titanium
-    * op lessThan *tmp395 *tmp394 :supplyBase0:titaniumTrigger
-    * jump *label281 equal *tmp395 false
-    * op equal *tmp397 :supplyBase0:supplied false
-    * jump *label283 equal *tmp397 false
+ 1050 jump *label281 greaterThanEq *tmp394 :supplyBase0:titaniumTrigger
+ 1051 jump *label283 notEqual :supplyBase0:supplied false
  1052 sensor *tmp399 .battery @totalPower
  1053 op mul *tmp400 .unloader1 .powerTarget
-    * op lessThan *tmp401 *tmp399 *tmp400
-    * jump *label285 equal *tmp401 false
+ 1054 jump *label285 greaterThanEq *tmp399 *tmp400
  1055 set :status1:text "Goal 5: supplying generator"
  1056 setaddr :status1*retaddr *label287 (h:*label287)
  1057 call *label9 *invalid :status1*retval (m:*label287) (h:*label287)
 
  1063 jump *label286 always
  1064 label *label285
  1065 sensor *tmp403 .core @silicon
-    * op lessThan *tmp404 *tmp403 .targetSilicon
-    * jump *label289 equal *tmp404 false
+ 1066 jump *label289 greaterThanEq *tmp403 .targetSilicon
  1067 set :status1:text "Goal 6: silicon requirement"
  1068 setaddr :status1*retaddr *label291 (h:*label291)
  1069 call *label9 *invalid :status1*retval (m:*label291) (h:*label291)
  1070 label *label291
  1071 sensor :supplyBase0:coal .core @coal
  1072 sensor :supplyBase0:sand .core @sand
-    * op lessThan *tmp408 :supplyBase0:coal :supplyBase0:sand
-    * jump *label292 equal *tmp408 false
+ 1073 jump *label292 greaterThanEq :supplyBase0:coal :supplyBase0:sand
  1074 set *tmp409 @coal
  1075 jump *label293 always
  1076 label *label292
 
  1084 jump *label290 always
  1085 label *label289
  1086 sensor *tmp410 .core @copper
-    * op lessThan *tmp411 *tmp410 .targetCopper
-    * jump *label295 equal *tmp411 false
+ 1087 jump *label295 greaterThanEq *tmp410 .targetCopper
  1088 set :status1:text "Goal 7: copper requirement"
  1089 setaddr :status1*retaddr *label297 (h:*label297)
  1090 call *label9 *invalid :status1*retval (m:*label297) (h:*label297)
 
  1096 jump *label296 always
  1097 label *label295
  1098 sensor *tmp413 .core @lead
-    * op lessThan *tmp414 *tmp413 .targetLead
-    * jump *label299 equal *tmp414 false
+ 1099 jump *label299 greaterThanEq *tmp413 .targetLead
  1100 set :status1:text "Goal 8: lead requirement"
  1101 setaddr :status1*retaddr *label301 (h:*label301)
  1102 call *label9 *invalid :status1*retval (m:*label301) (h:*label301)
 
  1108 jump *label300 always
  1109 label *label299
  1110 sensor *tmp416 .core @metaglass
-    * op lessThan *tmp417 *tmp416 .targetMetaglass
-    * jump *label303 equal *tmp417 false
+ 1111 jump *label303 greaterThanEq *tmp416 .targetMetaglass
  1112 set :status1:text "Goal 9: metaglass requirement"
  1113 setaddr :status1*retaddr *label305 (h:*label305)
  1114 call *label9 *invalid :status1*retval (m:*label305) (h:*label305)
 
  1125 label *label307
  1126 sensor :supplyBase0:coal.1 .core @coal
  1127 sensor :supplyBase0:sand.1 .core @sand
-    * op lessThanEq *tmp421 :supplyBase0:coal.1 :supplyBase0:sand.1
-    * jump *label308 equal *tmp421 false
+ 1128 jump *label308 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
  1129 set *tmp422 @coal
  1130 jump *label309 always
  1131 label *label308
 
  1234 write .targetCopper processor8 ".monoCopperTarget"
  1235 label *label324
  1236 sensor *tmp438 .core @copper
-    * op lessThan *tmp439 *tmp438 .targetCopper
-    * jump *label328 equal *tmp439 false
+ 1237 jump *label328 greaterThanEq *tmp438 .targetCopper
  1238 set *tmp437 false
  1239 jump *label327 always
  1240 jump *label329 always
  1241 label *label328
  1242 label *label329
  1243 sensor *tmp441 .core @lead
-    * op lessThan *tmp442 *tmp441 .targetLead
-    * jump *label330 equal *tmp442 false
+ 1244 jump *label330 greaterThanEq *tmp441 .targetLead
  1245 set *tmp437 false
  1246 jump *label327 always
  1247 jump *label331 always
  1248 label *label330
  1249 label *label331
  1250 sensor *tmp444 .core @graphite
-    * op lessThan *tmp445 *tmp444 .targetGraphite
-    * jump *label332 equal *tmp445 false
+ 1251 jump *label332 greaterThanEq *tmp444 .targetGraphite
  1252 set *tmp437 false
  1253 jump *label327 always
  1254 jump *label333 always
  1255 label *label332
  1256 label *label333
  1257 sensor *tmp447 .core @silicon
-    * op lessThan *tmp448 *tmp447 .targetSilicon
-    * jump *label334 equal *tmp448 false
+ 1258 jump *label334 greaterThanEq *tmp447 .targetSilicon
  1259 set *tmp437 false
  1260 jump *label327 always
  1261 jump *label335 always
  1262 label *label334
  1263 label *label335
  1264 sensor *tmp450 .core @titanium
-    * op lessThan *tmp451 *tmp450 .targetTitanium
-    * jump *label336 equal *tmp451 false
+ 1265 jump *label336 greaterThanEq *tmp450 .targetTitanium
  1266 set *tmp437 false
  1267 jump *label327 always
  1268 jump *label337 always
  1269 label *label336
  1270 label *label337
  1271 sensor *tmp453 .core @metaglass
-    * op lessThan *tmp454 *tmp453 .targetMetaglass
-    * jump *label338 equal *tmp454 false
+ 1272 jump *label338 greaterThanEq *tmp453 .targetMetaglass
  1273 set *tmp437 false
  1274 jump *label327 always
  1275 jump *label339 always
  1276 label *label338
  1277 label *label339
  1278 sensor *tmp456 .core @thorium
-    * op lessThan *tmp457 *tmp456 .targetThorium
-    * jump *label340 equal *tmp457 false
+ 1279 jump *label340 greaterThanEq *tmp456 .targetThorium
  1280 set *tmp437 false
  1281 jump *label327 always
  1282 jump *label341 always
 
  1286 jump *label327 always
  1287 set *tmp437 null
  1288 label *label327
-    * op equal *tmp459 *tmp437 false
-    * jump *label326 equal *tmp459 false
+ 1289 jump *label326 notEqual *tmp437 false
  1290 setaddr :supplyBase*retaddr *label342 (h:*label342)
  1291 call *label32 *invalid :supplyBase*retval (m:*label342) (h:*label342)
  1292 label *label342
 
  1328 end
  1329 label *label35
  1330 op add *tmp468 :buildRemoteBlock:x :buildRemoteBlock:y
-    * op greaterThan *tmp469 *tmp468 0
-    * jump *label347 equal *tmp469 false
+ 1331 jump *label347 lessThanEq *tmp468 0
  1332 set :unpackCfg:cfg :buildRemoteBlock:cfg
  1333 setaddr :unpackCfg*retaddr *label349 (h:*label349)
  1334 call *label31 *invalid :unpackCfg*retval (m:*label349) (h:*label349)
 
  1473 ubind :flagUnits:unit
  1474 set :flagUnits:firstUnit @unit
  1475 label *label363
-    * op equal *tmp475 :flagUnits:firstUnit null
-    * jump *label362 notEqual *tmp475 false
+ 1476 jump *label362 equal :flagUnits:firstUnit null
  1477 label *label364
  1478 set :flagUnits:x @thisx
  1479 label *label365
 
  1481 op add :flagUnits:x :flagUnits:x 4
  1482 ubind :flagUnits:unit
  1483 label *label366
-    * op notEqual *tmp476 @unit :flagUnits:firstUnit
-    * jump *label365 notEqual *tmp476 false
+ 1484 jump *label365 notEqual @unit :flagUnits:firstUnit
  1485 label *label367
  1486 label *label361
  1487 return :flagUnits*retaddr
 
  1501 label *label373
  1502 ubind :lineUpUnits:unit
  1503 label *label370
-    * op notEqual *tmp480 @unit :lineUpUnits:firstUnit
-    * jump *label369 notEqual *tmp480 false
+ 1504 jump *label369 notEqual @unit :lineUpUnits:firstUnit
  1505 label *label371
  1506 label *label368
  1507 return :lineUpUnits*retaddr

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-29 instructions):
 
    80 setaddr :error*retaddr *label56 (h:*label56)
    81 call *label13 *invalid :error*retval (m:*label56) (h:*label56)
    82 label *label56
-    * jump *label55 always
    83 label *label54
    84 label *label55
    85 write @pneumatic-drill .display ".nextBlock"
 
   165 sensor *tmp163 .battery @totalPower
   166 jump *label72 greaterThanEq *tmp163 300
   167 jump *label70 always
-    * jump *label73 always
   168 label *label72
   169 label *label73
   170 label *label69
 
   341 setaddr :error*retaddr *label112 (h:*label112)
   342 call *label13 *invalid :error*retval (m:*label112) (h:*label112)
   343 label *label112
-    * jump *label111 always
   344 label *label110
   345 label *label111
   346 write @laser-drill .blockBuilder ":buildBlockAt:block"
 
   410 set .thoriumContainer :buildRemoteBlock*retval
   411 jump *label122 notEqual .thoriumContainer null
   412 set .thoriumContainer .thoriumDrill
-    * jump *label123 always
   413 label *label122
   414 label *label123
   415 write .thoriumDrill .display ".thoriumDrill"
 
   568 sensor *tmp247 @unit @firstItem
   569 jump *label168 equal *tmp247 null
   570 ucontrol itemDrop @air 1000
-    * jump *label169 always
   571 label *label168
   572 label *label169
   573 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
 
   647 setaddr :error*retaddr *label191 (h:*label191)
   648 call *label13 *invalid :error*retval (m:*label191) (h:*label191)
   649 label *label191
-    * jump *label190 always
   650 label *label189
   651 label *label190
   652 label *label188
 
   675 setaddr :dropAll*retaddr *label198 (h:*label198)
   676 call *label17 *invalid :dropAll*retval (m:*label198) (h:*label198)
   677 label *label198
-    * jump *label197 always
   678 label *label196
   679 label *label197
   680 set :status3:text "Mining..."
 
   689 op land *tmp278 *tmp276 *tmp277
   690 jump *label203 equal *tmp278 false
   691 jump *label202 always
-    * jump *label204 always
   692 label *label203
   693 label *label204
   694 ucontrol mine :mineOre:x :mineOre:y
   695 jump *label205 lessThanEq @second :mineOre:stop
   696 jump *label202 always
-    * jump *label206 always
   697 label *label205
   698 label *label206
   699 label *label201
 
   756 op land *tmp292 *tmp290 *tmp291
   757 jump *label219 equal *tmp292 false
   758 ucontrol itemDrop @air 1000
-    * jump *label220 always
   759 label *label219
   760 label *label220
   761 label *label217
 
   790 setaddr :mineOre*retaddr *label226 (h:*label226)
   791 call *label21 *invalid :mineOre*retval (m:*label226) (h:*label226)
   792 label *label226
-    * jump *label225 always
   793 label *label224
   794 label *label225
   795 label *label222
 
   824 op land *tmp308 *tmp306 *tmp307
   825 jump *label235 equal *tmp308 false
   826 ucontrol itemDrop @air 1000
-    * jump *label236 always
   827 label *label235
   828 label *label236
   829 label *label233
 
   960 call *label24 *invalid :supplyBlock*retval (m:*label262) (h:*label262)
   961 label *label262
   962 set :supplyBase0:supplied true
-    * jump *label260 always
   963 label *label259
   964 label *label260
-    * jump *label258 always
   965 label *label257
   966 label *label258
   967 sensor *tmp373 .core @silicon
 
   992 call *label24 *invalid :supplyBlock*retval (m:*label272) (h:*label272)
   993 label *label272
   994 set :supplyBase0:supplied true
-    * jump *label270 always
   995 label *label269
   996 label *label270
   997 label *label266
-    * jump *label264 always
   998 label *label263
   999 label *label264
  1000 sensor *tmp382 .battery @totalPower
 
  1011 call *label24 *invalid :supplyBlock*retval (m:*label278) (h:*label278)
  1012 label *label278
  1013 set :supplyBase0:supplied true
-    * jump *label276 always
  1014 label *label275
  1015 label *label276
-    * jump *label274 always
  1016 label *label273
  1017 label *label274
-    * jump *label256 always
  1018 label *label255
  1019 label *label256
  1020 sensor *tmp388 .core @titanium
 
  1122 label *label296
  1123 label *label290
  1124 label *label286
-    * jump *label284 always
  1125 label *label283
  1126 label *label284
  1127 jump *label282 always
 
  1217 jump *label328 greaterThanEq *tmp438 .targetCopper
  1218 set *tmp437 false
  1219 jump *label327 always
-    * jump *label329 always
  1220 label *label328
  1221 label *label329
  1222 sensor *tmp441 .core @lead
  1223 jump *label330 greaterThanEq *tmp441 .targetLead
  1224 set *tmp437 false
  1225 jump *label327 always
-    * jump *label331 always
  1226 label *label330
  1227 label *label331
  1228 sensor *tmp444 .core @graphite
  1229 jump *label332 greaterThanEq *tmp444 .targetGraphite
  1230 set *tmp437 false
  1231 jump *label327 always
-    * jump *label333 always
  1232 label *label332
  1233 label *label333
  1234 sensor *tmp447 .core @silicon
  1235 jump *label334 greaterThanEq *tmp447 .targetSilicon
  1236 set *tmp437 false
  1237 jump *label327 always
-    * jump *label335 always
  1238 label *label334
  1239 label *label335
  1240 sensor *tmp450 .core @titanium
  1241 jump *label336 greaterThanEq *tmp450 .targetTitanium
  1242 set *tmp437 false
  1243 jump *label327 always
-    * jump *label337 always
  1244 label *label336
  1245 label *label337
  1246 sensor *tmp453 .core @metaglass
  1247 jump *label338 greaterThanEq *tmp453 .targetMetaglass
  1248 set *tmp437 false
  1249 jump *label327 always
-    * jump *label339 always
  1250 label *label338
  1251 label *label339
  1252 sensor *tmp456 .core @thorium
  1253 jump *label340 greaterThanEq *tmp456 .targetThorium
  1254 set *tmp437 false
  1255 jump *label327 always
-    * jump *label341 always
  1256 label *label340
  1257 label *label341
  1258 set *tmp437 true
 
  1334 label *label350
  1335 set :buildRemoteBlock*retval :buildBlock*retval
  1336 jump *label346 always
-    * jump *label348 always
  1337 label *label347
  1338 label *label348
  1339 set :buildRemoteBlock*retval false
 
  1468 sensor *tmp478 @unit @mining
  1469 jump *label372 equal *tmp478 false
  1470 ucontrol stop
-    * jump *label373 always
  1471 label *label372
  1472 label *label373
  1473 ubind :lineUpUnits:unit

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-8 instructions):
 
     8 set .smelter null
     9 set .titaniumDrill null
    10 set .unloader1 null
-    * set .kiln null
-    * set .thoriumDrill null
    11 set .thoriumContainer null
    12 set .thoriumGenerator null
    13 set .leadSurplus 0
 
    52 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label50) (h:*label50)
    53 label *label50
    54 set :buildFirstTitaniumDrill:cfg "w**5#-#####%)"
-    * set :meetTarget.1:cfg :buildFirstTitaniumDrill:cfg
+   55 set :meetTarget.1:cfg "w**5#-#####%)"
    56 setaddr :meetTarget.1*retaddr *label52 (h:*label52)
    57 call *label38 *invalid :meetTarget.1*retval (m:*label52) (h:*label52)
    58 label *label52
-    * write @titanium .display ".nextBlock"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 2 .oreLocator ":findDrillLocation:size"
-    * write 4 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+   59 write @titanium processor1 ".nextBlock"
+   60 write .coreX processor4 ":findDrillLocation:x"
+   61 write .coreY processor4 ":findDrillLocation:y"
+   62 write @unit processor4 ":findDrillLocation:unit"
+   63 write @titanium processor4 ":findDrillLocation:item"
+   64 write @ore-titanium processor4 ":findDrillLocation:ore"
+   65 write 2 processor4 ":findDrillLocation:size"
+   66 write 4 processor4 ":findDrillLocation:limit"
+   67 write false processor4 ":findDrillLocation*finished"
+   68 write 1 processor4 "@counter"
    69 label *label53
    70 wait 1e-15
-    * read *tmp148 .oreLocator ":findDrillLocation*finished"
+   71 read *tmp148 processor4 ":findDrillLocation*finished"
    72 jump *label53 equal *tmp148 false
-    * read :buildFirstTitaniumDrill:dx .oreLocator ":findDrillLocation:dx"
-    * read :buildFirstTitaniumDrill:dy .oreLocator ":findDrillLocation:dy"
-    * read :buildFirstTitaniumDrill:result .oreLocator ":findDrillLocation*retval"
+   73 read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocation:dx"
+   74 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
+   75 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    76 jump *label54 notEqual :buildFirstTitaniumDrill:result false
    77 set :error:error "Cannot locate spot for titanium drill"
    78 setaddr :error*retaddr *label56 (h:*label56)
 
    80 label *label56
    81 label *label54
    82 label *label55
-    * write @pneumatic-drill .display ".nextBlock"
-    * write :buildFirstTitaniumDrill:dx .blockBuilder ":buildFirstTitaniumDrillAt:x"
-    * write :buildFirstTitaniumDrill:dy .blockBuilder ":buildFirstTitaniumDrillAt:y"
-    * write false .blockBuilder ":buildFirstTitaniumDrillAt*finished"
-    * write 2 .blockBuilder "@counter"
+   83 write @pneumatic-drill processor1 ".nextBlock"
+   84 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
+   85 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
+   86 write false processor5 ":buildFirstTitaniumDrillAt*finished"
+   87 write 2 processor5 "@counter"
    88 label *label57
    89 wait 1e-15
-    * read *tmp154 .blockBuilder ":buildFirstTitaniumDrillAt*finished"
+   90 read *tmp154 processor5 ":buildFirstTitaniumDrillAt*finished"
    91 jump *label57 equal *tmp154 false
-    * read *tmp137 .blockBuilder ":buildFirstTitaniumDrillAt*retval"
+   92 read *tmp137 processor5 ":buildFirstTitaniumDrillAt*retval"
    93 jump *label51 always
-    * set *tmp137 null
    94 label *label51
    95 set .titaniumDrill *tmp137
-    * write .titaniumDrill .display ".titaniumDrill"
+   96 write *tmp137 processor1 ".titaniumDrill"
    97 set :buildBlockFromCfg.1:cfg "*,###A<###$*"
    98 setaddr :buildBlockFromCfg.1*retaddr *label58 (h:*label58)
    99 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label58) (h:*label58)
 
   114 call *label36 *invalid :buildBlockFromCfg*retval (m:*label61) (h:*label61)
   115 label *label61
   116 set .controller :buildBlockFromCfg*retval
-    * write processor6 .controller ".timer"
-    * write .display .controller ".display"
-    * write .core .controller ".core"
-    * write bank1 .controller ".bank"
-    * write .battery .controller ".battery"
-    * write .generator .controller ".generator"
-    * write .smelter .controller ".smelter"
-    * write .press .controller ".press"
-    * write .unloader1 .controller ".unloader1"
+  117 write processor6 :buildBlockFromCfg*retval ".timer"
+  118 write processor1 :buildBlockFromCfg*retval ".display"
+  119 write .core :buildBlockFromCfg*retval ".core"
+  120 write bank1 :buildBlockFromCfg*retval ".bank"
+  121 write .battery :buildBlockFromCfg*retval ".battery"
+  122 write .generator :buildBlockFromCfg*retval ".generator"
+  123 write .smelter :buildBlockFromCfg*retval ".smelter"
+  124 write .press :buildBlockFromCfg*retval ".press"
+  125 write .unloader1 :buildBlockFromCfg*retval ".unloader1"
   126 set :buildBlockFromCfg.1:cfg "g)'%)######$."
   127 setaddr :buildBlockFromCfg.1*retaddr *label62 (h:*label62)
   128 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label62) (h:*label62)
 
   137 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label64) (h:*label64)
   138 label *label64
   139 set :factory :buildBlockFromCfg.1*retval
-    * write :factory .controller ".factory"
-    * write :factory .display ".airFactory"
+  140 write :buildBlockFromCfg.1*retval .controller ".factory"
+  141 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   142 set :setFlareTarget:target 1
-    * write :setFlareTarget:target .controller ".flareTarget"
-    * write :setFlareTarget:target .display ".flareTarget"
+  143 write 1 .controller ".flareTarget"
+  144 write 1 processor1 ".flareTarget"
   145 label *label65
   146 set :setMonoTarget:target 3
-    * write :setMonoTarget:target .controller ".monoTarget"
-    * write :setMonoTarget:target .display ".monoTarget"
+  147 write 3 .controller ".monoTarget"
+  148 write 3 processor1 ".monoTarget"
   149 label *label66
   150 write 85 .controller ".pressTarget"
   151 write 150 .controller ".smelterTarget"
   152 write 30 .controller ".kilnTarget"
   153 set .leadSurplus 20
-    * set .siliconSurplus .leadSurplus
+  154 set .siliconSurplus 20
   155 setaddr :buildUnits*retaddr *label67 (h:*label67)
   156 call *label39 *invalid :buildUnits*retval (m:*label67) (h:*label67)
   157 label *label67
 
   182 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
   183 label *label76
   184 set .kiln :buildBlockFromCfg.1*retval
-    * write .kiln .controller ".kiln"
+  185 write :buildBlockFromCfg.1*retval .controller ".kiln"
   186 set :buildBlockFromCfg.1:cfg "z%-AAA##A##%4"
   187 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
   188 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label77) (h:*label77)
 
   225 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   226 label *label85
   227 set :reconstructor :buildBlockFromCfg.1*retval
-    * write :reconstructor .controller ".reconstructor"
-    * write :reconstructor .display ".reconstructor"
+  228 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
+  229 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   230 set :buildBlockFromCfg.1:cfg "l/,#U#A7###&>"
   231 setaddr :buildBlockFromCfg.1*retaddr *label86 (h:*label86)
   232 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label86) (h:*label86)
 
   237 set .siliconSurplus 1000
   238 set .metaglassSurplus 200
   239 set :setPolyTarget:target 6
-    * write :setPolyTarget:target .controller ".polyTarget"
-    * write :setPolyTarget:target .display ".polyTarget"
+  240 write 6 .controller ".polyTarget"
+  241 write 6 processor1 ".polyTarget"
   242 label *label88
   243 set :buildBlockFromCfg.1:cfg "%.)A<######%C"
   244 setaddr :buildBlockFromCfg.1*retaddr *label89 (h:*label89)
 
   271 jump *label94 always
   272 label *label96
   273 set :setFlareTarget.1:target 3
-    * write :setFlareTarget.1:target .controller ".flareTarget"
-    * write :setFlareTarget.1:target .display ".flareTarget"
+  274 write 3 .controller ".flareTarget"
+  275 write 3 processor1 ".flareTarget"
   276 label *label98
   277 label *label99
   278 read *tmp100 .controller ".flares"
 
   285 label *label101
   286 set .graphiteSurplus 100
   287 set :setMonoTarget.1:target 5
-    * write :setMonoTarget.1:target .controller ".monoTarget"
-    * write :setMonoTarget.1:target .display ".monoTarget"
+  288 write 5 .controller ".monoTarget"
+  289 write 5 processor1 ".monoTarget"
   290 label *label103
-    * write @ore-titanium .display ".nextBlock"
+  291 write @ore-titanium processor1 ".nextBlock"
   292 wait 0.000000001
   293 ubind @flare
-    * read :blocksBuildTitaniumDrills:current .oreLocator ".locations"
-    * write .coreX .oreLocator ":findDrillLocation:x"
-    * write .coreY .oreLocator ":findDrillLocation:y"
-    * write @unit .oreLocator ":findDrillLocation:unit"
-    * write @titanium .oreLocator ":findDrillLocation:item"
-    * write @ore-titanium .oreLocator ":findDrillLocation:ore"
-    * write 4 .oreLocator ":findDrillLocation:size"
-    * write 1000000000 .oreLocator ":findDrillLocation:limit"
-    * write false .oreLocator ":findDrillLocation*finished"
-    * write 1 .oreLocator "@counter"
+  294 read :blocksBuildTitaniumDrills:current processor4 ".locations"
+  295 write .coreX processor4 ":findDrillLocation:x"
+  296 write .coreY processor4 ":findDrillLocation:y"
+  297 write @unit processor4 ":findDrillLocation:unit"
+  298 write @titanium processor4 ":findDrillLocation:item"
+  299 write @ore-titanium processor4 ":findDrillLocation:ore"
+  300 write 4 processor4 ":findDrillLocation:size"
+  301 write 1000000000 processor4 ":findDrillLocation:limit"
+  302 write false processor4 ":findDrillLocation*finished"
+  303 write 1 processor4 "@counter"
   304 ubind .builder
-    * write .controller .blockBuilder ":buildTitaniumDrills:aController"
-    * write :blocksBuildTitaniumDrills:current .blockBuilder ":buildTitaniumDrills:current"
-    * write false .blockBuilder ":buildTitaniumDrills*finished"
-    * write 3 .blockBuilder "@counter"
+  305 write .controller processor5 ":buildTitaniumDrills:aController"
+  306 write :blocksBuildTitaniumDrills:current processor5 ":buildTitaniumDrills:current"
+  307 write false processor5 ":buildTitaniumDrills*finished"
+  308 write 3 processor5 "@counter"
   309 label *label105
   310 wait 1e-15
-    * read *tmp198 .blockBuilder ":buildTitaniumDrills*finished"
+  311 read *tmp198 processor5 ":buildTitaniumDrills*finished"
   312 jump *label105 equal *tmp198 false
-    * write false .oreLocator ":stopLocation*finished"
-    * write 3 .oreLocator "@counter"
+  313 write false processor4 ":stopLocation*finished"
+  314 write 3 processor4 "@counter"
   315 label *label104
-    * write null .display ".nextBlock"
-    * write .coreX .oreLocator ":layoutThoriumDrill:x"
-    * write .coreY .oreLocator ":layoutThoriumDrill:y"
-    * write @unit .oreLocator ":layoutThoriumDrill:unit"
-    * write 7 .oreLocator ":layoutThoriumDrill:limit"
-    * write false .oreLocator ":layoutThoriumDrill*finished"
-    * write 2 .oreLocator "@counter"
+  316 write null processor1 ".nextBlock"
+  317 write .coreX processor4 ":layoutThoriumDrill:x"
+  318 write .coreY processor4 ":layoutThoriumDrill:y"
+  319 write @unit processor4 ":layoutThoriumDrill:unit"
+  320 write 7 processor4 ":layoutThoriumDrill:limit"
+  321 write false processor4 ":layoutThoriumDrill*finished"
+  322 write 2 processor4 "@counter"
   323 label *label107
   324 wait 1e-15
-    * read *tmp203 .oreLocator ":layoutThoriumDrill*finished"
+  325 read *tmp203 processor4 ":layoutThoriumDrill*finished"
   326 jump *label107 equal *tmp203 false
   327 set :meetTarget.1:cfg "x**F#AA7###&@"
   328 setaddr :meetTarget.1*retaddr *label108 (h:*label108)
 
   330 label *label108
   331 label *label109
   332 wait 1e-15
-    * read *tmp205 .oreLocator ":layoutThoriumDrill*finished"
+  333 read *tmp205 processor4 ":layoutThoriumDrill*finished"
   334 jump *label109 equal *tmp205 false
-    * read :buildThoriumDrill:result .oreLocator ":layoutThoriumDrill*retval"
+  335 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   336 jump *label110 notEqual :buildThoriumDrill:result false
   337 set :error:error "Cannot locate spot for thorium drill"
   338 setaddr :error*retaddr *label112 (h:*label112)
 
   340 label *label112
   341 label *label110
   342 label *label111
-    * write @laser-drill .blockBuilder ":buildBlockAt:block"
-    * read *tmp56 .oreLocator ".drillX"
-    * write *tmp56 .blockBuilder ":buildBlockAt:x"
-    * read *tmp57 .oreLocator ".drillY"
-    * write *tmp57 .blockBuilder ":buildBlockAt:y"
-    * write null .blockBuilder ":buildBlockAt:rotation"
-    * write 0 .blockBuilder ":buildBlockAt:config"
-    * write -1 .blockBuilder ":buildBlockAt:index"
-    * write false .blockBuilder ":buildBlockAt*finished"
-    * write 1 .blockBuilder "@counter"
+  343 write @laser-drill processor5 ":buildBlockAt:block"
+  344 read *tmp56 processor4 ".drillX"
+  345 write *tmp56 processor5 ":buildBlockAt:x"
+  346 read *tmp57 processor4 ".drillY"
+  347 write *tmp57 processor5 ":buildBlockAt:y"
+  348 write null processor5 ":buildBlockAt:rotation"
+  349 write 0 processor5 ":buildBlockAt:config"
+  350 write -1 processor5 ":buildBlockAt:index"
+  351 write false processor5 ":buildBlockAt*finished"
+  352 write 1 processor5 "@counter"
   353 label *label113
   354 wait 1e-15
-    * read *tmp215 .blockBuilder ":buildBlockAt*finished"
+  355 read *tmp215 processor5 ":buildBlockAt*finished"
   356 jump *label113 equal *tmp215 false
-    * read .thoriumDrill .blockBuilder ":buildBlockAt*retval"
+  357 read .thoriumDrill processor5 ":buildBlockAt*retval"
   358 set :buildRemoteBlock:cfg "z%-AAA##A##%4"
-    * read :buildRemoteBlock:x .oreLocator ".water1X"
-    * read :buildRemoteBlock:y .oreLocator ".water1Y"
+  359 read :buildRemoteBlock:x processor4 ".water1X"
+  360 read :buildRemoteBlock:y processor4 ".water1Y"
   361 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   362 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   363 label *label114
   364 set :buildRemoteBlock:cfg "z%-AAA##A##%4"
-    * read :buildRemoteBlock:x .oreLocator ".water2X"
-    * read :buildRemoteBlock:y .oreLocator ".water2Y"
+  365 read :buildRemoteBlock:x processor4 ".water2X"
+  366 read :buildRemoteBlock:y processor4 ".water2Y"
   367 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
   368 call *label35 *invalid :buildRemoteBlock*retval (m:*label115) (h:*label115)
   369 label *label115
   370 set :buildRemoteBlock:cfg "o%+FK<A####%7"
-    * read :buildRemoteBlock:x .oreLocator ".generatorX"
-    * read :buildRemoteBlock:y .oreLocator ".generatorY"
+  371 read :buildRemoteBlock:x processor4 ".generatorX"
+  372 read :buildRemoteBlock:y processor4 ".generatorY"
   373 setaddr :buildRemoteBlock*retaddr *label116 (h:*label116)
   374 call *label35 *invalid :buildRemoteBlock*retval (m:*label116) (h:*label116)
   375 label *label116
   376 set .thoriumGenerator :buildRemoteBlock*retval
   377 set :buildRemoteBlock:cfg "g)'%)######$."
-    * read :buildRemoteBlock:x .oreLocator ".node1X"
-    * read :buildRemoteBlock:y .oreLocator ".node1Y"
+  378 read :buildRemoteBlock:x processor4 ".node1X"
+  379 read :buildRemoteBlock:y processor4 ".node1Y"
   380 setaddr :buildRemoteBlock*retaddr *label117 (h:*label117)
   381 call *label35 *invalid :buildRemoteBlock*retval (m:*label117) (h:*label117)
   382 label *label117
-    * set :buildRemoteBlock:cfg "g)'%)######$."
-    * read :buildRemoteBlock:x .oreLocator ".node2X"
-    * read :buildRemoteBlock:y .oreLocator ".node2Y"
+  383 read :buildRemoteBlock:x processor4 ".node2X"
+  384 read :buildRemoteBlock:y processor4 ".node2Y"
   385 setaddr :buildRemoteBlock*retaddr *label118 (h:*label118)
   386 call *label35 *invalid :buildRemoteBlock*retval (m:*label118) (h:*label118)
   387 label *label118
   388 set :buildRemoteBlock:cfg "r**#-#+####$A"
-    * read :buildRemoteBlock:x .oreLocator ".panelX"
-    * read :buildRemoteBlock:y .oreLocator ".panelY"
+  389 read :buildRemoteBlock:x processor4 ".panelX"
+  390 read :buildRemoteBlock:y processor4 ".panelY"
   391 setaddr :buildRemoteBlock*retaddr *label119 (h:*label119)
   392 call *label35 *invalid :buildRemoteBlock*retval (m:*label119) (h:*label119)
   393 label *label119
   394 set :buildRemoteBlock:cfg "k*/(7######$$"
-    * read :buildRemoteBlock:x .oreLocator ".batteryX"
-    * read :buildRemoteBlock:y .oreLocator ".batteryY"
+  395 read :buildRemoteBlock:x processor4 ".batteryX"
+  396 read :buildRemoteBlock:y processor4 ".batteryY"
   397 setaddr :buildRemoteBlock*retaddr *label120 (h:*label120)
   398 call *label35 *invalid :buildRemoteBlock*retval (m:*label120) (h:*label120)
   399 label *label120
   400 set :buildRemoteBlock:cfg "**#######%B"
-    * read :buildRemoteBlock:x .oreLocator ".containerX"
-    * read :buildRemoteBlock:y .oreLocator ".containerY"
+  401 read :buildRemoteBlock:x processor4 ".containerX"
+  402 read :buildRemoteBlock:y processor4 ".containerY"
   403 setaddr :buildRemoteBlock*retaddr *label121 (h:*label121)
   404 call *label35 *invalid :buildRemoteBlock*retval (m:*label121) (h:*label121)
   405 label *label121
   406 set .thoriumContainer :buildRemoteBlock*retval
-    * jump *label122 notEqual .thoriumContainer null
+  407 jump *label122 notEqual :buildRemoteBlock*retval null
   408 set .thoriumContainer .thoriumDrill
   409 label *label122
   410 label *label123
-    * write .thoriumDrill .display ".thoriumDrill"
-    * write .thoriumContainer .display ".thoriumContainer"
-    * write .thoriumContainer .polyController ":setThoriumContainer:container"
-    * write false .polyController ":setThoriumContainer*finished"
-    * write 3 .polyController "@counter"
+  411 write .thoriumDrill processor1 ".thoriumDrill"
+  412 write .thoriumContainer processor1 ".thoriumContainer"
+  413 write .thoriumContainer processor3 ":setThoriumContainer:container"
+  414 write false processor3 ":setThoriumContainer*finished"
+  415 write 3 processor3 "@counter"
   416 label *label124
   417 wait 1e-15
-    * read *tmp228 .polyController ":setThoriumContainer*finished"
+  418 read *tmp228 processor3 ":setThoriumContainer*finished"
   419 jump *label124 equal *tmp228 false
   420 label *label106
-    * write null .display ".nextBlock"
+  421 write null processor1 ".nextBlock"
   422 set :setMegaTarget:target 1
-    * write :setMegaTarget:target .controller ".megaTarget"
-    * write :setMegaTarget:target .display ".megaTarget"
+  423 write 1 .controller ".megaTarget"
+  424 write 1 processor1 ".megaTarget"
   425 label *label125
   426 label *label126
   427 read *tmp102 .controller ".polys"
 
   447 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label133) (h:*label133)
   448 label *label133
   449 set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
-    * write :buildMultiplicativeReconstructor:multiReconstructor .controller ".multiReconstructor"
-    * write :buildMultiplicativeReconstructor:multiReconstructor .display ".multiReconstructor"
+  450 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
+  451 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   452 label *label132
   453 set .metaglassSurplus 50
   454 setaddr :buildUnits*retaddr *label134 (h:*label134)
 
   661 label *label194
   662 set :mineOre:x :locateOre:x
   663 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :mineOre:x
-    * set :moveToEmpty:y :mineOre:y
+  664 set :moveToEmpty:x :locateOre:x
+  665 set :moveToEmpty:y :locateOre:y
   666 setaddr :moveToEmpty*retaddr *label195 (h:*label195)
   667 call *label16 *invalid :moveToEmpty*retval (m:*label195) (h:*label195)
   668 label *label195
 
   839 end
   840 label *label31
   841 set :unpackCfg:index 0
-    * set *tmp314 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  842 set *tmp314 0
+  843 op add :unpackCfg:index 0 1
   844 read *tmp315 :unpackCfg:cfg *tmp314
   845 op sub *tmp316 *tmp315 35
   846 lookup block :unpackCfg:type *tmp316
-    * set *tmp318 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  847 set *tmp318 1
+  848 op add :unpackCfg:index 1 1
   849 read *tmp319 :unpackCfg:cfg *tmp318
   850 op sub *tmp320 *tmp319 35
-    * op sub :unpackCfg:x *tmp320 7
-    * set *tmp322 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  851 op sub :unpackCfg:x *tmp319 42
+  852 set *tmp322 2
+  853 op add :unpackCfg:index 2 1
   854 read *tmp323 :unpackCfg:cfg *tmp322
   855 op sub *tmp324 *tmp323 35
-    * op sub :unpackCfg:y *tmp324 7
-    * set *tmp326 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  856 op sub :unpackCfg:y *tmp323 42
+  857 set *tmp326 3
+  858 op add :unpackCfg:index 3 1
   859 read *tmp327 :unpackCfg:cfg *tmp326
   860 op sub :unpackCfg:cu *tmp327 35
-    * set *tmp329 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  861 set *tmp329 4
+  862 op add :unpackCfg:index 4 1
   863 read *tmp330 :unpackCfg:cfg *tmp329
   864 op sub :unpackCfg:pb *tmp330 35
-    * set *tmp332 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  865 set *tmp332 5
+  866 op add :unpackCfg:index 5 1
   867 read *tmp333 :unpackCfg:cfg *tmp332
   868 op sub :unpackCfg:gr *tmp333 35
-    * set *tmp335 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  869 set *tmp335 6
+  870 op add :unpackCfg:index 6 1
   871 read *tmp336 :unpackCfg:cfg *tmp335
   872 op sub :unpackCfg:si *tmp336 35
-    * set *tmp338 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  873 set *tmp338 7
+  874 op add :unpackCfg:index 7 1
   875 read *tmp339 :unpackCfg:cfg *tmp338
   876 op sub :unpackCfg:ti *tmp339 35
-    * set *tmp341 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  877 set *tmp341 8
+  878 op add :unpackCfg:index 8 1
   879 read *tmp342 :unpackCfg:cfg *tmp341
   880 op sub :unpackCfg:mg *tmp342 35
-    * set *tmp344 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  881 set *tmp344 9
+  882 op add :unpackCfg:index 9 1
   883 read *tmp345 :unpackCfg:cfg *tmp344
   884 op sub :unpackCfg:th *tmp345 35
-    * set *tmp347 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  885 set *tmp347 10
+  886 op add :unpackCfg:index 10 1
   887 read *tmp348 :unpackCfg:cfg *tmp347
   888 op sub :unpackCfg:rotation *tmp348 35
-    * op add :unpackCfg:index :unpackCfg:index 1
-    * set *tmp353 :unpackCfg:index
-    * op add :unpackCfg:index :unpackCfg:index 1
+  889 op add :unpackCfg:index 11 1
+  890 set *tmp353 12
+  891 op add :unpackCfg:index 12 1
   892 read *tmp354 :unpackCfg:cfg *tmp353
   893 op sub :unpackCfg:ind *tmp354 35
   894 label *label238
 
  1024 label *label280
  1025 set :supplyBase0:titaniumTrigger *tmp390
  1026 sensor *tmp394 .titaniumDrill @titanium
-    * jump *label281 greaterThanEq *tmp394 :supplyBase0:titaniumTrigger
+ 1027 jump *label281 greaterThanEq *tmp394 *tmp390
  1028 jump *label283 notEqual :supplyBase0:supplied false
  1029 sensor *tmp399 .battery @totalPower
  1030 op mul *tmp400 .unloader1 .powerTarget
 
  1054 set *tmp409 @sand
  1055 label *label293
  1056 set :supplyBase0:ore *tmp409
-    * set :mineOre.1:ore :supplyBase0:ore
+ 1057 set :mineOre.1:ore *tmp409
  1058 setaddr :mineOre.1*retaddr *label294 (h:*label294)
  1059 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
  1060 label *label294
 
  1109 set *tmp422 @sand
  1110 label *label309
  1111 set :supplyBase0:ore.1 *tmp422
-    * set :mineOre.1:ore :supplyBase0:ore.1
+ 1112 set :mineOre.1:ore *tmp422
  1113 setaddr :mineOre.1*retaddr *label310 (h:*label310)
  1114 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
  1115 label *label310
 
  1197 op add *tmp429 :meetTarget:metaglass .metaglassSurplus
  1198 write *tmp429 .controller ".kilnTarget"
  1199 op add *tmp430 :meetTarget:lead .leadSurplus
-    * write *tmp430 .controller ".leadReserve"
+ 1200 write *tmp425 .controller ".leadReserve"
  1201 op sign *tmp431 :meetTarget:silicon
  1202 op mul *tmp432 *tmp431 20
  1203 op add *tmp433 :meetTarget:silicon *tmp432
 
  1207 op add *tmp436 :meetTarget:graphite *tmp435
  1208 write *tmp436 .controller ".graphiteReserve"
  1209 write .targetLead processor8 ".monoLeadTarget"
-    * write .targetCopper processor8 ".monoCopperTarget"
+ 1210 write :meetTarget:copper processor8 ".monoCopperTarget"
  1211 label *label324
  1212 sensor *tmp438 .core @copper
  1213 jump *label328 greaterThanEq *tmp438 .targetCopper
 
  1253 label *label341
  1254 set *tmp437 true
  1255 jump *label327 always
-    * set *tmp437 null
  1256 label *label327
  1257 jump *label326 notEqual *tmp437 false
  1258 setaddr :supplyBase*retaddr *label342 (h:*label342)
 
  1290 jump *label345 equal *tmp466 false
  1291 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1292 jump *label343 always
-    * set :buildBlock*retval null
  1293 label *label343
  1294 return :buildBlock*retaddr
  1295 end
 
  1310 set :buildRemoteBlock:th :unpackCfg:th
  1311 set :buildRemoteBlock:rotation :unpackCfg:rotation
  1312 set :buildRemoteBlock:index :unpackCfg:ind
-    * set :buildBlock:block :buildRemoteBlock:type
+ 1313 set :buildBlock:block :unpackCfg:type
  1314 set :buildBlock:x :buildRemoteBlock:x
  1315 set :buildBlock:y :buildRemoteBlock:y
-    * set :buildBlock:copper :buildRemoteBlock:cu
-    * set :buildBlock:lead :buildRemoteBlock:pb
-    * set :buildBlock:graphite :buildRemoteBlock:gr
-    * set :buildBlock:silicon :buildRemoteBlock:si
-    * set :buildBlock:titanium :buildRemoteBlock:ti
-    * set :buildBlock:metaglass :buildRemoteBlock:mg
-    * set :buildBlock:thorium :buildRemoteBlock:th
-    * set :buildBlock:rotation :buildRemoteBlock:rotation
+ 1316 set :buildBlock:copper :unpackCfg:cu
+ 1317 set :buildBlock:lead :unpackCfg:pb
+ 1318 set :buildBlock:graphite :unpackCfg:gr
+ 1319 set :buildBlock:silicon :unpackCfg:si
+ 1320 set :buildBlock:titanium :unpackCfg:ti
+ 1321 set :buildBlock:metaglass :unpackCfg:mg
+ 1322 set :buildBlock:thorium :unpackCfg:th
+ 1323 set :buildBlock:rotation :unpackCfg:rotation
  1324 set :buildBlock:config null
-    * set :buildBlock:index :buildRemoteBlock:index
+ 1325 set :buildBlock:index :unpackCfg:ind
  1326 setaddr :buildBlock*retaddr *label350 (h:*label350)
  1327 call *label34 *invalid :buildBlock*retval (m:*label350) (h:*label350)
  1328 label *label350
 
  1332 label *label348
  1333 set :buildRemoteBlock*retval false
  1334 jump *label346 always
-    * set :buildRemoteBlock*retval null
  1335 label *label346
  1336 return :buildRemoteBlock*retaddr
  1337 end
 
  1352 set :buildBlockFromCfg:th :unpackCfg:th
  1353 set :buildBlockFromCfg:rotation :unpackCfg:rotation
  1354 set :buildBlockFromCfg:index :unpackCfg:ind
-    * op add *tmp471 .coreX :buildBlockFromCfg:x
-    * op add *tmp472 .coreY :buildBlockFromCfg:y
-    * set :buildBlock:block :buildBlockFromCfg:type
+ 1355 op add *tmp471 .coreX :unpackCfg:x
+ 1356 op add *tmp472 .coreY :unpackCfg:y
+ 1357 set :buildBlock:block :unpackCfg:type
  1358 set :buildBlock:x *tmp471
  1359 set :buildBlock:y *tmp472
-    * set :buildBlock:copper :buildBlockFromCfg:cu
-    * set :buildBlock:lead :buildBlockFromCfg:pb
-    * set :buildBlock:graphite :buildBlockFromCfg:gr
-    * set :buildBlock:silicon :buildBlockFromCfg:si
-    * set :buildBlock:titanium :buildBlockFromCfg:ti
-    * set :buildBlock:metaglass :buildBlockFromCfg:mg
-    * set :buildBlock:thorium :buildBlockFromCfg:th
-    * set :buildBlock:rotation :buildBlockFromCfg:rotation
+ 1360 set :buildBlock:copper :unpackCfg:cu
+ 1361 set :buildBlock:lead :unpackCfg:pb
+ 1362 set :buildBlock:graphite :unpackCfg:gr
+ 1363 set :buildBlock:silicon :unpackCfg:si
+ 1364 set :buildBlock:titanium :unpackCfg:ti
+ 1365 set :buildBlock:metaglass :unpackCfg:mg
+ 1366 set :buildBlock:thorium :unpackCfg:th
+ 1367 set :buildBlock:rotation :unpackCfg:rotation
  1368 set :buildBlock:config :buildBlockFromCfg:config
-    * set :buildBlock:index :buildBlockFromCfg:index
+ 1369 set :buildBlock:index :unpackCfg:ind
  1370 setaddr :buildBlock*retaddr *label353 (h:*label353)
  1371 call *label34 *invalid :buildBlock*retval (m:*label353) (h:*label353)
  1372 label *label353
  1373 set :buildBlockFromCfg*retval :buildBlock*retval
  1374 jump *label351 always
-    * set :buildBlockFromCfg*retval null
  1375 label *label351
  1376 return :buildBlockFromCfg*retaddr
  1377 end
 
  1398 set :meetTarget.1:ti :unpackCfg:ti
  1399 set :meetTarget.1:mg :unpackCfg:mg
  1400 set :meetTarget.1:th :unpackCfg:th
-    * set :meetTarget:block :meetTarget.1:type
-    * set :meetTarget:copper :meetTarget.1:cu
-    * set :meetTarget:lead :meetTarget.1:pb
-    * set :meetTarget:graphite :meetTarget.1:gr
-    * set :meetTarget:silicon :meetTarget.1:si
-    * set :meetTarget:titanium :meetTarget.1:ti
-    * set :meetTarget:metaglass :meetTarget.1:mg
-    * set :meetTarget:thorium :meetTarget.1:th
+ 1401 set :meetTarget:block :unpackCfg:type
+ 1402 set :meetTarget:copper :unpackCfg:cu
+ 1403 set :meetTarget:lead :unpackCfg:pb
+ 1404 set :meetTarget:graphite :unpackCfg:gr
+ 1405 set :meetTarget:silicon :unpackCfg:si
+ 1406 set :meetTarget:titanium :unpackCfg:ti
+ 1407 set :meetTarget:metaglass :unpackCfg:mg
+ 1408 set :meetTarget:thorium :unpackCfg:th
  1409 setaddr :meetTarget*retaddr *label358 (h:*label358)
  1410 call *label33 *invalid :meetTarget*retval (m:*label358) (h:*label358)
  1411 label *label358

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-64 instructions):
     0 set .ERROR ""
     1 set .display processor1
-    * set .polyController processor3
     2 set .blockBuilder processor5
-    * set .oreLocator processor4
     3 set .press null
     4 set .generator null
     5 set .battery null
 
    49 setaddr :buildBlockFromCfg.1*retaddr *label50 (h:*label50)
    50 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label50) (h:*label50)
    51 label *label50
-    * set :buildFirstTitaniumDrill:cfg "w**5#-#####%)"
    52 set :meetTarget.1:cfg "w**5#-#####%)"
    53 setaddr :meetTarget.1*retaddr *label52 (h:*label52)
    54 call *label38 *invalid :meetTarget.1*retval (m:*label52) (h:*label52)
 
   133 setaddr :buildBlockFromCfg.1*retaddr *label64 (h:*label64)
   134 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label64) (h:*label64)
   135 label *label64
-    * set :factory :buildBlockFromCfg.1*retval
   136 write :buildBlockFromCfg.1*retval .controller ".factory"
   137 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
-    * set :setFlareTarget:target 1
   138 write 1 .controller ".flareTarget"
   139 write 1 processor1 ".flareTarget"
   140 label *label65
-    * set :setMonoTarget:target 3
   141 write 3 .controller ".monoTarget"
   142 write 3 processor1 ".monoTarget"
   143 label *label66
 
   175 setaddr :buildBlockFromCfg.1*retaddr *label76 (h:*label76)
   176 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label76) (h:*label76)
   177 label *label76
-    * set .kiln :buildBlockFromCfg.1*retval
   178 write :buildBlockFromCfg.1*retval .controller ".kiln"
   179 set :buildBlockFromCfg.1:cfg "z%-AAA##A##%4"
   180 setaddr :buildBlockFromCfg.1*retaddr *label77 (h:*label77)
 
   217 setaddr :buildBlockFromCfg.1*retaddr *label85 (h:*label85)
   218 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label85) (h:*label85)
   219 label *label85
-    * set :reconstructor :buildBlockFromCfg.1*retval
   220 write :buildBlockFromCfg.1*retval .controller ".reconstructor"
   221 write :buildBlockFromCfg.1*retval processor1 ".reconstructor"
   222 set :buildBlockFromCfg.1:cfg "l/,#U#A7###&>"
 
   228 label *label87
   229 set .siliconSurplus 1000
   230 set .metaglassSurplus 200
-    * set :setPolyTarget:target 6
   231 write 6 .controller ".polyTarget"
   232 write 6 processor1 ".polyTarget"
   233 label *label88
 
   261 label *label95
   262 jump *label94 always
   263 label *label96
-    * set :setFlareTarget.1:target 3
   264 write 3 .controller ".flareTarget"
   265 write 3 processor1 ".flareTarget"
   266 label *label98
 
   274 jump *label99 always
   275 label *label101
   276 set .graphiteSurplus 100
-    * set :setMonoTarget.1:target 5
   277 write 5 .controller ".monoTarget"
   278 write 5 processor1 ".monoTarget"
   279 label *label103
 
   350 setaddr :buildRemoteBlock*retaddr *label114 (h:*label114)
   351 call *label35 *invalid :buildRemoteBlock*retval (m:*label114) (h:*label114)
   352 label *label114
-    * set :buildRemoteBlock:cfg "z%-AAA##A##%4"
   353 read :buildRemoteBlock:x processor4 ".water2X"
   354 read :buildRemoteBlock:y processor4 ".water2Y"
   355 setaddr :buildRemoteBlock*retaddr *label115 (h:*label115)
 
   407 jump *label124 equal *tmp228 false
   408 label *label106
   409 write null processor1 ".nextBlock"
-    * set :setMegaTarget:target 1
   410 write 1 .controller ".megaTarget"
   411 write 1 processor1 ".megaTarget"
   412 label *label125
 
   433 setaddr :buildBlockFromCfg.1*retaddr *label133 (h:*label133)
   434 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label133) (h:*label133)
   435 label *label133
-    * set :buildMultiplicativeReconstructor:multiReconstructor :buildBlockFromCfg.1*retval
   436 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   437 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
   438 label *label132
 
   824 return :supplyBlockFromCore*retaddr
   825 end
   826 label *label31
-    * set :unpackCfg:index 0
   827 set *tmp314 0
-    * op add :unpackCfg:index 0 1
-    * read *tmp315 :unpackCfg:cfg *tmp314
+  828 read *tmp315 :unpackCfg:cfg 0
   829 op sub *tmp316 *tmp315 35
   830 lookup block :unpackCfg:type *tmp316
   831 set *tmp318 1
-    * op add :unpackCfg:index 1 1
-    * read *tmp319 :unpackCfg:cfg *tmp318
-    * op sub *tmp320 *tmp319 35
+  832 read *tmp319 :unpackCfg:cfg 1
   833 op sub :unpackCfg:x *tmp319 42
   834 set *tmp322 2
-    * op add :unpackCfg:index 2 1
-    * read *tmp323 :unpackCfg:cfg *tmp322
-    * op sub *tmp324 *tmp323 35
+  835 read *tmp323 :unpackCfg:cfg 2
   836 op sub :unpackCfg:y *tmp323 42
   837 set *tmp326 3
-    * op add :unpackCfg:index 3 1
-    * read *tmp327 :unpackCfg:cfg *tmp326
+  838 read *tmp327 :unpackCfg:cfg 3
   839 op sub :unpackCfg:cu *tmp327 35
   840 set *tmp329 4
-    * op add :unpackCfg:index 4 1
-    * read *tmp330 :unpackCfg:cfg *tmp329
+  841 read *tmp330 :unpackCfg:cfg 4
   842 op sub :unpackCfg:pb *tmp330 35
   843 set *tmp332 5
-    * op add :unpackCfg:index 5 1
-    * read *tmp333 :unpackCfg:cfg *tmp332
+  844 read *tmp333 :unpackCfg:cfg 5
   845 op sub :unpackCfg:gr *tmp333 35
   846 set *tmp335 6
-    * op add :unpackCfg:index 6 1
-    * read *tmp336 :unpackCfg:cfg *tmp335
+  847 read *tmp336 :unpackCfg:cfg 6
   848 op sub :unpackCfg:si *tmp336 35
   849 set *tmp338 7
-    * op add :unpackCfg:index 7 1
-    * read *tmp339 :unpackCfg:cfg *tmp338
+  850 read *tmp339 :unpackCfg:cfg 7
   851 op sub :unpackCfg:ti *tmp339 35
   852 set *tmp341 8
-    * op add :unpackCfg:index 8 1
-    * read *tmp342 :unpackCfg:cfg *tmp341
+  853 read *tmp342 :unpackCfg:cfg 8
   854 op sub :unpackCfg:mg *tmp342 35
   855 set *tmp344 9
-    * op add :unpackCfg:index 9 1
-    * read *tmp345 :unpackCfg:cfg *tmp344
+  856 read *tmp345 :unpackCfg:cfg 9
   857 op sub :unpackCfg:th *tmp345 35
   858 set *tmp347 10
-    * op add :unpackCfg:index 10 1
-    * read *tmp348 :unpackCfg:cfg *tmp347
+  859 read *tmp348 :unpackCfg:cfg 10
   860 op sub :unpackCfg:rotation *tmp348 35
-    * op add :unpackCfg:index 11 1
   861 set *tmp353 12
-    * op add :unpackCfg:index 12 1
-    * read *tmp354 :unpackCfg:cfg *tmp353
+  862 read *tmp354 :unpackCfg:cfg 12
   863 op sub :unpackCfg:ind *tmp354 35
   864 label *label238
   865 return :unpackCfg*retaddr
 
   992 label *label279
   993 set *tmp390 100
   994 label *label280
-    * set :supplyBase0:titaniumTrigger *tmp390
   995 sensor *tmp394 .titaniumDrill @titanium
   996 jump *label281 greaterThanEq *tmp394 *tmp390
   997 jump *label283 notEqual :supplyBase0:supplied false
 
  1022 label *label292
  1023 set *tmp409 @sand
  1024 label *label293
-    * set :supplyBase0:ore *tmp409
  1025 set :mineOre.1:ore *tmp409
  1026 setaddr :mineOre.1*retaddr *label294 (h:*label294)
  1027 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
 
  1076 label *label308
  1077 set *tmp422 @sand
  1078 label *label309
-    * set :supplyBase0:ore.1 *tmp422
  1079 set :mineOre.1:ore *tmp422
  1080 setaddr :mineOre.1*retaddr *label310 (h:*label310)
  1081 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
 
  1163 write *tmp428 .controller ".smelterTarget"
  1164 op add *tmp429 :meetTarget:metaglass .metaglassSurplus
  1165 write *tmp429 .controller ".kilnTarget"
-    * op add *tmp430 :meetTarget:lead .leadSurplus
  1166 write *tmp425 .controller ".leadReserve"
  1167 op sign *tmp431 :meetTarget:silicon
  1168 op mul *tmp432 *tmp431 20
 
  1266 setaddr :unpackCfg*retaddr *label349 (h:*label349)
  1267 call *label31 *invalid :unpackCfg*retval (m:*label349) (h:*label349)
  1268 label *label349
-    * set :buildRemoteBlock:type :unpackCfg:type
-    * set :buildRemoteBlock:cu :unpackCfg:cu
-    * set :buildRemoteBlock:pb :unpackCfg:pb
-    * set :buildRemoteBlock:gr :unpackCfg:gr
-    * set :buildRemoteBlock:si :unpackCfg:si
-    * set :buildRemoteBlock:ti :unpackCfg:ti
-    * set :buildRemoteBlock:mg :unpackCfg:mg
-    * set :buildRemoteBlock:th :unpackCfg:th
-    * set :buildRemoteBlock:rotation :unpackCfg:rotation
-    * set :buildRemoteBlock:index :unpackCfg:ind
  1269 set :buildBlock:block :unpackCfg:type
  1270 set :buildBlock:x :buildRemoteBlock:x
  1271 set :buildBlock:y :buildRemoteBlock:y
 
  1296 setaddr :unpackCfg*retaddr *label352 (h:*label352)
  1297 call *label31 *invalid :unpackCfg*retval (m:*label352) (h:*label352)
  1298 label *label352
-    * set :buildBlockFromCfg:type :unpackCfg:type
-    * set :buildBlockFromCfg:x :unpackCfg:x
-    * set :buildBlockFromCfg:y :unpackCfg:y
-    * set :buildBlockFromCfg:cu :unpackCfg:cu
-    * set :buildBlockFromCfg:pb :unpackCfg:pb
-    * set :buildBlockFromCfg:gr :unpackCfg:gr
-    * set :buildBlockFromCfg:si :unpackCfg:si
-    * set :buildBlockFromCfg:ti :unpackCfg:ti
-    * set :buildBlockFromCfg:mg :unpackCfg:mg
-    * set :buildBlockFromCfg:th :unpackCfg:th
-    * set :buildBlockFromCfg:rotation :unpackCfg:rotation
-    * set :buildBlockFromCfg:index :unpackCfg:ind
  1299 op add *tmp471 .coreX :unpackCfg:x
  1300 op add *tmp472 .coreY :unpackCfg:y
  1301 set :buildBlock:block :unpackCfg:type
 
  1334 setaddr :unpackCfg*retaddr *label357 (h:*label357)
  1335 call *label31 *invalid :unpackCfg*retval (m:*label357) (h:*label357)
  1336 label *label357
-    * set :meetTarget.1:type :unpackCfg:type
-    * set :meetTarget.1:cu :unpackCfg:cu
-    * set :meetTarget.1:pb :unpackCfg:pb
-    * set :meetTarget.1:gr :unpackCfg:gr
-    * set :meetTarget.1:si :unpackCfg:si
-    * set :meetTarget.1:ti :unpackCfg:ti
-    * set :meetTarget.1:mg :unpackCfg:mg
-    * set :meetTarget.1:th :unpackCfg:th
  1337 set :meetTarget:block :unpackCfg:type
  1338 set :meetTarget:copper :unpackCfg:cu
  1339 set :meetTarget:lead :unpackCfg:pb

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-12 instructions):
 
   824 return :supplyBlockFromCore*retaddr
   825 end
   826 label *label31
-    * set *tmp314 0
   827 read *tmp315 :unpackCfg:cfg 0
   828 op sub *tmp316 *tmp315 35
   829 lookup block :unpackCfg:type *tmp316
-    * set *tmp318 1
   830 read *tmp319 :unpackCfg:cfg 1
   831 op sub :unpackCfg:x *tmp319 42
-    * set *tmp322 2
   832 read *tmp323 :unpackCfg:cfg 2
   833 op sub :unpackCfg:y *tmp323 42
-    * set *tmp326 3
   834 read *tmp327 :unpackCfg:cfg 3
   835 op sub :unpackCfg:cu *tmp327 35
-    * set *tmp329 4
   836 read *tmp330 :unpackCfg:cfg 4
   837 op sub :unpackCfg:pb *tmp330 35
-    * set *tmp332 5
   838 read *tmp333 :unpackCfg:cfg 5
   839 op sub :unpackCfg:gr *tmp333 35
-    * set *tmp335 6
   840 read *tmp336 :unpackCfg:cfg 6
   841 op sub :unpackCfg:si *tmp336 35
-    * set *tmp338 7
   842 read *tmp339 :unpackCfg:cfg 7
   843 op sub :unpackCfg:ti *tmp339 35
-    * set *tmp341 8
   844 read *tmp342 :unpackCfg:cfg 8
   845 op sub :unpackCfg:mg *tmp342 35
-    * set *tmp344 9
   846 read *tmp345 :unpackCfg:cfg 9
   847 op sub :unpackCfg:th *tmp345 35
-    * set *tmp347 10
   848 read *tmp348 :unpackCfg:cfg 10
   849 op sub :unpackCfg:rotation *tmp348 35
-    * set *tmp353 12
   850 read *tmp354 :unpackCfg:cfg 12
   851 op sub :unpackCfg:ind *tmp354 35
   852 label *label238

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
   530 setaddr :status3*retaddr *label157 (h:*label157)
   531 call *label11 *invalid :status3*retval (m:*label157) (h:*label157)
   532 label *label157
+  533 op sub *tmp244 :moveTo:radius 0.5
   534 label *label158
   535 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
   536 jump *label160 notEqual *tmp242 false
-    * op sub *tmp244 :moveTo:radius 0.5
   537 ucontrol approach :moveTo:x :moveTo:y *tmp244
   538 label *label159
   539 jump *label158 always

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   971 label *label274
   972 label *label255
   973 label *label256
+  974 set *tmp390 100
   975 sensor *tmp388 .core @titanium
-    * jump *label279 greaterThanEq *tmp388 .targetTitanium
+  976 jump *label280 greaterThanEq *tmp388 .targetTitanium
   977 sensor *tmp391 .core @titanium
   978 op sub *tmp392 .targetTitanium *tmp391
   979 op min *tmp390 7 *tmp392
   980 jump *label280 always
-    * label *label279
-    * set *tmp390 100
   981 label *label280
   982 sensor *tmp394 .titaniumDrill @titanium
   983 jump *label281 greaterThanEq *tmp394 *tmp390
 
  1003 label *label291
  1004 sensor :supplyBase0:coal .core @coal
  1005 sensor :supplyBase0:sand .core @sand
-    * jump *label292 greaterThanEq :supplyBase0:coal :supplyBase0:sand
-    * set *tmp409 @coal
+ 1006 set :mineOre.1:ore @sand
+ 1007 jump *label293 greaterThanEq :supplyBase0:coal :supplyBase0:sand
+ 1008 set :mineOre.1:ore @coal
  1009 jump *label293 always
-    * label *label292
-    * set *tmp409 @sand
  1010 label *label293
-    * set :mineOre.1:ore *tmp409
  1011 setaddr :mineOre.1*retaddr *label294 (h:*label294)
  1012 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
  1013 label *label294
 
  1055 label *label307
  1056 sensor :supplyBase0:coal.1 .core @coal
  1057 sensor :supplyBase0:sand.1 .core @sand
-    * jump *label308 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
-    * set *tmp422 @coal
+ 1058 set :mineOre.1:ore @sand
+ 1059 jump *label309 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
+ 1060 set :mineOre.1:ore @coal
  1061 jump *label309 always
-    * label *label308
-    * set *tmp422 @sand
  1062 label *label309
-    * set :mineOre.1:ore *tmp422
  1063 setaddr :mineOre.1*retaddr *label310 (h:*label310)
  1064 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
  1065 label *label310

Modifications by Unroll iteration loop at CoreBuilder.mnd:241:5 (-2 instructions):
 
  1090 end
  1091 label *label33
  1092 set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
-    * setaddr *tmp423 *label317
-    * jump *label314 always
-    * multilabel *label317 (m:marker0)
-    * set :meetTarget:t :meetTarget:lead
-    * setaddr *tmp423 *label318
-    * jump *label314 always
-    * multilabel *label318 (m:marker0)
-    * set :meetTarget:t :meetTarget:graphite
-    * setaddr *tmp423 *label319
-    * jump *label314 always
-    * multilabel *label319 (m:marker0)
-    * set :meetTarget:t :meetTarget:silicon
-    * setaddr *tmp423 *label320
-    * jump *label314 always
-    * multilabel *label320 (m:marker0)
-    * set :meetTarget:t :meetTarget:titanium
-    * setaddr *tmp423 *label321
-    * jump *label314 always
-    * multilabel *label321 (m:marker0)
-    * set :meetTarget:t :meetTarget:metaglass
-    * setaddr *tmp423 *label322
-    * jump *label314 always
-    * multilabel *label322 (m:marker0)
-    * set :meetTarget:t :meetTarget:thorium
-    * setaddr *tmp423 *label323
-    * label *label314
-    * op sign *tmp424 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label315
-    * multijump *tmp423 0 0 (m:marker0)
-    * multilabel *label323 (m:marker0)
-    * label *label316
+ 1093 set :meetTarget:t :meetTarget:copper
+ 1094 label *label374
+ 1095 op sign *tmp424 :meetTarget:t
+ 1096 op add :meetTarget:count :meetTarget:count *tmp424
+ 1097 label *label375
+ 1098 set :meetTarget:t :meetTarget:lead
+ 1099 label *label378
+ 1100 op sign *tmp424 :meetTarget:t
+ 1101 op add :meetTarget:count :meetTarget:count *tmp424
+ 1102 label *label379
+ 1103 set :meetTarget:t :meetTarget:graphite
+ 1104 label *label382
+ 1105 op sign *tmp424 :meetTarget:t
+ 1106 op add :meetTarget:count :meetTarget:count *tmp424
+ 1107 label *label383
+ 1108 set :meetTarget:t :meetTarget:silicon
+ 1109 label *label386
+ 1110 op sign *tmp424 :meetTarget:t
+ 1111 op add :meetTarget:count :meetTarget:count *tmp424
+ 1112 label *label387
+ 1113 set :meetTarget:t :meetTarget:titanium
+ 1114 label *label390
+ 1115 op sign *tmp424 :meetTarget:t
+ 1116 op add :meetTarget:count :meetTarget:count *tmp424
+ 1117 label *label391
+ 1118 set :meetTarget:t :meetTarget:metaglass
+ 1119 label *label394
+ 1120 op sign *tmp424 :meetTarget:t
+ 1121 op add :meetTarget:count :meetTarget:count *tmp424
+ 1122 label *label395
+ 1123 set :meetTarget:t :meetTarget:thorium
+ 1124 label *label398
+ 1125 op sign *tmp424 :meetTarget:t
+ 1126 op add :meetTarget:count :meetTarget:count *tmp424
+ 1127 label *label399
+ 1128 label *label316
  1129 write :meetTarget:count .display ".totalTargets"
  1130 write :meetTarget:block .display ".nextBlock"
  1131 write :meetTarget:copper .display ".targetCopper"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1092 set :meetTarget:count 0
  1093 set :meetTarget:t :meetTarget:copper
  1094 label *label374
-    * op sign *tmp424 :meetTarget:t
-    * op add :meetTarget:count :meetTarget:count *tmp424
+ 1095 op sign *tmp424 :meetTarget:copper
+ 1096 op add :meetTarget:count 0 *tmp424
  1097 label *label375
  1098 set :meetTarget:t :meetTarget:lead
  1099 label *label378
-    * op sign *tmp424 :meetTarget:t
+ 1100 op sign *tmp424 :meetTarget:lead
  1101 op add :meetTarget:count :meetTarget:count *tmp424
  1102 label *label379
  1103 set :meetTarget:t :meetTarget:graphite
  1104 label *label382
-    * op sign *tmp424 :meetTarget:t
+ 1105 op sign *tmp424 :meetTarget:graphite
  1106 op add :meetTarget:count :meetTarget:count *tmp424
  1107 label *label383
  1108 set :meetTarget:t :meetTarget:silicon
  1109 label *label386
-    * op sign *tmp424 :meetTarget:t
+ 1110 op sign *tmp424 :meetTarget:silicon
  1111 op add :meetTarget:count :meetTarget:count *tmp424
  1112 label *label387
  1113 set :meetTarget:t :meetTarget:titanium
  1114 label *label390
-    * op sign *tmp424 :meetTarget:t
+ 1115 op sign *tmp424 :meetTarget:titanium
  1116 op add :meetTarget:count :meetTarget:count *tmp424
  1117 label *label391
  1118 set :meetTarget:t :meetTarget:metaglass
  1119 label *label394
-    * op sign *tmp424 :meetTarget:t
+ 1120 op sign *tmp424 :meetTarget:metaglass
  1121 op add :meetTarget:count :meetTarget:count *tmp424
  1122 label *label395
  1123 set :meetTarget:t :meetTarget:thorium
  1124 label *label398
-    * op sign *tmp424 :meetTarget:t
+ 1125 op sign *tmp424 :meetTarget:thorium
  1126 op add :meetTarget:count :meetTarget:count *tmp424
  1127 label *label399
  1128 label *label316

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
  1089 return :supplyBase*retaddr
  1090 end
  1091 label *label33
-    * set :meetTarget:count 0
-    * set :meetTarget:t :meetTarget:copper
  1092 label *label374
  1093 op sign *tmp424 :meetTarget:copper
  1094 op add :meetTarget:count 0 *tmp424
  1095 label *label375
-    * set :meetTarget:t :meetTarget:lead
  1096 label *label378
  1097 op sign *tmp424 :meetTarget:lead
  1098 op add :meetTarget:count :meetTarget:count *tmp424
  1099 label *label379
-    * set :meetTarget:t :meetTarget:graphite
  1100 label *label382
  1101 op sign *tmp424 :meetTarget:graphite
  1102 op add :meetTarget:count :meetTarget:count *tmp424
  1103 label *label383
-    * set :meetTarget:t :meetTarget:silicon
  1104 label *label386
  1105 op sign *tmp424 :meetTarget:silicon
  1106 op add :meetTarget:count :meetTarget:count *tmp424
  1107 label *label387
-    * set :meetTarget:t :meetTarget:titanium
  1108 label *label390
  1109 op sign *tmp424 :meetTarget:titanium
  1110 op add :meetTarget:count :meetTarget:count *tmp424
  1111 label *label391
-    * set :meetTarget:t :meetTarget:metaglass
  1112 label *label394
  1113 op sign *tmp424 :meetTarget:metaglass
  1114 op add :meetTarget:count :meetTarget:count *tmp424
  1115 label *label395
-    * set :meetTarget:t :meetTarget:thorium
  1116 label *label398
  1117 op sign *tmp424 :meetTarget:thorium
  1118 op add :meetTarget:count :meetTarget:count *tmp424

Modifications by Inline function 'status1' defined at Actions.mnd:7:1 (-16 instructions):
 
   496 label *label146
   497 label *label139
   498 end
-    * label *label9
-    * write :status1:text .display ".status1"
-    * label *label151
-    * return :status1*retaddr
-    * end
   499 label *label10
   500 write :status2:text .display ".status2"
   501 write :status2:item .display ".item2"
 
   854 write *tmp358 processor8 ".monoSandTarget"
   855 jump *label240 equal .thoriumContainer false
   856 set :status1:text "Phase 2: servicing thorium drill"
-    * setaddr :status1*retaddr *label243 (h:*label243)
-    * call *label9 *invalid :status1*retval (m:*label243) (h:*label243)
-    * label *label243
+  857 label *label403
+  858 write :status1:text .display ".status1"
+  859 label *label404
   860 sensor *tmp360 .core @coal
   861 jump *label244 greaterThanEq *tmp360 50
   862 set :supplyBlock:block .thoriumGenerator
 
   883 read *tmp101 .controller ".monos"
   884 jump *label249 lessThanEq *tmp101 3
   885 set :status1:text "Phase 1: supplying base"
-    * setaddr :status1*retaddr *label252 (h:*label252)
-    * call *label9 *invalid :status1*retval (m:*label252) (h:*label252)
-    * label *label252
+  886 label *label405
+  887 write :status1:text .display ".status1"
+  888 label *label406
   889 set :mineOre.1:ore @coal
   890 setaddr :mineOre.1*retaddr *label253 (h:*label253)
   891 call *label22 *invalid :mineOre.1*retval (m:*label253) (h:*label253)
 
   900 sensor *tmp370 .press @coal
   901 jump *label259 greaterThanEq *tmp370 5
   902 set :status1:text "Goal 1: graphite requirement"
-    * setaddr :status1*retaddr *label261 (h:*label261)
-    * call *label9 *invalid :status1*retval (m:*label261) (h:*label261)
-    * label *label261
+  903 label *label407
+  904 write :status1:text .display ".status1"
+  905 label *label408
   906 set :supplyBlock:block .press
   907 set :supplyBlock:ore @coal
   908 setaddr :supplyBlock*retaddr *label262 (h:*label262)
 
   918 sensor *tmp376 .smelter @coal
   919 jump *label265 greaterThanEq *tmp376 5
   920 set :status1:text "Goal 2: coal for silicon requirement"
-    * setaddr :status1*retaddr *label267 (h:*label267)
-    * call *label9 *invalid :status1*retval (m:*label267) (h:*label267)
-    * label *label267
+  921 label *label409
+  922 write :status1:text .display ".status1"
+  923 label *label410
   924 set :supplyBlock:block .smelter
   925 set :supplyBlock:ore @coal
   926 setaddr :supplyBlock*retaddr *label268 (h:*label268)
 
   932 sensor *tmp379 .smelter @sand
   933 jump *label269 greaterThanEq *tmp379 5
   934 set :status1:text "Goal 3: sand for silicon requirement"
-    * setaddr :status1*retaddr *label271 (h:*label271)
-    * call *label9 *invalid :status1*retval (m:*label271) (h:*label271)
-    * label *label271
+  935 label *label411
+  936 write :status1:text .display ".status1"
+  937 label *label412
   938 set :supplyBlock:block .smelter
   939 set :supplyBlock:ore @sand
   940 setaddr :supplyBlock*retaddr *label272 (h:*label272)
 
   951 sensor *tmp385 .generator @coal
   952 jump *label275 greaterThanEq *tmp385 2
   953 set :status1:text "Goal 4: supplying generator"
-    * setaddr :status1*retaddr *label277 (h:*label277)
-    * call *label9 *invalid :status1*retval (m:*label277) (h:*label277)
-    * label *label277
+  954 label *label413
+  955 write :status1:text .display ".status1"
+  956 label *label414
   957 set :supplyBlock:block .generator
   958 set :supplyBlock:ore @coal
   959 setaddr :supplyBlock*retaddr *label278 (h:*label278)
 
   981 op mul *tmp400 .unloader1 .powerTarget
   982 jump *label285 greaterThanEq *tmp399 *tmp400
   983 set :status1:text "Goal 5: supplying generator"
-    * setaddr :status1*retaddr *label287 (h:*label287)
-    * call *label9 *invalid :status1*retval (m:*label287) (h:*label287)
-    * label *label287
+  984 label *label415
+  985 write :status1:text .display ".status1"
+  986 label *label416
   987 set :mineOre.1:ore @coal
   988 setaddr :mineOre.1*retaddr *label288 (h:*label288)
   989 call *label22 *invalid :mineOre.1*retval (m:*label288) (h:*label288)
 
   993 sensor *tmp403 .core @silicon
   994 jump *label289 greaterThanEq *tmp403 .targetSilicon
   995 set :status1:text "Goal 6: silicon requirement"
-    * setaddr :status1*retaddr *label291 (h:*label291)
-    * call *label9 *invalid :status1*retval (m:*label291) (h:*label291)
-    * label *label291
+  996 label *label417
+  997 write :status1:text .display ".status1"
+  998 label *label418
   999 sensor :supplyBase0:coal .core @coal
  1000 sensor :supplyBase0:sand .core @sand
  1001 set :mineOre.1:ore @sand
 
  1011 sensor *tmp410 .core @copper
  1012 jump *label295 greaterThanEq *tmp410 .targetCopper
  1013 set :status1:text "Goal 7: copper requirement"
-    * setaddr :status1*retaddr *label297 (h:*label297)
-    * call *label9 *invalid :status1*retval (m:*label297) (h:*label297)
-    * label *label297
+ 1014 label *label419
+ 1015 write :status1:text .display ".status1"
+ 1016 label *label420
  1017 set :mineOre.1:ore @copper
  1018 setaddr :mineOre.1*retaddr *label298 (h:*label298)
  1019 call *label22 *invalid :mineOre.1*retval (m:*label298) (h:*label298)
 
  1023 sensor *tmp413 .core @lead
  1024 jump *label299 greaterThanEq *tmp413 .targetLead
  1025 set :status1:text "Goal 8: lead requirement"
-    * setaddr :status1*retaddr *label301 (h:*label301)
-    * call *label9 *invalid :status1*retval (m:*label301) (h:*label301)
-    * label *label301
+ 1026 label *label421
+ 1027 write :status1:text .display ".status1"
+ 1028 label *label422
  1029 set :mineOre.1:ore @lead
  1030 setaddr :mineOre.1*retaddr *label302 (h:*label302)
  1031 call *label22 *invalid :mineOre.1*retval (m:*label302) (h:*label302)
 
  1035 sensor *tmp416 .core @metaglass
  1036 jump *label303 greaterThanEq *tmp416 .targetMetaglass
  1037 set :status1:text "Goal 9: metaglass requirement"
-    * setaddr :status1*retaddr *label305 (h:*label305)
-    * call *label9 *invalid :status1*retval (m:*label305) (h:*label305)
-    * label *label305
+ 1038 label *label423
+ 1039 write :status1:text .display ".status1"
+ 1040 label *label424
  1041 set :mineOre.1:ore @sand
  1042 setaddr :mineOre.1*retaddr *label306 (h:*label306)
  1043 call *label22 *invalid :mineOre.1*retval (m:*label306) (h:*label306)
 
  1045 jump *label304 always
  1046 label *label303
  1047 set :status1:text "Goal 10: supplying base"
-    * setaddr :status1*retaddr *label307 (h:*label307)
-    * call *label9 *invalid :status1*retval (m:*label307) (h:*label307)
-    * label *label307
+ 1048 label *label425
+ 1049 write :status1:text .display ".status1"
+ 1050 label *label426
  1051 sensor :supplyBase0:coal.1 .core @coal
  1052 sensor :supplyBase0:sand.1 .core @sand
  1053 set :mineOre.1:ore @sand
 
  1068 jump *label282 always
  1069 label *label281
  1070 set :status1:text "Goal 11: Fetching titanium"
-    * setaddr :status1*retaddr *label311 (h:*label311)
-    * call *label9 *invalid :status1*retval (m:*label311) (h:*label311)
-    * label *label311
+ 1071 label *label427
+ 1072 write :status1:text .display ".status1"
+ 1073 label *label428
  1074 set :fetchBlock:block .titaniumDrill
  1075 set :fetchBlock:item @titanium
  1076 setaddr :fetchBlock*retaddr *label312 (h:*label312)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   855 jump *label240 equal .thoriumContainer false
   856 set :status1:text "Phase 2: servicing thorium drill"
   857 label *label403
-    * write :status1:text .display ".status1"
+  858 write "Phase 2: servicing thorium drill" .display ".status1"
   859 label *label404
   860 sensor *tmp360 .core @coal
   861 jump *label244 greaterThanEq *tmp360 50
 
   884 jump *label249 lessThanEq *tmp101 3
   885 set :status1:text "Phase 1: supplying base"
   886 label *label405
-    * write :status1:text .display ".status1"
+  887 write "Phase 1: supplying base" .display ".status1"
   888 label *label406
   889 set :mineOre.1:ore @coal
   890 setaddr :mineOre.1*retaddr *label253 (h:*label253)
 
   901 jump *label259 greaterThanEq *tmp370 5
   902 set :status1:text "Goal 1: graphite requirement"
   903 label *label407
-    * write :status1:text .display ".status1"
+  904 write "Goal 1: graphite requirement" .display ".status1"
   905 label *label408
   906 set :supplyBlock:block .press
   907 set :supplyBlock:ore @coal
 
   919 jump *label265 greaterThanEq *tmp376 5
   920 set :status1:text "Goal 2: coal for silicon requirement"
   921 label *label409
-    * write :status1:text .display ".status1"
+  922 write "Goal 2: coal for silicon requirement" .display ".status1"
   923 label *label410
   924 set :supplyBlock:block .smelter
   925 set :supplyBlock:ore @coal
 
   933 jump *label269 greaterThanEq *tmp379 5
   934 set :status1:text "Goal 3: sand for silicon requirement"
   935 label *label411
-    * write :status1:text .display ".status1"
+  936 write "Goal 3: sand for silicon requirement" .display ".status1"
   937 label *label412
   938 set :supplyBlock:block .smelter
   939 set :supplyBlock:ore @sand
 
   952 jump *label275 greaterThanEq *tmp385 2
   953 set :status1:text "Goal 4: supplying generator"
   954 label *label413
-    * write :status1:text .display ".status1"
+  955 write "Goal 4: supplying generator" .display ".status1"
   956 label *label414
   957 set :supplyBlock:block .generator
   958 set :supplyBlock:ore @coal
 
   982 jump *label285 greaterThanEq *tmp399 *tmp400
   983 set :status1:text "Goal 5: supplying generator"
   984 label *label415
-    * write :status1:text .display ".status1"
+  985 write "Goal 5: supplying generator" .display ".status1"
   986 label *label416
   987 set :mineOre.1:ore @coal
   988 setaddr :mineOre.1*retaddr *label288 (h:*label288)
 
   994 jump *label289 greaterThanEq *tmp403 .targetSilicon
   995 set :status1:text "Goal 6: silicon requirement"
   996 label *label417
-    * write :status1:text .display ".status1"
+  997 write "Goal 6: silicon requirement" .display ".status1"
   998 label *label418
   999 sensor :supplyBase0:coal .core @coal
  1000 sensor :supplyBase0:sand .core @sand
 
  1012 jump *label295 greaterThanEq *tmp410 .targetCopper
  1013 set :status1:text "Goal 7: copper requirement"
  1014 label *label419
-    * write :status1:text .display ".status1"
+ 1015 write "Goal 7: copper requirement" .display ".status1"
  1016 label *label420
  1017 set :mineOre.1:ore @copper
  1018 setaddr :mineOre.1*retaddr *label298 (h:*label298)
 
  1024 jump *label299 greaterThanEq *tmp413 .targetLead
  1025 set :status1:text "Goal 8: lead requirement"
  1026 label *label421
-    * write :status1:text .display ".status1"
+ 1027 write "Goal 8: lead requirement" .display ".status1"
  1028 label *label422
  1029 set :mineOre.1:ore @lead
  1030 setaddr :mineOre.1*retaddr *label302 (h:*label302)
 
  1036 jump *label303 greaterThanEq *tmp416 .targetMetaglass
  1037 set :status1:text "Goal 9: metaglass requirement"
  1038 label *label423
-    * write :status1:text .display ".status1"
+ 1039 write "Goal 9: metaglass requirement" .display ".status1"
  1040 label *label424
  1041 set :mineOre.1:ore @sand
  1042 setaddr :mineOre.1*retaddr *label306 (h:*label306)
 
  1046 label *label303
  1047 set :status1:text "Goal 10: supplying base"
  1048 label *label425
-    * write :status1:text .display ".status1"
+ 1049 write "Goal 10: supplying base" .display ".status1"
  1050 label *label426
  1051 sensor :supplyBase0:coal.1 .core @coal
  1052 sensor :supplyBase0:sand.1 .core @sand
 
  1069 label *label281
  1070 set :status1:text "Goal 11: Fetching titanium"
  1071 label *label427
-    * write :status1:text .display ".status1"
+ 1072 write "Goal 11: Fetching titanium" .display ".status1"
  1073 label *label428
  1074 set :fetchBlock:block .titaniumDrill
  1075 set :fetchBlock:item @titanium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
   853 op max *tmp358 0 *tmp357
   854 write *tmp358 processor8 ".monoSandTarget"
   855 jump *label240 equal .thoriumContainer false
-    * set :status1:text "Phase 2: servicing thorium drill"
   856 label *label403
   857 write "Phase 2: servicing thorium drill" .display ".status1"
   858 label *label404
 
   881 label *label240
   882 read *tmp101 .controller ".monos"
   883 jump *label249 lessThanEq *tmp101 3
-    * set :status1:text "Phase 1: supplying base"
   884 label *label405
   885 write "Phase 1: supplying base" .display ".status1"
   886 label *label406
 
   897 jump *label257 greaterThanEq *tmp367 .targetGraphite
   898 sensor *tmp370 .press @coal
   899 jump *label259 greaterThanEq *tmp370 5
-    * set :status1:text "Goal 1: graphite requirement"
   900 label *label407
   901 write "Goal 1: graphite requirement" .display ".status1"
   902 label *label408
 
   914 jump *label263 greaterThanEq *tmp373 .targetSilicon
   915 sensor *tmp376 .smelter @coal
   916 jump *label265 greaterThanEq *tmp376 5
-    * set :status1:text "Goal 2: coal for silicon requirement"
   917 label *label409
   918 write "Goal 2: coal for silicon requirement" .display ".status1"
   919 label *label410
 
   927 label *label265
   928 sensor *tmp379 .smelter @sand
   929 jump *label269 greaterThanEq *tmp379 5
-    * set :status1:text "Goal 3: sand for silicon requirement"
   930 label *label411
   931 write "Goal 3: sand for silicon requirement" .display ".status1"
   932 label *label412
 
   945 jump *label273 greaterThanEq *tmp382 .powerTarget
   946 sensor *tmp385 .generator @coal
   947 jump *label275 greaterThanEq *tmp385 2
-    * set :status1:text "Goal 4: supplying generator"
   948 label *label413
   949 write "Goal 4: supplying generator" .display ".status1"
   950 label *label414
 
   974 sensor *tmp399 .battery @totalPower
   975 op mul *tmp400 .unloader1 .powerTarget
   976 jump *label285 greaterThanEq *tmp399 *tmp400
-    * set :status1:text "Goal 5: supplying generator"
   977 label *label415
   978 write "Goal 5: supplying generator" .display ".status1"
   979 label *label416
 
   985 label *label285
   986 sensor *tmp403 .core @silicon
   987 jump *label289 greaterThanEq *tmp403 .targetSilicon
-    * set :status1:text "Goal 6: silicon requirement"
   988 label *label417
   989 write "Goal 6: silicon requirement" .display ".status1"
   990 label *label418
 
  1002 label *label289
  1003 sensor *tmp410 .core @copper
  1004 jump *label295 greaterThanEq *tmp410 .targetCopper
-    * set :status1:text "Goal 7: copper requirement"
  1005 label *label419
  1006 write "Goal 7: copper requirement" .display ".status1"
  1007 label *label420
 
  1013 label *label295
  1014 sensor *tmp413 .core @lead
  1015 jump *label299 greaterThanEq *tmp413 .targetLead
-    * set :status1:text "Goal 8: lead requirement"
  1016 label *label421
  1017 write "Goal 8: lead requirement" .display ".status1"
  1018 label *label422
 
  1024 label *label299
  1025 sensor *tmp416 .core @metaglass
  1026 jump *label303 greaterThanEq *tmp416 .targetMetaglass
-    * set :status1:text "Goal 9: metaglass requirement"
  1027 label *label423
  1028 write "Goal 9: metaglass requirement" .display ".status1"
  1029 label *label424
 
  1033 label *label306
  1034 jump *label304 always
  1035 label *label303
-    * set :status1:text "Goal 10: supplying base"
  1036 label *label425
  1037 write "Goal 10: supplying base" .display ".status1"
  1038 label *label426
 
  1055 label *label284
  1056 jump *label282 always
  1057 label *label281
-    * set :status1:text "Goal 11: Fetching titanium"
  1058 label *label427
  1059 write "Goal 11: Fetching titanium" .display ".status1"
  1060 label *label428

Modifications by Inline function 'status3' defined at Actions.mnd:17:1 (-7 instructions):
 
   503 label *label152
   504 return :status2*retaddr
   505 end
-    * label *label11
-    * write :status3:text .display ".status3"
-    * label *label153
-    * return :status3*retaddr
-    * end
   506 label *label12
   507 write :transportStatus:target .display ".transportTarget"
   508 write :transportStatus:item .display ".transportItem"
 
   517 end
   518 label *label14
   519 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label157 (h:*label157)
-    * call *label11 *invalid :status3*retval (m:*label157) (h:*label157)
-    * label *label157
+  520 label *label429
+  521 write :status3:text .display ".status3"
+  522 label *label430
   523 op sub *tmp244 :moveTo:radius 0.5
   524 label *label158
   525 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
 
   533 end
   534 label *label16
   535 set :status3:text "Moving..."
-    * setaddr :status3*retaddr *label164 (h:*label164)
-    * call *label11 *invalid :status3*retval (m:*label164) (h:*label164)
-    * label *label164
+  536 label *label431
+  537 write :status3:text .display ".status3"
+  538 label *label432
   539 label *label165
   540 sensor *tmp247 @unit @firstItem
   541 jump *label168 equal *tmp247 null
 
   575 end
   576 label *label19
   577 set :status3:text "Depositing..."
-    * setaddr :status3*retaddr *label177 (h:*label177)
-    * call *label11 *invalid :status3*retval (m:*label177) (h:*label177)
-    * label *label177
+  578 label *label433
+  579 write :status3:text .display ".status3"
+  580 label *label434
   581 sensor *tmp256 @unit @firstItem
   582 jump *label178 notEqual *tmp256 :depositItems:item
   583 set :moveToBlock:block :depositItems:block
 
   650 label *label196
   651 label *label197
   652 set :status3:text "Mining..."
-    * setaddr :status3*retaddr *label199 (h:*label199)
-    * call *label11 *invalid :status3*retval (m:*label199) (h:*label199)
-    * label *label199
+  653 label *label435
+  654 write :status3:text .display ".status3"
+  655 label *label436
   656 op add :mineOre:stop @second 10
   657 label *label200
   658 sensor :mineOre:item @unit @firstItem

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   518 label *label14
   519 set :status3:text "Moving..."
   520 label *label429
-    * write :status3:text .display ".status3"
+  521 write "Moving..." .display ".status3"
   522 label *label430
   523 op sub *tmp244 :moveTo:radius 0.5
   524 label *label158
 
   534 label *label16
   535 set :status3:text "Moving..."
   536 label *label431
-    * write :status3:text .display ".status3"
+  537 write "Moving..." .display ".status3"
   538 label *label432
   539 label *label165
   540 sensor *tmp247 @unit @firstItem
 
   576 label *label19
   577 set :status3:text "Depositing..."
   578 label *label433
-    * write :status3:text .display ".status3"
+  579 write "Depositing..." .display ".status3"
   580 label *label434
   581 sensor *tmp256 @unit @firstItem
   582 jump *label178 notEqual *tmp256 :depositItems:item
 
   651 label *label197
   652 set :status3:text "Mining..."
   653 label *label435
-    * write :status3:text .display ".status3"
+  654 write "Mining..." .display ".status3"
   655 label *label436
   656 op add :mineOre:stop @second 10
   657 label *label200

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   516 return :error*retaddr
   517 end
   518 label *label14
-    * set :status3:text "Moving..."
   519 label *label429
   520 write "Moving..." .display ".status3"
   521 label *label430
 
   531 return :moveTo*retaddr
   532 end
   533 label *label16
-    * set :status3:text "Moving..."
   534 label *label431
   535 write "Moving..." .display ".status3"
   536 label *label432
 
   572 return :moveToBlock*retaddr
   573 end
   574 label *label19
-    * set :status3:text "Depositing..."
   575 label *label433
   576 write "Depositing..." .display ".status3"
   577 label *label434
 
   646 label *label198
   647 label *label196
   648 label *label197
-    * set :status3:text "Mining..."
   649 label *label435
   650 write "Mining..." .display ".status3"
   651 label *label436

Modifications by Inline function 'moveTo' defined at Actions.mnd:37:1 (-4 instructions):
 
   515 label *label155
   516 return :error*retaddr
   517 end
-    * label *label14
-    * label *label429
-    * write "Moving..." .display ".status3"
-    * label *label430
-    * op sub *tmp244 :moveTo:radius 0.5
-    * label *label158
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
-    * jump *label160 notEqual *tmp242 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp244
-    * label *label159
-    * jump *label158 always
-    * label *label160
-    * label *label156
-    * return :moveTo*retaddr
-    * end
   518 label *label16
   519 label *label431
   520 write "Moving..." .display ".status3"
 
   550 set :moveTo:x *tmp254
   551 set :moveTo:y *tmp255
   552 set :moveTo:radius :moveToBlock:radius
-    * setaddr :moveTo*retaddr *label175 (h:*label175)
-    * call *label14 *invalid :moveTo*retval (m:*label175) (h:*label175)
-    * label *label175
+  553 label *label437
+  554 label *label438
+  555 write "Moving..." .display ".status3"
+  556 label *label439
+  557 op sub *tmp244 :moveTo:radius 0.5
+  558 label *label440
+  559 ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
+  560 jump *label442 notEqual *tmp242 false
+  561 ucontrol approach :moveTo:x :moveTo:y *tmp244
+  562 label *label441
+  563 jump *label440 always
+  564 label *label442
+  565 label *label443
   566 label *label174
   567 return :moveToBlock*retaddr
   568 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   554 label *label438
   555 write "Moving..." .display ".status3"
   556 label *label439
-    * op sub *tmp244 :moveTo:radius 0.5
+  557 op sub *tmp244 :moveToBlock:radius 0.5
   558 label *label440
-    * ucontrol within :moveTo:x :moveTo:y :moveTo:radius *tmp242
+  559 ucontrol within *tmp254 *tmp255 :moveToBlock:radius *tmp242
   560 jump *label442 notEqual *tmp242 false
-    * ucontrol approach :moveTo:x :moveTo:y *tmp244
+  561 ucontrol approach *tmp254 *tmp255 *tmp244
   562 label *label441
   563 jump *label440 always
   564 label *label442

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   547 label *label18
   548 sensor *tmp254 :moveToBlock:block @x
   549 sensor *tmp255 :moveToBlock:block @y
-    * set :moveTo:x *tmp254
-    * set :moveTo:y *tmp255
-    * set :moveTo:radius :moveToBlock:radius
   550 label *label437
   551 label *label438
   552 write "Moving..." .display ".status3"

Modifications by Inline function 'moveToBlock' defined at Actions.mnd:67:1 (-4 instructions):
 
   544 label *label170
   545 return :dropAll*retaddr
   546 end
-    * label *label18
-    * sensor *tmp254 :moveToBlock:block @x
-    * sensor *tmp255 :moveToBlock:block @y
-    * label *label437
-    * label *label438
-    * write "Moving..." .display ".status3"
-    * label *label439
-    * op sub *tmp244 :moveToBlock:radius 0.5
-    * label *label440
-    * ucontrol within *tmp254 *tmp255 :moveToBlock:radius *tmp242
-    * jump *label442 notEqual *tmp242 false
-    * ucontrol approach *tmp254 *tmp255 *tmp244
-    * label *label441
-    * jump *label440 always
-    * label *label442
-    * label *label443
-    * label *label174
-    * return :moveToBlock*retaddr
-    * end
   547 label *label19
   548 label *label433
   549 write "Depositing..." .display ".status3"
 
   552 jump *label178 notEqual *tmp256 :depositItems:item
   553 set :moveToBlock:block :depositItems:block
   554 set :moveToBlock:radius 6
-    * setaddr :moveToBlock*retaddr *label180 (h:*label180)
-    * call *label18 *invalid :moveToBlock*retval (m:*label180) (h:*label180)
-    * label *label180
+  555 label *label444
+  556 sensor *tmp254 :moveToBlock:block @x
+  557 sensor *tmp255 :moveToBlock:block @y
+  558 label *label445
+  559 label *label446
+  560 write "Moving..." .display ".status3"
+  561 label *label447
+  562 op sub *tmp244 :moveToBlock:radius 0.5
+  563 label *label448
+  564 ucontrol within *tmp254 *tmp255 :moveToBlock:radius *tmp242
+  565 jump *label450 notEqual *tmp242 false
+  566 ucontrol approach *tmp254 *tmp255 *tmp244
+  567 label *label449
+  568 jump *label448 always
+  569 label *label450
+  570 label *label451
+  571 label *label452
   572 sensor :depositItems:cap :depositItems:block @itemCapacity
   573 label *label181
   574 ucontrol itemDrop :depositItems:block 30

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   553 set :moveToBlock:block :depositItems:block
   554 set :moveToBlock:radius 6
   555 label *label444
-    * sensor *tmp254 :moveToBlock:block @x
-    * sensor *tmp255 :moveToBlock:block @y
+  556 sensor *tmp254 :depositItems:block @x
+  557 sensor *tmp255 :depositItems:block @y
   558 label *label445
   559 label *label446
   560 write "Moving..." .display ".status3"
   561 label *label447
-    * op sub *tmp244 :moveToBlock:radius 0.5
+  562 op sub *tmp244 6 0.5
   563 label *label448
-    * ucontrol within *tmp254 *tmp255 :moveToBlock:radius *tmp242
+  564 ucontrol within *tmp254 *tmp255 6 *tmp242
   565 jump *label450 notEqual *tmp242 false
-    * ucontrol approach *tmp254 *tmp255 *tmp244
+  566 ucontrol approach *tmp254 *tmp255 5.5
   567 label *label449
   568 jump *label448 always
   569 label *label450

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   550 label *label434
   551 sensor *tmp256 @unit @firstItem
   552 jump *label178 notEqual *tmp256 :depositItems:item
-    * set :moveToBlock:block :depositItems:block
-    * set :moveToBlock:radius 6
   553 label *label444
   554 sensor *tmp254 :depositItems:block @x
   555 sensor *tmp255 :depositItems:block @y
 
   557 label *label446
   558 write "Moving..." .display ".status3"
   559 label *label447
-    * op sub *tmp244 6 0.5
   560 label *label448
   561 ucontrol within *tmp254 *tmp255 6 *tmp242
   562 jump *label450 notEqual *tmp242 false

Modifications by Inline function 'locateOre' defined at Actions.mnd:92:1 (-4 instructions):
 
   593 label *label176
   594 return :depositItems*retaddr
   595 end
-    * label *label20
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 0
-    * jump *label189 notEqual *tmp266 false
-    * set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label191 (h:*label191)
-    * call *label13 *invalid :error*retval (m:*label191) (h:*label191)
-    * label *label191
-    * label *label189
-    * label *label190
-    * label *label188
-    * return :locateOre*retaddr
-    * end
   596 label *label21
   597 op min :mineOre:amount :mineOre:amount 30
   598 set :transportStatus:target :mineOre:amount
 
   601 call *label12 *invalid :transportStatus*retval (m:*label193) (h:*label193)
   602 label *label193
   603 set :locateOre:ore :mineOre:ore
-    * setaddr :locateOre*retaddr *label194 (h:*label194)
-    * call *label20 *invalid :locateOre*retval (m:*label194) (h:*label194)
-    * label *label194
+  604 label *label453
+  605 ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 0
+  606 jump *label455 notEqual *tmp266 false
+  607 set :error:error "Cannot locate ore"
+  608 setaddr :error*retaddr *label454 (h:*label454)
+  609 call *label13 *invalid :error*retval (m:*label454) (h:*label454)
+  610 label *label454
+  611 label *label455
+  612 label *label456
+  613 label *label457
   614 set :mineOre:x :locateOre:x
   615 set :mineOre:y :locateOre:y
   616 set :moveToEmpty:x :locateOre:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   602 label *label193
   603 set :locateOre:ore :mineOre:ore
   604 label *label453
-    * ulocate ore core true :locateOre:ore :locateOre:x :locateOre:y *tmp266 0
+  605 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   606 jump *label455 notEqual *tmp266 false
   607 set :error:error "Cannot locate ore"
   608 setaddr :error*retaddr *label454 (h:*label454)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
   600 setaddr :transportStatus*retaddr *label193 (h:*label193)
   601 call *label12 *invalid :transportStatus*retval (m:*label193) (h:*label193)
   602 label *label193
-    * set :locateOre:ore :mineOre:ore
   603 label *label453
   604 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   605 jump *label455 notEqual *tmp266 false

Modifications by Inline function 'supplyBlockFromCore' defined at Actions.mnd:160:1 (-4 instructions):
 
   741 label *label222
   742 return :supplyBlock*retaddr
   743 end
-    * label *label25
-    * sensor *tmp303 :supplyBlockFromCore:target @itemCapacity
-    * op min :transportStatus:target *tmp303 30
-    * set :transportStatus:item :supplyBlockFromCore:item
-    * setaddr :transportStatus*retaddr *label228 (h:*label228)
-    * call *label12 *invalid :transportStatus*retval (m:*label228) (h:*label228)
-    * label *label228
-    * set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
-    * setaddr :status2*retaddr *label229 (h:*label229)
-    * call *label10 *invalid :status2*retval (m:*label229) (h:*label229)
-    * label *label229
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label230 (h:*label230)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label230) (h:*label230)
-    * label *label230
-    * setaddr :dropAll*retaddr *label231 (h:*label231)
-    * call *label17 *invalid :dropAll*retval (m:*label231) (h:*label231)
-    * label *label231
-    * label *label232
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
-    * sensor :supplyBlockFromCore:unitItem @unit @firstItem
-    * op notEqual *tmp306 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp307 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
-    * op land *tmp308 *tmp306 *tmp307
-    * jump *label235 equal *tmp308 false
-    * ucontrol itemDrop @air 1000
-    * label *label235
-    * label *label236
-    * label *label233
-    * sensor *tmp310 @unit :supplyBlockFromCore:item
-    * op lessThan *tmp311 *tmp310 30
-    * sensor *tmp312 .core :supplyBlockFromCore:item
-    * op land *tmp313 *tmp311 *tmp312
-    * jump *label232 notEqual *tmp313 false
-    * label *label234
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
-    * setaddr :depositItems*retaddr *label237 (h:*label237)
-    * call *label19 *invalid :depositItems*retval (m:*label237) (h:*label237)
-    * label *label237
-    * label *label227
-    * return :supplyBlockFromCore*retaddr
-    * end
   744 label *label31
   745 read *tmp315 :unpackCfg:cfg 0
   746 op sub *tmp316 *tmp315 35
 
   790 label *label244
   791 set :supplyBlockFromCore:target .thoriumGenerator
   792 set :supplyBlockFromCore:item @coal
-    * setaddr :supplyBlockFromCore*retaddr *label247 (h:*label247)
-    * call *label25 *invalid :supplyBlockFromCore*retval (m:*label247) (h:*label247)
-    * label *label247
+  793 label *label458
+  794 sensor *tmp303 :supplyBlockFromCore:target @itemCapacity
+  795 op min :transportStatus:target *tmp303 30
+  796 set :transportStatus:item :supplyBlockFromCore:item
+  797 setaddr :transportStatus*retaddr *label459 (h:*label459)
+  798 call *label12 *invalid :transportStatus*retval (m:*label459) (h:*label459)
+  799 label *label459
+  800 set :status2:text "Transferring "
+  801 set :status2:item :supplyBlockFromCore:item
+  802 set :status2:block :supplyBlockFromCore:target
+  803 setaddr :status2*retaddr *label460 (h:*label460)
+  804 call *label10 *invalid :status2*retval (m:*label460) (h:*label460)
+  805 label *label460
+  806 set :moveToEmpty:x .coreX
+  807 set :moveToEmpty:y .coreY
+  808 setaddr :moveToEmpty*retaddr *label461 (h:*label461)
+  809 call *label16 *invalid :moveToEmpty*retval (m:*label461) (h:*label461)
+  810 label *label461
+  811 setaddr :dropAll*retaddr *label462 (h:*label462)
+  812 call *label17 *invalid :dropAll*retval (m:*label462) (h:*label462)
+  813 label *label462
+  814 label *label463
+  815 ucontrol itemTake .core :supplyBlockFromCore:item 30
+  816 sensor :supplyBlockFromCore:unitItem @unit @firstItem
+  817 op notEqual *tmp306 :supplyBlockFromCore:unitItem null
+  818 op notEqual *tmp307 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  819 op land *tmp308 *tmp306 *tmp307
+  820 jump *label464 equal *tmp308 false
+  821 ucontrol itemDrop @air 1000
+  822 label *label464
+  823 label *label465
+  824 label *label466
+  825 sensor *tmp310 @unit :supplyBlockFromCore:item
+  826 op lessThan *tmp311 *tmp310 30
+  827 sensor *tmp312 .core :supplyBlockFromCore:item
+  828 op land *tmp313 *tmp311 *tmp312
+  829 jump *label463 notEqual *tmp313 false
+  830 label *label467
+  831 set :depositItems:block :supplyBlockFromCore:target
+  832 set :depositItems:item :supplyBlockFromCore:item
+  833 setaddr :depositItems*retaddr *label468 (h:*label468)
+  834 call *label19 *invalid :depositItems*retval (m:*label468) (h:*label468)
+  835 label *label468
+  836 label *label469
   837 label *label245
   838 set :fetchBlock:block .thoriumContainer
   839 set :fetchBlock:item @thorium

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   791 set :supplyBlockFromCore:target .thoriumGenerator
   792 set :supplyBlockFromCore:item @coal
   793 label *label458
-    * sensor *tmp303 :supplyBlockFromCore:target @itemCapacity
+  794 sensor *tmp303 .thoriumGenerator @itemCapacity
   795 op min :transportStatus:target *tmp303 30
-    * set :transportStatus:item :supplyBlockFromCore:item
+  796 set :transportStatus:item @coal
   797 setaddr :transportStatus*retaddr *label459 (h:*label459)
   798 call *label12 *invalid :transportStatus*retval (m:*label459) (h:*label459)
   799 label *label459

Modifications by Replicate loop condition at Actions.mnd:61:5 (+1 instructions):
 
   537 label *label171
   538 sensor *tmp252 @unit @firstItem
   539 jump *label173 equal *tmp252 null
+  540 label *label470
   541 ucontrol itemDrop @air 1000
   542 label *label172
-    * jump *label171 always
+  543 sensor *tmp252 @unit @firstItem
+  544 jump *label470 notEqual *tmp252 null
   545 label *label173
   546 label *label170
   547 return :dropAll*retaddr

Modifications by Replicate loop condition at Actions.mnd:39:5 (+1 instructions):
 
   562 label *label448
   563 ucontrol within *tmp254 *tmp255 6 *tmp242
   564 jump *label450 notEqual *tmp242 false
+  565 label *label471
   566 ucontrol approach *tmp254 *tmp255 5.5
   567 label *label449
-    * jump *label448 always
+  568 ucontrol within *tmp254 *tmp255 6 *tmp242
+  569 jump *label471 equal *tmp242 false
   570 label *label450
   571 label *label451
   572 label *label452

Modifications by Replicate loop condition at Actions.mnd:84:9 (+1 instructions):
 
   584 label *label184
   585 sensor *tmp264 @unit @firstItem
   586 jump *label186 equal *tmp264 null
+  587 label *label472
   588 ucontrol itemDrop @air 1000
   589 label *label185
-    * jump *label184 always
+  590 sensor *tmp264 @unit @firstItem
+  591 jump *label472 notEqual *tmp264 null
   592 label *label186
   593 label *label179
   594 set :transportStatus:target 0

Modifications by Inline function call at Actions.mnd:88:5:
 
   593 label *label179
   594 set :transportStatus:target 0
   595 set :transportStatus:item null
-    * setaddr :transportStatus*retaddr *label187 (h:*label187)
-    * call *label12 *invalid :transportStatus*retval (m:*label187) (h:*label187)
-    * label *label187
+  596 label *label473
+  597 write :transportStatus:target .display ".transportTarget"
+  598 write :transportStatus:item .display ".transportItem"
+  599 label *label474
   600 label *label176
   601 return :depositItems*retaddr
   602 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   594 set :transportStatus:target 0
   595 set :transportStatus:item null
   596 label *label473
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  597 write 0 .display ".transportTarget"
+  598 write null .display ".transportItem"
   599 label *label474
   600 label *label176
   601 return :depositItems*retaddr

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   591 jump *label472 notEqual *tmp264 null
   592 label *label186
   593 label *label179
-    * set :transportStatus:target 0
-    * set :transportStatus:item null
   594 label *label473
   595 write 0 .display ".transportTarget"
   596 write null .display ".transportItem"

Modifications by Inline function 'transportStatus' defined at Actions.mnd:21:1 (-4 instructions):
 
   503 label *label152
   504 return :status2*retaddr
   505 end
-    * label *label12
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
-    * label *label154
-    * return :transportStatus*retaddr
-    * end
   506 label *label13
   507 set .ERROR :error:error
   508 stop
 
   596 op min :mineOre:amount :mineOre:amount 30
   597 set :transportStatus:target :mineOre:amount
   598 set :transportStatus:item :mineOre:ore
-    * setaddr :transportStatus*retaddr *label193 (h:*label193)
-    * call *label12 *invalid :transportStatus*retval (m:*label193) (h:*label193)
-    * label *label193
+  599 label *label475
+  600 write :transportStatus:target .display ".transportTarget"
+  601 write :transportStatus:item .display ".transportItem"
+  602 label *label476
   603 label *label453
   604 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   605 jump *label455 notEqual *tmp266 false
 
   675 sensor *tmp285 :fetchBlock:block @itemCapacity
   676 op min :transportStatus:target *tmp285 30
   677 set :transportStatus:item :fetchBlock:item
-    * setaddr :transportStatus*retaddr *label212 (h:*label212)
-    * call *label12 *invalid :transportStatus*retval (m:*label212) (h:*label212)
-    * label *label212
+  678 label *label477
+  679 write :transportStatus:target .display ".transportTarget"
+  680 write :transportStatus:item .display ".transportItem"
+  681 label *label478
   682 set :status2:text "Fetching "
   683 set :status2:item :fetchBlock:item
   684 set :status2:block :fetchBlock:block
 
   795 sensor *tmp303 .thoriumGenerator @itemCapacity
   796 op min :transportStatus:target *tmp303 30
   797 set :transportStatus:item @coal
-    * setaddr :transportStatus*retaddr *label459 (h:*label459)
-    * call *label12 *invalid :transportStatus*retval (m:*label459) (h:*label459)
-    * label *label459
+  798 label *label479
+  799 write :transportStatus:target .display ".transportTarget"
+  800 write :transportStatus:item .display ".transportItem"
+  801 label *label480
   802 set :status2:text "Transferring "
   803 set :status2:item :supplyBlockFromCore:item
   804 set :status2:block :supplyBlockFromCore:target

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   597 set :transportStatus:target :mineOre:amount
   598 set :transportStatus:item :mineOre:ore
   599 label *label475
-    * write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  600 write :mineOre:amount .display ".transportTarget"
+  601 write :mineOre:ore .display ".transportItem"
   602 label *label476
   603 label *label453
   604 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
 
   677 set :transportStatus:item :fetchBlock:item
   678 label *label477
   679 write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  680 write :fetchBlock:item .display ".transportItem"
   681 label *label478
   682 set :status2:text "Fetching "
   683 set :status2:item :fetchBlock:item
 
   797 set :transportStatus:item @coal
   798 label *label479
   799 write :transportStatus:target .display ".transportTarget"
-    * write :transportStatus:item .display ".transportItem"
+  800 write @coal .display ".transportItem"
   801 label *label480
   802 set :status2:text "Transferring "
-    * set :status2:item :supplyBlockFromCore:item
-    * set :status2:block :supplyBlockFromCore:target
+  803 set :status2:item @coal
+  804 set :status2:block .thoriumGenerator
   805 setaddr :status2*retaddr *label460 (h:*label460)
   806 call *label10 *invalid :status2*retval (m:*label460) (h:*label460)
   807 label *label460

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   595 label *label21
   596 op min :mineOre:amount :mineOre:amount 30
   597 set :transportStatus:target :mineOre:amount
-    * set :transportStatus:item :mineOre:ore
   598 label *label475
   599 write :mineOre:amount .display ".transportTarget"
   600 write :mineOre:ore .display ".transportItem"
 
   673 label *label23
   674 sensor *tmp285 :fetchBlock:block @itemCapacity
   675 op min :transportStatus:target *tmp285 30
-    * set :transportStatus:item :fetchBlock:item
   676 label *label477
   677 write :transportStatus:target .display ".transportTarget"
   678 write :fetchBlock:item .display ".transportItem"
 
   792 label *label458
   793 sensor *tmp303 .thoriumGenerator @itemCapacity
   794 op min :transportStatus:target *tmp303 30
-    * set :transportStatus:item @coal
   795 label *label479
   796 write :transportStatus:target .display ".transportTarget"
   797 write @coal .display ".transportItem"

Modifications by Inline function call at Actions.mnd:135:5 (+1 instructions):
 
   680 set :status2:text "Fetching "
   681 set :status2:item :fetchBlock:item
   682 set :status2:block :fetchBlock:block
-    * setaddr :status2*retaddr *label213 (h:*label213)
-    * call *label10 *invalid :status2*retval (m:*label213) (h:*label213)
-    * label *label213
+  683 label *label481
+  684 write :status2:text .display ".status2"
+  685 write :status2:item .display ".item2"
+  686 write :status2:block .display ".block2"
+  687 label *label482
   688 sensor *tmp287 :fetchBlock:block @x
   689 sensor *tmp288 :fetchBlock:block @y
   690 set :moveToEmpty:x *tmp287

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   681 set :status2:item :fetchBlock:item
   682 set :status2:block :fetchBlock:block
   683 label *label481
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  684 write "Fetching " .display ".status2"
+  685 write :fetchBlock:item .display ".item2"
+  686 write :fetchBlock:block .display ".block2"
   687 label *label482
   688 sensor *tmp287 :fetchBlock:block @x
   689 sensor *tmp288 :fetchBlock:block @y

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   677 write :transportStatus:target .display ".transportTarget"
   678 write :fetchBlock:item .display ".transportItem"
   679 label *label478
-    * set :status2:text "Fetching "
-    * set :status2:item :fetchBlock:item
-    * set :status2:block :fetchBlock:block
   680 label *label481
   681 write "Fetching " .display ".status2"
   682 write :fetchBlock:item .display ".item2"

Modifications by Inline function 'status2' defined at Actions.mnd:11:1 (-2 instructions):
 
   496 label *label146
   497 label *label139
   498 end
-    * label *label10
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
-    * label *label152
-    * return :status2*retaddr
-    * end
   499 label *label13
   500 set .ERROR :error:error
   501 stop
 
   651 set :status2:text "Mining "
   652 set :status2:item :mineOre.1:ore
   653 set :status2:block "core"
-    * setaddr :status2*retaddr *label209 (h:*label209)
-    * call *label10 *invalid :status2*retval (m:*label209) (h:*label209)
-    * label *label209
+  654 label *label483
+  655 write :status2:text .display ".status2"
+  656 write :status2:item .display ".item2"
+  657 write :status2:block .display ".block2"
+  658 label *label484
   659 set :mineOre:ore :mineOre.1:ore
   660 set :mineOre:amount 30
   661 set :mineOre:block .core
 
   716 set :status2:text "Supplying "
   717 set :status2:item :supplyBlock:ore
   718 set :status2:block :supplyBlock:block
-    * setaddr :status2*retaddr *label223 (h:*label223)
-    * call *label10 *invalid :status2*retval (m:*label223) (h:*label223)
-    * label *label223
+  719 label *label485
+  720 write :status2:text .display ".status2"
+  721 write :status2:item .display ".item2"
+  722 write :status2:block .display ".block2"
+  723 label *label486
   724 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   725 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
   726 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
 
   795 set :status2:text "Transferring "
   796 set :status2:item @coal
   797 set :status2:block .thoriumGenerator
-    * setaddr :status2*retaddr *label460 (h:*label460)
-    * call *label10 *invalid :status2*retval (m:*label460) (h:*label460)
-    * label *label460
+  798 label *label487
+  799 write :status2:text .display ".status2"
+  800 write :status2:item .display ".item2"
+  801 write :status2:block .display ".block2"
+  802 label *label488
   803 set :moveToEmpty:x .coreX
   804 set :moveToEmpty:y .coreY
   805 setaddr :moveToEmpty*retaddr *label461 (h:*label461)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   652 set :status2:item :mineOre.1:ore
   653 set :status2:block "core"
   654 label *label483
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  655 write "Mining " .display ".status2"
+  656 write :mineOre.1:ore .display ".item2"
+  657 write "core" .display ".block2"
   658 label *label484
   659 set :mineOre:ore :mineOre.1:ore
   660 set :mineOre:amount 30
 
   717 set :status2:item :supplyBlock:ore
   718 set :status2:block :supplyBlock:block
   719 label *label485
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  720 write "Supplying " .display ".status2"
+  721 write :supplyBlock:ore .display ".item2"
+  722 write :supplyBlock:block .display ".block2"
   723 label *label486
   724 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   725 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
 
   796 set :status2:item @coal
   797 set :status2:block .thoriumGenerator
   798 label *label487
-    * write :status2:text .display ".status2"
-    * write :status2:item .display ".item2"
-    * write :status2:block .display ".block2"
+  799 write "Transferring " .display ".status2"
+  800 write @coal .display ".item2"
+  801 write .thoriumGenerator .display ".block2"
   802 label *label488
   803 set :moveToEmpty:x .coreX
   804 set :moveToEmpty:y .coreY

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   648 return :mineOre*retaddr
   649 end
   650 label *label22
-    * set :status2:text "Mining "
-    * set :status2:item :mineOre.1:ore
-    * set :status2:block "core"
   651 label *label483
   652 write "Mining " .display ".status2"
   653 write :mineOre.1:ore .display ".item2"
 
   710 return :fetchBlock*retaddr
   711 end
   712 label *label24
-    * set :status2:text "Supplying "
-    * set :status2:item :supplyBlock:ore
-    * set :status2:block :supplyBlock:block
   713 label *label485
   714 write "Supplying " .display ".status2"
   715 write :supplyBlock:ore .display ".item2"
 
   786 write :transportStatus:target .display ".transportTarget"
   787 write @coal .display ".transportItem"
   788 label *label480
-    * set :status2:text "Transferring "
-    * set :status2:item @coal
-    * set :status2:block .thoriumGenerator
   789 label *label487
   790 write "Transferring " .display ".status2"
   791 write @coal .display ".item2"

Modifications by Inline function 'error' defined at Actions.mnd:31:1 (-4 instructions):
 
    72 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    73 jump *label54 notEqual :buildFirstTitaniumDrill:result false
    74 set :error:error "Cannot locate spot for titanium drill"
-    * setaddr :error*retaddr *label56 (h:*label56)
-    * call *label13 *invalid :error*retval (m:*label56) (h:*label56)
-    * label *label56
+   75 label *label489
+   76 set .ERROR :error:error
+   77 stop
+   78 label *label490
    79 label *label54
    80 label *label55
    81 write @pneumatic-drill processor1 ".nextBlock"
 
   325 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   326 jump *label110 notEqual :buildThoriumDrill:result false
   327 set :error:error "Cannot locate spot for thorium drill"
-    * setaddr :error*retaddr *label112 (h:*label112)
-    * call *label13 *invalid :error*retval (m:*label112) (h:*label112)
-    * label *label112
+  328 label *label491
+  329 set .ERROR :error:error
+  330 stop
+  331 label *label492
   332 label *label110
   333 label *label111
   334 write @laser-drill processor5 ":buildBlockAt:block"
 
   498 label *label146
   499 label *label139
   500 end
-    * label *label13
-    * set .ERROR :error:error
-    * stop
-    * label *label155
-    * return :error*retaddr
-    * end
   501 label *label16
   502 label *label431
   503 write "Moving..." .display ".status3"
 
   592 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   593 jump *label455 notEqual *tmp266 false
   594 set :error:error "Cannot locate ore"
-    * setaddr :error*retaddr *label454 (h:*label454)
-    * call *label13 *invalid :error*retval (m:*label454) (h:*label454)
-    * label *label454
+  595 label *label493
+  596 set .ERROR :error:error
+  597 stop
+  598 label *label494
   599 label *label455
   600 label *label456
   601 label *label457

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    73 jump *label54 notEqual :buildFirstTitaniumDrill:result false
    74 set :error:error "Cannot locate spot for titanium drill"
    75 label *label489
-    * set .ERROR :error:error
+   76 set .ERROR "Cannot locate spot for titanium drill"
    77 stop
    78 label *label490
    79 label *label54
 
   326 jump *label110 notEqual :buildThoriumDrill:result false
   327 set :error:error "Cannot locate spot for thorium drill"
   328 label *label491
-    * set .ERROR :error:error
+  329 set .ERROR "Cannot locate spot for thorium drill"
   330 stop
   331 label *label492
   332 label *label110
 
   593 jump *label455 notEqual *tmp266 false
   594 set :error:error "Cannot locate ore"
   595 label *label493
-    * set .ERROR :error:error
+  596 set .ERROR "Cannot locate ore"
   597 stop
   598 label *label494
   599 label *label455

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
    71 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
    72 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    73 jump *label54 notEqual :buildFirstTitaniumDrill:result false
-    * set :error:error "Cannot locate spot for titanium drill"
    74 label *label489
    75 set .ERROR "Cannot locate spot for titanium drill"
    76 stop
 
   323 jump *label109 equal *tmp205 false
   324 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   325 jump *label110 notEqual :buildThoriumDrill:result false
-    * set :error:error "Cannot locate spot for thorium drill"
   326 label *label491
   327 set .ERROR "Cannot locate spot for thorium drill"
   328 stop
 
   589 label *label453
   590 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   591 jump *label455 notEqual *tmp266 false
-    * set :error:error "Cannot locate ore"
   592 label *label493
   593 set .ERROR "Cannot locate ore"
   594 stop

Modifications by Inline function 'moveToEmpty' defined at Actions.mnd:50:1 (+6 instructions):
 
   496 label *label146
   497 label *label139
   498 end
-    * label *label16
-    * label *label431
-    * write "Moving..." .display ".status3"
-    * label *label432
-    * label *label165
-    * sensor *tmp247 @unit @firstItem
-    * jump *label168 equal *tmp247 null
-    * ucontrol itemDrop @air 1000
-    * label *label168
-    * label *label169
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
-    * label *label166
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
-    * jump *label165 equal *tmp250 false
-    * label *label167
-    * label *label163
-    * return :moveToEmpty*retaddr
-    * end
   499 label *label17
   500 label *label171
   501 sensor *tmp252 @unit @firstItem
 
   582 set :mineOre:y :locateOre:y
   583 set :moveToEmpty:x :locateOre:x
   584 set :moveToEmpty:y :locateOre:y
-    * setaddr :moveToEmpty*retaddr *label195 (h:*label195)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label195) (h:*label195)
-    * label *label195
+  585 label *label495
+  586 label *label496
+  587 write "Moving..." .display ".status3"
+  588 label *label497
+  589 label *label498
+  590 sensor *tmp247 @unit @firstItem
+  591 jump *label499 equal *tmp247 null
+  592 ucontrol itemDrop @air 1000
+  593 label *label499
+  594 label *label500
+  595 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  596 label *label501
+  597 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  598 jump *label498 equal *tmp250 false
+  599 label *label502
+  600 label *label503
   601 sensor *tmp271 @unit @firstItem
   602 jump *label196 equal *tmp271 :mineOre:ore
   603 setaddr :dropAll*retaddr *label198 (h:*label198)
 
   667 sensor *tmp288 :fetchBlock:block @y
   668 set :moveToEmpty:x *tmp287
   669 set :moveToEmpty:y *tmp288
-    * setaddr :moveToEmpty*retaddr *label214 (h:*label214)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label214) (h:*label214)
-    * label *label214
+  670 label *label504
+  671 label *label505
+  672 write "Moving..." .display ".status3"
+  673 label *label506
+  674 label *label507
+  675 sensor *tmp247 @unit @firstItem
+  676 jump *label508 equal *tmp247 null
+  677 ucontrol itemDrop @air 1000
+  678 label *label508
+  679 label *label509
+  680 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  681 label *label510
+  682 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  683 jump *label507 equal *tmp250 false
+  684 label *label511
+  685 label *label512
   686 setaddr :dropAll*retaddr *label215 (h:*label215)
   687 call *label17 *invalid :dropAll*retval (m:*label215) (h:*label215)
   688 label *label215
 
   795 label *label488
   796 set :moveToEmpty:x .coreX
   797 set :moveToEmpty:y .coreY
-    * setaddr :moveToEmpty*retaddr *label461 (h:*label461)
-    * call *label16 *invalid :moveToEmpty*retval (m:*label461) (h:*label461)
-    * label *label461
+  798 label *label513
+  799 label *label514
+  800 write "Moving..." .display ".status3"
+  801 label *label515
+  802 label *label516
+  803 sensor *tmp247 @unit @firstItem
+  804 jump *label517 equal *tmp247 null
+  805 ucontrol itemDrop @air 1000
+  806 label *label517
+  807 label *label518
+  808 ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  809 label *label519
+  810 ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  811 jump *label516 equal *tmp250 false
+  812 label *label520
+  813 label *label521
   814 setaddr :dropAll*retaddr *label462 (h:*label462)
   815 call *label17 *invalid :dropAll*retval (m:*label462) (h:*label462)
   816 label *label462

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   592 ucontrol itemDrop @air 1000
   593 label *label499
   594 label *label500
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  595 ucontrol approach :locateOre:x :locateOre:y 5.5
   596 label *label501
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  597 ucontrol within :locateOre:x :locateOre:y 6 *tmp250
   598 jump *label498 equal *tmp250 false
   599 label *label502
   600 label *label503
 
   677 ucontrol itemDrop @air 1000
   678 label *label508
   679 label *label509
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  680 ucontrol approach *tmp287 *tmp288 5.5
   681 label *label510
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  682 ucontrol within *tmp287 *tmp288 6 *tmp250
   683 jump *label507 equal *tmp250 false
   684 label *label511
   685 label *label512
 
   805 ucontrol itemDrop @air 1000
   806 label *label517
   807 label *label518
-    * ucontrol approach :moveToEmpty:x :moveToEmpty:y 5.5
+  808 ucontrol approach .coreX .coreY 5.5
   809 label *label519
-    * ucontrol within :moveToEmpty:x :moveToEmpty:y 6 *tmp250
+  810 ucontrol within .coreX .coreY 6 *tmp250
   811 jump *label516 equal *tmp250 false
   812 label *label520
   813 label *label521

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   580 label *label457
   581 set :mineOre:x :locateOre:x
   582 set :mineOre:y :locateOre:y
-    * set :moveToEmpty:x :locateOre:x
-    * set :moveToEmpty:y :locateOre:y
   583 label *label495
   584 label *label496
   585 write "Moving..." .display ".status3"
 
   663 label *label482
   664 sensor *tmp287 :fetchBlock:block @x
   665 sensor *tmp288 :fetchBlock:block @y
-    * set :moveToEmpty:x *tmp287
-    * set :moveToEmpty:y *tmp288
   666 label *label504
   667 label *label505
   668 write "Moving..." .display ".status3"
 
   789 write @coal .display ".item2"
   790 write .thoriumGenerator .display ".block2"
   791 label *label488
-    * set :moveToEmpty:x .coreX
-    * set :moveToEmpty:y .coreY
   792 label *label513
   793 label *label514
   794 write "Moving..." .display ".status3"

Modifications by Inline function 'dropAll' defined at Actions.mnd:59:1 (+2 instructions):
 
   496 label *label146
   497 label *label139
   498 end
-    * label *label17
-    * label *label171
-    * sensor *tmp252 @unit @firstItem
-    * jump *label173 equal *tmp252 null
-    * label *label470
-    * ucontrol itemDrop @air 1000
-    * label *label172
-    * sensor *tmp252 @unit @firstItem
-    * jump *label470 notEqual *tmp252 null
-    * label *label173
-    * label *label170
-    * return :dropAll*retaddr
-    * end
   499 label *label19
   500 label *label433
   501 write "Depositing..." .display ".status3"
 
   585 label *label503
   586 sensor *tmp271 @unit @firstItem
   587 jump *label196 equal *tmp271 :mineOre:ore
-    * setaddr :dropAll*retaddr *label198 (h:*label198)
-    * call *label17 *invalid :dropAll*retval (m:*label198) (h:*label198)
-    * label *label198
+  588 label *label522
+  589 label *label523
+  590 sensor *tmp252 @unit @firstItem
+  591 jump *label526 equal *tmp252 null
+  592 label *label524
+  593 ucontrol itemDrop @air 1000
+  594 label *label525
+  595 sensor *tmp252 @unit @firstItem
+  596 jump *label524 notEqual *tmp252 null
+  597 label *label526
+  598 label *label527
   599 label *label196
   600 label *label197
   601 label *label435
 
   674 jump *label507 equal *tmp250 false
   675 label *label511
   676 label *label512
-    * setaddr :dropAll*retaddr *label215 (h:*label215)
-    * call *label17 *invalid :dropAll*retval (m:*label215) (h:*label215)
-    * label *label215
+  677 label *label528
+  678 label *label529
+  679 sensor *tmp252 @unit @firstItem
+  680 jump *label532 equal *tmp252 null
+  681 label *label530
+  682 ucontrol itemDrop @air 1000
+  683 label *label531
+  684 sensor *tmp252 @unit @firstItem
+  685 jump *label530 notEqual *tmp252 null
+  686 label *label532
+  687 label *label533
   688 label *label216
   689 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
   690 sensor :fetchBlock:unitItem @unit @firstItem
 
   808 jump *label516 equal *tmp250 false
   809 label *label520
   810 label *label521
-    * setaddr :dropAll*retaddr *label462 (h:*label462)
-    * call *label17 *invalid :dropAll*retval (m:*label462) (h:*label462)
-    * label *label462
+  811 label *label534
+  812 label *label535
+  813 sensor *tmp252 @unit @firstItem
+  814 jump *label538 equal *tmp252 null
+  815 label *label536
+  816 ucontrol itemDrop @air 1000
+  817 label *label537
+  818 sensor *tmp252 @unit @firstItem
+  819 jump *label536 notEqual *tmp252 null
+  820 label *label538
+  821 label *label539
   822 label *label463
   823 ucontrol itemTake .core :supplyBlockFromCore:item 30
   824 sensor :supplyBlockFromCore:unitItem @unit @firstItem

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   611 jump *label202 always
   612 label *label203
   613 label *label204
-    * ucontrol mine :mineOre:x :mineOre:y
+  614 ucontrol mine :locateOre:x :locateOre:y
   615 jump *label205 lessThanEq @second :mineOre:stop
   616 jump *label202 always
   617 label *label205
 
   820 label *label538
   821 label *label539
   822 label *label463
-    * ucontrol itemTake .core :supplyBlockFromCore:item 30
+  823 ucontrol itemTake .core @coal 30
   824 sensor :supplyBlockFromCore:unitItem @unit @firstItem
   825 op notEqual *tmp306 :supplyBlockFromCore:unitItem null
-    * op notEqual *tmp307 :supplyBlockFromCore:unitItem :supplyBlockFromCore:item
+  826 op notEqual *tmp307 :supplyBlockFromCore:unitItem @coal
   827 op land *tmp308 *tmp306 *tmp307
   828 jump *label464 equal *tmp308 false
   829 ucontrol itemDrop @air 1000
   830 label *label464
   831 label *label465
   832 label *label466
-    * sensor *tmp310 @unit :supplyBlockFromCore:item
+  833 sensor *tmp310 @unit @coal
   834 op lessThan *tmp311 *tmp310 30
-    * sensor *tmp312 .core :supplyBlockFromCore:item
+  835 sensor *tmp312 .core @coal
   836 op land *tmp313 *tmp311 *tmp312
   837 jump *label463 notEqual *tmp313 false
   838 label *label467
-    * set :depositItems:block :supplyBlockFromCore:target
-    * set :depositItems:item :supplyBlockFromCore:item
+  839 set :depositItems:block .thoriumGenerator
+  840 set :depositItems:item @coal
   841 setaddr :depositItems*retaddr *label468 (h:*label468)
   842 call *label19 *invalid :depositItems*retval (m:*label468) (h:*label468)
   843 label *label468

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   565 label *label455
   566 label *label456
   567 label *label457
-    * set :mineOre:x :locateOre:x
-    * set :mineOre:y :locateOre:y
   568 label *label495
   569 label *label496
   570 write "Moving..." .display ".status3"
 
   776 label *label246
   777 jump *label245 always
   778 label *label244
-    * set :supplyBlockFromCore:target .thoriumGenerator
-    * set :supplyBlockFromCore:item @coal
   779 label *label458
   780 sensor *tmp303 .thoriumGenerator @itemCapacity
   781 op min :transportStatus:target *tmp303 30

Modifications by Inline function call at CoreBuilder.mnd:200:5 (+6 instructions):
 
   853 write "Phase 1: supplying base" .display ".status1"
   854 label *label406
   855 set :mineOre.1:ore @coal
-    * setaddr :mineOre.1*retaddr *label253 (h:*label253)
-    * call *label22 *invalid :mineOre.1*retval (m:*label253) (h:*label253)
-    * label *label253
+  856 label *label540
+  857 label *label541
+  858 write "Mining " .display ".status2"
+  859 write :mineOre.1:ore .display ".item2"
+  860 write "core" .display ".block2"
+  861 label *label542
+  862 set :mineOre:ore :mineOre.1:ore
+  863 set :mineOre:amount 30
+  864 set :mineOre:block .core
+  865 setaddr :mineOre*retaddr *label543 (h:*label543)
+  866 call *label21 *invalid :mineOre*retval (m:*label543) (h:*label543)
+  867 label *label543
+  868 label *label544
   869 label *label251
   870 jump *label250 always
   871 label *label249

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   856 label *label540
   857 label *label541
   858 write "Mining " .display ".status2"
-    * write :mineOre.1:ore .display ".item2"
+  859 write @coal .display ".item2"
   860 write "core" .display ".block2"
   861 label *label542
-    * set :mineOre:ore :mineOre.1:ore
+  862 set :mineOre:ore @coal
   863 set :mineOre:amount 30
   864 set :mineOre:block .core
   865 setaddr :mineOre*retaddr *label543 (h:*label543)

Modifications by Inline function 'depositItems' defined at Actions.mnd:74:1 (+42 instructions):
 
   496 label *label146
   497 label *label139
   498 end
-    * label *label19
-    * label *label433
-    * write "Depositing..." .display ".status3"
-    * label *label434
-    * sensor *tmp256 @unit @firstItem
-    * jump *label178 notEqual *tmp256 :depositItems:item
-    * label *label444
-    * sensor *tmp254 :depositItems:block @x
-    * sensor *tmp255 :depositItems:block @y
-    * label *label445
-    * label *label446
-    * write "Moving..." .display ".status3"
-    * label *label447
-    * label *label448
-    * ucontrol within *tmp254 *tmp255 6 *tmp242
-    * jump *label450 notEqual *tmp242 false
-    * label *label471
-    * ucontrol approach *tmp254 *tmp255 5.5
-    * label *label449
-    * ucontrol within *tmp254 *tmp255 6 *tmp242
-    * jump *label471 equal *tmp242 false
-    * label *label450
-    * label *label451
-    * label *label452
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
-    * label *label181
-    * ucontrol itemDrop :depositItems:block 30
-    * label *label182
-    * sensor *tmp260 @unit @firstItem
-    * op mul *tmp261 *tmp260 :depositItems:cap
-    * sensor *tmp262 :depositItems:block :depositItems:item
-    * jump *label181 greaterThan *tmp261 *tmp262
-    * label *label183
-    * jump *label179 always
-    * label *label178
-    * label *label184
-    * sensor *tmp264 @unit @firstItem
-    * jump *label186 equal *tmp264 null
-    * label *label472
-    * ucontrol itemDrop @air 1000
-    * label *label185
-    * sensor *tmp264 @unit @firstItem
-    * jump *label472 notEqual *tmp264 null
-    * label *label186
-    * label *label179
-    * label *label473
-    * write 0 .display ".transportTarget"
-    * write null .display ".transportItem"
-    * label *label474
-    * label *label176
-    * return :depositItems*retaddr
-    * end
   499 label *label21
   500 op min :mineOre:amount :mineOre:amount 30
   501 set :transportStatus:target :mineOre:amount
 
   569 ucontrol unbind
   570 set :depositItems:block :mineOre:block
   571 set :depositItems:item :mineOre:ore
-    * setaddr :depositItems*retaddr *label207 (h:*label207)
-    * call *label19 *invalid :depositItems*retval (m:*label207) (h:*label207)
-    * label *label207
+  572 label *label545
+  573 label *label546
+  574 write "Depositing..." .display ".status3"
+  575 label *label547
+  576 sensor *tmp256 @unit @firstItem
+  577 jump *label561 notEqual *tmp256 :depositItems:item
+  578 label *label548
+  579 sensor *tmp254 :depositItems:block @x
+  580 sensor *tmp255 :depositItems:block @y
+  581 label *label549
+  582 label *label550
+  583 write "Moving..." .display ".status3"
+  584 label *label551
+  585 label *label552
+  586 ucontrol within *tmp254 *tmp255 6 *tmp242
+  587 jump *label555 notEqual *tmp242 false
+  588 label *label553
+  589 ucontrol approach *tmp254 *tmp255 5.5
+  590 label *label554
+  591 ucontrol within *tmp254 *tmp255 6 *tmp242
+  592 jump *label553 equal *tmp242 false
+  593 label *label555
+  594 label *label556
+  595 label *label557
+  596 sensor :depositItems:cap :depositItems:block @itemCapacity
+  597 label *label558
+  598 ucontrol itemDrop :depositItems:block 30
+  599 label *label559
+  600 sensor *tmp260 @unit @firstItem
+  601 op mul *tmp261 *tmp260 :depositItems:cap
+  602 sensor *tmp262 :depositItems:block :depositItems:item
+  603 jump *label558 greaterThan *tmp261 *tmp262
+  604 label *label560
+  605 jump *label566 always
+  606 label *label561
+  607 label *label562
+  608 sensor *tmp264 @unit @firstItem
+  609 jump *label565 equal *tmp264 null
+  610 label *label563
+  611 ucontrol itemDrop @air 1000
+  612 label *label564
+  613 sensor *tmp264 @unit @firstItem
+  614 jump *label563 notEqual *tmp264 null
+  615 label *label565
+  616 label *label566
+  617 label *label567
+  618 write 0 .display ".transportTarget"
+  619 write null .display ".transportItem"
+  620 label *label568
+  621 label *label569
   622 label *label192
   623 return :mineOre*retaddr
   624 end
 
   697 label *label218
   698 set :depositItems:block .core
   699 set :depositItems:item :fetchBlock:item
-    * setaddr :depositItems*retaddr *label221 (h:*label221)
-    * call *label19 *invalid :depositItems*retval (m:*label221) (h:*label221)
-    * label *label221
+  700 label *label570
+  701 label *label571
+  702 write "Depositing..." .display ".status3"
+  703 label *label572
+  704 sensor *tmp256 @unit @firstItem
+  705 jump *label586 notEqual *tmp256 :depositItems:item
+  706 label *label573
+  707 sensor *tmp254 :depositItems:block @x
+  708 sensor *tmp255 :depositItems:block @y
+  709 label *label574
+  710 label *label575
+  711 write "Moving..." .display ".status3"
+  712 label *label576
+  713 label *label577
+  714 ucontrol within *tmp254 *tmp255 6 *tmp242
+  715 jump *label580 notEqual *tmp242 false
+  716 label *label578
+  717 ucontrol approach *tmp254 *tmp255 5.5
+  718 label *label579
+  719 ucontrol within *tmp254 *tmp255 6 *tmp242
+  720 jump *label578 equal *tmp242 false
+  721 label *label580
+  722 label *label581
+  723 label *label582
+  724 sensor :depositItems:cap :depositItems:block @itemCapacity
+  725 label *label583
+  726 ucontrol itemDrop :depositItems:block 30
+  727 label *label584
+  728 sensor *tmp260 @unit @firstItem
+  729 op mul *tmp261 *tmp260 :depositItems:cap
+  730 sensor *tmp262 :depositItems:block :depositItems:item
+  731 jump *label583 greaterThan *tmp261 *tmp262
+  732 label *label585
+  733 jump *label591 always
+  734 label *label586
+  735 label *label587
+  736 sensor *tmp264 @unit @firstItem
+  737 jump *label590 equal *tmp264 null
+  738 label *label588
+  739 ucontrol itemDrop @air 1000
+  740 label *label589
+  741 sensor *tmp264 @unit @firstItem
+  742 jump *label588 notEqual *tmp264 null
+  743 label *label590
+  744 label *label591
+  745 label *label592
+  746 write 0 .display ".transportTarget"
+  747 write null .display ".transportItem"
+  748 label *label593
+  749 label *label594
   750 label *label211
   751 return :fetchBlock*retaddr
   752 end
 
   876 label *label467
   877 set :depositItems:block .thoriumGenerator
   878 set :depositItems:item @coal
-    * setaddr :depositItems*retaddr *label468 (h:*label468)
-    * call *label19 *invalid :depositItems*retval (m:*label468) (h:*label468)
-    * label *label468
+  879 label *label595
+  880 label *label596
+  881 write "Depositing..." .display ".status3"
+  882 label *label597
+  883 sensor *tmp256 @unit @firstItem
+  884 jump *label611 notEqual *tmp256 :depositItems:item
+  885 label *label598
+  886 sensor *tmp254 :depositItems:block @x
+  887 sensor *tmp255 :depositItems:block @y
+  888 label *label599
+  889 label *label600
+  890 write "Moving..." .display ".status3"
+  891 label *label601
+  892 label *label602
+  893 ucontrol within *tmp254 *tmp255 6 *tmp242
+  894 jump *label605 notEqual *tmp242 false
+  895 label *label603
+  896 ucontrol approach *tmp254 *tmp255 5.5
+  897 label *label604
+  898 ucontrol within *tmp254 *tmp255 6 *tmp242
+  899 jump *label603 equal *tmp242 false
+  900 label *label605
+  901 label *label606
+  902 label *label607
+  903 sensor :depositItems:cap :depositItems:block @itemCapacity
+  904 label *label608
+  905 ucontrol itemDrop :depositItems:block 30
+  906 label *label609
+  907 sensor *tmp260 @unit @firstItem
+  908 op mul *tmp261 *tmp260 :depositItems:cap
+  909 sensor *tmp262 :depositItems:block :depositItems:item
+  910 jump *label608 greaterThan *tmp261 *tmp262
+  911 label *label610
+  912 jump *label616 always
+  913 label *label611
+  914 label *label612
+  915 sensor *tmp264 @unit @firstItem
+  916 jump *label615 equal *tmp264 null
+  917 label *label613
+  918 ucontrol itemDrop @air 1000
+  919 label *label614
+  920 sensor *tmp264 @unit @firstItem
+  921 jump *label613 notEqual *tmp264 null
+  922 label *label615
+  923 label *label616
+  924 label *label617
+  925 write 0 .display ".transportTarget"
+  926 write null .display ".transportItem"
+  927 label *label618
+  928 label *label619
   929 label *label469
   930 label *label245
   931 set :fetchBlock:block .thoriumContainer

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   498 end
   499 label *label21
   500 op min :mineOre:amount :mineOre:amount 30
-    * set :transportStatus:target :mineOre:amount
   501 label *label475
   502 write :mineOre:amount .display ".transportTarget"
   503 write :mineOre:ore .display ".transportItem"
 
   573 write "Depositing..." .display ".status3"
   574 label *label547
   575 sensor *tmp256 @unit @firstItem
-    * jump *label561 notEqual *tmp256 :depositItems:item
+  576 jump *label561 notEqual *tmp256 :mineOre:ore
   577 label *label548
-    * sensor *tmp254 :depositItems:block @x
-    * sensor *tmp255 :depositItems:block @y
+  578 sensor *tmp254 :mineOre:block @x
+  579 sensor *tmp255 :mineOre:block @y
   580 label *label549
   581 label *label550
   582 write "Moving..." .display ".status3"
 
   592 label *label555
   593 label *label556
   594 label *label557
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  595 sensor :depositItems:cap :mineOre:block @itemCapacity
   596 label *label558
-    * ucontrol itemDrop :depositItems:block 30
+  597 ucontrol itemDrop :mineOre:block 30
   598 label *label559
   599 sensor *tmp260 @unit @firstItem
   600 op mul *tmp261 *tmp260 :depositItems:cap
-    * sensor *tmp262 :depositItems:block :depositItems:item
+  601 sensor *tmp262 :mineOre:block :mineOre:ore
   602 jump *label558 greaterThan *tmp261 *tmp262
   603 label *label560
   604 jump *label566 always
 
   701 write "Depositing..." .display ".status3"
   702 label *label572
   703 sensor *tmp256 @unit @firstItem
-    * jump *label586 notEqual *tmp256 :depositItems:item
+  704 jump *label586 notEqual *tmp256 :fetchBlock:item
   705 label *label573
-    * sensor *tmp254 :depositItems:block @x
-    * sensor *tmp255 :depositItems:block @y
+  706 sensor *tmp254 .core @x
+  707 sensor *tmp255 .core @y
   708 label *label574
   709 label *label575
   710 write "Moving..." .display ".status3"
 
   720 label *label580
   721 label *label581
   722 label *label582
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  723 sensor :depositItems:cap .core @itemCapacity
   724 label *label583
-    * ucontrol itemDrop :depositItems:block 30
+  725 ucontrol itemDrop .core 30
   726 label *label584
   727 sensor *tmp260 @unit @firstItem
   728 op mul *tmp261 *tmp260 :depositItems:cap
-    * sensor *tmp262 :depositItems:block :depositItems:item
+  729 sensor *tmp262 .core :fetchBlock:item
   730 jump *label583 greaterThan *tmp261 *tmp262
   731 label *label585
   732 jump *label591 always
 
   880 write "Depositing..." .display ".status3"
   881 label *label597
   882 sensor *tmp256 @unit @firstItem
-    * jump *label611 notEqual *tmp256 :depositItems:item
+  883 jump *label611 notEqual *tmp256 @coal
   884 label *label598
-    * sensor *tmp254 :depositItems:block @x
-    * sensor *tmp255 :depositItems:block @y
+  885 sensor *tmp254 .thoriumGenerator @x
+  886 sensor *tmp255 .thoriumGenerator @y
   887 label *label599
   888 label *label600
   889 write "Moving..." .display ".status3"
 
   899 label *label605
   900 label *label606
   901 label *label607
-    * sensor :depositItems:cap :depositItems:block @itemCapacity
+  902 sensor :depositItems:cap .thoriumGenerator @itemCapacity
   903 label *label608
-    * ucontrol itemDrop :depositItems:block 30
+  904 ucontrol itemDrop .thoriumGenerator 30
   905 label *label609
   906 sensor *tmp260 @unit @firstItem
   907 op mul *tmp261 *tmp260 :depositItems:cap
-    * sensor *tmp262 :depositItems:block :depositItems:item
+  908 sensor *tmp262 .thoriumGenerator @coal
   909 jump *label608 greaterThan *tmp261 *tmp262
   910 label *label610
   911 jump *label616 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   566 jump *label200 lessThan *tmp282 :mineOre:amount
   567 label *label202
   568 ucontrol unbind
-    * set :depositItems:block :mineOre:block
-    * set :depositItems:item :mineOre:ore
   569 label *label545
   570 label *label546
   571 write "Depositing..." .display ".status3"
 
   692 op land *tmp297 *tmp295 *tmp296
   693 jump *label216 notEqual *tmp297 false
   694 label *label218
-    * set :depositItems:block .core
-    * set :depositItems:item :fetchBlock:item
   695 label *label570
   696 label *label571
   697 write "Depositing..." .display ".status3"
 
   869 op land *tmp313 *tmp311 *tmp312
   870 jump *label463 notEqual *tmp313 false
   871 label *label467
-    * set :depositItems:block .thoriumGenerator
-    * set :depositItems:item @coal
   872 label *label595
   873 label *label596
   874 write "Depositing..." .display ".status3"

Modifications by Inline function call at CoreBuilder.mnd:207:9 (+10 instructions):
 
   808 jump *label244 greaterThanEq *tmp360 50
   809 set :supplyBlock:block .thoriumGenerator
   810 set :supplyBlock:ore @coal
-    * setaddr :supplyBlock*retaddr *label246 (h:*label246)
-    * call *label24 *invalid :supplyBlock*retval (m:*label246) (h:*label246)
-    * label *label246
+  811 label *label620
+  812 label *label621
+  813 write "Supplying " .display ".status2"
+  814 write :supplyBlock:ore .display ".item2"
+  815 write :supplyBlock:block .display ".block2"
+  816 label *label622
+  817 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
+  818 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
+  819 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
+  820 jump *label624 lessThanEq :supplyBlock:missing 0
+  821 set :mineOre:ore :supplyBlock:ore
+  822 set :mineOre:amount :supplyBlock:blockCapacity
+  823 set :mineOre:block :supplyBlock:block
+  824 setaddr :mineOre*retaddr *label623 (h:*label623)
+  825 call *label21 *invalid :mineOre*retval (m:*label623) (h:*label623)
+  826 label *label623
+  827 label *label624
+  828 label *label625
+  829 label *label626
   830 jump *label245 always
   831 label *label244
   832 label *label458

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   811 label *label620
   812 label *label621
   813 write "Supplying " .display ".status2"
-    * write :supplyBlock:ore .display ".item2"
-    * write :supplyBlock:block .display ".block2"
+  814 write @coal .display ".item2"
+  815 write .thoriumGenerator .display ".block2"
   816 label *label622
-    * sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
-    * sensor *tmp299 :supplyBlock:block :supplyBlock:ore
+  817 sensor :supplyBlock:blockCapacity .thoriumGenerator @itemCapacity
+  818 sensor *tmp299 .thoriumGenerator @coal
   819 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
   820 jump *label624 lessThanEq :supplyBlock:missing 0
-    * set :mineOre:ore :supplyBlock:ore
+  821 set :mineOre:ore @coal
   822 set :mineOre:amount :supplyBlock:blockCapacity
-    * set :mineOre:block :supplyBlock:block
+  823 set :mineOre:block .thoriumGenerator
   824 setaddr :mineOre*retaddr *label623 (h:*label623)
   825 call *label21 *invalid :mineOre*retval (m:*label623) (h:*label623)
   826 label *label623

Modifications by Replicate loop condition at CoreBuilder.mnd:497:5 (+1 instructions):
 
   255 label *label94
   256 read *tmp102 .controller ".polys"
   257 jump *label96 greaterThanEq *tmp102 3
+  258 label *label627
   259 setaddr :supplyBase*retaddr *label97 (h:*label97)
   260 call *label32 *invalid :supplyBase*retval (m:*label97) (h:*label97)
   261 label *label97
   262 label *label95
-    * jump *label94 always
+  263 read *tmp102 .controller ".polys"
+  264 jump *label627 lessThan *tmp102 3
   265 label *label96
   266 write 3 .controller ".flareTarget"
   267 write 3 processor1 ".flareTarget"

Modifications by Replicate loop condition at CoreBuilder.mnd:502:5 (+1 instructions):
 
   269 label *label99
   270 read *tmp100 .controller ".flares"
   271 jump *label101 greaterThanEq *tmp100 2
+  272 label *label628
   273 setaddr :supplyBase*retaddr *label102 (h:*label102)
   274 call *label32 *invalid :supplyBase*retval (m:*label102) (h:*label102)
   275 label *label102
   276 label *label100
-    * jump *label99 always
+  277 read *tmp100 .controller ".flares"
+  278 jump *label628 lessThan *tmp100 2
   279 label *label101
   280 set .graphiteSurplus 100
   281 write 5 .controller ".monoTarget"

Modifications by Replicate loop condition at CoreBuilder.mnd:521:5 (+1 instructions):
 
   417 label *label126
   418 read *tmp102 .controller ".polys"
   419 jump *label128 greaterThanEq *tmp102 5
+  420 label *label629
   421 setaddr :supplyBase*retaddr *label129 (h:*label129)
   422 call *label32 *invalid :supplyBase*retval (m:*label129) (h:*label129)
   423 label *label129
   424 label *label127
-    * jump *label126 always
+  425 read *tmp102 .controller ".polys"
+  426 jump *label629 lessThan *tmp102 5
   427 label *label128
   428 set :buildBlockFromCfg:cfg "+(###A<###$G"
   429 set :buildBlockFromCfg:config @silicon

Modifications by Replicate loop condition at CoreBuilder.mnd:532:5 (+1 instructions):
 
   449 label *label135
   450 read *tmp103 .controller ".megas"
   451 jump *label137 greaterThanEq *tmp103 1
+  452 label *label630
   453 setaddr :supplyBase*retaddr *label138 (h:*label138)
   454 call *label32 *invalid :supplyBase*retval (m:*label138) (h:*label138)
   455 label *label138
   456 label *label136
-    * jump *label135 always
+  457 read *tmp103 .controller ".megas"
+  458 jump *label630 lessThan *tmp103 1
   459 label *label137
   460 control enabled processor7 false
   461 control enabled processor8 false

Modifications by Inline function call at CoreBuilder.mnd:168:17 (+6 instructions):
 
  1062 write "Goal 5: supplying generator" .display ".status1"
  1063 label *label416
  1064 set :mineOre.1:ore @coal
-    * setaddr :mineOre.1*retaddr *label288 (h:*label288)
-    * call *label22 *invalid :mineOre.1*retval (m:*label288) (h:*label288)
-    * label *label288
+ 1065 label *label631
+ 1066 label *label632
+ 1067 write "Mining " .display ".status2"
+ 1068 write :mineOre.1:ore .display ".item2"
+ 1069 write "core" .display ".block2"
+ 1070 label *label633
+ 1071 set :mineOre:ore :mineOre.1:ore
+ 1072 set :mineOre:amount 30
+ 1073 set :mineOre:block .core
+ 1074 setaddr :mineOre*retaddr *label634 (h:*label634)
+ 1075 call *label21 *invalid :mineOre*retval (m:*label634) (h:*label634)
+ 1076 label *label634
+ 1077 label *label635
  1078 jump *label286 always
  1079 label *label285
  1080 sensor *tmp403 .core @silicon

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1065 label *label631
  1066 label *label632
  1067 write "Mining " .display ".status2"
-    * write :mineOre.1:ore .display ".item2"
+ 1068 write @coal .display ".item2"
  1069 write "core" .display ".block2"
  1070 label *label633
-    * set :mineOre:ore :mineOre.1:ore
+ 1071 set :mineOre:ore @coal
  1072 set :mineOre:amount 30
  1073 set :mineOre:block .core
  1074 setaddr :mineOre*retaddr *label634 (h:*label634)

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-6 instructions):
 
    87 read *tmp154 processor5 ":buildFirstTitaniumDrillAt*finished"
    88 jump *label57 equal *tmp154 false
    89 read *tmp137 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * jump *label51 always
    90 label *label51
    91 set .titaniumDrill *tmp137
    92 write *tmp137 processor1 ".titaniumDrill"
 
  1049 sensor *tmp391 .core @titanium
  1050 op sub *tmp392 .targetTitanium *tmp391
  1051 op min *tmp390 7 *tmp392
-    * jump *label280 always
  1052 label *label280
  1053 sensor *tmp394 .titaniumDrill @titanium
  1054 jump *label281 greaterThanEq *tmp394 *tmp390
 
  1085 set :mineOre.1:ore @sand
  1086 jump *label293 greaterThanEq :supplyBase0:coal :supplyBase0:sand
  1087 set :mineOre.1:ore @coal
-    * jump *label293 always
  1088 label *label293
  1089 setaddr :mineOre.1*retaddr *label294 (h:*label294)
  1090 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
 
  1132 set :mineOre.1:ore @sand
  1133 jump *label309 greaterThan :supplyBase0:coal.1 :supplyBase0:sand.1
  1134 set :mineOre.1:ore @coal
-    * jump *label309 always
  1135 label *label309
  1136 setaddr :mineOre.1*retaddr *label310 (h:*label310)
  1137 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
 
  1305 read *tmp466 .blockBuilder ":buildBlockAt*finished"
  1306 jump *label345 equal *tmp466 false
  1307 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * jump *label343 always
  1308 label *label343
  1309 return :buildBlock*retaddr
  1310 end
 
  1364 call *label34 *invalid :buildBlock*retval (m:*label353) (h:*label353)
  1365 label *label353
  1366 set :buildBlockFromCfg*retval :buildBlock*retval
-    * jump *label351 always
  1367 label *label351
  1368 return :buildBlockFromCfg*retaddr
  1369 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
  1163 label *label33
  1164 label *label374
  1165 op sign *tmp424 :meetTarget:copper
-    * op add :meetTarget:count 0 *tmp424
+ 1166 set :meetTarget:count *tmp424
  1167 label *label375
  1168 label *label378
  1169 op sign *tmp424 :meetTarget:lead

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1162 end
  1163 label *label33
  1164 label *label374
-    * op sign *tmp424 :meetTarget:copper
-    * set :meetTarget:count *tmp424
+ 1165 op sign :meetTarget:count :meetTarget:copper
  1166 label *label375
  1167 label *label378
  1168 op sign *tmp424 :meetTarget:lead

Modifications by Inline function call at CoreBuilder.mnd:572:9 (+8 instructions):
 
   480 label *label144
   481 op sub :lineUpUnits:y @thisy 6
   482 set :lineUpUnits:unit @mega
-    * setaddr :lineUpUnits*retaddr *label147 (h:*label147)
-    * call *label41 *invalid :lineUpUnits*retval (m:*label147) (h:*label147)
-    * label *label147
+  483 label *label636
+  484 ubind :lineUpUnits:unit
+  485 set :lineUpUnits:firstUnit @unit
+  486 label *label637
+  487 sensor :lineUpUnits:x @unit @flag
+  488 ucontrol itemDrop @air 1000
+  489 ucontrol move :lineUpUnits:x :lineUpUnits:y
+  490 sensor *tmp478 @unit @mining
+  491 jump *label638 equal *tmp478 false
+  492 ucontrol stop
+  493 label *label638
+  494 label *label639
+  495 ubind :lineUpUnits:unit
+  496 label *label640
+  497 jump *label637 notEqual @unit :lineUpUnits:firstUnit
+  498 label *label641
+  499 label *label642
   500 op sub :lineUpUnits:y @thisy 10
   501 set :lineUpUnits:unit @poly
   502 setaddr :lineUpUnits*retaddr *label148 (h:*label148)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
   481 op sub :lineUpUnits:y @thisy 6
   482 set :lineUpUnits:unit @mega
   483 label *label636
-    * ubind :lineUpUnits:unit
+  484 ubind @mega
   485 set :lineUpUnits:firstUnit @unit
   486 label *label637
   487 sensor :lineUpUnits:x @unit @flag
 
   492 ucontrol stop
   493 label *label638
   494 label *label639
-    * ubind :lineUpUnits:unit
+  495 ubind @mega
   496 label *label640
   497 jump *label637 notEqual @unit :lineUpUnits:firstUnit
   498 label *label641

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
   479 label *label143
   480 label *label144
   481 op sub :lineUpUnits:y @thisy 6
-    * set :lineUpUnits:unit @mega
   482 label *label636
   483 ubind @mega
   484 set :lineUpUnits:firstUnit @unit

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    17 ubind @poly
    18 set .builder @unit
    19 ulocate building core false @copper .coreX .coreY 0 .core
-    * label *label43
    20 jump *label42 equal .core null
-    * label *label44
    21 set :buildBlockFromCfg.1:cfg "#'+nA######%#"
    22 setaddr :buildBlockFromCfg.1*retaddr *label45 (h:*label45)
    23 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label45) (h:*label45)
 
    69 read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocation:dy"
    70 read :buildFirstTitaniumDrill:result processor4 ":findDrillLocation*retval"
    71 jump *label54 notEqual :buildFirstTitaniumDrill:result false
-    * label *label489
    72 set .ERROR "Cannot locate spot for titanium drill"
    73 stop
-    * label *label490
    74 label *label54
-    * label *label55
    75 write @pneumatic-drill processor1 ".nextBlock"
    76 write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTitaniumDrillAt:x"
    77 write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTitaniumDrillAt:y"
 
    82 read *tmp154 processor5 ":buildFirstTitaniumDrillAt*finished"
    83 jump *label57 equal *tmp154 false
    84 read *tmp137 processor5 ":buildFirstTitaniumDrillAt*retval"
-    * label *label51
    85 set .titaniumDrill *tmp137
    86 write *tmp137 processor1 ".titaniumDrill"
    87 set :buildBlockFromCfg.1:cfg "*,###A<###$*"
 
   130 write :buildBlockFromCfg.1*retval processor1 ".airFactory"
   131 write 1 .controller ".flareTarget"
   132 write 1 processor1 ".flareTarget"
-    * label *label65
   133 write 3 .controller ".monoTarget"
   134 write 3 processor1 ".monoTarget"
-    * label *label66
   135 write 85 .controller ".pressTarget"
   136 write 150 .controller ".smelterTarget"
   137 write 30 .controller ".kilnTarget"
 
   148 jump *label72 greaterThanEq *tmp163 300
   149 jump *label70 always
   150 label *label72
-    * label *label73
-    * label *label69
   151 read *tmp101 .controller ".monos"
   152 jump *label68 lessThan *tmp101 3
   153 label *label70
 
   219 set .metaglassSurplus 200
   220 write 6 .controller ".polyTarget"
   221 write 6 processor1 ".polyTarget"
-    * label *label88
   222 set :buildBlockFromCfg.1:cfg "%.)A<######%C"
   223 setaddr :buildBlockFromCfg.1*retaddr *label89 (h:*label89)
   224 call *label37 *invalid :buildBlockFromCfg.1*retval (m:*label89) (h:*label89)
 
   240 setaddr :buildUnits*retaddr *label93 (h:*label93)
   241 call *label39 *invalid :buildUnits*retval (m:*label93) (h:*label93)
   242 label *label93
-    * label *label94
   243 read *tmp102 .controller ".polys"
   244 jump *label96 greaterThanEq *tmp102 3
   245 label *label627
   246 setaddr :supplyBase*retaddr *label97 (h:*label97)
   247 call *label32 *invalid :supplyBase*retval (m:*label97) (h:*label97)
   248 label *label97
-    * label *label95
   249 read *tmp102 .controller ".polys"
   250 jump *label627 lessThan *tmp102 3
   251 label *label96
   252 write 3 .controller ".flareTarget"
   253 write 3 processor1 ".flareTarget"
-    * label *label98
-    * label *label99
   254 read *tmp100 .controller ".flares"
   255 jump *label101 greaterThanEq *tmp100 2
   256 label *label628
   257 setaddr :supplyBase*retaddr *label102 (h:*label102)
   258 call *label32 *invalid :supplyBase*retval (m:*label102) (h:*label102)
   259 label *label102
-    * label *label100
   260 read *tmp100 .controller ".flares"
   261 jump *label628 lessThan *tmp100 2
   262 label *label101
   263 set .graphiteSurplus 100
   264 write 5 .controller ".monoTarget"
   265 write 5 processor1 ".monoTarget"
-    * label *label103
   266 write @ore-titanium processor1 ".nextBlock"
   267 wait 0.000000001
   268 ubind @flare
 
   287 jump *label105 equal *tmp198 false
   288 write false processor4 ":stopLocation*finished"
   289 write 3 processor4 "@counter"
-    * label *label104
   290 write null processor1 ".nextBlock"
   291 write .coreX processor4 ":layoutThoriumDrill:x"
   292 write .coreY processor4 ":layoutThoriumDrill:y"
 
   308 jump *label109 equal *tmp205 false
   309 read :buildThoriumDrill:result processor4 ":layoutThoriumDrill*retval"
   310 jump *label110 notEqual :buildThoriumDrill:result false
-    * label *label491
   311 set .ERROR "Cannot locate spot for thorium drill"
   312 stop
-    * label *label492
   313 label *label110
-    * label *label111
   314 write @laser-drill processor5 ":buildBlockAt:block"
   315 read *tmp56 processor4 ".drillX"
   316 write *tmp56 processor5 ":buildBlockAt:x"
 
   377 jump *label122 notEqual :buildRemoteBlock*retval null
   378 set .thoriumContainer .thoriumDrill
   379 label *label122
-    * label *label123
   380 write .thoriumDrill processor1 ".thoriumDrill"
   381 write .thoriumContainer processor1 ".thoriumContainer"
   382 write .thoriumContainer processor3 ":setThoriumContainer:container"
 
   386 wait 1e-15
   387 read *tmp228 processor3 ":setThoriumContainer*finished"
   388 jump *label124 equal *tmp228 false
-    * label *label106
   389 write null processor1 ".nextBlock"
   390 write 1 .controller ".megaTarget"
   391 write 1 processor1 ".megaTarget"
-    * label *label125
-    * label *label126
   392 read *tmp102 .controller ".polys"
   393 jump *label128 greaterThanEq *tmp102 5
   394 label *label629
   395 setaddr :supplyBase*retaddr *label129 (h:*label129)
   396 call *label32 *invalid :supplyBase*retval (m:*label129) (h:*label129)
   397 label *label129
-    * label *label127
   398 read *tmp102 .controller ".polys"
   399 jump *label629 lessThan *tmp102 5
   400 label *label128
 
   414 label *label133
   415 write :buildBlockFromCfg.1*retval .controller ".multiReconstructor"
   416 write :buildBlockFromCfg.1*retval processor1 ".multiReconstructor"
-    * label *label132
   417 set .metaglassSurplus 50
   418 setaddr :buildUnits*retaddr *label134 (h:*label134)
   419 call *label39 *invalid :buildUnits*retval (m:*label134) (h:*label134)
   420 label *label134
-    * label *label135
   421 read *tmp103 .controller ".megas"
   422 jump *label137 greaterThanEq *tmp103 1
   423 label *label630
   424 setaddr :supplyBase*retaddr *label138 (h:*label138)
   425 call *label32 *invalid :supplyBase*retval (m:*label138) (h:*label138)
   426 label *label138
-    * label *label136
   427 read *tmp103 .controller ".megas"
   428 jump *label630 lessThan *tmp103 1
   429 label *label137
 
   450 label *label143
   451 label *label144
   452 op sub :lineUpUnits:y @thisy 6
-    * label *label636
   453 ubind @mega
   454 set :lineUpUnits:firstUnit @unit
   455 label *label637
 
   460 jump *label638 equal *tmp478 false
   461 ucontrol stop
   462 label *label638
-    * label *label639
   463 ubind @mega
-    * label *label640
   464 jump *label637 notEqual @unit :lineUpUnits:firstUnit
-    * label *label641
-    * label *label642
   465 op sub :lineUpUnits:y @thisy 10
   466 set :lineUpUnits:unit @poly
   467 setaddr :lineUpUnits*retaddr *label148 (h:*label148)
 
   477 setaddr :lineUpUnits*retaddr *label150 (h:*label150)
   478 call *label41 *invalid :lineUpUnits*retval (m:*label150) (h:*label150)
   479 label *label150
-    * label *label145
   480 jump *label144 always
-    * label *label146
-    * label *label139
   481 end
   482 label *label21
   483 op min :mineOre:amount :mineOre:amount 30
-    * label *label475
   484 write :mineOre:amount .display ".transportTarget"
   485 write :mineOre:ore .display ".transportItem"
-    * label *label476
-    * label *label453
   486 ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y *tmp266 0
   487 jump *label455 notEqual *tmp266 false
-    * label *label493
   488 set .ERROR "Cannot locate ore"
   489 stop
-    * label *label494
   490 label *label455
-    * label *label456
-    * label *label457
-    * label *label495
-    * label *label496
   491 write "Moving..." .display ".status3"
-    * label *label497
   492 label *label498
   493 sensor *tmp247 @unit @firstItem
   494 jump *label499 equal *tmp247 null
   495 ucontrol itemDrop @air 1000
   496 label *label499
-    * label *label500
   497 ucontrol approach :locateOre:x :locateOre:y 5.5
-    * label *label501
   498 ucontrol within :locateOre:x :locateOre:y 6 *tmp250
   499 jump *label498 equal *tmp250 false
-    * label *label502
-    * label *label503
   500 sensor *tmp271 @unit @firstItem
   501 jump *label196 equal *tmp271 :mineOre:ore
-    * label *label522
-    * label *label523
   502 sensor *tmp252 @unit @firstItem
   503 jump *label526 equal *tmp252 null
   504 label *label524
   505 ucontrol itemDrop @air 1000
-    * label *label525
   506 sensor *tmp252 @unit @firstItem
   507 jump *label524 notEqual *tmp252 null
   508 label *label526
-    * label *label527
   509 label *label196
-    * label *label197
-    * label *label435
   510 write "Mining..." .display ".status3"
-    * label *label436
   511 op add :mineOre:stop @second 10
   512 label *label200
   513 sensor :mineOre:item @unit @firstItem
 
   517 jump *label203 equal *tmp278 false
   518 jump *label202 always
   519 label *label203
-    * label *label204
   520 ucontrol mine :locateOre:x :locateOre:y
   521 jump *label205 lessThanEq @second :mineOre:stop
   522 jump *label202 always
   523 label *label205
-    * label *label206
-    * label *label201
   524 sensor *tmp282 @unit @totalItems
   525 jump *label200 lessThan *tmp282 :mineOre:amount
   526 label *label202
   527 ucontrol unbind
-    * label *label545
-    * label *label546
   528 write "Depositing..." .display ".status3"
-    * label *label547
   529 sensor *tmp256 @unit @firstItem
   530 jump *label561 notEqual *tmp256 :mineOre:ore
-    * label *label548
   531 sensor *tmp254 :mineOre:block @x
   532 sensor *tmp255 :mineOre:block @y
-    * label *label549
-    * label *label550
   533 write "Moving..." .display ".status3"
-    * label *label551
-    * label *label552
   534 ucontrol within *tmp254 *tmp255 6 *tmp242
   535 jump *label555 notEqual *tmp242 false
   536 label *label553
   537 ucontrol approach *tmp254 *tmp255 5.5
-    * label *label554
   538 ucontrol within *tmp254 *tmp255 6 *tmp242
   539 jump *label553 equal *tmp242 false
   540 label *label555
-    * label *label556
-    * label *label557
   541 sensor :depositItems:cap :mineOre:block @itemCapacity
   542 label *label558
   543 ucontrol itemDrop :mineOre:block 30
-    * label *label559
   544 sensor *tmp260 @unit @firstItem
   545 op mul *tmp261 *tmp260 :depositItems:cap
   546 sensor *tmp262 :mineOre:block :mineOre:ore
   547 jump *label558 greaterThan *tmp261 *tmp262
-    * label *label560
   548 jump *label566 always
   549 label *label561
-    * label *label562
   550 sensor *tmp264 @unit @firstItem
   551 jump *label565 equal *tmp264 null
   552 label *label563
   553 ucontrol itemDrop @air 1000
-    * label *label564
   554 sensor *tmp264 @unit @firstItem
   555 jump *label563 notEqual *tmp264 null
   556 label *label565
   557 label *label566
-    * label *label567
   558 write 0 .display ".transportTarget"
   559 write null .display ".transportItem"
-    * label *label568
-    * label *label569
-    * label *label192
   560 return :mineOre*retaddr
   561 end
   562 label *label22
-    * label *label483
   563 write "Mining " .display ".status2"
   564 write :mineOre.1:ore .display ".item2"
   565 write "core" .display ".block2"
-    * label *label484
   566 set :mineOre:ore :mineOre.1:ore
   567 set :mineOre:amount 30
   568 set :mineOre:block .core
   569 setaddr :mineOre*retaddr *label210 (h:*label210)
   570 call *label21 *invalid :mineOre*retval (m:*label210) (h:*label210)
   571 label *label210
-    * label *label208
   572 return :mineOre.1*retaddr
   573 end
   574 label *label23
   575 sensor *tmp285 :fetchBlock:block @itemCapacity
   576 op min :transportStatus:target *tmp285 30
-    * label *label477
   577 write :transportStatus:target .display ".transportTarget"
   578 write :fetchBlock:item .display ".transportItem"
-    * label *label478
-    * label *label481
   579 write "Fetching " .display ".status2"
   580 write :fetchBlock:item .display ".item2"
   581 write :fetchBlock:block .display ".block2"
-    * label *label482
   582 sensor *tmp287 :fetchBlock:block @x
   583 sensor *tmp288 :fetchBlock:block @y
-    * label *label504
-    * label *label505
   584 write "Moving..." .display ".status3"
-    * label *label506
   585 label *label507
   586 sensor *tmp247 @unit @firstItem
   587 jump *label508 equal *tmp247 null
   588 ucontrol itemDrop @air 1000
   589 label *label508
-    * label *label509
   590 ucontrol approach *tmp287 *tmp288 5.5
-    * label *label510
   591 ucontrol within *tmp287 *tmp288 6 *tmp250
   592 jump *label507 equal *tmp250 false
-    * label *label511
-    * label *label512
-    * label *label528
-    * label *label529
   593 sensor *tmp252 @unit @firstItem
   594 jump *label532 equal *tmp252 null
   595 label *label530
   596 ucontrol itemDrop @air 1000
-    * label *label531
   597 sensor *tmp252 @unit @firstItem
   598 jump *label530 notEqual *tmp252 null
   599 label *label532
-    * label *label533
   600 label *label216
   601 ucontrol itemTake :fetchBlock:block :fetchBlock:item 30
   602 sensor :fetchBlock:unitItem @unit @firstItem
 
   606 jump *label219 equal *tmp292 false
   607 ucontrol itemDrop @air 1000
   608 label *label219
-    * label *label220
-    * label *label217
   609 sensor *tmp294 @unit :fetchBlock:item
   610 op lessThan *tmp295 *tmp294 30
   611 sensor *tmp296 :fetchBlock:block :fetchBlock:item
   612 op land *tmp297 *tmp295 *tmp296
   613 jump *label216 notEqual *tmp297 false
-    * label *label218
-    * label *label570
-    * label *label571
   614 write "Depositing..." .display ".status3"
-    * label *label572
   615 sensor *tmp256 @unit @firstItem
   616 jump *label586 notEqual *tmp256 :fetchBlock:item
-    * label *label573
   617 sensor *tmp254 .core @x
   618 sensor *tmp255 .core @y
-    * label *label574
-    * label *label575
   619 write "Moving..." .display ".status3"
-    * label *label576
-    * label *label577
   620 ucontrol within *tmp254 *tmp255 6 *tmp242
   621 jump *label580 notEqual *tmp242 false
   622 label *label578
   623 ucontrol approach *tmp254 *tmp255 5.5
-    * label *label579
   624 ucontrol within *tmp254 *tmp255 6 *tmp242
   625 jump *label578 equal *tmp242 false
   626 label *label580
-    * label *label581
-    * label *label582
   627 sensor :depositItems:cap .core @itemCapacity
   628 label *label583
   629 ucontrol itemDrop .core 30
-    * label *label584
   630 sensor *tmp260 @unit @firstItem
   631 op mul *tmp261 *tmp260 :depositItems:cap
   632 sensor *tmp262 .core :fetchBlock:item
   633 jump *label583 greaterThan *tmp261 *tmp262
-    * label *label585
   634 jump *label591 always
   635 label *label586
-    * label *label587
   636 sensor *tmp264 @unit @firstItem
   637 jump *label590 equal *tmp264 null
   638 label *label588
   639 ucontrol itemDrop @air 1000
-    * label *label589
   640 sensor *tmp264 @unit @firstItem
   641 jump *label588 notEqual *tmp264 null
   642 label *label590
   643 label *label591
-    * label *label592
   644 write 0 .display ".transportTarget"
   645 write null .display ".transportItem"
-    * label *label593
-    * label *label594
-    * label *label211
   646 return :fetchBlock*retaddr
   647 end
   648 label *label24
-    * label *label485
   649 write "Supplying " .display ".status2"
   650 write :supplyBlock:ore .display ".item2"
   651 write :supplyBlock:block .display ".block2"
-    * label *label486
   652 sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCapacity
   653 sensor *tmp299 :supplyBlock:block :supplyBlock:ore
   654 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
 
   660 call *label21 *invalid :mineOre*retval (m:*label226) (h:*label226)
   661 label *label226
   662 label *label224
-    * label *label225
-    * label *label222
   663 return :supplyBlock*retaddr
   664 end
   665 label *label31
 
   688 op sub :unpackCfg:rotation *tmp348 35
   689 read *tmp354 :unpackCfg:cfg 12
   690 op sub :unpackCfg:ind *tmp354 35
-    * label *label238
   691 return :unpackCfg*retaddr
   692 end
   693 label *label32
 
   696 op max *tmp358 0 *tmp357
   697 write *tmp358 processor8 ".monoSandTarget"
   698 jump *label240 equal .thoriumContainer false
-    * label *label403
   699 write "Phase 2: servicing thorium drill" .display ".status1"
-    * label *label404
   700 sensor *tmp360 .core @coal
   701 jump *label244 greaterThanEq *tmp360 50
   702 set :supplyBlock:block .thoriumGenerator
   703 set :supplyBlock:ore @coal
-    * label *label620
-    * label *label621
   704 write "Supplying " .display ".status2"
   705 write @coal .display ".item2"
   706 write .thoriumGenerator .display ".block2"
-    * label *label622
   707 sensor :supplyBlock:blockCapacity .thoriumGenerator @itemCapacity
   708 sensor *tmp299 .thoriumGenerator @coal
   709 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
 
   715 call *label21 *invalid :mineOre*retval (m:*label623) (h:*label623)
   716 label *label623
   717 label *label624
-    * label *label625
-    * label *label626
   718 jump *label245 always
   719 label *label244
-    * label *label458
   720 sensor *tmp303 .thoriumGenerator @itemCapacity
   721 op min :transportStatus:target *tmp303 30
-    * label *label479
   722 write :transportStatus:target .display ".transportTarget"
   723 write @coal .display ".transportItem"
-    * label *label480
-    * label *label487
   724 write "Transferring " .display ".status2"
   725 write @coal .display ".item2"
   726 write .thoriumGenerator .display ".block2"
-    * label *label488
-    * label *label513
-    * label *label514
   727 write "Moving..." .display ".status3"
-    * label *label515
   728 label *label516
   729 sensor *tmp247 @unit @firstItem
   730 jump *label517 equal *tmp247 null
   731 ucontrol itemDrop @air 1000
   732 label *label517
-    * label *label518
   733 ucontrol approach .coreX .coreY 5.5
-    * label *label519
   734 ucontrol within .coreX .coreY 6 *tmp250
   735 jump *label516 equal *tmp250 false
-    * label *label520
-    * label *label521
-    * label *label534
-    * label *label535
   736 sensor *tmp252 @unit @firstItem
   737 jump *label538 equal *tmp252 null
   738 label *label536
   739 ucontrol itemDrop @air 1000
-    * label *label537
   740 sensor *tmp252 @unit @firstItem
   741 jump *label536 notEqual *tmp252 null
   742 label *label538
-    * label *label539
   743 label *label463
   744 ucontrol itemTake .core @coal 30
   745 sensor :supplyBlockFromCore:unitItem @unit @firstItem
 
   749 jump *label464 equal *tmp308 false
   750 ucontrol itemDrop @air 1000
   751 label *label464
-    * label *label465
-    * label *label466
   752 sensor *tmp310 @unit @coal
   753 op lessThan *tmp311 *tmp310 30
   754 sensor *tmp312 .core @coal
   755 op land *tmp313 *tmp311 *tmp312
   756 jump *label463 notEqual *tmp313 false
-    * label *label467
-    * label *label595
-    * label *label596
   757 write "Depositing..." .display ".status3"
-    * label *label597
   758 sensor *tmp256 @unit @firstItem
   759 jump *label611 notEqual *tmp256 @coal
-    * label *label598
   760 sensor *tmp254 .thoriumGenerator @x
   761 sensor *tmp255 .thoriumGenerator @y
-    * label *label599
-    * label *label600
   762 write "Moving..." .display ".status3"
-    * label *label601
-    * label *label602
   763 ucontrol within *tmp254 *tmp255 6 *tmp242
   764 jump *label605 notEqual *tmp242 false
   765 label *label603
   766 ucontrol approach *tmp254 *tmp255 5.5
-    * label *label604
   767 ucontrol within *tmp254 *tmp255 6 *tmp242
   768 jump *label603 equal *tmp242 false
   769 label *label605
-    * label *label606
-    * label *label607
   770 sensor :depositItems:cap .thoriumGenerator @itemCapacity
   771 label *label608
   772 ucontrol itemDrop .thoriumGenerator 30
-    * label *label609
   773 sensor *tmp260 @unit @firstItem
   774 op mul *tmp261 *tmp260 :depositItems:cap
   775 sensor *tmp262 .thoriumGenerator @coal
   776 jump *label608 greaterThan *tmp261 *tmp262
-    * label *label610
   777 jump *label616 always
   778 label *label611
-    * label *label612
   779 sensor *tmp264 @unit @firstItem
   780 jump *label615 equal *tmp264 null
   781 label *label613
   782 ucontrol itemDrop @air 1000
-    * label *label614
   783 sensor *tmp264 @unit @firstItem
   784 jump *label613 notEqual *tmp264 null
   785 label *label615
   786 label *label616
-    * label *label617
   787 write 0 .display ".transportTarget"
   788 write null .display ".transportItem"
-    * label *label618
-    * label *label619
-    * label *label469
   789 label *label245
   790 set :fetchBlock:block .thoriumContainer
   791 set :fetchBlock:item @thorium
   792 setaddr :fetchBlock*retaddr *label248 (h:*label248)
   793 call *label23 *invalid :fetchBlock*retval (m:*label248) (h:*label248)
   794 label *label248
-    * label *label242
   795 jump *label241 always
   796 label *label240
   797 read *tmp101 .controller ".monos"
   798 jump *label249 lessThanEq *tmp101 3
-    * label *label405
   799 write "Phase 1: supplying base" .display ".status1"
-    * label *label406
   800 set :mineOre.1:ore @coal
-    * label *label540
-    * label *label541
   801 write "Mining " .display ".status2"
   802 write @coal .display ".item2"
   803 write "core" .display ".block2"
-    * label *label542
   804 set :mineOre:ore @coal
   805 set :mineOre:amount 30
   806 set :mineOre:block .core
   807 setaddr :mineOre*retaddr *label543 (h:*label543)
   808 call *label21 *invalid :mineOre*retval (m:*label543) (h:*label543)
   809 label *label543
-    * label *label544
-    * label *label251
   810 jump *label250 always
   811 label *label249
   812 set :supplyBase0:supplied false
 
   815 jump *label257 greaterThanEq *tmp367 .targetGraphite
   816 sensor *tmp370 .press @coal
   817 jump *label259 greaterThanEq *tmp370 5
-    * label *label407
   818 write "Goal 1: graphite requirement" .display ".status1"
-    * label *label408
   819 set :supplyBlock:block .press
   820 set :supplyBlock:ore @coal
   821 setaddr :supplyBlock*retaddr *label262 (h:*label262)
 
   823 label *label262
   824 set :supplyBase0:supplied true
   825 label *label259
-    * label *label260
   826 label *label257
-    * label *label258
   827 sensor *tmp373 .core @silicon
   828 jump *label263 greaterThanEq *tmp373 .targetSilicon
   829 sensor *tmp376 .smelter @coal
   830 jump *label265 greaterThanEq *tmp376 5
-    * label *label409
   831 write "Goal 2: coal for silicon requirement" .display ".status1"
-    * label *label410
   832 set :supplyBlock:block .smelter
   833 set :supplyBlock:ore @coal
   834 setaddr :supplyBlock*retaddr *label268 (h:*label268)
 
   839 label *label265
   840 sensor *tmp379 .smelter @sand
   841 jump *label269 greaterThanEq *tmp379 5
-    * label *label411
   842 write "Goal 3: sand for silicon requirement" .display ".status1"
-    * label *label412
   843 set :supplyBlock:block .smelter
   844 set :supplyBlock:ore @sand
   845 setaddr :supplyBlock*retaddr *label272 (h:*label272)
 
   847 label *label272
   848 set :supplyBase0:supplied true
   849 label *label269
-    * label *label270
   850 label *label266
   851 label *label263
-    * label *label264
   852 sensor *tmp382 .battery @totalPower
   853 jump *label273 greaterThanEq *tmp382 .powerTarget
   854 sensor *tmp385 .generator @coal
   855 jump *label275 greaterThanEq *tmp385 2
-    * label *label413
   856 write "Goal 4: supplying generator" .display ".status1"
-    * label *label414
   857 set :supplyBlock:block .generator
   858 set :supplyBlock:ore @coal
   859 setaddr :supplyBlock*retaddr *label278 (h:*label278)
 
   861 label *label278
   862 set :supplyBase0:supplied true
   863 label *label275
-    * label *label276
   864 label *label273
-    * label *label274
   865 label *label255
-    * label *label256
   866 set *tmp390 100
   867 sensor *tmp388 .core @titanium
   868 jump *label280 greaterThanEq *tmp388 .targetTitanium
 
   876 sensor *tmp399 .battery @totalPower
   877 op mul *tmp400 .unloader1 .powerTarget
   878 jump *label285 greaterThanEq *tmp399 *tmp400
-    * label *label415
   879 write "Goal 5: supplying generator" .display ".status1"
-    * label *label416
   880 set :mineOre.1:ore @coal
-    * label *label631
-    * label *label632
   881 write "Mining " .display ".status2"
   882 write @coal .display ".item2"
   883 write "core" .display ".block2"
-    * label *label633
   884 set :mineOre:ore @coal
   885 set :mineOre:amount 30
   886 set :mineOre:block .core
   887 setaddr :mineOre*retaddr *label634 (h:*label634)
   888 call *label21 *invalid :mineOre*retval (m:*label634) (h:*label634)
   889 label *label634
-    * label *label635
   890 jump *label286 always
   891 label *label285
   892 sensor *tmp403 .core @silicon
   893 jump *label289 greaterThanEq *tmp403 .targetSilicon
-    * label *label417
   894 write "Goal 6: silicon requirement" .display ".status1"
-    * label *label418
   895 sensor :supplyBase0:coal .core @coal
   896 sensor :supplyBase0:sand .core @sand
   897 set :mineOre.1:ore @sand
 
   905 label *label289
   906 sensor *tmp410 .core @copper
   907 jump *label295 greaterThanEq *tmp410 .targetCopper
-    * label *label419
   908 write "Goal 7: copper requirement" .display ".status1"
-    * label *label420
   909 set :mineOre.1:ore @copper
   910 setaddr :mineOre.1*retaddr *label298 (h:*label298)
   911 call *label22 *invalid :mineOre.1*retval (m:*label298) (h:*label298)
 
   914 label *label295
   915 sensor *tmp413 .core @lead
   916 jump *label299 greaterThanEq *tmp413 .targetLead
-    * label *label421
   917 write "Goal 8: lead requirement" .display ".status1"
-    * label *label422
   918 set :mineOre.1:ore @lead
   919 setaddr :mineOre.1*retaddr *label302 (h:*label302)
   920 call *label22 *invalid :mineOre.1*retval (m:*label302) (h:*label302)
 
   923 label *label299
   924 sensor *tmp416 .core @metaglass
   925 jump *label303 greaterThanEq *tmp416 .targetMetaglass
-    * label *label423
   926 write "Goal 9: metaglass requirement" .display ".status1"
-    * label *label424
   927 set :mineOre.1:ore @sand
   928 setaddr :mineOre.1*retaddr *label306 (h:*label306)
   929 call *label22 *invalid :mineOre.1*retval (m:*label306) (h:*label306)
   930 label *label306
   931 jump *label304 always
   932 label *label303
-    * label *label425
   933 write "Goal 10: supplying base" .display ".status1"
-    * label *label426
   934 sensor :supplyBase0:coal.1 .core @coal
   935 sensor :supplyBase0:sand.1 .core @sand
   936 set :mineOre.1:ore @sand
 
   946 label *label290
   947 label *label286
   948 label *label283
-    * label *label284
   949 jump *label282 always
   950 label *label281
-    * label *label427
   951 write "Goal 11: Fetching titanium" .display ".status1"
-    * label *label428
   952 set :fetchBlock:block .titaniumDrill
   953 set :fetchBlock:item @titanium
   954 setaddr :fetchBlock*retaddr *label312 (h:*label312)
   955 call *label23 *invalid :fetchBlock*retval (m:*label312) (h:*label312)
   956 label *label312
   957 label *label282
-    * label *label254
   958 label *label250
   959 label *label241
-    * label *label239
   960 return :supplyBase*retaddr
   961 end
   962 label *label33
-    * label *label374
   963 op sign :meetTarget:count :meetTarget:copper
-    * label *label375
-    * label *label378
   964 op sign *tmp424 :meetTarget:lead
   965 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label379
-    * label *label382
   966 op sign *tmp424 :meetTarget:graphite
   967 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label383
-    * label *label386
   968 op sign *tmp424 :meetTarget:silicon
   969 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label387
-    * label *label390
   970 op sign *tmp424 :meetTarget:titanium
   971 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label391
-    * label *label394
   972 op sign *tmp424 :meetTarget:metaglass
   973 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label395
-    * label *label398
   974 op sign *tmp424 :meetTarget:thorium
   975 op add :meetTarget:count :meetTarget:count *tmp424
-    * label *label399
-    * label *label316
   976 write :meetTarget:count .display ".totalTargets"
   977 write :meetTarget:block .display ".nextBlock"
   978 write :meetTarget:copper .display ".targetCopper"
 
  1013 set *tmp437 false
  1014 jump *label327 always
  1015 label *label328
-    * label *label329
  1016 sensor *tmp441 .core @lead
  1017 jump *label330 greaterThanEq *tmp441 .targetLead
  1018 set *tmp437 false
  1019 jump *label327 always
  1020 label *label330
-    * label *label331
  1021 sensor *tmp444 .core @graphite
  1022 jump *label332 greaterThanEq *tmp444 .targetGraphite
  1023 set *tmp437 false
  1024 jump *label327 always
  1025 label *label332
-    * label *label333
  1026 sensor *tmp447 .core @silicon
  1027 jump *label334 greaterThanEq *tmp447 .targetSilicon
  1028 set *tmp437 false
  1029 jump *label327 always
  1030 label *label334
-    * label *label335
  1031 sensor *tmp450 .core @titanium
  1032 jump *label336 greaterThanEq *tmp450 .targetTitanium
  1033 set *tmp437 false
  1034 jump *label327 always
  1035 label *label336
-    * label *label337
  1036 sensor *tmp453 .core @metaglass
  1037 jump *label338 greaterThanEq *tmp453 .targetMetaglass
  1038 set *tmp437 false
  1039 jump *label327 always
  1040 label *label338
-    * label *label339
  1041 sensor *tmp456 .core @thorium
  1042 jump *label340 greaterThanEq *tmp456 .targetThorium
  1043 set *tmp437 false
  1044 jump *label327 always
  1045 label *label340
-    * label *label341
  1046 set *tmp437 true
  1047 jump *label327 always
  1048 label *label327
 
  1050 setaddr :supplyBase*retaddr *label342 (h:*label342)
  1051 call *label32 *invalid :supplyBase*retval (m:*label342) (h:*label342)
  1052 label *label342
-    * label *label325
  1053 jump *label324 always
  1054 label *label326
-    * label *label313
  1055 return :meetTarget*retaddr
  1056 end
  1057 label *label34
 
  1079 read *tmp466 .blockBuilder ":buildBlockAt*finished"
  1080 jump *label345 equal *tmp466 false
  1081 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
-    * label *label343
  1082 return :buildBlock*retaddr
  1083 end
  1084 label *label35
 
  1107 set :buildRemoteBlock*retval :buildBlock*retval
  1108 jump *label346 always
  1109 label *label347
-    * label *label348
  1110 set :buildRemoteBlock*retval false
  1111 jump *label346 always
  1112 label *label346
 
  1136 call *label34 *invalid :buildBlock*retval (m:*label353) (h:*label353)
  1137 label *label353
  1138 set :buildBlockFromCfg*retval :buildBlock*retval
-    * label *label351
  1139 return :buildBlockFromCfg*retaddr
  1140 end
  1141 label *label37
 
  1145 call *label36 *invalid :buildBlockFromCfg*retval (m:*label355) (h:*label355)
  1146 label *label355
  1147 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
-    * label *label354
  1148 return :buildBlockFromCfg.1*retaddr
  1149 end
  1150 label *label38
 
  1163 setaddr :meetTarget*retaddr *label358 (h:*label358)
  1164 call *label33 *invalid :meetTarget*retval (m:*label358) (h:*label358)
  1165 label *label358
-    * label *label356
  1166 return :meetTarget.1*retaddr
  1167 end
  1168 label *label39
 
  1182 write 0 .controller ".leadReserve"
  1183 write 0 .controller ".siliconReserve"
  1184 write 0 .controller ".graphiteReserve"
-    * label *label359
  1185 return :buildUnits*retaddr
  1186 end
  1187 label *label40
  1188 label *label362
  1189 ubind :flagUnits:unit
  1190 set :flagUnits:firstUnit @unit
-    * label *label363
  1191 jump *label362 equal :flagUnits:firstUnit null
-    * label *label364
  1192 set :flagUnits:x @thisx
  1193 label *label365
  1194 ucontrol flag :flagUnits:x
  1195 op add :flagUnits:x :flagUnits:x 4
  1196 ubind :flagUnits:unit
-    * label *label366
  1197 jump *label365 notEqual @unit :flagUnits:firstUnit
-    * label *label367
-    * label *label361
  1198 return :flagUnits*retaddr
  1199 end
  1200 label *label41
 
  1208 jump *label372 equal *tmp478 false
  1209 ucontrol stop
  1210 label *label372
-    * label *label373
  1211 ubind :lineUpUnits:unit
-    * label *label370
  1212 jump *label369 notEqual @unit :lineUpUnits:firstUnit
-    * label *label371
-    * label *label368
  1213 return :lineUpUnits*retaddr
  1214 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-3 instructions):
 
   145 call *label32 *invalid :supplyBase*retval (m:*label71) (h:*label71)
   146 label *label71
   147 sensor *tmp163 .battery @totalPower
-    * jump *label72 greaterThanEq *tmp163 300
-    * jump *label70 always
+  148 jump *label70 lessThan *tmp163 300
   149 label *label72
   150 read *tmp101 .controller ".monos"
   151 jump *label68 lessThan *tmp101 3
 
   513 op notEqual *tmp276 :mineOre:item null
   514 op notEqual *tmp277 :mineOre:item :mineOre:ore
   515 op land *tmp278 *tmp276 *tmp277
-    * jump *label203 equal *tmp278 false
-    * jump *label202 always
+  516 jump *label202 notEqual *tmp278 false
   517 label *label203
   518 ucontrol mine :locateOre:x :locateOre:y
-    * jump *label205 lessThanEq @second :mineOre:stop
-    * jump *label202 always
+  519 jump *label202 greaterThan @second :mineOre:stop
   520 label *label205
   521 sensor *tmp282 @unit @totalItems
   522 jump *label200 lessThan *tmp282 :mineOre:amount

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   146 label *label71
   147 sensor *tmp163 .battery @totalPower
   148 jump *label70 lessThan *tmp163 300
-    * label *label72
   149 read *tmp101 .controller ".monos"
   150 jump *label68 lessThan *tmp101 3
   151 label *label70
 
   513 op notEqual *tmp277 :mineOre:item :mineOre:ore
   514 op land *tmp278 *tmp276 *tmp277
   515 jump *label202 notEqual *tmp278 false
-    * label *label203
   516 ucontrol mine :locateOre:x :locateOre:y
   517 jump *label202 greaterThan @second :mineOre:stop
-    * label *label205
   518 sensor *tmp282 @unit @totalItems
   519 jump *label200 lessThan *tmp282 :mineOre:amount
   520 label *label202

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   701 sensor :supplyBlock:blockCapacity .thoriumGenerator @itemCapacity
   702 sensor *tmp299 .thoriumGenerator @coal
   703 op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp299
-    * jump *label624 lessThanEq :supplyBlock:missing 0
+  704 jump *label245 lessThanEq :supplyBlock:missing 0
   705 set :mineOre:ore @coal
   706 set :mineOre:amount :supplyBlock:blockCapacity
   707 set :mineOre:block .thoriumGenerator
 
   786 setaddr :fetchBlock*retaddr *label248 (h:*label248)
   787 call *label23 *invalid :fetchBlock*retval (m:*label248) (h:*label248)
   788 label *label248
-    * jump *label241 always
+  789 return :supplyBase*retaddr
   790 label *label240
   791 read *tmp101 .controller ".monos"
   792 jump *label249 lessThanEq *tmp101 3
 
   801 setaddr :mineOre*retaddr *label543 (h:*label543)
   802 call *label21 *invalid :mineOre*retval (m:*label543) (h:*label543)
   803 label *label543
-    * jump *label250 always
+  804 return :supplyBase*retaddr
   805 label *label249
   806 set :supplyBase0:supplied false
   807 jump *label255 notEqual .unloader1 null
 
   866 label *label280
   867 sensor *tmp394 .titaniumDrill @titanium
   868 jump *label281 greaterThanEq *tmp394 *tmp390
-    * jump *label283 notEqual :supplyBase0:supplied false
+  869 jump *label282 notEqual :supplyBase0:supplied false
   870 sensor *tmp399 .battery @totalPower
   871 op mul *tmp400 .unloader1 .powerTarget
   872 jump *label285 greaterThanEq *tmp399 *tmp400
 
   881 setaddr :mineOre*retaddr *label634 (h:*label634)
   882 call *label21 *invalid :mineOre*retval (m:*label634) (h:*label634)
   883 label *label634
-    * jump *label286 always
+  884 return :supplyBase*retaddr
   885 label *label285
   886 sensor *tmp403 .core @silicon
   887 jump *label289 greaterThanEq *tmp403 .targetSilicon
 
   895 setaddr :mineOre.1*retaddr *label294 (h:*label294)
   896 call *label22 *invalid :mineOre.1*retval (m:*label294) (h:*label294)
   897 label *label294
-    * jump *label290 always
+  898 return :supplyBase*retaddr
   899 label *label289
   900 sensor *tmp410 .core @copper
   901 jump *label295 greaterThanEq *tmp410 .targetCopper
 
   904 setaddr :mineOre.1*retaddr *label298 (h:*label298)
   905 call *label22 *invalid :mineOre.1*retval (m:*label298) (h:*label298)
   906 label *label298
-    * jump *label296 always
+  907 return :supplyBase*retaddr
   908 label *label295
   909 sensor *tmp413 .core @lead
   910 jump *label299 greaterThanEq *tmp413 .targetLead
 
   913 setaddr :mineOre.1*retaddr *label302 (h:*label302)
   914 call *label22 *invalid :mineOre.1*retval (m:*label302) (h:*label302)
   915 label *label302
-    * jump *label300 always
+  916 return :supplyBase*retaddr
   917 label *label299
   918 sensor *tmp416 .core @metaglass
   919 jump *label303 greaterThanEq *tmp416 .targetMetaglass
 
   922 setaddr :mineOre.1*retaddr *label306 (h:*label306)
   923 call *label22 *invalid :mineOre.1*retval (m:*label306) (h:*label306)
   924 label *label306
-    * jump *label304 always
+  925 return :supplyBase*retaddr
   926 label *label303
   927 write "Goal 10: supplying base" .display ".status1"
   928 sensor :supplyBase0:coal.1 .core @coal
 
   940 label *label290
   941 label *label286
   942 label *label283
-    * jump *label282 always
+  943 return :supplyBase*retaddr
   944 label *label281
   945 write "Goal 11: Fetching titanium" .display ".status1"
   946 set :fetchBlock:block .titaniumDrill
 
  1099 call *label34 *invalid :buildBlock*retval (m:*label350) (h:*label350)
  1100 label *label350
  1101 set :buildRemoteBlock*retval :buildBlock*retval
-    * jump *label346 always
+ 1102 return :buildRemoteBlock*retaddr
  1103 label *label347
  1104 set :buildRemoteBlock*retval false
-    * jump *label346 always
+ 1105 return :buildRemoteBlock*retaddr
  1106 label *label346
  1107 return :buildRemoteBlock*retaddr
  1108 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-17 instructions):
 
   476 call *label41 *invalid :lineUpUnits*retval (m:*label150) (h:*label150)
   477 label *label150
   478 jump *label144 always
-    * end
   479 label *label21
   480 op min :mineOre:amount :mineOre:amount 30
   481 write :mineOre:amount .display ".transportTarget"
 
   551 write 0 .display ".transportTarget"
   552 write null .display ".transportItem"
   553 return :mineOre*retaddr
-    * end
   554 label *label22
   555 write "Mining " .display ".status2"
   556 write :mineOre.1:ore .display ".item2"
 
   562 call *label21 *invalid :mineOre*retval (m:*label210) (h:*label210)
   563 label *label210
   564 return :mineOre.1*retaddr
-    * end
   565 label *label23
   566 sensor *tmp285 :fetchBlock:block @itemCapacity
   567 op min :transportStatus:target *tmp285 30
 
   635 write 0 .display ".transportTarget"
   636 write null .display ".transportItem"
   637 return :fetchBlock*retaddr
-    * end
   638 label *label24
   639 write "Supplying " .display ".status2"
   640 write :supplyBlock:ore .display ".item2"
 
   651 label *label226
   652 label *label224
   653 return :supplyBlock*retaddr
-    * end
   654 label *label31
   655 read *tmp315 :unpackCfg:cfg 0
   656 op sub *tmp316 *tmp315 35
 
   678 read *tmp354 :unpackCfg:cfg 12
   679 op sub :unpackCfg:ind *tmp354 35
   680 return :unpackCfg*retaddr
-    * end
   681 label *label32
   682 sensor *tmp356 .core @silicon
   683 op sub *tmp357 .targetSilicon *tmp356
 
   702 setaddr :mineOre*retaddr *label623 (h:*label623)
   703 call *label21 *invalid :mineOre*retval (m:*label623) (h:*label623)
   704 label *label623
-    * label *label624
   705 jump *label245 always
   706 label *label244
   707 sensor *tmp303 .thoriumGenerator @itemCapacity
 
   927 setaddr :mineOre.1*retaddr *label310 (h:*label310)
   928 call *label22 *invalid :mineOre.1*retval (m:*label310) (h:*label310)
   929 label *label310
-    * label *label304
-    * label *label300
-    * label *label296
-    * label *label290
-    * label *label286
-    * label *label283
   930 return :supplyBase*retaddr
   931 label *label281
   932 write "Goal 11: Fetching titanium" .display ".status1"
 
   936 call *label23 *invalid :fetchBlock*retval (m:*label312) (h:*label312)
   937 label *label312
   938 label *label282
-    * label *label250
-    * label *label241
   939 return :supplyBase*retaddr
-    * end
   940 label *label33
   941 op sign :meetTarget:count :meetTarget:copper
   942 op sign *tmp424 :meetTarget:lead
 
  1031 jump *label324 always
  1032 label *label326
  1033 return :meetTarget*retaddr
-    * end
  1034 label *label34
  1035 set :meetTarget:block :buildBlock:block
  1036 set :meetTarget:copper :buildBlock:copper
 
  1057 jump *label345 equal *tmp466 false
  1058 read :buildBlock*retval .blockBuilder ":buildBlockAt*retval"
  1059 return :buildBlock*retaddr
-    * end
  1060 label *label35
  1061 op add *tmp468 :buildRemoteBlock:x :buildRemoteBlock:y
  1062 jump *label347 lessThanEq *tmp468 0
 
  1085 label *label347
  1086 set :buildRemoteBlock*retval false
  1087 return :buildRemoteBlock*retaddr
-    * label *label346
-    * return :buildRemoteBlock*retaddr
-    * end
  1088 label *label36
  1089 set :unpackCfg:cfg :buildBlockFromCfg:cfg
  1090 setaddr :unpackCfg*retaddr *label352 (h:*label352)
 
  1110 label *label353
  1111 set :buildBlockFromCfg*retval :buildBlock*retval
  1112 return :buildBlockFromCfg*retaddr
-    * end
  1113 label *label37
  1114 set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg
  1115 set :buildBlockFromCfg:config null
 
  1118 label *label355
  1119 set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval
  1120 return :buildBlockFromCfg.1*retaddr
-    * end
  1121 label *label38
  1122 set :unpackCfg:cfg :meetTarget.1:cfg
  1123 setaddr :unpackCfg*retaddr *label357 (h:*label357)
 
  1135 call *label33 *invalid :meetTarget*retval (m:*label358) (h:*label358)
  1136 label *label358
  1137 return :meetTarget.1*retaddr
-    * end
  1138 label *label39
  1139 set :meetTarget:block 0
  1140 set :meetTarget:copper 0
 
  1153 write 0 .controller ".siliconReserve"
  1154 write 0 .controller ".graphiteReserve"
  1155 return :buildUnits*retaddr
-    * end
  1156 label *label40
  1157 label *label362
  1158 ubind :flagUnits:unit
 
  1165 ubind :flagUnits:unit
  1166 jump *label365 notEqual @unit :flagUnits:firstUnit
  1167 return :flagUnits*retaddr
-    * end
  1168 label *label41
  1169 ubind :lineUpUnits:unit
  1170 set :lineUpUnits:firstUnit @unit
 
  1179 ubind :lineUpUnits:unit
  1180 jump *label369 notEqual @unit :lineUpUnits:firstUnit
  1181 return :lineUpUnits*retaddr
-    * end

Final code before resolving virtual instructions:

    0:  set .ERROR ""                                                Actions.mnd: volatile var ERROR = "";
    1:  set .display processor1                                      CoreBuilder.mnd: var display = processor1,
    2:  set .blockBuilder processor5                                 ...
    3:  set .press null                                              CoreBuilder.mnd: var
    4:  set .generator null                                          ...
    5:  set .battery null                                            ...
    6:  set .smelter null                                            ...
    7:  set .titaniumDrill null                                      ...
    8:  set .unloader1 null                                          ...
    9:  set .thoriumContainer null                                   ...
   10:  set .thoriumGenerator null                                   ...
   11:  set .leadSurplus 0                                           CoreBuilder.mnd: var
   12:  set .graphiteSurplus 20                                      ...
   13:  set .siliconSurplus 20                                       ...
   14:  set .metaglassSurplus 20                                     ...
   15:  write 511 bank1 511                                          CoreBuilder.mnd: external bank1[511] logPosition = 511;
        label *label42                                               CoreBuilder.mnd: do
   16:  ubind @poly                                                  CoreBuilder.mnd: builder = ubind(@poly);
   17:  set .builder @unit                                           ...
   18:  ulocate building core false @copper .coreX .coreY 0 .core    CoreBuilder.mnd: core = ulocate(:building, :core, false, out coreX, out coreY);
   19:  jump *label42 equal .core null                               CoreBuilder.mnd: do
   20:  set :buildBlockFromCfg.1:cfg "#'+nA######%#"                 CoreBuilder.mnd: press = buildBlockFromCfg(PRESS);
   21:  setaddr :buildBlockFromCfg.1*retaddr *label45                ...
   22:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label45                                               ...
   23:  set .press :buildBlockFromCfg.1*retval                       ...
   24:  set :buildBlockFromCfg.1:cfg "k*/(7######$$"                 CoreBuilder.mnd: battery = buildBlockFromCfg(BATTERY1);
   25:  setaddr :buildBlockFromCfg.1*retaddr *label46                ...
   26:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label46                                               ...
   27:  set .battery :buildBlockFromCfg.1*retval                     ...
   28:  set :buildBlockFromCfg.1:cfg "k+/(7######$%"                 CoreBuilder.mnd: buildBlockFromCfg(BATTERY2);
   29:  setaddr :buildBlockFromCfg.1*retaddr *label47                ...
   30:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label47                                               ...
   31:  set :buildBlockFromCfg.1:cfg "m*.<2######$&"                 CoreBuilder.mnd: generator = buildBlockFromCfg(GENERATOR);
   32:  setaddr :buildBlockFromCfg.1*retaddr *label48                ...
   33:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label48                                               ...
   34:  set .generator :buildBlockFromCfg.1*retval                   ...
   35:  set .powerTarget 400                                         CoreBuilder.mnd: powerTarget = 400;
   36:  set :buildBlockFromCfg.1:cfg "%+-A<######%'"                 CoreBuilder.mnd: smelter = buildBlockFromCfg(SMELTER);
   37:  setaddr :buildBlockFromCfg.1*retaddr *label49                ...
   38:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label49                                               ...
   39:  set .smelter :buildBlockFromCfg.1*retval                     ...
   40:  set :buildBlockFromCfg.1:cfg "T+,%%######$("                 CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT1);
   41:  setaddr :buildBlockFromCfg.1*retaddr *label50                ...
   42:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label50                                               ...
   43:  set :meetTarget.1:cfg "w**5#-#####%)"                        CoreBuilder.mnd: meetTarget(cfg);
   44:  setaddr :meetTarget.1*retaddr *label52                       ...
   45:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label52                                               ...
   46:  write @titanium processor1 ".nextBlock"                      CoreBuilder.mnd: display.nextBlock = @titanium;
   47:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
   48:  write .coreY processor4 ":findDrillLocation:y"               ...
   49:  write @unit processor4 ":findDrillLocation:unit"             ...
   50:  write @titanium processor4 ":findDrillLocation:item"         ...
   51:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
   52:  write 2 processor4 ":findDrillLocation:size"                 ...
   53:  write 4 processor4 ":findDrillLocation:limit"                ...
   54:  write false processor4 ":findDrillLocation*finished"         ...
   55:  write 1 processor4 "@counter"                                ...
        label *label53                                               ...
   56:  wait 1e-15                                                   ...
   57:  read *tmp148 processor4 ":findDrillLocation*finished"        ...
   58:  jump *label53 equal *tmp148 false                            ...
   59:  read :buildFirstTitaniumDrill:dx processor4 ":findDrillLocat ...
   60:  read :buildFirstTitaniumDrill:dy processor4 ":findDrillLocat ...
   61:  read :buildFirstTitaniumDrill:result processor4 ":findDrillL ...
   62:  jump *label54 notEqual :buildFirstTitaniumDrill:result false CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   63:  set .ERROR "Cannot locate spot for titanium drill"           Actions.mnd: ERROR = error;
   64:  stop                                                         Actions.mnd: stopProcessor();
        label *label54                                               CoreBuilder.mnd: if !result then error("Cannot locate spot for titanium drill"); end;
   65:  write @pneumatic-drill processor1 ".nextBlock"               CoreBuilder.mnd: display.nextBlock = @pneumatic-drill;
   66:  write :buildFirstTitaniumDrill:dx processor5 ":buildFirstTit CoreBuilder.mnd: return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
   67:  write :buildFirstTitaniumDrill:dy processor5 ":buildFirstTit ...
   68:  write false processor5 ":buildFirstTitaniumDrillAt*finished" ...
   69:  write 2 processor5 "@counter"                                ...
        label *label57                                               ...
   70:  wait 1e-15                                                   ...
   71:  read *tmp154 processor5 ":buildFirstTitaniumDrillAt*finished ...
   72:  jump *label57 equal *tmp154 false                            ...
   73:  read *tmp137 processor5 ":buildFirstTitaniumDrillAt*retval"  ...
   74:  set .titaniumDrill *tmp137                                   CoreBuilder.mnd: titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
   75:  write *tmp137 processor1 ".titaniumDrill"                    CoreBuilder.mnd: display.titaniumDrill = titaniumDrill;
   76:  set :buildBlockFromCfg.1:cfg "*,###A<###$*"                 CoreBuilder.mnd: unloader1 = buildBlockFromCfg(UNLOADER1);
   77:  setaddr :buildBlockFromCfg.1*retaddr *label58                ...
   78:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label58                                               ...
   79:  set .unloader1 :buildBlockFromCfg.1*retval                   ...
   80:  set :buildBlockFromCfg.1:cfg "T),%%######$+"                 CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT2);
   81:  setaddr :buildBlockFromCfg.1*retaddr *label59                ...
   82:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label59                                               ...
   83:  set :buildBlockFromCfg.1:cfg "W*-'%######$,"                 CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE1);
   84:  setaddr :buildBlockFromCfg.1*retaddr *label60                ...
   85:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label60                                               ...
   86:  set .graphiteSurplus 100                                     CoreBuilder.mnd: graphiteSurplus = 100;
   87:  set :buildBlockFromCfg:cfg "®-.}U#U####$-"                   CoreBuilder.mnd: controller = buildBlockFromCfg(PROCESSOR, processor2);
   88:  set :buildBlockFromCfg:config processor2                     ...
   89:  setaddr :buildBlockFromCfg*retaddr *label61                  ...
   90:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label61                                               ...
   91:  set .controller :buildBlockFromCfg*retval                    ...
   92:  write processor6 :buildBlockFromCfg*retval ".timer"          CoreBuilder.mnd: controller.timer = timer;
   93:  write processor1 :buildBlockFromCfg*retval ".display"        CoreBuilder.mnd: controller.display = display;
   94:  write .core :buildBlockFromCfg*retval ".core"                CoreBuilder.mnd: controller.core = core;
   95:  write bank1 :buildBlockFromCfg*retval ".bank"                CoreBuilder.mnd: controller.bank = bank1;
   96:  write .battery :buildBlockFromCfg*retval ".battery"          CoreBuilder.mnd: controller.battery = battery;
   97:  write .generator :buildBlockFromCfg*retval ".generator"      CoreBuilder.mnd: controller.generator = generator;
   98:  write .smelter :buildBlockFromCfg*retval ".smelter"          CoreBuilder.mnd: controller.smelter = smelter;
   99:  write .press :buildBlockFromCfg*retval ".press"              CoreBuilder.mnd: controller.press = press;
  100:  write .unloader1 :buildBlockFromCfg*retval ".unloader1"      CoreBuilder.mnd: controller.unloader1 = unloader1;
  101:  set :buildBlockFromCfg.1:cfg "g)'%)######$."                 CoreBuilder.mnd: buildBlockFromCfg(POWER_NODE);
  102:  setaddr :buildBlockFromCfg.1*retaddr *label62                ...
  103:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label62                                               ...
  104:  set :buildBlockFromCfg.1:cfg "(*###A<###$/"                 CoreBuilder.mnd: controller.unloader2 = buildBlockFromCfg(UNLOADER2);
  105:  setaddr :buildBlockFromCfg.1*retaddr *label63                ...
  106:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label63                                               ...
  107:  write :buildBlockFromCfg.1*retval .controller ".unloader2"   ...
  108:  set :buildBlockFromCfg.1:cfg "'(_i#####&&0"                 CoreBuilder.mnd: var factory = buildBlockFromCfg(AIR_FACTORY);
  109:  setaddr :buildBlockFromCfg.1*retaddr *label64                ...
  110:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label64                                               ...
  111:  write :buildBlockFromCfg.1*retval .controller ".factory"     CoreBuilder.mnd: controller.factory = factory;
  112:  write :buildBlockFromCfg.1*retval processor1 ".airFactory"   CoreBuilder.mnd: display.airFactory = factory;
  113:  write 1 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  114:  write 1 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  115:  write 3 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  116:  write 3 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  117:  write 85 .controller ".pressTarget"                          CoreBuilder.mnd: controller.pressTarget = 85;
  118:  write 150 .controller ".smelterTarget"                       CoreBuilder.mnd: controller.smelterTarget = 150;
  119:  write 30 .controller ".kilnTarget"                           CoreBuilder.mnd: controller.kilnTarget = 30;
  120:  set .leadSurplus 20                                          CoreBuilder.mnd: siliconSurplus = leadSurplus = 20;
  121:  set .siliconSurplus 20                                       ...
  122:  setaddr :buildUnits*retaddr *label67                         CoreBuilder.mnd: buildUnits();
  123:  call *label39 *invalid :buildUnits*retval                    ...
        label *label67                                               ...
        label *label68                                               CoreBuilder.mnd: do
  124:  setaddr :supplyBase*retaddr *label71                         CoreBuilder.mnd: supplyBase();
  125:  call *label32 *invalid :supplyBase*retval                    ...
        label *label71                                               ...
  126:  sensor *tmp163 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < 300 then break; end;
  127:  jump *label70 lessThan *tmp163 300                           ...
  128:  read *tmp101 .controller ".monos"                            CoreBuilder.mnd: while controller.monos < 3;
  129:  jump *label68 lessThan *tmp101 3                             CoreBuilder.mnd: do
        label *label70                                               ...
  130:  set .siliconSurplus 65                                       CoreBuilder.mnd: siliconSurplus = 65;
  131:  set :buildBlockFromCfg.1:cfg ",)###A<###$1"                 CoreBuilder.mnd: buildBlockFromCfg(UNLOADER3);
  132:  setaddr :buildBlockFromCfg.1*retaddr *label74                ...
  133:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label74                                               ...
  134:  set :buildBlockFromCfg.1:cfg "T,*%%######$2"                 CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT3);
  135:  setaddr :buildBlockFromCfg.1*retaddr *label75                ...
  136:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label75                                               ...
  137:  set :buildBlockFromCfg.1:cfg "',+_AA#####%3"                 CoreBuilder.mnd: kiln = buildBlockFromCfg(KILN);
  138:  setaddr :buildBlockFromCfg.1*retaddr *label76                ...
  139:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label76                                               ...
  140:  write :buildBlockFromCfg.1*retval .controller ".kiln"        CoreBuilder.mnd: controller.kiln = kiln;
  141:  set :buildBlockFromCfg.1:cfg "z%-AAA##A##%4"                 CoreBuilder.mnd: buildBlockFromCfg(WATER_EXT);
  142:  setaddr :buildBlockFromCfg.1*retaddr *label77                ...
  143:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label77                                               ...
  144:  set :buildBlockFromCfg.1:cfg "W'*'%######$5"                 CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE2);
  145:  setaddr :buildBlockFromCfg.1*retaddr *label78                ...
  146:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label78                                               ...
  147:  set :buildBlockFromCfg.1:cfg "W&*'%######$6"                 CoreBuilder.mnd: buildBlockFromCfg(OVERFLOW_GATE3);
  148:  setaddr :buildBlockFromCfg.1*retaddr *label79                ...
  149:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label79                                               ...
  150:  set :buildBlockFromCfg.1:cfg "o%+FK<A####%7"                 CoreBuilder.mnd: controller.generator2 = buildBlockFromCfg(STEAM_GEN);
  151:  setaddr :buildBlockFromCfg.1*retaddr *label80                ...
  152:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label80                                               ...
  153:  write :buildBlockFromCfg.1*retval .controller ".generator2"  ...
  154:  set :buildBlockFromCfg.1:cfg "$(.#U<###&8"                 CoreBuilder.mnd: controller.multipress = buildBlockFromCfg(MULTIPRESS);
  155:  setaddr :buildBlockFromCfg.1*retaddr *label81                ...
  156:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label81                                               ...
  157:  write :buildBlockFromCfg.1*retval .controller ".multipress"  ...
  158:  set .graphiteSurplus 150                                     CoreBuilder.mnd: graphiteSurplus = 150;
  159:  set :buildBlockFromCfg.1:cfg " '%-#2#####&:"                 CoreBuilder.mnd: controller.payloadRouter = buildBlockFromCfg(PAYLOAD_ROUTER);
  160:  setaddr :buildBlockFromCfg.1*retaddr *label82                ...
  161:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label82                                               ...
  162:  write :buildBlockFromCfg.1*retval .controller ".payloadRoute ...
  163:  set :buildBlockFromCfg.1:cfg "*(###A<###$;"                 CoreBuilder.mnd: controller.unloader4 = buildBlockFromCfg(UNLOADER4);
  164:  setaddr :buildBlockFromCfg.1*retaddr *label83                ...
  165:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label83                                               ...
  166:  write :buildBlockFromCfg.1*retval .controller ".unloader4"   ...
  167:  set :buildBlockFromCfg.1:cfg "X*''%######$<"                 CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE);
  168:  setaddr :buildBlockFromCfg.1*retaddr *label84                ...
  169:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label84                                               ...
  170:  set :buildBlockFromCfg.1:cfg "*%ë#}####&="                 CoreBuilder.mnd: var reconstructor = buildBlockFromCfg(ADDITIVE_REC);
  171:  setaddr :buildBlockFromCfg.1*retaddr *label85                ...
  172:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label85                                               ...
  173:  write :buildBlockFromCfg.1*retval .controller ".reconstructo CoreBuilder.mnd: controller.reconstructor = reconstructor;
  174:  write :buildBlockFromCfg.1*retval processor1 ".reconstructor CoreBuilder.mnd: display.reconstructor = reconstructor;
  175:  set :buildBlockFromCfg.1:cfg "l/,#U#A7###&>"                 CoreBuilder.mnd: buildBlockFromCfg(BATTERY_LARGE);
  176:  setaddr :buildBlockFromCfg.1*retaddr *label86                ...
  177:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label86                                               ...
  178:  setaddr :buildUnits*retaddr *label87                         CoreBuilder.mnd: buildUnits();
  179:  call *label39 *invalid :buildUnits*retval                    ...
        label *label87                                               ...
  180:  set .siliconSurplus 1000                                     CoreBuilder.mnd: siliconSurplus = 1000;
  181:  set .metaglassSurplus 200                                    CoreBuilder.mnd: metaglassSurplus = 200;
  182:  write 6 .controller ".polyTarget"                            CoreBuilder.mnd: controller.polyTarget = target;
  183:  write 6 processor1 ".polyTarget"                             CoreBuilder.mnd: display.polyTarget = target;
  184:  set :buildBlockFromCfg.1:cfg "%.)A<######%C"                 CoreBuilder.mnd: controller.smelter2 = buildBlockFromCfg(SMELTER2);
  185:  setaddr :buildBlockFromCfg.1*retaddr *label89                ...
  186:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label89                                               ...
  187:  write :buildBlockFromCfg.1*retval .controller ".smelter2"    ...
  188:  set :buildBlockFromCfg.1:cfg "T-*%%######$D"                 CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT4);
  189:  setaddr :buildBlockFromCfg.1*retaddr *label90                ...
  190:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label90                                               ...
  191:  set :buildBlockFromCfg.1:cfg "T-)%%######$E"                 CoreBuilder.mnd: buildBlockFromCfg(INVERTED_SORT5);
  192:  setaddr :buildBlockFromCfg.1*retaddr *label91                ...
  193:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label91                                               ...
  194:  set :buildBlockFromCfg:cfg "--###A<###$F"                   CoreBuilder.mnd: buildBlockFromCfg(UNLOADER5, @sand);
  195:  set :buildBlockFromCfg:config @sand                          ...
  196:  setaddr :buildBlockFromCfg*retaddr *label92                  ...
  197:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label92                                               ...
  198:  setaddr :buildUnits*retaddr *label93                         CoreBuilder.mnd: buildUnits();
  199:  call *label39 *invalid :buildUnits*retval                    ...
        label *label93                                               ...
  200:  read *tmp102 .controller ".polys"                            CoreBuilder.mnd: while controller.polys < 3 do
  201:  jump *label96 greaterThanEq *tmp102 3                        ...
        label *label627                                              ...
  202:  setaddr :supplyBase*retaddr *label97                         CoreBuilder.mnd: supplyBase();
  203:  call *label32 *invalid :supplyBase*retval                    ...
        label *label97                                               ...
  204:  read *tmp102 .controller ".polys"                            CoreBuilder.mnd: while controller.polys < 3 do
  205:  jump *label627 lessThan *tmp102 3                            ...
        label *label96                                               ...
  206:  write 3 .controller ".flareTarget"                           CoreBuilder.mnd: controller.flareTarget = target;
  207:  write 3 processor1 ".flareTarget"                            CoreBuilder.mnd: display.flareTarget = target;
  208:  read *tmp100 .controller ".flares"                           CoreBuilder.mnd: while controller.flares < 2 do
  209:  jump *label101 greaterThanEq *tmp100 2                       ...
        label *label628                                              ...
  210:  setaddr :supplyBase*retaddr *label102                        CoreBuilder.mnd: supplyBase();
  211:  call *label32 *invalid :supplyBase*retval                    ...
        label *label102                                              ...
  212:  read *tmp100 .controller ".flares"                           CoreBuilder.mnd: while controller.flares < 2 do
  213:  jump *label628 lessThan *tmp100 2                            ...
        label *label101                                              ...
  214:  set .graphiteSurplus 100                                     CoreBuilder.mnd: graphiteSurplus = 100;
  215:  write 5 .controller ".monoTarget"                            CoreBuilder.mnd: controller.monoTarget = target;
  216:  write 5 processor1 ".monoTarget"                             CoreBuilder.mnd: display.monoTarget = target;
  217:  write @ore-titanium processor1 ".nextBlock"                  CoreBuilder.mnd: display.nextBlock = @ore-titanium;
  218:  wait 0.000000001                                             CoreBuilder.mnd: wait(1e-9);
  219:  ubind @flare                                                 CoreBuilder.mnd: ubind(@flare);
  220:  read :blocksBuildTitaniumDrills:current processor4 ".locatio CoreBuilder.mnd: var current = oreLocator.locations;
  221:  write .coreX processor4 ":findDrillLocation:x"               CoreBuilder.mnd: async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));
  222:  write .coreY processor4 ":findDrillLocation:y"               ...
  223:  write @unit processor4 ":findDrillLocation:unit"             ...
  224:  write @titanium processor4 ":findDrillLocation:item"         ...
  225:  write @ore-titanium processor4 ":findDrillLocation:ore"      ...
  226:  write 4 processor4 ":findDrillLocation:size"                 ...
  227:  write 1000000000 processor4 ":findDrillLocation:limit"       ...
  228:  write false processor4 ":findDrillLocation*finished"         ...
  229:  write 1 processor4 "@counter"                                ...
  230:  ubind .builder                                               CoreBuilder.mnd: ubind(builder);
  231:  write .controller processor5 ":buildTitaniumDrills:aControll CoreBuilder.mnd: blockBuilder.buildTitaniumDrills(controller, current);
  232:  write :blocksBuildTitaniumDrills:current processor5 ":buildT ...
  233:  write false processor5 ":buildTitaniumDrills*finished"       ...
  234:  write 3 processor5 "@counter"                                ...
        label *label105                                              ...
  235:  wait 1e-15                                                   ...
  236:  read *tmp198 processor5 ":buildTitaniumDrills*finished"      ...
  237:  jump *label105 equal *tmp198 false                           ...
  238:  write false processor4 ":stopLocation*finished"              CoreBuilder.mnd: async(oreLocator.stopLocation());
  239:  write 3 processor4 "@counter"                                ...
  240:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  241:  write .coreX processor4 ":layoutThoriumDrill:x"              CoreBuilder.mnd: oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);
  242:  write .coreY processor4 ":layoutThoriumDrill:y"              ...
  243:  write @unit processor4 ":layoutThoriumDrill:unit"            ...
  244:  write 7 processor4 ":layoutThoriumDrill:limit"               ...
  245:  write false processor4 ":layoutThoriumDrill*finished"        ...
  246:  write 2 processor4 "@counter"                                ...
        label *label107                                              ...
  247:  wait 1e-15                                                   ...
  248:  read *tmp203 processor4 ":layoutThoriumDrill*finished"       ...
  249:  jump *label107 equal *tmp203 false                           ...
  250:  set :meetTarget.1:cfg "x**F#AA7###&@"                        CoreBuilder.mnd: meetTarget(LASER_DRILL);
  251:  setaddr :meetTarget.1*retaddr *label108                      ...
  252:  call *label38 *invalid :meetTarget.1*retval                  ...
        label *label108                                              ...
        label *label109                                              CoreBuilder.mnd: var result = await(oreLocator.layoutThoriumDrill);
  253:  wait 1e-15                                                   ...
  254:  read *tmp205 processor4 ":layoutThoriumDrill*finished"       ...
  255:  jump *label109 equal *tmp205 false                           ...
  256:  read :buildThoriumDrill:result processor4 ":layoutThoriumDri ...
  257:  jump *label110 notEqual :buildThoriumDrill:result false      CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  258:  set .ERROR "Cannot locate spot for thorium drill"            Actions.mnd: ERROR = error;
  259:  stop                                                         Actions.mnd: stopProcessor();
        label *label110                                              CoreBuilder.mnd: if !result then error("Cannot locate spot for thorium drill"); end;
  260:  write @laser-drill processor5 ":buildBlockAt:block"          CoreBuilder.mnd: thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);
  261:  read *tmp56 processor4 ".drillX"                             ...
  262:  write *tmp56 processor5 ":buildBlockAt:x"                    ...
  263:  read *tmp57 processor4 ".drillY"                             ...
  264:  write *tmp57 processor5 ":buildBlockAt:y"                    ...
  265:  write null processor5 ":buildBlockAt:rotation"               ...
  266:  write 0 processor5 ":buildBlockAt:config"                    ...
  267:  write -1 processor5 ":buildBlockAt:index"                    ...
  268:  write false processor5 ":buildBlockAt*finished"              ...
  269:  write 1 processor5 "@counter"                                ...
        label *label113                                              ...
  270:  wait 1e-15                                                   ...
  271:  read *tmp215 processor5 ":buildBlockAt*finished"             ...
  272:  jump *label113 equal *tmp215 false                           ...
  273:  read .thoriumDrill processor5 ":buildBlockAt*retval"         ...
  274:  set :buildRemoteBlock:cfg "z%-AAA##A##%4"                    CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
  275:  read :buildRemoteBlock:x processor4 ".water1X"               ...
  276:  read :buildRemoteBlock:y processor4 ".water1Y"               ...
  277:  setaddr :buildRemoteBlock*retaddr *label114                  ...
  278:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label114                                              ...
  279:  read :buildRemoteBlock:x processor4 ".water2X"               CoreBuilder.mnd: buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
  280:  read :buildRemoteBlock:y processor4 ".water2Y"               ...
  281:  setaddr :buildRemoteBlock*retaddr *label115                  ...
  282:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label115                                              ...
  283:  set :buildRemoteBlock:cfg "o%+FK<A####%7"                    CoreBuilder.mnd: thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
  284:  read :buildRemoteBlock:x processor4 ".generatorX"            ...
  285:  read :buildRemoteBlock:y processor4 ".generatorY"            ...
  286:  setaddr :buildRemoteBlock*retaddr *label116                  ...
  287:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label116                                              ...
  288:  set .thoriumGenerator :buildRemoteBlock*retval               ...
  289:  set :buildRemoteBlock:cfg "g)'%)######$."                    CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
  290:  read :buildRemoteBlock:x processor4 ".node1X"                ...
  291:  read :buildRemoteBlock:y processor4 ".node1Y"                ...
  292:  setaddr :buildRemoteBlock*retaddr *label117                  ...
  293:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label117                                              ...
  294:  read :buildRemoteBlock:x processor4 ".node2X"                CoreBuilder.mnd: buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
  295:  read :buildRemoteBlock:y processor4 ".node2Y"                ...
  296:  setaddr :buildRemoteBlock*retaddr *label118                  ...
  297:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label118                                              ...
  298:  set :buildRemoteBlock:cfg "r**#-#+####$A"                    CoreBuilder.mnd: buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
  299:  read :buildRemoteBlock:x processor4 ".panelX"                ...
  300:  read :buildRemoteBlock:y processor4 ".panelY"                ...
  301:  setaddr :buildRemoteBlock*retaddr *label119                  ...
  302:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label119                                              ...
  303:  set :buildRemoteBlock:cfg "k*/(7######$$"                    CoreBuilder.mnd: buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
  304:  read :buildRemoteBlock:x processor4 ".batteryX"              ...
  305:  read :buildRemoteBlock:y processor4 ".batteryY"              ...
  306:  setaddr :buildRemoteBlock*retaddr *label120                  ...
  307:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label120                                              ...
  308:  set :buildRemoteBlock:cfg "**#######%B"                    CoreBuilder.mnd: thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
  309:  read :buildRemoteBlock:x processor4 ".containerX"            ...
  310:  read :buildRemoteBlock:y processor4 ".containerY"            ...
  311:  setaddr :buildRemoteBlock*retaddr *label121                  ...
  312:  call *label35 *invalid :buildRemoteBlock*retval              ...
        label *label121                                              ...
  313:  set .thoriumContainer :buildRemoteBlock*retval               ...
  314:  jump *label122 notEqual :buildRemoteBlock*retval null        CoreBuilder.mnd: if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
  315:  set .thoriumContainer .thoriumDrill                          ...
        label *label122                                              ...
  316:  write .thoriumDrill processor1 ".thoriumDrill"               CoreBuilder.mnd: display.thoriumDrill = thoriumDrill;
  317:  write .thoriumContainer processor1 ".thoriumContainer"       CoreBuilder.mnd: display.thoriumContainer = thoriumContainer;
  318:  write .thoriumContainer processor3 ":setThoriumContainer:con CoreBuilder.mnd: polyController.setThoriumContainer(thoriumContainer);
  319:  write false processor3 ":setThoriumContainer*finished"       ...
  320:  write 3 processor3 "@counter"                                ...
        label *label124                                              ...
  321:  wait 1e-15                                                   ...
  322:  read *tmp228 processor3 ":setThoriumContainer*finished"      ...
  323:  jump *label124 equal *tmp228 false                           ...
  324:  write null processor1 ".nextBlock"                           CoreBuilder.mnd: display.nextBlock = null;
  325:  write 1 .controller ".megaTarget"                            CoreBuilder.mnd: controller.megaTarget = target;
  326:  write 1 processor1 ".megaTarget"                             CoreBuilder.mnd: display.megaTarget = target;
  327:  read *tmp102 .controller ".polys"                            CoreBuilder.mnd: while controller.polys < 5 do
  328:  jump *label128 greaterThanEq *tmp102 5                       ...
        label *label629                                              ...
  329:  setaddr :supplyBase*retaddr *label129                        CoreBuilder.mnd: supplyBase();
  330:  call *label32 *invalid :supplyBase*retval                    ...
        label *label129                                              ...
  331:  read *tmp102 .controller ".polys"                            CoreBuilder.mnd: while controller.polys < 5 do
  332:  jump *label629 lessThan *tmp102 5                            ...
        label *label128                                              ...
  333:  set :buildBlockFromCfg:cfg "+(###A<###$G"                   CoreBuilder.mnd: controller.unloader6 = buildBlockFromCfg(UNLOADER6, @silicon);
  334:  set :buildBlockFromCfg:config @silicon                       ...
  335:  setaddr :buildBlockFromCfg*retaddr *label130                 ...
  336:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label130                                              ...
  337:  write :buildBlockFromCfg*retval .controller ".unloader6"     ...
  338:  set :buildBlockFromCfg.1:cfg "X+''%######$H"                 CoreBuilder.mnd: buildBlockFromCfg(UNDERFLOW_GATE2);
  339:  setaddr :buildBlockFromCfg.1*retaddr *label131               ...
  340:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label131                                              ...
  341:  set :buildBlockFromCfg.1:cfg ".&#ʭ#ǥƁ#ʭ#(I"                 CoreBuilder.mnd: var multiReconstructor = buildBlockFromCfg(MULTIPLICATIVE_REC);
  342:  setaddr :buildBlockFromCfg.1*retaddr *label133               ...
  343:  call *label37 *invalid :buildBlockFromCfg.1*retval           ...
        label *label133                                              ...
  344:  write :buildBlockFromCfg.1*retval .controller ".multiReconst CoreBuilder.mnd: controller.multiReconstructor = multiReconstructor;
  345:  write :buildBlockFromCfg.1*retval processor1 ".multiReconstr CoreBuilder.mnd: display.multiReconstructor = multiReconstructor;
  346:  set .metaglassSurplus 50                                     CoreBuilder.mnd: metaglassSurplus = 50;
  347:  setaddr :buildUnits*retaddr *label134                        CoreBuilder.mnd: buildUnits();
  348:  call *label39 *invalid :buildUnits*retval                    ...
        label *label134                                              ...
  349:  read *tmp103 .controller ".megas"                            CoreBuilder.mnd: while controller.megas < 1 do
  350:  jump *label137 greaterThanEq *tmp103 1                       ...
        label *label630                                              ...
  351:  setaddr :supplyBase*retaddr *label138                        CoreBuilder.mnd: supplyBase();
  352:  call *label32 *invalid :supplyBase*retval                    ...
        label *label138                                              ...
  353:  read *tmp103 .controller ".megas"                            CoreBuilder.mnd: while controller.megas < 1 do
  354:  jump *label630 lessThan *tmp103 1                            ...
        label *label137                                              ...
  355:  control enabled processor7 false 0 0 0                       CoreBuilder.mnd: flareController.enabled = false;
  356:  control enabled processor8 false 0 0 0                       CoreBuilder.mnd: monoController.enabled = false;
  357:  control enabled processor3 false 0 0 0                       CoreBuilder.mnd: processor3.enabled = false;
  358:  control enabled processor4 false 0 0 0                       CoreBuilder.mnd: processor4.enabled = false;
  359:  control enabled processor5 false 0 0 0                       CoreBuilder.mnd: processor5.enabled = false;
  360:  set :flagUnits:unit @mega                                    CoreBuilder.mnd: flagUnits(@mega);
  361:  setaddr :flagUnits*retaddr *label140                         ...
  362:  call *label40 *invalid :flagUnits*retval                     ...
        label *label140                                              ...
  363:  set :flagUnits:unit @poly                                    CoreBuilder.mnd: flagUnits(@poly);
  364:  setaddr :flagUnits*retaddr *label141                         ...
  365:  call *label40 *invalid :flagUnits*retval                     ...
        label *label141                                              ...
  366:  set :flagUnits:unit @mono                                    CoreBuilder.mnd: flagUnits(@mono);
  367:  setaddr :flagUnits*retaddr *label142                         ...
  368:  call *label40 *invalid :flagUnits*retval                     ...
        label *label142                                              ...
  369:  set :flagUnits:unit @flare                                   CoreBuilder.mnd: flagUnits(@flare);
  370:  setaddr :flagUnits*retaddr *label143                         ...
  371:  call *label40 *invalid :flagUnits*retval                     ...
        label *label143                                              ...
        label *label144                                              CoreBuilder.mnd: while true do
  372:  op sub :lineUpUnits:y @thisy 6                               CoreBuilder.mnd: lineUpUnits(@thisy -  6, @mega);
  373:  ubind @mega                                                  CoreBuilder.mnd: var firstUnit = ubind(unit);
  374:  set :lineUpUnits:firstUnit @unit                             ...
        label *label637                                              CoreBuilder.mnd: do
  375:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  376:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  377:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  378:  sensor *tmp478 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  379:  jump *label638 equal *tmp478 false                           ...
  380:  ucontrol stop 0 0 0 0 0                                      ...
        label *label638                                              ...
  381:  ubind @mega                                                  CoreBuilder.mnd: ubind(unit);
  382:  jump *label637 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  383:  op sub :lineUpUnits:y @thisy 10                              CoreBuilder.mnd: lineUpUnits(@thisy - 10, @poly);
  384:  set :lineUpUnits:unit @poly                                  ...
  385:  setaddr :lineUpUnits*retaddr *label148                       ...
  386:  call *label41 *invalid :lineUpUnits*retval                   ...
        label *label148                                              ...
  387:  op sub :lineUpUnits:y @thisy 14                              CoreBuilder.mnd: lineUpUnits(@thisy - 14, @mono);
  388:  set :lineUpUnits:unit @mono                                  ...
  389:  setaddr :lineUpUnits*retaddr *label149                       ...
  390:  call *label41 *invalid :lineUpUnits*retval                   ...
        label *label149                                              ...
  391:  op sub :lineUpUnits:y @thisy 18                              CoreBuilder.mnd: lineUpUnits(@thisy - 18, @flare);
  392:  set :lineUpUnits:unit @flare                                 ...
  393:  setaddr :lineUpUnits*retaddr *label150                       ...
  394:  call *label41 *invalid :lineUpUnits*retval                   ...
        label *label150                                              ...
  395:  jump *label144 always 0 0                                    CoreBuilder.mnd: while true do
        label *label21                                               Actions.mnd: void mineOre(ore, amount, block)
  396:  op min :mineOre:amount :mineOre:amount 30                    Actions.mnd: amount = min(amount, capacity);
  397:  write :mineOre:amount .display ".transportTarget"            Actions.mnd: display.transportTarget = target;
  398:  write :mineOre:ore .display ".transportItem"                 Actions.mnd: display.transportItem = item;
  399:  ulocate ore core true :mineOre:ore :locateOre:x :locateOre:y Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  400:  jump *label455 notEqual *tmp266 false                        ...
  401:  set .ERROR "Cannot locate ore"                               Actions.mnd: ERROR = error;
  402:  stop                                                         Actions.mnd: stopProcessor();
        label *label455                                              Actions.mnd: if !ulocate(:ore, ore, out x, out y) then
  403:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label498                                              Actions.mnd: do
  404:  sensor *tmp247 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  405:  jump *label499 equal *tmp247 null                            ...
  406:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label499                                              ...
  407:  ucontrol approach :locateOre:x :locateOre:y 5.5 0 0          Actions.mnd: approach(x, y, RADIUS - 0.5);
  408:  ucontrol within :locateOre:x :locateOre:y 6 *tmp250 0        Actions.mnd: while !within(x, y, RADIUS);
  409:  jump *label498 equal *tmp250 false                           Actions.mnd: do
  410:  sensor *tmp271 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  411:  jump *label196 equal *tmp271 :mineOre:ore                    ...
  412:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  413:  jump *label526 equal *tmp252 null                            ...
        label *label524                                              ...
  414:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  415:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  416:  jump *label524 notEqual *tmp252 null                         ...
        label *label526                                              ...
        label *label196                                              Actions.mnd: if @unit.@firstItem != ore then dropAll(); end;
  417:  write "Mining..." .display ".status3"                        Actions.mnd: display.status3 = text;
  418:  op add :mineOre:stop @second 10                              Actions.mnd: var stop = @second + 10;
        label *label200                                              Actions.mnd: do
  419:  sensor :mineOre:item @unit @firstItem                        Actions.mnd: var item = @unit.@firstItem;
  420:  op notEqual *tmp276 :mineOre:item null                       Actions.mnd: if item != null && item != ore then break; end;
  421:  op notEqual *tmp277 :mineOre:item :mineOre:ore               ...
  422:  op land *tmp278 *tmp276 *tmp277                              ...
  423:  jump *label202 notEqual *tmp278 false                        ...
  424:  ucontrol mine :locateOre:x :locateOre:y 0 0 0                Actions.mnd: mine(x, y);
  425:  jump *label202 greaterThan @second :mineOre:stop             Actions.mnd: if @second > stop then break; end;
  426:  sensor *tmp282 @unit @totalItems                             Actions.mnd: while @unit.@totalItems < amount;
  427:  jump *label200 lessThan *tmp282 :mineOre:amount              Actions.mnd: do
        label *label202                                              ...
  428:  ucontrol unbind 0 0 0 0 0                                    Actions.mnd: unbind();
  429:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  430:  sensor *tmp256 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  431:  jump *label561 notEqual *tmp256 :mineOre:ore                 ...
  432:  sensor *tmp254 :mineOre:block @x                             Actions.mnd: moveTo(block.@x, block.@y, radius);
  433:  sensor *tmp255 :mineOre:block @y                             ...
  434:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  435:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  436:  jump *label555 notEqual *tmp242 false                        ...
        label *label553                                              ...
  437:  ucontrol approach *tmp254 *tmp255 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  438:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  439:  jump *label553 equal *tmp242 false                           ...
        label *label555                                              ...
  440:  sensor :depositItems:cap :mineOre:block @itemCapacity        Actions.mnd: var cap = block.@itemCapacity;
        label *label558                                              Actions.mnd: do
  441:  ucontrol itemDrop :mineOre:block 30 0 0 0                    Actions.mnd: itemDrop(block, capacity);
  442:  sensor *tmp260 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  443:  op mul *tmp261 *tmp260 :depositItems:cap                     ...
  444:  sensor *tmp262 :mineOre:block :mineOre:ore                   ...
  445:  jump *label558 greaterThan *tmp261 *tmp262                   Actions.mnd: do
  446:  jump *label566 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label561                                              ...
  447:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  448:  jump *label565 equal *tmp264 null                            ...
        label *label563                                              ...
  449:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  450:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  451:  jump *label563 notEqual *tmp264 null                         ...
        label *label565                                              ...
        label *label566                                              Actions.mnd: if @unit.@firstItem == item then
  452:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  453:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
  454:  return :mineOre*retaddr                                      Actions.mnd: void mineOre(ore, amount, block)
        label *label22                                               Actions.mnd: void mineOre(ore)
  455:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  456:  write :mineOre.1:ore .display ".item2"                       Actions.mnd: display.item2 = item;
  457:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  458:  set :mineOre:ore :mineOre.1:ore                              Actions.mnd: mineOre(ore, capacity, core);
  459:  set :mineOre:amount 30                                       ...
  460:  set :mineOre:block .core                                     ...
  461:  setaddr :mineOre*retaddr *label210                           ...
  462:  call *label21 *invalid :mineOre*retval                       ...
        label *label210                                              ...
  463:  return :mineOre.1*retaddr                                    Actions.mnd: void mineOre(ore)
        label *label23                                               Actions.mnd: void fetchBlock(block, item)
  464:  sensor *tmp285 :fetchBlock:block @itemCapacity               Actions.mnd: transportStatus(min(block.@itemCapacity, capacity), item);
  465:  op min :transportStatus:target *tmp285 30                    ...
  466:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  467:  write :fetchBlock:item .display ".transportItem"             Actions.mnd: display.transportItem = item;
  468:  write "Fetching " .display ".status2"                        Actions.mnd: display.status2 = text;
  469:  write :fetchBlock:item .display ".item2"                     Actions.mnd: display.item2 = item;
  470:  write :fetchBlock:block .display ".block2"                   Actions.mnd: display.block2 = block;
  471:  sensor *tmp287 :fetchBlock:block @x                          Actions.mnd: moveToEmpty(block.@x, block.@y);
  472:  sensor *tmp288 :fetchBlock:block @y                          ...
  473:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label507                                              Actions.mnd: do
  474:  sensor *tmp247 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  475:  jump *label508 equal *tmp247 null                            ...
  476:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label508                                              ...
  477:  ucontrol approach *tmp287 *tmp288 5.5 0 0                    Actions.mnd: approach(x, y, RADIUS - 0.5);
  478:  ucontrol within *tmp287 *tmp288 6 *tmp250 0                  Actions.mnd: while !within(x, y, RADIUS);
  479:  jump *label507 equal *tmp250 false                           Actions.mnd: do
  480:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  481:  jump *label532 equal *tmp252 null                            ...
        label *label530                                              ...
  482:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  483:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  484:  jump *label530 notEqual *tmp252 null                         ...
        label *label532                                              ...
        label *label216                                              Actions.mnd: do
  485:  ucontrol itemTake :fetchBlock:block :fetchBlock:item 30 0 0  Actions.mnd: itemTake(block, item, capacity);
  486:  sensor :fetchBlock:unitItem @unit @firstItem                 Actions.mnd: var unitItem = @unit.@firstItem;
  487:  op notEqual *tmp290 :fetchBlock:unitItem null                Actions.mnd: if unitItem != null and unitItem != item then
  488:  op notEqual *tmp291 :fetchBlock:unitItem :fetchBlock:item    ...
  489:  op land *tmp292 *tmp290 *tmp291                              ...
  490:  jump *label219 equal *tmp292 false                           ...
  491:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label219                                              Actions.mnd: if unitItem != null and unitItem != item then
  492:  sensor *tmp294 @unit :fetchBlock:item                        Actions.mnd: while @unit.sensor(item) < capacity and block.sensor(item);
  493:  op lessThan *tmp295 *tmp294 30                               ...
  494:  sensor *tmp296 :fetchBlock:block :fetchBlock:item            ...
  495:  op land *tmp297 *tmp295 *tmp296                              ...
  496:  jump *label216 notEqual *tmp297 false                        Actions.mnd: do
  497:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  498:  sensor *tmp256 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  499:  jump *label586 notEqual *tmp256 :fetchBlock:item             ...
  500:  sensor *tmp254 .core @x                                      Actions.mnd: moveTo(block.@x, block.@y, radius);
  501:  sensor *tmp255 .core @y                                      ...
  502:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  503:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  504:  jump *label580 notEqual *tmp242 false                        ...
        label *label578                                              ...
  505:  ucontrol approach *tmp254 *tmp255 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  506:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  507:  jump *label578 equal *tmp242 false                           ...
        label *label580                                              ...
  508:  sensor :depositItems:cap .core @itemCapacity                 Actions.mnd: var cap = block.@itemCapacity;
        label *label583                                              Actions.mnd: do
  509:  ucontrol itemDrop .core 30 0 0 0                             Actions.mnd: itemDrop(block, capacity);
  510:  sensor *tmp260 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  511:  op mul *tmp261 *tmp260 :depositItems:cap                     ...
  512:  sensor *tmp262 .core :fetchBlock:item                        ...
  513:  jump *label583 greaterThan *tmp261 *tmp262                   Actions.mnd: do
  514:  jump *label591 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label586                                              ...
  515:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  516:  jump *label590 equal *tmp264 null                            ...
        label *label588                                              ...
  517:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  518:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  519:  jump *label588 notEqual *tmp264 null                         ...
        label *label590                                              ...
        label *label591                                              Actions.mnd: if @unit.@firstItem == item then
  520:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  521:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
  522:  return :fetchBlock*retaddr                                   Actions.mnd: void fetchBlock(block, item)
        label *label24                                               Actions.mnd: void supplyBlock(block, ore)
  523:  write "Supplying " .display ".status2"                       Actions.mnd: display.status2 = text;
  524:  write :supplyBlock:ore .display ".item2"                     Actions.mnd: display.item2 = item;
  525:  write :supplyBlock:block .display ".block2"                  Actions.mnd: display.block2 = block;
  526:  sensor :supplyBlock:blockCapacity :supplyBlock:block @itemCa Actions.mnd: var blockCapacity = block.@itemCapacity;
  527:  sensor *tmp299 :supplyBlock:block :supplyBlock:ore           Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  528:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp2 ...
  529:  jump *label224 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  530:  set :mineOre:ore :supplyBlock:ore                            Actions.mnd: mineOre(ore, blockCapacity, block);
  531:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  532:  set :mineOre:block :supplyBlock:block                        ...
  533:  setaddr :mineOre*retaddr *label226                           ...
  534:  call *label21 *invalid :mineOre*retval                       ...
        label *label226                                              ...
        label *label224                                              Actions.mnd: if missing > 0 then
  535:  return :supplyBlock*retaddr                                  Actions.mnd: void supplyBlock(block, ore)
        label *label31                                               CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out ind)
  536:  read *tmp315 :unpackCfg:cfg 0                                CoreBuilder.mnd: type = lookup(:block, char(cfg, index++) - 35);
  537:  op sub *tmp316 *tmp315 35                                    ...
  538:  lookup block :unpackCfg:type *tmp316                         ...
  539:  read *tmp319 :unpackCfg:cfg 1                                CoreBuilder.mnd: x = char(cfg, index++) - 35 - 7;
  540:  op sub :unpackCfg:x *tmp319 42                               ...
  541:  read *tmp323 :unpackCfg:cfg 2                                CoreBuilder.mnd: y = char(cfg, index++) - 35 - 7;
  542:  op sub :unpackCfg:y *tmp323 42                               ...
  543:  read *tmp327 :unpackCfg:cfg 3                                CoreBuilder.mnd: cu = char(cfg, index++) - 35;
  544:  op sub :unpackCfg:cu *tmp327 35                              ...
  545:  read *tmp330 :unpackCfg:cfg 4                                CoreBuilder.mnd: pb = char(cfg, index++) - 35;
  546:  op sub :unpackCfg:pb *tmp330 35                              ...
  547:  read *tmp333 :unpackCfg:cfg 5                                CoreBuilder.mnd: gr = char(cfg, index++) - 35;
  548:  op sub :unpackCfg:gr *tmp333 35                              ...
  549:  read *tmp336 :unpackCfg:cfg 6                                CoreBuilder.mnd: si = char(cfg, index++) - 35;
  550:  op sub :unpackCfg:si *tmp336 35                              ...
  551:  read *tmp339 :unpackCfg:cfg 7                                CoreBuilder.mnd: ti = char(cfg, index++) - 35;
  552:  op sub :unpackCfg:ti *tmp339 35                              ...
  553:  read *tmp342 :unpackCfg:cfg 8                                CoreBuilder.mnd: mg = char(cfg, index++) - 35;
  554:  op sub :unpackCfg:mg *tmp342 35                              ...
  555:  read *tmp345 :unpackCfg:cfg 9                                CoreBuilder.mnd: th = char(cfg, index++) - 35;
  556:  op sub :unpackCfg:th *tmp345 35                              ...
  557:  read *tmp348 :unpackCfg:cfg 10                               CoreBuilder.mnd: rotation = char(cfg, index++) - 35;
  558:  op sub :unpackCfg:rotation *tmp348 35                        ...
  559:  read *tmp354 :unpackCfg:cfg 12                               CoreBuilder.mnd: ind = char(cfg, index++) - 35;
  560:  op sub :unpackCfg:ind *tmp354 35                             ...
  561:  return :unpackCfg*retaddr                                    CoreBuilder.mnd: void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out ind)
        label *label32                                               CoreBuilder.mnd: void supplyBase()
  562:  sensor *tmp356 .core @silicon                                CoreBuilder.mnd: monoSandTarget = max(0, targetSilicon - core.@silicon);
  563:  op sub *tmp357 .targetSilicon *tmp356                        ...
  564:  op max *tmp358 0 *tmp357                                     ...
  565:  write *tmp358 processor8 ".monoSandTarget"                   ...
  566:  jump *label240 equal .thoriumContainer false                 CoreBuilder.mnd: if thoriumContainer then
  567:  write "Phase 2: servicing thorium drill" .display ".status1" Actions.mnd: display.status1 = text;
  568:  sensor *tmp360 .core @coal                                   CoreBuilder.mnd: if core.@coal < 50 then
  569:  jump *label244 greaterThanEq *tmp360 50                      ...
  570:  set :supplyBlock:block .thoriumGenerator                     CoreBuilder.mnd: supplyBlock(thoriumGenerator, @coal);
  571:  set :supplyBlock:ore @coal                                   ...
  572:  write "Supplying " .display ".status2"                       Actions.mnd: display.status2 = text;
  573:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  574:  write .thoriumGenerator .display ".block2"                   Actions.mnd: display.block2 = block;
  575:  sensor :supplyBlock:blockCapacity .thoriumGenerator @itemCap Actions.mnd: var blockCapacity = block.@itemCapacity;
  576:  sensor *tmp299 .thoriumGenerator @coal                       Actions.mnd: var missing = blockCapacity - block.sensor(ore);
  577:  op sub :supplyBlock:missing :supplyBlock:blockCapacity *tmp2 ...
  578:  jump *label245 lessThanEq :supplyBlock:missing 0             Actions.mnd: if missing > 0 then
  579:  set :mineOre:ore @coal                                       Actions.mnd: mineOre(ore, blockCapacity, block);
  580:  set :mineOre:amount :supplyBlock:blockCapacity               ...
  581:  set :mineOre:block .thoriumGenerator                         ...
  582:  setaddr :mineOre*retaddr *label623                           ...
  583:  call *label21 *invalid :mineOre*retval                       ...
        label *label623                                              ...
  584:  jump *label245 always 0 0                                    CoreBuilder.mnd: if core.@coal < 50 then
        label *label244                                              ...
  585:  sensor *tmp303 .thoriumGenerator @itemCapacity               Actions.mnd: transportStatus(min(target.@itemCapacity, capacity), item);
  586:  op min :transportStatus:target *tmp303 30                    ...
  587:  write :transportStatus:target .display ".transportTarget"    Actions.mnd: display.transportTarget = target;
  588:  write @coal .display ".transportItem"                        Actions.mnd: display.transportItem = item;
  589:  write "Transferring " .display ".status2"                    Actions.mnd: display.status2 = text;
  590:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  591:  write .thoriumGenerator .display ".block2"                   Actions.mnd: display.block2 = block;
  592:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
        label *label516                                              Actions.mnd: do
  593:  sensor *tmp247 @unit @firstItem                              Actions.mnd: if @unit.@firstItem != null then itemDrop(@air, 1000); end;
  594:  jump *label517 equal *tmp247 null                            ...
  595:  ucontrol itemDrop @air 1000 0 0 0                            ...
        label *label517                                              ...
  596:  ucontrol approach .coreX .coreY 5.5 0 0                      Actions.mnd: approach(x, y, RADIUS - 0.5);
  597:  ucontrol within .coreX .coreY 6 *tmp250 0                    Actions.mnd: while !within(x, y, RADIUS);
  598:  jump *label516 equal *tmp250 false                           Actions.mnd: do
  599:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  600:  jump *label538 equal *tmp252 null                            ...
        label *label536                                              ...
  601:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  602:  sensor *tmp252 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  603:  jump *label536 notEqual *tmp252 null                         ...
        label *label538                                              ...
        label *label463                                              Actions.mnd: do
  604:  ucontrol itemTake .core @coal 30 0 0                         Actions.mnd: itemTake(core, item, capacity);
  605:  sensor :supplyBlockFromCore:unitItem @unit @firstItem        Actions.mnd: var unitItem = @unit.@firstItem;
  606:  op notEqual *tmp306 :supplyBlockFromCore:unitItem null       Actions.mnd: if unitItem != null and unitItem != item then
  607:  op notEqual *tmp307 :supplyBlockFromCore:unitItem @coal      ...
  608:  op land *tmp308 *tmp306 *tmp307                              ...
  609:  jump *label464 equal *tmp308 false                           ...
  610:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
        label *label464                                              Actions.mnd: if unitItem != null and unitItem != item then
  611:  sensor *tmp310 @unit @coal                                   Actions.mnd: while @unit.sensor(item) < capacity and core.sensor(item);
  612:  op lessThan *tmp311 *tmp310 30                               ...
  613:  sensor *tmp312 .core @coal                                   ...
  614:  op land *tmp313 *tmp311 *tmp312                              ...
  615:  jump *label463 notEqual *tmp313 false                        Actions.mnd: do
  616:  write "Depositing..." .display ".status3"                    Actions.mnd: display.status3 = text;
  617:  sensor *tmp256 @unit @firstItem                              Actions.mnd: if @unit.@firstItem == item then
  618:  jump *label611 notEqual *tmp256 @coal                        ...
  619:  sensor *tmp254 .thoriumGenerator @x                          Actions.mnd: moveTo(block.@x, block.@y, radius);
  620:  sensor *tmp255 .thoriumGenerator @y                          ...
  621:  write "Moving..." .display ".status3"                        Actions.mnd: display.status3 = text;
  622:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  623:  jump *label605 notEqual *tmp242 false                        ...
        label *label603                                              ...
  624:  ucontrol approach *tmp254 *tmp255 5.5 0 0                    Actions.mnd: approach(x, y, radius - 0.5);
  625:  ucontrol within *tmp254 *tmp255 6 *tmp242 0                  Actions.mnd: while !within(x, y, radius) do
  626:  jump *label603 equal *tmp242 false                           ...
        label *label605                                              ...
  627:  sensor :depositItems:cap .thoriumGenerator @itemCapacity     Actions.mnd: var cap = block.@itemCapacity;
        label *label608                                              Actions.mnd: do
  628:  ucontrol itemDrop .thoriumGenerator 30 0 0 0                 Actions.mnd: itemDrop(block, capacity);
  629:  sensor *tmp260 @unit @firstItem                              Actions.mnd: while @unit.@firstItem * cap > block.sensor(item);
  630:  op mul *tmp261 *tmp260 :depositItems:cap                     ...
  631:  sensor *tmp262 .thoriumGenerator @coal                       ...
  632:  jump *label608 greaterThan *tmp261 *tmp262                   Actions.mnd: do
  633:  jump *label616 always 0 0                                    Actions.mnd: if @unit.@firstItem == item then
        label *label611                                              ...
  634:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  635:  jump *label615 equal *tmp264 null                            ...
        label *label613                                              ...
  636:  ucontrol itemDrop @air 1000 0 0 0                            Actions.mnd: itemDrop(@air, 1000);
  637:  sensor *tmp264 @unit @firstItem                              Actions.mnd: while @unit.@firstItem != null do
  638:  jump *label613 notEqual *tmp264 null                         ...
        label *label615                                              ...
        label *label616                                              Actions.mnd: if @unit.@firstItem == item then
  639:  write 0 .display ".transportTarget"                          Actions.mnd: display.transportTarget = target;
  640:  write null .display ".transportItem"                         Actions.mnd: display.transportItem = item;
        label *label245                                              CoreBuilder.mnd: if core.@coal < 50 then
  641:  set :fetchBlock:block .thoriumContainer                      CoreBuilder.mnd: fetchBlock(thoriumContainer, @thorium);
  642:  set :fetchBlock:item @thorium                                ...
  643:  setaddr :fetchBlock*retaddr *label248                        ...
  644:  call *label23 *invalid :fetchBlock*retval                    ...
        label *label248                                              ...
  645:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if thoriumContainer then
        label *label240                                              ...
  646:  read *tmp101 .controller ".monos"                            CoreBuilder.mnd: elsif controller.monos > 3 then
  647:  jump *label249 lessThanEq *tmp101 3                          ...
  648:  write "Phase 1: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  649:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  650:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  651:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  652:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  653:  set :mineOre:ore @coal                                       Actions.mnd: mineOre(ore, capacity, core);
  654:  set :mineOre:amount 30                                       ...
  655:  set :mineOre:block .core                                     ...
  656:  setaddr :mineOre*retaddr *label543                           ...
  657:  call *label21 *invalid :mineOre*retval                       ...
        label *label543                                              ...
  658:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif controller.monos > 3 then
        label *label249                                              ...
  659:  set :supplyBase0:supplied false                              CoreBuilder.mnd: var supplied = false;
  660:  jump *label255 notEqual .unloader1 null                      CoreBuilder.mnd: if unloader1 == null then
  661:  sensor *tmp367 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then
  662:  jump *label257 greaterThanEq *tmp367 .targetGraphite         ...
  663:  sensor *tmp370 .press @coal                                  CoreBuilder.mnd: if press.@coal < 5 then
  664:  jump *label259 greaterThanEq *tmp370 5                       ...
  665:  write "Goal 1: graphite requirement" .display ".status1"     Actions.mnd: display.status1 = text;
  666:  set :supplyBlock:block .press                                CoreBuilder.mnd: supplyBlock(press, @coal);
  667:  set :supplyBlock:ore @coal                                   ...
  668:  setaddr :supplyBlock*retaddr *label262                       ...
  669:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label262                                              ...
  670:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label259                                              CoreBuilder.mnd: if press.@coal < 5 then
        label *label257                                              CoreBuilder.mnd: if core.@graphite < targetGraphite then
  671:  sensor *tmp373 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then
  672:  jump *label263 greaterThanEq *tmp373 .targetSilicon          ...
  673:  sensor *tmp376 .smelter @coal                                CoreBuilder.mnd: if smelter.@coal < 5 then
  674:  jump *label265 greaterThanEq *tmp376 5                       ...
  675:  write "Goal 2: coal for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  676:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @coal);
  677:  set :supplyBlock:ore @coal                                   ...
  678:  setaddr :supplyBlock*retaddr *label268                       ...
  679:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label268                                              ...
  680:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
  681:  jump *label266 always 0 0                                    CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label265                                              ...
  682:  sensor *tmp379 .smelter @sand                                CoreBuilder.mnd: elsif smelter.@sand < 5 then
  683:  jump *label269 greaterThanEq *tmp379 5                       ...
  684:  write "Goal 3: sand for silicon requirement" .display ".stat Actions.mnd: display.status1 = text;
  685:  set :supplyBlock:block .smelter                              CoreBuilder.mnd: supplyBlock(smelter, @sand);
  686:  set :supplyBlock:ore @sand                                   ...
  687:  setaddr :supplyBlock*retaddr *label272                       ...
  688:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label272                                              ...
  689:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label269                                              CoreBuilder.mnd: elsif smelter.@sand < 5 then
        label *label266                                              CoreBuilder.mnd: if smelter.@coal < 5 then
        label *label263                                              CoreBuilder.mnd: if core.@silicon < targetSilicon then
  690:  sensor *tmp382 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < powerTarget then
  691:  jump *label273 greaterThanEq *tmp382 .powerTarget            ...
  692:  sensor *tmp385 .generator @coal                              CoreBuilder.mnd: if generator.@coal < 2 then
  693:  jump *label275 greaterThanEq *tmp385 2                       ...
  694:  write "Goal 4: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  695:  set :supplyBlock:block .generator                            CoreBuilder.mnd: supplyBlock(generator, @coal);
  696:  set :supplyBlock:ore @coal                                   ...
  697:  setaddr :supplyBlock*retaddr *label278                       ...
  698:  call *label24 *invalid :supplyBlock*retval                   ...
        label *label278                                              ...
  699:  set :supplyBase0:supplied true                               CoreBuilder.mnd: supplied = true;
        label *label275                                              CoreBuilder.mnd: if generator.@coal < 2 then
        label *label273                                              CoreBuilder.mnd: if battery.@totalPower < powerTarget then
        label *label255                                              CoreBuilder.mnd: if unloader1 == null then
  700:  set *tmp390 100                                              CoreBuilder.mnd: var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
  701:  sensor *tmp388 .core @titanium                               ...
  702:  jump *label280 greaterThanEq *tmp388 .targetTitanium         ...
  703:  sensor *tmp391 .core @titanium                               ...
  704:  op sub *tmp392 .targetTitanium *tmp391                       ...
  705:  op min *tmp390 7 *tmp392                                     ...
        label *label280                                              ...
  706:  sensor *tmp394 .titaniumDrill @titanium                      CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  707:  jump *label281 greaterThanEq *tmp394 *tmp390                 ...
  708:  jump *label282 notEqual :supplyBase0:supplied false          CoreBuilder.mnd: if !supplied then
  709:  sensor *tmp399 .battery @totalPower                          CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
  710:  op mul *tmp400 .unloader1 .powerTarget                       ...
  711:  jump *label285 greaterThanEq *tmp399 *tmp400                 ...
  712:  write "Goal 5: supplying generator" .display ".status1"      Actions.mnd: display.status1 = text;
  713:  set :mineOre.1:ore @coal                                     CoreBuilder.mnd: mineOre(@coal);
  714:  write "Mining " .display ".status2"                          Actions.mnd: display.status2 = text;
  715:  write @coal .display ".item2"                                Actions.mnd: display.item2 = item;
  716:  write "core" .display ".block2"                              Actions.mnd: display.block2 = block;
  717:  set :mineOre:ore @coal                                       Actions.mnd: mineOre(ore, capacity, core);
  718:  set :mineOre:amount 30                                       ...
  719:  set :mineOre:block .core                                     ...
  720:  setaddr :mineOre*retaddr *label634                           ...
  721:  call *label21 *invalid :mineOre*retval                       ...
        label *label634                                              ...
  722:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if battery.@totalPower < unloader1 * powerTarget then
        label *label285                                              ...
  723:  sensor *tmp403 .core @silicon                                CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
  724:  jump *label289 greaterThanEq *tmp403 .targetSilicon          ...
  725:  write "Goal 6: silicon requirement" .display ".status1"      Actions.mnd: display.status1 = text;
  726:  sensor :supplyBase0:coal .core @coal                         CoreBuilder.mnd: var coal = core.@coal;
  727:  sensor :supplyBase0:sand .core @sand                         CoreBuilder.mnd: var sand = core.@sand;
  728:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal < sand ? @coal : @sand;
  729:  jump *label293 greaterThanEq :supplyBase0:coal :supplyBase0: ...
  730:  set :mineOre.1:ore @coal                                     ...
        label *label293                                              ...
  731:  setaddr :mineOre.1*retaddr *label294                         CoreBuilder.mnd: mineOre(ore);
  732:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label294                                              ...
  733:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@silicon < targetSilicon then
        label *label289                                              ...
  734:  sensor *tmp410 .core @copper                                 CoreBuilder.mnd: elsif core.@copper < targetCopper then
  735:  jump *label295 greaterThanEq *tmp410 .targetCopper           ...
  736:  write "Goal 7: copper requirement" .display ".status1"       Actions.mnd: display.status1 = text;
  737:  set :mineOre.1:ore @copper                                   CoreBuilder.mnd: mineOre(@copper);
  738:  setaddr :mineOre.1*retaddr *label298                         ...
  739:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label298                                              ...
  740:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@copper < targetCopper then
        label *label295                                              ...
  741:  sensor *tmp413 .core @lead                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
  742:  jump *label299 greaterThanEq *tmp413 .targetLead             ...
  743:  write "Goal 8: lead requirement" .display ".status1"         Actions.mnd: display.status1 = text;
  744:  set :mineOre.1:ore @lead                                     CoreBuilder.mnd: mineOre(@lead);
  745:  setaddr :mineOre.1*retaddr *label302                         ...
  746:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label302                                              ...
  747:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@lead < targetLead then
        label *label299                                              ...
  748:  sensor *tmp416 .core @metaglass                              CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
  749:  jump *label303 greaterThanEq *tmp416 .targetMetaglass        ...
  750:  write "Goal 9: metaglass requirement" .display ".status1"    Actions.mnd: display.status1 = text;
  751:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: mineOre(@sand);
  752:  setaddr :mineOre.1*retaddr *label306                         ...
  753:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label306                                              ...
  754:  return :supplyBase*retaddr                                   CoreBuilder.mnd: elsif core.@metaglass < targetMetaglass then
        label *label303                                              ...
  755:  write "Goal 10: supplying base" .display ".status1"          Actions.mnd: display.status1 = text;
  756:  sensor :supplyBase0:coal.1 .core @coal                       CoreBuilder.mnd: var coal = core.@coal;
  757:  sensor :supplyBase0:sand.1 .core @sand                       CoreBuilder.mnd: var sand = core.@sand;
  758:  set :mineOre.1:ore @sand                                     CoreBuilder.mnd: var ore = coal <= sand ? @coal : @sand;
  759:  jump *label309 greaterThan :supplyBase0:coal.1 :supplyBase0: ...
  760:  set :mineOre.1:ore @coal                                     ...
        label *label309                                              ...
  761:  setaddr :mineOre.1*retaddr *label310                         CoreBuilder.mnd: mineOre(ore);
  762:  call *label22 *invalid :mineOre.1*retval                     ...
        label *label310                                              ...
  763:  return :supplyBase*retaddr                                   CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
        label *label281                                              ...
  764:  write "Goal 11: Fetching titanium" .display ".status1"       Actions.mnd: display.status1 = text;
  765:  set :fetchBlock:block .titaniumDrill                         CoreBuilder.mnd: fetchBlock(titaniumDrill, @titanium);
  766:  set :fetchBlock:item @titanium                               ...
  767:  setaddr :fetchBlock*retaddr *label312                        ...
  768:  call *label23 *invalid :fetchBlock*retval                    ...
        label *label312                                              ...
        label *label282                                              CoreBuilder.mnd: if titaniumDrill.@titanium < titaniumTrigger then
  769:  return :supplyBase*retaddr                                   CoreBuilder.mnd: void supplyBase()
        label *label33                                               CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
  770:  op sign :meetTarget:count :meetTarget:copper 0               CoreBuilder.mnd: for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
  771:  op sign *tmp424 :meetTarget:lead 0                           ...
  772:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  773:  op sign *tmp424 :meetTarget:graphite 0                       ...
  774:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  775:  op sign *tmp424 :meetTarget:silicon 0                        ...
  776:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  777:  op sign *tmp424 :meetTarget:titanium 0                       ...
  778:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  779:  op sign *tmp424 :meetTarget:metaglass 0                      ...
  780:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  781:  op sign *tmp424 :meetTarget:thorium 0                        ...
  782:  op add :meetTarget:count :meetTarget:count *tmp424           ...
  783:  write :meetTarget:count .display ".totalTargets"             CoreBuilder.mnd: display.totalTargets = count;
  784:  write :meetTarget:block .display ".nextBlock"                CoreBuilder.mnd: display.nextBlock = block;
  785:  write :meetTarget:copper .display ".targetCopper"            CoreBuilder.mnd: display.targetCopper = copper;
  786:  write :meetTarget:lead .display ".targetLead"                CoreBuilder.mnd: display.targetLead = lead;
  787:  write :meetTarget:graphite .display ".targetGraphite"        CoreBuilder.mnd: display.targetGraphite = graphite;
  788:  write :meetTarget:silicon .display ".targetSilicon"          CoreBuilder.mnd: display.targetSilicon = silicon;
  789:  write :meetTarget:titanium .display ".targetTitanium"        CoreBuilder.mnd: display.targetTitanium = titanium;
  790:  write :meetTarget:metaglass .display ".targetMetaglass"      CoreBuilder.mnd: display.targetMetaglass = metaglass;
  791:  write :meetTarget:thorium .display ".targetThorium"          CoreBuilder.mnd: display.targetThorium = thorium;
  792:  set .targetCopper :meetTarget:copper                         CoreBuilder.mnd: targetCopper = copper;
  793:  op add *tmp425 :meetTarget:lead .leadSurplus                 CoreBuilder.mnd: targetLead = lead + leadSurplus + 1;
  794:  op add .targetLead *tmp425 1                                 ...
  795:  set .targetGraphite :meetTarget:graphite                     CoreBuilder.mnd: targetGraphite = graphite;
  796:  set .targetSilicon :meetTarget:silicon                       CoreBuilder.mnd: targetSilicon = silicon;
  797:  set .targetTitanium :meetTarget:titanium                     CoreBuilder.mnd: targetTitanium = titanium;
  798:  set .targetMetaglass :meetTarget:metaglass                   CoreBuilder.mnd: targetMetaglass = metaglass;
  799:  set .targetThorium :meetTarget:thorium                       CoreBuilder.mnd: targetThorium = thorium;
  800:  op add *tmp427 :meetTarget:graphite .graphiteSurplus         CoreBuilder.mnd: controller.pressTarget = graphite + graphiteSurplus;
  801:  write *tmp427 .controller ".pressTarget"                     ...
  802:  op add *tmp428 :meetTarget:silicon .siliconSurplus           CoreBuilder.mnd: controller.smelterTarget = silicon + siliconSurplus;
  803:  write *tmp428 .controller ".smelterTarget"                   ...
  804:  op add *tmp429 :meetTarget:metaglass .metaglassSurplus       CoreBuilder.mnd: controller.kilnTarget = metaglass + metaglassSurplus;
  805:  write *tmp429 .controller ".kilnTarget"                      ...
  806:  write *tmp425 .controller ".leadReserve"                     CoreBuilder.mnd: controller.leadReserve = lead + leadSurplus;
  807:  op sign *tmp431 :meetTarget:silicon 0                        CoreBuilder.mnd: controller.siliconReserve = silicon + sign(silicon) * 20;
  808:  op mul *tmp432 *tmp431 20                                    ...
  809:  op add *tmp433 :meetTarget:silicon *tmp432                   ...
  810:  write *tmp433 .controller ".siliconReserve"                  ...
  811:  op sign *tmp434 :meetTarget:graphite 0                       CoreBuilder.mnd: controller.graphiteReserve = graphite + sign(graphite) * 20;
  812:  op mul *tmp435 *tmp434 20                                    ...
  813:  op add *tmp436 :meetTarget:graphite *tmp435                  ...
  814:  write *tmp436 .controller ".graphiteReserve"                 ...
  815:  write .targetLead processor8 ".monoLeadTarget"               CoreBuilder.mnd: monoLeadTarget = targetLead;
  816:  write :meetTarget:copper processor8 ".monoCopperTarget"      CoreBuilder.mnd: monoCopperTarget = targetCopper;
        label *label324                                              CoreBuilder.mnd: while !targetMet() do
  817:  sensor *tmp438 .core @copper                                 CoreBuilder.mnd: if core.@copper < targetCopper then return false; end;
  818:  jump *label328 greaterThanEq *tmp438 .targetCopper           ...
  819:  set *tmp437 false                                            ...
  820:  jump *label327 always 0 0                                    ...
        label *label328                                              ...
  821:  sensor *tmp441 .core @lead                                   CoreBuilder.mnd: if core.@lead < targetLead then return false; end;
  822:  jump *label330 greaterThanEq *tmp441 .targetLead             ...
  823:  set *tmp437 false                                            ...
  824:  jump *label327 always 0 0                                    ...
        label *label330                                              ...
  825:  sensor *tmp444 .core @graphite                               CoreBuilder.mnd: if core.@graphite < targetGraphite then return false; end;
  826:  jump *label332 greaterThanEq *tmp444 .targetGraphite         ...
  827:  set *tmp437 false                                            ...
  828:  jump *label327 always 0 0                                    ...
        label *label332                                              ...
  829:  sensor *tmp447 .core @silicon                                CoreBuilder.mnd: if core.@silicon < targetSilicon then return false; end;
  830:  jump *label334 greaterThanEq *tmp447 .targetSilicon          ...
  831:  set *tmp437 false                                            ...
  832:  jump *label327 always 0 0                                    ...
        label *label334                                              ...
  833:  sensor *tmp450 .core @titanium                               CoreBuilder.mnd: if core.@titanium < targetTitanium then return false; end;
  834:  jump *label336 greaterThanEq *tmp450 .targetTitanium         ...
  835:  set *tmp437 false                                            ...
  836:  jump *label327 always 0 0                                    ...
        label *label336                                              ...
  837:  sensor *tmp453 .core @metaglass                              CoreBuilder.mnd: if core.@metaglass < targetMetaglass then return false; end;
  838:  jump *label338 greaterThanEq *tmp453 .targetMetaglass        ...
  839:  set *tmp437 false                                            ...
  840:  jump *label327 always 0 0                                    ...
        label *label338                                              ...
  841:  sensor *tmp456 .core @thorium                                CoreBuilder.mnd: if core.@thorium < targetThorium then return false; end;
  842:  jump *label340 greaterThanEq *tmp456 .targetThorium          ...
  843:  set *tmp437 false                                            ...
  844:  jump *label327 always 0 0                                    ...
        label *label340                                              ...
  845:  set *tmp437 true                                             CoreBuilder.mnd: return true;
  846:  jump *label327 always 0 0                                    ...
        label *label327                                              CoreBuilder.mnd: while !targetMet() do
  847:  jump *label326 notEqual *tmp437 false                        ...
  848:  setaddr :supplyBase*retaddr *label342                        CoreBuilder.mnd: supplyBase();
  849:  call *label32 *invalid :supplyBase*retval                    ...
        label *label342                                              ...
  850:  jump *label324 always 0 0                                    CoreBuilder.mnd: while !targetMet() do
        label *label326                                              ...
  851:  return :meetTarget*retaddr                                   CoreBuilder.mnd: void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
        label *label34                                               CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
  852:  set :meetTarget:block :buildBlock:block                      CoreBuilder.mnd: meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium);
  853:  set :meetTarget:copper :buildBlock:copper                    ...
  854:  set :meetTarget:lead :buildBlock:lead                        ...
  855:  set :meetTarget:graphite :buildBlock:graphite                ...
  856:  set :meetTarget:silicon :buildBlock:silicon                  ...
  857:  set :meetTarget:titanium :buildBlock:titanium                ...
  858:  set :meetTarget:metaglass :buildBlock:metaglass              ...
  859:  set :meetTarget:thorium :buildBlock:thorium                  ...
  860:  setaddr :meetTarget*retaddr *label344                        ...
  861:  call *label33 *invalid :meetTarget*retval                    ...
        label *label344                                              ...
  862:  write :buildBlock:block .blockBuilder ":buildBlockAt:block"  CoreBuilder.mnd: return blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
  863:  write :buildBlock:x .blockBuilder ":buildBlockAt:x"          ...
  864:  write :buildBlock:y .blockBuilder ":buildBlockAt:y"          ...
  865:  write :buildBlock:rotation .blockBuilder ":buildBlockAt:rota ...
  866:  write :buildBlock:config .blockBuilder ":buildBlockAt:config ...
  867:  write :buildBlock:index .blockBuilder ":buildBlockAt:index"  ...
  868:  write false .blockBuilder ":buildBlockAt*finished"           ...
  869:  write 1 .blockBuilder "@counter"                             ...
        label *label345                                              ...
  870:  wait 1e-15                                                   ...
  871:  read *tmp466 .blockBuilder ":buildBlockAt*finished"          ...
  872:  jump *label345 equal *tmp466 false                           ...
  873:  read :buildBlock*retval .blockBuilder ":buildBlockAt*retval" ...
  874:  return :buildBlock*retaddr                                   CoreBuilder.mnd: def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
        label *label35                                               CoreBuilder.mnd: def buildRemoteBlock(cfg, x, y)
  875:  op add *tmp468 :buildRemoteBlock:x :buildRemoteBlock:y       CoreBuilder.mnd: if x + y > 0 then
  876:  jump *label347 lessThanEq *tmp468 0                          ...
  877:  set :unpackCfg:cfg :buildRemoteBlock:cfg                     CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out index);
  878:  setaddr :unpackCfg*retaddr *label349                         ...
  879:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label349                                              ...
  880:  set :buildBlock:block :unpackCfg:type                        CoreBuilder.mnd: return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
  881:  set :buildBlock:x :buildRemoteBlock:x                        ...
  882:  set :buildBlock:y :buildRemoteBlock:y                        ...
  883:  set :buildBlock:copper :unpackCfg:cu                         ...
  884:  set :buildBlock:lead :unpackCfg:pb                           ...
  885:  set :buildBlock:graphite :unpackCfg:gr                       ...
  886:  set :buildBlock:silicon :unpackCfg:si                        ...
  887:  set :buildBlock:titanium :unpackCfg:ti                       ...
  888:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  889:  set :buildBlock:thorium :unpackCfg:th                        ...
  890:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  891:  set :buildBlock:config null                                  ...
  892:  set :buildBlock:index :unpackCfg:ind                         ...
  893:  setaddr :buildBlock*retaddr *label350                        ...
  894:  call *label34 *invalid :buildBlock*retval                    ...
        label *label350                                              ...
  895:  set :buildRemoteBlock*retval :buildBlock*retval              ...
  896:  return :buildRemoteBlock*retaddr                             ...
        label *label347                                              CoreBuilder.mnd: if x + y > 0 then
  897:  set :buildRemoteBlock*retval false                           CoreBuilder.mnd: return false;
  898:  return :buildRemoteBlock*retaddr                             ...
        label *label36                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
  899:  set :unpackCfg:cfg :buildBlockFromCfg:cfg                    CoreBuilder.mnd: unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, out index);
  900:  setaddr :unpackCfg*retaddr *label352                         ...
  901:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label352                                              ...
  902:  op add *tmp471 .coreX :unpackCfg:x                           CoreBuilder.mnd: return buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
  903:  op add *tmp472 .coreY :unpackCfg:y                           ...
  904:  set :buildBlock:block :unpackCfg:type                        ...
  905:  set :buildBlock:x *tmp471                                    ...
  906:  set :buildBlock:y *tmp472                                    ...
  907:  set :buildBlock:copper :unpackCfg:cu                         ...
  908:  set :buildBlock:lead :unpackCfg:pb                           ...
  909:  set :buildBlock:graphite :unpackCfg:gr                       ...
  910:  set :buildBlock:silicon :unpackCfg:si                        ...
  911:  set :buildBlock:titanium :unpackCfg:ti                       ...
  912:  set :buildBlock:metaglass :unpackCfg:mg                      ...
  913:  set :buildBlock:thorium :unpackCfg:th                        ...
  914:  set :buildBlock:rotation :unpackCfg:rotation                 ...
  915:  set :buildBlock:config :buildBlockFromCfg:config             ...
  916:  set :buildBlock:index :unpackCfg:ind                         ...
  917:  setaddr :buildBlock*retaddr *label353                        ...
  918:  call *label34 *invalid :buildBlock*retval                    ...
        label *label353                                              ...
  919:  set :buildBlockFromCfg*retval :buildBlock*retval             ...
  920:  return :buildBlockFromCfg*retaddr                            CoreBuilder.mnd: def buildBlockFromCfg(cfg, config)
        label *label37                                               CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  921:  set :buildBlockFromCfg:cfg :buildBlockFromCfg.1:cfg          CoreBuilder.mnd: buildBlockFromCfg(cfg, null);
  922:  set :buildBlockFromCfg:config null                           ...
  923:  setaddr :buildBlockFromCfg*retaddr *label355                 ...
  924:  call *label36 *invalid :buildBlockFromCfg*retval             ...
        label *label355                                              ...
  925:  set :buildBlockFromCfg.1*retval :buildBlockFromCfg*retval    CoreBuilder.mnd: def buildBlockFromCfg(cfg)
  926:  return :buildBlockFromCfg.1*retaddr                          ...
        label *label38                                               CoreBuilder.mnd: void meetTarget(cfg)
  927:  set :unpackCfg:cfg :meetTarget.1:cfg                         CoreBuilder.mnd: unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
  928:  setaddr :unpackCfg*retaddr *label357                         ...
  929:  call *label31 *invalid :unpackCfg*retval                     ...
        label *label357                                              ...
  930:  set :meetTarget:block :unpackCfg:type                        CoreBuilder.mnd: meetTarget(type, cu, pb, gr, si, ti, mg, th);
  931:  set :meetTarget:copper :unpackCfg:cu                         ...
  932:  set :meetTarget:lead :unpackCfg:pb                           ...
  933:  set :meetTarget:graphite :unpackCfg:gr                       ...
  934:  set :meetTarget:silicon :unpackCfg:si                        ...
  935:  set :meetTarget:titanium :unpackCfg:ti                       ...
  936:  set :meetTarget:metaglass :unpackCfg:mg                      ...
  937:  set :meetTarget:thorium :unpackCfg:th                        ...
  938:  setaddr :meetTarget*retaddr *label358                        ...
  939:  call *label33 *invalid :meetTarget*retval                    ...
        label *label358                                              ...
  940:  return :meetTarget.1*retaddr                                 CoreBuilder.mnd: void meetTarget(cfg)
        label *label39                                               CoreBuilder.mnd: void buildUnits()
  941:  set :meetTarget:block 0                                      CoreBuilder.mnd: meetTarget(0, 0, 0, 0, 0, 0, 0, 0);
  942:  set :meetTarget:copper 0                                     ...
  943:  set :meetTarget:lead 0                                       ...
  944:  set :meetTarget:graphite 0                                   ...
  945:  set :meetTarget:silicon 0                                    ...
  946:  set :meetTarget:titanium 0                                   ...
  947:  set :meetTarget:metaglass 0                                  ...
  948:  set :meetTarget:thorium 0                                    ...
  949:  setaddr :meetTarget*retaddr *label360                        ...
  950:  call *label33 *invalid :meetTarget*retval                    ...
        label *label360                                              ...
  951:  write 0 .display ".totalTargets"                             CoreBuilder.mnd: display.totalTargets = 0;
  952:  write null .display ".nextBlock"                             CoreBuilder.mnd: display.nextBlock = null;
  953:  write 0 .controller ".leadReserve"                           CoreBuilder.mnd: controller.leadReserve = 0;
  954:  write 0 .controller ".siliconReserve"                        CoreBuilder.mnd: controller.siliconReserve = 0;
  955:  write 0 .controller ".graphiteReserve"                       CoreBuilder.mnd: controller.graphiteReserve = 0;
  956:  return :buildUnits*retaddr                                   CoreBuilder.mnd: void buildUnits()
        label *label40                                               CoreBuilder.mnd: void flagUnits(unit)
        label *label362                                              CoreBuilder.mnd: do
  957:  ubind :flagUnits:unit                                        CoreBuilder.mnd: firstUnit = ubind(unit);
  958:  set :flagUnits:firstUnit @unit                               ...
  959:  jump *label362 equal :flagUnits:firstUnit null               CoreBuilder.mnd: do
  960:  set :flagUnits:x @thisx                                      CoreBuilder.mnd: var x = @thisx;
        label *label365                                              CoreBuilder.mnd: do
  961:  ucontrol flag :flagUnits:x 0 0 0 0                           CoreBuilder.mnd: flag(x);
  962:  op add :flagUnits:x :flagUnits:x 4                           CoreBuilder.mnd: x += 4;
  963:  ubind :flagUnits:unit                                        CoreBuilder.mnd: ubind(unit);
  964:  jump *label365 notEqual @unit :flagUnits:firstUnit           CoreBuilder.mnd: do
  965:  return :flagUnits*retaddr                                    CoreBuilder.mnd: void flagUnits(unit)
        label *label41                                               CoreBuilder.mnd: void lineUpUnits(y, unit)
  966:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: var firstUnit = ubind(unit);
  967:  set :lineUpUnits:firstUnit @unit                             ...
        label *label369                                              CoreBuilder.mnd: do
  968:  sensor :lineUpUnits:x @unit @flag                            CoreBuilder.mnd: var x = @unit.@flag;
  969:  ucontrol itemDrop @air 1000 0 0 0                            CoreBuilder.mnd: itemDrop(@air, 1000);
  970:  ucontrol move :lineUpUnits:x :lineUpUnits:y 0 0 0            CoreBuilder.mnd: move(x, y);
  971:  sensor *tmp478 @unit @mining                                 CoreBuilder.mnd: if @unit.@mining then stop(); end;
  972:  jump *label372 equal *tmp478 false                           ...
  973:  ucontrol stop 0 0 0 0 0                                      ...
        label *label372                                              ...
  974:  ubind :lineUpUnits:unit                                      CoreBuilder.mnd: ubind(unit);
  975:  jump *label369 notEqual @unit :lineUpUnits:firstUnit         CoreBuilder.mnd: do
  976:  return :lineUpUnits*retaddr                                  CoreBuilder.mnd: void lineUpUnits(y, unit)


Performance: parsed in 892 ms, compiled in 478 ms, optimized in 3,465 ms, run in 10 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (17 steps):
The program didn't generate any output.
Execution exception at instruction 16: ubind @poly:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
