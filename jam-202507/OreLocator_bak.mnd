#set target = 8;
#set syntax = strict;

//module OreLocator;

param ORE = @thorium;
param STRIP = 10;

require units;
require "Actions.mnd";

linked bank1, message1;

const capacity = 10;

noinit var core;

inline void status1(text)
end;

inline void status2(text, item, block)
end;

inline void status3(text)
end;

inline void transportStatus(target, item)
end;

inline void targetMet()
    false;
end;

external bank1[0 ... 4] var minX, minY, maxX, maxY;
var x0, y0, x1, y1;

void trace(ore, x, y)
    do
        move(x, y);
        var oreX, oreY;
        if ulocate(:ore, ore, out oreX, out oreY) then
            x0 = min(x0, oreX);
            y0 = min(y0, oreY);
            x1 = max(x1, oreX);
            y1 = max(y1, oreY);
        end;
    while !within(x, y, 5);
end;

volatile var px, py;

inline void searchAtPosition(x, y, ore, ref index, ref last)
    px = x;
    py = y;
    moveTo(x, y);
    var oreX, oreY;
    if ulocate(:ore, ore, out oreX, out oreY) then
        var position = oreX + @mapw * oreY;
        if position != last then
            bank1[index] = position;
            last = position;
            index++;
            bank1[index] = 0;
        end;
    end;
end;

//remote void searchForOres(core, ore)
begin
    var ore = ORE;
    waitForFreeUnit(@flare, 100);

    bank1[4] = 0;
//    x0 = @mapw;
//    y0 = @maph;
//    x1 = 0;
//    y1 = 0;
//
//    moveTo(0, 0);
//    trace(ore, @mapw, 0);
//    trace(ore, @mapw, @maph);
//    trace(ore, 0, @maph);
//    trace(ore, 0, 0);
//
    x0 = 50;
    y0 = 50;
    x1 = 220;
    y1 = 200;

    minX = x0;
    minY = y0;
    maxX = x1;
    maxY = y1;


    var last = -1, index = 4;

    var x = x0;
    while x <= x1 do
        for var y = y0; y <= y1; y += STRIP do
            searchAtPosition(x, y, ore, ref index, ref last);
        end;
        x += STRIP;

        for var y = y1; y >= y0; y -= STRIP do
            searchAtPosition(x, y, ore, ref index, ref last);
        end;
        x += STRIP;
    end;

    bank1[index] = 0;

    stopProcessor();
end;
