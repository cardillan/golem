#set target = 8;
#set syntax = strict;
#set sort-variables;
//#set function-inlining = none;
#set goal = size;

// Linked variables
linked message1, bank1, processor1, processor2, processor3, processor4, processor5;

noinit var display, controller, flareController, oreLocator, blockBuilder;

require units;
require "Actions.mnd";
require "Display.mnd" remote display;
require "OreLocator.mnd" remote oreLocator;
require "CoreController.mnd" remote controller;
require "FlareController.mnd" remote flareController;
require "BlockBuilder.mnd" remote blockBuilder;

// At this point, we're only using a poly
const capacity = 30;

// Built blocks
var
    press = null,
    generator = null,
    battery = null,
    smelter = null,
    titaniumDrill = null,
    unloader1 = null,
    kiln = null,
    thoriumDrill = null,
    thoriumContainer = null,
    thoriumGenerator = null;

noinit var
    core, coreX, coreY,
    builder,

    // Targets to be met for the next build
    targetCopper,
    targetLead,
    targetGraphite,
    targetSilicon,
    targetTitanium,
    targetMetaglass,
    targetThorium,
    powerTarget;

var
    leadSurplus = 0,
    graphiteSurplus = 20,
    siliconSurplus = 20,
    metaglassSurplus = 20;

var
    flareControllerStarted = false;

external bank1[511] logPosition = 511;

// See BlockConfiguration.mnd
const PRESS = "#'+nA######";
const BATTERY1 = "k*/(7######";
const BATTERY2 = "k+/(7######";
const GENERATOR = "m*.<2######";
const SMELTER = "%+-A<######";
const INVERTED_SORT1 = "T+,%%######";
const PNEUMATIC_DRILL = "w**5#-#####";
const UNLOADER1 = "*,###A<###";
const INVERTED_SORT2 = "T),%%######";
const OVERFLOW_GATE1 = "W*-'%######";
const PROCESSOR = "®-.}U#U####";
const POWER_NODE = "g)'%)######";
const UNLOADER2 = "(*###A<###";
const AIR_FACTORY = "'(_i#####&";
const UNLOADER3 = ",)###A<###";
const INVERTED_SORT3 = "T,*%%######";
const KILN = "',+_AA#####";
const WATER_EXT = "z%-AAA##A##";
const OVERFLOW_GATE2 = "W'*'%######";
const OVERFLOW_GATE3 = "W&*'%######";
const STEAM_GEN = "o%+FK<A####";
const MULTIPRESS = "$(.#U<###";
const WATER_EXT2 = "z%/AAA##A##";
const PAYLOAD_ROUTER = " '%-#2#####";
const UNLOADER4 = "*(###A<###";
const UNDERFLOW_GATE = "X*''%######";
const ADDITIVE_REC = "*%ë#}####";
const BATTERY_LARGE = "l/-#U#A7###";
const OVERFLOW_GATE4 = "W&*'%######";
const LASER_DRILL = "x**F#AA7###";
const SOLAR_PANEL = "r**#-#+####";
const CONTAINER = "**#######";
const SMELTER2 = "%-)A<######";
const UNLOADER5 = "--###A<###";
const UNLOADER6 = "+(###A<###";
const UNDERFLOW_GATE2 = "X+''%######";
const MULTIPLICATIVE_REC = ".&#ʭ#ǥƁ#ʭ#";

void unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation)
    var index = 0;
    type = lookup(:block, char(cfg, index++) - 35);
    x = char(cfg, index++) - 35 - 7;
    y = char(cfg, index++) - 35 - 7;
    cu = char(cfg, index++) - 35;
    pb = char(cfg, index++) - 35;
    gr = char(cfg, index++) - 35;
    si = char(cfg, index++) - 35;
    ti = char(cfg, index++) - 35;
    mg = char(cfg, index++) - 35;
    th = char(cfg, index++) - 35;
    rotation = char(cfg, index++) - 35;
    //println($"Type: $type, x: $x, y: $y, $cu, $pb, $gr, $si, $ti, $mg, $rotation");
end;

// SUPPLY OPERATIONS

inline void supplyBase0()
    var supplied = false;

    if unloader1 == null then
        if core.@graphite < targetGraphite then
            if press.@coal < 5 then
                status1("Goal 1: graphite requirement");
                supplyBlock(press, @coal);
                supplied = true;
            end;
        end;

        if core.@silicon < targetSilicon then
            if smelter.@coal < 5 then
                status1("Goal 2: coal for silicon requirement");
                supplyBlock(smelter, @coal);
                supplied = true;
            elsif smelter.@sand < 5 then
                status1("Goal 3: sand for silicon requirement");
                supplyBlock(smelter, @sand);
                supplied = true;
            end;
        end;

        if battery.@totalPower < powerTarget then
            if generator.@coal < 2 then
                status1("Goal 4: supplying generator");
                supplyBlock(generator, @coal);
                supplied = true;
            end;
       end;
    end;

    var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
    if titaniumDrill.@titanium < titaniumTrigger then
        if !supplied then
            if battery.@totalPower < unloader1 * powerTarget then
                status1("Goal 5: supplying generator");
                mineOre(@coal);
            elsif core.@silicon < targetSilicon then
                status1("Goal 6: silicon requirement");
                var coal = core.@coal;
                var sand = core.@sand;
                var ore = coal < sand ? @coal : @sand;
                mineOre(ore);
            elsif core.@copper < targetCopper then
                status1("Goal 7: copper requirement");
                mineOre(@copper);
            elsif core.@lead < targetLead then
                status1("Goal 8: lead requirement");
                mineOre(@lead);
            elsif core.@metaglass < targetMetaglass then
                status1("Goal 9: metaglass requirement");
                mineOre(@sand);
            else
                status1("Goal 10: supplying base");
                var coal = core.@coal;
                var sand = core.@sand;
                var ore = coal <= sand ? @coal : @sand;
                mineOre(ore);
            end;
        end;
    else
        status1("Goal 11: Fetching titanium");
        fetchBlock(titaniumDrill, @titanium);
    end;
end;

inline void supplyBase1()
    status1("Phase 1: supplying base");
    mineOre(@coal);
end;

inline void supplyBase2()
    status1("Phase 2: servicing thorium drill");

    supplyBlockFromCore(thoriumGenerator, @coal);
    fetchBlock(thoriumContainer, @thorium);
end;

void supplyBase()
    if !flareControllerStarted then
        if controller.flares > 0 then
            flareControllerStarted = true;
            async(flareController.start(core, titaniumDrill));
        end;
    end;

    if thoriumContainer then
        supplyBase2();
    elsif controller.monos > 3 then
        supplyBase1();
    else
        supplyBase0();
    end;
end;

inline def targetMet()
    // This is horrible, but Mindcode doesn't do short-circuit evaluation yet.
    if core.@copper < targetCopper then return false; end;
    if core.@lead < targetLead then return false; end;
    if core.@graphite < targetGraphite then return false; end;
    if core.@silicon < targetSilicon then return false; end;
    if core.@titanium < targetTitanium then return false; end;
    if core.@metaglass < targetMetaglass then return false; end;
    if core.@thorium < targetThorium then return false; end;
    return true;
end;

void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium)
    // Update display
    var count = 0;
    for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
    display.totalTargets = count;
    display.nextBlock = block;
    display.targetCopper = copper;
    display.targetLead = lead;
    display.targetGraphite = graphite;
    display.targetSilicon = silicon;
    display.targetTitanium = titanium;
    display.targetMetaglass = metaglass;
    display.targetThorium = thorium;

    targetCopper = copper;
    targetLead = lead + leadSurplus + 1;
    targetGraphite = graphite;
    targetSilicon = silicon;
    targetTitanium = titanium;
    targetMetaglass = metaglass;
    targetThorium = thorium;

    controller.pressTarget = graphite + graphiteSurplus;
    controller.smelterTarget = silicon + siliconSurplus;
    controller.kilnTarget = metaglass + metaglassSurplus;
    controller.leadReserve = lead + leadSurplus;
    controller.siliconReserve = silicon + sign(silicon) * 20;

    while !targetMet() do
        supplyBase();
    end;
end;

// BUILDING OPERATIONS

inline void log(encodedId)
    bank1[--logPosition] = encodedId + floor(@second * 1000) * 1000;
end;

inline void logBlock(block)
    log(block.@id);
end;

def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config)
    meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium);
    return blockBuilder.buildBlockAt(block, x, y, rotation, config);
end;

def buildRemoteBlock(cfg, x, y)
    if x >= 0 then
        var type, cu, pb, gr, si, ti, mg, th, rotation;
        unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
        return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null);
    end;
    return false;
end;

// Builds a block
def buildBlockFromCfg(cfg, config)
    var type, x, y, cu, pb, gr, si, ti, mg, th, rotation;
    unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation);
    return buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config);
end;

def buildBlockFromCfg(cfg)
    buildBlockFromCfg(cfg, null);
end;

void meetTarget(cfg)
    var type, cu, pb, gr, si, ti, mg, th;
    unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
    meetTarget(type, cu, pb, gr, si, ti, mg, th);
end;

void meetMultipleTargets(cfg, multiple)
    var type, cu, pb, gr, si, ti, mg, th;
    unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
    meetTarget(type, multiple * cu, multiple * pb, multiple * gr, multiple * si, multiple * ti, multiple * mg, multiple * th);
end;

def buildFirstTitaniumDrill(cfg)
    meetTarget(cfg);

    display.nextBlock = @titanium;
    var dx, dy;
    var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
    if !result then error("Cannot locate spot for titanium drill"); end;
    display.nextBlock = @pneumatic-drill;

    return blockBuilder.buildBlockAt(@pneumatic-drill, dx, dy, null, 0);
end;

def titaniumDrillScore(x, y, in out positive, in out negative)
    case getFloor(x, y)
        when @ore-titanium then positive++;
        when @ore-copper, @ore-lead, @ore-scrap, @ore-coal then negative++;
    end;
end;

volatile var positive = 0, negative = 0;

void buildTitaniumDrill(x, y, in out count)
    if count < 8 then
        moveTo(x, y);
        positive = 0; negative = 0;
        titaniumDrillScore(x, y, in out positive, in out negative);
        titaniumDrillScore(x, y + 0.5, in out positive, in out negative);
        titaniumDrillScore(x + 0.5, y, in out positive, in out negative);
        titaniumDrillScore(x + 0.5, y + 0.5, in out positive, in out negative);

        if positive > negative && positive >= 2 then
            var drill = blockBuilder.buildBlockAt(@pneumatic-drill, x, y, null, 0);
            if drill != null then
                flareController.addTitaniumDrill(drill);

                // Build a flare to service this drill
                controller.flareTarget = ++count;
            end;
        end;
    end;
end;

void buildTitaniumDrills()
    // The base is already autonomous. The drill needs copper and graphite.
    // Both are provided in abundance at this moment

    // Make sure to bind and flag the flare in a single tick
    wait(1e-9);
    ubind(@flare);

    var current = oreLocator.locations;
    async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));

    // Bind the main builder back
    ubind(builder);

    // We know we have one drill
    var count = 1, searching = true;
    while searching do
        searching = !finished(oreLocator.findDrillLocation);

        while current < oreLocator.locations do
            var index = current * 4;
            var size = bank1[index + 1];
            if size >= 3 then
                var x = bank1[index + 2];
                var y = bank1[index + 3];

                buildTitaniumDrill(x - 1, y - 1, in out count);
                buildTitaniumDrill(x + 1, y - 1, in out count);
                buildTitaniumDrill(x - 1, y + 1, in out count);
                buildTitaniumDrill(x + 1, y + 1, in out count);
            end;
            current++;
        end;

        if count >= 8 then break; end;
    end;

    async(oreLocator.stopLocation());
end;

void buildThoriumDrill()
    // We're using the main builder for this, and calling synchronously
    oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);

    meetTarget(LASER_DRILL);

    var result = await(oreLocator.layoutThoriumDrill);
    if !result then error("Cannot locate spot for thorium drill"); end;
    thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0);

    buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
    buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
    thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
    buildRemoteBlock(POWER_NODE, oreLocator.nodeX, oreLocator.nodeY);
    buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
    buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
    thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
    if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
    display.thoriumDrill = thoriumDrill;
    display.thoriumContainer = thoriumContainer;
end;

// MAIN

void buildUnits()
    meetTarget(0, 0, 0, 0, 0, 0, 0, 0);
    display.totalTargets = 0;
    display.nextBlock = null;
    controller.leadReserve = 0;
    controller.siliconReserve = 0;
end;

begin
    // INITIALIZATION

    do
        builder = ubind(@poly);
        core = ulocate(:building, :core, false, out coreX, out coreY);
    while core == null;

    display = processor1;
    flareController = processor3;
    oreLocator = processor4;
    blockBuilder = processor5;

    // PHASE 0: BASIC BLOCKS

    press = buildBlockFromCfg(PRESS);
    battery = buildBlockFromCfg(BATTERY1);
    buildBlockFromCfg(BATTERY2);
    generator = buildBlockFromCfg(GENERATOR);

    powerTarget = 400;

    smelter = buildBlockFromCfg(SMELTER);
    buildBlockFromCfg(INVERTED_SORT1);
    titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
    display.titaniumDrill = titaniumDrill;
    unloader1 = buildBlockFromCfg(UNLOADER1);
    controller.unloader1 = unloader1;
    buildBlockFromCfg(INVERTED_SORT2);
    buildBlockFromCfg(OVERFLOW_GATE1);
    graphiteSurplus = 100;

    // Build and initialize base controller

    controller = buildBlockFromCfg(PROCESSOR, processor2);
    controller.display = display;
    controller.core = core;
    controller.bank = bank1;
    controller.battery = battery;
    controller.generator = generator;
    controller.smelter = smelter;
    controller.press = press;

    buildBlockFromCfg(POWER_NODE);
    controller.unloader2 = buildBlockFromCfg(UNLOADER2);

    var factory = buildBlockFromCfg(AIR_FACTORY);
    controller.factory = factory;
    display.airFactory = factory;

    // PHASE 1: BUILDING UNITS

    controller.flareTarget = 1;
    controller.monoTarget = 3;
    controller.polyTarget = 0;
    controller.pressTarget = 85;
    controller.smelterTarget = 150;
    controller.kilnTarget = 30;
    siliconSurplus = leadSurplus = 20;

    buildUnits();
    do
        supplyBase();

        // We're low on power: the air units might not get built in time
        // Go on building additional power reserves yourself.
        if battery.@totalPower < 300 then break; end;
    while controller.monos < 3;

    // Build stock
    siliconSurplus = 65;

    // Kiln - needed for metaglass
    buildBlockFromCfg(UNLOADER3);
    buildBlockFromCfg(INVERTED_SORT3);
    kiln = buildBlockFromCfg(KILN);
    controller.kiln = kiln;

    // Steam generator
    buildBlockFromCfg(WATER_EXT);
    buildBlockFromCfg(OVERFLOW_GATE2);
    buildBlockFromCfg(OVERFLOW_GATE3);
    controller.generator2 = buildBlockFromCfg(STEAM_GEN);

    controller.multipress = buildBlockFromCfg(MULTIPRESS);
    //buildBlockFromCfg(WATER_EXT2);

    //buildBlockFromCfg(BATTERY_LARGE);
    graphiteSurplus = 200;

    // POLYS
    controller.payloadRouter = buildBlockFromCfg(PAYLOAD_ROUTER);
    buildBlockFromCfg(UNLOADER4);
    buildBlockFromCfg(UNDERFLOW_GATE);
    var reconstructor = buildBlockFromCfg(ADDITIVE_REC);
    controller.reconstructor = reconstructor;
    display.reconstructor = reconstructor;
    buildBlockFromCfg(BATTERY_LARGE);

    buildUnits();

    // Even more stock
    siliconSurplus = 1000;
    metaglassSurplus = 200;

    controller.polyTarget = 4;
    controller.smelter2 = buildBlockFromCfg(SMELTER2);
    buildBlockFromCfg(UNLOADER5, @sand);
    buildUnits();

    while controller.polys < 2 do
        supplyBase();
    end;

    controller.flareTarget = 3;
    while controller.flares < 2 do
        supplyBase();
    end;

    controller.monoTarget = 8;
    controller.polyTarget = 6;

    // Build more titanium drills now
    // The base can already be fully served by monos and polys,
    // the main builder no longer needs to be occupied by supplying base
    // Note: display three concurrent goals
    display.nextBlock = @ore-titanium;
    buildTitaniumDrills();
    display.nextBlock = null;

    buildThoriumDrill();
    display.nextBlock = null;

    controller.megaTarget = 1;
    while controller.polys < 6 do
        supplyBase();
    end;

    buildBlockFromCfg(UNLOADER6, @silicon);
    buildBlockFromCfg(UNDERFLOW_GATE2);
    var multiReconstructor = buildBlockFromCfg(MULTIPLICATIVE_REC);
    controller.multiReconstructor = multiReconstructor;
    display.multiReconstructor = multiReconstructor;

    buildUnits();
//    controller.megaTarget = 8;

    while true do
        supplyBase();
    end;
end;
