#set target = 8;
#set syntax = strict;
//#set sort-variables;

noinit var controller;

require units;
require "Links.mnd";
require "Common.mnd";
require "Actions.mnd";
require "Display.mnd" remote display;
require "OreLocator.mnd" remote oreLocator;
require "CoreController.mnd" remote controller;
require "MonoController.mnd" remote monoController;
require "PolyController.mnd" remote polyController;
require "BlockBuilder.mnd" remote blockBuilder;

// At this point, we're only using a poly
const capacity = 30;

// Built blocks
var
    titaniumDrill = null,
    thoriumDrill = null,
    thoriumBattery = null,
    thoriumContainer = null,
    thoriumGenerator = null;

noinit var
    core, coreX, coreY,
    builder;

    // Targets to be met for the next build
noinit mlog(@copper.@name)      var targetCopper;
noinit mlog(@lead.@name)        var targetLead;
noinit mlog(@graphite.@name)    var targetGraphite;
noinit mlog(@silicon.@name)     var targetSilicon;
noinit mlog(@titanium.@name)    var targetTitanium;
noinit mlog(@metaglass.@name)   var targetMetaglass;
noinit mlog(@thorium.@name)     var targetThorium;
noinit                          var noTarget;
noinit                          var powerTarget;

var
    leadSurplus = 0,
    graphiteSurplus = 20,
    siliconSurplus = 20,
    siliconMonoSurplus = 0,
    metaglassSurplus = 20;

external bank1[511] logPosition = 511;

// SUPPLY OPERATIONS

inline void supplyBase0()
    var supplied = false;

    if unloader1 == null then
        if core.@graphite < targetGraphite then
            if press.@coal < 5 then
                status1("Goal 1: graphite requirement");
                supplyBlock(press, @coal);
                supplied = true;
            end;
        end;

        if core.@silicon < targetSilicon then
            if smelter.@coal < 5 then
                status1("Goal 2: coal for silicon requirement");
                supplyBlock(smelter, @coal);
                supplied = true;
            elsif smelter.@sand < 5 then
                status1("Goal 3: sand for silicon requirement");
                supplyBlock(smelter, @sand);
                supplied = true;
            end;
        end;

        if battery1.@totalPower < powerTarget then
            if generator.@coal < 2 then
                status1("Goal 4: supplying generator");
                supplyBlock(generator, @coal);
                supplied = true;
            end;
       end;
    end;

    var titaniumTrigger = core.@titanium < targetTitanium ? min(7, targetTitanium - core.@titanium) : 100;
    if titaniumDrill.@titanium < titaniumTrigger then
        if !supplied then
            if battery1.@totalPower < unloader1 * powerTarget then
                status1("Goal 5: supplying generator");
                mineOre(@coal);
            elsif core.@silicon < targetSilicon then
                status1("Goal 6: silicon requirement");
                var coal = core.@coal;
                var sand = core.@sand;
                var ore = coal < sand ? @coal : @sand;
                mineOre(ore);
            elsif core.@copper < targetCopper then
                status1("Goal 7: copper requirement");
                mineOre(@copper);
            elsif core.@lead < targetLead then
                status1("Goal 8: lead requirement");
                mineOre(@lead);
            elsif core.@metaglass < targetMetaglass then
                status1("Goal 9: metaglass requirement");
                mineOre(@sand);
            else
                status1("Goal 10: supplying base");
                var coal = core.@coal;
                var sand = core.@sand;
                var ore = coal <= sand ? @coal : @sand;
                mineOre(ore);
            end;
        end;
    else
        status1("Goal 11: Fetching titanium");
        fetchBlock(titaniumDrill, @titanium);
    end;
end;

inline void supplyBase1()
    status1("Phase 1: supplying base");
    mineOre(@coal);
end;

inline void supplyBase2()
    status1("Phase 2: servicing thorium drill");

    if thoriumBattery.@totalPower < 2000 then
        if thoriumGenerator.@coal == 0 then
            if core.@coal < 50 then
                supplyBlock(thoriumGenerator, @coal);
            else
                supplyBlockFromCore(thoriumGenerator, @coal);
            end;
        end;
    end;
    fetchBlock(thoriumContainer, @thorium);

    if core.@thorium > 400 then
        setPolyTarget(4);
    end;
end;

void supplyBase()
    monoController.sandTarget = max(0, siliconMonoSurplus + targetSilicon - core.@silicon);

    if thoriumContainer then
        supplyBase2();
    elsif controller.monos > 1 then
        supplyBase1();
    else
        supplyBase0();
    end;
end;

inline def targetMet()
    // This is horrible, but Mindcode doesn't do short-circuit evaluation yet.
    if core.@copper < targetCopper then return false; end;
    if core.@lead < targetLead then return false; end;
    if core.@graphite < targetGraphite then return false; end;
    if core.@silicon < targetSilicon then return false; end;
    if core.@titanium < targetTitanium then return false; end;
    if core.@metaglass < targetMetaglass then return false; end;
    if core.@thorium < targetThorium then return false; end;
    return true;
end;

void meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, forBuild, isNoTarget)
    // Update display
    var count = 0;
    for var t in copper, lead, graphite, silicon, titanium, metaglass, thorium do count += sign(t); end;
    display.totalTargets = count;
    display.nextBlock = block;
    display.targetCopper = copper;
    display.targetLead = lead;
    display.targetGraphite = graphite;
    display.targetSilicon = silicon;
    display.targetTitanium = titanium;
    display.targetMetaglass = metaglass;
    display.targetThorium = thorium;

    targetCopper = copper;
    targetLead = lead + leadSurplus;
    targetGraphite = graphite;
    targetSilicon = silicon;
    targetTitanium = titanium;
    targetMetaglass = metaglass;
    targetThorium = thorium;
    noTarget = isNoTarget;

    controller.pressTarget = graphite + graphiteSurplus;
    controller.smelterTarget = silicon + siliconSurplus;
    controller.kilnTarget = metaglass + metaglassSurplus;
    controller.leadReserve = lead + leadSurplus;
    controller.siliconReserve = silicon + sign(silicon) * 20;
    controller.graphiteReserve = graphite + sign(graphite) * 20;

    monoController.leadTarget = targetLead;
    monoController.copperTarget = targetCopper;

    while !targetMet() do
        supplyBase();
    end;

    if forBuild then
        controller.buildStart();
        while !targetMet() do
            supplyBase();
        end;
    end;
end;

// BUILDING OPERATIONS

def buildBlock(block, x, y, copper, lead, graphite, silicon, titanium, metaglass, thorium, rotation, config, index)
    meetTarget(block, copper, lead, graphite, silicon, titanium, metaglass, thorium, controller != null, false);
    var built = blockBuilder.buildBlockAt(block, x, y, rotation, config, index);
    async(controller.buildStop());
    return built;
end;

def buildRemoteBlock(cfg, x, y)
    if x + y > 0 then
        var type, cu, pb, gr, si, ti, mg, th, rotation, index;
        unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
        return buildBlock(type, x, y, cu, pb, gr, si, ti, mg, th, rotation, null, index);
    end;
    return false;
end;

// Builds a block
def buildBlockFromCfg(cfg, config)
    var type, x, y, cu, pb, gr, si, ti, mg, th, rotation, index;
    unpackCfg(cfg, out type, out x, out y, out cu, out pb, out gr, out si, out ti, out mg, out th, out rotation, , out index);
    var building = buildBlock(type, coreX + x, coreY + y, cu, pb, gr, si, ti, mg, th, rotation, config, index);
    @this.write(building, cfg);
    display.write(building, cfg);
    controller.write(building, cfg);
    return building;
end;

def buildBlockFromCfg(cfg)
    buildBlockFromCfg(cfg, null);
end;

void meetTarget(cfg)
    var type, cu, pb, gr, si, ti, mg, th;
    unpackCfg(cfg, out type, , , out cu, out pb, out gr, out si, out ti, out mg, out th);
    meetTarget(type, cu, pb, gr, si, ti, mg, th, false, false);
end;

def buildFirstTitaniumDrill(cfg)
    meetTarget(cfg);

    display.nextBlock = @titanium;
    var dx, dy;
    var result = oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 2, 4, out dx, out dy);
    if !result then error("Cannot locate spot for titanium drill"); end;
    display.nextBlock = @pneumatic-drill;

    return blockBuilder.buildFirstTitaniumDrillAt(dx, dy);
end;

void blocksBuildTitaniumDrills()
    ubind(@flare);

    var current = oreLocator.locations;
    async(oreLocator.findDrillLocation(coreX, coreY, @unit, @titanium, @ore-titanium, 4, 1e9));

    // Bind the main builder back
    ubind(builder);

    blockBuilder.buildTitaniumDrills(controller, current);
    async(oreLocator.stopLocation());
end;


void buildThoriumDrill()
    // We're using the main builder for this, and calling synchronously
    oreLocator.layoutThoriumDrill(coreX, coreY, @unit, 7);

    meetTarget(LASER_DRILL);

    var result = await(oreLocator.layoutThoriumDrill);
    if !result then error("Cannot locate spot for thorium drill"); end;
    thoriumDrill = blockBuilder.buildBlockAt(@laser-drill, oreLocator.drillX, oreLocator.drillY, null, 0, -1);

    buildRemoteBlock(WATER_EXT, oreLocator.water1X, oreLocator.water1Y);
    buildRemoteBlock(WATER_EXT, oreLocator.water2X, oreLocator.water2Y);
    thoriumGenerator = buildRemoteBlock(STEAM_GEN, oreLocator.generatorX, oreLocator.generatorY);
    buildRemoteBlock(POWER_NODE, oreLocator.node1X, oreLocator.node1Y);
    buildRemoteBlock(POWER_NODE, oreLocator.node2X, oreLocator.node2Y);
    buildRemoteBlock(SOLAR_PANEL, oreLocator.panelX, oreLocator.panelY);
    thoriumBattery = buildRemoteBlock(BATTERY1, oreLocator.batteryX, oreLocator.batteryY);
    thoriumContainer = buildRemoteBlock(CONTAINER, oreLocator.containerX, oreLocator.containerY);
    if thoriumContainer == null then thoriumContainer = thoriumDrill; end;
    display.thoriumDrill = thoriumDrill;
    display.thoriumContainer = thoriumContainer;

    polyController.setThoriumContainer(thoriumContainer);
end;

// MAIN

void buildUnits()
    meetTarget(0, 0, 0, 0, 0, 0, 0, 0, false, true);
    display.totalTargets = 0;
    display.nextBlock = null;
    controller.leadReserve = 0;
    controller.siliconReserve = 0;
    controller.graphiteReserve = 0;
end;

begin
    // INITIALIZATION

    do
        builder = ubind(@poly);
        core = ulocate(:building, :core, false, out coreX, out coreY);
    while core == null;

    // PHASE 0: BASIC BLOCKS

    buildBlockFromCfg(PRESS);
    buildBlockFromCfg(BATTERY1);
    buildBlockFromCfg(BATTERY2);
    buildBlockFromCfg(GENERATOR);

    powerTarget = 400;

    buildBlockFromCfg(SMELTER);
    buildBlockFromCfg(INVERTED_SORT1);
    titaniumDrill = buildFirstTitaniumDrill(PNEUMATIC_DRILL);
    display.titaniumDrill = titaniumDrill;
    buildBlockFromCfg(UNLOADER1);
    buildBlockFromCfg(INVERTED_SORT2);
    buildBlockFromCfg(OVERFLOW_GATE1);
    graphiteSurplus = 80;

    // Build and initialize base controller

    controller = buildBlockFromCfg(PROCESSOR, coreControllerConfig);

    controller.timer = timer;
    controller.display = display;
    controller.core = core;
    controller.bank = bank1;

    for var block in BLOCKS[0 ... 10] do
        controller.write(@this.read(block), block);
    end;

    buildBlockFromCfg(POWER_NODE);
    buildBlockFromCfg(UNLOADER2);
    buildBlockFromCfg(OVERFLOW_GATE2);
    buildBlockFromCfg(OVERFLOW_GATE3);

    buildBlockFromCfg(AIR_FACTORY);

    // PHASE 1: BUILDING UNITS

    setFlareTarget(1);
    setMonoTarget(5);
    controller.pressTarget = 85;
    controller.smelterTarget = 150;
    controller.kilnTarget = 30;
    siliconSurplus = leadSurplus = 20;

    buildUnits();
    do
        supplyBase();

        // We're low on power: the air units might not get built in time
        // Go on building additional power reserves yourself.
        if battery1.@totalPower < 300 then break; end;
    while controller.monos < 3;

    // Build stock
    siliconSurplus = 65;

    // Kiln - needed for metaglass
    buildBlockFromCfg(UNLOADER3);
    buildBlockFromCfg(INVERTED_SORT3);
    buildBlockFromCfg(KILN);

    buildBlockFromCfg(MULTIPRESS);

    // Steam generator
    buildBlockFromCfg(WATER_EXT);
    buildBlockFromCfg(STEAM_GEN);

    buildBlockFromCfg(SMELTER2);

    // POLYS
    buildBlockFromCfg(UNLOADER4);
    buildBlockFromCfg(INVERTED_SORT4);
    buildBlockFromCfg(ADDITIVE_REC);

    // Even more stock
    siliconSurplus = 1000;
    siliconMonoSurplus = 20;
    metaglassSurplus = 100;
    graphiteSurplus = 200;

    setMonoTarget(2);
    setPolyTarget(3);
    buildUnits();

    while controller.polys < 2 do
        supplyBase();
    end;

    setFlareTarget(2);
    while controller.flares < 2 do
        supplyBase();
    end;

    // Build more titanium drills now
    // The base can already be fully served by monos and polys,
    // the main builder no longer needs to be occupied by supplying base
    // Note: display three concurrent goals
    display.nextBlock = @ore-titanium;
    blocksBuildTitaniumDrills();
    display.nextBlock = null;

    graphiteSurplus = 10;
    metaglassSurplus = 50;

    buildThoriumDrill();
    display.nextBlock = null;

    while controller.polys < 3 do
        supplyBase();
    end;

    controller.powerTarget = 3200;
    siliconMonoSurplus = 120;
    leadSurplus = 0;

    buildBlockFromCfg(MULTIPLICATIVE_REC);

    metaglassSurplus = 10;
    setMegaTarget(1);
    buildUnits();

    var tmp = controller.polys - 1;
    controller.polyTarget = tmp;
    controller.polys = tmp;
    display.polys = tmp;
    var x = multiplicative_rec.@x;
    var y = multiplicative_rec.@y;
    do
        move(x, y);
        payEnter();
    while !controller.megas;

    stopAll();
end;

inline void setFlareTarget(target)
    controller.flareTarget = target;
    display.flareTarget = target;
end;

inline void setMonoTarget(target)
    controller.monoTarget = target;
    display.monoTarget = target;
end;

inline void setPolyTarget(target)
    controller.polyTarget = target;
    display.polyTarget = target;
end;

inline void setMegaTarget(target)
    controller.megaTarget = target;
    display.megaTarget = target;
end;

void stopAll()
    controller.finished = true;
    flareController.enabled = false;
    monoController.enabled = false;
    polyController.enabled = false;
    oreLocator.enabled = false;
    blockBuilder.enabled = false;
    measurements.enabled = false;

    flagUnits(@mega);
    flagUnits(@poly);
    flagUnits(@mono);
    flagUnits(@flare);

    while true do
        lineUpUnits(@thisy - 16, @mega);
        lineUpUnits(@thisy - 20, @poly);
        lineUpUnits(@thisy - 24, @mono);
        lineUpUnits(@thisy - 28, @flare);
    end;
end;

void flagUnits(unit)
    var firstUnit;
    do
        firstUnit = ubind(unit);
    while firstUnit == null;

    var x = @thisx;
    do
        flag(x);
        x += 4;
        ubind(unit);
    while @unit != firstUnit;
end;

void lineUpUnits(y, unit)
    var firstUnit = ubind(unit);
    do
        var x = @unit.@flag;
        itemDrop(@air, 1000);
        move(x, y);
        if @unit.@mining then stop(); end;
        ubind(unit);
    while @unit != firstUnit;
end;
