   958 instructions before optimizations.
    30 instructions eliminated by Temp Variables Elimination (2 iterations).
   168 instructions eliminated by Dead Code Elimination (5 iterations).
    86 instructions eliminated by Jump Optimization (5 iterations).
    87 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions modified by Expression Optimization (2 passes, 3 iterations).
   264 instructions eliminated by Data Flow Optimization (7 passes, 25 iterations).
     1 loops improved by Loop Hoisting.
     2 instructions eliminated by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
   400 instructions added by Loop Unrolling (8 iterations).
     2 loops unrolled by Loop Unrolling.
   233 instructions added by Function Inlining (8 iterations).
     3 function calls inlined by Function Inlining.
     8 instructions updated by JumpThreading.
    12 instructions eliminated by Unreachable Code Elimination (2 iterations).
   942 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 589):
    Unroll loop at line 27:5                                     size   +69, benefit      350.0, efficiency      5.072
  * Unroll loop at line 28:9                                     size   +44, benefit     8750.0, efficiency    198.864 (+45 instructions)
    Inline function 'computeRowValues' defined at line 74:1      size  +473, benefit       27.5, efficiency      0.058
    Inline function call at line 162:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 163:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 164:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 165:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 166:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 196:18                          size   +79, benefit        1.3, efficiency      0.016
    Inline function call at line 197:18                          size   +79, benefit        1.3, efficiency      0.016

Pass 1: speed optimization selection (cost limit 544):
  * Unroll loop at line 27:5                                     size  +339, benefit      350.0, efficiency      1.032 (+337 instructions)
    Inline function 'computeRowValues' defined at line 74:1      size  +473, benefit       27.5, efficiency      0.058
    Inline function call at line 162:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 163:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 164:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 165:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 166:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 196:18                          size   +79, benefit        1.3, efficiency      0.016
    Inline function call at line 197:18                          size   +79, benefit        1.3, efficiency      0.016

Pass 1: speed optimization selection (cost limit 207):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +473, benefit       27.5, efficiency      0.058
  * Inline function call at line 162:14                          size   +79, benefit        5.0, efficiency      0.063 (+74 instructions)
    Inline function call at line 163:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 164:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 165:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 166:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 196:18                          size   +79, benefit        1.3, efficiency      0.016
    Inline function call at line 197:18                          size   +79, benefit        1.3, efficiency      0.016

Pass 1: speed optimization selection (cost limit 133):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +394, benefit       22.5, efficiency      0.057
  * Inline function call at line 163:14                          size   +79, benefit        5.0, efficiency      0.063 (+74 instructions)
    Inline function call at line 164:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 165:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 166:14                          size   +79, benefit        5.0, efficiency      0.063
    Inline function call at line 196:18                          size   +79, benefit        1.3, efficiency      0.016
    Inline function call at line 197:18                          size   +79, benefit        1.3, efficiency      0.016

Pass 1: speed optimization selection (cost limit 59):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +315, benefit       17.5, efficiency      0.056
  ! Inline function call at line 164:14                          size   +79, benefit        5.0, efficiency      0.063
  ! Inline function call at line 165:14                          size   +79, benefit        5.0, efficiency      0.063
  ! Inline function call at line 166:14                          size   +79, benefit        5.0, efficiency      0.063
  ! Inline function call at line 196:18                          size   +79, benefit        1.3, efficiency      0.016
  ! Inline function call at line 197:18                          size   +79, benefit        1.3, efficiency      0.016

Pass 2: speed optimization selection (cost limit 118):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +311, benefit       17.5, efficiency      0.056
  * Inline function call at line 164:14                          size   +78, benefit        5.0, efficiency      0.064 (+72 instructions)
    Inline function call at line 165:14                          size   +78, benefit        5.0, efficiency      0.064
    Inline function call at line 166:14                          size   +78, benefit        5.0, efficiency      0.064
    Inline function call at line 196:18                          size   +78, benefit        1.3, efficiency      0.016
    Inline function call at line 197:18                          size   +78, benefit        1.3, efficiency      0.016

Pass 2: speed optimization selection (cost limit 46):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +233, benefit       12.5, efficiency      0.054
  ! Inline function call at line 165:14                          size   +78, benefit        5.0, efficiency      0.064
  ! Inline function call at line 166:14                          size   +78, benefit        5.0, efficiency      0.064
  ! Inline function call at line 196:18                          size   +78, benefit        1.3, efficiency      0.016
  ! Inline function call at line 197:18                          size   +78, benefit        1.3, efficiency      0.016

Pass 3: speed optimization selection (cost limit 46):
  ! Inline function 'computeRowValues' defined at line 74:1      size  +233, benefit       12.5, efficiency      0.054
  ! Inline function call at line 165:14                          size   +78, benefit        5.0, efficiency      0.064
  ! Inline function call at line 166:14                          size   +78, benefit        5.0, efficiency      0.064
  ! Inline function call at line 196:18                          size   +78, benefit        1.3, efficiency      0.016
  ! Inline function call at line 197:18                          size   +78, benefit        1.3, efficiency      0.016

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-84 instructions):
 
   256 label *label37
   257 set *tmp71 null
   258 label *label38
-    * set *tmp69 *tmp71
   259 jump *label36 always
   260 label *label35
-    * set *tmp69 null
   261 label *label36
   262 label *label34
   263 set :updatePosition.1:dx -0.5
 
   275 label *label42
   276 set *tmp75 null
   277 label *label43
-    * set *tmp73 *tmp75
   278 jump *label41 always
   279 label *label40
-    * set *tmp73 null
   280 label *label41
   281 label *label39
   282 set :updatePosition.2:dx 0.5
 
   294 label *label47
   295 set *tmp79 null
   296 label *label48
-    * set *tmp77 *tmp79
   297 jump *label46 always
   298 label *label45
-    * set *tmp77 null
   299 label *label46
   300 label *label44
   301 set :updatePosition.3:dx 1.5
 
   313 label *label52
   314 set *tmp83 null
   315 label *label53
-    * set *tmp81 *tmp83
   316 jump *label51 always
   317 label *label50
-    * set *tmp81 null
   318 label *label51
   319 label *label49
   320 label *label33
 
   336 label *label58
   337 set *tmp87 null
   338 label *label59
-    * set *tmp85 *tmp87
   339 jump *label57 always
   340 label *label56
-    * set *tmp85 null
   341 label *label57
   342 label *label55
   343 set :updatePosition.5:dx -0.5
 
   355 label *label63
   356 set *tmp91 null
   357 label *label64
-    * set *tmp89 *tmp91
   358 jump *label62 always
   359 label *label61
-    * set *tmp89 null
   360 label *label62
   361 label *label60
   362 set :updatePosition.6:dx 0.5
 
   374 label *label68
   375 set *tmp95 null
   376 label *label69
-    * set *tmp93 *tmp95
   377 jump *label67 always
   378 label *label66
-    * set *tmp93 null
   379 label *label67
   380 label *label65
   381 set :updatePosition.7:dx 1.5
 
   393 label *label73
   394 set *tmp99 null
   395 label *label74
-    * set *tmp97 *tmp99
   396 jump *label72 always
   397 label *label71
-    * set *tmp97 null
   398 label *label72
   399 label *label70
   400 label *label54
 
   416 label *label79
   417 set *tmp103 null
   418 label *label80
-    * set *tmp101 *tmp103
   419 jump *label78 always
   420 label *label77
-    * set *tmp101 null
   421 label *label78
   422 label *label76
   423 set :updatePosition.9:dx -0.5
 
   435 label *label84
   436 set *tmp107 null
   437 label *label85
-    * set *tmp105 *tmp107
   438 jump *label83 always
   439 label *label82
-    * set *tmp105 null
   440 label *label83
   441 label *label81
   442 set :updatePosition.10:dx 0.5
 
   454 label *label89
   455 set *tmp111 null
   456 label *label90
-    * set *tmp109 *tmp111
   457 jump *label88 always
   458 label *label87
-    * set *tmp109 null
   459 label *label88
   460 label *label86
   461 set :updatePosition.11:dx 1.5
 
   473 label *label94
   474 set *tmp115 null
   475 label *label95
-    * set *tmp113 *tmp115
   476 jump *label93 always
   477 label *label92
-    * set *tmp113 null
   478 label *label93
   479 label *label91
   480 label *label75
 
   496 label *label100
   497 set *tmp119 null
   498 label *label101
-    * set *tmp117 *tmp119
   499 jump *label99 always
   500 label *label98
-    * set *tmp117 null
   501 label *label99
   502 label *label97
   503 set :updatePosition.13:dx -0.5
 
   515 label *label105
   516 set *tmp123 null
   517 label *label106
-    * set *tmp121 *tmp123
   518 jump *label104 always
   519 label *label103
-    * set *tmp121 null
   520 label *label104
   521 label *label102
   522 set :updatePosition.14:dx 0.5
 
   534 label *label110
   535 set *tmp127 null
   536 label *label111
-    * set *tmp125 *tmp127
   537 jump *label109 always
   538 label *label108
-    * set *tmp125 null
   539 label *label109
   540 label *label107
   541 set :updatePosition.15:dx 1.5
 
   553 label *label115
   554 set *tmp131 null
   555 label *label116
-    * set *tmp129 *tmp131
   556 jump *label114 always
   557 label *label113
-    * set *tmp129 null
   558 label *label114
   559 label *label112
   560 label *label96
-    * set *tmp63 null
   561 jump *label32 always
   562 label *label31
   563 op equal *tmp132 :findBestPosition:size 3
 
   589 label *label123
   590 set *tmp144 null
   591 label *label124
-    * set *tmp142 *tmp144
   592 jump *label122 always
   593 label *label121
-    * set *tmp142 null
   594 label *label122
   595 label *label120
   596 set :updatePosition.17:dx 0
 
   608 label *label128
   609 set *tmp148 null
   610 label *label129
-    * set *tmp146 *tmp148
   611 jump *label127 always
   612 label *label126
-    * set *tmp146 null
   613 label *label127
   614 label *label125
   615 set :updatePosition.18:dx 1
 
   627 label *label133
   628 set *tmp152 null
   629 label *label134
-    * set *tmp150 *tmp152
   630 jump *label132 always
   631 label *label131
-    * set *tmp150 null
   632 label *label132
   633 label *label130
   634 label *label119
 
   650 label *label139
   651 set *tmp157 null
   652 label *label140
-    * set *tmp155 *tmp157
   653 jump *label138 always
   654 label *label137
-    * set *tmp155 null
   655 label *label138
   656 label *label136
   657 set :updatePosition.20:dx 0
 
   669 label *label144
   670 set *tmp161 null
   671 label *label145
-    * set *tmp159 *tmp161
   672 jump *label143 always
   673 label *label142
-    * set *tmp159 null
   674 label *label143
   675 label *label141
   676 set :updatePosition.21:dx 1
 
   688 label *label149
   689 set *tmp165 null
   690 label *label150
-    * set *tmp163 *tmp165
   691 jump *label148 always
   692 label *label147
-    * set *tmp163 null
   693 label *label148
   694 label *label146
   695 label *label135
 
   711 label *label155
   712 set *tmp170 null
   713 label *label156
-    * set *tmp168 *tmp170
   714 jump *label154 always
   715 label *label153
-    * set *tmp168 null
   716 label *label154
   717 label *label152
   718 set :updatePosition.23:dx 0
 
   730 label *label160
   731 set *tmp174 null
   732 label *label161
-    * set *tmp172 *tmp174
   733 jump *label159 always
   734 label *label158
-    * set *tmp172 null
   735 label *label159
   736 label *label157
   737 set :updatePosition.24:dx 1
 
   749 label *label165
   750 set *tmp178 null
   751 label *label166
-    * set *tmp176 *tmp178
   752 jump *label164 always
   753 label *label163
-    * set *tmp176 null
   754 label *label164
   755 label *label162
   756 label *label151
 
   811 label *label173
   812 set *tmp198 null
   813 label *label174
-    * set *tmp196 *tmp198
   814 jump *label172 always
   815 label *label171
-    * set *tmp196 null
   816 label *label172
   817 label *label170
   818 set :updatePosition.26:dx -0.5
 
   830 label *label178
   831 set *tmp202 null
   832 label *label179
-    * set *tmp200 *tmp202
   833 jump *label177 always
   834 label *label176
-    * set *tmp200 null
   835 label *label177
   836 label *label175
   837 set :updatePosition.27:dx 0.5
 
   849 label *label183
   850 set *tmp206 null
   851 label *label184
-    * set *tmp204 *tmp206
   852 jump *label182 always
   853 label *label181
-    * set *tmp204 null
   854 label *label182
   855 label *label180
   856 set :updatePosition.28:dx 1.5
 
   868 label *label188
   869 set *tmp210 null
   870 label *label189
-    * set *tmp208 *tmp210
   871 jump *label187 always
   872 label *label186
-    * set *tmp208 null
   873 label *label187
   874 label *label185
   875 label *label169
 
   891 label *label194
   892 set *tmp214 null
   893 label *label195
-    * set *tmp212 *tmp214
   894 jump *label193 always
   895 label *label192
-    * set *tmp212 null
   896 label *label193
   897 label *label191
   898 set :updatePosition.30:dx -0.5
 
   910 label *label199
   911 set *tmp218 null
   912 label *label200
-    * set *tmp216 *tmp218
   913 jump *label198 always
   914 label *label197
-    * set *tmp216 null
   915 label *label198
   916 label *label196
   917 set :updatePosition.31:dx 0.5
 
   929 label *label204
   930 set *tmp222 null
   931 label *label205
-    * set *tmp220 *tmp222
   932 jump *label203 always
   933 label *label202
-    * set *tmp220 null
   934 label *label203
   935 label *label201
   936 set :updatePosition.32:dx 1.5
 
   948 label *label209
   949 set *tmp226 null
   950 label *label210
-    * set *tmp224 *tmp226
   951 jump *label208 always
   952 label *label207
-    * set *tmp224 null
   953 label *label208
   954 label *label206
   955 label *label190
 
   971 label *label215
   972 set *tmp230 null
   973 label *label216
-    * set *tmp228 *tmp230
   974 jump *label214 always
   975 label *label213
-    * set *tmp228 null
   976 label *label214
   977 label *label212
   978 set :updatePosition.34:dx -0.5
 
   990 label *label220
   991 set *tmp234 null
   992 label *label221
-    * set *tmp232 *tmp234
   993 jump *label219 always
   994 label *label218
-    * set *tmp232 null
   995 label *label219
   996 label *label217
   997 set :updatePosition.35:dx 0.5
 
  1009 label *label225
  1010 set *tmp238 null
  1011 label *label226
-    * set *tmp236 *tmp238
  1012 jump *label224 always
  1013 label *label223
-    * set *tmp236 null
  1014 label *label224
  1015 label *label222
  1016 set :updatePosition.36:dx 1.5
 
  1028 label *label230
  1029 set *tmp242 null
  1030 label *label231
-    * set *tmp240 *tmp242
  1031 jump *label229 always
  1032 label *label228
-    * set *tmp240 null
  1033 label *label229
  1034 label *label227
  1035 label *label211
 
  1051 label *label236
  1052 set *tmp246 null
  1053 label *label237
-    * set *tmp244 *tmp246
  1054 jump *label235 always
  1055 label *label234
-    * set *tmp244 null
  1056 label *label235
  1057 label *label233
  1058 set :updatePosition.38:dx -0.5
 
  1070 label *label241
  1071 set *tmp250 null
  1072 label *label242
-    * set *tmp248 *tmp250
  1073 jump *label240 always
  1074 label *label239
-    * set *tmp248 null
  1075 label *label240
  1076 label *label238
  1077 set :updatePosition.39:dx 0.5
 
  1089 label *label246
  1090 set *tmp254 null
  1091 label *label247
-    * set *tmp252 *tmp254
  1092 jump *label245 always
  1093 label *label244
-    * set *tmp252 null
  1094 label *label245
  1095 label *label243
  1096 set :updatePosition.40:dx 1.5
 
  1108 label *label251
  1109 set *tmp258 null
  1110 label *label252
-    * set *tmp256 *tmp258
  1111 jump *label250 always
  1112 label *label249
-    * set *tmp256 null
  1113 label *label250
  1114 label *label248
  1115 label *label232
  1116 set *tmp133 null
  1117 label *label118
-    * set *tmp63 *tmp133
  1118 label *label32
  1119 op mul *tmp259 :findBestPosition:best 255
  1120 set :findBestPosition*retval *tmp259

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-84 instructions):
 
   251 set :findBestPosition:bestX :updatePosition:dx
   252 set :findBestPosition:bestY :updatePosition:dy
   253 set :findBestPosition:best :updatePosition:value
-    * set *tmp71 :findBestPosition:best
   254 jump *label38 always
   255 label *label37
-    * set *tmp71 null
   256 label *label38
   257 jump *label36 always
   258 label *label35
 
   268 set :findBestPosition:bestX :updatePosition.1:dx
   269 set :findBestPosition:bestY :updatePosition.1:dy
   270 set :findBestPosition:best :updatePosition.1:value
-    * set *tmp75 :findBestPosition:best
   271 jump *label43 always
   272 label *label42
-    * set *tmp75 null
   273 label *label43
   274 jump *label41 always
   275 label *label40
 
   285 set :findBestPosition:bestX :updatePosition.2:dx
   286 set :findBestPosition:bestY :updatePosition.2:dy
   287 set :findBestPosition:best :updatePosition.2:value
-    * set *tmp79 :findBestPosition:best
   288 jump *label48 always
   289 label *label47
-    * set *tmp79 null
   290 label *label48
   291 jump *label46 always
   292 label *label45
 
   302 set :findBestPosition:bestX :updatePosition.3:dx
   303 set :findBestPosition:bestY :updatePosition.3:dy
   304 set :findBestPosition:best :updatePosition.3:value
-    * set *tmp83 :findBestPosition:best
   305 jump *label53 always
   306 label *label52
-    * set *tmp83 null
   307 label *label53
   308 jump *label51 always
   309 label *label50
 
   323 set :findBestPosition:bestX :updatePosition.4:dx
   324 set :findBestPosition:bestY :updatePosition.4:dy
   325 set :findBestPosition:best :updatePosition.4:value
-    * set *tmp87 :findBestPosition:best
   326 jump *label59 always
   327 label *label58
-    * set *tmp87 null
   328 label *label59
   329 jump *label57 always
   330 label *label56
 
   340 set :findBestPosition:bestX :updatePosition.5:dx
   341 set :findBestPosition:bestY :updatePosition.5:dy
   342 set :findBestPosition:best :updatePosition.5:value
-    * set *tmp91 :findBestPosition:best
   343 jump *label64 always
   344 label *label63
-    * set *tmp91 null
   345 label *label64
   346 jump *label62 always
   347 label *label61
 
   357 set :findBestPosition:bestX :updatePosition.6:dx
   358 set :findBestPosition:bestY :updatePosition.6:dy
   359 set :findBestPosition:best :updatePosition.6:value
-    * set *tmp95 :findBestPosition:best
   360 jump *label69 always
   361 label *label68
-    * set *tmp95 null
   362 label *label69
   363 jump *label67 always
   364 label *label66
 
   374 set :findBestPosition:bestX :updatePosition.7:dx
   375 set :findBestPosition:bestY :updatePosition.7:dy
   376 set :findBestPosition:best :updatePosition.7:value
-    * set *tmp99 :findBestPosition:best
   377 jump *label74 always
   378 label *label73
-    * set *tmp99 null
   379 label *label74
   380 jump *label72 always
   381 label *label71
 
   395 set :findBestPosition:bestX :updatePosition.8:dx
   396 set :findBestPosition:bestY :updatePosition.8:dy
   397 set :findBestPosition:best :updatePosition.8:value
-    * set *tmp103 :findBestPosition:best
   398 jump *label80 always
   399 label *label79
-    * set *tmp103 null
   400 label *label80
   401 jump *label78 always
   402 label *label77
 
   412 set :findBestPosition:bestX :updatePosition.9:dx
   413 set :findBestPosition:bestY :updatePosition.9:dy
   414 set :findBestPosition:best :updatePosition.9:value
-    * set *tmp107 :findBestPosition:best
   415 jump *label85 always
   416 label *label84
-    * set *tmp107 null
   417 label *label85
   418 jump *label83 always
   419 label *label82
 
   429 set :findBestPosition:bestX :updatePosition.10:dx
   430 set :findBestPosition:bestY :updatePosition.10:dy
   431 set :findBestPosition:best :updatePosition.10:value
-    * set *tmp111 :findBestPosition:best
   432 jump *label90 always
   433 label *label89
-    * set *tmp111 null
   434 label *label90
   435 jump *label88 always
   436 label *label87
 
   446 set :findBestPosition:bestX :updatePosition.11:dx
   447 set :findBestPosition:bestY :updatePosition.11:dy
   448 set :findBestPosition:best :updatePosition.11:value
-    * set *tmp115 :findBestPosition:best
   449 jump *label95 always
   450 label *label94
-    * set *tmp115 null
   451 label *label95
   452 jump *label93 always
   453 label *label92
 
   467 set :findBestPosition:bestX :updatePosition.12:dx
   468 set :findBestPosition:bestY :updatePosition.12:dy
   469 set :findBestPosition:best :updatePosition.12:value
-    * set *tmp119 :findBestPosition:best
   470 jump *label101 always
   471 label *label100
-    * set *tmp119 null
   472 label *label101
   473 jump *label99 always
   474 label *label98
 
   484 set :findBestPosition:bestX :updatePosition.13:dx
   485 set :findBestPosition:bestY :updatePosition.13:dy
   486 set :findBestPosition:best :updatePosition.13:value
-    * set *tmp123 :findBestPosition:best
   487 jump *label106 always
   488 label *label105
-    * set *tmp123 null
   489 label *label106
   490 jump *label104 always
   491 label *label103
 
   501 set :findBestPosition:bestX :updatePosition.14:dx
   502 set :findBestPosition:bestY :updatePosition.14:dy
   503 set :findBestPosition:best :updatePosition.14:value
-    * set *tmp127 :findBestPosition:best
   504 jump *label111 always
   505 label *label110
-    * set *tmp127 null
   506 label *label111
   507 jump *label109 always
   508 label *label108
 
   518 set :findBestPosition:bestX :updatePosition.15:dx
   519 set :findBestPosition:bestY :updatePosition.15:dy
   520 set :findBestPosition:best :updatePosition.15:value
-    * set *tmp131 :findBestPosition:best
   521 jump *label116 always
   522 label *label115
-    * set *tmp131 null
   523 label *label116
   524 jump *label114 always
   525 label *label113
 
   552 set :findBestPosition:bestX :updatePosition.16:dx
   553 set :findBestPosition:bestY :updatePosition.16:dy
   554 set :findBestPosition:best :updatePosition.16:value
-    * set *tmp144 :findBestPosition:best
   555 jump *label124 always
   556 label *label123
-    * set *tmp144 null
   557 label *label124
   558 jump *label122 always
   559 label *label121
 
   569 set :findBestPosition:bestX :updatePosition.17:dx
   570 set :findBestPosition:bestY :updatePosition.17:dy
   571 set :findBestPosition:best :updatePosition.17:value
-    * set *tmp148 :findBestPosition:best
   572 jump *label129 always
   573 label *label128
-    * set *tmp148 null
   574 label *label129
   575 jump *label127 always
   576 label *label126
 
   586 set :findBestPosition:bestX :updatePosition.18:dx
   587 set :findBestPosition:bestY :updatePosition.18:dy
   588 set :findBestPosition:best :updatePosition.18:value
-    * set *tmp152 :findBestPosition:best
   589 jump *label134 always
   590 label *label133
-    * set *tmp152 null
   591 label *label134
   592 jump *label132 always
   593 label *label131
 
   607 set :findBestPosition:bestX :updatePosition.19:dx
   608 set :findBestPosition:bestY :updatePosition.19:dy
   609 set :findBestPosition:best :updatePosition.19:value
-    * set *tmp157 :findBestPosition:best
   610 jump *label140 always
   611 label *label139
-    * set *tmp157 null
   612 label *label140
   613 jump *label138 always
   614 label *label137
 
   624 set :findBestPosition:bestX :updatePosition.20:dx
   625 set :findBestPosition:bestY :updatePosition.20:dy
   626 set :findBestPosition:best :updatePosition.20:value
-    * set *tmp161 :findBestPosition:best
   627 jump *label145 always
   628 label *label144
-    * set *tmp161 null
   629 label *label145
   630 jump *label143 always
   631 label *label142
 
   641 set :findBestPosition:bestX :updatePosition.21:dx
   642 set :findBestPosition:bestY :updatePosition.21:dy
   643 set :findBestPosition:best :updatePosition.21:value
-    * set *tmp165 :findBestPosition:best
   644 jump *label150 always
   645 label *label149
-    * set *tmp165 null
   646 label *label150
   647 jump *label148 always
   648 label *label147
 
   662 set :findBestPosition:bestX :updatePosition.22:dx
   663 set :findBestPosition:bestY :updatePosition.22:dy
   664 set :findBestPosition:best :updatePosition.22:value
-    * set *tmp170 :findBestPosition:best
   665 jump *label156 always
   666 label *label155
-    * set *tmp170 null
   667 label *label156
   668 jump *label154 always
   669 label *label153
 
   679 set :findBestPosition:bestX :updatePosition.23:dx
   680 set :findBestPosition:bestY :updatePosition.23:dy
   681 set :findBestPosition:best :updatePosition.23:value
-    * set *tmp174 :findBestPosition:best
   682 jump *label161 always
   683 label *label160
-    * set *tmp174 null
   684 label *label161
   685 jump *label159 always
   686 label *label158
 
   696 set :findBestPosition:bestX :updatePosition.24:dx
   697 set :findBestPosition:bestY :updatePosition.24:dy
   698 set :findBestPosition:best :updatePosition.24:value
-    * set *tmp178 :findBestPosition:best
   699 jump *label166 always
   700 label *label165
-    * set *tmp178 null
   701 label *label166
   702 jump *label164 always
   703 label *label163
   704 label *label164
   705 label *label162
   706 label *label151
-    * set *tmp133 null
   707 jump *label118 always
   708 label *label117
   709 op sub *tmp179 :findBestPosition:y 3
 
   755 set :findBestPosition:bestX :updatePosition.25:dx
   756 set :findBestPosition:bestY :updatePosition.25:dy
   757 set :findBestPosition:best :updatePosition.25:value
-    * set *tmp198 :findBestPosition:best
   758 jump *label174 always
   759 label *label173
-    * set *tmp198 null
   760 label *label174
   761 jump *label172 always
   762 label *label171
 
   772 set :findBestPosition:bestX :updatePosition.26:dx
   773 set :findBestPosition:bestY :updatePosition.26:dy
   774 set :findBestPosition:best :updatePosition.26:value
-    * set *tmp202 :findBestPosition:best
   775 jump *label179 always
   776 label *label178
-    * set *tmp202 null
   777 label *label179
   778 jump *label177 always
   779 label *label176
 
   789 set :findBestPosition:bestX :updatePosition.27:dx
   790 set :findBestPosition:bestY :updatePosition.27:dy
   791 set :findBestPosition:best :updatePosition.27:value
-    * set *tmp206 :findBestPosition:best
   792 jump *label184 always
   793 label *label183
-    * set *tmp206 null
   794 label *label184
   795 jump *label182 always
   796 label *label181
 
   806 set :findBestPosition:bestX :updatePosition.28:dx
   807 set :findBestPosition:bestY :updatePosition.28:dy
   808 set :findBestPosition:best :updatePosition.28:value
-    * set *tmp210 :findBestPosition:best
   809 jump *label189 always
   810 label *label188
-    * set *tmp210 null
   811 label *label189
   812 jump *label187 always
   813 label *label186
 
   827 set :findBestPosition:bestX :updatePosition.29:dx
   828 set :findBestPosition:bestY :updatePosition.29:dy
   829 set :findBestPosition:best :updatePosition.29:value
-    * set *tmp214 :findBestPosition:best
   830 jump *label195 always
   831 label *label194
-    * set *tmp214 null
   832 label *label195
   833 jump *label193 always
   834 label *label192
 
   844 set :findBestPosition:bestX :updatePosition.30:dx
   845 set :findBestPosition:bestY :updatePosition.30:dy
   846 set :findBestPosition:best :updatePosition.30:value
-    * set *tmp218 :findBestPosition:best
   847 jump *label200 always
   848 label *label199
-    * set *tmp218 null
   849 label *label200
   850 jump *label198 always
   851 label *label197
 
   861 set :findBestPosition:bestX :updatePosition.31:dx
   862 set :findBestPosition:bestY :updatePosition.31:dy
   863 set :findBestPosition:best :updatePosition.31:value
-    * set *tmp222 :findBestPosition:best
   864 jump *label205 always
   865 label *label204
-    * set *tmp222 null
   866 label *label205
   867 jump *label203 always
   868 label *label202
 
   878 set :findBestPosition:bestX :updatePosition.32:dx
   879 set :findBestPosition:bestY :updatePosition.32:dy
   880 set :findBestPosition:best :updatePosition.32:value
-    * set *tmp226 :findBestPosition:best
   881 jump *label210 always
   882 label *label209
-    * set *tmp226 null
   883 label *label210
   884 jump *label208 always
   885 label *label207
 
   899 set :findBestPosition:bestX :updatePosition.33:dx
   900 set :findBestPosition:bestY :updatePosition.33:dy
   901 set :findBestPosition:best :updatePosition.33:value
-    * set *tmp230 :findBestPosition:best
   902 jump *label216 always
   903 label *label215
-    * set *tmp230 null
   904 label *label216
   905 jump *label214 always
   906 label *label213
 
   916 set :findBestPosition:bestX :updatePosition.34:dx
   917 set :findBestPosition:bestY :updatePosition.34:dy
   918 set :findBestPosition:best :updatePosition.34:value
-    * set *tmp234 :findBestPosition:best
   919 jump *label221 always
   920 label *label220
-    * set *tmp234 null
   921 label *label221
   922 jump *label219 always
   923 label *label218
 
   933 set :findBestPosition:bestX :updatePosition.35:dx
   934 set :findBestPosition:bestY :updatePosition.35:dy
   935 set :findBestPosition:best :updatePosition.35:value
-    * set *tmp238 :findBestPosition:best
   936 jump *label226 always
   937 label *label225
-    * set *tmp238 null
   938 label *label226
   939 jump *label224 always
   940 label *label223
 
   950 set :findBestPosition:bestX :updatePosition.36:dx
   951 set :findBestPosition:bestY :updatePosition.36:dy
   952 set :findBestPosition:best :updatePosition.36:value
-    * set *tmp242 :findBestPosition:best
   953 jump *label231 always
   954 label *label230
-    * set *tmp242 null
   955 label *label231
   956 jump *label229 always
   957 label *label228
 
   971 set :findBestPosition:bestX :updatePosition.37:dx
   972 set :findBestPosition:bestY :updatePosition.37:dy
   973 set :findBestPosition:best :updatePosition.37:value
-    * set *tmp246 :findBestPosition:best
   974 jump *label237 always
   975 label *label236
-    * set *tmp246 null
   976 label *label237
   977 jump *label235 always
   978 label *label234
 
   988 set :findBestPosition:bestX :updatePosition.38:dx
   989 set :findBestPosition:bestY :updatePosition.38:dy
   990 set :findBestPosition:best :updatePosition.38:value
-    * set *tmp250 :findBestPosition:best
   991 jump *label242 always
   992 label *label241
-    * set *tmp250 null
   993 label *label242
   994 jump *label240 always
   995 label *label239
 
  1005 set :findBestPosition:bestX :updatePosition.39:dx
  1006 set :findBestPosition:bestY :updatePosition.39:dy
  1007 set :findBestPosition:best :updatePosition.39:value
-    * set *tmp254 :findBestPosition:best
  1008 jump *label247 always
  1009 label *label246
-    * set *tmp254 null
  1010 label *label247
  1011 jump *label245 always
  1012 label *label244
 
  1022 set :findBestPosition:bestX :updatePosition.40:dx
  1023 set :findBestPosition:bestY :updatePosition.40:dy
  1024 set :findBestPosition:best :updatePosition.40:value
-    * set *tmp258 :findBestPosition:best
  1025 jump *label252 always
  1026 label *label251
-    * set *tmp258 null
  1027 label *label252
  1028 jump *label250 always
  1029 label *label249
  1030 label *label250
  1031 label *label248
  1032 label *label232
-    * set *tmp133 null
  1033 label *label118
  1034 label *label32
  1035 op mul *tmp259 :findBestPosition:best 255

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-30 instructions):
 
    25 select :isSolid:result notEqual solid false 1 0
    26 set *tmp3 :isSolid:result
    27 label *label12
-    * op or *tmp4 *tmp0 *tmp3
-    * set :createTerrainMask:result *tmp4
+   28 op or :createTerrainMask:result *tmp0 *tmp3
    29 label *label10
    30 op sub :createTerrainMask:c :createTerrainMask:c 1
    31 jump *label9 always
 
    42 jump *label4 always
    43 end
    44 label *label2
-    * op sub *tmp5 :computeRowValues:x 2
-    * set :spotValue:x *tmp5
+   45 op sub :spotValue:x :computeRowValues:x 2
    46 set :spotValue:y :computeRowValues:y
    47 set :spotValue:ore :computeRowValues:ore
    48 ucontrol getBlock :spotValue:x :spotValue:y type building floor
 
    52 set *tmp6 :spotValue:result
    53 label *label14
    54 set :computeRowValues:x1 *tmp6
-    * op sub *tmp7 :computeRowValues:x 1
-    * set :spotValue.1:x *tmp7
+   55 op sub :spotValue.1:x :computeRowValues:x 1
    56 set :spotValue.1:y :computeRowValues:y
    57 set :spotValue.1:ore :computeRowValues:ore
    58 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
 
    62 set *tmp8 :spotValue.1:result
    63 label *label15
    64 set :computeRowValues:x2 *tmp8
-    * op add *tmp9 :computeRowValues:x 0
-    * set :spotValue.2:x *tmp9
+   65 op add :spotValue.2:x :computeRowValues:x 0
    66 set :spotValue.2:y :computeRowValues:y
    67 set :spotValue.2:ore :computeRowValues:ore
    68 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
 
    72 set *tmp10 :spotValue.2:result
    73 label *label16
    74 set :computeRowValues:x3 *tmp10
-    * op add *tmp11 :computeRowValues:x 1
-    * set :spotValue.3:x *tmp11
+   75 op add :spotValue.3:x :computeRowValues:x 1
    76 set :spotValue.3:y :computeRowValues:y
    77 set :spotValue.3:ore :computeRowValues:ore
    78 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
 
    82 set *tmp12 :spotValue.3:result
    83 label *label17
    84 set :computeRowValues:x4 *tmp12
-    * op add *tmp13 :computeRowValues:x 2
-    * set :spotValue.4:x *tmp13
+   85 op add :spotValue.4:x :computeRowValues:x 2
    86 set :spotValue.4:y :computeRowValues:y
    87 set :spotValue.4:ore :computeRowValues:ore
    88 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
 
    98 op add *tmp18 :computeRowValues:x2 :computeRowValues:x3
    99 op add *tmp19 :computeRowValues:x3 :computeRowValues:x4
   100 op add *tmp20 :computeRowValues:x4 :computeRowValues:x5
-    * packcolor *tmp21 *tmp17 *tmp18 *tmp19 *tmp20
-    * set :computeRowValues*retval *tmp21
+  101 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
   102 jump *label13 always
   103 set *tmp16 null
   104 jump *label20 always
 
   111 op add *tmp27 *tmp26 :computeRowValues:x4
   112 op add *tmp28 :computeRowValues:x3 :computeRowValues:x4
   113 op add *tmp29 *tmp28 :computeRowValues:x5
-    * packcolor *tmp30 *tmp25 *tmp27 *tmp29 0
-    * set :computeRowValues*retval *tmp30
+  114 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
   115 jump *label13 always
   116 set *tmp23 null
   117 jump *label22 always
   118 label *label21
-    * op sub *tmp31 :computeRowValues:x 3
-    * set :spotValue.5:x *tmp31
+  119 op sub :spotValue.5:x :computeRowValues:x 3
   120 set :spotValue.5:y :computeRowValues:y
   121 set :spotValue.5:ore :computeRowValues:ore
   122 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
 
   126 set *tmp32 :spotValue.5:result
   127 label *label23
   128 set :computeRowValues:x0 *tmp32
-    * op add *tmp33 :computeRowValues:x 3
-    * set :spotValue.6:x *tmp33
+  129 op add :spotValue.6:x :computeRowValues:x 3
   130 set :spotValue.6:y :computeRowValues:y
   131 set :spotValue.6:ore :computeRowValues:ore
   132 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
 
   152 op add *tmp48 *tmp47 :computeRowValues:x5
   153 op add *tmp49 *tmp48 :computeRowValues:x6
   154 op min *tmp50 0.09803921568627451 *tmp49
-    * packcolor *tmp51 *tmp38 *tmp42 *tmp46 *tmp50
-    * set :computeRowValues*retval *tmp51
+  155 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
   156 jump *label13 always
   157 set *tmp23 null
   158 label *label22
 
   172 setaddr :computeRowValues*retaddr *label26 (h:*label26)
   173 call *label2 *invalid :computeRowValues*retval (m:*label26) (h:*label26)
   174 label *label26
-    * set *tmp53 :computeRowValues*retval
-    * set :findBestPosition:y1 *tmp53
+  175 set :findBestPosition:y1 :computeRowValues*retval
   176 op sub *tmp54 :findBestPosition:y 1
   177 set :computeRowValues:x :findBestPosition:x
   178 set :computeRowValues:y *tmp54
 
   181 setaddr :computeRowValues*retaddr *label27 (h:*label27)
   182 call *label2 *invalid :computeRowValues*retval (m:*label27) (h:*label27)
   183 label *label27
-    * set *tmp55 :computeRowValues*retval
-    * set :findBestPosition:y2 *tmp55
+  184 set :findBestPosition:y2 :computeRowValues*retval
   185 op add *tmp56 :findBestPosition:y 0
   186 set :computeRowValues:x :findBestPosition:x
   187 set :computeRowValues:y *tmp56
 
   190 setaddr :computeRowValues*retaddr *label28 (h:*label28)
   191 call *label2 *invalid :computeRowValues*retval (m:*label28) (h:*label28)
   192 label *label28
-    * set *tmp57 :computeRowValues*retval
-    * set :findBestPosition:y3 *tmp57
+  193 set :findBestPosition:y3 :computeRowValues*retval
   194 op add *tmp58 :findBestPosition:y 1
   195 set :computeRowValues:x :findBestPosition:x
   196 set :computeRowValues:y *tmp58
 
   199 setaddr :computeRowValues*retaddr *label29 (h:*label29)
   200 call *label2 *invalid :computeRowValues*retval (m:*label29) (h:*label29)
   201 label *label29
-    * set *tmp59 :computeRowValues*retval
-    * set :findBestPosition:y4 *tmp59
+  202 set :findBestPosition:y4 :computeRowValues*retval
   203 op add *tmp60 :findBestPosition:y 2
   204 set :computeRowValues:x :findBestPosition:x
   205 set :computeRowValues:y *tmp60
 
   208 setaddr :computeRowValues*retaddr *label30 (h:*label30)
   209 call *label2 *invalid :computeRowValues*retval (m:*label30) (h:*label30)
   210 label *label30
-    * set *tmp61 :computeRowValues*retval
-    * set :findBestPosition:y5 *tmp61
+  211 set :findBestPosition:y5 :computeRowValues*retval
   212 set :findBestPosition:best 0
   213 set :findBestPosition:bestX 0
   214 set :findBestPosition:bestY 0
   215 op equal *tmp62 :findBestPosition:size 2
   216 jump *label31 equal *tmp62 false
-    * op add *tmp64 :findBestPosition:y1 :findBestPosition:y2
-    * set :findBestPosition:row1 *tmp64
-    * op add *tmp65 :findBestPosition:y2 :findBestPosition:y3
-    * set :findBestPosition:row2 *tmp65
-    * op add *tmp66 :findBestPosition:y3 :findBestPosition:y4
-    * set :findBestPosition:row3 *tmp66
-    * op add *tmp67 :findBestPosition:y4 :findBestPosition:y5
-    * set :findBestPosition:row4 *tmp67
+  217 op add :findBestPosition:row1 :findBestPosition:y1 :findBestPosition:y2
+  218 op add :findBestPosition:row2 :findBestPosition:y2 :findBestPosition:y3
+  219 op add :findBestPosition:row3 :findBestPosition:y3 :findBestPosition:y4
+  220 op add :findBestPosition:row4 :findBestPosition:y4 :findBestPosition:y5
   221 set :updateRowPositions2x2:dy -1.5
   222 set :updateRowPositions2x2:rowSum :findBestPosition:row1
   223 unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2x2:col2 :updateRowPositions2x2:col3 :updateRowPositions2x2:col4 :updateRowPositions2x2:rowSum
 
   511 op equal *tmp132 :findBestPosition:size 3
   512 jump *label117 equal *tmp132 false
   513 op add *tmp134 :findBestPosition:y2 :findBestPosition:y3
-    * op add *tmp135 :findBestPosition:y1 *tmp134
-    * set :findBestPosition:row1.1 *tmp135
+  514 op add :findBestPosition:row1.1 :findBestPosition:y1 *tmp134
   515 op add *tmp136 :findBestPosition:y2 :findBestPosition:y3
-    * op add *tmp137 *tmp136 :findBestPosition:y4
-    * set :findBestPosition:row2.1 *tmp137
+  516 op add :findBestPosition:row2.1 *tmp136 :findBestPosition:y4
   517 op add *tmp138 :findBestPosition:y3 :findBestPosition:y4
-    * op add *tmp139 *tmp138 :findBestPosition:y5
-    * set :findBestPosition:row3.1 *tmp139
+  518 op add :findBestPosition:row3.1 *tmp138 :findBestPosition:y5
   519 set :updateRowPositions3x3:dy -1
   520 set :updateRowPositions3x3:rowSum :findBestPosition:row1.1
-    * unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 *tmp140 :updateRowPositions3x3:rowSum
+  521 unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 0 :updateRowPositions3x3:rowSum
   522 set :updatePosition.16:dx -1
   523 set :updatePosition.16:dy :updateRowPositions3x3:dy
   524 set :updatePosition.16:value :updateRowPositions3x3:col1
 
   573 label *label119
   574 set :updateRowPositions3x3.1:dy 0
   575 set :updateRowPositions3x3.1:rowSum :findBestPosition:row2.1
-    * unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 *tmp153 :updateRowPositions3x3.1:rowSum
+  576 unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :updateRowPositions3x3.1:rowSum
   577 set :updatePosition.19:dx -1
   578 set :updatePosition.19:dy :updateRowPositions3x3.1:dy
   579 set :updatePosition.19:value :updateRowPositions3x3.1:col1
 
   628 label *label135
   629 set :updateRowPositions3x3.2:dy 1
   630 set :updateRowPositions3x3.2:rowSum :findBestPosition:row3.1
-    * unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 *tmp166 :updateRowPositions3x3.2:rowSum
+  631 unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :updateRowPositions3x3.2:rowSum
   632 set :updatePosition.22:dx -1
   633 set :updatePosition.22:dy :updateRowPositions3x3.2:dy
   634 set :updatePosition.22:value :updateRowPositions3x3.2:col1
 
   691 setaddr :computeRowValues*retaddr *label167 (h:*label167)
   692 call *label2 *invalid :computeRowValues*retval (m:*label167) (h:*label167)
   693 label *label167
-    * set *tmp180 :computeRowValues*retval
-    * set :findBestPosition:y0 *tmp180
+  694 set :findBestPosition:y0 :computeRowValues*retval
   695 op add *tmp181 :findBestPosition:y 3
   696 set :computeRowValues:x :findBestPosition:x
   697 set :computeRowValues:y *tmp181
 
   700 setaddr :computeRowValues*retaddr *label168 (h:*label168)
   701 call *label2 *invalid :computeRowValues*retval (m:*label168) (h:*label168)
   702 label *label168
-    * set *tmp182 :computeRowValues*retval
-    * set :findBestPosition:y6 *tmp182
+  703 set :findBestPosition:y6 :computeRowValues*retval
   704 op add *tmp183 :findBestPosition:y1 :findBestPosition:y2
   705 op add *tmp184 *tmp183 :findBestPosition:y3
-    * op add *tmp185 :findBestPosition:y0 *tmp184
-    * set :findBestPosition:row1.2 *tmp185
+  706 op add :findBestPosition:row1.2 :findBestPosition:y0 *tmp184
   707 op add *tmp186 :findBestPosition:y1 :findBestPosition:y2
   708 op add *tmp187 *tmp186 :findBestPosition:y3
-    * op add *tmp188 *tmp187 :findBestPosition:y4
-    * set :findBestPosition:row2.2 *tmp188
+  709 op add :findBestPosition:row2.2 *tmp187 :findBestPosition:y4
   710 op add *tmp189 :findBestPosition:y3 :findBestPosition:y4
   711 op add *tmp190 *tmp189 :findBestPosition:y5
-    * op add *tmp191 :findBestPosition:y2 *tmp190
-    * set :findBestPosition:row3.2 *tmp191
+  712 op add :findBestPosition:row3.2 :findBestPosition:y2 *tmp190
   713 op add *tmp192 :findBestPosition:y3 :findBestPosition:y4
   714 op add *tmp193 *tmp192 :findBestPosition:y5
-    * op add *tmp194 *tmp193 :findBestPosition:y6
-    * set :findBestPosition:row4.1 *tmp194
+  715 op add :findBestPosition:row4.1 *tmp193 :findBestPosition:y6
   716 set :updateRowPositions4x4:dy -1.5
   717 set :updateRowPositions4x4:rowSum :findBestPosition:row1.2
   718 unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4x4:col2 :updateRowPositions4x4:col3 :updateRowPositions4x4:col4 :updateRowPositions4x4:rowSum
 
  1003 label *label232
  1004 label *label118
  1005 label *label32
-    * op mul *tmp259 :findBestPosition:best 255
-    * set :findBestPosition*retval *tmp259
+ 1006 op mul :findBestPosition*retval :findBestPosition:best 255
  1007 jump *label25 always
  1008 set :findBestPosition*retval null
  1009 label *label25

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-86 instructions):
 
    92 set *tmp14 :spotValue.4:result
    93 label *label18
    94 set :computeRowValues:x5 *tmp14
-    * op equal *tmp15 :computeRowValues:size 2
-    * jump *label19 equal *tmp15 false
+   95 jump *label19 notEqual :computeRowValues:size 2
    96 op add *tmp17 :computeRowValues:x1 :computeRowValues:x2
    97 op add *tmp18 :computeRowValues:x2 :computeRowValues:x3
    98 op add *tmp19 :computeRowValues:x3 :computeRowValues:x4
 
   102 set *tmp16 null
   103 jump *label20 always
   104 label *label19
-    * op equal *tmp22 :computeRowValues:size 3
-    * jump *label21 equal *tmp22 false
+  105 jump *label21 notEqual :computeRowValues:size 3
   106 op add *tmp24 :computeRowValues:x2 :computeRowValues:x3
   107 op add *tmp25 :computeRowValues:x1 *tmp24
   108 op add *tmp26 :computeRowValues:x2 :computeRowValues:x3
 
   210 set :findBestPosition:best 0
   211 set :findBestPosition:bestX 0
   212 set :findBestPosition:bestY 0
-    * op equal *tmp62 :findBestPosition:size 2
-    * jump *label31 equal *tmp62 false
+  213 jump *label31 notEqual :findBestPosition:size 2
   214 op add :findBestPosition:row1 :findBestPosition:y1 :findBestPosition:y2
   215 op add :findBestPosition:row2 :findBestPosition:y2 :findBestPosition:y3
   216 op add :findBestPosition:row3 :findBestPosition:y3 :findBestPosition:y4
 
   221 set :updatePosition:dx -1.5
   222 set :updatePosition:dy :updateRowPositions2x2:dy
   223 set :updatePosition:value :updateRowPositions2x2:col1
-    * op lessThan *tmp68 :updatePosition:value 0.0784313725490196
-    * jump *label35 equal *tmp68 false
-    * op greaterThan *tmp70 :updatePosition:value :findBestPosition:best
-    * jump *label37 equal *tmp70 false
+  224 jump *label35 greaterThanEq :updatePosition:value 0.0784313725490196
+  225 jump *label37 lessThanEq :updatePosition:value :findBestPosition:best
   226 set :findBestPosition:bestX :updatePosition:dx
   227 set :findBestPosition:bestY :updatePosition:dy
   228 set :findBestPosition:best :updatePosition:value
 
   236 set :updatePosition.1:dx -0.5
   237 set :updatePosition.1:dy :updateRowPositions2x2:dy
   238 set :updatePosition.1:value :updateRowPositions2x2:col2
-    * op lessThan *tmp72 :updatePosition.1:value 0.0784313725490196
-    * jump *label40 equal *tmp72 false
-    * op greaterThan *tmp74 :updatePosition.1:value :findBestPosition:best
-    * jump *label42 equal *tmp74 false
+  239 jump *label40 greaterThanEq :updatePosition.1:value 0.0784313725490196
+  240 jump *label42 lessThanEq :updatePosition.1:value :findBestPosition:best
   241 set :findBestPosition:bestX :updatePosition.1:dx
   242 set :findBestPosition:bestY :updatePosition.1:dy
   243 set :findBestPosition:best :updatePosition.1:value
 
   251 set :updatePosition.2:dx 0.5
   252 set :updatePosition.2:dy :updateRowPositions2x2:dy
   253 set :updatePosition.2:value :updateRowPositions2x2:col3
-    * op lessThan *tmp76 :updatePosition.2:value 0.0784313725490196
-    * jump *label45 equal *tmp76 false
-    * op greaterThan *tmp78 :updatePosition.2:value :findBestPosition:best
-    * jump *label47 equal *tmp78 false
+  254 jump *label45 greaterThanEq :updatePosition.2:value 0.0784313725490196
+  255 jump *label47 lessThanEq :updatePosition.2:value :findBestPosition:best
   256 set :findBestPosition:bestX :updatePosition.2:dx
   257 set :findBestPosition:bestY :updatePosition.2:dy
   258 set :findBestPosition:best :updatePosition.2:value
 
   266 set :updatePosition.3:dx 1.5
   267 set :updatePosition.3:dy :updateRowPositions2x2:dy
   268 set :updatePosition.3:value :updateRowPositions2x2:col4
-    * op lessThan *tmp80 :updatePosition.3:value 0.0784313725490196
-    * jump *label50 equal *tmp80 false
-    * op greaterThan *tmp82 :updatePosition.3:value :findBestPosition:best
-    * jump *label52 equal *tmp82 false
+  269 jump *label50 greaterThanEq :updatePosition.3:value 0.0784313725490196
+  270 jump *label52 lessThanEq :updatePosition.3:value :findBestPosition:best
   271 set :findBestPosition:bestX :updatePosition.3:dx
   272 set :findBestPosition:bestY :updatePosition.3:dy
   273 set :findBestPosition:best :updatePosition.3:value
 
   285 set :updatePosition.4:dx -1.5
   286 set :updatePosition.4:dy :updateRowPositions2x2.1:dy
   287 set :updatePosition.4:value :updateRowPositions2x2.1:col1
-    * op lessThan *tmp84 :updatePosition.4:value 0.0784313725490196
-    * jump *label56 equal *tmp84 false
-    * op greaterThan *tmp86 :updatePosition.4:value :findBestPosition:best
-    * jump *label58 equal *tmp86 false
+  288 jump *label56 greaterThanEq :updatePosition.4:value 0.0784313725490196
+  289 jump *label58 lessThanEq :updatePosition.4:value :findBestPosition:best
   290 set :findBestPosition:bestX :updatePosition.4:dx
   291 set :findBestPosition:bestY :updatePosition.4:dy
   292 set :findBestPosition:best :updatePosition.4:value
 
   300 set :updatePosition.5:dx -0.5
   301 set :updatePosition.5:dy :updateRowPositions2x2.1:dy
   302 set :updatePosition.5:value :updateRowPositions2x2.1:col2
-    * op lessThan *tmp88 :updatePosition.5:value 0.0784313725490196
-    * jump *label61 equal *tmp88 false
-    * op greaterThan *tmp90 :updatePosition.5:value :findBestPosition:best
-    * jump *label63 equal *tmp90 false
+  303 jump *label61 greaterThanEq :updatePosition.5:value 0.0784313725490196
+  304 jump *label63 lessThanEq :updatePosition.5:value :findBestPosition:best
   305 set :findBestPosition:bestX :updatePosition.5:dx
   306 set :findBestPosition:bestY :updatePosition.5:dy
   307 set :findBestPosition:best :updatePosition.5:value
 
   315 set :updatePosition.6:dx 0.5
   316 set :updatePosition.6:dy :updateRowPositions2x2.1:dy
   317 set :updatePosition.6:value :updateRowPositions2x2.1:col3
-    * op lessThan *tmp92 :updatePosition.6:value 0.0784313725490196
-    * jump *label66 equal *tmp92 false
-    * op greaterThan *tmp94 :updatePosition.6:value :findBestPosition:best
-    * jump *label68 equal *tmp94 false
+  318 jump *label66 greaterThanEq :updatePosition.6:value 0.0784313725490196
+  319 jump *label68 lessThanEq :updatePosition.6:value :findBestPosition:best
   320 set :findBestPosition:bestX :updatePosition.6:dx
   321 set :findBestPosition:bestY :updatePosition.6:dy
   322 set :findBestPosition:best :updatePosition.6:value
 
   330 set :updatePosition.7:dx 1.5
   331 set :updatePosition.7:dy :updateRowPositions2x2.1:dy
   332 set :updatePosition.7:value :updateRowPositions2x2.1:col4
-    * op lessThan *tmp96 :updatePosition.7:value 0.0784313725490196
-    * jump *label71 equal *tmp96 false
-    * op greaterThan *tmp98 :updatePosition.7:value :findBestPosition:best
-    * jump *label73 equal *tmp98 false
+  333 jump *label71 greaterThanEq :updatePosition.7:value 0.0784313725490196
+  334 jump *label73 lessThanEq :updatePosition.7:value :findBestPosition:best
   335 set :findBestPosition:bestX :updatePosition.7:dx
   336 set :findBestPosition:bestY :updatePosition.7:dy
   337 set :findBestPosition:best :updatePosition.7:value
 
   349 set :updatePosition.8:dx -1.5
   350 set :updatePosition.8:dy :updateRowPositions2x2.2:dy
   351 set :updatePosition.8:value :updateRowPositions2x2.2:col1
-    * op lessThan *tmp100 :updatePosition.8:value 0.0784313725490196
-    * jump *label77 equal *tmp100 false
-    * op greaterThan *tmp102 :updatePosition.8:value :findBestPosition:best
-    * jump *label79 equal *tmp102 false
+  352 jump *label77 greaterThanEq :updatePosition.8:value 0.0784313725490196
+  353 jump *label79 lessThanEq :updatePosition.8:value :findBestPosition:best
   354 set :findBestPosition:bestX :updatePosition.8:dx
   355 set :findBestPosition:bestY :updatePosition.8:dy
   356 set :findBestPosition:best :updatePosition.8:value
 
   364 set :updatePosition.9:dx -0.5
   365 set :updatePosition.9:dy :updateRowPositions2x2.2:dy
   366 set :updatePosition.9:value :updateRowPositions2x2.2:col2
-    * op lessThan *tmp104 :updatePosition.9:value 0.0784313725490196
-    * jump *label82 equal *tmp104 false
-    * op greaterThan *tmp106 :updatePosition.9:value :findBestPosition:best
-    * jump *label84 equal *tmp106 false
+  367 jump *label82 greaterThanEq :updatePosition.9:value 0.0784313725490196
+  368 jump *label84 lessThanEq :updatePosition.9:value :findBestPosition:best
   369 set :findBestPosition:bestX :updatePosition.9:dx
   370 set :findBestPosition:bestY :updatePosition.9:dy
   371 set :findBestPosition:best :updatePosition.9:value
 
   379 set :updatePosition.10:dx 0.5
   380 set :updatePosition.10:dy :updateRowPositions2x2.2:dy
   381 set :updatePosition.10:value :updateRowPositions2x2.2:col3
-    * op lessThan *tmp108 :updatePosition.10:value 0.0784313725490196
-    * jump *label87 equal *tmp108 false
-    * op greaterThan *tmp110 :updatePosition.10:value :findBestPosition:best
-    * jump *label89 equal *tmp110 false
+  382 jump *label87 greaterThanEq :updatePosition.10:value 0.0784313725490196
+  383 jump *label89 lessThanEq :updatePosition.10:value :findBestPosition:best
   384 set :findBestPosition:bestX :updatePosition.10:dx
   385 set :findBestPosition:bestY :updatePosition.10:dy
   386 set :findBestPosition:best :updatePosition.10:value
 
   394 set :updatePosition.11:dx 1.5
   395 set :updatePosition.11:dy :updateRowPositions2x2.2:dy
   396 set :updatePosition.11:value :updateRowPositions2x2.2:col4
-    * op lessThan *tmp112 :updatePosition.11:value 0.0784313725490196
-    * jump *label92 equal *tmp112 false
-    * op greaterThan *tmp114 :updatePosition.11:value :findBestPosition:best
-    * jump *label94 equal *tmp114 false
+  397 jump *label92 greaterThanEq :updatePosition.11:value 0.0784313725490196
+  398 jump *label94 lessThanEq :updatePosition.11:value :findBestPosition:best
   399 set :findBestPosition:bestX :updatePosition.11:dx
   400 set :findBestPosition:bestY :updatePosition.11:dy
   401 set :findBestPosition:best :updatePosition.11:value
 
   413 set :updatePosition.12:dx -1.5
   414 set :updatePosition.12:dy :updateRowPositions2x2.3:dy
   415 set :updatePosition.12:value :updateRowPositions2x2.3:col1
-    * op lessThan *tmp116 :updatePosition.12:value 0.0784313725490196
-    * jump *label98 equal *tmp116 false
-    * op greaterThan *tmp118 :updatePosition.12:value :findBestPosition:best
-    * jump *label100 equal *tmp118 false
+  416 jump *label98 greaterThanEq :updatePosition.12:value 0.0784313725490196
+  417 jump *label100 lessThanEq :updatePosition.12:value :findBestPosition:best
   418 set :findBestPosition:bestX :updatePosition.12:dx
   419 set :findBestPosition:bestY :updatePosition.12:dy
   420 set :findBestPosition:best :updatePosition.12:value
 
   428 set :updatePosition.13:dx -0.5
   429 set :updatePosition.13:dy :updateRowPositions2x2.3:dy
   430 set :updatePosition.13:value :updateRowPositions2x2.3:col2
-    * op lessThan *tmp120 :updatePosition.13:value 0.0784313725490196
-    * jump *label103 equal *tmp120 false
-    * op greaterThan *tmp122 :updatePosition.13:value :findBestPosition:best
-    * jump *label105 equal *tmp122 false
+  431 jump *label103 greaterThanEq :updatePosition.13:value 0.0784313725490196
+  432 jump *label105 lessThanEq :updatePosition.13:value :findBestPosition:best
   433 set :findBestPosition:bestX :updatePosition.13:dx
   434 set :findBestPosition:bestY :updatePosition.13:dy
   435 set :findBestPosition:best :updatePosition.13:value
 
   443 set :updatePosition.14:dx 0.5
   444 set :updatePosition.14:dy :updateRowPositions2x2.3:dy
   445 set :updatePosition.14:value :updateRowPositions2x2.3:col3
-    * op lessThan *tmp124 :updatePosition.14:value 0.0784313725490196
-    * jump *label108 equal *tmp124 false
-    * op greaterThan *tmp126 :updatePosition.14:value :findBestPosition:best
-    * jump *label110 equal *tmp126 false
+  446 jump *label108 greaterThanEq :updatePosition.14:value 0.0784313725490196
+  447 jump *label110 lessThanEq :updatePosition.14:value :findBestPosition:best
   448 set :findBestPosition:bestX :updatePosition.14:dx
   449 set :findBestPosition:bestY :updatePosition.14:dy
   450 set :findBestPosition:best :updatePosition.14:value
 
   458 set :updatePosition.15:dx 1.5
   459 set :updatePosition.15:dy :updateRowPositions2x2.3:dy
   460 set :updatePosition.15:value :updateRowPositions2x2.3:col4
-    * op lessThan *tmp128 :updatePosition.15:value 0.0784313725490196
-    * jump *label113 equal *tmp128 false
-    * op greaterThan *tmp130 :updatePosition.15:value :findBestPosition:best
-    * jump *label115 equal *tmp130 false
+  461 jump *label113 greaterThanEq :updatePosition.15:value 0.0784313725490196
+  462 jump *label115 lessThanEq :updatePosition.15:value :findBestPosition:best
   463 set :findBestPosition:bestX :updatePosition.15:dx
   464 set :findBestPosition:bestY :updatePosition.15:dy
   465 set :findBestPosition:best :updatePosition.15:value
 
   473 label *label96
   474 jump *label32 always
   475 label *label31
-    * op equal *tmp132 :findBestPosition:size 3
-    * jump *label117 equal *tmp132 false
+  476 jump *label117 notEqual :findBestPosition:size 3
   477 op add *tmp134 :findBestPosition:y2 :findBestPosition:y3
   478 op add :findBestPosition:row1.1 :findBestPosition:y1 *tmp134
   479 op add *tmp136 :findBestPosition:y2 :findBestPosition:y3
 
   486 set :updatePosition.16:dx -1
   487 set :updatePosition.16:dy :updateRowPositions3x3:dy
   488 set :updatePosition.16:value :updateRowPositions3x3:col1
-    * op lessThan *tmp141 :updatePosition.16:value 0.0784313725490196
-    * jump *label121 equal *tmp141 false
-    * op greaterThan *tmp143 :updatePosition.16:value :findBestPosition:best
-    * jump *label123 equal *tmp143 false
+  489 jump *label121 greaterThanEq :updatePosition.16:value 0.0784313725490196
+  490 jump *label123 lessThanEq :updatePosition.16:value :findBestPosition:best
   491 set :findBestPosition:bestX :updatePosition.16:dx
   492 set :findBestPosition:bestY :updatePosition.16:dy
   493 set :findBestPosition:best :updatePosition.16:value
 
   501 set :updatePosition.17:dx 0
   502 set :updatePosition.17:dy :updateRowPositions3x3:dy
   503 set :updatePosition.17:value :updateRowPositions3x3:col2
-    * op lessThan *tmp145 :updatePosition.17:value 0.0784313725490196
-    * jump *label126 equal *tmp145 false
-    * op greaterThan *tmp147 :updatePosition.17:value :findBestPosition:best
-    * jump *label128 equal *tmp147 false
+  504 jump *label126 greaterThanEq :updatePosition.17:value 0.0784313725490196
+  505 jump *label128 lessThanEq :updatePosition.17:value :findBestPosition:best
   506 set :findBestPosition:bestX :updatePosition.17:dx
   507 set :findBestPosition:bestY :updatePosition.17:dy
   508 set :findBestPosition:best :updatePosition.17:value
 
   516 set :updatePosition.18:dx 1
   517 set :updatePosition.18:dy :updateRowPositions3x3:dy
   518 set :updatePosition.18:value :updateRowPositions3x3:col3
-    * op lessThan *tmp149 :updatePosition.18:value 0.0784313725490196
-    * jump *label131 equal *tmp149 false
-    * op greaterThan *tmp151 :updatePosition.18:value :findBestPosition:best
-    * jump *label133 equal *tmp151 false
+  519 jump *label131 greaterThanEq :updatePosition.18:value 0.0784313725490196
+  520 jump *label133 lessThanEq :updatePosition.18:value :findBestPosition:best
   521 set :findBestPosition:bestX :updatePosition.18:dx
   522 set :findBestPosition:bestY :updatePosition.18:dy
   523 set :findBestPosition:best :updatePosition.18:value
 
   535 set :updatePosition.19:dx -1
   536 set :updatePosition.19:dy :updateRowPositions3x3.1:dy
   537 set :updatePosition.19:value :updateRowPositions3x3.1:col1
-    * op lessThan *tmp154 :updatePosition.19:value 0.0784313725490196
-    * jump *label137 equal *tmp154 false
-    * op greaterThan *tmp156 :updatePosition.19:value :findBestPosition:best
-    * jump *label139 equal *tmp156 false
+  538 jump *label137 greaterThanEq :updatePosition.19:value 0.0784313725490196
+  539 jump *label139 lessThanEq :updatePosition.19:value :findBestPosition:best
   540 set :findBestPosition:bestX :updatePosition.19:dx
   541 set :findBestPosition:bestY :updatePosition.19:dy
   542 set :findBestPosition:best :updatePosition.19:value
 
   550 set :updatePosition.20:dx 0
   551 set :updatePosition.20:dy :updateRowPositions3x3.1:dy
   552 set :updatePosition.20:value :updateRowPositions3x3.1:col2
-    * op lessThan *tmp158 :updatePosition.20:value 0.0784313725490196
-    * jump *label142 equal *tmp158 false
-    * op greaterThan *tmp160 :updatePosition.20:value :findBestPosition:best
-    * jump *label144 equal *tmp160 false
+  553 jump *label142 greaterThanEq :updatePosition.20:value 0.0784313725490196
+  554 jump *label144 lessThanEq :updatePosition.20:value :findBestPosition:best
   555 set :findBestPosition:bestX :updatePosition.20:dx
   556 set :findBestPosition:bestY :updatePosition.20:dy
   557 set :findBestPosition:best :updatePosition.20:value
 
   565 set :updatePosition.21:dx 1
   566 set :updatePosition.21:dy :updateRowPositions3x3.1:dy
   567 set :updatePosition.21:value :updateRowPositions3x3.1:col3
-    * op lessThan *tmp162 :updatePosition.21:value 0.0784313725490196
-    * jump *label147 equal *tmp162 false
-    * op greaterThan *tmp164 :updatePosition.21:value :findBestPosition:best
-    * jump *label149 equal *tmp164 false
+  568 jump *label147 greaterThanEq :updatePosition.21:value 0.0784313725490196
+  569 jump *label149 lessThanEq :updatePosition.21:value :findBestPosition:best
   570 set :findBestPosition:bestX :updatePosition.21:dx
   571 set :findBestPosition:bestY :updatePosition.21:dy
   572 set :findBestPosition:best :updatePosition.21:value
 
   584 set :updatePosition.22:dx -1
   585 set :updatePosition.22:dy :updateRowPositions3x3.2:dy
   586 set :updatePosition.22:value :updateRowPositions3x3.2:col1
-    * op lessThan *tmp167 :updatePosition.22:value 0.0784313725490196
-    * jump *label153 equal *tmp167 false
-    * op greaterThan *tmp169 :updatePosition.22:value :findBestPosition:best
-    * jump *label155 equal *tmp169 false
+  587 jump *label153 greaterThanEq :updatePosition.22:value 0.0784313725490196
+  588 jump *label155 lessThanEq :updatePosition.22:value :findBestPosition:best
   589 set :findBestPosition:bestX :updatePosition.22:dx
   590 set :findBestPosition:bestY :updatePosition.22:dy
   591 set :findBestPosition:best :updatePosition.22:value
 
   599 set :updatePosition.23:dx 0
   600 set :updatePosition.23:dy :updateRowPositions3x3.2:dy
   601 set :updatePosition.23:value :updateRowPositions3x3.2:col2
-    * op lessThan *tmp171 :updatePosition.23:value 0.0784313725490196
-    * jump *label158 equal *tmp171 false
-    * op greaterThan *tmp173 :updatePosition.23:value :findBestPosition:best
-    * jump *label160 equal *tmp173 false
+  602 jump *label158 greaterThanEq :updatePosition.23:value 0.0784313725490196
+  603 jump *label160 lessThanEq :updatePosition.23:value :findBestPosition:best
   604 set :findBestPosition:bestX :updatePosition.23:dx
   605 set :findBestPosition:bestY :updatePosition.23:dy
   606 set :findBestPosition:best :updatePosition.23:value
 
   614 set :updatePosition.24:dx 1
   615 set :updatePosition.24:dy :updateRowPositions3x3.2:dy
   616 set :updatePosition.24:value :updateRowPositions3x3.2:col3
-    * op lessThan *tmp175 :updatePosition.24:value 0.0784313725490196
-    * jump *label163 equal *tmp175 false
-    * op greaterThan *tmp177 :updatePosition.24:value :findBestPosition:best
-    * jump *label165 equal *tmp177 false
+  617 jump *label163 greaterThanEq :updatePosition.24:value 0.0784313725490196
+  618 jump *label165 lessThanEq :updatePosition.24:value :findBestPosition:best
   619 set :findBestPosition:bestX :updatePosition.24:dx
   620 set :findBestPosition:bestY :updatePosition.24:dy
   621 set :findBestPosition:best :updatePosition.24:value
 
   665 set :updatePosition.25:dx -1.5
   666 set :updatePosition.25:dy :updateRowPositions4x4:dy
   667 set :updatePosition.25:value :updateRowPositions4x4:col1
-    * op lessThan *tmp195 :updatePosition.25:value 0.0784313725490196
-    * jump *label171 equal *tmp195 false
-    * op greaterThan *tmp197 :updatePosition.25:value :findBestPosition:best
-    * jump *label173 equal *tmp197 false
+  668 jump *label171 greaterThanEq :updatePosition.25:value 0.0784313725490196
+  669 jump *label173 lessThanEq :updatePosition.25:value :findBestPosition:best
   670 set :findBestPosition:bestX :updatePosition.25:dx
   671 set :findBestPosition:bestY :updatePosition.25:dy
   672 set :findBestPosition:best :updatePosition.25:value
 
   680 set :updatePosition.26:dx -0.5
   681 set :updatePosition.26:dy :updateRowPositions4x4:dy
   682 set :updatePosition.26:value :updateRowPositions4x4:col2
-    * op lessThan *tmp199 :updatePosition.26:value 0.0784313725490196
-    * jump *label176 equal *tmp199 false
-    * op greaterThan *tmp201 :updatePosition.26:value :findBestPosition:best
-    * jump *label178 equal *tmp201 false
+  683 jump *label176 greaterThanEq :updatePosition.26:value 0.0784313725490196
+  684 jump *label178 lessThanEq :updatePosition.26:value :findBestPosition:best
   685 set :findBestPosition:bestX :updatePosition.26:dx
   686 set :findBestPosition:bestY :updatePosition.26:dy
   687 set :findBestPosition:best :updatePosition.26:value
 
   695 set :updatePosition.27:dx 0.5
   696 set :updatePosition.27:dy :updateRowPositions4x4:dy
   697 set :updatePosition.27:value :updateRowPositions4x4:col3
-    * op lessThan *tmp203 :updatePosition.27:value 0.0784313725490196
-    * jump *label181 equal *tmp203 false
-    * op greaterThan *tmp205 :updatePosition.27:value :findBestPosition:best
-    * jump *label183 equal *tmp205 false
+  698 jump *label181 greaterThanEq :updatePosition.27:value 0.0784313725490196
+  699 jump *label183 lessThanEq :updatePosition.27:value :findBestPosition:best
   700 set :findBestPosition:bestX :updatePosition.27:dx
   701 set :findBestPosition:bestY :updatePosition.27:dy
   702 set :findBestPosition:best :updatePosition.27:value
 
   710 set :updatePosition.28:dx 1.5
   711 set :updatePosition.28:dy :updateRowPositions4x4:dy
   712 set :updatePosition.28:value :updateRowPositions4x4:col4
-    * op lessThan *tmp207 :updatePosition.28:value 0.0784313725490196
-    * jump *label186 equal *tmp207 false
-    * op greaterThan *tmp209 :updatePosition.28:value :findBestPosition:best
-    * jump *label188 equal *tmp209 false
+  713 jump *label186 greaterThanEq :updatePosition.28:value 0.0784313725490196
+  714 jump *label188 lessThanEq :updatePosition.28:value :findBestPosition:best
   715 set :findBestPosition:bestX :updatePosition.28:dx
   716 set :findBestPosition:bestY :updatePosition.28:dy
   717 set :findBestPosition:best :updatePosition.28:value
 
   729 set :updatePosition.29:dx -1.5
   730 set :updatePosition.29:dy :updateRowPositions4x4.1:dy
   731 set :updatePosition.29:value :updateRowPositions4x4.1:col1
-    * op lessThan *tmp211 :updatePosition.29:value 0.0784313725490196
-    * jump *label192 equal *tmp211 false
-    * op greaterThan *tmp213 :updatePosition.29:value :findBestPosition:best
-    * jump *label194 equal *tmp213 false
+  732 jump *label192 greaterThanEq :updatePosition.29:value 0.0784313725490196
+  733 jump *label194 lessThanEq :updatePosition.29:value :findBestPosition:best
   734 set :findBestPosition:bestX :updatePosition.29:dx
   735 set :findBestPosition:bestY :updatePosition.29:dy
   736 set :findBestPosition:best :updatePosition.29:value
 
   744 set :updatePosition.30:dx -0.5
   745 set :updatePosition.30:dy :updateRowPositions4x4.1:dy
   746 set :updatePosition.30:value :updateRowPositions4x4.1:col2
-    * op lessThan *tmp215 :updatePosition.30:value 0.0784313725490196
-    * jump *label197 equal *tmp215 false
-    * op greaterThan *tmp217 :updatePosition.30:value :findBestPosition:best
-    * jump *label199 equal *tmp217 false
+  747 jump *label197 greaterThanEq :updatePosition.30:value 0.0784313725490196
+  748 jump *label199 lessThanEq :updatePosition.30:value :findBestPosition:best
   749 set :findBestPosition:bestX :updatePosition.30:dx
   750 set :findBestPosition:bestY :updatePosition.30:dy
   751 set :findBestPosition:best :updatePosition.30:value
 
   759 set :updatePosition.31:dx 0.5
   760 set :updatePosition.31:dy :updateRowPositions4x4.1:dy
   761 set :updatePosition.31:value :updateRowPositions4x4.1:col3
-    * op lessThan *tmp219 :updatePosition.31:value 0.0784313725490196
-    * jump *label202 equal *tmp219 false
-    * op greaterThan *tmp221 :updatePosition.31:value :findBestPosition:best
-    * jump *label204 equal *tmp221 false
+  762 jump *label202 greaterThanEq :updatePosition.31:value 0.0784313725490196
+  763 jump *label204 lessThanEq :updatePosition.31:value :findBestPosition:best
   764 set :findBestPosition:bestX :updatePosition.31:dx
   765 set :findBestPosition:bestY :updatePosition.31:dy
   766 set :findBestPosition:best :updatePosition.31:value
 
   774 set :updatePosition.32:dx 1.5
   775 set :updatePosition.32:dy :updateRowPositions4x4.1:dy
   776 set :updatePosition.32:value :updateRowPositions4x4.1:col4
-    * op lessThan *tmp223 :updatePosition.32:value 0.0784313725490196
-    * jump *label207 equal *tmp223 false
-    * op greaterThan *tmp225 :updatePosition.32:value :findBestPosition:best
-    * jump *label209 equal *tmp225 false
+  777 jump *label207 greaterThanEq :updatePosition.32:value 0.0784313725490196
+  778 jump *label209 lessThanEq :updatePosition.32:value :findBestPosition:best
   779 set :findBestPosition:bestX :updatePosition.32:dx
   780 set :findBestPosition:bestY :updatePosition.32:dy
   781 set :findBestPosition:best :updatePosition.32:value
 
   793 set :updatePosition.33:dx -1.5
   794 set :updatePosition.33:dy :updateRowPositions4x4.2:dy
   795 set :updatePosition.33:value :updateRowPositions4x4.2:col1
-    * op lessThan *tmp227 :updatePosition.33:value 0.0784313725490196
-    * jump *label213 equal *tmp227 false
-    * op greaterThan *tmp229 :updatePosition.33:value :findBestPosition:best
-    * jump *label215 equal *tmp229 false
+  796 jump *label213 greaterThanEq :updatePosition.33:value 0.0784313725490196
+  797 jump *label215 lessThanEq :updatePosition.33:value :findBestPosition:best
   798 set :findBestPosition:bestX :updatePosition.33:dx
   799 set :findBestPosition:bestY :updatePosition.33:dy
   800 set :findBestPosition:best :updatePosition.33:value
 
   808 set :updatePosition.34:dx -0.5
   809 set :updatePosition.34:dy :updateRowPositions4x4.2:dy
   810 set :updatePosition.34:value :updateRowPositions4x4.2:col2
-    * op lessThan *tmp231 :updatePosition.34:value 0.0784313725490196
-    * jump *label218 equal *tmp231 false
-    * op greaterThan *tmp233 :updatePosition.34:value :findBestPosition:best
-    * jump *label220 equal *tmp233 false
+  811 jump *label218 greaterThanEq :updatePosition.34:value 0.0784313725490196
+  812 jump *label220 lessThanEq :updatePosition.34:value :findBestPosition:best
   813 set :findBestPosition:bestX :updatePosition.34:dx
   814 set :findBestPosition:bestY :updatePosition.34:dy
   815 set :findBestPosition:best :updatePosition.34:value
 
   823 set :updatePosition.35:dx 0.5
   824 set :updatePosition.35:dy :updateRowPositions4x4.2:dy
   825 set :updatePosition.35:value :updateRowPositions4x4.2:col3
-    * op lessThan *tmp235 :updatePosition.35:value 0.0784313725490196
-    * jump *label223 equal *tmp235 false
-    * op greaterThan *tmp237 :updatePosition.35:value :findBestPosition:best
-    * jump *label225 equal *tmp237 false
+  826 jump *label223 greaterThanEq :updatePosition.35:value 0.0784313725490196
+  827 jump *label225 lessThanEq :updatePosition.35:value :findBestPosition:best
   828 set :findBestPosition:bestX :updatePosition.35:dx
   829 set :findBestPosition:bestY :updatePosition.35:dy
   830 set :findBestPosition:best :updatePosition.35:value
 
   838 set :updatePosition.36:dx 1.5
   839 set :updatePosition.36:dy :updateRowPositions4x4.2:dy
   840 set :updatePosition.36:value :updateRowPositions4x4.2:col4
-    * op lessThan *tmp239 :updatePosition.36:value 0.0784313725490196
-    * jump *label228 equal *tmp239 false
-    * op greaterThan *tmp241 :updatePosition.36:value :findBestPosition:best
-    * jump *label230 equal *tmp241 false
+  841 jump *label228 greaterThanEq :updatePosition.36:value 0.0784313725490196
+  842 jump *label230 lessThanEq :updatePosition.36:value :findBestPosition:best
   843 set :findBestPosition:bestX :updatePosition.36:dx
   844 set :findBestPosition:bestY :updatePosition.36:dy
   845 set :findBestPosition:best :updatePosition.36:value
 
   857 set :updatePosition.37:dx -1.5
   858 set :updatePosition.37:dy :updateRowPositions4x4.3:dy
   859 set :updatePosition.37:value :updateRowPositions4x4.3:col1
-    * op lessThan *tmp243 :updatePosition.37:value 0.0784313725490196
-    * jump *label234 equal *tmp243 false
-    * op greaterThan *tmp245 :updatePosition.37:value :findBestPosition:best
-    * jump *label236 equal *tmp245 false
+  860 jump *label234 greaterThanEq :updatePosition.37:value 0.0784313725490196
+  861 jump *label236 lessThanEq :updatePosition.37:value :findBestPosition:best
   862 set :findBestPosition:bestX :updatePosition.37:dx
   863 set :findBestPosition:bestY :updatePosition.37:dy
   864 set :findBestPosition:best :updatePosition.37:value
 
   872 set :updatePosition.38:dx -0.5
   873 set :updatePosition.38:dy :updateRowPositions4x4.3:dy
   874 set :updatePosition.38:value :updateRowPositions4x4.3:col2
-    * op lessThan *tmp247 :updatePosition.38:value 0.0784313725490196
-    * jump *label239 equal *tmp247 false
-    * op greaterThan *tmp249 :updatePosition.38:value :findBestPosition:best
-    * jump *label241 equal *tmp249 false
+  875 jump *label239 greaterThanEq :updatePosition.38:value 0.0784313725490196
+  876 jump *label241 lessThanEq :updatePosition.38:value :findBestPosition:best
   877 set :findBestPosition:bestX :updatePosition.38:dx
   878 set :findBestPosition:bestY :updatePosition.38:dy
   879 set :findBestPosition:best :updatePosition.38:value
 
   887 set :updatePosition.39:dx 0.5
   888 set :updatePosition.39:dy :updateRowPositions4x4.3:dy
   889 set :updatePosition.39:value :updateRowPositions4x4.3:col3
-    * op lessThan *tmp251 :updatePosition.39:value 0.0784313725490196
-    * jump *label244 equal *tmp251 false
-    * op greaterThan *tmp253 :updatePosition.39:value :findBestPosition:best
-    * jump *label246 equal *tmp253 false
+  890 jump *label244 greaterThanEq :updatePosition.39:value 0.0784313725490196
+  891 jump *label246 lessThanEq :updatePosition.39:value :findBestPosition:best
   892 set :findBestPosition:bestX :updatePosition.39:dx
   893 set :findBestPosition:bestY :updatePosition.39:dy
   894 set :findBestPosition:best :updatePosition.39:value
 
   902 set :updatePosition.40:dx 1.5
   903 set :updatePosition.40:dy :updateRowPositions4x4.3:dy
   904 set :updatePosition.40:value :updateRowPositions4x4.3:col4
-    * op lessThan *tmp255 :updatePosition.40:value 0.0784313725490196
-    * jump *label249 equal *tmp255 false
-    * op greaterThan *tmp257 :updatePosition.40:value :findBestPosition:best
-    * jump *label251 equal *tmp257 false
+  905 jump *label249 greaterThanEq :updatePosition.40:value 0.0784313725490196
+  906 jump *label251 lessThanEq :updatePosition.40:value :findBestPosition:best
   907 set :findBestPosition:bestX :updatePosition.40:dx
   908 set :findBestPosition:bestY :updatePosition.40:dy
   909 set :findBestPosition:best :updatePosition.40:value

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-82 instructions):
 
   226 set :findBestPosition:bestX :updatePosition:dx
   227 set :findBestPosition:bestY :updatePosition:dy
   228 set :findBestPosition:best :updatePosition:value
-    * jump *label38 always
   229 label *label37
   230 label *label38
-    * jump *label36 always
   231 label *label35
   232 label *label36
   233 label *label34
 
   239 set :findBestPosition:bestX :updatePosition.1:dx
   240 set :findBestPosition:bestY :updatePosition.1:dy
   241 set :findBestPosition:best :updatePosition.1:value
-    * jump *label43 always
   242 label *label42
   243 label *label43
-    * jump *label41 always
   244 label *label40
   245 label *label41
   246 label *label39
 
   252 set :findBestPosition:bestX :updatePosition.2:dx
   253 set :findBestPosition:bestY :updatePosition.2:dy
   254 set :findBestPosition:best :updatePosition.2:value
-    * jump *label48 always
   255 label *label47
   256 label *label48
-    * jump *label46 always
   257 label *label45
   258 label *label46
   259 label *label44
 
   265 set :findBestPosition:bestX :updatePosition.3:dx
   266 set :findBestPosition:bestY :updatePosition.3:dy
   267 set :findBestPosition:best :updatePosition.3:value
-    * jump *label53 always
   268 label *label52
   269 label *label53
-    * jump *label51 always
   270 label *label50
   271 label *label51
   272 label *label49
 
   282 set :findBestPosition:bestX :updatePosition.4:dx
   283 set :findBestPosition:bestY :updatePosition.4:dy
   284 set :findBestPosition:best :updatePosition.4:value
-    * jump *label59 always
   285 label *label58
   286 label *label59
-    * jump *label57 always
   287 label *label56
   288 label *label57
   289 label *label55
 
   295 set :findBestPosition:bestX :updatePosition.5:dx
   296 set :findBestPosition:bestY :updatePosition.5:dy
   297 set :findBestPosition:best :updatePosition.5:value
-    * jump *label64 always
   298 label *label63
   299 label *label64
-    * jump *label62 always
   300 label *label61
   301 label *label62
   302 label *label60
 
   308 set :findBestPosition:bestX :updatePosition.6:dx
   309 set :findBestPosition:bestY :updatePosition.6:dy
   310 set :findBestPosition:best :updatePosition.6:value
-    * jump *label69 always
   311 label *label68
   312 label *label69
-    * jump *label67 always
   313 label *label66
   314 label *label67
   315 label *label65
 
   321 set :findBestPosition:bestX :updatePosition.7:dx
   322 set :findBestPosition:bestY :updatePosition.7:dy
   323 set :findBestPosition:best :updatePosition.7:value
-    * jump *label74 always
   324 label *label73
   325 label *label74
-    * jump *label72 always
   326 label *label71
   327 label *label72
   328 label *label70
 
   338 set :findBestPosition:bestX :updatePosition.8:dx
   339 set :findBestPosition:bestY :updatePosition.8:dy
   340 set :findBestPosition:best :updatePosition.8:value
-    * jump *label80 always
   341 label *label79
   342 label *label80
-    * jump *label78 always
   343 label *label77
   344 label *label78
   345 label *label76
 
   351 set :findBestPosition:bestX :updatePosition.9:dx
   352 set :findBestPosition:bestY :updatePosition.9:dy
   353 set :findBestPosition:best :updatePosition.9:value
-    * jump *label85 always
   354 label *label84
   355 label *label85
-    * jump *label83 always
   356 label *label82
   357 label *label83
   358 label *label81
 
   364 set :findBestPosition:bestX :updatePosition.10:dx
   365 set :findBestPosition:bestY :updatePosition.10:dy
   366 set :findBestPosition:best :updatePosition.10:value
-    * jump *label90 always
   367 label *label89
   368 label *label90
-    * jump *label88 always
   369 label *label87
   370 label *label88
   371 label *label86
 
   377 set :findBestPosition:bestX :updatePosition.11:dx
   378 set :findBestPosition:bestY :updatePosition.11:dy
   379 set :findBestPosition:best :updatePosition.11:value
-    * jump *label95 always
   380 label *label94
   381 label *label95
-    * jump *label93 always
   382 label *label92
   383 label *label93
   384 label *label91
 
   394 set :findBestPosition:bestX :updatePosition.12:dx
   395 set :findBestPosition:bestY :updatePosition.12:dy
   396 set :findBestPosition:best :updatePosition.12:value
-    * jump *label101 always
   397 label *label100
   398 label *label101
-    * jump *label99 always
   399 label *label98
   400 label *label99
   401 label *label97
 
   407 set :findBestPosition:bestX :updatePosition.13:dx
   408 set :findBestPosition:bestY :updatePosition.13:dy
   409 set :findBestPosition:best :updatePosition.13:value
-    * jump *label106 always
   410 label *label105
   411 label *label106
-    * jump *label104 always
   412 label *label103
   413 label *label104
   414 label *label102
 
   420 set :findBestPosition:bestX :updatePosition.14:dx
   421 set :findBestPosition:bestY :updatePosition.14:dy
   422 set :findBestPosition:best :updatePosition.14:value
-    * jump *label111 always
   423 label *label110
   424 label *label111
-    * jump *label109 always
   425 label *label108
   426 label *label109
   427 label *label107
 
   433 set :findBestPosition:bestX :updatePosition.15:dx
   434 set :findBestPosition:bestY :updatePosition.15:dy
   435 set :findBestPosition:best :updatePosition.15:value
-    * jump *label116 always
   436 label *label115
   437 label *label116
-    * jump *label114 always
   438 label *label113
   439 label *label114
   440 label *label112
 
   459 set :findBestPosition:bestX :updatePosition.16:dx
   460 set :findBestPosition:bestY :updatePosition.16:dy
   461 set :findBestPosition:best :updatePosition.16:value
-    * jump *label124 always
   462 label *label123
   463 label *label124
-    * jump *label122 always
   464 label *label121
   465 label *label122
   466 label *label120
 
   472 set :findBestPosition:bestX :updatePosition.17:dx
   473 set :findBestPosition:bestY :updatePosition.17:dy
   474 set :findBestPosition:best :updatePosition.17:value
-    * jump *label129 always
   475 label *label128
   476 label *label129
-    * jump *label127 always
   477 label *label126
   478 label *label127
   479 label *label125
 
   485 set :findBestPosition:bestX :updatePosition.18:dx
   486 set :findBestPosition:bestY :updatePosition.18:dy
   487 set :findBestPosition:best :updatePosition.18:value
-    * jump *label134 always
   488 label *label133
   489 label *label134
-    * jump *label132 always
   490 label *label131
   491 label *label132
   492 label *label130
 
   502 set :findBestPosition:bestX :updatePosition.19:dx
   503 set :findBestPosition:bestY :updatePosition.19:dy
   504 set :findBestPosition:best :updatePosition.19:value
-    * jump *label140 always
   505 label *label139
   506 label *label140
-    * jump *label138 always
   507 label *label137
   508 label *label138
   509 label *label136
 
   515 set :findBestPosition:bestX :updatePosition.20:dx
   516 set :findBestPosition:bestY :updatePosition.20:dy
   517 set :findBestPosition:best :updatePosition.20:value
-    * jump *label145 always
   518 label *label144
   519 label *label145
-    * jump *label143 always
   520 label *label142
   521 label *label143
   522 label *label141
 
   528 set :findBestPosition:bestX :updatePosition.21:dx
   529 set :findBestPosition:bestY :updatePosition.21:dy
   530 set :findBestPosition:best :updatePosition.21:value
-    * jump *label150 always
   531 label *label149
   532 label *label150
-    * jump *label148 always
   533 label *label147
   534 label *label148
   535 label *label146
 
   545 set :findBestPosition:bestX :updatePosition.22:dx
   546 set :findBestPosition:bestY :updatePosition.22:dy
   547 set :findBestPosition:best :updatePosition.22:value
-    * jump *label156 always
   548 label *label155
   549 label *label156
-    * jump *label154 always
   550 label *label153
   551 label *label154
   552 label *label152
 
   558 set :findBestPosition:bestX :updatePosition.23:dx
   559 set :findBestPosition:bestY :updatePosition.23:dy
   560 set :findBestPosition:best :updatePosition.23:value
-    * jump *label161 always
   561 label *label160
   562 label *label161
-    * jump *label159 always
   563 label *label158
   564 label *label159
   565 label *label157
 
   571 set :findBestPosition:bestX :updatePosition.24:dx
   572 set :findBestPosition:bestY :updatePosition.24:dy
   573 set :findBestPosition:best :updatePosition.24:value
-    * jump *label166 always
   574 label *label165
   575 label *label166
-    * jump *label164 always
   576 label *label163
   577 label *label164
   578 label *label162
 
   620 set :findBestPosition:bestX :updatePosition.25:dx
   621 set :findBestPosition:bestY :updatePosition.25:dy
   622 set :findBestPosition:best :updatePosition.25:value
-    * jump *label174 always
   623 label *label173
   624 label *label174
-    * jump *label172 always
   625 label *label171
   626 label *label172
   627 label *label170
 
   633 set :findBestPosition:bestX :updatePosition.26:dx
   634 set :findBestPosition:bestY :updatePosition.26:dy
   635 set :findBestPosition:best :updatePosition.26:value
-    * jump *label179 always
   636 label *label178
   637 label *label179
-    * jump *label177 always
   638 label *label176
   639 label *label177
   640 label *label175
 
   646 set :findBestPosition:bestX :updatePosition.27:dx
   647 set :findBestPosition:bestY :updatePosition.27:dy
   648 set :findBestPosition:best :updatePosition.27:value
-    * jump *label184 always
   649 label *label183
   650 label *label184
-    * jump *label182 always
   651 label *label181
   652 label *label182
   653 label *label180
 
   659 set :findBestPosition:bestX :updatePosition.28:dx
   660 set :findBestPosition:bestY :updatePosition.28:dy
   661 set :findBestPosition:best :updatePosition.28:value
-    * jump *label189 always
   662 label *label188
   663 label *label189
-    * jump *label187 always
   664 label *label186
   665 label *label187
   666 label *label185
 
   676 set :findBestPosition:bestX :updatePosition.29:dx
   677 set :findBestPosition:bestY :updatePosition.29:dy
   678 set :findBestPosition:best :updatePosition.29:value
-    * jump *label195 always
   679 label *label194
   680 label *label195
-    * jump *label193 always
   681 label *label192
   682 label *label193
   683 label *label191
 
   689 set :findBestPosition:bestX :updatePosition.30:dx
   690 set :findBestPosition:bestY :updatePosition.30:dy
   691 set :findBestPosition:best :updatePosition.30:value
-    * jump *label200 always
   692 label *label199
   693 label *label200
-    * jump *label198 always
   694 label *label197
   695 label *label198
   696 label *label196
 
   702 set :findBestPosition:bestX :updatePosition.31:dx
   703 set :findBestPosition:bestY :updatePosition.31:dy
   704 set :findBestPosition:best :updatePosition.31:value
-    * jump *label205 always
   705 label *label204
   706 label *label205
-    * jump *label203 always
   707 label *label202
   708 label *label203
   709 label *label201
 
   715 set :findBestPosition:bestX :updatePosition.32:dx
   716 set :findBestPosition:bestY :updatePosition.32:dy
   717 set :findBestPosition:best :updatePosition.32:value
-    * jump *label210 always
   718 label *label209
   719 label *label210
-    * jump *label208 always
   720 label *label207
   721 label *label208
   722 label *label206
 
   732 set :findBestPosition:bestX :updatePosition.33:dx
   733 set :findBestPosition:bestY :updatePosition.33:dy
   734 set :findBestPosition:best :updatePosition.33:value
-    * jump *label216 always
   735 label *label215
   736 label *label216
-    * jump *label214 always
   737 label *label213
   738 label *label214
   739 label *label212
 
   745 set :findBestPosition:bestX :updatePosition.34:dx
   746 set :findBestPosition:bestY :updatePosition.34:dy
   747 set :findBestPosition:best :updatePosition.34:value
-    * jump *label221 always
   748 label *label220
   749 label *label221
-    * jump *label219 always
   750 label *label218
   751 label *label219
   752 label *label217
 
   758 set :findBestPosition:bestX :updatePosition.35:dx
   759 set :findBestPosition:bestY :updatePosition.35:dy
   760 set :findBestPosition:best :updatePosition.35:value
-    * jump *label226 always
   761 label *label225
   762 label *label226
-    * jump *label224 always
   763 label *label223
   764 label *label224
   765 label *label222
 
   771 set :findBestPosition:bestX :updatePosition.36:dx
   772 set :findBestPosition:bestY :updatePosition.36:dy
   773 set :findBestPosition:best :updatePosition.36:value
-    * jump *label231 always
   774 label *label230
   775 label *label231
-    * jump *label229 always
   776 label *label228
   777 label *label229
   778 label *label227
 
   788 set :findBestPosition:bestX :updatePosition.37:dx
   789 set :findBestPosition:bestY :updatePosition.37:dy
   790 set :findBestPosition:best :updatePosition.37:value
-    * jump *label237 always
   791 label *label236
   792 label *label237
-    * jump *label235 always
   793 label *label234
   794 label *label235
   795 label *label233
 
   801 set :findBestPosition:bestX :updatePosition.38:dx
   802 set :findBestPosition:bestY :updatePosition.38:dy
   803 set :findBestPosition:best :updatePosition.38:value
-    * jump *label242 always
   804 label *label241
   805 label *label242
-    * jump *label240 always
   806 label *label239
   807 label *label240
   808 label *label238
 
   814 set :findBestPosition:bestX :updatePosition.39:dx
   815 set :findBestPosition:bestY :updatePosition.39:dy
   816 set :findBestPosition:best :updatePosition.39:value
-    * jump *label247 always
   817 label *label246
   818 label *label247
-    * jump *label245 always
   819 label *label244
   820 label *label245
   821 label *label243
 
   827 set :findBestPosition:bestX :updatePosition.40:dx
   828 set :findBestPosition:bestY :updatePosition.40:dy
   829 set :findBestPosition:best :updatePosition.40:value
-    * jump *label252 always
   830 label *label251
   831 label *label252
-    * jump *label250 always
   832 label *label249
   833 label *label250
   834 label *label248

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
    62 set *tmp8 :spotValue.1:result
    63 label *label15
    64 set :computeRowValues:x2 *tmp8
-    * op add :spotValue.2:x :computeRowValues:x 0
+   65 set :spotValue.2:x :computeRowValues:x
    66 set :spotValue.2:y :computeRowValues:y
    67 set :spotValue.2:ore :computeRowValues:ore
    68 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
 
   180 call *label2 *invalid :computeRowValues*retval (m:*label27) (h:*label27)
   181 label *label27
   182 set :findBestPosition:y2 :computeRowValues*retval
-    * op add *tmp56 :findBestPosition:y 0
+  183 set *tmp56 :findBestPosition:y
   184 set :computeRowValues:x :findBestPosition:x
   185 set :computeRowValues:y *tmp56
   186 set :computeRowValues:ore :findBestPosition:ore

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-5 instructions):
 
    25 select :isSolid:result notEqual solid false 1 0
    26 set *tmp3 :isSolid:result
    27 label *label12
-    * op or :createTerrainMask:result *tmp0 *tmp3
+   28 op or :createTerrainMask:result *tmp0 :isSolid:result
    29 label *label10
    30 op sub :createTerrainMask:c :createTerrainMask:c 1
    31 jump *label9 always
 
    36 label *label8
    37 set :createTerrainMask*retval :createTerrainMask:result
    38 jump *label5 always
-    * set :createTerrainMask*retval null
    39 label *label5
    40 set :createTerrainMask*finished true
    41 jump *label4 always
 
    50 select :spotValue:result notEqual solid false 0.09803921568627451 value
    51 set *tmp6 :spotValue:result
    52 label *label14
-    * set :computeRowValues:x1 *tmp6
+   53 set :computeRowValues:x1 :spotValue:result
    54 op sub :spotValue.1:x :computeRowValues:x 1
    55 set :spotValue.1:y :computeRowValues:y
    56 set :spotValue.1:ore :computeRowValues:ore
 
    60 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
    61 set *tmp8 :spotValue.1:result
    62 label *label15
-    * set :computeRowValues:x2 *tmp8
+   63 set :computeRowValues:x2 :spotValue.1:result
    64 set :spotValue.2:x :computeRowValues:x
    65 set :spotValue.2:y :computeRowValues:y
    66 set :spotValue.2:ore :computeRowValues:ore
 
    70 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
    71 set *tmp10 :spotValue.2:result
    72 label *label16
-    * set :computeRowValues:x3 *tmp10
+   73 set :computeRowValues:x3 :spotValue.2:result
    74 op add :spotValue.3:x :computeRowValues:x 1
    75 set :spotValue.3:y :computeRowValues:y
    76 set :spotValue.3:ore :computeRowValues:ore
 
    80 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
    81 set *tmp12 :spotValue.3:result
    82 label *label17
-    * set :computeRowValues:x4 *tmp12
+   83 set :computeRowValues:x4 :spotValue.3:result
    84 op add :spotValue.4:x :computeRowValues:x 2
    85 set :spotValue.4:y :computeRowValues:y
    86 set :spotValue.4:ore :computeRowValues:ore
 
    90 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
    91 set *tmp14 :spotValue.4:result
    92 label *label18
-    * set :computeRowValues:x5 *tmp14
+   93 set :computeRowValues:x5 :spotValue.4:result
    94 jump *label19 notEqual :computeRowValues:size 2
-    * op add *tmp17 :computeRowValues:x1 :computeRowValues:x2
-    * op add *tmp18 :computeRowValues:x2 :computeRowValues:x3
-    * op add *tmp19 :computeRowValues:x3 :computeRowValues:x4
-    * op add *tmp20 :computeRowValues:x4 :computeRowValues:x5
+   95 op add *tmp17 *tmp6 *tmp8
+   96 op add *tmp18 *tmp8 *tmp10
+   97 op add *tmp19 *tmp10 *tmp12
+   98 op add *tmp20 *tmp12 *tmp14
    99 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
   100 jump *label13 always
-    * set *tmp16 null
   101 jump *label20 always
   102 label *label19
   103 jump *label21 notEqual :computeRowValues:size 3
-    * op add *tmp24 :computeRowValues:x2 :computeRowValues:x3
-    * op add *tmp25 :computeRowValues:x1 *tmp24
-    * op add *tmp26 :computeRowValues:x2 :computeRowValues:x3
-    * op add *tmp27 *tmp26 :computeRowValues:x4
-    * op add *tmp28 :computeRowValues:x3 :computeRowValues:x4
-    * op add *tmp29 *tmp28 :computeRowValues:x5
+  104 op add *tmp24 *tmp8 *tmp10
+  105 op add *tmp25 *tmp6 *tmp24
+  106 op add *tmp26 *tmp8 *tmp10
+  107 op add *tmp27 *tmp24 *tmp12
+  108 op add *tmp28 *tmp10 *tmp12
+  109 op add *tmp29 *tmp28 *tmp14
   110 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
   111 jump *label13 always
-    * set *tmp23 null
   112 jump *label22 always
   113 label *label21
   114 op sub :spotValue.5:x :computeRowValues:x 3
 
   120 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
   121 set *tmp32 :spotValue.5:result
   122 label *label23
-    * set :computeRowValues:x0 *tmp32
+  123 set :computeRowValues:x0 :spotValue.5:result
   124 op add :spotValue.6:x :computeRowValues:x 3
   125 set :spotValue.6:y :computeRowValues:y
   126 set :spotValue.6:ore :computeRowValues:ore
 
   130 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
   131 set *tmp34 :spotValue.6:result
   132 label *label24
-    * set :computeRowValues:x6 *tmp34
-    * op add *tmp35 :computeRowValues:x1 :computeRowValues:x2
-    * op add *tmp36 *tmp35 :computeRowValues:x3
-    * op add *tmp37 :computeRowValues:x0 *tmp36
+  133 set :computeRowValues:x6 :spotValue.6:result
+  134 op add *tmp35 *tmp6 *tmp8
+  135 op add *tmp36 *tmp35 *tmp10
+  136 op add *tmp37 *tmp32 *tmp36
   137 op min *tmp38 0.09803921568627451 *tmp37
-    * op add *tmp39 :computeRowValues:x1 :computeRowValues:x2
-    * op add *tmp40 *tmp39 :computeRowValues:x3
-    * op add *tmp41 *tmp40 :computeRowValues:x4
+  138 op add *tmp39 *tmp6 *tmp8
+  139 op add *tmp40 *tmp35 *tmp10
+  140 op add *tmp41 *tmp36 *tmp12
   141 op min *tmp42 0.09803921568627451 *tmp41
-    * op add *tmp43 :computeRowValues:x3 :computeRowValues:x4
-    * op add *tmp44 *tmp43 :computeRowValues:x5
-    * op add *tmp45 :computeRowValues:x2 *tmp44
+  142 op add *tmp43 *tmp10 *tmp12
+  143 op add *tmp44 *tmp43 *tmp14
+  144 op add *tmp45 *tmp8 *tmp44
   145 op min *tmp46 0.09803921568627451 *tmp45
-    * op add *tmp47 :computeRowValues:x3 :computeRowValues:x4
-    * op add *tmp48 *tmp47 :computeRowValues:x5
-    * op add *tmp49 *tmp48 :computeRowValues:x6
+  146 op add *tmp47 *tmp10 *tmp12
+  147 op add *tmp48 *tmp43 *tmp14
+  148 op add *tmp49 *tmp44 *tmp34
   149 op min *tmp50 0.09803921568627451 *tmp49
   150 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
   151 jump *label13 always
-    * set *tmp23 null
   152 label *label22
-    * set *tmp16 *tmp23
+  153 set *tmp16 null
   154 label *label20
-    * set :computeRowValues*retval *tmp16
+  155 set :computeRowValues*retval null
   156 label *label13
   157 return :computeRowValues*retaddr
   158 end
 
   178 set :findBestPosition:y2 :computeRowValues*retval
   179 set *tmp56 :findBestPosition:y
   180 set :computeRowValues:x :findBestPosition:x
-    * set :computeRowValues:y *tmp56
+  181 set :computeRowValues:y :findBestPosition:y
   182 set :computeRowValues:ore :findBestPosition:ore
   183 set :computeRowValues:size :findBestPosition:size
   184 setaddr :computeRowValues*retaddr *label28 (h:*label28)
 
   210 op add :findBestPosition:row1 :findBestPosition:y1 :findBestPosition:y2
   211 op add :findBestPosition:row2 :findBestPosition:y2 :findBestPosition:y3
   212 op add :findBestPosition:row3 :findBestPosition:y3 :findBestPosition:y4
-    * op add :findBestPosition:row4 :findBestPosition:y4 :findBestPosition:y5
+  213 op add :findBestPosition:row4 :findBestPosition:y4 :computeRowValues*retval
   214 set :updateRowPositions2x2:dy -1.5
   215 set :updateRowPositions2x2:rowSum :findBestPosition:row1
-    * unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2x2:col2 :updateRowPositions2x2:col3 :updateRowPositions2x2:col4 :updateRowPositions2x2:rowSum
+  216 unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2x2:col2 :updateRowPositions2x2:col3 :updateRowPositions2x2:col4 :findBestPosition:row1
   217 set :updatePosition:dx -1.5
-    * set :updatePosition:dy :updateRowPositions2x2:dy
+  218 set :updatePosition:dy -1.5
   219 set :updatePosition:value :updateRowPositions2x2:col1
-    * jump *label35 greaterThanEq :updatePosition:value 0.0784313725490196
-    * jump *label37 lessThanEq :updatePosition:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition:dx
-    * set :findBestPosition:bestY :updatePosition:dy
-    * set :findBestPosition:best :updatePosition:value
+  220 jump *label35 greaterThanEq :updateRowPositions2x2:col1 0.0784313725490196
+  221 jump *label37 lessThanEq :updateRowPositions2x2:col1 0
+  222 set :findBestPosition:bestX -1.5
+  223 set :findBestPosition:bestY :updateRowPositions2x2:dy
+  224 set :findBestPosition:best :updateRowPositions2x2:col1
   225 label *label37
   226 label *label38
   227 label *label35
   228 label *label36
   229 label *label34
   230 set :updatePosition.1:dx -0.5
-    * set :updatePosition.1:dy :updateRowPositions2x2:dy
+  231 set :updatePosition.1:dy -1.5
   232 set :updatePosition.1:value :updateRowPositions2x2:col2
-    * jump *label40 greaterThanEq :updatePosition.1:value 0.0784313725490196
-    * jump *label42 lessThanEq :updatePosition.1:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.1:dx
-    * set :findBestPosition:bestY :updatePosition.1:dy
-    * set :findBestPosition:best :updatePosition.1:value
+  233 jump *label40 greaterThanEq :updateRowPositions2x2:col2 0.0784313725490196
+  234 jump *label42 lessThanEq :updateRowPositions2x2:col2 :findBestPosition:best
+  235 set :findBestPosition:bestX -0.5
+  236 set :findBestPosition:bestY :updateRowPositions2x2:dy
+  237 set :findBestPosition:best :updateRowPositions2x2:col2
   238 label *label42
   239 label *label43
   240 label *label40
   241 label *label41
   242 label *label39
   243 set :updatePosition.2:dx 0.5
-    * set :updatePosition.2:dy :updateRowPositions2x2:dy
+  244 set :updatePosition.2:dy -1.5
   245 set :updatePosition.2:value :updateRowPositions2x2:col3
-    * jump *label45 greaterThanEq :updatePosition.2:value 0.0784313725490196
-    * jump *label47 lessThanEq :updatePosition.2:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.2:dx
-    * set :findBestPosition:bestY :updatePosition.2:dy
-    * set :findBestPosition:best :updatePosition.2:value
+  246 jump *label45 greaterThanEq :updateRowPositions2x2:col3 0.0784313725490196
+  247 jump *label47 lessThanEq :updateRowPositions2x2:col3 :findBestPosition:best
+  248 set :findBestPosition:bestX 0.5
+  249 set :findBestPosition:bestY :updateRowPositions2x2:dy
+  250 set :findBestPosition:best :updateRowPositions2x2:col3
   251 label *label47
   252 label *label48
   253 label *label45
   254 label *label46
   255 label *label44
   256 set :updatePosition.3:dx 1.5
-    * set :updatePosition.3:dy :updateRowPositions2x2:dy
+  257 set :updatePosition.3:dy -1.5
   258 set :updatePosition.3:value :updateRowPositions2x2:col4
-    * jump *label50 greaterThanEq :updatePosition.3:value 0.0784313725490196
-    * jump *label52 lessThanEq :updatePosition.3:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.3:dx
-    * set :findBestPosition:bestY :updatePosition.3:dy
-    * set :findBestPosition:best :updatePosition.3:value
+  259 jump *label50 greaterThanEq :updateRowPositions2x2:col4 0.0784313725490196
+  260 jump *label52 lessThanEq :updateRowPositions2x2:col4 :findBestPosition:best
+  261 set :findBestPosition:bestX 1.5
+  262 set :findBestPosition:bestY :updateRowPositions2x2:dy
+  263 set :findBestPosition:best :updateRowPositions2x2:col4
   264 label *label52
   265 label *label53
   266 label *label50
 
   269 label *label33
   270 set :updateRowPositions2x2.1:dy -0.5
   271 set :updateRowPositions2x2.1:rowSum :findBestPosition:row2
-    * unpackcolor :updateRowPositions2x2.1:col1 :updateRowPositions2x2.1:col2 :updateRowPositions2x2.1:col3 :updateRowPositions2x2.1:col4 :updateRowPositions2x2.1:rowSum
+  272 unpackcolor :updateRowPositions2x2.1:col1 :updateRowPositions2x2.1:col2 :updateRowPositions2x2.1:col3 :updateRowPositions2x2.1:col4 :findBestPosition:row2
   273 set :updatePosition.4:dx -1.5
-    * set :updatePosition.4:dy :updateRowPositions2x2.1:dy
+  274 set :updatePosition.4:dy -0.5
   275 set :updatePosition.4:value :updateRowPositions2x2.1:col1
-    * jump *label56 greaterThanEq :updatePosition.4:value 0.0784313725490196
-    * jump *label58 lessThanEq :updatePosition.4:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.4:dx
-    * set :findBestPosition:bestY :updatePosition.4:dy
-    * set :findBestPosition:best :updatePosition.4:value
+  276 jump *label56 greaterThanEq :updateRowPositions2x2.1:col1 0.0784313725490196
+  277 jump *label58 lessThanEq :updateRowPositions2x2.1:col1 :findBestPosition:best
+  278 set :findBestPosition:bestX -1.5
+  279 set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  280 set :findBestPosition:best :updateRowPositions2x2.1:col1
   281 label *label58
   282 label *label59
   283 label *label56
   284 label *label57
   285 label *label55
   286 set :updatePosition.5:dx -0.5
-    * set :updatePosition.5:dy :updateRowPositions2x2.1:dy
+  287 set :updatePosition.5:dy -0.5
   288 set :updatePosition.5:value :updateRowPositions2x2.1:col2
-    * jump *label61 greaterThanEq :updatePosition.5:value 0.0784313725490196
-    * jump *label63 lessThanEq :updatePosition.5:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.5:dx
-    * set :findBestPosition:bestY :updatePosition.5:dy
-    * set :findBestPosition:best :updatePosition.5:value
+  289 jump *label61 greaterThanEq :updateRowPositions2x2.1:col2 0.0784313725490196
+  290 jump *label63 lessThanEq :updateRowPositions2x2.1:col2 :findBestPosition:best
+  291 set :findBestPosition:bestX -0.5
+  292 set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  293 set :findBestPosition:best :updateRowPositions2x2.1:col2
   294 label *label63
   295 label *label64
   296 label *label61
   297 label *label62
   298 label *label60
   299 set :updatePosition.6:dx 0.5
-    * set :updatePosition.6:dy :updateRowPositions2x2.1:dy
+  300 set :updatePosition.6:dy -0.5
   301 set :updatePosition.6:value :updateRowPositions2x2.1:col3
-    * jump *label66 greaterThanEq :updatePosition.6:value 0.0784313725490196
-    * jump *label68 lessThanEq :updatePosition.6:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.6:dx
-    * set :findBestPosition:bestY :updatePosition.6:dy
-    * set :findBestPosition:best :updatePosition.6:value
+  302 jump *label66 greaterThanEq :updateRowPositions2x2.1:col3 0.0784313725490196
+  303 jump *label68 lessThanEq :updateRowPositions2x2.1:col3 :findBestPosition:best
+  304 set :findBestPosition:bestX 0.5
+  305 set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  306 set :findBestPosition:best :updateRowPositions2x2.1:col3
   307 label *label68
   308 label *label69
   309 label *label66
   310 label *label67
   311 label *label65
   312 set :updatePosition.7:dx 1.5
-    * set :updatePosition.7:dy :updateRowPositions2x2.1:dy
+  313 set :updatePosition.7:dy -0.5
   314 set :updatePosition.7:value :updateRowPositions2x2.1:col4
-    * jump *label71 greaterThanEq :updatePosition.7:value 0.0784313725490196
-    * jump *label73 lessThanEq :updatePosition.7:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.7:dx
-    * set :findBestPosition:bestY :updatePosition.7:dy
-    * set :findBestPosition:best :updatePosition.7:value
+  315 jump *label71 greaterThanEq :updateRowPositions2x2.1:col4 0.0784313725490196
+  316 jump *label73 lessThanEq :updateRowPositions2x2.1:col4 :findBestPosition:best
+  317 set :findBestPosition:bestX 1.5
+  318 set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  319 set :findBestPosition:best :updateRowPositions2x2.1:col4
   320 label *label73
   321 label *label74
   322 label *label71
 
   325 label *label54
   326 set :updateRowPositions2x2.2:dy 0.5
   327 set :updateRowPositions2x2.2:rowSum :findBestPosition:row3
-    * unpackcolor :updateRowPositions2x2.2:col1 :updateRowPositions2x2.2:col2 :updateRowPositions2x2.2:col3 :updateRowPositions2x2.2:col4 :updateRowPositions2x2.2:rowSum
+  328 unpackcolor :updateRowPositions2x2.2:col1 :updateRowPositions2x2.2:col2 :updateRowPositions2x2.2:col3 :updateRowPositions2x2.2:col4 :findBestPosition:row3
   329 set :updatePosition.8:dx -1.5
-    * set :updatePosition.8:dy :updateRowPositions2x2.2:dy
+  330 set :updatePosition.8:dy 0.5
   331 set :updatePosition.8:value :updateRowPositions2x2.2:col1
-    * jump *label77 greaterThanEq :updatePosition.8:value 0.0784313725490196
-    * jump *label79 lessThanEq :updatePosition.8:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.8:dx
-    * set :findBestPosition:bestY :updatePosition.8:dy
-    * set :findBestPosition:best :updatePosition.8:value
+  332 jump *label77 greaterThanEq :updateRowPositions2x2.2:col1 0.0784313725490196
+  333 jump *label79 lessThanEq :updateRowPositions2x2.2:col1 :findBestPosition:best
+  334 set :findBestPosition:bestX -1.5
+  335 set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  336 set :findBestPosition:best :updateRowPositions2x2.2:col1
   337 label *label79
   338 label *label80
   339 label *label77
   340 label *label78
   341 label *label76
   342 set :updatePosition.9:dx -0.5
-    * set :updatePosition.9:dy :updateRowPositions2x2.2:dy
+  343 set :updatePosition.9:dy 0.5
   344 set :updatePosition.9:value :updateRowPositions2x2.2:col2
-    * jump *label82 greaterThanEq :updatePosition.9:value 0.0784313725490196
-    * jump *label84 lessThanEq :updatePosition.9:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.9:dx
-    * set :findBestPosition:bestY :updatePosition.9:dy
-    * set :findBestPosition:best :updatePosition.9:value
+  345 jump *label82 greaterThanEq :updateRowPositions2x2.2:col2 0.0784313725490196
+  346 jump *label84 lessThanEq :updateRowPositions2x2.2:col2 :findBestPosition:best
+  347 set :findBestPosition:bestX -0.5
+  348 set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  349 set :findBestPosition:best :updateRowPositions2x2.2:col2
   350 label *label84
   351 label *label85
   352 label *label82
   353 label *label83
   354 label *label81
   355 set :updatePosition.10:dx 0.5
-    * set :updatePosition.10:dy :updateRowPositions2x2.2:dy
+  356 set :updatePosition.10:dy 0.5
   357 set :updatePosition.10:value :updateRowPositions2x2.2:col3
-    * jump *label87 greaterThanEq :updatePosition.10:value 0.0784313725490196
-    * jump *label89 lessThanEq :updatePosition.10:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.10:dx
-    * set :findBestPosition:bestY :updatePosition.10:dy
-    * set :findBestPosition:best :updatePosition.10:value
+  358 jump *label87 greaterThanEq :updateRowPositions2x2.2:col3 0.0784313725490196
+  359 jump *label89 lessThanEq :updateRowPositions2x2.2:col3 :findBestPosition:best
+  360 set :findBestPosition:bestX 0.5
+  361 set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  362 set :findBestPosition:best :updateRowPositions2x2.2:col3
   363 label *label89
   364 label *label90
   365 label *label87
   366 label *label88
   367 label *label86
   368 set :updatePosition.11:dx 1.5
-    * set :updatePosition.11:dy :updateRowPositions2x2.2:dy
+  369 set :updatePosition.11:dy 0.5
   370 set :updatePosition.11:value :updateRowPositions2x2.2:col4
-    * jump *label92 greaterThanEq :updatePosition.11:value 0.0784313725490196
-    * jump *label94 lessThanEq :updatePosition.11:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.11:dx
-    * set :findBestPosition:bestY :updatePosition.11:dy
-    * set :findBestPosition:best :updatePosition.11:value
+  371 jump *label92 greaterThanEq :updateRowPositions2x2.2:col4 0.0784313725490196
+  372 jump *label94 lessThanEq :updateRowPositions2x2.2:col4 :findBestPosition:best
+  373 set :findBestPosition:bestX 1.5
+  374 set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  375 set :findBestPosition:best :updateRowPositions2x2.2:col4
   376 label *label94
   377 label *label95
   378 label *label92
 
   381 label *label75
   382 set :updateRowPositions2x2.3:dy 1.5
   383 set :updateRowPositions2x2.3:rowSum :findBestPosition:row4
-    * unpackcolor :updateRowPositions2x2.3:col1 :updateRowPositions2x2.3:col2 :updateRowPositions2x2.3:col3 :updateRowPositions2x2.3:col4 :updateRowPositions2x2.3:rowSum
+  384 unpackcolor :updateRowPositions2x2.3:col1 :updateRowPositions2x2.3:col2 :updateRowPositions2x2.3:col3 :updateRowPositions2x2.3:col4 :findBestPosition:row4
   385 set :updatePosition.12:dx -1.5
-    * set :updatePosition.12:dy :updateRowPositions2x2.3:dy
+  386 set :updatePosition.12:dy 1.5
   387 set :updatePosition.12:value :updateRowPositions2x2.3:col1
-    * jump *label98 greaterThanEq :updatePosition.12:value 0.0784313725490196
-    * jump *label100 lessThanEq :updatePosition.12:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.12:dx
-    * set :findBestPosition:bestY :updatePosition.12:dy
-    * set :findBestPosition:best :updatePosition.12:value
+  388 jump *label98 greaterThanEq :updateRowPositions2x2.3:col1 0.0784313725490196
+  389 jump *label100 lessThanEq :updateRowPositions2x2.3:col1 :findBestPosition:best
+  390 set :findBestPosition:bestX -1.5
+  391 set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  392 set :findBestPosition:best :updateRowPositions2x2.3:col1
   393 label *label100
   394 label *label101
   395 label *label98
   396 label *label99
   397 label *label97
   398 set :updatePosition.13:dx -0.5
-    * set :updatePosition.13:dy :updateRowPositions2x2.3:dy
+  399 set :updatePosition.13:dy 1.5
   400 set :updatePosition.13:value :updateRowPositions2x2.3:col2
-    * jump *label103 greaterThanEq :updatePosition.13:value 0.0784313725490196
-    * jump *label105 lessThanEq :updatePosition.13:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.13:dx
-    * set :findBestPosition:bestY :updatePosition.13:dy
-    * set :findBestPosition:best :updatePosition.13:value
+  401 jump *label103 greaterThanEq :updateRowPositions2x2.3:col2 0.0784313725490196
+  402 jump *label105 lessThanEq :updateRowPositions2x2.3:col2 :findBestPosition:best
+  403 set :findBestPosition:bestX -0.5
+  404 set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  405 set :findBestPosition:best :updateRowPositions2x2.3:col2
   406 label *label105
   407 label *label106
   408 label *label103
   409 label *label104
   410 label *label102
   411 set :updatePosition.14:dx 0.5
-    * set :updatePosition.14:dy :updateRowPositions2x2.3:dy
+  412 set :updatePosition.14:dy 1.5
   413 set :updatePosition.14:value :updateRowPositions2x2.3:col3
-    * jump *label108 greaterThanEq :updatePosition.14:value 0.0784313725490196
-    * jump *label110 lessThanEq :updatePosition.14:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.14:dx
-    * set :findBestPosition:bestY :updatePosition.14:dy
-    * set :findBestPosition:best :updatePosition.14:value
+  414 jump *label108 greaterThanEq :updateRowPositions2x2.3:col3 0.0784313725490196
+  415 jump *label110 lessThanEq :updateRowPositions2x2.3:col3 :findBestPosition:best
+  416 set :findBestPosition:bestX 0.5
+  417 set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  418 set :findBestPosition:best :updateRowPositions2x2.3:col3
   419 label *label110
   420 label *label111
   421 label *label108
   422 label *label109
   423 label *label107
   424 set :updatePosition.15:dx 1.5
-    * set :updatePosition.15:dy :updateRowPositions2x2.3:dy
+  425 set :updatePosition.15:dy 1.5
   426 set :updatePosition.15:value :updateRowPositions2x2.3:col4
-    * jump *label113 greaterThanEq :updatePosition.15:value 0.0784313725490196
-    * jump *label115 lessThanEq :updatePosition.15:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.15:dx
-    * set :findBestPosition:bestY :updatePosition.15:dy
-    * set :findBestPosition:best :updatePosition.15:value
+  427 jump *label113 greaterThanEq :updateRowPositions2x2.3:col4 0.0784313725490196
+  428 jump *label115 lessThanEq :updateRowPositions2x2.3:col4 :findBestPosition:best
+  429 set :findBestPosition:bestX 1.5
+  430 set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  431 set :findBestPosition:best :updateRowPositions2x2.3:col4
   432 label *label115
   433 label *label116
   434 label *label113
 
   441 op add *tmp134 :findBestPosition:y2 :findBestPosition:y3
   442 op add :findBestPosition:row1.1 :findBestPosition:y1 *tmp134
   443 op add *tmp136 :findBestPosition:y2 :findBestPosition:y3
-    * op add :findBestPosition:row2.1 *tmp136 :findBestPosition:y4
+  444 op add :findBestPosition:row2.1 *tmp134 :findBestPosition:y4
   445 op add *tmp138 :findBestPosition:y3 :findBestPosition:y4
-    * op add :findBestPosition:row3.1 *tmp138 :findBestPosition:y5
+  446 op add :findBestPosition:row3.1 *tmp138 :computeRowValues*retval
   447 set :updateRowPositions3x3:dy -1
   448 set :updateRowPositions3x3:rowSum :findBestPosition:row1.1
-    * unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 0 :updateRowPositions3x3:rowSum
+  449 unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 0 :findBestPosition:row1.1
   450 set :updatePosition.16:dx -1
-    * set :updatePosition.16:dy :updateRowPositions3x3:dy
+  451 set :updatePosition.16:dy -1
   452 set :updatePosition.16:value :updateRowPositions3x3:col1
-    * jump *label121 greaterThanEq :updatePosition.16:value 0.0784313725490196
-    * jump *label123 lessThanEq :updatePosition.16:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.16:dx
-    * set :findBestPosition:bestY :updatePosition.16:dy
-    * set :findBestPosition:best :updatePosition.16:value
+  453 jump *label121 greaterThanEq :updateRowPositions3x3:col1 0.0784313725490196
+  454 jump *label123 lessThanEq :updateRowPositions3x3:col1 0
+  455 set :findBestPosition:bestX -1
+  456 set :findBestPosition:bestY :updateRowPositions3x3:dy
+  457 set :findBestPosition:best :updateRowPositions3x3:col1
   458 label *label123
   459 label *label124
   460 label *label121
   461 label *label122
   462 label *label120
   463 set :updatePosition.17:dx 0
-    * set :updatePosition.17:dy :updateRowPositions3x3:dy
+  464 set :updatePosition.17:dy -1
   465 set :updatePosition.17:value :updateRowPositions3x3:col2
-    * jump *label126 greaterThanEq :updatePosition.17:value 0.0784313725490196
-    * jump *label128 lessThanEq :updatePosition.17:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.17:dx
-    * set :findBestPosition:bestY :updatePosition.17:dy
-    * set :findBestPosition:best :updatePosition.17:value
+  466 jump *label126 greaterThanEq :updateRowPositions3x3:col2 0.0784313725490196
+  467 jump *label128 lessThanEq :updateRowPositions3x3:col2 :findBestPosition:best
+  468 set :findBestPosition:bestX 0
+  469 set :findBestPosition:bestY :updateRowPositions3x3:dy
+  470 set :findBestPosition:best :updateRowPositions3x3:col2
   471 label *label128
   472 label *label129
   473 label *label126
   474 label *label127
   475 label *label125
   476 set :updatePosition.18:dx 1
-    * set :updatePosition.18:dy :updateRowPositions3x3:dy
+  477 set :updatePosition.18:dy -1
   478 set :updatePosition.18:value :updateRowPositions3x3:col3
-    * jump *label131 greaterThanEq :updatePosition.18:value 0.0784313725490196
-    * jump *label133 lessThanEq :updatePosition.18:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.18:dx
-    * set :findBestPosition:bestY :updatePosition.18:dy
-    * set :findBestPosition:best :updatePosition.18:value
+  479 jump *label131 greaterThanEq :updateRowPositions3x3:col3 0.0784313725490196
+  480 jump *label133 lessThanEq :updateRowPositions3x3:col3 :findBestPosition:best
+  481 set :findBestPosition:bestX 1
+  482 set :findBestPosition:bestY :updateRowPositions3x3:dy
+  483 set :findBestPosition:best :updateRowPositions3x3:col3
   484 label *label133
   485 label *label134
   486 label *label131
 
   489 label *label119
   490 set :updateRowPositions3x3.1:dy 0
   491 set :updateRowPositions3x3.1:rowSum :findBestPosition:row2.1
-    * unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :updateRowPositions3x3.1:rowSum
+  492 unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :findBestPosition:row2.1
   493 set :updatePosition.19:dx -1
-    * set :updatePosition.19:dy :updateRowPositions3x3.1:dy
+  494 set :updatePosition.19:dy 0
   495 set :updatePosition.19:value :updateRowPositions3x3.1:col1
-    * jump *label137 greaterThanEq :updatePosition.19:value 0.0784313725490196
-    * jump *label139 lessThanEq :updatePosition.19:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.19:dx
-    * set :findBestPosition:bestY :updatePosition.19:dy
-    * set :findBestPosition:best :updatePosition.19:value
+  496 jump *label137 greaterThanEq :updateRowPositions3x3.1:col1 0.0784313725490196
+  497 jump *label139 lessThanEq :updateRowPositions3x3.1:col1 :findBestPosition:best
+  498 set :findBestPosition:bestX -1
+  499 set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  500 set :findBestPosition:best :updateRowPositions3x3.1:col1
   501 label *label139
   502 label *label140
   503 label *label137
   504 label *label138
   505 label *label136
   506 set :updatePosition.20:dx 0
-    * set :updatePosition.20:dy :updateRowPositions3x3.1:dy
+  507 set :updatePosition.20:dy 0
   508 set :updatePosition.20:value :updateRowPositions3x3.1:col2
-    * jump *label142 greaterThanEq :updatePosition.20:value 0.0784313725490196
-    * jump *label144 lessThanEq :updatePosition.20:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.20:dx
-    * set :findBestPosition:bestY :updatePosition.20:dy
-    * set :findBestPosition:best :updatePosition.20:value
+  509 jump *label142 greaterThanEq :updateRowPositions3x3.1:col2 0.0784313725490196
+  510 jump *label144 lessThanEq :updateRowPositions3x3.1:col2 :findBestPosition:best
+  511 set :findBestPosition:bestX 0
+  512 set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  513 set :findBestPosition:best :updateRowPositions3x3.1:col2
   514 label *label144
   515 label *label145
   516 label *label142
   517 label *label143
   518 label *label141
   519 set :updatePosition.21:dx 1
-    * set :updatePosition.21:dy :updateRowPositions3x3.1:dy
+  520 set :updatePosition.21:dy 0
   521 set :updatePosition.21:value :updateRowPositions3x3.1:col3
-    * jump *label147 greaterThanEq :updatePosition.21:value 0.0784313725490196
-    * jump *label149 lessThanEq :updatePosition.21:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.21:dx
-    * set :findBestPosition:bestY :updatePosition.21:dy
-    * set :findBestPosition:best :updatePosition.21:value
+  522 jump *label147 greaterThanEq :updateRowPositions3x3.1:col3 0.0784313725490196
+  523 jump *label149 lessThanEq :updateRowPositions3x3.1:col3 :findBestPosition:best
+  524 set :findBestPosition:bestX 1
+  525 set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  526 set :findBestPosition:best :updateRowPositions3x3.1:col3
   527 label *label149
   528 label *label150
   529 label *label147
 
   532 label *label135
   533 set :updateRowPositions3x3.2:dy 1
   534 set :updateRowPositions3x3.2:rowSum :findBestPosition:row3.1
-    * unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :updateRowPositions3x3.2:rowSum
+  535 unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :findBestPosition:row3.1
   536 set :updatePosition.22:dx -1
-    * set :updatePosition.22:dy :updateRowPositions3x3.2:dy
+  537 set :updatePosition.22:dy 1
   538 set :updatePosition.22:value :updateRowPositions3x3.2:col1
-    * jump *label153 greaterThanEq :updatePosition.22:value 0.0784313725490196
-    * jump *label155 lessThanEq :updatePosition.22:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.22:dx
-    * set :findBestPosition:bestY :updatePosition.22:dy
-    * set :findBestPosition:best :updatePosition.22:value
+  539 jump *label153 greaterThanEq :updateRowPositions3x3.2:col1 0.0784313725490196
+  540 jump *label155 lessThanEq :updateRowPositions3x3.2:col1 :findBestPosition:best
+  541 set :findBestPosition:bestX -1
+  542 set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  543 set :findBestPosition:best :updateRowPositions3x3.2:col1
   544 label *label155
   545 label *label156
   546 label *label153
   547 label *label154
   548 label *label152
   549 set :updatePosition.23:dx 0
-    * set :updatePosition.23:dy :updateRowPositions3x3.2:dy
+  550 set :updatePosition.23:dy 1
   551 set :updatePosition.23:value :updateRowPositions3x3.2:col2
-    * jump *label158 greaterThanEq :updatePosition.23:value 0.0784313725490196
-    * jump *label160 lessThanEq :updatePosition.23:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.23:dx
-    * set :findBestPosition:bestY :updatePosition.23:dy
-    * set :findBestPosition:best :updatePosition.23:value
+  552 jump *label158 greaterThanEq :updateRowPositions3x3.2:col2 0.0784313725490196
+  553 jump *label160 lessThanEq :updateRowPositions3x3.2:col2 :findBestPosition:best
+  554 set :findBestPosition:bestX 0
+  555 set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  556 set :findBestPosition:best :updateRowPositions3x3.2:col2
   557 label *label160
   558 label *label161
   559 label *label158
   560 label *label159
   561 label *label157
   562 set :updatePosition.24:dx 1
-    * set :updatePosition.24:dy :updateRowPositions3x3.2:dy
+  563 set :updatePosition.24:dy 1
   564 set :updatePosition.24:value :updateRowPositions3x3.2:col3
-    * jump *label163 greaterThanEq :updatePosition.24:value 0.0784313725490196
-    * jump *label165 lessThanEq :updatePosition.24:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.24:dx
-    * set :findBestPosition:bestY :updatePosition.24:dy
-    * set :findBestPosition:best :updatePosition.24:value
+  565 jump *label163 greaterThanEq :updateRowPositions3x3.2:col3 0.0784313725490196
+  566 jump *label165 lessThanEq :updateRowPositions3x3.2:col3 :findBestPosition:best
+  567 set :findBestPosition:bestX 1
+  568 set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  569 set :findBestPosition:best :updateRowPositions3x3.2:col3
   570 label *label165
   571 label *label166
   572 label *label163
 
   597 op add *tmp184 *tmp183 :findBestPosition:y3
   598 op add :findBestPosition:row1.2 :findBestPosition:y0 *tmp184
   599 op add *tmp186 :findBestPosition:y1 :findBestPosition:y2
-    * op add *tmp187 *tmp186 :findBestPosition:y3
-    * op add :findBestPosition:row2.2 *tmp187 :findBestPosition:y4
+  600 op add *tmp187 *tmp183 :findBestPosition:y3
+  601 op add :findBestPosition:row2.2 *tmp184 :findBestPosition:y4
   602 op add *tmp189 :findBestPosition:y3 :findBestPosition:y4
   603 op add *tmp190 *tmp189 :findBestPosition:y5
   604 op add :findBestPosition:row3.2 :findBestPosition:y2 *tmp190
   605 op add *tmp192 :findBestPosition:y3 :findBestPosition:y4
-    * op add *tmp193 *tmp192 :findBestPosition:y5
-    * op add :findBestPosition:row4.1 *tmp193 :findBestPosition:y6
+  606 op add *tmp193 *tmp189 :findBestPosition:y5
+  607 op add :findBestPosition:row4.1 *tmp190 :computeRowValues*retval
   608 set :updateRowPositions4x4:dy -1.5
   609 set :updateRowPositions4x4:rowSum :findBestPosition:row1.2
-    * unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4x4:col2 :updateRowPositions4x4:col3 :updateRowPositions4x4:col4 :updateRowPositions4x4:rowSum
+  610 unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4x4:col2 :updateRowPositions4x4:col3 :updateRowPositions4x4:col4 :findBestPosition:row1.2
   611 set :updatePosition.25:dx -1.5
-    * set :updatePosition.25:dy :updateRowPositions4x4:dy
+  612 set :updatePosition.25:dy -1.5
   613 set :updatePosition.25:value :updateRowPositions4x4:col1
-    * jump *label171 greaterThanEq :updatePosition.25:value 0.0784313725490196
-    * jump *label173 lessThanEq :updatePosition.25:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.25:dx
-    * set :findBestPosition:bestY :updatePosition.25:dy
-    * set :findBestPosition:best :updatePosition.25:value
+  614 jump *label171 greaterThanEq :updateRowPositions4x4:col1 0.0784313725490196
+  615 jump *label173 lessThanEq :updateRowPositions4x4:col1 :findBestPosition:best
+  616 set :findBestPosition:bestX -1.5
+  617 set :findBestPosition:bestY :updateRowPositions4x4:dy
+  618 set :findBestPosition:best :updateRowPositions4x4:col1
   619 label *label173
   620 label *label174
   621 label *label171
   622 label *label172
   623 label *label170
   624 set :updatePosition.26:dx -0.5
-    * set :updatePosition.26:dy :updateRowPositions4x4:dy
+  625 set :updatePosition.26:dy -1.5
   626 set :updatePosition.26:value :updateRowPositions4x4:col2
-    * jump *label176 greaterThanEq :updatePosition.26:value 0.0784313725490196
-    * jump *label178 lessThanEq :updatePosition.26:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.26:dx
-    * set :findBestPosition:bestY :updatePosition.26:dy
-    * set :findBestPosition:best :updatePosition.26:value
+  627 jump *label176 greaterThanEq :updateRowPositions4x4:col2 0.0784313725490196
+  628 jump *label178 lessThanEq :updateRowPositions4x4:col2 :findBestPosition:best
+  629 set :findBestPosition:bestX -0.5
+  630 set :findBestPosition:bestY :updateRowPositions4x4:dy
+  631 set :findBestPosition:best :updateRowPositions4x4:col2
   632 label *label178
   633 label *label179
   634 label *label176
   635 label *label177
   636 label *label175
   637 set :updatePosition.27:dx 0.5
-    * set :updatePosition.27:dy :updateRowPositions4x4:dy
+  638 set :updatePosition.27:dy -1.5
   639 set :updatePosition.27:value :updateRowPositions4x4:col3
-    * jump *label181 greaterThanEq :updatePosition.27:value 0.0784313725490196
-    * jump *label183 lessThanEq :updatePosition.27:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.27:dx
-    * set :findBestPosition:bestY :updatePosition.27:dy
-    * set :findBestPosition:best :updatePosition.27:value
+  640 jump *label181 greaterThanEq :updateRowPositions4x4:col3 0.0784313725490196
+  641 jump *label183 lessThanEq :updateRowPositions4x4:col3 :findBestPosition:best
+  642 set :findBestPosition:bestX 0.5
+  643 set :findBestPosition:bestY :updateRowPositions4x4:dy
+  644 set :findBestPosition:best :updateRowPositions4x4:col3
   645 label *label183
   646 label *label184
   647 label *label181
   648 label *label182
   649 label *label180
   650 set :updatePosition.28:dx 1.5
-    * set :updatePosition.28:dy :updateRowPositions4x4:dy
+  651 set :updatePosition.28:dy -1.5
   652 set :updatePosition.28:value :updateRowPositions4x4:col4
-    * jump *label186 greaterThanEq :updatePosition.28:value 0.0784313725490196
-    * jump *label188 lessThanEq :updatePosition.28:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.28:dx
-    * set :findBestPosition:bestY :updatePosition.28:dy
-    * set :findBestPosition:best :updatePosition.28:value
+  653 jump *label186 greaterThanEq :updateRowPositions4x4:col4 0.0784313725490196
+  654 jump *label188 lessThanEq :updateRowPositions4x4:col4 :findBestPosition:best
+  655 set :findBestPosition:bestX 1.5
+  656 set :findBestPosition:bestY :updateRowPositions4x4:dy
+  657 set :findBestPosition:best :updateRowPositions4x4:col4
   658 label *label188
   659 label *label189
   660 label *label186
 
   663 label *label169
   664 set :updateRowPositions4x4.1:dy -0.5
   665 set :updateRowPositions4x4.1:rowSum :findBestPosition:row2.2
-    * unpackcolor :updateRowPositions4x4.1:col1 :updateRowPositions4x4.1:col2 :updateRowPositions4x4.1:col3 :updateRowPositions4x4.1:col4 :updateRowPositions4x4.1:rowSum
+  666 unpackcolor :updateRowPositions4x4.1:col1 :updateRowPositions4x4.1:col2 :updateRowPositions4x4.1:col3 :updateRowPositions4x4.1:col4 :findBestPosition:row2.2
   667 set :updatePosition.29:dx -1.5
-    * set :updatePosition.29:dy :updateRowPositions4x4.1:dy
+  668 set :updatePosition.29:dy -0.5
   669 set :updatePosition.29:value :updateRowPositions4x4.1:col1
-    * jump *label192 greaterThanEq :updatePosition.29:value 0.0784313725490196
-    * jump *label194 lessThanEq :updatePosition.29:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.29:dx
-    * set :findBestPosition:bestY :updatePosition.29:dy
-    * set :findBestPosition:best :updatePosition.29:value
+  670 jump *label192 greaterThanEq :updateRowPositions4x4.1:col1 0.0784313725490196
+  671 jump *label194 lessThanEq :updateRowPositions4x4.1:col1 :findBestPosition:best
+  672 set :findBestPosition:bestX -1.5
+  673 set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  674 set :findBestPosition:best :updateRowPositions4x4.1:col1
   675 label *label194
   676 label *label195
   677 label *label192
   678 label *label193
   679 label *label191
   680 set :updatePosition.30:dx -0.5
-    * set :updatePosition.30:dy :updateRowPositions4x4.1:dy
+  681 set :updatePosition.30:dy -0.5
   682 set :updatePosition.30:value :updateRowPositions4x4.1:col2
-    * jump *label197 greaterThanEq :updatePosition.30:value 0.0784313725490196
-    * jump *label199 lessThanEq :updatePosition.30:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.30:dx
-    * set :findBestPosition:bestY :updatePosition.30:dy
-    * set :findBestPosition:best :updatePosition.30:value
+  683 jump *label197 greaterThanEq :updateRowPositions4x4.1:col2 0.0784313725490196
+  684 jump *label199 lessThanEq :updateRowPositions4x4.1:col2 :findBestPosition:best
+  685 set :findBestPosition:bestX -0.5
+  686 set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  687 set :findBestPosition:best :updateRowPositions4x4.1:col2
   688 label *label199
   689 label *label200
   690 label *label197
   691 label *label198
   692 label *label196
   693 set :updatePosition.31:dx 0.5
-    * set :updatePosition.31:dy :updateRowPositions4x4.1:dy
+  694 set :updatePosition.31:dy -0.5
   695 set :updatePosition.31:value :updateRowPositions4x4.1:col3
-    * jump *label202 greaterThanEq :updatePosition.31:value 0.0784313725490196
-    * jump *label204 lessThanEq :updatePosition.31:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.31:dx
-    * set :findBestPosition:bestY :updatePosition.31:dy
-    * set :findBestPosition:best :updatePosition.31:value
+  696 jump *label202 greaterThanEq :updateRowPositions4x4.1:col3 0.0784313725490196
+  697 jump *label204 lessThanEq :updateRowPositions4x4.1:col3 :findBestPosition:best
+  698 set :findBestPosition:bestX 0.5
+  699 set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  700 set :findBestPosition:best :updateRowPositions4x4.1:col3
   701 label *label204
   702 label *label205
   703 label *label202
   704 label *label203
   705 label *label201
   706 set :updatePosition.32:dx 1.5
-    * set :updatePosition.32:dy :updateRowPositions4x4.1:dy
+  707 set :updatePosition.32:dy -0.5
   708 set :updatePosition.32:value :updateRowPositions4x4.1:col4
-    * jump *label207 greaterThanEq :updatePosition.32:value 0.0784313725490196
-    * jump *label209 lessThanEq :updatePosition.32:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.32:dx
-    * set :findBestPosition:bestY :updatePosition.32:dy
-    * set :findBestPosition:best :updatePosition.32:value
+  709 jump *label207 greaterThanEq :updateRowPositions4x4.1:col4 0.0784313725490196
+  710 jump *label209 lessThanEq :updateRowPositions4x4.1:col4 :findBestPosition:best
+  711 set :findBestPosition:bestX 1.5
+  712 set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  713 set :findBestPosition:best :updateRowPositions4x4.1:col4
   714 label *label209
   715 label *label210
   716 label *label207
 
   719 label *label190
   720 set :updateRowPositions4x4.2:dy 0.5
   721 set :updateRowPositions4x4.2:rowSum :findBestPosition:row3.2
-    * unpackcolor :updateRowPositions4x4.2:col1 :updateRowPositions4x4.2:col2 :updateRowPositions4x4.2:col3 :updateRowPositions4x4.2:col4 :updateRowPositions4x4.2:rowSum
+  722 unpackcolor :updateRowPositions4x4.2:col1 :updateRowPositions4x4.2:col2 :updateRowPositions4x4.2:col3 :updateRowPositions4x4.2:col4 :findBestPosition:row3.2
   723 set :updatePosition.33:dx -1.5
-    * set :updatePosition.33:dy :updateRowPositions4x4.2:dy
+  724 set :updatePosition.33:dy 0.5
   725 set :updatePosition.33:value :updateRowPositions4x4.2:col1
-    * jump *label213 greaterThanEq :updatePosition.33:value 0.0784313725490196
-    * jump *label215 lessThanEq :updatePosition.33:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.33:dx
-    * set :findBestPosition:bestY :updatePosition.33:dy
-    * set :findBestPosition:best :updatePosition.33:value
+  726 jump *label213 greaterThanEq :updateRowPositions4x4.2:col1 0.0784313725490196
+  727 jump *label215 lessThanEq :updateRowPositions4x4.2:col1 :findBestPosition:best
+  728 set :findBestPosition:bestX -1.5
+  729 set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  730 set :findBestPosition:best :updateRowPositions4x4.2:col1
   731 label *label215
   732 label *label216
   733 label *label213
   734 label *label214
   735 label *label212
   736 set :updatePosition.34:dx -0.5
-    * set :updatePosition.34:dy :updateRowPositions4x4.2:dy
+  737 set :updatePosition.34:dy 0.5
   738 set :updatePosition.34:value :updateRowPositions4x4.2:col2
-    * jump *label218 greaterThanEq :updatePosition.34:value 0.0784313725490196
-    * jump *label220 lessThanEq :updatePosition.34:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.34:dx
-    * set :findBestPosition:bestY :updatePosition.34:dy
-    * set :findBestPosition:best :updatePosition.34:value
+  739 jump *label218 greaterThanEq :updateRowPositions4x4.2:col2 0.0784313725490196
+  740 jump *label220 lessThanEq :updateRowPositions4x4.2:col2 :findBestPosition:best
+  741 set :findBestPosition:bestX -0.5
+  742 set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  743 set :findBestPosition:best :updateRowPositions4x4.2:col2
   744 label *label220
   745 label *label221
   746 label *label218
   747 label *label219
   748 label *label217
   749 set :updatePosition.35:dx 0.5
-    * set :updatePosition.35:dy :updateRowPositions4x4.2:dy
+  750 set :updatePosition.35:dy 0.5
   751 set :updatePosition.35:value :updateRowPositions4x4.2:col3
-    * jump *label223 greaterThanEq :updatePosition.35:value 0.0784313725490196
-    * jump *label225 lessThanEq :updatePosition.35:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.35:dx
-    * set :findBestPosition:bestY :updatePosition.35:dy
-    * set :findBestPosition:best :updatePosition.35:value
+  752 jump *label223 greaterThanEq :updateRowPositions4x4.2:col3 0.0784313725490196
+  753 jump *label225 lessThanEq :updateRowPositions4x4.2:col3 :findBestPosition:best
+  754 set :findBestPosition:bestX 0.5
+  755 set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  756 set :findBestPosition:best :updateRowPositions4x4.2:col3
   757 label *label225
   758 label *label226
   759 label *label223
   760 label *label224
   761 label *label222
   762 set :updatePosition.36:dx 1.5
-    * set :updatePosition.36:dy :updateRowPositions4x4.2:dy
+  763 set :updatePosition.36:dy 0.5
   764 set :updatePosition.36:value :updateRowPositions4x4.2:col4
-    * jump *label228 greaterThanEq :updatePosition.36:value 0.0784313725490196
-    * jump *label230 lessThanEq :updatePosition.36:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.36:dx
-    * set :findBestPosition:bestY :updatePosition.36:dy
-    * set :findBestPosition:best :updatePosition.36:value
+  765 jump *label228 greaterThanEq :updateRowPositions4x4.2:col4 0.0784313725490196
+  766 jump *label230 lessThanEq :updateRowPositions4x4.2:col4 :findBestPosition:best
+  767 set :findBestPosition:bestX 1.5
+  768 set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  769 set :findBestPosition:best :updateRowPositions4x4.2:col4
   770 label *label230
   771 label *label231
   772 label *label228
 
   775 label *label211
   776 set :updateRowPositions4x4.3:dy 1.5
   777 set :updateRowPositions4x4.3:rowSum :findBestPosition:row4.1
-    * unpackcolor :updateRowPositions4x4.3:col1 :updateRowPositions4x4.3:col2 :updateRowPositions4x4.3:col3 :updateRowPositions4x4.3:col4 :updateRowPositions4x4.3:rowSum
+  778 unpackcolor :updateRowPositions4x4.3:col1 :updateRowPositions4x4.3:col2 :updateRowPositions4x4.3:col3 :updateRowPositions4x4.3:col4 :findBestPosition:row4.1
   779 set :updatePosition.37:dx -1.5
-    * set :updatePosition.37:dy :updateRowPositions4x4.3:dy
+  780 set :updatePosition.37:dy 1.5
   781 set :updatePosition.37:value :updateRowPositions4x4.3:col1
-    * jump *label234 greaterThanEq :updatePosition.37:value 0.0784313725490196
-    * jump *label236 lessThanEq :updatePosition.37:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.37:dx
-    * set :findBestPosition:bestY :updatePosition.37:dy
-    * set :findBestPosition:best :updatePosition.37:value
+  782 jump *label234 greaterThanEq :updateRowPositions4x4.3:col1 0.0784313725490196
+  783 jump *label236 lessThanEq :updateRowPositions4x4.3:col1 :findBestPosition:best
+  784 set :findBestPosition:bestX -1.5
+  785 set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  786 set :findBestPosition:best :updateRowPositions4x4.3:col1
   787 label *label236
   788 label *label237
   789 label *label234
   790 label *label235
   791 label *label233
   792 set :updatePosition.38:dx -0.5
-    * set :updatePosition.38:dy :updateRowPositions4x4.3:dy
+  793 set :updatePosition.38:dy 1.5
   794 set :updatePosition.38:value :updateRowPositions4x4.3:col2
-    * jump *label239 greaterThanEq :updatePosition.38:value 0.0784313725490196
-    * jump *label241 lessThanEq :updatePosition.38:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.38:dx
-    * set :findBestPosition:bestY :updatePosition.38:dy
-    * set :findBestPosition:best :updatePosition.38:value
+  795 jump *label239 greaterThanEq :updateRowPositions4x4.3:col2 0.0784313725490196
+  796 jump *label241 lessThanEq :updateRowPositions4x4.3:col2 :findBestPosition:best
+  797 set :findBestPosition:bestX -0.5
+  798 set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  799 set :findBestPosition:best :updateRowPositions4x4.3:col2
   800 label *label241
   801 label *label242
   802 label *label239
   803 label *label240
   804 label *label238
   805 set :updatePosition.39:dx 0.5
-    * set :updatePosition.39:dy :updateRowPositions4x4.3:dy
+  806 set :updatePosition.39:dy 1.5
   807 set :updatePosition.39:value :updateRowPositions4x4.3:col3
-    * jump *label244 greaterThanEq :updatePosition.39:value 0.0784313725490196
-    * jump *label246 lessThanEq :updatePosition.39:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.39:dx
-    * set :findBestPosition:bestY :updatePosition.39:dy
-    * set :findBestPosition:best :updatePosition.39:value
+  808 jump *label244 greaterThanEq :updateRowPositions4x4.3:col3 0.0784313725490196
+  809 jump *label246 lessThanEq :updateRowPositions4x4.3:col3 :findBestPosition:best
+  810 set :findBestPosition:bestX 0.5
+  811 set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  812 set :findBestPosition:best :updateRowPositions4x4.3:col3
   813 label *label246
   814 label *label247
   815 label *label244
   816 label *label245
   817 label *label243
   818 set :updatePosition.40:dx 1.5
-    * set :updatePosition.40:dy :updateRowPositions4x4.3:dy
+  819 set :updatePosition.40:dy 1.5
   820 set :updatePosition.40:value :updateRowPositions4x4.3:col4
-    * jump *label249 greaterThanEq :updatePosition.40:value 0.0784313725490196
-    * jump *label251 lessThanEq :updatePosition.40:value :findBestPosition:best
-    * set :findBestPosition:bestX :updatePosition.40:dx
-    * set :findBestPosition:bestY :updatePosition.40:dy
-    * set :findBestPosition:best :updatePosition.40:value
+  821 jump *label249 greaterThanEq :updateRowPositions4x4.3:col4 0.0784313725490196
+  822 jump *label251 lessThanEq :updateRowPositions4x4.3:col4 :findBestPosition:best
+  823 set :findBestPosition:bestX 1.5
+  824 set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  825 set :findBestPosition:best :updateRowPositions4x4.3:col4
   826 label *label251
   827 label *label252
   828 label *label249
 
   833 label *label32
   834 op mul :findBestPosition*retval :findBestPosition:best 255
   835 jump *label25 always
-    * set :findBestPosition*retval null
   836 label *label25
   837 set :findBestPosition*finished true
   838 jump *label4 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-151 instructions):
 
    23 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    24 sensor solid type @solid
    25 select :isSolid:result notEqual solid false 1 0
-    * set *tmp3 :isSolid:result
    26 label *label12
    27 op or :createTerrainMask:result *tmp0 :isSolid:result
    28 label *label10
 
    49 select :spotValue:result notEqual solid false 0.09803921568627451 value
    50 set *tmp6 :spotValue:result
    51 label *label14
-    * set :computeRowValues:x1 :spotValue:result
    52 op sub :spotValue.1:x :computeRowValues:x 1
    53 set :spotValue.1:y :computeRowValues:y
    54 set :spotValue.1:ore :computeRowValues:ore
 
    58 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
    59 set *tmp8 :spotValue.1:result
    60 label *label15
-    * set :computeRowValues:x2 :spotValue.1:result
    61 set :spotValue.2:x :computeRowValues:x
    62 set :spotValue.2:y :computeRowValues:y
    63 set :spotValue.2:ore :computeRowValues:ore
 
    67 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
    68 set *tmp10 :spotValue.2:result
    69 label *label16
-    * set :computeRowValues:x3 :spotValue.2:result
    70 op add :spotValue.3:x :computeRowValues:x 1
    71 set :spotValue.3:y :computeRowValues:y
    72 set :spotValue.3:ore :computeRowValues:ore
 
    76 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
    77 set *tmp12 :spotValue.3:result
    78 label *label17
-    * set :computeRowValues:x4 :spotValue.3:result
    79 op add :spotValue.4:x :computeRowValues:x 2
    80 set :spotValue.4:y :computeRowValues:y
    81 set :spotValue.4:ore :computeRowValues:ore
 
    85 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
    86 set *tmp14 :spotValue.4:result
    87 label *label18
-    * set :computeRowValues:x5 :spotValue.4:result
    88 jump *label19 notEqual :computeRowValues:size 2
-    * op add *tmp17 *tmp6 *tmp8
-    * op add *tmp18 *tmp8 *tmp10
-    * op add *tmp19 *tmp10 *tmp12
-    * op add *tmp20 *tmp12 *tmp14
+   89 op add *tmp17 :spotValue:result :spotValue.1:result
+   90 op add *tmp18 :spotValue.1:result :spotValue.2:result
+   91 op add *tmp19 :spotValue.2:result :spotValue.3:result
+   92 op add *tmp20 :spotValue.3:result :spotValue.4:result
    93 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
    94 jump *label13 always
    95 jump *label20 always
    96 label *label19
    97 jump *label21 notEqual :computeRowValues:size 3
-    * op add *tmp24 *tmp8 *tmp10
-    * op add *tmp25 *tmp6 *tmp24
-    * op add *tmp26 *tmp8 *tmp10
-    * op add *tmp27 *tmp24 *tmp12
-    * op add *tmp28 *tmp10 *tmp12
-    * op add *tmp29 *tmp28 *tmp14
+   98 op add *tmp24 :spotValue.1:result :spotValue.2:result
+   99 op add *tmp25 :spotValue:result *tmp24
+  100 op add *tmp26 :spotValue.1:result :spotValue.2:result
+  101 op add *tmp27 *tmp24 :spotValue.3:result
+  102 op add *tmp28 :spotValue.2:result :spotValue.3:result
+  103 op add *tmp29 *tmp28 :spotValue.4:result
   104 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
   105 jump *label13 always
   106 jump *label22 always
 
   114 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
   115 set *tmp32 :spotValue.5:result
   116 label *label23
-    * set :computeRowValues:x0 :spotValue.5:result
   117 op add :spotValue.6:x :computeRowValues:x 3
   118 set :spotValue.6:y :computeRowValues:y
   119 set :spotValue.6:ore :computeRowValues:ore
 
   123 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
   124 set *tmp34 :spotValue.6:result
   125 label *label24
-    * set :computeRowValues:x6 :spotValue.6:result
-    * op add *tmp35 *tmp6 *tmp8
-    * op add *tmp36 *tmp35 *tmp10
-    * op add *tmp37 *tmp32 *tmp36
+  126 op add *tmp35 :spotValue:result :spotValue.1:result
+  127 op add *tmp36 *tmp35 :spotValue.2:result
+  128 op add *tmp37 :spotValue.5:result *tmp36
   129 op min *tmp38 0.09803921568627451 *tmp37
-    * op add *tmp39 *tmp6 *tmp8
-    * op add *tmp40 *tmp35 *tmp10
-    * op add *tmp41 *tmp36 *tmp12
+  130 op add *tmp39 :spotValue:result :spotValue.1:result
+  131 op add *tmp40 *tmp35 :spotValue.2:result
+  132 op add *tmp41 *tmp36 :spotValue.3:result
   133 op min *tmp42 0.09803921568627451 *tmp41
-    * op add *tmp43 *tmp10 *tmp12
-    * op add *tmp44 *tmp43 *tmp14
-    * op add *tmp45 *tmp8 *tmp44
+  134 op add *tmp43 :spotValue.2:result :spotValue.3:result
+  135 op add *tmp44 *tmp43 :spotValue.4:result
+  136 op add *tmp45 :spotValue.1:result *tmp44
   137 op min *tmp46 0.09803921568627451 *tmp45
-    * op add *tmp47 *tmp10 *tmp12
-    * op add *tmp48 *tmp43 *tmp14
-    * op add *tmp49 *tmp44 *tmp34
+  138 op add *tmp47 :spotValue.2:result :spotValue.3:result
+  139 op add *tmp48 *tmp43 :spotValue.4:result
+  140 op add *tmp49 *tmp44 :spotValue.6:result
   141 op min *tmp50 0.09803921568627451 *tmp49
   142 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
   143 jump *label13 always
   144 label *label22
-    * set *tmp16 null
   145 label *label20
-    * set :computeRowValues*retval null
   146 label *label13
   147 return :computeRowValues*retaddr
   148 end
 
   166 call *label2 *invalid :computeRowValues*retval (m:*label27) (h:*label27)
   167 label *label27
   168 set :findBestPosition:y2 :computeRowValues*retval
-    * set *tmp56 :findBestPosition:y
   169 set :computeRowValues:x :findBestPosition:x
   170 set :computeRowValues:y :findBestPosition:y
   171 set :computeRowValues:ore :findBestPosition:ore
 
   201 op add :findBestPosition:row3 :findBestPosition:y3 :findBestPosition:y4
   202 op add :findBestPosition:row4 :findBestPosition:y4 :computeRowValues*retval
   203 set :updateRowPositions2x2:dy -1.5
-    * set :updateRowPositions2x2:rowSum :findBestPosition:row1
   204 unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2x2:col2 :updateRowPositions2x2:col3 :updateRowPositions2x2:col4 :findBestPosition:row1
-    * set :updatePosition:dx -1.5
-    * set :updatePosition:dy -1.5
-    * set :updatePosition:value :updateRowPositions2x2:col1
   205 jump *label35 greaterThanEq :updateRowPositions2x2:col1 0.0784313725490196
   206 jump *label37 lessThanEq :updateRowPositions2x2:col1 0
   207 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2:dy
+  208 set :findBestPosition:bestY -1.5
   209 set :findBestPosition:best :updateRowPositions2x2:col1
   210 label *label37
   211 label *label38
   212 label *label35
   213 label *label36
   214 label *label34
-    * set :updatePosition.1:dx -0.5
-    * set :updatePosition.1:dy -1.5
-    * set :updatePosition.1:value :updateRowPositions2x2:col2
   215 jump *label40 greaterThanEq :updateRowPositions2x2:col2 0.0784313725490196
   216 jump *label42 lessThanEq :updateRowPositions2x2:col2 :findBestPosition:best
   217 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2:dy
+  218 set :findBestPosition:bestY -1.5
   219 set :findBestPosition:best :updateRowPositions2x2:col2
   220 label *label42
   221 label *label43
   222 label *label40
   223 label *label41
   224 label *label39
-    * set :updatePosition.2:dx 0.5
-    * set :updatePosition.2:dy -1.5
-    * set :updatePosition.2:value :updateRowPositions2x2:col3
   225 jump *label45 greaterThanEq :updateRowPositions2x2:col3 0.0784313725490196
   226 jump *label47 lessThanEq :updateRowPositions2x2:col3 :findBestPosition:best
   227 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2:dy
+  228 set :findBestPosition:bestY -1.5
   229 set :findBestPosition:best :updateRowPositions2x2:col3
   230 label *label47
   231 label *label48
   232 label *label45
   233 label *label46
   234 label *label44
-    * set :updatePosition.3:dx 1.5
-    * set :updatePosition.3:dy -1.5
-    * set :updatePosition.3:value :updateRowPositions2x2:col4
   235 jump *label50 greaterThanEq :updateRowPositions2x2:col4 0.0784313725490196
   236 jump *label52 lessThanEq :updateRowPositions2x2:col4 :findBestPosition:best
   237 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2:dy
+  238 set :findBestPosition:bestY -1.5
   239 set :findBestPosition:best :updateRowPositions2x2:col4
   240 label *label52
   241 label *label53
 
   244 label *label49
   245 label *label33
   246 set :updateRowPositions2x2.1:dy -0.5
-    * set :updateRowPositions2x2.1:rowSum :findBestPosition:row2
   247 unpackcolor :updateRowPositions2x2.1:col1 :updateRowPositions2x2.1:col2 :updateRowPositions2x2.1:col3 :updateRowPositions2x2.1:col4 :findBestPosition:row2
-    * set :updatePosition.4:dx -1.5
-    * set :updatePosition.4:dy -0.5
-    * set :updatePosition.4:value :updateRowPositions2x2.1:col1
   248 jump *label56 greaterThanEq :updateRowPositions2x2.1:col1 0.0784313725490196
   249 jump *label58 lessThanEq :updateRowPositions2x2.1:col1 :findBestPosition:best
   250 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  251 set :findBestPosition:bestY -0.5
   252 set :findBestPosition:best :updateRowPositions2x2.1:col1
   253 label *label58
   254 label *label59
   255 label *label56
   256 label *label57
   257 label *label55
-    * set :updatePosition.5:dx -0.5
-    * set :updatePosition.5:dy -0.5
-    * set :updatePosition.5:value :updateRowPositions2x2.1:col2
   258 jump *label61 greaterThanEq :updateRowPositions2x2.1:col2 0.0784313725490196
   259 jump *label63 lessThanEq :updateRowPositions2x2.1:col2 :findBestPosition:best
   260 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  261 set :findBestPosition:bestY -0.5
   262 set :findBestPosition:best :updateRowPositions2x2.1:col2
   263 label *label63
   264 label *label64
   265 label *label61
   266 label *label62
   267 label *label60
-    * set :updatePosition.6:dx 0.5
-    * set :updatePosition.6:dy -0.5
-    * set :updatePosition.6:value :updateRowPositions2x2.1:col3
   268 jump *label66 greaterThanEq :updateRowPositions2x2.1:col3 0.0784313725490196
   269 jump *label68 lessThanEq :updateRowPositions2x2.1:col3 :findBestPosition:best
   270 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  271 set :findBestPosition:bestY -0.5
   272 set :findBestPosition:best :updateRowPositions2x2.1:col3
   273 label *label68
   274 label *label69
   275 label *label66
   276 label *label67
   277 label *label65
-    * set :updatePosition.7:dx 1.5
-    * set :updatePosition.7:dy -0.5
-    * set :updatePosition.7:value :updateRowPositions2x2.1:col4
   278 jump *label71 greaterThanEq :updateRowPositions2x2.1:col4 0.0784313725490196
   279 jump *label73 lessThanEq :updateRowPositions2x2.1:col4 :findBestPosition:best
   280 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.1:dy
+  281 set :findBestPosition:bestY -0.5
   282 set :findBestPosition:best :updateRowPositions2x2.1:col4
   283 label *label73
   284 label *label74
 
   287 label *label70
   288 label *label54
   289 set :updateRowPositions2x2.2:dy 0.5
-    * set :updateRowPositions2x2.2:rowSum :findBestPosition:row3
   290 unpackcolor :updateRowPositions2x2.2:col1 :updateRowPositions2x2.2:col2 :updateRowPositions2x2.2:col3 :updateRowPositions2x2.2:col4 :findBestPosition:row3
-    * set :updatePosition.8:dx -1.5
-    * set :updatePosition.8:dy 0.5
-    * set :updatePosition.8:value :updateRowPositions2x2.2:col1
   291 jump *label77 greaterThanEq :updateRowPositions2x2.2:col1 0.0784313725490196
   292 jump *label79 lessThanEq :updateRowPositions2x2.2:col1 :findBestPosition:best
   293 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  294 set :findBestPosition:bestY 0.5
   295 set :findBestPosition:best :updateRowPositions2x2.2:col1
   296 label *label79
   297 label *label80
   298 label *label77
   299 label *label78
   300 label *label76
-    * set :updatePosition.9:dx -0.5
-    * set :updatePosition.9:dy 0.5
-    * set :updatePosition.9:value :updateRowPositions2x2.2:col2
   301 jump *label82 greaterThanEq :updateRowPositions2x2.2:col2 0.0784313725490196
   302 jump *label84 lessThanEq :updateRowPositions2x2.2:col2 :findBestPosition:best
   303 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  304 set :findBestPosition:bestY 0.5
   305 set :findBestPosition:best :updateRowPositions2x2.2:col2
   306 label *label84
   307 label *label85
   308 label *label82
   309 label *label83
   310 label *label81
-    * set :updatePosition.10:dx 0.5
-    * set :updatePosition.10:dy 0.5
-    * set :updatePosition.10:value :updateRowPositions2x2.2:col3
   311 jump *label87 greaterThanEq :updateRowPositions2x2.2:col3 0.0784313725490196
   312 jump *label89 lessThanEq :updateRowPositions2x2.2:col3 :findBestPosition:best
   313 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  314 set :findBestPosition:bestY 0.5
   315 set :findBestPosition:best :updateRowPositions2x2.2:col3
   316 label *label89
   317 label *label90
   318 label *label87
   319 label *label88
   320 label *label86
-    * set :updatePosition.11:dx 1.5
-    * set :updatePosition.11:dy 0.5
-    * set :updatePosition.11:value :updateRowPositions2x2.2:col4
   321 jump *label92 greaterThanEq :updateRowPositions2x2.2:col4 0.0784313725490196
   322 jump *label94 lessThanEq :updateRowPositions2x2.2:col4 :findBestPosition:best
   323 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.2:dy
+  324 set :findBestPosition:bestY 0.5
   325 set :findBestPosition:best :updateRowPositions2x2.2:col4
   326 label *label94
   327 label *label95
 
   330 label *label91
   331 label *label75
   332 set :updateRowPositions2x2.3:dy 1.5
-    * set :updateRowPositions2x2.3:rowSum :findBestPosition:row4
   333 unpackcolor :updateRowPositions2x2.3:col1 :updateRowPositions2x2.3:col2 :updateRowPositions2x2.3:col3 :updateRowPositions2x2.3:col4 :findBestPosition:row4
-    * set :updatePosition.12:dx -1.5
-    * set :updatePosition.12:dy 1.5
-    * set :updatePosition.12:value :updateRowPositions2x2.3:col1
   334 jump *label98 greaterThanEq :updateRowPositions2x2.3:col1 0.0784313725490196
   335 jump *label100 lessThanEq :updateRowPositions2x2.3:col1 :findBestPosition:best
   336 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  337 set :findBestPosition:bestY 1.5
   338 set :findBestPosition:best :updateRowPositions2x2.3:col1
   339 label *label100
   340 label *label101
   341 label *label98
   342 label *label99
   343 label *label97
-    * set :updatePosition.13:dx -0.5
-    * set :updatePosition.13:dy 1.5
-    * set :updatePosition.13:value :updateRowPositions2x2.3:col2
   344 jump *label103 greaterThanEq :updateRowPositions2x2.3:col2 0.0784313725490196
   345 jump *label105 lessThanEq :updateRowPositions2x2.3:col2 :findBestPosition:best
   346 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  347 set :findBestPosition:bestY 1.5
   348 set :findBestPosition:best :updateRowPositions2x2.3:col2
   349 label *label105
   350 label *label106
   351 label *label103
   352 label *label104
   353 label *label102
-    * set :updatePosition.14:dx 0.5
-    * set :updatePosition.14:dy 1.5
-    * set :updatePosition.14:value :updateRowPositions2x2.3:col3
   354 jump *label108 greaterThanEq :updateRowPositions2x2.3:col3 0.0784313725490196
   355 jump *label110 lessThanEq :updateRowPositions2x2.3:col3 :findBestPosition:best
   356 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  357 set :findBestPosition:bestY 1.5
   358 set :findBestPosition:best :updateRowPositions2x2.3:col3
   359 label *label110
   360 label *label111
   361 label *label108
   362 label *label109
   363 label *label107
-    * set :updatePosition.15:dx 1.5
-    * set :updatePosition.15:dy 1.5
-    * set :updatePosition.15:value :updateRowPositions2x2.3:col4
   364 jump *label113 greaterThanEq :updateRowPositions2x2.3:col4 0.0784313725490196
   365 jump *label115 lessThanEq :updateRowPositions2x2.3:col4 :findBestPosition:best
   366 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions2x2.3:dy
+  367 set :findBestPosition:bestY 1.5
   368 set :findBestPosition:best :updateRowPositions2x2.3:col4
   369 label *label115
   370 label *label116
 
   377 jump *label117 notEqual :findBestPosition:size 3
   378 op add *tmp134 :findBestPosition:y2 :findBestPosition:y3
   379 op add :findBestPosition:row1.1 :findBestPosition:y1 *tmp134
-    * op add *tmp136 :findBestPosition:y2 :findBestPosition:y3
   380 op add :findBestPosition:row2.1 *tmp134 :findBestPosition:y4
   381 op add *tmp138 :findBestPosition:y3 :findBestPosition:y4
   382 op add :findBestPosition:row3.1 *tmp138 :computeRowValues*retval
   383 set :updateRowPositions3x3:dy -1
-    * set :updateRowPositions3x3:rowSum :findBestPosition:row1.1
   384 unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 0 :findBestPosition:row1.1
-    * set :updatePosition.16:dx -1
-    * set :updatePosition.16:dy -1
-    * set :updatePosition.16:value :updateRowPositions3x3:col1
   385 jump *label121 greaterThanEq :updateRowPositions3x3:col1 0.0784313725490196
   386 jump *label123 lessThanEq :updateRowPositions3x3:col1 0
   387 set :findBestPosition:bestX -1
-    * set :findBestPosition:bestY :updateRowPositions3x3:dy
+  388 set :findBestPosition:bestY -1
   389 set :findBestPosition:best :updateRowPositions3x3:col1
   390 label *label123
   391 label *label124
   392 label *label121
   393 label *label122
   394 label *label120
-    * set :updatePosition.17:dx 0
-    * set :updatePosition.17:dy -1
-    * set :updatePosition.17:value :updateRowPositions3x3:col2
   395 jump *label126 greaterThanEq :updateRowPositions3x3:col2 0.0784313725490196
   396 jump *label128 lessThanEq :updateRowPositions3x3:col2 :findBestPosition:best
   397 set :findBestPosition:bestX 0
-    * set :findBestPosition:bestY :updateRowPositions3x3:dy
+  398 set :findBestPosition:bestY -1
   399 set :findBestPosition:best :updateRowPositions3x3:col2
   400 label *label128
   401 label *label129
   402 label *label126
   403 label *label127
   404 label *label125
-    * set :updatePosition.18:dx 1
-    * set :updatePosition.18:dy -1
-    * set :updatePosition.18:value :updateRowPositions3x3:col3
   405 jump *label131 greaterThanEq :updateRowPositions3x3:col3 0.0784313725490196
   406 jump *label133 lessThanEq :updateRowPositions3x3:col3 :findBestPosition:best
   407 set :findBestPosition:bestX 1
-    * set :findBestPosition:bestY :updateRowPositions3x3:dy
+  408 set :findBestPosition:bestY -1
   409 set :findBestPosition:best :updateRowPositions3x3:col3
   410 label *label133
   411 label *label134
 
   414 label *label130
   415 label *label119
   416 set :updateRowPositions3x3.1:dy 0
-    * set :updateRowPositions3x3.1:rowSum :findBestPosition:row2.1
   417 unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :findBestPosition:row2.1
-    * set :updatePosition.19:dx -1
-    * set :updatePosition.19:dy 0
-    * set :updatePosition.19:value :updateRowPositions3x3.1:col1
   418 jump *label137 greaterThanEq :updateRowPositions3x3.1:col1 0.0784313725490196
   419 jump *label139 lessThanEq :updateRowPositions3x3.1:col1 :findBestPosition:best
   420 set :findBestPosition:bestX -1
-    * set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  421 set :findBestPosition:bestY 0
   422 set :findBestPosition:best :updateRowPositions3x3.1:col1
   423 label *label139
   424 label *label140
   425 label *label137
   426 label *label138
   427 label *label136
-    * set :updatePosition.20:dx 0
-    * set :updatePosition.20:dy 0
-    * set :updatePosition.20:value :updateRowPositions3x3.1:col2
   428 jump *label142 greaterThanEq :updateRowPositions3x3.1:col2 0.0784313725490196
   429 jump *label144 lessThanEq :updateRowPositions3x3.1:col2 :findBestPosition:best
   430 set :findBestPosition:bestX 0
-    * set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  431 set :findBestPosition:bestY 0
   432 set :findBestPosition:best :updateRowPositions3x3.1:col2
   433 label *label144
   434 label *label145
   435 label *label142
   436 label *label143
   437 label *label141
-    * set :updatePosition.21:dx 1
-    * set :updatePosition.21:dy 0
-    * set :updatePosition.21:value :updateRowPositions3x3.1:col3
   438 jump *label147 greaterThanEq :updateRowPositions3x3.1:col3 0.0784313725490196
   439 jump *label149 lessThanEq :updateRowPositions3x3.1:col3 :findBestPosition:best
   440 set :findBestPosition:bestX 1
-    * set :findBestPosition:bestY :updateRowPositions3x3.1:dy
+  441 set :findBestPosition:bestY 0
   442 set :findBestPosition:best :updateRowPositions3x3.1:col3
   443 label *label149
   444 label *label150
 
   447 label *label146
   448 label *label135
   449 set :updateRowPositions3x3.2:dy 1
-    * set :updateRowPositions3x3.2:rowSum :findBestPosition:row3.1
   450 unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :findBestPosition:row3.1
-    * set :updatePosition.22:dx -1
-    * set :updatePosition.22:dy 1
-    * set :updatePosition.22:value :updateRowPositions3x3.2:col1
   451 jump *label153 greaterThanEq :updateRowPositions3x3.2:col1 0.0784313725490196
   452 jump *label155 lessThanEq :updateRowPositions3x3.2:col1 :findBestPosition:best
   453 set :findBestPosition:bestX -1
-    * set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  454 set :findBestPosition:bestY 1
   455 set :findBestPosition:best :updateRowPositions3x3.2:col1
   456 label *label155
   457 label *label156
   458 label *label153
   459 label *label154
   460 label *label152
-    * set :updatePosition.23:dx 0
-    * set :updatePosition.23:dy 1
-    * set :updatePosition.23:value :updateRowPositions3x3.2:col2
   461 jump *label158 greaterThanEq :updateRowPositions3x3.2:col2 0.0784313725490196
   462 jump *label160 lessThanEq :updateRowPositions3x3.2:col2 :findBestPosition:best
   463 set :findBestPosition:bestX 0
-    * set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  464 set :findBestPosition:bestY 1
   465 set :findBestPosition:best :updateRowPositions3x3.2:col2
   466 label *label160
   467 label *label161
   468 label *label158
   469 label *label159
   470 label *label157
-    * set :updatePosition.24:dx 1
-    * set :updatePosition.24:dy 1
-    * set :updatePosition.24:value :updateRowPositions3x3.2:col3
   471 jump *label163 greaterThanEq :updateRowPositions3x3.2:col3 0.0784313725490196
   472 jump *label165 lessThanEq :updateRowPositions3x3.2:col3 :findBestPosition:best
   473 set :findBestPosition:bestX 1
-    * set :findBestPosition:bestY :updateRowPositions3x3.2:dy
+  474 set :findBestPosition:bestY 1
   475 set :findBestPosition:best :updateRowPositions3x3.2:col3
   476 label *label165
   477 label *label166
 
   498 setaddr :computeRowValues*retaddr *label168 (h:*label168)
   499 call *label2 *invalid :computeRowValues*retval (m:*label168) (h:*label168)
   500 label *label168
-    * set :findBestPosition:y6 :computeRowValues*retval
   501 op add *tmp183 :findBestPosition:y1 :findBestPosition:y2
   502 op add *tmp184 *tmp183 :findBestPosition:y3
   503 op add :findBestPosition:row1.2 :findBestPosition:y0 *tmp184
-    * op add *tmp186 :findBestPosition:y1 :findBestPosition:y2
-    * op add *tmp187 *tmp183 :findBestPosition:y3
   504 op add :findBestPosition:row2.2 *tmp184 :findBestPosition:y4
   505 op add *tmp189 :findBestPosition:y3 :findBestPosition:y4
   506 op add *tmp190 *tmp189 :findBestPosition:y5
   507 op add :findBestPosition:row3.2 :findBestPosition:y2 *tmp190
-    * op add *tmp192 :findBestPosition:y3 :findBestPosition:y4
-    * op add *tmp193 *tmp189 :findBestPosition:y5
   508 op add :findBestPosition:row4.1 *tmp190 :computeRowValues*retval
   509 set :updateRowPositions4x4:dy -1.5
-    * set :updateRowPositions4x4:rowSum :findBestPosition:row1.2
   510 unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4x4:col2 :updateRowPositions4x4:col3 :updateRowPositions4x4:col4 :findBestPosition:row1.2
-    * set :updatePosition.25:dx -1.5
-    * set :updatePosition.25:dy -1.5
-    * set :updatePosition.25:value :updateRowPositions4x4:col1
   511 jump *label171 greaterThanEq :updateRowPositions4x4:col1 0.0784313725490196
   512 jump *label173 lessThanEq :updateRowPositions4x4:col1 :findBestPosition:best
   513 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4:dy
+  514 set :findBestPosition:bestY -1.5
   515 set :findBestPosition:best :updateRowPositions4x4:col1
   516 label *label173
   517 label *label174
   518 label *label171
   519 label *label172
   520 label *label170
-    * set :updatePosition.26:dx -0.5
-    * set :updatePosition.26:dy -1.5
-    * set :updatePosition.26:value :updateRowPositions4x4:col2
   521 jump *label176 greaterThanEq :updateRowPositions4x4:col2 0.0784313725490196
   522 jump *label178 lessThanEq :updateRowPositions4x4:col2 :findBestPosition:best
   523 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4:dy
+  524 set :findBestPosition:bestY -1.5
   525 set :findBestPosition:best :updateRowPositions4x4:col2
   526 label *label178
   527 label *label179
   528 label *label176
   529 label *label177
   530 label *label175
-    * set :updatePosition.27:dx 0.5
-    * set :updatePosition.27:dy -1.5
-    * set :updatePosition.27:value :updateRowPositions4x4:col3
   531 jump *label181 greaterThanEq :updateRowPositions4x4:col3 0.0784313725490196
   532 jump *label183 lessThanEq :updateRowPositions4x4:col3 :findBestPosition:best
   533 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4:dy
+  534 set :findBestPosition:bestY -1.5
   535 set :findBestPosition:best :updateRowPositions4x4:col3
   536 label *label183
   537 label *label184
   538 label *label181
   539 label *label182
   540 label *label180
-    * set :updatePosition.28:dx 1.5
-    * set :updatePosition.28:dy -1.5
-    * set :updatePosition.28:value :updateRowPositions4x4:col4
   541 jump *label186 greaterThanEq :updateRowPositions4x4:col4 0.0784313725490196
   542 jump *label188 lessThanEq :updateRowPositions4x4:col4 :findBestPosition:best
   543 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4:dy
+  544 set :findBestPosition:bestY -1.5
   545 set :findBestPosition:best :updateRowPositions4x4:col4
   546 label *label188
   547 label *label189
 
   550 label *label185
   551 label *label169
   552 set :updateRowPositions4x4.1:dy -0.5
-    * set :updateRowPositions4x4.1:rowSum :findBestPosition:row2.2
   553 unpackcolor :updateRowPositions4x4.1:col1 :updateRowPositions4x4.1:col2 :updateRowPositions4x4.1:col3 :updateRowPositions4x4.1:col4 :findBestPosition:row2.2
-    * set :updatePosition.29:dx -1.5
-    * set :updatePosition.29:dy -0.5
-    * set :updatePosition.29:value :updateRowPositions4x4.1:col1
   554 jump *label192 greaterThanEq :updateRowPositions4x4.1:col1 0.0784313725490196
   555 jump *label194 lessThanEq :updateRowPositions4x4.1:col1 :findBestPosition:best
   556 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  557 set :findBestPosition:bestY -0.5
   558 set :findBestPosition:best :updateRowPositions4x4.1:col1
   559 label *label194
   560 label *label195
   561 label *label192
   562 label *label193
   563 label *label191
-    * set :updatePosition.30:dx -0.5
-    * set :updatePosition.30:dy -0.5
-    * set :updatePosition.30:value :updateRowPositions4x4.1:col2
   564 jump *label197 greaterThanEq :updateRowPositions4x4.1:col2 0.0784313725490196
   565 jump *label199 lessThanEq :updateRowPositions4x4.1:col2 :findBestPosition:best
   566 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  567 set :findBestPosition:bestY -0.5
   568 set :findBestPosition:best :updateRowPositions4x4.1:col2
   569 label *label199
   570 label *label200
   571 label *label197
   572 label *label198
   573 label *label196
-    * set :updatePosition.31:dx 0.5
-    * set :updatePosition.31:dy -0.5
-    * set :updatePosition.31:value :updateRowPositions4x4.1:col3
   574 jump *label202 greaterThanEq :updateRowPositions4x4.1:col3 0.0784313725490196
   575 jump *label204 lessThanEq :updateRowPositions4x4.1:col3 :findBestPosition:best
   576 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  577 set :findBestPosition:bestY -0.5
   578 set :findBestPosition:best :updateRowPositions4x4.1:col3
   579 label *label204
   580 label *label205
   581 label *label202
   582 label *label203
   583 label *label201
-    * set :updatePosition.32:dx 1.5
-    * set :updatePosition.32:dy -0.5
-    * set :updatePosition.32:value :updateRowPositions4x4.1:col4
   584 jump *label207 greaterThanEq :updateRowPositions4x4.1:col4 0.0784313725490196
   585 jump *label209 lessThanEq :updateRowPositions4x4.1:col4 :findBestPosition:best
   586 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.1:dy
+  587 set :findBestPosition:bestY -0.5
   588 set :findBestPosition:best :updateRowPositions4x4.1:col4
   589 label *label209
   590 label *label210
 
   593 label *label206
   594 label *label190
   595 set :updateRowPositions4x4.2:dy 0.5
-    * set :updateRowPositions4x4.2:rowSum :findBestPosition:row3.2
   596 unpackcolor :updateRowPositions4x4.2:col1 :updateRowPositions4x4.2:col2 :updateRowPositions4x4.2:col3 :updateRowPositions4x4.2:col4 :findBestPosition:row3.2
-    * set :updatePosition.33:dx -1.5
-    * set :updatePosition.33:dy 0.5
-    * set :updatePosition.33:value :updateRowPositions4x4.2:col1
   597 jump *label213 greaterThanEq :updateRowPositions4x4.2:col1 0.0784313725490196
   598 jump *label215 lessThanEq :updateRowPositions4x4.2:col1 :findBestPosition:best
   599 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  600 set :findBestPosition:bestY 0.5
   601 set :findBestPosition:best :updateRowPositions4x4.2:col1
   602 label *label215
   603 label *label216
   604 label *label213
   605 label *label214
   606 label *label212
-    * set :updatePosition.34:dx -0.5
-    * set :updatePosition.34:dy 0.5
-    * set :updatePosition.34:value :updateRowPositions4x4.2:col2
   607 jump *label218 greaterThanEq :updateRowPositions4x4.2:col2 0.0784313725490196
   608 jump *label220 lessThanEq :updateRowPositions4x4.2:col2 :findBestPosition:best
   609 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  610 set :findBestPosition:bestY 0.5
   611 set :findBestPosition:best :updateRowPositions4x4.2:col2
   612 label *label220
   613 label *label221
   614 label *label218
   615 label *label219
   616 label *label217
-    * set :updatePosition.35:dx 0.5
-    * set :updatePosition.35:dy 0.5
-    * set :updatePosition.35:value :updateRowPositions4x4.2:col3
   617 jump *label223 greaterThanEq :updateRowPositions4x4.2:col3 0.0784313725490196
   618 jump *label225 lessThanEq :updateRowPositions4x4.2:col3 :findBestPosition:best
   619 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  620 set :findBestPosition:bestY 0.5
   621 set :findBestPosition:best :updateRowPositions4x4.2:col3
   622 label *label225
   623 label *label226
   624 label *label223
   625 label *label224
   626 label *label222
-    * set :updatePosition.36:dx 1.5
-    * set :updatePosition.36:dy 0.5
-    * set :updatePosition.36:value :updateRowPositions4x4.2:col4
   627 jump *label228 greaterThanEq :updateRowPositions4x4.2:col4 0.0784313725490196
   628 jump *label230 lessThanEq :updateRowPositions4x4.2:col4 :findBestPosition:best
   629 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.2:dy
+  630 set :findBestPosition:bestY 0.5
   631 set :findBestPosition:best :updateRowPositions4x4.2:col4
   632 label *label230
   633 label *label231
 
   636 label *label227
   637 label *label211
   638 set :updateRowPositions4x4.3:dy 1.5
-    * set :updateRowPositions4x4.3:rowSum :findBestPosition:row4.1
   639 unpackcolor :updateRowPositions4x4.3:col1 :updateRowPositions4x4.3:col2 :updateRowPositions4x4.3:col3 :updateRowPositions4x4.3:col4 :findBestPosition:row4.1
-    * set :updatePosition.37:dx -1.5
-    * set :updatePosition.37:dy 1.5
-    * set :updatePosition.37:value :updateRowPositions4x4.3:col1
   640 jump *label234 greaterThanEq :updateRowPositions4x4.3:col1 0.0784313725490196
   641 jump *label236 lessThanEq :updateRowPositions4x4.3:col1 :findBestPosition:best
   642 set :findBestPosition:bestX -1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  643 set :findBestPosition:bestY 1.5
   644 set :findBestPosition:best :updateRowPositions4x4.3:col1
   645 label *label236
   646 label *label237
   647 label *label234
   648 label *label235
   649 label *label233
-    * set :updatePosition.38:dx -0.5
-    * set :updatePosition.38:dy 1.5
-    * set :updatePosition.38:value :updateRowPositions4x4.3:col2
   650 jump *label239 greaterThanEq :updateRowPositions4x4.3:col2 0.0784313725490196
   651 jump *label241 lessThanEq :updateRowPositions4x4.3:col2 :findBestPosition:best
   652 set :findBestPosition:bestX -0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  653 set :findBestPosition:bestY 1.5
   654 set :findBestPosition:best :updateRowPositions4x4.3:col2
   655 label *label241
   656 label *label242
   657 label *label239
   658 label *label240
   659 label *label238
-    * set :updatePosition.39:dx 0.5
-    * set :updatePosition.39:dy 1.5
-    * set :updatePosition.39:value :updateRowPositions4x4.3:col3
   660 jump *label244 greaterThanEq :updateRowPositions4x4.3:col3 0.0784313725490196
   661 jump *label246 lessThanEq :updateRowPositions4x4.3:col3 :findBestPosition:best
   662 set :findBestPosition:bestX 0.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  663 set :findBestPosition:bestY 1.5
   664 set :findBestPosition:best :updateRowPositions4x4.3:col3
   665 label *label246
   666 label *label247
   667 label *label244
   668 label *label245
   669 label *label243
-    * set :updatePosition.40:dx 1.5
-    * set :updatePosition.40:dy 1.5
-    * set :updatePosition.40:value :updateRowPositions4x4.3:col4
   670 jump *label249 greaterThanEq :updateRowPositions4x4.3:col4 0.0784313725490196
   671 jump *label251 lessThanEq :updateRowPositions4x4.3:col4 :findBestPosition:best
   672 set :findBestPosition:bestX 1.5
-    * set :findBestPosition:bestY :updateRowPositions4x4.3:dy
+  673 set :findBestPosition:bestY 1.5
   674 set :findBestPosition:best :updateRowPositions4x4.3:col4
   675 label *label251
   676 label *label252

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-23 instructions):
 
    47 select value equal floor :spotValue:ore 0.00392156862745098 0
    48 sensor solid type @solid
    49 select :spotValue:result notEqual solid false 0.09803921568627451 value
-    * set *tmp6 :spotValue:result
    50 label *label14
    51 op sub :spotValue.1:x :computeRowValues:x 1
    52 set :spotValue.1:y :computeRowValues:y
 
    55 select value equal floor :spotValue.1:ore 0.00392156862745098 0
    56 sensor solid type @solid
    57 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
-    * set *tmp8 :spotValue.1:result
    58 label *label15
    59 set :spotValue.2:x :computeRowValues:x
    60 set :spotValue.2:y :computeRowValues:y
 
    63 select value equal floor :spotValue.2:ore 0.00392156862745098 0
    64 sensor solid type @solid
    65 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
-    * set *tmp10 :spotValue.2:result
    66 label *label16
    67 op add :spotValue.3:x :computeRowValues:x 1
    68 set :spotValue.3:y :computeRowValues:y
 
    71 select value equal floor :spotValue.3:ore 0.00392156862745098 0
    72 sensor solid type @solid
    73 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
-    * set *tmp12 :spotValue.3:result
    74 label *label17
    75 op add :spotValue.4:x :computeRowValues:x 2
    76 set :spotValue.4:y :computeRowValues:y
 
    79 select value equal floor :spotValue.4:ore 0.00392156862745098 0
    80 sensor solid type @solid
    81 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
-    * set *tmp14 :spotValue.4:result
    82 label *label18
    83 jump *label19 notEqual :computeRowValues:size 2
    84 op add *tmp17 :spotValue:result :spotValue.1:result
 
    92 jump *label21 notEqual :computeRowValues:size 3
    93 op add *tmp24 :spotValue.1:result :spotValue.2:result
    94 op add *tmp25 :spotValue:result *tmp24
-    * op add *tmp26 :spotValue.1:result :spotValue.2:result
    95 op add *tmp27 *tmp24 :spotValue.3:result
    96 op add *tmp28 :spotValue.2:result :spotValue.3:result
    97 op add *tmp29 *tmp28 :spotValue.4:result
 
   106 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   107 sensor solid type @solid
   108 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
-    * set *tmp32 :spotValue.5:result
   109 label *label23
   110 op add :spotValue.6:x :computeRowValues:x 3
   111 set :spotValue.6:y :computeRowValues:y
 
   114 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   115 sensor solid type @solid
   116 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
-    * set *tmp34 :spotValue.6:result
   117 label *label24
   118 op add *tmp35 :spotValue:result :spotValue.1:result
   119 op add *tmp36 *tmp35 :spotValue.2:result
   120 op add *tmp37 :spotValue.5:result *tmp36
   121 op min *tmp38 0.09803921568627451 *tmp37
-    * op add *tmp39 :spotValue:result :spotValue.1:result
-    * op add *tmp40 *tmp35 :spotValue.2:result
   122 op add *tmp41 *tmp36 :spotValue.3:result
   123 op min *tmp42 0.09803921568627451 *tmp41
   124 op add *tmp43 :spotValue.2:result :spotValue.3:result
   125 op add *tmp44 *tmp43 :spotValue.4:result
   126 op add *tmp45 :spotValue.1:result *tmp44
   127 op min *tmp46 0.09803921568627451 *tmp45
-    * op add *tmp47 :spotValue.2:result :spotValue.3:result
-    * op add *tmp48 *tmp43 :spotValue.4:result
   128 op add *tmp49 *tmp44 :spotValue.6:result
   129 op min *tmp50 0.09803921568627451 *tmp49
   130 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
 
   188 op add :findBestPosition:row2 :findBestPosition:y2 :findBestPosition:y3
   189 op add :findBestPosition:row3 :findBestPosition:y3 :findBestPosition:y4
   190 op add :findBestPosition:row4 :findBestPosition:y4 :computeRowValues*retval
-    * set :updateRowPositions2x2:dy -1.5
   191 unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2x2:col2 :updateRowPositions2x2:col3 :updateRowPositions2x2:col4 :findBestPosition:row1
   192 jump *label35 greaterThanEq :updateRowPositions2x2:col1 0.0784313725490196
   193 jump *label37 lessThanEq :updateRowPositions2x2:col1 0
 
   230 label *label51
   231 label *label49
   232 label *label33
-    * set :updateRowPositions2x2.1:dy -0.5
   233 unpackcolor :updateRowPositions2x2.1:col1 :updateRowPositions2x2.1:col2 :updateRowPositions2x2.1:col3 :updateRowPositions2x2.1:col4 :findBestPosition:row2
   234 jump *label56 greaterThanEq :updateRowPositions2x2.1:col1 0.0784313725490196
   235 jump *label58 lessThanEq :updateRowPositions2x2.1:col1 :findBestPosition:best
 
   272 label *label72
   273 label *label70
   274 label *label54
-    * set :updateRowPositions2x2.2:dy 0.5
   275 unpackcolor :updateRowPositions2x2.2:col1 :updateRowPositions2x2.2:col2 :updateRowPositions2x2.2:col3 :updateRowPositions2x2.2:col4 :findBestPosition:row3
   276 jump *label77 greaterThanEq :updateRowPositions2x2.2:col1 0.0784313725490196
   277 jump *label79 lessThanEq :updateRowPositions2x2.2:col1 :findBestPosition:best
 
   314 label *label93
   315 label *label91
   316 label *label75
-    * set :updateRowPositions2x2.3:dy 1.5
   317 unpackcolor :updateRowPositions2x2.3:col1 :updateRowPositions2x2.3:col2 :updateRowPositions2x2.3:col3 :updateRowPositions2x2.3:col4 :findBestPosition:row4
   318 jump *label98 greaterThanEq :updateRowPositions2x2.3:col1 0.0784313725490196
   319 jump *label100 lessThanEq :updateRowPositions2x2.3:col1 :findBestPosition:best
 
   364 op add :findBestPosition:row2.1 *tmp134 :findBestPosition:y4
   365 op add *tmp138 :findBestPosition:y3 :findBestPosition:y4
   366 op add :findBestPosition:row3.1 *tmp138 :computeRowValues*retval
-    * set :updateRowPositions3x3:dy -1
   367 unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3x3:col2 :updateRowPositions3x3:col3 0 :findBestPosition:row1.1
   368 jump *label121 greaterThanEq :updateRowPositions3x3:col1 0.0784313725490196
   369 jump *label123 lessThanEq :updateRowPositions3x3:col1 0
 
   396 label *label132
   397 label *label130
   398 label *label119
-    * set :updateRowPositions3x3.1:dy 0
   399 unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :findBestPosition:row2.1
   400 jump *label137 greaterThanEq :updateRowPositions3x3.1:col1 0.0784313725490196
   401 jump *label139 lessThanEq :updateRowPositions3x3.1:col1 :findBestPosition:best
 
   428 label *label148
   429 label *label146
   430 label *label135
-    * set :updateRowPositions3x3.2:dy 1
   431 unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :findBestPosition:row3.1
   432 jump *label153 greaterThanEq :updateRowPositions3x3.2:col1 0.0784313725490196
   433 jump *label155 lessThanEq :updateRowPositions3x3.2:col1 :findBestPosition:best
 
   487 op add *tmp190 *tmp189 :findBestPosition:y5
   488 op add :findBestPosition:row3.2 :findBestPosition:y2 *tmp190
   489 op add :findBestPosition:row4.1 *tmp190 :computeRowValues*retval
-    * set :updateRowPositions4x4:dy -1.5
   490 unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4x4:col2 :updateRowPositions4x4:col3 :updateRowPositions4x4:col4 :findBestPosition:row1.2
   491 jump *label171 greaterThanEq :updateRowPositions4x4:col1 0.0784313725490196
   492 jump *label173 lessThanEq :updateRowPositions4x4:col1 :findBestPosition:best
 
   529 label *label187
   530 label *label185
   531 label *label169
-    * set :updateRowPositions4x4.1:dy -0.5
   532 unpackcolor :updateRowPositions4x4.1:col1 :updateRowPositions4x4.1:col2 :updateRowPositions4x4.1:col3 :updateRowPositions4x4.1:col4 :findBestPosition:row2.2
   533 jump *label192 greaterThanEq :updateRowPositions4x4.1:col1 0.0784313725490196
   534 jump *label194 lessThanEq :updateRowPositions4x4.1:col1 :findBestPosition:best
 
   571 label *label208
   572 label *label206
   573 label *label190
-    * set :updateRowPositions4x4.2:dy 0.5
   574 unpackcolor :updateRowPositions4x4.2:col1 :updateRowPositions4x4.2:col2 :updateRowPositions4x4.2:col3 :updateRowPositions4x4.2:col4 :findBestPosition:row3.2
   575 jump *label213 greaterThanEq :updateRowPositions4x4.2:col1 0.0784313725490196
   576 jump *label215 lessThanEq :updateRowPositions4x4.2:col1 :findBestPosition:best
 
   613 label *label229
   614 label *label227
   615 label *label211
-    * set :updateRowPositions4x4.3:dy 1.5
   616 unpackcolor :updateRowPositions4x4.3:col1 :updateRowPositions4x4.3:col2 :updateRowPositions4x4.3:col3 :updateRowPositions4x4.3:col4 :findBestPosition:row4.1
   617 jump *label234 greaterThanEq :updateRowPositions4x4.3:col1 0.0784313725490196
   618 jump *label236 lessThanEq :updateRowPositions4x4.3:col1 :findBestPosition:best

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    13 label *label6
    14 jump *label8 lessThan :createTerrainMask:r -3
    15 set :createTerrainMask:c 3
+   16 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
    17 label *label9
    18 jump *label11 lessThan :createTerrainMask:c -3
    19 op shl *tmp0 :createTerrainMask:result 1
    20 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
    21 set :isSolid:x *tmp1
    22 set :isSolid:y *tmp2
    23 ucontrol getBlock :isSolid:x :isSolid:y type building floor

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
    11 set :createTerrainMask:result 0
    12 set :createTerrainMask:r 3
    13 label *label6
-    * jump *label8 lessThan :createTerrainMask:r -3
+   14 label *label253
    15 set :createTerrainMask:c 3
    16 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
    17 label *label9
-    * jump *label11 lessThan :createTerrainMask:c -3
+   18 label *label254
    19 op shl *tmp0 :createTerrainMask:result 1
    20 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
    21 set :isSolid:x *tmp1
 
    27 op or :createTerrainMask:result *tmp0 :isSolid:result
    28 label *label10
    29 op sub :createTerrainMask:c :createTerrainMask:c 1
-    * jump *label9 always
+   30 jump *label254 greaterThanEq :createTerrainMask:c -3
    31 label *label11
    32 label *label7
    33 op sub :createTerrainMask:r :createTerrainMask:r 1
-    * jump *label6 always
+   34 jump *label253 greaterThanEq :createTerrainMask:r -3
    35 label *label8
    36 set :createTerrainMask*retval :createTerrainMask:result
    37 jump *label5 always

Modifications by Unroll loop at line 28:9 (+53 instructions):
 
    12 set :createTerrainMask:r 3
    13 label *label6
    14 label *label253
-    * set :createTerrainMask:c 3
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
-    * label *label9
-    * label *label254
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label12
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label10
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
-    * jump *label254 greaterThanEq :createTerrainMask:c -3
-    * label *label11
+   15 set :createTerrainMask:c 3
+   16 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+   17 label *label255
+   18 label *label256
+   19 op shl *tmp0 :createTerrainMask:result 1
+   20 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   21 set :isSolid:x *tmp1
+   22 set :isSolid:y *tmp2
+   23 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   24 sensor solid type @solid
+   25 select :isSolid:result notEqual solid false 1 0
+   26 label *label257
+   27 op or :createTerrainMask:result *tmp0 :isSolid:result
+   28 label *label258
+   29 op sub :createTerrainMask:c :createTerrainMask:c 1
+   30 label *label259
+   31 op shl *tmp0 :createTerrainMask:result 1
+   32 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   33 set :isSolid:x *tmp1
+   34 set :isSolid:y *tmp2
+   35 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   36 sensor solid type @solid
+   37 select :isSolid:result notEqual solid false 1 0
+   38 label *label260
+   39 op or :createTerrainMask:result *tmp0 :isSolid:result
+   40 label *label261
+   41 op sub :createTerrainMask:c :createTerrainMask:c 1
+   42 label *label262
+   43 op shl *tmp0 :createTerrainMask:result 1
+   44 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   45 set :isSolid:x *tmp1
+   46 set :isSolid:y *tmp2
+   47 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   48 sensor solid type @solid
+   49 select :isSolid:result notEqual solid false 1 0
+   50 label *label263
+   51 op or :createTerrainMask:result *tmp0 :isSolid:result
+   52 label *label264
+   53 op sub :createTerrainMask:c :createTerrainMask:c 1
+   54 label *label265
+   55 op shl *tmp0 :createTerrainMask:result 1
+   56 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   57 set :isSolid:x *tmp1
+   58 set :isSolid:y *tmp2
+   59 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   60 sensor solid type @solid
+   61 select :isSolid:result notEqual solid false 1 0
+   62 label *label266
+   63 op or :createTerrainMask:result *tmp0 :isSolid:result
+   64 label *label267
+   65 op sub :createTerrainMask:c :createTerrainMask:c 1
+   66 label *label268
+   67 op shl *tmp0 :createTerrainMask:result 1
+   68 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   69 set :isSolid:x *tmp1
+   70 set :isSolid:y *tmp2
+   71 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   72 sensor solid type @solid
+   73 select :isSolid:result notEqual solid false 1 0
+   74 label *label269
+   75 op or :createTerrainMask:result *tmp0 :isSolid:result
+   76 label *label270
+   77 op sub :createTerrainMask:c :createTerrainMask:c 1
+   78 label *label271
+   79 op shl *tmp0 :createTerrainMask:result 1
+   80 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   81 set :isSolid:x *tmp1
+   82 set :isSolid:y *tmp2
+   83 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   84 sensor solid type @solid
+   85 select :isSolid:result notEqual solid false 1 0
+   86 label *label272
+   87 op or :createTerrainMask:result *tmp0 :isSolid:result
+   88 label *label273
+   89 op sub :createTerrainMask:c :createTerrainMask:c 1
+   90 label *label274
+   91 op shl *tmp0 :createTerrainMask:result 1
+   92 op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   93 set :isSolid:x *tmp1
+   94 set :isSolid:y *tmp2
+   95 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   96 sensor solid type @solid
+   97 select :isSolid:result notEqual solid false 1 0
+   98 label *label275
+   99 op or :createTerrainMask:result *tmp0 :isSolid:result
+  100 label *label276
+  101 op sub :createTerrainMask:c :createTerrainMask:c 1
+  102 label *label11
   103 label *label7
   104 op sub :createTerrainMask:r :createTerrainMask:r 1
   105 jump *label253 greaterThanEq :createTerrainMask:r -3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    17 label *label255
    18 label *label256
    19 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   20 op add *tmp1 :createTerrainMask:x 3
    21 set :isSolid:x *tmp1
    22 set :isSolid:y *tmp2
    23 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    26 label *label257
    27 op or :createTerrainMask:result *tmp0 :isSolid:result
    28 label *label258
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   29 op sub :createTerrainMask:c 3 1
    30 label *label259
    31 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   32 op add *tmp1 :createTerrainMask:x 2
    33 set :isSolid:x *tmp1
    34 set :isSolid:y *tmp2
    35 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    38 label *label260
    39 op or :createTerrainMask:result *tmp0 :isSolid:result
    40 label *label261
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   41 op sub :createTerrainMask:c 2 1
    42 label *label262
    43 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   44 op add *tmp1 :createTerrainMask:x 1
    45 set :isSolid:x *tmp1
    46 set :isSolid:y *tmp2
    47 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    50 label *label263
    51 op or :createTerrainMask:result *tmp0 :isSolid:result
    52 label *label264
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   53 op sub :createTerrainMask:c 1 1
    54 label *label265
    55 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   56 op add *tmp1 :createTerrainMask:x 0
    57 set :isSolid:x *tmp1
    58 set :isSolid:y *tmp2
    59 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    62 label *label266
    63 op or :createTerrainMask:result *tmp0 :isSolid:result
    64 label *label267
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   65 op sub :createTerrainMask:c 0 1
    66 label *label268
    67 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   68 op add *tmp1 :createTerrainMask:x -1
    69 set :isSolid:x *tmp1
    70 set :isSolid:y *tmp2
    71 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    74 label *label269
    75 op or :createTerrainMask:result *tmp0 :isSolid:result
    76 label *label270
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   77 op sub :createTerrainMask:c -1 1
    78 label *label271
    79 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   80 op add *tmp1 :createTerrainMask:x -2
    81 set :isSolid:x *tmp1
    82 set :isSolid:y *tmp2
    83 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    86 label *label272
    87 op or :createTerrainMask:result *tmp0 :isSolid:result
    88 label *label273
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+   89 op sub :createTerrainMask:c -2 1
    90 label *label274
    91 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x :createTerrainMask:c
+   92 op add *tmp1 :createTerrainMask:x -3
    93 set :isSolid:x *tmp1
    94 set :isSolid:y *tmp2
    95 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
    98 label *label275
    99 op or :createTerrainMask:result *tmp0 :isSolid:result
   100 label *label276
-    * op sub :createTerrainMask:c :createTerrainMask:c 1
+  101 op sub :createTerrainMask:c -3 1
   102 label *label11
   103 label *label7
   104 op sub :createTerrainMask:r :createTerrainMask:r 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
    12 set :createTerrainMask:r 3
    13 label *label6
    14 label *label253
-    * set :createTerrainMask:c 3
    15 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
    16 label *label255
    17 label *label256
 
    25 label *label257
    26 op or :createTerrainMask:result *tmp0 :isSolid:result
    27 label *label258
-    * op sub :createTerrainMask:c 3 1
    28 label *label259
    29 op shl *tmp0 :createTerrainMask:result 1
    30 op add *tmp1 :createTerrainMask:x 2
 
    36 label *label260
    37 op or :createTerrainMask:result *tmp0 :isSolid:result
    38 label *label261
-    * op sub :createTerrainMask:c 2 1
    39 label *label262
    40 op shl *tmp0 :createTerrainMask:result 1
    41 op add *tmp1 :createTerrainMask:x 1
 
    47 label *label263
    48 op or :createTerrainMask:result *tmp0 :isSolid:result
    49 label *label264
-    * op sub :createTerrainMask:c 1 1
    50 label *label265
    51 op shl *tmp0 :createTerrainMask:result 1
    52 op add *tmp1 :createTerrainMask:x 0
 
    58 label *label266
    59 op or :createTerrainMask:result *tmp0 :isSolid:result
    60 label *label267
-    * op sub :createTerrainMask:c 0 1
    61 label *label268
    62 op shl *tmp0 :createTerrainMask:result 1
    63 op add *tmp1 :createTerrainMask:x -1
 
    69 label *label269
    70 op or :createTerrainMask:result *tmp0 :isSolid:result
    71 label *label270
-    * op sub :createTerrainMask:c -1 1
    72 label *label271
    73 op shl *tmp0 :createTerrainMask:result 1
    74 op add *tmp1 :createTerrainMask:x -2
 
    80 label *label272
    81 op or :createTerrainMask:result *tmp0 :isSolid:result
    82 label *label273
-    * op sub :createTerrainMask:c -2 1
    83 label *label274
    84 op shl *tmp0 :createTerrainMask:result 1
    85 op add *tmp1 :createTerrainMask:x -3
 
    91 label *label275
    92 op or :createTerrainMask:result *tmp0 :isSolid:result
    93 label *label276
-    * op sub :createTerrainMask:c -3 1
    94 label *label11
    95 label *label7
    96 op sub :createTerrainMask:r :createTerrainMask:r 1

Modifications by Unroll loop at line 27:5 (+347 instructions):
 
     9 label *label0
    10 ubind :createTerrainMask:unit
    11 set :createTerrainMask:result 0
-    * set :createTerrainMask:r 3
-    * label *label6
-    * label *label253
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
-    * label *label255
-    * label *label256
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label257
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label258
-    * label *label259
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label260
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label261
-    * label *label262
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label263
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label264
-    * label *label265
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label266
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label267
-    * label *label268
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label269
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label270
-    * label *label271
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label272
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label273
-    * label *label274
-    * op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
-    * set :isSolid:y *tmp2
-    * ucontrol getBlock :isSolid:x :isSolid:y type building floor
-    * sensor solid type @solid
-    * select :isSolid:result notEqual solid false 1 0
-    * label *label275
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label276
-    * label *label11
-    * label *label7
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
-    * jump *label253 greaterThanEq :createTerrainMask:r -3
-    * label *label8
+   12 set :createTerrainMask:r 3
+   13 label *label277
+   14 label *label278
+   15 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+   16 label *label279
+   17 label *label280
+   18 op shl *tmp0 :createTerrainMask:result 1
+   19 op add *tmp1 :createTerrainMask:x 3
+   20 set :isSolid:x *tmp1
+   21 set :isSolid:y *tmp2
+   22 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   23 sensor solid type @solid
+   24 select :isSolid:result notEqual solid false 1 0
+   25 label *label281
+   26 op or :createTerrainMask:result *tmp0 :isSolid:result
+   27 label *label282
+   28 label *label283
+   29 op shl *tmp0 :createTerrainMask:result 1
+   30 op add *tmp1 :createTerrainMask:x 2
+   31 set :isSolid:x *tmp1
+   32 set :isSolid:y *tmp2
+   33 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   34 sensor solid type @solid
+   35 select :isSolid:result notEqual solid false 1 0
+   36 label *label284
+   37 op or :createTerrainMask:result *tmp0 :isSolid:result
+   38 label *label285
+   39 label *label286
+   40 op shl *tmp0 :createTerrainMask:result 1
+   41 op add *tmp1 :createTerrainMask:x 1
+   42 set :isSolid:x *tmp1
+   43 set :isSolid:y *tmp2
+   44 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   45 sensor solid type @solid
+   46 select :isSolid:result notEqual solid false 1 0
+   47 label *label287
+   48 op or :createTerrainMask:result *tmp0 :isSolid:result
+   49 label *label288
+   50 label *label289
+   51 op shl *tmp0 :createTerrainMask:result 1
+   52 op add *tmp1 :createTerrainMask:x 0
+   53 set :isSolid:x *tmp1
+   54 set :isSolid:y *tmp2
+   55 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   56 sensor solid type @solid
+   57 select :isSolid:result notEqual solid false 1 0
+   58 label *label290
+   59 op or :createTerrainMask:result *tmp0 :isSolid:result
+   60 label *label291
+   61 label *label292
+   62 op shl *tmp0 :createTerrainMask:result 1
+   63 op add *tmp1 :createTerrainMask:x -1
+   64 set :isSolid:x *tmp1
+   65 set :isSolid:y *tmp2
+   66 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   67 sensor solid type @solid
+   68 select :isSolid:result notEqual solid false 1 0
+   69 label *label293
+   70 op or :createTerrainMask:result *tmp0 :isSolid:result
+   71 label *label294
+   72 label *label295
+   73 op shl *tmp0 :createTerrainMask:result 1
+   74 op add *tmp1 :createTerrainMask:x -2
+   75 set :isSolid:x *tmp1
+   76 set :isSolid:y *tmp2
+   77 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   78 sensor solid type @solid
+   79 select :isSolid:result notEqual solid false 1 0
+   80 label *label296
+   81 op or :createTerrainMask:result *tmp0 :isSolid:result
+   82 label *label297
+   83 label *label298
+   84 op shl *tmp0 :createTerrainMask:result 1
+   85 op add *tmp1 :createTerrainMask:x -3
+   86 set :isSolid:x *tmp1
+   87 set :isSolid:y *tmp2
+   88 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+   89 sensor solid type @solid
+   90 select :isSolid:result notEqual solid false 1 0
+   91 label *label299
+   92 op or :createTerrainMask:result *tmp0 :isSolid:result
+   93 label *label300
+   94 label *label301
+   95 label *label302
+   96 op sub :createTerrainMask:r :createTerrainMask:r 1
+   97 label *label303
+   98 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+   99 label *label304
+  100 label *label305
+  101 op shl *tmp0 :createTerrainMask:result 1
+  102 op add *tmp1 :createTerrainMask:x 3
+  103 set :isSolid:x *tmp1
+  104 set :isSolid:y *tmp2
+  105 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  106 sensor solid type @solid
+  107 select :isSolid:result notEqual solid false 1 0
+  108 label *label306
+  109 op or :createTerrainMask:result *tmp0 :isSolid:result
+  110 label *label307
+  111 label *label308
+  112 op shl *tmp0 :createTerrainMask:result 1
+  113 op add *tmp1 :createTerrainMask:x 2
+  114 set :isSolid:x *tmp1
+  115 set :isSolid:y *tmp2
+  116 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  117 sensor solid type @solid
+  118 select :isSolid:result notEqual solid false 1 0
+  119 label *label309
+  120 op or :createTerrainMask:result *tmp0 :isSolid:result
+  121 label *label310
+  122 label *label311
+  123 op shl *tmp0 :createTerrainMask:result 1
+  124 op add *tmp1 :createTerrainMask:x 1
+  125 set :isSolid:x *tmp1
+  126 set :isSolid:y *tmp2
+  127 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  128 sensor solid type @solid
+  129 select :isSolid:result notEqual solid false 1 0
+  130 label *label312
+  131 op or :createTerrainMask:result *tmp0 :isSolid:result
+  132 label *label313
+  133 label *label314
+  134 op shl *tmp0 :createTerrainMask:result 1
+  135 op add *tmp1 :createTerrainMask:x 0
+  136 set :isSolid:x *tmp1
+  137 set :isSolid:y *tmp2
+  138 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  139 sensor solid type @solid
+  140 select :isSolid:result notEqual solid false 1 0
+  141 label *label315
+  142 op or :createTerrainMask:result *tmp0 :isSolid:result
+  143 label *label316
+  144 label *label317
+  145 op shl *tmp0 :createTerrainMask:result 1
+  146 op add *tmp1 :createTerrainMask:x -1
+  147 set :isSolid:x *tmp1
+  148 set :isSolid:y *tmp2
+  149 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  150 sensor solid type @solid
+  151 select :isSolid:result notEqual solid false 1 0
+  152 label *label318
+  153 op or :createTerrainMask:result *tmp0 :isSolid:result
+  154 label *label319
+  155 label *label320
+  156 op shl *tmp0 :createTerrainMask:result 1
+  157 op add *tmp1 :createTerrainMask:x -2
+  158 set :isSolid:x *tmp1
+  159 set :isSolid:y *tmp2
+  160 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  161 sensor solid type @solid
+  162 select :isSolid:result notEqual solid false 1 0
+  163 label *label321
+  164 op or :createTerrainMask:result *tmp0 :isSolid:result
+  165 label *label322
+  166 label *label323
+  167 op shl *tmp0 :createTerrainMask:result 1
+  168 op add *tmp1 :createTerrainMask:x -3
+  169 set :isSolid:x *tmp1
+  170 set :isSolid:y *tmp2
+  171 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  172 sensor solid type @solid
+  173 select :isSolid:result notEqual solid false 1 0
+  174 label *label324
+  175 op or :createTerrainMask:result *tmp0 :isSolid:result
+  176 label *label325
+  177 label *label326
+  178 label *label327
+  179 op sub :createTerrainMask:r :createTerrainMask:r 1
+  180 label *label328
+  181 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  182 label *label329
+  183 label *label330
+  184 op shl *tmp0 :createTerrainMask:result 1
+  185 op add *tmp1 :createTerrainMask:x 3
+  186 set :isSolid:x *tmp1
+  187 set :isSolid:y *tmp2
+  188 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  189 sensor solid type @solid
+  190 select :isSolid:result notEqual solid false 1 0
+  191 label *label331
+  192 op or :createTerrainMask:result *tmp0 :isSolid:result
+  193 label *label332
+  194 label *label333
+  195 op shl *tmp0 :createTerrainMask:result 1
+  196 op add *tmp1 :createTerrainMask:x 2
+  197 set :isSolid:x *tmp1
+  198 set :isSolid:y *tmp2
+  199 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  200 sensor solid type @solid
+  201 select :isSolid:result notEqual solid false 1 0
+  202 label *label334
+  203 op or :createTerrainMask:result *tmp0 :isSolid:result
+  204 label *label335
+  205 label *label336
+  206 op shl *tmp0 :createTerrainMask:result 1
+  207 op add *tmp1 :createTerrainMask:x 1
+  208 set :isSolid:x *tmp1
+  209 set :isSolid:y *tmp2
+  210 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  211 sensor solid type @solid
+  212 select :isSolid:result notEqual solid false 1 0
+  213 label *label337
+  214 op or :createTerrainMask:result *tmp0 :isSolid:result
+  215 label *label338
+  216 label *label339
+  217 op shl *tmp0 :createTerrainMask:result 1
+  218 op add *tmp1 :createTerrainMask:x 0
+  219 set :isSolid:x *tmp1
+  220 set :isSolid:y *tmp2
+  221 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  222 sensor solid type @solid
+  223 select :isSolid:result notEqual solid false 1 0
+  224 label *label340
+  225 op or :createTerrainMask:result *tmp0 :isSolid:result
+  226 label *label341
+  227 label *label342
+  228 op shl *tmp0 :createTerrainMask:result 1
+  229 op add *tmp1 :createTerrainMask:x -1
+  230 set :isSolid:x *tmp1
+  231 set :isSolid:y *tmp2
+  232 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  233 sensor solid type @solid
+  234 select :isSolid:result notEqual solid false 1 0
+  235 label *label343
+  236 op or :createTerrainMask:result *tmp0 :isSolid:result
+  237 label *label344
+  238 label *label345
+  239 op shl *tmp0 :createTerrainMask:result 1
+  240 op add *tmp1 :createTerrainMask:x -2
+  241 set :isSolid:x *tmp1
+  242 set :isSolid:y *tmp2
+  243 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  244 sensor solid type @solid
+  245 select :isSolid:result notEqual solid false 1 0
+  246 label *label346
+  247 op or :createTerrainMask:result *tmp0 :isSolid:result
+  248 label *label347
+  249 label *label348
+  250 op shl *tmp0 :createTerrainMask:result 1
+  251 op add *tmp1 :createTerrainMask:x -3
+  252 set :isSolid:x *tmp1
+  253 set :isSolid:y *tmp2
+  254 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  255 sensor solid type @solid
+  256 select :isSolid:result notEqual solid false 1 0
+  257 label *label349
+  258 op or :createTerrainMask:result *tmp0 :isSolid:result
+  259 label *label350
+  260 label *label351
+  261 label *label352
+  262 op sub :createTerrainMask:r :createTerrainMask:r 1
+  263 label *label353
+  264 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  265 label *label354
+  266 label *label355
+  267 op shl *tmp0 :createTerrainMask:result 1
+  268 op add *tmp1 :createTerrainMask:x 3
+  269 set :isSolid:x *tmp1
+  270 set :isSolid:y *tmp2
+  271 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  272 sensor solid type @solid
+  273 select :isSolid:result notEqual solid false 1 0
+  274 label *label356
+  275 op or :createTerrainMask:result *tmp0 :isSolid:result
+  276 label *label357
+  277 label *label358
+  278 op shl *tmp0 :createTerrainMask:result 1
+  279 op add *tmp1 :createTerrainMask:x 2
+  280 set :isSolid:x *tmp1
+  281 set :isSolid:y *tmp2
+  282 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  283 sensor solid type @solid
+  284 select :isSolid:result notEqual solid false 1 0
+  285 label *label359
+  286 op or :createTerrainMask:result *tmp0 :isSolid:result
+  287 label *label360
+  288 label *label361
+  289 op shl *tmp0 :createTerrainMask:result 1
+  290 op add *tmp1 :createTerrainMask:x 1
+  291 set :isSolid:x *tmp1
+  292 set :isSolid:y *tmp2
+  293 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  294 sensor solid type @solid
+  295 select :isSolid:result notEqual solid false 1 0
+  296 label *label362
+  297 op or :createTerrainMask:result *tmp0 :isSolid:result
+  298 label *label363
+  299 label *label364
+  300 op shl *tmp0 :createTerrainMask:result 1
+  301 op add *tmp1 :createTerrainMask:x 0
+  302 set :isSolid:x *tmp1
+  303 set :isSolid:y *tmp2
+  304 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  305 sensor solid type @solid
+  306 select :isSolid:result notEqual solid false 1 0
+  307 label *label365
+  308 op or :createTerrainMask:result *tmp0 :isSolid:result
+  309 label *label366
+  310 label *label367
+  311 op shl *tmp0 :createTerrainMask:result 1
+  312 op add *tmp1 :createTerrainMask:x -1
+  313 set :isSolid:x *tmp1
+  314 set :isSolid:y *tmp2
+  315 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  316 sensor solid type @solid
+  317 select :isSolid:result notEqual solid false 1 0
+  318 label *label368
+  319 op or :createTerrainMask:result *tmp0 :isSolid:result
+  320 label *label369
+  321 label *label370
+  322 op shl *tmp0 :createTerrainMask:result 1
+  323 op add *tmp1 :createTerrainMask:x -2
+  324 set :isSolid:x *tmp1
+  325 set :isSolid:y *tmp2
+  326 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  327 sensor solid type @solid
+  328 select :isSolid:result notEqual solid false 1 0
+  329 label *label371
+  330 op or :createTerrainMask:result *tmp0 :isSolid:result
+  331 label *label372
+  332 label *label373
+  333 op shl *tmp0 :createTerrainMask:result 1
+  334 op add *tmp1 :createTerrainMask:x -3
+  335 set :isSolid:x *tmp1
+  336 set :isSolid:y *tmp2
+  337 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  338 sensor solid type @solid
+  339 select :isSolid:result notEqual solid false 1 0
+  340 label *label374
+  341 op or :createTerrainMask:result *tmp0 :isSolid:result
+  342 label *label375
+  343 label *label376
+  344 label *label377
+  345 op sub :createTerrainMask:r :createTerrainMask:r 1
+  346 label *label378
+  347 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  348 label *label379
+  349 label *label380
+  350 op shl *tmp0 :createTerrainMask:result 1
+  351 op add *tmp1 :createTerrainMask:x 3
+  352 set :isSolid:x *tmp1
+  353 set :isSolid:y *tmp2
+  354 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  355 sensor solid type @solid
+  356 select :isSolid:result notEqual solid false 1 0
+  357 label *label381
+  358 op or :createTerrainMask:result *tmp0 :isSolid:result
+  359 label *label382
+  360 label *label383
+  361 op shl *tmp0 :createTerrainMask:result 1
+  362 op add *tmp1 :createTerrainMask:x 2
+  363 set :isSolid:x *tmp1
+  364 set :isSolid:y *tmp2
+  365 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  366 sensor solid type @solid
+  367 select :isSolid:result notEqual solid false 1 0
+  368 label *label384
+  369 op or :createTerrainMask:result *tmp0 :isSolid:result
+  370 label *label385
+  371 label *label386
+  372 op shl *tmp0 :createTerrainMask:result 1
+  373 op add *tmp1 :createTerrainMask:x 1
+  374 set :isSolid:x *tmp1
+  375 set :isSolid:y *tmp2
+  376 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  377 sensor solid type @solid
+  378 select :isSolid:result notEqual solid false 1 0
+  379 label *label387
+  380 op or :createTerrainMask:result *tmp0 :isSolid:result
+  381 label *label388
+  382 label *label389
+  383 op shl *tmp0 :createTerrainMask:result 1
+  384 op add *tmp1 :createTerrainMask:x 0
+  385 set :isSolid:x *tmp1
+  386 set :isSolid:y *tmp2
+  387 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  388 sensor solid type @solid
+  389 select :isSolid:result notEqual solid false 1 0
+  390 label *label390
+  391 op or :createTerrainMask:result *tmp0 :isSolid:result
+  392 label *label391
+  393 label *label392
+  394 op shl *tmp0 :createTerrainMask:result 1
+  395 op add *tmp1 :createTerrainMask:x -1
+  396 set :isSolid:x *tmp1
+  397 set :isSolid:y *tmp2
+  398 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  399 sensor solid type @solid
+  400 select :isSolid:result notEqual solid false 1 0
+  401 label *label393
+  402 op or :createTerrainMask:result *tmp0 :isSolid:result
+  403 label *label394
+  404 label *label395
+  405 op shl *tmp0 :createTerrainMask:result 1
+  406 op add *tmp1 :createTerrainMask:x -2
+  407 set :isSolid:x *tmp1
+  408 set :isSolid:y *tmp2
+  409 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  410 sensor solid type @solid
+  411 select :isSolid:result notEqual solid false 1 0
+  412 label *label396
+  413 op or :createTerrainMask:result *tmp0 :isSolid:result
+  414 label *label397
+  415 label *label398
+  416 op shl *tmp0 :createTerrainMask:result 1
+  417 op add *tmp1 :createTerrainMask:x -3
+  418 set :isSolid:x *tmp1
+  419 set :isSolid:y *tmp2
+  420 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  421 sensor solid type @solid
+  422 select :isSolid:result notEqual solid false 1 0
+  423 label *label399
+  424 op or :createTerrainMask:result *tmp0 :isSolid:result
+  425 label *label400
+  426 label *label401
+  427 label *label402
+  428 op sub :createTerrainMask:r :createTerrainMask:r 1
+  429 label *label403
+  430 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  431 label *label404
+  432 label *label405
+  433 op shl *tmp0 :createTerrainMask:result 1
+  434 op add *tmp1 :createTerrainMask:x 3
+  435 set :isSolid:x *tmp1
+  436 set :isSolid:y *tmp2
+  437 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  438 sensor solid type @solid
+  439 select :isSolid:result notEqual solid false 1 0
+  440 label *label406
+  441 op or :createTerrainMask:result *tmp0 :isSolid:result
+  442 label *label407
+  443 label *label408
+  444 op shl *tmp0 :createTerrainMask:result 1
+  445 op add *tmp1 :createTerrainMask:x 2
+  446 set :isSolid:x *tmp1
+  447 set :isSolid:y *tmp2
+  448 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  449 sensor solid type @solid
+  450 select :isSolid:result notEqual solid false 1 0
+  451 label *label409
+  452 op or :createTerrainMask:result *tmp0 :isSolid:result
+  453 label *label410
+  454 label *label411
+  455 op shl *tmp0 :createTerrainMask:result 1
+  456 op add *tmp1 :createTerrainMask:x 1
+  457 set :isSolid:x *tmp1
+  458 set :isSolid:y *tmp2
+  459 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  460 sensor solid type @solid
+  461 select :isSolid:result notEqual solid false 1 0
+  462 label *label412
+  463 op or :createTerrainMask:result *tmp0 :isSolid:result
+  464 label *label413
+  465 label *label414
+  466 op shl *tmp0 :createTerrainMask:result 1
+  467 op add *tmp1 :createTerrainMask:x 0
+  468 set :isSolid:x *tmp1
+  469 set :isSolid:y *tmp2
+  470 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  471 sensor solid type @solid
+  472 select :isSolid:result notEqual solid false 1 0
+  473 label *label415
+  474 op or :createTerrainMask:result *tmp0 :isSolid:result
+  475 label *label416
+  476 label *label417
+  477 op shl *tmp0 :createTerrainMask:result 1
+  478 op add *tmp1 :createTerrainMask:x -1
+  479 set :isSolid:x *tmp1
+  480 set :isSolid:y *tmp2
+  481 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  482 sensor solid type @solid
+  483 select :isSolid:result notEqual solid false 1 0
+  484 label *label418
+  485 op or :createTerrainMask:result *tmp0 :isSolid:result
+  486 label *label419
+  487 label *label420
+  488 op shl *tmp0 :createTerrainMask:result 1
+  489 op add *tmp1 :createTerrainMask:x -2
+  490 set :isSolid:x *tmp1
+  491 set :isSolid:y *tmp2
+  492 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  493 sensor solid type @solid
+  494 select :isSolid:result notEqual solid false 1 0
+  495 label *label421
+  496 op or :createTerrainMask:result *tmp0 :isSolid:result
+  497 label *label422
+  498 label *label423
+  499 op shl *tmp0 :createTerrainMask:result 1
+  500 op add *tmp1 :createTerrainMask:x -3
+  501 set :isSolid:x *tmp1
+  502 set :isSolid:y *tmp2
+  503 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  504 sensor solid type @solid
+  505 select :isSolid:result notEqual solid false 1 0
+  506 label *label424
+  507 op or :createTerrainMask:result *tmp0 :isSolid:result
+  508 label *label425
+  509 label *label426
+  510 label *label427
+  511 op sub :createTerrainMask:r :createTerrainMask:r 1
+  512 label *label428
+  513 op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  514 label *label429
+  515 label *label430
+  516 op shl *tmp0 :createTerrainMask:result 1
+  517 op add *tmp1 :createTerrainMask:x 3
+  518 set :isSolid:x *tmp1
+  519 set :isSolid:y *tmp2
+  520 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  521 sensor solid type @solid
+  522 select :isSolid:result notEqual solid false 1 0
+  523 label *label431
+  524 op or :createTerrainMask:result *tmp0 :isSolid:result
+  525 label *label432
+  526 label *label433
+  527 op shl *tmp0 :createTerrainMask:result 1
+  528 op add *tmp1 :createTerrainMask:x 2
+  529 set :isSolid:x *tmp1
+  530 set :isSolid:y *tmp2
+  531 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  532 sensor solid type @solid
+  533 select :isSolid:result notEqual solid false 1 0
+  534 label *label434
+  535 op or :createTerrainMask:result *tmp0 :isSolid:result
+  536 label *label435
+  537 label *label436
+  538 op shl *tmp0 :createTerrainMask:result 1
+  539 op add *tmp1 :createTerrainMask:x 1
+  540 set :isSolid:x *tmp1
+  541 set :isSolid:y *tmp2
+  542 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  543 sensor solid type @solid
+  544 select :isSolid:result notEqual solid false 1 0
+  545 label *label437
+  546 op or :createTerrainMask:result *tmp0 :isSolid:result
+  547 label *label438
+  548 label *label439
+  549 op shl *tmp0 :createTerrainMask:result 1
+  550 op add *tmp1 :createTerrainMask:x 0
+  551 set :isSolid:x *tmp1
+  552 set :isSolid:y *tmp2
+  553 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  554 sensor solid type @solid
+  555 select :isSolid:result notEqual solid false 1 0
+  556 label *label440
+  557 op or :createTerrainMask:result *tmp0 :isSolid:result
+  558 label *label441
+  559 label *label442
+  560 op shl *tmp0 :createTerrainMask:result 1
+  561 op add *tmp1 :createTerrainMask:x -1
+  562 set :isSolid:x *tmp1
+  563 set :isSolid:y *tmp2
+  564 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  565 sensor solid type @solid
+  566 select :isSolid:result notEqual solid false 1 0
+  567 label *label443
+  568 op or :createTerrainMask:result *tmp0 :isSolid:result
+  569 label *label444
+  570 label *label445
+  571 op shl *tmp0 :createTerrainMask:result 1
+  572 op add *tmp1 :createTerrainMask:x -2
+  573 set :isSolid:x *tmp1
+  574 set :isSolid:y *tmp2
+  575 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  576 sensor solid type @solid
+  577 select :isSolid:result notEqual solid false 1 0
+  578 label *label446
+  579 op or :createTerrainMask:result *tmp0 :isSolid:result
+  580 label *label447
+  581 label *label448
+  582 op shl *tmp0 :createTerrainMask:result 1
+  583 op add *tmp1 :createTerrainMask:x -3
+  584 set :isSolid:x *tmp1
+  585 set :isSolid:y *tmp2
+  586 ucontrol getBlock :isSolid:x :isSolid:y type building floor
+  587 sensor solid type @solid
+  588 select :isSolid:result notEqual solid false 1 0
+  589 label *label449
+  590 op or :createTerrainMask:result *tmp0 :isSolid:result
+  591 label *label450
+  592 label *label451
+  593 label *label452
+  594 op sub :createTerrainMask:r :createTerrainMask:r 1
+  595 label *label8
   596 set :createTerrainMask*retval :createTerrainMask:result
   597 jump *label5 always
   598 label *label5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    12 set :createTerrainMask:r 3
    13 label *label277
    14 label *label278
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+   15 op add *tmp2 :createTerrainMask:y 3
    16 label *label279
    17 label *label280
-    * op shl *tmp0 :createTerrainMask:result 1
+   18 op shl *tmp0 0 1
    19 op add *tmp1 :createTerrainMask:x 3
    20 set :isSolid:x *tmp1
    21 set :isSolid:y *tmp2
 
    23 sensor solid type @solid
    24 select :isSolid:result notEqual solid false 1 0
    25 label *label281
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
+   26 op or :createTerrainMask:result 0 :isSolid:result
    27 label *label282
    28 label *label283
    29 op shl *tmp0 :createTerrainMask:result 1
 
    93 label *label300
    94 label *label301
    95 label *label302
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+   96 op sub :createTerrainMask:r 3 1
    97 label *label303
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+   98 op add *tmp2 :createTerrainMask:y 2
    99 label *label304
   100 label *label305
   101 op shl *tmp0 :createTerrainMask:result 1
 
   176 label *label325
   177 label *label326
   178 label *label327
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  179 op sub :createTerrainMask:r 2 1
   180 label *label328
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  181 op add *tmp2 :createTerrainMask:y 1
   182 label *label329
   183 label *label330
   184 op shl *tmp0 :createTerrainMask:result 1
 
   259 label *label350
   260 label *label351
   261 label *label352
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  262 op sub :createTerrainMask:r 1 1
   263 label *label353
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  264 op add *tmp2 :createTerrainMask:y 0
   265 label *label354
   266 label *label355
   267 op shl *tmp0 :createTerrainMask:result 1
 
   342 label *label375
   343 label *label376
   344 label *label377
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  345 op sub :createTerrainMask:r 0 1
   346 label *label378
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  347 op add *tmp2 :createTerrainMask:y -1
   348 label *label379
   349 label *label380
   350 op shl *tmp0 :createTerrainMask:result 1
 
   425 label *label400
   426 label *label401
   427 label *label402
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  428 op sub :createTerrainMask:r -1 1
   429 label *label403
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  430 op add *tmp2 :createTerrainMask:y -2
   431 label *label404
   432 label *label405
   433 op shl *tmp0 :createTerrainMask:result 1
 
   508 label *label425
   509 label *label426
   510 label *label427
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  511 op sub :createTerrainMask:r -2 1
   512 label *label428
-    * op add *tmp2 :createTerrainMask:y :createTerrainMask:r
+  513 op add *tmp2 :createTerrainMask:y -3
   514 label *label429
   515 label *label430
   516 op shl *tmp0 :createTerrainMask:result 1
 
   591 label *label450
   592 label *label451
   593 label *label452
-    * op sub :createTerrainMask:r :createTerrainMask:r 1
+  594 op sub :createTerrainMask:r -3 1
   595 label *label8
   596 set :createTerrainMask*retval :createTerrainMask:result
   597 jump *label5 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
     8 end
     9 label *label0
    10 ubind :createTerrainMask:unit
-    * set :createTerrainMask:result 0
-    * set :createTerrainMask:r 3
    11 label *label277
    12 label *label278
    13 op add *tmp2 :createTerrainMask:y 3
    14 label *label279
    15 label *label280
-    * op shl *tmp0 0 1
    16 op add *tmp1 :createTerrainMask:x 3
    17 set :isSolid:x *tmp1
    18 set :isSolid:y *tmp2
 
    90 label *label300
    91 label *label301
    92 label *label302
-    * op sub :createTerrainMask:r 3 1
    93 label *label303
    94 op add *tmp2 :createTerrainMask:y 2
    95 label *label304
 
   172 label *label325
   173 label *label326
   174 label *label327
-    * op sub :createTerrainMask:r 2 1
   175 label *label328
   176 op add *tmp2 :createTerrainMask:y 1
   177 label *label329
 
   254 label *label350
   255 label *label351
   256 label *label352
-    * op sub :createTerrainMask:r 1 1
   257 label *label353
   258 op add *tmp2 :createTerrainMask:y 0
   259 label *label354
 
   336 label *label375
   337 label *label376
   338 label *label377
-    * op sub :createTerrainMask:r 0 1
   339 label *label378
   340 op add *tmp2 :createTerrainMask:y -1
   341 label *label379
 
   418 label *label400
   419 label *label401
   420 label *label402
-    * op sub :createTerrainMask:r -1 1
   421 label *label403
   422 op add *tmp2 :createTerrainMask:y -2
   423 label *label404
 
   500 label *label425
   501 label *label426
   502 label *label427
-    * op sub :createTerrainMask:r -2 1
   503 label *label428
   504 op add *tmp2 :createTerrainMask:y -3
   505 label *label429
 
   582 label *label450
   583 label *label451
   584 label *label452
-    * op sub :createTerrainMask:r -3 1
   585 label *label8
   586 set :createTerrainMask*retval :createTerrainMask:result
   587 jump *label5 always

Modifications by Inline function call at line 162:14 (+78 instructions):
 
   691 set :computeRowValues:y *tmp52
   692 set :computeRowValues:ore :findBestPosition:ore
   693 set :computeRowValues:size :findBestPosition:size
-    * setaddr :computeRowValues*retaddr *label26 (h:*label26)
-    * call *label2 *invalid :computeRowValues*retval (m:*label26) (h:*label26)
-    * label *label26
+  694 label *label453
+  695 op sub :spotValue:x :computeRowValues:x 2
+  696 set :spotValue:y :computeRowValues:y
+  697 set :spotValue:ore :computeRowValues:ore
+  698 ucontrol getBlock :spotValue:x :spotValue:y type building floor
+  699 select value equal floor :spotValue:ore 0.00392156862745098 0
+  700 sensor solid type @solid
+  701 select :spotValue:result notEqual solid false 0.09803921568627451 value
+  702 label *label454
+  703 op sub :spotValue.1:x :computeRowValues:x 1
+  704 set :spotValue.1:y :computeRowValues:y
+  705 set :spotValue.1:ore :computeRowValues:ore
+  706 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
+  707 select value equal floor :spotValue.1:ore 0.00392156862745098 0
+  708 sensor solid type @solid
+  709 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
+  710 label *label455
+  711 set :spotValue.2:x :computeRowValues:x
+  712 set :spotValue.2:y :computeRowValues:y
+  713 set :spotValue.2:ore :computeRowValues:ore
+  714 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
+  715 select value equal floor :spotValue.2:ore 0.00392156862745098 0
+  716 sensor solid type @solid
+  717 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
+  718 label *label456
+  719 op add :spotValue.3:x :computeRowValues:x 1
+  720 set :spotValue.3:y :computeRowValues:y
+  721 set :spotValue.3:ore :computeRowValues:ore
+  722 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
+  723 select value equal floor :spotValue.3:ore 0.00392156862745098 0
+  724 sensor solid type @solid
+  725 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
+  726 label *label457
+  727 op add :spotValue.4:x :computeRowValues:x 2
+  728 set :spotValue.4:y :computeRowValues:y
+  729 set :spotValue.4:ore :computeRowValues:ore
+  730 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
+  731 select value equal floor :spotValue.4:ore 0.00392156862745098 0
+  732 sensor solid type @solid
+  733 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
+  734 label *label458
+  735 jump *label459 notEqual :computeRowValues:size 2
+  736 op add *tmp17 :spotValue:result :spotValue.1:result
+  737 op add *tmp18 :spotValue.1:result :spotValue.2:result
+  738 op add *tmp19 :spotValue.2:result :spotValue.3:result
+  739 op add *tmp20 :spotValue.3:result :spotValue.4:result
+  740 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  741 jump *label465 always
+  742 jump *label464 always
+  743 label *label459
+  744 jump *label460 notEqual :computeRowValues:size 3
+  745 op add *tmp24 :spotValue.1:result :spotValue.2:result
+  746 op add *tmp25 :spotValue:result *tmp24
+  747 op add *tmp27 *tmp24 :spotValue.3:result
+  748 op add *tmp28 :spotValue.2:result :spotValue.3:result
+  749 op add *tmp29 *tmp28 :spotValue.4:result
+  750 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  751 jump *label465 always
+  752 jump *label463 always
+  753 label *label460
+  754 op sub :spotValue.5:x :computeRowValues:x 3
+  755 set :spotValue.5:y :computeRowValues:y
+  756 set :spotValue.5:ore :computeRowValues:ore
+  757 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
+  758 select value equal floor :spotValue.5:ore 0.00392156862745098 0
+  759 sensor solid type @solid
+  760 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
+  761 label *label461
+  762 op add :spotValue.6:x :computeRowValues:x 3
+  763 set :spotValue.6:y :computeRowValues:y
+  764 set :spotValue.6:ore :computeRowValues:ore
+  765 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
+  766 select value equal floor :spotValue.6:ore 0.00392156862745098 0
+  767 sensor solid type @solid
+  768 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
+  769 label *label462
+  770 op add *tmp35 :spotValue:result :spotValue.1:result
+  771 op add *tmp36 *tmp35 :spotValue.2:result
+  772 op add *tmp37 :spotValue.5:result *tmp36
+  773 op min *tmp38 0.09803921568627451 *tmp37
+  774 op add *tmp41 *tmp36 :spotValue.3:result
+  775 op min *tmp42 0.09803921568627451 *tmp41
+  776 op add *tmp43 :spotValue.2:result :spotValue.3:result
+  777 op add *tmp44 *tmp43 :spotValue.4:result
+  778 op add *tmp45 :spotValue.1:result *tmp44
+  779 op min *tmp46 0.09803921568627451 *tmp45
+  780 op add *tmp49 *tmp44 :spotValue.6:result
+  781 op min *tmp50 0.09803921568627451 *tmp49
+  782 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  783 jump *label465 always
+  784 label *label463
+  785 label *label464
+  786 label *label465
   787 set :findBestPosition:y1 :computeRowValues*retval
   788 op sub *tmp54 :findBestPosition:y 1
   789 set :computeRowValues:x :findBestPosition:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   692 set :computeRowValues:ore :findBestPosition:ore
   693 set :computeRowValues:size :findBestPosition:size
   694 label *label453
-    * op sub :spotValue:x :computeRowValues:x 2
-    * set :spotValue:y :computeRowValues:y
-    * set :spotValue:ore :computeRowValues:ore
+  695 op sub :spotValue:x :findBestPosition:x 2
+  696 set :spotValue:y *tmp52
+  697 set :spotValue:ore :findBestPosition:ore
   698 ucontrol getBlock :spotValue:x :spotValue:y type building floor
   699 select value equal floor :spotValue:ore 0.00392156862745098 0
   700 sensor solid type @solid
   701 select :spotValue:result notEqual solid false 0.09803921568627451 value
   702 label *label454
-    * op sub :spotValue.1:x :computeRowValues:x 1
-    * set :spotValue.1:y :computeRowValues:y
-    * set :spotValue.1:ore :computeRowValues:ore
+  703 op sub :spotValue.1:x :findBestPosition:x 1
+  704 set :spotValue.1:y *tmp52
+  705 set :spotValue.1:ore :findBestPosition:ore
   706 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
   707 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   708 sensor solid type @solid
   709 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
   710 label *label455
-    * set :spotValue.2:x :computeRowValues:x
-    * set :spotValue.2:y :computeRowValues:y
-    * set :spotValue.2:ore :computeRowValues:ore
+  711 set :spotValue.2:x :findBestPosition:x
+  712 set :spotValue.2:y *tmp52
+  713 set :spotValue.2:ore :findBestPosition:ore
   714 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
   715 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   716 sensor solid type @solid
   717 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
   718 label *label456
-    * op add :spotValue.3:x :computeRowValues:x 1
-    * set :spotValue.3:y :computeRowValues:y
-    * set :spotValue.3:ore :computeRowValues:ore
+  719 op add :spotValue.3:x :findBestPosition:x 1
+  720 set :spotValue.3:y *tmp52
+  721 set :spotValue.3:ore :findBestPosition:ore
   722 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
   723 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   724 sensor solid type @solid
   725 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
   726 label *label457
-    * op add :spotValue.4:x :computeRowValues:x 2
-    * set :spotValue.4:y :computeRowValues:y
-    * set :spotValue.4:ore :computeRowValues:ore
+  727 op add :spotValue.4:x :findBestPosition:x 2
+  728 set :spotValue.4:y *tmp52
+  729 set :spotValue.4:ore :findBestPosition:ore
   730 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
   731 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   732 sensor solid type @solid
   733 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
   734 label *label458
-    * jump *label459 notEqual :computeRowValues:size 2
+  735 jump *label459 notEqual :findBestPosition:size 2
   736 op add *tmp17 :spotValue:result :spotValue.1:result
   737 op add *tmp18 :spotValue.1:result :spotValue.2:result
   738 op add *tmp19 :spotValue.2:result :spotValue.3:result
 
   741 jump *label465 always
   742 jump *label464 always
   743 label *label459
-    * jump *label460 notEqual :computeRowValues:size 3
+  744 jump *label460 notEqual :findBestPosition:size 3
   745 op add *tmp24 :spotValue.1:result :spotValue.2:result
   746 op add *tmp25 :spotValue:result *tmp24
   747 op add *tmp27 *tmp24 :spotValue.3:result
 
   751 jump *label465 always
   752 jump *label463 always
   753 label *label460
-    * op sub :spotValue.5:x :computeRowValues:x 3
-    * set :spotValue.5:y :computeRowValues:y
-    * set :spotValue.5:ore :computeRowValues:ore
+  754 op sub :spotValue.5:x :findBestPosition:x 3
+  755 set :spotValue.5:y *tmp52
+  756 set :spotValue.5:ore :findBestPosition:ore
   757 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
   758 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   759 sensor solid type @solid
   760 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
   761 label *label461
-    * op add :spotValue.6:x :computeRowValues:x 3
-    * set :spotValue.6:y :computeRowValues:y
-    * set :spotValue.6:ore :computeRowValues:ore
+  762 op add :spotValue.6:x :findBestPosition:x 3
+  763 set :spotValue.6:y *tmp52
+  764 set :spotValue.6:ore :findBestPosition:ore
   765 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
   766 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   767 sensor solid type @solid

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   687 label *label1
   688 ubind :findBestPosition:unit
   689 op sub *tmp52 :findBestPosition:y 2
-    * set :computeRowValues:x :findBestPosition:x
-    * set :computeRowValues:y *tmp52
-    * set :computeRowValues:ore :findBestPosition:ore
-    * set :computeRowValues:size :findBestPosition:size
   690 label *label453
   691 op sub :spotValue:x :findBestPosition:x 2
   692 set :spotValue:y *tmp52

Modifications by Inline function call at line 163:14 (+78 instructions):
 
   786 set :computeRowValues:y *tmp54
   787 set :computeRowValues:ore :findBestPosition:ore
   788 set :computeRowValues:size :findBestPosition:size
-    * setaddr :computeRowValues*retaddr *label27 (h:*label27)
-    * call *label2 *invalid :computeRowValues*retval (m:*label27) (h:*label27)
-    * label *label27
+  789 label *label466
+  790 op sub :spotValue:x :computeRowValues:x 2
+  791 set :spotValue:y :computeRowValues:y
+  792 set :spotValue:ore :computeRowValues:ore
+  793 ucontrol getBlock :spotValue:x :spotValue:y type building floor
+  794 select value equal floor :spotValue:ore 0.00392156862745098 0
+  795 sensor solid type @solid
+  796 select :spotValue:result notEqual solid false 0.09803921568627451 value
+  797 label *label467
+  798 op sub :spotValue.1:x :computeRowValues:x 1
+  799 set :spotValue.1:y :computeRowValues:y
+  800 set :spotValue.1:ore :computeRowValues:ore
+  801 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
+  802 select value equal floor :spotValue.1:ore 0.00392156862745098 0
+  803 sensor solid type @solid
+  804 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
+  805 label *label468
+  806 set :spotValue.2:x :computeRowValues:x
+  807 set :spotValue.2:y :computeRowValues:y
+  808 set :spotValue.2:ore :computeRowValues:ore
+  809 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
+  810 select value equal floor :spotValue.2:ore 0.00392156862745098 0
+  811 sensor solid type @solid
+  812 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
+  813 label *label469
+  814 op add :spotValue.3:x :computeRowValues:x 1
+  815 set :spotValue.3:y :computeRowValues:y
+  816 set :spotValue.3:ore :computeRowValues:ore
+  817 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
+  818 select value equal floor :spotValue.3:ore 0.00392156862745098 0
+  819 sensor solid type @solid
+  820 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
+  821 label *label470
+  822 op add :spotValue.4:x :computeRowValues:x 2
+  823 set :spotValue.4:y :computeRowValues:y
+  824 set :spotValue.4:ore :computeRowValues:ore
+  825 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
+  826 select value equal floor :spotValue.4:ore 0.00392156862745098 0
+  827 sensor solid type @solid
+  828 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
+  829 label *label471
+  830 jump *label472 notEqual :computeRowValues:size 2
+  831 op add *tmp17 :spotValue:result :spotValue.1:result
+  832 op add *tmp18 :spotValue.1:result :spotValue.2:result
+  833 op add *tmp19 :spotValue.2:result :spotValue.3:result
+  834 op add *tmp20 :spotValue.3:result :spotValue.4:result
+  835 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  836 jump *label478 always
+  837 jump *label477 always
+  838 label *label472
+  839 jump *label473 notEqual :computeRowValues:size 3
+  840 op add *tmp24 :spotValue.1:result :spotValue.2:result
+  841 op add *tmp25 :spotValue:result *tmp24
+  842 op add *tmp27 *tmp24 :spotValue.3:result
+  843 op add *tmp28 :spotValue.2:result :spotValue.3:result
+  844 op add *tmp29 *tmp28 :spotValue.4:result
+  845 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  846 jump *label478 always
+  847 jump *label476 always
+  848 label *label473
+  849 op sub :spotValue.5:x :computeRowValues:x 3
+  850 set :spotValue.5:y :computeRowValues:y
+  851 set :spotValue.5:ore :computeRowValues:ore
+  852 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
+  853 select value equal floor :spotValue.5:ore 0.00392156862745098 0
+  854 sensor solid type @solid
+  855 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
+  856 label *label474
+  857 op add :spotValue.6:x :computeRowValues:x 3
+  858 set :spotValue.6:y :computeRowValues:y
+  859 set :spotValue.6:ore :computeRowValues:ore
+  860 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
+  861 select value equal floor :spotValue.6:ore 0.00392156862745098 0
+  862 sensor solid type @solid
+  863 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
+  864 label *label475
+  865 op add *tmp35 :spotValue:result :spotValue.1:result
+  866 op add *tmp36 *tmp35 :spotValue.2:result
+  867 op add *tmp37 :spotValue.5:result *tmp36
+  868 op min *tmp38 0.09803921568627451 *tmp37
+  869 op add *tmp41 *tmp36 :spotValue.3:result
+  870 op min *tmp42 0.09803921568627451 *tmp41
+  871 op add *tmp43 :spotValue.2:result :spotValue.3:result
+  872 op add *tmp44 *tmp43 :spotValue.4:result
+  873 op add *tmp45 :spotValue.1:result *tmp44
+  874 op min *tmp46 0.09803921568627451 *tmp45
+  875 op add *tmp49 *tmp44 :spotValue.6:result
+  876 op min *tmp50 0.09803921568627451 *tmp49
+  877 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  878 jump *label478 always
+  879 label *label476
+  880 label *label477
+  881 label *label478
   882 set :findBestPosition:y2 :computeRowValues*retval
   883 set :computeRowValues:x :findBestPosition:x
   884 set :computeRowValues:y :findBestPosition:y

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   787 set :computeRowValues:ore :findBestPosition:ore
   788 set :computeRowValues:size :findBestPosition:size
   789 label *label466
-    * op sub :spotValue:x :computeRowValues:x 2
-    * set :spotValue:y :computeRowValues:y
-    * set :spotValue:ore :computeRowValues:ore
+  790 op sub :spotValue:x :findBestPosition:x 2
+  791 set :spotValue:y *tmp54
+  792 set :spotValue:ore :findBestPosition:ore
   793 ucontrol getBlock :spotValue:x :spotValue:y type building floor
   794 select value equal floor :spotValue:ore 0.00392156862745098 0
   795 sensor solid type @solid
   796 select :spotValue:result notEqual solid false 0.09803921568627451 value
   797 label *label467
-    * op sub :spotValue.1:x :computeRowValues:x 1
-    * set :spotValue.1:y :computeRowValues:y
-    * set :spotValue.1:ore :computeRowValues:ore
+  798 op sub :spotValue.1:x :findBestPosition:x 1
+  799 set :spotValue.1:y *tmp54
+  800 set :spotValue.1:ore :findBestPosition:ore
   801 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
   802 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   803 sensor solid type @solid
   804 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
   805 label *label468
-    * set :spotValue.2:x :computeRowValues:x
-    * set :spotValue.2:y :computeRowValues:y
-    * set :spotValue.2:ore :computeRowValues:ore
+  806 set :spotValue.2:x :findBestPosition:x
+  807 set :spotValue.2:y *tmp54
+  808 set :spotValue.2:ore :findBestPosition:ore
   809 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
   810 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   811 sensor solid type @solid
   812 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
   813 label *label469
-    * op add :spotValue.3:x :computeRowValues:x 1
-    * set :spotValue.3:y :computeRowValues:y
-    * set :spotValue.3:ore :computeRowValues:ore
+  814 op add :spotValue.3:x :findBestPosition:x 1
+  815 set :spotValue.3:y *tmp54
+  816 set :spotValue.3:ore :findBestPosition:ore
   817 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
   818 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   819 sensor solid type @solid
   820 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
   821 label *label470
-    * op add :spotValue.4:x :computeRowValues:x 2
-    * set :spotValue.4:y :computeRowValues:y
-    * set :spotValue.4:ore :computeRowValues:ore
+  822 op add :spotValue.4:x :findBestPosition:x 2
+  823 set :spotValue.4:y *tmp54
+  824 set :spotValue.4:ore :findBestPosition:ore
   825 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
   826 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   827 sensor solid type @solid
   828 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
   829 label *label471
-    * jump *label472 notEqual :computeRowValues:size 2
+  830 jump *label472 notEqual :findBestPosition:size 2
   831 op add *tmp17 :spotValue:result :spotValue.1:result
   832 op add *tmp18 :spotValue.1:result :spotValue.2:result
   833 op add *tmp19 :spotValue.2:result :spotValue.3:result
 
   836 jump *label478 always
   837 jump *label477 always
   838 label *label472
-    * jump *label473 notEqual :computeRowValues:size 3
+  839 jump *label473 notEqual :findBestPosition:size 3
   840 op add *tmp24 :spotValue.1:result :spotValue.2:result
   841 op add *tmp25 :spotValue:result *tmp24
   842 op add *tmp27 *tmp24 :spotValue.3:result
 
   846 jump *label478 always
   847 jump *label476 always
   848 label *label473
-    * op sub :spotValue.5:x :computeRowValues:x 3
-    * set :spotValue.5:y :computeRowValues:y
-    * set :spotValue.5:ore :computeRowValues:ore
+  849 op sub :spotValue.5:x :findBestPosition:x 3
+  850 set :spotValue.5:y *tmp54
+  851 set :spotValue.5:ore :findBestPosition:ore
   852 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
   853 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   854 sensor solid type @solid
   855 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
   856 label *label474
-    * op add :spotValue.6:x :computeRowValues:x 3
-    * set :spotValue.6:y :computeRowValues:y
-    * set :spotValue.6:ore :computeRowValues:ore
+  857 op add :spotValue.6:x :findBestPosition:x 3
+  858 set :spotValue.6:y *tmp54
+  859 set :spotValue.6:ore :findBestPosition:ore
   860 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
   861 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   862 sensor solid type @solid

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   782 label *label465
   783 set :findBestPosition:y1 :computeRowValues*retval
   784 op sub *tmp54 :findBestPosition:y 1
-    * set :computeRowValues:x :findBestPosition:x
-    * set :computeRowValues:y *tmp54
-    * set :computeRowValues:ore :findBestPosition:ore
-    * set :computeRowValues:size :findBestPosition:size
   785 label *label466
   786 op sub :spotValue:x :findBestPosition:x 2
   787 set :spotValue:y *tmp54

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-5 instructions):
 
   584 label *label452
   585 label *label8
   586 set :createTerrainMask*retval :createTerrainMask:result
-    * jump *label5 always
   587 label *label5
   588 set :createTerrainMask*finished true
   589 jump *label4 always
 
   677 op add *tmp49 *tmp44 :spotValue.6:result
   678 op min *tmp50 0.09803921568627451 *tmp49
   679 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
-    * jump *label13 always
   680 label *label22
   681 label *label20
   682 label *label13
 
   774 op add *tmp49 *tmp44 :spotValue.6:result
   775 op min *tmp50 0.09803921568627451 *tmp49
   776 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
-    * jump *label465 always
   777 label *label463
   778 label *label464
   779 label *label465
 
   868 op add *tmp49 *tmp44 :spotValue.6:result
   869 op min *tmp50 0.09803921568627451 *tmp49
   870 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
-    * jump *label478 always
   871 label *label476
   872 label *label477
   873 label *label478
 
  1376 label *label118
  1377 label *label32
  1378 op mul :findBestPosition*retval :findBestPosition:best 255
-    * jump *label25 always
  1379 label *label25
  1380 set :findBestPosition*finished true
  1381 jump *label4 always

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    20 sensor solid type @solid
    21 select :isSolid:result notEqual solid false 1 0
    22 label *label281
-    * op or :createTerrainMask:result 0 :isSolid:result
+   23 set :createTerrainMask:result :isSolid:result
    24 label *label282
    25 label *label283
    26 op shl *tmp0 :createTerrainMask:result 1
 
    46 label *label288
    47 label *label289
    48 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+   49 set *tmp1 :createTerrainMask:x
    50 set :isSolid:x *tmp1
    51 set :isSolid:y *tmp2
    52 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   128 label *label313
   129 label *label314
   130 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  131 set *tmp1 :createTerrainMask:x
   132 set :isSolid:x *tmp1
   133 set :isSolid:y *tmp2
   134 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   210 label *label338
   211 label *label339
   212 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  213 set *tmp1 :createTerrainMask:x
   214 set :isSolid:x *tmp1
   215 set :isSolid:y *tmp2
   216 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   255 label *label351
   256 label *label352
   257 label *label353
-    * op add *tmp2 :createTerrainMask:y 0
+  258 set *tmp2 :createTerrainMask:y
   259 label *label354
   260 label *label355
   261 op shl *tmp0 :createTerrainMask:result 1
 
   292 label *label363
   293 label *label364
   294 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  295 set *tmp1 :createTerrainMask:x
   296 set :isSolid:x *tmp1
   297 set :isSolid:y *tmp2
   298 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   374 label *label388
   375 label *label389
   376 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  377 set *tmp1 :createTerrainMask:x
   378 set :isSolid:x *tmp1
   379 set :isSolid:y *tmp2
   380 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   456 label *label413
   457 label *label414
   458 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  459 set *tmp1 :createTerrainMask:x
   460 set :isSolid:x *tmp1
   461 set :isSolid:y *tmp2
   462 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   538 label *label438
   539 label *label439
   540 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 0
+  541 set *tmp1 :createTerrainMask:x
   542 set :isSolid:x *tmp1
   543 set :isSolid:y *tmp2
   544 ucontrol getBlock :isSolid:x :isSolid:y type building floor

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-52 instructions):
 
    13 op add *tmp2 :createTerrainMask:y 3
    14 label *label279
    15 label *label280
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+   16 op add :isSolid:x :createTerrainMask:x 3
    17 set :isSolid:y *tmp2
    18 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    19 sensor solid type @solid
 
    23 label *label282
    24 label *label283
    25 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+   26 op add :isSolid:x :createTerrainMask:x 2
    27 set :isSolid:y *tmp2
    28 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    29 sensor solid type @solid
 
    33 label *label285
    34 label *label286
    35 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+   36 op add :isSolid:x :createTerrainMask:x 1
    37 set :isSolid:y *tmp2
    38 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    39 sensor solid type @solid
 
    43 label *label288
    44 label *label289
    45 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+   46 set :isSolid:x :createTerrainMask:x
    47 set :isSolid:y *tmp2
    48 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    49 sensor solid type @solid
 
    53 label *label291
    54 label *label292
    55 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+   56 op add :isSolid:x :createTerrainMask:x -1
    57 set :isSolid:y *tmp2
    58 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    59 sensor solid type @solid
 
    63 label *label294
    64 label *label295
    65 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+   66 op add :isSolid:x :createTerrainMask:x -2
    67 set :isSolid:y *tmp2
    68 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    69 sensor solid type @solid
 
    73 label *label297
    74 label *label298
    75 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+   76 op add :isSolid:x :createTerrainMask:x -3
    77 set :isSolid:y *tmp2
    78 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    79 sensor solid type @solid
 
    88 label *label304
    89 label *label305
    90 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+   91 op add :isSolid:x :createTerrainMask:x 3
    92 set :isSolid:y *tmp2
    93 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    94 sensor solid type @solid
 
    98 label *label307
    99 label *label308
   100 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  101 op add :isSolid:x :createTerrainMask:x 2
   102 set :isSolid:y *tmp2
   103 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   104 sensor solid type @solid
 
   108 label *label310
   109 label *label311
   110 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  111 op add :isSolid:x :createTerrainMask:x 1
   112 set :isSolid:y *tmp2
   113 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   114 sensor solid type @solid
 
   118 label *label313
   119 label *label314
   120 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  121 set :isSolid:x :createTerrainMask:x
   122 set :isSolid:y *tmp2
   123 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   124 sensor solid type @solid
 
   128 label *label316
   129 label *label317
   130 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  131 op add :isSolid:x :createTerrainMask:x -1
   132 set :isSolid:y *tmp2
   133 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   134 sensor solid type @solid
 
   138 label *label319
   139 label *label320
   140 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  141 op add :isSolid:x :createTerrainMask:x -2
   142 set :isSolid:y *tmp2
   143 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   144 sensor solid type @solid
 
   148 label *label322
   149 label *label323
   150 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  151 op add :isSolid:x :createTerrainMask:x -3
   152 set :isSolid:y *tmp2
   153 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   154 sensor solid type @solid
 
   163 label *label329
   164 label *label330
   165 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+  166 op add :isSolid:x :createTerrainMask:x 3
   167 set :isSolid:y *tmp2
   168 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   169 sensor solid type @solid
 
   173 label *label332
   174 label *label333
   175 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  176 op add :isSolid:x :createTerrainMask:x 2
   177 set :isSolid:y *tmp2
   178 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   179 sensor solid type @solid
 
   183 label *label335
   184 label *label336
   185 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  186 op add :isSolid:x :createTerrainMask:x 1
   187 set :isSolid:y *tmp2
   188 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   189 sensor solid type @solid
 
   193 label *label338
   194 label *label339
   195 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  196 set :isSolid:x :createTerrainMask:x
   197 set :isSolid:y *tmp2
   198 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   199 sensor solid type @solid
 
   203 label *label341
   204 label *label342
   205 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  206 op add :isSolid:x :createTerrainMask:x -1
   207 set :isSolid:y *tmp2
   208 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   209 sensor solid type @solid
 
   213 label *label344
   214 label *label345
   215 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  216 op add :isSolid:x :createTerrainMask:x -2
   217 set :isSolid:y *tmp2
   218 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   219 sensor solid type @solid
 
   223 label *label347
   224 label *label348
   225 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  226 op add :isSolid:x :createTerrainMask:x -3
   227 set :isSolid:y *tmp2
   228 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   229 sensor solid type @solid
 
   238 label *label354
   239 label *label355
   240 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+  241 op add :isSolid:x :createTerrainMask:x 3
   242 set :isSolid:y *tmp2
   243 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   244 sensor solid type @solid
 
   248 label *label357
   249 label *label358
   250 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  251 op add :isSolid:x :createTerrainMask:x 2
   252 set :isSolid:y *tmp2
   253 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   254 sensor solid type @solid
 
   258 label *label360
   259 label *label361
   260 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  261 op add :isSolid:x :createTerrainMask:x 1
   262 set :isSolid:y *tmp2
   263 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   264 sensor solid type @solid
 
   268 label *label363
   269 label *label364
   270 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  271 set :isSolid:x :createTerrainMask:x
   272 set :isSolid:y *tmp2
   273 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   274 sensor solid type @solid
 
   278 label *label366
   279 label *label367
   280 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  281 op add :isSolid:x :createTerrainMask:x -1
   282 set :isSolid:y *tmp2
   283 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   284 sensor solid type @solid
 
   288 label *label369
   289 label *label370
   290 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  291 op add :isSolid:x :createTerrainMask:x -2
   292 set :isSolid:y *tmp2
   293 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   294 sensor solid type @solid
 
   298 label *label372
   299 label *label373
   300 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  301 op add :isSolid:x :createTerrainMask:x -3
   302 set :isSolid:y *tmp2
   303 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   304 sensor solid type @solid
 
   313 label *label379
   314 label *label380
   315 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+  316 op add :isSolid:x :createTerrainMask:x 3
   317 set :isSolid:y *tmp2
   318 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   319 sensor solid type @solid
 
   323 label *label382
   324 label *label383
   325 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  326 op add :isSolid:x :createTerrainMask:x 2
   327 set :isSolid:y *tmp2
   328 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   329 sensor solid type @solid
 
   333 label *label385
   334 label *label386
   335 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  336 op add :isSolid:x :createTerrainMask:x 1
   337 set :isSolid:y *tmp2
   338 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   339 sensor solid type @solid
 
   343 label *label388
   344 label *label389
   345 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  346 set :isSolid:x :createTerrainMask:x
   347 set :isSolid:y *tmp2
   348 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   349 sensor solid type @solid
 
   353 label *label391
   354 label *label392
   355 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  356 op add :isSolid:x :createTerrainMask:x -1
   357 set :isSolid:y *tmp2
   358 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   359 sensor solid type @solid
 
   363 label *label394
   364 label *label395
   365 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  366 op add :isSolid:x :createTerrainMask:x -2
   367 set :isSolid:y *tmp2
   368 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   369 sensor solid type @solid
 
   373 label *label397
   374 label *label398
   375 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  376 op add :isSolid:x :createTerrainMask:x -3
   377 set :isSolid:y *tmp2
   378 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   379 sensor solid type @solid
 
   388 label *label404
   389 label *label405
   390 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+  391 op add :isSolid:x :createTerrainMask:x 3
   392 set :isSolid:y *tmp2
   393 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   394 sensor solid type @solid
 
   398 label *label407
   399 label *label408
   400 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  401 op add :isSolid:x :createTerrainMask:x 2
   402 set :isSolid:y *tmp2
   403 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   404 sensor solid type @solid
 
   408 label *label410
   409 label *label411
   410 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  411 op add :isSolid:x :createTerrainMask:x 1
   412 set :isSolid:y *tmp2
   413 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   414 sensor solid type @solid
 
   418 label *label413
   419 label *label414
   420 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  421 set :isSolid:x :createTerrainMask:x
   422 set :isSolid:y *tmp2
   423 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   424 sensor solid type @solid
 
   428 label *label416
   429 label *label417
   430 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  431 op add :isSolid:x :createTerrainMask:x -1
   432 set :isSolid:y *tmp2
   433 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   434 sensor solid type @solid
 
   438 label *label419
   439 label *label420
   440 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  441 op add :isSolid:x :createTerrainMask:x -2
   442 set :isSolid:y *tmp2
   443 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   444 sensor solid type @solid
 
   448 label *label422
   449 label *label423
   450 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  451 op add :isSolid:x :createTerrainMask:x -3
   452 set :isSolid:y *tmp2
   453 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   454 sensor solid type @solid
 
   463 label *label429
   464 label *label430
   465 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 3
-    * set :isSolid:x *tmp1
+  466 op add :isSolid:x :createTerrainMask:x 3
   467 set :isSolid:y *tmp2
   468 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   469 sensor solid type @solid
 
   473 label *label432
   474 label *label433
   475 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 2
-    * set :isSolid:x *tmp1
+  476 op add :isSolid:x :createTerrainMask:x 2
   477 set :isSolid:y *tmp2
   478 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   479 sensor solid type @solid
 
   483 label *label435
   484 label *label436
   485 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x 1
-    * set :isSolid:x *tmp1
+  486 op add :isSolid:x :createTerrainMask:x 1
   487 set :isSolid:y *tmp2
   488 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   489 sensor solid type @solid
 
   493 label *label438
   494 label *label439
   495 op shl *tmp0 :createTerrainMask:result 1
-    * set *tmp1 :createTerrainMask:x
-    * set :isSolid:x *tmp1
+  496 set :isSolid:x :createTerrainMask:x
   497 set :isSolid:y *tmp2
   498 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   499 sensor solid type @solid
 
   503 label *label441
   504 label *label442
   505 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -1
-    * set :isSolid:x *tmp1
+  506 op add :isSolid:x :createTerrainMask:x -1
   507 set :isSolid:y *tmp2
   508 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   509 sensor solid type @solid
 
   513 label *label444
   514 label *label445
   515 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -2
-    * set :isSolid:x *tmp1
+  516 op add :isSolid:x :createTerrainMask:x -2
   517 set :isSolid:y *tmp2
   518 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   519 sensor solid type @solid
 
   523 label *label447
   524 label *label448
   525 op shl *tmp0 :createTerrainMask:result 1
-    * op add *tmp1 :createTerrainMask:x -3
-    * set :isSolid:x *tmp1
+  526 op add :isSolid:x :createTerrainMask:x -3
   527 set :isSolid:y *tmp2
   528 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   529 sensor solid type @solid
   530 select :isSolid:result notEqual solid false 1 0
   531 label *label449
-    * op or :createTerrainMask:result *tmp0 :isSolid:result
+  532 op or :createTerrainMask*retval *tmp0 :isSolid:result
   533 label *label450
   534 label *label451
   535 label *label452
   536 label *label8
-    * set :createTerrainMask*retval :createTerrainMask:result
   537 label *label5
   538 set :createTerrainMask*finished true
   539 jump *label4 always
 
   681 op add *tmp18 :spotValue.1:result :spotValue.2:result
   682 op add *tmp19 :spotValue.2:result :spotValue.3:result
   683 op add *tmp20 :spotValue.3:result :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  684 packcolor :findBestPosition:y1 *tmp17 *tmp18 *tmp19 *tmp20
   685 jump *label465 always
   686 jump *label464 always
   687 label *label459
 
   691 op add *tmp27 *tmp24 :spotValue.3:result
   692 op add *tmp28 :spotValue.2:result :spotValue.3:result
   693 op add *tmp29 *tmp28 :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  694 packcolor :findBestPosition:y1 *tmp25 *tmp27 *tmp29 0
   695 jump *label465 always
   696 jump *label463 always
   697 label *label460
 
   723 op min *tmp46 0.09803921568627451 *tmp45
   724 op add *tmp49 *tmp44 :spotValue.6:result
   725 op min *tmp50 0.09803921568627451 *tmp49
-    * packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  726 packcolor :findBestPosition:y1 *tmp38 *tmp42 *tmp46 *tmp50
   727 label *label463
   728 label *label464
   729 label *label465
-    * set :findBestPosition:y1 :computeRowValues*retval
   730 op sub *tmp54 :findBestPosition:y 1
   731 label *label466
   732 op sub :spotValue:x :findBestPosition:x 2
 
   774 op add *tmp18 :spotValue.1:result :spotValue.2:result
   775 op add *tmp19 :spotValue.2:result :spotValue.3:result
   776 op add *tmp20 :spotValue.3:result :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  777 packcolor :findBestPosition:y2 *tmp17 *tmp18 *tmp19 *tmp20
   778 jump *label478 always
   779 jump *label477 always
   780 label *label472
 
   784 op add *tmp27 *tmp24 :spotValue.3:result
   785 op add *tmp28 :spotValue.2:result :spotValue.3:result
   786 op add *tmp29 *tmp28 :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  787 packcolor :findBestPosition:y2 *tmp25 *tmp27 *tmp29 0
   788 jump *label478 always
   789 jump *label476 always
   790 label *label473
 
   816 op min *tmp46 0.09803921568627451 *tmp45
   817 op add *tmp49 *tmp44 :spotValue.6:result
   818 op min *tmp50 0.09803921568627451 *tmp49
-    * packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  819 packcolor :findBestPosition:y2 *tmp38 *tmp42 *tmp46 *tmp50
   820 label *label476
   821 label *label477
   822 label *label478
-    * set :findBestPosition:y2 :computeRowValues*retval
   823 set :computeRowValues:x :findBestPosition:x
   824 set :computeRowValues:y :findBestPosition:y
   825 set :computeRowValues:ore :findBestPosition:ore

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
    22 set :createTerrainMask:result :isSolid:result
    23 label *label282
    24 label *label283
-    * op shl *tmp0 :createTerrainMask:result 1
+   25 op shl *tmp0 :isSolid:result 1
    26 op add :isSolid:x :createTerrainMask:x 2
    27 set :isSolid:y *tmp2
    28 ucontrol getBlock :isSolid:x :isSolid:y type building floor
 
   239 label *label355
   240 op shl *tmp0 :createTerrainMask:result 1
   241 op add :isSolid:x :createTerrainMask:x 3
-    * set :isSolid:y *tmp2
+  242 set :isSolid:y :createTerrainMask:y
   243 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   244 sensor solid type @solid
   245 select :isSolid:result notEqual solid false 1 0
 
   249 label *label358
   250 op shl *tmp0 :createTerrainMask:result 1
   251 op add :isSolid:x :createTerrainMask:x 2
-    * set :isSolid:y *tmp2
+  252 set :isSolid:y :createTerrainMask:y
   253 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   254 sensor solid type @solid
   255 select :isSolid:result notEqual solid false 1 0
 
   259 label *label361
   260 op shl *tmp0 :createTerrainMask:result 1
   261 op add :isSolid:x :createTerrainMask:x 1
-    * set :isSolid:y *tmp2
+  262 set :isSolid:y :createTerrainMask:y
   263 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   264 sensor solid type @solid
   265 select :isSolid:result notEqual solid false 1 0
 
   269 label *label364
   270 op shl *tmp0 :createTerrainMask:result 1
   271 set :isSolid:x :createTerrainMask:x
-    * set :isSolid:y *tmp2
+  272 set :isSolid:y :createTerrainMask:y
   273 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   274 sensor solid type @solid
   275 select :isSolid:result notEqual solid false 1 0
 
   279 label *label367
   280 op shl *tmp0 :createTerrainMask:result 1
   281 op add :isSolid:x :createTerrainMask:x -1
-    * set :isSolid:y *tmp2
+  282 set :isSolid:y :createTerrainMask:y
   283 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   284 sensor solid type @solid
   285 select :isSolid:result notEqual solid false 1 0
 
   289 label *label370
   290 op shl *tmp0 :createTerrainMask:result 1
   291 op add :isSolid:x :createTerrainMask:x -2
-    * set :isSolid:y *tmp2
+  292 set :isSolid:y :createTerrainMask:y
   293 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   294 sensor solid type @solid
   295 select :isSolid:result notEqual solid false 1 0
 
   299 label *label373
   300 op shl *tmp0 :createTerrainMask:result 1
   301 op add :isSolid:x :createTerrainMask:x -3
-    * set :isSolid:y *tmp2
+  302 set :isSolid:y :createTerrainMask:y
   303 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   304 sensor solid type @solid
   305 select :isSolid:result notEqual solid false 1 0

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
    19 sensor solid type @solid
    20 select :isSolid:result notEqual solid false 1 0
    21 label *label281
-    * set :createTerrainMask:result :isSolid:result
    22 label *label282
    23 label *label283
    24 op shl *tmp0 :isSolid:result 1
 
   233 label *label351
   234 label *label352
   235 label *label353
-    * set *tmp2 :createTerrainMask:y
   236 label *label354
   237 label *label355
   238 op shl *tmp0 :createTerrainMask:result 1

Modifications by Inline function call at line 164:14 (+77 instructions):
 
   822 set :computeRowValues:y :findBestPosition:y
   823 set :computeRowValues:ore :findBestPosition:ore
   824 set :computeRowValues:size :findBestPosition:size
-    * setaddr :computeRowValues*retaddr *label28 (h:*label28)
-    * call *label2 *invalid :computeRowValues*retval (m:*label28) (h:*label28)
-    * label *label28
+  825 label *label479
+  826 op sub :spotValue:x :computeRowValues:x 2
+  827 set :spotValue:y :computeRowValues:y
+  828 set :spotValue:ore :computeRowValues:ore
+  829 ucontrol getBlock :spotValue:x :spotValue:y type building floor
+  830 select value equal floor :spotValue:ore 0.00392156862745098 0
+  831 sensor solid type @solid
+  832 select :spotValue:result notEqual solid false 0.09803921568627451 value
+  833 label *label480
+  834 op sub :spotValue.1:x :computeRowValues:x 1
+  835 set :spotValue.1:y :computeRowValues:y
+  836 set :spotValue.1:ore :computeRowValues:ore
+  837 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
+  838 select value equal floor :spotValue.1:ore 0.00392156862745098 0
+  839 sensor solid type @solid
+  840 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
+  841 label *label481
+  842 set :spotValue.2:x :computeRowValues:x
+  843 set :spotValue.2:y :computeRowValues:y
+  844 set :spotValue.2:ore :computeRowValues:ore
+  845 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
+  846 select value equal floor :spotValue.2:ore 0.00392156862745098 0
+  847 sensor solid type @solid
+  848 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
+  849 label *label482
+  850 op add :spotValue.3:x :computeRowValues:x 1
+  851 set :spotValue.3:y :computeRowValues:y
+  852 set :spotValue.3:ore :computeRowValues:ore
+  853 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
+  854 select value equal floor :spotValue.3:ore 0.00392156862745098 0
+  855 sensor solid type @solid
+  856 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
+  857 label *label483
+  858 op add :spotValue.4:x :computeRowValues:x 2
+  859 set :spotValue.4:y :computeRowValues:y
+  860 set :spotValue.4:ore :computeRowValues:ore
+  861 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
+  862 select value equal floor :spotValue.4:ore 0.00392156862745098 0
+  863 sensor solid type @solid
+  864 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
+  865 label *label484
+  866 jump *label485 notEqual :computeRowValues:size 2
+  867 op add *tmp17 :spotValue:result :spotValue.1:result
+  868 op add *tmp18 :spotValue.1:result :spotValue.2:result
+  869 op add *tmp19 :spotValue.2:result :spotValue.3:result
+  870 op add *tmp20 :spotValue.3:result :spotValue.4:result
+  871 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  872 jump *label491 always
+  873 jump *label490 always
+  874 label *label485
+  875 jump *label486 notEqual :computeRowValues:size 3
+  876 op add *tmp24 :spotValue.1:result :spotValue.2:result
+  877 op add *tmp25 :spotValue:result *tmp24
+  878 op add *tmp27 *tmp24 :spotValue.3:result
+  879 op add *tmp28 :spotValue.2:result :spotValue.3:result
+  880 op add *tmp29 *tmp28 :spotValue.4:result
+  881 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  882 jump *label491 always
+  883 jump *label489 always
+  884 label *label486
+  885 op sub :spotValue.5:x :computeRowValues:x 3
+  886 set :spotValue.5:y :computeRowValues:y
+  887 set :spotValue.5:ore :computeRowValues:ore
+  888 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
+  889 select value equal floor :spotValue.5:ore 0.00392156862745098 0
+  890 sensor solid type @solid
+  891 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
+  892 label *label487
+  893 op add :spotValue.6:x :computeRowValues:x 3
+  894 set :spotValue.6:y :computeRowValues:y
+  895 set :spotValue.6:ore :computeRowValues:ore
+  896 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
+  897 select value equal floor :spotValue.6:ore 0.00392156862745098 0
+  898 sensor solid type @solid
+  899 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
+  900 label *label488
+  901 op add *tmp35 :spotValue:result :spotValue.1:result
+  902 op add *tmp36 *tmp35 :spotValue.2:result
+  903 op add *tmp37 :spotValue.5:result *tmp36
+  904 op min *tmp38 0.09803921568627451 *tmp37
+  905 op add *tmp41 *tmp36 :spotValue.3:result
+  906 op min *tmp42 0.09803921568627451 *tmp41
+  907 op add *tmp43 :spotValue.2:result :spotValue.3:result
+  908 op add *tmp44 *tmp43 :spotValue.4:result
+  909 op add *tmp45 :spotValue.1:result *tmp44
+  910 op min *tmp46 0.09803921568627451 *tmp45
+  911 op add *tmp49 *tmp44 :spotValue.6:result
+  912 op min *tmp50 0.09803921568627451 *tmp49
+  913 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  914 label *label489
+  915 label *label490
+  916 label *label491
   917 set :findBestPosition:y3 :computeRowValues*retval
   918 op add *tmp58 :findBestPosition:y 1
   919 set :computeRowValues:x :findBestPosition:x

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
   868 op add *tmp18 :spotValue.1:result :spotValue.2:result
   869 op add *tmp19 :spotValue.2:result :spotValue.3:result
   870 op add *tmp20 :spotValue.3:result :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
+  871 packcolor :findBestPosition:y3 *tmp17 *tmp18 *tmp19 *tmp20
   872 jump *label491 always
   873 jump *label490 always
   874 label *label485
 
   878 op add *tmp27 *tmp24 :spotValue.3:result
   879 op add *tmp28 :spotValue.2:result :spotValue.3:result
   880 op add *tmp29 *tmp28 :spotValue.4:result
-    * packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
+  881 packcolor :findBestPosition:y3 *tmp25 *tmp27 *tmp29 0
   882 jump *label491 always
   883 jump *label489 always
   884 label *label486
 
   910 op min *tmp46 0.09803921568627451 *tmp45
   911 op add *tmp49 *tmp44 :spotValue.6:result
   912 op min *tmp50 0.09803921568627451 *tmp49
-    * packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
+  913 packcolor :findBestPosition:y3 *tmp38 *tmp42 *tmp46 *tmp50
   914 label *label489
   915 label *label490
   916 label *label491
-    * set :findBestPosition:y3 :computeRowValues*retval
   917 op add *tmp58 :findBestPosition:y 1
   918 set :computeRowValues:x :findBestPosition:x
   919 set :computeRowValues:y *tmp58

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   823 set :computeRowValues:ore :findBestPosition:ore
   824 set :computeRowValues:size :findBestPosition:size
   825 label *label479
-    * op sub :spotValue:x :computeRowValues:x 2
-    * set :spotValue:y :computeRowValues:y
-    * set :spotValue:ore :computeRowValues:ore
+  826 op sub :spotValue:x :findBestPosition:x 2
+  827 set :spotValue:y :findBestPosition:y
+  828 set :spotValue:ore :findBestPosition:ore
   829 ucontrol getBlock :spotValue:x :spotValue:y type building floor
   830 select value equal floor :spotValue:ore 0.00392156862745098 0
   831 sensor solid type @solid
   832 select :spotValue:result notEqual solid false 0.09803921568627451 value
   833 label *label480
-    * op sub :spotValue.1:x :computeRowValues:x 1
-    * set :spotValue.1:y :computeRowValues:y
-    * set :spotValue.1:ore :computeRowValues:ore
+  834 op sub :spotValue.1:x :findBestPosition:x 1
+  835 set :spotValue.1:y :findBestPosition:y
+  836 set :spotValue.1:ore :findBestPosition:ore
   837 ucontrol getBlock :spotValue.1:x :spotValue.1:y type building floor
   838 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   839 sensor solid type @solid
   840 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
   841 label *label481
-    * set :spotValue.2:x :computeRowValues:x
-    * set :spotValue.2:y :computeRowValues:y
-    * set :spotValue.2:ore :computeRowValues:ore
+  842 set :spotValue.2:x :findBestPosition:x
+  843 set :spotValue.2:y :findBestPosition:y
+  844 set :spotValue.2:ore :findBestPosition:ore
   845 ucontrol getBlock :spotValue.2:x :spotValue.2:y type building floor
   846 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   847 sensor solid type @solid
   848 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
   849 label *label482
-    * op add :spotValue.3:x :computeRowValues:x 1
-    * set :spotValue.3:y :computeRowValues:y
-    * set :spotValue.3:ore :computeRowValues:ore
+  850 op add :spotValue.3:x :findBestPosition:x 1
+  851 set :spotValue.3:y :findBestPosition:y
+  852 set :spotValue.3:ore :findBestPosition:ore
   853 ucontrol getBlock :spotValue.3:x :spotValue.3:y type building floor
   854 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   855 sensor solid type @solid
   856 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
   857 label *label483
-    * op add :spotValue.4:x :computeRowValues:x 2
-    * set :spotValue.4:y :computeRowValues:y
-    * set :spotValue.4:ore :computeRowValues:ore
+  858 op add :spotValue.4:x :findBestPosition:x 2
+  859 set :spotValue.4:y :findBestPosition:y
+  860 set :spotValue.4:ore :findBestPosition:ore
   861 ucontrol getBlock :spotValue.4:x :spotValue.4:y type building floor
   862 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   863 sensor solid type @solid
   864 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
   865 label *label484
-    * jump *label485 notEqual :computeRowValues:size 2
+  866 jump *label485 notEqual :findBestPosition:size 2
   867 op add *tmp17 :spotValue:result :spotValue.1:result
   868 op add *tmp18 :spotValue.1:result :spotValue.2:result
   869 op add *tmp19 :spotValue.2:result :spotValue.3:result
 
   872 jump *label491 always
   873 jump *label490 always
   874 label *label485
-    * jump *label486 notEqual :computeRowValues:size 3
+  875 jump *label486 notEqual :findBestPosition:size 3
   876 op add *tmp24 :spotValue.1:result :spotValue.2:result
   877 op add *tmp25 :spotValue:result *tmp24
   878 op add *tmp27 *tmp24 :spotValue.3:result
 
   882 jump *label491 always
   883 jump *label489 always
   884 label *label486
-    * op sub :spotValue.5:x :computeRowValues:x 3
-    * set :spotValue.5:y :computeRowValues:y
-    * set :spotValue.5:ore :computeRowValues:ore
+  885 op sub :spotValue.5:x :findBestPosition:x 3
+  886 set :spotValue.5:y :findBestPosition:y
+  887 set :spotValue.5:ore :findBestPosition:ore
   888 ucontrol getBlock :spotValue.5:x :spotValue.5:y type building floor
   889 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   890 sensor solid type @solid
   891 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
   892 label *label487
-    * op add :spotValue.6:x :computeRowValues:x 3
-    * set :spotValue.6:y :computeRowValues:y
-    * set :spotValue.6:ore :computeRowValues:ore
+  893 op add :spotValue.6:x :findBestPosition:x 3
+  894 set :spotValue.6:y :findBestPosition:y
+  895 set :spotValue.6:ore :findBestPosition:ore
   896 ucontrol getBlock :spotValue.6:x :spotValue.6:y type building floor
   897 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   898 sensor solid type @solid

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-4 instructions):
 
   818 label *label476
   819 label *label477
   820 label *label478
-    * set :computeRowValues:x :findBestPosition:x
-    * set :computeRowValues:y :findBestPosition:y
-    * set :computeRowValues:ore :findBestPosition:ore
-    * set :computeRowValues:size :findBestPosition:size
   821 label *label479
   822 op sub :spotValue:x :findBestPosition:x 2
   823 set :spotValue:y :findBestPosition:y

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
     8 end
     9 label *label0
    10 ubind :createTerrainMask:unit
-    * label *label277
-    * label *label278
    11 op add *tmp2 :createTerrainMask:y 3
-    * label *label279
-    * label *label280
    12 op add :isSolid:x :createTerrainMask:x 3
    13 set :isSolid:y *tmp2
    14 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    15 sensor solid type @solid
    16 select :isSolid:result notEqual solid false 1 0
-    * label *label281
-    * label *label282
-    * label *label283
    17 op shl *tmp0 :isSolid:result 1
    18 op add :isSolid:x :createTerrainMask:x 2
    19 set :isSolid:y *tmp2
    20 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    21 sensor solid type @solid
    22 select :isSolid:result notEqual solid false 1 0
-    * label *label284
    23 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label285
-    * label *label286
    24 op shl *tmp0 :createTerrainMask:result 1
    25 op add :isSolid:x :createTerrainMask:x 1
    26 set :isSolid:y *tmp2
    27 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    28 sensor solid type @solid
    29 select :isSolid:result notEqual solid false 1 0
-    * label *label287
    30 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label288
-    * label *label289
    31 op shl *tmp0 :createTerrainMask:result 1
    32 set :isSolid:x :createTerrainMask:x
    33 set :isSolid:y *tmp2
    34 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    35 sensor solid type @solid
    36 select :isSolid:result notEqual solid false 1 0
-    * label *label290
    37 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label291
-    * label *label292
    38 op shl *tmp0 :createTerrainMask:result 1
    39 op add :isSolid:x :createTerrainMask:x -1
    40 set :isSolid:y *tmp2
    41 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    42 sensor solid type @solid
    43 select :isSolid:result notEqual solid false 1 0
-    * label *label293
    44 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label294
-    * label *label295
    45 op shl *tmp0 :createTerrainMask:result 1
    46 op add :isSolid:x :createTerrainMask:x -2
    47 set :isSolid:y *tmp2
    48 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    49 sensor solid type @solid
    50 select :isSolid:result notEqual solid false 1 0
-    * label *label296
    51 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label297
-    * label *label298
    52 op shl *tmp0 :createTerrainMask:result 1
    53 op add :isSolid:x :createTerrainMask:x -3
    54 set :isSolid:y *tmp2
    55 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    56 sensor solid type @solid
    57 select :isSolid:result notEqual solid false 1 0
-    * label *label299
    58 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label300
-    * label *label301
-    * label *label302
-    * label *label303
    59 op add *tmp2 :createTerrainMask:y 2
-    * label *label304
-    * label *label305
    60 op shl *tmp0 :createTerrainMask:result 1
    61 op add :isSolid:x :createTerrainMask:x 3
    62 set :isSolid:y *tmp2
    63 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    64 sensor solid type @solid
    65 select :isSolid:result notEqual solid false 1 0
-    * label *label306
    66 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label307
-    * label *label308
    67 op shl *tmp0 :createTerrainMask:result 1
    68 op add :isSolid:x :createTerrainMask:x 2
    69 set :isSolid:y *tmp2
    70 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    71 sensor solid type @solid
    72 select :isSolid:result notEqual solid false 1 0
-    * label *label309
    73 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label310
-    * label *label311
    74 op shl *tmp0 :createTerrainMask:result 1
    75 op add :isSolid:x :createTerrainMask:x 1
    76 set :isSolid:y *tmp2
    77 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    78 sensor solid type @solid
    79 select :isSolid:result notEqual solid false 1 0
-    * label *label312
    80 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label313
-    * label *label314
    81 op shl *tmp0 :createTerrainMask:result 1
    82 set :isSolid:x :createTerrainMask:x
    83 set :isSolid:y *tmp2
    84 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    85 sensor solid type @solid
    86 select :isSolid:result notEqual solid false 1 0
-    * label *label315
    87 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label316
-    * label *label317
    88 op shl *tmp0 :createTerrainMask:result 1
    89 op add :isSolid:x :createTerrainMask:x -1
    90 set :isSolid:y *tmp2
    91 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    92 sensor solid type @solid
    93 select :isSolid:result notEqual solid false 1 0
-    * label *label318
    94 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label319
-    * label *label320
    95 op shl *tmp0 :createTerrainMask:result 1
    96 op add :isSolid:x :createTerrainMask:x -2
    97 set :isSolid:y *tmp2
    98 ucontrol getBlock :isSolid:x :isSolid:y type building floor
    99 sensor solid type @solid
   100 select :isSolid:result notEqual solid false 1 0
-    * label *label321
   101 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label322
-    * label *label323
   102 op shl *tmp0 :createTerrainMask:result 1
   103 op add :isSolid:x :createTerrainMask:x -3
   104 set :isSolid:y *tmp2
   105 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   106 sensor solid type @solid
   107 select :isSolid:result notEqual solid false 1 0
-    * label *label324
   108 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label325
-    * label *label326
-    * label *label327
-    * label *label328
   109 op add *tmp2 :createTerrainMask:y 1
-    * label *label329
-    * label *label330
   110 op shl *tmp0 :createTerrainMask:result 1
   111 op add :isSolid:x :createTerrainMask:x 3
   112 set :isSolid:y *tmp2
   113 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   114 sensor solid type @solid
   115 select :isSolid:result notEqual solid false 1 0
-    * label *label331
   116 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label332
-    * label *label333
   117 op shl *tmp0 :createTerrainMask:result 1
   118 op add :isSolid:x :createTerrainMask:x 2
   119 set :isSolid:y *tmp2
   120 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   121 sensor solid type @solid
   122 select :isSolid:result notEqual solid false 1 0
-    * label *label334
   123 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label335
-    * label *label336
   124 op shl *tmp0 :createTerrainMask:result 1
   125 op add :isSolid:x :createTerrainMask:x 1
   126 set :isSolid:y *tmp2
   127 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   128 sensor solid type @solid
   129 select :isSolid:result notEqual solid false 1 0
-    * label *label337
   130 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label338
-    * label *label339
   131 op shl *tmp0 :createTerrainMask:result 1
   132 set :isSolid:x :createTerrainMask:x
   133 set :isSolid:y *tmp2
   134 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   135 sensor solid type @solid
   136 select :isSolid:result notEqual solid false 1 0
-    * label *label340
   137 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label341
-    * label *label342
   138 op shl *tmp0 :createTerrainMask:result 1
   139 op add :isSolid:x :createTerrainMask:x -1
   140 set :isSolid:y *tmp2
   141 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   142 sensor solid type @solid
   143 select :isSolid:result notEqual solid false 1 0
-    * label *label343
   144 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label344
-    * label *label345
   145 op shl *tmp0 :createTerrainMask:result 1
   146 op add :isSolid:x :createTerrainMask:x -2
   147 set :isSolid:y *tmp2
   148 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   149 sensor solid type @solid
   150 select :isSolid:result notEqual solid false 1 0
-    * label *label346
   151 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label347
-    * label *label348
   152 op shl *tmp0 :createTerrainMask:result 1
   153 op add :isSolid:x :createTerrainMask:x -3
   154 set :isSolid:y *tmp2
   155 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   156 sensor solid type @solid
   157 select :isSolid:result notEqual solid false 1 0
-    * label *label349
   158 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label350
-    * label *label351
-    * label *label352
-    * label *label353
-    * label *label354
-    * label *label355
   159 op shl *tmp0 :createTerrainMask:result 1
   160 op add :isSolid:x :createTerrainMask:x 3
   161 set :isSolid:y :createTerrainMask:y
   162 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   163 sensor solid type @solid
   164 select :isSolid:result notEqual solid false 1 0
-    * label *label356
   165 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label357
-    * label *label358
   166 op shl *tmp0 :createTerrainMask:result 1
   167 op add :isSolid:x :createTerrainMask:x 2
   168 set :isSolid:y :createTerrainMask:y
   169 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   170 sensor solid type @solid
   171 select :isSolid:result notEqual solid false 1 0
-    * label *label359
   172 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label360
-    * label *label361
   173 op shl *tmp0 :createTerrainMask:result 1
   174 op add :isSolid:x :createTerrainMask:x 1
   175 set :isSolid:y :createTerrainMask:y
   176 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   177 sensor solid type @solid
   178 select :isSolid:result notEqual solid false 1 0
-    * label *label362
   179 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label363
-    * label *label364
   180 op shl *tmp0 :createTerrainMask:result 1
   181 set :isSolid:x :createTerrainMask:x
   182 set :isSolid:y :createTerrainMask:y
   183 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   184 sensor solid type @solid
   185 select :isSolid:result notEqual solid false 1 0
-    * label *label365
   186 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label366
-    * label *label367
   187 op shl *tmp0 :createTerrainMask:result 1
   188 op add :isSolid:x :createTerrainMask:x -1
   189 set :isSolid:y :createTerrainMask:y
   190 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   191 sensor solid type @solid
   192 select :isSolid:result notEqual solid false 1 0
-    * label *label368
   193 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label369
-    * label *label370
   194 op shl *tmp0 :createTerrainMask:result 1
   195 op add :isSolid:x :createTerrainMask:x -2
   196 set :isSolid:y :createTerrainMask:y
   197 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   198 sensor solid type @solid
   199 select :isSolid:result notEqual solid false 1 0
-    * label *label371
   200 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label372
-    * label *label373
   201 op shl *tmp0 :createTerrainMask:result 1
   202 op add :isSolid:x :createTerrainMask:x -3
   203 set :isSolid:y :createTerrainMask:y
   204 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   205 sensor solid type @solid
   206 select :isSolid:result notEqual solid false 1 0
-    * label *label374
   207 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label375
-    * label *label376
-    * label *label377
-    * label *label378
   208 op add *tmp2 :createTerrainMask:y -1
-    * label *label379
-    * label *label380
   209 op shl *tmp0 :createTerrainMask:result 1
   210 op add :isSolid:x :createTerrainMask:x 3
   211 set :isSolid:y *tmp2
   212 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   213 sensor solid type @solid
   214 select :isSolid:result notEqual solid false 1 0
-    * label *label381
   215 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label382
-    * label *label383
   216 op shl *tmp0 :createTerrainMask:result 1
   217 op add :isSolid:x :createTerrainMask:x 2
   218 set :isSolid:y *tmp2
   219 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   220 sensor solid type @solid
   221 select :isSolid:result notEqual solid false 1 0
-    * label *label384
   222 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label385
-    * label *label386
   223 op shl *tmp0 :createTerrainMask:result 1
   224 op add :isSolid:x :createTerrainMask:x 1
   225 set :isSolid:y *tmp2
   226 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   227 sensor solid type @solid
   228 select :isSolid:result notEqual solid false 1 0
-    * label *label387
   229 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label388
-    * label *label389
   230 op shl *tmp0 :createTerrainMask:result 1
   231 set :isSolid:x :createTerrainMask:x
   232 set :isSolid:y *tmp2
   233 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   234 sensor solid type @solid
   235 select :isSolid:result notEqual solid false 1 0
-    * label *label390
   236 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label391
-    * label *label392
   237 op shl *tmp0 :createTerrainMask:result 1
   238 op add :isSolid:x :createTerrainMask:x -1
   239 set :isSolid:y *tmp2
   240 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   241 sensor solid type @solid
   242 select :isSolid:result notEqual solid false 1 0
-    * label *label393
   243 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label394
-    * label *label395
   244 op shl *tmp0 :createTerrainMask:result 1
   245 op add :isSolid:x :createTerrainMask:x -2
   246 set :isSolid:y *tmp2
   247 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   248 sensor solid type @solid
   249 select :isSolid:result notEqual solid false 1 0
-    * label *label396
   250 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label397
-    * label *label398
   251 op shl *tmp0 :createTerrainMask:result 1
   252 op add :isSolid:x :createTerrainMask:x -3
   253 set :isSolid:y *tmp2
   254 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   255 sensor solid type @solid
   256 select :isSolid:result notEqual solid false 1 0
-    * label *label399
   257 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label400
-    * label *label401
-    * label *label402
-    * label *label403
   258 op add *tmp2 :createTerrainMask:y -2
-    * label *label404
-    * label *label405
   259 op shl *tmp0 :createTerrainMask:result 1
   260 op add :isSolid:x :createTerrainMask:x 3
   261 set :isSolid:y *tmp2
   262 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   263 sensor solid type @solid
   264 select :isSolid:result notEqual solid false 1 0
-    * label *label406
   265 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label407
-    * label *label408
   266 op shl *tmp0 :createTerrainMask:result 1
   267 op add :isSolid:x :createTerrainMask:x 2
   268 set :isSolid:y *tmp2
   269 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   270 sensor solid type @solid
   271 select :isSolid:result notEqual solid false 1 0
-    * label *label409
   272 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label410
-    * label *label411
   273 op shl *tmp0 :createTerrainMask:result 1
   274 op add :isSolid:x :createTerrainMask:x 1
   275 set :isSolid:y *tmp2
   276 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   277 sensor solid type @solid
   278 select :isSolid:result notEqual solid false 1 0
-    * label *label412
   279 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label413
-    * label *label414
   280 op shl *tmp0 :createTerrainMask:result 1
   281 set :isSolid:x :createTerrainMask:x
   282 set :isSolid:y *tmp2
   283 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   284 sensor solid type @solid
   285 select :isSolid:result notEqual solid false 1 0
-    * label *label415
   286 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label416
-    * label *label417
   287 op shl *tmp0 :createTerrainMask:result 1
   288 op add :isSolid:x :createTerrainMask:x -1
   289 set :isSolid:y *tmp2
   290 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   291 sensor solid type @solid
   292 select :isSolid:result notEqual solid false 1 0
-    * label *label418
   293 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label419
-    * label *label420
   294 op shl *tmp0 :createTerrainMask:result 1
   295 op add :isSolid:x :createTerrainMask:x -2
   296 set :isSolid:y *tmp2
   297 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   298 sensor solid type @solid
   299 select :isSolid:result notEqual solid false 1 0
-    * label *label421
   300 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label422
-    * label *label423
   301 op shl *tmp0 :createTerrainMask:result 1
   302 op add :isSolid:x :createTerrainMask:x -3
   303 set :isSolid:y *tmp2
   304 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   305 sensor solid type @solid
   306 select :isSolid:result notEqual solid false 1 0
-    * label *label424
   307 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label425
-    * label *label426
-    * label *label427
-    * label *label428
   308 op add *tmp2 :createTerrainMask:y -3
-    * label *label429
-    * label *label430
   309 op shl *tmp0 :createTerrainMask:result 1
   310 op add :isSolid:x :createTerrainMask:x 3
   311 set :isSolid:y *tmp2
   312 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   313 sensor solid type @solid
   314 select :isSolid:result notEqual solid false 1 0
-    * label *label431
   315 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label432
-    * label *label433
   316 op shl *tmp0 :createTerrainMask:result 1
   317 op add :isSolid:x :createTerrainMask:x 2
   318 set :isSolid:y *tmp2
   319 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   320 sensor solid type @solid
   321 select :isSolid:result notEqual solid false 1 0
-    * label *label434
   322 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label435
-    * label *label436
   323 op shl *tmp0 :createTerrainMask:result 1
   324 op add :isSolid:x :createTerrainMask:x 1
   325 set :isSolid:y *tmp2
   326 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   327 sensor solid type @solid
   328 select :isSolid:result notEqual solid false 1 0
-    * label *label437
   329 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label438
-    * label *label439
   330 op shl *tmp0 :createTerrainMask:result 1
   331 set :isSolid:x :createTerrainMask:x
   332 set :isSolid:y *tmp2
   333 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   334 sensor solid type @solid
   335 select :isSolid:result notEqual solid false 1 0
-    * label *label440
   336 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label441
-    * label *label442
   337 op shl *tmp0 :createTerrainMask:result 1
   338 op add :isSolid:x :createTerrainMask:x -1
   339 set :isSolid:y *tmp2
   340 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   341 sensor solid type @solid
   342 select :isSolid:result notEqual solid false 1 0
-    * label *label443
   343 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label444
-    * label *label445
   344 op shl *tmp0 :createTerrainMask:result 1
   345 op add :isSolid:x :createTerrainMask:x -2
   346 set :isSolid:y *tmp2
   347 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   348 sensor solid type @solid
   349 select :isSolid:result notEqual solid false 1 0
-    * label *label446
   350 op or :createTerrainMask:result *tmp0 :isSolid:result
-    * label *label447
-    * label *label448
   351 op shl *tmp0 :createTerrainMask:result 1
   352 op add :isSolid:x :createTerrainMask:x -3
   353 set :isSolid:y *tmp2
   354 ucontrol getBlock :isSolid:x :isSolid:y type building floor
   355 sensor solid type @solid
   356 select :isSolid:result notEqual solid false 1 0
-    * label *label449
   357 op or :createTerrainMask*retval *tmp0 :isSolid:result
-    * label *label450
-    * label *label451
-    * label *label452
-    * label *label8
-    * label *label5
   358 set :createTerrainMask*finished true
   359 jump *label4 always
   360 end
 
   366 select value equal floor :spotValue:ore 0.00392156862745098 0
   367 sensor solid type @solid
   368 select :spotValue:result notEqual solid false 0.09803921568627451 value
-    * label *label14
   369 op sub :spotValue.1:x :computeRowValues:x 1
   370 set :spotValue.1:y :computeRowValues:y
   371 set :spotValue.1:ore :computeRowValues:ore
 
   373 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   374 sensor solid type @solid
   375 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
-    * label *label15
   376 set :spotValue.2:x :computeRowValues:x
   377 set :spotValue.2:y :computeRowValues:y
   378 set :spotValue.2:ore :computeRowValues:ore
 
   380 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   381 sensor solid type @solid
   382 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
-    * label *label16
   383 op add :spotValue.3:x :computeRowValues:x 1
   384 set :spotValue.3:y :computeRowValues:y
   385 set :spotValue.3:ore :computeRowValues:ore
 
   387 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   388 sensor solid type @solid
   389 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
-    * label *label17
   390 op add :spotValue.4:x :computeRowValues:x 2
   391 set :spotValue.4:y :computeRowValues:y
   392 set :spotValue.4:ore :computeRowValues:ore
 
   394 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   395 sensor solid type @solid
   396 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
-    * label *label18
   397 jump *label19 notEqual :computeRowValues:size 2
   398 op add *tmp17 :spotValue:result :spotValue.1:result
   399 op add *tmp18 :spotValue.1:result :spotValue.2:result
 
   420 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   421 sensor solid type @solid
   422 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
-    * label *label23
   423 op add :spotValue.6:x :computeRowValues:x 3
   424 set :spotValue.6:y :computeRowValues:y
   425 set :spotValue.6:ore :computeRowValues:ore
 
   427 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   428 sensor solid type @solid
   429 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
-    * label *label24
   430 op add *tmp35 :spotValue:result :spotValue.1:result
   431 op add *tmp36 *tmp35 :spotValue.2:result
   432 op add *tmp37 :spotValue.5:result *tmp36
 
   448 label *label1
   449 ubind :findBestPosition:unit
   450 op sub *tmp52 :findBestPosition:y 2
-    * label *label453
   451 op sub :spotValue:x :findBestPosition:x 2
   452 set :spotValue:y *tmp52
   453 set :spotValue:ore :findBestPosition:ore
 
   455 select value equal floor :spotValue:ore 0.00392156862745098 0
   456 sensor solid type @solid
   457 select :spotValue:result notEqual solid false 0.09803921568627451 value
-    * label *label454
   458 op sub :spotValue.1:x :findBestPosition:x 1
   459 set :spotValue.1:y *tmp52
   460 set :spotValue.1:ore :findBestPosition:ore
 
   462 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   463 sensor solid type @solid
   464 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
-    * label *label455
   465 set :spotValue.2:x :findBestPosition:x
   466 set :spotValue.2:y *tmp52
   467 set :spotValue.2:ore :findBestPosition:ore
 
   469 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   470 sensor solid type @solid
   471 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
-    * label *label456
   472 op add :spotValue.3:x :findBestPosition:x 1
   473 set :spotValue.3:y *tmp52
   474 set :spotValue.3:ore :findBestPosition:ore
 
   476 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   477 sensor solid type @solid
   478 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
-    * label *label457
   479 op add :spotValue.4:x :findBestPosition:x 2
   480 set :spotValue.4:y *tmp52
   481 set :spotValue.4:ore :findBestPosition:ore
 
   483 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   484 sensor solid type @solid
   485 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
-    * label *label458
   486 jump *label459 notEqual :findBestPosition:size 2
   487 op add *tmp17 :spotValue:result :spotValue.1:result
   488 op add *tmp18 :spotValue.1:result :spotValue.2:result
 
   509 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   510 sensor solid type @solid
   511 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
-    * label *label461
   512 op add :spotValue.6:x :findBestPosition:x 3
   513 set :spotValue.6:y *tmp52
   514 set :spotValue.6:ore :findBestPosition:ore
 
   516 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   517 sensor solid type @solid
   518 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
-    * label *label462
   519 op add *tmp35 :spotValue:result :spotValue.1:result
   520 op add *tmp36 *tmp35 :spotValue.2:result
   521 op add *tmp37 :spotValue.5:result *tmp36
 
   533 label *label464
   534 label *label465
   535 op sub *tmp54 :findBestPosition:y 1
-    * label *label466
   536 op sub :spotValue:x :findBestPosition:x 2
   537 set :spotValue:y *tmp54
   538 set :spotValue:ore :findBestPosition:ore
 
   540 select value equal floor :spotValue:ore 0.00392156862745098 0
   541 sensor solid type @solid
   542 select :spotValue:result notEqual solid false 0.09803921568627451 value
-    * label *label467
   543 op sub :spotValue.1:x :findBestPosition:x 1
   544 set :spotValue.1:y *tmp54
   545 set :spotValue.1:ore :findBestPosition:ore
 
   547 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   548 sensor solid type @solid
   549 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
-    * label *label468
   550 set :spotValue.2:x :findBestPosition:x
   551 set :spotValue.2:y *tmp54
   552 set :spotValue.2:ore :findBestPosition:ore
 
   554 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   555 sensor solid type @solid
   556 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
-    * label *label469
   557 op add :spotValue.3:x :findBestPosition:x 1
   558 set :spotValue.3:y *tmp54
   559 set :spotValue.3:ore :findBestPosition:ore
 
   561 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   562 sensor solid type @solid
   563 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
-    * label *label470
   564 op add :spotValue.4:x :findBestPosition:x 2
   565 set :spotValue.4:y *tmp54
   566 set :spotValue.4:ore :findBestPosition:ore
 
   568 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   569 sensor solid type @solid
   570 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
-    * label *label471
   571 jump *label472 notEqual :findBestPosition:size 2
   572 op add *tmp17 :spotValue:result :spotValue.1:result
   573 op add *tmp18 :spotValue.1:result :spotValue.2:result
 
   594 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   595 sensor solid type @solid
   596 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
-    * label *label474
   597 op add :spotValue.6:x :findBestPosition:x 3
   598 set :spotValue.6:y *tmp54
   599 set :spotValue.6:ore :findBestPosition:ore
 
   601 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   602 sensor solid type @solid
   603 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
-    * label *label475
   604 op add *tmp35 :spotValue:result :spotValue.1:result
   605 op add *tmp36 *tmp35 :spotValue.2:result
   606 op add *tmp37 :spotValue.5:result *tmp36
 
   617 label *label476
   618 label *label477
   619 label *label478
-    * label *label479
   620 op sub :spotValue:x :findBestPosition:x 2
   621 set :spotValue:y :findBestPosition:y
   622 set :spotValue:ore :findBestPosition:ore
 
   624 select value equal floor :spotValue:ore 0.00392156862745098 0
   625 sensor solid type @solid
   626 select :spotValue:result notEqual solid false 0.09803921568627451 value
-    * label *label480
   627 op sub :spotValue.1:x :findBestPosition:x 1
   628 set :spotValue.1:y :findBestPosition:y
   629 set :spotValue.1:ore :findBestPosition:ore
 
   631 select value equal floor :spotValue.1:ore 0.00392156862745098 0
   632 sensor solid type @solid
   633 select :spotValue.1:result notEqual solid false 0.09803921568627451 value
-    * label *label481
   634 set :spotValue.2:x :findBestPosition:x
   635 set :spotValue.2:y :findBestPosition:y
   636 set :spotValue.2:ore :findBestPosition:ore
 
   638 select value equal floor :spotValue.2:ore 0.00392156862745098 0
   639 sensor solid type @solid
   640 select :spotValue.2:result notEqual solid false 0.09803921568627451 value
-    * label *label482
   641 op add :spotValue.3:x :findBestPosition:x 1
   642 set :spotValue.3:y :findBestPosition:y
   643 set :spotValue.3:ore :findBestPosition:ore
 
   645 select value equal floor :spotValue.3:ore 0.00392156862745098 0
   646 sensor solid type @solid
   647 select :spotValue.3:result notEqual solid false 0.09803921568627451 value
-    * label *label483
   648 op add :spotValue.4:x :findBestPosition:x 2
   649 set :spotValue.4:y :findBestPosition:y
   650 set :spotValue.4:ore :findBestPosition:ore
 
   652 select value equal floor :spotValue.4:ore 0.00392156862745098 0
   653 sensor solid type @solid
   654 select :spotValue.4:result notEqual solid false 0.09803921568627451 value
-    * label *label484
   655 jump *label485 notEqual :findBestPosition:size 2
   656 op add *tmp17 :spotValue:result :spotValue.1:result
   657 op add *tmp18 :spotValue.1:result :spotValue.2:result
 
   678 select value equal floor :spotValue.5:ore 0.00392156862745098 0
   679 sensor solid type @solid
   680 select :spotValue.5:result notEqual solid false 0.09803921568627451 value
-    * label *label487
   681 op add :spotValue.6:x :findBestPosition:x 3
   682 set :spotValue.6:y :findBestPosition:y
   683 set :spotValue.6:ore :findBestPosition:ore
 
   685 select value equal floor :spotValue.6:ore 0.00392156862745098 0
   686 sensor solid type @solid
   687 select :spotValue.6:result notEqual solid false 0.09803921568627451 value
-    * label *label488
   688 op add *tmp35 :spotValue:result :spotValue.1:result
   689 op add *tmp36 *tmp35 :spotValue.2:result
   690 op add *tmp37 :spotValue.5:result *tmp36
 
   734 set :findBestPosition:bestY -1.5
   735 set :findBestPosition:best :updateRowPositions2x2:col1
   736 label *label37
-    * label *label38
   737 label *label35
-    * label *label36
-    * label *label34
   738 jump *label40 greaterThanEq :updateRowPositions2x2:col2 0.0784313725490196
   739 jump *label42 lessThanEq :updateRowPositions2x2:col2 :findBestPosition:best
   740 set :findBestPosition:bestX -0.5
   741 set :findBestPosition:bestY -1.5
   742 set :findBestPosition:best :updateRowPositions2x2:col2
   743 label *label42
-    * label *label43
   744 label *label40
-    * label *label41
-    * label *label39
   745 jump *label45 greaterThanEq :updateRowPositions2x2:col3 0.0784313725490196
   746 jump *label47 lessThanEq :updateRowPositions2x2:col3 :findBestPosition:best
   747 set :findBestPosition:bestX 0.5
   748 set :findBestPosition:bestY -1.5
   749 set :findBestPosition:best :updateRowPositions2x2:col3
   750 label *label47
-    * label *label48
   751 label *label45
-    * label *label46
-    * label *label44
   752 jump *label50 greaterThanEq :updateRowPositions2x2:col4 0.0784313725490196
   753 jump *label52 lessThanEq :updateRowPositions2x2:col4 :findBestPosition:best
   754 set :findBestPosition:bestX 1.5
   755 set :findBestPosition:bestY -1.5
   756 set :findBestPosition:best :updateRowPositions2x2:col4
   757 label *label52
-    * label *label53
   758 label *label50
-    * label *label51
-    * label *label49
-    * label *label33
   759 unpackcolor :updateRowPositions2x2.1:col1 :updateRowPositions2x2.1:col2 :updateRowPositions2x2.1:col3 :updateRowPositions2x2.1:col4 :findBestPosition:row2
   760 jump *label56 greaterThanEq :updateRowPositions2x2.1:col1 0.0784313725490196
   761 jump *label58 lessThanEq :updateRowPositions2x2.1:col1 :findBestPosition:best
 
   763 set :findBestPosition:bestY -0.5
   764 set :findBestPosition:best :updateRowPositions2x2.1:col1
   765 label *label58
-    * label *label59
   766 label *label56
-    * label *label57
-    * label *label55
   767 jump *label61 greaterThanEq :updateRowPositions2x2.1:col2 0.0784313725490196
   768 jump *label63 lessThanEq :updateRowPositions2x2.1:col2 :findBestPosition:best
   769 set :findBestPosition:bestX -0.5
   770 set :findBestPosition:bestY -0.5
   771 set :findBestPosition:best :updateRowPositions2x2.1:col2
   772 label *label63
-    * label *label64
   773 label *label61
-    * label *label62
-    * label *label60
   774 jump *label66 greaterThanEq :updateRowPositions2x2.1:col3 0.0784313725490196
   775 jump *label68 lessThanEq :updateRowPositions2x2.1:col3 :findBestPosition:best
   776 set :findBestPosition:bestX 0.5
   777 set :findBestPosition:bestY -0.5
   778 set :findBestPosition:best :updateRowPositions2x2.1:col3
   779 label *label68
-    * label *label69
   780 label *label66
-    * label *label67
-    * label *label65
   781 jump *label71 greaterThanEq :updateRowPositions2x2.1:col4 0.0784313725490196
   782 jump *label73 lessThanEq :updateRowPositions2x2.1:col4 :findBestPosition:best
   783 set :findBestPosition:bestX 1.5
   784 set :findBestPosition:bestY -0.5
   785 set :findBestPosition:best :updateRowPositions2x2.1:col4
   786 label *label73
-    * label *label74
   787 label *label71
-    * label *label72
-    * label *label70
-    * label *label54
   788 unpackcolor :updateRowPositions2x2.2:col1 :updateRowPositions2x2.2:col2 :updateRowPositions2x2.2:col3 :updateRowPositions2x2.2:col4 :findBestPosition:row3
   789 jump *label77 greaterThanEq :updateRowPositions2x2.2:col1 0.0784313725490196
   790 jump *label79 lessThanEq :updateRowPositions2x2.2:col1 :findBestPosition:best
 
   792 set :findBestPosition:bestY 0.5
   793 set :findBestPosition:best :updateRowPositions2x2.2:col1
   794 label *label79
-    * label *label80
   795 label *label77
-    * label *label78
-    * label *label76
   796 jump *label82 greaterThanEq :updateRowPositions2x2.2:col2 0.0784313725490196
   797 jump *label84 lessThanEq :updateRowPositions2x2.2:col2 :findBestPosition:best
   798 set :findBestPosition:bestX -0.5
   799 set :findBestPosition:bestY 0.5
   800 set :findBestPosition:best :updateRowPositions2x2.2:col2
   801 label *label84
-    * label *label85
   802 label *label82
-    * label *label83
-    * label *label81
   803 jump *label87 greaterThanEq :updateRowPositions2x2.2:col3 0.0784313725490196
   804 jump *label89 lessThanEq :updateRowPositions2x2.2:col3 :findBestPosition:best
   805 set :findBestPosition:bestX 0.5
   806 set :findBestPosition:bestY 0.5
   807 set :findBestPosition:best :updateRowPositions2x2.2:col3
   808 label *label89
-    * label *label90
   809 label *label87
-    * label *label88
-    * label *label86
   810 jump *label92 greaterThanEq :updateRowPositions2x2.2:col4 0.0784313725490196
   811 jump *label94 lessThanEq :updateRowPositions2x2.2:col4 :findBestPosition:best
   812 set :findBestPosition:bestX 1.5
   813 set :findBestPosition:bestY 0.5
   814 set :findBestPosition:best :updateRowPositions2x2.2:col4
   815 label *label94
-    * label *label95
   816 label *label92
-    * label *label93
-    * label *label91
-    * label *label75
   817 unpackcolor :updateRowPositions2x2.3:col1 :updateRowPositions2x2.3:col2 :updateRowPositions2x2.3:col3 :updateRowPositions2x2.3:col4 :findBestPosition:row4
   818 jump *label98 greaterThanEq :updateRowPositions2x2.3:col1 0.0784313725490196
   819 jump *label100 lessThanEq :updateRowPositions2x2.3:col1 :findBestPosition:best
 
   821 set :findBestPosition:bestY 1.5
   822 set :findBestPosition:best :updateRowPositions2x2.3:col1
   823 label *label100
-    * label *label101
   824 label *label98
-    * label *label99
-    * label *label97
   825 jump *label103 greaterThanEq :updateRowPositions2x2.3:col2 0.0784313725490196
   826 jump *label105 lessThanEq :updateRowPositions2x2.3:col2 :findBestPosition:best
   827 set :findBestPosition:bestX -0.5
   828 set :findBestPosition:bestY 1.5
   829 set :findBestPosition:best :updateRowPositions2x2.3:col2
   830 label *label105
-    * label *label106
   831 label *label103
-    * label *label104
-    * label *label102
   832 jump *label108 greaterThanEq :updateRowPositions2x2.3:col3 0.0784313725490196
   833 jump *label110 lessThanEq :updateRowPositions2x2.3:col3 :findBestPosition:best
   834 set :findBestPosition:bestX 0.5
   835 set :findBestPosition:bestY 1.5
   836 set :findBestPosition:best :updateRowPositions2x2.3:col3
   837 label *label110
-    * label *label111
   838 label *label108
-    * label *label109
-    * label *label107
   839 jump *label113 greaterThanEq :updateRowPositions2x2.3:col4 0.0784313725490196
   840 jump *label115 lessThanEq :updateRowPositions2x2.3:col4 :findBestPosition:best
   841 set :findBestPosition:bestX 1.5
   842 set :findBestPosition:bestY 1.5
   843 set :findBestPosition:best :updateRowPositions2x2.3:col4
   844 label *label115
-    * label *label116
   845 label *label113
-    * label *label114
-    * label *label112
-    * label *label96
   846 jump *label32 always
   847 label *label31
   848 jump *label117 notEqual :findBestPosition:size 3
 
   858 set :findBestPosition:bestY -1
   859 set :findBestPosition:best :updateRowPositions3x3:col1
   860 label *label123
-    * label *label124
   861 label *label121
-    * label *label122
-    * label *label120
   862 jump *label126 greaterThanEq :updateRowPositions3x3:col2 0.0784313725490196
   863 jump *label128 lessThanEq :updateRowPositions3x3:col2 :findBestPosition:best
   864 set :findBestPosition:bestX 0
   865 set :findBestPosition:bestY -1
   866 set :findBestPosition:best :updateRowPositions3x3:col2
   867 label *label128
-    * label *label129
   868 label *label126
-    * label *label127
-    * label *label125
   869 jump *label131 greaterThanEq :updateRowPositions3x3:col3 0.0784313725490196
   870 jump *label133 lessThanEq :updateRowPositions3x3:col3 :findBestPosition:best
   871 set :findBestPosition:bestX 1
   872 set :findBestPosition:bestY -1
   873 set :findBestPosition:best :updateRowPositions3x3:col3
   874 label *label133
-    * label *label134
   875 label *label131
-    * label *label132
-    * label *label130
-    * label *label119
   876 unpackcolor :updateRowPositions3x3.1:col1 :updateRowPositions3x3.1:col2 :updateRowPositions3x3.1:col3 0 :findBestPosition:row2.1
   877 jump *label137 greaterThanEq :updateRowPositions3x3.1:col1 0.0784313725490196
   878 jump *label139 lessThanEq :updateRowPositions3x3.1:col1 :findBestPosition:best
 
   880 set :findBestPosition:bestY 0
   881 set :findBestPosition:best :updateRowPositions3x3.1:col1
   882 label *label139
-    * label *label140
   883 label *label137
-    * label *label138
-    * label *label136
   884 jump *label142 greaterThanEq :updateRowPositions3x3.1:col2 0.0784313725490196
   885 jump *label144 lessThanEq :updateRowPositions3x3.1:col2 :findBestPosition:best
   886 set :findBestPosition:bestX 0
   887 set :findBestPosition:bestY 0
   888 set :findBestPosition:best :updateRowPositions3x3.1:col2
   889 label *label144
-    * label *label145
   890 label *label142
-    * label *label143
-    * label *label141
   891 jump *label147 greaterThanEq :updateRowPositions3x3.1:col3 0.0784313725490196
   892 jump *label149 lessThanEq :updateRowPositions3x3.1:col3 :findBestPosition:best
   893 set :findBestPosition:bestX 1
   894 set :findBestPosition:bestY 0
   895 set :findBestPosition:best :updateRowPositions3x3.1:col3
   896 label *label149
-    * label *label150
   897 label *label147
-    * label *label148
-    * label *label146
-    * label *label135
   898 unpackcolor :updateRowPositions3x3.2:col1 :updateRowPositions3x3.2:col2 :updateRowPositions3x3.2:col3 0 :findBestPosition:row3.1
   899 jump *label153 greaterThanEq :updateRowPositions3x3.2:col1 0.0784313725490196
   900 jump *label155 lessThanEq :updateRowPositions3x3.2:col1 :findBestPosition:best
 
   902 set :findBestPosition:bestY 1
   903 set :findBestPosition:best :updateRowPositions3x3.2:col1
   904 label *label155
-    * label *label156
   905 label *label153
-    * label *label154
-    * label *label152
   906 jump *label158 greaterThanEq :updateRowPositions3x3.2:col2 0.0784313725490196
   907 jump *label160 lessThanEq :updateRowPositions3x3.2:col2 :findBestPosition:best
   908 set :findBestPosition:bestX 0
   909 set :findBestPosition:bestY 1
   910 set :findBestPosition:best :updateRowPositions3x3.2:col2
   911 label *label160
-    * label *label161
   912 label *label158
-    * label *label159
-    * label *label157
   913 jump *label163 greaterThanEq :updateRowPositions3x3.2:col3 0.0784313725490196
   914 jump *label165 lessThanEq :updateRowPositions3x3.2:col3 :findBestPosition:best
   915 set :findBestPosition:bestX 1
   916 set :findBestPosition:bestY 1
   917 set :findBestPosition:best :updateRowPositions3x3.2:col3
   918 label *label165
-    * label *label166
   919 label *label163
-    * label *label164
-    * label *label162
-    * label *label151
   920 jump *label118 always
   921 label *label117
   922 op sub *tmp179 :findBestPosition:y 3
 
   951 set :findBestPosition:bestY -1.5
   952 set :findBestPosition:best :updateRowPositions4x4:col1
   953 label *label173
-    * label *label174
   954 label *label171
-    * label *label172
-    * label *label170
   955 jump *label176 greaterThanEq :updateRowPositions4x4:col2 0.0784313725490196
   956 jump *label178 lessThanEq :updateRowPositions4x4:col2 :findBestPosition:best
   957 set :findBestPosition:bestX -0.5
   958 set :findBestPosition:bestY -1.5
   959 set :findBestPosition:best :updateRowPositions4x4:col2
   960 label *label178
-    * label *label179
   961 label *label176
-    * label *label177
-    * label *label175
   962 jump *label181 greaterThanEq :updateRowPositions4x4:col3 0.0784313725490196
   963 jump *label183 lessThanEq :updateRowPositions4x4:col3 :findBestPosition:best
   964 set :findBestPosition:bestX 0.5
   965 set :findBestPosition:bestY -1.5
   966 set :findBestPosition:best :updateRowPositions4x4:col3
   967 label *label183
-    * label *label184
   968 label *label181
-    * label *label182
-    * label *label180
   969 jump *label186 greaterThanEq :updateRowPositions4x4:col4 0.0784313725490196
   970 jump *label188 lessThanEq :updateRowPositions4x4:col4 :findBestPosition:best
   971 set :findBestPosition:bestX 1.5
   972 set :findBestPosition:bestY -1.5
   973 set :findBestPosition:best :updateRowPositions4x4:col4
   974 label *label188
-    * label *label189
   975 label *label186
-    * label *label187
-    * label *label185
-    * label *label169
   976 unpackcolor :updateRowPositions4x4.1:col1 :updateRowPositions4x4.1:col2 :updateRowPositions4x4.1:col3 :updateRowPositions4x4.1:col4 :findBestPosition:row2.2
   977 jump *label192 greaterThanEq :updateRowPositions4x4.1:col1 0.0784313725490196
   978 jump *label194 lessThanEq :updateRowPositions4x4.1:col1 :findBestPosition:best
 
   980 set :findBestPosition:bestY -0.5
   981 set :findBestPosition:best :updateRowPositions4x4.1:col1
   982 label *label194
-    * label *label195
   983 label *label192
-    * label *label193
-    * label *label191
   984 jump *label197 greaterThanEq :updateRowPositions4x4.1:col2 0.0784313725490196
   985 jump *label199 lessThanEq :updateRowPositions4x4.1:col2 :findBestPosition:best
   986 set :findBestPosition:bestX -0.5
   987 set :findBestPosition:bestY -0.5
   988 set :findBestPosition:best :updateRowPositions4x4.1:col2
   989 label *label199
-    * label *label200
   990 label *label197
-    * label *label198
-    * label *label196
   991 jump *label202 greaterThanEq :updateRowPositions4x4.1:col3 0.0784313725490196
   992 jump *label204 lessThanEq :updateRowPositions4x4.1:col3 :findBestPosition:best
   993 set :findBestPosition:bestX 0.5
   994 set :findBestPosition:bestY -0.5
   995 set :findBestPosition:best :updateRowPositions4x4.1:col3
   996 label *label204
-    * label *label205
   997 label *label202
-    * label *label203
-    * label *label201
   998 jump *label207 greaterThanEq :updateRowPositions4x4.1:col4 0.0784313725490196
   999 jump *label209 lessThanEq :updateRowPositions4x4.1:col4 :findBestPosition:best
  1000 set :findBestPosition:bestX 1.5
  1001 set :findBestPosition:bestY -0.5
  1002 set :findBestPosition:best :updateRowPositions4x4.1:col4
  1003 label *label209
-    * label *label210
  1004 label *label207
-    * label *label208
-    * label *label206
-    * label *label190
  1005 unpackcolor :updateRowPositions4x4.2:col1 :updateRowPositions4x4.2:col2 :updateRowPositions4x4.2:col3 :updateRowPositions4x4.2:col4 :findBestPosition:row3.2
  1006 jump *label213 greaterThanEq :updateRowPositions4x4.2:col1 0.0784313725490196
  1007 jump *label215 lessThanEq :updateRowPositions4x4.2:col1 :findBestPosition:best
 
  1009 set :findBestPosition:bestY 0.5
  1010 set :findBestPosition:best :updateRowPositions4x4.2:col1
  1011 label *label215
-    * label *label216
  1012 label *label213
-    * label *label214
-    * label *label212
  1013 jump *label218 greaterThanEq :updateRowPositions4x4.2:col2 0.0784313725490196
  1014 jump *label220 lessThanEq :updateRowPositions4x4.2:col2 :findBestPosition:best
  1015 set :findBestPosition:bestX -0.5
  1016 set :findBestPosition:bestY 0.5
  1017 set :findBestPosition:best :updateRowPositions4x4.2:col2
  1018 label *label220
-    * label *label221
  1019 label *label218
-    * label *label219
-    * label *label217
  1020 jump *label223 greaterThanEq :updateRowPositions4x4.2:col3 0.0784313725490196
  1021 jump *label225 lessThanEq :updateRowPositions4x4.2:col3 :findBestPosition:best
  1022 set :findBestPosition:bestX 0.5
  1023 set :findBestPosition:bestY 0.5
  1024 set :findBestPosition:best :updateRowPositions4x4.2:col3
  1025 label *label225
-    * label *label226
  1026 label *label223
-    * label *label224
-    * label *label222
  1027 jump *label228 greaterThanEq :updateRowPositions4x4.2:col4 0.0784313725490196
  1028 jump *label230 lessThanEq :updateRowPositions4x4.2:col4 :findBestPosition:best
  1029 set :findBestPosition:bestX 1.5
  1030 set :findBestPosition:bestY 0.5
  1031 set :findBestPosition:best :updateRowPositions4x4.2:col4
  1032 label *label230
-    * label *label231
  1033 label *label228
-    * label *label229
-    * label *label227
-    * label *label211
  1034 unpackcolor :updateRowPositions4x4.3:col1 :updateRowPositions4x4.3:col2 :updateRowPositions4x4.3:col3 :updateRowPositions4x4.3:col4 :findBestPosition:row4.1
  1035 jump *label234 greaterThanEq :updateRowPositions4x4.3:col1 0.0784313725490196
  1036 jump *label236 lessThanEq :updateRowPositions4x4.3:col1 :findBestPosition:best
 
  1038 set :findBestPosition:bestY 1.5
  1039 set :findBestPosition:best :updateRowPositions4x4.3:col1
  1040 label *label236
-    * label *label237
  1041 label *label234
-    * label *label235
-    * label *label233
  1042 jump *label239 greaterThanEq :updateRowPositions4x4.3:col2 0.0784313725490196
  1043 jump *label241 lessThanEq :updateRowPositions4x4.3:col2 :findBestPosition:best
  1044 set :findBestPosition:bestX -0.5
  1045 set :findBestPosition:bestY 1.5
  1046 set :findBestPosition:best :updateRowPositions4x4.3:col2
  1047 label *label241
-    * label *label242
  1048 label *label239
-    * label *label240
-    * label *label238
  1049 jump *label244 greaterThanEq :updateRowPositions4x4.3:col3 0.0784313725490196
  1050 jump *label246 lessThanEq :updateRowPositions4x4.3:col3 :findBestPosition:best
  1051 set :findBestPosition:bestX 0.5
  1052 set :findBestPosition:bestY 1.5
  1053 set :findBestPosition:best :updateRowPositions4x4.3:col3
  1054 label *label246
-    * label *label247
  1055 label *label244
-    * label *label245
-    * label *label243
  1056 jump *label249 greaterThanEq :updateRowPositions4x4.3:col4 0.0784313725490196
  1057 jump *label251 lessThanEq :updateRowPositions4x4.3:col4 :findBestPosition:best
  1058 set :findBestPosition:bestX 1.5
  1059 set :findBestPosition:bestY 1.5
  1060 set :findBestPosition:best :updateRowPositions4x4.3:col4
  1061 label *label251
-    * label *label252
  1062 label *label249
-    * label *label250
-    * label *label248
-    * label *label232
  1063 label *label118
  1064 label *label32
  1065 op mul :findBestPosition*retval :findBestPosition:best 255
-    * label *label25
  1066 set :findBestPosition*finished true
  1067 jump *label4 always
  1068 end

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   400 op add *tmp19 :spotValue.2:result :spotValue.3:result
   401 op add *tmp20 :spotValue.3:result :spotValue.4:result
   402 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
-    * jump *label13 always
-    * jump *label20 always
+  403 return :computeRowValues*retaddr
+  404 return :computeRowValues*retaddr
   405 label *label19
   406 jump *label21 notEqual :computeRowValues:size 3
   407 op add *tmp24 :spotValue.1:result :spotValue.2:result
 
   410 op add *tmp28 :spotValue.2:result :spotValue.3:result
   411 op add *tmp29 *tmp28 :spotValue.4:result
   412 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
-    * jump *label13 always
-    * jump *label22 always
+  413 return :computeRowValues*retaddr
+  414 return :computeRowValues*retaddr
   415 label *label21
   416 op sub :spotValue.5:x :computeRowValues:x 3
   417 set :spotValue.5:y :computeRowValues:y
 
   836 set :findBestPosition:best :updateRowPositions2x2.3:col3
   837 label *label110
   838 label *label108
-    * jump *label113 greaterThanEq :updateRowPositions2x2.3:col4 0.0784313725490196
-    * jump *label115 lessThanEq :updateRowPositions2x2.3:col4 :findBestPosition:best
+  839 jump *label32 greaterThanEq :updateRowPositions2x2.3:col4 0.0784313725490196
+  840 jump *label32 lessThanEq :updateRowPositions2x2.3:col4 :findBestPosition:best
   841 set :findBestPosition:bestX 1.5
   842 set :findBestPosition:bestY 1.5
   843 set :findBestPosition:best :updateRowPositions2x2.3:col4
 
   910 set :findBestPosition:best :updateRowPositions3x3.2:col2
   911 label *label160
   912 label *label158
-    * jump *label163 greaterThanEq :updateRowPositions3x3.2:col3 0.0784313725490196
-    * jump *label165 lessThanEq :updateRowPositions3x3.2:col3 :findBestPosition:best
+  913 jump *label118 greaterThanEq :updateRowPositions3x3.2:col3 0.0784313725490196
+  914 jump *label118 lessThanEq :updateRowPositions3x3.2:col3 :findBestPosition:best
   915 set :findBestPosition:bestX 1
   916 set :findBestPosition:bestY 1
   917 set :findBestPosition:best :updateRowPositions3x3.2:col3

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-12 instructions):
 
     5 label *label4
     6 wait 1e12
     7 jump *label4 always
-    * end
     8 label *label0
     9 ubind :createTerrainMask:unit
    10 op add *tmp2 :createTerrainMask:y 3
 
   356 op or :createTerrainMask*retval *tmp0 :isSolid:result
   357 set :createTerrainMask*finished true
   358 jump *label4 always
-    * end
   359 label *label2
   360 op sub :spotValue:x :computeRowValues:x 2
   361 set :spotValue:y :computeRowValues:y
 
   399 op add *tmp20 :spotValue.3:result :spotValue.4:result
   400 packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp20
   401 return :computeRowValues*retaddr
-    * return :computeRowValues*retaddr
   402 label *label19
   403 jump *label21 notEqual :computeRowValues:size 3
   404 op add *tmp24 :spotValue.1:result :spotValue.2:result
 
   408 op add *tmp29 *tmp28 :spotValue.4:result
   409 packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0
   410 return :computeRowValues*retaddr
-    * return :computeRowValues*retaddr
   411 label *label21
   412 op sub :spotValue.5:x :computeRowValues:x 3
   413 set :spotValue.5:y :computeRowValues:y
 
   436 op add *tmp49 *tmp44 :spotValue.6:result
   437 op min *tmp50 0.09803921568627451 *tmp49
   438 packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp50
-    * label *label22
-    * label *label20
-    * label *label13
   439 return :computeRowValues*retaddr
-    * end
   440 label *label1
   441 ubind :findBestPosition:unit
   442 op sub *tmp52 :findBestPosition:y 2
 
   482 op add *tmp20 :spotValue.3:result :spotValue.4:result
   483 packcolor :findBestPosition:y1 *tmp17 *tmp18 *tmp19 *tmp20
   484 jump *label465 always
-    * jump *label464 always
   485 label *label459
   486 jump *label460 notEqual :findBestPosition:size 3
   487 op add *tmp24 :spotValue.1:result :spotValue.2:result
 
   491 op add *tmp29 *tmp28 :spotValue.4:result
   492 packcolor :findBestPosition:y1 *tmp25 *tmp27 *tmp29 0
   493 jump *label465 always
-    * jump *label463 always
   494 label *label460
   495 op sub :spotValue.5:x :findBestPosition:x 3
   496 set :spotValue.5:y *tmp52
 
   565 op add *tmp20 :spotValue.3:result :spotValue.4:result
   566 packcolor :findBestPosition:y2 *tmp17 *tmp18 *tmp19 *tmp20
   567 jump *label478 always
-    * jump *label477 always
   568 label *label472
   569 jump *label473 notEqual :findBestPosition:size 3
   570 op add *tmp24 :spotValue.1:result :spotValue.2:result
 
   574 op add *tmp29 *tmp28 :spotValue.4:result
   575 packcolor :findBestPosition:y2 *tmp25 *tmp27 *tmp29 0
   576 jump *label478 always
-    * jump *label476 always
   577 label *label473
   578 op sub :spotValue.5:x :findBestPosition:x 3
   579 set :spotValue.5:y *tmp54
 
   647 op add *tmp20 :spotValue.3:result :spotValue.4:result
   648 packcolor :findBestPosition:y3 *tmp17 *tmp18 *tmp19 *tmp20
   649 jump *label491 always
-    * jump *label490 always
   650 label *label485
   651 jump *label486 notEqual :findBestPosition:size 3
   652 op add *tmp24 :spotValue.1:result :spotValue.2:result
 
   656 op add *tmp29 *tmp28 :spotValue.4:result
   657 packcolor :findBestPosition:y3 *tmp25 *tmp27 *tmp29 0
   658 jump *label491 always
-    * jump *label489 always
   659 label *label486
   660 op sub :spotValue.5:x :findBestPosition:x 3
   661 set :spotValue.5:y :findBestPosition:y
 
   827 set :findBestPosition:bestX 1.5
   828 set :findBestPosition:bestY 1.5
   829 set :findBestPosition:best :updateRowPositions2x2.3:col4
-    * label *label115
-    * label *label113
   830 jump *label32 always
   831 label *label31
   832 jump *label117 notEqual :findBestPosition:size 3
 
   899 set :findBestPosition:bestX 1
   900 set :findBestPosition:bestY 1
   901 set :findBestPosition:best :updateRowPositions3x3.2:col3
-    * label *label165
-    * label *label163
   902 jump *label118 always
   903 label *label117
   904 op sub *tmp179 :findBestPosition:y 3
 
  1047 op mul :findBestPosition*retval :findBestPosition:best 255
  1048 set :findBestPosition*finished true
  1049 jump *label4 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1:
 
   519 op add *tmp49 *tmp44 :spotValue.6:result
   520 op min *tmp50 0.09803921568627451 *tmp49
   521 packcolor :findBestPosition:y1 *tmp38 *tmp42 *tmp46 *tmp50
-    * label *label463
-    * label *label464
   522 label *label465
   523 op sub *tmp54 :findBestPosition:y 1
   524 op sub :spotValue:x :findBestPosition:x 2
 
   600 op add *tmp49 *tmp44 :spotValue.6:result
   601 op min *tmp50 0.09803921568627451 *tmp49
   602 packcolor :findBestPosition:y2 *tmp38 *tmp42 *tmp46 *tmp50
-    * label *label476
-    * label *label477
   603 label *label478
   604 op sub :spotValue:x :findBestPosition:x 2
   605 set :spotValue:y :findBestPosition:y
 
   680 op add *tmp49 *tmp44 :spotValue.6:result
   681 op min *tmp50 0.09803921568627451 *tmp49
   682 packcolor :findBestPosition:y3 *tmp38 *tmp42 *tmp46 *tmp50
-    * label *label489
-    * label *label490
   683 label *label491
   684 op add *tmp58 :findBestPosition:y 1
   685 set :computeRowValues:x :findBestPosition:x

Final code before resolving virtual instructions:

    0:  jump *label3 always 0 0                                      #set target = 8;
    1:  jump *label0 always 0 0                                      ...
    2:  jump *label1 always 0 0                                      ...
        label *label3                                                ...
    3:  set *signature "385702d66f725e74:v1"                         ...
        label *label4                                                ...
    4:  wait 1e12                                                    ...
    5:  jump *label4 always 0 0                                      ...
        label *label0                                                remote def createTerrainMask(unit, x, y)
    6:  ubind :createTerrainMask:unit                                ubind(unit);
    7:  op add *tmp2 :createTerrainMask:y 3                          for var c in -3 .. 3 descending do
    8:  op add :isSolid:x :createTerrainMask:x 3                     result = (result << 1) | isSolid(x + c, y + r);
    9:  set :isSolid:y *tmp2                                         ...
   10:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   11:  sensor solid type @solid                                     ...
   12:  select :isSolid:result notEqual solid false 1 0              ...
   13:  op shl *tmp0 :isSolid:result 1                               result = (result << 1) | isSolid(x + c, y + r);
   14:  op add :isSolid:x :createTerrainMask:x 2                     ...
   15:  set :isSolid:y *tmp2                                         ...
   16:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   17:  sensor solid type @solid                                     ...
   18:  select :isSolid:result notEqual solid false 1 0              ...
   19:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   20:  op shl *tmp0 :createTerrainMask:result 1                     ...
   21:  op add :isSolid:x :createTerrainMask:x 1                     ...
   22:  set :isSolid:y *tmp2                                         ...
   23:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   24:  sensor solid type @solid                                     ...
   25:  select :isSolid:result notEqual solid false 1 0              ...
   26:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   27:  op shl *tmp0 :createTerrainMask:result 1                     ...
   28:  set :isSolid:x :createTerrainMask:x                          ...
   29:  set :isSolid:y *tmp2                                         ...
   30:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   31:  sensor solid type @solid                                     ...
   32:  select :isSolid:result notEqual solid false 1 0              ...
   33:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   34:  op shl *tmp0 :createTerrainMask:result 1                     ...
   35:  op add :isSolid:x :createTerrainMask:x -1                    ...
   36:  set :isSolid:y *tmp2                                         ...
   37:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   38:  sensor solid type @solid                                     ...
   39:  select :isSolid:result notEqual solid false 1 0              ...
   40:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   41:  op shl *tmp0 :createTerrainMask:result 1                     ...
   42:  op add :isSolid:x :createTerrainMask:x -2                    ...
   43:  set :isSolid:y *tmp2                                         ...
   44:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   45:  sensor solid type @solid                                     ...
   46:  select :isSolid:result notEqual solid false 1 0              ...
   47:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   48:  op shl *tmp0 :createTerrainMask:result 1                     ...
   49:  op add :isSolid:x :createTerrainMask:x -3                    ...
   50:  set :isSolid:y *tmp2                                         ...
   51:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   52:  sensor solid type @solid                                     ...
   53:  select :isSolid:result notEqual solid false 1 0              ...
   54:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   55:  op add *tmp2 :createTerrainMask:y 2                          for var c in -3 .. 3 descending do
   56:  op shl *tmp0 :createTerrainMask:result 1                     result = (result << 1) | isSolid(x + c, y + r);
   57:  op add :isSolid:x :createTerrainMask:x 3                     ...
   58:  set :isSolid:y *tmp2                                         ...
   59:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   60:  sensor solid type @solid                                     ...
   61:  select :isSolid:result notEqual solid false 1 0              ...
   62:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   63:  op shl *tmp0 :createTerrainMask:result 1                     ...
   64:  op add :isSolid:x :createTerrainMask:x 2                     ...
   65:  set :isSolid:y *tmp2                                         ...
   66:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   67:  sensor solid type @solid                                     ...
   68:  select :isSolid:result notEqual solid false 1 0              ...
   69:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   70:  op shl *tmp0 :createTerrainMask:result 1                     ...
   71:  op add :isSolid:x :createTerrainMask:x 1                     ...
   72:  set :isSolid:y *tmp2                                         ...
   73:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   74:  sensor solid type @solid                                     ...
   75:  select :isSolid:result notEqual solid false 1 0              ...
   76:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   77:  op shl *tmp0 :createTerrainMask:result 1                     ...
   78:  set :isSolid:x :createTerrainMask:x                          ...
   79:  set :isSolid:y *tmp2                                         ...
   80:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   81:  sensor solid type @solid                                     ...
   82:  select :isSolid:result notEqual solid false 1 0              ...
   83:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   84:  op shl *tmp0 :createTerrainMask:result 1                     ...
   85:  op add :isSolid:x :createTerrainMask:x -1                    ...
   86:  set :isSolid:y *tmp2                                         ...
   87:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   88:  sensor solid type @solid                                     ...
   89:  select :isSolid:result notEqual solid false 1 0              ...
   90:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   91:  op shl *tmp0 :createTerrainMask:result 1                     ...
   92:  op add :isSolid:x :createTerrainMask:x -2                    ...
   93:  set :isSolid:y *tmp2                                         ...
   94:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
   95:  sensor solid type @solid                                     ...
   96:  select :isSolid:result notEqual solid false 1 0              ...
   97:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
   98:  op shl *tmp0 :createTerrainMask:result 1                     ...
   99:  op add :isSolid:x :createTerrainMask:x -3                    ...
  100:  set :isSolid:y *tmp2                                         ...
  101:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  102:  sensor solid type @solid                                     ...
  103:  select :isSolid:result notEqual solid false 1 0              ...
  104:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  105:  op add *tmp2 :createTerrainMask:y 1                          for var c in -3 .. 3 descending do
  106:  op shl *tmp0 :createTerrainMask:result 1                     result = (result << 1) | isSolid(x + c, y + r);
  107:  op add :isSolid:x :createTerrainMask:x 3                     ...
  108:  set :isSolid:y *tmp2                                         ...
  109:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  110:  sensor solid type @solid                                     ...
  111:  select :isSolid:result notEqual solid false 1 0              ...
  112:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  113:  op shl *tmp0 :createTerrainMask:result 1                     ...
  114:  op add :isSolid:x :createTerrainMask:x 2                     ...
  115:  set :isSolid:y *tmp2                                         ...
  116:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  117:  sensor solid type @solid                                     ...
  118:  select :isSolid:result notEqual solid false 1 0              ...
  119:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  120:  op shl *tmp0 :createTerrainMask:result 1                     ...
  121:  op add :isSolid:x :createTerrainMask:x 1                     ...
  122:  set :isSolid:y *tmp2                                         ...
  123:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  124:  sensor solid type @solid                                     ...
  125:  select :isSolid:result notEqual solid false 1 0              ...
  126:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  127:  op shl *tmp0 :createTerrainMask:result 1                     ...
  128:  set :isSolid:x :createTerrainMask:x                          ...
  129:  set :isSolid:y *tmp2                                         ...
  130:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  131:  sensor solid type @solid                                     ...
  132:  select :isSolid:result notEqual solid false 1 0              ...
  133:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  134:  op shl *tmp0 :createTerrainMask:result 1                     ...
  135:  op add :isSolid:x :createTerrainMask:x -1                    ...
  136:  set :isSolid:y *tmp2                                         ...
  137:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  138:  sensor solid type @solid                                     ...
  139:  select :isSolid:result notEqual solid false 1 0              ...
  140:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  141:  op shl *tmp0 :createTerrainMask:result 1                     ...
  142:  op add :isSolid:x :createTerrainMask:x -2                    ...
  143:  set :isSolid:y *tmp2                                         ...
  144:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  145:  sensor solid type @solid                                     ...
  146:  select :isSolid:result notEqual solid false 1 0              ...
  147:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  148:  op shl *tmp0 :createTerrainMask:result 1                     ...
  149:  op add :isSolid:x :createTerrainMask:x -3                    ...
  150:  set :isSolid:y *tmp2                                         ...
  151:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  152:  sensor solid type @solid                                     ...
  153:  select :isSolid:result notEqual solid false 1 0              ...
  154:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  155:  op shl *tmp0 :createTerrainMask:result 1                     ...
  156:  op add :isSolid:x :createTerrainMask:x 3                     ...
  157:  set :isSolid:y :createTerrainMask:y                          ...
  158:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  159:  sensor solid type @solid                                     ...
  160:  select :isSolid:result notEqual solid false 1 0              ...
  161:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  162:  op shl *tmp0 :createTerrainMask:result 1                     ...
  163:  op add :isSolid:x :createTerrainMask:x 2                     ...
  164:  set :isSolid:y :createTerrainMask:y                          ...
  165:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  166:  sensor solid type @solid                                     ...
  167:  select :isSolid:result notEqual solid false 1 0              ...
  168:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  169:  op shl *tmp0 :createTerrainMask:result 1                     ...
  170:  op add :isSolid:x :createTerrainMask:x 1                     ...
  171:  set :isSolid:y :createTerrainMask:y                          ...
  172:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  173:  sensor solid type @solid                                     ...
  174:  select :isSolid:result notEqual solid false 1 0              ...
  175:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  176:  op shl *tmp0 :createTerrainMask:result 1                     ...
  177:  set :isSolid:x :createTerrainMask:x                          ...
  178:  set :isSolid:y :createTerrainMask:y                          ...
  179:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  180:  sensor solid type @solid                                     ...
  181:  select :isSolid:result notEqual solid false 1 0              ...
  182:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  183:  op shl *tmp0 :createTerrainMask:result 1                     ...
  184:  op add :isSolid:x :createTerrainMask:x -1                    ...
  185:  set :isSolid:y :createTerrainMask:y                          ...
  186:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  187:  sensor solid type @solid                                     ...
  188:  select :isSolid:result notEqual solid false 1 0              ...
  189:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  190:  op shl *tmp0 :createTerrainMask:result 1                     ...
  191:  op add :isSolid:x :createTerrainMask:x -2                    ...
  192:  set :isSolid:y :createTerrainMask:y                          ...
  193:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  194:  sensor solid type @solid                                     ...
  195:  select :isSolid:result notEqual solid false 1 0              ...
  196:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  197:  op shl *tmp0 :createTerrainMask:result 1                     ...
  198:  op add :isSolid:x :createTerrainMask:x -3                    ...
  199:  set :isSolid:y :createTerrainMask:y                          ...
  200:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  201:  sensor solid type @solid                                     ...
  202:  select :isSolid:result notEqual solid false 1 0              ...
  203:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  204:  op add *tmp2 :createTerrainMask:y -1                         for var c in -3 .. 3 descending do
  205:  op shl *tmp0 :createTerrainMask:result 1                     result = (result << 1) | isSolid(x + c, y + r);
  206:  op add :isSolid:x :createTerrainMask:x 3                     ...
  207:  set :isSolid:y *tmp2                                         ...
  208:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  209:  sensor solid type @solid                                     ...
  210:  select :isSolid:result notEqual solid false 1 0              ...
  211:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  212:  op shl *tmp0 :createTerrainMask:result 1                     ...
  213:  op add :isSolid:x :createTerrainMask:x 2                     ...
  214:  set :isSolid:y *tmp2                                         ...
  215:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  216:  sensor solid type @solid                                     ...
  217:  select :isSolid:result notEqual solid false 1 0              ...
  218:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  219:  op shl *tmp0 :createTerrainMask:result 1                     ...
  220:  op add :isSolid:x :createTerrainMask:x 1                     ...
  221:  set :isSolid:y *tmp2                                         ...
  222:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  223:  sensor solid type @solid                                     ...
  224:  select :isSolid:result notEqual solid false 1 0              ...
  225:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  226:  op shl *tmp0 :createTerrainMask:result 1                     ...
  227:  set :isSolid:x :createTerrainMask:x                          ...
  228:  set :isSolid:y *tmp2                                         ...
  229:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  230:  sensor solid type @solid                                     ...
  231:  select :isSolid:result notEqual solid false 1 0              ...
  232:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  233:  op shl *tmp0 :createTerrainMask:result 1                     ...
  234:  op add :isSolid:x :createTerrainMask:x -1                    ...
  235:  set :isSolid:y *tmp2                                         ...
  236:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  237:  sensor solid type @solid                                     ...
  238:  select :isSolid:result notEqual solid false 1 0              ...
  239:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  240:  op shl *tmp0 :createTerrainMask:result 1                     ...
  241:  op add :isSolid:x :createTerrainMask:x -2                    ...
  242:  set :isSolid:y *tmp2                                         ...
  243:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  244:  sensor solid type @solid                                     ...
  245:  select :isSolid:result notEqual solid false 1 0              ...
  246:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  247:  op shl *tmp0 :createTerrainMask:result 1                     ...
  248:  op add :isSolid:x :createTerrainMask:x -3                    ...
  249:  set :isSolid:y *tmp2                                         ...
  250:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  251:  sensor solid type @solid                                     ...
  252:  select :isSolid:result notEqual solid false 1 0              ...
  253:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  254:  op add *tmp2 :createTerrainMask:y -2                         for var c in -3 .. 3 descending do
  255:  op shl *tmp0 :createTerrainMask:result 1                     result = (result << 1) | isSolid(x + c, y + r);
  256:  op add :isSolid:x :createTerrainMask:x 3                     ...
  257:  set :isSolid:y *tmp2                                         ...
  258:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  259:  sensor solid type @solid                                     ...
  260:  select :isSolid:result notEqual solid false 1 0              ...
  261:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  262:  op shl *tmp0 :createTerrainMask:result 1                     ...
  263:  op add :isSolid:x :createTerrainMask:x 2                     ...
  264:  set :isSolid:y *tmp2                                         ...
  265:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  266:  sensor solid type @solid                                     ...
  267:  select :isSolid:result notEqual solid false 1 0              ...
  268:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  269:  op shl *tmp0 :createTerrainMask:result 1                     ...
  270:  op add :isSolid:x :createTerrainMask:x 1                     ...
  271:  set :isSolid:y *tmp2                                         ...
  272:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  273:  sensor solid type @solid                                     ...
  274:  select :isSolid:result notEqual solid false 1 0              ...
  275:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  276:  op shl *tmp0 :createTerrainMask:result 1                     ...
  277:  set :isSolid:x :createTerrainMask:x                          ...
  278:  set :isSolid:y *tmp2                                         ...
  279:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  280:  sensor solid type @solid                                     ...
  281:  select :isSolid:result notEqual solid false 1 0              ...
  282:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  283:  op shl *tmp0 :createTerrainMask:result 1                     ...
  284:  op add :isSolid:x :createTerrainMask:x -1                    ...
  285:  set :isSolid:y *tmp2                                         ...
  286:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  287:  sensor solid type @solid                                     ...
  288:  select :isSolid:result notEqual solid false 1 0              ...
  289:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  290:  op shl *tmp0 :createTerrainMask:result 1                     ...
  291:  op add :isSolid:x :createTerrainMask:x -2                    ...
  292:  set :isSolid:y *tmp2                                         ...
  293:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  294:  sensor solid type @solid                                     ...
  295:  select :isSolid:result notEqual solid false 1 0              ...
  296:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  297:  op shl *tmp0 :createTerrainMask:result 1                     ...
  298:  op add :isSolid:x :createTerrainMask:x -3                    ...
  299:  set :isSolid:y *tmp2                                         ...
  300:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  301:  sensor solid type @solid                                     ...
  302:  select :isSolid:result notEqual solid false 1 0              ...
  303:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  304:  op add *tmp2 :createTerrainMask:y -3                         for var c in -3 .. 3 descending do
  305:  op shl *tmp0 :createTerrainMask:result 1                     result = (result << 1) | isSolid(x + c, y + r);
  306:  op add :isSolid:x :createTerrainMask:x 3                     ...
  307:  set :isSolid:y *tmp2                                         ...
  308:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  309:  sensor solid type @solid                                     ...
  310:  select :isSolid:result notEqual solid false 1 0              ...
  311:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  312:  op shl *tmp0 :createTerrainMask:result 1                     ...
  313:  op add :isSolid:x :createTerrainMask:x 2                     ...
  314:  set :isSolid:y *tmp2                                         ...
  315:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  316:  sensor solid type @solid                                     ...
  317:  select :isSolid:result notEqual solid false 1 0              ...
  318:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  319:  op shl *tmp0 :createTerrainMask:result 1                     ...
  320:  op add :isSolid:x :createTerrainMask:x 1                     ...
  321:  set :isSolid:y *tmp2                                         ...
  322:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  323:  sensor solid type @solid                                     ...
  324:  select :isSolid:result notEqual solid false 1 0              ...
  325:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  326:  op shl *tmp0 :createTerrainMask:result 1                     ...
  327:  set :isSolid:x :createTerrainMask:x                          ...
  328:  set :isSolid:y *tmp2                                         ...
  329:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  330:  sensor solid type @solid                                     ...
  331:  select :isSolid:result notEqual solid false 1 0              ...
  332:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  333:  op shl *tmp0 :createTerrainMask:result 1                     ...
  334:  op add :isSolid:x :createTerrainMask:x -1                    ...
  335:  set :isSolid:y *tmp2                                         ...
  336:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  337:  sensor solid type @solid                                     ...
  338:  select :isSolid:result notEqual solid false 1 0              ...
  339:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  340:  op shl *tmp0 :createTerrainMask:result 1                     ...
  341:  op add :isSolid:x :createTerrainMask:x -2                    ...
  342:  set :isSolid:y *tmp2                                         ...
  343:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  344:  sensor solid type @solid                                     ...
  345:  select :isSolid:result notEqual solid false 1 0              ...
  346:  op or :createTerrainMask:result *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  347:  op shl *tmp0 :createTerrainMask:result 1                     ...
  348:  op add :isSolid:x :createTerrainMask:x -3                    ...
  349:  set :isSolid:y *tmp2                                         ...
  350:  ucontrol getBlock :isSolid:x :isSolid:y type building floor  mlog(in x, in y, out result) {
  351:  sensor solid type @solid                                     ...
  352:  select :isSolid:result notEqual solid false 1 0              ...
  353:  op or :createTerrainMask*retval *tmp0 :isSolid:result        result = (result << 1) | isSolid(x + c, y + r);
  354:  set :createTerrainMask*finished true                         remote def createTerrainMask(unit, x, y)
  355:  jump *label4 always 0 0                                      ...
        label *label2                                                def computeRowValues(x, y, ore, size)
  356:  op sub :spotValue:x :computeRowValues:x 2                    var x1 = spotValue(x - 2, y, ore);
  357:  set :spotValue:y :computeRowValues:y                         ...
  358:  set :spotValue:ore :computeRowValues:ore                     ...
  359:  ucontrol getBlock :spotValue:x :spotValue:y type building fl mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  360:  select value equal floor :spotValue:ore 0.00392156862745098  ...
  361:  sensor solid type @solid                                     ...
  362:  select :spotValue:result notEqual solid false 0.098039215686 ...
  363:  op sub :spotValue.1:x :computeRowValues:x 1                  var x2 = spotValue(x - 1, y, ore);
  364:  set :spotValue.1:y :computeRowValues:y                       ...
  365:  set :spotValue.1:ore :computeRowValues:ore                   ...
  366:  ucontrol getBlock :spotValue.1:x :spotValue.1:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  367:  select value equal floor :spotValue.1:ore 0.0039215686274509 ...
  368:  sensor solid type @solid                                     ...
  369:  select :spotValue.1:result notEqual solid false 0.0980392156 ...
  370:  set :spotValue.2:x :computeRowValues:x                       var x3 = spotValue(x + 0, y, ore);
  371:  set :spotValue.2:y :computeRowValues:y                       ...
  372:  set :spotValue.2:ore :computeRowValues:ore                   ...
  373:  ucontrol getBlock :spotValue.2:x :spotValue.2:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  374:  select value equal floor :spotValue.2:ore 0.0039215686274509 ...
  375:  sensor solid type @solid                                     ...
  376:  select :spotValue.2:result notEqual solid false 0.0980392156 ...
  377:  op add :spotValue.3:x :computeRowValues:x 1                  var x4 = spotValue(x + 1, y, ore);
  378:  set :spotValue.3:y :computeRowValues:y                       ...
  379:  set :spotValue.3:ore :computeRowValues:ore                   ...
  380:  ucontrol getBlock :spotValue.3:x :spotValue.3:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  381:  select value equal floor :spotValue.3:ore 0.0039215686274509 ...
  382:  sensor solid type @solid                                     ...
  383:  select :spotValue.3:result notEqual solid false 0.0980392156 ...
  384:  op add :spotValue.4:x :computeRowValues:x 2                  var x5 = spotValue(x + 2, y, ore);
  385:  set :spotValue.4:y :computeRowValues:y                       ...
  386:  set :spotValue.4:ore :computeRowValues:ore                   ...
  387:  ucontrol getBlock :spotValue.4:x :spotValue.4:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  388:  select value equal floor :spotValue.4:ore 0.0039215686274509 ...
  389:  sensor solid type @solid                                     ...
  390:  select :spotValue.4:result notEqual solid false 0.0980392156 ...
  391:  jump *label19 notEqual :computeRowValues:size 2              if size == 2 then
  392:  op add *tmp17 :spotValue:result :spotValue.1:result          x1 + x2,        // drill at x - 1.5
  393:  op add *tmp18 :spotValue.1:result :spotValue.2:result        x2 + x3,        // drill at x - 0.5
  394:  op add *tmp19 :spotValue.2:result :spotValue.3:result        x3 + x4,        // drill at x + 0.5
  395:  op add *tmp20 :spotValue.3:result :spotValue.4:result        x4 + x5         // drill at x + 1.5
  396:  packcolor :computeRowValues*retval *tmp17 *tmp18 *tmp19 *tmp return packcolor(
  397:  return :computeRowValues*retaddr                             ...
        label *label19                                               if size == 2 then
  398:  jump *label21 notEqual :computeRowValues:size 3              elsif size == 3 then
  399:  op add *tmp24 :spotValue.1:result :spotValue.2:result        x1 + (x2 + x3),   // drill at x - 1
  400:  op add *tmp25 :spotValue:result *tmp24                       ...
  401:  op add *tmp27 *tmp24 :spotValue.3:result                     (x2 + x3) + x4,   // drill at x
  402:  op add *tmp28 :spotValue.2:result :spotValue.3:result        x3 + x4 + x5,   // drill at x + 1
  403:  op add *tmp29 *tmp28 :spotValue.4:result                     ...
  404:  packcolor :computeRowValues*retval *tmp25 *tmp27 *tmp29 0    return packcolor(
  405:  return :computeRowValues*retaddr                             ...
        label *label21                                               elsif size == 3 then
  406:  op sub :spotValue.5:x :computeRowValues:x 3                  var x0 = spotValue(x - 3, y, ore);
  407:  set :spotValue.5:y :computeRowValues:y                       ...
  408:  set :spotValue.5:ore :computeRowValues:ore                   ...
  409:  ucontrol getBlock :spotValue.5:x :spotValue.5:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  410:  select value equal floor :spotValue.5:ore 0.0039215686274509 ...
  411:  sensor solid type @solid                                     ...
  412:  select :spotValue.5:result notEqual solid false 0.0980392156 ...
  413:  op add :spotValue.6:x :computeRowValues:x 3                  var x6 = spotValue(x + 3, y, ore);
  414:  set :spotValue.6:y :computeRowValues:y                       ...
  415:  set :spotValue.6:ore :computeRowValues:ore                   ...
  416:  ucontrol getBlock :spotValue.6:x :spotValue.6:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  417:  select value equal floor :spotValue.6:ore 0.0039215686274509 ...
  418:  sensor solid type @solid                                     ...
  419:  select :spotValue.6:result notEqual solid false 0.0980392156 ...
  420:  op add *tmp35 :spotValue:result :spotValue.1:result          min(WALL, x0 + (x1 + x2 + x3)),   // drill at x - 1.5
  421:  op add *tmp36 *tmp35 :spotValue.2:result                     ...
  422:  op add *tmp37 :spotValue.5:result *tmp36                     ...
  423:  op min *tmp38 0.09803921568627451 *tmp37                     ...
  424:  op add *tmp41 *tmp36 :spotValue.3:result                     min(WALL, (x1 + x2 + x3) + x4),   // drill at x - 0.5
  425:  op min *tmp42 0.09803921568627451 *tmp41                     ...
  426:  op add *tmp43 :spotValue.2:result :spotValue.3:result        min(WALL, x2 + (x3 + x4 + x5)),   // drill at x + 0.5
  427:  op add *tmp44 *tmp43 :spotValue.4:result                     ...
  428:  op add *tmp45 :spotValue.1:result *tmp44                     ...
  429:  op min *tmp46 0.09803921568627451 *tmp45                     ...
  430:  op add *tmp49 *tmp44 :spotValue.6:result                     min(WALL, (x3 + x4 + x5) + x6)    // drill at x + 1.5
  431:  op min *tmp50 0.09803921568627451 *tmp49                     ...
  432:  packcolor :computeRowValues*retval *tmp38 *tmp42 *tmp46 *tmp return packcolor(
  433:  return :computeRowValues*retaddr                             def computeRowValues(x, y, ore, size)
        label *label1                                                remote def findBestPosition(unit, x, y, ore, size, out bestX, out bestY)
  434:  ubind :findBestPosition:unit                                 ubind(unit);
  435:  op sub *tmp52 :findBestPosition:y 2                          var y1 = computeRowValues(x, y - 2, ore, size);
  436:  op sub :spotValue:x :findBestPosition:x 2                    var x1 = spotValue(x - 2, y, ore);
  437:  set :spotValue:y *tmp52                                      ...
  438:  set :spotValue:ore :findBestPosition:ore                     ...
  439:  ucontrol getBlock :spotValue:x :spotValue:y type building fl mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  440:  select value equal floor :spotValue:ore 0.00392156862745098  ...
  441:  sensor solid type @solid                                     ...
  442:  select :spotValue:result notEqual solid false 0.098039215686 ...
  443:  op sub :spotValue.1:x :findBestPosition:x 1                  var x2 = spotValue(x - 1, y, ore);
  444:  set :spotValue.1:y *tmp52                                    ...
  445:  set :spotValue.1:ore :findBestPosition:ore                   ...
  446:  ucontrol getBlock :spotValue.1:x :spotValue.1:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  447:  select value equal floor :spotValue.1:ore 0.0039215686274509 ...
  448:  sensor solid type @solid                                     ...
  449:  select :spotValue.1:result notEqual solid false 0.0980392156 ...
  450:  set :spotValue.2:x :findBestPosition:x                       var x3 = spotValue(x + 0, y, ore);
  451:  set :spotValue.2:y *tmp52                                    ...
  452:  set :spotValue.2:ore :findBestPosition:ore                   ...
  453:  ucontrol getBlock :spotValue.2:x :spotValue.2:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  454:  select value equal floor :spotValue.2:ore 0.0039215686274509 ...
  455:  sensor solid type @solid                                     ...
  456:  select :spotValue.2:result notEqual solid false 0.0980392156 ...
  457:  op add :spotValue.3:x :findBestPosition:x 1                  var x4 = spotValue(x + 1, y, ore);
  458:  set :spotValue.3:y *tmp52                                    ...
  459:  set :spotValue.3:ore :findBestPosition:ore                   ...
  460:  ucontrol getBlock :spotValue.3:x :spotValue.3:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  461:  select value equal floor :spotValue.3:ore 0.0039215686274509 ...
  462:  sensor solid type @solid                                     ...
  463:  select :spotValue.3:result notEqual solid false 0.0980392156 ...
  464:  op add :spotValue.4:x :findBestPosition:x 2                  var x5 = spotValue(x + 2, y, ore);
  465:  set :spotValue.4:y *tmp52                                    ...
  466:  set :spotValue.4:ore :findBestPosition:ore                   ...
  467:  ucontrol getBlock :spotValue.4:x :spotValue.4:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  468:  select value equal floor :spotValue.4:ore 0.0039215686274509 ...
  469:  sensor solid type @solid                                     ...
  470:  select :spotValue.4:result notEqual solid false 0.0980392156 ...
  471:  jump *label459 notEqual :findBestPosition:size 2             if size == 2 then
  472:  op add *tmp17 :spotValue:result :spotValue.1:result          x1 + x2,        // drill at x - 1.5
  473:  op add *tmp18 :spotValue.1:result :spotValue.2:result        x2 + x3,        // drill at x - 0.5
  474:  op add *tmp19 :spotValue.2:result :spotValue.3:result        x3 + x4,        // drill at x + 0.5
  475:  op add *tmp20 :spotValue.3:result :spotValue.4:result        x4 + x5         // drill at x + 1.5
  476:  packcolor :findBestPosition:y1 *tmp17 *tmp18 *tmp19 *tmp20   return packcolor(
  477:  jump *label465 always 0 0                                    ...
        label *label459                                              if size == 2 then
  478:  jump *label460 notEqual :findBestPosition:size 3             elsif size == 3 then
  479:  op add *tmp24 :spotValue.1:result :spotValue.2:result        x1 + (x2 + x3),   // drill at x - 1
  480:  op add *tmp25 :spotValue:result *tmp24                       ...
  481:  op add *tmp27 *tmp24 :spotValue.3:result                     (x2 + x3) + x4,   // drill at x
  482:  op add *tmp28 :spotValue.2:result :spotValue.3:result        x3 + x4 + x5,   // drill at x + 1
  483:  op add *tmp29 *tmp28 :spotValue.4:result                     ...
  484:  packcolor :findBestPosition:y1 *tmp25 *tmp27 *tmp29 0        return packcolor(
  485:  jump *label465 always 0 0                                    ...
        label *label460                                              elsif size == 3 then
  486:  op sub :spotValue.5:x :findBestPosition:x 3                  var x0 = spotValue(x - 3, y, ore);
  487:  set :spotValue.5:y *tmp52                                    ...
  488:  set :spotValue.5:ore :findBestPosition:ore                   ...
  489:  ucontrol getBlock :spotValue.5:x :spotValue.5:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  490:  select value equal floor :spotValue.5:ore 0.0039215686274509 ...
  491:  sensor solid type @solid                                     ...
  492:  select :spotValue.5:result notEqual solid false 0.0980392156 ...
  493:  op add :spotValue.6:x :findBestPosition:x 3                  var x6 = spotValue(x + 3, y, ore);
  494:  set :spotValue.6:y *tmp52                                    ...
  495:  set :spotValue.6:ore :findBestPosition:ore                   ...
  496:  ucontrol getBlock :spotValue.6:x :spotValue.6:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  497:  select value equal floor :spotValue.6:ore 0.0039215686274509 ...
  498:  sensor solid type @solid                                     ...
  499:  select :spotValue.6:result notEqual solid false 0.0980392156 ...
  500:  op add *tmp35 :spotValue:result :spotValue.1:result          min(WALL, x0 + (x1 + x2 + x3)),   // drill at x - 1.5
  501:  op add *tmp36 *tmp35 :spotValue.2:result                     ...
  502:  op add *tmp37 :spotValue.5:result *tmp36                     ...
  503:  op min *tmp38 0.09803921568627451 *tmp37                     ...
  504:  op add *tmp41 *tmp36 :spotValue.3:result                     min(WALL, (x1 + x2 + x3) + x4),   // drill at x - 0.5
  505:  op min *tmp42 0.09803921568627451 *tmp41                     ...
  506:  op add *tmp43 :spotValue.2:result :spotValue.3:result        min(WALL, x2 + (x3 + x4 + x5)),   // drill at x + 0.5
  507:  op add *tmp44 *tmp43 :spotValue.4:result                     ...
  508:  op add *tmp45 :spotValue.1:result *tmp44                     ...
  509:  op min *tmp46 0.09803921568627451 *tmp45                     ...
  510:  op add *tmp49 *tmp44 :spotValue.6:result                     min(WALL, (x3 + x4 + x5) + x6)    // drill at x + 1.5
  511:  op min *tmp50 0.09803921568627451 *tmp49                     ...
  512:  packcolor :findBestPosition:y1 *tmp38 *tmp42 *tmp46 *tmp50   return packcolor(
        label *label465                                              var y1 = computeRowValues(x, y - 2, ore, size);
  513:  op sub *tmp54 :findBestPosition:y 1                          var y2 = computeRowValues(x, y - 1, ore, size);
  514:  op sub :spotValue:x :findBestPosition:x 2                    var x1 = spotValue(x - 2, y, ore);
  515:  set :spotValue:y *tmp54                                      ...
  516:  set :spotValue:ore :findBestPosition:ore                     ...
  517:  ucontrol getBlock :spotValue:x :spotValue:y type building fl mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  518:  select value equal floor :spotValue:ore 0.00392156862745098  ...
  519:  sensor solid type @solid                                     ...
  520:  select :spotValue:result notEqual solid false 0.098039215686 ...
  521:  op sub :spotValue.1:x :findBestPosition:x 1                  var x2 = spotValue(x - 1, y, ore);
  522:  set :spotValue.1:y *tmp54                                    ...
  523:  set :spotValue.1:ore :findBestPosition:ore                   ...
  524:  ucontrol getBlock :spotValue.1:x :spotValue.1:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  525:  select value equal floor :spotValue.1:ore 0.0039215686274509 ...
  526:  sensor solid type @solid                                     ...
  527:  select :spotValue.1:result notEqual solid false 0.0980392156 ...
  528:  set :spotValue.2:x :findBestPosition:x                       var x3 = spotValue(x + 0, y, ore);
  529:  set :spotValue.2:y *tmp54                                    ...
  530:  set :spotValue.2:ore :findBestPosition:ore                   ...
  531:  ucontrol getBlock :spotValue.2:x :spotValue.2:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  532:  select value equal floor :spotValue.2:ore 0.0039215686274509 ...
  533:  sensor solid type @solid                                     ...
  534:  select :spotValue.2:result notEqual solid false 0.0980392156 ...
  535:  op add :spotValue.3:x :findBestPosition:x 1                  var x4 = spotValue(x + 1, y, ore);
  536:  set :spotValue.3:y *tmp54                                    ...
  537:  set :spotValue.3:ore :findBestPosition:ore                   ...
  538:  ucontrol getBlock :spotValue.3:x :spotValue.3:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  539:  select value equal floor :spotValue.3:ore 0.0039215686274509 ...
  540:  sensor solid type @solid                                     ...
  541:  select :spotValue.3:result notEqual solid false 0.0980392156 ...
  542:  op add :spotValue.4:x :findBestPosition:x 2                  var x5 = spotValue(x + 2, y, ore);
  543:  set :spotValue.4:y *tmp54                                    ...
  544:  set :spotValue.4:ore :findBestPosition:ore                   ...
  545:  ucontrol getBlock :spotValue.4:x :spotValue.4:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  546:  select value equal floor :spotValue.4:ore 0.0039215686274509 ...
  547:  sensor solid type @solid                                     ...
  548:  select :spotValue.4:result notEqual solid false 0.0980392156 ...
  549:  jump *label472 notEqual :findBestPosition:size 2             if size == 2 then
  550:  op add *tmp17 :spotValue:result :spotValue.1:result          x1 + x2,        // drill at x - 1.5
  551:  op add *tmp18 :spotValue.1:result :spotValue.2:result        x2 + x3,        // drill at x - 0.5
  552:  op add *tmp19 :spotValue.2:result :spotValue.3:result        x3 + x4,        // drill at x + 0.5
  553:  op add *tmp20 :spotValue.3:result :spotValue.4:result        x4 + x5         // drill at x + 1.5
  554:  packcolor :findBestPosition:y2 *tmp17 *tmp18 *tmp19 *tmp20   return packcolor(
  555:  jump *label478 always 0 0                                    ...
        label *label472                                              if size == 2 then
  556:  jump *label473 notEqual :findBestPosition:size 3             elsif size == 3 then
  557:  op add *tmp24 :spotValue.1:result :spotValue.2:result        x1 + (x2 + x3),   // drill at x - 1
  558:  op add *tmp25 :spotValue:result *tmp24                       ...
  559:  op add *tmp27 *tmp24 :spotValue.3:result                     (x2 + x3) + x4,   // drill at x
  560:  op add *tmp28 :spotValue.2:result :spotValue.3:result        x3 + x4 + x5,   // drill at x + 1
  561:  op add *tmp29 *tmp28 :spotValue.4:result                     ...
  562:  packcolor :findBestPosition:y2 *tmp25 *tmp27 *tmp29 0        return packcolor(
  563:  jump *label478 always 0 0                                    ...
        label *label473                                              elsif size == 3 then
  564:  op sub :spotValue.5:x :findBestPosition:x 3                  var x0 = spotValue(x - 3, y, ore);
  565:  set :spotValue.5:y *tmp54                                    ...
  566:  set :spotValue.5:ore :findBestPosition:ore                   ...
  567:  ucontrol getBlock :spotValue.5:x :spotValue.5:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  568:  select value equal floor :spotValue.5:ore 0.0039215686274509 ...
  569:  sensor solid type @solid                                     ...
  570:  select :spotValue.5:result notEqual solid false 0.0980392156 ...
  571:  op add :spotValue.6:x :findBestPosition:x 3                  var x6 = spotValue(x + 3, y, ore);
  572:  set :spotValue.6:y *tmp54                                    ...
  573:  set :spotValue.6:ore :findBestPosition:ore                   ...
  574:  ucontrol getBlock :spotValue.6:x :spotValue.6:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  575:  select value equal floor :spotValue.6:ore 0.0039215686274509 ...
  576:  sensor solid type @solid                                     ...
  577:  select :spotValue.6:result notEqual solid false 0.0980392156 ...
  578:  op add *tmp35 :spotValue:result :spotValue.1:result          min(WALL, x0 + (x1 + x2 + x3)),   // drill at x - 1.5
  579:  op add *tmp36 *tmp35 :spotValue.2:result                     ...
  580:  op add *tmp37 :spotValue.5:result *tmp36                     ...
  581:  op min *tmp38 0.09803921568627451 *tmp37                     ...
  582:  op add *tmp41 *tmp36 :spotValue.3:result                     min(WALL, (x1 + x2 + x3) + x4),   // drill at x - 0.5
  583:  op min *tmp42 0.09803921568627451 *tmp41                     ...
  584:  op add *tmp43 :spotValue.2:result :spotValue.3:result        min(WALL, x2 + (x3 + x4 + x5)),   // drill at x + 0.5
  585:  op add *tmp44 *tmp43 :spotValue.4:result                     ...
  586:  op add *tmp45 :spotValue.1:result *tmp44                     ...
  587:  op min *tmp46 0.09803921568627451 *tmp45                     ...
  588:  op add *tmp49 *tmp44 :spotValue.6:result                     min(WALL, (x3 + x4 + x5) + x6)    // drill at x + 1.5
  589:  op min *tmp50 0.09803921568627451 *tmp49                     ...
  590:  packcolor :findBestPosition:y2 *tmp38 *tmp42 *tmp46 *tmp50   return packcolor(
        label *label478                                              var y2 = computeRowValues(x, y - 1, ore, size);
  591:  op sub :spotValue:x :findBestPosition:x 2                    var x1 = spotValue(x - 2, y, ore);
  592:  set :spotValue:y :findBestPosition:y                         ...
  593:  set :spotValue:ore :findBestPosition:ore                     ...
  594:  ucontrol getBlock :spotValue:x :spotValue:y type building fl mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  595:  select value equal floor :spotValue:ore 0.00392156862745098  ...
  596:  sensor solid type @solid                                     ...
  597:  select :spotValue:result notEqual solid false 0.098039215686 ...
  598:  op sub :spotValue.1:x :findBestPosition:x 1                  var x2 = spotValue(x - 1, y, ore);
  599:  set :spotValue.1:y :findBestPosition:y                       ...
  600:  set :spotValue.1:ore :findBestPosition:ore                   ...
  601:  ucontrol getBlock :spotValue.1:x :spotValue.1:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  602:  select value equal floor :spotValue.1:ore 0.0039215686274509 ...
  603:  sensor solid type @solid                                     ...
  604:  select :spotValue.1:result notEqual solid false 0.0980392156 ...
  605:  set :spotValue.2:x :findBestPosition:x                       var x3 = spotValue(x + 0, y, ore);
  606:  set :spotValue.2:y :findBestPosition:y                       ...
  607:  set :spotValue.2:ore :findBestPosition:ore                   ...
  608:  ucontrol getBlock :spotValue.2:x :spotValue.2:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  609:  select value equal floor :spotValue.2:ore 0.0039215686274509 ...
  610:  sensor solid type @solid                                     ...
  611:  select :spotValue.2:result notEqual solid false 0.0980392156 ...
  612:  op add :spotValue.3:x :findBestPosition:x 1                  var x4 = spotValue(x + 1, y, ore);
  613:  set :spotValue.3:y :findBestPosition:y                       ...
  614:  set :spotValue.3:ore :findBestPosition:ore                   ...
  615:  ucontrol getBlock :spotValue.3:x :spotValue.3:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  616:  select value equal floor :spotValue.3:ore 0.0039215686274509 ...
  617:  sensor solid type @solid                                     ...
  618:  select :spotValue.3:result notEqual solid false 0.0980392156 ...
  619:  op add :spotValue.4:x :findBestPosition:x 2                  var x5 = spotValue(x + 2, y, ore);
  620:  set :spotValue.4:y :findBestPosition:y                       ...
  621:  set :spotValue.4:ore :findBestPosition:ore                   ...
  622:  ucontrol getBlock :spotValue.4:x :spotValue.4:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  623:  select value equal floor :spotValue.4:ore 0.0039215686274509 ...
  624:  sensor solid type @solid                                     ...
  625:  select :spotValue.4:result notEqual solid false 0.0980392156 ...
  626:  jump *label485 notEqual :findBestPosition:size 2             if size == 2 then
  627:  op add *tmp17 :spotValue:result :spotValue.1:result          x1 + x2,        // drill at x - 1.5
  628:  op add *tmp18 :spotValue.1:result :spotValue.2:result        x2 + x3,        // drill at x - 0.5
  629:  op add *tmp19 :spotValue.2:result :spotValue.3:result        x3 + x4,        // drill at x + 0.5
  630:  op add *tmp20 :spotValue.3:result :spotValue.4:result        x4 + x5         // drill at x + 1.5
  631:  packcolor :findBestPosition:y3 *tmp17 *tmp18 *tmp19 *tmp20   return packcolor(
  632:  jump *label491 always 0 0                                    ...
        label *label485                                              if size == 2 then
  633:  jump *label486 notEqual :findBestPosition:size 3             elsif size == 3 then
  634:  op add *tmp24 :spotValue.1:result :spotValue.2:result        x1 + (x2 + x3),   // drill at x - 1
  635:  op add *tmp25 :spotValue:result *tmp24                       ...
  636:  op add *tmp27 *tmp24 :spotValue.3:result                     (x2 + x3) + x4,   // drill at x
  637:  op add *tmp28 :spotValue.2:result :spotValue.3:result        x3 + x4 + x5,   // drill at x + 1
  638:  op add *tmp29 *tmp28 :spotValue.4:result                     ...
  639:  packcolor :findBestPosition:y3 *tmp25 *tmp27 *tmp29 0        return packcolor(
  640:  jump *label491 always 0 0                                    ...
        label *label486                                              elsif size == 3 then
  641:  op sub :spotValue.5:x :findBestPosition:x 3                  var x0 = spotValue(x - 3, y, ore);
  642:  set :spotValue.5:y :findBestPosition:y                       ...
  643:  set :spotValue.5:ore :findBestPosition:ore                   ...
  644:  ucontrol getBlock :spotValue.5:x :spotValue.5:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  645:  select value equal floor :spotValue.5:ore 0.0039215686274509 ...
  646:  sensor solid type @solid                                     ...
  647:  select :spotValue.5:result notEqual solid false 0.0980392156 ...
  648:  op add :spotValue.6:x :findBestPosition:x 3                  var x6 = spotValue(x + 3, y, ore);
  649:  set :spotValue.6:y :findBestPosition:y                       ...
  650:  set :spotValue.6:ore :findBestPosition:ore                   ...
  651:  ucontrol getBlock :spotValue.6:x :spotValue.6:y type buildin mlog(in x, in y, in ore, in ORE, in WALL, out result) {
  652:  select value equal floor :spotValue.6:ore 0.0039215686274509 ...
  653:  sensor solid type @solid                                     ...
  654:  select :spotValue.6:result notEqual solid false 0.0980392156 ...
  655:  op add *tmp35 :spotValue:result :spotValue.1:result          min(WALL, x0 + (x1 + x2 + x3)),   // drill at x - 1.5
  656:  op add *tmp36 *tmp35 :spotValue.2:result                     ...
  657:  op add *tmp37 :spotValue.5:result *tmp36                     ...
  658:  op min *tmp38 0.09803921568627451 *tmp37                     ...
  659:  op add *tmp41 *tmp36 :spotValue.3:result                     min(WALL, (x1 + x2 + x3) + x4),   // drill at x - 0.5
  660:  op min *tmp42 0.09803921568627451 *tmp41                     ...
  661:  op add *tmp43 :spotValue.2:result :spotValue.3:result        min(WALL, x2 + (x3 + x4 + x5)),   // drill at x + 0.5
  662:  op add *tmp44 *tmp43 :spotValue.4:result                     ...
  663:  op add *tmp45 :spotValue.1:result *tmp44                     ...
  664:  op min *tmp46 0.09803921568627451 *tmp45                     ...
  665:  op add *tmp49 *tmp44 :spotValue.6:result                     min(WALL, (x3 + x4 + x5) + x6)    // drill at x + 1.5
  666:  op min *tmp50 0.09803921568627451 *tmp49                     ...
  667:  packcolor :findBestPosition:y3 *tmp38 *tmp42 *tmp46 *tmp50   return packcolor(
        label *label491                                              var y3 = computeRowValues(x, y + 0, ore, size);
  668:  op add *tmp58 :findBestPosition:y 1                          var y4 = computeRowValues(x, y + 1, ore, size);
  669:  set :computeRowValues:x :findBestPosition:x                  ...
  670:  set :computeRowValues:y *tmp58                               ...
  671:  set :computeRowValues:ore :findBestPosition:ore              ...
  672:  set :computeRowValues:size :findBestPosition:size            ...
  673:  setaddr :computeRowValues*retaddr *label29                   ...
  674:  call *label2 *invalid :computeRowValues*retval               ...
        label *label29                                               ...
  675:  set :findBestPosition:y4 :computeRowValues*retval            ...
  676:  op add *tmp60 :findBestPosition:y 2                          var y5 = computeRowValues(x, y + 2, ore, size);
  677:  set :computeRowValues:x :findBestPosition:x                  ...
  678:  set :computeRowValues:y *tmp60                               ...
  679:  set :computeRowValues:ore :findBestPosition:ore              ...
  680:  set :computeRowValues:size :findBestPosition:size            ...
  681:  setaddr :computeRowValues*retaddr *label30                   ...
  682:  call *label2 *invalid :computeRowValues*retval               ...
        label *label30                                               ...
  683:  set :findBestPosition:y5 :computeRowValues*retval            ...
  684:  set :findBestPosition:best 0                                 var best = 0;
  685:  set :findBestPosition:bestX 0                                bestX = 0;
  686:  set :findBestPosition:bestY 0                                bestY = 0;
  687:  jump *label31 notEqual :findBestPosition:size 2              if size == 2 then
  688:  op add :findBestPosition:row1 :findBestPosition:y1 :findBest var row1 = y1 + y2;         // drill at y - 1.5
  689:  op add :findBestPosition:row2 :findBestPosition:y2 :findBest var row2 = y2 + y3;         // drill at y - 0.5
  690:  op add :findBestPosition:row3 :findBestPosition:y3 :findBest var row3 = y3 + y4;         // drill at y + 0.5
  691:  op add :findBestPosition:row4 :findBestPosition:y4 :computeR var row4 = y4 + y5;         // drill at y + 1.5
  692:  unpackcolor :updateRowPositions2x2:col1 :updateRowPositions2 unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  693:  jump *label35 greaterThanEq :updateRowPositions2x2:col1 0.07 if value < LIMIT then
  694:  jump *label37 lessThanEq :updateRowPositions2x2:col1 0       if value > best then
  695:  set :findBestPosition:bestX -1.5                             bestX = dx;
  696:  set :findBestPosition:bestY -1.5                             bestY = dy;
  697:  set :findBestPosition:best :updateRowPositions2x2:col1       best = value;
        label *label37                                               if value > best then
        label *label35                                               if value < LIMIT then
  698:  jump *label40 greaterThanEq :updateRowPositions2x2:col2 0.07 ...
  699:  jump *label42 lessThanEq :updateRowPositions2x2:col2 :findBe if value > best then
  700:  set :findBestPosition:bestX -0.5                             bestX = dx;
  701:  set :findBestPosition:bestY -1.5                             bestY = dy;
  702:  set :findBestPosition:best :updateRowPositions2x2:col2       best = value;
        label *label42                                               if value > best then
        label *label40                                               if value < LIMIT then
  703:  jump *label45 greaterThanEq :updateRowPositions2x2:col3 0.07 ...
  704:  jump *label47 lessThanEq :updateRowPositions2x2:col3 :findBe if value > best then
  705:  set :findBestPosition:bestX 0.5                              bestX = dx;
  706:  set :findBestPosition:bestY -1.5                             bestY = dy;
  707:  set :findBestPosition:best :updateRowPositions2x2:col3       best = value;
        label *label47                                               if value > best then
        label *label45                                               if value < LIMIT then
  708:  jump *label50 greaterThanEq :updateRowPositions2x2:col4 0.07 ...
  709:  jump *label52 lessThanEq :updateRowPositions2x2:col4 :findBe if value > best then
  710:  set :findBestPosition:bestX 1.5                              bestX = dx;
  711:  set :findBestPosition:bestY -1.5                             bestY = dy;
  712:  set :findBestPosition:best :updateRowPositions2x2:col4       best = value;
        label *label52                                               if value > best then
        label *label50                                               if value < LIMIT then
  713:  unpackcolor :updateRowPositions2x2.1:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  714:  jump *label56 greaterThanEq :updateRowPositions2x2.1:col1 0. if value < LIMIT then
  715:  jump *label58 lessThanEq :updateRowPositions2x2.1:col1 :find if value > best then
  716:  set :findBestPosition:bestX -1.5                             bestX = dx;
  717:  set :findBestPosition:bestY -0.5                             bestY = dy;
  718:  set :findBestPosition:best :updateRowPositions2x2.1:col1     best = value;
        label *label58                                               if value > best then
        label *label56                                               if value < LIMIT then
  719:  jump *label61 greaterThanEq :updateRowPositions2x2.1:col2 0. ...
  720:  jump *label63 lessThanEq :updateRowPositions2x2.1:col2 :find if value > best then
  721:  set :findBestPosition:bestX -0.5                             bestX = dx;
  722:  set :findBestPosition:bestY -0.5                             bestY = dy;
  723:  set :findBestPosition:best :updateRowPositions2x2.1:col2     best = value;
        label *label63                                               if value > best then
        label *label61                                               if value < LIMIT then
  724:  jump *label66 greaterThanEq :updateRowPositions2x2.1:col3 0. ...
  725:  jump *label68 lessThanEq :updateRowPositions2x2.1:col3 :find if value > best then
  726:  set :findBestPosition:bestX 0.5                              bestX = dx;
  727:  set :findBestPosition:bestY -0.5                             bestY = dy;
  728:  set :findBestPosition:best :updateRowPositions2x2.1:col3     best = value;
        label *label68                                               if value > best then
        label *label66                                               if value < LIMIT then
  729:  jump *label71 greaterThanEq :updateRowPositions2x2.1:col4 0. ...
  730:  jump *label73 lessThanEq :updateRowPositions2x2.1:col4 :find if value > best then
  731:  set :findBestPosition:bestX 1.5                              bestX = dx;
  732:  set :findBestPosition:bestY -0.5                             bestY = dy;
  733:  set :findBestPosition:best :updateRowPositions2x2.1:col4     best = value;
        label *label73                                               if value > best then
        label *label71                                               if value < LIMIT then
  734:  unpackcolor :updateRowPositions2x2.2:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  735:  jump *label77 greaterThanEq :updateRowPositions2x2.2:col1 0. if value < LIMIT then
  736:  jump *label79 lessThanEq :updateRowPositions2x2.2:col1 :find if value > best then
  737:  set :findBestPosition:bestX -1.5                             bestX = dx;
  738:  set :findBestPosition:bestY 0.5                              bestY = dy;
  739:  set :findBestPosition:best :updateRowPositions2x2.2:col1     best = value;
        label *label79                                               if value > best then
        label *label77                                               if value < LIMIT then
  740:  jump *label82 greaterThanEq :updateRowPositions2x2.2:col2 0. ...
  741:  jump *label84 lessThanEq :updateRowPositions2x2.2:col2 :find if value > best then
  742:  set :findBestPosition:bestX -0.5                             bestX = dx;
  743:  set :findBestPosition:bestY 0.5                              bestY = dy;
  744:  set :findBestPosition:best :updateRowPositions2x2.2:col2     best = value;
        label *label84                                               if value > best then
        label *label82                                               if value < LIMIT then
  745:  jump *label87 greaterThanEq :updateRowPositions2x2.2:col3 0. ...
  746:  jump *label89 lessThanEq :updateRowPositions2x2.2:col3 :find if value > best then
  747:  set :findBestPosition:bestX 0.5                              bestX = dx;
  748:  set :findBestPosition:bestY 0.5                              bestY = dy;
  749:  set :findBestPosition:best :updateRowPositions2x2.2:col3     best = value;
        label *label89                                               if value > best then
        label *label87                                               if value < LIMIT then
  750:  jump *label92 greaterThanEq :updateRowPositions2x2.2:col4 0. ...
  751:  jump *label94 lessThanEq :updateRowPositions2x2.2:col4 :find if value > best then
  752:  set :findBestPosition:bestX 1.5                              bestX = dx;
  753:  set :findBestPosition:bestY 0.5                              bestY = dy;
  754:  set :findBestPosition:best :updateRowPositions2x2.2:col4     best = value;
        label *label94                                               if value > best then
        label *label92                                               if value < LIMIT then
  755:  unpackcolor :updateRowPositions2x2.3:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  756:  jump *label98 greaterThanEq :updateRowPositions2x2.3:col1 0. if value < LIMIT then
  757:  jump *label100 lessThanEq :updateRowPositions2x2.3:col1 :fin if value > best then
  758:  set :findBestPosition:bestX -1.5                             bestX = dx;
  759:  set :findBestPosition:bestY 1.5                              bestY = dy;
  760:  set :findBestPosition:best :updateRowPositions2x2.3:col1     best = value;
        label *label100                                              if value > best then
        label *label98                                               if value < LIMIT then
  761:  jump *label103 greaterThanEq :updateRowPositions2x2.3:col2 0 ...
  762:  jump *label105 lessThanEq :updateRowPositions2x2.3:col2 :fin if value > best then
  763:  set :findBestPosition:bestX -0.5                             bestX = dx;
  764:  set :findBestPosition:bestY 1.5                              bestY = dy;
  765:  set :findBestPosition:best :updateRowPositions2x2.3:col2     best = value;
        label *label105                                              if value > best then
        label *label103                                              if value < LIMIT then
  766:  jump *label108 greaterThanEq :updateRowPositions2x2.3:col3 0 ...
  767:  jump *label110 lessThanEq :updateRowPositions2x2.3:col3 :fin if value > best then
  768:  set :findBestPosition:bestX 0.5                              bestX = dx;
  769:  set :findBestPosition:bestY 1.5                              bestY = dy;
  770:  set :findBestPosition:best :updateRowPositions2x2.3:col3     best = value;
        label *label110                                              if value > best then
        label *label108                                              if value < LIMIT then
  771:  jump *label32 greaterThanEq :updateRowPositions2x2.3:col4 0. ...
  772:  jump *label32 lessThanEq :updateRowPositions2x2.3:col4 :find if value > best then
  773:  set :findBestPosition:bestX 1.5                              bestX = dx;
  774:  set :findBestPosition:bestY 1.5                              bestY = dy;
  775:  set :findBestPosition:best :updateRowPositions2x2.3:col4     best = value;
  776:  jump *label32 always 0 0                                     if size == 2 then
        label *label31                                               ...
  777:  jump *label117 notEqual :findBestPosition:size 3             elsif size == 3 then
  778:  op add *tmp134 :findBestPosition:y2 :findBestPosition:y3     var row1 = y1 + (y2 + y3);  // drill at y - 1
  779:  op add :findBestPosition:row1.1 :findBestPosition:y1 *tmp134 ...
  780:  op add :findBestPosition:row2.1 *tmp134 :findBestPosition:y4 var row2 = (y2 + y3) + y4;  // drill at y
  781:  op add *tmp138 :findBestPosition:y3 :findBestPosition:y4     var row3 = y3 + y4 + y5;    // drill at y + 1
  782:  op add :findBestPosition:row3.1 *tmp138 :computeRowValues*re ...
  783:  unpackcolor :updateRowPositions3x3:col1 :updateRowPositions3 unpackcolor(out col1, out col2, out col3, , rowSum);
  784:  jump *label121 greaterThanEq :updateRowPositions3x3:col1 0.0 if value < LIMIT then
  785:  jump *label123 lessThanEq :updateRowPositions3x3:col1 0      if value > best then
  786:  set :findBestPosition:bestX -1                               bestX = dx;
  787:  set :findBestPosition:bestY -1                               bestY = dy;
  788:  set :findBestPosition:best :updateRowPositions3x3:col1       best = value;
        label *label123                                              if value > best then
        label *label121                                              if value < LIMIT then
  789:  jump *label126 greaterThanEq :updateRowPositions3x3:col2 0.0 ...
  790:  jump *label128 lessThanEq :updateRowPositions3x3:col2 :findB if value > best then
  791:  set :findBestPosition:bestX 0                                bestX = dx;
  792:  set :findBestPosition:bestY -1                               bestY = dy;
  793:  set :findBestPosition:best :updateRowPositions3x3:col2       best = value;
        label *label128                                              if value > best then
        label *label126                                              if value < LIMIT then
  794:  jump *label131 greaterThanEq :updateRowPositions3x3:col3 0.0 ...
  795:  jump *label133 lessThanEq :updateRowPositions3x3:col3 :findB if value > best then
  796:  set :findBestPosition:bestX 1                                bestX = dx;
  797:  set :findBestPosition:bestY -1                               bestY = dy;
  798:  set :findBestPosition:best :updateRowPositions3x3:col3       best = value;
        label *label133                                              if value > best then
        label *label131                                              if value < LIMIT then
  799:  unpackcolor :updateRowPositions3x3.1:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, , rowSum);
  800:  jump *label137 greaterThanEq :updateRowPositions3x3.1:col1 0 if value < LIMIT then
  801:  jump *label139 lessThanEq :updateRowPositions3x3.1:col1 :fin if value > best then
  802:  set :findBestPosition:bestX -1                               bestX = dx;
  803:  set :findBestPosition:bestY 0                                bestY = dy;
  804:  set :findBestPosition:best :updateRowPositions3x3.1:col1     best = value;
        label *label139                                              if value > best then
        label *label137                                              if value < LIMIT then
  805:  jump *label142 greaterThanEq :updateRowPositions3x3.1:col2 0 ...
  806:  jump *label144 lessThanEq :updateRowPositions3x3.1:col2 :fin if value > best then
  807:  set :findBestPosition:bestX 0                                bestX = dx;
  808:  set :findBestPosition:bestY 0                                bestY = dy;
  809:  set :findBestPosition:best :updateRowPositions3x3.1:col2     best = value;
        label *label144                                              if value > best then
        label *label142                                              if value < LIMIT then
  810:  jump *label147 greaterThanEq :updateRowPositions3x3.1:col3 0 ...
  811:  jump *label149 lessThanEq :updateRowPositions3x3.1:col3 :fin if value > best then
  812:  set :findBestPosition:bestX 1                                bestX = dx;
  813:  set :findBestPosition:bestY 0                                bestY = dy;
  814:  set :findBestPosition:best :updateRowPositions3x3.1:col3     best = value;
        label *label149                                              if value > best then
        label *label147                                              if value < LIMIT then
  815:  unpackcolor :updateRowPositions3x3.2:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, , rowSum);
  816:  jump *label153 greaterThanEq :updateRowPositions3x3.2:col1 0 if value < LIMIT then
  817:  jump *label155 lessThanEq :updateRowPositions3x3.2:col1 :fin if value > best then
  818:  set :findBestPosition:bestX -1                               bestX = dx;
  819:  set :findBestPosition:bestY 1                                bestY = dy;
  820:  set :findBestPosition:best :updateRowPositions3x3.2:col1     best = value;
        label *label155                                              if value > best then
        label *label153                                              if value < LIMIT then
  821:  jump *label158 greaterThanEq :updateRowPositions3x3.2:col2 0 ...
  822:  jump *label160 lessThanEq :updateRowPositions3x3.2:col2 :fin if value > best then
  823:  set :findBestPosition:bestX 0                                bestX = dx;
  824:  set :findBestPosition:bestY 1                                bestY = dy;
  825:  set :findBestPosition:best :updateRowPositions3x3.2:col2     best = value;
        label *label160                                              if value > best then
        label *label158                                              if value < LIMIT then
  826:  jump *label118 greaterThanEq :updateRowPositions3x3.2:col3 0 ...
  827:  jump *label118 lessThanEq :updateRowPositions3x3.2:col3 :fin if value > best then
  828:  set :findBestPosition:bestX 1                                bestX = dx;
  829:  set :findBestPosition:bestY 1                                bestY = dy;
  830:  set :findBestPosition:best :updateRowPositions3x3.2:col3     best = value;
  831:  jump *label118 always 0 0                                    elsif size == 3 then
        label *label117                                              ...
  832:  op sub *tmp179 :findBestPosition:y 3                         var y0 = computeRowValues(x, y - 3, ore, size);
  833:  set :computeRowValues:x :findBestPosition:x                  ...
  834:  set :computeRowValues:y *tmp179                              ...
  835:  set :computeRowValues:ore :findBestPosition:ore              ...
  836:  set :computeRowValues:size :findBestPosition:size            ...
  837:  setaddr :computeRowValues*retaddr *label167                  ...
  838:  call *label2 *invalid :computeRowValues*retval               ...
        label *label167                                              ...
  839:  set :findBestPosition:y0 :computeRowValues*retval            ...
  840:  op add *tmp181 :findBestPosition:y 3                         var y6 = computeRowValues(x, y + 3, ore, size);
  841:  set :computeRowValues:x :findBestPosition:x                  ...
  842:  set :computeRowValues:y *tmp181                              ...
  843:  set :computeRowValues:ore :findBestPosition:ore              ...
  844:  set :computeRowValues:size :findBestPosition:size            ...
  845:  setaddr :computeRowValues*retaddr *label168                  ...
  846:  call *label2 *invalid :computeRowValues*retval               ...
        label *label168                                              ...
  847:  op add *tmp183 :findBestPosition:y1 :findBestPosition:y2     var row1 = y0 + (y1 + y2 + y3);     // drill at y - 1.5
  848:  op add *tmp184 *tmp183 :findBestPosition:y3                  ...
  849:  op add :findBestPosition:row1.2 :findBestPosition:y0 *tmp184 ...
  850:  op add :findBestPosition:row2.2 *tmp184 :findBestPosition:y4 var row2 = (y1 + y2 + y3) + y4;     // drill at y - 0.5
  851:  op add *tmp189 :findBestPosition:y3 :findBestPosition:y4     var row3 = y2 + (y3 + y4 + y5);     // drill at y + 0.5
  852:  op add *tmp190 *tmp189 :findBestPosition:y5                  ...
  853:  op add :findBestPosition:row3.2 :findBestPosition:y2 *tmp190 ...
  854:  op add :findBestPosition:row4.1 *tmp190 :computeRowValues*re var row4 = (y3 + y4 + y5) + y6;     // drill at y + 1.5
  855:  unpackcolor :updateRowPositions4x4:col1 :updateRowPositions4 unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  856:  jump *label171 greaterThanEq :updateRowPositions4x4:col1 0.0 if value < LIMIT then
  857:  jump *label173 lessThanEq :updateRowPositions4x4:col1 :findB if value > best then
  858:  set :findBestPosition:bestX -1.5                             bestX = dx;
  859:  set :findBestPosition:bestY -1.5                             bestY = dy;
  860:  set :findBestPosition:best :updateRowPositions4x4:col1       best = value;
        label *label173                                              if value > best then
        label *label171                                              if value < LIMIT then
  861:  jump *label176 greaterThanEq :updateRowPositions4x4:col2 0.0 ...
  862:  jump *label178 lessThanEq :updateRowPositions4x4:col2 :findB if value > best then
  863:  set :findBestPosition:bestX -0.5                             bestX = dx;
  864:  set :findBestPosition:bestY -1.5                             bestY = dy;
  865:  set :findBestPosition:best :updateRowPositions4x4:col2       best = value;
        label *label178                                              if value > best then
        label *label176                                              if value < LIMIT then
  866:  jump *label181 greaterThanEq :updateRowPositions4x4:col3 0.0 ...
  867:  jump *label183 lessThanEq :updateRowPositions4x4:col3 :findB if value > best then
  868:  set :findBestPosition:bestX 0.5                              bestX = dx;
  869:  set :findBestPosition:bestY -1.5                             bestY = dy;
  870:  set :findBestPosition:best :updateRowPositions4x4:col3       best = value;
        label *label183                                              if value > best then
        label *label181                                              if value < LIMIT then
  871:  jump *label186 greaterThanEq :updateRowPositions4x4:col4 0.0 ...
  872:  jump *label188 lessThanEq :updateRowPositions4x4:col4 :findB if value > best then
  873:  set :findBestPosition:bestX 1.5                              bestX = dx;
  874:  set :findBestPosition:bestY -1.5                             bestY = dy;
  875:  set :findBestPosition:best :updateRowPositions4x4:col4       best = value;
        label *label188                                              if value > best then
        label *label186                                              if value < LIMIT then
  876:  unpackcolor :updateRowPositions4x4.1:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  877:  jump *label192 greaterThanEq :updateRowPositions4x4.1:col1 0 if value < LIMIT then
  878:  jump *label194 lessThanEq :updateRowPositions4x4.1:col1 :fin if value > best then
  879:  set :findBestPosition:bestX -1.5                             bestX = dx;
  880:  set :findBestPosition:bestY -0.5                             bestY = dy;
  881:  set :findBestPosition:best :updateRowPositions4x4.1:col1     best = value;
        label *label194                                              if value > best then
        label *label192                                              if value < LIMIT then
  882:  jump *label197 greaterThanEq :updateRowPositions4x4.1:col2 0 ...
  883:  jump *label199 lessThanEq :updateRowPositions4x4.1:col2 :fin if value > best then
  884:  set :findBestPosition:bestX -0.5                             bestX = dx;
  885:  set :findBestPosition:bestY -0.5                             bestY = dy;
  886:  set :findBestPosition:best :updateRowPositions4x4.1:col2     best = value;
        label *label199                                              if value > best then
        label *label197                                              if value < LIMIT then
  887:  jump *label202 greaterThanEq :updateRowPositions4x4.1:col3 0 ...
  888:  jump *label204 lessThanEq :updateRowPositions4x4.1:col3 :fin if value > best then
  889:  set :findBestPosition:bestX 0.5                              bestX = dx;
  890:  set :findBestPosition:bestY -0.5                             bestY = dy;
  891:  set :findBestPosition:best :updateRowPositions4x4.1:col3     best = value;
        label *label204                                              if value > best then
        label *label202                                              if value < LIMIT then
  892:  jump *label207 greaterThanEq :updateRowPositions4x4.1:col4 0 ...
  893:  jump *label209 lessThanEq :updateRowPositions4x4.1:col4 :fin if value > best then
  894:  set :findBestPosition:bestX 1.5                              bestX = dx;
  895:  set :findBestPosition:bestY -0.5                             bestY = dy;
  896:  set :findBestPosition:best :updateRowPositions4x4.1:col4     best = value;
        label *label209                                              if value > best then
        label *label207                                              if value < LIMIT then
  897:  unpackcolor :updateRowPositions4x4.2:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  898:  jump *label213 greaterThanEq :updateRowPositions4x4.2:col1 0 if value < LIMIT then
  899:  jump *label215 lessThanEq :updateRowPositions4x4.2:col1 :fin if value > best then
  900:  set :findBestPosition:bestX -1.5                             bestX = dx;
  901:  set :findBestPosition:bestY 0.5                              bestY = dy;
  902:  set :findBestPosition:best :updateRowPositions4x4.2:col1     best = value;
        label *label215                                              if value > best then
        label *label213                                              if value < LIMIT then
  903:  jump *label218 greaterThanEq :updateRowPositions4x4.2:col2 0 ...
  904:  jump *label220 lessThanEq :updateRowPositions4x4.2:col2 :fin if value > best then
  905:  set :findBestPosition:bestX -0.5                             bestX = dx;
  906:  set :findBestPosition:bestY 0.5                              bestY = dy;
  907:  set :findBestPosition:best :updateRowPositions4x4.2:col2     best = value;
        label *label220                                              if value > best then
        label *label218                                              if value < LIMIT then
  908:  jump *label223 greaterThanEq :updateRowPositions4x4.2:col3 0 ...
  909:  jump *label225 lessThanEq :updateRowPositions4x4.2:col3 :fin if value > best then
  910:  set :findBestPosition:bestX 0.5                              bestX = dx;
  911:  set :findBestPosition:bestY 0.5                              bestY = dy;
  912:  set :findBestPosition:best :updateRowPositions4x4.2:col3     best = value;
        label *label225                                              if value > best then
        label *label223                                              if value < LIMIT then
  913:  jump *label228 greaterThanEq :updateRowPositions4x4.2:col4 0 ...
  914:  jump *label230 lessThanEq :updateRowPositions4x4.2:col4 :fin if value > best then
  915:  set :findBestPosition:bestX 1.5                              bestX = dx;
  916:  set :findBestPosition:bestY 0.5                              bestY = dy;
  917:  set :findBestPosition:best :updateRowPositions4x4.2:col4     best = value;
        label *label230                                              if value > best then
        label *label228                                              if value < LIMIT then
  918:  unpackcolor :updateRowPositions4x4.3:col1 :updateRowPosition unpackcolor(out col1, out col2, out col3, out col4, rowSum);
  919:  jump *label234 greaterThanEq :updateRowPositions4x4.3:col1 0 if value < LIMIT then
  920:  jump *label236 lessThanEq :updateRowPositions4x4.3:col1 :fin if value > best then
  921:  set :findBestPosition:bestX -1.5                             bestX = dx;
  922:  set :findBestPosition:bestY 1.5                              bestY = dy;
  923:  set :findBestPosition:best :updateRowPositions4x4.3:col1     best = value;
        label *label236                                              if value > best then
        label *label234                                              if value < LIMIT then
  924:  jump *label239 greaterThanEq :updateRowPositions4x4.3:col2 0 ...
  925:  jump *label241 lessThanEq :updateRowPositions4x4.3:col2 :fin if value > best then
  926:  set :findBestPosition:bestX -0.5                             bestX = dx;
  927:  set :findBestPosition:bestY 1.5                              bestY = dy;
  928:  set :findBestPosition:best :updateRowPositions4x4.3:col2     best = value;
        label *label241                                              if value > best then
        label *label239                                              if value < LIMIT then
  929:  jump *label244 greaterThanEq :updateRowPositions4x4.3:col3 0 ...
  930:  jump *label246 lessThanEq :updateRowPositions4x4.3:col3 :fin if value > best then
  931:  set :findBestPosition:bestX 0.5                              bestX = dx;
  932:  set :findBestPosition:bestY 1.5                              bestY = dy;
  933:  set :findBestPosition:best :updateRowPositions4x4.3:col3     best = value;
        label *label246                                              if value > best then
        label *label244                                              if value < LIMIT then
  934:  jump *label249 greaterThanEq :updateRowPositions4x4.3:col4 0 ...
  935:  jump *label251 lessThanEq :updateRowPositions4x4.3:col4 :fin if value > best then
  936:  set :findBestPosition:bestX 1.5                              bestX = dx;
  937:  set :findBestPosition:bestY 1.5                              bestY = dy;
  938:  set :findBestPosition:best :updateRowPositions4x4.3:col4     best = value;
        label *label251                                              if value > best then
        label *label249                                              if value < LIMIT then
        label *label118                                              elsif size == 3 then
        label *label32                                               if size == 2 then
  939:  op mul :findBestPosition*retval :findBestPosition:best 255   return best * 255;
  940:  set :findBestPosition*finished true                          remote def findBestPosition(unit, x, y, ore, size, out bestX, out bestY)
  941:  jump *label4 always 0 0                                      ...


Performance: parsed in 245 ms, compiled in 227 ms, optimized in 869 ms, run in 13 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: success.

Program output (3 steps):
The program didn't generate any output.
Execution exception at instruction 4: wait 1e12:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
