Automatically added missing 'printflush(message1);' call to the end of the program.
   631 instructions before optimizations.
    36 instructions modified by Expression Optimization (2 passes, 4 iterations).
  1073 instructions eliminated by Data Flow Optimization (39 passes, 153 iterations).
  1404 instructions added by Function Inlining (40 iterations).
    36 function calls inlined by Function Inlining.
     1 instructions eliminated by Unreachable Code Elimination (2 iterations).
   562 instructions eliminated by Print Merging.
   399 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 588):
  * Inline function call at line 7:1                             size   +40, benefit        9.5, efficiency      0.238 (+32 instructions)
    Inline function call at line 8:1                             size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 9:1                             size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 10:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 11:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 556):
  * Inline function call at line 8:1                             size   +40, benefit        9.5, efficiency      0.238 (+22 instructions)
    Inline function call at line 9:1                             size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 10:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 11:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 534):
  * Inline function call at line 9:1                             size   +40, benefit        9.5, efficiency      0.238 (+18 instructions)
    Inline function call at line 10:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 11:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 516):
  * Inline function call at line 10:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 11:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 499):
  * Inline function call at line 11:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 482):
  * Inline function call at line 12:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 466):
  * Inline function call at line 13:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 450):
  * Inline function call at line 14:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 433):
  * Inline function call at line 15:1                            size   +40, benefit        9.5, efficiency      0.238 (+19 instructions)
    Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 414):
  * Inline function call at line 16:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 397):
  * Inline function call at line 17:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 380):
  * Inline function call at line 18:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 364):
  * Inline function call at line 19:1                            size   +40, benefit        9.5, efficiency      0.238 (+14 instructions)
    Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 350):
  * Inline function call at line 20:1                            size   +40, benefit        9.5, efficiency      0.238 (+14 instructions)
    Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 336):
  * Inline function call at line 21:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 319):
  * Inline function call at line 22:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 303):
  * Inline function call at line 23:1                            size   +40, benefit        9.5, efficiency      0.238 (+18 instructions)
    Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 285):
  * Inline function call at line 24:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 270):
  * Inline function call at line 25:1                            size   +40, benefit        9.5, efficiency      0.238 (+22 instructions)
    Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 248):
  * Inline function call at line 26:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 233):
  ! Inline function 'packCfg' defined at line 49:1               size  +719, benefit      180.5, efficiency      0.251
  * Inline function call at line 27:1                            size   +40, benefit        9.5, efficiency      0.238 (+14 instructions)
    Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 219):
  ! Inline function 'packCfg' defined at line 49:1               size  +679, benefit      171.0, efficiency      0.252
  * Inline function call at line 28:1                            size   +40, benefit        9.5, efficiency      0.238 (+13 instructions)
    Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 206):
  ! Inline function 'packCfg' defined at line 49:1               size  +639, benefit      161.5, efficiency      0.253
  * Inline function call at line 29:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 191):
  ! Inline function 'packCfg' defined at line 49:1               size  +599, benefit      152.0, efficiency      0.254
  * Inline function call at line 30:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 176):
  ! Inline function 'packCfg' defined at line 49:1               size  +559, benefit      142.5, efficiency      0.255
  * Inline function call at line 31:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 159):
  ! Inline function 'packCfg' defined at line 49:1               size  +519, benefit      133.0, efficiency      0.256
  * Inline function call at line 32:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 142):
  ! Inline function 'packCfg' defined at line 49:1               size  +479, benefit      123.5, efficiency      0.258
  * Inline function call at line 33:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 126):
  ! Inline function 'packCfg' defined at line 49:1               size  +439, benefit      114.0, efficiency      0.260
  * Inline function call at line 34:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 111):
  ! Inline function 'packCfg' defined at line 49:1               size  +399, benefit      104.5, efficiency      0.262
  * Inline function call at line 35:1                            size   +40, benefit        9.5, efficiency      0.238 (+15 instructions)
    Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 96):
  ! Inline function 'packCfg' defined at line 49:1               size  +359, benefit       95.0, efficiency      0.265
  * Inline function call at line 36:1                            size   +40, benefit        9.5, efficiency      0.238 (+16 instructions)
    Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 80):
  ! Inline function 'packCfg' defined at line 49:1               size  +319, benefit       85.5, efficiency      0.268
  * Inline function call at line 37:1                            size   +40, benefit        9.5, efficiency      0.238 (+18 instructions)
    Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 62):
  ! Inline function 'packCfg' defined at line 49:1               size  +279, benefit       76.0, efficiency      0.272
  * Inline function call at line 38:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 45):
  ! Inline function 'packCfg' defined at line 49:1               size  +239, benefit       66.5, efficiency      0.278
  * Inline function call at line 39:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 1: speed optimization selection (cost limit 28):
  ! Inline function 'packCfg' defined at line 49:1               size  +199, benefit       57.0, efficiency      0.286
  ! Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 2: speed optimization selection (cost limit 92):
  ! Inline function 'packCfg' defined at line 49:1               size  +199, benefit       57.0, efficiency      0.286
  * Inline function call at line 40:1                            size   +40, benefit        9.5, efficiency      0.238 (+20 instructions)
    Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 2: speed optimization selection (cost limit 72):
  ! Inline function 'packCfg' defined at line 49:1               size  +159, benefit       47.5, efficiency      0.299
  * Inline function call at line 41:1                            size   +40, benefit        9.5, efficiency      0.238 (+17 instructions)
    Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 2: speed optimization selection (cost limit 55):
  ! Inline function 'packCfg' defined at line 49:1               size  +119, benefit       38.0, efficiency      0.319
  * Inline function call at line 42:1                            size   +40, benefit        9.5, efficiency      0.238 (+21 instructions)
    Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
    Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 2: speed optimization selection (cost limit 34):
  ! Inline function 'packCfg' defined at line 49:1               size   +79, benefit       28.5, efficiency      0.361
  ! Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 3: speed optimization selection (cost limit 38):
  ! Inline function 'packCfg' defined at line 49:1               size   +79, benefit       28.5, efficiency      0.361
  ! Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238

Pass 4: speed optimization selection (cost limit 38):
  ! Inline function 'packCfg' defined at line 49:1               size   +79, benefit       28.5, efficiency      0.361
  ! Inline function call at line 43:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 44:1                            size   +40, benefit        9.5, efficiency      0.238
  ! Inline function call at line 45:1                            size   +40, benefit        9.5, efficiency      0.238
C:\Home\golem\jam-202507\BlockConfiguration.mnd:47:5 Variable 'index' is not initialized.

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-13 instructions):
 
   496 set :packCfg:name "CONTAINER"
   497 set :packCfg:type @container
   498 set :packCfg:x 0
-    * set :packCfg:y 0
   499 set :packCfg:cu 0
   500 set :packCfg:pb 0
   501 set :packCfg:gr 0
 
   573 call *label0 *invalid :packCfg*retval (m:*label36) (h:*label36)
   574 label *label36
   575 set :packCfg:name "UNLOADER6"
-    * set :packCfg:type @unloader
   576 set :packCfg:x 1
   577 set :packCfg:y -2
-    * set :packCfg:cu 0
-    * set :packCfg:pb 0
   578 set :packCfg:gr 0
-    * set :packCfg:si 30
-    * set :packCfg:ti 25
   579 set :packCfg:mg 0
   580 set :packCfg:th 0
   581 set :packCfg:rotation 0
 
   585 label *label37
   586 set :packCfg:name "UNDERFLOW_GATE2"
   587 set :packCfg:type @underflow-gate
-    * set :packCfg:x 1
   588 set :packCfg:y -3
   589 set :packCfg:cu 4
   590 set :packCfg:pb 2
 
   592 set :packCfg:si 0
   593 set :packCfg:ti 0
   594 set :packCfg:mg 0
-    * set :packCfg:th 0
   595 set :packCfg:rotation 0
-    * set :packCfg:size 1
   596 setaddr :packCfg*retaddr *label38 (h:*label38)
   597 call *label0 *invalid :packCfg*retval (m:*label38) (h:*label38)
   598 label *label38
 
   602 set :packCfg:y -4
   603 set :packCfg:cu 0
   604 set :packCfg:pb 650
-    * set :packCfg:gr 0
   605 set :packCfg:si 450
   606 set :packCfg:ti 350
-    * set :packCfg:mg 0
   607 set :packCfg:th 650
-    * set :packCfg:rotation 0
   608 set :packCfg:size 5
   609 setaddr :packCfg*retaddr *label39 (h:*label39)
   610 call *label0 *invalid :packCfg*retval (m:*label39) (h:*label39)
   611 label *label39
-    * set .index 0
   612 printflush message1
   613 end
   614 label *label0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   480 set :packCfg:name "SOLAR_PANEL"
   481 set :packCfg:type @solar-panel
   482 set :packCfg:x 0
-    * set :packCfg:y 0
   483 set :packCfg:cu 0
   484 set :packCfg:pb 10
   485 set :packCfg:gr 0
 
   540 call *label0 *invalid :packCfg*retval (m:*label34) (h:*label34)
   541 label *label34
   542 set :packCfg:name "INVERTED_SORT5"
-    * set :packCfg:type @inverted-sorter
   543 set :packCfg:x 3
   544 set :packCfg:y -1
-    * set :packCfg:cu 2
-    * set :packCfg:pb 2
   545 set :packCfg:gr 0
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
   546 set :packCfg:mg 0
   547 set :packCfg:th 0
   548 set :packCfg:rotation 0
 
   552 label *label35
   553 set :packCfg:name "UNLOADER5"
   554 set :packCfg:type @unloader
-    * set :packCfg:x 3
   555 set :packCfg:y 3
   556 set :packCfg:cu 0
   557 set :packCfg:pb 0
 
   570 set :packCfg:y -2
   571 set :packCfg:gr 0
   572 set :packCfg:mg 0
-    * set :packCfg:th 0
   573 set :packCfg:rotation 0
-    * set :packCfg:size 1
   574 setaddr :packCfg*retaddr *label37 (h:*label37)
   575 call *label0 *invalid :packCfg*retval (m:*label37) (h:*label37)
   576 label *label37
 
   579 set :packCfg:y -3
   580 set :packCfg:cu 4
   581 set :packCfg:pb 2
-    * set :packCfg:gr 0
   582 set :packCfg:si 0
   583 set :packCfg:ti 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   584 setaddr :packCfg*retaddr *label38 (h:*label38)
   585 call *label0 *invalid :packCfg*retval (m:*label38) (h:*label38)
   586 label *label38

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-12 instructions):
 
   302 call *label0 *invalid :packCfg*retval (m:*label19) (h:*label19)
   303 label *label19
   304 set :packCfg:name "OVERFLOW_GATE3"
-    * set :packCfg:type @overflow-gate
   305 set :packCfg:x -4
   306 set :packCfg:y 0
   307 set :packCfg:cu 4
 
   385 set :packCfg:x 0
   386 set :packCfg:y -2
   387 set :packCfg:cu 0
-    * set :packCfg:pb 0
   388 set :packCfg:gr 0
   389 set :packCfg:si 30
   390 set :packCfg:ti 25
 
   462 set :packCfg:name "LASER_DRILL"
   463 set :packCfg:type @laser-drill
   464 set :packCfg:x 0
-    * set :packCfg:y 0
   465 set :packCfg:cu 35
   466 set :packCfg:pb 0
   467 set :packCfg:gr 30
 
   492 set :packCfg:name "CONTAINER"
   493 set :packCfg:type @container
   494 set :packCfg:x 0
-    * set :packCfg:cu 0
   495 set :packCfg:pb 0
   496 set :packCfg:gr 0
   497 set :packCfg:si 0
 
   526 set :packCfg:cu 2
   527 set :packCfg:pb 2
   528 set :packCfg:gr 0
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
   529 set :packCfg:mg 0
   530 set :packCfg:th 0
   531 set :packCfg:rotation 0
 
   534 call *label0 *invalid :packCfg*retval (m:*label34) (h:*label34)
   535 label *label34
   536 set :packCfg:name "INVERTED_SORT5"
-    * set :packCfg:x 3
   537 set :packCfg:y -1
   538 set :packCfg:gr 0
   539 set :packCfg:mg 0
 
   552 set :packCfg:si 30
   553 set :packCfg:ti 25
   554 set :packCfg:mg 0
-    * set :packCfg:th 0
   555 set :packCfg:rotation 0
-    * set :packCfg:size 1
   556 setaddr :packCfg*retaddr *label36 (h:*label36)
   557 call *label0 *invalid :packCfg*retval (m:*label36) (h:*label36)
   558 label *label36
   559 set :packCfg:name "UNLOADER6"
   560 set :packCfg:x 1
   561 set :packCfg:y -2
-    * set :packCfg:gr 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   562 setaddr :packCfg*retaddr *label37 (h:*label37)
   563 call *label0 *invalid :packCfg*retval (m:*label37) (h:*label37)
   564 label *label37

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-12 instructions):
 
    30 call *label0 *invalid :packCfg*retval (m:*label2) (h:*label2)
    31 label *label2
    32 set :packCfg:name "BATTERY2"
-    * set :packCfg:type @battery
    33 set :packCfg:x 1
    34 set :packCfg:y 5
    35 set :packCfg:cu 5
 
   302 label *label19
   303 set :packCfg:name "OVERFLOW_GATE3"
   304 set :packCfg:x -4
-    * set :packCfg:y 0
-    * set :packCfg:cu 4
-    * set :packCfg:pb 2
   305 set :packCfg:gr 0
   306 set :packCfg:si 0
   307 set :packCfg:ti 0
 
   415 set :packCfg:pb 120
   416 set :packCfg:gr 0
   417 set :packCfg:si 90
-    * set :packCfg:ti 0
   418 set :packCfg:mg 0
   419 set :packCfg:th 0
   420 set :packCfg:rotation 0
 
   486 label *label31
   487 set :packCfg:name "CONTAINER"
   488 set :packCfg:type @container
-    * set :packCfg:x 0
   489 set :packCfg:pb 0
   490 set :packCfg:gr 0
   491 set :packCfg:si 0
 
   504 set :packCfg:cu 30
   505 set :packCfg:pb 25
   506 set :packCfg:gr 0
-    * set :packCfg:si 0
   507 set :packCfg:ti 0
   508 set :packCfg:mg 0
   509 set :packCfg:th 0
 
   530 set :packCfg:y -1
   531 set :packCfg:gr 0
   532 set :packCfg:mg 0
-    * set :packCfg:th 0
   533 set :packCfg:rotation 0
-    * set :packCfg:size 1
   534 setaddr :packCfg*retaddr *label35 (h:*label35)
   535 call *label0 *invalid :packCfg*retval (m:*label35) (h:*label35)
   536 label *label35
 
   539 set :packCfg:y 3
   540 set :packCfg:cu 0
   541 set :packCfg:pb 0
-    * set :packCfg:gr 0
   542 set :packCfg:si 30
   543 set :packCfg:ti 25
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   544 setaddr :packCfg*retaddr *label36 (h:*label36)
   545 call *label0 *invalid :packCfg*retval (m:*label36) (h:*label36)
   546 label *label36

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-11 instructions):
 
    32 set :packCfg:name "BATTERY2"
    33 set :packCfg:x 1
    34 set :packCfg:y 5
-    * set :packCfg:cu 5
    35 set :packCfg:pb 20
    36 set :packCfg:gr 0
    37 set :packCfg:si 0
 
   126 set :packCfg:name "INVERTED_SORT2"
   127 set :packCfg:type @inverted-sorter
   128 set :packCfg:x -1
-    * set :packCfg:y 2
   129 set :packCfg:cu 2
   130 set :packCfg:pb 2
   131 set :packCfg:gr 0
 
   271 set :packCfg:x -4.5
   272 set :packCfg:y 3.5
   273 set :packCfg:cu 30
-    * set :packCfg:pb 30
   274 set :packCfg:gr 30
   275 set :packCfg:si 0
   276 set :packCfg:ti 0
 
   364 set :packCfg:cu 10
   365 set :packCfg:pb 0
   366 set :packCfg:gr 15
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
   367 set :packCfg:mg 0
   368 set :packCfg:th 0
   369 set :packCfg:rotation 0
 
   466 label *label30
   467 set :packCfg:name "SOLAR_PANEL"
   468 set :packCfg:type @solar-panel
-    * set :packCfg:x 0
   469 set :packCfg:cu 0
   470 set :packCfg:pb 10
   471 set :packCfg:gr 0
 
   502 set :packCfg:mg 0
   503 set :packCfg:th 0
   504 set :packCfg:rotation 0
-    * set :packCfg:size 2
   505 setaddr :packCfg*retaddr *label33 (h:*label33)
   506 call *label0 *invalid :packCfg*retval (m:*label33) (h:*label33)
   507 label *label33
 
   513 set :packCfg:pb 2
   514 set :packCfg:gr 0
   515 set :packCfg:mg 0
-    * set :packCfg:th 0
   516 set :packCfg:rotation 0
   517 set :packCfg:size 1
   518 setaddr :packCfg*retaddr *label34 (h:*label34)
 
   520 label *label34
   521 set :packCfg:name "INVERTED_SORT5"
   522 set :packCfg:y -1
-    * set :packCfg:gr 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   523 setaddr :packCfg*retaddr *label35 (h:*label35)
   524 call *label0 *invalid :packCfg*retval (m:*label35) (h:*label35)
   525 label *label35

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 6 (-10 instructions):
 
    31 label *label2
    32 set :packCfg:name "BATTERY2"
    33 set :packCfg:x 1
-    * set :packCfg:y 5
    34 set :packCfg:pb 20
    35 set :packCfg:gr 0
    36 set :packCfg:si 0
 
   142 set :packCfg:x 0
   143 set :packCfg:y 3
   144 set :packCfg:cu 4
-    * set :packCfg:pb 2
   145 set :packCfg:gr 0
   146 set :packCfg:si 0
   147 set :packCfg:ti 0
 
   298 set :packCfg:name "OVERFLOW_GATE3"
   299 set :packCfg:x -4
   300 set :packCfg:gr 0
-    * set :packCfg:si 0
   301 set :packCfg:ti 0
   302 set :packCfg:mg 0
   303 set :packCfg:th 0
 
   314 set :packCfg:pb 40
   315 set :packCfg:gr 25
   316 set :packCfg:si 30
-    * set :packCfg:ti 0
   317 set :packCfg:mg 0
   318 set :packCfg:th 0
   319 set :packCfg:rotation 0
 
   400 label *label26
   401 set :packCfg:name "ADDITIVE_REC"
   402 set :packCfg:type @additive-reconstructor
-    * set :packCfg:x 0
   403 set :packCfg:y -5
   404 set :packCfg:cu 200
   405 set :packCfg:pb 120
 
   424 set :packCfg:mg 0
   425 set :packCfg:th 0
   426 set :packCfg:rotation 0
-    * set :packCfg:size 3
   427 setaddr :packCfg*retaddr *label28 (h:*label28)
   428 call *label0 *invalid :packCfg*retval (m:*label28) (h:*label28)
   429 label *label28
 
   494 set :packCfg:gr 0
   495 set :packCfg:ti 0
   496 set :packCfg:mg 0
-    * set :packCfg:th 0
   497 set :packCfg:rotation 0
   498 setaddr :packCfg*retaddr *label33 (h:*label33)
   499 call *label0 *invalid :packCfg*retval (m:*label33) (h:*label33)
 
   504 set :packCfg:y 0
   505 set :packCfg:cu 2
   506 set :packCfg:pb 2
-    * set :packCfg:gr 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   507 set :packCfg:size 1
   508 setaddr :packCfg*retaddr *label34 (h:*label34)
   509 call *label0 *invalid :packCfg*retval (m:*label34) (h:*label34)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 7 (-9 instructions):
 
   111 set :packCfg:x 0
   112 set :packCfg:y 2
   113 set :packCfg:cu 0
-    * set :packCfg:pb 0
   114 set :packCfg:gr 0
   115 set :packCfg:si 30
   116 set :packCfg:ti 25
 
   285 set :packCfg:cu 4
   286 set :packCfg:pb 2
   287 set :packCfg:gr 0
-    * set :packCfg:si 0
   288 set :packCfg:ti 0
   289 set :packCfg:mg 0
   290 set :packCfg:th 0
 
   296 set :packCfg:name "OVERFLOW_GATE3"
   297 set :packCfg:x -4
   298 set :packCfg:gr 0
-    * set :packCfg:ti 0
   299 set :packCfg:mg 0
   300 set :packCfg:th 0
   301 set :packCfg:rotation 0
 
   381 label *label25
   382 set :packCfg:name "UNDERFLOW_GATE"
   383 set :packCfg:type @underflow-gate
-    * set :packCfg:x 0
   384 set :packCfg:y -3
   385 set :packCfg:cu 4
   386 set :packCfg:pb 2
 
   390 set :packCfg:mg 0
   391 set :packCfg:th 0
   392 set :packCfg:rotation 0
-    * set :packCfg:size 1
   393 setaddr :packCfg*retaddr *label26 (h:*label26)
   394 call *label0 *invalid :packCfg*retval (m:*label26) (h:*label26)
   395 label *label26
 
   474 set :packCfg:si 0
   475 set :packCfg:ti 100
   476 set :packCfg:mg 0
-    * set :packCfg:th 0
   477 set :packCfg:rotation 0
   478 set :packCfg:size 2
   479 setaddr :packCfg*retaddr *label32 (h:*label32)
 
   485 set :packCfg:y -0.5
   486 set :packCfg:cu 30
   487 set :packCfg:pb 25
-    * set :packCfg:gr 0
   488 set :packCfg:ti 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   489 setaddr :packCfg*retaddr *label33 (h:*label33)
   490 call *label0 *invalid :packCfg*retval (m:*label33) (h:*label33)
   491 label *label33

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 8 (-9 instructions):
 
    31 label *label2
    32 set :packCfg:name "BATTERY2"
    33 set :packCfg:x 1
-    * set :packCfg:pb 20
    34 set :packCfg:gr 0
    35 set :packCfg:si 0
    36 set :packCfg:ti 0
 
   232 label *label15
   233 set :packCfg:name "INVERTED_SORT3"
   234 set :packCfg:type @inverted-sorter
-    * set :packCfg:x 2
   235 set :packCfg:y 0
   236 set :packCfg:cu 2
   237 set :packCfg:pb 2
 
   267 set :packCfg:y 3.5
   268 set :packCfg:cu 30
   269 set :packCfg:gr 30
-    * set :packCfg:si 0
   270 set :packCfg:ti 0
   271 set :packCfg:mg 30
   272 set :packCfg:th 0
 
   282 set :packCfg:cu 4
   283 set :packCfg:pb 2
   284 set :packCfg:gr 0
-    * set :packCfg:ti 0
   285 set :packCfg:mg 0
   286 set :packCfg:th 0
   287 set :packCfg:rotation 0
 
   295 set :packCfg:mg 0
   296 set :packCfg:th 0
   297 set :packCfg:rotation 0
-    * set :packCfg:size 1
   298 setaddr :packCfg*retaddr *label20 (h:*label20)
   299 call *label0 *invalid :packCfg*retval (m:*label20) (h:*label20)
   300 label *label20
 
   456 set :packCfg:si 8
   457 set :packCfg:ti 0
   458 set :packCfg:mg 0
-    * set :packCfg:th 0
   459 set :packCfg:rotation 0
   460 set :packCfg:size 1
   461 setaddr :packCfg*retaddr *label31 (h:*label31)
 
   464 set :packCfg:name "CONTAINER"
   465 set :packCfg:type @container
   466 set :packCfg:pb 0
-    * set :packCfg:gr 0
   467 set :packCfg:si 0
   468 set :packCfg:ti 100
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   469 set :packCfg:size 2
   470 setaddr :packCfg*retaddr *label32 (h:*label32)
   471 call *label0 *invalid :packCfg*retval (m:*label32) (h:*label32)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 9 (-8 instructions):
 
   107 label *label7
   108 set :packCfg:name "UNLOADER1"
   109 set :packCfg:type @unloader
-    * set :packCfg:x 0
   110 set :packCfg:y 2
   111 set :packCfg:cu 0
   112 set :packCfg:gr 0
 
   251 set :packCfg:cu 60
   252 set :packCfg:pb 30
   253 set :packCfg:gr 30
-    * set :packCfg:si 0
   254 set :packCfg:ti 0
   255 set :packCfg:mg 0
   256 set :packCfg:th 0
 
   265 set :packCfg:y 3.5
   266 set :packCfg:cu 30
   267 set :packCfg:gr 30
-    * set :packCfg:ti 0
   268 set :packCfg:mg 30
   269 set :packCfg:th 0
   270 set :packCfg:rotation 0
-    * set :packCfg:size 2
   271 setaddr :packCfg*retaddr *label18 (h:*label18)
   272 call *label0 *invalid :packCfg*retval (m:*label18) (h:*label18)
   273 label *label18
 
   419 set :packCfg:y 0
   420 set :packCfg:cu 4
   421 set :packCfg:pb 2
-    * set :packCfg:gr 0
   422 set :packCfg:si 0
   423 set :packCfg:ti 0
   424 set :packCfg:mg 0
 
   437 set :packCfg:si 30
   438 set :packCfg:ti 20
   439 set :packCfg:mg 0
-    * set :packCfg:th 0
   440 set :packCfg:rotation 0
   441 set :packCfg:size 3
   442 setaddr :packCfg*retaddr *label30 (h:*label30)
 
   449 set :packCfg:gr 0
   450 set :packCfg:si 8
   451 set :packCfg:ti 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   452 set :packCfg:size 1
   453 setaddr :packCfg*retaddr *label31 (h:*label31)
   454 call *label0 *invalid :packCfg*retval (m:*label31) (h:*label31)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 10 (-7 instructions):
 
   140 set :packCfg:y 3
   141 set :packCfg:cu 4
   142 set :packCfg:gr 0
-    * set :packCfg:si 0
   143 set :packCfg:ti 0
   144 set :packCfg:mg 0
   145 set :packCfg:th 0
 
   239 set :packCfg:mg 0
   240 set :packCfg:th 0
   241 set :packCfg:rotation 0
-    * set :packCfg:size 1
   242 setaddr :packCfg*retaddr *label16 (h:*label16)
   243 call *label0 *invalid :packCfg*retval (m:*label16) (h:*label16)
   244 label *label16
 
   249 set :packCfg:cu 60
   250 set :packCfg:pb 30
   251 set :packCfg:gr 30
-    * set :packCfg:ti 0
   252 set :packCfg:mg 0
   253 set :packCfg:th 0
   254 set :packCfg:rotation 0
 
   401 set :packCfg:y 2
   402 set :packCfg:cu 0
   403 set :packCfg:pb 50
-    * set :packCfg:gr 0
   404 set :packCfg:si 30
   405 set :packCfg:ti 20
   406 set :packCfg:mg 0
 
   418 set :packCfg:si 0
   419 set :packCfg:ti 0
   420 set :packCfg:mg 0
-    * set :packCfg:th 0
   421 set :packCfg:rotation 0
   422 set :packCfg:size 1
   423 setaddr :packCfg*retaddr *label29 (h:*label29)
 
   431 set :packCfg:gr 30
   432 set :packCfg:si 30
   433 set :packCfg:ti 20
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   434 set :packCfg:size 3
   435 setaddr :packCfg*retaddr *label30 (h:*label30)
   436 call *label0 *invalid :packCfg*retval (m:*label30) (h:*label30)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 11 (-7 instructions):
 
    96 set :packCfg:cu 18
    97 set :packCfg:pb 0
    98 set :packCfg:gr 10
-    * set :packCfg:si 0
    99 set :packCfg:ti 0
   100 set :packCfg:mg 0
   101 set :packCfg:th 0
 
   171 set :packCfg:pb 6
   172 set :packCfg:gr 0
   173 set :packCfg:si 0
-    * set :packCfg:ti 0
   174 set :packCfg:mg 0
   175 set :packCfg:th 0
   176 set :packCfg:rotation 0
 
   190 set :packCfg:mg 0
   191 set :packCfg:th 0
   192 set :packCfg:rotation 0
-    * set :packCfg:size 1
   193 setaddr :packCfg*retaddr *label13 (h:*label13)
   194 call *label0 *invalid :packCfg*retval (m:*label13) (h:*label13)
   195 label *label13
 
   383 set :packCfg:y -5
   384 set :packCfg:cu 200
   385 set :packCfg:pb 120
-    * set :packCfg:gr 0
   386 set :packCfg:si 90
   387 set :packCfg:mg 0
   388 set :packCfg:th 0
 
   400 set :packCfg:si 30
   401 set :packCfg:ti 20
   402 set :packCfg:mg 0
-    * set :packCfg:th 0
   403 set :packCfg:rotation 0
   404 setaddr :packCfg*retaddr *label28 (h:*label28)
   405 call *label0 *invalid :packCfg*retval (m:*label28) (h:*label28)
 
   412 set :packCfg:pb 2
   413 set :packCfg:si 0
   414 set :packCfg:ti 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   415 set :packCfg:size 1
   416 setaddr :packCfg*retaddr *label29 (h:*label29)
   417 call *label0 *invalid :packCfg*retval (m:*label29) (h:*label29)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 12 (-7 instructions):
 
    80 set :packCfg:cu 2
    81 set :packCfg:pb 2
    82 set :packCfg:gr 0
-    * set :packCfg:si 0
    83 set :packCfg:ti 0
    84 set :packCfg:mg 0
    85 set :packCfg:th 0
 
   154 set :packCfg:pb 50
   155 set :packCfg:gr 0
   156 set :packCfg:si 50
-    * set :packCfg:ti 0
   157 set :packCfg:mg 0
   158 set :packCfg:th 0
   159 set :packCfg:rotation 0
 
   172 set :packCfg:mg 0
   173 set :packCfg:th 0
   174 set :packCfg:rotation 0
-    * set :packCfg:size 1
   175 setaddr :packCfg*retaddr *label12 (h:*label12)
   176 call *label0 *invalid :packCfg*retval (m:*label12) (h:*label12)
   177 label *label12
 
   366 set :packCfg:y -3
   367 set :packCfg:cu 4
   368 set :packCfg:pb 2
-    * set :packCfg:gr 0
   369 set :packCfg:si 0
   370 set :packCfg:ti 0
   371 set :packCfg:mg 0
 
   381 set :packCfg:pb 120
   382 set :packCfg:si 90
   383 set :packCfg:mg 0
-    * set :packCfg:th 0
   384 set :packCfg:rotation 0
   385 set :packCfg:size 3
   386 setaddr :packCfg*retaddr *label27 (h:*label27)
 
   394 set :packCfg:pb 50
   395 set :packCfg:si 30
   396 set :packCfg:ti 20
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   397 setaddr :packCfg*retaddr *label28 (h:*label28)
   398 call *label0 *invalid :packCfg*retval (m:*label28) (h:*label28)
   399 label *label28

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 13 (-7 instructions):
 
    64 set :packCfg:cu 30
    65 set :packCfg:pb 25
    66 set :packCfg:gr 0
-    * set :packCfg:si 0
    67 set :packCfg:ti 0
    68 set :packCfg:mg 0
    69 set :packCfg:th 0
 
   137 set :packCfg:y 3
   138 set :packCfg:cu 4
   139 set :packCfg:gr 0
-    * set :packCfg:ti 0
   140 set :packCfg:mg 0
   141 set :packCfg:th 0
   142 set :packCfg:rotation 0
 
   155 set :packCfg:mg 0
   156 set :packCfg:th 0
   157 set :packCfg:rotation 0
-    * set :packCfg:size 1
   158 setaddr :packCfg*retaddr *label11 (h:*label11)
   159 call *label0 *invalid :packCfg*retval (m:*label11) (h:*label11)
   160 label *label11
 
   275 label *label19
   276 set :packCfg:name "OVERFLOW_GATE3"
   277 set :packCfg:x -4
-    * set :packCfg:gr 0
   278 set :packCfg:mg 0
   279 set :packCfg:th 0
   280 set :packCfg:rotation 0
 
   365 set :packCfg:si 0
   366 set :packCfg:ti 0
   367 set :packCfg:mg 0
-    * set :packCfg:th 0
   368 set :packCfg:rotation 0
   369 setaddr :packCfg*retaddr *label26 (h:*label26)
   370 call *label0 *invalid :packCfg*retval (m:*label26) (h:*label26)
 
   375 set :packCfg:cu 200
   376 set :packCfg:pb 120
   377 set :packCfg:si 90
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   378 set :packCfg:size 3
   379 setaddr :packCfg*retaddr *label27 (h:*label27)
   380 call *label0 *invalid :packCfg*retval (m:*label27) (h:*label27)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 14 (-7 instructions):
 
    48 set :packCfg:cu 25
    49 set :packCfg:pb 15
    50 set :packCfg:gr 0
-    * set :packCfg:si 0
    51 set :packCfg:ti 0
    52 set :packCfg:mg 0
    53 set :packCfg:th 0
 
    93 set :packCfg:cu 18
    94 set :packCfg:pb 0
    95 set :packCfg:gr 10
-    * set :packCfg:ti 0
    96 set :packCfg:mg 0
    97 set :packCfg:th 0
    98 set :packCfg:rotation 0
 
   138 set :packCfg:mg 0
   139 set :packCfg:th 0
   140 set :packCfg:rotation 0
-    * set :packCfg:size 1
   141 setaddr :packCfg*retaddr *label10 (h:*label10)
   142 call *label0 *invalid :packCfg*retval (m:*label10) (h:*label10)
   143 label *label10
 
   249 set :packCfg:x -4.5
   250 set :packCfg:y 3.5
   251 set :packCfg:cu 30
-    * set :packCfg:gr 30
   252 set :packCfg:mg 30
   253 set :packCfg:th 0
   254 set :packCfg:rotation 0
 
   347 set :packCfg:si 30
   348 set :packCfg:ti 25
   349 set :packCfg:mg 0
-    * set :packCfg:th 0
   350 set :packCfg:rotation 0
   351 set :packCfg:size 1
   352 setaddr :packCfg*retaddr *label25 (h:*label25)
 
   359 set :packCfg:pb 2
   360 set :packCfg:si 0
   361 set :packCfg:ti 0
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   362 setaddr :packCfg*retaddr *label26 (h:*label26)
   363 call *label0 *invalid :packCfg*retval (m:*label26) (h:*label26)
   364 label *label26

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 15 (-7 instructions):
 
    32 set :packCfg:name "BATTERY2"
    33 set :packCfg:x 1
    34 set :packCfg:gr 0
-    * set :packCfg:si 0
    35 set :packCfg:ti 0
    36 set :packCfg:mg 0
    37 set :packCfg:th 0
 
    77 set :packCfg:cu 2
    78 set :packCfg:pb 2
    79 set :packCfg:gr 0
-    * set :packCfg:ti 0
    80 set :packCfg:mg 0
    81 set :packCfg:th 0
    82 set :packCfg:rotation 0
 
   123 set :packCfg:mg 0
   124 set :packCfg:th 0
   125 set :packCfg:rotation 0
-    * set :packCfg:size 1
   126 setaddr :packCfg*retaddr *label9 (h:*label9)
   127 call *label0 *invalid :packCfg*retval (m:*label9) (h:*label9)
   128 label *label9
 
   218 set :packCfg:y 0
   219 set :packCfg:cu 2
   220 set :packCfg:pb 2
-    * set :packCfg:gr 0
   221 set :packCfg:si 0
   222 set :packCfg:ti 0
   223 set :packCfg:mg 0
 
   328 set :packCfg:pb 0
   329 set :packCfg:gr 15
   330 set :packCfg:mg 0
-    * set :packCfg:th 0
   331 set :packCfg:rotation 0
   332 set :packCfg:size 3
   333 setaddr :packCfg*retaddr *label24 (h:*label24)
 
   341 set :packCfg:gr 0
   342 set :packCfg:si 30
   343 set :packCfg:ti 25
-    * set :packCfg:mg 0
-    * set :packCfg:rotation 0
   344 set :packCfg:size 1
   345 setaddr :packCfg*retaddr *label25 (h:*label25)
   346 call *label0 *invalid :packCfg*retval (m:*label25) (h:*label25)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 16 (-7 instructions):
 
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
    22 set :packCfg:gr 0
-    * set :packCfg:si 0
    23 set :packCfg:ti 0
    24 set :packCfg:mg 0
    25 set :packCfg:th 0
 
    50 set :packCfg:mg 0
    51 set :packCfg:th 0
    52 set :packCfg:rotation 0
-    * set :packCfg:size 1
    53 setaddr :packCfg*retaddr *label4 (h:*label4)
    54 call *label0 *invalid :packCfg*retval (m:*label4) (h:*label4)
    55 label *label4
 
    60 set :packCfg:cu 30
    61 set :packCfg:pb 25
    62 set :packCfg:gr 0
-    * set :packCfg:ti 0
    63 set :packCfg:mg 0
    64 set :packCfg:th 0
    65 set :packCfg:rotation 0
 
   200 set :packCfg:y -1
   201 set :packCfg:cu 0
   202 set :packCfg:pb 0
-    * set :packCfg:gr 0
   203 set :packCfg:si 30
   204 set :packCfg:ti 25
   205 set :packCfg:mg 0
 
   293 set :packCfg:gr 50
   294 set :packCfg:si 25
   295 set :packCfg:ti 100
-    * set :packCfg:mg 0
   296 set :packCfg:th 0
   297 set :packCfg:rotation 0
   298 set :packCfg:size 3
 
   309 set :packCfg:si 0
   310 set :packCfg:ti 0
   311 set :packCfg:mg 30
-    * set :packCfg:th 0
   312 set :packCfg:rotation 0
   313 set :packCfg:size 2
   314 setaddr :packCfg*retaddr *label23 (h:*label23)
 
   322 set :packCfg:pb 0
   323 set :packCfg:gr 15
   324 set :packCfg:mg 0
-    * set :packCfg:rotation 0
   325 set :packCfg:size 3
   326 setaddr :packCfg*retaddr *label24 (h:*label24)
   327 call *label0 *invalid :packCfg*retval (m:*label24) (h:*label24)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 17 (-6 instructions):
 
    35 set :packCfg:mg 0
    36 set :packCfg:th 0
    37 set :packCfg:rotation 0
-    * set :packCfg:size 1
    38 setaddr :packCfg*retaddr *label3 (h:*label3)
    39 call *label0 *invalid :packCfg*retval (m:*label3) (h:*label3)
    40 label *label3
 
    45 set :packCfg:cu 25
    46 set :packCfg:pb 15
    47 set :packCfg:gr 0
-    * set :packCfg:ti 0
    48 set :packCfg:mg 0
    49 set :packCfg:th 0
    50 set :packCfg:rotation 0
 
   182 set :packCfg:y -2
   183 set :packCfg:cu 60
   184 set :packCfg:pb 70
-    * set :packCfg:gr 0
   185 set :packCfg:si 0
   186 set :packCfg:ti 0
   187 set :packCfg:mg 0
 
   274 set :packCfg:pb 40
   275 set :packCfg:gr 25
   276 set :packCfg:si 30
-    * set :packCfg:mg 0
   277 set :packCfg:th 0
   278 set :packCfg:rotation 0
   279 set :packCfg:size 2
 
   289 set :packCfg:gr 50
   290 set :packCfg:si 25
   291 set :packCfg:ti 100
-    * set :packCfg:th 0
   292 set :packCfg:rotation 0
   293 set :packCfg:size 3
   294 setaddr :packCfg*retaddr *label22 (h:*label22)
 
   304 set :packCfg:si 0
   305 set :packCfg:ti 0
   306 set :packCfg:mg 30
-    * set :packCfg:rotation 0
   307 set :packCfg:size 2
   308 setaddr :packCfg*retaddr *label23 (h:*label23)
   309 call *label0 *invalid :packCfg*retval (m:*label23) (h:*label23)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 18 (-5 instructions):
 
    31 set :packCfg:name "BATTERY2"
    32 set :packCfg:x 1
    33 set :packCfg:gr 0
-    * set :packCfg:ti 0
    34 set :packCfg:mg 0
    35 set :packCfg:th 0
    36 set :packCfg:rotation 0
 
   166 set :packCfg:y 0
   167 set :packCfg:cu 0
   168 set :packCfg:pb 0
-    * set :packCfg:gr 0
   169 set :packCfg:si 30
   170 set :packCfg:ti 25
   171 set :packCfg:mg 0
 
   258 label *label19
   259 set :packCfg:name "OVERFLOW_GATE3"
   260 set :packCfg:x -4
-    * set :packCfg:mg 0
   261 set :packCfg:th 0
   262 set :packCfg:rotation 0
   263 setaddr :packCfg*retaddr *label20 (h:*label20)
 
   271 set :packCfg:pb 40
   272 set :packCfg:gr 25
   273 set :packCfg:si 30
-    * set :packCfg:th 0
   274 set :packCfg:rotation 0
   275 set :packCfg:size 2
   276 setaddr :packCfg*retaddr *label21 (h:*label21)
 
   285 set :packCfg:gr 50
   286 set :packCfg:si 25
   287 set :packCfg:ti 100
-    * set :packCfg:rotation 0
   288 set :packCfg:size 3
   289 setaddr :packCfg*retaddr *label22 (h:*label22)
   290 call *label0 *invalid :packCfg*retval (m:*label22) (h:*label22)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 19 (-5 instructions):
 
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
    22 set :packCfg:gr 0
-    * set :packCfg:ti 0
    23 set :packCfg:mg 0
    24 set :packCfg:th 0
    25 set :packCfg:rotation 0
 
   151 set :packCfg:y -3
   152 set :packCfg:cu 2
   153 set :packCfg:pb 6
-    * set :packCfg:gr 0
   154 set :packCfg:si 0
   155 set :packCfg:mg 0
   156 set :packCfg:th 0
 
   222 set :packCfg:cu 60
   223 set :packCfg:pb 30
   224 set :packCfg:gr 30
-    * set :packCfg:mg 0
   225 set :packCfg:th 0
   226 set :packCfg:rotation 0
   227 set :packCfg:size 2
 
   255 label *label19
   256 set :packCfg:name "OVERFLOW_GATE3"
   257 set :packCfg:x -4
-    * set :packCfg:th 0
   258 set :packCfg:rotation 0
   259 setaddr :packCfg*retaddr *label20 (h:*label20)
   260 call *label0 *invalid :packCfg*retval (m:*label20) (h:*label20)
 
   267 set :packCfg:pb 40
   268 set :packCfg:gr 25
   269 set :packCfg:si 30
-    * set :packCfg:rotation 0
   270 set :packCfg:size 2
   271 setaddr :packCfg*retaddr *label21 (h:*label21)
   272 call *label0 *invalid :packCfg*retval (m:*label21) (h:*label21)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 20 (-4 instructions):
 
   137 set :packCfg:y 4
   138 set :packCfg:cu 90
   139 set :packCfg:pb 50
-    * set :packCfg:gr 0
   140 set :packCfg:si 50
   141 set :packCfg:mg 0
   142 set :packCfg:th 0
 
   208 set :packCfg:pb 2
   209 set :packCfg:si 0
   210 set :packCfg:ti 0
-    * set :packCfg:mg 0
   211 set :packCfg:th 0
   212 set :packCfg:rotation 0
   213 setaddr :packCfg*retaddr *label16 (h:*label16)
 
   245 set :packCfg:pb 2
   246 set :packCfg:gr 0
   247 set :packCfg:mg 0
-    * set :packCfg:th 0
   248 set :packCfg:rotation 0
   249 set :packCfg:size 1
   250 setaddr :packCfg*retaddr *label19 (h:*label19)
 
   252 label *label19
   253 set :packCfg:name "OVERFLOW_GATE3"
   254 set :packCfg:x -4
-    * set :packCfg:rotation 0
   255 setaddr :packCfg*retaddr *label20 (h:*label20)
   256 call *label0 *invalid :packCfg*retval (m:*label20) (h:*label20)
   257 label *label20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 21 (-4 instructions):
 
   124 set :packCfg:x 0
   125 set :packCfg:y 3
   126 set :packCfg:cu 4
-    * set :packCfg:gr 0
   127 set :packCfg:mg 0
   128 set :packCfg:th 0
   129 set :packCfg:rotation 0
 
   193 set :packCfg:pb 0
   194 set :packCfg:si 30
   195 set :packCfg:ti 25
-    * set :packCfg:mg 0
   196 set :packCfg:th 0
   197 set :packCfg:rotation 0
   198 set :packCfg:size 1
 
   230 set :packCfg:y 3.5
   231 set :packCfg:cu 30
   232 set :packCfg:mg 30
-    * set :packCfg:th 0
   233 set :packCfg:rotation 0
   234 setaddr :packCfg*retaddr *label18 (h:*label18)
   235 call *label0 *invalid :packCfg*retval (m:*label18) (h:*label18)
 
   242 set :packCfg:pb 2
   243 set :packCfg:gr 0
   244 set :packCfg:mg 0
-    * set :packCfg:rotation 0
   245 set :packCfg:size 1
   246 setaddr :packCfg*retaddr *label19 (h:*label19)
   247 call *label0 *invalid :packCfg*retval (m:*label19) (h:*label19)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 22 (-4 instructions):
 
   110 set :packCfg:x -1
   111 set :packCfg:cu 2
   112 set :packCfg:pb 2
-    * set :packCfg:gr 0
   113 set :packCfg:si 0
   114 set :packCfg:ti 0
   115 set :packCfg:mg 0
 
   177 set :packCfg:pb 70
   178 set :packCfg:si 0
   179 set :packCfg:ti 0
-    * set :packCfg:mg 0
   180 set :packCfg:th 0
   181 set :packCfg:rotation 3
   182 set :packCfg:size 3
 
   216 set :packCfg:cu 60
   217 set :packCfg:pb 30
   218 set :packCfg:gr 30
-    * set :packCfg:th 0
   219 set :packCfg:rotation 0
   220 set :packCfg:size 2
   221 setaddr :packCfg*retaddr *label17 (h:*label17)
 
   227 set :packCfg:y 3.5
   228 set :packCfg:cu 30
   229 set :packCfg:mg 30
-    * set :packCfg:rotation 0
   230 setaddr :packCfg*retaddr *label18 (h:*label18)
   231 call *label0 *invalid :packCfg*retval (m:*label18) (h:*label18)
   232 label *label18

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 23 (-4 instructions):
 
    69 set :packCfg:y 2
    70 set :packCfg:cu 2
    71 set :packCfg:pb 2
-    * set :packCfg:gr 0
    72 set :packCfg:mg 0
    73 set :packCfg:th 0
    74 set :packCfg:rotation 0
 
   162 set :packCfg:pb 0
   163 set :packCfg:si 30
   164 set :packCfg:ti 25
-    * set :packCfg:mg 0
   165 set :packCfg:th 0
   166 set :packCfg:rotation 0
   167 setaddr :packCfg*retaddr *label13 (h:*label13)
 
   202 set :packCfg:pb 2
   203 set :packCfg:si 0
   204 set :packCfg:ti 0
-    * set :packCfg:th 0
   205 set :packCfg:rotation 0
   206 setaddr :packCfg*retaddr *label16 (h:*label16)
   207 call *label0 *invalid :packCfg*retval (m:*label16) (h:*label16)
 
   213 set :packCfg:cu 60
   214 set :packCfg:pb 30
   215 set :packCfg:gr 30
-    * set :packCfg:rotation 0
   216 set :packCfg:size 2
   217 setaddr :packCfg*retaddr *label17 (h:*label17)
   218 call *label0 *invalid :packCfg*retval (m:*label17) (h:*label17)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 24 (-4 instructions):
 
    55 set :packCfg:y 3.5
    56 set :packCfg:cu 30
    57 set :packCfg:pb 25
-    * set :packCfg:gr 0
    58 set :packCfg:mg 0
    59 set :packCfg:th 0
    60 set :packCfg:rotation 0
 
   147 set :packCfg:cu 2
   148 set :packCfg:pb 6
   149 set :packCfg:si 0
-    * set :packCfg:mg 0
   150 set :packCfg:th 0
   151 set :packCfg:rotation 0
   152 setaddr :packCfg*retaddr *label12 (h:*label12)
 
   187 set :packCfg:pb 0
   188 set :packCfg:si 30
   189 set :packCfg:ti 25
-    * set :packCfg:th 0
   190 set :packCfg:rotation 0
   191 set :packCfg:size 1
   192 setaddr :packCfg*retaddr *label15 (h:*label15)
 
   199 set :packCfg:pb 2
   200 set :packCfg:si 0
   201 set :packCfg:ti 0
-    * set :packCfg:rotation 0
   202 setaddr :packCfg*retaddr *label16 (h:*label16)
   203 call *label0 *invalid :packCfg*retval (m:*label16) (h:*label16)
   204 label *label16

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 25 (-4 instructions):
 
    42 set :packCfg:y 4
    43 set :packCfg:cu 25
    44 set :packCfg:pb 15
-    * set :packCfg:gr 0
    45 set :packCfg:mg 0
    46 set :packCfg:th 0
    47 set :packCfg:rotation 0
 
   133 set :packCfg:cu 90
   134 set :packCfg:pb 50
   135 set :packCfg:si 50
-    * set :packCfg:mg 0
   136 set :packCfg:th 0
   137 set :packCfg:rotation 0
   138 setaddr :packCfg*retaddr *label11 (h:*label11)
 
   159 set :packCfg:si 30
   160 set :packCfg:ti 25
   161 set :packCfg:th 0
-    * set :packCfg:rotation 0
   162 setaddr :packCfg*retaddr *label13 (h:*label13)
   163 call *label0 *invalid :packCfg*retval (m:*label13) (h:*label13)
   164 label *label13
 
   170 set :packCfg:pb 70
   171 set :packCfg:si 0
   172 set :packCfg:ti 0
-    * set :packCfg:th 0
   173 set :packCfg:rotation 3
   174 set :packCfg:size 3
   175 setaddr :packCfg*retaddr *label14 (h:*label14)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 26 (-4 instructions):
 
    29 label *label2
    30 set :packCfg:name "BATTERY2"
    31 set :packCfg:x 1
-    * set :packCfg:gr 0
    32 set :packCfg:mg 0
    33 set :packCfg:th 0
    34 set :packCfg:rotation 0
 
   119 set :packCfg:x 0
   120 set :packCfg:y 3
   121 set :packCfg:cu 4
-    * set :packCfg:mg 0
   122 set :packCfg:th 0
   123 set :packCfg:rotation 0
   124 setaddr :packCfg*retaddr *label10 (h:*label10)
 
   144 set :packCfg:pb 6
   145 set :packCfg:si 0
   146 set :packCfg:th 0
-    * set :packCfg:rotation 0
   147 setaddr :packCfg*retaddr *label12 (h:*label12)
   148 call *label0 *invalid :packCfg*retval (m:*label12) (h:*label12)
   149 label *label12
 
   155 set :packCfg:pb 0
   156 set :packCfg:si 30
   157 set :packCfg:ti 25
-    * set :packCfg:th 0
   158 setaddr :packCfg*retaddr *label13 (h:*label13)
   159 call *label0 *invalid :packCfg*retval (m:*label13) (h:*label13)
   160 label *label13

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 27 (-4 instructions):
 
    19 set :packCfg:y 5
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
-    * set :packCfg:gr 0
    22 set :packCfg:mg 0
    23 set :packCfg:th 0
    24 set :packCfg:rotation 0
 
   107 set :packCfg:pb 2
   108 set :packCfg:si 0
   109 set :packCfg:ti 0
-    * set :packCfg:mg 0
   110 set :packCfg:th 0
   111 set :packCfg:rotation 0
   112 setaddr :packCfg*retaddr *label9 (h:*label9)
 
   130 set :packCfg:pb 50
   131 set :packCfg:si 50
   132 set :packCfg:th 0
-    * set :packCfg:rotation 0
   133 setaddr :packCfg*retaddr *label11 (h:*label11)
   134 call *label0 *invalid :packCfg*retval (m:*label11) (h:*label11)
   135 label *label11
 
   140 set :packCfg:cu 2
   141 set :packCfg:pb 6
   142 set :packCfg:si 0
-    * set :packCfg:th 0
   143 setaddr :packCfg*retaddr *label12 (h:*label12)
   144 call *label0 *invalid :packCfg*retval (m:*label12) (h:*label12)
   145 label *label12

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 28 (-3 instructions):
 
    93 set :packCfg:gr 0
    94 set :packCfg:si 30
    95 set :packCfg:ti 25
-    * set :packCfg:mg 0
    96 set :packCfg:th 0
    97 set :packCfg:rotation 0
    98 set :packCfg:size 1
 
   117 set :packCfg:y 3
   118 set :packCfg:cu 4
   119 set :packCfg:th 0
-    * set :packCfg:rotation 0
   120 setaddr :packCfg*retaddr *label10 (h:*label10)
   121 call *label0 *invalid :packCfg*retval (m:*label10) (h:*label10)
   122 label *label10
 
   127 set :packCfg:cu 90
   128 set :packCfg:pb 50
   129 set :packCfg:si 50
-    * set :packCfg:th 0
   130 setaddr :packCfg*retaddr *label11 (h:*label11)
   131 call *label0 *invalid :packCfg*retval (m:*label11) (h:*label11)
   132 label *label11

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 29 (-3 instructions):
 
    79 set :packCfg:cu 18
    80 set :packCfg:pb 0
    81 set :packCfg:gr 10
-    * set :packCfg:mg 0
    82 set :packCfg:th 0
    83 set :packCfg:rotation 0
    84 set :packCfg:size 2
 
   106 set :packCfg:si 0
   107 set :packCfg:ti 0
   108 set :packCfg:th 0
-    * set :packCfg:rotation 0
   109 setaddr :packCfg*retaddr *label9 (h:*label9)
   110 call *label0 *invalid :packCfg*retval (m:*label9) (h:*label9)
   111 label *label9
 
   114 set :packCfg:x 0
   115 set :packCfg:y 3
   116 set :packCfg:cu 4
-    * set :packCfg:th 0
   117 setaddr :packCfg*retaddr *label10 (h:*label10)
   118 call *label0 *invalid :packCfg*retval (m:*label10) (h:*label10)
   119 label *label10

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 30 (-3 instructions):
 
    65 set :packCfg:y 2
    66 set :packCfg:cu 2
    67 set :packCfg:pb 2
-    * set :packCfg:mg 0
    68 set :packCfg:th 0
    69 set :packCfg:rotation 0
    70 set :packCfg:size 1
 
    92 set :packCfg:si 30
    93 set :packCfg:ti 25
    94 set :packCfg:th 0
-    * set :packCfg:rotation 0
    95 set :packCfg:size 1
    96 setaddr :packCfg*retaddr *label8 (h:*label8)
    97 call *label0 *invalid :packCfg*retval (m:*label8) (h:*label8)
 
   103 set :packCfg:pb 2
   104 set :packCfg:si 0
   105 set :packCfg:ti 0
-    * set :packCfg:th 0
   106 setaddr :packCfg*retaddr *label9 (h:*label9)
   107 call *label0 *invalid :packCfg*retval (m:*label9) (h:*label9)
   108 label *label9

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 31 (-3 instructions):
 
    52 set :packCfg:y 3.5
    53 set :packCfg:cu 30
    54 set :packCfg:pb 25
-    * set :packCfg:mg 0
    55 set :packCfg:th 0
    56 set :packCfg:rotation 0
    57 set :packCfg:size 2
 
    78 set :packCfg:pb 0
    79 set :packCfg:gr 10
    80 set :packCfg:th 0
-    * set :packCfg:rotation 0
    81 set :packCfg:size 2
    82 setaddr :packCfg*retaddr *label7 (h:*label7)
    83 call *label0 *invalid :packCfg*retval (m:*label7) (h:*label7)
 
    89 set :packCfg:gr 0
    90 set :packCfg:si 30
    91 set :packCfg:ti 25
-    * set :packCfg:th 0
    92 set :packCfg:size 1
    93 setaddr :packCfg*retaddr *label8 (h:*label8)
    94 call *label0 *invalid :packCfg*retval (m:*label8) (h:*label8)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 32 (-3 instructions):
 
    40 set :packCfg:y 4
    41 set :packCfg:cu 25
    42 set :packCfg:pb 15
-    * set :packCfg:mg 0
    43 set :packCfg:th 0
    44 set :packCfg:rotation 0
    45 setaddr :packCfg*retaddr *label4 (h:*label4)
 
    64 set :packCfg:cu 2
    65 set :packCfg:pb 2
    66 set :packCfg:th 0
-    * set :packCfg:rotation 0
    67 set :packCfg:size 1
    68 setaddr :packCfg*retaddr *label6 (h:*label6)
    69 call *label0 *invalid :packCfg*retval (m:*label6) (h:*label6)
 
    75 set :packCfg:cu 18
    76 set :packCfg:pb 0
    77 set :packCfg:gr 10
-    * set :packCfg:th 0
    78 set :packCfg:size 2
    79 setaddr :packCfg*retaddr *label7 (h:*label7)
    80 call *label0 *invalid :packCfg*retval (m:*label7) (h:*label7)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 33 (-3 instructions):
 
    28 label *label2
    29 set :packCfg:name "BATTERY2"
    30 set :packCfg:x 1
-    * set :packCfg:mg 0
    31 set :packCfg:th 0
    32 set :packCfg:rotation 0
    33 setaddr :packCfg*retaddr *label3 (h:*label3)
 
    51 set :packCfg:cu 30
    52 set :packCfg:pb 25
    53 set :packCfg:th 0
-    * set :packCfg:rotation 0
    54 set :packCfg:size 2
    55 setaddr :packCfg*retaddr *label5 (h:*label5)
    56 call *label0 *invalid :packCfg*retval (m:*label5) (h:*label5)
 
    61 set :packCfg:y 2
    62 set :packCfg:cu 2
    63 set :packCfg:pb 2
-    * set :packCfg:th 0
    64 set :packCfg:size 1
    65 setaddr :packCfg*retaddr *label6 (h:*label6)
    66 call *label0 *invalid :packCfg*retval (m:*label6) (h:*label6)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 34 (-3 instructions):
 
    19 set :packCfg:y 5
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
-    * set :packCfg:mg 0
    22 set :packCfg:th 0
    23 set :packCfg:rotation 0
    24 set :packCfg:size 1
 
    39 set :packCfg:cu 25
    40 set :packCfg:pb 15
    41 set :packCfg:th 0
-    * set :packCfg:rotation 0
    42 setaddr :packCfg*retaddr *label4 (h:*label4)
    43 call *label0 *invalid :packCfg*retval (m:*label4) (h:*label4)
    44 label *label4
 
    48 set :packCfg:y 3.5
    49 set :packCfg:cu 30
    50 set :packCfg:pb 25
-    * set :packCfg:th 0
    51 set :packCfg:size 2
    52 setaddr :packCfg*retaddr *label5 (h:*label5)
    53 call *label0 *invalid :packCfg*retval (m:*label5) (h:*label5)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 35 (-2 instructions):
 
    28 set :packCfg:name "BATTERY2"
    29 set :packCfg:x 1
    30 set :packCfg:th 0
-    * set :packCfg:rotation 0
    31 setaddr :packCfg*retaddr *label3 (h:*label3)
    32 call *label0 *invalid :packCfg*retval (m:*label3) (h:*label3)
    33 label *label3
 
    37 set :packCfg:y 4
    38 set :packCfg:cu 25
    39 set :packCfg:pb 15
-    * set :packCfg:th 0
    40 setaddr :packCfg*retaddr *label4 (h:*label4)
    41 call *label0 *invalid :packCfg*retval (m:*label4) (h:*label4)
    42 label *label4

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 36 (-2 instructions):
 
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
    22 set :packCfg:th 0
-    * set :packCfg:rotation 0
    23 set :packCfg:size 1
    24 setaddr :packCfg*retaddr *label2 (h:*label2)
    25 call *label0 *invalid :packCfg*retval (m:*label2) (h:*label2)
    26 label *label2
    27 set :packCfg:name "BATTERY2"
    28 set :packCfg:x 1
-    * set :packCfg:th 0
    29 setaddr :packCfg*retaddr *label3 (h:*label3)
    30 call *label0 *invalid :packCfg*retval (m:*label3) (h:*label3)
    31 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 37 (-1 instructions):
 
    19 set :packCfg:y 5
    20 set :packCfg:cu 5
    21 set :packCfg:pb 20
-    * set :packCfg:th 0
    22 set :packCfg:size 1
    23 setaddr :packCfg*retaddr *label2 (h:*label2)
    24 call *label0 *invalid :packCfg*retval (m:*label2) (h:*label2)

Modifications by Inline function call at line 7:1 (+39 instructions):
 
    10 set :packCfg:th 0
    11 set :packCfg:rotation 0
    12 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label1 (h:*label1)
-    * call *label0 *invalid :packCfg*retval (m:*label1) (h:*label1)
-    * label *label1
+   13 label *label41
+   14 print "const "
+   15 print :packCfg:name
+   16 print " "
+   17 print "= "
+   18 printchar 34
+   19 sensor *tmp0 :packCfg:type @id
+   20 op add *tmp1 35 *tmp0
+   21 printchar *tmp1
+   22 op add *tmp2 7 :packCfg:x
+   23 op floor *tmp3 *tmp2
+   24 op add *tmp4 35 *tmp3
+   25 printchar *tmp4
+   26 op add *tmp5 7 :packCfg:y
+   27 op floor *tmp6 *tmp5
+   28 op add *tmp7 35 *tmp6
+   29 printchar *tmp7
+   30 op add *tmp8 35 :packCfg:cu
+   31 printchar *tmp8
+   32 op add *tmp9 35 :packCfg:pb
+   33 printchar *tmp9
+   34 op add *tmp10 35 :packCfg:gr
+   35 printchar *tmp10
+   36 op add *tmp11 35 :packCfg:si
+   37 printchar *tmp11
+   38 op add *tmp12 35 :packCfg:ti
+   39 printchar *tmp12
+   40 op add *tmp13 35 :packCfg:mg
+   41 printchar *tmp13
+   42 op add *tmp14 35 :packCfg:th
+   43 printchar *tmp14
+   44 op add *tmp15 35 :packCfg:rotation
+   45 printchar *tmp15
+   46 op add *tmp16 35 :packCfg:size
+   47 printchar *tmp16
+   48 set *tmp17 .index
+   49 op add .index .index 1
+   50 op add *tmp18 35 *tmp17
+   51 printchar *tmp18
+   52 printchar 34
+   53 print ";"
+   54 print "\n"
+   55 label *label42
    56 set :packCfg:name "BATTERY1"
    57 set :packCfg:type @battery
    58 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    12 set :packCfg:size 2
    13 label *label41
    14 print "const "
-    * print :packCfg:name
+   15 print "PRESS"
    16 print " "
    17 print "= "
    18 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+   19 sensor *tmp0 @graphite-press @id
    20 op add *tmp1 35 *tmp0
    21 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+   22 op add *tmp2 7 -2.5
+   23 op floor *tmp3 4.5
+   24 op add *tmp4 35 4
+   25 printchar 39
+   26 op add *tmp5 7 1.5
+   27 op floor *tmp6 8.5
+   28 op add *tmp7 35 8
+   29 printchar 43
+   30 op add *tmp8 35 75
+   31 printchar 110
+   32 op add *tmp9 35 30
+   33 printchar 65
+   34 op add *tmp10 35 0
+   35 printchar 35
+   36 op add *tmp11 35 0
+   37 printchar 35
+   38 op add *tmp12 35 0
+   39 printchar 35
+   40 op add *tmp13 35 0
+   41 printchar 35
+   42 op add *tmp14 35 0
+   43 printchar 35
+   44 op add *tmp15 35 0
+   45 printchar 35
+   46 op add *tmp16 35 2
+   47 printchar 37
    48 set *tmp17 .index
    49 op add .index .index 1
    50 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
-    * set :packCfg:name "PRESS"
-    * set :packCfg:type @graphite-press
-    * set :packCfg:x -2.5
-    * set :packCfg:y 1.5
-    * set :packCfg:cu 75
-    * set :packCfg:pb 30
     0 set :packCfg:gr 0
     1 set :packCfg:si 0
     2 set :packCfg:ti 0
     3 set :packCfg:mg 0
     4 set :packCfg:th 0
     5 set :packCfg:rotation 0
-    * set :packCfg:size 2
     6 label *label41
     7 print "const "
     8 print "PRESS"

Modifications by Inline function call at line 8:1 (+39 instructions):
 
    53 set :packCfg:cu 5
    54 set :packCfg:pb 20
    55 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label2 (h:*label2)
-    * call *label0 *invalid :packCfg*retval (m:*label2) (h:*label2)
-    * label *label2
+   56 label *label43
+   57 print "const "
+   58 print :packCfg:name
+   59 print " "
+   60 print "= "
+   61 printchar 34
+   62 sensor *tmp0 :packCfg:type @id
+   63 op add *tmp1 35 *tmp0
+   64 printchar *tmp1
+   65 op add *tmp2 7 :packCfg:x
+   66 op floor *tmp3 *tmp2
+   67 op add *tmp4 35 *tmp3
+   68 printchar *tmp4
+   69 op add *tmp5 7 :packCfg:y
+   70 op floor *tmp6 *tmp5
+   71 op add *tmp7 35 *tmp6
+   72 printchar *tmp7
+   73 op add *tmp8 35 :packCfg:cu
+   74 printchar *tmp8
+   75 op add *tmp9 35 :packCfg:pb
+   76 printchar *tmp9
+   77 op add *tmp10 35 :packCfg:gr
+   78 printchar *tmp10
+   79 op add *tmp11 35 :packCfg:si
+   80 printchar *tmp11
+   81 op add *tmp12 35 :packCfg:ti
+   82 printchar *tmp12
+   83 op add *tmp13 35 :packCfg:mg
+   84 printchar *tmp13
+   85 op add *tmp14 35 :packCfg:th
+   86 printchar *tmp14
+   87 op add *tmp15 35 :packCfg:rotation
+   88 printchar *tmp15
+   89 op add *tmp16 35 :packCfg:size
+   90 printchar *tmp16
+   91 set *tmp17 .index
+   92 op add .index .index 1
+   93 op add *tmp18 35 *tmp17
+   94 printchar *tmp18
+   95 printchar 34
+   96 print ";"
+   97 print "\n"
+   98 label *label44
    99 set :packCfg:name "BATTERY2"
   100 set :packCfg:x 1
   101 setaddr :packCfg*retaddr *label3 (h:*label3)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
    12 sensor *tmp0 @graphite-press @id
    13 op add *tmp1 35 *tmp0
    14 printchar *tmp1
-    * op add *tmp2 7 -2.5
-    * op floor *tmp3 4.5
-    * op add *tmp4 35 4
    15 printchar 39
-    * op add *tmp5 7 1.5
-    * op floor *tmp6 8.5
-    * op add *tmp7 35 8
    16 printchar 43
-    * op add *tmp8 35 75
    17 printchar 110
-    * op add *tmp9 35 30
    18 printchar 65
-    * op add *tmp10 35 0
    19 printchar 35
-    * op add *tmp11 35 0
    20 printchar 35
-    * op add *tmp12 35 0
    21 printchar 35
-    * op add *tmp13 35 0
    22 printchar 35
-    * op add *tmp14 35 0
    23 printchar 35
-    * op add *tmp15 35 0
    24 printchar 35
-    * op add *tmp16 35 2
    25 printchar 37
    26 set *tmp17 .index
    27 op add .index .index 1
 
    40 set :packCfg:size 1
    41 label *label43
    42 print "const "
-    * print :packCfg:name
+   43 print "BATTERY1"
    44 print " "
    45 print "= "
    46 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+   47 sensor *tmp0 @battery @id
    48 op add *tmp1 35 *tmp0
    49 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+   50 op add *tmp2 7 0
+   51 op floor *tmp3 7
+   52 op add *tmp4 35 7
+   53 printchar 42
+   54 op add *tmp5 7 5
+   55 op floor *tmp6 12
+   56 op add *tmp7 35 12
+   57 printchar 47
+   58 op add *tmp8 35 5
+   59 printchar 40
+   60 op add *tmp9 35 20
+   61 printchar 55
+   62 op add *tmp10 35 0
+   63 printchar 35
+   64 op add *tmp11 35 0
+   65 printchar 35
+   66 op add *tmp12 35 0
+   67 printchar 35
+   68 op add *tmp13 35 0
+   69 printchar 35
+   70 op add *tmp14 35 0
+   71 printchar 35
+   72 op add *tmp15 35 0
+   73 printchar 35
+   74 op add *tmp16 35 1
+   75 printchar 36
    76 set *tmp17 .index
    77 op add .index .index 1
    78 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
    31 print ";"
    32 print "\n"
    33 label *label42
-    * set :packCfg:name "BATTERY1"
    34 set :packCfg:type @battery
-    * set :packCfg:x 0
    35 set :packCfg:y 5
    36 set :packCfg:cu 5
    37 set :packCfg:pb 20

Modifications by Inline function call at line 9:1 (+39 instructions):
 
    81 label *label44
    82 set :packCfg:name "BATTERY2"
    83 set :packCfg:x 1
-    * setaddr :packCfg*retaddr *label3 (h:*label3)
-    * call *label0 *invalid :packCfg*retval (m:*label3) (h:*label3)
-    * label *label3
+   84 label *label45
+   85 print "const "
+   86 print :packCfg:name
+   87 print " "
+   88 print "= "
+   89 printchar 34
+   90 sensor *tmp0 :packCfg:type @id
+   91 op add *tmp1 35 *tmp0
+   92 printchar *tmp1
+   93 op add *tmp2 7 :packCfg:x
+   94 op floor *tmp3 *tmp2
+   95 op add *tmp4 35 *tmp3
+   96 printchar *tmp4
+   97 op add *tmp5 7 :packCfg:y
+   98 op floor *tmp6 *tmp5
+   99 op add *tmp7 35 *tmp6
+  100 printchar *tmp7
+  101 op add *tmp8 35 :packCfg:cu
+  102 printchar *tmp8
+  103 op add *tmp9 35 :packCfg:pb
+  104 printchar *tmp9
+  105 op add *tmp10 35 :packCfg:gr
+  106 printchar *tmp10
+  107 op add *tmp11 35 :packCfg:si
+  108 printchar *tmp11
+  109 op add *tmp12 35 :packCfg:ti
+  110 printchar *tmp12
+  111 op add *tmp13 35 :packCfg:mg
+  112 printchar *tmp13
+  113 op add *tmp14 35 :packCfg:th
+  114 printchar *tmp14
+  115 op add *tmp15 35 :packCfg:rotation
+  116 printchar *tmp15
+  117 op add *tmp16 35 :packCfg:size
+  118 printchar *tmp16
+  119 set *tmp17 .index
+  120 op add .index .index 1
+  121 op add *tmp18 35 *tmp17
+  122 printchar *tmp18
+  123 printchar 34
+  124 print ";"
+  125 print "\n"
+  126 label *label46
   127 set :packCfg:name "GENERATOR"
   128 set :packCfg:type @combustion-generator
   129 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
    45 sensor *tmp0 @battery @id
    46 op add *tmp1 35 *tmp0
    47 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
    48 printchar 42
-    * op add *tmp5 7 5
-    * op floor *tmp6 12
-    * op add *tmp7 35 12
    49 printchar 47
-    * op add *tmp8 35 5
    50 printchar 40
-    * op add *tmp9 35 20
    51 printchar 55
-    * op add *tmp10 35 0
    52 printchar 35
-    * op add *tmp11 35 0
    53 printchar 35
-    * op add *tmp12 35 0
    54 printchar 35
-    * op add *tmp13 35 0
    55 printchar 35
-    * op add *tmp14 35 0
    56 printchar 35
-    * op add *tmp15 35 0
    57 printchar 35
-    * op add *tmp16 35 1
    58 printchar 36
    59 set *tmp17 .index
    60 op add .index .index 1
 
    68 set :packCfg:x 1
    69 label *label45
    70 print "const "
-    * print :packCfg:name
+   71 print "BATTERY2"
    72 print " "
    73 print "= "
    74 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+   75 sensor *tmp0 @battery @id
    76 op add *tmp1 35 *tmp0
    77 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+   78 op add *tmp2 7 1
+   79 op floor *tmp3 8
+   80 op add *tmp4 35 8
+   81 printchar 43
+   82 op add *tmp5 7 5
+   83 op floor *tmp6 12
+   84 op add *tmp7 35 12
+   85 printchar 47
+   86 op add *tmp8 35 5
+   87 printchar 40
+   88 op add *tmp9 35 20
+   89 printchar 55
+   90 op add *tmp10 35 0
+   91 printchar 35
+   92 op add *tmp11 35 0
+   93 printchar 35
+   94 op add *tmp12 35 0
+   95 printchar 35
+   96 op add *tmp13 35 0
+   97 printchar 35
+   98 op add *tmp14 35 0
+   99 printchar 35
+  100 op add *tmp15 35 0
+  101 printchar 35
+  102 op add *tmp16 35 1
+  103 printchar 36
   104 set *tmp17 .index
   105 op add .index .index 1
   106 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
    31 print ";"
    32 print "\n"
    33 label *label42
-    * set :packCfg:type @battery
-    * set :packCfg:y 5
-    * set :packCfg:cu 5
-    * set :packCfg:pb 20
    34 set :packCfg:size 1
    35 label *label43
    36 print "const "
 
    60 print ";"
    61 print "\n"
    62 label *label44
-    * set :packCfg:name "BATTERY2"
-    * set :packCfg:x 1
    63 label *label45
    64 print "const "
    65 print "BATTERY2"

Modifications by Inline function call at line 10:1 (+39 instructions):
 
   109 set :packCfg:y 4
   110 set :packCfg:cu 25
   111 set :packCfg:pb 15
-    * setaddr :packCfg*retaddr *label4 (h:*label4)
-    * call *label0 *invalid :packCfg*retval (m:*label4) (h:*label4)
-    * label *label4
+  112 label *label47
+  113 print "const "
+  114 print :packCfg:name
+  115 print " "
+  116 print "= "
+  117 printchar 34
+  118 sensor *tmp0 :packCfg:type @id
+  119 op add *tmp1 35 *tmp0
+  120 printchar *tmp1
+  121 op add *tmp2 7 :packCfg:x
+  122 op floor *tmp3 *tmp2
+  123 op add *tmp4 35 *tmp3
+  124 printchar *tmp4
+  125 op add *tmp5 7 :packCfg:y
+  126 op floor *tmp6 *tmp5
+  127 op add *tmp7 35 *tmp6
+  128 printchar *tmp7
+  129 op add *tmp8 35 :packCfg:cu
+  130 printchar *tmp8
+  131 op add *tmp9 35 :packCfg:pb
+  132 printchar *tmp9
+  133 op add *tmp10 35 :packCfg:gr
+  134 printchar *tmp10
+  135 op add *tmp11 35 :packCfg:si
+  136 printchar *tmp11
+  137 op add *tmp12 35 :packCfg:ti
+  138 printchar *tmp12
+  139 op add *tmp13 35 :packCfg:mg
+  140 printchar *tmp13
+  141 op add *tmp14 35 :packCfg:th
+  142 printchar *tmp14
+  143 op add *tmp15 35 :packCfg:rotation
+  144 printchar *tmp15
+  145 op add *tmp16 35 :packCfg:size
+  146 printchar *tmp16
+  147 set *tmp17 .index
+  148 op add .index .index 1
+  149 op add *tmp18 35 *tmp17
+  150 printchar *tmp18
+  151 printchar 34
+  152 print ";"
+  153 print "\n"
+  154 label *label48
   155 set :packCfg:name "SMELTER"
   156 set :packCfg:type @silicon-smelter
   157 set :packCfg:x 1.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
    69 sensor *tmp0 @battery @id
    70 op add *tmp1 35 *tmp0
    71 printchar *tmp1
-    * op add *tmp2 7 1
-    * op floor *tmp3 8
-    * op add *tmp4 35 8
    72 printchar 43
-    * op add *tmp5 7 5
-    * op floor *tmp6 12
-    * op add *tmp7 35 12
    73 printchar 47
-    * op add *tmp8 35 5
    74 printchar 40
-    * op add *tmp9 35 20
    75 printchar 55
-    * op add *tmp10 35 0
    76 printchar 35
-    * op add *tmp11 35 0
    77 printchar 35
-    * op add *tmp12 35 0
    78 printchar 35
-    * op add *tmp13 35 0
    79 printchar 35
-    * op add *tmp14 35 0
    80 printchar 35
-    * op add *tmp15 35 0
    81 printchar 35
-    * op add *tmp16 35 1
    82 printchar 36
    83 set *tmp17 .index
    84 op add .index .index 1
 
    96 set :packCfg:pb 15
    97 label *label47
    98 print "const "
-    * print :packCfg:name
+   99 print "GENERATOR"
   100 print " "
   101 print "= "
   102 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  103 sensor *tmp0 @combustion-generator @id
   104 op add *tmp1 35 *tmp0
   105 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  106 op add *tmp2 7 0
+  107 op floor *tmp3 7
+  108 op add *tmp4 35 7
+  109 printchar 42
+  110 op add *tmp5 7 4
+  111 op floor *tmp6 11
+  112 op add *tmp7 35 11
+  113 printchar 46
+  114 op add *tmp8 35 25
+  115 printchar 60
+  116 op add *tmp9 35 15
+  117 printchar 50
+  118 op add *tmp10 35 0
+  119 printchar 35
+  120 op add *tmp11 35 0
+  121 printchar 35
+  122 op add *tmp12 35 0
+  123 printchar 35
+  124 op add *tmp13 35 0
+  125 printchar 35
+  126 op add *tmp14 35 0
+  127 printchar 35
+  128 op add *tmp15 35 0
+  129 printchar 35
+  130 op add *tmp16 35 1
+  131 printchar 36
   132 set *tmp17 .index
   133 op add .index .index 1
   134 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
    31 print ";"
    32 print "\n"
    33 label *label42
-    * set :packCfg:size 1
    34 label *label43
    35 print "const "
    36 print "BATTERY1"
 
    87 print ";"
    88 print "\n"
    89 label *label46
-    * set :packCfg:name "GENERATOR"
-    * set :packCfg:type @combustion-generator
-    * set :packCfg:x 0
-    * set :packCfg:y 4
-    * set :packCfg:cu 25
-    * set :packCfg:pb 15
    90 label *label47
    91 print "const "
    92 print "GENERATOR"

Modifications by Inline function call at line 11:1 (+39 instructions):
 
   137 set :packCfg:cu 30
   138 set :packCfg:pb 25
   139 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label5 (h:*label5)
-    * call *label0 *invalid :packCfg*retval (m:*label5) (h:*label5)
-    * label *label5
+  140 label *label49
+  141 print "const "
+  142 print :packCfg:name
+  143 print " "
+  144 print "= "
+  145 printchar 34
+  146 sensor *tmp0 :packCfg:type @id
+  147 op add *tmp1 35 *tmp0
+  148 printchar *tmp1
+  149 op add *tmp2 7 :packCfg:x
+  150 op floor *tmp3 *tmp2
+  151 op add *tmp4 35 *tmp3
+  152 printchar *tmp4
+  153 op add *tmp5 7 :packCfg:y
+  154 op floor *tmp6 *tmp5
+  155 op add *tmp7 35 *tmp6
+  156 printchar *tmp7
+  157 op add *tmp8 35 :packCfg:cu
+  158 printchar *tmp8
+  159 op add *tmp9 35 :packCfg:pb
+  160 printchar *tmp9
+  161 op add *tmp10 35 :packCfg:gr
+  162 printchar *tmp10
+  163 op add *tmp11 35 :packCfg:si
+  164 printchar *tmp11
+  165 op add *tmp12 35 :packCfg:ti
+  166 printchar *tmp12
+  167 op add *tmp13 35 :packCfg:mg
+  168 printchar *tmp13
+  169 op add *tmp14 35 :packCfg:th
+  170 printchar *tmp14
+  171 op add *tmp15 35 :packCfg:rotation
+  172 printchar *tmp15
+  173 op add *tmp16 35 :packCfg:size
+  174 printchar *tmp16
+  175 set *tmp17 .index
+  176 op add .index .index 1
+  177 op add *tmp18 35 *tmp17
+  178 printchar *tmp18
+  179 printchar 34
+  180 print ";"
+  181 print "\n"
+  182 label *label50
   183 set :packCfg:name "INVERTED_SORT1"
   184 set :packCfg:type @inverted-sorter
   185 set :packCfg:x 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
    96 sensor *tmp0 @combustion-generator @id
    97 op add *tmp1 35 *tmp0
    98 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
    99 printchar 42
-    * op add *tmp5 7 4
-    * op floor *tmp6 11
-    * op add *tmp7 35 11
   100 printchar 46
-    * op add *tmp8 35 25
   101 printchar 60
-    * op add *tmp9 35 15
   102 printchar 50
-    * op add *tmp10 35 0
   103 printchar 35
-    * op add *tmp11 35 0
   104 printchar 35
-    * op add *tmp12 35 0
   105 printchar 35
-    * op add *tmp13 35 0
   106 printchar 35
-    * op add *tmp14 35 0
   107 printchar 35
-    * op add *tmp15 35 0
   108 printchar 35
-    * op add *tmp16 35 1
   109 printchar 36
   110 set *tmp17 .index
   111 op add .index .index 1
 
   124 set :packCfg:size 2
   125 label *label49
   126 print "const "
-    * print :packCfg:name
+  127 print "SMELTER"
   128 print " "
   129 print "= "
   130 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  131 sensor *tmp0 @silicon-smelter @id
   132 op add *tmp1 35 *tmp0
   133 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  134 op add *tmp2 7 1.5
+  135 op floor *tmp3 8.5
+  136 op add *tmp4 35 8
+  137 printchar 43
+  138 op add *tmp5 7 3.5
+  139 op floor *tmp6 10.5
+  140 op add *tmp7 35 10
+  141 printchar 45
+  142 op add *tmp8 35 30
+  143 printchar 65
+  144 op add *tmp9 35 25
+  145 printchar 60
+  146 op add *tmp10 35 0
+  147 printchar 35
+  148 op add *tmp11 35 0
+  149 printchar 35
+  150 op add *tmp12 35 0
+  151 printchar 35
+  152 op add *tmp13 35 0
+  153 printchar 35
+  154 op add *tmp14 35 0
+  155 printchar 35
+  156 op add *tmp15 35 0
+  157 printchar 35
+  158 op add *tmp16 35 2
+  159 printchar 37
   160 set *tmp17 .index
   161 op add .index .index 1
   162 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   115 print ";"
   116 print "\n"
   117 label *label48
-    * set :packCfg:name "SMELTER"
-    * set :packCfg:type @silicon-smelter
-    * set :packCfg:x 1.5
-    * set :packCfg:y 3.5
-    * set :packCfg:cu 30
-    * set :packCfg:pb 25
-    * set :packCfg:size 2
   118 label *label49
   119 print "const "
   120 print "SMELTER"

Modifications by Inline function call at line 12:1 (+39 instructions):
 
   165 set :packCfg:cu 2
   166 set :packCfg:pb 2
   167 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label6 (h:*label6)
-    * call *label0 *invalid :packCfg*retval (m:*label6) (h:*label6)
-    * label *label6
+  168 label *label51
+  169 print "const "
+  170 print :packCfg:name
+  171 print " "
+  172 print "= "
+  173 printchar 34
+  174 sensor *tmp0 :packCfg:type @id
+  175 op add *tmp1 35 *tmp0
+  176 printchar *tmp1
+  177 op add *tmp2 7 :packCfg:x
+  178 op floor *tmp3 *tmp2
+  179 op add *tmp4 35 *tmp3
+  180 printchar *tmp4
+  181 op add *tmp5 7 :packCfg:y
+  182 op floor *tmp6 *tmp5
+  183 op add *tmp7 35 *tmp6
+  184 printchar *tmp7
+  185 op add *tmp8 35 :packCfg:cu
+  186 printchar *tmp8
+  187 op add *tmp9 35 :packCfg:pb
+  188 printchar *tmp9
+  189 op add *tmp10 35 :packCfg:gr
+  190 printchar *tmp10
+  191 op add *tmp11 35 :packCfg:si
+  192 printchar *tmp11
+  193 op add *tmp12 35 :packCfg:ti
+  194 printchar *tmp12
+  195 op add *tmp13 35 :packCfg:mg
+  196 printchar *tmp13
+  197 op add *tmp14 35 :packCfg:th
+  198 printchar *tmp14
+  199 op add *tmp15 35 :packCfg:rotation
+  200 printchar *tmp15
+  201 op add *tmp16 35 :packCfg:size
+  202 printchar *tmp16
+  203 set *tmp17 .index
+  204 op add .index .index 1
+  205 op add *tmp18 35 *tmp17
+  206 printchar *tmp18
+  207 printchar 34
+  208 print ";"
+  209 print "\n"
+  210 label *label52
   211 set :packCfg:name "PNEUMATIC_DRILL"
   212 set :packCfg:type @pneumatic-drill
   213 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   124 sensor *tmp0 @silicon-smelter @id
   125 op add *tmp1 35 *tmp0
   126 printchar *tmp1
-    * op add *tmp2 7 1.5
-    * op floor *tmp3 8.5
-    * op add *tmp4 35 8
   127 printchar 43
-    * op add *tmp5 7 3.5
-    * op floor *tmp6 10.5
-    * op add *tmp7 35 10
   128 printchar 45
-    * op add *tmp8 35 30
   129 printchar 65
-    * op add *tmp9 35 25
   130 printchar 60
-    * op add *tmp10 35 0
   131 printchar 35
-    * op add *tmp11 35 0
   132 printchar 35
-    * op add *tmp12 35 0
   133 printchar 35
-    * op add *tmp13 35 0
   134 printchar 35
-    * op add *tmp14 35 0
   135 printchar 35
-    * op add *tmp15 35 0
   136 printchar 35
-    * op add *tmp16 35 2
   137 printchar 37
   138 set *tmp17 .index
   139 op add .index .index 1
 
   152 set :packCfg:size 1
   153 label *label51
   154 print "const "
-    * print :packCfg:name
+  155 print "INVERTED_SORT1"
   156 print " "
   157 print "= "
   158 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  159 sensor *tmp0 @inverted-sorter @id
   160 op add *tmp1 35 *tmp0
   161 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  162 op add *tmp2 7 1
+  163 op floor *tmp3 8
+  164 op add *tmp4 35 8
+  165 printchar 43
+  166 op add *tmp5 7 2
+  167 op floor *tmp6 9
+  168 op add *tmp7 35 9
+  169 printchar 44
+  170 op add *tmp8 35 2
+  171 printchar 37
+  172 op add *tmp9 35 2
+  173 printchar 37
+  174 op add *tmp10 35 0
+  175 printchar 35
+  176 op add *tmp11 35 0
+  177 printchar 35
+  178 op add *tmp12 35 0
+  179 printchar 35
+  180 op add *tmp13 35 0
+  181 printchar 35
+  182 op add *tmp14 35 0
+  183 printchar 35
+  184 op add *tmp15 35 0
+  185 printchar 35
+  186 op add *tmp16 35 1
+  187 printchar 36
   188 set *tmp17 .index
   189 op add .index .index 1
   190 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
-    * set :packCfg:gr 0
     0 set :packCfg:si 0
     1 set :packCfg:ti 0
     2 set :packCfg:mg 0
 
   142 print ";"
   143 print "\n"
   144 label *label50
-    * set :packCfg:name "INVERTED_SORT1"
-    * set :packCfg:type @inverted-sorter
-    * set :packCfg:x 1
-    * set :packCfg:y 2
-    * set :packCfg:cu 2
-    * set :packCfg:pb 2
-    * set :packCfg:size 1
   145 label *label51
   146 print "const "
   147 print "INVERTED_SORT1"

Modifications by Inline function call at line 13:1 (+39 instructions):
 
   193 set :packCfg:pb 0
   194 set :packCfg:gr 10
   195 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label7 (h:*label7)
-    * call *label0 *invalid :packCfg*retval (m:*label7) (h:*label7)
-    * label *label7
+  196 label *label53
+  197 print "const "
+  198 print :packCfg:name
+  199 print " "
+  200 print "= "
+  201 printchar 34
+  202 sensor *tmp0 :packCfg:type @id
+  203 op add *tmp1 35 *tmp0
+  204 printchar *tmp1
+  205 op add *tmp2 7 :packCfg:x
+  206 op floor *tmp3 *tmp2
+  207 op add *tmp4 35 *tmp3
+  208 printchar *tmp4
+  209 op add *tmp5 7 :packCfg:y
+  210 op floor *tmp6 *tmp5
+  211 op add *tmp7 35 *tmp6
+  212 printchar *tmp7
+  213 op add *tmp8 35 :packCfg:cu
+  214 printchar *tmp8
+  215 op add *tmp9 35 :packCfg:pb
+  216 printchar *tmp9
+  217 op add *tmp10 35 :packCfg:gr
+  218 printchar *tmp10
+  219 op add *tmp11 35 :packCfg:si
+  220 printchar *tmp11
+  221 op add *tmp12 35 :packCfg:ti
+  222 printchar *tmp12
+  223 op add *tmp13 35 :packCfg:mg
+  224 printchar *tmp13
+  225 op add *tmp14 35 :packCfg:th
+  226 printchar *tmp14
+  227 op add *tmp15 35 :packCfg:rotation
+  228 printchar *tmp15
+  229 op add *tmp16 35 :packCfg:size
+  230 printchar *tmp16
+  231 set *tmp17 .index
+  232 op add .index .index 1
+  233 op add *tmp18 35 *tmp17
+  234 printchar *tmp18
+  235 printchar 34
+  236 print ";"
+  237 print "\n"
+  238 label *label54
   239 set :packCfg:name "UNLOADER1"
   240 set :packCfg:type @unloader
   241 set :packCfg:y 2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   151 sensor *tmp0 @inverted-sorter @id
   152 op add *tmp1 35 *tmp0
   153 printchar *tmp1
-    * op add *tmp2 7 1
-    * op floor *tmp3 8
-    * op add *tmp4 35 8
   154 printchar 43
-    * op add *tmp5 7 2
-    * op floor *tmp6 9
-    * op add *tmp7 35 9
   155 printchar 44
-    * op add *tmp8 35 2
   156 printchar 37
-    * op add *tmp9 35 2
   157 printchar 37
-    * op add *tmp10 35 0
   158 printchar 35
-    * op add *tmp11 35 0
   159 printchar 35
-    * op add *tmp12 35 0
   160 printchar 35
-    * op add *tmp13 35 0
   161 printchar 35
-    * op add *tmp14 35 0
   162 printchar 35
-    * op add *tmp15 35 0
   163 printchar 35
-    * op add *tmp16 35 1
   164 printchar 36
   165 set *tmp17 .index
   166 op add .index .index 1
 
   180 set :packCfg:size 2
   181 label *label53
   182 print "const "
-    * print :packCfg:name
+  183 print "PNEUMATIC_DRILL"
   184 print " "
   185 print "= "
   186 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  187 sensor *tmp0 @pneumatic-drill @id
   188 op add *tmp1 35 *tmp0
   189 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  190 op add *tmp2 7 0
+  191 op floor *tmp3 7
+  192 op add *tmp4 35 7
+  193 printchar 42
+  194 op add *tmp5 7 0
+  195 op floor *tmp6 7
+  196 op add *tmp7 35 7
+  197 printchar 42
+  198 op add *tmp8 35 18
+  199 printchar 53
+  200 op add *tmp9 35 0
+  201 printchar 35
+  202 op add *tmp10 35 10
+  203 printchar 45
+  204 op add *tmp11 35 0
+  205 printchar 35
+  206 op add *tmp12 35 0
+  207 printchar 35
+  208 op add *tmp13 35 0
+  209 printchar 35
+  210 op add *tmp14 35 0
+  211 printchar 35
+  212 op add *tmp15 35 0
+  213 printchar 35
+  214 op add *tmp16 35 2
+  215 printchar 37
   216 set *tmp17 .index
   217 op add .index .index 1
   218 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
     0 set :packCfg:mg 0
     1 set :packCfg:th 0
     2 set :packCfg:rotation 0
 
   168 print ";"
   169 print "\n"
   170 label *label52
-    * set :packCfg:name "PNEUMATIC_DRILL"
-    * set :packCfg:type @pneumatic-drill
   171 set :packCfg:x 0
-    * set :packCfg:y 0
-    * set :packCfg:cu 18
   172 set :packCfg:pb 0
-    * set :packCfg:gr 10
-    * set :packCfg:size 2
   173 label *label53
   174 print "const "
   175 print "PNEUMATIC_DRILL"

Modifications by Inline function call at line 14:1 (+39 instructions):
 
   221 set :packCfg:si 30
   222 set :packCfg:ti 25
   223 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label8 (h:*label8)
-    * call *label0 *invalid :packCfg*retval (m:*label8) (h:*label8)
-    * label *label8
+  224 label *label55
+  225 print "const "
+  226 print :packCfg:name
+  227 print " "
+  228 print "= "
+  229 printchar 34
+  230 sensor *tmp0 :packCfg:type @id
+  231 op add *tmp1 35 *tmp0
+  232 printchar *tmp1
+  233 op add *tmp2 7 :packCfg:x
+  234 op floor *tmp3 *tmp2
+  235 op add *tmp4 35 *tmp3
+  236 printchar *tmp4
+  237 op add *tmp5 7 :packCfg:y
+  238 op floor *tmp6 *tmp5
+  239 op add *tmp7 35 *tmp6
+  240 printchar *tmp7
+  241 op add *tmp8 35 :packCfg:cu
+  242 printchar *tmp8
+  243 op add *tmp9 35 :packCfg:pb
+  244 printchar *tmp9
+  245 op add *tmp10 35 :packCfg:gr
+  246 printchar *tmp10
+  247 op add *tmp11 35 :packCfg:si
+  248 printchar *tmp11
+  249 op add *tmp12 35 :packCfg:ti
+  250 printchar *tmp12
+  251 op add *tmp13 35 :packCfg:mg
+  252 printchar *tmp13
+  253 op add *tmp14 35 :packCfg:th
+  254 printchar *tmp14
+  255 op add *tmp15 35 :packCfg:rotation
+  256 printchar *tmp15
+  257 op add *tmp16 35 :packCfg:size
+  258 printchar *tmp16
+  259 set *tmp17 .index
+  260 op add .index .index 1
+  261 op add *tmp18 35 *tmp17
+  262 printchar *tmp18
+  263 printchar 34
+  264 print ";"
+  265 print "\n"
+  266 label *label56
   267 set :packCfg:name "INVERTED_SORT2"
   268 set :packCfg:type @inverted-sorter
   269 set :packCfg:x -1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   179 sensor *tmp0 @pneumatic-drill @id
   180 op add *tmp1 35 *tmp0
   181 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   182 printchar 42
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   183 printchar 42
-    * op add *tmp8 35 18
   184 printchar 53
-    * op add *tmp9 35 0
   185 printchar 35
-    * op add *tmp10 35 10
   186 printchar 45
-    * op add *tmp11 35 0
   187 printchar 35
-    * op add *tmp12 35 0
   188 printchar 35
-    * op add *tmp13 35 0
   189 printchar 35
-    * op add *tmp14 35 0
   190 printchar 35
-    * op add *tmp15 35 0
   191 printchar 35
-    * op add *tmp16 35 2
   192 printchar 37
   193 set *tmp17 .index
   194 op add .index .index 1
 
   208 set :packCfg:size 1
   209 label *label55
   210 print "const "
-    * print :packCfg:name
+  211 print "UNLOADER1"
   212 print " "
   213 print "= "
   214 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  215 sensor *tmp0 @unloader @id
   216 op add *tmp1 35 *tmp0
   217 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  218 op add *tmp2 7 0
+  219 op floor *tmp3 7
+  220 op add *tmp4 35 7
+  221 printchar 42
+  222 op add *tmp5 7 2
+  223 op floor *tmp6 9
+  224 op add *tmp7 35 9
+  225 printchar 44
+  226 op add *tmp8 35 0
+  227 printchar 35
+  228 op add *tmp9 35 0
+  229 printchar 35
+  230 op add *tmp10 35 0
+  231 printchar 35
+  232 op add *tmp11 35 30
+  233 printchar 65
+  234 op add *tmp12 35 25
+  235 printchar 60
+  236 op add *tmp13 35 0
+  237 printchar 35
+  238 op add *tmp14 35 0
+  239 printchar 35
+  240 op add *tmp15 35 0
+  241 printchar 35
+  242 op add *tmp16 35 1
+  243 printchar 36
   244 set *tmp17 .index
   245 op add .index .index 1
   246 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   168 print ";"
   169 print "\n"
   170 label *label52
-    * set :packCfg:x 0
-    * set :packCfg:pb 0
   171 label *label53
   172 print "const "
   173 print "PNEUMATIC_DRILL"
 
   196 print ";"
   197 print "\n"
   198 label *label54
-    * set :packCfg:name "UNLOADER1"
-    * set :packCfg:type @unloader
   199 set :packCfg:y 2
-    * set :packCfg:cu 0
   200 set :packCfg:gr 0
-    * set :packCfg:si 30
-    * set :packCfg:ti 25
   201 set :packCfg:size 1
   202 label *label55
   203 print "const "

Modifications by Inline function call at line 15:1 (+39 instructions):
 
   249 set :packCfg:pb 2
   250 set :packCfg:si 0
   251 set :packCfg:ti 0
-    * setaddr :packCfg*retaddr *label9 (h:*label9)
-    * call *label0 *invalid :packCfg*retval (m:*label9) (h:*label9)
-    * label *label9
+  252 label *label57
+  253 print "const "
+  254 print :packCfg:name
+  255 print " "
+  256 print "= "
+  257 printchar 34
+  258 sensor *tmp0 :packCfg:type @id
+  259 op add *tmp1 35 *tmp0
+  260 printchar *tmp1
+  261 op add *tmp2 7 :packCfg:x
+  262 op floor *tmp3 *tmp2
+  263 op add *tmp4 35 *tmp3
+  264 printchar *tmp4
+  265 op add *tmp5 7 :packCfg:y
+  266 op floor *tmp6 *tmp5
+  267 op add *tmp7 35 *tmp6
+  268 printchar *tmp7
+  269 op add *tmp8 35 :packCfg:cu
+  270 printchar *tmp8
+  271 op add *tmp9 35 :packCfg:pb
+  272 printchar *tmp9
+  273 op add *tmp10 35 :packCfg:gr
+  274 printchar *tmp10
+  275 op add *tmp11 35 :packCfg:si
+  276 printchar *tmp11
+  277 op add *tmp12 35 :packCfg:ti
+  278 printchar *tmp12
+  279 op add *tmp13 35 :packCfg:mg
+  280 printchar *tmp13
+  281 op add *tmp14 35 :packCfg:th
+  282 printchar *tmp14
+  283 op add *tmp15 35 :packCfg:rotation
+  284 printchar *tmp15
+  285 op add *tmp16 35 :packCfg:size
+  286 printchar *tmp16
+  287 set *tmp17 .index
+  288 op add .index .index 1
+  289 op add *tmp18 35 *tmp17
+  290 printchar *tmp18
+  291 printchar 34
+  292 print ";"
+  293 print "\n"
+  294 label *label58
   295 set :packCfg:name "OVERFLOW_GATE1"
   296 set :packCfg:type @overflow-gate
   297 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   208 sensor *tmp0 @unloader @id
   209 op add *tmp1 35 *tmp0
   210 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   211 printchar 42
-    * op add *tmp5 7 2
-    * op floor *tmp6 9
-    * op add *tmp7 35 9
   212 printchar 44
-    * op add *tmp8 35 0
   213 printchar 35
-    * op add *tmp9 35 0
   214 printchar 35
-    * op add *tmp10 35 0
   215 printchar 35
-    * op add *tmp11 35 30
   216 printchar 65
-    * op add *tmp12 35 25
   217 printchar 60
-    * op add *tmp13 35 0
   218 printchar 35
-    * op add *tmp14 35 0
   219 printchar 35
-    * op add *tmp15 35 0
   220 printchar 35
-    * op add *tmp16 35 1
   221 printchar 36
   222 set *tmp17 .index
   223 op add .index .index 1
 
   236 set :packCfg:ti 0
   237 label *label57
   238 print "const "
-    * print :packCfg:name
+  239 print "INVERTED_SORT2"
   240 print " "
   241 print "= "
   242 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  243 sensor *tmp0 @inverted-sorter @id
   244 op add *tmp1 35 *tmp0
   245 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  246 op add *tmp2 7 -1
+  247 op floor *tmp3 6
+  248 op add *tmp4 35 6
+  249 printchar 41
+  250 op add *tmp5 7 2
+  251 op floor *tmp6 9
+  252 op add *tmp7 35 9
+  253 printchar 44
+  254 op add *tmp8 35 2
+  255 printchar 37
+  256 op add *tmp9 35 2
+  257 printchar 37
+  258 op add *tmp10 35 0
+  259 printchar 35
+  260 op add *tmp11 35 0
+  261 printchar 35
+  262 op add *tmp12 35 0
+  263 printchar 35
+  264 op add *tmp13 35 0
+  265 printchar 35
+  266 op add *tmp14 35 0
+  267 printchar 35
+  268 op add *tmp15 35 0
+  269 printchar 35
+  270 op add *tmp16 35 1
+  271 printchar 36
   272 set *tmp17 .index
   273 op add .index .index 1
   274 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   196 print ";"
   197 print "\n"
   198 label *label54
-    * set :packCfg:y 2
   199 set :packCfg:gr 0
   200 set :packCfg:size 1
   201 label *label55
 
   226 print ";"
   227 print "\n"
   228 label *label56
-    * set :packCfg:name "INVERTED_SORT2"
-    * set :packCfg:type @inverted-sorter
-    * set :packCfg:x -1
-    * set :packCfg:cu 2
   229 set :packCfg:pb 2
   230 set :packCfg:si 0
   231 set :packCfg:ti 0

Modifications by Inline function call at line 16:1 (+39 instructions):
 
   277 set :packCfg:x 0
   278 set :packCfg:y 3
   279 set :packCfg:cu 4
-    * setaddr :packCfg*retaddr *label10 (h:*label10)
-    * call *label0 *invalid :packCfg*retval (m:*label10) (h:*label10)
-    * label *label10
+  280 label *label59
+  281 print "const "
+  282 print :packCfg:name
+  283 print " "
+  284 print "= "
+  285 printchar 34
+  286 sensor *tmp0 :packCfg:type @id
+  287 op add *tmp1 35 *tmp0
+  288 printchar *tmp1
+  289 op add *tmp2 7 :packCfg:x
+  290 op floor *tmp3 *tmp2
+  291 op add *tmp4 35 *tmp3
+  292 printchar *tmp4
+  293 op add *tmp5 7 :packCfg:y
+  294 op floor *tmp6 *tmp5
+  295 op add *tmp7 35 *tmp6
+  296 printchar *tmp7
+  297 op add *tmp8 35 :packCfg:cu
+  298 printchar *tmp8
+  299 op add *tmp9 35 :packCfg:pb
+  300 printchar *tmp9
+  301 op add *tmp10 35 :packCfg:gr
+  302 printchar *tmp10
+  303 op add *tmp11 35 :packCfg:si
+  304 printchar *tmp11
+  305 op add *tmp12 35 :packCfg:ti
+  306 printchar *tmp12
+  307 op add *tmp13 35 :packCfg:mg
+  308 printchar *tmp13
+  309 op add *tmp14 35 :packCfg:th
+  310 printchar *tmp14
+  311 op add *tmp15 35 :packCfg:rotation
+  312 printchar *tmp15
+  313 op add *tmp16 35 :packCfg:size
+  314 printchar *tmp16
+  315 set *tmp17 .index
+  316 op add .index .index 1
+  317 op add *tmp18 35 *tmp17
+  318 printchar *tmp18
+  319 printchar 34
+  320 print ";"
+  321 print "\n"
+  322 label *label60
   323 set :packCfg:name "PROCESSOR"
   324 set :packCfg:type @micro-processor
   325 set :packCfg:x 3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   238 sensor *tmp0 @inverted-sorter @id
   239 op add *tmp1 35 *tmp0
   240 printchar *tmp1
-    * op add *tmp2 7 -1
-    * op floor *tmp3 6
-    * op add *tmp4 35 6
   241 printchar 41
-    * op add *tmp5 7 2
-    * op floor *tmp6 9
-    * op add *tmp7 35 9
   242 printchar 44
-    * op add *tmp8 35 2
   243 printchar 37
-    * op add *tmp9 35 2
   244 printchar 37
-    * op add *tmp10 35 0
   245 printchar 35
-    * op add *tmp11 35 0
   246 printchar 35
-    * op add *tmp12 35 0
   247 printchar 35
-    * op add *tmp13 35 0
   248 printchar 35
-    * op add *tmp14 35 0
   249 printchar 35
-    * op add *tmp15 35 0
   250 printchar 35
-    * op add *tmp16 35 1
   251 printchar 36
   252 set *tmp17 .index
   253 op add .index .index 1
 
   264 set :packCfg:cu 4
   265 label *label59
   266 print "const "
-    * print :packCfg:name
+  267 print "OVERFLOW_GATE1"
   268 print " "
   269 print "= "
   270 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  271 sensor *tmp0 @overflow-gate @id
   272 op add *tmp1 35 *tmp0
   273 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  274 op add *tmp2 7 0
+  275 op floor *tmp3 7
+  276 op add *tmp4 35 7
+  277 printchar 42
+  278 op add *tmp5 7 3
+  279 op floor *tmp6 10
+  280 op add *tmp7 35 10
+  281 printchar 45
+  282 op add *tmp8 35 4
+  283 printchar 39
+  284 op add *tmp9 35 2
+  285 printchar 37
+  286 op add *tmp10 35 0
+  287 printchar 35
+  288 op add *tmp11 35 0
+  289 printchar 35
+  290 op add *tmp12 35 0
+  291 printchar 35
+  292 op add *tmp13 35 0
+  293 printchar 35
+  294 op add *tmp14 35 0
+  295 printchar 35
+  296 op add *tmp15 35 0
+  297 printchar 35
+  298 op add *tmp16 35 1
+  299 printchar 36
   300 set *tmp17 .index
   301 op add .index .index 1
   302 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   226 print ";"
   227 print "\n"
   228 label *label56
-    * set :packCfg:pb 2
-    * set :packCfg:si 0
   229 set :packCfg:ti 0
   230 label *label57
   231 print "const "
 
   255 print ";"
   256 print "\n"
   257 label *label58
-    * set :packCfg:name "OVERFLOW_GATE1"
-    * set :packCfg:type @overflow-gate
-    * set :packCfg:x 0
-    * set :packCfg:y 3
-    * set :packCfg:cu 4
   258 label *label59
   259 print "const "
   260 print "OVERFLOW_GATE1"

Modifications by Inline function call at line 17:1 (+39 instructions):
 
   305 set :packCfg:cu 90
   306 set :packCfg:pb 50
   307 set :packCfg:si 50
-    * setaddr :packCfg*retaddr *label11 (h:*label11)
-    * call *label0 *invalid :packCfg*retval (m:*label11) (h:*label11)
-    * label *label11
+  308 label *label61
+  309 print "const "
+  310 print :packCfg:name
+  311 print " "
+  312 print "= "
+  313 printchar 34
+  314 sensor *tmp0 :packCfg:type @id
+  315 op add *tmp1 35 *tmp0
+  316 printchar *tmp1
+  317 op add *tmp2 7 :packCfg:x
+  318 op floor *tmp3 *tmp2
+  319 op add *tmp4 35 *tmp3
+  320 printchar *tmp4
+  321 op add *tmp5 7 :packCfg:y
+  322 op floor *tmp6 *tmp5
+  323 op add *tmp7 35 *tmp6
+  324 printchar *tmp7
+  325 op add *tmp8 35 :packCfg:cu
+  326 printchar *tmp8
+  327 op add *tmp9 35 :packCfg:pb
+  328 printchar *tmp9
+  329 op add *tmp10 35 :packCfg:gr
+  330 printchar *tmp10
+  331 op add *tmp11 35 :packCfg:si
+  332 printchar *tmp11
+  333 op add *tmp12 35 :packCfg:ti
+  334 printchar *tmp12
+  335 op add *tmp13 35 :packCfg:mg
+  336 printchar *tmp13
+  337 op add *tmp14 35 :packCfg:th
+  338 printchar *tmp14
+  339 op add *tmp15 35 :packCfg:rotation
+  340 printchar *tmp15
+  341 op add *tmp16 35 :packCfg:size
+  342 printchar *tmp16
+  343 set *tmp17 .index
+  344 op add .index .index 1
+  345 op add *tmp18 35 *tmp17
+  346 printchar *tmp18
+  347 printchar 34
+  348 print ";"
+  349 print "\n"
+  350 label *label62
   351 set :packCfg:name "POWER_NODE"
   352 set :packCfg:type @power-node
   353 set :packCfg:x -1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   264 sensor *tmp0 @overflow-gate @id
   265 op add *tmp1 35 *tmp0
   266 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   267 printchar 42
-    * op add *tmp5 7 3
-    * op floor *tmp6 10
-    * op add *tmp7 35 10
   268 printchar 45
-    * op add *tmp8 35 4
   269 printchar 39
-    * op add *tmp9 35 2
   270 printchar 37
-    * op add *tmp10 35 0
   271 printchar 35
-    * op add *tmp11 35 0
   272 printchar 35
-    * op add *tmp12 35 0
   273 printchar 35
-    * op add *tmp13 35 0
   274 printchar 35
-    * op add *tmp14 35 0
   275 printchar 35
-    * op add *tmp15 35 0
   276 printchar 35
-    * op add *tmp16 35 1
   277 printchar 36
   278 set *tmp17 .index
   279 op add .index .index 1
 
   292 set :packCfg:si 50
   293 label *label61
   294 print "const "
-    * print :packCfg:name
+  295 print "PROCESSOR"
   296 print " "
   297 print "= "
   298 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  299 sensor *tmp0 @micro-processor @id
   300 op add *tmp1 35 *tmp0
   301 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  302 op add *tmp2 7 3
+  303 op floor *tmp3 10
+  304 op add *tmp4 35 10
+  305 printchar 45
+  306 op add *tmp5 7 4
+  307 op floor *tmp6 11
+  308 op add *tmp7 35 11
+  309 printchar 46
+  310 op add *tmp8 35 90
+  311 printchar 125
+  312 op add *tmp9 35 50
+  313 printchar 85
+  314 op add *tmp10 35 0
+  315 printchar 35
+  316 op add *tmp11 35 50
+  317 printchar 85
+  318 op add *tmp12 35 0
+  319 printchar 35
+  320 op add *tmp13 35 0
+  321 printchar 35
+  322 op add *tmp14 35 0
+  323 printchar 35
+  324 op add *tmp15 35 0
+  325 printchar 35
+  326 op add *tmp16 35 1
+  327 printchar 36
   328 set *tmp17 .index
   329 op add .index .index 1
   330 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   283 print ";"
   284 print "\n"
   285 label *label60
-    * set :packCfg:name "PROCESSOR"
-    * set :packCfg:type @micro-processor
-    * set :packCfg:x 3
-    * set :packCfg:y 4
-    * set :packCfg:cu 90
-    * set :packCfg:pb 50
-    * set :packCfg:si 50
   286 label *label61
   287 print "const "
   288 print "PROCESSOR"

Modifications by Inline function call at line 18:1 (+39 instructions):
 
   333 set :packCfg:cu 2
   334 set :packCfg:pb 6
   335 set :packCfg:si 0
-    * setaddr :packCfg*retaddr *label12 (h:*label12)
-    * call *label0 *invalid :packCfg*retval (m:*label12) (h:*label12)
-    * label *label12
+  336 label *label63
+  337 print "const "
+  338 print :packCfg:name
+  339 print " "
+  340 print "= "
+  341 printchar 34
+  342 sensor *tmp0 :packCfg:type @id
+  343 op add *tmp1 35 *tmp0
+  344 printchar *tmp1
+  345 op add *tmp2 7 :packCfg:x
+  346 op floor *tmp3 *tmp2
+  347 op add *tmp4 35 *tmp3
+  348 printchar *tmp4
+  349 op add *tmp5 7 :packCfg:y
+  350 op floor *tmp6 *tmp5
+  351 op add *tmp7 35 *tmp6
+  352 printchar *tmp7
+  353 op add *tmp8 35 :packCfg:cu
+  354 printchar *tmp8
+  355 op add *tmp9 35 :packCfg:pb
+  356 printchar *tmp9
+  357 op add *tmp10 35 :packCfg:gr
+  358 printchar *tmp10
+  359 op add *tmp11 35 :packCfg:si
+  360 printchar *tmp11
+  361 op add *tmp12 35 :packCfg:ti
+  362 printchar *tmp12
+  363 op add *tmp13 35 :packCfg:mg
+  364 printchar *tmp13
+  365 op add *tmp14 35 :packCfg:th
+  366 printchar *tmp14
+  367 op add *tmp15 35 :packCfg:rotation
+  368 printchar *tmp15
+  369 op add *tmp16 35 :packCfg:size
+  370 printchar *tmp16
+  371 set *tmp17 .index
+  372 op add .index .index 1
+  373 op add *tmp18 35 *tmp17
+  374 printchar *tmp18
+  375 printchar 34
+  376 print ";"
+  377 print "\n"
+  378 label *label64
   379 set :packCfg:name "UNLOADER2"
   380 set :packCfg:type @unloader
   381 set :packCfg:x -2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   292 sensor *tmp0 @micro-processor @id
   293 op add *tmp1 35 *tmp0
   294 printchar *tmp1
-    * op add *tmp2 7 3
-    * op floor *tmp3 10
-    * op add *tmp4 35 10
   295 printchar 45
-    * op add *tmp5 7 4
-    * op floor *tmp6 11
-    * op add *tmp7 35 11
   296 printchar 46
-    * op add *tmp8 35 90
   297 printchar 125
-    * op add *tmp9 35 50
   298 printchar 85
-    * op add *tmp10 35 0
   299 printchar 35
-    * op add *tmp11 35 50
   300 printchar 85
-    * op add *tmp12 35 0
   301 printchar 35
-    * op add *tmp13 35 0
   302 printchar 35
-    * op add *tmp14 35 0
   303 printchar 35
-    * op add *tmp15 35 0
   304 printchar 35
-    * op add *tmp16 35 1
   305 printchar 36
   306 set *tmp17 .index
   307 op add .index .index 1
 
   320 set :packCfg:si 0
   321 label *label63
   322 print "const "
-    * print :packCfg:name
+  323 print "POWER_NODE"
   324 print " "
   325 print "= "
   326 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  327 sensor *tmp0 @power-node @id
   328 op add *tmp1 35 *tmp0
   329 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  330 op add *tmp2 7 -1
+  331 op floor *tmp3 6
+  332 op add *tmp4 35 6
+  333 printchar 41
+  334 op add *tmp5 7 -3
+  335 op floor *tmp6 4
+  336 op add *tmp7 35 4
+  337 printchar 39
+  338 op add *tmp8 35 2
+  339 printchar 37
+  340 op add *tmp9 35 6
+  341 printchar 41
+  342 op add *tmp10 35 0
+  343 printchar 35
+  344 op add *tmp11 35 0
+  345 printchar 35
+  346 op add *tmp12 35 0
+  347 printchar 35
+  348 op add *tmp13 35 0
+  349 printchar 35
+  350 op add *tmp14 35 0
+  351 printchar 35
+  352 op add *tmp15 35 0
+  353 printchar 35
+  354 op add *tmp16 35 1
+  355 printchar 36
   356 set *tmp17 .index
   357 op add .index .index 1
   358 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   226 print ";"
   227 print "\n"
   228 label *label56
-    * set :packCfg:ti 0
   229 label *label57
   230 print "const "
   231 print "INVERTED_SORT2"
 
   310 print ";"
   311 print "\n"
   312 label *label62
-    * set :packCfg:name "POWER_NODE"
-    * set :packCfg:type @power-node
-    * set :packCfg:x -1
-    * set :packCfg:y -3
-    * set :packCfg:cu 2
-    * set :packCfg:pb 6
-    * set :packCfg:si 0
   313 label *label63
   314 print "const "
   315 print "POWER_NODE"

Modifications by Inline function call at line 19:1 (+39 instructions):
 
   361 set :packCfg:pb 0
   362 set :packCfg:si 30
   363 set :packCfg:ti 25
-    * setaddr :packCfg*retaddr *label13 (h:*label13)
-    * call *label0 *invalid :packCfg*retval (m:*label13) (h:*label13)
-    * label *label13
+  364 label *label65
+  365 print "const "
+  366 print :packCfg:name
+  367 print " "
+  368 print "= "
+  369 printchar 34
+  370 sensor *tmp0 :packCfg:type @id
+  371 op add *tmp1 35 *tmp0
+  372 printchar *tmp1
+  373 op add *tmp2 7 :packCfg:x
+  374 op floor *tmp3 *tmp2
+  375 op add *tmp4 35 *tmp3
+  376 printchar *tmp4
+  377 op add *tmp5 7 :packCfg:y
+  378 op floor *tmp6 *tmp5
+  379 op add *tmp7 35 *tmp6
+  380 printchar *tmp7
+  381 op add *tmp8 35 :packCfg:cu
+  382 printchar *tmp8
+  383 op add *tmp9 35 :packCfg:pb
+  384 printchar *tmp9
+  385 op add *tmp10 35 :packCfg:gr
+  386 printchar *tmp10
+  387 op add *tmp11 35 :packCfg:si
+  388 printchar *tmp11
+  389 op add *tmp12 35 :packCfg:ti
+  390 printchar *tmp12
+  391 op add *tmp13 35 :packCfg:mg
+  392 printchar *tmp13
+  393 op add *tmp14 35 :packCfg:th
+  394 printchar *tmp14
+  395 op add *tmp15 35 :packCfg:rotation
+  396 printchar *tmp15
+  397 op add *tmp16 35 :packCfg:size
+  398 printchar *tmp16
+  399 set *tmp17 .index
+  400 op add .index .index 1
+  401 op add *tmp18 35 *tmp17
+  402 printchar *tmp18
+  403 printchar 34
+  404 print ";"
+  405 print "\n"
+  406 label *label66
   407 set :packCfg:name "AIR_FACTORY"
   408 set :packCfg:type @air-factory
   409 set :packCfg:x -3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   319 sensor *tmp0 @power-node @id
   320 op add *tmp1 35 *tmp0
   321 printchar *tmp1
-    * op add *tmp2 7 -1
-    * op floor *tmp3 6
-    * op add *tmp4 35 6
   322 printchar 41
-    * op add *tmp5 7 -3
-    * op floor *tmp6 4
-    * op add *tmp7 35 4
   323 printchar 39
-    * op add *tmp8 35 2
   324 printchar 37
-    * op add *tmp9 35 6
   325 printchar 41
-    * op add *tmp10 35 0
   326 printchar 35
-    * op add *tmp11 35 0
   327 printchar 35
-    * op add *tmp12 35 0
   328 printchar 35
-    * op add *tmp13 35 0
   329 printchar 35
-    * op add *tmp14 35 0
   330 printchar 35
-    * op add *tmp15 35 0
   331 printchar 35
-    * op add *tmp16 35 1
   332 printchar 36
   333 set *tmp17 .index
   334 op add .index .index 1
 
   348 set :packCfg:ti 25
   349 label *label65
   350 print "const "
-    * print :packCfg:name
+  351 print "UNLOADER2"
   352 print " "
   353 print "= "
   354 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  355 sensor *tmp0 @unloader @id
   356 op add *tmp1 35 *tmp0
   357 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  358 op add *tmp2 7 -2
+  359 op floor *tmp3 5
+  360 op add *tmp4 35 5
+  361 printchar 40
+  362 op add *tmp5 7 0
+  363 op floor *tmp6 7
+  364 op add *tmp7 35 7
+  365 printchar 42
+  366 op add *tmp8 35 0
+  367 printchar 35
+  368 op add *tmp9 35 0
+  369 printchar 35
+  370 op add *tmp10 35 0
+  371 printchar 35
+  372 op add *tmp11 35 30
+  373 printchar 65
+  374 op add *tmp12 35 25
+  375 printchar 60
+  376 op add *tmp13 35 0
+  377 printchar 35
+  378 op add *tmp14 35 0
+  379 printchar 35
+  380 op add *tmp15 35 0
+  381 printchar 35
+  382 op add *tmp16 35 1
+  383 printchar 36
   384 set *tmp17 .index
   385 op add .index .index 1
   386 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
     0 set :packCfg:mg 0
     1 set :packCfg:th 0
-    * set :packCfg:rotation 0
     2 label *label41
     3 print "const "
     4 print "PRESS"
 
   196 print "\n"
   197 label *label54
   198 set :packCfg:gr 0
-    * set :packCfg:size 1
   199 label *label55
   200 print "const "
   201 print "UNLOADER1"
 
   336 print ";"
   337 print "\n"
   338 label *label64
-    * set :packCfg:name "UNLOADER2"
-    * set :packCfg:type @unloader
-    * set :packCfg:x -2
-    * set :packCfg:y 0
-    * set :packCfg:cu 0
-    * set :packCfg:pb 0
-    * set :packCfg:si 30
-    * set :packCfg:ti 25
   339 label *label65
   340 print "const "
   341 print "UNLOADER2"

Modifications by Inline function call at line 20:1 (+39 instructions):
 
   389 set :packCfg:ti 0
   390 set :packCfg:rotation 3
   391 set :packCfg:size 3
-    * setaddr :packCfg*retaddr *label14 (h:*label14)
-    * call *label0 *invalid :packCfg*retval (m:*label14) (h:*label14)
-    * label *label14
+  392 label *label67
+  393 print "const "
+  394 print :packCfg:name
+  395 print " "
+  396 print "= "
+  397 printchar 34
+  398 sensor *tmp0 :packCfg:type @id
+  399 op add *tmp1 35 *tmp0
+  400 printchar *tmp1
+  401 op add *tmp2 7 :packCfg:x
+  402 op floor *tmp3 *tmp2
+  403 op add *tmp4 35 *tmp3
+  404 printchar *tmp4
+  405 op add *tmp5 7 :packCfg:y
+  406 op floor *tmp6 *tmp5
+  407 op add *tmp7 35 *tmp6
+  408 printchar *tmp7
+  409 op add *tmp8 35 :packCfg:cu
+  410 printchar *tmp8
+  411 op add *tmp9 35 :packCfg:pb
+  412 printchar *tmp9
+  413 op add *tmp10 35 :packCfg:gr
+  414 printchar *tmp10
+  415 op add *tmp11 35 :packCfg:si
+  416 printchar *tmp11
+  417 op add *tmp12 35 :packCfg:ti
+  418 printchar *tmp12
+  419 op add *tmp13 35 :packCfg:mg
+  420 printchar *tmp13
+  421 op add *tmp14 35 :packCfg:th
+  422 printchar *tmp14
+  423 op add *tmp15 35 :packCfg:rotation
+  424 printchar *tmp15
+  425 op add *tmp16 35 :packCfg:size
+  426 printchar *tmp16
+  427 set *tmp17 .index
+  428 op add .index .index 1
+  429 op add *tmp18 35 *tmp17
+  430 printchar *tmp18
+  431 printchar 34
+  432 print ";"
+  433 print "\n"
+  434 label *label68
   435 set :packCfg:name "UNLOADER3"
   436 set :packCfg:type @unloader
   437 set :packCfg:x 2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   345 sensor *tmp0 @unloader @id
   346 op add *tmp1 35 *tmp0
   347 printchar *tmp1
-    * op add *tmp2 7 -2
-    * op floor *tmp3 5
-    * op add *tmp4 35 5
   348 printchar 40
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   349 printchar 42
-    * op add *tmp8 35 0
   350 printchar 35
-    * op add *tmp9 35 0
   351 printchar 35
-    * op add *tmp10 35 0
   352 printchar 35
-    * op add *tmp11 35 30
   353 printchar 65
-    * op add *tmp12 35 25
   354 printchar 60
-    * op add *tmp13 35 0
   355 printchar 35
-    * op add *tmp14 35 0
   356 printchar 35
-    * op add *tmp15 35 0
   357 printchar 35
-    * op add *tmp16 35 1
   358 printchar 36
   359 set *tmp17 .index
   360 op add .index .index 1
 
   376 set :packCfg:size 3
   377 label *label67
   378 print "const "
-    * print :packCfg:name
+  379 print "AIR_FACTORY"
   380 print " "
   381 print "= "
   382 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  383 sensor *tmp0 @air-factory @id
   384 op add *tmp1 35 *tmp0
   385 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  386 op add *tmp2 7 -3
+  387 op floor *tmp3 4
+  388 op add *tmp4 35 4
+  389 printchar 39
+  390 op add *tmp5 7 -2
+  391 op floor *tmp6 5
+  392 op add *tmp7 35 5
+  393 printchar 40
+  394 op add *tmp8 35 60
+  395 printchar 95
+  396 op add *tmp9 35 70
+  397 printchar 105
+  398 op add *tmp10 35 0
+  399 printchar 35
+  400 op add *tmp11 35 0
+  401 printchar 35
+  402 op add *tmp12 35 0
+  403 printchar 35
+  404 op add *tmp13 35 0
+  405 printchar 35
+  406 op add *tmp14 35 0
+  407 printchar 35
+  408 op add *tmp15 35 3
+  409 printchar 38
+  410 op add *tmp16 35 3
+  411 printchar 38
   412 set *tmp17 .index
   413 op add .index .index 1
   414 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
   364 print ";"
   365 print "\n"
   366 label *label66
-    * set :packCfg:name "AIR_FACTORY"
-    * set :packCfg:type @air-factory
-    * set :packCfg:x -3
-    * set :packCfg:y -2
-    * set :packCfg:cu 60
-    * set :packCfg:pb 70
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
-    * set :packCfg:rotation 3
-    * set :packCfg:size 3
   367 label *label67
   368 print "const "
   369 print "AIR_FACTORY"

Modifications by Inline function call at line 21:1 (+39 instructions):
 
   417 set :packCfg:ti 25
   418 set :packCfg:rotation 0
   419 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label15 (h:*label15)
-    * call *label0 *invalid :packCfg*retval (m:*label15) (h:*label15)
-    * label *label15
+  420 label *label69
+  421 print "const "
+  422 print :packCfg:name
+  423 print " "
+  424 print "= "
+  425 printchar 34
+  426 sensor *tmp0 :packCfg:type @id
+  427 op add *tmp1 35 *tmp0
+  428 printchar *tmp1
+  429 op add *tmp2 7 :packCfg:x
+  430 op floor *tmp3 *tmp2
+  431 op add *tmp4 35 *tmp3
+  432 printchar *tmp4
+  433 op add *tmp5 7 :packCfg:y
+  434 op floor *tmp6 *tmp5
+  435 op add *tmp7 35 *tmp6
+  436 printchar *tmp7
+  437 op add *tmp8 35 :packCfg:cu
+  438 printchar *tmp8
+  439 op add *tmp9 35 :packCfg:pb
+  440 printchar *tmp9
+  441 op add *tmp10 35 :packCfg:gr
+  442 printchar *tmp10
+  443 op add *tmp11 35 :packCfg:si
+  444 printchar *tmp11
+  445 op add *tmp12 35 :packCfg:ti
+  446 printchar *tmp12
+  447 op add *tmp13 35 :packCfg:mg
+  448 printchar *tmp13
+  449 op add *tmp14 35 :packCfg:th
+  450 printchar *tmp14
+  451 op add *tmp15 35 :packCfg:rotation
+  452 printchar *tmp15
+  453 op add *tmp16 35 :packCfg:size
+  454 printchar *tmp16
+  455 set *tmp17 .index
+  456 op add .index .index 1
+  457 op add *tmp18 35 *tmp17
+  458 printchar *tmp18
+  459 printchar 34
+  460 print ";"
+  461 print "\n"
+  462 label *label70
   463 set :packCfg:name "INVERTED_SORT3"
   464 set :packCfg:type @inverted-sorter
   465 set :packCfg:y 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   373 sensor *tmp0 @air-factory @id
   374 op add *tmp1 35 *tmp0
   375 printchar *tmp1
-    * op add *tmp2 7 -3
-    * op floor *tmp3 4
-    * op add *tmp4 35 4
   376 printchar 39
-    * op add *tmp5 7 -2
-    * op floor *tmp6 5
-    * op add *tmp7 35 5
   377 printchar 40
-    * op add *tmp8 35 60
   378 printchar 95
-    * op add *tmp9 35 70
   379 printchar 105
-    * op add *tmp10 35 0
   380 printchar 35
-    * op add *tmp11 35 0
   381 printchar 35
-    * op add *tmp12 35 0
   382 printchar 35
-    * op add *tmp13 35 0
   383 printchar 35
-    * op add *tmp14 35 0
   384 printchar 35
-    * op add *tmp15 35 3
   385 printchar 38
-    * op add *tmp16 35 3
   386 printchar 38
   387 set *tmp17 .index
   388 op add .index .index 1
 
   404 set :packCfg:size 1
   405 label *label69
   406 print "const "
-    * print :packCfg:name
+  407 print "UNLOADER3"
   408 print " "
   409 print "= "
   410 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  411 sensor *tmp0 @unloader @id
   412 op add *tmp1 35 *tmp0
   413 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  414 op add *tmp2 7 2
+  415 op floor *tmp3 9
+  416 op add *tmp4 35 9
+  417 printchar 44
+  418 op add *tmp5 7 -1
+  419 op floor *tmp6 6
+  420 op add *tmp7 35 6
+  421 printchar 41
+  422 op add *tmp8 35 0
+  423 printchar 35
+  424 op add *tmp9 35 0
+  425 printchar 35
+  426 op add *tmp10 35 0
+  427 printchar 35
+  428 op add *tmp11 35 30
+  429 printchar 65
+  430 op add *tmp12 35 25
+  431 printchar 60
+  432 op add *tmp13 35 0
+  433 printchar 35
+  434 op add *tmp14 35 0
+  435 printchar 35
+  436 op add *tmp15 35 0
+  437 printchar 35
+  438 op add *tmp16 35 1
+  439 printchar 36
   440 set *tmp17 .index
   441 op add .index .index 1
   442 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   392 print ";"
   393 print "\n"
   394 label *label68
-    * set :packCfg:name "UNLOADER3"
-    * set :packCfg:type @unloader
   395 set :packCfg:x 2
-    * set :packCfg:y -1
-    * set :packCfg:cu 0
-    * set :packCfg:pb 0
-    * set :packCfg:si 30
-    * set :packCfg:ti 25
   396 set :packCfg:rotation 0
   397 set :packCfg:size 1
   398 label *label69

Modifications by Inline function call at line 22:1 (+39 instructions):
 
   445 set :packCfg:pb 2
   446 set :packCfg:si 0
   447 set :packCfg:ti 0
-    * setaddr :packCfg*retaddr *label16 (h:*label16)
-    * call *label0 *invalid :packCfg*retval (m:*label16) (h:*label16)
-    * label *label16
+  448 label *label71
+  449 print "const "
+  450 print :packCfg:name
+  451 print " "
+  452 print "= "
+  453 printchar 34
+  454 sensor *tmp0 :packCfg:type @id
+  455 op add *tmp1 35 *tmp0
+  456 printchar *tmp1
+  457 op add *tmp2 7 :packCfg:x
+  458 op floor *tmp3 *tmp2
+  459 op add *tmp4 35 *tmp3
+  460 printchar *tmp4
+  461 op add *tmp5 7 :packCfg:y
+  462 op floor *tmp6 *tmp5
+  463 op add *tmp7 35 *tmp6
+  464 printchar *tmp7
+  465 op add *tmp8 35 :packCfg:cu
+  466 printchar *tmp8
+  467 op add *tmp9 35 :packCfg:pb
+  468 printchar *tmp9
+  469 op add *tmp10 35 :packCfg:gr
+  470 printchar *tmp10
+  471 op add *tmp11 35 :packCfg:si
+  472 printchar *tmp11
+  473 op add *tmp12 35 :packCfg:ti
+  474 printchar *tmp12
+  475 op add *tmp13 35 :packCfg:mg
+  476 printchar *tmp13
+  477 op add *tmp14 35 :packCfg:th
+  478 printchar *tmp14
+  479 op add *tmp15 35 :packCfg:rotation
+  480 printchar *tmp15
+  481 op add *tmp16 35 :packCfg:size
+  482 printchar *tmp16
+  483 set *tmp17 .index
+  484 op add .index .index 1
+  485 op add *tmp18 35 *tmp17
+  486 printchar *tmp18
+  487 printchar 34
+  488 print ";"
+  489 print "\n"
+  490 label *label72
   491 set :packCfg:name "KILN"
   492 set :packCfg:type @kiln
   493 set :packCfg:x 2.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   404 sensor *tmp0 @unloader @id
   405 op add *tmp1 35 *tmp0
   406 printchar *tmp1
-    * op add *tmp2 7 2
-    * op floor *tmp3 9
-    * op add *tmp4 35 9
   407 printchar 44
-    * op add *tmp5 7 -1
-    * op floor *tmp6 6
-    * op add *tmp7 35 6
   408 printchar 41
-    * op add *tmp8 35 0
   409 printchar 35
-    * op add *tmp9 35 0
   410 printchar 35
-    * op add *tmp10 35 0
   411 printchar 35
-    * op add *tmp11 35 30
   412 printchar 65
-    * op add *tmp12 35 25
   413 printchar 60
-    * op add *tmp13 35 0
   414 printchar 35
-    * op add *tmp14 35 0
   415 printchar 35
-    * op add *tmp15 35 0
   416 printchar 35
-    * op add *tmp16 35 1
   417 printchar 36
   418 set *tmp17 .index
   419 op add .index .index 1
 
   432 set :packCfg:ti 0
   433 label *label71
   434 print "const "
-    * print :packCfg:name
+  435 print "INVERTED_SORT3"
   436 print " "
   437 print "= "
   438 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  439 sensor *tmp0 @inverted-sorter @id
   440 op add *tmp1 35 *tmp0
   441 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  442 op add *tmp2 7 2
+  443 op floor *tmp3 9
+  444 op add *tmp4 35 9
+  445 printchar 44
+  446 op add *tmp5 7 0
+  447 op floor *tmp6 7
+  448 op add *tmp7 35 7
+  449 printchar 42
+  450 op add *tmp8 35 2
+  451 printchar 37
+  452 op add *tmp9 35 2
+  453 printchar 37
+  454 op add *tmp10 35 0
+  455 printchar 35
+  456 op add *tmp11 35 0
+  457 printchar 35
+  458 op add *tmp12 35 0
+  459 printchar 35
+  460 op add *tmp13 35 0
+  461 printchar 35
+  462 op add *tmp14 35 0
+  463 printchar 35
+  464 op add *tmp15 35 0
+  465 printchar 35
+  466 op add *tmp16 35 1
+  467 printchar 36
   468 set *tmp17 .index
   469 op add .index .index 1
   470 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   195 print ";"
   196 print "\n"
   197 label *label54
-    * set :packCfg:gr 0
   198 label *label55
   199 print "const "
   200 print "UNLOADER1"
 
   391 print ";"
   392 print "\n"
   393 label *label68
-    * set :packCfg:x 2
   394 set :packCfg:rotation 0
-    * set :packCfg:size 1
   395 label *label69
   396 print "const "
   397 print "UNLOADER3"
 
   420 print ";"
   421 print "\n"
   422 label *label70
-    * set :packCfg:name "INVERTED_SORT3"
-    * set :packCfg:type @inverted-sorter
-    * set :packCfg:y 0
-    * set :packCfg:cu 2
-    * set :packCfg:pb 2
   423 set :packCfg:si 0
   424 set :packCfg:ti 0
   425 label *label71

Modifications by Inline function call at line 23:1 (+39 instructions):
 
   473 set :packCfg:pb 30
   474 set :packCfg:gr 30
   475 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label17 (h:*label17)
-    * call *label0 *invalid :packCfg*retval (m:*label17) (h:*label17)
-    * label *label17
+  476 label *label73
+  477 print "const "
+  478 print :packCfg:name
+  479 print " "
+  480 print "= "
+  481 printchar 34
+  482 sensor *tmp0 :packCfg:type @id
+  483 op add *tmp1 35 *tmp0
+  484 printchar *tmp1
+  485 op add *tmp2 7 :packCfg:x
+  486 op floor *tmp3 *tmp2
+  487 op add *tmp4 35 *tmp3
+  488 printchar *tmp4
+  489 op add *tmp5 7 :packCfg:y
+  490 op floor *tmp6 *tmp5
+  491 op add *tmp7 35 *tmp6
+  492 printchar *tmp7
+  493 op add *tmp8 35 :packCfg:cu
+  494 printchar *tmp8
+  495 op add *tmp9 35 :packCfg:pb
+  496 printchar *tmp9
+  497 op add *tmp10 35 :packCfg:gr
+  498 printchar *tmp10
+  499 op add *tmp11 35 :packCfg:si
+  500 printchar *tmp11
+  501 op add *tmp12 35 :packCfg:ti
+  502 printchar *tmp12
+  503 op add *tmp13 35 :packCfg:mg
+  504 printchar *tmp13
+  505 op add *tmp14 35 :packCfg:th
+  506 printchar *tmp14
+  507 op add *tmp15 35 :packCfg:rotation
+  508 printchar *tmp15
+  509 op add *tmp16 35 :packCfg:size
+  510 printchar *tmp16
+  511 set *tmp17 .index
+  512 op add .index .index 1
+  513 op add *tmp18 35 *tmp17
+  514 printchar *tmp18
+  515 printchar 34
+  516 print ";"
+  517 print "\n"
+  518 label *label74
   519 set :packCfg:name "WATER_EXT"
   520 set :packCfg:type @water-extractor
   521 set :packCfg:x -4.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   431 sensor *tmp0 @inverted-sorter @id
   432 op add *tmp1 35 *tmp0
   433 printchar *tmp1
-    * op add *tmp2 7 2
-    * op floor *tmp3 9
-    * op add *tmp4 35 9
   434 printchar 44
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   435 printchar 42
-    * op add *tmp8 35 2
   436 printchar 37
-    * op add *tmp9 35 2
   437 printchar 37
-    * op add *tmp10 35 0
   438 printchar 35
-    * op add *tmp11 35 0
   439 printchar 35
-    * op add *tmp12 35 0
   440 printchar 35
-    * op add *tmp13 35 0
   441 printchar 35
-    * op add *tmp14 35 0
   442 printchar 35
-    * op add *tmp15 35 0
   443 printchar 35
-    * op add *tmp16 35 1
   444 printchar 36
   445 set *tmp17 .index
   446 op add .index .index 1
 
   460 set :packCfg:size 2
   461 label *label73
   462 print "const "
-    * print :packCfg:name
+  463 print "KILN"
   464 print " "
   465 print "= "
   466 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  467 sensor *tmp0 @kiln @id
   468 op add *tmp1 35 *tmp0
   469 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  470 op add *tmp2 7 2.5
+  471 op floor *tmp3 9.5
+  472 op add *tmp4 35 9
+  473 printchar 44
+  474 op add *tmp5 7 1.5
+  475 op floor *tmp6 8.5
+  476 op add *tmp7 35 8
+  477 printchar 43
+  478 op add *tmp8 35 60
+  479 printchar 95
+  480 op add *tmp9 35 30
+  481 printchar 65
+  482 op add *tmp10 35 30
+  483 printchar 65
+  484 op add *tmp11 35 0
+  485 printchar 35
+  486 op add *tmp12 35 0
+  487 printchar 35
+  488 op add *tmp13 35 0
+  489 printchar 35
+  490 op add *tmp14 35 0
+  491 printchar 35
+  492 op add *tmp15 35 0
+  493 printchar 35
+  494 op add *tmp16 35 2
+  495 printchar 37
   496 set *tmp17 .index
   497 op add .index .index 1
   498 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
-    * set :packCfg:mg 0
     0 set :packCfg:th 0
     1 label *label41
     2 print "const "
 
   449 print ";"
   450 print "\n"
   451 label *label72
-    * set :packCfg:name "KILN"
-    * set :packCfg:type @kiln
-    * set :packCfg:x 2.5
-    * set :packCfg:y 1.5
-    * set :packCfg:cu 60
   452 set :packCfg:pb 30
   453 set :packCfg:gr 30
   454 set :packCfg:size 2

Modifications by Inline function call at line 24:1 (+39 instructions):
 
   501 set :packCfg:y 3.5
   502 set :packCfg:cu 30
   503 set :packCfg:mg 30
-    * setaddr :packCfg*retaddr *label18 (h:*label18)
-    * call *label0 *invalid :packCfg*retval (m:*label18) (h:*label18)
-    * label *label18
+  504 label *label75
+  505 print "const "
+  506 print :packCfg:name
+  507 print " "
+  508 print "= "
+  509 printchar 34
+  510 sensor *tmp0 :packCfg:type @id
+  511 op add *tmp1 35 *tmp0
+  512 printchar *tmp1
+  513 op add *tmp2 7 :packCfg:x
+  514 op floor *tmp3 *tmp2
+  515 op add *tmp4 35 *tmp3
+  516 printchar *tmp4
+  517 op add *tmp5 7 :packCfg:y
+  518 op floor *tmp6 *tmp5
+  519 op add *tmp7 35 *tmp6
+  520 printchar *tmp7
+  521 op add *tmp8 35 :packCfg:cu
+  522 printchar *tmp8
+  523 op add *tmp9 35 :packCfg:pb
+  524 printchar *tmp9
+  525 op add *tmp10 35 :packCfg:gr
+  526 printchar *tmp10
+  527 op add *tmp11 35 :packCfg:si
+  528 printchar *tmp11
+  529 op add *tmp12 35 :packCfg:ti
+  530 printchar *tmp12
+  531 op add *tmp13 35 :packCfg:mg
+  532 printchar *tmp13
+  533 op add *tmp14 35 :packCfg:th
+  534 printchar *tmp14
+  535 op add *tmp15 35 :packCfg:rotation
+  536 printchar *tmp15
+  537 op add *tmp16 35 :packCfg:size
+  538 printchar *tmp16
+  539 set *tmp17 .index
+  540 op add .index .index 1
+  541 op add *tmp18 35 *tmp17
+  542 printchar *tmp18
+  543 printchar 34
+  544 print ";"
+  545 print "\n"
+  546 label *label76
   547 set :packCfg:name "OVERFLOW_GATE2"
   548 set :packCfg:type @overflow-gate
   549 set :packCfg:x -3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   461 sensor *tmp0 @kiln @id
   462 op add *tmp1 35 *tmp0
   463 printchar *tmp1
-    * op add *tmp2 7 2.5
-    * op floor *tmp3 9.5
-    * op add *tmp4 35 9
   464 printchar 44
-    * op add *tmp5 7 1.5
-    * op floor *tmp6 8.5
-    * op add *tmp7 35 8
   465 printchar 43
-    * op add *tmp8 35 60
   466 printchar 95
-    * op add *tmp9 35 30
   467 printchar 65
-    * op add *tmp10 35 30
   468 printchar 65
-    * op add *tmp11 35 0
   469 printchar 35
-    * op add *tmp12 35 0
   470 printchar 35
-    * op add *tmp13 35 0
   471 printchar 35
-    * op add *tmp14 35 0
   472 printchar 35
-    * op add *tmp15 35 0
   473 printchar 35
-    * op add *tmp16 35 2
   474 printchar 37
   475 set *tmp17 .index
   476 op add .index .index 1
 
   488 set :packCfg:mg 30
   489 label *label75
   490 print "const "
-    * print :packCfg:name
+  491 print "WATER_EXT"
   492 print " "
   493 print "= "
   494 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  495 sensor *tmp0 @water-extractor @id
   496 op add *tmp1 35 *tmp0
   497 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  498 op add *tmp2 7 -4.5
+  499 op floor *tmp3 2.5
+  500 op add *tmp4 35 2
+  501 printchar 37
+  502 op add *tmp5 7 3.5
+  503 op floor *tmp6 10.5
+  504 op add *tmp7 35 10
+  505 printchar 45
+  506 op add *tmp8 35 30
+  507 printchar 65
+  508 op add *tmp9 35 30
+  509 printchar 65
+  510 op add *tmp10 35 30
+  511 printchar 65
+  512 op add *tmp11 35 0
+  513 printchar 35
+  514 op add *tmp12 35 0
+  515 printchar 35
+  516 op add *tmp13 35 30
+  517 printchar 65
+  518 op add *tmp14 35 0
+  519 printchar 35
+  520 op add *tmp15 35 0
+  521 printchar 35
+  522 op add *tmp16 35 2
+  523 printchar 37
   524 set *tmp17 .index
   525 op add .index .index 1
   526 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   449 print ";"
   450 print "\n"
   451 label *label72
-    * set :packCfg:pb 30
-    * set :packCfg:gr 30
-    * set :packCfg:size 2
   452 label *label73
   453 print "const "
   454 print "KILN"
 
   477 print ";"
   478 print "\n"
   479 label *label74
-    * set :packCfg:name "WATER_EXT"
-    * set :packCfg:type @water-extractor
-    * set :packCfg:x -4.5
-    * set :packCfg:y 3.5
-    * set :packCfg:cu 30
-    * set :packCfg:mg 30
   480 label *label75
   481 print "const "
   482 print "WATER_EXT"

Modifications by Inline function call at line 25:1 (+39 instructions):
 
   529 set :packCfg:gr 0
   530 set :packCfg:mg 0
   531 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label19 (h:*label19)
-    * call *label0 *invalid :packCfg*retval (m:*label19) (h:*label19)
-    * label *label19
+  532 label *label77
+  533 print "const "
+  534 print :packCfg:name
+  535 print " "
+  536 print "= "
+  537 printchar 34
+  538 sensor *tmp0 :packCfg:type @id
+  539 op add *tmp1 35 *tmp0
+  540 printchar *tmp1
+  541 op add *tmp2 7 :packCfg:x
+  542 op floor *tmp3 *tmp2
+  543 op add *tmp4 35 *tmp3
+  544 printchar *tmp4
+  545 op add *tmp5 7 :packCfg:y
+  546 op floor *tmp6 *tmp5
+  547 op add *tmp7 35 *tmp6
+  548 printchar *tmp7
+  549 op add *tmp8 35 :packCfg:cu
+  550 printchar *tmp8
+  551 op add *tmp9 35 :packCfg:pb
+  552 printchar *tmp9
+  553 op add *tmp10 35 :packCfg:gr
+  554 printchar *tmp10
+  555 op add *tmp11 35 :packCfg:si
+  556 printchar *tmp11
+  557 op add *tmp12 35 :packCfg:ti
+  558 printchar *tmp12
+  559 op add *tmp13 35 :packCfg:mg
+  560 printchar *tmp13
+  561 op add *tmp14 35 :packCfg:th
+  562 printchar *tmp14
+  563 op add *tmp15 35 :packCfg:rotation
+  564 printchar *tmp15
+  565 op add *tmp16 35 :packCfg:size
+  566 printchar *tmp16
+  567 set *tmp17 .index
+  568 op add .index .index 1
+  569 op add *tmp18 35 *tmp17
+  570 printchar *tmp18
+  571 printchar 34
+  572 print ";"
+  573 print "\n"
+  574 label *label78
   575 set :packCfg:name "OVERFLOW_GATE3"
   576 set :packCfg:x -4
   577 setaddr :packCfg*retaddr *label20 (h:*label20)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   486 sensor *tmp0 @water-extractor @id
   487 op add *tmp1 35 *tmp0
   488 printchar *tmp1
-    * op add *tmp2 7 -4.5
-    * op floor *tmp3 2.5
-    * op add *tmp4 35 2
   489 printchar 37
-    * op add *tmp5 7 3.5
-    * op floor *tmp6 10.5
-    * op add *tmp7 35 10
   490 printchar 45
-    * op add *tmp8 35 30
   491 printchar 65
-    * op add *tmp9 35 30
   492 printchar 65
-    * op add *tmp10 35 30
   493 printchar 65
-    * op add *tmp11 35 0
   494 printchar 35
-    * op add *tmp12 35 0
   495 printchar 35
-    * op add *tmp13 35 30
   496 printchar 65
-    * op add *tmp14 35 0
   497 printchar 35
-    * op add *tmp15 35 0
   498 printchar 35
-    * op add *tmp16 35 2
   499 printchar 37
   500 set *tmp17 .index
   501 op add .index .index 1
 
   516 set :packCfg:size 1
   517 label *label77
   518 print "const "
-    * print :packCfg:name
+  519 print "OVERFLOW_GATE2"
   520 print " "
   521 print "= "
   522 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  523 sensor *tmp0 @overflow-gate @id
   524 op add *tmp1 35 *tmp0
   525 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  526 op add *tmp2 7 -3
+  527 op floor *tmp3 4
+  528 op add *tmp4 35 4
+  529 printchar 39
+  530 op add *tmp5 7 0
+  531 op floor *tmp6 7
+  532 op add *tmp7 35 7
+  533 printchar 42
+  534 op add *tmp8 35 4
+  535 printchar 39
+  536 op add *tmp9 35 2
+  537 printchar 37
+  538 op add *tmp10 35 0
+  539 printchar 35
+  540 op add *tmp11 35 0
+  541 printchar 35
+  542 op add *tmp12 35 0
+  543 printchar 35
+  544 op add *tmp13 35 0
+  545 printchar 35
+  546 op add *tmp14 35 0
+  547 printchar 35
+  548 op add *tmp15 35 0
+  549 printchar 35
+  550 op add *tmp16 35 1
+  551 printchar 36
   552 set *tmp17 .index
   553 op add .index .index 1
   554 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   505 print ";"
   506 print "\n"
   507 label *label76
-    * set :packCfg:name "OVERFLOW_GATE2"
   508 set :packCfg:type @overflow-gate
-    * set :packCfg:x -3
   509 set :packCfg:y 0
   510 set :packCfg:cu 4
   511 set :packCfg:pb 2

Modifications by Inline function call at line 26:1 (+39 instructions):
 
   557 label *label78
   558 set :packCfg:name "OVERFLOW_GATE3"
   559 set :packCfg:x -4
-    * setaddr :packCfg*retaddr *label20 (h:*label20)
-    * call *label0 *invalid :packCfg*retval (m:*label20) (h:*label20)
-    * label *label20
+  560 label *label79
+  561 print "const "
+  562 print :packCfg:name
+  563 print " "
+  564 print "= "
+  565 printchar 34
+  566 sensor *tmp0 :packCfg:type @id
+  567 op add *tmp1 35 *tmp0
+  568 printchar *tmp1
+  569 op add *tmp2 7 :packCfg:x
+  570 op floor *tmp3 *tmp2
+  571 op add *tmp4 35 *tmp3
+  572 printchar *tmp4
+  573 op add *tmp5 7 :packCfg:y
+  574 op floor *tmp6 *tmp5
+  575 op add *tmp7 35 *tmp6
+  576 printchar *tmp7
+  577 op add *tmp8 35 :packCfg:cu
+  578 printchar *tmp8
+  579 op add *tmp9 35 :packCfg:pb
+  580 printchar *tmp9
+  581 op add *tmp10 35 :packCfg:gr
+  582 printchar *tmp10
+  583 op add *tmp11 35 :packCfg:si
+  584 printchar *tmp11
+  585 op add *tmp12 35 :packCfg:ti
+  586 printchar *tmp12
+  587 op add *tmp13 35 :packCfg:mg
+  588 printchar *tmp13
+  589 op add *tmp14 35 :packCfg:th
+  590 printchar *tmp14
+  591 op add *tmp15 35 :packCfg:rotation
+  592 printchar *tmp15
+  593 op add *tmp16 35 :packCfg:size
+  594 printchar *tmp16
+  595 set *tmp17 .index
+  596 op add .index .index 1
+  597 op add *tmp18 35 *tmp17
+  598 printchar *tmp18
+  599 printchar 34
+  600 print ";"
+  601 print "\n"
+  602 label *label80
   603 set :packCfg:name "STEAM_GEN"
   604 set :packCfg:type @steam-generator
   605 set :packCfg:x -4.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   521 sensor *tmp0 @overflow-gate @id
   522 op add *tmp1 35 *tmp0
   523 printchar *tmp1
-    * op add *tmp2 7 -3
-    * op floor *tmp3 4
-    * op add *tmp4 35 4
   524 printchar 39
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   525 printchar 42
-    * op add *tmp8 35 4
   526 printchar 39
-    * op add *tmp9 35 2
   527 printchar 37
-    * op add *tmp10 35 0
   528 printchar 35
-    * op add *tmp11 35 0
   529 printchar 35
-    * op add *tmp12 35 0
   530 printchar 35
-    * op add *tmp13 35 0
   531 printchar 35
-    * op add *tmp14 35 0
   532 printchar 35
-    * op add *tmp15 35 0
   533 printchar 35
-    * op add *tmp16 35 1
   534 printchar 36
   535 set *tmp17 .index
   536 op add .index .index 1
 
   544 set :packCfg:x -4
   545 label *label79
   546 print "const "
-    * print :packCfg:name
+  547 print "OVERFLOW_GATE3"
   548 print " "
   549 print "= "
   550 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  551 sensor *tmp0 @overflow-gate @id
   552 op add *tmp1 35 *tmp0
   553 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  554 op add *tmp2 7 -4
+  555 op floor *tmp3 3
+  556 op add *tmp4 35 3
+  557 printchar 38
+  558 op add *tmp5 7 0
+  559 op floor *tmp6 7
+  560 op add *tmp7 35 7
+  561 printchar 42
+  562 op add *tmp8 35 4
+  563 printchar 39
+  564 op add *tmp9 35 2
+  565 printchar 37
+  566 op add *tmp10 35 0
+  567 printchar 35
+  568 op add *tmp11 35 0
+  569 printchar 35
+  570 op add *tmp12 35 0
+  571 printchar 35
+  572 op add *tmp13 35 0
+  573 printchar 35
+  574 op add *tmp14 35 0
+  575 printchar 35
+  576 op add *tmp15 35 0
+  577 printchar 35
+  578 op add *tmp16 35 1
+  579 printchar 36
   580 set *tmp17 .index
   581 op add .index .index 1
   582 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   419 print ";"
   420 print "\n"
   421 label *label70
-    * set :packCfg:si 0
   422 set :packCfg:ti 0
   423 label *label71
   424 print "const "
 
   504 print ";"
   505 print "\n"
   506 label *label76
-    * set :packCfg:type @overflow-gate
-    * set :packCfg:y 0
-    * set :packCfg:cu 4
-    * set :packCfg:pb 2
-    * set :packCfg:gr 0
   507 set :packCfg:mg 0
-    * set :packCfg:size 1
   508 label *label77
   509 print "const "
   510 print "OVERFLOW_GATE2"
 
   533 print ";"
   534 print "\n"
   535 label *label78
-    * set :packCfg:name "OVERFLOW_GATE3"
-    * set :packCfg:x -4
   536 label *label79
   537 print "const "
   538 print "OVERFLOW_GATE3"

Modifications by Inline function call at line 27:1 (+39 instructions):
 
   585 set :packCfg:gr 25
   586 set :packCfg:si 30
   587 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label21 (h:*label21)
-    * call *label0 *invalid :packCfg*retval (m:*label21) (h:*label21)
-    * label *label21
+  588 label *label81
+  589 print "const "
+  590 print :packCfg:name
+  591 print " "
+  592 print "= "
+  593 printchar 34
+  594 sensor *tmp0 :packCfg:type @id
+  595 op add *tmp1 35 *tmp0
+  596 printchar *tmp1
+  597 op add *tmp2 7 :packCfg:x
+  598 op floor *tmp3 *tmp2
+  599 op add *tmp4 35 *tmp3
+  600 printchar *tmp4
+  601 op add *tmp5 7 :packCfg:y
+  602 op floor *tmp6 *tmp5
+  603 op add *tmp7 35 *tmp6
+  604 printchar *tmp7
+  605 op add *tmp8 35 :packCfg:cu
+  606 printchar *tmp8
+  607 op add *tmp9 35 :packCfg:pb
+  608 printchar *tmp9
+  609 op add *tmp10 35 :packCfg:gr
+  610 printchar *tmp10
+  611 op add *tmp11 35 :packCfg:si
+  612 printchar *tmp11
+  613 op add *tmp12 35 :packCfg:ti
+  614 printchar *tmp12
+  615 op add *tmp13 35 :packCfg:mg
+  616 printchar *tmp13
+  617 op add *tmp14 35 :packCfg:th
+  618 printchar *tmp14
+  619 op add *tmp15 35 :packCfg:rotation
+  620 printchar *tmp15
+  621 op add *tmp16 35 :packCfg:size
+  622 printchar *tmp16
+  623 set *tmp17 .index
+  624 op add .index .index 1
+  625 op add *tmp18 35 *tmp17
+  626 printchar *tmp18
+  627 printchar 34
+  628 print ";"
+  629 print "\n"
+  630 label *label82
   631 set :packCfg:name "MULTIPRESS"
   632 set :packCfg:type @multi-press
   633 set :packCfg:x -2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   542 sensor *tmp0 @overflow-gate @id
   543 op add *tmp1 35 *tmp0
   544 printchar *tmp1
-    * op add *tmp2 7 -4
-    * op floor *tmp3 3
-    * op add *tmp4 35 3
   545 printchar 38
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   546 printchar 42
-    * op add *tmp8 35 4
   547 printchar 39
-    * op add *tmp9 35 2
   548 printchar 37
-    * op add *tmp10 35 0
   549 printchar 35
-    * op add *tmp11 35 0
   550 printchar 35
-    * op add *tmp12 35 0
   551 printchar 35
-    * op add *tmp13 35 0
   552 printchar 35
-    * op add *tmp14 35 0
   553 printchar 35
-    * op add *tmp15 35 0
   554 printchar 35
-    * op add *tmp16 35 1
   555 printchar 36
   556 set *tmp17 .index
   557 op add .index .index 1
 
   572 set :packCfg:size 2
   573 label *label81
   574 print "const "
-    * print :packCfg:name
+  575 print "STEAM_GEN"
   576 print " "
   577 print "= "
   578 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  579 sensor *tmp0 @steam-generator @id
   580 op add *tmp1 35 *tmp0
   581 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  582 op add *tmp2 7 -4.5
+  583 op floor *tmp3 2.5
+  584 op add *tmp4 35 2
+  585 printchar 37
+  586 op add *tmp5 7 1.5
+  587 op floor *tmp6 8.5
+  588 op add *tmp7 35 8
+  589 printchar 43
+  590 op add *tmp8 35 35
+  591 printchar 70
+  592 op add *tmp9 35 40
+  593 printchar 75
+  594 op add *tmp10 35 25
+  595 printchar 60
+  596 op add *tmp11 35 30
+  597 printchar 65
+  598 op add *tmp12 35 0
+  599 printchar 35
+  600 op add *tmp13 35 0
+  601 printchar 35
+  602 op add *tmp14 35 0
+  603 printchar 35
+  604 op add *tmp15 35 0
+  605 printchar 35
+  606 op add *tmp16 35 2
+  607 printchar 37
   608 set *tmp17 .index
   609 op add .index .index 1
   610 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
   419 print ";"
   420 print "\n"
   421 label *label70
-    * set :packCfg:ti 0
   422 label *label71
   423 print "const "
   424 print "INVERTED_SORT3"
 
   560 print ";"
   561 print "\n"
   562 label *label80
-    * set :packCfg:name "STEAM_GEN"
-    * set :packCfg:type @steam-generator
-    * set :packCfg:x -4.5
-    * set :packCfg:y 1.5
-    * set :packCfg:cu 35
-    * set :packCfg:pb 40
-    * set :packCfg:gr 25
-    * set :packCfg:si 30
-    * set :packCfg:size 2
   563 label *label81
   564 print "const "
   565 print "STEAM_GEN"

Modifications by Inline function call at line 28:1 (+39 instructions):
 
   613 set :packCfg:si 25
   614 set :packCfg:ti 100
   615 set :packCfg:size 3
-    * setaddr :packCfg*retaddr *label22 (h:*label22)
-    * call *label0 *invalid :packCfg*retval (m:*label22) (h:*label22)
-    * label *label22
+  616 label *label83
+  617 print "const "
+  618 print :packCfg:name
+  619 print " "
+  620 print "= "
+  621 printchar 34
+  622 sensor *tmp0 :packCfg:type @id
+  623 op add *tmp1 35 *tmp0
+  624 printchar *tmp1
+  625 op add *tmp2 7 :packCfg:x
+  626 op floor *tmp3 *tmp2
+  627 op add *tmp4 35 *tmp3
+  628 printchar *tmp4
+  629 op add *tmp5 7 :packCfg:y
+  630 op floor *tmp6 *tmp5
+  631 op add *tmp7 35 *tmp6
+  632 printchar *tmp7
+  633 op add *tmp8 35 :packCfg:cu
+  634 printchar *tmp8
+  635 op add *tmp9 35 :packCfg:pb
+  636 printchar *tmp9
+  637 op add *tmp10 35 :packCfg:gr
+  638 printchar *tmp10
+  639 op add *tmp11 35 :packCfg:si
+  640 printchar *tmp11
+  641 op add *tmp12 35 :packCfg:ti
+  642 printchar *tmp12
+  643 op add *tmp13 35 :packCfg:mg
+  644 printchar *tmp13
+  645 op add *tmp14 35 :packCfg:th
+  646 printchar *tmp14
+  647 op add *tmp15 35 :packCfg:rotation
+  648 printchar *tmp15
+  649 op add *tmp16 35 :packCfg:size
+  650 printchar *tmp16
+  651 set *tmp17 .index
+  652 op add .index .index 1
+  653 op add *tmp18 35 *tmp17
+  654 printchar *tmp18
+  655 printchar 34
+  656 print ";"
+  657 print "\n"
+  658 label *label84
   659 set :packCfg:name "WATER_EXT2"
   660 set :packCfg:type @water-extractor
   661 set :packCfg:x -4.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   569 sensor *tmp0 @steam-generator @id
   570 op add *tmp1 35 *tmp0
   571 printchar *tmp1
-    * op add *tmp2 7 -4.5
-    * op floor *tmp3 2.5
-    * op add *tmp4 35 2
   572 printchar 37
-    * op add *tmp5 7 1.5
-    * op floor *tmp6 8.5
-    * op add *tmp7 35 8
   573 printchar 43
-    * op add *tmp8 35 35
   574 printchar 70
-    * op add *tmp9 35 40
   575 printchar 75
-    * op add *tmp10 35 25
   576 printchar 60
-    * op add *tmp11 35 30
   577 printchar 65
-    * op add *tmp12 35 0
   578 printchar 35
-    * op add *tmp13 35 0
   579 printchar 35
-    * op add *tmp14 35 0
   580 printchar 35
-    * op add *tmp15 35 0
   581 printchar 35
-    * op add *tmp16 35 2
   582 printchar 37
   583 set *tmp17 .index
   584 op add .index .index 1
 
   600 set :packCfg:size 3
   601 label *label83
   602 print "const "
-    * print :packCfg:name
+  603 print "MULTIPRESS"
   604 print " "
   605 print "= "
   606 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  607 sensor *tmp0 @multi-press @id
   608 op add *tmp1 35 *tmp0
   609 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  610 op add *tmp2 7 -2
+  611 op floor *tmp3 5
+  612 op add *tmp4 35 5
+  613 printchar 40
+  614 op add *tmp5 7 4
+  615 op floor *tmp6 11
+  616 op add *tmp7 35 11
+  617 printchar 46
+  618 op add *tmp8 35 0
+  619 printchar 35
+  620 op add *tmp9 35 100
+  621 printchar 135
+  622 op add *tmp10 35 50
+  623 printchar 85
+  624 op add *tmp11 35 25
+  625 printchar 60
+  626 op add *tmp12 35 100
+  627 printchar 135
+  628 op add *tmp13 35 0
+  629 printchar 35
+  630 op add *tmp14 35 0
+  631 printchar 35
+  632 op add *tmp15 35 0
+  633 printchar 35
+  634 op add *tmp16 35 3
+  635 printchar 38
   636 set *tmp17 .index
   637 op add .index .index 1
   638 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
 
   503 print ";"
   504 print "\n"
   505 label *label76
-    * set :packCfg:mg 0
   506 label *label77
   507 print "const "
   508 print "OVERFLOW_GATE2"
 
   587 print ";"
   588 print "\n"
   589 label *label82
-    * set :packCfg:name "MULTIPRESS"
-    * set :packCfg:type @multi-press
-    * set :packCfg:x -2
-    * set :packCfg:y 4
-    * set :packCfg:cu 0
-    * set :packCfg:pb 100
-    * set :packCfg:gr 50
-    * set :packCfg:si 25
-    * set :packCfg:ti 100
-    * set :packCfg:size 3
   590 label *label83
   591 print "const "
   592 print "MULTIPRESS"

Modifications by Inline function call at line 29:1 (+39 instructions):
 
   641 set :packCfg:ti 0
   642 set :packCfg:mg 30
   643 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label23 (h:*label23)
-    * call *label0 *invalid :packCfg*retval (m:*label23) (h:*label23)
-    * label *label23
+  644 label *label85
+  645 print "const "
+  646 print :packCfg:name
+  647 print " "
+  648 print "= "
+  649 printchar 34
+  650 sensor *tmp0 :packCfg:type @id
+  651 op add *tmp1 35 *tmp0
+  652 printchar *tmp1
+  653 op add *tmp2 7 :packCfg:x
+  654 op floor *tmp3 *tmp2
+  655 op add *tmp4 35 *tmp3
+  656 printchar *tmp4
+  657 op add *tmp5 7 :packCfg:y
+  658 op floor *tmp6 *tmp5
+  659 op add *tmp7 35 *tmp6
+  660 printchar *tmp7
+  661 op add *tmp8 35 :packCfg:cu
+  662 printchar *tmp8
+  663 op add *tmp9 35 :packCfg:pb
+  664 printchar *tmp9
+  665 op add *tmp10 35 :packCfg:gr
+  666 printchar *tmp10
+  667 op add *tmp11 35 :packCfg:si
+  668 printchar *tmp11
+  669 op add *tmp12 35 :packCfg:ti
+  670 printchar *tmp12
+  671 op add *tmp13 35 :packCfg:mg
+  672 printchar *tmp13
+  673 op add *tmp14 35 :packCfg:th
+  674 printchar *tmp14
+  675 op add *tmp15 35 :packCfg:rotation
+  676 printchar *tmp15
+  677 op add *tmp16 35 :packCfg:size
+  678 printchar *tmp16
+  679 set *tmp17 .index
+  680 op add .index .index 1
+  681 op add *tmp18 35 *tmp17
+  682 printchar *tmp18
+  683 printchar 34
+  684 print ";"
+  685 print "\n"
+  686 label *label86
   687 set :packCfg:name "PAYLOAD_ROUTER"
   688 set :packCfg:type @payload-router
   689 set :packCfg:x -3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   596 sensor *tmp0 @multi-press @id
   597 op add *tmp1 35 *tmp0
   598 printchar *tmp1
-    * op add *tmp2 7 -2
-    * op floor *tmp3 5
-    * op add *tmp4 35 5
   599 printchar 40
-    * op add *tmp5 7 4
-    * op floor *tmp6 11
-    * op add *tmp7 35 11
   600 printchar 46
-    * op add *tmp8 35 0
   601 printchar 35
-    * op add *tmp9 35 100
   602 printchar 135
-    * op add *tmp10 35 50
   603 printchar 85
-    * op add *tmp11 35 25
   604 printchar 60
-    * op add *tmp12 35 100
   605 printchar 135
-    * op add *tmp13 35 0
   606 printchar 35
-    * op add *tmp14 35 0
   607 printchar 35
-    * op add *tmp15 35 0
   608 printchar 35
-    * op add *tmp16 35 3
   609 printchar 38
   610 set *tmp17 .index
   611 op add .index .index 1
 
   628 set :packCfg:size 2
   629 label *label85
   630 print "const "
-    * print :packCfg:name
+  631 print "WATER_EXT2"
   632 print " "
   633 print "= "
   634 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  635 sensor *tmp0 @water-extractor @id
   636 op add *tmp1 35 *tmp0
   637 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  638 op add *tmp2 7 -4.5
+  639 op floor *tmp3 2.5
+  640 op add *tmp4 35 2
+  641 printchar 37
+  642 op add *tmp5 7 5.5
+  643 op floor *tmp6 12.5
+  644 op add *tmp7 35 12
+  645 printchar 47
+  646 op add *tmp8 35 30
+  647 printchar 65
+  648 op add *tmp9 35 30
+  649 printchar 65
+  650 op add *tmp10 35 30
+  651 printchar 65
+  652 op add *tmp11 35 0
+  653 printchar 35
+  654 op add *tmp12 35 0
+  655 printchar 35
+  656 op add *tmp13 35 30
+  657 printchar 65
+  658 op add *tmp14 35 0
+  659 printchar 35
+  660 op add *tmp15 35 0
+  661 printchar 35
+  662 op add *tmp16 35 2
+  663 printchar 37
   664 set *tmp17 .index
   665 op add .index .index 1
   666 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   615 print ";"
   616 print "\n"
   617 label *label84
-    * set :packCfg:name "WATER_EXT2"
-    * set :packCfg:type @water-extractor
-    * set :packCfg:x -4.5
-    * set :packCfg:y 5.5
-    * set :packCfg:cu 30
-    * set :packCfg:pb 30
-    * set :packCfg:gr 30
   618 set :packCfg:si 0
   619 set :packCfg:ti 0
-    * set :packCfg:mg 30
-    * set :packCfg:size 2
   620 label *label85
   621 print "const "
   622 print "WATER_EXT2"

Modifications by Inline function call at line 30:1 (+39 instructions):
 
   669 set :packCfg:gr 15
   670 set :packCfg:mg 0
   671 set :packCfg:size 3
-    * setaddr :packCfg*retaddr *label24 (h:*label24)
-    * call *label0 *invalid :packCfg*retval (m:*label24) (h:*label24)
-    * label *label24
+  672 label *label87
+  673 print "const "
+  674 print :packCfg:name
+  675 print " "
+  676 print "= "
+  677 printchar 34
+  678 sensor *tmp0 :packCfg:type @id
+  679 op add *tmp1 35 *tmp0
+  680 printchar *tmp1
+  681 op add *tmp2 7 :packCfg:x
+  682 op floor *tmp3 *tmp2
+  683 op add *tmp4 35 *tmp3
+  684 printchar *tmp4
+  685 op add *tmp5 7 :packCfg:y
+  686 op floor *tmp6 *tmp5
+  687 op add *tmp7 35 *tmp6
+  688 printchar *tmp7
+  689 op add *tmp8 35 :packCfg:cu
+  690 printchar *tmp8
+  691 op add *tmp9 35 :packCfg:pb
+  692 printchar *tmp9
+  693 op add *tmp10 35 :packCfg:gr
+  694 printchar *tmp10
+  695 op add *tmp11 35 :packCfg:si
+  696 printchar *tmp11
+  697 op add *tmp12 35 :packCfg:ti
+  698 printchar *tmp12
+  699 op add *tmp13 35 :packCfg:mg
+  700 printchar *tmp13
+  701 op add *tmp14 35 :packCfg:th
+  702 printchar *tmp14
+  703 op add *tmp15 35 :packCfg:rotation
+  704 printchar *tmp15
+  705 op add *tmp16 35 :packCfg:size
+  706 printchar *tmp16
+  707 set *tmp17 .index
+  708 op add .index .index 1
+  709 op add *tmp18 35 *tmp17
+  710 printchar *tmp18
+  711 printchar 34
+  712 print ";"
+  713 print "\n"
+  714 label *label88
   715 set :packCfg:name "UNLOADER4"
   716 set :packCfg:type @unloader
   717 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   626 sensor *tmp0 @water-extractor @id
   627 op add *tmp1 35 *tmp0
   628 printchar *tmp1
-    * op add *tmp2 7 -4.5
-    * op floor *tmp3 2.5
-    * op add *tmp4 35 2
   629 printchar 37
-    * op add *tmp5 7 5.5
-    * op floor *tmp6 12.5
-    * op add *tmp7 35 12
   630 printchar 47
-    * op add *tmp8 35 30
   631 printchar 65
-    * op add *tmp9 35 30
   632 printchar 65
-    * op add *tmp10 35 30
   633 printchar 65
-    * op add *tmp11 35 0
   634 printchar 35
-    * op add *tmp12 35 0
   635 printchar 35
-    * op add *tmp13 35 30
   636 printchar 65
-    * op add *tmp14 35 0
   637 printchar 35
-    * op add *tmp15 35 0
   638 printchar 35
-    * op add *tmp16 35 2
   639 printchar 37
   640 set *tmp17 .index
   641 op add .index .index 1
 
   656 set :packCfg:size 3
   657 label *label87
   658 print "const "
-    * print :packCfg:name
+  659 print "PAYLOAD_ROUTER"
   660 print " "
   661 print "= "
   662 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  663 sensor *tmp0 @payload-router @id
   664 op add *tmp1 35 *tmp0
   665 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  666 op add *tmp2 7 -3
+  667 op floor *tmp3 4
+  668 op add *tmp4 35 4
+  669 printchar 39
+  670 op add *tmp5 7 -5
+  671 op floor *tmp6 2
+  672 op add *tmp7 35 2
+  673 printchar 37
+  674 op add *tmp8 35 10
+  675 printchar 45
+  676 op add *tmp9 35 0
+  677 printchar 35
+  678 op add *tmp10 35 15
+  679 printchar 50
+  680 op add *tmp11 35 0
+  681 printchar 35
+  682 op add *tmp12 35 0
+  683 printchar 35
+  684 op add *tmp13 35 0
+  685 printchar 35
+  686 op add *tmp14 35 0
+  687 printchar 35
+  688 op add *tmp15 35 0
+  689 printchar 35
+  690 op add *tmp16 35 3
+  691 printchar 38
   692 set *tmp17 .index
   693 op add .index .index 1
   694 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   615 print ";"
   616 print "\n"
   617 label *label84
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
   618 label *label85
   619 print "const "
   620 print "WATER_EXT2"
 
   643 print ";"
   644 print "\n"
   645 label *label86
-    * set :packCfg:name "PAYLOAD_ROUTER"
-    * set :packCfg:type @payload-router
-    * set :packCfg:x -3
-    * set :packCfg:y -5
-    * set :packCfg:cu 10
   646 set :packCfg:pb 0
-    * set :packCfg:gr 15
   647 set :packCfg:mg 0
-    * set :packCfg:size 3
   648 label *label87
   649 print "const "
   650 print "PAYLOAD_ROUTER"

Modifications by Inline function call at line 31:1 (+39 instructions):
 
   697 set :packCfg:si 30
   698 set :packCfg:ti 25
   699 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label25 (h:*label25)
-    * call *label0 *invalid :packCfg*retval (m:*label25) (h:*label25)
-    * label *label25
+  700 label *label89
+  701 print "const "
+  702 print :packCfg:name
+  703 print " "
+  704 print "= "
+  705 printchar 34
+  706 sensor *tmp0 :packCfg:type @id
+  707 op add *tmp1 35 *tmp0
+  708 printchar *tmp1
+  709 op add *tmp2 7 :packCfg:x
+  710 op floor *tmp3 *tmp2
+  711 op add *tmp4 35 *tmp3
+  712 printchar *tmp4
+  713 op add *tmp5 7 :packCfg:y
+  714 op floor *tmp6 *tmp5
+  715 op add *tmp7 35 *tmp6
+  716 printchar *tmp7
+  717 op add *tmp8 35 :packCfg:cu
+  718 printchar *tmp8
+  719 op add *tmp9 35 :packCfg:pb
+  720 printchar *tmp9
+  721 op add *tmp10 35 :packCfg:gr
+  722 printchar *tmp10
+  723 op add *tmp11 35 :packCfg:si
+  724 printchar *tmp11
+  725 op add *tmp12 35 :packCfg:ti
+  726 printchar *tmp12
+  727 op add *tmp13 35 :packCfg:mg
+  728 printchar *tmp13
+  729 op add *tmp14 35 :packCfg:th
+  730 printchar *tmp14
+  731 op add *tmp15 35 :packCfg:rotation
+  732 printchar *tmp15
+  733 op add *tmp16 35 :packCfg:size
+  734 printchar *tmp16
+  735 set *tmp17 .index
+  736 op add .index .index 1
+  737 op add *tmp18 35 *tmp17
+  738 printchar *tmp18
+  739 printchar 34
+  740 print ";"
+  741 print "\n"
+  742 label *label90
   743 set :packCfg:name "UNDERFLOW_GATE"
   744 set :packCfg:type @underflow-gate
   745 set :packCfg:y -3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   654 sensor *tmp0 @payload-router @id
   655 op add *tmp1 35 *tmp0
   656 printchar *tmp1
-    * op add *tmp2 7 -3
-    * op floor *tmp3 4
-    * op add *tmp4 35 4
   657 printchar 39
-    * op add *tmp5 7 -5
-    * op floor *tmp6 2
-    * op add *tmp7 35 2
   658 printchar 37
-    * op add *tmp8 35 10
   659 printchar 45
-    * op add *tmp9 35 0
   660 printchar 35
-    * op add *tmp10 35 15
   661 printchar 50
-    * op add *tmp11 35 0
   662 printchar 35
-    * op add *tmp12 35 0
   663 printchar 35
-    * op add *tmp13 35 0
   664 printchar 35
-    * op add *tmp14 35 0
   665 printchar 35
-    * op add *tmp15 35 0
   666 printchar 35
-    * op add *tmp16 35 3
   667 printchar 38
   668 set *tmp17 .index
   669 op add .index .index 1
 
   684 set :packCfg:size 1
   685 label *label89
   686 print "const "
-    * print :packCfg:name
+  687 print "UNLOADER4"
   688 print " "
   689 print "= "
   690 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  691 sensor *tmp0 @unloader @id
   692 op add *tmp1 35 *tmp0
   693 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  694 op add *tmp2 7 0
+  695 op floor *tmp3 7
+  696 op add *tmp4 35 7
+  697 printchar 42
+  698 op add *tmp5 7 -2
+  699 op floor *tmp6 5
+  700 op add *tmp7 35 5
+  701 printchar 40
+  702 op add *tmp8 35 0
+  703 printchar 35
+  704 op add *tmp9 35 0
+  705 printchar 35
+  706 op add *tmp10 35 0
+  707 printchar 35
+  708 op add *tmp11 35 30
+  709 printchar 65
+  710 op add *tmp12 35 25
+  711 printchar 60
+  712 op add *tmp13 35 0
+  713 printchar 35
+  714 op add *tmp14 35 0
+  715 printchar 35
+  716 op add *tmp15 35 0
+  717 printchar 35
+  718 op add *tmp16 35 1
+  719 printchar 36
   720 set *tmp17 .index
   721 op add .index .index 1
   722 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   643 print ";"
   644 print "\n"
   645 label *label86
-    * set :packCfg:pb 0
   646 set :packCfg:mg 0
   647 label *label87
   648 print "const "
 
   672 print ";"
   673 print "\n"
   674 label *label88
-    * set :packCfg:name "UNLOADER4"
-    * set :packCfg:type @unloader
   675 set :packCfg:x 0
-    * set :packCfg:y -2
-    * set :packCfg:cu 0
   676 set :packCfg:gr 0
-    * set :packCfg:si 30
-    * set :packCfg:ti 25
   677 set :packCfg:size 1
   678 label *label89
   679 print "const "

Modifications by Inline function call at line 32:1 (+39 instructions):
 
   725 set :packCfg:pb 2
   726 set :packCfg:si 0
   727 set :packCfg:ti 0
-    * setaddr :packCfg*retaddr *label26 (h:*label26)
-    * call *label0 *invalid :packCfg*retval (m:*label26) (h:*label26)
-    * label *label26
+  728 label *label91
+  729 print "const "
+  730 print :packCfg:name
+  731 print " "
+  732 print "= "
+  733 printchar 34
+  734 sensor *tmp0 :packCfg:type @id
+  735 op add *tmp1 35 *tmp0
+  736 printchar *tmp1
+  737 op add *tmp2 7 :packCfg:x
+  738 op floor *tmp3 *tmp2
+  739 op add *tmp4 35 *tmp3
+  740 printchar *tmp4
+  741 op add *tmp5 7 :packCfg:y
+  742 op floor *tmp6 *tmp5
+  743 op add *tmp7 35 *tmp6
+  744 printchar *tmp7
+  745 op add *tmp8 35 :packCfg:cu
+  746 printchar *tmp8
+  747 op add *tmp9 35 :packCfg:pb
+  748 printchar *tmp9
+  749 op add *tmp10 35 :packCfg:gr
+  750 printchar *tmp10
+  751 op add *tmp11 35 :packCfg:si
+  752 printchar *tmp11
+  753 op add *tmp12 35 :packCfg:ti
+  754 printchar *tmp12
+  755 op add *tmp13 35 :packCfg:mg
+  756 printchar *tmp13
+  757 op add *tmp14 35 :packCfg:th
+  758 printchar *tmp14
+  759 op add *tmp15 35 :packCfg:rotation
+  760 printchar *tmp15
+  761 op add *tmp16 35 :packCfg:size
+  762 printchar *tmp16
+  763 set *tmp17 .index
+  764 op add .index .index 1
+  765 op add *tmp18 35 *tmp17
+  766 printchar *tmp18
+  767 printchar 34
+  768 print ";"
+  769 print "\n"
+  770 label *label92
   771 set :packCfg:name "ADDITIVE_REC"
   772 set :packCfg:type @additive-reconstructor
   773 set :packCfg:y -5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   684 sensor *tmp0 @unloader @id
   685 op add *tmp1 35 *tmp0
   686 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   687 printchar 42
-    * op add *tmp5 7 -2
-    * op floor *tmp6 5
-    * op add *tmp7 35 5
   688 printchar 40
-    * op add *tmp8 35 0
   689 printchar 35
-    * op add *tmp9 35 0
   690 printchar 35
-    * op add *tmp10 35 0
   691 printchar 35
-    * op add *tmp11 35 30
   692 printchar 65
-    * op add *tmp12 35 25
   693 printchar 60
-    * op add *tmp13 35 0
   694 printchar 35
-    * op add *tmp14 35 0
   695 printchar 35
-    * op add *tmp15 35 0
   696 printchar 35
-    * op add *tmp16 35 1
   697 printchar 36
   698 set *tmp17 .index
   699 op add .index .index 1
 
   712 set :packCfg:ti 0
   713 label *label91
   714 print "const "
-    * print :packCfg:name
+  715 print "UNDERFLOW_GATE"
   716 print " "
   717 print "= "
   718 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  719 sensor *tmp0 @underflow-gate @id
   720 op add *tmp1 35 *tmp0
   721 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  722 op add *tmp2 7 0
+  723 op floor *tmp3 7
+  724 op add *tmp4 35 7
+  725 printchar 42
+  726 op add *tmp5 7 -3
+  727 op floor *tmp6 4
+  728 op add *tmp7 35 4
+  729 printchar 39
+  730 op add *tmp8 35 4
+  731 printchar 39
+  732 op add *tmp9 35 2
+  733 printchar 37
+  734 op add *tmp10 35 0
+  735 printchar 35
+  736 op add *tmp11 35 0
+  737 printchar 35
+  738 op add *tmp12 35 0
+  739 printchar 35
+  740 op add *tmp13 35 0
+  741 printchar 35
+  742 op add *tmp14 35 0
+  743 printchar 35
+  744 op add *tmp15 35 0
+  745 printchar 35
+  746 op add *tmp16 35 1
+  747 printchar 36
   748 set *tmp17 .index
   749 op add .index .index 1
   750 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   674 label *label88
   675 set :packCfg:x 0
   676 set :packCfg:gr 0
-    * set :packCfg:size 1
   677 label *label89
   678 print "const "
   679 print "UNLOADER4"
 
   702 print ";"
   703 print "\n"
   704 label *label90
-    * set :packCfg:name "UNDERFLOW_GATE"
-    * set :packCfg:type @underflow-gate
-    * set :packCfg:y -3
-    * set :packCfg:cu 4
-    * set :packCfg:pb 2
-    * set :packCfg:si 0
   705 set :packCfg:ti 0
   706 label *label91
   707 print "const "

Modifications by Inline function call at line 33:1 (+39 instructions):
 
   753 set :packCfg:pb 120
   754 set :packCfg:si 90
   755 set :packCfg:size 3
-    * setaddr :packCfg*retaddr *label27 (h:*label27)
-    * call *label0 *invalid :packCfg*retval (m:*label27) (h:*label27)
-    * label *label27
+  756 label *label93
+  757 print "const "
+  758 print :packCfg:name
+  759 print " "
+  760 print "= "
+  761 printchar 34
+  762 sensor *tmp0 :packCfg:type @id
+  763 op add *tmp1 35 *tmp0
+  764 printchar *tmp1
+  765 op add *tmp2 7 :packCfg:x
+  766 op floor *tmp3 *tmp2
+  767 op add *tmp4 35 *tmp3
+  768 printchar *tmp4
+  769 op add *tmp5 7 :packCfg:y
+  770 op floor *tmp6 *tmp5
+  771 op add *tmp7 35 *tmp6
+  772 printchar *tmp7
+  773 op add *tmp8 35 :packCfg:cu
+  774 printchar *tmp8
+  775 op add *tmp9 35 :packCfg:pb
+  776 printchar *tmp9
+  777 op add *tmp10 35 :packCfg:gr
+  778 printchar *tmp10
+  779 op add *tmp11 35 :packCfg:si
+  780 printchar *tmp11
+  781 op add *tmp12 35 :packCfg:ti
+  782 printchar *tmp12
+  783 op add *tmp13 35 :packCfg:mg
+  784 printchar *tmp13
+  785 op add *tmp14 35 :packCfg:th
+  786 printchar *tmp14
+  787 op add *tmp15 35 :packCfg:rotation
+  788 printchar *tmp15
+  789 op add *tmp16 35 :packCfg:size
+  790 printchar *tmp16
+  791 set *tmp17 .index
+  792 op add .index .index 1
+  793 op add *tmp18 35 *tmp17
+  794 printchar *tmp18
+  795 printchar 34
+  796 print ";"
+  797 print "\n"
+  798 label *label94
   799 set :packCfg:name "BATTERY_LARGE"
   800 set :packCfg:type @battery-large
   801 set :packCfg:x 5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   712 sensor *tmp0 @underflow-gate @id
   713 op add *tmp1 35 *tmp0
   714 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   715 printchar 42
-    * op add *tmp5 7 -3
-    * op floor *tmp6 4
-    * op add *tmp7 35 4
   716 printchar 39
-    * op add *tmp8 35 4
   717 printchar 39
-    * op add *tmp9 35 2
   718 printchar 37
-    * op add *tmp10 35 0
   719 printchar 35
-    * op add *tmp11 35 0
   720 printchar 35
-    * op add *tmp12 35 0
   721 printchar 35
-    * op add *tmp13 35 0
   722 printchar 35
-    * op add *tmp14 35 0
   723 printchar 35
-    * op add *tmp15 35 0
   724 printchar 35
-    * op add *tmp16 35 1
   725 printchar 36
   726 set *tmp17 .index
   727 op add .index .index 1
 
   740 set :packCfg:size 3
   741 label *label93
   742 print "const "
-    * print :packCfg:name
+  743 print "ADDITIVE_REC"
   744 print " "
   745 print "= "
   746 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  747 sensor *tmp0 @additive-reconstructor @id
   748 op add *tmp1 35 *tmp0
   749 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  750 op add *tmp2 7 0
+  751 op floor *tmp3 7
+  752 op add *tmp4 35 7
+  753 printchar 42
+  754 op add *tmp5 7 -5
+  755 op floor *tmp6 2
+  756 op add *tmp7 35 2
+  757 printchar 37
+  758 op add *tmp8 35 200
+  759 printchar 235
+  760 op add *tmp9 35 120
+  761 printchar 155
+  762 op add *tmp10 35 0
+  763 printchar 35
+  764 op add *tmp11 35 90
+  765 printchar 125
+  766 op add *tmp12 35 0
+  767 printchar 35
+  768 op add *tmp13 35 0
+  769 printchar 35
+  770 op add *tmp14 35 0
+  771 printchar 35
+  772 op add *tmp15 35 0
+  773 printchar 35
+  774 op add *tmp16 35 3
+  775 printchar 38
   776 set *tmp17 .index
   777 op add .index .index 1
   778 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   672 print ";"
   673 print "\n"
   674 label *label88
-    * set :packCfg:x 0
   675 set :packCfg:gr 0
   676 label *label89
   677 print "const "
 
   701 print ";"
   702 print "\n"
   703 label *label90
-    * set :packCfg:ti 0
   704 label *label91
   705 print "const "
   706 print "UNDERFLOW_GATE"
 
   729 print ";"
   730 print "\n"
   731 label *label92
-    * set :packCfg:name "ADDITIVE_REC"
-    * set :packCfg:type @additive-reconstructor
-    * set :packCfg:y -5
-    * set :packCfg:cu 200
-    * set :packCfg:pb 120
-    * set :packCfg:si 90
   732 set :packCfg:size 3
   733 label *label93
   734 print "const "

Modifications by Inline function call at line 34:1 (+39 instructions):
 
   781 set :packCfg:pb 50
   782 set :packCfg:si 30
   783 set :packCfg:ti 20
-    * setaddr :packCfg*retaddr *label28 (h:*label28)
-    * call *label0 *invalid :packCfg*retval (m:*label28) (h:*label28)
-    * label *label28
+  784 label *label95
+  785 print "const "
+  786 print :packCfg:name
+  787 print " "
+  788 print "= "
+  789 printchar 34
+  790 sensor *tmp0 :packCfg:type @id
+  791 op add *tmp1 35 *tmp0
+  792 printchar *tmp1
+  793 op add *tmp2 7 :packCfg:x
+  794 op floor *tmp3 *tmp2
+  795 op add *tmp4 35 *tmp3
+  796 printchar *tmp4
+  797 op add *tmp5 7 :packCfg:y
+  798 op floor *tmp6 *tmp5
+  799 op add *tmp7 35 *tmp6
+  800 printchar *tmp7
+  801 op add *tmp8 35 :packCfg:cu
+  802 printchar *tmp8
+  803 op add *tmp9 35 :packCfg:pb
+  804 printchar *tmp9
+  805 op add *tmp10 35 :packCfg:gr
+  806 printchar *tmp10
+  807 op add *tmp11 35 :packCfg:si
+  808 printchar *tmp11
+  809 op add *tmp12 35 :packCfg:ti
+  810 printchar *tmp12
+  811 op add *tmp13 35 :packCfg:mg
+  812 printchar *tmp13
+  813 op add *tmp14 35 :packCfg:th
+  814 printchar *tmp14
+  815 op add *tmp15 35 :packCfg:rotation
+  816 printchar *tmp15
+  817 op add *tmp16 35 :packCfg:size
+  818 printchar *tmp16
+  819 set *tmp17 .index
+  820 op add .index .index 1
+  821 op add *tmp18 35 *tmp17
+  822 printchar *tmp18
+  823 printchar 34
+  824 print ";"
+  825 print "\n"
+  826 label *label96
   827 set :packCfg:name "OVERFLOW_GATE4"
   828 set :packCfg:type @overflow-gate
   829 set :packCfg:x -4

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   739 sensor *tmp0 @additive-reconstructor @id
   740 op add *tmp1 35 *tmp0
   741 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   742 printchar 42
-    * op add *tmp5 7 -5
-    * op floor *tmp6 2
-    * op add *tmp7 35 2
   743 printchar 37
-    * op add *tmp8 35 200
   744 printchar 235
-    * op add *tmp9 35 120
   745 printchar 155
-    * op add *tmp10 35 0
   746 printchar 35
-    * op add *tmp11 35 90
   747 printchar 125
-    * op add *tmp12 35 0
   748 printchar 35
-    * op add *tmp13 35 0
   749 printchar 35
-    * op add *tmp14 35 0
   750 printchar 35
-    * op add *tmp15 35 0
   751 printchar 35
-    * op add *tmp16 35 3
   752 printchar 38
   753 set *tmp17 .index
   754 op add .index .index 1
 
   768 set :packCfg:ti 20
   769 label *label95
   770 print "const "
-    * print :packCfg:name
+  771 print "BATTERY_LARGE"
   772 print " "
   773 print "= "
   774 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  775 sensor *tmp0 @battery-large @id
   776 op add *tmp1 35 *tmp0
   777 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  778 op add *tmp2 7 5
+  779 op floor *tmp3 12
+  780 op add *tmp4 35 12
+  781 printchar 47
+  782 op add *tmp5 7 2
+  783 op floor *tmp6 9
+  784 op add *tmp7 35 9
+  785 printchar 44
+  786 op add *tmp8 35 0
+  787 printchar 35
+  788 op add *tmp9 35 50
+  789 printchar 85
+  790 op add *tmp10 35 0
+  791 printchar 35
+  792 op add *tmp11 35 30
+  793 printchar 65
+  794 op add *tmp12 35 20
+  795 printchar 55
+  796 op add *tmp13 35 0
+  797 printchar 35
+  798 op add *tmp14 35 0
+  799 printchar 35
+  800 op add *tmp15 35 0
+  801 printchar 35
+  802 op add *tmp16 35 3
+  803 printchar 38
   804 set *tmp17 .index
   805 op add .index .index 1
   806 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   729 print ";"
   730 print "\n"
   731 label *label92
-    * set :packCfg:size 3
   732 label *label93
   733 print "const "
   734 print "ADDITIVE_REC"
 
   757 print ";"
   758 print "\n"
   759 label *label94
-    * set :packCfg:name "BATTERY_LARGE"
-    * set :packCfg:type @battery-large
-    * set :packCfg:x 5
-    * set :packCfg:y 2
-    * set :packCfg:cu 0
-    * set :packCfg:pb 50
-    * set :packCfg:si 30
-    * set :packCfg:ti 20
   760 label *label95
   761 print "const "
   762 print "BATTERY_LARGE"

Modifications by Inline function call at line 35:1 (+39 instructions):
 
   809 set :packCfg:si 0
   810 set :packCfg:ti 0
   811 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label29 (h:*label29)
-    * call *label0 *invalid :packCfg*retval (m:*label29) (h:*label29)
-    * label *label29
+  812 label *label97
+  813 print "const "
+  814 print :packCfg:name
+  815 print " "
+  816 print "= "
+  817 printchar 34
+  818 sensor *tmp0 :packCfg:type @id
+  819 op add *tmp1 35 *tmp0
+  820 printchar *tmp1
+  821 op add *tmp2 7 :packCfg:x
+  822 op floor *tmp3 *tmp2
+  823 op add *tmp4 35 *tmp3
+  824 printchar *tmp4
+  825 op add *tmp5 7 :packCfg:y
+  826 op floor *tmp6 *tmp5
+  827 op add *tmp7 35 *tmp6
+  828 printchar *tmp7
+  829 op add *tmp8 35 :packCfg:cu
+  830 printchar *tmp8
+  831 op add *tmp9 35 :packCfg:pb
+  832 printchar *tmp9
+  833 op add *tmp10 35 :packCfg:gr
+  834 printchar *tmp10
+  835 op add *tmp11 35 :packCfg:si
+  836 printchar *tmp11
+  837 op add *tmp12 35 :packCfg:ti
+  838 printchar *tmp12
+  839 op add *tmp13 35 :packCfg:mg
+  840 printchar *tmp13
+  841 op add *tmp14 35 :packCfg:th
+  842 printchar *tmp14
+  843 op add *tmp15 35 :packCfg:rotation
+  844 printchar *tmp15
+  845 op add *tmp16 35 :packCfg:size
+  846 printchar *tmp16
+  847 set *tmp17 .index
+  848 op add .index .index 1
+  849 op add *tmp18 35 *tmp17
+  850 printchar *tmp18
+  851 printchar 34
+  852 print ";"
+  853 print "\n"
+  854 label *label98
   855 set :packCfg:name "LASER_DRILL"
   856 set :packCfg:type @laser-drill
   857 set :packCfg:x 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   766 sensor *tmp0 @battery-large @id
   767 op add *tmp1 35 *tmp0
   768 printchar *tmp1
-    * op add *tmp2 7 5
-    * op floor *tmp3 12
-    * op add *tmp4 35 12
   769 printchar 47
-    * op add *tmp5 7 2
-    * op floor *tmp6 9
-    * op add *tmp7 35 9
   770 printchar 44
-    * op add *tmp8 35 0
   771 printchar 35
-    * op add *tmp9 35 50
   772 printchar 85
-    * op add *tmp10 35 0
   773 printchar 35
-    * op add *tmp11 35 30
   774 printchar 65
-    * op add *tmp12 35 20
   775 printchar 55
-    * op add *tmp13 35 0
   776 printchar 35
-    * op add *tmp14 35 0
   777 printchar 35
-    * op add *tmp15 35 0
   778 printchar 35
-    * op add *tmp16 35 3
   779 printchar 38
   780 set *tmp17 .index
   781 op add .index .index 1
 
   796 set :packCfg:size 1
   797 label *label97
   798 print "const "
-    * print :packCfg:name
+  799 print "OVERFLOW_GATE4"
   800 print " "
   801 print "= "
   802 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  803 sensor *tmp0 @overflow-gate @id
   804 op add *tmp1 35 *tmp0
   805 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  806 op add *tmp2 7 -4
+  807 op floor *tmp3 3
+  808 op add *tmp4 35 3
+  809 printchar 38
+  810 op add *tmp5 7 0
+  811 op floor *tmp6 7
+  812 op add *tmp7 35 7
+  813 printchar 42
+  814 op add *tmp8 35 4
+  815 printchar 39
+  816 op add *tmp9 35 2
+  817 printchar 37
+  818 op add *tmp10 35 0
+  819 printchar 35
+  820 op add *tmp11 35 0
+  821 printchar 35
+  822 op add *tmp12 35 0
+  823 printchar 35
+  824 op add *tmp13 35 0
+  825 printchar 35
+  826 op add *tmp14 35 0
+  827 printchar 35
+  828 op add *tmp15 35 0
+  829 printchar 35
+  830 op add *tmp16 35 1
+  831 printchar 36
   832 set *tmp17 .index
   833 op add .index .index 1
   834 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
 
   672 print ";"
   673 print "\n"
   674 label *label88
-    * set :packCfg:gr 0
   675 label *label89
   676 print "const "
   677 print "UNLOADER4"
 
   784 print ";"
   785 print "\n"
   786 label *label96
-    * set :packCfg:name "OVERFLOW_GATE4"
-    * set :packCfg:type @overflow-gate
-    * set :packCfg:x -4
   787 set :packCfg:y 0
-    * set :packCfg:cu 4
-    * set :packCfg:pb 2
-    * set :packCfg:si 0
-    * set :packCfg:ti 0
-    * set :packCfg:size 1
   788 label *label97
   789 print "const "
   790 print "OVERFLOW_GATE4"

Modifications by Inline function call at line 36:1 (+39 instructions):
 
   837 set :packCfg:si 30
   838 set :packCfg:ti 20
   839 set :packCfg:size 3
-    * setaddr :packCfg*retaddr *label30 (h:*label30)
-    * call *label0 *invalid :packCfg*retval (m:*label30) (h:*label30)
-    * label *label30
+  840 label *label99
+  841 print "const "
+  842 print :packCfg:name
+  843 print " "
+  844 print "= "
+  845 printchar 34
+  846 sensor *tmp0 :packCfg:type @id
+  847 op add *tmp1 35 *tmp0
+  848 printchar *tmp1
+  849 op add *tmp2 7 :packCfg:x
+  850 op floor *tmp3 *tmp2
+  851 op add *tmp4 35 *tmp3
+  852 printchar *tmp4
+  853 op add *tmp5 7 :packCfg:y
+  854 op floor *tmp6 *tmp5
+  855 op add *tmp7 35 *tmp6
+  856 printchar *tmp7
+  857 op add *tmp8 35 :packCfg:cu
+  858 printchar *tmp8
+  859 op add *tmp9 35 :packCfg:pb
+  860 printchar *tmp9
+  861 op add *tmp10 35 :packCfg:gr
+  862 printchar *tmp10
+  863 op add *tmp11 35 :packCfg:si
+  864 printchar *tmp11
+  865 op add *tmp12 35 :packCfg:ti
+  866 printchar *tmp12
+  867 op add *tmp13 35 :packCfg:mg
+  868 printchar *tmp13
+  869 op add *tmp14 35 :packCfg:th
+  870 printchar *tmp14
+  871 op add *tmp15 35 :packCfg:rotation
+  872 printchar *tmp15
+  873 op add *tmp16 35 :packCfg:size
+  874 printchar *tmp16
+  875 set *tmp17 .index
+  876 op add .index .index 1
+  877 op add *tmp18 35 *tmp17
+  878 printchar *tmp18
+  879 printchar 34
+  880 print ";"
+  881 print "\n"
+  882 label *label100
   883 set :packCfg:name "SOLAR_PANEL"
   884 set :packCfg:type @solar-panel
   885 set :packCfg:cu 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   794 sensor *tmp0 @overflow-gate @id
   795 op add *tmp1 35 *tmp0
   796 printchar *tmp1
-    * op add *tmp2 7 -4
-    * op floor *tmp3 3
-    * op add *tmp4 35 3
   797 printchar 38
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   798 printchar 42
-    * op add *tmp8 35 4
   799 printchar 39
-    * op add *tmp9 35 2
   800 printchar 37
-    * op add *tmp10 35 0
   801 printchar 35
-    * op add *tmp11 35 0
   802 printchar 35
-    * op add *tmp12 35 0
   803 printchar 35
-    * op add *tmp13 35 0
   804 printchar 35
-    * op add *tmp14 35 0
   805 printchar 35
-    * op add *tmp15 35 0
   806 printchar 35
-    * op add *tmp16 35 1
   807 printchar 36
   808 set *tmp17 .index
   809 op add .index .index 1
 
   824 set :packCfg:size 3
   825 label *label99
   826 print "const "
-    * print :packCfg:name
+  827 print "LASER_DRILL"
   828 print " "
   829 print "= "
   830 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  831 sensor *tmp0 @laser-drill @id
   832 op add *tmp1 35 *tmp0
   833 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  834 op add *tmp2 7 0
+  835 op floor *tmp3 7
+  836 op add *tmp4 35 7
+  837 printchar 42
+  838 op add *tmp5 7 0
+  839 op floor *tmp6 7
+  840 op add *tmp7 35 7
+  841 printchar 42
+  842 op add *tmp8 35 35
+  843 printchar 70
+  844 op add *tmp9 35 0
+  845 printchar 35
+  846 op add *tmp10 35 30
+  847 printchar 65
+  848 op add *tmp11 35 30
+  849 printchar 65
+  850 op add *tmp12 35 20
+  851 printchar 55
+  852 op add *tmp13 35 0
+  853 printchar 35
+  854 op add *tmp14 35 0
+  855 printchar 35
+  856 op add *tmp15 35 0
+  857 printchar 35
+  858 op add *tmp16 35 3
+  859 printchar 38
   860 set *tmp17 .index
   861 op add .index .index 1
   862 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   813 print ";"
   814 print "\n"
   815 label *label98
-    * set :packCfg:name "LASER_DRILL"
-    * set :packCfg:type @laser-drill
   816 set :packCfg:x 0
-    * set :packCfg:cu 35
-    * set :packCfg:pb 0
-    * set :packCfg:gr 30
-    * set :packCfg:si 30
-    * set :packCfg:ti 20
-    * set :packCfg:size 3
   817 label *label99
   818 print "const "
   819 print "LASER_DRILL"

Modifications by Inline function call at line 37:1 (+39 instructions):
 
   865 set :packCfg:si 8
   866 set :packCfg:ti 0
   867 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label31 (h:*label31)
-    * call *label0 *invalid :packCfg*retval (m:*label31) (h:*label31)
-    * label *label31
+  868 label *label101
+  869 print "const "
+  870 print :packCfg:name
+  871 print " "
+  872 print "= "
+  873 printchar 34
+  874 sensor *tmp0 :packCfg:type @id
+  875 op add *tmp1 35 *tmp0
+  876 printchar *tmp1
+  877 op add *tmp2 7 :packCfg:x
+  878 op floor *tmp3 *tmp2
+  879 op add *tmp4 35 *tmp3
+  880 printchar *tmp4
+  881 op add *tmp5 7 :packCfg:y
+  882 op floor *tmp6 *tmp5
+  883 op add *tmp7 35 *tmp6
+  884 printchar *tmp7
+  885 op add *tmp8 35 :packCfg:cu
+  886 printchar *tmp8
+  887 op add *tmp9 35 :packCfg:pb
+  888 printchar *tmp9
+  889 op add *tmp10 35 :packCfg:gr
+  890 printchar *tmp10
+  891 op add *tmp11 35 :packCfg:si
+  892 printchar *tmp11
+  893 op add *tmp12 35 :packCfg:ti
+  894 printchar *tmp12
+  895 op add *tmp13 35 :packCfg:mg
+  896 printchar *tmp13
+  897 op add *tmp14 35 :packCfg:th
+  898 printchar *tmp14
+  899 op add *tmp15 35 :packCfg:rotation
+  900 printchar *tmp15
+  901 op add *tmp16 35 :packCfg:size
+  902 printchar *tmp16
+  903 set *tmp17 .index
+  904 op add .index .index 1
+  905 op add *tmp18 35 *tmp17
+  906 printchar *tmp18
+  907 printchar 34
+  908 print ";"
+  909 print "\n"
+  910 label *label102
   911 set :packCfg:name "CONTAINER"
   912 set :packCfg:type @container
   913 set :packCfg:pb 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   823 sensor *tmp0 @laser-drill @id
   824 op add *tmp1 35 *tmp0
   825 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   826 printchar 42
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   827 printchar 42
-    * op add *tmp8 35 35
   828 printchar 70
-    * op add *tmp9 35 0
   829 printchar 35
-    * op add *tmp10 35 30
   830 printchar 65
-    * op add *tmp11 35 30
   831 printchar 65
-    * op add *tmp12 35 20
   832 printchar 55
-    * op add *tmp13 35 0
   833 printchar 35
-    * op add *tmp14 35 0
   834 printchar 35
-    * op add *tmp15 35 0
   835 printchar 35
-    * op add *tmp16 35 3
   836 printchar 38
   837 set *tmp17 .index
   838 op add .index .index 1
 
   852 set :packCfg:size 1
   853 label *label101
   854 print "const "
-    * print :packCfg:name
+  855 print "SOLAR_PANEL"
   856 print " "
   857 print "= "
   858 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  859 sensor *tmp0 @solar-panel @id
   860 op add *tmp1 35 *tmp0
   861 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  862 op add *tmp2 7 0
+  863 op floor *tmp3 7
+  864 op add *tmp4 35 7
+  865 printchar 42
+  866 op add *tmp5 7 0
+  867 op floor *tmp6 7
+  868 op add *tmp7 35 7
+  869 printchar 42
+  870 op add *tmp8 35 0
+  871 printchar 35
+  872 op add *tmp9 35 10
+  873 printchar 45
+  874 op add *tmp10 35 0
+  875 printchar 35
+  876 op add *tmp11 35 8
+  877 printchar 43
+  878 op add *tmp12 35 0
+  879 printchar 35
+  880 op add *tmp13 35 0
+  881 printchar 35
+  882 op add *tmp14 35 0
+  883 printchar 35
+  884 op add *tmp15 35 0
+  885 printchar 35
+  886 op add *tmp16 35 1
+  887 printchar 36
   888 set *tmp17 .index
   889 op add .index .index 1
   890 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   842 print ";"
   843 print "\n"
   844 label *label100
-    * set :packCfg:name "SOLAR_PANEL"
-    * set :packCfg:type @solar-panel
   845 set :packCfg:cu 0
-    * set :packCfg:pb 10
   846 set :packCfg:gr 0
-    * set :packCfg:si 8
-    * set :packCfg:ti 0
-    * set :packCfg:size 1
   847 label *label101
   848 print "const "
   849 print "SOLAR_PANEL"

Modifications by Inline function call at line 38:1 (+39 instructions):
 
   893 set :packCfg:si 0
   894 set :packCfg:ti 100
   895 set :packCfg:size 2
-    * setaddr :packCfg*retaddr *label32 (h:*label32)
-    * call *label0 *invalid :packCfg*retval (m:*label32) (h:*label32)
-    * label *label32
+  896 label *label103
+  897 print "const "
+  898 print :packCfg:name
+  899 print " "
+  900 print "= "
+  901 printchar 34
+  902 sensor *tmp0 :packCfg:type @id
+  903 op add *tmp1 35 *tmp0
+  904 printchar *tmp1
+  905 op add *tmp2 7 :packCfg:x
+  906 op floor *tmp3 *tmp2
+  907 op add *tmp4 35 *tmp3
+  908 printchar *tmp4
+  909 op add *tmp5 7 :packCfg:y
+  910 op floor *tmp6 *tmp5
+  911 op add *tmp7 35 *tmp6
+  912 printchar *tmp7
+  913 op add *tmp8 35 :packCfg:cu
+  914 printchar *tmp8
+  915 op add *tmp9 35 :packCfg:pb
+  916 printchar *tmp9
+  917 op add *tmp10 35 :packCfg:gr
+  918 printchar *tmp10
+  919 op add *tmp11 35 :packCfg:si
+  920 printchar *tmp11
+  921 op add *tmp12 35 :packCfg:ti
+  922 printchar *tmp12
+  923 op add *tmp13 35 :packCfg:mg
+  924 printchar *tmp13
+  925 op add *tmp14 35 :packCfg:th
+  926 printchar *tmp14
+  927 op add *tmp15 35 :packCfg:rotation
+  928 printchar *tmp15
+  929 op add *tmp16 35 :packCfg:size
+  930 printchar *tmp16
+  931 set *tmp17 .index
+  932 op add .index .index 1
+  933 op add *tmp18 35 *tmp17
+  934 printchar *tmp18
+  935 printchar 34
+  936 print ";"
+  937 print "\n"
+  938 label *label104
   939 set :packCfg:name "SMELTER2"
   940 set :packCfg:type @silicon-smelter
   941 set :packCfg:x 4.5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   853 sensor *tmp0 @solar-panel @id
   854 op add *tmp1 35 *tmp0
   855 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   856 printchar 42
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   857 printchar 42
-    * op add *tmp8 35 0
   858 printchar 35
-    * op add *tmp9 35 10
   859 printchar 45
-    * op add *tmp10 35 0
   860 printchar 35
-    * op add *tmp11 35 8
   861 printchar 43
-    * op add *tmp12 35 0
   862 printchar 35
-    * op add *tmp13 35 0
   863 printchar 35
-    * op add *tmp14 35 0
   864 printchar 35
-    * op add *tmp15 35 0
   865 printchar 35
-    * op add *tmp16 35 1
   866 printchar 36
   867 set *tmp17 .index
   868 op add .index .index 1
 
   880 set :packCfg:size 2
   881 label *label103
   882 print "const "
-    * print :packCfg:name
+  883 print "CONTAINER"
   884 print " "
   885 print "= "
   886 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  887 sensor *tmp0 @container @id
   888 op add *tmp1 35 *tmp0
   889 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  890 op add *tmp2 7 0
+  891 op floor *tmp3 7
+  892 op add *tmp4 35 7
+  893 printchar 42
+  894 op add *tmp5 7 0
+  895 op floor *tmp6 7
+  896 op add *tmp7 35 7
+  897 printchar 42
+  898 op add *tmp8 35 0
+  899 printchar 35
+  900 op add *tmp9 35 0
+  901 printchar 35
+  902 op add *tmp10 35 0
+  903 printchar 35
+  904 op add *tmp11 35 0
+  905 printchar 35
+  906 op add *tmp12 35 100
+  907 printchar 135
+  908 op add *tmp13 35 0
+  909 printchar 35
+  910 op add *tmp14 35 0
+  911 printchar 35
+  912 op add *tmp15 35 0
+  913 printchar 35
+  914 op add *tmp16 35 2
+  915 printchar 37
   916 set *tmp17 .index
   917 op add .index .index 1
   918 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   784 print ";"
   785 print "\n"
   786 label *label96
-    * set :packCfg:y 0
   787 label *label97
   788 print "const "
   789 print "OVERFLOW_GATE4"
 
   812 print ";"
   813 print "\n"
   814 label *label98
-    * set :packCfg:x 0
   815 label *label99
   816 print "const "
   817 print "LASER_DRILL"
 
   840 print ";"
   841 print "\n"
   842 label *label100
-    * set :packCfg:cu 0
   843 set :packCfg:gr 0
   844 label *label101
   845 print "const "
 
   869 print ";"
   870 print "\n"
   871 label *label102
-    * set :packCfg:name "CONTAINER"
-    * set :packCfg:type @container
-    * set :packCfg:pb 0
   872 set :packCfg:si 0
-    * set :packCfg:ti 100
   873 set :packCfg:size 2
   874 label *label103
   875 print "const "

Modifications by Inline function call at line 39:1 (+39 instructions):
 
   921 set :packCfg:cu 30
   922 set :packCfg:pb 25
   923 set :packCfg:ti 0
-    * setaddr :packCfg*retaddr *label33 (h:*label33)
-    * call *label0 *invalid :packCfg*retval (m:*label33) (h:*label33)
-    * label *label33
+  924 label *label105
+  925 print "const "
+  926 print :packCfg:name
+  927 print " "
+  928 print "= "
+  929 printchar 34
+  930 sensor *tmp0 :packCfg:type @id
+  931 op add *tmp1 35 *tmp0
+  932 printchar *tmp1
+  933 op add *tmp2 7 :packCfg:x
+  934 op floor *tmp3 *tmp2
+  935 op add *tmp4 35 *tmp3
+  936 printchar *tmp4
+  937 op add *tmp5 7 :packCfg:y
+  938 op floor *tmp6 *tmp5
+  939 op add *tmp7 35 *tmp6
+  940 printchar *tmp7
+  941 op add *tmp8 35 :packCfg:cu
+  942 printchar *tmp8
+  943 op add *tmp9 35 :packCfg:pb
+  944 printchar *tmp9
+  945 op add *tmp10 35 :packCfg:gr
+  946 printchar *tmp10
+  947 op add *tmp11 35 :packCfg:si
+  948 printchar *tmp11
+  949 op add *tmp12 35 :packCfg:ti
+  950 printchar *tmp12
+  951 op add *tmp13 35 :packCfg:mg
+  952 printchar *tmp13
+  953 op add *tmp14 35 :packCfg:th
+  954 printchar *tmp14
+  955 op add *tmp15 35 :packCfg:rotation
+  956 printchar *tmp15
+  957 op add *tmp16 35 :packCfg:size
+  958 printchar *tmp16
+  959 set *tmp17 .index
+  960 op add .index .index 1
+  961 op add *tmp18 35 *tmp17
+  962 printchar *tmp18
+  963 printchar 34
+  964 print ";"
+  965 print "\n"
+  966 label *label106
   967 set :packCfg:name "INVERTED_SORT4"
   968 set :packCfg:type @inverted-sorter
   969 set :packCfg:x 3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
   880 sensor *tmp0 @container @id
   881 op add *tmp1 35 *tmp0
   882 printchar *tmp1
-    * op add *tmp2 7 0
-    * op floor *tmp3 7
-    * op add *tmp4 35 7
   883 printchar 42
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   884 printchar 42
-    * op add *tmp8 35 0
   885 printchar 35
-    * op add *tmp9 35 0
   886 printchar 35
-    * op add *tmp10 35 0
   887 printchar 35
-    * op add *tmp11 35 0
   888 printchar 35
-    * op add *tmp12 35 100
   889 printchar 135
-    * op add *tmp13 35 0
   890 printchar 35
-    * op add *tmp14 35 0
   891 printchar 35
-    * op add *tmp15 35 0
   892 printchar 35
-    * op add *tmp16 35 2
   893 printchar 37
   894 set *tmp17 .index
   895 op add .index .index 1
 
   908 set :packCfg:ti 0
   909 label *label105
   910 print "const "
-    * print :packCfg:name
+  911 print "SMELTER2"
   912 print " "
   913 print "= "
   914 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  915 sensor *tmp0 @silicon-smelter @id
   916 op add *tmp1 35 *tmp0
   917 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  918 op add *tmp2 7 4.5
+  919 op floor *tmp3 11.5
+  920 op add *tmp4 35 11
+  921 printchar 46
+  922 op add *tmp5 7 -0.5
+  923 op floor *tmp6 6.5
+  924 op add *tmp7 35 6
+  925 printchar 41
+  926 op add *tmp8 35 30
+  927 printchar 65
+  928 op add *tmp9 35 25
+  929 printchar 60
+  930 op add *tmp10 35 0
+  931 printchar 35
+  932 op add *tmp11 35 0
+  933 printchar 35
+  934 op add *tmp12 35 0
+  935 printchar 35
+  936 op add *tmp13 35 0
+  937 printchar 35
+  938 op add *tmp14 35 0
+  939 printchar 35
+  940 op add *tmp15 35 0
+  941 printchar 35
+  942 op add *tmp16 35 2
+  943 printchar 37
   944 set *tmp17 .index
   945 op add .index .index 1
   946 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   870 print "\n"
   871 label *label102
   872 set :packCfg:si 0
-    * set :packCfg:size 2
   873 label *label103
   874 print "const "
   875 print "CONTAINER"
 
   898 print ";"
   899 print "\n"
   900 label *label104
-    * set :packCfg:name "SMELTER2"
-    * set :packCfg:type @silicon-smelter
-    * set :packCfg:x 4.5
-    * set :packCfg:y -0.5
-    * set :packCfg:cu 30
-    * set :packCfg:pb 25
   901 set :packCfg:ti 0
   902 label *label105
   903 print "const "

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
     4 print " "
     5 print "= "
     6 printchar 34
-    * sensor *tmp0 @graphite-press @id
+    7 set *tmp0 0
     8 op add *tmp1 35 *tmp0
     9 printchar *tmp1
    10 printchar 39
 
    32 print " "
    33 print "= "
    34 printchar 34
-    * sensor *tmp0 @battery @id
+   35 set *tmp0 72
    36 op add *tmp1 35 *tmp0
    37 printchar *tmp1
    38 printchar 42
 
    60 print " "
    61 print "= "
    62 printchar 34
-    * sensor *tmp0 @battery @id
+   63 set *tmp0 72
    64 op add *tmp1 35 *tmp0
    65 printchar *tmp1
    66 printchar 43
 
    88 print " "
    89 print "= "
    90 printchar 34
-    * sensor *tmp0 @combustion-generator @id
+   91 set *tmp0 74
    92 op add *tmp1 35 *tmp0
    93 printchar *tmp1
    94 printchar 42
 
   116 print " "
   117 print "= "
   118 printchar 34
-    * sensor *tmp0 @silicon-smelter @id
+  119 set *tmp0 2
   120 op add *tmp1 35 *tmp0
   121 printchar *tmp1
   122 printchar 43
 
   144 print " "
   145 print "= "
   146 printchar 34
-    * sensor *tmp0 @inverted-sorter @id
+  147 set *tmp0 49
   148 op add *tmp1 35 *tmp0
   149 printchar *tmp1
   150 printchar 43
 
   172 print " "
   173 print "= "
   174 printchar 34
-    * sensor *tmp0 @pneumatic-drill @id
+  175 set *tmp0 84
   176 op add *tmp1 35 *tmp0
   177 printchar *tmp1
   178 printchar 42
 
   200 print " "
   201 print "= "
   202 printchar 34
-    * sensor *tmp0 @unloader @id
+  203 set *tmp0 95
   204 op add *tmp1 35 *tmp0
   205 printchar *tmp1
   206 printchar 42
 
   228 print " "
   229 print "= "
   230 printchar 34
-    * sensor *tmp0 @inverted-sorter @id
+  231 set *tmp0 49
   232 op add *tmp1 35 *tmp0
   233 printchar *tmp1
   234 printchar 41
 
   256 print " "
   257 print "= "
   258 printchar 34
-    * sensor *tmp0 @overflow-gate @id
+  259 set *tmp0 52
   260 op add *tmp1 35 *tmp0
   261 printchar *tmp1
   262 printchar 42
 
   284 print " "
   285 print "= "
   286 printchar 34
-    * sensor *tmp0 @micro-processor @id
+  287 set *tmp0 139
   288 op add *tmp1 35 *tmp0
   289 printchar *tmp1
   290 printchar 45
 
   312 print " "
   313 print "= "
   314 printchar 34
-    * sensor *tmp0 @power-node @id
+  315 set *tmp0 68
   316 op add *tmp1 35 *tmp0
   317 printchar *tmp1
   318 printchar 41
 
   340 print " "
   341 print "= "
   342 printchar 34
-    * sensor *tmp0 @unloader @id
+  343 set *tmp0 95
   344 op add *tmp1 35 *tmp0
   345 printchar *tmp1
   346 printchar 40
 
   368 print " "
   369 print "= "
   370 printchar 34
-    * sensor *tmp0 @air-factory @id
+  371 set *tmp0 116
   372 op add *tmp1 35 *tmp0
   373 printchar *tmp1
   374 printchar 39
 
   397 print " "
   398 print "= "
   399 printchar 34
-    * sensor *tmp0 @unloader @id
+  400 set *tmp0 95
   401 op add *tmp1 35 *tmp0
   402 printchar *tmp1
   403 printchar 44
 
   425 print " "
   426 print "= "
   427 printchar 34
-    * sensor *tmp0 @inverted-sorter @id
+  428 set *tmp0 49
   429 op add *tmp1 35 *tmp0
   430 printchar *tmp1
   431 printchar 44
 
   453 print " "
   454 print "= "
   455 printchar 34
-    * sensor *tmp0 @kiln @id
+  456 set *tmp0 4
   457 op add *tmp1 35 *tmp0
   458 printchar *tmp1
   459 printchar 44
 
   481 print " "
   482 print "= "
   483 printchar 34
-    * sensor *tmp0 @water-extractor @id
+  484 set *tmp0 87
   485 op add *tmp1 35 *tmp0
   486 printchar *tmp1
   487 printchar 37
 
   509 print " "
   510 print "= "
   511 printchar 34
-    * sensor *tmp0 @overflow-gate @id
+  512 set *tmp0 52
   513 op add *tmp1 35 *tmp0
   514 printchar *tmp1
   515 printchar 39
 
   537 print " "
   538 print "= "
   539 printchar 34
-    * sensor *tmp0 @overflow-gate @id
+  540 set *tmp0 52
   541 op add *tmp1 35 *tmp0
   542 printchar *tmp1
   543 printchar 38
 
   565 print " "
   566 print "= "
   567 printchar 34
-    * sensor *tmp0 @steam-generator @id
+  568 set *tmp0 76
   569 op add *tmp1 35 *tmp0
   570 printchar *tmp1
   571 printchar 37
 
   593 print " "
   594 print "= "
   595 printchar 34
-    * sensor *tmp0 @multi-press @id
+  596 set *tmp0 1
   597 op add *tmp1 35 *tmp0
   598 printchar *tmp1
   599 printchar 40
 
   621 print " "
   622 print "= "
   623 printchar 34
-    * sensor *tmp0 @water-extractor @id
+  624 set *tmp0 87
   625 op add *tmp1 35 *tmp0
   626 printchar *tmp1
   627 printchar 37
 
   650 print " "
   651 print "= "
   652 printchar 34
-    * sensor *tmp0 @payload-router @id
+  653 set *tmp0 125
   654 op add *tmp1 35 *tmp0
   655 printchar *tmp1
   656 printchar 39
 
   678 print " "
   679 print "= "
   680 printchar 34
-    * sensor *tmp0 @unloader @id
+  681 set *tmp0 95
   682 op add *tmp1 35 *tmp0
   683 printchar *tmp1
   684 printchar 42
 
   706 print " "
   707 print "= "
   708 printchar 34
-    * sensor *tmp0 @underflow-gate @id
+  709 set *tmp0 53
   710 op add *tmp1 35 *tmp0
   711 printchar *tmp1
   712 printchar 42
 
   734 print " "
   735 print "= "
   736 printchar 34
-    * sensor *tmp0 @additive-reconstructor @id
+  737 set *tmp0 118
   738 op add *tmp1 35 *tmp0
   739 printchar *tmp1
   740 printchar 42
 
   762 print " "
   763 print "= "
   764 printchar 34
-    * sensor *tmp0 @battery-large @id
+  765 set *tmp0 73
   766 op add *tmp1 35 *tmp0
   767 printchar *tmp1
   768 printchar 47
 
   790 print " "
   791 print "= "
   792 printchar 34
-    * sensor *tmp0 @overflow-gate @id
+  793 set *tmp0 52
   794 op add *tmp1 35 *tmp0
   795 printchar *tmp1
   796 printchar 38
 
   818 print " "
   819 print "= "
   820 printchar 34
-    * sensor *tmp0 @laser-drill @id
+  821 set *tmp0 85
   822 op add *tmp1 35 *tmp0
   823 printchar *tmp1
   824 printchar 42
 
   847 print " "
   848 print "= "
   849 printchar 34
-    * sensor *tmp0 @solar-panel @id
+  850 set *tmp0 79
   851 op add *tmp1 35 *tmp0
   852 printchar *tmp1
   853 printchar 42
 
   876 print " "
   877 print "= "
   878 printchar 34
-    * sensor *tmp0 @container @id
+  879 set *tmp0 94
   880 op add *tmp1 35 *tmp0
   881 printchar *tmp1
   882 printchar 42
 
   905 print " "
   906 print "= "
   907 printchar 34
-    * sensor *tmp0 @silicon-smelter @id
+  908 set *tmp0 2
   909 op add *tmp1 35 *tmp0
   910 printchar *tmp1
   911 op add *tmp2 7 4.5

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     5 print "= "
     6 printchar 34
     7 set *tmp0 0
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+    8 op add *tmp1 35 0
+    9 printchar 35
    10 printchar 39
    11 printchar 43
    12 printchar 110
 
    33 print "= "
    34 printchar 34
    35 set *tmp0 72
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+   36 op add *tmp1 35 72
+   37 printchar 107
    38 printchar 42
    39 printchar 47
    40 printchar 40
 
    61 print "= "
    62 printchar 34
    63 set *tmp0 72
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+   64 op add *tmp1 35 72
+   65 printchar 107
    66 printchar 43
    67 printchar 47
    68 printchar 40
 
    89 print "= "
    90 printchar 34
    91 set *tmp0 74
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+   92 op add *tmp1 35 74
+   93 printchar 109
    94 printchar 42
    95 printchar 46
    96 printchar 60
 
   117 print "= "
   118 printchar 34
   119 set *tmp0 2
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  120 op add *tmp1 35 2
+  121 printchar 37
   122 printchar 43
   123 printchar 45
   124 printchar 65
 
   145 print "= "
   146 printchar 34
   147 set *tmp0 49
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  148 op add *tmp1 35 49
+  149 printchar 84
   150 printchar 43
   151 printchar 44
   152 printchar 37
 
   173 print "= "
   174 printchar 34
   175 set *tmp0 84
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  176 op add *tmp1 35 84
+  177 printchar 119
   178 printchar 42
   179 printchar 42
   180 printchar 53
 
   201 print "= "
   202 printchar 34
   203 set *tmp0 95
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  204 op add *tmp1 35 95
+  205 printchar 130
   206 printchar 42
   207 printchar 44
   208 printchar 35
 
   229 print "= "
   230 printchar 34
   231 set *tmp0 49
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  232 op add *tmp1 35 49
+  233 printchar 84
   234 printchar 41
   235 printchar 44
   236 printchar 37
 
   257 print "= "
   258 printchar 34
   259 set *tmp0 52
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  260 op add *tmp1 35 52
+  261 printchar 87
   262 printchar 42
   263 printchar 45
   264 printchar 39
 
   285 print "= "
   286 printchar 34
   287 set *tmp0 139
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  288 op add *tmp1 35 139
+  289 printchar 174
   290 printchar 45
   291 printchar 46
   292 printchar 125
 
   313 print "= "
   314 printchar 34
   315 set *tmp0 68
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  316 op add *tmp1 35 68
+  317 printchar 103
   318 printchar 41
   319 printchar 39
   320 printchar 37
 
   341 print "= "
   342 printchar 34
   343 set *tmp0 95
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  344 op add *tmp1 35 95
+  345 printchar 130
   346 printchar 40
   347 printchar 42
   348 printchar 35
 
   369 print "= "
   370 printchar 34
   371 set *tmp0 116
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  372 op add *tmp1 35 116
+  373 printchar 151
   374 printchar 39
   375 printchar 40
   376 printchar 95
 
   398 print "= "
   399 printchar 34
   400 set *tmp0 95
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  401 op add *tmp1 35 95
+  402 printchar 130
   403 printchar 44
   404 printchar 41
   405 printchar 35
 
   426 print "= "
   427 printchar 34
   428 set *tmp0 49
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  429 op add *tmp1 35 49
+  430 printchar 84
   431 printchar 44
   432 printchar 42
   433 printchar 37
 
   454 print "= "
   455 printchar 34
   456 set *tmp0 4
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  457 op add *tmp1 35 4
+  458 printchar 39
   459 printchar 44
   460 printchar 43
   461 printchar 95
 
   482 print "= "
   483 printchar 34
   484 set *tmp0 87
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  485 op add *tmp1 35 87
+  486 printchar 122
   487 printchar 37
   488 printchar 45
   489 printchar 65
 
   510 print "= "
   511 printchar 34
   512 set *tmp0 52
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  513 op add *tmp1 35 52
+  514 printchar 87
   515 printchar 39
   516 printchar 42
   517 printchar 39
 
   538 print "= "
   539 printchar 34
   540 set *tmp0 52
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  541 op add *tmp1 35 52
+  542 printchar 87
   543 printchar 38
   544 printchar 42
   545 printchar 39
 
   566 print "= "
   567 printchar 34
   568 set *tmp0 76
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  569 op add *tmp1 35 76
+  570 printchar 111
   571 printchar 37
   572 printchar 43
   573 printchar 70
 
   594 print "= "
   595 printchar 34
   596 set *tmp0 1
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  597 op add *tmp1 35 1
+  598 printchar 36
   599 printchar 40
   600 printchar 46
   601 printchar 35
 
   622 print "= "
   623 printchar 34
   624 set *tmp0 87
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  625 op add *tmp1 35 87
+  626 printchar 122
   627 printchar 37
   628 printchar 47
   629 printchar 65
 
   651 print "= "
   652 printchar 34
   653 set *tmp0 125
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  654 op add *tmp1 35 125
+  655 printchar 160
   656 printchar 39
   657 printchar 37
   658 printchar 45
 
   679 print "= "
   680 printchar 34
   681 set *tmp0 95
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  682 op add *tmp1 35 95
+  683 printchar 130
   684 printchar 42
   685 printchar 40
   686 printchar 35
 
   707 print "= "
   708 printchar 34
   709 set *tmp0 53
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  710 op add *tmp1 35 53
+  711 printchar 88
   712 printchar 42
   713 printchar 39
   714 printchar 39
 
   735 print "= "
   736 printchar 34
   737 set *tmp0 118
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  738 op add *tmp1 35 118
+  739 printchar 153
   740 printchar 42
   741 printchar 37
   742 printchar 235
 
   763 print "= "
   764 printchar 34
   765 set *tmp0 73
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  766 op add *tmp1 35 73
+  767 printchar 108
   768 printchar 47
   769 printchar 44
   770 printchar 35
 
   791 print "= "
   792 printchar 34
   793 set *tmp0 52
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  794 op add *tmp1 35 52
+  795 printchar 87
   796 printchar 38
   797 printchar 42
   798 printchar 39
 
   819 print "= "
   820 printchar 34
   821 set *tmp0 85
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  822 op add *tmp1 35 85
+  823 printchar 120
   824 printchar 42
   825 printchar 42
   826 printchar 70
 
   848 print "= "
   849 printchar 34
   850 set *tmp0 79
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  851 op add *tmp1 35 79
+  852 printchar 114
   853 printchar 42
   854 printchar 42
   855 printchar 35
 
   877 print "= "
   878 printchar 34
   879 set *tmp0 94
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  880 op add *tmp1 35 94
+  881 printchar 129
   882 printchar 42
   883 printchar 42
   884 printchar 35
 
   906 print "= "
   907 printchar 34
   908 set *tmp0 2
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  909 op add *tmp1 35 2
+  910 printchar 37
   911 op add *tmp2 7 4.5
   912 op floor *tmp3 11.5
   913 op add *tmp4 35 11

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-64 instructions):
 
     4 print " "
     5 print "= "
     6 printchar 34
-    * set *tmp0 0
-    * op add *tmp1 35 0
     7 printchar 35
     8 printchar 39
     9 printchar 43
 
    30 print " "
    31 print "= "
    32 printchar 34
-    * set *tmp0 72
-    * op add *tmp1 35 72
    33 printchar 107
    34 printchar 42
    35 printchar 47
 
    56 print " "
    57 print "= "
    58 printchar 34
-    * set *tmp0 72
-    * op add *tmp1 35 72
    59 printchar 107
    60 printchar 43
    61 printchar 47
 
    82 print " "
    83 print "= "
    84 printchar 34
-    * set *tmp0 74
-    * op add *tmp1 35 74
    85 printchar 109
    86 printchar 42
    87 printchar 46
 
   108 print " "
   109 print "= "
   110 printchar 34
-    * set *tmp0 2
-    * op add *tmp1 35 2
   111 printchar 37
   112 printchar 43
   113 printchar 45
 
   134 print " "
   135 print "= "
   136 printchar 34
-    * set *tmp0 49
-    * op add *tmp1 35 49
   137 printchar 84
   138 printchar 43
   139 printchar 44
 
   160 print " "
   161 print "= "
   162 printchar 34
-    * set *tmp0 84
-    * op add *tmp1 35 84
   163 printchar 119
   164 printchar 42
   165 printchar 42
 
   186 print " "
   187 print "= "
   188 printchar 34
-    * set *tmp0 95
-    * op add *tmp1 35 95
   189 printchar 130
   190 printchar 42
   191 printchar 44
 
   212 print " "
   213 print "= "
   214 printchar 34
-    * set *tmp0 49
-    * op add *tmp1 35 49
   215 printchar 84
   216 printchar 41
   217 printchar 44
 
   238 print " "
   239 print "= "
   240 printchar 34
-    * set *tmp0 52
-    * op add *tmp1 35 52
   241 printchar 87
   242 printchar 42
   243 printchar 45
 
   264 print " "
   265 print "= "
   266 printchar 34
-    * set *tmp0 139
-    * op add *tmp1 35 139
   267 printchar 174
   268 printchar 45
   269 printchar 46
 
   290 print " "
   291 print "= "
   292 printchar 34
-    * set *tmp0 68
-    * op add *tmp1 35 68
   293 printchar 103
   294 printchar 41
   295 printchar 39
 
   316 print " "
   317 print "= "
   318 printchar 34
-    * set *tmp0 95
-    * op add *tmp1 35 95
   319 printchar 130
   320 printchar 40
   321 printchar 42
 
   342 print " "
   343 print "= "
   344 printchar 34
-    * set *tmp0 116
-    * op add *tmp1 35 116
   345 printchar 151
   346 printchar 39
   347 printchar 40
 
   369 print " "
   370 print "= "
   371 printchar 34
-    * set *tmp0 95
-    * op add *tmp1 35 95
   372 printchar 130
   373 printchar 44
   374 printchar 41
 
   395 print " "
   396 print "= "
   397 printchar 34
-    * set *tmp0 49
-    * op add *tmp1 35 49
   398 printchar 84
   399 printchar 44
   400 printchar 42
 
   421 print " "
   422 print "= "
   423 printchar 34
-    * set *tmp0 4
-    * op add *tmp1 35 4
   424 printchar 39
   425 printchar 44
   426 printchar 43
 
   447 print " "
   448 print "= "
   449 printchar 34
-    * set *tmp0 87
-    * op add *tmp1 35 87
   450 printchar 122
   451 printchar 37
   452 printchar 45
 
   473 print " "
   474 print "= "
   475 printchar 34
-    * set *tmp0 52
-    * op add *tmp1 35 52
   476 printchar 87
   477 printchar 39
   478 printchar 42
 
   499 print " "
   500 print "= "
   501 printchar 34
-    * set *tmp0 52
-    * op add *tmp1 35 52
   502 printchar 87
   503 printchar 38
   504 printchar 42
 
   525 print " "
   526 print "= "
   527 printchar 34
-    * set *tmp0 76
-    * op add *tmp1 35 76
   528 printchar 111
   529 printchar 37
   530 printchar 43
 
   551 print " "
   552 print "= "
   553 printchar 34
-    * set *tmp0 1
-    * op add *tmp1 35 1
   554 printchar 36
   555 printchar 40
   556 printchar 46
 
   577 print " "
   578 print "= "
   579 printchar 34
-    * set *tmp0 87
-    * op add *tmp1 35 87
   580 printchar 122
   581 printchar 37
   582 printchar 47
 
   604 print " "
   605 print "= "
   606 printchar 34
-    * set *tmp0 125
-    * op add *tmp1 35 125
   607 printchar 160
   608 printchar 39
   609 printchar 37
 
   630 print " "
   631 print "= "
   632 printchar 34
-    * set *tmp0 95
-    * op add *tmp1 35 95
   633 printchar 130
   634 printchar 42
   635 printchar 40
 
   656 print " "
   657 print "= "
   658 printchar 34
-    * set *tmp0 53
-    * op add *tmp1 35 53
   659 printchar 88
   660 printchar 42
   661 printchar 39
 
   682 print " "
   683 print "= "
   684 printchar 34
-    * set *tmp0 118
-    * op add *tmp1 35 118
   685 printchar 153
   686 printchar 42
   687 printchar 37
 
   708 print " "
   709 print "= "
   710 printchar 34
-    * set *tmp0 73
-    * op add *tmp1 35 73
   711 printchar 108
   712 printchar 47
   713 printchar 44
 
   734 print " "
   735 print "= "
   736 printchar 34
-    * set *tmp0 52
-    * op add *tmp1 35 52
   737 printchar 87
   738 printchar 38
   739 printchar 42
 
   760 print " "
   761 print "= "
   762 printchar 34
-    * set *tmp0 85
-    * op add *tmp1 35 85
   763 printchar 120
   764 printchar 42
   765 printchar 42
 
   787 print " "
   788 print "= "
   789 printchar 34
-    * set *tmp0 79
-    * op add *tmp1 35 79
   790 printchar 114
   791 printchar 42
   792 printchar 42
 
   814 print " "
   815 print "= "
   816 printchar 34
-    * set *tmp0 94
-    * op add *tmp1 35 94
   817 printchar 129
   818 printchar 42
   819 printchar 42

Modifications by Inline function call at line 40:1 (+39 instructions):
 
   885 set :packCfg:cu 2
   886 set :packCfg:pb 2
   887 set :packCfg:size 1
-    * setaddr :packCfg*retaddr *label34 (h:*label34)
-    * call *label0 *invalid :packCfg*retval (m:*label34) (h:*label34)
-    * label *label34
+  888 label *label107
+  889 print "const "
+  890 print :packCfg:name
+  891 print " "
+  892 print "= "
+  893 printchar 34
+  894 sensor *tmp0 :packCfg:type @id
+  895 op add *tmp1 35 *tmp0
+  896 printchar *tmp1
+  897 op add *tmp2 7 :packCfg:x
+  898 op floor *tmp3 *tmp2
+  899 op add *tmp4 35 *tmp3
+  900 printchar *tmp4
+  901 op add *tmp5 7 :packCfg:y
+  902 op floor *tmp6 *tmp5
+  903 op add *tmp7 35 *tmp6
+  904 printchar *tmp7
+  905 op add *tmp8 35 :packCfg:cu
+  906 printchar *tmp8
+  907 op add *tmp9 35 :packCfg:pb
+  908 printchar *tmp9
+  909 op add *tmp10 35 :packCfg:gr
+  910 printchar *tmp10
+  911 op add *tmp11 35 :packCfg:si
+  912 printchar *tmp11
+  913 op add *tmp12 35 :packCfg:ti
+  914 printchar *tmp12
+  915 op add *tmp13 35 :packCfg:mg
+  916 printchar *tmp13
+  917 op add *tmp14 35 :packCfg:th
+  918 printchar *tmp14
+  919 op add *tmp15 35 :packCfg:rotation
+  920 printchar *tmp15
+  921 op add *tmp16 35 :packCfg:size
+  922 printchar *tmp16
+  923 set *tmp17 .index
+  924 op add .index .index 1
+  925 op add *tmp18 35 *tmp17
+  926 printchar *tmp18
+  927 printchar 34
+  928 print ";"
+  929 print "\n"
+  930 label *label108
   931 set :packCfg:name "INVERTED_SORT5"
   932 set :packCfg:y -1
   933 setaddr :packCfg*retaddr *label35 (h:*label35)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-17 instructions):
 
   841 print " "
   842 print "= "
   843 printchar 34
-    * set *tmp0 2
-    * op add *tmp1 35 2
   844 printchar 37
-    * op add *tmp2 7 4.5
-    * op floor *tmp3 11.5
-    * op add *tmp4 35 11
   845 printchar 46
-    * op add *tmp5 7 -0.5
-    * op floor *tmp6 6.5
-    * op add *tmp7 35 6
   846 printchar 41
-    * op add *tmp8 35 30
   847 printchar 65
-    * op add *tmp9 35 25
   848 printchar 60
-    * op add *tmp10 35 0
   849 printchar 35
-    * op add *tmp11 35 0
   850 printchar 35
-    * op add *tmp12 35 0
   851 printchar 35
-    * op add *tmp13 35 0
   852 printchar 35
-    * op add *tmp14 35 0
   853 printchar 35
-    * op add *tmp15 35 0
   854 printchar 35
-    * op add *tmp16 35 2
   855 printchar 37
   856 set *tmp17 .index
   857 op add .index .index 1
 
   870 set :packCfg:size 1
   871 label *label107
   872 print "const "
-    * print :packCfg:name
+  873 print "INVERTED_SORT4"
   874 print " "
   875 print "= "
   876 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  877 sensor *tmp0 @inverted-sorter @id
   878 op add *tmp1 35 *tmp0
   879 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  880 op add *tmp2 7 3
+  881 op floor *tmp3 10
+  882 op add *tmp4 35 10
+  883 printchar 45
+  884 op add *tmp5 7 0
+  885 op floor *tmp6 7
+  886 op add *tmp7 35 7
+  887 printchar 42
+  888 op add *tmp8 35 2
+  889 printchar 37
+  890 op add *tmp9 35 2
+  891 printchar 37
+  892 op add *tmp10 35 0
+  893 printchar 35
+  894 op add *tmp11 35 0
+  895 printchar 35
+  896 op add *tmp12 35 0
+  897 printchar 35
+  898 op add *tmp13 35 0
+  899 printchar 35
+  900 op add *tmp14 35 0
+  901 printchar 35
+  902 op add *tmp15 35 0
+  903 printchar 35
+  904 op add *tmp16 35 1
+  905 printchar 36
   906 set *tmp17 .index
   907 op add .index .index 1
   908 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-2 instructions):
 
   861 print ";"
   862 print "\n"
   863 label *label106
-    * set :packCfg:name "INVERTED_SORT4"
   864 set :packCfg:type @inverted-sorter
   865 set :packCfg:x 3
-    * set :packCfg:y 0
   866 set :packCfg:cu 2
   867 set :packCfg:pb 2
   868 set :packCfg:size 1

Modifications by Inline function call at line 41:1 (+39 instructions):
 
   911 label *label108
   912 set :packCfg:name "INVERTED_SORT5"
   913 set :packCfg:y -1
-    * setaddr :packCfg*retaddr *label35 (h:*label35)
-    * call *label0 *invalid :packCfg*retval (m:*label35) (h:*label35)
-    * label *label35
+  914 label *label109
+  915 print "const "
+  916 print :packCfg:name
+  917 print " "
+  918 print "= "
+  919 printchar 34
+  920 sensor *tmp0 :packCfg:type @id
+  921 op add *tmp1 35 *tmp0
+  922 printchar *tmp1
+  923 op add *tmp2 7 :packCfg:x
+  924 op floor *tmp3 *tmp2
+  925 op add *tmp4 35 *tmp3
+  926 printchar *tmp4
+  927 op add *tmp5 7 :packCfg:y
+  928 op floor *tmp6 *tmp5
+  929 op add *tmp7 35 *tmp6
+  930 printchar *tmp7
+  931 op add *tmp8 35 :packCfg:cu
+  932 printchar *tmp8
+  933 op add *tmp9 35 :packCfg:pb
+  934 printchar *tmp9
+  935 op add *tmp10 35 :packCfg:gr
+  936 printchar *tmp10
+  937 op add *tmp11 35 :packCfg:si
+  938 printchar *tmp11
+  939 op add *tmp12 35 :packCfg:ti
+  940 printchar *tmp12
+  941 op add *tmp13 35 :packCfg:mg
+  942 printchar *tmp13
+  943 op add *tmp14 35 :packCfg:th
+  944 printchar *tmp14
+  945 op add *tmp15 35 :packCfg:rotation
+  946 printchar *tmp15
+  947 op add *tmp16 35 :packCfg:size
+  948 printchar *tmp16
+  949 set *tmp17 .index
+  950 op add .index .index 1
+  951 op add *tmp18 35 *tmp17
+  952 printchar *tmp18
+  953 printchar 34
+  954 print ";"
+  955 print "\n"
+  956 label *label110
   957 set :packCfg:name "UNLOADER5"
   958 set :packCfg:type @unloader
   959 set :packCfg:y 3

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-15 instructions):
 
   875 sensor *tmp0 @inverted-sorter @id
   876 op add *tmp1 35 *tmp0
   877 printchar *tmp1
-    * op add *tmp2 7 3
-    * op floor *tmp3 10
-    * op add *tmp4 35 10
   878 printchar 45
-    * op add *tmp5 7 0
-    * op floor *tmp6 7
-    * op add *tmp7 35 7
   879 printchar 42
-    * op add *tmp8 35 2
   880 printchar 37
-    * op add *tmp9 35 2
   881 printchar 37
-    * op add *tmp10 35 0
   882 printchar 35
-    * op add *tmp11 35 0
   883 printchar 35
-    * op add *tmp12 35 0
   884 printchar 35
-    * op add *tmp13 35 0
   885 printchar 35
-    * op add *tmp14 35 0
   886 printchar 35
-    * op add *tmp15 35 0
   887 printchar 35
-    * op add *tmp16 35 1
   888 printchar 36
   889 set *tmp17 .index
   890 op add .index .index 1
 
   898 set :packCfg:y -1
   899 label *label109
   900 print "const "
-    * print :packCfg:name
+  901 print "INVERTED_SORT5"
   902 print " "
   903 print "= "
   904 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  905 sensor *tmp0 @inverted-sorter @id
   906 op add *tmp1 35 *tmp0
   907 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  908 op add *tmp2 7 3
+  909 op floor *tmp3 10
+  910 op add *tmp4 35 10
+  911 printchar 45
+  912 op add *tmp5 7 -1
+  913 op floor *tmp6 6
+  914 op add *tmp7 35 6
+  915 printchar 41
+  916 op add *tmp8 35 2
+  917 printchar 37
+  918 op add *tmp9 35 2
+  919 printchar 37
+  920 op add *tmp10 35 0
+  921 printchar 35
+  922 op add *tmp11 35 0
+  923 printchar 35
+  924 op add *tmp12 35 0
+  925 printchar 35
+  926 op add *tmp13 35 0
+  927 printchar 35
+  928 op add *tmp14 35 0
+  929 printchar 35
+  930 op add *tmp15 35 0
+  931 printchar 35
+  932 op add *tmp16 35 1
+  933 printchar 36
   934 set *tmp17 .index
   935 op add .index .index 1
   936 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-7 instructions):
 
   807 print ";"
   808 print "\n"
   809 label *label102
-    * set :packCfg:si 0
   810 label *label103
   811 print "const "
   812 print "CONTAINER"
 
   833 print ";"
   834 print "\n"
   835 label *label104
-    * set :packCfg:ti 0
   836 label *label105
   837 print "const "
   838 print "SMELTER2"
 
   859 print ";"
   860 print "\n"
   861 label *label106
-    * set :packCfg:type @inverted-sorter
   862 set :packCfg:x 3
-    * set :packCfg:cu 2
-    * set :packCfg:pb 2
   863 set :packCfg:size 1
   864 label *label107
   865 print "const "
 
   889 print ";"
   890 print "\n"
   891 label *label108
-    * set :packCfg:name "INVERTED_SORT5"
-    * set :packCfg:y -1
   892 label *label109
   893 print "const "
   894 print "INVERTED_SORT5"

Modifications by Inline function call at line 42:1 (+39 instructions):
 
   939 set :packCfg:pb 0
   940 set :packCfg:si 30
   941 set :packCfg:ti 25
-    * setaddr :packCfg*retaddr *label36 (h:*label36)
-    * call *label0 *invalid :packCfg*retval (m:*label36) (h:*label36)
-    * label *label36
+  942 label *label111
+  943 print "const "
+  944 print :packCfg:name
+  945 print " "
+  946 print "= "
+  947 printchar 34
+  948 sensor *tmp0 :packCfg:type @id
+  949 op add *tmp1 35 *tmp0
+  950 printchar *tmp1
+  951 op add *tmp2 7 :packCfg:x
+  952 op floor *tmp3 *tmp2
+  953 op add *tmp4 35 *tmp3
+  954 printchar *tmp4
+  955 op add *tmp5 7 :packCfg:y
+  956 op floor *tmp6 *tmp5
+  957 op add *tmp7 35 *tmp6
+  958 printchar *tmp7
+  959 op add *tmp8 35 :packCfg:cu
+  960 printchar *tmp8
+  961 op add *tmp9 35 :packCfg:pb
+  962 printchar *tmp9
+  963 op add *tmp10 35 :packCfg:gr
+  964 printchar *tmp10
+  965 op add *tmp11 35 :packCfg:si
+  966 printchar *tmp11
+  967 op add *tmp12 35 :packCfg:ti
+  968 printchar *tmp12
+  969 op add *tmp13 35 :packCfg:mg
+  970 printchar *tmp13
+  971 op add *tmp14 35 :packCfg:th
+  972 printchar *tmp14
+  973 op add *tmp15 35 :packCfg:rotation
+  974 printchar *tmp15
+  975 op add *tmp16 35 :packCfg:size
+  976 printchar *tmp16
+  977 set *tmp17 .index
+  978 op add .index .index 1
+  979 op add *tmp18 35 *tmp17
+  980 printchar *tmp18
+  981 printchar 34
+  982 print ";"
+  983 print "\n"
+  984 label *label112
   985 set :packCfg:name "UNLOADER6"
   986 set :packCfg:x 1
   987 set :packCfg:y -2

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-15 instructions):
 
   898 sensor *tmp0 @inverted-sorter @id
   899 op add *tmp1 35 *tmp0
   900 printchar *tmp1
-    * op add *tmp2 7 3
-    * op floor *tmp3 10
-    * op add *tmp4 35 10
   901 printchar 45
-    * op add *tmp5 7 -1
-    * op floor *tmp6 6
-    * op add *tmp7 35 6
   902 printchar 41
-    * op add *tmp8 35 2
   903 printchar 37
-    * op add *tmp9 35 2
   904 printchar 37
-    * op add *tmp10 35 0
   905 printchar 35
-    * op add *tmp11 35 0
   906 printchar 35
-    * op add *tmp12 35 0
   907 printchar 35
-    * op add *tmp13 35 0
   908 printchar 35
-    * op add *tmp14 35 0
   909 printchar 35
-    * op add *tmp15 35 0
   910 printchar 35
-    * op add *tmp16 35 1
   911 printchar 36
   912 set *tmp17 .index
   913 op add .index .index 1
 
   926 set :packCfg:ti 25
   927 label *label111
   928 print "const "
-    * print :packCfg:name
+  929 print "UNLOADER5"
   930 print " "
   931 print "= "
   932 printchar 34
-    * sensor *tmp0 :packCfg:type @id
+  933 sensor *tmp0 @unloader @id
   934 op add *tmp1 35 *tmp0
   935 printchar *tmp1
-    * op add *tmp2 7 :packCfg:x
-    * op floor *tmp3 *tmp2
-    * op add *tmp4 35 *tmp3
-    * printchar *tmp4
-    * op add *tmp5 7 :packCfg:y
-    * op floor *tmp6 *tmp5
-    * op add *tmp7 35 *tmp6
-    * printchar *tmp7
-    * op add *tmp8 35 :packCfg:cu
-    * printchar *tmp8
-    * op add *tmp9 35 :packCfg:pb
-    * printchar *tmp9
-    * op add *tmp10 35 :packCfg:gr
-    * printchar *tmp10
-    * op add *tmp11 35 :packCfg:si
-    * printchar *tmp11
-    * op add *tmp12 35 :packCfg:ti
-    * printchar *tmp12
-    * op add *tmp13 35 :packCfg:mg
-    * printchar *tmp13
-    * op add *tmp14 35 :packCfg:th
-    * printchar *tmp14
-    * op add *tmp15 35 :packCfg:rotation
-    * printchar *tmp15
-    * op add *tmp16 35 :packCfg:size
-    * printchar *tmp16
+  936 op add *tmp2 7 3
+  937 op floor *tmp3 10
+  938 op add *tmp4 35 10
+  939 printchar 45
+  940 op add *tmp5 7 3
+  941 op floor *tmp6 10
+  942 op add *tmp7 35 10
+  943 printchar 45
+  944 op add *tmp8 35 0
+  945 printchar 35
+  946 op add *tmp9 35 0
+  947 printchar 35
+  948 op add *tmp10 35 0
+  949 printchar 35
+  950 op add *tmp11 35 30
+  951 printchar 65
+  952 op add *tmp12 35 25
+  953 printchar 60
+  954 op add *tmp13 35 0
+  955 printchar 35
+  956 op add *tmp14 35 0
+  957 printchar 35
+  958 op add *tmp15 35 0
+  959 printchar 35
+  960 op add *tmp16 35 1
+  961 printchar 36
   962 set *tmp17 .index
   963 op add .index .index 1
   964 op add *tmp18 35 *tmp17

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-3 instructions):
 
   859 print ";"
   860 print "\n"
   861 label *label106
-    * set :packCfg:x 3
   862 set :packCfg:size 1
   863 label *label107
   864 print "const "
 
   916 print ";"
   917 print "\n"
   918 label *label110
-    * set :packCfg:name "UNLOADER5"
   919 set :packCfg:type @unloader
-    * set :packCfg:y 3
   920 set :packCfg:cu 0
   921 set :packCfg:pb 0
   922 set :packCfg:si 30

Modifications by Iterated phase, Expression Optimization, pass 3, iteration 1:
 
   866 print " "
   867 print "= "
   868 printchar 34
-    * sensor *tmp0 @inverted-sorter @id
+  869 set *tmp0 49
   870 op add *tmp1 35 *tmp0
   871 printchar *tmp1
   872 printchar 45
 
   894 print " "
   895 print "= "
   896 printchar 34
-    * sensor *tmp0 @inverted-sorter @id
+  897 set *tmp0 49
   898 op add *tmp1 35 *tmp0
   899 printchar *tmp1
   900 printchar 45
 
   927 print " "
   928 print "= "
   929 printchar 34
-    * sensor *tmp0 @unloader @id
+  930 set *tmp0 95
   931 op add *tmp1 35 *tmp0
   932 printchar *tmp1
   933 op add *tmp2 7 3

Modifications by Iterated phase, Data Flow Optimization, pass 3, iteration 1:
 
   867 print "= "
   868 printchar 34
   869 set *tmp0 49
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  870 op add *tmp1 35 49
+  871 printchar 84
   872 printchar 45
   873 printchar 42
   874 printchar 37
 
   895 print "= "
   896 printchar 34
   897 set *tmp0 49
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  898 op add *tmp1 35 49
+  899 printchar 84
   900 printchar 45
   901 printchar 41
   902 printchar 37
 
   928 print "= "
   929 printchar 34
   930 set *tmp0 95
-    * op add *tmp1 35 *tmp0
-    * printchar *tmp1
+  931 op add *tmp1 35 95
+  932 printchar 130
   933 op add *tmp2 7 3
   934 op floor *tmp3 10
   935 op add *tmp4 35 10

Modifications by Iterated phase, Data Flow Optimization, pass 3, iteration 2 (-4 instructions):
 
   866 print " "
   867 print "= "
   868 printchar 34
-    * set *tmp0 49
-    * op add *tmp1 35 49
   869 printchar 84
   870 printchar 45
   871 printchar 42
 
   892 print " "
   893 print "= "
   894 printchar 34
-    * set *tmp0 49
-    * op add *tmp1 35 49
   895 printchar 84
   896 printchar 45
   897 printchar 41

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set :packCfg:th 0
-    * label *label41
     1 print "const "
     2 print "PRESS"
     3 print " "
 
    22 printchar 34
    23 print ";"
    24 print "\n"
-    * label *label42
-    * label *label43
    25 print "const "
    26 print "BATTERY1"
    27 print " "
 
    46 printchar 34
    47 print ";"
    48 print "\n"
-    * label *label44
-    * label *label45
    49 print "const "
    50 print "BATTERY2"
    51 print " "
 
    70 printchar 34
    71 print ";"
    72 print "\n"
-    * label *label46
-    * label *label47
    73 print "const "
    74 print "GENERATOR"
    75 print " "
 
    94 printchar 34
    95 print ";"
    96 print "\n"
-    * label *label48
-    * label *label49
    97 print "const "
    98 print "SMELTER"
    99 print " "
 
   118 printchar 34
   119 print ";"
   120 print "\n"
-    * label *label50
-    * label *label51
   121 print "const "
   122 print "INVERTED_SORT1"
   123 print " "
 
   142 printchar 34
   143 print ";"
   144 print "\n"
-    * label *label52
-    * label *label53
   145 print "const "
   146 print "PNEUMATIC_DRILL"
   147 print " "
 
   166 printchar 34
   167 print ";"
   168 print "\n"
-    * label *label54
-    * label *label55
   169 print "const "
   170 print "UNLOADER1"
   171 print " "
 
   190 printchar 34
   191 print ";"
   192 print "\n"
-    * label *label56
-    * label *label57
   193 print "const "
   194 print "INVERTED_SORT2"
   195 print " "
 
   214 printchar 34
   215 print ";"
   216 print "\n"
-    * label *label58
-    * label *label59
   217 print "const "
   218 print "OVERFLOW_GATE1"
   219 print " "
 
   238 printchar 34
   239 print ";"
   240 print "\n"
-    * label *label60
-    * label *label61
   241 print "const "
   242 print "PROCESSOR"
   243 print " "
 
   262 printchar 34
   263 print ";"
   264 print "\n"
-    * label *label62
-    * label *label63
   265 print "const "
   266 print "POWER_NODE"
   267 print " "
 
   286 printchar 34
   287 print ";"
   288 print "\n"
-    * label *label64
-    * label *label65
   289 print "const "
   290 print "UNLOADER2"
   291 print " "
 
   310 printchar 34
   311 print ";"
   312 print "\n"
-    * label *label66
-    * label *label67
   313 print "const "
   314 print "AIR_FACTORY"
   315 print " "
 
   334 printchar 34
   335 print ";"
   336 print "\n"
-    * label *label68
   337 set :packCfg:rotation 0
-    * label *label69
   338 print "const "
   339 print "UNLOADER3"
   340 print " "
 
   359 printchar 34
   360 print ";"
   361 print "\n"
-    * label *label70
-    * label *label71
   362 print "const "
   363 print "INVERTED_SORT3"
   364 print " "
 
   383 printchar 34
   384 print ";"
   385 print "\n"
-    * label *label72
-    * label *label73
   386 print "const "
   387 print "KILN"
   388 print " "
 
   407 printchar 34
   408 print ";"
   409 print "\n"
-    * label *label74
-    * label *label75
   410 print "const "
   411 print "WATER_EXT"
   412 print " "
 
   431 printchar 34
   432 print ";"
   433 print "\n"
-    * label *label76
-    * label *label77
   434 print "const "
   435 print "OVERFLOW_GATE2"
   436 print " "
 
   455 printchar 34
   456 print ";"
   457 print "\n"
-    * label *label78
-    * label *label79
   458 print "const "
   459 print "OVERFLOW_GATE3"
   460 print " "
 
   479 printchar 34
   480 print ";"
   481 print "\n"
-    * label *label80
-    * label *label81
   482 print "const "
   483 print "STEAM_GEN"
   484 print " "
 
   503 printchar 34
   504 print ";"
   505 print "\n"
-    * label *label82
-    * label *label83
   506 print "const "
   507 print "MULTIPRESS"
   508 print " "
 
   527 printchar 34
   528 print ";"
   529 print "\n"
-    * label *label84
-    * label *label85
   530 print "const "
   531 print "WATER_EXT2"
   532 print " "
 
   551 printchar 34
   552 print ";"
   553 print "\n"
-    * label *label86
   554 set :packCfg:mg 0
-    * label *label87
   555 print "const "
   556 print "PAYLOAD_ROUTER"
   557 print " "
 
   576 printchar 34
   577 print ";"
   578 print "\n"
-    * label *label88
-    * label *label89
   579 print "const "
   580 print "UNLOADER4"
   581 print " "
 
   600 printchar 34
   601 print ";"
   602 print "\n"
-    * label *label90
-    * label *label91
   603 print "const "
   604 print "UNDERFLOW_GATE"
   605 print " "
 
   624 printchar 34
   625 print ";"
   626 print "\n"
-    * label *label92
-    * label *label93
   627 print "const "
   628 print "ADDITIVE_REC"
   629 print " "
 
   648 printchar 34
   649 print ";"
   650 print "\n"
-    * label *label94
-    * label *label95
   651 print "const "
   652 print "BATTERY_LARGE"
   653 print " "
 
   672 printchar 34
   673 print ";"
   674 print "\n"
-    * label *label96
-    * label *label97
   675 print "const "
   676 print "OVERFLOW_GATE4"
   677 print " "
 
   696 printchar 34
   697 print ";"
   698 print "\n"
-    * label *label98
-    * label *label99
   699 print "const "
   700 print "LASER_DRILL"
   701 print " "
 
   720 printchar 34
   721 print ";"
   722 print "\n"
-    * label *label100
   723 set :packCfg:gr 0
-    * label *label101
   724 print "const "
   725 print "SOLAR_PANEL"
   726 print " "
 
   745 printchar 34
   746 print ";"
   747 print "\n"
-    * label *label102
-    * label *label103
   748 print "const "
   749 print "CONTAINER"
   750 print " "
 
   769 printchar 34
   770 print ";"
   771 print "\n"
-    * label *label104
-    * label *label105
   772 print "const "
   773 print "SMELTER2"
   774 print " "
 
   793 printchar 34
   794 print ";"
   795 print "\n"
-    * label *label106
   796 set :packCfg:size 1
-    * label *label107
   797 print "const "
   798 print "INVERTED_SORT4"
   799 print " "
 
   818 printchar 34
   819 print ";"
   820 print "\n"
-    * label *label108
-    * label *label109
   821 print "const "
   822 print "INVERTED_SORT5"
   823 print " "
 
   842 printchar 34
   843 print ";"
   844 print "\n"
-    * label *label110
   845 set :packCfg:type @unloader
   846 set :packCfg:cu 0
   847 set :packCfg:pb 0
   848 set :packCfg:si 30
   849 set :packCfg:ti 25
-    * label *label111
   850 print "const "
   851 print "UNLOADER5"
   852 print " "
 
   888 printchar 34
   889 print ";"
   890 print "\n"
-    * label *label112
   891 set :packCfg:name "UNLOADER6"
   892 set :packCfg:x 1
   893 set :packCfg:y -2
 
   961 printchar 34
   962 print ";"
   963 print "\n"
-    * label *label40
   964 return :packCfg*retaddr
   965 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 5, iteration 1 (-1 instructions):
 
   962 print ";"
   963 print "\n"
   964 return :packCfg*retaddr
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-562 instructions):
     0 set :packCfg:th 0
-    * print "const "
-    * print "PRESS"
-    * print " "
-    * print "= "
+    1 print "const PRESS = "
     2 printchar 34
-    * printchar 35
-    * printchar 39
-    * printchar 43
-    * printchar 110
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+    3 print "#'+nA######%"
     4 set *tmp17 .index
     5 op add .index .index 1
     6 op add *tmp18 35 *tmp17
     7 printchar *tmp18
     8 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "BATTERY1"
-    * print " "
-    * print "= "
+    9 print ";\nconst BATTERY1 = "
    10 printchar 34
-    * printchar 107
-    * printchar 42
-    * printchar 47
-    * printchar 40
-    * printchar 55
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   11 print "k*/(7######$"
    12 set *tmp17 .index
    13 op add .index .index 1
    14 op add *tmp18 35 *tmp17
    15 printchar *tmp18
    16 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "BATTERY2"
-    * print " "
-    * print "= "
+   17 print ";\nconst BATTERY2 = "
    18 printchar 34
-    * printchar 107
-    * printchar 43
-    * printchar 47
-    * printchar 40
-    * printchar 55
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   19 print "k+/(7######$"
    20 set *tmp17 .index
    21 op add .index .index 1
    22 op add *tmp18 35 *tmp17
    23 printchar *tmp18
    24 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "GENERATOR"
-    * print " "
-    * print "= "
+   25 print ";\nconst GENERATOR = "
    26 printchar 34
-    * printchar 109
-    * printchar 42
-    * printchar 46
-    * printchar 60
-    * printchar 50
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   27 print "m*.<2######$"
    28 set *tmp17 .index
    29 op add .index .index 1
    30 op add *tmp18 35 *tmp17
    31 printchar *tmp18
    32 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "SMELTER"
-    * print " "
-    * print "= "
+   33 print ";\nconst SMELTER = "
    34 printchar 34
-    * printchar 37
-    * printchar 43
-    * printchar 45
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+   35 print "%+-A<######%"
    36 set *tmp17 .index
    37 op add .index .index 1
    38 op add *tmp18 35 *tmp17
    39 printchar *tmp18
    40 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "INVERTED_SORT1"
-    * print " "
-    * print "= "
+   41 print ";\nconst INVERTED_SORT1 = "
    42 printchar 34
-    * printchar 84
-    * printchar 43
-    * printchar 44
-    * printchar 37
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   43 print "T+,%%######$"
    44 set *tmp17 .index
    45 op add .index .index 1
    46 op add *tmp18 35 *tmp17
    47 printchar *tmp18
    48 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "PNEUMATIC_DRILL"
-    * print " "
-    * print "= "
+   49 print ";\nconst PNEUMATIC_DRILL = "
    50 printchar 34
-    * printchar 119
-    * printchar 42
-    * printchar 42
-    * printchar 53
-    * printchar 35
-    * printchar 45
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+   51 print "w**5#-#####%"
    52 set *tmp17 .index
    53 op add .index .index 1
    54 op add *tmp18 35 *tmp17
    55 printchar *tmp18
    56 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "UNLOADER1"
-    * print " "
-    * print "= "
+   57 print ";\nconst UNLOADER1 = "
    58 printchar 34
    59 printchar 130
-    * printchar 42
-    * printchar 44
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   60 print "*,###A<###$"
    61 set *tmp17 .index
    62 op add .index .index 1
    63 op add *tmp18 35 *tmp17
    64 printchar *tmp18
    65 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "INVERTED_SORT2"
-    * print " "
-    * print "= "
+   66 print ";\nconst INVERTED_SORT2 = "
    67 printchar 34
-    * printchar 84
-    * printchar 41
-    * printchar 44
-    * printchar 37
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   68 print "T),%%######$"
    69 set *tmp17 .index
    70 op add .index .index 1
    71 op add *tmp18 35 *tmp17
    72 printchar *tmp18
    73 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "OVERFLOW_GATE1"
-    * print " "
-    * print "= "
+   74 print ";\nconst OVERFLOW_GATE1 = "
    75 printchar 34
-    * printchar 87
-    * printchar 42
-    * printchar 45
-    * printchar 39
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   76 print "W*-'%######$"
    77 set *tmp17 .index
    78 op add .index .index 1
    79 op add *tmp18 35 *tmp17
    80 printchar *tmp18
    81 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "PROCESSOR"
-    * print " "
-    * print "= "
+   82 print ";\nconst PROCESSOR = "
    83 printchar 34
-    * printchar 174
-    * printchar 45
-    * printchar 46
-    * printchar 125
-    * printchar 85
-    * printchar 35
-    * printchar 85
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   84 print "®-.}U#U####$"
    85 set *tmp17 .index
    86 op add .index .index 1
    87 op add *tmp18 35 *tmp17
    88 printchar *tmp18
    89 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "POWER_NODE"
-    * print " "
-    * print "= "
+   90 print ";\nconst POWER_NODE = "
    91 printchar 34
-    * printchar 103
-    * printchar 41
-    * printchar 39
-    * printchar 37
-    * printchar 41
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+   92 print "g)'%)######$"
    93 set *tmp17 .index
    94 op add .index .index 1
    95 op add *tmp18 35 *tmp17
    96 printchar *tmp18
    97 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "UNLOADER2"
-    * print " "
-    * print "= "
+   98 print ";\nconst UNLOADER2 = "
    99 printchar 34
   100 printchar 130
-    * printchar 40
-    * printchar 42
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  101 print "(*###A<###$"
   102 set *tmp17 .index
   103 op add .index .index 1
   104 op add *tmp18 35 *tmp17
   105 printchar *tmp18
   106 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "AIR_FACTORY"
-    * print " "
-    * print "= "
+  107 print ";\nconst AIR_FACTORY = "
   108 printchar 34
   109 printchar 151
-    * printchar 39
-    * printchar 40
-    * printchar 95
-    * printchar 105
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
-    * printchar 38
+  110 print "'(_i#####&&"
   111 set *tmp17 .index
   112 op add .index .index 1
   113 op add *tmp18 35 *tmp17
   114 printchar *tmp18
   115 printchar 34
-    * print ";"
-    * print "\n"
+  116 print ";\nconst UNLOADER3 = "
   117 set :packCfg:rotation 0
-    * print "const "
-    * print "UNLOADER3"
-    * print " "
-    * print "= "
   118 printchar 34
   119 printchar 130
-    * printchar 44
-    * printchar 41
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  120 print ",)###A<###$"
   121 set *tmp17 .index
   122 op add .index .index 1
   123 op add *tmp18 35 *tmp17
   124 printchar *tmp18
   125 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "INVERTED_SORT3"
-    * print " "
-    * print "= "
+  126 print ";\nconst INVERTED_SORT3 = "
   127 printchar 34
-    * printchar 84
-    * printchar 44
-    * printchar 42
-    * printchar 37
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  128 print "T,*%%######$"
   129 set *tmp17 .index
   130 op add .index .index 1
   131 op add *tmp18 35 *tmp17
   132 printchar *tmp18
   133 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "KILN"
-    * print " "
-    * print "= "
+  134 print ";\nconst KILN = "
   135 printchar 34
-    * printchar 39
-    * printchar 44
-    * printchar 43
-    * printchar 95
-    * printchar 65
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  136 print "',+_AA#####%"
   137 set *tmp17 .index
   138 op add .index .index 1
   139 op add *tmp18 35 *tmp17
   140 printchar *tmp18
   141 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "WATER_EXT"
-    * print " "
-    * print "= "
+  142 print ";\nconst WATER_EXT = "
   143 printchar 34
-    * printchar 122
-    * printchar 37
-    * printchar 45
-    * printchar 65
-    * printchar 65
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  144 print "z%-AAA##A##%"
   145 set *tmp17 .index
   146 op add .index .index 1
   147 op add *tmp18 35 *tmp17
   148 printchar *tmp18
   149 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "OVERFLOW_GATE2"
-    * print " "
-    * print "= "
+  150 print ";\nconst OVERFLOW_GATE2 = "
   151 printchar 34
-    * printchar 87
-    * printchar 39
-    * printchar 42
-    * printchar 39
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  152 print "W'*'%######$"
   153 set *tmp17 .index
   154 op add .index .index 1
   155 op add *tmp18 35 *tmp17
   156 printchar *tmp18
   157 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "OVERFLOW_GATE3"
-    * print " "
-    * print "= "
+  158 print ";\nconst OVERFLOW_GATE3 = "
   159 printchar 34
-    * printchar 87
-    * printchar 38
-    * printchar 42
-    * printchar 39
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  160 print "W&*'%######$"
   161 set *tmp17 .index
   162 op add .index .index 1
   163 op add *tmp18 35 *tmp17
   164 printchar *tmp18
   165 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "STEAM_GEN"
-    * print " "
-    * print "= "
+  166 print ";\nconst STEAM_GEN = "
   167 printchar 34
-    * printchar 111
-    * printchar 37
-    * printchar 43
-    * printchar 70
-    * printchar 75
-    * printchar 60
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  168 print "o%+FK<A####%"
   169 set *tmp17 .index
   170 op add .index .index 1
   171 op add *tmp18 35 *tmp17
   172 printchar *tmp18
   173 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "MULTIPRESS"
-    * print " "
-    * print "= "
+  174 print ";\nconst MULTIPRESS = "
   175 printchar 34
-    * printchar 36
-    * printchar 40
-    * printchar 46
-    * printchar 35
+  176 print "$(.#"
   177 printchar 135
-    * printchar 85
-    * printchar 60
+  178 print "U<"
   179 printchar 135
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
+  180 print "###&"
   181 set *tmp17 .index
   182 op add .index .index 1
   183 op add *tmp18 35 *tmp17
   184 printchar *tmp18
   185 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "WATER_EXT2"
-    * print " "
-    * print "= "
+  186 print ";\nconst WATER_EXT2 = "
   187 printchar 34
-    * printchar 122
-    * printchar 37
-    * printchar 47
-    * printchar 65
-    * printchar 65
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  188 print "z%/AAA##A##%"
   189 set *tmp17 .index
   190 op add .index .index 1
   191 op add *tmp18 35 *tmp17
   192 printchar *tmp18
   193 printchar 34
-    * print ";"
-    * print "\n"
+  194 print ";\nconst PAYLOAD_ROUTER = "
   195 set :packCfg:mg 0
-    * print "const "
-    * print "PAYLOAD_ROUTER"
-    * print " "
-    * print "= "
   196 printchar 34
-    * printchar 160
-    * printchar 39
-    * printchar 37
-    * printchar 45
-    * printchar 35
-    * printchar 50
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
+  197 print " '%-#2#####&"
   198 set *tmp17 .index
   199 op add .index .index 1
   200 op add *tmp18 35 *tmp17
   201 printchar *tmp18
   202 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "UNLOADER4"
-    * print " "
-    * print "= "
+  203 print ";\nconst UNLOADER4 = "
   204 printchar 34
   205 printchar 130
-    * printchar 42
-    * printchar 40
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  206 print "*(###A<###$"
   207 set *tmp17 .index
   208 op add .index .index 1
   209 op add *tmp18 35 *tmp17
   210 printchar *tmp18
   211 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "UNDERFLOW_GATE"
-    * print " "
-    * print "= "
+  212 print ";\nconst UNDERFLOW_GATE = "
   213 printchar 34
-    * printchar 88
-    * printchar 42
-    * printchar 39
-    * printchar 39
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  214 print "X*''%######$"
   215 set *tmp17 .index
   216 op add .index .index 1
   217 op add *tmp18 35 *tmp17
   218 printchar *tmp18
   219 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "ADDITIVE_REC"
-    * print " "
-    * print "= "
+  220 print ";\nconst ADDITIVE_REC = "
   221 printchar 34
   222 printchar 153
-    * printchar 42
-    * printchar 37
-    * printchar 235
+  223 print "*%ë"
   224 printchar 155
-    * printchar 35
-    * printchar 125
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
+  225 print "#}####&"
   226 set *tmp17 .index
   227 op add .index .index 1
   228 op add *tmp18 35 *tmp17
   229 printchar *tmp18
   230 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "BATTERY_LARGE"
-    * print " "
-    * print "= "
+  231 print ";\nconst BATTERY_LARGE = "
   232 printchar 34
-    * printchar 108
-    * printchar 47
-    * printchar 44
-    * printchar 35
-    * printchar 85
-    * printchar 35
-    * printchar 65
-    * printchar 55
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
+  233 print "l/,#U#A7###&"
   234 set *tmp17 .index
   235 op add .index .index 1
   236 op add *tmp18 35 *tmp17
   237 printchar *tmp18
   238 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "OVERFLOW_GATE4"
-    * print " "
-    * print "= "
+  239 print ";\nconst OVERFLOW_GATE4 = "
   240 printchar 34
-    * printchar 87
-    * printchar 38
-    * printchar 42
-    * printchar 39
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  241 print "W&*'%######$"
   242 set *tmp17 .index
   243 op add .index .index 1
   244 op add *tmp18 35 *tmp17
   245 printchar *tmp18
   246 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "LASER_DRILL"
-    * print " "
-    * print "= "
+  247 print ";\nconst LASER_DRILL = "
   248 printchar 34
-    * printchar 120
-    * printchar 42
-    * printchar 42
-    * printchar 70
-    * printchar 35
-    * printchar 65
-    * printchar 65
-    * printchar 55
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 38
+  249 print "x**F#AA7###&"
   250 set *tmp17 .index
   251 op add .index .index 1
   252 op add *tmp18 35 *tmp17
   253 printchar *tmp18
   254 printchar 34
-    * print ";"
-    * print "\n"
+  255 print ";\nconst SOLAR_PANEL = "
   256 set :packCfg:gr 0
-    * print "const "
-    * print "SOLAR_PANEL"
-    * print " "
-    * print "= "
   257 printchar 34
-    * printchar 114
-    * printchar 42
-    * printchar 42
-    * printchar 35
-    * printchar 45
-    * printchar 35
-    * printchar 43
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  258 print "r**#-#+####$"
   259 set *tmp17 .index
   260 op add .index .index 1
   261 op add *tmp18 35 *tmp17
   262 printchar *tmp18
   263 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "CONTAINER"
-    * print " "
-    * print "= "
+  264 print ";\nconst CONTAINER = "
   265 printchar 34
   266 printchar 129
-    * printchar 42
-    * printchar 42
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
+  267 print "**####"
   268 printchar 135
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  269 print "###%"
   270 set *tmp17 .index
   271 op add .index .index 1
   272 op add *tmp18 35 *tmp17
   273 printchar *tmp18
   274 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "SMELTER2"
-    * print " "
-    * print "= "
+  275 print ";\nconst SMELTER2 = "
   276 printchar 34
-    * printchar 37
-    * printchar 46
-    * printchar 41
-    * printchar 65
-    * printchar 60
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 37
+  277 print "%.)A<######%"
   278 set *tmp17 .index
   279 op add .index .index 1
   280 op add *tmp18 35 *tmp17
   281 printchar *tmp18
   282 printchar 34
-    * print ";"
-    * print "\n"
+  283 print ";\nconst INVERTED_SORT4 = "
   284 set :packCfg:size 1
-    * print "const "
-    * print "INVERTED_SORT4"
-    * print " "
-    * print "= "
   285 printchar 34
-    * printchar 84
-    * printchar 45
-    * printchar 42
-    * printchar 37
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  286 print "T-*%%######$"
   287 set *tmp17 .index
   288 op add .index .index 1
   289 op add *tmp18 35 *tmp17
   290 printchar *tmp18
   291 printchar 34
-    * print ";"
-    * print "\n"
-    * print "const "
-    * print "INVERTED_SORT5"
-    * print " "
-    * print "= "
+  292 print ";\nconst INVERTED_SORT5 = "
   293 printchar 34
-    * printchar 84
-    * printchar 45
-    * printchar 41
-    * printchar 37
-    * printchar 37
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 35
-    * printchar 36
+  294 print "T-)%%######$"
   295 set *tmp17 .index
   296 op add .index .index 1
   297 op add *tmp18 35 *tmp17
   298 printchar *tmp18
   299 printchar 34
-    * print ";"
-    * print "\n"
+  300 print ";\nconst UNLOADER5 = "
   301 set :packCfg:type @unloader
   302 set :packCfg:cu 0
   303 set :packCfg:pb 0
   304 set :packCfg:si 30
   305 set :packCfg:ti 25
-    * print "const "
-    * print "UNLOADER5"
-    * print " "
-    * print "= "
   306 printchar 34
   307 set *tmp0 95
   308 op add *tmp1 35 95
 
   310 op add *tmp2 7 3
   311 op floor *tmp3 10
   312 op add *tmp4 35 10
-    * printchar 45
+  313 print "--###A<###$"
   314 op add *tmp5 7 3
   315 op floor *tmp6 10
   316 op add *tmp7 35 10
-    * printchar 45
   317 op add *tmp8 35 0
-    * printchar 35
   318 op add *tmp9 35 0
-    * printchar 35
   319 op add *tmp10 35 0
-    * printchar 35
   320 op add *tmp11 35 30
-    * printchar 65
   321 op add *tmp12 35 25
-    * printchar 60
   322 op add *tmp13 35 0
-    * printchar 35
   323 op add *tmp14 35 0
-    * printchar 35
   324 op add *tmp15 35 0
-    * printchar 35
   325 op add *tmp16 35 1
-    * printchar 36
   326 set *tmp17 .index
   327 op add .index .index 1
   328 op add *tmp18 35 *tmp17
   329 printchar *tmp18
   330 printchar 34
-    * print ";"
-    * print "\n"
+  331 print ";\n"
   332 set :packCfg:name "UNLOADER6"
   333 set :packCfg:x 1
   334 set :packCfg:y -2
 
   361 printflush message1
   362 end
   363 label *label0
-    * print "const "
-    * print :packCfg:name
-    * print " "
-    * print "= "
+  364 print "const {0} = "
+  365 format :packCfg:name
   366 printchar 34
   367 sensor *tmp0 :packCfg:type @id
   368 op add *tmp1 35 *tmp0
 
   398 op add *tmp18 35 *tmp17
   399 printchar *tmp18
   400 printchar 34
-    * print ";"
-    * print "\n"
+  401 print ";\n"
   402 return :packCfg*retaddr

Final code before resolving virtual instructions:

    0:  set :packCfg:th 0                                            packCfg("PRESS",                @graphite-press,               -2.5, +1.5,  75,  30,   0,   0,   0,   0,   0,   0,    2);
    1:  print "const PRESS = "                                       print($"const $name = ");
    2:  printchar 34                                                 printchar('"');
    3:  print "#'+nA######%"                                         printchar(35 + type.@id);
    4:  set *tmp17 .index                                            printchar(35 + index++);
    5:  op add .index .index 1                                       ...
    6:  op add *tmp18 35 *tmp17                                      ...
    7:  printchar *tmp18                                             ...
    8:  printchar 34                                                 printchar('"');
    9:  print ";\nconst BATTERY1 = "                                 println(";");
   10:  printchar 34                                                 printchar('"');
   11:  print "k*/(7######$"                                         printchar(35 + type.@id);
   12:  set *tmp17 .index                                            printchar(35 + index++);
   13:  op add .index .index 1                                       ...
   14:  op add *tmp18 35 *tmp17                                      ...
   15:  printchar *tmp18                                             ...
   16:  printchar 34                                                 printchar('"');
   17:  print ";\nconst BATTERY2 = "                                 println(";");
   18:  printchar 34                                                 printchar('"');
   19:  print "k+/(7######$"                                         printchar(35 + type.@id);
   20:  set *tmp17 .index                                            printchar(35 + index++);
   21:  op add .index .index 1                                       ...
   22:  op add *tmp18 35 *tmp17                                      ...
   23:  printchar *tmp18                                             ...
   24:  printchar 34                                                 printchar('"');
   25:  print ";\nconst GENERATOR = "                                println(";");
   26:  printchar 34                                                 printchar('"');
   27:  print "m*.<2######$"                                         printchar(35 + type.@id);
   28:  set *tmp17 .index                                            printchar(35 + index++);
   29:  op add .index .index 1                                       ...
   30:  op add *tmp18 35 *tmp17                                      ...
   31:  printchar *tmp18                                             ...
   32:  printchar 34                                                 printchar('"');
   33:  print ";\nconst SMELTER = "                                  println(";");
   34:  printchar 34                                                 printchar('"');
   35:  print "%+-A<######%"                                         printchar(35 + type.@id);
   36:  set *tmp17 .index                                            printchar(35 + index++);
   37:  op add .index .index 1                                       ...
   38:  op add *tmp18 35 *tmp17                                      ...
   39:  printchar *tmp18                                             ...
   40:  printchar 34                                                 printchar('"');
   41:  print ";\nconst INVERTED_SORT1 = "                           println(";");
   42:  printchar 34                                                 printchar('"');
   43:  print "T+,%%######$"                                         printchar(35 + type.@id);
   44:  set *tmp17 .index                                            printchar(35 + index++);
   45:  op add .index .index 1                                       ...
   46:  op add *tmp18 35 *tmp17                                      ...
   47:  printchar *tmp18                                             ...
   48:  printchar 34                                                 printchar('"');
   49:  print ";\nconst PNEUMATIC_DRILL = "                          println(";");
   50:  printchar 34                                                 printchar('"');
   51:  print "w**5#-#####%"                                         printchar(35 + type.@id);
   52:  set *tmp17 .index                                            printchar(35 + index++);
   53:  op add .index .index 1                                       ...
   54:  op add *tmp18 35 *tmp17                                      ...
   55:  printchar *tmp18                                             ...
   56:  printchar 34                                                 printchar('"');
   57:  print ";\nconst UNLOADER1 = "                                println(";");
   58:  printchar 34                                                 printchar('"');
   59:  printchar 130                                                printchar(35 + type.@id);
   60:  print "*,###A<###$"                                          printchar(35 + floor(7 + x));
   61:  set *tmp17 .index                                            printchar(35 + index++);
   62:  op add .index .index 1                                       ...
   63:  op add *tmp18 35 *tmp17                                      ...
   64:  printchar *tmp18                                             ...
   65:  printchar 34                                                 printchar('"');
   66:  print ";\nconst INVERTED_SORT2 = "                           println(";");
   67:  printchar 34                                                 printchar('"');
   68:  print "T),%%######$"                                         printchar(35 + type.@id);
   69:  set *tmp17 .index                                            printchar(35 + index++);
   70:  op add .index .index 1                                       ...
   71:  op add *tmp18 35 *tmp17                                      ...
   72:  printchar *tmp18                                             ...
   73:  printchar 34                                                 printchar('"');
   74:  print ";\nconst OVERFLOW_GATE1 = "                           println(";");
   75:  printchar 34                                                 printchar('"');
   76:  print "W*-'%######$"                                         printchar(35 + type.@id);
   77:  set *tmp17 .index                                            printchar(35 + index++);
   78:  op add .index .index 1                                       ...
   79:  op add *tmp18 35 *tmp17                                      ...
   80:  printchar *tmp18                                             ...
   81:  printchar 34                                                 printchar('"');
   82:  print ";\nconst PROCESSOR = "                                println(";");
   83:  printchar 34                                                 printchar('"');
   84:  print "®-.}U#U####$"                                         printchar(35 + type.@id);
   85:  set *tmp17 .index                                            printchar(35 + index++);
   86:  op add .index .index 1                                       ...
   87:  op add *tmp18 35 *tmp17                                      ...
   88:  printchar *tmp18                                             ...
   89:  printchar 34                                                 printchar('"');
   90:  print ";\nconst POWER_NODE = "                               println(";");
   91:  printchar 34                                                 printchar('"');
   92:  print "g)'%)######$"                                         printchar(35 + type.@id);
   93:  set *tmp17 .index                                            printchar(35 + index++);
   94:  op add .index .index 1                                       ...
   95:  op add *tmp18 35 *tmp17                                      ...
   96:  printchar *tmp18                                             ...
   97:  printchar 34                                                 printchar('"');
   98:  print ";\nconst UNLOADER2 = "                                println(";");
   99:  printchar 34                                                 printchar('"');
  100:  printchar 130                                                printchar(35 + type.@id);
  101:  print "(*###A<###$"                                          printchar(35 + floor(7 + x));
  102:  set *tmp17 .index                                            printchar(35 + index++);
  103:  op add .index .index 1                                       ...
  104:  op add *tmp18 35 *tmp17                                      ...
  105:  printchar *tmp18                                             ...
  106:  printchar 34                                                 printchar('"');
  107:  print ";\nconst AIR_FACTORY = "                              println(";");
  108:  printchar 34                                                 printchar('"');
  109:  printchar 151                                                printchar(35 + type.@id);
  110:  print "'(_i#####&&"                                          printchar(35 + floor(7 + x));
  111:  set *tmp17 .index                                            printchar(35 + index++);
  112:  op add .index .index 1                                       ...
  113:  op add *tmp18 35 *tmp17                                      ...
  114:  printchar *tmp18                                             ...
  115:  printchar 34                                                 printchar('"');
  116:  print ";\nconst UNLOADER3 = "                                println(";");
  117:  set :packCfg:rotation 0                                      packCfg("UNLOADER3",            @unloader,                     +2.0, -1.0,   0,   0,   0,  30,  25,   0,   0,   0,    1);
  118:  printchar 34                                                 printchar('"');
  119:  printchar 130                                                printchar(35 + type.@id);
  120:  print ",)###A<###$"                                          printchar(35 + floor(7 + x));
  121:  set *tmp17 .index                                            printchar(35 + index++);
  122:  op add .index .index 1                                       ...
  123:  op add *tmp18 35 *tmp17                                      ...
  124:  printchar *tmp18                                             ...
  125:  printchar 34                                                 printchar('"');
  126:  print ";\nconst INVERTED_SORT3 = "                           println(";");
  127:  printchar 34                                                 printchar('"');
  128:  print "T,*%%######$"                                         printchar(35 + type.@id);
  129:  set *tmp17 .index                                            printchar(35 + index++);
  130:  op add .index .index 1                                       ...
  131:  op add *tmp18 35 *tmp17                                      ...
  132:  printchar *tmp18                                             ...
  133:  printchar 34                                                 printchar('"');
  134:  print ";\nconst KILN = "                                     println(";");
  135:  printchar 34                                                 printchar('"');
  136:  print "',+_AA#####%"                                         printchar(35 + type.@id);
  137:  set *tmp17 .index                                            printchar(35 + index++);
  138:  op add .index .index 1                                       ...
  139:  op add *tmp18 35 *tmp17                                      ...
  140:  printchar *tmp18                                             ...
  141:  printchar 34                                                 printchar('"');
  142:  print ";\nconst WATER_EXT = "                                println(";");
  143:  printchar 34                                                 printchar('"');
  144:  print "z%-AAA##A##%"                                         printchar(35 + type.@id);
  145:  set *tmp17 .index                                            printchar(35 + index++);
  146:  op add .index .index 1                                       ...
  147:  op add *tmp18 35 *tmp17                                      ...
  148:  printchar *tmp18                                             ...
  149:  printchar 34                                                 printchar('"');
  150:  print ";\nconst OVERFLOW_GATE2 = "                           println(";");
  151:  printchar 34                                                 printchar('"');
  152:  print "W'*'%######$"                                         printchar(35 + type.@id);
  153:  set *tmp17 .index                                            printchar(35 + index++);
  154:  op add .index .index 1                                       ...
  155:  op add *tmp18 35 *tmp17                                      ...
  156:  printchar *tmp18                                             ...
  157:  printchar 34                                                 printchar('"');
  158:  print ";\nconst OVERFLOW_GATE3 = "                           println(";");
  159:  printchar 34                                                 printchar('"');
  160:  print "W&*'%######$"                                         printchar(35 + type.@id);
  161:  set *tmp17 .index                                            printchar(35 + index++);
  162:  op add .index .index 1                                       ...
  163:  op add *tmp18 35 *tmp17                                      ...
  164:  printchar *tmp18                                             ...
  165:  printchar 34                                                 printchar('"');
  166:  print ";\nconst STEAM_GEN = "                                println(";");
  167:  printchar 34                                                 printchar('"');
  168:  print "o%+FK<A####%"                                         printchar(35 + type.@id);
  169:  set *tmp17 .index                                            printchar(35 + index++);
  170:  op add .index .index 1                                       ...
  171:  op add *tmp18 35 *tmp17                                      ...
  172:  printchar *tmp18                                             ...
  173:  printchar 34                                                 printchar('"');
  174:  print ";\nconst MULTIPRESS = "                               println(";");
  175:  printchar 34                                                 printchar('"');
  176:  print "$(.#"                                                 printchar(35 + type.@id);
  177:  printchar 135                                                printchar(35 + pb);
  178:  print "U<"                                                   printchar(35 + gr);
  179:  printchar 135                                                printchar(35 + ti);
  180:  print "###&"                                                 printchar(35 + mg);
  181:  set *tmp17 .index                                            printchar(35 + index++);
  182:  op add .index .index 1                                       ...
  183:  op add *tmp18 35 *tmp17                                      ...
  184:  printchar *tmp18                                             ...
  185:  printchar 34                                                 printchar('"');
  186:  print ";\nconst WATER_EXT2 = "                               println(";");
  187:  printchar 34                                                 printchar('"');
  188:  print "z%/AAA##A##%"                                         printchar(35 + type.@id);
  189:  set *tmp17 .index                                            printchar(35 + index++);
  190:  op add .index .index 1                                       ...
  191:  op add *tmp18 35 *tmp17                                      ...
  192:  printchar *tmp18                                             ...
  193:  printchar 34                                                 printchar('"');
  194:  print ";\nconst PAYLOAD_ROUTER = "                           println(";");
  195:  set :packCfg:mg 0                                            packCfg("PAYLOAD_ROUTER",       @payload-router,               -3.0, -5.0,  10,   0,  15,   0,   0,   0,   0,   0,    3);
  196:  printchar 34                                                 printchar('"');
  197:  print " '%-#2#####&"                                         printchar(35 + type.@id);
  198:  set *tmp17 .index                                            printchar(35 + index++);
  199:  op add .index .index 1                                       ...
  200:  op add *tmp18 35 *tmp17                                      ...
  201:  printchar *tmp18                                             ...
  202:  printchar 34                                                 printchar('"');
  203:  print ";\nconst UNLOADER4 = "                                println(";");
  204:  printchar 34                                                 printchar('"');
  205:  printchar 130                                                printchar(35 + type.@id);
  206:  print "*(###A<###$"                                          printchar(35 + floor(7 + x));
  207:  set *tmp17 .index                                            printchar(35 + index++);
  208:  op add .index .index 1                                       ...
  209:  op add *tmp18 35 *tmp17                                      ...
  210:  printchar *tmp18                                             ...
  211:  printchar 34                                                 printchar('"');
  212:  print ";\nconst UNDERFLOW_GATE = "                           println(";");
  213:  printchar 34                                                 printchar('"');
  214:  print "X*''%######$"                                         printchar(35 + type.@id);
  215:  set *tmp17 .index                                            printchar(35 + index++);
  216:  op add .index .index 1                                       ...
  217:  op add *tmp18 35 *tmp17                                      ...
  218:  printchar *tmp18                                             ...
  219:  printchar 34                                                 printchar('"');
  220:  print ";\nconst ADDITIVE_REC = "                             println(";");
  221:  printchar 34                                                 printchar('"');
  222:  printchar 153                                                printchar(35 + type.@id);
  223:  print "*%ë"                                                  printchar(35 + floor(7 + x));
  224:  printchar 155                                                printchar(35 + pb);
  225:  print "#}####&"                                              printchar(35 + gr);
  226:  set *tmp17 .index                                            printchar(35 + index++);
  227:  op add .index .index 1                                       ...
  228:  op add *tmp18 35 *tmp17                                      ...
  229:  printchar *tmp18                                             ...
  230:  printchar 34                                                 printchar('"');
  231:  print ";\nconst BATTERY_LARGE = "                            println(";");
  232:  printchar 34                                                 printchar('"');
  233:  print "l/,#U#A7###&"                                         printchar(35 + type.@id);
  234:  set *tmp17 .index                                            printchar(35 + index++);
  235:  op add .index .index 1                                       ...
  236:  op add *tmp18 35 *tmp17                                      ...
  237:  printchar *tmp18                                             ...
  238:  printchar 34                                                 printchar('"');
  239:  print ";\nconst OVERFLOW_GATE4 = "                           println(";");
  240:  printchar 34                                                 printchar('"');
  241:  print "W&*'%######$"                                         printchar(35 + type.@id);
  242:  set *tmp17 .index                                            printchar(35 + index++);
  243:  op add .index .index 1                                       ...
  244:  op add *tmp18 35 *tmp17                                      ...
  245:  printchar *tmp18                                             ...
  246:  printchar 34                                                 printchar('"');
  247:  print ";\nconst LASER_DRILL = "                              println(";");
  248:  printchar 34                                                 printchar('"');
  249:  print "x**F#AA7###&"                                         printchar(35 + type.@id);
  250:  set *tmp17 .index                                            printchar(35 + index++);
  251:  op add .index .index 1                                       ...
  252:  op add *tmp18 35 *tmp17                                      ...
  253:  printchar *tmp18                                             ...
  254:  printchar 34                                                 printchar('"');
  255:  print ";\nconst SOLAR_PANEL = "                              println(";");
  256:  set :packCfg:gr 0                                            packCfg("SOLAR_PANEL",          @solar-panel,                   0.0,  0.0,   0,  10,   0,   8,   0,   0,   0,   0,    1);
  257:  printchar 34                                                 printchar('"');
  258:  print "r**#-#+####$"                                         printchar(35 + type.@id);
  259:  set *tmp17 .index                                            printchar(35 + index++);
  260:  op add .index .index 1                                       ...
  261:  op add *tmp18 35 *tmp17                                      ...
  262:  printchar *tmp18                                             ...
  263:  printchar 34                                                 printchar('"');
  264:  print ";\nconst CONTAINER = "                                println(";");
  265:  printchar 34                                                 printchar('"');
  266:  printchar 129                                                printchar(35 + type.@id);
  267:  print "**####"                                               printchar(35 + floor(7 + x));
  268:  printchar 135                                                printchar(35 + ti);
  269:  print "###%"                                                 printchar(35 + mg);
  270:  set *tmp17 .index                                            printchar(35 + index++);
  271:  op add .index .index 1                                       ...
  272:  op add *tmp18 35 *tmp17                                      ...
  273:  printchar *tmp18                                             ...
  274:  printchar 34                                                 printchar('"');
  275:  print ";\nconst SMELTER2 = "                                 println(";");
  276:  printchar 34                                                 printchar('"');
  277:  print "%.)A<######%"                                         printchar(35 + type.@id);
  278:  set *tmp17 .index                                            printchar(35 + index++);
  279:  op add .index .index 1                                       ...
  280:  op add *tmp18 35 *tmp17                                      ...
  281:  printchar *tmp18                                             ...
  282:  printchar 34                                                 printchar('"');
  283:  print ";\nconst INVERTED_SORT4 = "                           println(";");
  284:  set :packCfg:size 1                                          packCfg("INVERTED_SORT4",       @inverted-sorter,              +3.0,  0.0,   2,   2,   0,   0,   0,   0,   0,   0,    1);
  285:  printchar 34                                                 printchar('"');
  286:  print "T-*%%######$"                                         printchar(35 + type.@id);
  287:  set *tmp17 .index                                            printchar(35 + index++);
  288:  op add .index .index 1                                       ...
  289:  op add *tmp18 35 *tmp17                                      ...
  290:  printchar *tmp18                                             ...
  291:  printchar 34                                                 printchar('"');
  292:  print ";\nconst INVERTED_SORT5 = "                           println(";");
  293:  printchar 34                                                 printchar('"');
  294:  print "T-)%%######$"                                         printchar(35 + type.@id);
  295:  set *tmp17 .index                                            printchar(35 + index++);
  296:  op add .index .index 1                                       ...
  297:  op add *tmp18 35 *tmp17                                      ...
  298:  printchar *tmp18                                             ...
  299:  printchar 34                                                 printchar('"');
  300:  print ";\nconst UNLOADER5 = "                                println(";");
  301:  set :packCfg:type @unloader                                  packCfg("UNLOADER5",            @unloader,                     +3.0, +3.0,   0,   0,   0,  30,  25,   0,   0,   0,    1);
  302:  set :packCfg:cu 0                                            ...
  303:  set :packCfg:pb 0                                            ...
  304:  set :packCfg:si 30                                           ...
  305:  set :packCfg:ti 25                                           ...
  306:  printchar 34                                                 printchar('"');
  307:  set *tmp0 95                                                 printchar(35 + type.@id);
  308:  op add *tmp1 35 95                                           ...
  309:  printchar 130                                                ...
  310:  op add *tmp2 7 3                                             printchar(35 + floor(7 + x));
  311:  op floor *tmp3 10 0                                          ...
  312:  op add *tmp4 35 10                                           ...
  313:  print "--###A<###$"                                          ...
  314:  op add *tmp5 7 3                                             printchar(35 + floor(7 + y));
  315:  op floor *tmp6 10 0                                          ...
  316:  op add *tmp7 35 10                                           ...
  317:  op add *tmp8 35 0                                            printchar(35 + cu);
  318:  op add *tmp9 35 0                                            printchar(35 + pb);
  319:  op add *tmp10 35 0                                           printchar(35 + gr);
  320:  op add *tmp11 35 30                                          printchar(35 + si);
  321:  op add *tmp12 35 25                                          printchar(35 + ti);
  322:  op add *tmp13 35 0                                           printchar(35 + mg);
  323:  op add *tmp14 35 0                                           printchar(35 + th);
  324:  op add *tmp15 35 0                                           printchar(35 + rotation);
  325:  op add *tmp16 35 1                                           printchar(35 + size);
  326:  set *tmp17 .index                                            printchar(35 + index++);
  327:  op add .index .index 1                                       ...
  328:  op add *tmp18 35 *tmp17                                      ...
  329:  printchar *tmp18                                             ...
  330:  printchar 34                                                 printchar('"');
  331:  print ";\n"                                                  println(";");
  332:  set :packCfg:name "UNLOADER6"                                packCfg("UNLOADER6",            @unloader,                      1.0, -2.0,   0,   0,   0,  30,  25,   0,   0,   0,    1);
  333:  set :packCfg:x 1                                             ...
  334:  set :packCfg:y -2                                            ...
  335:  setaddr :packCfg*retaddr *label37                            ...
  336:  call *label0 *invalid :packCfg*retval                        ...
        label *label37                                               ...
  337:  set :packCfg:name "UNDERFLOW_GATE2"                          packCfg("UNDERFLOW_GATE2",      @underflow-gate,                1.0, -3.0,   4,   2,   0,   0,   0,   0,   0,   0,    1);
  338:  set :packCfg:type @underflow-gate                            ...
  339:  set :packCfg:y -3                                            ...
  340:  set :packCfg:cu 4                                            ...
  341:  set :packCfg:pb 2                                            ...
  342:  set :packCfg:si 0                                            ...
  343:  set :packCfg:ti 0                                            ...
  344:  setaddr :packCfg*retaddr *label38                            ...
  345:  call *label0 *invalid :packCfg*retval                        ...
        label *label38                                               ...
  346:  set :packCfg:name "MULTIPLICATIVE_REC"                       packCfg("MULTIPLICATIVE_REC",   @multiplicative-reconstructor, +4.0, -4.0,   0, 650,   0, 450, 350,   0, 650,   0,    5);
  347:  set :packCfg:type @multiplicative-reconstructor              ...
  348:  set :packCfg:x 4                                             ...
  349:  set :packCfg:y -4                                            ...
  350:  set :packCfg:cu 0                                            ...
  351:  set :packCfg:pb 650                                          ...
  352:  set :packCfg:si 450                                          ...
  353:  set :packCfg:ti 350                                          ...
  354:  set :packCfg:th 650                                          ...
  355:  set :packCfg:size 5                                          ...
  356:  setaddr :packCfg*retaddr *label39                            ...
  357:  call *label0 *invalid :packCfg*retval                        ...
        label *label39                                               ...
  358:  printflush message1                                          #set target = 8;
  359:  end
        label *label0                                                void packCfg(name, type, x, y, cu, pb, gr, si, ti, mg, th, rotation, size)
  360:  print "const {0} = "                                         print($"const $name = ");
  361:  format :packCfg:name                                         ...
  362:  printchar 34                                                 printchar('"');
  363:  sensor *tmp0 :packCfg:type @id                               printchar(35 + type.@id);
  364:  op add *tmp1 35 *tmp0                                        ...
  365:  printchar *tmp1                                              ...
  366:  op add *tmp2 7 :packCfg:x                                    printchar(35 + floor(7 + x));
  367:  op floor *tmp3 *tmp2 0                                       ...
  368:  op add *tmp4 35 *tmp3                                        ...
  369:  printchar *tmp4                                              ...
  370:  op add *tmp5 7 :packCfg:y                                    printchar(35 + floor(7 + y));
  371:  op floor *tmp6 *tmp5 0                                       ...
  372:  op add *tmp7 35 *tmp6                                        ...
  373:  printchar *tmp7                                              ...
  374:  op add *tmp8 35 :packCfg:cu                                  printchar(35 + cu);
  375:  printchar *tmp8                                              ...
  376:  op add *tmp9 35 :packCfg:pb                                  printchar(35 + pb);
  377:  printchar *tmp9                                              ...
  378:  op add *tmp10 35 :packCfg:gr                                 printchar(35 + gr);
  379:  printchar *tmp10                                             ...
  380:  op add *tmp11 35 :packCfg:si                                 printchar(35 + si);
  381:  printchar *tmp11                                             ...
  382:  op add *tmp12 35 :packCfg:ti                                 printchar(35 + ti);
  383:  printchar *tmp12                                             ...
  384:  op add *tmp13 35 :packCfg:mg                                 printchar(35 + mg);
  385:  printchar *tmp13                                             ...
  386:  op add *tmp14 35 :packCfg:th                                 printchar(35 + th);
  387:  printchar *tmp14                                             ...
  388:  op add *tmp15 35 :packCfg:rotation                           printchar(35 + rotation);
  389:  printchar *tmp15                                             ...
  390:  op add *tmp16 35 :packCfg:size                               printchar(35 + size);
  391:  printchar *tmp16                                             ...
  392:  set *tmp17 .index                                            printchar(35 + index++);
  393:  op add .index .index 1                                       ...
  394:  op add *tmp18 35 *tmp17                                      ...
  395:  printchar *tmp18                                             ...
  396:  printchar 34                                                 printchar('"');
  397:  print ";\n"                                                  println(";");
  398:  return :packCfg*retaddr                                      void packCfg(name, type, x, y, cu, pb, gr, si, ti, mg, th, rotation, size)


Performance: parsed in 254 ms, compiled in 266 ms, optimized in 1,053 ms, run in 16 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (477 steps):
const PRESS = "#'+nA######%#";
const BATTERY1 = "k*/(7######$$";
const BATTERY2 = "k+/(7######$%";
const GENERATOR = "m*.<2######$&";
const SMELTER = "%+-A<######%'";
const INVERTED_SORT1 = "T+,%%######$(";
const PNEUMATIC_DRILL = "w**5#-#####%)";
const UNLOADER1 = "*,###A<###$*";
const INVERTED_SORT2 = "T),%%######$+";
const OVERFLOW_GATE1 = "W*-'%######$,";
const PROCESSOR = "®-.}U#U####$-";
const POWER_NODE = "g)'%)######$.";
const UNLOADER2 = "(*###A<###$/";
const AIR_FACTORY = "'(_i#####&&0";
const UNLOADER3 = ",)###A<###$1";
const INVERTED_SORT3 = "T,*%%######$2";
const KILN = "',+_AA#####%3";
const WATER_EXT = "z%-AAA##A##%4";
const OVERFLOW_GATE2 = "W'*'%######$5";
const OVERFLOW_GATE3 = "W&*'%######$6";
const STEAM_GEN = "o%+FK<A####%7";
const MULTIPRESS = "$(.#U<###&8";
const WATER_EXT2 = "z%/AAA##A##%9";
const PAYLOAD_ROUTER = " '%-#2#####&:";
const UNLOADER4 = "*(###A<###$;";
const UNDERFLOW_GATE = "X*''%######$<";
const ADDITIVE_REC = "*%ë#}####&=";
const BATTERY_LARGE = "l/,#U#A7###&>";
const OVERFLOW_GATE4 = "W&*'%######$?";
const LASER_DRILL = "x**F#AA7###&@";
const SOLAR_PANEL = "r**#-#+####$A";
const CONTAINER = "**#######%B";
const SMELTER2 = "%.)A<######%C";
const INVERTED_SORT4 = "T-*%%######$D";
const INVERTED_SORT5 = "T-)%%######$E";
const UNLOADER5 = "--###A<###$F";
const UNLOADER6 = "+(###A<###$G";
const UNDERFLOW_GATE2 = "X+''%######$H";
const MULTIPLICATIVE_REC = ".&#ʭ#ǥƁ#ʭ#(I";

