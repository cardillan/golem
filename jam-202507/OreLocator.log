   968 instructions before optimizations.
    94 instructions eliminated by Temp Variables Elimination (2 iterations).
    73 instructions eliminated by Dead Code Elimination (2 passes, 8 iterations).
C:\Home\golem\jam-202507\OreLocator.mnd:21:19 Variable 'mapProgress' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:21:32 Variable 'mapTotal' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:21:42 Variable 'mapAction' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:26:5 Variable 'searchFinished' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:28:5 Variable 'water1X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:28:14 Variable 'water1Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:5 Variable 'containerX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:17 Variable 'containerY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:5 Variable 'water2X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:14 Variable 'water2Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:5 Variable 'generatorX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:17 Variable 'generatorY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:5 Variable 'nodeX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:12 Variable 'nodeY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:5 Variable 'panelX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:13 Variable 'panelY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:5 Variable 'batteryX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:15 Variable 'batteryY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:439:14 Variable 'maskX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:439:21 Variable 'maskY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:442:14 Variable 'lastUnshiftedMask' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:443:14 Variable 'lastShiftedMask' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:444:14 Variable 'lastCombinedMask' is not used.
     5 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    36 instructions eliminated by Jump Optimization (6 iterations).
    50 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
    28 instructions modified by Expression Optimization (2 passes, 3 iterations).
   255 instructions eliminated by Data Flow Optimization (8 passes, 28 iterations).
     1 loops improved by Loop Hoisting.
     2 instructions added by Loop Optimization (3 iterations).
    10 loops improved by Loop Optimization.
   134 instructions added by Loop Unrolling (12 iterations).
     2 loops unrolled by Loop Unrolling.
   371 instructions added by Function Inlining (12 iterations).
    13 function calls inlined by Function Inlining.
     6 instructions eliminated by Jump Straightening (2 passes, 6 iterations).
     6 instructions updated by JumpThreading.
    11 instructions eliminated by Unreachable Code Elimination (3 iterations).
   945 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 434):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:414:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size   +46, benefit      104.0, efficiency      2.261
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:426:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:459:28                size   +47, benefit        4.0, efficiency      0.085
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size   +47, benefit      100.0, efficiency      2.128
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 433):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:414:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size   +46, benefit      104.0, efficiency      2.261
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:426:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:459:28                size   +47, benefit        4.0, efficiency      0.085
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size   +47, benefit      100.0, efficiency      2.128
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 406):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size   +46, benefit      104.0, efficiency      2.261
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:459:28                size   +47, benefit        4.0, efficiency      0.085
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size   +47, benefit      100.0, efficiency      2.128
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 405):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598 (+92 instructions)
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size   +46, benefit      104.0, efficiency      2.261
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:459:28                size   +47, benefit        4.0, efficiency      0.085
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size   +47, benefit      100.0, efficiency      2.128
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 313):
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +138, benefit      104.0, efficiency      0.754
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:459:28                size  +139, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size  +139, benefit      100.0, efficiency      0.719
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 312):
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
    Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +138, benefit      104.0, efficiency      0.754
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:459:28                size  +139, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size  +139, benefit      100.0, efficiency      0.719
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 311):
    Unroll iteration loop at OreLocator.mnd:530:5                size   +93, benefit       19.0, efficiency      0.204
  * Inline function 'shiftMask' defined at OreLocator.mnd:268:1  size   +28, benefit      117.0, efficiency      4.179 (+10 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +138, benefit      104.0, efficiency      0.754
    Inline function call at OreLocator.mnd:657:13                size   +29, benefit        4.5, efficiency      0.155
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:459:28                size  +139, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size  +139, benefit      100.0, efficiency      0.719
    Inline function call at OreLocator.mnd:538:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 301):
    Unroll iteration loop at OreLocator.mnd:530:5                size  +193, benefit       19.0, efficiency      0.098
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
  * Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261 (+238 instructions)
    Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +138, benefit      104.0, efficiency      0.754
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:459:28                size  +139, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:536:30                size  +139, benefit      100.0, efficiency      0.719
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 63):
  ! Unroll iteration loop at OreLocator.mnd:530:5                size  +193, benefit       19.0, efficiency      0.098
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +415, benefit      104.0, efficiency      0.251
  ! Inline function call at OreLocator.mnd:459:28                size  +416, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
  ! Inline function call at OreLocator.mnd:536:30                size  +416, benefit      100.0, efficiency      0.240
  ! Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 2: speed optimization selection (cost limit 106):
  ! Unroll iteration loop at OreLocator.mnd:530:5                size  +189, benefit       19.0, efficiency      0.101
  * Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907 (+71 instructions)
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +382, benefit      104.0, efficiency      0.272
  ! Inline function call at OreLocator.mnd:459:28                size  +383, benefit        4.0, efficiency      0.010
    Inline function call at OreLocator.mnd:525:8                 size   +76, benefit        5.5, efficiency      0.072
  ! Inline function call at OreLocator.mnd:536:30                size  +383, benefit      100.0, efficiency      0.261
    Inline function call at OreLocator.mnd:553:12                size   +76, benefit      137.5, efficiency      1.809

Pass 2: speed optimization selection (cost limit 35):
  ! Unroll iteration loop at OreLocator.mnd:530:5                size  +489, benefit       19.0, efficiency      0.039
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +382, benefit      104.0, efficiency      0.272
  ! Inline function call at OreLocator.mnd:459:28                size  +383, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:536:30                size  +383, benefit      100.0, efficiency      0.261

Pass 3: speed optimization selection (cost limit 35):
  ! Unroll iteration loop at OreLocator.mnd:530:5                size  +489, benefit       19.0, efficiency      0.039
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:446:1 size  +382, benefit      104.0, efficiency      0.272
  ! Inline function call at OreLocator.mnd:459:28                size  +383, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:536:30                size  +383, benefit      100.0, efficiency      0.261

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-62 instructions):
 
   164 jump *label39 equal *tmp79 false
   165 set *tmp51 false
   166 jump *label29 always
-    * set *tmp80 null
   167 jump *label40 always
   168 label *label39
-    * set *tmp80 null
   169 label *label40
   170 op sub *tmp81 :locateOreAway:x .coreX
   171 op abs *tmp82 *tmp81
 
   187 label *label43
   188 set *tmp92 null
   189 label *label44
-    * set *tmp90 *tmp92
   190 jump *label42 always
   191 label *label41
-    * set *tmp90 null
   192 label *label42
   193 op greaterThanEq *tmp93 :locateOreAway:coreDist 7
   194 jump *label45 equal *tmp93 false
 
   219 jump *label53 equal *tmp109 false
   220 set *tmp97 true
   221 jump *label49 always
-    * set *tmp110 null
   222 jump *label54 always
   223 label *label53
-    * set *tmp110 null
   224 label *label54
   225 label *label51
   226 op add :visited:i :visited:i 1
 
   249 label *label47
   250 set *tmp96 null
   251 label *label48
-    * set *tmp94 *tmp96
   252 jump *label46 always
   253 label *label45
-    * set *tmp94 null
   254 label *label46
   255 label *label31
   256 jump *label30 always
 
   266 op greaterThan *tmp117 :findDrillLocationLocal:capacity 0
   267 set :findDrillLocationLocal*retval *tmp117
   268 jump *label20 always
-    * set *tmp116 null
   269 jump *label58 always
   270 label *label57
-    * set *tmp116 null
   271 label *label58
   272 op greaterThanEq *tmp118 :findDrillLocationLocal:limit 1000
   273 jump *label59 equal *tmp118 false
   274 set *tmp120 .mapSpots
   275 op add .mapSpots .mapSpots 1
-    * set *tmp119 *tmp120
   276 jump *label60 always
   277 label *label59
-    * set *tmp119 null
   278 label *label60
   279 set :moveTo.3:x :findDrillLocationLocal:oreX
   280 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   324 op lessThan *tmp132 :findDrillLocationLocal:limit 1000
   325 jump *label72 equal *tmp132 false
   326 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp133 :findDrillLocationLocal:score
   327 jump *label73 always
   328 label *label72
-    * set *tmp133 null
   329 label *label73
   330 op greaterThanEq *tmp134 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   331 jump *label74 equal *tmp134 false
 
   346 op add .count .count 1
   347 set *tmp143 .count
   348 write :saveLocation:y bank1 *tmp143
-    * set *tmp145 .locations
   349 op add .locations .locations 1
   350 label *label76
   351 ucontrol unbind
 
   356 label *label74
   357 set *tmp135 null
   358 label *label75
-    * set *tmp129 *tmp135
   359 jump *label71 always
   360 label *label70
-    * set *tmp129 null
   361 label *label71
   362 op greaterThan *tmp146 :findDrillLocationLocal:score :findDrillLocationLocal:best
   363 jump *label77 equal *tmp146 false
 
   366 op add *tmp149 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   367 set :findDrillLocationLocal:bestY *tmp149
   368 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp147 :findDrillLocationLocal:best
   369 jump *label78 always
   370 label *label77
-    * set *tmp147 null
   371 label *label78
   372 op lessThanEq *tmp150 :findDrillLocationLocal:score :findDrillLocationLocal:last
   373 jump *label79 equal *tmp150 false
   374 jump *label68 always
-    * set *tmp151 null
   375 jump *label80 always
   376 label *label79
-    * set *tmp151 null
   377 label *label80
   378 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   379 op mul *tmp152 :findDrillLocationLocal:diffX 1.1
 
   398 op lessThan *tmp165 *tmp164 7
   399 jump *label83 equal *tmp165 false
   400 jump *label68 always
-    * set *tmp166 null
   401 jump *label84 always
   402 label *label83
-    * set *tmp166 null
   403 label *label84
   404 label *label67
   405 jump *label66 always
 
   423 op add .count .count 1
   424 set *tmp176 .count
   425 write :saveLocation.1:y bank1 *tmp176
-    * set *tmp178 .locations
   426 op add .locations .locations 1
   427 label *label87
-    * set *tmp168 null
   428 jump *label86 always
   429 label *label85
-    * set *tmp168 null
   430 label *label86
   431 label *label27
   432 jump *label26 always
 
   444 jump *label89 equal *tmp183 false
   445 set :shiftMask*retval 0
   446 jump *label88 always
-    * set *tmp184 null
   447 jump *label90 always
   448 label *label89
-    * set *tmp184 null
   449 label *label90
   450 op mul *tmp185 7 :shiftMask:shiftY
   451 op add *tmp186 :shiftMask:shiftX *tmp185
 
   457 op and *tmp190 :shiftMask:mask :shiftMask:clearMask
   458 op shl *tmp191 *tmp190 :shiftMask:shift
   459 set :shiftMask:mask *tmp191
-    * set *tmp188 :shiftMask:mask
   460 jump *label92 always
   461 label *label91
   462 op sub *tmp192 0 :shiftMask:shift
   463 op shr :shiftMask:mask :shiftMask:mask *tmp192
-    * set *tmp188 :shiftMask:mask
   464 label *label92
   465 op notEqual *tmp193 :shiftMask:shiftX 0
   466 jump *label93 equal *tmp193 false
 
   470 op greaterThan *tmp197 :shiftMask:shiftX 0
   471 jump *label95 equal *tmp197 false
   472 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp198 :shiftMask:keep
   473 jump *label96 always
   474 label *label95
-    * set *tmp198 null
   475 label *label96
   476 op shl *tmp199 :shiftMask:keep 7
   477 op or :shiftMask:keep :shiftMask:keep *tmp199
 
   480 op shl *tmp201 :shiftMask:keep 21
   481 op or :shiftMask:keep :shiftMask:keep *tmp201
   482 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp194 :shiftMask:mask
   483 jump *label94 always
   484 label *label93
-    * set *tmp194 null
   485 label *label94
   486 set :shiftMask*retval :shiftMask:mask
   487 jump *label88 always
 
   508 op add *tmp210 *tmp209 :findPossiblePlacement:x
   509 set :findPossiblePlacement*retval *tmp210
   510 jump *label97 always
-    * set *tmp207 null
   511 jump *label105 always
   512 label *label104
-    * set *tmp207 null
   513 label *label105
   514 op sub *tmp211 3 :findPossiblePlacement:width
   515 op greaterThan *tmp212 :findPossiblePlacement:x *tmp211
   516 jump *label106 equal *tmp212 false
   517 jump *label103 always
-    * set *tmp213 null
   518 jump *label107 always
   519 label *label106
-    * set *tmp213 null
   520 label *label107
   521 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   522 label *label102
 
   527 op greaterThan *tmp215 :findPossiblePlacement:y *tmp214
   528 jump *label108 equal *tmp215 false
   529 jump *label100 always
-    * set *tmp216 null
   530 jump *label109 always
   531 label *label108
-    * set *tmp216 null
   532 label *label109
   533 label *label99
   534 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   558 jump *label114 equal *tmp220 false
   559 set :tryPlaceGenerator*retval false
   560 jump *label110 always
-    * set *tmp221 null
   561 jump *label115 always
   562 label *label114
-    * set *tmp221 null
   563 label *label115
   564 op add *tmp222 :tryPlaceGenerator:centerX 0.5
   565 op add *tmp223 *tmp222 :tryPlaceGenerator:c
 
   575 set .generatorY *tmp229
   576 op shl *tmp230 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   577 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
-    * set *tmp219 :tryPlaceGenerator:terrainMask
   578 jump *label113 always
   579 label *label112
   580 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   592 jump *label117 equal *tmp232 false
   593 set :tryPlaceGenerator*retval false
   594 jump *label110 always
-    * set *tmp233 null
   595 jump *label118 always
   596 label *label117
-    * set *tmp233 null
   597 label *label118
   598 op add *tmp234 :tryPlaceGenerator:centerX 0.5
   599 op add *tmp235 *tmp234 :tryPlaceGenerator:c
 
   609 set .generatorY *tmp241
   610 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   611 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
-    * set *tmp219 :tryPlaceGenerator:terrainMask
   612 label *label113
   613 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   614 set :findPossiblePlacement:placementMask 1
 
   625 jump *label120 equal *tmp244 false
   626 set :tryPlaceGenerator*retval false
   627 jump *label110 always
-    * set *tmp245 null
   628 jump *label121 always
   629 label *label120
-    * set *tmp245 null
   630 label *label121
   631 op add *tmp246 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   632 set .nodeX *tmp246
 
   649 jump *label123 equal *tmp250 false
   650 set :tryPlaceGenerator*retval false
   651 jump *label110 always
-    * set *tmp251 null
   652 jump *label124 always
   653 label *label123
-    * set *tmp251 null
   654 label *label124
   655 op add *tmp252 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   656 set .panelX *tmp252
 
   673 jump *label126 equal *tmp256 false
   674 set :tryPlaceGenerator*retval false
   675 jump *label110 always
-    * set *tmp257 null
   676 jump *label127 always
   677 label *label126
-    * set *tmp257 null
   678 label *label127
   679 op add *tmp258 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   680 set .batteryX *tmp258
 
   887 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
   888 op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   889 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp335
-    * set *tmp329 :layoutThoriumDrillAtLocation:cornersMask
   890 jump *label152 always
   891 label *label151
-    * set *tmp329 null
   892 label *label152
   893 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   894 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   911 set .containerY *tmp342
   912 op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   913 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
-    * set *tmp338 :layoutThoriumDrillAtLocation:terrainMask
   914 jump *label155 always
   915 label *label154
-    * set *tmp338 null
   916 label *label155
   917 set :createFixedMatrix.4:row0 0b1111
   918 set :createFixedMatrix.4:row1 0b1111
 
   948 jump *label159 equal *tmp356 false
   949 set :layoutThoriumDrillAtLocation*retval true
   950 jump *label141 always
-    * set *tmp357 null
   951 jump *label160 always
   952 label *label159
-    * set *tmp357 null
   953 label *label160
   954 set :layoutThoriumDrillAtLocation:sx 3
   955 set :layoutThoriumDrillAtLocation:sy 3
 
  1007 jump *label171 equal *tmp365 false
  1008 set :layoutThoriumDrillAtLocation*retval true
  1009 jump *label141 always
-    * set *tmp366 null
  1010 jump *label172 always
  1011 label *label171
-    * set *tmp366 null
  1012 label *label172
  1013 label *label162
  1014 multijump *tmp358 0 0 (m:marker0)
 
  1058 jump *label177 equal *tmp367 false
  1059 set :layoutThoriumDrill*retval false
  1060 jump *label175 always
-    * set *tmp368 null
  1061 jump *label178 always
  1062 label *label177
-    * set *tmp368 null
  1063 label *label178
  1064 setaddr :layoutThoriumDrillAtLocation*retaddr *label179 (h:*label179)
  1065 call *label14 *invalid :layoutThoriumDrillAtLocation*retval (m:*label179) (h:*label179)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   182 op equal *tmp91 :locateOreAway:lastY :locateOreAway:y
   183 jump *label43 equal *tmp91 false
   184 jump *label31 always
-    * set *tmp92 null
   185 jump *label44 always
   186 label *label43
-    * set *tmp92 null
   187 label *label44
   188 jump *label42 always
   189 label *label41
 
   242 label *label55
   243 set *tmp112 null
   244 label *label56
-    * set *tmp96 *tmp112
   245 jump *label48 always
   246 label *label47
-    * set *tmp96 null
   247 label *label48
   248 jump *label46 always
   249 label *label45
 
   267 label *label58
   268 op greaterThanEq *tmp118 :findDrillLocationLocal:limit 1000
   269 jump *label59 equal *tmp118 false
-    * set *tmp120 .mapSpots
   270 op add .mapSpots .mapSpots 1
   271 jump *label60 always
   272 label *label59
 
   346 ucontrol unbind
   347 set :findDrillLocationLocal*retval true
   348 jump *label20 always
-    * set *tmp135 null
   349 jump *label75 always
   350 label *label74
-    * set *tmp135 null
   351 label *label75
   352 jump *label71 always
   353 label *label70

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   237 printflush message1
   238 set *tmp51 true
   239 jump *label29 always
-    * set *tmp112 null
   240 jump *label56 always
   241 label *label55
-    * set *tmp112 null
   242 label *label56
   243 jump *label48 always
   244 label *label47

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-94 instructions):
 
    34 op shl *tmp31 :createFixedMatrix:row5 35
    35 op or *tmp32 *tmp30 *tmp31
    36 op shl *tmp33 :createFixedMatrix:row6 42
-    * op or *tmp34 *tmp32 *tmp33
-    * set *tmp21 *tmp34
+   37 op or *tmp21 *tmp32 *tmp33
    38 label *label18
    39 set :e *tmp21
    40 assertequals :a :e "Column right"
 
    45 end
    46 label *label8
    47 ubind :findDrillLocationLocal:unit
-    * set *tmp35 .locations
-    * set .locationsStart *tmp35
+   48 set .locationsStart .locations
    49 set .coreX :findDrillLocationLocal:x
    50 set .coreY :findDrillLocationLocal:y
    51 set :findDrillLocationLocal:capacity 0
 
    80 label *label22
    81 label *label21
    82 op div *tmp44 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp45 *tmp44 2
-    * set .mapTotal *tmp45
+   83 op pow .mapTotal *tmp44 2
    84 set :findDrillLocationLocal:oreX 0
    85 set :findDrillLocationLocal:oreY 0
    86 label *label26
 
    89 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    90 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    91 op sub *tmp46 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp47 *tmp46 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp47
-    * op min *tmp48 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp48
+   92 op mul :findDrillLocationLocal:maxDistance *tmp46 .attenuationRate
+   93 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    94 op div *tmp49 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp50 *tmp49 2
-    * set .mapTotal *tmp50
+   95 op pow .mapTotal *tmp49 2
    96 set :locateOreAway:ore :findDrillLocationLocal:item
    97 set :locateOreAway:x :findDrillLocationLocal:oreX
    98 set :locateOreAway:y :findDrillLocationLocal:oreY
    99 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp52 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp52
+  100 op mul :locateOreAway:distance 3.8197185279121366 .angle
   101 set :locateOreAway:lastX -1
   102 set :locateOreAway:lastY -1
-    * op max *tmp53 .angle @pi
-    * set .angle *tmp53
-    * op mul *tmp54 .angle .angle
-    * set .mapProgress *tmp54
+  103 op max .angle .angle @pi
+  104 op mul .mapProgress .angle .angle
   105 label *label30
   106 op lessThan *tmp55 :locateOreAway:distance :locateOreAway:distanceLimit
   107 jump *label32 equal *tmp55 false
-    * op div *tmp56 .angle @degToRad
-    * set :locateOreAway:a *tmp56
+  108 op div :locateOreAway:a .angle @degToRad
   109 op sin *tmp57 :locateOreAway:a
   110 op mul *tmp58 *tmp57 :locateOreAway:distance
   111 op add *tmp59 .coreX *tmp58
 
   114 set :limit:low 5
   115 set :limit:high *tmp60
   116 op max *tmp62 :limit:value :limit:low
-    * op min *tmp63 *tmp62 :limit:high
-    * set *tmp61 *tmp63
+  117 op min *tmp61 *tmp62 :limit:high
   118 label *label33
   119 set :locateOreAway:lx *tmp61
   120 op cos *tmp64 :locateOreAway:a
 
   125 set :limit.1:low 5
   126 set :limit.1:high *tmp67
   127 op max *tmp69 :limit.1:value :limit.1:low
-    * op min *tmp70 *tmp69 :limit.1:high
-    * set *tmp68 *tmp70
+  128 op min *tmp68 *tmp69 :limit.1:high
   129 label *label34
   130 set :locateOreAway:ly *tmp68
   131 set :moveTo.2:x :locateOreAway:lx
 
   143 label *label35
   144 op div *tmp74 3.8197185279121366 :locateOreAway:distance
   145 op add .angle .angle *tmp74
-    * op mul *tmp75 .angle .angle
-    * set .mapProgress *tmp75
-    * op mul *tmp76 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp76
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp77 *tmp78
+  146 op mul .mapProgress .angle .angle
+  147 op mul :locateOreAway:distance 3.8197185279121366 .angle
+  148 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp77 0
   149 op equal *tmp79 *tmp77 false
   150 jump *label39 equal *tmp79 false
   151 set *tmp51 false
 
   157 op abs *tmp82 *tmp81
   158 op sub *tmp83 :locateOreAway:y .coreY
   159 op abs *tmp84 *tmp83
-    * op max *tmp85 *tmp82 *tmp84
-    * set :locateOreAway:coreDist *tmp85
+  160 op max :locateOreAway:coreDist *tmp82 *tmp84
   161 op sub *tmp86 :locateOreAway:x :locateOreAway:lx
   162 op sub *tmp87 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp88 *tmp86 *tmp87
-    * set :locateOreAway:unitDist *tmp88
+  163 op len :locateOreAway:unitDist *tmp86 *tmp87
   164 op equal *tmp89 :locateOreAway:lastX :locateOreAway:x
   165 jump *label41 equal *tmp89 false
   166 op equal *tmp91 :locateOreAway:lastY :locateOreAway:y
 
   184 set :visited:i .locationsStart
   185 label *label50
   186 jump *label52 greaterThanEq :visited:i *tmp98
-    * op mul *tmp99 4 :visited:i
-    * set :visited:index *tmp99
+  187 op mul :visited:index 4 :visited:i
   188 op add *tmp100 :visited:index 2
-    * set *tmp101 *tmp100
-    * read *tmp102 bank1 *tmp101
-    * set :visited:lx *tmp102
+  189 read :visited:lx bank1 *tmp100
   190 op add *tmp103 :visited:index 3
-    * set *tmp104 *tmp103
-    * read *tmp105 bank1 *tmp104
-    * set :visited:ly *tmp105
+  191 read :visited:ly bank1 *tmp103
   192 op sub *tmp106 :visited:x :visited:lx
   193 op sub *tmp107 :visited:y :visited:ly
   194 op len *tmp108 *tmp106 *tmp107
 
   211 jump *label55 equal *tmp111 false
   212 op div *tmp113 7.639437055824273 :locateOreAway:distance
   213 op add .angle .angle *tmp113
-    * op mul *tmp114 .angle .angle
-    * set .mapProgress *tmp114
+  214 op mul .mapProgress .angle .angle
   215 printflush message1
   216 set *tmp51 true
   217 jump *label29 always
 
   235 set :findDrillLocationLocal:oreY :locateOreAway:y
   236 op equal *tmp115 *tmp51 false
   237 jump *label57 equal *tmp115 false
-    * op greaterThan *tmp117 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp117
+  238 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   239 jump *label20 always
   240 jump *label58 always
   241 label *label57
 
   278 wait 1e-15
   279 read *tmp126 processor1 ":findBestPosition*finished"
   280 jump *label69 equal *tmp126 false
-    * read *tmp8 processor1 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp8
-    * read *tmp9 processor1 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp9
-    * read *tmp127 processor1 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp127
+  281 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
+  282 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
+  283 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
   284 op greaterThan *tmp128 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   285 jump *label70 equal *tmp128 false
-    * op add *tmp130 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:dx *tmp130
-    * op add *tmp131 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:dy *tmp131
+  286 op add :findDrillLocationLocal:dx :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  287 op add :findDrillLocationLocal:dy :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   288 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   289 op lessThan *tmp132 :findDrillLocationLocal:limit 1000
   290 jump *label72 equal *tmp132 false
 
   303 sensor *tmp138 :saveLocation:item @id
   304 write *tmp138 bank1 *tmp136
   305 op add .count .count 1
-    * set *tmp139 .count
-    * write :saveLocation:value bank1 *tmp139
+  306 write :saveLocation:value bank1 .count
   307 op add .count .count 1
-    * set *tmp141 .count
-    * write :saveLocation:x bank1 *tmp141
+  308 write :saveLocation:x bank1 .count
   309 op add .count .count 1
-    * set *tmp143 .count
-    * write :saveLocation:y bank1 *tmp143
+  310 write :saveLocation:y bank1 .count
   311 op add .locations .locations 1
   312 label *label76
   313 ucontrol unbind
 
   321 label *label71
   322 op greaterThan *tmp146 :findDrillLocationLocal:score :findDrillLocationLocal:best
   323 jump *label77 equal *tmp146 false
-    * op add *tmp148 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:bestX *tmp148
-    * op add *tmp149 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:bestY *tmp149
+  324 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  325 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   326 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   327 jump *label78 always
   328 label *label77
 
   334 label *label79
   335 label *label80
   336 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp152 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp152
+  337 op mul :round:x :findDrillLocationLocal:diffX 1.1
   338 op add *tmp154 :round:x 0.5
-    * op floor *tmp155 *tmp154
-    * set *tmp153 *tmp155
+  339 op floor *tmp153 *tmp154
   340 label *label81
   341 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp153
-    * op mul *tmp156 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp156
+  342 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   343 op add *tmp158 :round.1:x 0.5
-    * op floor *tmp159 *tmp158
-    * set *tmp157 *tmp159
+  344 op floor *tmp157 *tmp158
   345 label *label82
   346 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp157
   347 op sub *tmp160 :findDrillLocationLocal:oreX .coreX
 
   369 sensor *tmp171 :saveLocation.1:item @id
   370 write *tmp171 bank1 *tmp169
   371 op add .count .count 1
-    * set *tmp172 .count
-    * write :saveLocation.1:value bank1 *tmp172
+  372 write :saveLocation.1:value bank1 .count
   373 op add .count .count 1
-    * set *tmp174 .count
-    * write :saveLocation.1:x bank1 *tmp174
+  374 write :saveLocation.1:x bank1 .count
   375 op add .count .count 1
-    * set *tmp176 .count
-    * write :saveLocation.1:y bank1 *tmp176
+  376 write :saveLocation.1:y bank1 .count
   377 op add .locations .locations 1
   378 label *label87
   379 jump *label86 always
 
   399 label *label89
   400 label *label90
   401 op mul *tmp185 7 :shiftMask:shiftY
-    * op add *tmp186 :shiftMask:shiftX *tmp185
-    * set :shiftMask:shift *tmp186
+  402 op add :shiftMask:shift :shiftMask:shiftX *tmp185
   403 op greaterThan *tmp187 :shiftMask:shift 0
   404 jump *label91 equal *tmp187 false
-    * op shr *tmp189 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp189
+  405 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   406 op and *tmp190 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp191 *tmp190 :shiftMask:shift
-    * set :shiftMask:mask *tmp191
+  407 op shl :shiftMask:mask *tmp190 :shiftMask:shift
   408 jump *label92 always
   409 label *label91
   410 op sub *tmp192 0 :shiftMask:shift
 
   413 op notEqual *tmp193 :shiftMask:shiftX 0
   414 jump *label93 equal *tmp193 false
   415 op abs *tmp195 :shiftMask:shiftX
-    * op shr *tmp196 0b1111111 *tmp195
-    * set :shiftMask:keep *tmp196
+  416 op shr :shiftMask:keep 0b1111111 *tmp195
   417 op greaterThan *tmp197 :shiftMask:shiftX 0
   418 jump *label95 equal *tmp197 false
   419 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   442 jump *label100 greaterThan :findPossiblePlacement:y 3
   443 op add *tmp202 :findPossiblePlacement:y 3
   444 op mul *tmp203 7 *tmp202
-    * op shl *tmp204 :findPossiblePlacement:placementMask *tmp203
-    * set :findPossiblePlacement:mask *tmp204
+  445 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp203
   446 set :findPossiblePlacement:x -3
   447 label *label101
   448 jump *label103 greaterThan :findPossiblePlacement:x 3
 
   451 jump *label104 equal *tmp206 false
   452 op mul *tmp208 :findPossiblePlacement:y 7
   453 op add *tmp209 24 *tmp208
-    * op add *tmp210 *tmp209 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp210
+  454 op add :findPossiblePlacement*retval *tmp209 :findPossiblePlacement:x
   455 jump *label97 always
   456 jump *label105 always
   457 label *label104
 
   495 label *label111
   496 set :tryPlaceGenerator:c :findPossiblePlacement:x
   497 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp217 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp217
+  498 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   499 op greaterThanEq *tmp218 :tryPlaceGenerator:shift 0
   500 jump *label112 equal *tmp218 false
   501 op lessThan *tmp220 :tryPlaceGenerator:shift 0
 
   506 label *label114
   507 label *label115
   508 op add *tmp222 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp223 *tmp222 :tryPlaceGenerator:c
-    * set .water2X *tmp223
+  509 op add .water2X *tmp222 :tryPlaceGenerator:c
   510 op add *tmp224 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp225 *tmp224 :tryPlaceGenerator:r
-    * set .water2Y *tmp225
+  511 op add .water2Y *tmp224 :tryPlaceGenerator:r
   512 op add *tmp226 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp227 *tmp226 :tryPlaceGenerator:c
-    * set .generatorX *tmp227
+  513 op add .generatorX *tmp226 :tryPlaceGenerator:c
   514 op add *tmp228 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp229 *tmp228 :tryPlaceGenerator:r
-    * set .generatorY *tmp229
+  515 op add .generatorY *tmp228 :tryPlaceGenerator:r
   516 op shl *tmp230 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   517 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
   518 jump *label113 always
 
   526 label *label116
   527 set :tryPlaceGenerator:c :findPossiblePlacement:x
   528 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp231 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp231
+  529 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   530 op lessThan *tmp232 :tryPlaceGenerator:shift 0
   531 jump *label117 equal *tmp232 false
   532 set :tryPlaceGenerator*retval false
 
   535 label *label117
   536 label *label118
   537 op add *tmp234 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp235 *tmp234 :tryPlaceGenerator:c
-    * set .water2X *tmp235
+  538 op add .water2X *tmp234 :tryPlaceGenerator:c
   539 op add *tmp236 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp237 *tmp236 :tryPlaceGenerator:r
-    * set .water2Y *tmp237
+  540 op add .water2Y *tmp236 :tryPlaceGenerator:r
   541 op add *tmp238 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp239 *tmp238 :tryPlaceGenerator:c
-    * set .generatorX *tmp239
+  542 op add .generatorX *tmp238 :tryPlaceGenerator:c
   543 op add *tmp240 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp241 *tmp240 :tryPlaceGenerator:r
-    * set .generatorY *tmp241
+  544 op add .generatorY *tmp240 :tryPlaceGenerator:r
   545 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   546 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
   547 label *label113
 
   554 label *label119
   555 set :tryPlaceGenerator:c :findPossiblePlacement:x
   556 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp243 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp243
+  557 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   558 op lessThan *tmp244 :tryPlaceGenerator:shift 0
   559 jump *label120 equal *tmp244 false
   560 set :tryPlaceGenerator*retval false
 
   562 jump *label121 always
   563 label *label120
   564 label *label121
-    * op add *tmp246 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .nodeX *tmp246
-    * op add *tmp247 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .nodeY *tmp247
+  565 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  566 op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   567 op shl *tmp248 1 :tryPlaceGenerator:shift
   568 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp248
   569 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   575 label *label122
   576 set :tryPlaceGenerator:c :findPossiblePlacement:x
   577 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp249 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp249
+  578 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   579 op lessThan *tmp250 :tryPlaceGenerator:shift 0
   580 jump *label123 equal *tmp250 false
   581 set :tryPlaceGenerator*retval false
 
   583 jump *label124 always
   584 label *label123
   585 label *label124
-    * op add *tmp252 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp252
-    * op add *tmp253 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp253
+  586 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  587 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   588 op shl *tmp254 1 :tryPlaceGenerator:shift
   589 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp254
   590 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   596 label *label125
   597 set :tryPlaceGenerator:c :findPossiblePlacement:x
   598 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp255 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp255
+  599 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   600 op lessThan *tmp256 :tryPlaceGenerator:shift 0
   601 jump *label126 equal *tmp256 false
   602 set :tryPlaceGenerator*retval false
 
   604 jump *label127 always
   605 label *label126
   606 label *label127
-    * op add *tmp258 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp258
-    * op add *tmp259 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp259
+  607 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  608 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   609 op shl *tmp260 1 :tryPlaceGenerator:shift
   610 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp260
   611 set :tryPlaceGenerator*retval true
 
   621 jump *label131 lessThan :createBlockMaskRow:c -4
   622 op shl *tmp261 :createBlockMaskRow:result 1
   623 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y *tmp264 *tmp263 *tmp265
-    * op or *tmp266 *tmp261 *tmp263
-    * set :createBlockMaskRow:result *tmp266
+  624 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  625 op or :createBlockMaskRow:result *tmp261 *tmp263
   626 label *label130
   627 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   628 jump *label129 always
 
   650 setaddr :createBlockMaskRow*retaddr *label134 (h:*label134)
   651 call *label12 *invalid :createBlockMaskRow*retval (m:*label134) (h:*label134)
   652 label *label134
-    * set *tmp272 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp272
+  653 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   654 op add *tmp273 :createAdjacentMask:y 3
   655 set :createBlockMaskRow:x :createAdjacentMask:x
   656 set :createBlockMaskRow:y *tmp273
   657 setaddr :createBlockMaskRow*retaddr *label135 (h:*label135)
   658 call *label12 *invalid :createBlockMaskRow*retval (m:*label135) (h:*label135)
   659 label *label135
-    * set *tmp274 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp274
+  660 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   661 set :createAdjacentMask:r 2
   662 label *label136
   663 jump *label138 lessThan :createAdjacentMask:r -4
 
   667 setaddr :createBlockMaskRow*retaddr *label139 (h:*label139)
   668 call *label12 *invalid :createBlockMaskRow*retval (m:*label139) (h:*label139)
   669 label *label139
-    * set *tmp276 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp276
+  670 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   671 op shl *tmp277 :createAdjacentMask:row1 1
   672 op or *tmp278 :createAdjacentMask:row2 *tmp277
   673 op shr *tmp279 :createAdjacentMask:row1 1
   674 op or *tmp280 *tmp278 *tmp279
-    * op or *tmp281 *tmp280 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp281
+  675 op or :createAdjacentMask:mask *tmp280 :createAdjacentMask:row0
   676 op shl *tmp282 :createAdjacentMask:result 7
   677 op and *tmp283 :createAdjacentMask:mask 0xFE
-    * op or *tmp284 *tmp282 *tmp283
-    * set :createAdjacentMask:result *tmp284
+  678 op or :createAdjacentMask:result *tmp282 *tmp283
   679 set :createAdjacentMask:row2 :createAdjacentMask:row1
   680 set :createAdjacentMask:row1 :createAdjacentMask:row0
   681 label *label137
   682 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   683 jump *label136 always
   684 label *label138
-    * op shr *tmp285 :createAdjacentMask:result 1
-    * set *tmp270 *tmp285
+  685 op shr *tmp270 :createAdjacentMask:result 1
   686 label *label133
   687 set .adjacentMask *tmp270
   688 label *label140
   689 wait 1e-15
   690 read *tmp286 processor1 ":createTerrainMask*finished"
   691 jump *label140 equal *tmp286 false
-    * read *tmp287 processor1 ":createTerrainMask*retval"
-    * set .terrainMask *tmp287
-    * op or *tmp288 .adjacentMask .terrainMask
-    * set :createCombinedMask*retval *tmp288
+  692 read .terrainMask processor1 ":createTerrainMask*retval"
+  693 op or :createCombinedMask*retval .adjacentMask .terrainMask
   694 jump *label132 always
   695 set :createCombinedMask*retval null
   696 label *label132
 
   723 setaddr :createCombinedMask*retaddr *label146 (h:*label146)
   724 call *label13 *invalid :createCombinedMask*retval (m:*label146) (h:*label146)
   725 label *label146
-    * set *tmp292 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp292
+  726 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   727 set :createFixedMatrix.1:row0 0b0000000
   728 set :createFixedMatrix.1:row1 0b0000000
   729 set :createFixedMatrix.1:row2 0b0011100
 
   743 op shl *tmp303 :createFixedMatrix.1:row5 35
   744 op or *tmp304 *tmp302 *tmp303
   745 op shl *tmp305 :createFixedMatrix.1:row6 42
-    * op or *tmp306 *tmp304 *tmp305
-    * set *tmp293 *tmp306
+  746 op or *tmp293 *tmp304 *tmp305
   747 label *label147
-    * op or *tmp307 :layoutThoriumDrillAtLocation:plainTerrainMask *tmp293
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp307
+  748 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp293
   749 set :createFixedMatrix.2:row0 0b1000001
   750 set :createFixedMatrix.2:row1 0b0000000
   751 set :createFixedMatrix.2:row2 0b0011100
 
   765 op shl *tmp318 :createFixedMatrix.2:row5 35
   766 op or *tmp319 *tmp317 *tmp318
   767 op shl *tmp320 :createFixedMatrix.2:row6 42
-    * op or *tmp321 *tmp319 *tmp320
-    * set *tmp308 *tmp321
+  768 op or *tmp308 *tmp319 *tmp320
   769 label *label148
-    * op or *tmp322 :layoutThoriumDrillAtLocation:terrainMask *tmp308
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp322
+  770 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp308
   771 set :createFixedMatrix.3:row0 0b11
   772 set :createFixedMatrix.3:row1 0b11
   773 op shl *tmp324 :createFixedMatrix.3:row0 0
   774 op shl *tmp325 :createFixedMatrix.3:row1 7
-    * op or *tmp326 *tmp324 *tmp325
-    * set *tmp323 *tmp326
+  775 op or *tmp323 *tmp324 *tmp325
   776 label *label149
   777 set :layoutThoriumDrillAtLocation:mask2x2 *tmp323
   778 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   784 label *label150
   785 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   786 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp327 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp327
+  787 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   788 op greaterThanEq *tmp328 :layoutThoriumDrillAtLocation:shift 0
   789 jump *label151 equal *tmp328 false
   790 op add *tmp330 .drillX 0.5
-    * op add *tmp331 *tmp330 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp331
+  791 op add .water1X *tmp330 :layoutThoriumDrillAtLocation:c
   792 op add *tmp332 .drillY 0.5
-    * op add *tmp333 *tmp332 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp333
+  793 op add .water1Y *tmp332 :layoutThoriumDrillAtLocation:r
   794 op shl *tmp334 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   795 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
   796 op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   807 label *label153
   808 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   809 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp336 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp336
+  810 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   811 op greaterThanEq *tmp337 :layoutThoriumDrillAtLocation:shift 0
   812 jump *label154 equal *tmp337 false
   813 op add *tmp339 .drillX 0.5
-    * op add *tmp340 *tmp339 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp340
+  814 op add .containerX *tmp339 :layoutThoriumDrillAtLocation:c
   815 op add *tmp341 .drillY 0.5
-    * op add *tmp342 *tmp341 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp342
+  816 op add .containerY *tmp341 :layoutThoriumDrillAtLocation:r
   817 op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   818 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
   819 jump *label155 always
 
   823 set :createFixedMatrix.4:row1 0b1111
   824 op shl *tmp345 :createFixedMatrix.4:row0 0
   825 op shl *tmp346 :createFixedMatrix.4:row1 7
-    * op or *tmp347 *tmp345 *tmp346
-    * set *tmp344 *tmp347
+  826 op or *tmp344 *tmp345 *tmp346
   827 label *label156
   828 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp344
   829 set :createFixedMatrix.5:row0 0b11
 
   836 op shl *tmp352 :createFixedMatrix.5:row2 14
   837 op or *tmp353 *tmp351 *tmp352
   838 op shl *tmp354 :createFixedMatrix.5:row3 21
-    * op or *tmp355 *tmp353 *tmp354
-    * set *tmp348 *tmp355
+  839 op or *tmp348 *tmp353 *tmp354
   840 label *label157
   841 set :layoutThoriumDrillAtLocation:generatorVertical *tmp348
   842 set :tryPlaceGenerator:centerX .drillX
 
   847 setaddr :tryPlaceGenerator*retaddr *label158 (h:*label158)
   848 call *label11 *invalid :tryPlaceGenerator*retval (m:*label158) (h:*label158)
   849 label *label158
-    * set *tmp356 :tryPlaceGenerator*retval
-    * jump *label159 equal *tmp356 false
+  850 jump *label159 equal :tryPlaceGenerator*retval false
   851 set :layoutThoriumDrillAtLocation*retval true
   852 jump *label141 always
   853 jump *label160 always
 
   872 set :layoutThoriumDrillAtLocation:sy -3
   873 setaddr *tmp358 *label167
   874 label *label161
-    * op sub *tmp359 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp359
-    * op sub *tmp360 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp360
+  875 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  876 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   877 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   878 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   879 setaddr :createCombinedMask*retaddr *label168 (h:*label168)
   880 call *label13 *invalid :createCombinedMask*retval (m:*label168) (h:*label168)
   881 label *label168
-    * set *tmp361 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp361
+  882 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   883 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   884 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   885 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
 
   887 call *label9 *invalid :shiftMask*retval (m:*label169) (h:*label169)
   888 label *label169
   889 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or *tmp362 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp362
+  890 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   891 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
   892 set .lastShiftedMask :layoutThoriumDrillAtLocation:shiftedMask
   893 set .lastCombinedMask :layoutThoriumDrillAtLocation:combinedMask
 
   901 setaddr :tryPlaceGenerator*retaddr *label170 (h:*label170)
   902 call *label11 *invalid :tryPlaceGenerator*retval (m:*label170) (h:*label170)
   903 label *label170
-    * set *tmp365 :tryPlaceGenerator*retval
-    * jump *label171 equal *tmp365 false
+  904 jump *label171 equal :tryPlaceGenerator*retval false
   905 set :layoutThoriumDrillAtLocation*retval true
   906 jump *label141 always
   907 jump *label172 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    84 set :findDrillLocationLocal:oreX 0
    85 set :findDrillLocationLocal:oreY 0
    86 label *label26
-    * jump *label28 equal true false
    87 set :findDrillLocationLocal:best -1
    88 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    89 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   265 label *label61
   266 set :findDrillLocationLocal:last 0
   267 label *label66
-    * jump *label68 equal true false
   268 write @unit processor1 ":findBestPosition:unit"
   269 write :findDrillLocationLocal:oreX processor1 ":findBestPosition:x"
   270 write :findDrillLocationLocal:oreY processor1 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-36 instructions):
 
    70 set :moveTo.1:radius 6
    71 label *label23
    72 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp41
-    * op equal *tmp42 *tmp41 false
-    * jump *label25 equal *tmp42 false
+   73 jump *label25 notEqual *tmp41 false
    74 op sub *tmp43 :moveTo.1:radius 0.5
    75 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp43
    76 label *label24
 
   101 op max .angle .angle @pi
   102 op mul .mapProgress .angle .angle
   103 label *label30
-    * op lessThan *tmp55 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label32 equal *tmp55 false
+  104 jump *label32 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
   105 op div :locateOreAway:a .angle @degToRad
   106 op sin *tmp57 :locateOreAway:a
   107 op mul *tmp58 *tmp57 :locateOreAway:distance
 
   130 set :moveTo.2:radius 5
   131 label *label36
   132 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp71
-    * op equal *tmp72 *tmp71 false
-    * jump *label38 equal *tmp72 false
+  133 jump *label38 notEqual *tmp71 false
   134 op sub *tmp73 :moveTo.2:radius 0.5
   135 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp73
   136 label *label37
 
   142 op mul .mapProgress .angle .angle
   143 op mul :locateOreAway:distance 3.8197185279121366 .angle
   144 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp77 0
-    * op equal *tmp79 *tmp77 false
-    * jump *label39 equal *tmp79 false
+  145 jump *label39 notEqual *tmp77 false
   146 set *tmp51 false
   147 jump *label29 always
   148 jump *label40 always
 
   156 op sub *tmp86 :locateOreAway:x :locateOreAway:lx
   157 op sub *tmp87 :locateOreAway:y :locateOreAway:ly
   158 op len :locateOreAway:unitDist *tmp86 *tmp87
-    * op equal *tmp89 :locateOreAway:lastX :locateOreAway:x
-    * jump *label41 equal *tmp89 false
-    * op equal *tmp91 :locateOreAway:lastY :locateOreAway:y
-    * jump *label43 equal *tmp91 false
+  159 jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x
+  160 jump *label43 notEqual :locateOreAway:lastY :locateOreAway:y
   161 jump *label31 always
   162 jump *label44 always
   163 label *label43
 
   165 jump *label42 always
   166 label *label41
   167 label *label42
-    * op greaterThanEq *tmp93 :locateOreAway:coreDist 7
-    * jump *label45 equal *tmp93 false
-    * op lessThan *tmp95 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label47 equal *tmp95 false
+  168 jump *label45 lessThan :locateOreAway:coreDist 7
+  169 jump *label47 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   170 set :locateOreAway:lastX :locateOreAway:x
   171 set :locateOreAway:lastY :locateOreAway:y
   172 set :visited:x :locateOreAway:x
 
   183 op sub *tmp106 :visited:x :visited:lx
   184 op sub *tmp107 :visited:y :visited:ly
   185 op len *tmp108 *tmp106 *tmp107
-    * op lessThan *tmp109 *tmp108 7
-    * jump *label53 equal *tmp109 false
+  186 jump *label53 greaterThanEq *tmp108 7
   187 set *tmp97 true
   188 jump *label49 always
   189 jump *label54 always
 
   197 jump *label49 always
   198 set *tmp97 null
   199 label *label49
-    * op equal *tmp111 *tmp97 false
-    * jump *label55 equal *tmp111 false
+  200 jump *label55 notEqual *tmp97 false
   201 op div *tmp113 7.639437055824273 :locateOreAway:distance
   202 op add .angle .angle *tmp113
   203 op mul .mapProgress .angle .angle
 
   222 label *label29
   223 set :findDrillLocationLocal:oreX :locateOreAway:x
   224 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp115 *tmp51 false
-    * jump *label57 equal *tmp115 false
+  225 jump *label57 notEqual *tmp51 false
   226 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   227 jump *label20 always
   228 jump *label58 always
   229 label *label57
   230 label *label58
-    * op greaterThanEq *tmp118 :findDrillLocationLocal:limit 1000
-    * jump *label59 equal *tmp118 false
+  231 jump *label59 lessThan :findDrillLocationLocal:limit 1000
   232 op add .mapSpots .mapSpots 1
   233 jump *label60 always
   234 label *label59
 
   242 set :moveTo.4:radius 6
   243 label *label63
   244 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp123
-    * op equal *tmp124 *tmp123 false
-    * jump *label65 equal *tmp124 false
+  245 jump *label65 notEqual *tmp123 false
   246 op sub *tmp125 :moveTo.4:radius 0.5
   247 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp125
   248 label *label64
 
   266 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
   267 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
   268 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
-    * op greaterThan *tmp128 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label70 equal *tmp128 false
+  269 jump *label70 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   270 op add :findDrillLocationLocal:dx :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   271 op add :findDrillLocationLocal:dy :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   272 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp132 :findDrillLocationLocal:limit 1000
-    * jump *label72 equal *tmp132 false
+  273 jump *label72 greaterThanEq :findDrillLocationLocal:limit 1000
   274 set .mapSpots :findDrillLocationLocal:score
   275 jump *label73 always
   276 label *label72
   277 label *label73
-    * op greaterThanEq *tmp134 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label74 equal *tmp134 false
+  278 jump *label74 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   279 set :saveLocation:item :findDrillLocationLocal:item
   280 set :saveLocation:value :findDrillLocationLocal:score
   281 set :saveLocation:x :findDrillLocationLocal:dx
 
   301 jump *label71 always
   302 label *label70
   303 label *label71
-    * op greaterThan *tmp146 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label77 equal *tmp146 false
+  304 jump *label77 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   305 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   306 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   307 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   308 jump *label78 always
   309 label *label77
   310 label *label78
-    * op lessThanEq *tmp150 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label79 equal *tmp150 false
+  311 jump *label79 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   312 jump *label68 always
   313 jump *label80 always
   314 label *label79
 
   329 op sub *tmp162 :findDrillLocationLocal:oreY .coreY
   330 op abs *tmp163 *tmp162
   331 op min *tmp164 *tmp161 *tmp163
-    * op lessThan *tmp165 *tmp164 7
-    * jump *label83 equal *tmp165 false
+  332 jump *label83 greaterThanEq *tmp164 7
   333 jump *label68 always
   334 jump *label84 always
   335 label *label83
 
   337 label *label67
   338 jump *label66 always
   339 label *label68
-    * op greaterThanEq *tmp167 :findDrillLocationLocal:best 0
-    * jump *label85 equal *tmp167 false
+  340 jump *label85 lessThan :findDrillLocationLocal:best 0
   341 set :saveLocation.1:item :findDrillLocationLocal:item
   342 set :saveLocation.1:value :findDrillLocationLocal:best
   343 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   378 label *label90
   379 op mul *tmp185 7 :shiftMask:shiftY
   380 op add :shiftMask:shift :shiftMask:shiftX *tmp185
-    * op greaterThan *tmp187 :shiftMask:shift 0
-    * jump *label91 equal *tmp187 false
+  381 jump *label91 lessThanEq :shiftMask:shift 0
   382 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   383 op and *tmp190 :shiftMask:mask :shiftMask:clearMask
   384 op shl :shiftMask:mask *tmp190 :shiftMask:shift
 
   387 op sub *tmp192 0 :shiftMask:shift
   388 op shr :shiftMask:mask :shiftMask:mask *tmp192
   389 label *label92
-    * op notEqual *tmp193 :shiftMask:shiftX 0
-    * jump *label93 equal *tmp193 false
+  390 jump *label93 equal :shiftMask:shiftX 0
   391 op abs *tmp195 :shiftMask:shiftX
   392 op shr :shiftMask:keep 0b1111111 *tmp195
-    * op greaterThan *tmp197 :shiftMask:shiftX 0
-    * jump *label95 equal *tmp197 false
+  393 jump *label95 lessThanEq :shiftMask:shiftX 0
   394 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   395 jump *label96 always
   396 label *label95
 
   422 label *label101
   423 jump *label103 greaterThan :findPossiblePlacement:x 3
   424 op and *tmp205 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp206 *tmp205 0
-    * jump *label104 equal *tmp206 false
+  425 jump *label104 notEqual *tmp205 0
   426 op mul *tmp208 :findPossiblePlacement:y 7
   427 op add *tmp209 24 *tmp208
   428 op add :findPossiblePlacement*retval *tmp209 :findPossiblePlacement:x
 
   431 label *label104
   432 label *label105
   433 op sub *tmp211 3 :findPossiblePlacement:width
-    * op greaterThan *tmp212 :findPossiblePlacement:x *tmp211
-    * jump *label106 equal *tmp212 false
+  434 jump *label106 lessThanEq :findPossiblePlacement:x *tmp211
   435 jump *label103 always
   436 jump *label107 always
   437 label *label106
 
   442 jump *label101 always
   443 label *label103
   444 op sub *tmp214 3 :findPossiblePlacement:height
-    * op greaterThan *tmp215 :findPossiblePlacement:y *tmp214
-    * jump *label108 equal *tmp215 false
+  445 jump *label108 lessThanEq :findPossiblePlacement:y *tmp214
   446 jump *label100 always
   447 jump *label109 always
   448 label *label108
 
   468 set :tryPlaceGenerator:c :findPossiblePlacement:x
   469 set :tryPlaceGenerator:r :findPossiblePlacement:y
   470 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp218 :tryPlaceGenerator:shift 0
-    * jump *label112 equal *tmp218 false
-    * op lessThan *tmp220 :tryPlaceGenerator:shift 0
-    * jump *label114 equal *tmp220 false
+  471 jump *label112 lessThan :tryPlaceGenerator:shift 0
+  472 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   473 set :tryPlaceGenerator*retval false
   474 jump *label110 always
   475 jump *label115 always
 
   497 set :tryPlaceGenerator:c :findPossiblePlacement:x
   498 set :tryPlaceGenerator:r :findPossiblePlacement:y
   499 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp232 :tryPlaceGenerator:shift 0
-    * jump *label117 equal *tmp232 false
+  500 jump *label117 greaterThanEq :tryPlaceGenerator:shift 0
   501 set :tryPlaceGenerator*retval false
   502 jump *label110 always
   503 jump *label118 always
 
   524 set :tryPlaceGenerator:c :findPossiblePlacement:x
   525 set :tryPlaceGenerator:r :findPossiblePlacement:y
   526 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp244 :tryPlaceGenerator:shift 0
-    * jump *label120 equal *tmp244 false
+  527 jump *label120 greaterThanEq :tryPlaceGenerator:shift 0
   528 set :tryPlaceGenerator*retval false
   529 jump *label110 always
   530 jump *label121 always
 
   544 set :tryPlaceGenerator:c :findPossiblePlacement:x
   545 set :tryPlaceGenerator:r :findPossiblePlacement:y
   546 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp250 :tryPlaceGenerator:shift 0
-    * jump *label123 equal *tmp250 false
+  547 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   548 set :tryPlaceGenerator*retval false
   549 jump *label110 always
   550 jump *label124 always
 
   564 set :tryPlaceGenerator:c :findPossiblePlacement:x
   565 set :tryPlaceGenerator:r :findPossiblePlacement:y
   566 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp256 :tryPlaceGenerator:shift 0
-    * jump *label126 equal *tmp256 false
+  567 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   568 set :tryPlaceGenerator*retval false
   569 jump *label110 always
   570 jump *label127 always
 
   676 set :moveTo.5:radius 1
   677 label *label143
   678 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp289
-    * op equal *tmp290 *tmp289 false
-    * jump *label145 equal *tmp290 false
+  679 jump *label145 notEqual *tmp289 false
   680 op sub *tmp291 :moveTo.5:radius 0.5
   681 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp291
   682 label *label144
 
   750 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   751 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   752 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp328 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label151 equal *tmp328 false
+  753 jump *label151 lessThan :layoutThoriumDrillAtLocation:shift 0
   754 op add *tmp330 .drillX 0.5
   755 op add .water1X *tmp330 :layoutThoriumDrillAtLocation:c
   756 op add *tmp332 .drillY 0.5
 
   772 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   773 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   774 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp337 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label154 equal *tmp337 false
+  775 jump *label154 lessThan :layoutThoriumDrillAtLocation:shift 0
   776 op add *tmp339 .drillX 0.5
   777 op add .containerX *tmp339 :layoutThoriumDrillAtLocation:c
   778 op add *tmp341 .drillY 0.5
 
   914 label *label176
   915 set .drillX :findDrillLocationLocal:dx
   916 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp367 :findDrillLocationLocal*retval false
-    * jump *label177 equal *tmp367 false
+  917 jump *label177 notEqual :findDrillLocationLocal*retval false
   918 set :layoutThoriumDrill*retval false
   919 jump *label175 always
   920 jump *label178 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-32 instructions):
 
   145 jump *label39 notEqual *tmp77 false
   146 set *tmp51 false
   147 jump *label29 always
-    * jump *label40 always
   148 label *label39
   149 label *label40
   150 op sub *tmp81 :locateOreAway:x .coreX
 
   158 jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x
   159 jump *label43 notEqual :locateOreAway:lastY :locateOreAway:y
   160 jump *label31 always
-    * jump *label44 always
   161 label *label43
   162 label *label44
-    * jump *label42 always
   163 label *label41
   164 label *label42
   165 jump *label45 lessThan :locateOreAway:coreDist 7
 
   183 jump *label53 greaterThanEq *tmp108 7
   184 set *tmp97 true
   185 jump *label49 always
-    * jump *label54 always
   186 label *label53
   187 label *label54
   188 label *label51
 
   200 printflush message1
   201 set *tmp51 true
   202 jump *label29 always
-    * jump *label56 always
   203 label *label55
   204 label *label56
-    * jump *label48 always
   205 label *label47
   206 label *label48
-    * jump *label46 always
   207 label *label45
   208 label *label46
   209 label *label31
 
   218 jump *label57 notEqual *tmp51 false
   219 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   220 jump *label20 always
-    * jump *label58 always
   221 label *label57
   222 label *label58
   223 jump *label59 lessThan :findDrillLocationLocal:limit 1000
   224 op add .mapSpots .mapSpots 1
-    * jump *label60 always
   225 label *label59
   226 label *label60
   227 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   263 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   264 jump *label72 greaterThanEq :findDrillLocationLocal:limit 1000
   265 set .mapSpots :findDrillLocationLocal:score
-    * jump *label73 always
   266 label *label72
   267 label *label73
   268 jump *label74 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   285 ucontrol unbind
   286 set :findDrillLocationLocal*retval true
   287 jump *label20 always
-    * jump *label75 always
   288 label *label74
   289 label *label75
-    * jump *label71 always
   290 label *label70
   291 label *label71
   292 jump *label77 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   293 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   294 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   295 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label78 always
   296 label *label77
   297 label *label78
   298 jump *label79 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   299 jump *label68 always
-    * jump *label80 always
   300 label *label79
   301 label *label80
   302 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   317 op min *tmp164 *tmp161 *tmp163
   318 jump *label83 greaterThanEq *tmp164 7
   319 jump *label68 always
-    * jump *label84 always
   320 label *label83
   321 label *label84
   322 label *label67
 
   339 write :saveLocation.1:y bank1 .count
   340 op add .locations .locations 1
   341 label *label87
-    * jump *label86 always
   342 label *label85
   343 label *label86
   344 label *label27
 
   357 jump *label89 equal *tmp183 false
   358 set :shiftMask*retval 0
   359 jump *label88 always
-    * jump *label90 always
   360 label *label89
   361 label *label90
   362 op mul *tmp185 7 :shiftMask:shiftY
 
   375 op shr :shiftMask:keep 0b1111111 *tmp195
   376 jump *label95 lessThanEq :shiftMask:shiftX 0
   377 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label96 always
   378 label *label95
   379 label *label96
   380 op shl *tmp199 :shiftMask:keep 7
 
   384 op shl *tmp201 :shiftMask:keep 21
   385 op or :shiftMask:keep :shiftMask:keep *tmp201
   386 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label94 always
   387 label *label93
   388 label *label94
   389 set :shiftMask*retval :shiftMask:mask
 
   408 op add *tmp209 24 *tmp208
   409 op add :findPossiblePlacement*retval *tmp209 :findPossiblePlacement:x
   410 jump *label97 always
-    * jump *label105 always
   411 label *label104
   412 label *label105
   413 op sub *tmp211 3 :findPossiblePlacement:width
   414 jump *label106 lessThanEq :findPossiblePlacement:x *tmp211
   415 jump *label103 always
-    * jump *label107 always
   416 label *label106
   417 label *label107
   418 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   423 op sub *tmp214 3 :findPossiblePlacement:height
   424 jump *label108 lessThanEq :findPossiblePlacement:y *tmp214
   425 jump *label100 always
-    * jump *label109 always
   426 label *label108
   427 label *label109
   428 label *label99
 
   450 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   451 set :tryPlaceGenerator*retval false
   452 jump *label110 always
-    * jump *label115 always
   453 label *label114
   454 label *label115
   455 op add *tmp222 :tryPlaceGenerator:centerX 0.5
 
   477 jump *label117 greaterThanEq :tryPlaceGenerator:shift 0
   478 set :tryPlaceGenerator*retval false
   479 jump *label110 always
-    * jump *label118 always
   480 label *label117
   481 label *label118
   482 op add *tmp234 :tryPlaceGenerator:centerX 0.5
 
   503 jump *label120 greaterThanEq :tryPlaceGenerator:shift 0
   504 set :tryPlaceGenerator*retval false
   505 jump *label110 always
-    * jump *label121 always
   506 label *label120
   507 label *label121
   508 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   522 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   523 set :tryPlaceGenerator*retval false
   524 jump *label110 always
-    * jump *label124 always
   525 label *label123
   526 label *label124
   527 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   541 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   542 set :tryPlaceGenerator*retval false
   543 jump *label110 always
-    * jump *label127 always
   544 label *label126
   545 label *label127
   546 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   732 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
   733 op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   734 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp335
-    * jump *label152 always
   735 label *label151
   736 label *label152
   737 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   751 op add .containerY *tmp341 :layoutThoriumDrillAtLocation:r
   752 op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   753 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
-    * jump *label155 always
   754 label *label154
   755 label *label155
   756 set :createFixedMatrix.4:row0 0b1111
 
   784 jump *label159 equal :tryPlaceGenerator*retval false
   785 set :layoutThoriumDrillAtLocation*retval true
   786 jump *label141 always
-    * jump *label160 always
   787 label *label159
   788 label *label160
   789 set :layoutThoriumDrillAtLocation:sx 3
 
   837 jump *label171 equal :tryPlaceGenerator*retval false
   838 set :layoutThoriumDrillAtLocation*retval true
   839 jump *label141 always
-    * jump *label172 always
   840 label *label171
   841 label *label172
   842 label *label162
 
   886 jump *label177 notEqual :findDrillLocationLocal*retval false
   887 set :layoutThoriumDrill*retval false
   888 jump *label175 always
-    * jump *label178 always
   889 label *label177
   890 label *label178
   891 setaddr :layoutThoriumDrillAtLocation*retaddr *label179 (h:*label179)

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
    22 set :createFixedMatrix:row4 0x7E
    23 set :createFixedMatrix:row5 0x7E
    24 set :createFixedMatrix:row6 0x7E
-    * op shl *tmp22 :createFixedMatrix:row0 0
+   25 set *tmp22 :createFixedMatrix:row0
    26 op shl *tmp23 :createFixedMatrix:row1 7
    27 op or *tmp24 *tmp22 *tmp23
    28 op shl *tmp25 :createFixedMatrix:row2 14
 
   669 set :createFixedMatrix.1:row4 0b0011100
   670 set :createFixedMatrix.1:row5 0b0000000
   671 set :createFixedMatrix.1:row6 0b0000000
-    * op shl *tmp294 :createFixedMatrix.1:row0 0
+  672 set *tmp294 :createFixedMatrix.1:row0
   673 op shl *tmp295 :createFixedMatrix.1:row1 7
   674 op or *tmp296 *tmp294 *tmp295
   675 op shl *tmp297 :createFixedMatrix.1:row2 14
 
   691 set :createFixedMatrix.2:row4 0b0011100
   692 set :createFixedMatrix.2:row5 0b0000000
   693 set :createFixedMatrix.2:row6 0b1000001
-    * op shl *tmp309 :createFixedMatrix.2:row0 0
+  694 set *tmp309 :createFixedMatrix.2:row0
   695 op shl *tmp310 :createFixedMatrix.2:row1 7
   696 op or *tmp311 *tmp309 *tmp310
   697 op shl *tmp312 :createFixedMatrix.2:row2 14
 
   708 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp308
   709 set :createFixedMatrix.3:row0 0b11
   710 set :createFixedMatrix.3:row1 0b11
-    * op shl *tmp324 :createFixedMatrix.3:row0 0
+  711 set *tmp324 :createFixedMatrix.3:row0
   712 op shl *tmp325 :createFixedMatrix.3:row1 7
   713 op or *tmp323 *tmp324 *tmp325
   714 label *label149
 
   755 label *label155
   756 set :createFixedMatrix.4:row0 0b1111
   757 set :createFixedMatrix.4:row1 0b1111
-    * op shl *tmp345 :createFixedMatrix.4:row0 0
+  758 set *tmp345 :createFixedMatrix.4:row0
   759 op shl *tmp346 :createFixedMatrix.4:row1 7
   760 op or *tmp344 *tmp345 *tmp346
   761 label *label156
 
   764 set :createFixedMatrix.5:row1 0b11
   765 set :createFixedMatrix.5:row2 0b11
   766 set :createFixedMatrix.5:row3 0b11
-    * op shl *tmp349 :createFixedMatrix.5:row0 0
+  767 set *tmp349 :createFixedMatrix.5:row0
   768 op shl *tmp350 :createFixedMatrix.5:row1 7
   769 op or *tmp351 *tmp349 *tmp350
   770 op shl *tmp352 :createFixedMatrix.5:row2 14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    22 set :createFixedMatrix:row4 0x7E
    23 set :createFixedMatrix:row5 0x7E
    24 set :createFixedMatrix:row6 0x7E
-    * set *tmp22 :createFixedMatrix:row0
-    * op shl *tmp23 :createFixedMatrix:row1 7
-    * op or *tmp24 *tmp22 *tmp23
-    * op shl *tmp25 :createFixedMatrix:row2 14
-    * op or *tmp26 *tmp24 *tmp25
-    * op shl *tmp27 :createFixedMatrix:row3 21
-    * op or *tmp28 *tmp26 *tmp27
-    * op shl *tmp29 :createFixedMatrix:row4 28
-    * op or *tmp30 *tmp28 *tmp29
-    * op shl *tmp31 :createFixedMatrix:row5 35
-    * op or *tmp32 *tmp30 *tmp31
-    * op shl *tmp33 :createFixedMatrix:row6 42
-    * op or *tmp21 *tmp32 *tmp33
+   25 set *tmp22 0x7E
+   26 op shl *tmp23 0x7E 7
+   27 op or *tmp24 :createFixedMatrix:row0 16128
+   28 op shl *tmp25 0x7E 14
+   29 op or *tmp26 *tmp24 2064384
+   30 op shl *tmp27 0x7E 21
+   31 op or *tmp28 *tmp26 264241152
+   32 op shl *tmp29 0x7E 28
+   33 op or *tmp30 *tmp28 33822867456
+   34 op shl *tmp31 0x7E 35
+   35 op or *tmp32 *tmp30 4329327034368
+   36 op shl *tmp33 0x7E 42
+   37 op or *tmp21 *tmp32 554153860399104
    38 label *label18
    39 set :e *tmp21
-    * assertequals :a :e "Column right"
+   40 assertequals :shiftMask*retval *tmp21 "Column right"
    41 set *signature "3290b8c661787058:v1"
    42 label *label19
    43 wait 1e12
 
    52 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    53 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    54 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp36 @mapw .coreX
-    * op sub *tmp37 @maph .coreY
-    * op max *tmp38 .coreX .coreY
+   55 op sub *tmp36 @mapw :findDrillLocationLocal:x
+   56 op sub *tmp37 @maph :findDrillLocationLocal:y
+   57 op max *tmp38 :findDrillLocationLocal:x :findDrillLocationLocal:y
    58 op max *tmp38 *tmp38 *tmp36
    59 op max *tmp38 *tmp38 *tmp37
    60 set :findDrillLocationLocal:distanceLimit *tmp38
    61 set .mapAction "Locating ore..."
    62 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp39 :moveTo:x
-    * set *tmp40 :moveTo:y
-    * set :moveTo.1:x *tmp39
-    * set :moveTo.1:y *tmp40
+   63 set .mapProgress 0
+   64 set :moveTo:x :findDrillLocationLocal:x
+   65 set :moveTo:y :findDrillLocationLocal:y
+   66 set *tmp39 .coreX
+   67 set *tmp40 .coreY
+   68 set :moveTo.1:x :moveTo:x
+   69 set :moveTo.1:y :moveTo:y
    70 set :moveTo.1:radius 6
    71 label *label23
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp41
+   72 ucontrol within *tmp39 *tmp40 6 *tmp41
    73 jump *label25 notEqual *tmp41 false
-    * op sub *tmp43 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp43
+   74 op sub *tmp43 6 0.5
+   75 ucontrol approach *tmp39 *tmp40 5.5
    76 label *label24
    77 jump *label23 always
    78 label *label25
    79 label *label22
    80 label *label21
-    * op div *tmp44 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   81 op div *tmp44 *tmp38 3.8197185279121366
    82 op pow .mapTotal *tmp44 2
    83 set :findDrillLocationLocal:oreX 0
    84 set :findDrillLocationLocal:oreY 0
 
   101 op max .angle .angle @pi
   102 op mul .mapProgress .angle .angle
   103 label *label30
-    * jump *label32 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+  104 jump *label32 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   105 op div :locateOreAway:a .angle @degToRad
   106 op sin *tmp57 :locateOreAway:a
   107 op mul *tmp58 *tmp57 :locateOreAway:distance
-    * op add *tmp59 .coreX *tmp58
+  108 op add *tmp59 :findDrillLocationLocal:x *tmp58
   109 op sub *tmp60 @mapw 5
   110 set :limit:value *tmp59
   111 set :limit:low 5
   112 set :limit:high *tmp60
-    * op max *tmp62 :limit:value :limit:low
-    * op min *tmp61 *tmp62 :limit:high
+  113 op max *tmp62 *tmp59 5
+  114 op min *tmp61 *tmp62 *tmp60
   115 label *label33
   116 set :locateOreAway:lx *tmp61
   117 op cos *tmp64 :locateOreAway:a
   118 op mul *tmp65 *tmp64 :locateOreAway:distance
-    * op add *tmp66 .coreY *tmp65
+  119 op add *tmp66 :findDrillLocationLocal:y *tmp65
   120 op sub *tmp67 @maph 5
   121 set :limit.1:value *tmp66
   122 set :limit.1:low 5
   123 set :limit.1:high *tmp67
-    * op max *tmp69 :limit.1:value :limit.1:low
-    * op min *tmp68 *tmp69 :limit.1:high
+  124 op max *tmp69 *tmp66 5
+  125 op min *tmp68 *tmp69 *tmp67
   126 label *label34
   127 set :locateOreAway:ly *tmp68
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+  128 set :moveTo.2:x *tmp61
+  129 set :moveTo.2:y *tmp68
   130 set :moveTo.2:radius 5
   131 label *label36
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp71
+  132 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp71
   133 jump *label38 notEqual *tmp71 false
-    * op sub *tmp73 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp73
+  134 op sub *tmp73 5 0.5
+  135 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   136 label *label37
   137 jump *label36 always
   138 label *label38
 
   141 op add .angle .angle *tmp74
   142 op mul .mapProgress .angle .angle
   143 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp77 0
+  144 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp77 0
   145 jump *label39 notEqual *tmp77 false
   146 set *tmp51 false
   147 jump *label29 always
   148 label *label39
   149 label *label40
-    * op sub *tmp81 :locateOreAway:x .coreX
+  150 op sub *tmp81 :locateOreAway:x :findDrillLocationLocal:x
   151 op abs *tmp82 *tmp81
-    * op sub *tmp83 :locateOreAway:y .coreY
+  152 op sub *tmp83 :locateOreAway:y :findDrillLocationLocal:y
   153 op abs *tmp84 *tmp83
   154 op max :locateOreAway:coreDist *tmp82 *tmp84
-    * op sub *tmp86 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp87 :locateOreAway:y :locateOreAway:ly
+  155 op sub *tmp86 :locateOreAway:x *tmp61
+  156 op sub *tmp87 :locateOreAway:y *tmp68
   157 op len :locateOreAway:unitDist *tmp86 *tmp87
   158 jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x
   159 jump *label43 notEqual :locateOreAway:lastY :locateOreAway:y
 
   177 read :visited:lx bank1 *tmp100
   178 op add *tmp103 :visited:index 3
   179 read :visited:ly bank1 *tmp103
-    * op sub *tmp106 :visited:x :visited:lx
-    * op sub *tmp107 :visited:y :visited:ly
+  180 op sub *tmp106 :locateOreAway:x :visited:lx
+  181 op sub *tmp107 :locateOreAway:y :visited:ly
   182 op len *tmp108 *tmp106 *tmp107
   183 jump *label53 greaterThanEq *tmp108 7
   184 set *tmp97 true
 
   191 label *label52
   192 set *tmp97 false
   193 jump *label49 always
-    * set *tmp97 null
   194 label *label49
   195 jump *label55 notEqual *tmp97 false
-    * op div *tmp113 7.639437055824273 :locateOreAway:distance
+  196 op div *tmp113 2 .angle
   197 op add .angle .angle *tmp113
   198 op mul .mapProgress .angle .angle
   199 printflush message1
 
   210 label *label32
   211 set *tmp51 false
   212 jump *label29 always
-    * set *tmp51 null
   213 label *label29
   214 set :findDrillLocationLocal:oreX :locateOreAway:x
   215 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   222 op add .mapSpots .mapSpots 1
   223 label *label59
   224 label *label60
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp121 :moveTo.3:x
-    * set *tmp122 :moveTo.3:y
-    * set :moveTo.4:x *tmp121
-    * set :moveTo.4:y *tmp122
+  225 set :moveTo.3:x :locateOreAway:x
+  226 set :moveTo.3:y :locateOreAway:y
+  227 set *tmp121 :findDrillLocationLocal:oreX
+  228 set *tmp122 :findDrillLocationLocal:oreY
+  229 set :moveTo.4:x :moveTo.3:x
+  230 set :moveTo.4:y :moveTo.3:y
   231 set :moveTo.4:radius 6
   232 label *label63
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp123
+  233 ucontrol within *tmp121 *tmp122 6 *tmp123
   234 jump *label65 notEqual *tmp123 false
-    * op sub *tmp125 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp125
+  235 op sub *tmp125 6 0.5
+  236 ucontrol approach *tmp121 *tmp122 5.5
   237 label *label64
   238 jump *label63 always
   239 label *label65
 
   270 set :saveLocation:y :findDrillLocationLocal:dy
   271 op add .count .count 1
   272 set *tmp136 .count
-    * sensor *tmp138 :saveLocation:item @id
-    * write *tmp138 bank1 *tmp136
+  273 sensor *tmp138 :findDrillLocationLocal:item @id
+  274 write *tmp138 bank1 .count
   275 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  276 write :findDrillLocationLocal:score bank1 .count
   277 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  278 write :findDrillLocationLocal:dx bank1 .count
   279 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  280 write :findDrillLocationLocal:dy bank1 .count
   281 op add .locations .locations 1
   282 label *label76
   283 ucontrol unbind
 
   308 op floor *tmp157 *tmp158
   309 label *label82
   310 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp157
-    * op sub *tmp160 :findDrillLocationLocal:oreX .coreX
+  311 op sub *tmp160 :findDrillLocationLocal:oreX :findDrillLocationLocal:x
   312 op abs *tmp161 *tmp160
-    * op sub *tmp162 :findDrillLocationLocal:oreY .coreY
+  313 op sub *tmp162 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   314 op abs *tmp163 *tmp162
   315 op min *tmp164 *tmp161 *tmp163
   316 jump *label83 greaterThanEq *tmp164 7
 
   327 set :saveLocation.1:y :findDrillLocationLocal:bestY
   328 op add .count .count 1
   329 set *tmp169 .count
-    * sensor *tmp171 :saveLocation.1:item @id
-    * write *tmp171 bank1 *tmp169
+  330 sensor *tmp171 :findDrillLocationLocal:item @id
+  331 write *tmp171 bank1 .count
   332 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  333 write :findDrillLocationLocal:best bank1 .count
   334 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  335 write :findDrillLocationLocal:bestX bank1 .count
   336 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  337 write :findDrillLocationLocal:bestY bank1 .count
   338 op add .locations .locations 1
   339 label *label87
   340 label *label85
 
   370 label *label92
   371 jump *label93 equal :shiftMask:shiftX 0
   372 op abs *tmp195 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp195
+  373 op shr :shiftMask:keep 0b1111111 *tmp179
   374 jump *label95 lessThanEq :shiftMask:shiftX 0
   375 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   376 label *label95
 
   386 label *label94
   387 set :shiftMask*retval :shiftMask:mask
   388 jump *label88 always
-    * set :shiftMask*retval null
   389 label *label88
   390 return :shiftMask*retaddr
   391 end
 
   428 label *label100
   429 set :findPossiblePlacement*retval -1
   430 jump *label97 always
-    * set :findPossiblePlacement*retval null
   431 label *label97
   432 return :findPossiblePlacement*retaddr
   433 end
 
   442 set :tryPlaceGenerator:c :findPossiblePlacement:x
   443 set :tryPlaceGenerator:r :findPossiblePlacement:y
   444 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label112 lessThan :tryPlaceGenerator:shift 0
-    * jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
+  445 jump *label112 lessThan :findPossiblePlacement*retval 0
+  446 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   447 set :tryPlaceGenerator*retval false
   448 jump *label110 always
   449 label *label114
   450 label *label115
   451 op add *tmp222 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp222 :tryPlaceGenerator:c
+  452 op add .water2X *tmp222 :findPossiblePlacement:x
   453 op add *tmp224 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp224 :tryPlaceGenerator:r
+  454 op add .water2Y *tmp224 :findPossiblePlacement:y
   455 op add *tmp226 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp226 :tryPlaceGenerator:c
+  456 op add .generatorX *tmp222 :findPossiblePlacement:x
   457 op add *tmp228 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp228 :tryPlaceGenerator:r
-    * op shl *tmp230 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  458 op add .generatorY *tmp228 :findPossiblePlacement:y
+  459 op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   460 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
   461 jump *label113 always
   462 label *label112
 
   470 set :tryPlaceGenerator:c :findPossiblePlacement:x
   471 set :tryPlaceGenerator:r :findPossiblePlacement:y
   472 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label117 greaterThanEq :tryPlaceGenerator:shift 0
+  473 jump *label117 greaterThanEq :findPossiblePlacement*retval 0
   474 set :tryPlaceGenerator*retval false
   475 jump *label110 always
   476 label *label117
   477 label *label118
   478 op add *tmp234 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp234 :tryPlaceGenerator:c
+  479 op add .water2X *tmp234 :findPossiblePlacement:x
   480 op add *tmp236 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp236 :tryPlaceGenerator:r
+  481 op add .water2Y *tmp236 :findPossiblePlacement:y
   482 op add *tmp238 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp238 :tryPlaceGenerator:c
+  483 op add .generatorX *tmp238 :findPossiblePlacement:x
   484 op add *tmp240 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp240 :tryPlaceGenerator:r
-    * op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  485 op add .generatorY *tmp236 :findPossiblePlacement:y
+  486 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   487 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
   488 label *label113
   489 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   496 set :tryPlaceGenerator:c :findPossiblePlacement:x
   497 set :tryPlaceGenerator:r :findPossiblePlacement:y
   498 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label120 greaterThanEq :tryPlaceGenerator:shift 0
+  499 jump *label120 greaterThanEq :findPossiblePlacement*retval 0
   500 set :tryPlaceGenerator*retval false
   501 jump *label110 always
   502 label *label120
   503 label *label121
-    * op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp248 1 :tryPlaceGenerator:shift
+  504 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  505 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  506 op shl *tmp248 1 :findPossiblePlacement*retval
   507 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp248
   508 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   509 set :findPossiblePlacement:placementMask 1
 
   515 set :tryPlaceGenerator:c :findPossiblePlacement:x
   516 set :tryPlaceGenerator:r :findPossiblePlacement:y
   517 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
+  518 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   519 set :tryPlaceGenerator*retval false
   520 jump *label110 always
   521 label *label123
   522 label *label124
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp254 1 :tryPlaceGenerator:shift
+  523 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  524 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  525 op shl *tmp254 1 :findPossiblePlacement*retval
   526 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp254
   527 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   528 set :findPossiblePlacement:placementMask 1
 
   534 set :tryPlaceGenerator:c :findPossiblePlacement:x
   535 set :tryPlaceGenerator:r :findPossiblePlacement:y
   536 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
+  537 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   538 set :tryPlaceGenerator*retval false
   539 jump *label110 always
   540 label *label126
   541 label *label127
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp260 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp260
+  542 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  543 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  544 op shl *tmp260 1 :findPossiblePlacement*retval
   545 set :tryPlaceGenerator*retval true
   546 jump *label110 always
-    * set :tryPlaceGenerator*retval null
   547 label *label110
   548 return :tryPlaceGenerator*retaddr
   549 end
 
   562 label *label131
   563 set :createBlockMaskRow*retval :createBlockMaskRow:result
   564 jump *label128 always
-    * set :createBlockMaskRow*retval null
   565 label *label128
   566 return :createBlockMaskRow*retaddr
   567 end
 
   576 set :createAdjacentMask:x :createCombinedMask:x
   577 set :createAdjacentMask:y :createCombinedMask:y
   578 set :createAdjacentMask:result 0
-    * op add *tmp271 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  579 op add *tmp271 :createCombinedMask:y 4
+  580 set :createBlockMaskRow:x :createCombinedMask:x
   581 set :createBlockMaskRow:y *tmp271
   582 setaddr :createBlockMaskRow*retaddr *label134 (h:*label134)
   583 call *label12 *invalid :createBlockMaskRow*retval (m:*label134) (h:*label134)
 
   604 op or *tmp278 :createAdjacentMask:row2 *tmp277
   605 op shr *tmp279 :createAdjacentMask:row1 1
   606 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createAdjacentMask:row0
+  607 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
   608 op shl *tmp282 :createAdjacentMask:result 7
   609 op and *tmp283 :createAdjacentMask:mask 0xFE
   610 op or :createAdjacentMask:result *tmp282 *tmp283
   611 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  612 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   613 label *label137
   614 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   615 jump *label136 always
 
   624 read .terrainMask processor1 ":createTerrainMask*retval"
   625 op or :createCombinedMask*retval .adjacentMask .terrainMask
   626 jump *label132 always
-    * set :createCombinedMask*retval null
   627 label *label132
   628 return :createCombinedMask*retaddr
   629 end
 
   640 set :moveTo.5:y .drillY
   641 set :moveTo.5:radius 1
   642 label *label143
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp289
+  643 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
   644 jump *label145 notEqual *tmp289 false
-    * op sub *tmp291 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp291
+  645 op sub *tmp291 1 0.5
+  646 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   647 label *label144
   648 jump *label143 always
   649 label *label145
 
   661 set :createFixedMatrix.1:row4 0b0011100
   662 set :createFixedMatrix.1:row5 0b0000000
   663 set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp294 :createFixedMatrix.1:row0
-    * op shl *tmp295 :createFixedMatrix.1:row1 7
-    * op or *tmp296 *tmp294 *tmp295
-    * op shl *tmp297 :createFixedMatrix.1:row2 14
-    * op or *tmp298 *tmp296 *tmp297
-    * op shl *tmp299 :createFixedMatrix.1:row3 21
-    * op or *tmp300 *tmp298 *tmp299
-    * op shl *tmp301 :createFixedMatrix.1:row4 28
-    * op or *tmp302 *tmp300 *tmp301
-    * op shl *tmp303 :createFixedMatrix.1:row5 35
-    * op or *tmp304 *tmp302 *tmp303
-    * op shl *tmp305 :createFixedMatrix.1:row6 42
-    * op or *tmp293 *tmp304 *tmp305
+  664 set *tmp294 0b0000000
+  665 op shl *tmp295 0b0000000 7
+  666 op or *tmp296 :createFixedMatrix.1:row0 0
+  667 op shl *tmp297 0b0011100 14
+  668 op or *tmp298 *tmp296 458752
+  669 op shl *tmp299 0b0011100 21
+  670 op or *tmp300 *tmp298 58720256
+  671 op shl *tmp301 0b0011100 28
+  672 op or *tmp302 *tmp300 7516192768
+  673 op shl *tmp303 0b0000000 35
+  674 op or *tmp304 *tmp302 0
+  675 op shl *tmp305 0b0000000 42
+  676 op or *tmp293 *tmp304 0
   677 label *label147
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp293
+  678 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp293
   679 set :createFixedMatrix.2:row0 0b1000001
   680 set :createFixedMatrix.2:row1 0b0000000
   681 set :createFixedMatrix.2:row2 0b0011100
 
   683 set :createFixedMatrix.2:row4 0b0011100
   684 set :createFixedMatrix.2:row5 0b0000000
   685 set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp309 :createFixedMatrix.2:row0
-    * op shl *tmp310 :createFixedMatrix.2:row1 7
-    * op or *tmp311 *tmp309 *tmp310
-    * op shl *tmp312 :createFixedMatrix.2:row2 14
-    * op or *tmp313 *tmp311 *tmp312
-    * op shl *tmp314 :createFixedMatrix.2:row3 21
-    * op or *tmp315 *tmp313 *tmp314
-    * op shl *tmp316 :createFixedMatrix.2:row4 28
-    * op or *tmp317 *tmp315 *tmp316
-    * op shl *tmp318 :createFixedMatrix.2:row5 35
-    * op or *tmp319 *tmp317 *tmp318
-    * op shl *tmp320 :createFixedMatrix.2:row6 42
-    * op or *tmp308 *tmp319 *tmp320
+  686 set *tmp309 0b1000001
+  687 op shl *tmp310 0b0000000 7
+  688 op or *tmp311 :createFixedMatrix.2:row0 0
+  689 op shl *tmp312 0b0011100 14
+  690 op or *tmp313 *tmp311 458752
+  691 op shl *tmp314 0b0011100 21
+  692 op or *tmp315 *tmp313 58720256
+  693 op shl *tmp316 0b0011100 28
+  694 op or *tmp317 *tmp315 7516192768
+  695 op shl *tmp318 0b0000000 35
+  696 op or *tmp319 *tmp317 0
+  697 op shl *tmp320 0b1000001 42
+  698 op or *tmp308 *tmp319 285873023221760
   699 label *label148
   700 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp308
   701 set :createFixedMatrix.3:row0 0b11
   702 set :createFixedMatrix.3:row1 0b11
-    * set *tmp324 :createFixedMatrix.3:row0
-    * op shl *tmp325 :createFixedMatrix.3:row1 7
-    * op or *tmp323 *tmp324 *tmp325
+  703 set *tmp324 0b11
+  704 op shl *tmp325 0b11 7
+  705 op or *tmp323 :createFixedMatrix.3:row0 384
   706 label *label149
   707 set :layoutThoriumDrillAtLocation:mask2x2 *tmp323
   708 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  709 set :findPossiblePlacement:placementMask *tmp323
   710 set :findPossiblePlacement:width 2
   711 set :findPossiblePlacement:height 2
   712 setaddr :findPossiblePlacement*retaddr *label150 (h:*label150)
 
   715 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   716 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   717 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label151 lessThan :layoutThoriumDrillAtLocation:shift 0
+  718 jump *label151 lessThan :findPossiblePlacement*retval 0
   719 op add *tmp330 .drillX 0.5
-    * op add .water1X *tmp330 :layoutThoriumDrillAtLocation:c
+  720 op add .water1X *tmp330 :findPossiblePlacement:x
   721 op add *tmp332 .drillY 0.5
-    * op add .water1Y *tmp332 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp334 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  722 op add .water1Y *tmp332 :findPossiblePlacement:y
+  723 op shl *tmp334 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   724 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
-    * op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp335
+  725 op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  726 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp334
   727 label *label151
   728 label *label152
   729 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   736 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   737 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   738 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label154 lessThan :layoutThoriumDrillAtLocation:shift 0
+  739 jump *label154 lessThan :findPossiblePlacement*retval 0
   740 op add *tmp339 .drillX 0.5
-    * op add .containerX *tmp339 :layoutThoriumDrillAtLocation:c
+  741 op add .containerX *tmp339 :findPossiblePlacement:x
   742 op add *tmp341 .drillY 0.5
-    * op add .containerY *tmp341 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  743 op add .containerY *tmp341 :findPossiblePlacement:y
+  744 op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   745 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
   746 label *label154
   747 label *label155
   748 set :createFixedMatrix.4:row0 0b1111
   749 set :createFixedMatrix.4:row1 0b1111
-    * set *tmp345 :createFixedMatrix.4:row0
-    * op shl *tmp346 :createFixedMatrix.4:row1 7
-    * op or *tmp344 *tmp345 *tmp346
+  750 set *tmp345 0b1111
+  751 op shl *tmp346 0b1111 7
+  752 op or *tmp344 :createFixedMatrix.4:row0 1920
   753 label *label156
   754 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp344
   755 set :createFixedMatrix.5:row0 0b11
   756 set :createFixedMatrix.5:row1 0b11
   757 set :createFixedMatrix.5:row2 0b11
   758 set :createFixedMatrix.5:row3 0b11
-    * set *tmp349 :createFixedMatrix.5:row0
-    * op shl *tmp350 :createFixedMatrix.5:row1 7
-    * op or *tmp351 *tmp349 *tmp350
-    * op shl *tmp352 :createFixedMatrix.5:row2 14
-    * op or *tmp353 *tmp351 *tmp352
-    * op shl *tmp354 :createFixedMatrix.5:row3 21
-    * op or *tmp348 *tmp353 *tmp354
+  759 set *tmp349 0b11
+  760 op shl *tmp350 0b11 7
+  761 op or *tmp351 :createFixedMatrix.5:row0 384
+  762 op shl *tmp352 0b11 14
+  763 op or *tmp353 *tmp351 49152
+  764 op shl *tmp354 0b11 21
+  765 op or *tmp348 *tmp353 6291456
   766 label *label157
   767 set :layoutThoriumDrillAtLocation:generatorVertical *tmp348
   768 set :tryPlaceGenerator:centerX .drillX
   769 set :tryPlaceGenerator:centerY .drillY
   770 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  771 set :tryPlaceGenerator:generatorHorizontal *tmp344
+  772 set :tryPlaceGenerator:generatorVertical *tmp348
   773 setaddr :tryPlaceGenerator*retaddr *label158 (h:*label158)
   774 call *label11 *invalid :tryPlaceGenerator*retval (m:*label158) (h:*label158)
   775 label *label158
 
   812 call *label9 *invalid :shiftMask*retval (m:*label169) (h:*label169)
   813 label *label169
   814 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  815 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   816 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
-    * set .lastShiftedMask :layoutThoriumDrillAtLocation:shiftedMask
+  817 set .lastShiftedMask :shiftMask*retval
   818 set .lastCombinedMask :layoutThoriumDrillAtLocation:combinedMask
   819 op sub *tmp363 .drillX :layoutThoriumDrillAtLocation:sx
   820 op sub *tmp364 .drillY :layoutThoriumDrillAtLocation:sy
 
   837 label *label163
   838 set :layoutThoriumDrillAtLocation*retval true
   839 jump *label141 always
-    * set :layoutThoriumDrillAtLocation*retval null
   840 label *label141
   841 return :layoutThoriumDrillAtLocation*retaddr
   842 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-112 instructions):
 
    14 setaddr :shiftMask*retaddr *label17 (h:*label17)
    15 call *label9 *invalid :shiftMask*retval (m:*label17) (h:*label17)
    16 label *label17
-    * set :a :shiftMask*retval
    17 set :createFixedMatrix:row0 0x7E
-    * set :createFixedMatrix:row1 0x7E
-    * set :createFixedMatrix:row2 0x7E
-    * set :createFixedMatrix:row3 0x7E
-    * set :createFixedMatrix:row4 0x7E
-    * set :createFixedMatrix:row5 0x7E
-    * set :createFixedMatrix:row6 0x7E
-    * set *tmp22 0x7E
-    * op shl *tmp23 0x7E 7
-    * op or *tmp24 :createFixedMatrix:row0 16128
-    * op shl *tmp25 0x7E 14
-    * op or *tmp26 *tmp24 2064384
-    * op shl *tmp27 0x7E 21
-    * op or *tmp28 *tmp26 264241152
-    * op shl *tmp29 0x7E 28
-    * op or *tmp30 *tmp28 33822867456
-    * op shl *tmp31 0x7E 35
-    * op or *tmp32 *tmp30 4329327034368
-    * op shl *tmp33 0x7E 42
-    * op or *tmp21 *tmp32 554153860399104
+   18 op or *tmp24 0x7E 16128
+   19 op or *tmp26 16254 2064384
+   20 op or *tmp28 2080638 264241152
+   21 op or *tmp30 266321790 33822867456
+   22 op or *tmp32 34089189246 4329327034368
+   23 op or *tmp21 4363416223614 554153860399104
    24 label *label18
-    * set :e *tmp21
-    * assertequals :shiftMask*retval *tmp21 "Column right"
+   25 set :e 558517276622718
+   26 assertequals :shiftMask*retval 558517276622718 "Column right"
    27 set *signature "3290b8c661787058:v1"
    28 label *label19
    29 wait 1e12
 
    49 set .mapProgress 0
    50 set :moveTo:x :findDrillLocationLocal:x
    51 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp39 .coreX
-    * set *tmp40 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   52 set *tmp39 :findDrillLocationLocal:x
+   53 set *tmp40 :findDrillLocationLocal:y
+   54 set :moveTo.1:x :findDrillLocationLocal:x
+   55 set :moveTo.1:y :findDrillLocationLocal:y
    56 label *label23
-    * ucontrol within *tmp39 *tmp40 6 *tmp41
+   57 ucontrol within .coreX .coreY 6 *tmp41
    58 jump *label25 notEqual *tmp41 false
-    * op sub *tmp43 6 0.5
-    * ucontrol approach *tmp39 *tmp40 5.5
+   59 ucontrol approach .coreX .coreY 5.5
    60 label *label24
    61 jump *label23 always
    62 label *label25
 
    75 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    76 op div *tmp49 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    77 op pow .mapTotal *tmp49 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    78 set :locateOreAway:x :findDrillLocationLocal:oreX
    79 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    80 op mul :locateOreAway:distance 3.8197185279121366 .angle
    81 set :locateOreAway:lastX -1
    82 set :locateOreAway:lastY -1
 
    89 op mul *tmp58 *tmp57 :locateOreAway:distance
    90 op add *tmp59 :findDrillLocationLocal:x *tmp58
    91 op sub *tmp60 @mapw 5
-    * set :limit:value *tmp59
-    * set :limit:low 5
-    * set :limit:high *tmp60
    92 op max *tmp62 *tmp59 5
    93 op min *tmp61 *tmp62 *tmp60
    94 label *label33
 
    97 op mul *tmp65 *tmp64 :locateOreAway:distance
    98 op add *tmp66 :findDrillLocationLocal:y *tmp65
    99 op sub *tmp67 @maph 5
-    * set :limit.1:value *tmp66
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp67
   100 op max *tmp69 *tmp66 5
   101 op min *tmp68 *tmp69 *tmp67
   102 label *label34
   103 set :locateOreAway:ly *tmp68
-    * set :moveTo.2:x *tmp61
-    * set :moveTo.2:y *tmp68
-    * set :moveTo.2:radius 5
   104 label *label36
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp71
+  105 ucontrol within *tmp61 *tmp68 5 *tmp71
   106 jump *label38 notEqual *tmp71 false
-    * op sub *tmp73 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+  107 ucontrol approach *tmp61 *tmp68 4.5
   108 label *label37
   109 jump *label36 always
   110 label *label38
 
   138 jump *label47 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   139 set :locateOreAway:lastX :locateOreAway:x
   140 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   141 set *tmp98 .locations
   142 set :visited:i .locationsStart
   143 label *label50
 
   194 label *label60
   195 set :moveTo.3:x :locateOreAway:x
   196 set :moveTo.3:y :locateOreAway:y
-    * set *tmp121 :findDrillLocationLocal:oreX
-    * set *tmp122 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  197 set *tmp121 :locateOreAway:x
+  198 set *tmp122 :locateOreAway:y
+  199 set :moveTo.4:x :locateOreAway:x
+  200 set :moveTo.4:y :locateOreAway:y
   201 label *label63
-    * ucontrol within *tmp121 *tmp122 6 *tmp123
+  202 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp123
   203 jump *label65 notEqual *tmp123 false
-    * op sub *tmp125 6 0.5
-    * ucontrol approach *tmp121 *tmp122 5.5
+  204 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   205 label *label64
   206 jump *label63 always
   207 label *label65
 
   232 label *label72
   233 label *label73
   234 jump *label74 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   235 op add .count .count 1
-    * set *tmp136 .count
   236 sensor *tmp138 :findDrillLocationLocal:item @id
   237 write *tmp138 bank1 .count
   238 op add .count .count 1
 
   284 jump *label66 always
   285 label *label68
   286 jump *label85 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   287 op add .count .count 1
-    * set *tmp169 .count
   288 sensor *tmp171 :findDrillLocationLocal:item @id
   289 write *tmp171 bank1 .count
   290 op add .count .count 1
 
   327 op shr :shiftMask:mask :shiftMask:mask *tmp192
   328 label *label92
   329 jump *label93 equal :shiftMask:shiftX 0
-    * op abs *tmp195 :shiftMask:shiftX
   330 op shr :shiftMask:keep 0b1111111 *tmp179
   331 jump *label95 lessThanEq :shiftMask:shiftX 0
   332 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   396 setaddr :findPossiblePlacement*retaddr *label111 (h:*label111)
   397 call *label10 *invalid :findPossiblePlacement*retval (m:*label111) (h:*label111)
   398 label *label111
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   399 jump *label112 lessThan :findPossiblePlacement*retval 0
   400 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   401 set :tryPlaceGenerator*retval false
 
   406 op add .water2X *tmp222 :findPossiblePlacement:x
   407 op add *tmp224 :tryPlaceGenerator:centerY 0.5
   408 op add .water2Y *tmp224 :findPossiblePlacement:y
-    * op add *tmp226 :tryPlaceGenerator:centerX 0.5
   409 op add .generatorX *tmp222 :findPossiblePlacement:x
   410 op add *tmp228 :tryPlaceGenerator:centerY 2.5
   411 op add .generatorY *tmp228 :findPossiblePlacement:y
 
   420 setaddr :findPossiblePlacement*retaddr *label116 (h:*label116)
   421 call *label10 *invalid :findPossiblePlacement*retval (m:*label116) (h:*label116)
   422 label *label116
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   423 jump *label117 greaterThanEq :findPossiblePlacement*retval 0
   424 set :tryPlaceGenerator*retval false
   425 jump *label110 always
 
   431 op add .water2Y *tmp236 :findPossiblePlacement:y
   432 op add *tmp238 :tryPlaceGenerator:centerX 2.5
   433 op add .generatorX *tmp238 :findPossiblePlacement:x
-    * op add *tmp240 :tryPlaceGenerator:centerY 0.5
   434 op add .generatorY *tmp236 :findPossiblePlacement:y
   435 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   436 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
 
   442 setaddr :findPossiblePlacement*retaddr *label119 (h:*label119)
   443 call *label10 *invalid :findPossiblePlacement*retval (m:*label119) (h:*label119)
   444 label *label119
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   445 jump *label120 greaterThanEq :findPossiblePlacement*retval 0
   446 set :tryPlaceGenerator*retval false
   447 jump *label110 always
 
   458 setaddr :findPossiblePlacement*retaddr *label122 (h:*label122)
   459 call *label10 *invalid :findPossiblePlacement*retval (m:*label122) (h:*label122)
   460 label *label122
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   461 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   462 set :tryPlaceGenerator*retval false
   463 jump *label110 always
 
   474 setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
   475 call *label10 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
   476 label *label125
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   477 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   478 set :tryPlaceGenerator*retval false
   479 jump *label110 always
 
   481 label *label127
   482 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   483 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp260 1 :findPossiblePlacement*retval
   484 set :tryPlaceGenerator*retval true
   485 jump *label110 always
   486 label *label110
 
   538 setaddr :createBlockMaskRow*retaddr *label139 (h:*label139)
   539 call *label12 *invalid :createBlockMaskRow*retval (m:*label139) (h:*label139)
   540 label *label139
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   541 op shl *tmp277 :createAdjacentMask:row1 1
   542 op or *tmp278 :createAdjacentMask:row2 *tmp277
   543 op shr *tmp279 :createAdjacentMask:row1 1
 
   576 set .water1X -1
   577 set :moveTo.5:x .drillX
   578 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   579 label *label143
   580 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
   581 jump *label145 notEqual *tmp289 false
-    * op sub *tmp291 1 0.5
   582 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   583 label *label144
   584 jump *label143 always
 
   589 setaddr :createCombinedMask*retaddr *label146 (h:*label146)
   590 call *label13 *invalid :createCombinedMask*retval (m:*label146) (h:*label146)
   591 label *label146
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   592 set :createFixedMatrix.1:row0 0b0000000
-    * set :createFixedMatrix.1:row1 0b0000000
-    * set :createFixedMatrix.1:row2 0b0011100
-    * set :createFixedMatrix.1:row3 0b0011100
-    * set :createFixedMatrix.1:row4 0b0011100
-    * set :createFixedMatrix.1:row5 0b0000000
-    * set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp294 0b0000000
-    * op shl *tmp295 0b0000000 7
-    * op or *tmp296 :createFixedMatrix.1:row0 0
-    * op shl *tmp297 0b0011100 14
-    * op or *tmp298 *tmp296 458752
-    * op shl *tmp299 0b0011100 21
-    * op or *tmp300 *tmp298 58720256
-    * op shl *tmp301 0b0011100 28
-    * op or *tmp302 *tmp300 7516192768
-    * op shl *tmp303 0b0000000 35
-    * op or *tmp304 *tmp302 0
-    * op shl *tmp305 0b0000000 42
-    * op or *tmp293 *tmp304 0
+  593 op or *tmp296 0b0000000 0
+  594 op or *tmp298 0 458752
+  595 op or *tmp300 458752 58720256
+  596 op or *tmp302 59179008 7516192768
+  597 op or *tmp304 7575371776 0
+  598 op or *tmp293 7575371776 0
   599 label *label147
-    * op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp293
+  600 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   601 set :createFixedMatrix.2:row0 0b1000001
-    * set :createFixedMatrix.2:row1 0b0000000
-    * set :createFixedMatrix.2:row2 0b0011100
-    * set :createFixedMatrix.2:row3 0b0011100
-    * set :createFixedMatrix.2:row4 0b0011100
-    * set :createFixedMatrix.2:row5 0b0000000
-    * set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp309 0b1000001
-    * op shl *tmp310 0b0000000 7
-    * op or *tmp311 :createFixedMatrix.2:row0 0
-    * op shl *tmp312 0b0011100 14
-    * op or *tmp313 *tmp311 458752
-    * op shl *tmp314 0b0011100 21
-    * op or *tmp315 *tmp313 58720256
-    * op shl *tmp316 0b0011100 28
-    * op or *tmp317 *tmp315 7516192768
-    * op shl *tmp318 0b0000000 35
-    * op or *tmp319 *tmp317 0
-    * op shl *tmp320 0b1000001 42
-    * op or *tmp308 *tmp319 285873023221760
+  602 op or *tmp311 0b1000001 0
+  603 op or *tmp313 65 458752
+  604 op or *tmp315 458817 58720256
+  605 op or *tmp317 59179073 7516192768
+  606 op or *tmp319 7575371841 0
+  607 op or *tmp308 7575371841 285873023221760
   608 label *label148
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp308
+  609 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   610 set :createFixedMatrix.3:row0 0b11
-    * set :createFixedMatrix.3:row1 0b11
-    * set *tmp324 0b11
-    * op shl *tmp325 0b11 7
-    * op or *tmp323 :createFixedMatrix.3:row0 384
+  611 op or *tmp323 0b11 384
   612 label *label149
-    * set :layoutThoriumDrillAtLocation:mask2x2 *tmp323
+  613 set :layoutThoriumDrillAtLocation:mask2x2 387
   614 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask *tmp323
+  615 set :findPossiblePlacement:placementMask 387
   616 set :findPossiblePlacement:width 2
   617 set :findPossiblePlacement:height 2
   618 setaddr :findPossiblePlacement*retaddr *label150 (h:*label150)
   619 call *label10 *invalid :findPossiblePlacement*retval (m:*label150) (h:*label150)
   620 label *label150
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   621 jump *label151 lessThan :findPossiblePlacement*retval 0
   622 op add *tmp330 .drillX 0.5
   623 op add .water1X *tmp330 :findPossiblePlacement:x
 
   625 op add .water1Y *tmp332 :findPossiblePlacement:y
   626 op shl *tmp334 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   627 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
-    * op shl *tmp335 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   628 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp334
   629 label *label151
   630 label *label152
 
   635 setaddr :findPossiblePlacement*retaddr *label153 (h:*label153)
   636 call *label10 *invalid :findPossiblePlacement*retval (m:*label153) (h:*label153)
   637 label *label153
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   638 jump *label154 lessThan :findPossiblePlacement*retval 0
   639 op add *tmp339 .drillX 0.5
   640 op add .containerX *tmp339 :findPossiblePlacement:x
 
   645 label *label154
   646 label *label155
   647 set :createFixedMatrix.4:row0 0b1111
-    * set :createFixedMatrix.4:row1 0b1111
-    * set *tmp345 0b1111
-    * op shl *tmp346 0b1111 7
-    * op or *tmp344 :createFixedMatrix.4:row0 1920
+  648 op or *tmp344 0b1111 1920
   649 label *label156
-    * set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp344
+  650 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   651 set :createFixedMatrix.5:row0 0b11
-    * set :createFixedMatrix.5:row1 0b11
-    * set :createFixedMatrix.5:row2 0b11
-    * set :createFixedMatrix.5:row3 0b11
-    * set *tmp349 0b11
-    * op shl *tmp350 0b11 7
-    * op or *tmp351 :createFixedMatrix.5:row0 384
-    * op shl *tmp352 0b11 14
-    * op or *tmp353 *tmp351 49152
-    * op shl *tmp354 0b11 21
-    * op or *tmp348 *tmp353 6291456
+  652 op or *tmp351 0b11 384
+  653 op or *tmp353 387 49152
+  654 op or *tmp348 49539 6291456
   655 label *label157
-    * set :layoutThoriumDrillAtLocation:generatorVertical *tmp348
+  656 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   657 set :tryPlaceGenerator:centerX .drillX
   658 set :tryPlaceGenerator:centerY .drillY
   659 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal *tmp344
-    * set :tryPlaceGenerator:generatorVertical *tmp348
+  660 set :tryPlaceGenerator:generatorHorizontal 1935
+  661 set :tryPlaceGenerator:generatorVertical 6340995
   662 setaddr :tryPlaceGenerator*retaddr *label158 (h:*label158)
   663 call *label11 *invalid :tryPlaceGenerator*retval (m:*label158) (h:*label158)
   664 label *label158
 
   700 setaddr :shiftMask*retaddr *label169 (h:*label169)
   701 call *label9 *invalid :shiftMask*retval (m:*label169) (h:*label169)
   702 label *label169
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   703 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   704 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
   705 set .lastShiftedMask :shiftMask*retval

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-44 instructions):
 
    14 setaddr :shiftMask*retaddr *label17 (h:*label17)
    15 call *label9 *invalid :shiftMask*retval (m:*label17) (h:*label17)
    16 label *label17
-    * set :createFixedMatrix:row0 0x7E
-    * op or *tmp24 0x7E 16128
-    * op or *tmp26 16254 2064384
-    * op or *tmp28 2080638 264241152
-    * op or *tmp30 266321790 33822867456
-    * op or *tmp32 34089189246 4329327034368
-    * op or *tmp21 4363416223614 554153860399104
    17 label *label18
-    * set :e 558517276622718
    18 assertequals :shiftMask*retval 558517276622718 "Column right"
    19 set *signature "3290b8c661787058:v1"
    20 label *label19
 
    39 set .mapAction "Locating ore..."
    40 set .angle 0
    41 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp39 :findDrillLocationLocal:x
-    * set *tmp40 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    42 label *label23
-    * ucontrol within .coreX .coreY 6 *tmp41
+   43 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp41
    44 jump *label25 notEqual *tmp41 false
-    * ucontrol approach .coreX .coreY 5.5
+   45 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    46 label *label24
    47 jump *label23 always
    48 label *label25
 
    78 op max *tmp62 *tmp59 5
    79 op min *tmp61 *tmp62 *tmp60
    80 label *label33
-    * set :locateOreAway:lx *tmp61
    81 op cos *tmp64 :locateOreAway:a
    82 op mul *tmp65 *tmp64 :locateOreAway:distance
    83 op add *tmp66 :findDrillLocationLocal:y *tmp65
 
    85 op max *tmp69 *tmp66 5
    86 op min *tmp68 *tmp69 *tmp67
    87 label *label34
-    * set :locateOreAway:ly *tmp68
    88 label *label36
    89 ucontrol within *tmp61 *tmp68 5 *tmp71
    90 jump *label38 notEqual *tmp71 false
 
   176 op add .mapSpots .mapSpots 1
   177 label *label59
   178 label *label60
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp121 :locateOreAway:x
-    * set *tmp122 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   179 label *label63
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp123
+  180 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123
   181 jump *label65 notEqual *tmp123 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  182 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   183 label *label64
   184 jump *label63 always
   185 label *label65
 
   567 setaddr :createCombinedMask*retaddr *label146 (h:*label146)
   568 call *label13 *invalid :createCombinedMask*retval (m:*label146) (h:*label146)
   569 label *label146
-    * set :createFixedMatrix.1:row0 0b0000000
-    * op or *tmp296 0b0000000 0
-    * op or *tmp298 0 458752
-    * op or *tmp300 458752 58720256
-    * op or *tmp302 59179008 7516192768
-    * op or *tmp304 7575371776 0
-    * op or *tmp293 7575371776 0
   570 label *label147
   571 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * set :createFixedMatrix.2:row0 0b1000001
-    * op or *tmp311 0b1000001 0
-    * op or *tmp313 65 458752
-    * op or *tmp315 458817 58720256
-    * op or *tmp317 59179073 7516192768
-    * op or *tmp319 7575371841 0
-    * op or *tmp308 7575371841 285873023221760
   572 label *label148
   573 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :createFixedMatrix.3:row0 0b11
-    * op or *tmp323 0b11 384
   574 label *label149
   575 set :layoutThoriumDrillAtLocation:mask2x2 387
   576 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   606 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
   607 label *label154
   608 label *label155
-    * set :createFixedMatrix.4:row0 0b1111
-    * op or *tmp344 0b1111 1920
   609 label *label156
   610 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * set :createFixedMatrix.5:row0 0b11
-    * op or *tmp351 0b11 384
-    * op or *tmp353 387 49152
-    * op or *tmp348 49539 6291456
   611 label *label157
   612 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   613 set :tryPlaceGenerator:centerX .drillX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    68 set :locateOreAway:lastY -1
    69 op max .angle .angle @pi
    70 op mul .mapProgress .angle .angle
+   71 op sub *tmp60 @mapw 5
+   72 op sub *tmp67 @maph 5
    73 label *label30
    74 jump *label32 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp57 :locateOreAway:a
    77 op mul *tmp58 *tmp57 :locateOreAway:distance
    78 op add *tmp59 :findDrillLocationLocal:x *tmp58
-    * op sub *tmp60 @mapw 5
    79 op max *tmp62 *tmp59 5
    80 op min *tmp61 *tmp62 *tmp60
    81 label *label33
    82 op cos *tmp64 :locateOreAway:a
    83 op mul *tmp65 *tmp64 :locateOreAway:distance
    84 op add *tmp66 :findDrillLocationLocal:y *tmp65
-    * op sub *tmp67 @maph 5
    85 op max *tmp69 *tmp66 5
    86 op min *tmp68 *tmp69 *tmp67
    87 label *label34

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
    72 op sub *tmp67 @maph 5
    73 label *label30
    74 jump *label32 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   75 label *label181
    76 op div :locateOreAway:a .angle @degToRad
    77 op sin *tmp57 :locateOreAway:a
    78 op mul *tmp58 *tmp57 :locateOreAway:distance
 
   127 set :visited:i .locationsStart
   128 label *label50
   129 jump *label52 greaterThanEq :visited:i *tmp98
+  130 label *label182
   131 op mul :visited:index 4 :visited:i
   132 op add *tmp100 :visited:index 2
   133 read :visited:lx bank1 *tmp100
 
   143 label *label54
   144 label *label51
   145 op add :visited:i :visited:i 1
-    * jump *label50 always
+  146 jump *label182 lessThan :visited:i *tmp98
   147 label *label52
   148 set *tmp97 false
   149 jump *label49 always
 
   162 label *label45
   163 label *label46
   164 label *label31
-    * jump *label30 always
+  165 jump *label181 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   166 label *label32
   167 set *tmp51 false
   168 jump *label29 always
 
   330 set :findPossiblePlacement:y -3
   331 label *label98
   332 jump *label100 greaterThan :findPossiblePlacement:y 3
+  333 label *label183
   334 op add *tmp202 :findPossiblePlacement:y 3
   335 op mul *tmp203 7 *tmp202
   336 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp203
   337 set :findPossiblePlacement:x -3
   338 label *label101
   339 jump *label103 greaterThan :findPossiblePlacement:x 3
+  340 label *label184
   341 op and *tmp205 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   342 jump *label104 notEqual *tmp205 0
   343 op mul *tmp208 :findPossiblePlacement:y 7
 
   354 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   355 label *label102
   356 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label101 always
+  357 jump *label184 lessThanEq :findPossiblePlacement:x 3
   358 label *label103
   359 op sub *tmp214 3 :findPossiblePlacement:height
   360 jump *label108 lessThanEq :findPossiblePlacement:y *tmp214
 
   363 label *label109
   364 label *label99
   365 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label98 always
+  366 jump *label183 lessThanEq :findPossiblePlacement:y 3
   367 label *label100
   368 set :findPossiblePlacement*retval -1
   369 jump *label97 always
 
   472 set :createBlockMaskRow:result 0
   473 set :createBlockMaskRow:c 4
   474 label *label129
-    * jump *label131 lessThan :createBlockMaskRow:c -4
+  475 label *label185
   476 op shl *tmp261 :createBlockMaskRow:result 1
   477 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
   478 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   479 op or :createBlockMaskRow:result *tmp261 *tmp263
   480 label *label130
   481 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label129 always
+  482 jump *label185 greaterThanEq :createBlockMaskRow:c -4
   483 label *label131
   484 set :createBlockMaskRow*retval :createBlockMaskRow:result
   485 jump *label128 always
 
   513 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   514 set :createAdjacentMask:r 2
   515 label *label136
-    * jump *label138 lessThan :createAdjacentMask:r -4
+  516 label *label186
   517 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   518 set :createBlockMaskRow:x :createAdjacentMask:x
   519 set :createBlockMaskRow:y *tmp275
 
   532 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   533 label *label137
   534 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label136 always
+  535 jump *label186 greaterThanEq :createAdjacentMask:r -4
   536 label *label138
   537 op shr *tmp270 :createAdjacentMask:result 1
   538 label *label133

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
    89 label *label36
    90 ucontrol within *tmp61 *tmp68 5 *tmp71
    91 jump *label38 notEqual *tmp71 false
+   92 label *label187
    93 ucontrol approach *tmp61 *tmp68 4.5
    94 label *label37
-    * jump *label36 always
+   95 ucontrol within *tmp61 *tmp68 5 *tmp71
+   96 jump *label187 equal *tmp71 false
    97 label *label38
    98 label *label35
    99 op div *tmp74 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   128 set *tmp98 .locations
   129 set :visited:i .locationsStart
   130 label *label50
-    * jump *label52 greaterThanEq :visited:i *tmp98
+  131 jump *label52 greaterThanEq .locationsStart *tmp98
   132 label *label182
   133 op mul :visited:index 4 :visited:i
   134 op add *tmp100 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:414:5 (+39 instructions):
 
   472 end
   473 label *label12
   474 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label129
-    * label *label185
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label130
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label185 greaterThanEq :createBlockMaskRow:c -4
-    * label *label131
+  475 set :createBlockMaskRow:c 4
+  476 label *label188
+  477 label *label189
+  478 op shl *tmp261 :createBlockMaskRow:result 1
+  479 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  480 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  481 op or :createBlockMaskRow:result *tmp261 *tmp263
+  482 label *label190
+  483 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  484 label *label191
+  485 op shl *tmp261 :createBlockMaskRow:result 1
+  486 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  487 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  488 op or :createBlockMaskRow:result *tmp261 *tmp263
+  489 label *label192
+  490 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  491 label *label193
+  492 op shl *tmp261 :createBlockMaskRow:result 1
+  493 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  494 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  495 op or :createBlockMaskRow:result *tmp261 *tmp263
+  496 label *label194
+  497 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  498 label *label195
+  499 op shl *tmp261 :createBlockMaskRow:result 1
+  500 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  501 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  502 op or :createBlockMaskRow:result *tmp261 *tmp263
+  503 label *label196
+  504 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  505 label *label197
+  506 op shl *tmp261 :createBlockMaskRow:result 1
+  507 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  508 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  509 op or :createBlockMaskRow:result *tmp261 *tmp263
+  510 label *label198
+  511 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  512 label *label199
+  513 op shl *tmp261 :createBlockMaskRow:result 1
+  514 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  515 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  516 op or :createBlockMaskRow:result *tmp261 *tmp263
+  517 label *label200
+  518 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  519 label *label201
+  520 op shl *tmp261 :createBlockMaskRow:result 1
+  521 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  522 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  523 op or :createBlockMaskRow:result *tmp261 *tmp263
+  524 label *label202
+  525 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  526 label *label203
+  527 op shl *tmp261 :createBlockMaskRow:result 1
+  528 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  529 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  530 op or :createBlockMaskRow:result *tmp261 *tmp263
+  531 label *label204
+  532 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  533 label *label205
+  534 op shl *tmp261 :createBlockMaskRow:result 1
+  535 op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  536 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  537 op or :createBlockMaskRow:result *tmp261 *tmp263
+  538 label *label206
+  539 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  540 label *label131
   541 set :createBlockMaskRow*retval :createBlockMaskRow:result
   542 jump *label128 always
   543 label *label128

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   475 set :createBlockMaskRow:c 4
   476 label *label188
   477 label *label189
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  478 op shl *tmp261 0 1
+  479 op add *tmp262 :createBlockMaskRow:x 4
   480 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
+  481 op or :createBlockMaskRow:result 0 *tmp263
   482 label *label190
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  483 op sub :createBlockMaskRow:c 4 1
   484 label *label191
   485 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  486 op add *tmp262 :createBlockMaskRow:x 3
   487 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   488 op or :createBlockMaskRow:result *tmp261 *tmp263
   489 label *label192
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  490 op sub :createBlockMaskRow:c 3 1
   491 label *label193
   492 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  493 op add *tmp262 :createBlockMaskRow:x 2
   494 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   495 op or :createBlockMaskRow:result *tmp261 *tmp263
   496 label *label194
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  497 op sub :createBlockMaskRow:c 2 1
   498 label *label195
   499 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  500 op add *tmp262 :createBlockMaskRow:x 1
   501 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   502 op or :createBlockMaskRow:result *tmp261 *tmp263
   503 label *label196
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  504 op sub :createBlockMaskRow:c 1 1
   505 label *label197
   506 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  507 op add *tmp262 :createBlockMaskRow:x 0
   508 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   509 op or :createBlockMaskRow:result *tmp261 *tmp263
   510 label *label198
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  511 op sub :createBlockMaskRow:c 0 1
   512 label *label199
   513 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  514 op add *tmp262 :createBlockMaskRow:x -1
   515 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   516 op or :createBlockMaskRow:result *tmp261 *tmp263
   517 label *label200
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  518 op sub :createBlockMaskRow:c -1 1
   519 label *label201
   520 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  521 op add *tmp262 :createBlockMaskRow:x -2
   522 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   523 op or :createBlockMaskRow:result *tmp261 *tmp263
   524 label *label202
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  525 op sub :createBlockMaskRow:c -2 1
   526 label *label203
   527 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  528 op add *tmp262 :createBlockMaskRow:x -3
   529 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   530 op or :createBlockMaskRow:result *tmp261 *tmp263
   531 label *label204
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  532 op sub :createBlockMaskRow:c -3 1
   533 label *label205
   534 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x :createBlockMaskRow:c
+  535 op add *tmp262 :createBlockMaskRow:x -4
   536 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   537 op or :createBlockMaskRow:result *tmp261 *tmp263
   538 label *label206
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  539 op sub :createBlockMaskRow:c -4 1
   540 label *label131
   541 set :createBlockMaskRow*retval :createBlockMaskRow:result
   542 jump *label128 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   471 return :tryPlaceGenerator*retaddr
   472 end
   473 label *label12
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   474 label *label188
   475 label *label189
-    * op shl *tmp261 0 1
   476 op add *tmp262 :createBlockMaskRow:x 4
   477 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   478 op or :createBlockMaskRow:result 0 *tmp263
   479 label *label190
-    * op sub :createBlockMaskRow:c 4 1
   480 label *label191
   481 op shl *tmp261 :createBlockMaskRow:result 1
   482 op add *tmp262 :createBlockMaskRow:x 3
   483 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   484 op or :createBlockMaskRow:result *tmp261 *tmp263
   485 label *label192
-    * op sub :createBlockMaskRow:c 3 1
   486 label *label193
   487 op shl *tmp261 :createBlockMaskRow:result 1
   488 op add *tmp262 :createBlockMaskRow:x 2
   489 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   490 op or :createBlockMaskRow:result *tmp261 *tmp263
   491 label *label194
-    * op sub :createBlockMaskRow:c 2 1
   492 label *label195
   493 op shl *tmp261 :createBlockMaskRow:result 1
   494 op add *tmp262 :createBlockMaskRow:x 1
   495 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   496 op or :createBlockMaskRow:result *tmp261 *tmp263
   497 label *label196
-    * op sub :createBlockMaskRow:c 1 1
   498 label *label197
   499 op shl *tmp261 :createBlockMaskRow:result 1
   500 op add *tmp262 :createBlockMaskRow:x 0
   501 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   502 op or :createBlockMaskRow:result *tmp261 *tmp263
   503 label *label198
-    * op sub :createBlockMaskRow:c 0 1
   504 label *label199
   505 op shl *tmp261 :createBlockMaskRow:result 1
   506 op add *tmp262 :createBlockMaskRow:x -1
   507 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   508 op or :createBlockMaskRow:result *tmp261 *tmp263
   509 label *label200
-    * op sub :createBlockMaskRow:c -1 1
   510 label *label201
   511 op shl *tmp261 :createBlockMaskRow:result 1
   512 op add *tmp262 :createBlockMaskRow:x -2
   513 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   514 op or :createBlockMaskRow:result *tmp261 *tmp263
   515 label *label202
-    * op sub :createBlockMaskRow:c -2 1
   516 label *label203
   517 op shl *tmp261 :createBlockMaskRow:result 1
   518 op add *tmp262 :createBlockMaskRow:x -3
   519 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   520 op or :createBlockMaskRow:result *tmp261 *tmp263
   521 label *label204
-    * op sub :createBlockMaskRow:c -3 1
   522 label *label205
   523 op shl *tmp261 :createBlockMaskRow:result 1
   524 op add *tmp262 :createBlockMaskRow:x -4
   525 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
   526 op or :createBlockMaskRow:result *tmp261 *tmp263
   527 label *label206
-    * op sub :createBlockMaskRow:c -4 1
   528 label *label131
   529 set :createBlockMaskRow*retval :createBlockMaskRow:result
   530 jump *label128 always

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
   183 label *label63
   184 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123
   185 jump *label65 notEqual *tmp123 false
+  186 label *label207
   187 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   188 label *label64
-    * jump *label63 always
+  189 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123
+  190 jump *label207 equal *tmp123 false
   191 label *label65
   192 label *label62
   193 label *label61

Modifications by Unroll loop at OreLocator.mnd:428:5 (+95 instructions):
 
   558 call *label12 *invalid :createBlockMaskRow*retval (m:*label135) (h:*label135)
   559 label *label135
   560 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label136
-    * label *label186
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label139 (h:*label139)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label139) (h:*label139)
-    * label *label139
-    * op shl *tmp277 :createAdjacentMask:row1 1
-    * op or *tmp278 :createAdjacentMask:row2 *tmp277
-    * op shr *tmp279 :createAdjacentMask:row1 1
-    * op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
-    * op shl *tmp282 :createAdjacentMask:result 7
-    * op and *tmp283 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp282 *tmp283
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label137
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label186 greaterThanEq :createAdjacentMask:r -4
-    * label *label138
+  561 set :createAdjacentMask:r 2
+  562 label *label208
+  563 label *label209
+  564 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  565 set :createBlockMaskRow:x :createAdjacentMask:x
+  566 set :createBlockMaskRow:y *tmp275
+  567 setaddr :createBlockMaskRow*retaddr *label210 (h:*label210)
+  568 call *label12 *invalid :createBlockMaskRow*retval (m:*label210) (h:*label210)
+  569 label *label210
+  570 op shl *tmp277 :createAdjacentMask:row1 1
+  571 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  572 op shr *tmp279 :createAdjacentMask:row1 1
+  573 op or *tmp280 *tmp278 *tmp279
+  574 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  575 op shl *tmp282 :createAdjacentMask:result 7
+  576 op and *tmp283 :createAdjacentMask:mask 0xFE
+  577 op or :createAdjacentMask:result *tmp282 *tmp283
+  578 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  579 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  580 label *label211
+  581 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  582 label *label212
+  583 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  584 set :createBlockMaskRow:x :createAdjacentMask:x
+  585 set :createBlockMaskRow:y *tmp275
+  586 setaddr :createBlockMaskRow*retaddr *label213 (h:*label213)
+  587 call *label12 *invalid :createBlockMaskRow*retval (m:*label213) (h:*label213)
+  588 label *label213
+  589 op shl *tmp277 :createAdjacentMask:row1 1
+  590 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  591 op shr *tmp279 :createAdjacentMask:row1 1
+  592 op or *tmp280 *tmp278 *tmp279
+  593 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  594 op shl *tmp282 :createAdjacentMask:result 7
+  595 op and *tmp283 :createAdjacentMask:mask 0xFE
+  596 op or :createAdjacentMask:result *tmp282 *tmp283
+  597 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  598 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  599 label *label214
+  600 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  601 label *label215
+  602 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  603 set :createBlockMaskRow:x :createAdjacentMask:x
+  604 set :createBlockMaskRow:y *tmp275
+  605 setaddr :createBlockMaskRow*retaddr *label216 (h:*label216)
+  606 call *label12 *invalid :createBlockMaskRow*retval (m:*label216) (h:*label216)
+  607 label *label216
+  608 op shl *tmp277 :createAdjacentMask:row1 1
+  609 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  610 op shr *tmp279 :createAdjacentMask:row1 1
+  611 op or *tmp280 *tmp278 *tmp279
+  612 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  613 op shl *tmp282 :createAdjacentMask:result 7
+  614 op and *tmp283 :createAdjacentMask:mask 0xFE
+  615 op or :createAdjacentMask:result *tmp282 *tmp283
+  616 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  617 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  618 label *label217
+  619 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  620 label *label218
+  621 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  622 set :createBlockMaskRow:x :createAdjacentMask:x
+  623 set :createBlockMaskRow:y *tmp275
+  624 setaddr :createBlockMaskRow*retaddr *label219 (h:*label219)
+  625 call *label12 *invalid :createBlockMaskRow*retval (m:*label219) (h:*label219)
+  626 label *label219
+  627 op shl *tmp277 :createAdjacentMask:row1 1
+  628 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  629 op shr *tmp279 :createAdjacentMask:row1 1
+  630 op or *tmp280 *tmp278 *tmp279
+  631 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  632 op shl *tmp282 :createAdjacentMask:result 7
+  633 op and *tmp283 :createAdjacentMask:mask 0xFE
+  634 op or :createAdjacentMask:result *tmp282 *tmp283
+  635 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  636 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  637 label *label220
+  638 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  639 label *label221
+  640 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  641 set :createBlockMaskRow:x :createAdjacentMask:x
+  642 set :createBlockMaskRow:y *tmp275
+  643 setaddr :createBlockMaskRow*retaddr *label222 (h:*label222)
+  644 call *label12 *invalid :createBlockMaskRow*retval (m:*label222) (h:*label222)
+  645 label *label222
+  646 op shl *tmp277 :createAdjacentMask:row1 1
+  647 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  648 op shr *tmp279 :createAdjacentMask:row1 1
+  649 op or *tmp280 *tmp278 *tmp279
+  650 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  651 op shl *tmp282 :createAdjacentMask:result 7
+  652 op and *tmp283 :createAdjacentMask:mask 0xFE
+  653 op or :createAdjacentMask:result *tmp282 *tmp283
+  654 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  655 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  656 label *label223
+  657 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  658 label *label224
+  659 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  660 set :createBlockMaskRow:x :createAdjacentMask:x
+  661 set :createBlockMaskRow:y *tmp275
+  662 setaddr :createBlockMaskRow*retaddr *label225 (h:*label225)
+  663 call *label12 *invalid :createBlockMaskRow*retval (m:*label225) (h:*label225)
+  664 label *label225
+  665 op shl *tmp277 :createAdjacentMask:row1 1
+  666 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  667 op shr *tmp279 :createAdjacentMask:row1 1
+  668 op or *tmp280 *tmp278 *tmp279
+  669 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  670 op shl *tmp282 :createAdjacentMask:result 7
+  671 op and *tmp283 :createAdjacentMask:mask 0xFE
+  672 op or :createAdjacentMask:result *tmp282 *tmp283
+  673 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  674 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  675 label *label226
+  676 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  677 label *label227
+  678 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  679 set :createBlockMaskRow:x :createAdjacentMask:x
+  680 set :createBlockMaskRow:y *tmp275
+  681 setaddr :createBlockMaskRow*retaddr *label228 (h:*label228)
+  682 call *label12 *invalid :createBlockMaskRow*retval (m:*label228) (h:*label228)
+  683 label *label228
+  684 op shl *tmp277 :createAdjacentMask:row1 1
+  685 op or *tmp278 :createAdjacentMask:row2 *tmp277
+  686 op shr *tmp279 :createAdjacentMask:row1 1
+  687 op or *tmp280 *tmp278 *tmp279
+  688 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  689 op shl *tmp282 :createAdjacentMask:result 7
+  690 op and *tmp283 :createAdjacentMask:mask 0xFE
+  691 op or :createAdjacentMask:result *tmp282 *tmp283
+  692 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  693 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  694 label *label229
+  695 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  696 label *label138
   697 op shr *tmp270 :createAdjacentMask:result 1
   698 label *label133
   699 set .adjacentMask *tmp270

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-3 instructions):
 
   561 set :createAdjacentMask:r 2
   562 label *label208
   563 label *label209
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
+  564 op add *tmp275 :createAdjacentMask:y 2
   565 set :createBlockMaskRow:x :createAdjacentMask:x
   566 set :createBlockMaskRow:y *tmp275
   567 setaddr :createBlockMaskRow*retaddr *label210 (h:*label210)
 
   689 op shl *tmp282 :createAdjacentMask:result 7
   690 op and *tmp283 :createAdjacentMask:mask 0xFE
   691 op or :createAdjacentMask:result *tmp282 *tmp283
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
   692 label *label229
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
   693 label *label138
   694 op shr *tmp270 :createAdjacentMask:result 1
   695 label *label133

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
    42 label *label23
    43 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp41
    44 jump *label25 notEqual *tmp41 false
+   45 label *label230
    46 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    47 label *label24
-    * jump *label23 always
+   48 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp41
+   49 jump *label230 equal *tmp41 false
    50 label *label25
    51 label *label22
    52 label *label21

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
   720 label *label143
   721 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
   722 jump *label145 notEqual *tmp289 false
+  723 label *label231
   724 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   725 label *label144
-    * jump *label143 always
+  726 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
+  727 jump *label231 equal *tmp289 false
   728 label *label145
   729 label *label142
   730 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:268:1 (+24 instructions):
 
    11 set :shiftMask:mask 562949953421312
    12 set :shiftMask:shiftX 1
    13 set :shiftMask:shiftY 0
-    * setaddr :shiftMask*retaddr *label17 (h:*label17)
-    * call *label9 *invalid :shiftMask*retval (m:*label17) (h:*label17)
-    * label *label17
+   14 label *label232
+   15 op abs *tmp179 :shiftMask:shiftX
+   16 op greaterThan *tmp180 *tmp179 6
+   17 op abs *tmp181 :shiftMask:shiftY
+   18 op greaterThan *tmp182 *tmp181 6
+   19 op or *tmp183 *tmp180 *tmp182
+   20 jump *label233 equal *tmp183 false
+   21 set :shiftMask*retval 0
+   22 jump *label241 always
+   23 label *label233
+   24 label *label234
+   25 op mul *tmp185 7 :shiftMask:shiftY
+   26 op add :shiftMask:shift :shiftMask:shiftX *tmp185
+   27 jump *label235 lessThanEq :shiftMask:shift 0
+   28 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+   29 op and *tmp190 :shiftMask:mask :shiftMask:clearMask
+   30 op shl :shiftMask:mask *tmp190 :shiftMask:shift
+   31 jump *label236 always
+   32 label *label235
+   33 op sub *tmp192 0 :shiftMask:shift
+   34 op shr :shiftMask:mask :shiftMask:mask *tmp192
+   35 label *label236
+   36 jump *label239 equal :shiftMask:shiftX 0
+   37 op shr :shiftMask:keep 0b1111111 *tmp179
+   38 jump *label237 lessThanEq :shiftMask:shiftX 0
+   39 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+   40 label *label237
+   41 label *label238
+   42 op shl *tmp199 :shiftMask:keep 7
+   43 op or :shiftMask:keep :shiftMask:keep *tmp199
+   44 op shl *tmp200 :shiftMask:keep 14
+   45 op or :shiftMask:keep :shiftMask:keep *tmp200
+   46 op shl *tmp201 :shiftMask:keep 21
+   47 op or :shiftMask:keep :shiftMask:keep *tmp201
+   48 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+   49 label *label239
+   50 label *label240
+   51 set :shiftMask*retval :shiftMask:mask
+   52 jump *label241 always
+   53 label *label241
    54 label *label18
    55 assertequals :shiftMask*retval 558517276622718 "Column right"
    56 set *signature "3290b8c661787058:v1"
 
   327 label *label20
   328 return :findDrillLocationLocal*retaddr
   329 end
-    * label *label9
-    * op abs *tmp179 :shiftMask:shiftX
-    * op greaterThan *tmp180 *tmp179 6
-    * op abs *tmp181 :shiftMask:shiftY
-    * op greaterThan *tmp182 *tmp181 6
-    * op or *tmp183 *tmp180 *tmp182
-    * jump *label89 equal *tmp183 false
-    * set :shiftMask*retval 0
-    * jump *label88 always
-    * label *label89
-    * label *label90
-    * op mul *tmp185 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp185
-    * jump *label91 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp190 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp190 :shiftMask:shift
-    * jump *label92 always
-    * label *label91
-    * op sub *tmp192 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp192
-    * label *label92
-    * jump *label93 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp179
-    * jump *label95 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label95
-    * label *label96
-    * op shl *tmp199 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp199
-    * op shl *tmp200 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp200
-    * op shl *tmp201 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp201
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label93
-    * label *label94
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label88 always
-    * label *label88
-    * return :shiftMask*retaddr
-    * end
   330 label *label10
   331 set :findPossiblePlacement:y -3
   332 label *label98
 
   813 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   814 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   815 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label169 (h:*label169)
-    * call *label9 *invalid :shiftMask*retval (m:*label169) (h:*label169)
-    * label *label169
+  816 label *label242
+  817 op abs *tmp179 :shiftMask:shiftX
+  818 op greaterThan *tmp180 *tmp179 6
+  819 op abs *tmp181 :shiftMask:shiftY
+  820 op greaterThan *tmp182 *tmp181 6
+  821 op or *tmp183 *tmp180 *tmp182
+  822 jump *label243 equal *tmp183 false
+  823 set :shiftMask*retval 0
+  824 jump *label251 always
+  825 label *label243
+  826 label *label244
+  827 op mul *tmp185 7 :shiftMask:shiftY
+  828 op add :shiftMask:shift :shiftMask:shiftX *tmp185
+  829 jump *label245 lessThanEq :shiftMask:shift 0
+  830 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  831 op and *tmp190 :shiftMask:mask :shiftMask:clearMask
+  832 op shl :shiftMask:mask *tmp190 :shiftMask:shift
+  833 jump *label246 always
+  834 label *label245
+  835 op sub *tmp192 0 :shiftMask:shift
+  836 op shr :shiftMask:mask :shiftMask:mask *tmp192
+  837 label *label246
+  838 jump *label249 equal :shiftMask:shiftX 0
+  839 op shr :shiftMask:keep 0b1111111 *tmp179
+  840 jump *label247 lessThanEq :shiftMask:shiftX 0
+  841 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  842 label *label247
+  843 label *label248
+  844 op shl *tmp199 :shiftMask:keep 7
+  845 op or :shiftMask:keep :shiftMask:keep *tmp199
+  846 op shl *tmp200 :shiftMask:keep 14
+  847 op or :shiftMask:keep :shiftMask:keep *tmp200
+  848 op shl *tmp201 :shiftMask:keep 21
+  849 op or :shiftMask:keep :shiftMask:keep *tmp201
+  850 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  851 label *label249
+  852 label *label250
+  853 set :shiftMask*retval :shiftMask:mask
+  854 jump *label251 always
+  855 label *label251
   856 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   857 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
   858 set .lastShiftedMask :shiftMask*retval

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
    12 set :shiftMask:shiftX 1
    13 set :shiftMask:shiftY 0
    14 label *label232
-    * op abs *tmp179 :shiftMask:shiftX
-    * op greaterThan *tmp180 *tmp179 6
-    * op abs *tmp181 :shiftMask:shiftY
-    * op greaterThan *tmp182 *tmp181 6
-    * op or *tmp183 *tmp180 *tmp182
-    * jump *label233 equal *tmp183 false
-    * set :shiftMask*retval 0
+   15 op abs *tmp179 1
+   16 op greaterThan *tmp180 1 6
+   17 op abs *tmp181 0
+   18 op greaterThan *tmp182 0 6
+   19 op or *tmp183 false false
+   20 jump *label233 equal 0 false
    21 jump *label241 always
    22 label *label233
    23 label *label234
-    * op mul *tmp185 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp185
-    * jump *label235 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp190 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp190 :shiftMask:shift
+   24 op mul *tmp185 7 0
+   25 op add :shiftMask:shift 1 0
+   26 jump *label235 lessThanEq 1 0
+   27 op shr :shiftMask:clearMask 562949953421311 1
+   28 op and *tmp190 562949953421312 281474976710655
+   29 op shl :shiftMask:mask 0 1
    30 jump *label236 always
    31 label *label235
-    * op sub *tmp192 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp192
+   32 op sub *tmp192 0 1
+   33 op shr :shiftMask:mask 562949953421312 -1
    34 label *label236
-    * jump *label239 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp179
-    * jump *label237 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+   35 jump *label239 equal 1 0
+   36 op shr :shiftMask:keep 0b1111111 1
+   37 jump *label237 lessThanEq 1 0
+   38 op shl :shiftMask:keep 63 1
    39 label *label237
    40 label *label238
-    * op shl *tmp199 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp199
-    * op shl *tmp200 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp200
-    * op shl *tmp201 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp201
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+   41 op shl *tmp199 126 7
+   42 op or :shiftMask:keep 126 16128
+   43 op shl *tmp200 16254 14
+   44 op or :shiftMask:keep 16254 266305536
+   45 op shl *tmp201 266321790 21
+   46 op or :shiftMask:keep 266321790 558517274542080
+   47 op and :shiftMask:mask 0 558517276622718
    48 label *label239
    49 label *label240
-    * set :shiftMask*retval :shiftMask:mask
+   50 set :shiftMask*retval 0
    51 jump *label241 always
    52 label *label241
    53 label *label18
-    * assertequals :shiftMask*retval 558517276622718 "Column right"
+   54 assertequals :shiftMask:mask 558517276622718 "Column right"
    55 set *signature "3290b8c661787058:v1"
    56 label *label19
    57 wait 1e12
 
   813 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   814 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   815 label *label242
-    * op abs *tmp179 :shiftMask:shiftX
+  816 op abs *tmp179 :layoutThoriumDrillAtLocation:sx
   817 op greaterThan *tmp180 *tmp179 6
-    * op abs *tmp181 :shiftMask:shiftY
+  818 op abs *tmp181 :layoutThoriumDrillAtLocation:sy
   819 op greaterThan *tmp182 *tmp181 6
   820 op or *tmp183 *tmp180 *tmp182
   821 jump *label243 equal *tmp183 false
 
   823 jump *label251 always
   824 label *label243
   825 label *label244
-    * op mul *tmp185 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp185
+  826 op mul *tmp185 7 :layoutThoriumDrillAtLocation:sy
+  827 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp185
   828 jump *label245 lessThanEq :shiftMask:shift 0
   829 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp190 :shiftMask:mask :shiftMask:clearMask
+  830 op and *tmp190 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   831 op shl :shiftMask:mask *tmp190 :shiftMask:shift
   832 jump *label246 always
   833 label *label245
   834 op sub *tmp192 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp192
+  835 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp192
   836 label *label246
-    * jump *label249 equal :shiftMask:shiftX 0
+  837 jump *label249 equal :layoutThoriumDrillAtLocation:sx 0
   838 op shr :shiftMask:keep 0b1111111 *tmp179
-    * jump *label247 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  839 jump *label247 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  840 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   841 label *label247
   842 label *label248
   843 op shl *tmp199 :shiftMask:keep 7
 
   852 set :shiftMask*retval :shiftMask:mask
   853 jump *label251 always
   854 label *label251
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  855 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   856 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
   857 set .lastShiftedMask :shiftMask*retval
   858 set .lastCombinedMask :layoutThoriumDrillAtLocation:combinedMask

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
     8 set .attenuationRate 50
     9 set .locations 0
    10 set .count -1
-    * set :shiftMask:mask 562949953421312
-    * set :shiftMask:shiftX 1
-    * set :shiftMask:shiftY 0
    11 label *label232
    12 op abs *tmp179 1
    13 op greaterThan *tmp180 1 6
 
    23 jump *label235 lessThanEq 1 0
    24 op shr :shiftMask:clearMask 562949953421311 1
    25 op and *tmp190 562949953421312 281474976710655
-    * op shl :shiftMask:mask 0 1
    26 jump *label236 always
    27 label *label235
-    * op sub *tmp192 0 1
-    * op shr :shiftMask:mask 562949953421312 -1
    28 label *label236
    29 jump *label239 equal 1 0
-    * op shr :shiftMask:keep 0b1111111 1
    30 jump *label237 lessThanEq 1 0
-    * op shl :shiftMask:keep 63 1
    31 label *label237
    32 label *label238
    33 op shl *tmp199 126 7
-    * op or :shiftMask:keep 126 16128
    34 op shl *tmp200 16254 14
-    * op or :shiftMask:keep 16254 266305536
    35 op shl *tmp201 266321790 21
    36 op or :shiftMask:keep 266321790 558517274542080
    37 op and :shiftMask:mask 0 558517276622718
 
    41 jump *label241 always
    42 label *label241
    43 label *label18
-    * assertequals :shiftMask:mask 558517276622718 "Column right"
+   44 assertequals 0 558517276622718 "Column right"
    45 set *signature "3290b8c661787058:v1"
    46 label *label19
    47 wait 1e12
 
   798 setaddr :createCombinedMask*retaddr *label168 (h:*label168)
   799 call *label13 *invalid :createCombinedMask*retval (m:*label168) (h:*label168)
   800 label *label168
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   801 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   802 label *label242
   803 op abs *tmp179 :layoutThoriumDrillAtLocation:sx
   804 op greaterThan *tmp180 *tmp179 6

Modifications by Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 (+276 instructions):
 
   458 label *label110
   459 return :tryPlaceGenerator*retaddr
   460 end
-    * label *label12
-    * label *label188
-    * label *label189
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
-    * label *label190
-    * label *label191
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label192
-    * label *label193
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label194
-    * label *label195
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label196
-    * label *label197
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label198
-    * label *label199
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label200
-    * label *label201
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label202
-    * label *label203
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label204
-    * label *label205
-    * op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label206
-    * label *label131
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label128 always
-    * label *label128
-    * return :createBlockMaskRow*retaddr
-    * end
   461 label *label13
   462 write @unit processor1 ":createTerrainMask:unit"
   463 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   472 op add *tmp271 :createCombinedMask:y 4
   473 set :createBlockMaskRow:x :createCombinedMask:x
   474 set :createBlockMaskRow:y *tmp271
-    * setaddr :createBlockMaskRow*retaddr *label134 (h:*label134)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label134) (h:*label134)
-    * label *label134
+  475 label *label252
+  476 label *label253
+  477 label *label254
+  478 op add *tmp262 :createBlockMaskRow:x 4
+  479 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  480 op or :createBlockMaskRow:result 0 *tmp263
+  481 label *label255
+  482 label *label256
+  483 op shl *tmp261 :createBlockMaskRow:result 1
+  484 op add *tmp262 :createBlockMaskRow:x 3
+  485 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  486 op or :createBlockMaskRow:result *tmp261 *tmp263
+  487 label *label257
+  488 label *label258
+  489 op shl *tmp261 :createBlockMaskRow:result 1
+  490 op add *tmp262 :createBlockMaskRow:x 2
+  491 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  492 op or :createBlockMaskRow:result *tmp261 *tmp263
+  493 label *label259
+  494 label *label260
+  495 op shl *tmp261 :createBlockMaskRow:result 1
+  496 op add *tmp262 :createBlockMaskRow:x 1
+  497 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  498 op or :createBlockMaskRow:result *tmp261 *tmp263
+  499 label *label261
+  500 label *label262
+  501 op shl *tmp261 :createBlockMaskRow:result 1
+  502 op add *tmp262 :createBlockMaskRow:x 0
+  503 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  504 op or :createBlockMaskRow:result *tmp261 *tmp263
+  505 label *label263
+  506 label *label264
+  507 op shl *tmp261 :createBlockMaskRow:result 1
+  508 op add *tmp262 :createBlockMaskRow:x -1
+  509 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  510 op or :createBlockMaskRow:result *tmp261 *tmp263
+  511 label *label265
+  512 label *label266
+  513 op shl *tmp261 :createBlockMaskRow:result 1
+  514 op add *tmp262 :createBlockMaskRow:x -2
+  515 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  516 op or :createBlockMaskRow:result *tmp261 *tmp263
+  517 label *label267
+  518 label *label268
+  519 op shl *tmp261 :createBlockMaskRow:result 1
+  520 op add *tmp262 :createBlockMaskRow:x -3
+  521 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  522 op or :createBlockMaskRow:result *tmp261 *tmp263
+  523 label *label269
+  524 label *label270
+  525 op shl *tmp261 :createBlockMaskRow:result 1
+  526 op add *tmp262 :createBlockMaskRow:x -4
+  527 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  528 op or :createBlockMaskRow:result *tmp261 *tmp263
+  529 label *label271
+  530 label *label272
+  531 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  532 jump *label273 always
+  533 label *label273
   534 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   535 op add *tmp273 :createAdjacentMask:y 3
   536 set :createBlockMaskRow:x :createAdjacentMask:x
   537 set :createBlockMaskRow:y *tmp273
-    * setaddr :createBlockMaskRow*retaddr *label135 (h:*label135)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label135) (h:*label135)
-    * label *label135
+  538 label *label274
+  539 label *label275
+  540 label *label276
+  541 op add *tmp262 :createBlockMaskRow:x 4
+  542 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  543 op or :createBlockMaskRow:result 0 *tmp263
+  544 label *label277
+  545 label *label278
+  546 op shl *tmp261 :createBlockMaskRow:result 1
+  547 op add *tmp262 :createBlockMaskRow:x 3
+  548 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  549 op or :createBlockMaskRow:result *tmp261 *tmp263
+  550 label *label279
+  551 label *label280
+  552 op shl *tmp261 :createBlockMaskRow:result 1
+  553 op add *tmp262 :createBlockMaskRow:x 2
+  554 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  555 op or :createBlockMaskRow:result *tmp261 *tmp263
+  556 label *label281
+  557 label *label282
+  558 op shl *tmp261 :createBlockMaskRow:result 1
+  559 op add *tmp262 :createBlockMaskRow:x 1
+  560 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  561 op or :createBlockMaskRow:result *tmp261 *tmp263
+  562 label *label283
+  563 label *label284
+  564 op shl *tmp261 :createBlockMaskRow:result 1
+  565 op add *tmp262 :createBlockMaskRow:x 0
+  566 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  567 op or :createBlockMaskRow:result *tmp261 *tmp263
+  568 label *label285
+  569 label *label286
+  570 op shl *tmp261 :createBlockMaskRow:result 1
+  571 op add *tmp262 :createBlockMaskRow:x -1
+  572 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  573 op or :createBlockMaskRow:result *tmp261 *tmp263
+  574 label *label287
+  575 label *label288
+  576 op shl *tmp261 :createBlockMaskRow:result 1
+  577 op add *tmp262 :createBlockMaskRow:x -2
+  578 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  579 op or :createBlockMaskRow:result *tmp261 *tmp263
+  580 label *label289
+  581 label *label290
+  582 op shl *tmp261 :createBlockMaskRow:result 1
+  583 op add *tmp262 :createBlockMaskRow:x -3
+  584 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  585 op or :createBlockMaskRow:result *tmp261 *tmp263
+  586 label *label291
+  587 label *label292
+  588 op shl *tmp261 :createBlockMaskRow:result 1
+  589 op add *tmp262 :createBlockMaskRow:x -4
+  590 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  591 op or :createBlockMaskRow:result *tmp261 *tmp263
+  592 label *label293
+  593 label *label294
+  594 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  595 jump *label295 always
+  596 label *label295
   597 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   598 set :createAdjacentMask:r 2
   599 label *label208
 
   601 op add *tmp275 :createAdjacentMask:y 2
   602 set :createBlockMaskRow:x :createAdjacentMask:x
   603 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label210 (h:*label210)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label210) (h:*label210)
-    * label *label210
+  604 label *label296
+  605 label *label297
+  606 label *label298
+  607 op add *tmp262 :createBlockMaskRow:x 4
+  608 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  609 op or :createBlockMaskRow:result 0 *tmp263
+  610 label *label299
+  611 label *label300
+  612 op shl *tmp261 :createBlockMaskRow:result 1
+  613 op add *tmp262 :createBlockMaskRow:x 3
+  614 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  615 op or :createBlockMaskRow:result *tmp261 *tmp263
+  616 label *label301
+  617 label *label302
+  618 op shl *tmp261 :createBlockMaskRow:result 1
+  619 op add *tmp262 :createBlockMaskRow:x 2
+  620 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  621 op or :createBlockMaskRow:result *tmp261 *tmp263
+  622 label *label303
+  623 label *label304
+  624 op shl *tmp261 :createBlockMaskRow:result 1
+  625 op add *tmp262 :createBlockMaskRow:x 1
+  626 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  627 op or :createBlockMaskRow:result *tmp261 *tmp263
+  628 label *label305
+  629 label *label306
+  630 op shl *tmp261 :createBlockMaskRow:result 1
+  631 op add *tmp262 :createBlockMaskRow:x 0
+  632 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  633 op or :createBlockMaskRow:result *tmp261 *tmp263
+  634 label *label307
+  635 label *label308
+  636 op shl *tmp261 :createBlockMaskRow:result 1
+  637 op add *tmp262 :createBlockMaskRow:x -1
+  638 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  639 op or :createBlockMaskRow:result *tmp261 *tmp263
+  640 label *label309
+  641 label *label310
+  642 op shl *tmp261 :createBlockMaskRow:result 1
+  643 op add *tmp262 :createBlockMaskRow:x -2
+  644 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  645 op or :createBlockMaskRow:result *tmp261 *tmp263
+  646 label *label311
+  647 label *label312
+  648 op shl *tmp261 :createBlockMaskRow:result 1
+  649 op add *tmp262 :createBlockMaskRow:x -3
+  650 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  651 op or :createBlockMaskRow:result *tmp261 *tmp263
+  652 label *label313
+  653 label *label314
+  654 op shl *tmp261 :createBlockMaskRow:result 1
+  655 op add *tmp262 :createBlockMaskRow:x -4
+  656 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  657 op or :createBlockMaskRow:result *tmp261 *tmp263
+  658 label *label315
+  659 label *label316
+  660 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  661 jump *label317 always
+  662 label *label317
   663 op shl *tmp277 :createAdjacentMask:row1 1
   664 op or *tmp278 :createAdjacentMask:row2 *tmp277
   665 op shr *tmp279 :createAdjacentMask:row1 1
 
   676 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   677 set :createBlockMaskRow:x :createAdjacentMask:x
   678 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label213 (h:*label213)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label213) (h:*label213)
-    * label *label213
+  679 label *label318
+  680 label *label319
+  681 label *label320
+  682 op add *tmp262 :createBlockMaskRow:x 4
+  683 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  684 op or :createBlockMaskRow:result 0 *tmp263
+  685 label *label321
+  686 label *label322
+  687 op shl *tmp261 :createBlockMaskRow:result 1
+  688 op add *tmp262 :createBlockMaskRow:x 3
+  689 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  690 op or :createBlockMaskRow:result *tmp261 *tmp263
+  691 label *label323
+  692 label *label324
+  693 op shl *tmp261 :createBlockMaskRow:result 1
+  694 op add *tmp262 :createBlockMaskRow:x 2
+  695 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  696 op or :createBlockMaskRow:result *tmp261 *tmp263
+  697 label *label325
+  698 label *label326
+  699 op shl *tmp261 :createBlockMaskRow:result 1
+  700 op add *tmp262 :createBlockMaskRow:x 1
+  701 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  702 op or :createBlockMaskRow:result *tmp261 *tmp263
+  703 label *label327
+  704 label *label328
+  705 op shl *tmp261 :createBlockMaskRow:result 1
+  706 op add *tmp262 :createBlockMaskRow:x 0
+  707 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  708 op or :createBlockMaskRow:result *tmp261 *tmp263
+  709 label *label329
+  710 label *label330
+  711 op shl *tmp261 :createBlockMaskRow:result 1
+  712 op add *tmp262 :createBlockMaskRow:x -1
+  713 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  714 op or :createBlockMaskRow:result *tmp261 *tmp263
+  715 label *label331
+  716 label *label332
+  717 op shl *tmp261 :createBlockMaskRow:result 1
+  718 op add *tmp262 :createBlockMaskRow:x -2
+  719 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  720 op or :createBlockMaskRow:result *tmp261 *tmp263
+  721 label *label333
+  722 label *label334
+  723 op shl *tmp261 :createBlockMaskRow:result 1
+  724 op add *tmp262 :createBlockMaskRow:x -3
+  725 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  726 op or :createBlockMaskRow:result *tmp261 *tmp263
+  727 label *label335
+  728 label *label336
+  729 op shl *tmp261 :createBlockMaskRow:result 1
+  730 op add *tmp262 :createBlockMaskRow:x -4
+  731 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  732 op or :createBlockMaskRow:result *tmp261 *tmp263
+  733 label *label337
+  734 label *label338
+  735 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  736 jump *label339 always
+  737 label *label339
   738 op shl *tmp277 :createAdjacentMask:row1 1
   739 op or *tmp278 :createAdjacentMask:row2 *tmp277
   740 op shr *tmp279 :createAdjacentMask:row1 1
 
   751 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   752 set :createBlockMaskRow:x :createAdjacentMask:x
   753 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label216 (h:*label216)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label216) (h:*label216)
-    * label *label216
+  754 label *label340
+  755 label *label341
+  756 label *label342
+  757 op add *tmp262 :createBlockMaskRow:x 4
+  758 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  759 op or :createBlockMaskRow:result 0 *tmp263
+  760 label *label343
+  761 label *label344
+  762 op shl *tmp261 :createBlockMaskRow:result 1
+  763 op add *tmp262 :createBlockMaskRow:x 3
+  764 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  765 op or :createBlockMaskRow:result *tmp261 *tmp263
+  766 label *label345
+  767 label *label346
+  768 op shl *tmp261 :createBlockMaskRow:result 1
+  769 op add *tmp262 :createBlockMaskRow:x 2
+  770 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  771 op or :createBlockMaskRow:result *tmp261 *tmp263
+  772 label *label347
+  773 label *label348
+  774 op shl *tmp261 :createBlockMaskRow:result 1
+  775 op add *tmp262 :createBlockMaskRow:x 1
+  776 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  777 op or :createBlockMaskRow:result *tmp261 *tmp263
+  778 label *label349
+  779 label *label350
+  780 op shl *tmp261 :createBlockMaskRow:result 1
+  781 op add *tmp262 :createBlockMaskRow:x 0
+  782 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  783 op or :createBlockMaskRow:result *tmp261 *tmp263
+  784 label *label351
+  785 label *label352
+  786 op shl *tmp261 :createBlockMaskRow:result 1
+  787 op add *tmp262 :createBlockMaskRow:x -1
+  788 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  789 op or :createBlockMaskRow:result *tmp261 *tmp263
+  790 label *label353
+  791 label *label354
+  792 op shl *tmp261 :createBlockMaskRow:result 1
+  793 op add *tmp262 :createBlockMaskRow:x -2
+  794 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  795 op or :createBlockMaskRow:result *tmp261 *tmp263
+  796 label *label355
+  797 label *label356
+  798 op shl *tmp261 :createBlockMaskRow:result 1
+  799 op add *tmp262 :createBlockMaskRow:x -3
+  800 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  801 op or :createBlockMaskRow:result *tmp261 *tmp263
+  802 label *label357
+  803 label *label358
+  804 op shl *tmp261 :createBlockMaskRow:result 1
+  805 op add *tmp262 :createBlockMaskRow:x -4
+  806 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  807 op or :createBlockMaskRow:result *tmp261 *tmp263
+  808 label *label359
+  809 label *label360
+  810 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  811 jump *label361 always
+  812 label *label361
   813 op shl *tmp277 :createAdjacentMask:row1 1
   814 op or *tmp278 :createAdjacentMask:row2 *tmp277
   815 op shr *tmp279 :createAdjacentMask:row1 1
 
   826 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   827 set :createBlockMaskRow:x :createAdjacentMask:x
   828 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label219 (h:*label219)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label219) (h:*label219)
-    * label *label219
+  829 label *label362
+  830 label *label363
+  831 label *label364
+  832 op add *tmp262 :createBlockMaskRow:x 4
+  833 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  834 op or :createBlockMaskRow:result 0 *tmp263
+  835 label *label365
+  836 label *label366
+  837 op shl *tmp261 :createBlockMaskRow:result 1
+  838 op add *tmp262 :createBlockMaskRow:x 3
+  839 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  840 op or :createBlockMaskRow:result *tmp261 *tmp263
+  841 label *label367
+  842 label *label368
+  843 op shl *tmp261 :createBlockMaskRow:result 1
+  844 op add *tmp262 :createBlockMaskRow:x 2
+  845 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  846 op or :createBlockMaskRow:result *tmp261 *tmp263
+  847 label *label369
+  848 label *label370
+  849 op shl *tmp261 :createBlockMaskRow:result 1
+  850 op add *tmp262 :createBlockMaskRow:x 1
+  851 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  852 op or :createBlockMaskRow:result *tmp261 *tmp263
+  853 label *label371
+  854 label *label372
+  855 op shl *tmp261 :createBlockMaskRow:result 1
+  856 op add *tmp262 :createBlockMaskRow:x 0
+  857 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  858 op or :createBlockMaskRow:result *tmp261 *tmp263
+  859 label *label373
+  860 label *label374
+  861 op shl *tmp261 :createBlockMaskRow:result 1
+  862 op add *tmp262 :createBlockMaskRow:x -1
+  863 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  864 op or :createBlockMaskRow:result *tmp261 *tmp263
+  865 label *label375
+  866 label *label376
+  867 op shl *tmp261 :createBlockMaskRow:result 1
+  868 op add *tmp262 :createBlockMaskRow:x -2
+  869 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  870 op or :createBlockMaskRow:result *tmp261 *tmp263
+  871 label *label377
+  872 label *label378
+  873 op shl *tmp261 :createBlockMaskRow:result 1
+  874 op add *tmp262 :createBlockMaskRow:x -3
+  875 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  876 op or :createBlockMaskRow:result *tmp261 *tmp263
+  877 label *label379
+  878 label *label380
+  879 op shl *tmp261 :createBlockMaskRow:result 1
+  880 op add *tmp262 :createBlockMaskRow:x -4
+  881 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  882 op or :createBlockMaskRow:result *tmp261 *tmp263
+  883 label *label381
+  884 label *label382
+  885 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  886 jump *label383 always
+  887 label *label383
   888 op shl *tmp277 :createAdjacentMask:row1 1
   889 op or *tmp278 :createAdjacentMask:row2 *tmp277
   890 op shr *tmp279 :createAdjacentMask:row1 1
 
   901 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   902 set :createBlockMaskRow:x :createAdjacentMask:x
   903 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label222 (h:*label222)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label222) (h:*label222)
-    * label *label222
+  904 label *label384
+  905 label *label385
+  906 label *label386
+  907 op add *tmp262 :createBlockMaskRow:x 4
+  908 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  909 op or :createBlockMaskRow:result 0 *tmp263
+  910 label *label387
+  911 label *label388
+  912 op shl *tmp261 :createBlockMaskRow:result 1
+  913 op add *tmp262 :createBlockMaskRow:x 3
+  914 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  915 op or :createBlockMaskRow:result *tmp261 *tmp263
+  916 label *label389
+  917 label *label390
+  918 op shl *tmp261 :createBlockMaskRow:result 1
+  919 op add *tmp262 :createBlockMaskRow:x 2
+  920 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  921 op or :createBlockMaskRow:result *tmp261 *tmp263
+  922 label *label391
+  923 label *label392
+  924 op shl *tmp261 :createBlockMaskRow:result 1
+  925 op add *tmp262 :createBlockMaskRow:x 1
+  926 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  927 op or :createBlockMaskRow:result *tmp261 *tmp263
+  928 label *label393
+  929 label *label394
+  930 op shl *tmp261 :createBlockMaskRow:result 1
+  931 op add *tmp262 :createBlockMaskRow:x 0
+  932 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  933 op or :createBlockMaskRow:result *tmp261 *tmp263
+  934 label *label395
+  935 label *label396
+  936 op shl *tmp261 :createBlockMaskRow:result 1
+  937 op add *tmp262 :createBlockMaskRow:x -1
+  938 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  939 op or :createBlockMaskRow:result *tmp261 *tmp263
+  940 label *label397
+  941 label *label398
+  942 op shl *tmp261 :createBlockMaskRow:result 1
+  943 op add *tmp262 :createBlockMaskRow:x -2
+  944 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  945 op or :createBlockMaskRow:result *tmp261 *tmp263
+  946 label *label399
+  947 label *label400
+  948 op shl *tmp261 :createBlockMaskRow:result 1
+  949 op add *tmp262 :createBlockMaskRow:x -3
+  950 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  951 op or :createBlockMaskRow:result *tmp261 *tmp263
+  952 label *label401
+  953 label *label402
+  954 op shl *tmp261 :createBlockMaskRow:result 1
+  955 op add *tmp262 :createBlockMaskRow:x -4
+  956 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  957 op or :createBlockMaskRow:result *tmp261 *tmp263
+  958 label *label403
+  959 label *label404
+  960 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  961 jump *label405 always
+  962 label *label405
   963 op shl *tmp277 :createAdjacentMask:row1 1
   964 op or *tmp278 :createAdjacentMask:row2 *tmp277
   965 op shr *tmp279 :createAdjacentMask:row1 1
 
   976 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
   977 set :createBlockMaskRow:x :createAdjacentMask:x
   978 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label225 (h:*label225)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label225) (h:*label225)
-    * label *label225
+  979 label *label406
+  980 label *label407
+  981 label *label408
+  982 op add *tmp262 :createBlockMaskRow:x 4
+  983 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  984 op or :createBlockMaskRow:result 0 *tmp263
+  985 label *label409
+  986 label *label410
+  987 op shl *tmp261 :createBlockMaskRow:result 1
+  988 op add *tmp262 :createBlockMaskRow:x 3
+  989 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  990 op or :createBlockMaskRow:result *tmp261 *tmp263
+  991 label *label411
+  992 label *label412
+  993 op shl *tmp261 :createBlockMaskRow:result 1
+  994 op add *tmp262 :createBlockMaskRow:x 2
+  995 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  996 op or :createBlockMaskRow:result *tmp261 *tmp263
+  997 label *label413
+  998 label *label414
+  999 op shl *tmp261 :createBlockMaskRow:result 1
+ 1000 op add *tmp262 :createBlockMaskRow:x 1
+ 1001 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1002 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1003 label *label415
+ 1004 label *label416
+ 1005 op shl *tmp261 :createBlockMaskRow:result 1
+ 1006 op add *tmp262 :createBlockMaskRow:x 0
+ 1007 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1008 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1009 label *label417
+ 1010 label *label418
+ 1011 op shl *tmp261 :createBlockMaskRow:result 1
+ 1012 op add *tmp262 :createBlockMaskRow:x -1
+ 1013 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1014 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1015 label *label419
+ 1016 label *label420
+ 1017 op shl *tmp261 :createBlockMaskRow:result 1
+ 1018 op add *tmp262 :createBlockMaskRow:x -2
+ 1019 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1020 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1021 label *label421
+ 1022 label *label422
+ 1023 op shl *tmp261 :createBlockMaskRow:result 1
+ 1024 op add *tmp262 :createBlockMaskRow:x -3
+ 1025 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1026 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1027 label *label423
+ 1028 label *label424
+ 1029 op shl *tmp261 :createBlockMaskRow:result 1
+ 1030 op add *tmp262 :createBlockMaskRow:x -4
+ 1031 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1032 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1033 label *label425
+ 1034 label *label426
+ 1035 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1036 jump *label427 always
+ 1037 label *label427
  1038 op shl *tmp277 :createAdjacentMask:row1 1
  1039 op or *tmp278 :createAdjacentMask:row2 *tmp277
  1040 op shr *tmp279 :createAdjacentMask:row1 1
 
  1051 op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
  1052 set :createBlockMaskRow:x :createAdjacentMask:x
  1053 set :createBlockMaskRow:y *tmp275
-    * setaddr :createBlockMaskRow*retaddr *label228 (h:*label228)
-    * call *label12 *invalid :createBlockMaskRow*retval (m:*label228) (h:*label228)
-    * label *label228
+ 1054 label *label428
+ 1055 label *label429
+ 1056 label *label430
+ 1057 op add *tmp262 :createBlockMaskRow:x 4
+ 1058 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1059 op or :createBlockMaskRow:result 0 *tmp263
+ 1060 label *label431
+ 1061 label *label432
+ 1062 op shl *tmp261 :createBlockMaskRow:result 1
+ 1063 op add *tmp262 :createBlockMaskRow:x 3
+ 1064 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1065 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1066 label *label433
+ 1067 label *label434
+ 1068 op shl *tmp261 :createBlockMaskRow:result 1
+ 1069 op add *tmp262 :createBlockMaskRow:x 2
+ 1070 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1071 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1072 label *label435
+ 1073 label *label436
+ 1074 op shl *tmp261 :createBlockMaskRow:result 1
+ 1075 op add *tmp262 :createBlockMaskRow:x 1
+ 1076 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1077 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1078 label *label437
+ 1079 label *label438
+ 1080 op shl *tmp261 :createBlockMaskRow:result 1
+ 1081 op add *tmp262 :createBlockMaskRow:x 0
+ 1082 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1083 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1084 label *label439
+ 1085 label *label440
+ 1086 op shl *tmp261 :createBlockMaskRow:result 1
+ 1087 op add *tmp262 :createBlockMaskRow:x -1
+ 1088 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1089 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1090 label *label441
+ 1091 label *label442
+ 1092 op shl *tmp261 :createBlockMaskRow:result 1
+ 1093 op add *tmp262 :createBlockMaskRow:x -2
+ 1094 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1095 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1096 label *label443
+ 1097 label *label444
+ 1098 op shl *tmp261 :createBlockMaskRow:result 1
+ 1099 op add *tmp262 :createBlockMaskRow:x -3
+ 1100 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1101 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1102 label *label445
+ 1103 label *label446
+ 1104 op shl *tmp261 :createBlockMaskRow:result 1
+ 1105 op add *tmp262 :createBlockMaskRow:x -4
+ 1106 ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1107 op or :createBlockMaskRow:result *tmp261 *tmp263
+ 1108 label *label447
+ 1109 label *label448
+ 1110 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1111 jump *label449 always
+ 1112 label *label449
  1113 op shl *tmp277 :createAdjacentMask:row1 1
  1114 op or *tmp278 :createAdjacentMask:row2 *tmp277
  1115 op shr *tmp279 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   475 label *label252
   476 label *label253
   477 label *label254
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  478 op add *tmp262 :createCombinedMask:x 4
+  479 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   480 op or :createBlockMaskRow:result 0 *tmp263
   481 label *label255
   482 label *label256
   483 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  484 op add *tmp262 :createCombinedMask:x 3
+  485 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   486 op or :createBlockMaskRow:result *tmp261 *tmp263
   487 label *label257
   488 label *label258
   489 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  490 op add *tmp262 :createCombinedMask:x 2
+  491 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   492 op or :createBlockMaskRow:result *tmp261 *tmp263
   493 label *label259
   494 label *label260
   495 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  496 op add *tmp262 :createCombinedMask:x 1
+  497 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   498 op or :createBlockMaskRow:result *tmp261 *tmp263
   499 label *label261
   500 label *label262
   501 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  502 op add *tmp262 :createCombinedMask:x 0
+  503 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   504 op or :createBlockMaskRow:result *tmp261 *tmp263
   505 label *label263
   506 label *label264
   507 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  508 op add *tmp262 :createCombinedMask:x -1
+  509 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   510 op or :createBlockMaskRow:result *tmp261 *tmp263
   511 label *label265
   512 label *label266
   513 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  514 op add *tmp262 :createCombinedMask:x -2
+  515 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   516 op or :createBlockMaskRow:result *tmp261 *tmp263
   517 label *label267
   518 label *label268
   519 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  520 op add *tmp262 :createCombinedMask:x -3
+  521 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   522 op or :createBlockMaskRow:result *tmp261 *tmp263
   523 label *label269
   524 label *label270
   525 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  526 op add *tmp262 :createCombinedMask:x -4
+  527 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   528 op or :createBlockMaskRow:result *tmp261 *tmp263
   529 label *label271
   530 label *label272
   531 set :createBlockMaskRow*retval :createBlockMaskRow:result
   532 jump *label273 always
   533 label *label273
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp273 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  534 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  535 op add *tmp273 :createCombinedMask:y 3
+  536 set :createBlockMaskRow:x :createCombinedMask:x
   537 set :createBlockMaskRow:y *tmp273
   538 label *label274
   539 label *label275
   540 label *label276
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  541 op add *tmp262 :createAdjacentMask:x 4
+  542 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   543 op or :createBlockMaskRow:result 0 *tmp263
   544 label *label277
   545 label *label278
   546 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  547 op add *tmp262 :createAdjacentMask:x 3
+  548 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   549 op or :createBlockMaskRow:result *tmp261 *tmp263
   550 label *label279
   551 label *label280
   552 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  553 op add *tmp262 :createAdjacentMask:x 2
+  554 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   555 op or :createBlockMaskRow:result *tmp261 *tmp263
   556 label *label281
   557 label *label282
   558 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  559 op add *tmp262 :createAdjacentMask:x 1
+  560 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   561 op or :createBlockMaskRow:result *tmp261 *tmp263
   562 label *label283
   563 label *label284
   564 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  565 op add *tmp262 :createAdjacentMask:x 0
+  566 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   567 op or :createBlockMaskRow:result *tmp261 *tmp263
   568 label *label285
   569 label *label286
   570 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  571 op add *tmp262 :createAdjacentMask:x -1
+  572 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   573 op or :createBlockMaskRow:result *tmp261 *tmp263
   574 label *label287
   575 label *label288
   576 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  577 op add *tmp262 :createAdjacentMask:x -2
+  578 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   579 op or :createBlockMaskRow:result *tmp261 *tmp263
   580 label *label289
   581 label *label290
   582 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  583 op add *tmp262 :createAdjacentMask:x -3
+  584 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   585 op or :createBlockMaskRow:result *tmp261 *tmp263
   586 label *label291
   587 label *label292
   588 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  589 op add *tmp262 :createAdjacentMask:x -4
+  590 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   591 op or :createBlockMaskRow:result *tmp261 *tmp263
   592 label *label293
   593 label *label294
   594 set :createBlockMaskRow*retval :createBlockMaskRow:result
   595 jump *label295 always
   596 label *label295
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  597 set :createAdjacentMask:row1 :createBlockMaskRow:result
   598 set :createAdjacentMask:r 2
   599 label *label208
   600 label *label209
-    * op add *tmp275 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  601 op add *tmp275 :createCombinedMask:y 2
+  602 set :createBlockMaskRow:x :createCombinedMask:x
   603 set :createBlockMaskRow:y *tmp275
   604 label *label296
   605 label *label297
   606 label *label298
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  607 op add *tmp262 :createAdjacentMask:x 4
+  608 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   609 op or :createBlockMaskRow:result 0 *tmp263
   610 label *label299
   611 label *label300
   612 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  613 op add *tmp262 :createAdjacentMask:x 3
+  614 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   615 op or :createBlockMaskRow:result *tmp261 *tmp263
   616 label *label301
   617 label *label302
   618 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  619 op add *tmp262 :createAdjacentMask:x 2
+  620 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   621 op or :createBlockMaskRow:result *tmp261 *tmp263
   622 label *label303
   623 label *label304
   624 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  625 op add *tmp262 :createAdjacentMask:x 1
+  626 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   627 op or :createBlockMaskRow:result *tmp261 *tmp263
   628 label *label305
   629 label *label306
   630 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  631 op add *tmp262 :createAdjacentMask:x 0
+  632 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   633 op or :createBlockMaskRow:result *tmp261 *tmp263
   634 label *label307
   635 label *label308
   636 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  637 op add *tmp262 :createAdjacentMask:x -1
+  638 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   639 op or :createBlockMaskRow:result *tmp261 *tmp263
   640 label *label309
   641 label *label310
   642 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  643 op add *tmp262 :createAdjacentMask:x -2
+  644 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   645 op or :createBlockMaskRow:result *tmp261 *tmp263
   646 label *label311
   647 label *label312
   648 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  649 op add *tmp262 :createAdjacentMask:x -3
+  650 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   651 op or :createBlockMaskRow:result *tmp261 *tmp263
   652 label *label313
   653 label *label314
   654 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  655 op add *tmp262 :createAdjacentMask:x -4
+  656 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   657 op or :createBlockMaskRow:result *tmp261 *tmp263
   658 label *label315
   659 label *label316
 
   664 op or *tmp278 :createAdjacentMask:row2 *tmp277
   665 op shr *tmp279 :createAdjacentMask:row1 1
   666 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
-    * op shl *tmp282 :createAdjacentMask:result 7
+  667 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
+  668 op shl *tmp282 0 7
   669 op and *tmp283 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp282 *tmp283
+  670 op or :createAdjacentMask:result 0 *tmp283
   671 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  672 set :createAdjacentMask:row1 :createBlockMaskRow:result
   673 label *label211
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  674 op sub :createAdjacentMask:r 2 1
   675 label *label212
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  676 op add *tmp275 :createCombinedMask:y 1
+  677 set :createBlockMaskRow:x :createCombinedMask:x
   678 set :createBlockMaskRow:y *tmp275
   679 label *label318
   680 label *label319
   681 label *label320
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  682 op add *tmp262 :createAdjacentMask:x 4
+  683 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   684 op or :createBlockMaskRow:result 0 *tmp263
   685 label *label321
   686 label *label322
   687 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  688 op add *tmp262 :createAdjacentMask:x 3
+  689 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   690 op or :createBlockMaskRow:result *tmp261 *tmp263
   691 label *label323
   692 label *label324
   693 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  694 op add *tmp262 :createAdjacentMask:x 2
+  695 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   696 op or :createBlockMaskRow:result *tmp261 *tmp263
   697 label *label325
   698 label *label326
   699 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  700 op add *tmp262 :createAdjacentMask:x 1
+  701 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   702 op or :createBlockMaskRow:result *tmp261 *tmp263
   703 label *label327
   704 label *label328
   705 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  706 op add *tmp262 :createAdjacentMask:x 0
+  707 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   708 op or :createBlockMaskRow:result *tmp261 *tmp263
   709 label *label329
   710 label *label330
   711 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  712 op add *tmp262 :createAdjacentMask:x -1
+  713 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   714 op or :createBlockMaskRow:result *tmp261 *tmp263
   715 label *label331
   716 label *label332
   717 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  718 op add *tmp262 :createAdjacentMask:x -2
+  719 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   720 op or :createBlockMaskRow:result *tmp261 *tmp263
   721 label *label333
   722 label *label334
   723 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  724 op add *tmp262 :createAdjacentMask:x -3
+  725 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   726 op or :createBlockMaskRow:result *tmp261 *tmp263
   727 label *label335
   728 label *label336
   729 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  730 op add *tmp262 :createAdjacentMask:x -4
+  731 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   732 op or :createBlockMaskRow:result *tmp261 *tmp263
   733 label *label337
   734 label *label338
 
   739 op or *tmp278 :createAdjacentMask:row2 *tmp277
   740 op shr *tmp279 :createAdjacentMask:row1 1
   741 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  742 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
   743 op shl *tmp282 :createAdjacentMask:result 7
   744 op and *tmp283 :createAdjacentMask:mask 0xFE
   745 op or :createAdjacentMask:result *tmp282 *tmp283
   746 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  747 set :createAdjacentMask:row1 :createBlockMaskRow:result
   748 label *label214
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  749 op sub :createAdjacentMask:r 1 1
   750 label *label215
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  751 op add *tmp275 :createCombinedMask:y 0
+  752 set :createBlockMaskRow:x :createCombinedMask:x
   753 set :createBlockMaskRow:y *tmp275
   754 label *label340
   755 label *label341
   756 label *label342
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  757 op add *tmp262 :createAdjacentMask:x 4
+  758 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   759 op or :createBlockMaskRow:result 0 *tmp263
   760 label *label343
   761 label *label344
   762 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  763 op add *tmp262 :createAdjacentMask:x 3
+  764 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   765 op or :createBlockMaskRow:result *tmp261 *tmp263
   766 label *label345
   767 label *label346
   768 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  769 op add *tmp262 :createAdjacentMask:x 2
+  770 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   771 op or :createBlockMaskRow:result *tmp261 *tmp263
   772 label *label347
   773 label *label348
   774 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  775 op add *tmp262 :createAdjacentMask:x 1
+  776 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   777 op or :createBlockMaskRow:result *tmp261 *tmp263
   778 label *label349
   779 label *label350
   780 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  781 op add *tmp262 :createAdjacentMask:x 0
+  782 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   783 op or :createBlockMaskRow:result *tmp261 *tmp263
   784 label *label351
   785 label *label352
   786 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  787 op add *tmp262 :createAdjacentMask:x -1
+  788 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   789 op or :createBlockMaskRow:result *tmp261 *tmp263
   790 label *label353
   791 label *label354
   792 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  793 op add *tmp262 :createAdjacentMask:x -2
+  794 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   795 op or :createBlockMaskRow:result *tmp261 *tmp263
   796 label *label355
   797 label *label356
   798 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  799 op add *tmp262 :createAdjacentMask:x -3
+  800 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   801 op or :createBlockMaskRow:result *tmp261 *tmp263
   802 label *label357
   803 label *label358
   804 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  805 op add *tmp262 :createAdjacentMask:x -4
+  806 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   807 op or :createBlockMaskRow:result *tmp261 *tmp263
   808 label *label359
   809 label *label360
 
   814 op or *tmp278 :createAdjacentMask:row2 *tmp277
   815 op shr *tmp279 :createAdjacentMask:row1 1
   816 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  817 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
   818 op shl *tmp282 :createAdjacentMask:result 7
   819 op and *tmp283 :createAdjacentMask:mask 0xFE
   820 op or :createAdjacentMask:result *tmp282 *tmp283
   821 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  822 set :createAdjacentMask:row1 :createBlockMaskRow:result
   823 label *label217
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  824 op sub :createAdjacentMask:r 0 1
   825 label *label218
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  826 op add *tmp275 :createCombinedMask:y -1
+  827 set :createBlockMaskRow:x :createCombinedMask:x
   828 set :createBlockMaskRow:y *tmp275
   829 label *label362
   830 label *label363
   831 label *label364
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  832 op add *tmp262 :createAdjacentMask:x 4
+  833 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   834 op or :createBlockMaskRow:result 0 *tmp263
   835 label *label365
   836 label *label366
   837 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  838 op add *tmp262 :createAdjacentMask:x 3
+  839 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   840 op or :createBlockMaskRow:result *tmp261 *tmp263
   841 label *label367
   842 label *label368
   843 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  844 op add *tmp262 :createAdjacentMask:x 2
+  845 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   846 op or :createBlockMaskRow:result *tmp261 *tmp263
   847 label *label369
   848 label *label370
   849 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  850 op add *tmp262 :createAdjacentMask:x 1
+  851 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   852 op or :createBlockMaskRow:result *tmp261 *tmp263
   853 label *label371
   854 label *label372
   855 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  856 op add *tmp262 :createAdjacentMask:x 0
+  857 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   858 op or :createBlockMaskRow:result *tmp261 *tmp263
   859 label *label373
   860 label *label374
   861 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  862 op add *tmp262 :createAdjacentMask:x -1
+  863 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   864 op or :createBlockMaskRow:result *tmp261 *tmp263
   865 label *label375
   866 label *label376
   867 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  868 op add *tmp262 :createAdjacentMask:x -2
+  869 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   870 op or :createBlockMaskRow:result *tmp261 *tmp263
   871 label *label377
   872 label *label378
   873 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  874 op add *tmp262 :createAdjacentMask:x -3
+  875 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   876 op or :createBlockMaskRow:result *tmp261 *tmp263
   877 label *label379
   878 label *label380
   879 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  880 op add *tmp262 :createAdjacentMask:x -4
+  881 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   882 op or :createBlockMaskRow:result *tmp261 *tmp263
   883 label *label381
   884 label *label382
 
   889 op or *tmp278 :createAdjacentMask:row2 *tmp277
   890 op shr *tmp279 :createAdjacentMask:row1 1
   891 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  892 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
   893 op shl *tmp282 :createAdjacentMask:result 7
   894 op and *tmp283 :createAdjacentMask:mask 0xFE
   895 op or :createAdjacentMask:result *tmp282 *tmp283
   896 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  897 set :createAdjacentMask:row1 :createBlockMaskRow:result
   898 label *label220
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  899 op sub :createAdjacentMask:r -1 1
   900 label *label221
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  901 op add *tmp275 :createCombinedMask:y -2
+  902 set :createBlockMaskRow:x :createCombinedMask:x
   903 set :createBlockMaskRow:y *tmp275
   904 label *label384
   905 label *label385
   906 label *label386
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  907 op add *tmp262 :createAdjacentMask:x 4
+  908 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   909 op or :createBlockMaskRow:result 0 *tmp263
   910 label *label387
   911 label *label388
   912 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  913 op add *tmp262 :createAdjacentMask:x 3
+  914 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   915 op or :createBlockMaskRow:result *tmp261 *tmp263
   916 label *label389
   917 label *label390
   918 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  919 op add *tmp262 :createAdjacentMask:x 2
+  920 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   921 op or :createBlockMaskRow:result *tmp261 *tmp263
   922 label *label391
   923 label *label392
   924 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  925 op add *tmp262 :createAdjacentMask:x 1
+  926 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   927 op or :createBlockMaskRow:result *tmp261 *tmp263
   928 label *label393
   929 label *label394
   930 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  931 op add *tmp262 :createAdjacentMask:x 0
+  932 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   933 op or :createBlockMaskRow:result *tmp261 *tmp263
   934 label *label395
   935 label *label396
   936 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  937 op add *tmp262 :createAdjacentMask:x -1
+  938 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   939 op or :createBlockMaskRow:result *tmp261 *tmp263
   940 label *label397
   941 label *label398
   942 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  943 op add *tmp262 :createAdjacentMask:x -2
+  944 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   945 op or :createBlockMaskRow:result *tmp261 *tmp263
   946 label *label399
   947 label *label400
   948 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  949 op add *tmp262 :createAdjacentMask:x -3
+  950 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   951 op or :createBlockMaskRow:result *tmp261 *tmp263
   952 label *label401
   953 label *label402
   954 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  955 op add *tmp262 :createAdjacentMask:x -4
+  956 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   957 op or :createBlockMaskRow:result *tmp261 *tmp263
   958 label *label403
   959 label *label404
 
   964 op or *tmp278 :createAdjacentMask:row2 *tmp277
   965 op shr *tmp279 :createAdjacentMask:row1 1
   966 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+  967 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
   968 op shl *tmp282 :createAdjacentMask:result 7
   969 op and *tmp283 :createAdjacentMask:mask 0xFE
   970 op or :createAdjacentMask:result *tmp282 *tmp283
   971 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  972 set :createAdjacentMask:row1 :createBlockMaskRow:result
   973 label *label223
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  974 op sub :createAdjacentMask:r -2 1
   975 label *label224
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  976 op add *tmp275 :createCombinedMask:y -3
+  977 set :createBlockMaskRow:x :createCombinedMask:x
   978 set :createBlockMaskRow:y *tmp275
   979 label *label406
   980 label *label407
   981 label *label408
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  982 op add *tmp262 :createAdjacentMask:x 4
+  983 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   984 op or :createBlockMaskRow:result 0 *tmp263
   985 label *label409
   986 label *label410
   987 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  988 op add *tmp262 :createAdjacentMask:x 3
+  989 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   990 op or :createBlockMaskRow:result *tmp261 *tmp263
   991 label *label411
   992 label *label412
   993 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+  994 op add *tmp262 :createAdjacentMask:x 2
+  995 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   996 op or :createBlockMaskRow:result *tmp261 *tmp263
   997 label *label413
   998 label *label414
   999 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1000 op add *tmp262 :createAdjacentMask:x 1
+ 1001 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1002 op or :createBlockMaskRow:result *tmp261 *tmp263
  1003 label *label415
  1004 label *label416
  1005 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1006 op add *tmp262 :createAdjacentMask:x 0
+ 1007 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1008 op or :createBlockMaskRow:result *tmp261 *tmp263
  1009 label *label417
  1010 label *label418
  1011 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1012 op add *tmp262 :createAdjacentMask:x -1
+ 1013 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1014 op or :createBlockMaskRow:result *tmp261 *tmp263
  1015 label *label419
  1016 label *label420
  1017 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1018 op add *tmp262 :createAdjacentMask:x -2
+ 1019 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1020 op or :createBlockMaskRow:result *tmp261 *tmp263
  1021 label *label421
  1022 label *label422
  1023 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1024 op add *tmp262 :createAdjacentMask:x -3
+ 1025 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1026 op or :createBlockMaskRow:result *tmp261 *tmp263
  1027 label *label423
  1028 label *label424
  1029 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1030 op add *tmp262 :createAdjacentMask:x -4
+ 1031 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1032 op or :createBlockMaskRow:result *tmp261 *tmp263
  1033 label *label425
  1034 label *label426
 
  1039 op or *tmp278 :createAdjacentMask:row2 *tmp277
  1040 op shr *tmp279 :createAdjacentMask:row1 1
  1041 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+ 1042 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
  1043 op shl *tmp282 :createAdjacentMask:result 7
  1044 op and *tmp283 :createAdjacentMask:mask 0xFE
  1045 op or :createAdjacentMask:result *tmp282 *tmp283
  1046 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1047 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1048 label *label226
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1049 op sub :createAdjacentMask:r -3 1
  1050 label *label227
-    * op add *tmp275 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1051 op add *tmp275 :createCombinedMask:y -4
+ 1052 set :createBlockMaskRow:x :createCombinedMask:x
  1053 set :createBlockMaskRow:y *tmp275
  1054 label *label428
  1055 label *label429
  1056 label *label430
-    * op add *tmp262 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1057 op add *tmp262 :createAdjacentMask:x 4
+ 1058 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1059 op or :createBlockMaskRow:result 0 *tmp263
  1060 label *label431
  1061 label *label432
  1062 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1063 op add *tmp262 :createAdjacentMask:x 3
+ 1064 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1065 op or :createBlockMaskRow:result *tmp261 *tmp263
  1066 label *label433
  1067 label *label434
  1068 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1069 op add *tmp262 :createAdjacentMask:x 2
+ 1070 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1071 op or :createBlockMaskRow:result *tmp261 *tmp263
  1072 label *label435
  1073 label *label436
  1074 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1075 op add *tmp262 :createAdjacentMask:x 1
+ 1076 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1077 op or :createBlockMaskRow:result *tmp261 *tmp263
  1078 label *label437
  1079 label *label438
  1080 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1081 op add *tmp262 :createAdjacentMask:x 0
+ 1082 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1083 op or :createBlockMaskRow:result *tmp261 *tmp263
  1084 label *label439
  1085 label *label440
  1086 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1087 op add *tmp262 :createAdjacentMask:x -1
+ 1088 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1089 op or :createBlockMaskRow:result *tmp261 *tmp263
  1090 label *label441
  1091 label *label442
  1092 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1093 op add *tmp262 :createAdjacentMask:x -2
+ 1094 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1095 op or :createBlockMaskRow:result *tmp261 *tmp263
  1096 label *label443
  1097 label *label444
  1098 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1099 op add *tmp262 :createAdjacentMask:x -3
+ 1100 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1101 op or :createBlockMaskRow:result *tmp261 *tmp263
  1102 label *label445
  1103 label *label446
  1104 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp262 :createBlockMaskRow:y 0 *tmp263 0
+ 1105 op add *tmp262 :createAdjacentMask:x -4
+ 1106 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1107 op or :createBlockMaskRow:result *tmp261 *tmp263
  1108 label *label447
  1109 label *label448
 
  1114 op or *tmp278 :createAdjacentMask:row2 *tmp277
  1115 op shr *tmp279 :createAdjacentMask:row1 1
  1116 op or *tmp280 *tmp278 *tmp279
-    * op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow*retval
+ 1117 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
  1118 op shl *tmp282 :createAdjacentMask:result 7
  1119 op and *tmp283 :createAdjacentMask:mask 0xFE
  1120 op or :createAdjacentMask:result *tmp282 *tmp283

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-37 instructions):
 
   467 set .maskX :createCombinedMask:x
   468 set .maskY :createCombinedMask:y
   469 set :createAdjacentMask:x :createCombinedMask:x
-    * set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   470 op add *tmp271 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp271
   471 label *label252
   472 label *label253
   473 label *label254
 
   524 op or :createBlockMaskRow:result *tmp261 *tmp263
   525 label *label271
   526 label *label272
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   527 jump *label273 always
   528 label *label273
   529 set :createAdjacentMask:row2 :createBlockMaskRow:result
   530 op add *tmp273 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp273
   531 label *label274
   532 label *label275
   533 label *label276
-    * op add *tmp262 :createAdjacentMask:x 4
+  534 op add *tmp262 :createCombinedMask:x 4
   535 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   536 op or :createBlockMaskRow:result 0 *tmp263
   537 label *label277
   538 label *label278
   539 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  540 op add *tmp262 :createCombinedMask:x 3
   541 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   542 op or :createBlockMaskRow:result *tmp261 *tmp263
   543 label *label279
   544 label *label280
   545 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  546 op add *tmp262 :createCombinedMask:x 2
   547 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   548 op or :createBlockMaskRow:result *tmp261 *tmp263
   549 label *label281
   550 label *label282
   551 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  552 op add *tmp262 :createCombinedMask:x 1
   553 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   554 op or :createBlockMaskRow:result *tmp261 *tmp263
   555 label *label283
   556 label *label284
   557 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  558 op add *tmp262 :createCombinedMask:x 0
   559 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   560 op or :createBlockMaskRow:result *tmp261 *tmp263
   561 label *label285
   562 label *label286
   563 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  564 op add *tmp262 :createCombinedMask:x -1
   565 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   566 op or :createBlockMaskRow:result *tmp261 *tmp263
   567 label *label287
   568 label *label288
   569 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  570 op add *tmp262 :createCombinedMask:x -2
   571 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   572 op or :createBlockMaskRow:result *tmp261 *tmp263
   573 label *label289
   574 label *label290
   575 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  576 op add *tmp262 :createCombinedMask:x -3
   577 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   578 op or :createBlockMaskRow:result *tmp261 *tmp263
   579 label *label291
   580 label *label292
   581 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  582 op add *tmp262 :createCombinedMask:x -4
   583 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   584 op or :createBlockMaskRow:result *tmp261 *tmp263
   585 label *label293
   586 label *label294
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   587 jump *label295 always
   588 label *label295
   589 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   590 label *label208
   591 label *label209
   592 op add *tmp275 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   593 label *label296
   594 label *label297
   595 label *label298
-    * op add *tmp262 :createAdjacentMask:x 4
+  596 op add *tmp262 :createCombinedMask:x 4
   597 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   598 op or :createBlockMaskRow:result 0 *tmp263
   599 label *label299
   600 label *label300
   601 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  602 op add *tmp262 :createCombinedMask:x 3
   603 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   604 op or :createBlockMaskRow:result *tmp261 *tmp263
   605 label *label301
   606 label *label302
   607 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  608 op add *tmp262 :createCombinedMask:x 2
   609 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   610 op or :createBlockMaskRow:result *tmp261 *tmp263
   611 label *label303
   612 label *label304
   613 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  614 op add *tmp262 :createCombinedMask:x 1
   615 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   616 op or :createBlockMaskRow:result *tmp261 *tmp263
   617 label *label305
   618 label *label306
   619 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  620 op add *tmp262 :createCombinedMask:x 0
   621 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   622 op or :createBlockMaskRow:result *tmp261 *tmp263
   623 label *label307
   624 label *label308
   625 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  626 op add *tmp262 :createCombinedMask:x -1
   627 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   628 op or :createBlockMaskRow:result *tmp261 *tmp263
   629 label *label309
   630 label *label310
   631 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  632 op add *tmp262 :createCombinedMask:x -2
   633 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   634 op or :createBlockMaskRow:result *tmp261 *tmp263
   635 label *label311
   636 label *label312
   637 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  638 op add *tmp262 :createCombinedMask:x -3
   639 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   640 op or :createBlockMaskRow:result *tmp261 *tmp263
   641 label *label313
   642 label *label314
   643 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  644 op add *tmp262 :createCombinedMask:x -4
   645 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   646 op or :createBlockMaskRow:result *tmp261 *tmp263
   647 label *label315
   648 label *label316
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   649 jump *label317 always
   650 label *label317
   651 op shl *tmp277 :createAdjacentMask:row1 1
 
   653 op shr *tmp279 :createAdjacentMask:row1 1
   654 op or *tmp280 *tmp278 *tmp279
   655 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
-    * op shl *tmp282 0 7
   656 op and *tmp283 :createAdjacentMask:mask 0xFE
   657 op or :createAdjacentMask:result 0 *tmp283
   658 set :createAdjacentMask:row2 :createAdjacentMask:row1
   659 set :createAdjacentMask:row1 :createBlockMaskRow:result
   660 label *label211
-    * op sub :createAdjacentMask:r 2 1
   661 label *label212
   662 op add *tmp275 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   663 label *label318
   664 label *label319
   665 label *label320
-    * op add *tmp262 :createAdjacentMask:x 4
+  666 op add *tmp262 :createCombinedMask:x 4
   667 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   668 op or :createBlockMaskRow:result 0 *tmp263
   669 label *label321
   670 label *label322
   671 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  672 op add *tmp262 :createCombinedMask:x 3
   673 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   674 op or :createBlockMaskRow:result *tmp261 *tmp263
   675 label *label323
   676 label *label324
   677 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  678 op add *tmp262 :createCombinedMask:x 2
   679 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   680 op or :createBlockMaskRow:result *tmp261 *tmp263
   681 label *label325
   682 label *label326
   683 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  684 op add *tmp262 :createCombinedMask:x 1
   685 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   686 op or :createBlockMaskRow:result *tmp261 *tmp263
   687 label *label327
   688 label *label328
   689 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  690 op add *tmp262 :createCombinedMask:x 0
   691 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   692 op or :createBlockMaskRow:result *tmp261 *tmp263
   693 label *label329
   694 label *label330
   695 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  696 op add *tmp262 :createCombinedMask:x -1
   697 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   698 op or :createBlockMaskRow:result *tmp261 *tmp263
   699 label *label331
   700 label *label332
   701 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  702 op add *tmp262 :createCombinedMask:x -2
   703 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   704 op or :createBlockMaskRow:result *tmp261 *tmp263
   705 label *label333
   706 label *label334
   707 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  708 op add *tmp262 :createCombinedMask:x -3
   709 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   710 op or :createBlockMaskRow:result *tmp261 *tmp263
   711 label *label335
   712 label *label336
   713 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  714 op add *tmp262 :createCombinedMask:x -4
   715 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   716 op or :createBlockMaskRow:result *tmp261 *tmp263
   717 label *label337
   718 label *label338
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   719 jump *label339 always
   720 label *label339
   721 op shl *tmp277 :createAdjacentMask:row1 1
 
   729 set :createAdjacentMask:row2 :createAdjacentMask:row1
   730 set :createAdjacentMask:row1 :createBlockMaskRow:result
   731 label *label214
-    * op sub :createAdjacentMask:r 1 1
   732 label *label215
   733 op add *tmp275 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   734 label *label340
   735 label *label341
   736 label *label342
-    * op add *tmp262 :createAdjacentMask:x 4
+  737 op add *tmp262 :createCombinedMask:x 4
   738 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   739 op or :createBlockMaskRow:result 0 *tmp263
   740 label *label343
   741 label *label344
   742 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  743 op add *tmp262 :createCombinedMask:x 3
   744 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   745 op or :createBlockMaskRow:result *tmp261 *tmp263
   746 label *label345
   747 label *label346
   748 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  749 op add *tmp262 :createCombinedMask:x 2
   750 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   751 op or :createBlockMaskRow:result *tmp261 *tmp263
   752 label *label347
   753 label *label348
   754 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  755 op add *tmp262 :createCombinedMask:x 1
   756 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   757 op or :createBlockMaskRow:result *tmp261 *tmp263
   758 label *label349
   759 label *label350
   760 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  761 op add *tmp262 :createCombinedMask:x 0
   762 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   763 op or :createBlockMaskRow:result *tmp261 *tmp263
   764 label *label351
   765 label *label352
   766 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  767 op add *tmp262 :createCombinedMask:x -1
   768 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   769 op or :createBlockMaskRow:result *tmp261 *tmp263
   770 label *label353
   771 label *label354
   772 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  773 op add *tmp262 :createCombinedMask:x -2
   774 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   775 op or :createBlockMaskRow:result *tmp261 *tmp263
   776 label *label355
   777 label *label356
   778 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  779 op add *tmp262 :createCombinedMask:x -3
   780 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   781 op or :createBlockMaskRow:result *tmp261 *tmp263
   782 label *label357
   783 label *label358
   784 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  785 op add *tmp262 :createCombinedMask:x -4
   786 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   787 op or :createBlockMaskRow:result *tmp261 *tmp263
   788 label *label359
   789 label *label360
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   790 jump *label361 always
   791 label *label361
   792 op shl *tmp277 :createAdjacentMask:row1 1
 
   800 set :createAdjacentMask:row2 :createAdjacentMask:row1
   801 set :createAdjacentMask:row1 :createBlockMaskRow:result
   802 label *label217
-    * op sub :createAdjacentMask:r 0 1
   803 label *label218
   804 op add *tmp275 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   805 label *label362
   806 label *label363
   807 label *label364
-    * op add *tmp262 :createAdjacentMask:x 4
+  808 op add *tmp262 :createCombinedMask:x 4
   809 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   810 op or :createBlockMaskRow:result 0 *tmp263
   811 label *label365
   812 label *label366
   813 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  814 op add *tmp262 :createCombinedMask:x 3
   815 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   816 op or :createBlockMaskRow:result *tmp261 *tmp263
   817 label *label367
   818 label *label368
   819 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  820 op add *tmp262 :createCombinedMask:x 2
   821 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   822 op or :createBlockMaskRow:result *tmp261 *tmp263
   823 label *label369
   824 label *label370
   825 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  826 op add *tmp262 :createCombinedMask:x 1
   827 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   828 op or :createBlockMaskRow:result *tmp261 *tmp263
   829 label *label371
   830 label *label372
   831 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  832 op add *tmp262 :createCombinedMask:x 0
   833 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   834 op or :createBlockMaskRow:result *tmp261 *tmp263
   835 label *label373
   836 label *label374
   837 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  838 op add *tmp262 :createCombinedMask:x -1
   839 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   840 op or :createBlockMaskRow:result *tmp261 *tmp263
   841 label *label375
   842 label *label376
   843 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  844 op add *tmp262 :createCombinedMask:x -2
   845 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   846 op or :createBlockMaskRow:result *tmp261 *tmp263
   847 label *label377
   848 label *label378
   849 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  850 op add *tmp262 :createCombinedMask:x -3
   851 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   852 op or :createBlockMaskRow:result *tmp261 *tmp263
   853 label *label379
   854 label *label380
   855 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  856 op add *tmp262 :createCombinedMask:x -4
   857 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   858 op or :createBlockMaskRow:result *tmp261 *tmp263
   859 label *label381
   860 label *label382
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   861 jump *label383 always
   862 label *label383
   863 op shl *tmp277 :createAdjacentMask:row1 1
 
   871 set :createAdjacentMask:row2 :createAdjacentMask:row1
   872 set :createAdjacentMask:row1 :createBlockMaskRow:result
   873 label *label220
-    * op sub :createAdjacentMask:r -1 1
   874 label *label221
   875 op add *tmp275 :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   876 label *label384
   877 label *label385
   878 label *label386
-    * op add *tmp262 :createAdjacentMask:x 4
+  879 op add *tmp262 :createCombinedMask:x 4
   880 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   881 op or :createBlockMaskRow:result 0 *tmp263
   882 label *label387
   883 label *label388
   884 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  885 op add *tmp262 :createCombinedMask:x 3
   886 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   887 op or :createBlockMaskRow:result *tmp261 *tmp263
   888 label *label389
   889 label *label390
   890 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  891 op add *tmp262 :createCombinedMask:x 2
   892 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   893 op or :createBlockMaskRow:result *tmp261 *tmp263
   894 label *label391
   895 label *label392
   896 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  897 op add *tmp262 :createCombinedMask:x 1
   898 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   899 op or :createBlockMaskRow:result *tmp261 *tmp263
   900 label *label393
   901 label *label394
   902 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  903 op add *tmp262 :createCombinedMask:x 0
   904 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   905 op or :createBlockMaskRow:result *tmp261 *tmp263
   906 label *label395
   907 label *label396
   908 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  909 op add *tmp262 :createCombinedMask:x -1
   910 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   911 op or :createBlockMaskRow:result *tmp261 *tmp263
   912 label *label397
   913 label *label398
   914 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  915 op add *tmp262 :createCombinedMask:x -2
   916 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   917 op or :createBlockMaskRow:result *tmp261 *tmp263
   918 label *label399
   919 label *label400
   920 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  921 op add *tmp262 :createCombinedMask:x -3
   922 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   923 op or :createBlockMaskRow:result *tmp261 *tmp263
   924 label *label401
   925 label *label402
   926 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  927 op add *tmp262 :createCombinedMask:x -4
   928 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   929 op or :createBlockMaskRow:result *tmp261 *tmp263
   930 label *label403
   931 label *label404
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   932 jump *label405 always
   933 label *label405
   934 op shl *tmp277 :createAdjacentMask:row1 1
 
   942 set :createAdjacentMask:row2 :createAdjacentMask:row1
   943 set :createAdjacentMask:row1 :createBlockMaskRow:result
   944 label *label223
-    * op sub :createAdjacentMask:r -2 1
   945 label *label224
   946 op add *tmp275 :createCombinedMask:y -3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
   947 label *label406
   948 label *label407
   949 label *label408
-    * op add *tmp262 :createAdjacentMask:x 4
+  950 op add *tmp262 :createCombinedMask:x 4
   951 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   952 op or :createBlockMaskRow:result 0 *tmp263
   953 label *label409
   954 label *label410
   955 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+  956 op add *tmp262 :createCombinedMask:x 3
   957 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   958 op or :createBlockMaskRow:result *tmp261 *tmp263
   959 label *label411
   960 label *label412
   961 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+  962 op add *tmp262 :createCombinedMask:x 2
   963 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   964 op or :createBlockMaskRow:result *tmp261 *tmp263
   965 label *label413
   966 label *label414
   967 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+  968 op add *tmp262 :createCombinedMask:x 1
   969 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   970 op or :createBlockMaskRow:result *tmp261 *tmp263
   971 label *label415
   972 label *label416
   973 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+  974 op add *tmp262 :createCombinedMask:x 0
   975 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   976 op or :createBlockMaskRow:result *tmp261 *tmp263
   977 label *label417
   978 label *label418
   979 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+  980 op add *tmp262 :createCombinedMask:x -1
   981 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   982 op or :createBlockMaskRow:result *tmp261 *tmp263
   983 label *label419
   984 label *label420
   985 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+  986 op add *tmp262 :createCombinedMask:x -2
   987 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   988 op or :createBlockMaskRow:result *tmp261 *tmp263
   989 label *label421
   990 label *label422
   991 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+  992 op add *tmp262 :createCombinedMask:x -3
   993 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   994 op or :createBlockMaskRow:result *tmp261 *tmp263
   995 label *label423
   996 label *label424
   997 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+  998 op add *tmp262 :createCombinedMask:x -4
   999 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1000 op or :createBlockMaskRow:result *tmp261 *tmp263
  1001 label *label425
  1002 label *label426
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1003 jump *label427 always
  1004 label *label427
  1005 op shl *tmp277 :createAdjacentMask:row1 1
 
  1013 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1014 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1015 label *label226
-    * op sub :createAdjacentMask:r -3 1
  1016 label *label227
  1017 op add *tmp275 :createCombinedMask:y -4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp275
  1018 label *label428
  1019 label *label429
  1020 label *label430
-    * op add *tmp262 :createAdjacentMask:x 4
+ 1021 op add *tmp262 :createCombinedMask:x 4
  1022 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1023 op or :createBlockMaskRow:result 0 *tmp263
  1024 label *label431
  1025 label *label432
  1026 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 3
+ 1027 op add *tmp262 :createCombinedMask:x 3
  1028 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1029 op or :createBlockMaskRow:result *tmp261 *tmp263
  1030 label *label433
  1031 label *label434
  1032 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 2
+ 1033 op add *tmp262 :createCombinedMask:x 2
  1034 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1035 op or :createBlockMaskRow:result *tmp261 *tmp263
  1036 label *label435
  1037 label *label436
  1038 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 1
+ 1039 op add *tmp262 :createCombinedMask:x 1
  1040 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1041 op or :createBlockMaskRow:result *tmp261 *tmp263
  1042 label *label437
  1043 label *label438
  1044 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x 0
+ 1045 op add *tmp262 :createCombinedMask:x 0
  1046 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1047 op or :createBlockMaskRow:result *tmp261 *tmp263
  1048 label *label439
  1049 label *label440
  1050 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -1
+ 1051 op add *tmp262 :createCombinedMask:x -1
  1052 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1053 op or :createBlockMaskRow:result *tmp261 *tmp263
  1054 label *label441
  1055 label *label442
  1056 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -2
+ 1057 op add *tmp262 :createCombinedMask:x -2
  1058 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1059 op or :createBlockMaskRow:result *tmp261 *tmp263
  1060 label *label443
  1061 label *label444
  1062 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -3
+ 1063 op add *tmp262 :createCombinedMask:x -3
  1064 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1065 op or :createBlockMaskRow:result *tmp261 *tmp263
  1066 label *label445
  1067 label *label446
  1068 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createAdjacentMask:x -4
+ 1069 op add *tmp262 :createCombinedMask:x -4
  1070 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1071 op or :createBlockMaskRow:result *tmp261 *tmp263
  1072 label *label447
  1073 label *label448
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1074 jump *label449 always
  1075 label *label449
  1076 op shl *tmp277 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
 
   466 write 1 processor1 "@counter"
   467 set .maskX :createCombinedMask:x
   468 set .maskY :createCombinedMask:y
-    * set :createAdjacentMask:x :createCombinedMask:x
   469 op add *tmp271 :createCombinedMask:y 4
   470 label *label252
   471 label *label253

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-3 instructions):
 
    14 op abs *tmp181 0
    15 op greaterThan *tmp182 0 6
    16 op or *tmp183 false false
-    * jump *label233 equal 0 false
+   17 jump *label233 always
    18 jump *label241 always
    19 label *label233
    20 label *label234
    21 op mul *tmp185 7 0
    22 op add :shiftMask:shift 1 0
-    * jump *label235 lessThanEq 1 0
    23 op shr :shiftMask:clearMask 562949953421311 1
    24 op and *tmp190 562949953421312 281474976710655
    25 jump *label236 always
    26 label *label235
    27 label *label236
-    * jump *label239 equal 1 0
-    * jump *label237 lessThanEq 1 0
    28 label *label237
    29 label *label238
    30 op shl *tmp199 126 7

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-17 instructions):
 
    22 op add :shiftMask:shift 1 0
    23 op shr :shiftMask:clearMask 562949953421311 1
    24 op and *tmp190 562949953421312 281474976710655
-    * jump *label236 always
    25 label *label235
    26 label *label236
    27 label *label237
 
    34 label *label239
    35 label *label240
    36 set :shiftMask*retval 0
-    * jump *label241 always
    37 label *label241
    38 label *label18
    39 assertequals 0 558517276622718 "Column right"
 
   171 jump *label182 lessThan :visited:i *tmp98
   172 label *label52
   173 set *tmp97 false
-    * jump *label49 always
   174 label *label49
   175 jump *label55 notEqual *tmp97 false
   176 op div *tmp113 2 .angle
 
   189 jump *label181 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   190 label *label32
   191 set *tmp51 false
-    * jump *label29 always
   192 label *label29
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   349 jump *label183 lessThanEq :findPossiblePlacement:y 3
   350 label *label100
   351 set :findPossiblePlacement*retval -1
-    * jump *label97 always
   352 label *label97
   353 return :findPossiblePlacement*retaddr
   354 end
 
   515 op or :createBlockMaskRow:result *tmp261 *tmp263
   516 label *label271
   517 label *label272
-    * jump *label273 always
   518 label *label273
   519 set :createAdjacentMask:row2 :createBlockMaskRow:result
   520 op add *tmp273 :createCombinedMask:y 3
 
   574 op or :createBlockMaskRow:result *tmp261 *tmp263
   575 label *label293
   576 label *label294
-    * jump *label295 always
   577 label *label295
   578 set :createAdjacentMask:row1 :createBlockMaskRow:result
   579 label *label208
 
   635 op or :createBlockMaskRow:result *tmp261 *tmp263
   636 label *label315
   637 label *label316
-    * jump *label317 always
   638 label *label317
   639 op shl *tmp277 :createAdjacentMask:row1 1
   640 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
   704 op or :createBlockMaskRow:result *tmp261 *tmp263
   705 label *label337
   706 label *label338
-    * jump *label339 always
   707 label *label339
   708 op shl *tmp277 :createAdjacentMask:row1 1
   709 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
   774 op or :createBlockMaskRow:result *tmp261 *tmp263
   775 label *label359
   776 label *label360
-    * jump *label361 always
   777 label *label361
   778 op shl *tmp277 :createAdjacentMask:row1 1
   779 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
   844 op or :createBlockMaskRow:result *tmp261 *tmp263
   845 label *label381
   846 label *label382
-    * jump *label383 always
   847 label *label383
   848 op shl *tmp277 :createAdjacentMask:row1 1
   849 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
   914 op or :createBlockMaskRow:result *tmp261 *tmp263
   915 label *label403
   916 label *label404
-    * jump *label405 always
   917 label *label405
   918 op shl *tmp277 :createAdjacentMask:row1 1
   919 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
   984 op or :createBlockMaskRow:result *tmp261 *tmp263
   985 label *label425
   986 label *label426
-    * jump *label427 always
   987 label *label427
   988 op shl *tmp277 :createAdjacentMask:row1 1
   989 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
  1054 op or :createBlockMaskRow:result *tmp261 *tmp263
  1055 label *label447
  1056 label *label448
-    * jump *label449 always
  1057 label *label449
  1058 op shl *tmp277 :createAdjacentMask:row1 1
  1059 op or *tmp278 :createAdjacentMask:row2 *tmp277
 
  1074 jump *label140 equal *tmp286 false
  1075 read .terrainMask processor1 ":createTerrainMask*retval"
  1076 op or :createCombinedMask*retval .adjacentMask .terrainMask
-    * jump *label132 always
  1077 label *label132
  1078 return :createCombinedMask*retaddr
  1079 end
 
  1224 label *label249
  1225 label *label250
  1226 set :shiftMask*retval :shiftMask:mask
-    * jump *label251 always
  1227 label *label251
  1228 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1229 set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrainMask
 
  1249 multilabel *label167 (m:marker0)
  1250 label *label163
  1251 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label141 always
  1252 label *label141
  1253 return :layoutThoriumDrillAtLocation*retaddr
  1254 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    13 op greaterThan *tmp180 1 6
    14 op abs *tmp181 0
    15 op greaterThan *tmp182 0 6
-    * op or *tmp183 false false
+   16 set *tmp183 false
    17 jump *label233 always
    18 jump *label241 always
    19 label *label233
 
    30 op shl *tmp200 16254 14
    31 op shl *tmp201 266321790 21
    32 op or :shiftMask:keep 266321790 558517274542080
-    * op and :shiftMask:mask 0 558517276622718
+   33 set :shiftMask:mask false
    34 label *label239
    35 label *label240
    36 set :shiftMask*retval 0
 
   464 label *label254
   465 op add *tmp262 :createCombinedMask:x 4
   466 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  467 set :createBlockMaskRow:result *tmp263
   468 label *label255
   469 label *label256
   470 op shl *tmp261 :createBlockMaskRow:result 1
 
   486 label *label261
   487 label *label262
   488 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  489 set *tmp262 :createCombinedMask:x
   490 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   491 op or :createBlockMaskRow:result *tmp261 *tmp263
   492 label *label263
 
   523 label *label276
   524 op add *tmp262 :createCombinedMask:x 4
   525 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  526 set :createBlockMaskRow:result *tmp263
   527 label *label277
   528 label *label278
   529 op shl *tmp261 :createBlockMaskRow:result 1
 
   545 label *label283
   546 label *label284
   547 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  548 set *tmp262 :createCombinedMask:x
   549 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   550 op or :createBlockMaskRow:result *tmp261 *tmp263
   551 label *label285
 
   584 label *label298
   585 op add *tmp262 :createCombinedMask:x 4
   586 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  587 set :createBlockMaskRow:result *tmp263
   588 label *label299
   589 label *label300
   590 op shl *tmp261 :createBlockMaskRow:result 1
 
   606 label *label305
   607 label *label306
   608 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  609 set *tmp262 :createCombinedMask:x
   610 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   611 op or :createBlockMaskRow:result *tmp261 *tmp263
   612 label *label307
 
   642 op or *tmp280 *tmp278 *tmp279
   643 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
   644 op and *tmp283 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp283
+  645 set :createAdjacentMask:result *tmp283
   646 set :createAdjacentMask:row2 :createAdjacentMask:row1
   647 set :createAdjacentMask:row1 :createBlockMaskRow:result
   648 label *label211
 
   653 label *label320
   654 op add *tmp262 :createCombinedMask:x 4
   655 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  656 set :createBlockMaskRow:result *tmp263
   657 label *label321
   658 label *label322
   659 op shl *tmp261 :createBlockMaskRow:result 1
 
   675 label *label327
   676 label *label328
   677 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  678 set *tmp262 :createCombinedMask:x
   679 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   680 op or :createBlockMaskRow:result *tmp261 *tmp263
   681 label *label329
 
   717 set :createAdjacentMask:row1 :createBlockMaskRow:result
   718 label *label214
   719 label *label215
-    * op add *tmp275 :createCombinedMask:y 0
+  720 set *tmp275 :createCombinedMask:y
   721 label *label340
   722 label *label341
   723 label *label342
   724 op add *tmp262 :createCombinedMask:x 4
   725 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  726 set :createBlockMaskRow:result *tmp263
   727 label *label343
   728 label *label344
   729 op shl *tmp261 :createBlockMaskRow:result 1
 
   745 label *label349
   746 label *label350
   747 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  748 set *tmp262 :createCombinedMask:x
   749 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   750 op or :createBlockMaskRow:result *tmp261 *tmp263
   751 label *label351
 
   793 label *label364
   794 op add *tmp262 :createCombinedMask:x 4
   795 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  796 set :createBlockMaskRow:result *tmp263
   797 label *label365
   798 label *label366
   799 op shl *tmp261 :createBlockMaskRow:result 1
 
   815 label *label371
   816 label *label372
   817 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  818 set *tmp262 :createCombinedMask:x
   819 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   820 op or :createBlockMaskRow:result *tmp261 *tmp263
   821 label *label373
 
   863 label *label386
   864 op add *tmp262 :createCombinedMask:x 4
   865 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  866 set :createBlockMaskRow:result *tmp263
   867 label *label387
   868 label *label388
   869 op shl *tmp261 :createBlockMaskRow:result 1
 
   885 label *label393
   886 label *label394
   887 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  888 set *tmp262 :createCombinedMask:x
   889 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   890 op or :createBlockMaskRow:result *tmp261 *tmp263
   891 label *label395
 
   933 label *label408
   934 op add *tmp262 :createCombinedMask:x 4
   935 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+  936 set :createBlockMaskRow:result *tmp263
   937 label *label409
   938 label *label410
   939 op shl *tmp261 :createBlockMaskRow:result 1
 
   955 label *label415
   956 label *label416
   957 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+  958 set *tmp262 :createCombinedMask:x
   959 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   960 op or :createBlockMaskRow:result *tmp261 *tmp263
   961 label *label417
 
  1003 label *label430
  1004 op add *tmp262 :createCombinedMask:x 4
  1005 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * op or :createBlockMaskRow:result 0 *tmp263
+ 1006 set :createBlockMaskRow:result *tmp263
  1007 label *label431
  1008 label *label432
  1009 op shl *tmp261 :createBlockMaskRow:result 1
 
  1025 label *label437
  1026 label *label438
  1027 op shl *tmp261 :createBlockMaskRow:result 1
-    * op add *tmp262 :createCombinedMask:x 0
+ 1028 set *tmp262 :createCombinedMask:x
  1029 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
  1030 op or :createBlockMaskRow:result *tmp261 *tmp263
  1031 label *label439

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-13 instructions):
 
   463 label *label253
   464 label *label254
   465 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  466 ucontrol getBlock *tmp262 *tmp271 0 :createBlockMaskRow:result 0
   467 label *label255
   468 label *label256
   469 op shl *tmp261 :createBlockMaskRow:result 1
 
   511 op shl *tmp261 :createBlockMaskRow:result 1
   512 op add *tmp262 :createCombinedMask:x -4
   513 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
+  514 op or :createAdjacentMask:row2 *tmp261 *tmp263
   515 label *label271
   516 label *label272
   517 label *label273
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   518 op add *tmp273 :createCombinedMask:y 3
   519 label *label274
   520 label *label275
   521 label *label276
   522 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  523 ucontrol getBlock *tmp262 *tmp273 0 :createBlockMaskRow:result 0
   524 label *label277
   525 label *label278
   526 op shl *tmp261 :createBlockMaskRow:result 1
 
   568 op shl *tmp261 :createBlockMaskRow:result 1
   569 op add *tmp262 :createCombinedMask:x -4
   570 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
-    * op or :createBlockMaskRow:result *tmp261 *tmp263
+  571 op or :createAdjacentMask:row1 *tmp261 *tmp263
   572 label *label293
   573 label *label294
   574 label *label295
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   575 label *label208
   576 label *label209
   577 op add *tmp275 :createCombinedMask:y 2
 
   579 label *label297
   580 label *label298
   581 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  582 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   583 label *label299
   584 label *label300
   585 op shl *tmp261 :createBlockMaskRow:result 1
 
   636 op shr *tmp279 :createAdjacentMask:row1 1
   637 op or *tmp280 *tmp278 *tmp279
   638 op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:result
-    * op and *tmp283 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp283
+  639 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   640 set :createAdjacentMask:row2 :createAdjacentMask:row1
   641 set :createAdjacentMask:row1 :createBlockMaskRow:result
   642 label *label211
 
   646 label *label319
   647 label *label320
   648 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  649 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   650 label *label321
   651 label *label322
   652 op shl *tmp261 :createBlockMaskRow:result 1
 
   715 label *label341
   716 label *label342
   717 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  718 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   719 label *label343
   720 label *label344
   721 op shl *tmp261 :createBlockMaskRow:result 1
 
   784 label *label363
   785 label *label364
   786 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  787 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   788 label *label365
   789 label *label366
   790 op shl *tmp261 :createBlockMaskRow:result 1
 
   853 label *label385
   854 label *label386
   855 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  856 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   857 label *label387
   858 label *label388
   859 op shl *tmp261 :createBlockMaskRow:result 1
 
   922 label *label407
   923 label *label408
   924 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  925 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   926 label *label409
   927 label *label410
   928 op shl *tmp261 :createBlockMaskRow:result 1
 
   991 label *label429
   992 label *label430
   993 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
-    * set :createBlockMaskRow:result *tmp263
+  994 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
   995 label *label431
   996 label *label432
   997 op shl *tmp261 :createBlockMaskRow:result 1
 
  1053 op or :createAdjacentMask:result *tmp282 *tmp283
  1054 label *label229
  1055 label *label138
-    * op shr *tmp270 :createAdjacentMask:result 1
+ 1056 op shr .adjacentMask :createAdjacentMask:result 1
  1057 label *label133
-    * set .adjacentMask *tmp270
  1058 label *label140
  1059 wait 1e-15
  1060 read *tmp286 processor1 ":createTerrainMask*finished"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   486 label *label262
   487 op shl *tmp261 :createBlockMaskRow:result 1
   488 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
+  489 ucontrol getBlock :createCombinedMask:x *tmp271 0 *tmp263 0
   490 op or :createBlockMaskRow:result *tmp261 *tmp263
   491 label *label263
   492 label *label264
 
   543 label *label284
   544 op shl *tmp261 :createBlockMaskRow:result 1
   545 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
+  546 ucontrol getBlock :createCombinedMask:x *tmp273 0 *tmp263 0
   547 op or :createBlockMaskRow:result *tmp261 *tmp263
   548 label *label285
   549 label *label286
 
   602 label *label306
   603 op shl *tmp261 :createBlockMaskRow:result 1
   604 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  605 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   606 op or :createBlockMaskRow:result *tmp261 *tmp263
   607 label *label307
   608 label *label308
 
   669 label *label328
   670 op shl *tmp261 :createBlockMaskRow:result 1
   671 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  672 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   673 op or :createBlockMaskRow:result *tmp261 *tmp263
   674 label *label329
   675 label *label330
 
   715 label *label341
   716 label *label342
   717 op add *tmp262 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
+  718 ucontrol getBlock *tmp262 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   719 label *label343
   720 label *label344
   721 op shl *tmp261 :createBlockMaskRow:result 1
   722 op add *tmp262 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  723 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   724 op or :createBlockMaskRow:result *tmp261 *tmp263
   725 label *label345
   726 label *label346
   727 op shl *tmp261 :createBlockMaskRow:result 1
   728 op add *tmp262 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  729 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   730 op or :createBlockMaskRow:result *tmp261 *tmp263
   731 label *label347
   732 label *label348
   733 op shl *tmp261 :createBlockMaskRow:result 1
   734 op add *tmp262 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  735 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   736 op or :createBlockMaskRow:result *tmp261 *tmp263
   737 label *label349
   738 label *label350
   739 op shl *tmp261 :createBlockMaskRow:result 1
   740 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  741 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp263 0
   742 op or :createBlockMaskRow:result *tmp261 *tmp263
   743 label *label351
   744 label *label352
   745 op shl *tmp261 :createBlockMaskRow:result 1
   746 op add *tmp262 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  747 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   748 op or :createBlockMaskRow:result *tmp261 *tmp263
   749 label *label353
   750 label *label354
   751 op shl *tmp261 :createBlockMaskRow:result 1
   752 op add *tmp262 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  753 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   754 op or :createBlockMaskRow:result *tmp261 *tmp263
   755 label *label355
   756 label *label356
   757 op shl *tmp261 :createBlockMaskRow:result 1
   758 op add *tmp262 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  759 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   760 op or :createBlockMaskRow:result *tmp261 *tmp263
   761 label *label357
   762 label *label358
   763 op shl *tmp261 :createBlockMaskRow:result 1
   764 op add *tmp262 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  765 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   766 op or :createBlockMaskRow:result *tmp261 *tmp263
   767 label *label359
   768 label *label360
 
   807 label *label372
   808 op shl *tmp261 :createBlockMaskRow:result 1
   809 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  810 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   811 op or :createBlockMaskRow:result *tmp261 *tmp263
   812 label *label373
   813 label *label374
 
   876 label *label394
   877 op shl *tmp261 :createBlockMaskRow:result 1
   878 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  879 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   880 op or :createBlockMaskRow:result *tmp261 *tmp263
   881 label *label395
   882 label *label396
 
   945 label *label416
   946 op shl *tmp261 :createBlockMaskRow:result 1
   947 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+  948 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   949 op or :createBlockMaskRow:result *tmp261 *tmp263
   950 label *label417
   951 label *label418
 
  1014 label *label438
  1015 op shl *tmp261 :createBlockMaskRow:result 1
  1016 set *tmp262 :createCombinedMask:x
-    * ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
+ 1017 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
  1018 op or :createBlockMaskRow:result *tmp261 *tmp263
  1019 label *label439
  1020 label *label440

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-10 instructions):
 
   485 label *label261
   486 label *label262
   487 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   488 ucontrol getBlock :createCombinedMask:x *tmp271 0 *tmp263 0
   489 op or :createBlockMaskRow:result *tmp261 *tmp263
   490 label *label263
 
   541 label *label283
   542 label *label284
   543 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   544 ucontrol getBlock :createCombinedMask:x *tmp273 0 *tmp263 0
   545 op or :createBlockMaskRow:result *tmp261 *tmp263
   546 label *label285
 
   599 label *label305
   600 label *label306
   601 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   602 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   603 op or :createBlockMaskRow:result *tmp261 *tmp263
   604 label *label307
 
   665 label *label327
   666 label *label328
   667 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   668 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   669 op or :createBlockMaskRow:result *tmp261 *tmp263
   670 label *label329
 
   706 set :createAdjacentMask:row1 :createBlockMaskRow:result
   707 label *label214
   708 label *label215
-    * set *tmp275 :createCombinedMask:y
   709 label *label340
   710 label *label341
   711 label *label342
 
   732 label *label349
   733 label *label350
   734 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   735 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp263 0
   736 op or :createBlockMaskRow:result *tmp261 *tmp263
   737 label *label351
 
   800 label *label371
   801 label *label372
   802 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   803 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   804 op or :createBlockMaskRow:result *tmp261 *tmp263
   805 label *label373
 
   868 label *label393
   869 label *label394
   870 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   871 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   872 op or :createBlockMaskRow:result *tmp261 *tmp263
   873 label *label395
 
   936 label *label415
   937 label *label416
   938 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
   939 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   940 op or :createBlockMaskRow:result *tmp261 *tmp263
   941 label *label417
 
  1004 label *label437
  1005 label *label438
  1006 op shl *tmp261 :createBlockMaskRow:result 1
-    * set *tmp262 :createCombinedMask:x
  1007 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
  1008 op or :createBlockMaskRow:result *tmp261 *tmp263
  1009 label *label439

Modifications by Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 (+71 instructions):
 
   352 label *label97
   353 return :findPossiblePlacement*retaddr
   354 end
-    * label *label11
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
-    * set :findPossiblePlacement:width 2
-    * set :findPossiblePlacement:height 4
-    * setaddr :findPossiblePlacement*retaddr *label111 (h:*label111)
-    * call *label10 *invalid :findPossiblePlacement*retval (m:*label111) (h:*label111)
-    * label *label111
-    * jump *label112 lessThan :findPossiblePlacement*retval 0
-    * jump *label114 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label110 always
-    * label *label114
-    * label *label115
-    * op add *tmp222 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp222 :findPossiblePlacement:x
-    * op add *tmp224 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp224 :findPossiblePlacement:y
-    * op add .generatorX *tmp222 :findPossiblePlacement:x
-    * op add *tmp228 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp228 :findPossiblePlacement:y
-    * op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
-    * jump *label113 always
-    * label *label112
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
-    * set :findPossiblePlacement:width 4
-    * set :findPossiblePlacement:height 2
-    * setaddr :findPossiblePlacement*retaddr *label116 (h:*label116)
-    * call *label10 *invalid :findPossiblePlacement*retval (m:*label116) (h:*label116)
-    * label *label116
-    * jump *label117 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label110 always
-    * label *label117
-    * label *label118
-    * op add *tmp234 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp234 :findPossiblePlacement:x
-    * op add *tmp236 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp236 :findPossiblePlacement:y
-    * op add *tmp238 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp238 :findPossiblePlacement:x
-    * op add .generatorY *tmp236 :findPossiblePlacement:y
-    * op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
-    * label *label113
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label119 (h:*label119)
-    * call *label10 *invalid :findPossiblePlacement*retval (m:*label119) (h:*label119)
-    * label *label119
-    * jump *label120 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label110 always
-    * label *label120
-    * label *label121
-    * op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp248 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp248
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label122 (h:*label122)
-    * call *label10 *invalid :findPossiblePlacement*retval (m:*label122) (h:*label122)
-    * label *label122
-    * jump *label123 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label110 always
-    * label *label123
-    * label *label124
-    * op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp254 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp254
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
-    * call *label10 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
-    * label *label125
-    * jump *label126 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label110 always
-    * label *label126
-    * label *label127
-    * op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * set :tryPlaceGenerator*retval true
-    * jump *label110 always
-    * label *label110
-    * return :tryPlaceGenerator*retaddr
-    * end
   355 label *label13
   356 write @unit processor1 ":createTerrainMask:unit"
   357 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
  1030 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
  1031 set :tryPlaceGenerator:generatorHorizontal 1935
  1032 set :tryPlaceGenerator:generatorVertical 6340995
-    * setaddr :tryPlaceGenerator*retaddr *label158 (h:*label158)
-    * call *label11 *invalid :tryPlaceGenerator*retval (m:*label158) (h:*label158)
-    * label *label158
+ 1033 label *label450
+ 1034 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1035 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1036 set :findPossiblePlacement:width 2
+ 1037 set :findPossiblePlacement:height 4
+ 1038 setaddr :findPossiblePlacement*retaddr *label451 (h:*label451)
+ 1039 call *label10 *invalid :findPossiblePlacement*retval (m:*label451) (h:*label451)
+ 1040 label *label451
+ 1041 jump *label454 lessThan :findPossiblePlacement*retval 0
+ 1042 jump *label452 greaterThanEq :findPossiblePlacement*retval 0
+ 1043 set :tryPlaceGenerator*retval false
+ 1044 jump *label468 always
+ 1045 label *label452
+ 1046 label *label453
+ 1047 op add *tmp222 :tryPlaceGenerator:centerX 0.5
+ 1048 op add .water2X *tmp222 :findPossiblePlacement:x
+ 1049 op add *tmp224 :tryPlaceGenerator:centerY 0.5
+ 1050 op add .water2Y *tmp224 :findPossiblePlacement:y
+ 1051 op add .generatorX *tmp222 :findPossiblePlacement:x
+ 1052 op add *tmp228 :tryPlaceGenerator:centerY 2.5
+ 1053 op add .generatorY *tmp228 :findPossiblePlacement:y
+ 1054 op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1055 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
+ 1056 jump *label458 always
+ 1057 label *label454
+ 1058 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1059 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1060 set :findPossiblePlacement:width 4
+ 1061 set :findPossiblePlacement:height 2
+ 1062 setaddr :findPossiblePlacement*retaddr *label455 (h:*label455)
+ 1063 call *label10 *invalid :findPossiblePlacement*retval (m:*label455) (h:*label455)
+ 1064 label *label455
+ 1065 jump *label456 greaterThanEq :findPossiblePlacement*retval 0
+ 1066 set :tryPlaceGenerator*retval false
+ 1067 jump *label468 always
+ 1068 label *label456
+ 1069 label *label457
+ 1070 op add *tmp234 :tryPlaceGenerator:centerX 0.5
+ 1071 op add .water2X *tmp234 :findPossiblePlacement:x
+ 1072 op add *tmp236 :tryPlaceGenerator:centerY 0.5
+ 1073 op add .water2Y *tmp236 :findPossiblePlacement:y
+ 1074 op add *tmp238 :tryPlaceGenerator:centerX 2.5
+ 1075 op add .generatorX *tmp238 :findPossiblePlacement:x
+ 1076 op add .generatorY *tmp236 :findPossiblePlacement:y
+ 1077 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1078 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
+ 1079 label *label458
+ 1080 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1081 set :findPossiblePlacement:placementMask 1
+ 1082 set :findPossiblePlacement:width 1
+ 1083 set :findPossiblePlacement:height 1
+ 1084 setaddr :findPossiblePlacement*retaddr *label459 (h:*label459)
+ 1085 call *label10 *invalid :findPossiblePlacement*retval (m:*label459) (h:*label459)
+ 1086 label *label459
+ 1087 jump *label460 greaterThanEq :findPossiblePlacement*retval 0
+ 1088 set :tryPlaceGenerator*retval false
+ 1089 jump *label468 always
+ 1090 label *label460
+ 1091 label *label461
+ 1092 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1093 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1094 op shl *tmp248 1 :findPossiblePlacement*retval
+ 1095 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp248
+ 1096 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1097 set :findPossiblePlacement:placementMask 1
+ 1098 set :findPossiblePlacement:width 1
+ 1099 set :findPossiblePlacement:height 1
+ 1100 setaddr :findPossiblePlacement*retaddr *label462 (h:*label462)
+ 1101 call *label10 *invalid :findPossiblePlacement*retval (m:*label462) (h:*label462)
+ 1102 label *label462
+ 1103 jump *label463 greaterThanEq :findPossiblePlacement*retval 0
+ 1104 set :tryPlaceGenerator*retval false
+ 1105 jump *label468 always
+ 1106 label *label463
+ 1107 label *label464
+ 1108 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1109 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1110 op shl *tmp254 1 :findPossiblePlacement*retval
+ 1111 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp254
+ 1112 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1113 set :findPossiblePlacement:placementMask 1
+ 1114 set :findPossiblePlacement:width 1
+ 1115 set :findPossiblePlacement:height 1
+ 1116 setaddr :findPossiblePlacement*retaddr *label465 (h:*label465)
+ 1117 call *label10 *invalid :findPossiblePlacement*retval (m:*label465) (h:*label465)
+ 1118 label *label465
+ 1119 jump *label466 greaterThanEq :findPossiblePlacement*retval 0
+ 1120 set :tryPlaceGenerator*retval false
+ 1121 jump *label468 always
+ 1122 label *label466
+ 1123 label *label467
+ 1124 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1125 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1126 set :tryPlaceGenerator*retval true
+ 1127 jump *label468 always
+ 1128 label *label468
  1129 jump *label159 equal :tryPlaceGenerator*retval false
  1130 set :layoutThoriumDrillAtLocation*retval true
  1131 jump *label141 always
 
  1208 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
  1209 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1210 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * setaddr :tryPlaceGenerator*retaddr *label170 (h:*label170)
-    * call *label11 *invalid :tryPlaceGenerator*retval (m:*label170) (h:*label170)
-    * label *label170
+ 1211 label *label469
+ 1212 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1213 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1214 set :findPossiblePlacement:width 2
+ 1215 set :findPossiblePlacement:height 4
+ 1216 setaddr :findPossiblePlacement*retaddr *label470 (h:*label470)
+ 1217 call *label10 *invalid :findPossiblePlacement*retval (m:*label470) (h:*label470)
+ 1218 label *label470
+ 1219 jump *label473 lessThan :findPossiblePlacement*retval 0
+ 1220 jump *label471 greaterThanEq :findPossiblePlacement*retval 0
+ 1221 set :tryPlaceGenerator*retval false
+ 1222 jump *label487 always
+ 1223 label *label471
+ 1224 label *label472
+ 1225 op add *tmp222 :tryPlaceGenerator:centerX 0.5
+ 1226 op add .water2X *tmp222 :findPossiblePlacement:x
+ 1227 op add *tmp224 :tryPlaceGenerator:centerY 0.5
+ 1228 op add .water2Y *tmp224 :findPossiblePlacement:y
+ 1229 op add .generatorX *tmp222 :findPossiblePlacement:x
+ 1230 op add *tmp228 :tryPlaceGenerator:centerY 2.5
+ 1231 op add .generatorY *tmp228 :findPossiblePlacement:y
+ 1232 op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1233 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp230
+ 1234 jump *label477 always
+ 1235 label *label473
+ 1236 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1237 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1238 set :findPossiblePlacement:width 4
+ 1239 set :findPossiblePlacement:height 2
+ 1240 setaddr :findPossiblePlacement*retaddr *label474 (h:*label474)
+ 1241 call *label10 *invalid :findPossiblePlacement*retval (m:*label474) (h:*label474)
+ 1242 label *label474
+ 1243 jump *label475 greaterThanEq :findPossiblePlacement*retval 0
+ 1244 set :tryPlaceGenerator*retval false
+ 1245 jump *label487 always
+ 1246 label *label475
+ 1247 label *label476
+ 1248 op add *tmp234 :tryPlaceGenerator:centerX 0.5
+ 1249 op add .water2X *tmp234 :findPossiblePlacement:x
+ 1250 op add *tmp236 :tryPlaceGenerator:centerY 0.5
+ 1251 op add .water2Y *tmp236 :findPossiblePlacement:y
+ 1252 op add *tmp238 :tryPlaceGenerator:centerX 2.5
+ 1253 op add .generatorX *tmp238 :findPossiblePlacement:x
+ 1254 op add .generatorY *tmp236 :findPossiblePlacement:y
+ 1255 op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1256 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp242
+ 1257 label *label477
+ 1258 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1259 set :findPossiblePlacement:placementMask 1
+ 1260 set :findPossiblePlacement:width 1
+ 1261 set :findPossiblePlacement:height 1
+ 1262 setaddr :findPossiblePlacement*retaddr *label478 (h:*label478)
+ 1263 call *label10 *invalid :findPossiblePlacement*retval (m:*label478) (h:*label478)
+ 1264 label *label478
+ 1265 jump *label479 greaterThanEq :findPossiblePlacement*retval 0
+ 1266 set :tryPlaceGenerator*retval false
+ 1267 jump *label487 always
+ 1268 label *label479
+ 1269 label *label480
+ 1270 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1271 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1272 op shl *tmp248 1 :findPossiblePlacement*retval
+ 1273 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp248
+ 1274 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1275 set :findPossiblePlacement:placementMask 1
+ 1276 set :findPossiblePlacement:width 1
+ 1277 set :findPossiblePlacement:height 1
+ 1278 setaddr :findPossiblePlacement*retaddr *label481 (h:*label481)
+ 1279 call *label10 *invalid :findPossiblePlacement*retval (m:*label481) (h:*label481)
+ 1280 label *label481
+ 1281 jump *label482 greaterThanEq :findPossiblePlacement*retval 0
+ 1282 set :tryPlaceGenerator*retval false
+ 1283 jump *label487 always
+ 1284 label *label482
+ 1285 label *label483
+ 1286 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1287 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1288 op shl *tmp254 1 :findPossiblePlacement*retval
+ 1289 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp254
+ 1290 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1291 set :findPossiblePlacement:placementMask 1
+ 1292 set :findPossiblePlacement:width 1
+ 1293 set :findPossiblePlacement:height 1
+ 1294 setaddr :findPossiblePlacement*retaddr *label484 (h:*label484)
+ 1295 call *label10 *invalid :findPossiblePlacement*retval (m:*label484) (h:*label484)
+ 1296 label *label484
+ 1297 jump *label485 greaterThanEq :findPossiblePlacement*retval 0
+ 1298 set :tryPlaceGenerator*retval false
+ 1299 jump *label487 always
+ 1300 label *label485
+ 1301 label *label486
+ 1302 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1303 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1304 set :tryPlaceGenerator*retval true
+ 1305 jump *label487 always
+ 1306 label *label487
  1307 jump *label171 equal :tryPlaceGenerator*retval false
  1308 set :layoutThoriumDrillAtLocation*retval true
  1309 jump *label141 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
  1031 set :tryPlaceGenerator:generatorHorizontal 1935
  1032 set :tryPlaceGenerator:generatorVertical 6340995
  1033 label *label450
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1034 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
+ 1035 set :findPossiblePlacement:placementMask 6340995
  1036 set :findPossiblePlacement:width 2
  1037 set :findPossiblePlacement:height 4
  1038 setaddr :findPossiblePlacement*retaddr *label451 (h:*label451)
 
  1209 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1210 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
  1211 label *label469
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1212 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
+ 1213 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
  1214 set :findPossiblePlacement:width 2
  1215 set :findPossiblePlacement:height 4
  1216 setaddr :findPossiblePlacement*retaddr *label470 (h:*label470)

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
     8 set .attenuationRate 50
     9 set .locations 0
    10 set .count -1
-    * label *label232
    11 op abs *tmp179 1
    12 op greaterThan *tmp180 1 6
    13 op abs *tmp181 0
 
    16 jump *label233 always
    17 jump *label241 always
    18 label *label233
-    * label *label234
    19 op mul *tmp185 7 0
    20 op add :shiftMask:shift 1 0
    21 op shr :shiftMask:clearMask 562949953421311 1
    22 op and *tmp190 562949953421312 281474976710655
-    * label *label235
-    * label *label236
-    * label *label237
-    * label *label238
    23 op shl *tmp199 126 7
    24 op shl *tmp200 16254 14
    25 op shl *tmp201 266321790 21
    26 op or :shiftMask:keep 266321790 558517274542080
    27 set :shiftMask:mask false
-    * label *label239
-    * label *label240
    28 set :shiftMask*retval 0
    29 label *label241
-    * label *label18
    30 assertequals 0 558517276622718 "Column right"
    31 set *signature "3290b8c661787058:v1"
    32 label *label19
 
    51 set .mapAction "Locating ore..."
    52 set .angle 0
    53 set .mapProgress 0
-    * label *label23
    54 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp41
    55 jump *label25 notEqual *tmp41 false
    56 label *label230
    57 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label24
    58 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp41
    59 jump *label230 equal *tmp41 false
    60 label *label25
-    * label *label22
-    * label *label21
    61 op div *tmp44 *tmp38 3.8197185279121366
    62 op pow .mapTotal *tmp44 2
    63 set :findDrillLocationLocal:oreX 0
 
    80 op mul .mapProgress .angle .angle
    81 op sub *tmp60 @mapw 5
    82 op sub *tmp67 @maph 5
-    * label *label30
    83 jump *label32 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    84 label *label181
    85 op div :locateOreAway:a .angle @degToRad
 
    88 op add *tmp59 :findDrillLocationLocal:x *tmp58
    89 op max *tmp62 *tmp59 5
    90 op min *tmp61 *tmp62 *tmp60
-    * label *label33
    91 op cos *tmp64 :locateOreAway:a
    92 op mul *tmp65 *tmp64 :locateOreAway:distance
    93 op add *tmp66 :findDrillLocationLocal:y *tmp65
    94 op max *tmp69 *tmp66 5
    95 op min *tmp68 *tmp69 *tmp67
-    * label *label34
-    * label *label36
    96 ucontrol within *tmp61 *tmp68 5 *tmp71
    97 jump *label38 notEqual *tmp71 false
    98 label *label187
    99 ucontrol approach *tmp61 *tmp68 4.5
-    * label *label37
   100 ucontrol within *tmp61 *tmp68 5 *tmp71
   101 jump *label187 equal *tmp71 false
   102 label *label38
-    * label *label35
   103 op div *tmp74 3.8197185279121366 :locateOreAway:distance
   104 op add .angle .angle *tmp74
   105 op mul .mapProgress .angle .angle
 
   109 set *tmp51 false
   110 jump *label29 always
   111 label *label39
-    * label *label40
   112 op sub *tmp81 :locateOreAway:x :findDrillLocationLocal:x
   113 op abs *tmp82 *tmp81
   114 op sub *tmp83 :locateOreAway:y :findDrillLocationLocal:y
 
   121 jump *label43 notEqual :locateOreAway:lastY :locateOreAway:y
   122 jump *label31 always
   123 label *label43
-    * label *label44
   124 label *label41
-    * label *label42
   125 jump *label45 lessThan :locateOreAway:coreDist 7
   126 jump *label47 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   127 set :locateOreAway:lastX :locateOreAway:x
   128 set :locateOreAway:lastY :locateOreAway:y
   129 set *tmp98 .locations
   130 set :visited:i .locationsStart
-    * label *label50
   131 jump *label52 greaterThanEq .locationsStart *tmp98
   132 label *label182
   133 op mul :visited:index 4 :visited:i
 
   142 set *tmp97 true
   143 jump *label49 always
   144 label *label53
-    * label *label54
-    * label *label51
   145 op add :visited:i :visited:i 1
   146 jump *label182 lessThan :visited:i *tmp98
   147 label *label52
 
   155 set *tmp51 true
   156 jump *label29 always
   157 label *label55
-    * label *label56
   158 label *label47
-    * label *label48
   159 label *label45
-    * label *label46
   160 label *label31
   161 jump *label181 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   162 label *label32
 
   168 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   169 jump *label20 always
   170 label *label57
-    * label *label58
   171 jump *label59 lessThan :findDrillLocationLocal:limit 1000
   172 op add .mapSpots .mapSpots 1
   173 label *label59
-    * label *label60
-    * label *label63
   174 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123
   175 jump *label65 notEqual *tmp123 false
   176 label *label207
   177 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label64
   178 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123
   179 jump *label207 equal *tmp123 false
   180 label *label65
-    * label *label62
-    * label *label61
   181 set :findDrillLocationLocal:last 0
   182 label *label66
   183 write @unit processor1 ":findBestPosition:unit"
 
   201 jump *label72 greaterThanEq :findDrillLocationLocal:limit 1000
   202 set .mapSpots :findDrillLocationLocal:score
   203 label *label72
-    * label *label73
   204 jump *label74 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   205 op add .count .count 1
   206 sensor *tmp138 :findDrillLocationLocal:item @id
 
   212 op add .count .count 1
   213 write :findDrillLocationLocal:dy bank1 .count
   214 op add .locations .locations 1
-    * label *label76
   215 ucontrol unbind
   216 set :findDrillLocationLocal*retval true
   217 jump *label20 always
   218 label *label74
-    * label *label75
   219 label *label70
-    * label *label71
   220 jump *label77 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   221 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   222 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   223 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   224 label *label77
-    * label *label78
   225 jump *label79 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   226 jump *label68 always
   227 label *label79
-    * label *label80
   228 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   229 op mul :round:x :findDrillLocationLocal:diffX 1.1
   230 op add *tmp154 :round:x 0.5
   231 op floor *tmp153 *tmp154
-    * label *label81
   232 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp153
   233 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   234 op add *tmp158 :round.1:x 0.5
   235 op floor *tmp157 *tmp158
-    * label *label82
   236 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp157
   237 op sub *tmp160 :findDrillLocationLocal:oreX :findDrillLocationLocal:x
   238 op abs *tmp161 *tmp160
 
   242 jump *label83 greaterThanEq *tmp164 7
   243 jump *label68 always
   244 label *label83
-    * label *label84
-    * label *label67
   245 jump *label66 always
   246 label *label68
   247 jump *label85 lessThan :findDrillLocationLocal:best 0
 
   255 op add .count .count 1
   256 write :findDrillLocationLocal:bestY bank1 .count
   257 op add .locations .locations 1
-    * label *label87
   258 label *label85
-    * label *label86
-    * label *label27
   259 jump *label26 always
-    * label *label28
   260 set :findDrillLocationLocal*retval null
   261 label *label20
   262 return :findDrillLocationLocal*retaddr
   263 end
   264 label *label10
   265 set :findPossiblePlacement:y -3
-    * label *label98
   266 jump *label100 greaterThan :findPossiblePlacement:y 3
   267 label *label183
   268 op add *tmp202 :findPossiblePlacement:y 3
   269 op mul *tmp203 7 *tmp202
   270 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp203
   271 set :findPossiblePlacement:x -3
-    * label *label101
   272 jump *label103 greaterThan :findPossiblePlacement:x 3
   273 label *label184
   274 op and *tmp205 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   278 op add :findPossiblePlacement*retval *tmp209 :findPossiblePlacement:x
   279 jump *label97 always
   280 label *label104
-    * label *label105
   281 op sub *tmp211 3 :findPossiblePlacement:width
   282 jump *label106 lessThanEq :findPossiblePlacement:x *tmp211
   283 jump *label103 always
   284 label *label106
-    * label *label107
   285 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label102
   286 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   287 jump *label184 lessThanEq :findPossiblePlacement:x 3
   288 label *label103
 
   290 jump *label108 lessThanEq :findPossiblePlacement:y *tmp214
   291 jump *label100 always
   292 label *label108
-    * label *label109
-    * label *label99
   293 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   294 jump *label183 lessThanEq :findPossiblePlacement:y 3
   295 label *label100
 
   306 set .maskX :createCombinedMask:x
   307 set .maskY :createCombinedMask:y
   308 op add *tmp271 :createCombinedMask:y 4
-    * label *label252
-    * label *label253
-    * label *label254
   309 op add *tmp262 :createCombinedMask:x 4
   310 ucontrol getBlock *tmp262 *tmp271 0 :createBlockMaskRow:result 0
-    * label *label255
-    * label *label256
   311 op shl *tmp261 :createBlockMaskRow:result 1
   312 op add *tmp262 :createCombinedMask:x 3
   313 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   314 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label257
-    * label *label258
   315 op shl *tmp261 :createBlockMaskRow:result 1
   316 op add *tmp262 :createCombinedMask:x 2
   317 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   318 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label259
-    * label *label260
   319 op shl *tmp261 :createBlockMaskRow:result 1
   320 op add *tmp262 :createCombinedMask:x 1
   321 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   322 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label261
-    * label *label262
   323 op shl *tmp261 :createBlockMaskRow:result 1
   324 ucontrol getBlock :createCombinedMask:x *tmp271 0 *tmp263 0
   325 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label263
-    * label *label264
   326 op shl *tmp261 :createBlockMaskRow:result 1
   327 op add *tmp262 :createCombinedMask:x -1
   328 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   329 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label265
-    * label *label266
   330 op shl *tmp261 :createBlockMaskRow:result 1
   331 op add *tmp262 :createCombinedMask:x -2
   332 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   333 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label267
-    * label *label268
   334 op shl *tmp261 :createBlockMaskRow:result 1
   335 op add *tmp262 :createCombinedMask:x -3
   336 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   337 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label269
-    * label *label270
   338 op shl *tmp261 :createBlockMaskRow:result 1
   339 op add *tmp262 :createCombinedMask:x -4
   340 ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0
   341 op or :createAdjacentMask:row2 *tmp261 *tmp263
-    * label *label271
-    * label *label272
-    * label *label273
   342 op add *tmp273 :createCombinedMask:y 3
-    * label *label274
-    * label *label275
-    * label *label276
   343 op add *tmp262 :createCombinedMask:x 4
   344 ucontrol getBlock *tmp262 *tmp273 0 :createBlockMaskRow:result 0
-    * label *label277
-    * label *label278
   345 op shl *tmp261 :createBlockMaskRow:result 1
   346 op add *tmp262 :createCombinedMask:x 3
   347 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   348 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label279
-    * label *label280
   349 op shl *tmp261 :createBlockMaskRow:result 1
   350 op add *tmp262 :createCombinedMask:x 2
   351 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   352 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label281
-    * label *label282
   353 op shl *tmp261 :createBlockMaskRow:result 1
   354 op add *tmp262 :createCombinedMask:x 1
   355 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   356 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label283
-    * label *label284
   357 op shl *tmp261 :createBlockMaskRow:result 1
   358 ucontrol getBlock :createCombinedMask:x *tmp273 0 *tmp263 0
   359 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label285
-    * label *label286
   360 op shl *tmp261 :createBlockMaskRow:result 1
   361 op add *tmp262 :createCombinedMask:x -1
   362 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   363 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label287
-    * label *label288
   364 op shl *tmp261 :createBlockMaskRow:result 1
   365 op add *tmp262 :createCombinedMask:x -2
   366 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   367 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label289
-    * label *label290
   368 op shl *tmp261 :createBlockMaskRow:result 1
   369 op add *tmp262 :createCombinedMask:x -3
   370 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   371 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label291
-    * label *label292
   372 op shl *tmp261 :createBlockMaskRow:result 1
   373 op add *tmp262 :createCombinedMask:x -4
   374 ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0
   375 op or :createAdjacentMask:row1 *tmp261 *tmp263
-    * label *label293
-    * label *label294
-    * label *label295
-    * label *label208
-    * label *label209
   376 op add *tmp275 :createCombinedMask:y 2
-    * label *label296
-    * label *label297
-    * label *label298
   377 op add *tmp262 :createCombinedMask:x 4
   378 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label299
-    * label *label300
   379 op shl *tmp261 :createBlockMaskRow:result 1
   380 op add *tmp262 :createCombinedMask:x 3
   381 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   382 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label301
-    * label *label302
   383 op shl *tmp261 :createBlockMaskRow:result 1
   384 op add *tmp262 :createCombinedMask:x 2
   385 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   386 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label303
-    * label *label304
   387 op shl *tmp261 :createBlockMaskRow:result 1
   388 op add *tmp262 :createCombinedMask:x 1
   389 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   390 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label305
-    * label *label306
   391 op shl *tmp261 :createBlockMaskRow:result 1
   392 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   393 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label307
-    * label *label308
   394 op shl *tmp261 :createBlockMaskRow:result 1
   395 op add *tmp262 :createCombinedMask:x -1
   396 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   397 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label309
-    * label *label310
   398 op shl *tmp261 :createBlockMaskRow:result 1
   399 op add *tmp262 :createCombinedMask:x -2
   400 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   401 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label311
-    * label *label312
   402 op shl *tmp261 :createBlockMaskRow:result 1
   403 op add *tmp262 :createCombinedMask:x -3
   404 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   405 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label313
-    * label *label314
   406 op shl *tmp261 :createBlockMaskRow:result 1
   407 op add *tmp262 :createCombinedMask:x -4
   408 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   409 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label315
-    * label *label316
-    * label *label317
   410 op shl *tmp277 :createAdjacentMask:row1 1
   411 op or *tmp278 :createAdjacentMask:row2 *tmp277
   412 op shr *tmp279 :createAdjacentMask:row1 1
 
   415 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   416 set :createAdjacentMask:row2 :createAdjacentMask:row1
   417 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label211
-    * label *label212
   418 op add *tmp275 :createCombinedMask:y 1
-    * label *label318
-    * label *label319
-    * label *label320
   419 op add *tmp262 :createCombinedMask:x 4
   420 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label321
-    * label *label322
   421 op shl *tmp261 :createBlockMaskRow:result 1
   422 op add *tmp262 :createCombinedMask:x 3
   423 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   424 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label323
-    * label *label324
   425 op shl *tmp261 :createBlockMaskRow:result 1
   426 op add *tmp262 :createCombinedMask:x 2
   427 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   428 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label325
-    * label *label326
   429 op shl *tmp261 :createBlockMaskRow:result 1
   430 op add *tmp262 :createCombinedMask:x 1
   431 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   432 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label327
-    * label *label328
   433 op shl *tmp261 :createBlockMaskRow:result 1
   434 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   435 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label329
-    * label *label330
   436 op shl *tmp261 :createBlockMaskRow:result 1
   437 op add *tmp262 :createCombinedMask:x -1
   438 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   439 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label331
-    * label *label332
   440 op shl *tmp261 :createBlockMaskRow:result 1
   441 op add *tmp262 :createCombinedMask:x -2
   442 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   443 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label333
-    * label *label334
   444 op shl *tmp261 :createBlockMaskRow:result 1
   445 op add *tmp262 :createCombinedMask:x -3
   446 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   447 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label335
-    * label *label336
   448 op shl *tmp261 :createBlockMaskRow:result 1
   449 op add *tmp262 :createCombinedMask:x -4
   450 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   451 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label337
-    * label *label338
-    * label *label339
   452 op shl *tmp277 :createAdjacentMask:row1 1
   453 op or *tmp278 :createAdjacentMask:row2 *tmp277
   454 op shr *tmp279 :createAdjacentMask:row1 1
 
   459 op or :createAdjacentMask:result *tmp282 *tmp283
   460 set :createAdjacentMask:row2 :createAdjacentMask:row1
   461 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label214
-    * label *label215
-    * label *label340
-    * label *label341
-    * label *label342
   462 op add *tmp262 :createCombinedMask:x 4
   463 ucontrol getBlock *tmp262 :createCombinedMask:y 0 :createBlockMaskRow:result 0
-    * label *label343
-    * label *label344
   464 op shl *tmp261 :createBlockMaskRow:result 1
   465 op add *tmp262 :createCombinedMask:x 3
   466 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   467 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label345
-    * label *label346
   468 op shl *tmp261 :createBlockMaskRow:result 1
   469 op add *tmp262 :createCombinedMask:x 2
   470 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   471 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label347
-    * label *label348
   472 op shl *tmp261 :createBlockMaskRow:result 1
   473 op add *tmp262 :createCombinedMask:x 1
   474 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   475 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label349
-    * label *label350
   476 op shl *tmp261 :createBlockMaskRow:result 1
   477 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp263 0
   478 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label351
-    * label *label352
   479 op shl *tmp261 :createBlockMaskRow:result 1
   480 op add *tmp262 :createCombinedMask:x -1
   481 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   482 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label353
-    * label *label354
   483 op shl *tmp261 :createBlockMaskRow:result 1
   484 op add *tmp262 :createCombinedMask:x -2
   485 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   486 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label355
-    * label *label356
   487 op shl *tmp261 :createBlockMaskRow:result 1
   488 op add *tmp262 :createCombinedMask:x -3
   489 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   490 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label357
-    * label *label358
   491 op shl *tmp261 :createBlockMaskRow:result 1
   492 op add *tmp262 :createCombinedMask:x -4
   493 ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0
   494 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label359
-    * label *label360
-    * label *label361
   495 op shl *tmp277 :createAdjacentMask:row1 1
   496 op or *tmp278 :createAdjacentMask:row2 *tmp277
   497 op shr *tmp279 :createAdjacentMask:row1 1
 
   502 op or :createAdjacentMask:result *tmp282 *tmp283
   503 set :createAdjacentMask:row2 :createAdjacentMask:row1
   504 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label217
-    * label *label218
   505 op add *tmp275 :createCombinedMask:y -1
-    * label *label362
-    * label *label363
-    * label *label364
   506 op add *tmp262 :createCombinedMask:x 4
   507 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label365
-    * label *label366
   508 op shl *tmp261 :createBlockMaskRow:result 1
   509 op add *tmp262 :createCombinedMask:x 3
   510 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   511 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label367
-    * label *label368
   512 op shl *tmp261 :createBlockMaskRow:result 1
   513 op add *tmp262 :createCombinedMask:x 2
   514 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   515 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label369
-    * label *label370
   516 op shl *tmp261 :createBlockMaskRow:result 1
   517 op add *tmp262 :createCombinedMask:x 1
   518 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   519 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label371
-    * label *label372
   520 op shl *tmp261 :createBlockMaskRow:result 1
   521 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   522 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label373
-    * label *label374
   523 op shl *tmp261 :createBlockMaskRow:result 1
   524 op add *tmp262 :createCombinedMask:x -1
   525 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   526 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label375
-    * label *label376
   527 op shl *tmp261 :createBlockMaskRow:result 1
   528 op add *tmp262 :createCombinedMask:x -2
   529 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   530 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label377
-    * label *label378
   531 op shl *tmp261 :createBlockMaskRow:result 1
   532 op add *tmp262 :createCombinedMask:x -3
   533 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   534 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label379
-    * label *label380
   535 op shl *tmp261 :createBlockMaskRow:result 1
   536 op add *tmp262 :createCombinedMask:x -4
   537 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   538 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label381
-    * label *label382
-    * label *label383
   539 op shl *tmp277 :createAdjacentMask:row1 1
   540 op or *tmp278 :createAdjacentMask:row2 *tmp277
   541 op shr *tmp279 :createAdjacentMask:row1 1
 
   546 op or :createAdjacentMask:result *tmp282 *tmp283
   547 set :createAdjacentMask:row2 :createAdjacentMask:row1
   548 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label220
-    * label *label221
   549 op add *tmp275 :createCombinedMask:y -2
-    * label *label384
-    * label *label385
-    * label *label386
   550 op add *tmp262 :createCombinedMask:x 4
   551 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label387
-    * label *label388
   552 op shl *tmp261 :createBlockMaskRow:result 1
   553 op add *tmp262 :createCombinedMask:x 3
   554 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   555 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label389
-    * label *label390
   556 op shl *tmp261 :createBlockMaskRow:result 1
   557 op add *tmp262 :createCombinedMask:x 2
   558 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   559 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label391
-    * label *label392
   560 op shl *tmp261 :createBlockMaskRow:result 1
   561 op add *tmp262 :createCombinedMask:x 1
   562 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   563 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label393
-    * label *label394
   564 op shl *tmp261 :createBlockMaskRow:result 1
   565 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   566 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label395
-    * label *label396
   567 op shl *tmp261 :createBlockMaskRow:result 1
   568 op add *tmp262 :createCombinedMask:x -1
   569 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   570 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label397
-    * label *label398
   571 op shl *tmp261 :createBlockMaskRow:result 1
   572 op add *tmp262 :createCombinedMask:x -2
   573 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   574 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label399
-    * label *label400
   575 op shl *tmp261 :createBlockMaskRow:result 1
   576 op add *tmp262 :createCombinedMask:x -3
   577 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   578 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label401
-    * label *label402
   579 op shl *tmp261 :createBlockMaskRow:result 1
   580 op add *tmp262 :createCombinedMask:x -4
   581 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   582 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label403
-    * label *label404
-    * label *label405
   583 op shl *tmp277 :createAdjacentMask:row1 1
   584 op or *tmp278 :createAdjacentMask:row2 *tmp277
   585 op shr *tmp279 :createAdjacentMask:row1 1
 
   590 op or :createAdjacentMask:result *tmp282 *tmp283
   591 set :createAdjacentMask:row2 :createAdjacentMask:row1
   592 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label223
-    * label *label224
   593 op add *tmp275 :createCombinedMask:y -3
-    * label *label406
-    * label *label407
-    * label *label408
   594 op add *tmp262 :createCombinedMask:x 4
   595 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label409
-    * label *label410
   596 op shl *tmp261 :createBlockMaskRow:result 1
   597 op add *tmp262 :createCombinedMask:x 3
   598 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   599 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label411
-    * label *label412
   600 op shl *tmp261 :createBlockMaskRow:result 1
   601 op add *tmp262 :createCombinedMask:x 2
   602 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   603 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label413
-    * label *label414
   604 op shl *tmp261 :createBlockMaskRow:result 1
   605 op add *tmp262 :createCombinedMask:x 1
   606 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   607 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label415
-    * label *label416
   608 op shl *tmp261 :createBlockMaskRow:result 1
   609 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   610 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label417
-    * label *label418
   611 op shl *tmp261 :createBlockMaskRow:result 1
   612 op add *tmp262 :createCombinedMask:x -1
   613 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   614 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label419
-    * label *label420
   615 op shl *tmp261 :createBlockMaskRow:result 1
   616 op add *tmp262 :createCombinedMask:x -2
   617 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   618 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label421
-    * label *label422
   619 op shl *tmp261 :createBlockMaskRow:result 1
   620 op add *tmp262 :createCombinedMask:x -3
   621 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   622 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label423
-    * label *label424
   623 op shl *tmp261 :createBlockMaskRow:result 1
   624 op add *tmp262 :createCombinedMask:x -4
   625 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   626 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label425
-    * label *label426
-    * label *label427
   627 op shl *tmp277 :createAdjacentMask:row1 1
   628 op or *tmp278 :createAdjacentMask:row2 *tmp277
   629 op shr *tmp279 :createAdjacentMask:row1 1
 
   634 op or :createAdjacentMask:result *tmp282 *tmp283
   635 set :createAdjacentMask:row2 :createAdjacentMask:row1
   636 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label226
-    * label *label227
   637 op add *tmp275 :createCombinedMask:y -4
-    * label *label428
-    * label *label429
-    * label *label430
   638 op add *tmp262 :createCombinedMask:x 4
   639 ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:result 0
-    * label *label431
-    * label *label432
   640 op shl *tmp261 :createBlockMaskRow:result 1
   641 op add *tmp262 :createCombinedMask:x 3
   642 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   643 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label433
-    * label *label434
   644 op shl *tmp261 :createBlockMaskRow:result 1
   645 op add *tmp262 :createCombinedMask:x 2
   646 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   647 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label435
-    * label *label436
   648 op shl *tmp261 :createBlockMaskRow:result 1
   649 op add *tmp262 :createCombinedMask:x 1
   650 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   651 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label437
-    * label *label438
   652 op shl *tmp261 :createBlockMaskRow:result 1
   653 ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0
   654 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label439
-    * label *label440
   655 op shl *tmp261 :createBlockMaskRow:result 1
   656 op add *tmp262 :createCombinedMask:x -1
   657 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   658 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label441
-    * label *label442
   659 op shl *tmp261 :createBlockMaskRow:result 1
   660 op add *tmp262 :createCombinedMask:x -2
   661 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   662 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label443
-    * label *label444
   663 op shl *tmp261 :createBlockMaskRow:result 1
   664 op add *tmp262 :createCombinedMask:x -3
   665 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   666 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label445
-    * label *label446
   667 op shl *tmp261 :createBlockMaskRow:result 1
   668 op add *tmp262 :createCombinedMask:x -4
   669 ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0
   670 op or :createBlockMaskRow:result *tmp261 *tmp263
-    * label *label447
-    * label *label448
-    * label *label449
   671 op shl *tmp277 :createAdjacentMask:row1 1
   672 op or *tmp278 :createAdjacentMask:row2 *tmp277
   673 op shr *tmp279 :createAdjacentMask:row1 1
 
   676 op shl *tmp282 :createAdjacentMask:result 7
   677 op and *tmp283 :createAdjacentMask:mask 0xFE
   678 op or :createAdjacentMask:result *tmp282 *tmp283
-    * label *label229
-    * label *label138
   679 op shr .adjacentMask :createAdjacentMask:result 1
-    * label *label133
   680 label *label140
   681 wait 1e-15
   682 read *tmp286 processor1 ":createTerrainMask*finished"
   683 jump *label140 equal *tmp286 false
   684 read .terrainMask processor1 ":createTerrainMask*retval"
   685 op or :createCombinedMask*retval .adjacentMask .terrainMask
-    * label *label132
   686 return :createCombinedMask*retaddr
   687 end
   688 label *label14
 
   696 set .water1X -1
   697 set :moveTo.5:x .drillX
   698 set :moveTo.5:y .drillY
-    * label *label143
   699 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
   700 jump *label145 notEqual *tmp289 false
   701 label *label231
   702 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label144
   703 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289
   704 jump *label231 equal *tmp289 false
   705 label *label145
-    * label *label142
   706 set :createCombinedMask:x .drillX
   707 set :createCombinedMask:y .drillY
   708 setaddr :createCombinedMask*retaddr *label146 (h:*label146)
   709 call *label13 *invalid :createCombinedMask*retval (m:*label146) (h:*label146)
   710 label *label146
-    * label *label147
   711 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * label *label148
   712 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * label *label149
   713 set :layoutThoriumDrillAtLocation:mask2x2 387
   714 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   715 set :findPossiblePlacement:placementMask 387
 
   727 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp334
   728 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp334
   729 label *label151
-    * label *label152
   730 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   731 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   732 set :findPossiblePlacement:width 2
 
   742 op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   743 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp343
   744 label *label154
-    * label *label155
-    * label *label156
   745 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * label *label157
   746 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   747 set :tryPlaceGenerator:centerX .drillX
   748 set :tryPlaceGenerator:centerY .drillY
   749 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   750 set :tryPlaceGenerator:generatorHorizontal 1935
   751 set :tryPlaceGenerator:generatorVertical 6340995
-    * label *label450
   752 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   753 set :findPossiblePlacement:placementMask 6340995
   754 set :findPossiblePlacement:width 2
 
   761 set :tryPlaceGenerator*retval false
   762 jump *label468 always
   763 label *label452
-    * label *label453
   764 op add *tmp222 :tryPlaceGenerator:centerX 0.5
   765 op add .water2X *tmp222 :findPossiblePlacement:x
   766 op add *tmp224 :tryPlaceGenerator:centerY 0.5
 
   783 set :tryPlaceGenerator*retval false
   784 jump *label468 always
   785 label *label456
-    * label *label457
   786 op add *tmp234 :tryPlaceGenerator:centerX 0.5
   787 op add .water2X *tmp234 :findPossiblePlacement:x
   788 op add *tmp236 :tryPlaceGenerator:centerY 0.5
 
   804 set :tryPlaceGenerator*retval false
   805 jump *label468 always
   806 label *label460
-    * label *label461
   807 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   808 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   809 op shl *tmp248 1 :findPossiblePlacement*retval
 
   819 set :tryPlaceGenerator*retval false
   820 jump *label468 always
   821 label *label463
-    * label *label464
   822 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   823 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   824 op shl *tmp254 1 :findPossiblePlacement*retval
 
   834 set :tryPlaceGenerator*retval false
   835 jump *label468 always
   836 label *label466
-    * label *label467
   837 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   838 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   839 set :tryPlaceGenerator*retval true
 
   843 set :layoutThoriumDrillAtLocation*retval true
   844 jump *label141 always
   845 label *label159
-    * label *label160
   846 set :layoutThoriumDrillAtLocation:sx 3
   847 set :layoutThoriumDrillAtLocation:sy 3
   848 setaddr *tmp358 *label164
 
   870 call *label13 *invalid :createCombinedMask*retval (m:*label168) (h:*label168)
   871 label *label168
   872 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label242
   873 op abs *tmp179 :layoutThoriumDrillAtLocation:sx
   874 op greaterThan *tmp180 *tmp179 6
   875 op abs *tmp181 :layoutThoriumDrillAtLocation:sy
 
   879 set :shiftMask*retval 0
   880 jump *label251 always
   881 label *label243
-    * label *label244
   882 op mul *tmp185 7 :layoutThoriumDrillAtLocation:sy
   883 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp185
   884 jump *label245 lessThanEq :shiftMask:shift 0
 
   895 jump *label247 lessThanEq :layoutThoriumDrillAtLocation:sx 0
   896 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   897 label *label247
-    * label *label248
   898 op shl *tmp199 :shiftMask:keep 7
   899 op or :shiftMask:keep :shiftMask:keep *tmp199
   900 op shl *tmp200 :shiftMask:keep 14
 
   903 op or :shiftMask:keep :shiftMask:keep *tmp201
   904 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   905 label *label249
-    * label *label250
   906 set :shiftMask*retval :shiftMask:mask
   907 label *label251
   908 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
   916 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   917 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
   918 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * label *label469
   919 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   920 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
   921 set :findPossiblePlacement:width 2
 
   928 set :tryPlaceGenerator*retval false
   929 jump *label487 always
   930 label *label471
-    * label *label472
   931 op add *tmp222 :tryPlaceGenerator:centerX 0.5
   932 op add .water2X *tmp222 :findPossiblePlacement:x
   933 op add *tmp224 :tryPlaceGenerator:centerY 0.5
 
   950 set :tryPlaceGenerator*retval false
   951 jump *label487 always
   952 label *label475
-    * label *label476
   953 op add *tmp234 :tryPlaceGenerator:centerX 0.5
   954 op add .water2X *tmp234 :findPossiblePlacement:x
   955 op add *tmp236 :tryPlaceGenerator:centerY 0.5
 
   971 set :tryPlaceGenerator*retval false
   972 jump *label487 always
   973 label *label479
-    * label *label480
   974 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   975 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   976 op shl *tmp248 1 :findPossiblePlacement*retval
 
   986 set :tryPlaceGenerator*retval false
   987 jump *label487 always
   988 label *label482
-    * label *label483
   989 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   990 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   991 op shl *tmp254 1 :findPossiblePlacement*retval
 
  1001 set :tryPlaceGenerator*retval false
  1002 jump *label487 always
  1003 label *label485
-    * label *label486
  1004 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
  1005 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
  1006 set :tryPlaceGenerator*retval true
 
  1010 set :layoutThoriumDrillAtLocation*retval true
  1011 jump *label141 always
  1012 label *label171
-    * label *label172
-    * label *label162
  1013 multijump *tmp358 0 0 (m:marker0)
  1014 multilabel *label167 (m:marker0)
-    * label *label163
  1015 set :layoutThoriumDrillAtLocation*retval true
  1016 label *label141
  1017 return :layoutThoriumDrillAtLocation*retaddr
 
  1033 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1034 set .searchFinished true
  1035 set :findDrillLocation*retval true
-    * label *label173
  1036 set :findDrillLocation*finished true
  1037 jump *label19 always
  1038 end
 
  1053 set :layoutThoriumDrill*retval false
  1054 jump *label175 always
  1055 label *label177
-    * label *label178
  1056 setaddr :layoutThoriumDrillAtLocation*retaddr *label179 (h:*label179)
  1057 call *label14 *invalid :layoutThoriumDrillAtLocation*retval (m:*label179) (h:*label179)
  1058 label *label179
 
  1067 set .mapTotal 0
  1068 set .mapProgress 0
  1069 ucontrol unbind
-    * label *label180
  1070 set :stopLocation*finished true
  1071 jump *label19 always
  1072 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-5 instructions):
 
   118 op sub *tmp87 :locateOreAway:y *tmp68
   119 op len :locateOreAway:unitDist *tmp86 *tmp87
   120 jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label43 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label31 always
+  121 jump *label31 equal :locateOreAway:lastY :locateOreAway:y
   122 label *label43
   123 label *label41
   124 jump *label45 lessThan :locateOreAway:coreDist 7
 
   221 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   222 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   223 label *label77
-    * jump *label79 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label68 always
+  224 jump *label68 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   225 label *label79
   226 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   227 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   237 op sub *tmp162 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   238 op abs *tmp163 *tmp162
   239 op min *tmp164 *tmp161 *tmp163
-    * jump *label83 greaterThanEq *tmp164 7
-    * jump *label68 always
+  240 jump *label68 lessThan *tmp164 7
   241 label *label83
   242 jump *label66 always
   243 label *label68
 
   276 jump *label97 always
   277 label *label104
   278 op sub *tmp211 3 :findPossiblePlacement:width
-    * jump *label106 lessThanEq :findPossiblePlacement:x *tmp211
-    * jump *label103 always
+  279 jump *label103 greaterThan :findPossiblePlacement:x *tmp211
   280 label *label106
   281 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   282 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   283 jump *label184 lessThanEq :findPossiblePlacement:x 3
   284 label *label103
   285 op sub *tmp214 3 :findPossiblePlacement:height
-    * jump *label108 lessThanEq :findPossiblePlacement:y *tmp214
-    * jump *label100 always
+  286 jump *label100 greaterThan :findPossiblePlacement:y *tmp214
   287 label *label108
   288 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   289 jump *label183 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   119 op len :locateOreAway:unitDist *tmp86 *tmp87
   120 jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x
   121 jump *label31 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label43
   122 label *label41
   123 jump *label45 lessThan :locateOreAway:coreDist 7
   124 jump *label47 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   221 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   222 label *label77
   223 jump *label68 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label79
   224 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   225 op mul :round:x :findDrillLocationLocal:diffX 1.1
   226 op add *tmp154 :round:x 0.5
 
   236 op abs *tmp163 *tmp162
   237 op min *tmp164 *tmp161 *tmp163
   238 jump *label68 lessThan *tmp164 7
-    * label *label83
   239 jump *label66 always
   240 label *label68
   241 jump *label85 lessThan :findDrillLocationLocal:best 0
 
   274 label *label104
   275 op sub *tmp211 3 :findPossiblePlacement:width
   276 jump *label103 greaterThan :findPossiblePlacement:x *tmp211
-    * label *label106
   277 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   278 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   279 jump *label184 lessThanEq :findPossiblePlacement:x 3
   280 label *label103
   281 op sub *tmp214 3 :findPossiblePlacement:height
   282 jump *label100 greaterThan :findPossiblePlacement:y *tmp214
-    * label *label108
   283 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   284 jump *label183 lessThanEq :findPossiblePlacement:y 3
   285 label *label100

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   164 set :findDrillLocationLocal:oreY :locateOreAway:y
   165 jump *label57 notEqual *tmp51 false
   166 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label20 always
+  167 return :findDrillLocationLocal*retaddr
   168 label *label57
   169 jump *label59 lessThan :findDrillLocationLocal:limit 1000
   170 op add .mapSpots .mapSpots 1
 
   212 op add .locations .locations 1
   213 ucontrol unbind
   214 set :findDrillLocationLocal*retval true
-    * jump *label20 always
+  215 return :findDrillLocationLocal*retaddr
   216 label *label74
   217 label *label70
   218 jump *label77 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   238 jump *label68 lessThan *tmp164 7
   239 jump *label66 always
   240 label *label68
-    * jump *label85 lessThan :findDrillLocationLocal:best 0
+  241 jump *label26 lessThan :findDrillLocationLocal:best 0
   242 op add .count .count 1
   243 sensor *tmp171 :findDrillLocationLocal:item @id
   244 write *tmp171 bank1 .count
 
   270 op mul *tmp208 :findPossiblePlacement:y 7
   271 op add *tmp209 24 *tmp208
   272 op add :findPossiblePlacement*retval *tmp209 :findPossiblePlacement:x
-    * jump *label97 always
+  273 return :findPossiblePlacement*retaddr
   274 label *label104
   275 op sub *tmp211 3 :findPossiblePlacement:width
   276 jump *label103 greaterThan :findPossiblePlacement:x *tmp211
 
   831 label *label468
   832 jump *label159 equal :tryPlaceGenerator*retval false
   833 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label141 always
+  834 return :layoutThoriumDrillAtLocation*retaddr
   835 label *label159
   836 set :layoutThoriumDrillAtLocation:sx 3
   837 set :layoutThoriumDrillAtLocation:sy 3
 
   998 label *label487
   999 jump *label171 equal :tryPlaceGenerator*retval false
  1000 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label141 always
+ 1001 return :layoutThoriumDrillAtLocation*retaddr
  1002 label *label171
  1003 multijump *tmp358 0 0 (m:marker0)
  1004 multilabel *label167 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-11 instructions):
 
    14 op greaterThan *tmp182 0 6
    15 set *tmp183 false
    16 jump *label233 always
-    * jump *label241 always
    17 label *label233
    18 op mul *tmp185 7 0
    19 op add :shiftMask:shift 1 0
 
    31 label *label19
    32 wait 1e12
    33 jump *label19 always
-    * end
    34 label *label8
    35 ubind :findDrillLocationLocal:unit
    36 set .locationsStart .locations
 
   247 op add .count .count 1
   248 write :findDrillLocationLocal:bestY bank1 .count
   249 op add .locations .locations 1
-    * label *label85
   250 jump *label26 always
-    * set :findDrillLocationLocal*retval null
-    * label *label20
-    * return :findDrillLocationLocal*retaddr
-    * end
   251 label *label10
   252 set :findPossiblePlacement:y -3
   253 jump *label100 greaterThan :findPossiblePlacement:y 3
 
   277 jump *label183 lessThanEq :findPossiblePlacement:y 3
   278 label *label100
   279 set :findPossiblePlacement*retval -1
-    * label *label97
   280 return :findPossiblePlacement*retaddr
-    * end
   281 label *label13
   282 write @unit processor1 ":createTerrainMask:unit"
   283 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   665 read .terrainMask processor1 ":createTerrainMask*retval"
   666 op or :createCombinedMask*retval .adjacentMask .terrainMask
   667 return :createCombinedMask*retaddr
-    * end
   668 label *label14
   669 set .panelY -1
   670 set .panelX -1
 
   993 multijump *tmp358 0 0 (m:marker0)
   994 multilabel *label167 (m:marker0)
   995 set :layoutThoriumDrillAtLocation*retval true
-    * label *label141
   996 return :layoutThoriumDrillAtLocation*retaddr
-    * end
   997 label *label2
   998 set .searchFinished false
   999 set :findDrillLocationLocal:x :findDrillLocation:x
 
  1013 set :findDrillLocation*retval true
  1014 set :findDrillLocation*finished true
  1015 jump *label19 always
-    * end
  1016 label *label3
  1017 set :findDrillLocationLocal:x :layoutThoriumDrill:x
  1018 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1037 label *label175
  1038 set :layoutThoriumDrill*finished true
  1039 jump *label19 always
-    * end
  1040 label *label4
  1041 set .mapSpots 0
  1042 set .mapAction 0
 
  1045 ucontrol unbind
  1046 set :stopLocation*finished true
  1047 jump *label19 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1 (-2 instructions):
 
    25 op or :shiftMask:keep 266321790 558517274542080
    26 set :shiftMask:mask false
    27 set :shiftMask*retval 0
-    * label *label241
    28 assertequals 0 558517276622718 "Column right"
    29 set *signature "3290b8c661787058:v1"
    30 label *label19
 
    33 label *label8
    34 ubind :findDrillLocationLocal:unit
    35 set .locationsStart .locations
-    * set .coreX :findDrillLocationLocal:x
-    * set .coreY :findDrillLocationLocal:y
    36 set :findDrillLocationLocal:capacity 0
    37 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    38 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
    13 op abs *tmp181 0
    14 op greaterThan *tmp182 0 6
    15 set *tmp183 false
-    * jump *label233 always
    16 label *label233
    17 op mul *tmp185 7 0
    18 op add :shiftMask:shift 1 0

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
 
    13 op abs *tmp181 0
    14 op greaterThan *tmp182 0 6
    15 set *tmp183 false
-    * label *label233
    16 op mul *tmp185 7 0
    17 op add :shiftMask:shift 1 0
    18 op shr :shiftMask:clearMask 562949953421311 1

Modifications by Jumps phase, Jump Straightening, pass 5, iteration 1 (-1 instructions):
 
   228 op sub *tmp162 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   229 op abs *tmp163 *tmp162
   230 op min *tmp164 *tmp161 *tmp163
-    * jump *label68 lessThan *tmp164 7
-    * jump *label66 always
+  231 jump *label66 greaterThanEq *tmp164 7
   232 label *label68
   233 jump *label26 lessThan :findDrillLocationLocal:best 0
   234 op add .count .count 1

Final code before resolving virtual instructions:

    0:  jump *label15 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
    4:  draw triangle bank1 message1 processor1 .adjacentMask .angle .attenuationRate
    5:  draw triangle .batteryX .batteryY .containerX .containerY .count .drillX
    6:  draw triangle .drillY .generatorX .generatorY .lastCombinedMask .lastShiftedMask .lastUnshiftedMask
    7:  draw triangle .locations .locationsStart .mapAction .mapProgress .mapSpots .mapTotal
    8:  draw triangle .maskX .maskY .nodeX .nodeY .panelX .panelY
    9:  draw triangle .searchFinished .terrainMask .water1X .water1Y .water2X .water2Y
   10:  draw triangle :createAdjacentMask:mask :createAdjacentMask:result :createAdjacentMask:row1 :createAdjacentMask:row2 :createBlockMaskRow:result :createCombinedMask:x
   11:  draw triangle :createCombinedMask:y :findDrillLocation:capacity :findDrillLocation:dx :findDrillLocation:dy :findDrillLocation:item :findDrillLocation:limit
   12:  draw triangle :findDrillLocation:ore :findDrillLocation:size :findDrillLocation:unit :findDrillLocation:x :findDrillLocation:y :findDrillLocationLocal:best
   13:  draw triangle :findDrillLocationLocal:bestX :findDrillLocationLocal:bestY :findDrillLocationLocal:capacity :findDrillLocationLocal:diffX :findDrillLocationLocal:diffY :findDrillLocationLocal:distanceLimit
   14:  draw triangle :findDrillLocationLocal:dx :findDrillLocationLocal:dy :findDrillLocationLocal:item :findDrillLocationLocal:last :findDrillLocationLocal:limit :findDrillLocationLocal:maxDistance
   15:  draw triangle :findDrillLocationLocal:ore :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY :findDrillLocationLocal:score :findDrillLocationLocal:size :findDrillLocationLocal:unit
   16:  draw triangle :findDrillLocationLocal:x :findDrillLocationLocal:y :findPossiblePlacement:height :findPossiblePlacement:mask :findPossiblePlacement:placementMask :findPossiblePlacement:terrainMask
   17:  draw triangle :findPossiblePlacement:width :findPossiblePlacement:x :findPossiblePlacement:y :layoutThoriumDrill:limit :layoutThoriumDrill:unit :layoutThoriumDrill:x
   18:  draw triangle :layoutThoriumDrill:y :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:generatorHorizontal :layoutThoriumDrillAtLocation:generatorVertical :layoutThoriumDrillAtLocation:mask2x2
   19:  draw triangle :layoutThoriumDrillAtLocation:newX :layoutThoriumDrillAtLocation:newY :layoutThoriumDrillAtLocation:sx :layoutThoriumDrillAtLocation:sy :layoutThoriumDrillAtLocation:terrainMask :locateOreAway:a
   20:  draw triangle :locateOreAway:coreDist :locateOreAway:distance :locateOreAway:lastX :locateOreAway:lastY :locateOreAway:unitDist :locateOreAway:x
   21:  draw triangle :locateOreAway:y :moveTo.5:x :moveTo.5:y :round.1:x :round:x :shiftMask:clearMask
   22:  draw triangle :shiftMask:keep :shiftMask:mask :shiftMask:shift :tryPlaceGenerator:centerX :tryPlaceGenerator:centerY :tryPlaceGenerator:generatorHorizontal
   23:  draw triangle :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:terrainMask :visited:i :visited:index :visited:lx :visited:ly
        label *label15                                               ...
        label *label16                                               OreLocator.mnd: require "Matrices.mnd" remote processor1;
   24:  read *tmp20 processor1 "*signature"                          ...
   25:  jump *label16 notEqual *tmp20 "385702d66f725e74:v1"          ...
   26:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
   27:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
   28:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
   29:  op abs *tmp179 1 0                                           OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
   30:  op greaterThan *tmp180 1 6                                   ...
   31:  op abs *tmp181 0 0                                           ...
   32:  op greaterThan *tmp182 0 6                                   ...
   33:  set *tmp183 false                                            ...
   34:  op mul *tmp185 7 0                                           OreLocator.mnd: var shift = shiftX + 7 * shiftY;
   35:  op add :shiftMask:shift 1 0                                  ...
   36:  op shr :shiftMask:clearMask 562949953421311 1                OreLocator.mnd: var clearMask = ((1 << 49) - 1) >> shift;
   37:  op and *tmp190 562949953421312 281474976710655               OreLocator.mnd: mask = (mask & clearMask) << shift;
   38:  op shl *tmp199 126 7                                         OreLocator.mnd: keep |= keep << 7;
   39:  op shl *tmp200 16254 14                                      OreLocator.mnd: keep |= keep << 14;
   40:  op shl *tmp201 266321790 21                                  OreLocator.mnd: keep |= keep << 21;
   41:  op or :shiftMask:keep 266321790 558517274542080              ...
   42:  set :shiftMask:mask false                                    OreLocator.mnd: mask &= keep;
   43:  set :shiftMask*retval 0                                      OreLocator.mnd: return mask;
   44:  assertequals 0 558517276622718 "Column right"                OreLocator.mnd: assertEquals(a, e, "Column right");
   45:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label19                                               ...
   46:  wait 1e12                                                    ...
   47:  jump *label19 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   48:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   49:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   50:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   51:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   52:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   53:  set .mapSpots :findDrillLocationLocal:dx                     ...
   54:  op sub *tmp36 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   55:  op sub *tmp37 @maph :findDrillLocationLocal:y                ...
   56:  op max *tmp38 :findDrillLocationLocal:x :findDrillLocationLo ...
   57:  op max *tmp38 *tmp38 *tmp36                                  ...
   58:  op max *tmp38 *tmp38 *tmp37                                  ...
   59:  set :findDrillLocationLocal:distanceLimit *tmp38             ...
   60:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   61:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   62:  set .mapProgress 0                                           ...
   63:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   64:  jump *label25 notEqual *tmp41 false                          ...
        label *label230                                              ...
   65:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   66:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   67:  jump *label230 equal *tmp41 false                            ...
        label *label25                                               ...
   68:  op div *tmp44 *tmp38 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   69:  op pow .mapTotal *tmp44 2                                    ...
   70:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   71:  set :findDrillLocationLocal:oreY 0                           ...
        label *label26                                               OreLocator.mnd: while true do
   72:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   73:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   74:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   75:  op sub *tmp46 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   76:  op mul :findDrillLocationLocal:maxDistance *tmp46 .attenuati ...
   77:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   78:  op div *tmp49 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   79:  op pow .mapTotal *tmp49 2                                    ...
   80:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   81:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   82:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   83:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   84:  set :locateOreAway:lastY -1                                  ...
   85:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   86:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   87:  op sub *tmp60 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   88:  op sub *tmp67 @maph 5                                        ...
   89:  jump *label32 greaterThanEq :locateOreAway:distance :findDri ...
        label *label181                                              ...
   90:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   91:  op sin *tmp57 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   92:  op mul *tmp58 *tmp57 :locateOreAway:distance                 ...
   93:  op add *tmp59 :findDrillLocationLocal:x *tmp58               ...
   94:  op max *tmp62 *tmp59 5                                       OreLocator.mnd: min(max(value, low), high);
   95:  op min *tmp61 *tmp62 *tmp60                                  OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   96:  op cos *tmp64 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   97:  op mul *tmp65 *tmp64 :locateOreAway:distance                 ...
   98:  op add *tmp66 :findDrillLocationLocal:y *tmp65               ...
   99:  op max *tmp69 *tmp66 5                                       OreLocator.mnd: min(max(value, low), high);
  100:  op min *tmp68 *tmp69 *tmp67                                  OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
  101:  ucontrol within *tmp61 *tmp68 5 *tmp71 0                     OreLocator.mnd: while !within(x, y, radius) do
  102:  jump *label38 notEqual *tmp71 false                          ...
        label *label187                                              ...
  103:  ucontrol approach *tmp61 *tmp68 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
  104:  ucontrol within *tmp61 *tmp68 5 *tmp71 0                     OreLocator.mnd: while !within(x, y, radius) do
  105:  jump *label187 equal *tmp71 false                            ...
        label *label38                                               ...
  106:  op div *tmp74 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
  107:  op add .angle .angle *tmp74                                  ...
  108:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  109:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
  110:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
  111:  jump *label39 notEqual *tmp77 false                          ...
  112:  set *tmp51 false                                             OreLocator.mnd: return false;
  113:  jump *label29 always 0 0                                     ...
        label *label39                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
  114:  op sub *tmp81 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
  115:  op abs *tmp82 *tmp81 0                                       ...
  116:  op sub *tmp83 :locateOreAway:y :findDrillLocationLocal:y     ...
  117:  op abs *tmp84 *tmp83 0                                       ...
  118:  op max :locateOreAway:coreDist *tmp82 *tmp84                 ...
  119:  op sub *tmp86 :locateOreAway:x *tmp61                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
  120:  op sub *tmp87 :locateOreAway:y *tmp68                        ...
  121:  op len :locateOreAway:unitDist *tmp86 *tmp87                 ...
  122:  jump *label41 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
  123:  jump *label31 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label41                                               ...
  124:  jump *label45 lessThan :locateOreAway:coreDist 7             OreLocator.mnd: if coreDist >= 7 then
  125:  jump *label47 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
  126:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
  127:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
  128:  set *tmp98 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
  129:  set :visited:i .locationsStart                               ...
  130:  jump *label52 greaterThanEq .locationsStart *tmp98           ...
        label *label182                                              ...
  131:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
  132:  op add *tmp100 :visited:index 2                              OreLocator.mnd: var lx = bank1[index + 2];
  133:  read :visited:lx bank1 *tmp100                               ...
  134:  op add *tmp103 :visited:index 3                              OreLocator.mnd: var ly = bank1[index + 3];
  135:  read :visited:ly bank1 *tmp103                               ...
  136:  op sub *tmp106 :locateOreAway:x :visited:lx                  OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  137:  op sub *tmp107 :locateOreAway:y :visited:ly                  ...
  138:  op len *tmp108 *tmp106 *tmp107                               ...
  139:  jump *label53 greaterThanEq *tmp108 7                        ...
  140:  set *tmp97 true                                              OreLocator.mnd: return true;
  141:  jump *label49 always 0 0                                     ...
        label *label53                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  142:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  143:  jump *label182 lessThan :visited:i *tmp98                    ...
        label *label52                                               ...
  144:  set *tmp97 false                                             OreLocator.mnd: return false;
        label *label49                                               OreLocator.mnd: if !visited(x, y) then
  145:  jump *label55 notEqual *tmp97 false                          ...
  146:  op div *tmp113 2 .angle                                      OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  147:  op add .angle .angle *tmp113                                 ...
  148:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  149:  printflush message1                                          OreLocator.mnd: printflush(message1);
  150:  set *tmp51 true                                              OreLocator.mnd: return true;
  151:  jump *label29 always 0 0                                     ...
        label *label55                                               OreLocator.mnd: if !visited(x, y) then
        label *label47                                               OreLocator.mnd: if unitDist < distance then
        label *label45                                               OreLocator.mnd: if coreDist >= 7 then
        label *label31                                               OreLocator.mnd: while distance < distanceLimit do
  152:  jump *label181 lessThan :locateOreAway:distance :findDrillLo ...
        label *label32                                               ...
  153:  set *tmp51 false                                             OreLocator.mnd: return false;
        label *label29                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  154:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  155:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  156:  jump *label57 notEqual *tmp51 false                          ...
  157:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  158:  return :findDrillLocationLocal*retaddr                       ...
        label *label57                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  159:  jump *label59 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  160:  op add .mapSpots .mapSpots 1                                 ...
        label *label59                                               ...
  161:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123  OreLocator.mnd: while !within(x, y, radius) do
  162:  jump *label65 notEqual *tmp123 false                         ...
        label *label207                                              ...
  163:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  164:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp123  OreLocator.mnd: while !within(x, y, radius) do
  165:  jump *label207 equal *tmp123 false                           ...
        label *label65                                               ...
  166:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label66                                               OreLocator.mnd: while true do
  167:  write @unit processor1 ":findBestPosition:unit"              OreLocator.mnd: var score = findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  168:  write :findDrillLocationLocal:oreX processor1 ":findBestPosi ...
  169:  write :findDrillLocationLocal:oreY processor1 ":findBestPosi ...
  170:  write :findDrillLocationLocal:ore processor1 ":findBestPosit ...
  171:  write :findDrillLocationLocal:size processor1 ":findBestPosi ...
  172:  write false processor1 ":findBestPosition*finished"          ...
  173:  write 2 processor1 "@counter"                                ...
        label *label69                                               ...
  174:  wait 1e-15                                                   ...
  175:  read *tmp126 processor1 ":findBestPosition*finished"         ...
  176:  jump *label69 equal *tmp126 false                            ...
  177:  read :findDrillLocationLocal:diffX processor1 ":findBestPosi ...
  178:  read :findDrillLocationLocal:diffY processor1 ":findBestPosi ...
  179:  read :findDrillLocationLocal:score processor1 ":findBestPosi ...
  180:  jump *label70 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  181:  op add :findDrillLocationLocal:dx :findDrillLocationLocal:or OreLocator.mnd: dx = oreX + diffX;
  182:  op add :findDrillLocationLocal:dy :findDrillLocationLocal:or OreLocator.mnd: dy = oreY + diffY;
  183:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  184:  jump *label72 greaterThanEq :findDrillLocationLocal:limit 10 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  185:  set .mapSpots :findDrillLocationLocal:score                  ...
        label *label72                                               ...
  186:  jump *label74 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  187:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  188:  sensor *tmp138 :findDrillLocationLocal:item @id              ...
  189:  write *tmp138 bank1 .count                                   ...
  190:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  191:  write :findDrillLocationLocal:score bank1 .count             ...
  192:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  193:  write :findDrillLocationLocal:dx bank1 .count                ...
  194:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  195:  write :findDrillLocationLocal:dy bank1 .count                ...
  196:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  197:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  198:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  199:  return :findDrillLocationLocal*retaddr                       ...
        label *label74                                               OreLocator.mnd: if capacity >= limit then
        label *label70                                               OreLocator.mnd: if score > capacity then
  200:  jump *label77 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  201:  op add :findDrillLocationLocal:bestX :findDrillLocationLocal OreLocator.mnd: bestX = oreX + diffX;
  202:  op add :findDrillLocationLocal:bestY :findDrillLocationLocal OreLocator.mnd: bestY = oreY + diffY;
  203:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label77                                               OreLocator.mnd: if score > best then
  204:  jump *label68 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  205:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  206:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  207:  op add *tmp154 :round:x 0.5                                  *math: floor(x + 0.5);
  208:  op floor *tmp153 *tmp154 0                                   OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  209:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: ...
  210:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  211:  op add *tmp158 :round.1:x 0.5                                *math: floor(x + 0.5);
  212:  op floor *tmp157 *tmp158 0                                   OreLocator.mnd: oreY += round(diffY * 1.1);
  213:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: ...
  214:  op sub *tmp160 :findDrillLocationLocal:oreX :findDrillLocati OreLocator.mnd: if min(abs(oreX - coreX), abs(oreY - coreY)) < 7 then break; end;
  215:  op abs *tmp161 *tmp160 0                                     ...
  216:  op sub *tmp162 :findDrillLocationLocal:oreY :findDrillLocati ...
  217:  op abs *tmp163 *tmp162 0                                     ...
  218:  op min *tmp164 *tmp161 *tmp163                               ...
  219:  jump *label66 greaterThanEq *tmp164 7                        ...
        label *label68                                               OreLocator.mnd: while true do
  220:  jump *label26 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  221:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  222:  sensor *tmp171 :findDrillLocationLocal:item @id              ...
  223:  write *tmp171 bank1 .count                                   ...
  224:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  225:  write :findDrillLocationLocal:best bank1 .count              ...
  226:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  227:  write :findDrillLocationLocal:bestX bank1 .count             ...
  228:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  229:  write :findDrillLocationLocal:bestY bank1 .count             ...
  230:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  231:  jump *label26 always 0 0                                     OreLocator.mnd: while true do
        label *label10                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  232:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  233:  jump *label100 greaterThan :findPossiblePlacement:y 3        ...
        label *label183                                              ...
  234:  op add *tmp202 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  235:  op mul *tmp203 7 *tmp202                                     ...
  236:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  237:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  238:  jump *label103 greaterThan :findPossiblePlacement:x 3        ...
        label *label184                                              ...
  239:  op and *tmp205 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  240:  jump *label104 notEqual *tmp205 0                            ...
  241:  op mul *tmp208 :findPossiblePlacement:y 7                    ...
  242:  op add *tmp209 24 *tmp208                                    ...
  243:  op add :findPossiblePlacement*retval *tmp209 :findPossiblePl ...
  244:  return :findPossiblePlacement*retaddr                        ...
        label *label104                                              ...
  245:  op sub *tmp211 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  246:  jump *label103 greaterThan :findPossiblePlacement:x *tmp211  ...
  247:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  248:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  249:  jump *label184 lessThanEq :findPossiblePlacement:x 3         ...
        label *label103                                              ...
  250:  op sub *tmp214 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  251:  jump *label100 greaterThan :findPossiblePlacement:y *tmp214  ...
  252:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  253:  jump *label183 lessThanEq :findPossiblePlacement:y 3         ...
        label *label100                                              ...
  254:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  255:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label13                                               OreLocator.mnd: def createCombinedMask(x, y);
  256:  write @unit processor1 ":createTerrainMask:unit"             OreLocator.mnd: async(processor1.createTerrainMask(@unit, x, y));
  257:  write :createCombinedMask:x processor1 ":createTerrainMask:x ...
  258:  write :createCombinedMask:y processor1 ":createTerrainMask:y ...
  259:  write false processor1 ":createTerrainMask*finished"         ...
  260:  write 1 processor1 "@counter"                                ...
  261:  set .maskX :createCombinedMask:x                             OreLocator.mnd: maskX = x; maskY = y;
  262:  set .maskY :createCombinedMask:y                             ...
  263:  op add *tmp271 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  264:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  265:  ucontrol getBlock *tmp262 *tmp271 0 :createBlockMaskRow:resu ...
  266:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  267:  op add *tmp262 :createCombinedMask:x 3                       ...
  268:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  269:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  270:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  271:  op add *tmp262 :createCombinedMask:x 2                       ...
  272:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  273:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  274:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  275:  op add *tmp262 :createCombinedMask:x 1                       ...
  276:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  277:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  278:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  279:  ucontrol getBlock :createCombinedMask:x *tmp271 0 *tmp263 0  ...
  280:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  281:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  282:  op add *tmp262 :createCombinedMask:x -1                      ...
  283:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  284:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  285:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  286:  op add *tmp262 :createCombinedMask:x -2                      ...
  287:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  288:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  289:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  290:  op add *tmp262 :createCombinedMask:x -3                      ...
  291:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  292:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  293:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  294:  op add *tmp262 :createCombinedMask:x -4                      ...
  295:  ucontrol getBlock *tmp262 *tmp271 0 *tmp263 0                ...
  296:  op or :createAdjacentMask:row2 *tmp261 *tmp263               ...
  297:  op add *tmp273 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  298:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  299:  ucontrol getBlock *tmp262 *tmp273 0 :createBlockMaskRow:resu ...
  300:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  301:  op add *tmp262 :createCombinedMask:x 3                       ...
  302:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  303:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  304:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  305:  op add *tmp262 :createCombinedMask:x 2                       ...
  306:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  307:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  308:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  309:  op add *tmp262 :createCombinedMask:x 1                       ...
  310:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  311:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  312:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  313:  ucontrol getBlock :createCombinedMask:x *tmp273 0 *tmp263 0  ...
  314:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  315:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  316:  op add *tmp262 :createCombinedMask:x -1                      ...
  317:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  318:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  319:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  320:  op add *tmp262 :createCombinedMask:x -2                      ...
  321:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  322:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  323:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  324:  op add *tmp262 :createCombinedMask:x -3                      ...
  325:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  326:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  327:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  328:  op add *tmp262 :createCombinedMask:x -4                      ...
  329:  ucontrol getBlock *tmp262 *tmp273 0 *tmp263 0                ...
  330:  op or :createAdjacentMask:row1 *tmp261 *tmp263               ...
  331:  op add *tmp275 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  332:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  333:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  334:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  335:  op add *tmp262 :createCombinedMask:x 3                       ...
  336:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  337:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  338:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  339:  op add *tmp262 :createCombinedMask:x 2                       ...
  340:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  341:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  342:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  343:  op add *tmp262 :createCombinedMask:x 1                       ...
  344:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  345:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  346:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  347:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  348:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  349:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  350:  op add *tmp262 :createCombinedMask:x -1                      ...
  351:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  352:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  353:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  354:  op add *tmp262 :createCombinedMask:x -2                      ...
  355:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  356:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  357:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  358:  op add *tmp262 :createCombinedMask:x -3                      ...
  359:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  360:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  361:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  362:  op add *tmp262 :createCombinedMask:x -4                      ...
  363:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  364:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  365:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  366:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  367:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  368:  op or *tmp280 *tmp278 *tmp279                                ...
  369:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  370:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  371:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  372:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  373:  op add *tmp275 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  374:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  375:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  376:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  377:  op add *tmp262 :createCombinedMask:x 3                       ...
  378:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  379:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  380:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  381:  op add *tmp262 :createCombinedMask:x 2                       ...
  382:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  383:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  384:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  385:  op add *tmp262 :createCombinedMask:x 1                       ...
  386:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  387:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  388:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  389:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  390:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  391:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  392:  op add *tmp262 :createCombinedMask:x -1                      ...
  393:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  394:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  395:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  396:  op add *tmp262 :createCombinedMask:x -2                      ...
  397:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  398:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  399:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  400:  op add *tmp262 :createCombinedMask:x -3                      ...
  401:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  402:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  403:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  404:  op add *tmp262 :createCombinedMask:x -4                      ...
  405:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  406:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  407:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  408:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  409:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  410:  op or *tmp280 *tmp278 *tmp279                                ...
  411:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  412:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  413:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  414:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  415:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  416:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  417:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  418:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 :createBlo ...
  419:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  420:  op add *tmp262 :createCombinedMask:x 3                       ...
  421:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  422:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  423:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  424:  op add *tmp262 :createCombinedMask:x 2                       ...
  425:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  426:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  427:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  428:  op add *tmp262 :createCombinedMask:x 1                       ...
  429:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  430:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  431:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  432:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  433:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  434:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  435:  op add *tmp262 :createCombinedMask:x -1                      ...
  436:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  437:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  438:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  439:  op add *tmp262 :createCombinedMask:x -2                      ...
  440:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  441:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  442:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  443:  op add *tmp262 :createCombinedMask:x -3                      ...
  444:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  445:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  446:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  447:  op add *tmp262 :createCombinedMask:x -4                      ...
  448:  ucontrol getBlock *tmp262 :createCombinedMask:y 0 *tmp263 0  ...
  449:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  450:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  451:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  452:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  453:  op or *tmp280 *tmp278 *tmp279                                ...
  454:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  455:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  456:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  457:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  458:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  459:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  460:  op add *tmp275 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  461:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  462:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  463:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  464:  op add *tmp262 :createCombinedMask:x 3                       ...
  465:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  466:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  467:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  468:  op add *tmp262 :createCombinedMask:x 2                       ...
  469:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  470:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  471:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  472:  op add *tmp262 :createCombinedMask:x 1                       ...
  473:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  474:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  475:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  476:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  477:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  478:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  479:  op add *tmp262 :createCombinedMask:x -1                      ...
  480:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  481:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  482:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  483:  op add *tmp262 :createCombinedMask:x -2                      ...
  484:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  485:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  486:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  487:  op add *tmp262 :createCombinedMask:x -3                      ...
  488:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  489:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  490:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  491:  op add *tmp262 :createCombinedMask:x -4                      ...
  492:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  493:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  494:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  495:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  496:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  497:  op or *tmp280 *tmp278 *tmp279                                ...
  498:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  499:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  500:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  501:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  502:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  503:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  504:  op add *tmp275 :createCombinedMask:y -2                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  505:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  506:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  507:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  508:  op add *tmp262 :createCombinedMask:x 3                       ...
  509:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  510:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  511:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  512:  op add *tmp262 :createCombinedMask:x 2                       ...
  513:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  514:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  515:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  516:  op add *tmp262 :createCombinedMask:x 1                       ...
  517:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  518:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  519:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  520:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  521:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  522:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  523:  op add *tmp262 :createCombinedMask:x -1                      ...
  524:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  525:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  526:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  527:  op add *tmp262 :createCombinedMask:x -2                      ...
  528:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  529:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  530:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  531:  op add *tmp262 :createCombinedMask:x -3                      ...
  532:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  533:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  534:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  535:  op add *tmp262 :createCombinedMask:x -4                      ...
  536:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  537:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  538:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  539:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  540:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  541:  op or *tmp280 *tmp278 *tmp279                                ...
  542:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  543:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  544:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  545:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  546:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  547:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  548:  op add *tmp275 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  549:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  550:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  551:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  552:  op add *tmp262 :createCombinedMask:x 3                       ...
  553:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  554:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  555:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  556:  op add *tmp262 :createCombinedMask:x 2                       ...
  557:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  558:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  559:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  560:  op add *tmp262 :createCombinedMask:x 1                       ...
  561:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  562:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  563:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  564:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  565:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  566:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  567:  op add *tmp262 :createCombinedMask:x -1                      ...
  568:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  569:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  570:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  571:  op add *tmp262 :createCombinedMask:x -2                      ...
  572:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  573:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  574:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  575:  op add *tmp262 :createCombinedMask:x -3                      ...
  576:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  577:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  578:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  579:  op add *tmp262 :createCombinedMask:x -4                      ...
  580:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  581:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  582:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  583:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  584:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  585:  op or *tmp280 *tmp278 *tmp279                                ...
  586:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  587:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  588:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  589:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  590:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  591:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  592:  op add *tmp275 :createCombinedMask:y -4                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  593:  op add *tmp262 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  594:  ucontrol getBlock *tmp262 *tmp275 0 :createBlockMaskRow:resu ...
  595:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  596:  op add *tmp262 :createCombinedMask:x 3                       ...
  597:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  598:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  599:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  600:  op add *tmp262 :createCombinedMask:x 2                       ...
  601:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  602:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  603:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  604:  op add *tmp262 :createCombinedMask:x 1                       ...
  605:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  606:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  607:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  608:  ucontrol getBlock :createCombinedMask:x *tmp275 0 *tmp263 0  ...
  609:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  610:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  611:  op add *tmp262 :createCombinedMask:x -1                      ...
  612:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  613:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  614:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  615:  op add *tmp262 :createCombinedMask:x -2                      ...
  616:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  617:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  618:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  619:  op add *tmp262 :createCombinedMask:x -3                      ...
  620:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  621:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  622:  op shl *tmp261 :createBlockMaskRow:result 1                  ...
  623:  op add *tmp262 :createCombinedMask:x -4                      ...
  624:  ucontrol getBlock *tmp262 *tmp275 0 *tmp263 0                ...
  625:  op or :createBlockMaskRow:result *tmp261 *tmp263             ...
  626:  op shl *tmp277 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  627:  op or *tmp278 :createAdjacentMask:row2 *tmp277               ...
  628:  op shr *tmp279 :createAdjacentMask:row1 1                    ...
  629:  op or *tmp280 *tmp278 *tmp279                                ...
  630:  op or :createAdjacentMask:mask *tmp280 :createBlockMaskRow:r ...
  631:  op shl *tmp282 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  632:  op and *tmp283 :createAdjacentMask:mask 0xFE                 ...
  633:  op or :createAdjacentMask:result *tmp282 *tmp283             ...
  634:  op shr .adjacentMask :createAdjacentMask:result 1            OreLocator.mnd: adjacentMask = createAdjacentMask(x, y);
        label *label140                                              OreLocator.mnd: terrainMask = await(processor1.createTerrainMask);
  635:  wait 1e-15                                                   ...
  636:  read *tmp286 processor1 ":createTerrainMask*finished"        ...
  637:  jump *label140 equal *tmp286 false                           ...
  638:  read .terrainMask processor1 ":createTerrainMask*retval"     ...
  639:  op or :createCombinedMask*retval .adjacentMask .terrainMask  OreLocator.mnd: return adjacentMask | terrainMask;
  640:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label14                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  641:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  642:  set .panelX -1                                               ...
  643:  set .generatorY -1                                           ...
  644:  set .generatorX -1                                           ...
  645:  set .water2Y -1                                              ...
  646:  set .water2X -1                                              ...
  647:  set .water1Y -1                                              ...
  648:  set .water1X -1                                              ...
  649:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  650:  set :moveTo.5:y .drillY                                      ...
  651:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289 0          OreLocator.mnd: while !within(x, y, radius) do
  652:  jump *label145 notEqual *tmp289 false                        ...
        label *label231                                              ...
  653:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  654:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp289 0          OreLocator.mnd: while !within(x, y, radius) do
  655:  jump *label231 equal *tmp289 false                           ...
        label *label145                                              ...
  656:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  657:  set :createCombinedMask:y .drillY                            ...
  658:  setaddr :createCombinedMask*retaddr *label146                ...
  659:  call *label13 *invalid :createCombinedMask*retval            ...
        label *label146                                              ...
  660:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  661:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  662:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  663:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  664:  set :findPossiblePlacement:placementMask 387                 ...
  665:  set :findPossiblePlacement:width 2                           ...
  666:  set :findPossiblePlacement:height 2                          ...
  667:  setaddr :findPossiblePlacement*retaddr *label150             ...
  668:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label150                                              ...
  669:  jump *label151 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  670:  op add *tmp330 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  671:  op add .water1X *tmp330 :findPossiblePlacement:x             ...
  672:  op add *tmp332 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  673:  op add .water1Y *tmp332 :findPossiblePlacement:y             ...
  674:  op shl *tmp334 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  675:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  676:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label151                                              OreLocator.mnd: if shift >= 0 then
  677:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  678:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  679:  set :findPossiblePlacement:width 2                           ...
  680:  set :findPossiblePlacement:height 2                          ...
  681:  setaddr :findPossiblePlacement*retaddr *label153             ...
  682:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label153                                              ...
  683:  jump *label154 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  684:  op add *tmp339 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  685:  op add .containerX *tmp339 :findPossiblePlacement:x          ...
  686:  op add *tmp341 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  687:  op add .containerY *tmp341 :findPossiblePlacement:y          ...
  688:  op shl *tmp343 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  689:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label154                                              OreLocator.mnd: if shift >= 0 then
  690:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  691:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  692:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  693:  set :tryPlaceGenerator:centerY .drillY                       ...
  694:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  695:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  696:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  697:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  698:  set :findPossiblePlacement:placementMask 6340995             ...
  699:  set :findPossiblePlacement:width 2                           ...
  700:  set :findPossiblePlacement:height 4                          ...
  701:  setaddr :findPossiblePlacement*retaddr *label451             ...
  702:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label451                                              ...
  703:  jump *label454 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  704:  jump *label452 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  705:  set :tryPlaceGenerator*retval false                          ...
  706:  jump *label468 always 0 0                                    ...
        label *label452                                              ...
  707:  op add *tmp222 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  708:  op add .water2X *tmp222 :findPossiblePlacement:x             ...
  709:  op add *tmp224 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  710:  op add .water2Y *tmp224 :findPossiblePlacement:y             ...
  711:  op add .generatorX *tmp222 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  712:  op add *tmp228 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  713:  op add .generatorY *tmp228 :findPossiblePlacement:y          ...
  714:  op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  715:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  716:  jump *label458 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label454                                              ...
  717:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  718:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  719:  set :findPossiblePlacement:width 4                           ...
  720:  set :findPossiblePlacement:height 2                          ...
  721:  setaddr :findPossiblePlacement*retaddr *label455             ...
  722:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label455                                              ...
  723:  jump *label456 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  724:  set :tryPlaceGenerator*retval false                          ...
  725:  jump *label468 always 0 0                                    ...
        label *label456                                              ...
  726:  op add *tmp234 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  727:  op add .water2X *tmp234 :findPossiblePlacement:x             ...
  728:  op add *tmp236 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  729:  op add .water2Y *tmp236 :findPossiblePlacement:y             ...
  730:  op add *tmp238 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  731:  op add .generatorX *tmp238 :findPossiblePlacement:x          ...
  732:  op add .generatorY *tmp236 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  733:  op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  734:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label458                                              OreLocator.mnd: if shift >= 0 then
  735:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  736:  set :findPossiblePlacement:placementMask 1                   ...
  737:  set :findPossiblePlacement:width 1                           ...
  738:  set :findPossiblePlacement:height 1                          ...
  739:  setaddr :findPossiblePlacement*retaddr *label459             ...
  740:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label459                                              ...
  741:  jump *label460 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  742:  set :tryPlaceGenerator*retval false                          ...
  743:  jump *label468 always 0 0                                    ...
        label *label460                                              ...
  744:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  745:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  746:  op shl *tmp248 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  747:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  748:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  749:  set :findPossiblePlacement:placementMask 1                   ...
  750:  set :findPossiblePlacement:width 1                           ...
  751:  set :findPossiblePlacement:height 1                          ...
  752:  setaddr :findPossiblePlacement*retaddr *label462             ...
  753:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label462                                              ...
  754:  jump *label463 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  755:  set :tryPlaceGenerator*retval false                          ...
  756:  jump *label468 always 0 0                                    ...
        label *label463                                              ...
  757:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  758:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  759:  op shl *tmp254 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  760:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  761:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  762:  set :findPossiblePlacement:placementMask 1                   ...
  763:  set :findPossiblePlacement:width 1                           ...
  764:  set :findPossiblePlacement:height 1                          ...
  765:  setaddr :findPossiblePlacement*retaddr *label465             ...
  766:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label465                                              ...
  767:  jump *label466 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  768:  set :tryPlaceGenerator*retval false                          ...
  769:  jump *label468 always 0 0                                    ...
        label *label466                                              ...
  770:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  771:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  772:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  773:  jump *label468 always 0 0                                    ...
        label *label468                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  774:  jump *label159 equal :tryPlaceGenerator*retval false         ...
  775:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  776:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label159                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  777:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  778:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  779:  setaddr *tmp358 *label164                                    ...
  780:  jump *label161 always 0 0                                    ...
        multilabel *label164                                         ...
  781:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  782:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  783:  setaddr *tmp358 *label165                                    ...
  784:  jump *label161 always 0 0                                    ...
        multilabel *label165                                         ...
  785:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  786:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  787:  setaddr *tmp358 *label166                                    ...
  788:  jump *label161 always 0 0                                    ...
        multilabel *label166                                         ...
  789:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  790:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  791:  setaddr *tmp358 *label167                                    ...
        label *label161                                              ...
  792:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  793:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  794:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  795:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  796:  setaddr :createCombinedMask*retaddr *label168                ...
  797:  call *label13 *invalid :createCombinedMask*retval            ...
        label *label168                                              ...
  798:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  799:  op abs *tmp179 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  800:  op greaterThan *tmp180 *tmp179 6                             ...
  801:  op abs *tmp181 :layoutThoriumDrillAtLocation:sy 0            ...
  802:  op greaterThan *tmp182 *tmp181 6                             ...
  803:  op or *tmp183 *tmp180 *tmp182                                ...
  804:  jump *label243 equal *tmp183 false                           ...
  805:  set :shiftMask*retval 0                                      ...
  806:  jump *label251 always 0 0                                    ...
        label *label243                                              ...
  807:  op mul *tmp185 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  808:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  809:  jump *label245 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  810:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = ((1 << 49) - 1) >> shift;
  811:  op and *tmp190 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  812:  op shl :shiftMask:mask *tmp190 :shiftMask:shift              ...
  813:  jump *label246 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label245                                              ...
  814:  op sub *tmp192 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  815:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label246                                              OreLocator.mnd: if shift > 0 then
  816:  jump *label249 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  817:  op shr :shiftMask:keep 0b1111111 *tmp179                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  818:  jump *label247 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  819:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label247                                              ...
  820:  op shl *tmp199 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  821:  op or :shiftMask:keep :shiftMask:keep *tmp199                ...
  822:  op shl *tmp200 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  823:  op or :shiftMask:keep :shiftMask:keep *tmp200                ...
  824:  op shl *tmp201 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  825:  op or :shiftMask:keep :shiftMask:keep *tmp201                ...
  826:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label249                                              OreLocator.mnd: if shiftX != 0 then
  827:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label251                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  828:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  829:  set .lastUnshiftedMask :layoutThoriumDrillAtLocation:terrain OreLocator.mnd: lastUnshiftedMask = terrainMask;
  830:  set .lastShiftedMask :shiftMask*retval                       OreLocator.mnd: lastShiftedMask = shiftedMask;
  831:  set .lastCombinedMask :layoutThoriumDrillAtLocation:combined OreLocator.mnd: lastCombinedMask = combinedMask;
  832:  op sub *tmp363 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  833:  op sub *tmp364 .drillY :layoutThoriumDrillAtLocation:sy      ...
  834:  set :tryPlaceGenerator:centerX *tmp363                       ...
  835:  set :tryPlaceGenerator:centerY *tmp364                       ...
  836:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  837:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  838:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  839:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  840:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  841:  set :findPossiblePlacement:width 2                           ...
  842:  set :findPossiblePlacement:height 4                          ...
  843:  setaddr :findPossiblePlacement*retaddr *label470             ...
  844:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label470                                              ...
  845:  jump *label473 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  846:  jump *label471 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  847:  set :tryPlaceGenerator*retval false                          ...
  848:  jump *label487 always 0 0                                    ...
        label *label471                                              ...
  849:  op add *tmp222 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  850:  op add .water2X *tmp222 :findPossiblePlacement:x             ...
  851:  op add *tmp224 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  852:  op add .water2Y *tmp224 :findPossiblePlacement:y             ...
  853:  op add .generatorX *tmp222 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  854:  op add *tmp228 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  855:  op add .generatorY *tmp228 :findPossiblePlacement:y          ...
  856:  op shl *tmp230 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  857:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  858:  jump *label477 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label473                                              ...
  859:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  860:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  861:  set :findPossiblePlacement:width 4                           ...
  862:  set :findPossiblePlacement:height 2                          ...
  863:  setaddr :findPossiblePlacement*retaddr *label474             ...
  864:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label474                                              ...
  865:  jump *label475 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  866:  set :tryPlaceGenerator*retval false                          ...
  867:  jump *label487 always 0 0                                    ...
        label *label475                                              ...
  868:  op add *tmp234 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  869:  op add .water2X *tmp234 :findPossiblePlacement:x             ...
  870:  op add *tmp236 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  871:  op add .water2Y *tmp236 :findPossiblePlacement:y             ...
  872:  op add *tmp238 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  873:  op add .generatorX *tmp238 :findPossiblePlacement:x          ...
  874:  op add .generatorY *tmp236 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  875:  op shl *tmp242 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  876:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label477                                              OreLocator.mnd: if shift >= 0 then
  877:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  878:  set :findPossiblePlacement:placementMask 1                   ...
  879:  set :findPossiblePlacement:width 1                           ...
  880:  set :findPossiblePlacement:height 1                          ...
  881:  setaddr :findPossiblePlacement*retaddr *label478             ...
  882:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label478                                              ...
  883:  jump *label479 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  884:  set :tryPlaceGenerator*retval false                          ...
  885:  jump *label487 always 0 0                                    ...
        label *label479                                              ...
  886:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  887:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  888:  op shl *tmp248 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  889:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  890:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  891:  set :findPossiblePlacement:placementMask 1                   ...
  892:  set :findPossiblePlacement:width 1                           ...
  893:  set :findPossiblePlacement:height 1                          ...
  894:  setaddr :findPossiblePlacement*retaddr *label481             ...
  895:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label481                                              ...
  896:  jump *label482 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  897:  set :tryPlaceGenerator*retval false                          ...
  898:  jump *label487 always 0 0                                    ...
        label *label482                                              ...
  899:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  900:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  901:  op shl *tmp254 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  902:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  903:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  904:  set :findPossiblePlacement:placementMask 1                   ...
  905:  set :findPossiblePlacement:width 1                           ...
  906:  set :findPossiblePlacement:height 1                          ...
  907:  setaddr :findPossiblePlacement*retaddr *label484             ...
  908:  call *label10 *invalid :findPossiblePlacement*retval         ...
        label *label484                                              ...
  909:  jump *label485 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  910:  set :tryPlaceGenerator*retval false                          ...
  911:  jump *label487 always 0 0                                    ...
        label *label485                                              ...
  912:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  913:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  914:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  915:  jump *label487 always 0 0                                    ...
        label *label487                                              OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  916:  jump *label171 equal :tryPlaceGenerator*retval false         ...
  917:  set :layoutThoriumDrillAtLocation*retval true                ...
  918:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label171                                              ...
  919:  multijump *tmp358 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label167                                         ...
  920:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  921:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  922:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  923:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  924:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  925:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  926:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  927:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  928:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  929:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  930:  setaddr :findDrillLocationLocal*retaddr *label174            ...
  931:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label174                                              ...
  932:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  933:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  934:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  935:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  936:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  937:  set :findDrillLocation*finished true                         ...
  938:  jump *label19 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  939:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  940:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  941:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  942:  set :findDrillLocationLocal:item @thorium                    ...
  943:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  944:  set :findDrillLocationLocal:size 3                           ...
  945:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  946:  setaddr :findDrillLocationLocal*retaddr *label176            ...
  947:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label176                                              ...
  948:  set .drillX :findDrillLocationLocal:dx                       ...
  949:  set .drillY :findDrillLocationLocal:dy                       ...
  950:  jump *label177 notEqual :findDrillLocationLocal*retval false ...
  951:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  952:  jump *label175 always 0 0                                    ...
        label *label177                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  953:  setaddr :layoutThoriumDrillAtLocation*retaddr *label179      OreLocator.mnd: layoutThoriumDrillAtLocation();
  954:  call *label14 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label179                                              ...
  955:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label175                                              ...
  956:  set :layoutThoriumDrill*finished true                        ...
  957:  jump *label19 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  958:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  959:  set .mapAction 0                                             ...
  960:  set .mapTotal 0                                              ...
  961:  set .mapProgress 0                                           ...
  962:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  963:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  964:  jump *label19 always 0 0                                     ...


Performance: parsed in 497 ms, compiled in 299 ms, optimized in 1,282 ms, run in 16 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 24: read *tmp20 processor1 "*signature":
Variable 'processor1' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
