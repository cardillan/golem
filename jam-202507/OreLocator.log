  1106 instructions before optimizations.
   108 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
    77 instructions eliminated by Dead Code Elimination (6 iterations).
C:\Home\golem\jam-202507\OreLocator.mnd:24:19 Variable 'mapProgress' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:24:32 Variable 'mapTotal' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:24:42 Variable 'mapAction' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:5 Variable 'searchFinished' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:5 Variable 'water1X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:14 Variable 'water1Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:5 Variable 'containerX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:17 Variable 'containerY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:36:5 Variable 'node2X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:36:13 Variable 'node2Y' is not used.
     2 instructions eliminated by Jump Normalization (5 iterations).
    38 instructions eliminated by Jump Optimization (5 iterations).
    51 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    23 instructions modified by Expression Optimization (2 passes, 3 iterations).
     1 instructions eliminated by If Expression Optimization (4 iterations).
   269 instructions eliminated by Data Flow Optimization (14 passes, 47 iterations).
     1 loops improved by Loop Hoisting.
     1 instructions added by Loop Optimization (3 iterations).
    11 loops improved by Loop Optimization.
   158 instructions added by Loop Unrolling (18 iterations).
     3 loops unrolled by Loop Unrolling.
   265 instructions added by Function Inlining (18 iterations).
     9 function calls inlined by Function Inlining.
    11 instructions eliminated by Jump Straightening (5 iterations).
    15 instructions updated by Jump Threading.
    15 instructions eliminated by Unreachable Code Elimination (2 iterations).
   958 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 356):
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:353:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:474:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:488:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:486:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:489:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:521:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 355):
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:353:5                          size   +17, benefit     3900.0, efficiency    229.412
  * Unroll loop at OreLocator.mnd:474:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:488:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:486:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:489:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:521:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 328):
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:353:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:488:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:521:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 327):
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:353:5                          size   +17, benefit     3900.0, efficiency    229.412 (+17 instructions)
    Unroll loop at OreLocator.mnd:488:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:521:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 310):
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:488:5                          size   +87, benefit     9100.0, efficiency    104.598 (+95 instructions)
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:521:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 215):
  * Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:521:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 214):
  * Replicate loop condition at OreLocator.mnd:45:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:521:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 213):
    Unroll iteration loop at OreLocator.mnd:610:5                size   +81, benefit       19.0, efficiency      0.235
  * Inline function 'shiftMask' defined at OreLocator.mnd:276:1  size   +28, benefit      171.0, efficiency      6.107 (+18 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:318:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:521:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:618:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 195):
    Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +147, benefit      104.0, efficiency      0.707
  * Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:521:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:616:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 163):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +251, benefit      832.0, efficiency      3.315
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +179, benefit      104.0, efficiency      0.581
  * Inline function call at OreLocator.mnd:486:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +180, benefit        4.0, efficiency      0.022
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +180, benefit      100.0, efficiency      0.556
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 131):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +215, benefit      728.0, efficiency      3.386
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +211, benefit      104.0, efficiency      0.493
  * Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +212, benefit        4.0, efficiency      0.019
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +212, benefit      100.0, efficiency      0.472
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 101):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +179, benefit      624.0, efficiency      3.486
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +241, benefit      104.0, efficiency      0.432
  * Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +242, benefit        4.0, efficiency      0.017
    Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +242, benefit      100.0, efficiency      0.413
    Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 71):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +143, benefit      520.0, efficiency      3.636
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +271, benefit      104.0, efficiency      0.384
  * Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +272, benefit        4.0, efficiency      0.015
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +272, benefit      100.0, efficiency      0.368
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 40):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size  +107, benefit      416.0, efficiency      3.888
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +302, benefit      104.0, efficiency      0.344
  * Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +303, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +303, benefit      100.0, efficiency      0.330
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 9):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +71, benefit      312.0, efficiency      4.394
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +333, benefit      104.0, efficiency      0.312
  ! Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:489:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:521:28                size  +334, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +334, benefit      100.0, efficiency      0.299
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 44):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +63, benefit      312.0, efficiency      4.952
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +310, benefit      104.0, efficiency      0.335
  * Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250 (+28 instructions)
    Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
    Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:521:28                size  +311, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +311, benefit      100.0, efficiency      0.322
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 16):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:521:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Pass 3: speed optimization selection (cost limit 16):
  ! Unroll iteration loop at OreLocator.mnd:610:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:384:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:472:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:507:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:489:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:521:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:605:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:616:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:633:12                size   +97, benefit      137.5, efficiency      1.418

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-68 instructions):
 
   133 jump *label38 equal *tmp55 false
   134 set *tmp27 false
   135 jump *label28 always
-    * set *tmp56 null
   136 jump *label39 always
   137 label *label38
-    * set *tmp56 null
   138 label *label39
   139 op sub *tmp57 :locateOreAway:x .coreX
   140 op abs *tmp58 *tmp57
 
   156 label *label42
   157 set *tmp68 null
   158 label *label43
-    * set *tmp66 *tmp68
   159 jump *label41 always
   160 label *label40
-    * set *tmp66 null
   161 label *label41
   162 op greaterThanEq *tmp69 :locateOreAway:coreDist 8
   163 jump *label44 equal *tmp69 false
 
   188 jump *label52 equal *tmp85 false
   189 set *tmp73 true
   190 jump *label48 always
-    * set *tmp86 null
   191 jump *label53 always
   192 label *label52
-    * set *tmp86 null
   193 label *label53
   194 label *label50
   195 op add :visited:i :visited:i 1
 
   218 label *label46
   219 set *tmp72 null
   220 label *label47
-    * set *tmp70 *tmp72
   221 jump *label45 always
   222 label *label44
-    * set *tmp70 null
   223 label *label45
   224 label *label30
   225 jump *label29 always
 
   235 op greaterThan *tmp93 :findDrillLocationLocal:capacity 0
   236 set :findDrillLocationLocal*retval *tmp93
   237 jump *label19 always
-    * set *tmp92 null
   238 jump *label57 always
   239 label *label56
-    * set *tmp92 null
   240 label *label57
   241 op greaterThanEq *tmp94 :findDrillLocationLocal:limit 1000
   242 jump *label58 equal *tmp94 false
   243 set *tmp96 .mapSpots
   244 op add .mapSpots .mapSpots 1
-    * set *tmp95 *tmp96
   245 jump *label59 always
   246 label *label58
-    * set *tmp95 null
   247 label *label59
   248 set :moveTo.3:x :findDrillLocationLocal:oreX
   249 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   296 op lessThanEq *tmp118 :findDrillLocationLocal:coreDist 8
   297 jump *label69 equal *tmp118 false
   298 jump *label67 always
-    * set *tmp119 null
   299 jump *label70 always
   300 label *label69
-    * set *tmp119 null
   301 label *label70
   302 op greaterThan *tmp120 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   303 jump *label71 equal *tmp120 false
 
   307 op lessThan *tmp122 :findDrillLocationLocal:limit 1000
   308 jump *label73 equal *tmp122 false
   309 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp123 :findDrillLocationLocal:score
   310 jump *label74 always
   311 label *label73
-    * set *tmp123 null
   312 label *label74
   313 op greaterThanEq *tmp124 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   314 jump *label75 equal *tmp124 false
 
   329 op add .count .count 1
   330 set *tmp133 .count
   331 write :saveLocation:y bank1 *tmp133
-    * set *tmp135 .locations
   332 op add .locations .locations 1
   333 label *label77
   334 ucontrol unbind
 
   339 label *label75
   340 set *tmp125 null
   341 label *label76
-    * set *tmp121 *tmp125
   342 jump *label72 always
   343 label *label71
-    * set *tmp121 null
   344 label *label72
   345 op greaterThan *tmp136 :findDrillLocationLocal:score :findDrillLocationLocal:best
   346 jump *label78 equal *tmp136 false
   347 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   348 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   349 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp137 :findDrillLocationLocal:best
   350 jump *label79 always
   351 label *label78
-    * set *tmp137 null
   352 label *label79
   353 op lessThanEq *tmp138 :findDrillLocationLocal:score :findDrillLocationLocal:last
   354 jump *label80 equal *tmp138 false
   355 jump *label67 always
-    * set *tmp139 null
   356 jump *label81 always
   357 label *label80
-    * set *tmp139 null
   358 label *label81
   359 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   360 op mul *tmp140 :findDrillLocationLocal:diffX 1.1
 
   393 op add .count .count 1
   394 set *tmp157 .count
   395 write :saveLocation.1:y bank1 *tmp157
-    * set *tmp159 .locations
   396 op add .locations .locations 1
   397 label *label86
-    * set *tmp149 null
   398 jump *label85 always
   399 label *label84
-    * set *tmp149 null
   400 label *label85
   401 label *label26
   402 jump *label25 always
 
   414 jump *label88 equal *tmp164 false
   415 set :shiftMask*retval 0
   416 jump *label87 always
-    * set *tmp165 null
   417 jump *label89 always
   418 label *label88
-    * set *tmp165 null
   419 label *label89
   420 op mul *tmp166 7 :shiftMask:shiftY
   421 op add *tmp167 :shiftMask:shiftX *tmp166
 
   427 op and *tmp171 :shiftMask:mask :shiftMask:clearMask
   428 op shl *tmp172 *tmp171 :shiftMask:shift
   429 set :shiftMask:mask *tmp172
-    * set *tmp169 :shiftMask:mask
   430 jump *label91 always
   431 label *label90
   432 op sub *tmp173 0 :shiftMask:shift
   433 op shr :shiftMask:mask :shiftMask:mask *tmp173
-    * set *tmp169 :shiftMask:mask
   434 label *label91
   435 op notEqual *tmp174 :shiftMask:shiftX 0
   436 jump *label92 equal *tmp174 false
 
   440 op greaterThan *tmp178 :shiftMask:shiftX 0
   441 jump *label94 equal *tmp178 false
   442 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp179 :shiftMask:keep
   443 jump *label95 always
   444 label *label94
-    * set *tmp179 null
   445 label *label95
   446 op shl *tmp180 :shiftMask:keep 7
   447 op or :shiftMask:keep :shiftMask:keep *tmp180
 
   450 op shl *tmp182 :shiftMask:keep 21
   451 op or :shiftMask:keep :shiftMask:keep *tmp182
   452 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp175 :shiftMask:mask
   453 jump *label93 always
   454 label *label92
-    * set *tmp175 null
   455 label *label93
   456 set :shiftMask*retval :shiftMask:mask
   457 jump *label87 always
 
   494 op greaterThanEq *tmp204 :createMatrixOfSize:i :createMatrixOfSize:height
   495 jump *label103 equal *tmp204 false
   496 jump *label102 always
-    * set *tmp205 null
   497 jump *label104 always
   498 label *label103
-    * set *tmp205 null
   499 label *label104
   500 op shl *tmp206 :createMatrixOfSize:matrix 7
   501 op or *tmp207 *tmp206 :createMatrixOfSize:row
 
   557 op add *tmp223 *tmp222 :findPossiblePlacement:x
   558 set :findPossiblePlacement*retval *tmp223
   559 jump *label106 always
-    * set *tmp220 null
   560 jump *label114 always
   561 label *label113
-    * set *tmp220 null
   562 label *label114
   563 op sub *tmp224 3 :findPossiblePlacement:width
   564 op greaterThan *tmp225 :findPossiblePlacement:x *tmp224
   565 jump *label115 equal *tmp225 false
   566 jump *label112 always
-    * set *tmp226 null
   567 jump *label116 always
   568 label *label115
-    * set *tmp226 null
   569 label *label116
   570 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   571 label *label111
 
   576 op greaterThan *tmp228 :findPossiblePlacement:y *tmp227
   577 jump *label117 equal *tmp228 false
   578 jump *label109 always
-    * set *tmp229 null
   579 jump *label118 always
   580 label *label117
-    * set *tmp229 null
   581 label *label118
   582 label *label108
   583 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   607 jump *label123 equal *tmp233 false
   608 set :tryPlaceGenerator*retval false
   609 jump *label119 always
-    * set *tmp234 null
   610 jump *label124 always
   611 label *label123
-    * set *tmp234 null
   612 label *label124
   613 op add *tmp235 :tryPlaceGenerator:centerX 0.5
   614 op add *tmp236 *tmp235 :tryPlaceGenerator:c
 
   624 set .generatorY *tmp242
   625 op shl *tmp243 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   626 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp243
-    * set *tmp232 :tryPlaceGenerator:terrainMask
   627 jump *label122 always
   628 label *label121
   629 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   641 jump *label126 equal *tmp245 false
   642 set :tryPlaceGenerator*retval false
   643 jump *label119 always
-    * set *tmp246 null
   644 jump *label127 always
   645 label *label126
-    * set *tmp246 null
   646 label *label127
   647 op add *tmp247 :tryPlaceGenerator:centerX 0.5
   648 op add *tmp248 *tmp247 :tryPlaceGenerator:c
 
   658 set .generatorY *tmp254
   659 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   660 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
-    * set *tmp232 :tryPlaceGenerator:terrainMask
   661 label *label122
   662 set :createFixedMatrix:row0 0b1100011
   663 set :createFixedMatrix:row1 0b1000001
 
   697 jump *label130 equal *tmp271 false
   698 set :tryPlaceGenerator*retval false
   699 jump *label119 always
-    * set *tmp272 null
   700 jump *label131 always
   701 label *label130
-    * set *tmp272 null
   702 label *label131
   703 op add *tmp273 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   704 set .panelX *tmp273
 
   721 jump *label133 equal *tmp277 false
   722 set :tryPlaceGenerator*retval false
   723 jump *label119 always
-    * set *tmp278 null
   724 jump *label134 always
   725 label *label133
-    * set *tmp278 null
   726 label *label134
   727 op add *tmp279 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   728 set .batteryX *tmp279
 
   765 jump *label138 equal *tmp303 false
   766 set :tryPlaceGenerator*retval false
   767 jump *label119 always
-    * set *tmp304 null
   768 jump *label139 always
   769 label *label138
-    * set *tmp304 null
   770 label *label139
   771 op add *tmp305 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   772 set .node2X *tmp305
 
   774 set .node2Y *tmp306
   775 op shl *tmp307 1 :tryPlaceGenerator:shift
   776 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp307
-    * set *tmp301 :tryPlaceGenerator:terrainMask
   777 jump *label136 always
   778 label *label135
-    * set *tmp301 null
   779 label *label136
   780 set :tryPlaceGenerator*retval true
   781 jump *label119 always
 
   990 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
   991 op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   992 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp382
-    * set *tmp376 :layoutThoriumDrillAtLocation:cornersMask
   993 jump *label165 always
   994 label *label164
-    * set *tmp376 null
   995 label *label165
   996 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   997 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
  1014 set .containerY *tmp389
  1015 op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
  1016 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
-    * set *tmp385 :layoutThoriumDrillAtLocation:terrainMask
  1017 jump *label168 always
  1018 label *label167
-    * set *tmp385 null
  1019 label *label168
  1020 set :createFixedMatrix.4:row0 0b1100011
  1021 set :createFixedMatrix.4:row1 0b1000001
 
  1056 jump *label171 equal *tmp407 false
  1057 set :layoutThoriumDrillAtLocation*retval false
  1058 jump *label154 always
-    * set *tmp408 null
  1059 jump *label172 always
  1060 label *label171
-    * set *tmp408 null
  1061 label *label172
  1062 op add *tmp409 .drillX :layoutThoriumDrillAtLocation:c
  1063 set .node1X *tmp409
 
  1099 jump *label176 equal *tmp424 false
  1100 set :layoutThoriumDrillAtLocation*retval true
  1101 jump *label154 always
-    * set *tmp425 null
  1102 jump *label177 always
  1103 label *label176
-    * set *tmp425 null
  1104 label *label177
  1105 set :layoutThoriumDrillAtLocation:sx 3
  1106 set :layoutThoriumDrillAtLocation:sy 3
 
  1156 jump *label188 equal *tmp434 false
  1157 set :layoutThoriumDrillAtLocation*retval true
  1158 jump *label154 always
-    * set *tmp435 null
  1159 jump *label189 always
  1160 label *label188
-    * set *tmp435 null
  1161 label *label189
  1162 label *label179
  1163 multijump *tmp426 0 0 (m:marker0)
 
  1207 jump *label194 equal *tmp436 false
  1208 set :layoutThoriumDrill*retval false
  1209 jump *label192 always
-    * set *tmp437 null
  1210 jump *label195 always
  1211 label *label194
-    * set *tmp437 null
  1212 label *label195
  1213 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)
  1214 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label196) (h:*label196)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   151 op equal *tmp67 :locateOreAway:lastY :locateOreAway:y
   152 jump *label42 equal *tmp67 false
   153 jump *label30 always
-    * set *tmp68 null
   154 jump *label43 always
   155 label *label42
-    * set *tmp68 null
   156 label *label43
   157 jump *label41 always
   158 label *label40
 
   211 label *label54
   212 set *tmp88 null
   213 label *label55
-    * set *tmp72 *tmp88
   214 jump *label47 always
   215 label *label46
-    * set *tmp72 null
   216 label *label47
   217 jump *label45 always
   218 label *label44
 
   236 label *label57
   237 op greaterThanEq *tmp94 :findDrillLocationLocal:limit 1000
   238 jump *label58 equal *tmp94 false
-    * set *tmp96 .mapSpots
   239 op add .mapSpots .mapSpots 1
   240 jump *label59 always
   241 label *label58
 
   329 ucontrol unbind
   330 set :findDrillLocationLocal*retval true
   331 jump *label19 always
-    * set *tmp125 null
   332 jump *label76 always
   333 label *label75
-    * set *tmp125 null
   334 label *label76
   335 jump *label72 always
   336 label *label71

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   206 printflush message1
   207 set *tmp27 true
   208 jump *label28 always
-    * set *tmp88 null
   209 jump *label55 always
   210 label *label54
-    * set *tmp88 null
   211 label *label55
   212 jump *label47 always
   213 label *label46

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-108 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp11 .locations
-    * set .locationsStart *tmp11
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    50 label *label21
    51 label *label20
    52 op div *tmp20 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp21 *tmp20 2
-    * set .mapTotal *tmp21
+   53 op pow .mapTotal *tmp20 2
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
 
    59 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    60 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    61 op sub *tmp22 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp23 *tmp22 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp23
-    * op min *tmp24 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp24
+   62 op mul :findDrillLocationLocal:maxDistance *tmp22 .attenuationRate
+   63 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    64 op div *tmp25 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp26 *tmp25 2
-    * set .mapTotal *tmp26
+   65 op pow .mapTotal *tmp25 2
    66 set :locateOreAway:ore :findDrillLocationLocal:item
    67 set :locateOreAway:x :findDrillLocationLocal:oreX
    68 set :locateOreAway:y :findDrillLocationLocal:oreY
    69 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp28 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp28
+   70 op mul :locateOreAway:distance 3.8197185279121366 .angle
    71 set :locateOreAway:lastX -1
    72 set :locateOreAway:lastY -1
-    * op max *tmp29 .angle @pi
-    * set .angle *tmp29
-    * op mul *tmp30 .angle .angle
-    * set .mapProgress *tmp30
+   73 op max .angle .angle @pi
+   74 op mul .mapProgress .angle .angle
    75 label *label29
    76 op lessThan *tmp31 :locateOreAway:distance :locateOreAway:distanceLimit
    77 jump *label31 equal *tmp31 false
-    * op div *tmp32 .angle @degToRad
-    * set :locateOreAway:a *tmp32
+   78 op div :locateOreAway:a .angle @degToRad
    79 op sin *tmp33 :locateOreAway:a
    80 op mul *tmp34 *tmp33 :locateOreAway:distance
    81 op add *tmp35 .coreX *tmp34
 
    84 set :limit:low 5
    85 set :limit:high *tmp36
    86 op max *tmp38 :limit:value :limit:low
-    * op min *tmp39 *tmp38 :limit:high
-    * set *tmp37 *tmp39
+   87 op min *tmp37 *tmp38 :limit:high
    88 label *label32
    89 set :locateOreAway:lx *tmp37
    90 op cos *tmp40 :locateOreAway:a
 
    95 set :limit.1:low 5
    96 set :limit.1:high *tmp43
    97 op max *tmp45 :limit.1:value :limit.1:low
-    * op min *tmp46 *tmp45 :limit.1:high
-    * set *tmp44 *tmp46
+   98 op min *tmp44 *tmp45 :limit.1:high
    99 label *label33
   100 set :locateOreAway:ly *tmp44
   101 set :moveTo.2:x :locateOreAway:lx
 
   113 label *label34
   114 op div *tmp50 3.8197185279121366 :locateOreAway:distance
   115 op add .angle .angle *tmp50
-    * op mul *tmp51 .angle .angle
-    * set .mapProgress *tmp51
-    * op mul *tmp52 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp52
+  116 op mul .mapProgress .angle .angle
+  117 op mul :locateOreAway:distance 3.8197185279121366 .angle
   118 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp53 *tmp54
   119 op equal *tmp55 *tmp53 false
   120 jump *label38 equal *tmp55 false
 
   127 op abs *tmp58 *tmp57
   128 op sub *tmp59 :locateOreAway:y .coreY
   129 op abs *tmp60 *tmp59
-    * op max *tmp61 *tmp58 *tmp60
-    * set :locateOreAway:coreDist *tmp61
+  130 op max :locateOreAway:coreDist *tmp58 *tmp60
   131 op sub *tmp62 :locateOreAway:x :locateOreAway:lx
   132 op sub *tmp63 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp64 *tmp62 *tmp63
-    * set :locateOreAway:unitDist *tmp64
+  133 op len :locateOreAway:unitDist *tmp62 *tmp63
   134 op equal *tmp65 :locateOreAway:lastX :locateOreAway:x
   135 jump *label40 equal *tmp65 false
   136 op equal *tmp67 :locateOreAway:lastY :locateOreAway:y
 
   154 set :visited:i .locationsStart
   155 label *label49
   156 jump *label51 greaterThanEq :visited:i *tmp74
-    * op mul *tmp75 4 :visited:i
-    * set :visited:index *tmp75
+  157 op mul :visited:index 4 :visited:i
   158 op add *tmp76 :visited:index 2
-    * set *tmp77 *tmp76
-    * read *tmp78 bank1 *tmp77
-    * set :visited:lx *tmp78
-    * op add *tmp79 :visited:index 3
-    * set *tmp80 *tmp79
-    * read *tmp81 bank1 *tmp80
-    * set :visited:ly *tmp81
+  159 read :visited:lx bank1 *tmp76
+  160 op add *tmp80 :visited:index 3
+  161 read :visited:ly bank1 *tmp80
   162 op sub *tmp82 :visited:x :visited:lx
   163 op sub *tmp83 :visited:y :visited:ly
   164 op len *tmp84 *tmp82 *tmp83
 
   181 jump *label54 equal *tmp87 false
   182 op div *tmp89 7.639437055824273 :locateOreAway:distance
   183 op add .angle .angle *tmp89
-    * op mul *tmp90 .angle .angle
-    * set .mapProgress *tmp90
+  184 op mul .mapProgress .angle .angle
   185 printflush message1
   186 set *tmp27 true
   187 jump *label28 always
 
   205 set :findDrillLocationLocal:oreY :locateOreAway:y
   206 op equal *tmp91 *tmp27 false
   207 jump *label56 equal *tmp91 false
-    * op greaterThan *tmp93 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp93
+  208 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   209 jump *label19 always
   210 jump *label57 always
   211 label *label56
 
   248 wait 1e-15
   249 read *tmp109 processor1 ":findBestPosition*finished"
   250 jump *label68 equal *tmp109 false
-    * read *tmp107 processor1 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp107
-    * read *tmp108 processor1 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp108
-    * read *tmp110 processor1 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp110
-    * op add *tmp111 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:newX *tmp111
-    * op add *tmp112 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:newY *tmp112
+  251 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
+  252 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
+  253 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
+  254 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  255 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   256 op sub *tmp113 :findDrillLocationLocal:newX .coreX
   257 op abs *tmp114 *tmp113
   258 op sub *tmp115 :findDrillLocationLocal:newY .coreY
   259 op abs *tmp116 *tmp115
-    * op max *tmp117 *tmp114 *tmp116
-    * set :findDrillLocationLocal:coreDist *tmp117
+  260 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
   261 op lessThanEq *tmp118 :findDrillLocationLocal:coreDist 8
   262 jump *label69 equal *tmp118 false
   263 jump *label67 always
 
   286 sensor *tmp128 :saveLocation:item @id
   287 write *tmp128 bank1 *tmp126
   288 op add .count .count 1
-    * set *tmp129 .count
-    * write :saveLocation:value bank1 *tmp129
+  289 write :saveLocation:value bank1 .count
   290 op add .count .count 1
-    * set *tmp131 .count
-    * write :saveLocation:x bank1 *tmp131
+  291 write :saveLocation:x bank1 .count
   292 op add .count .count 1
-    * set *tmp133 .count
-    * write :saveLocation:y bank1 *tmp133
+  293 write :saveLocation:y bank1 .count
   294 op add .locations .locations 1
   295 label *label77
   296 ucontrol unbind
 
   317 label *label80
   318 label *label81
   319 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp140 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp140
+  320 op mul :round:x :findDrillLocationLocal:diffX 1.1
   321 op add *tmp142 :round:x 0.5
-    * op floor *tmp143 *tmp142
-    * set *tmp141 *tmp143
+  322 op floor *tmp141 *tmp142
   323 label *label82
   324 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp141
-    * op mul *tmp144 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp144
+  325 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   326 op add *tmp146 :round.1:x 0.5
-    * op floor *tmp147 *tmp146
-    * set *tmp145 *tmp147
+  327 op floor *tmp145 *tmp146
   328 label *label83
   329 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp145
   330 label *label66
 
   341 sensor *tmp152 :saveLocation.1:item @id
   342 write *tmp152 bank1 *tmp150
   343 op add .count .count 1
-    * set *tmp153 .count
-    * write :saveLocation.1:value bank1 *tmp153
+  344 write :saveLocation.1:value bank1 .count
   345 op add .count .count 1
-    * set *tmp155 .count
-    * write :saveLocation.1:x bank1 *tmp155
+  346 write :saveLocation.1:x bank1 .count
   347 op add .count .count 1
-    * set *tmp157 .count
-    * write :saveLocation.1:y bank1 *tmp157
+  348 write :saveLocation.1:y bank1 .count
   349 op add .locations .locations 1
   350 label *label86
   351 jump *label85 always
 
   371 label *label88
   372 label *label89
   373 op mul *tmp166 7 :shiftMask:shiftY
-    * op add *tmp167 :shiftMask:shiftX *tmp166
-    * set :shiftMask:shift *tmp167
+  374 op add :shiftMask:shift :shiftMask:shiftX *tmp166
   375 op greaterThan *tmp168 :shiftMask:shift 0
   376 jump *label90 equal *tmp168 false
-    * op shr *tmp170 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp170
+  377 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   378 op and *tmp171 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp172 *tmp171 :shiftMask:shift
-    * set :shiftMask:mask *tmp172
+  379 op shl :shiftMask:mask *tmp171 :shiftMask:shift
   380 jump *label91 always
   381 label *label90
   382 op sub *tmp173 0 :shiftMask:shift
 
   385 op notEqual *tmp174 :shiftMask:shiftX 0
   386 jump *label92 equal *tmp174 false
   387 op abs *tmp176 :shiftMask:shiftX
-    * op shr *tmp177 0b1111111 *tmp176
-    * set :shiftMask:keep *tmp177
+  388 op shr :shiftMask:keep 0b1111111 *tmp176
   389 op greaterThan *tmp178 :shiftMask:shiftX 0
   390 jump *label94 equal *tmp178 false
   391 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   414 op idiv *tmp185 *tmp184 2
   415 op sub *tmp186 :excludeArea:maskX :excludeArea:areaX
   416 op abs *tmp187 *tmp186
-    * op sub *tmp188 *tmp185 *tmp187
-    * set :excludeArea:overlapX *tmp188
+  417 op sub :excludeArea:overlapX *tmp185 *tmp187
   418 op add *tmp189 :excludeArea:areaHeight 7
   419 op add *tmp190 *tmp189 1
   420 op idiv *tmp191 *tmp190 2
   421 op sub *tmp192 :excludeArea:maskY :excludeArea:areaY
   422 op abs *tmp193 *tmp192
-    * op sub *tmp194 *tmp191 *tmp193
-    * set :excludeArea:overlapY *tmp194
+  423 op sub :excludeArea:overlapY *tmp191 *tmp193
   424 op greaterThan *tmp195 :excludeArea:overlapX 0
   425 op greaterThan *tmp196 :excludeArea:overlapY 0
   426 op land *tmp197 *tmp195 *tmp196
   427 jump *label97 equal *tmp197 false
-    * op min *tmp199 7 :excludeArea:overlapX
-    * set :excludeArea:blockSizeX *tmp199
-    * op min *tmp200 7 :excludeArea:overlapY
-    * set :excludeArea:blockSizeY *tmp200
+  428 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
+  429 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   430 set :createMatrixOfSize:width :excludeArea:blockSizeX
   431 set :createMatrixOfSize:height :excludeArea:blockSizeY
   432 op shl *tmp202 1 :createMatrixOfSize:width
-    * op sub *tmp203 *tmp202 1
-    * set :createMatrixOfSize:row *tmp203
+  433 op sub :createMatrixOfSize:row *tmp202 1
   434 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   435 set :createMatrixOfSize:i 1
   436 label *label100
 
   442 label *label103
   443 label *label104
   444 op shl *tmp206 :createMatrixOfSize:matrix 7
-    * op or *tmp207 *tmp206 :createMatrixOfSize:row
-    * set :createMatrixOfSize:matrix *tmp207
+  445 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   446 label *label101
   447 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   448 jump *label100 always
 
   454 set :excludeArea:blocked *tmp201
   455 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
   456 op sub *tmp209 7 :excludeArea:blockSizeX
-    * op mul *tmp210 *tmp208 *tmp209
-    * set :excludeArea:shiftX *tmp210
+  457 op mul :excludeArea:shiftX *tmp208 *tmp209
   458 op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY
   459 op sub *tmp212 7 :excludeArea:blockSizeY
-    * op mul *tmp213 *tmp211 *tmp212
-    * set :excludeArea:shiftY *tmp213
+  460 op mul :excludeArea:shiftY *tmp211 *tmp212
   461 set :shiftMask:mask :excludeArea:blocked
   462 set :shiftMask:shiftX :excludeArea:shiftX
   463 set :shiftMask:shiftY :excludeArea:shiftY
 
   465 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   466 label *label105
   467 set :excludeArea:shifted :shiftMask*retval
-    * op or *tmp214 :excludeArea:mask :excludeArea:shifted
-    * set :excludeArea*retval *tmp214
+  468 op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
   469 jump *label96 always
   470 set *tmp198 null
   471 jump *label98 always
 
   484 jump *label109 greaterThan :findPossiblePlacement:y 3
   485 op add *tmp215 :findPossiblePlacement:y 3
   486 op mul *tmp216 7 *tmp215
-    * op shl *tmp217 :findPossiblePlacement:placementMask *tmp216
-    * set :findPossiblePlacement:mask *tmp217
+  487 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp216
   488 set :findPossiblePlacement:x -3
   489 label *label110
   490 jump *label112 greaterThan :findPossiblePlacement:x 3
 
   493 jump *label113 equal *tmp219 false
   494 op mul *tmp221 :findPossiblePlacement:y 7
   495 op add *tmp222 24 *tmp221
-    * op add *tmp223 *tmp222 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp223
+  496 op add :findPossiblePlacement*retval *tmp222 :findPossiblePlacement:x
   497 jump *label106 always
   498 jump *label114 always
   499 label *label113
 
   537 label *label120
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp230 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp230
+  540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   541 op greaterThanEq *tmp231 :tryPlaceGenerator:shift 0
   542 jump *label121 equal *tmp231 false
   543 op lessThan *tmp233 :tryPlaceGenerator:shift 0
 
   548 label *label123
   549 label *label124
   550 op add *tmp235 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp236 *tmp235 :tryPlaceGenerator:c
-    * set .water2X *tmp236
+  551 op add .water2X *tmp235 :tryPlaceGenerator:c
   552 op add *tmp237 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp238 *tmp237 :tryPlaceGenerator:r
-    * set .water2Y *tmp238
+  553 op add .water2Y *tmp237 :tryPlaceGenerator:r
   554 op add *tmp239 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp240 *tmp239 :tryPlaceGenerator:c
-    * set .generatorX *tmp240
+  555 op add .generatorX *tmp239 :tryPlaceGenerator:c
   556 op add *tmp241 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp242 *tmp241 :tryPlaceGenerator:r
-    * set .generatorY *tmp242
+  557 op add .generatorY *tmp241 :tryPlaceGenerator:r
   558 op shl *tmp243 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   559 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp243
   560 jump *label122 always
 
   568 label *label125
   569 set :tryPlaceGenerator:c :findPossiblePlacement:x
   570 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp244 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp244
+  571 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   572 op lessThan *tmp245 :tryPlaceGenerator:shift 0
   573 jump *label126 equal *tmp245 false
   574 set :tryPlaceGenerator*retval false
 
   577 label *label126
   578 label *label127
   579 op add *tmp247 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp248 *tmp247 :tryPlaceGenerator:c
-    * set .water2X *tmp248
+  580 op add .water2X *tmp247 :tryPlaceGenerator:c
   581 op add *tmp249 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp250 *tmp249 :tryPlaceGenerator:r
-    * set .water2Y *tmp250
+  582 op add .water2Y *tmp249 :tryPlaceGenerator:r
   583 op add *tmp251 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp252 *tmp251 :tryPlaceGenerator:c
-    * set .generatorX *tmp252
+  584 op add .generatorX *tmp251 :tryPlaceGenerator:c
   585 op add *tmp253 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp254 *tmp253 :tryPlaceGenerator:r
-    * set .generatorY *tmp254
+  586 op add .generatorY *tmp253 :tryPlaceGenerator:r
   587 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   588 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
   589 label *label122
 
   606 op shl *tmp266 :createFixedMatrix:row5 35
   607 op or *tmp267 *tmp265 *tmp266
   608 op shl *tmp268 :createFixedMatrix:row6 42
-    * op or *tmp269 *tmp267 *tmp268
-    * set *tmp256 *tmp269
+  609 op or *tmp256 *tmp267 *tmp268
   610 label *label128
   611 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   612 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   618 label *label129
   619 set :tryPlaceGenerator:c :findPossiblePlacement:x
   620 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp270 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp270
+  621 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   622 op lessThan *tmp271 :tryPlaceGenerator:shift 0
   623 jump *label130 equal *tmp271 false
   624 set :tryPlaceGenerator*retval false
 
   626 jump *label131 always
   627 label *label130
   628 label *label131
-    * op add *tmp273 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp273
-    * op add *tmp274 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp274
+  629 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  630 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   631 op shl *tmp275 1 :tryPlaceGenerator:shift
   632 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp275
   633 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   639 label *label132
   640 set :tryPlaceGenerator:c :findPossiblePlacement:x
   641 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp276 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp276
+  642 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   643 op lessThan *tmp277 :tryPlaceGenerator:shift 0
   644 jump *label133 equal *tmp277 false
   645 set :tryPlaceGenerator*retval false
 
   647 jump *label134 always
   648 label *label133
   649 label *label134
-    * op add *tmp279 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp279
-    * op add *tmp280 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp280
+  650 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  651 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   652 op shl *tmp281 1 :tryPlaceGenerator:shift
   653 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp281
   654 op sub *tmp282 .water2X .node1X
 
   680 label *label137
   681 set :tryPlaceGenerator:c :findPossiblePlacement:x
   682 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp302 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp302
+  683 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   684 op lessThan *tmp303 :tryPlaceGenerator:shift 0
   685 jump *label138 equal *tmp303 false
   686 set :tryPlaceGenerator*retval false
 
   688 jump *label139 always
   689 label *label138
   690 label *label139
-    * op add *tmp305 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .node2X *tmp305
-    * op add *tmp306 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .node2Y *tmp306
+  691 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  692 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   693 op shl *tmp307 1 :tryPlaceGenerator:shift
   694 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp307
   695 jump *label136 always
 
   709 op shl *tmp308 :createBlockMaskRow:result 1
   710 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
   711 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * op or *tmp313 *tmp308 *tmp310
-    * set :createBlockMaskRow:result *tmp313
+  712 op or :createBlockMaskRow:result *tmp308 *tmp310
   713 label *label142
   714 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   715 jump *label141 always
 
   735 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   736 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   737 label *label146
-    * set *tmp319 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp319
+  738 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   739 op add *tmp320 :createAdjacentMask:y 3
   740 set :createBlockMaskRow:x :createAdjacentMask:x
   741 set :createBlockMaskRow:y *tmp320
   742 setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
   743 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
   744 label *label147
-    * set *tmp321 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp321
+  745 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   746 set :createAdjacentMask:r 2
   747 label *label148
   748 jump *label150 lessThan :createAdjacentMask:r -4
 
   752 setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
   753 call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
   754 label *label151
-    * set *tmp323 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp323
+  755 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   756 op shl *tmp324 :createAdjacentMask:row1 1
   757 op or *tmp325 :createAdjacentMask:row2 *tmp324
   758 op shr *tmp326 :createAdjacentMask:row1 1
   759 op or *tmp327 *tmp325 *tmp326
-    * op or *tmp328 *tmp327 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp328
+  760 op or :createAdjacentMask:mask *tmp327 :createAdjacentMask:row0
   761 op shl *tmp329 :createAdjacentMask:result 7
   762 op and *tmp330 :createAdjacentMask:mask 0xFE
-    * op or *tmp331 *tmp329 *tmp330
-    * set :createAdjacentMask:result *tmp331
+  763 op or :createAdjacentMask:result *tmp329 *tmp330
   764 set :createAdjacentMask:row2 :createAdjacentMask:row1
   765 set :createAdjacentMask:row1 :createAdjacentMask:row0
   766 label *label149
   767 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   768 jump *label148 always
   769 label *label150
-    * op shr *tmp332 :createAdjacentMask:result 1
-    * set *tmp317 *tmp332
+  770 op shr *tmp317 :createAdjacentMask:result 1
   771 label *label145
   772 set :createCombinedMask:adjacentMask *tmp317
   773 label *label152
   774 wait 1e-15
   775 read *tmp333 processor1 ":createTerrainMask*finished"
   776 jump *label152 equal *tmp333 false
-    * read *tmp334 processor1 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp334
-    * op or *tmp335 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :excludeArea:mask *tmp335
+  777 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
+  778 op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   779 set :excludeArea:maskX :createCombinedMask:x
   780 set :excludeArea:maskY :createCombinedMask:y
   781 set :excludeArea:areaX .coreX
 
   818 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   819 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   820 label *label159
-    * set *tmp339 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp339
+  821 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   822 set :createFixedMatrix.1:row0 0b0000000
   823 set :createFixedMatrix.1:row1 0b0000000
   824 set :createFixedMatrix.1:row2 0b0011100
 
   838 op shl *tmp350 :createFixedMatrix.1:row5 35
   839 op or *tmp351 *tmp349 *tmp350
   840 op shl *tmp352 :createFixedMatrix.1:row6 42
-    * op or *tmp353 *tmp351 *tmp352
-    * set *tmp340 *tmp353
+  841 op or *tmp340 *tmp351 *tmp352
   842 label *label160
-    * op or *tmp354 :layoutThoriumDrillAtLocation:plainTerrainMask *tmp340
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp354
+  843 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp340
   844 set :createFixedMatrix.2:row0 0b1000001
   845 set :createFixedMatrix.2:row1 0b0000000
   846 set :createFixedMatrix.2:row2 0b0011100
 
   860 op shl *tmp365 :createFixedMatrix.2:row5 35
   861 op or *tmp366 *tmp364 *tmp365
   862 op shl *tmp367 :createFixedMatrix.2:row6 42
-    * op or *tmp368 *tmp366 *tmp367
-    * set *tmp355 *tmp368
+  863 op or *tmp355 *tmp366 *tmp367
   864 label *label161
-    * op or *tmp369 :layoutThoriumDrillAtLocation:terrainMask *tmp355
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp369
+  865 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp355
   866 set :createFixedMatrix.3:row0 0b11
   867 set :createFixedMatrix.3:row1 0b11
   868 op shl *tmp371 :createFixedMatrix.3:row0 0
   869 op shl *tmp372 :createFixedMatrix.3:row1 7
-    * op or *tmp373 *tmp371 *tmp372
-    * set *tmp370 *tmp373
+  870 op or *tmp370 *tmp371 *tmp372
   871 label *label162
   872 set :layoutThoriumDrillAtLocation:mask2x2 *tmp370
   873 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   879 label *label163
   880 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   881 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp374 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp374
+  882 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   883 op greaterThanEq *tmp375 :layoutThoriumDrillAtLocation:shift 0
   884 jump *label164 equal *tmp375 false
   885 op add *tmp377 .drillX 0.5
-    * op add *tmp378 *tmp377 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp378
+  886 op add .water1X *tmp377 :layoutThoriumDrillAtLocation:c
   887 op add *tmp379 .drillY 0.5
-    * op add *tmp380 *tmp379 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp380
+  888 op add .water1Y *tmp379 :layoutThoriumDrillAtLocation:r
   889 op shl *tmp381 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   890 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
   891 op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   902 label *label166
   903 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   904 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp383 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp383
+  905 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   906 op greaterThanEq *tmp384 :layoutThoriumDrillAtLocation:shift 0
   907 jump *label167 equal *tmp384 false
   908 op add *tmp386 .drillX 0.5
-    * op add *tmp387 *tmp386 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp387
+  909 op add .containerX *tmp386 :layoutThoriumDrillAtLocation:c
   910 op add *tmp388 .drillY 0.5
-    * op add *tmp389 *tmp388 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp389
+  911 op add .containerY *tmp388 :layoutThoriumDrillAtLocation:r
   912 op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   913 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
   914 jump *label168 always
 
   933 op shl *tmp401 :createFixedMatrix.4:row5 35
   934 op or *tmp402 *tmp400 *tmp401
   935 op shl *tmp403 :createFixedMatrix.4:row6 42
-    * op or *tmp404 *tmp402 *tmp403
-    * set *tmp391 *tmp404
+  936 op or *tmp391 *tmp402 *tmp403
   937 label *label169
-    * op or *tmp405 :layoutThoriumDrillAtLocation:terrainMask *tmp391
-    * set :layoutThoriumDrillAtLocation:nodeMask *tmp405
+  938 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp391
   939 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   940 set :findPossiblePlacement:placementMask 1
   941 set :findPossiblePlacement:width 1
 
   945 label *label170
   946 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   947 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp406 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp406
+  948 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   949 op lessThan *tmp407 :layoutThoriumDrillAtLocation:shift 0
   950 jump *label171 equal *tmp407 false
   951 set :layoutThoriumDrillAtLocation*retval false
 
   953 jump *label172 always
   954 label *label171
   955 label *label172
-    * op add *tmp409 .drillX :layoutThoriumDrillAtLocation:c
-    * set .node1X *tmp409
-    * op add *tmp410 .drillY :layoutThoriumDrillAtLocation:r
-    * set .node1Y *tmp410
+  956 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
+  957 op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
   958 op shl *tmp411 1 :layoutThoriumDrillAtLocation:shift
   959 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
   960 set :createFixedMatrix.5:row0 0b1111
   961 set :createFixedMatrix.5:row1 0b1111
   962 op shl *tmp413 :createFixedMatrix.5:row0 0
   963 op shl *tmp414 :createFixedMatrix.5:row1 7
-    * op or *tmp415 *tmp413 *tmp414
-    * set *tmp412 *tmp415
+  964 op or *tmp412 *tmp413 *tmp414
   965 label *label173
   966 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp412
   967 set :createFixedMatrix.6:row0 0b11
 
   974 op shl *tmp420 :createFixedMatrix.6:row2 14
   975 op or *tmp421 *tmp419 *tmp420
   976 op shl *tmp422 :createFixedMatrix.6:row3 21
-    * op or *tmp423 *tmp421 *tmp422
-    * set *tmp416 *tmp423
+  977 op or *tmp416 *tmp421 *tmp422
   978 label *label174
   979 set :layoutThoriumDrillAtLocation:generatorVertical *tmp416
   980 set :tryPlaceGenerator:centerX .drillX
 
   985 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   986 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   987 label *label175
-    * set *tmp424 :tryPlaceGenerator*retval
-    * jump *label176 equal *tmp424 false
+  988 jump *label176 equal :tryPlaceGenerator*retval false
   989 set :layoutThoriumDrillAtLocation*retval true
   990 jump *label154 always
   991 jump *label177 always
 
  1010 set :layoutThoriumDrillAtLocation:sy -3
  1011 setaddr *tmp426 *label184
  1012 label *label178
-    * op sub *tmp427 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp427
-    * op sub *tmp428 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp428
+ 1013 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+ 1014 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
  1015 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
  1016 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
  1017 setaddr :createCombinedMask*retaddr *label185 (h:*label185)
  1018 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
  1019 label *label185
-    * set *tmp429 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp429
+ 1020 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
  1021 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
  1022 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
  1023 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
  1024 setaddr :shiftMask*retaddr *label186 (h:*label186)
  1025 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
  1026 label *label186
-    * set *tmp430 :shiftMask*retval
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp430
-    * op or *tmp431 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp431
+ 1027 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
+ 1028 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
  1029 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
  1030 op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy
  1031 set :tryPlaceGenerator:centerX *tmp432
 
  1036 setaddr :tryPlaceGenerator*retaddr *label187 (h:*label187)
  1037 call *label12 *invalid :tryPlaceGenerator*retval (m:*label187) (h:*label187)
  1038 label *label187
-    * set *tmp434 :tryPlaceGenerator*retval
-    * jump *label188 equal *tmp434 false
+ 1039 jump *label188 equal :tryPlaceGenerator*retval false
  1040 set :layoutThoriumDrillAtLocation*retval true
  1041 jump *label154 always
  1042 jump *label189 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
-    * jump *label27 equal true false
    57 set :findDrillLocationLocal:best -1
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   235 label *label60
   236 set :findDrillLocationLocal:last 0
   237 label *label65
-    * jump *label67 equal true false
   238 write @unit processor1 ":findBestPosition:unit"
   239 write :findDrillLocationLocal:oreX processor1 ":findBestPosition:x"
   240 write :findDrillLocationLocal:oreY processor1 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-38 instructions):
 
    40 set :moveTo.1:radius 6
    41 label *label22
    42 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp17
-    * op equal *tmp18 *tmp17 false
-    * jump *label24 equal *tmp18 false
+   43 jump *label24 notEqual *tmp17 false
    44 op sub *tmp19 :moveTo.1:radius 0.5
    45 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp19
    46 label *label23
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * op lessThan *tmp31 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label31 equal *tmp31 false
+   74 jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp33 :locateOreAway:a
    77 op mul *tmp34 *tmp33 :locateOreAway:distance
 
   100 set :moveTo.2:radius 5
   101 label *label35
   102 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp47
-    * op equal *tmp48 *tmp47 false
-    * jump *label37 equal *tmp48 false
+  103 jump *label37 notEqual *tmp47 false
   104 op sub *tmp49 :moveTo.2:radius 0.5
   105 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp49
   106 label *label36
 
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
   114 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp53 *tmp54
-    * op equal *tmp55 *tmp53 false
-    * jump *label38 equal *tmp55 false
+  115 jump *label38 notEqual *tmp53 false
   116 set *tmp27 false
   117 jump *label28 always
   118 jump *label39 always
 
   126 op sub *tmp62 :locateOreAway:x :locateOreAway:lx
   127 op sub *tmp63 :locateOreAway:y :locateOreAway:ly
   128 op len :locateOreAway:unitDist *tmp62 *tmp63
-    * op equal *tmp65 :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 equal *tmp65 false
-    * op equal *tmp67 :locateOreAway:lastY :locateOreAway:y
-    * jump *label42 equal *tmp67 false
+  129 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
+  130 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   131 jump *label30 always
   132 jump *label43 always
   133 label *label42
 
   135 jump *label41 always
   136 label *label40
   137 label *label41
-    * op greaterThanEq *tmp69 :locateOreAway:coreDist 8
-    * jump *label44 equal *tmp69 false
-    * op lessThan *tmp71 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label46 equal *tmp71 false
+  138 jump *label44 lessThan :locateOreAway:coreDist 8
+  139 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   140 set :locateOreAway:lastX :locateOreAway:x
   141 set :locateOreAway:lastY :locateOreAway:y
   142 set :visited:x :locateOreAway:x
 
   153 op sub *tmp82 :visited:x :visited:lx
   154 op sub *tmp83 :visited:y :visited:ly
   155 op len *tmp84 *tmp82 *tmp83
-    * op lessThan *tmp85 *tmp84 7
-    * jump *label52 equal *tmp85 false
+  156 jump *label52 greaterThanEq *tmp84 7
   157 set *tmp73 true
   158 jump *label48 always
   159 jump *label53 always
 
   167 jump *label48 always
   168 set *tmp73 null
   169 label *label48
-    * op equal *tmp87 *tmp73 false
-    * jump *label54 equal *tmp87 false
+  170 jump *label54 notEqual *tmp73 false
   171 op div *tmp89 7.639437055824273 :locateOreAway:distance
   172 op add .angle .angle *tmp89
   173 op mul .mapProgress .angle .angle
 
   192 label *label28
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp91 *tmp27 false
-    * jump *label56 equal *tmp91 false
+  195 jump *label56 notEqual *tmp27 false
   196 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   197 jump *label19 always
   198 jump *label57 always
   199 label *label56
   200 label *label57
-    * op greaterThanEq *tmp94 :findDrillLocationLocal:limit 1000
-    * jump *label58 equal *tmp94 false
+  201 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   202 op add .mapSpots .mapSpots 1
   203 jump *label59 always
   204 label *label58
 
   212 set :moveTo.4:radius 6
   213 label *label62
   214 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp99
-    * op equal *tmp100 *tmp99 false
-    * jump *label64 equal *tmp100 false
+  215 jump *label64 notEqual *tmp99 false
   216 op sub *tmp101 :moveTo.4:radius 0.5
   217 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp101
   218 label *label63
 
   243 op sub *tmp115 :findDrillLocationLocal:newY .coreY
   244 op abs *tmp116 *tmp115
   245 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
-    * op lessThanEq *tmp118 :findDrillLocationLocal:coreDist 8
-    * jump *label69 equal *tmp118 false
+  246 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   247 jump *label67 always
   248 jump *label70 always
   249 label *label69
   250 label *label70
-    * op greaterThan *tmp120 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label71 equal *tmp120 false
+  251 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   252 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   253 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   254 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp122 :findDrillLocationLocal:limit 1000
-    * jump *label73 equal *tmp122 false
+  255 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   256 set .mapSpots :findDrillLocationLocal:score
   257 jump *label74 always
   258 label *label73
   259 label *label74
-    * op greaterThanEq *tmp124 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label75 equal *tmp124 false
+  260 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   261 set :saveLocation:item :findDrillLocationLocal:item
   262 set :saveLocation:value :findDrillLocationLocal:score
   263 set :saveLocation:x :findDrillLocationLocal:dx
 
   283 jump *label72 always
   284 label *label71
   285 label *label72
-    * op greaterThan *tmp136 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label78 equal *tmp136 false
+  286 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   287 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   288 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   289 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   290 jump *label79 always
   291 label *label78
   292 label *label79
-    * op lessThanEq *tmp138 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label80 equal *tmp138 false
+  293 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   294 jump *label67 always
   295 jump *label81 always
   296 label *label80
 
   309 label *label66
   310 jump *label65 always
   311 label *label67
-    * op greaterThanEq *tmp148 :findDrillLocationLocal:best 0
-    * jump *label84 equal *tmp148 false
+  312 jump *label84 lessThan :findDrillLocationLocal:best 0
   313 set :saveLocation.1:item :findDrillLocationLocal:item
   314 set :saveLocation.1:value :findDrillLocationLocal:best
   315 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   350 label *label89
   351 op mul *tmp166 7 :shiftMask:shiftY
   352 op add :shiftMask:shift :shiftMask:shiftX *tmp166
-    * op greaterThan *tmp168 :shiftMask:shift 0
-    * jump *label90 equal *tmp168 false
+  353 jump *label90 lessThanEq :shiftMask:shift 0
   354 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   355 op and *tmp171 :shiftMask:mask :shiftMask:clearMask
   356 op shl :shiftMask:mask *tmp171 :shiftMask:shift
 
   359 op sub *tmp173 0 :shiftMask:shift
   360 op shr :shiftMask:mask :shiftMask:mask *tmp173
   361 label *label91
-    * op notEqual *tmp174 :shiftMask:shiftX 0
-    * jump *label92 equal *tmp174 false
+  362 jump *label92 equal :shiftMask:shiftX 0
   363 op abs *tmp176 :shiftMask:shiftX
   364 op shr :shiftMask:keep 0b1111111 *tmp176
-    * op greaterThan *tmp178 :shiftMask:shiftX 0
-    * jump *label94 equal *tmp178 false
+  365 jump *label94 lessThanEq :shiftMask:shiftX 0
   366 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   367 jump *label95 always
   368 label *label94
 
   410 set :createMatrixOfSize:i 1
   411 label *label100
   412 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * op greaterThanEq *tmp204 :createMatrixOfSize:i :createMatrixOfSize:height
-    * jump *label103 equal *tmp204 false
+  413 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   414 jump *label102 always
   415 jump *label104 always
   416 label *label103
 
   463 label *label110
   464 jump *label112 greaterThan :findPossiblePlacement:x 3
   465 op and *tmp218 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp219 *tmp218 0
-    * jump *label113 equal *tmp219 false
+  466 jump *label113 notEqual *tmp218 0
   467 op mul *tmp221 :findPossiblePlacement:y 7
   468 op add *tmp222 24 *tmp221
   469 op add :findPossiblePlacement*retval *tmp222 :findPossiblePlacement:x
 
   472 label *label113
   473 label *label114
   474 op sub *tmp224 3 :findPossiblePlacement:width
-    * op greaterThan *tmp225 :findPossiblePlacement:x *tmp224
-    * jump *label115 equal *tmp225 false
+  475 jump *label115 lessThanEq :findPossiblePlacement:x *tmp224
   476 jump *label112 always
   477 jump *label116 always
   478 label *label115
 
   483 jump *label110 always
   484 label *label112
   485 op sub *tmp227 3 :findPossiblePlacement:height
-    * op greaterThan *tmp228 :findPossiblePlacement:y *tmp227
-    * jump *label117 equal *tmp228 false
+  486 jump *label117 lessThanEq :findPossiblePlacement:y *tmp227
   487 jump *label109 always
   488 jump *label118 always
   489 label *label117
 
   509 set :tryPlaceGenerator:c :findPossiblePlacement:x
   510 set :tryPlaceGenerator:r :findPossiblePlacement:y
   511 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp231 :tryPlaceGenerator:shift 0
-    * jump *label121 equal *tmp231 false
-    * op lessThan *tmp233 :tryPlaceGenerator:shift 0
-    * jump *label123 equal *tmp233 false
+  512 jump *label121 lessThan :tryPlaceGenerator:shift 0
+  513 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   514 set :tryPlaceGenerator*retval false
   515 jump *label119 always
   516 jump *label124 always
 
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
   540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp245 :tryPlaceGenerator:shift 0
-    * jump *label126 equal *tmp245 false
+  541 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   542 set :tryPlaceGenerator*retval false
   543 jump *label119 always
   544 jump *label127 always
 
   587 set :tryPlaceGenerator:c :findPossiblePlacement:x
   588 set :tryPlaceGenerator:r :findPossiblePlacement:y
   589 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp271 :tryPlaceGenerator:shift 0
-    * jump *label130 equal *tmp271 false
+  590 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   591 set :tryPlaceGenerator*retval false
   592 jump *label119 always
   593 jump *label131 always
 
   607 set :tryPlaceGenerator:c :findPossiblePlacement:x
   608 set :tryPlaceGenerator:r :findPossiblePlacement:y
   609 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp277 :tryPlaceGenerator:shift 0
-    * jump *label133 equal *tmp277 false
+  610 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   611 set :tryPlaceGenerator*retval false
   612 jump *label119 always
   613 jump *label134 always
 
   647 set :tryPlaceGenerator:c :findPossiblePlacement:x
   648 set :tryPlaceGenerator:r :findPossiblePlacement:y
   649 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp303 :tryPlaceGenerator:shift 0
-    * jump *label138 equal *tmp303 false
+  650 jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
   651 set :tryPlaceGenerator*retval false
   652 jump *label119 always
   653 jump *label139 always
 
   770 set :moveTo.5:radius 1
   771 label *label156
   772 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp336
-    * op equal *tmp337 *tmp336 false
-    * jump *label158 equal *tmp337 false
+  773 jump *label158 notEqual *tmp336 false
   774 op sub *tmp338 :moveTo.5:radius 0.5
   775 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp338
   776 label *label157
 
   844 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   845 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   846 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp375 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label164 equal *tmp375 false
+  847 jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
   848 op add *tmp377 .drillX 0.5
   849 op add .water1X *tmp377 :layoutThoriumDrillAtLocation:c
   850 op add *tmp379 .drillY 0.5
 
   866 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   867 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   868 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp384 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label167 equal *tmp384 false
+  869 jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
   870 op add *tmp386 .drillX 0.5
   871 op add .containerX *tmp386 :layoutThoriumDrillAtLocation:c
   872 op add *tmp388 .drillY 0.5
 
   908 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   909 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   910 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op lessThan *tmp407 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label171 equal *tmp407 false
+  911 jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   912 set :layoutThoriumDrillAtLocation*retval false
   913 jump *label154 always
   914 jump *label172 always
 
  1047 label *label193
  1048 set .drillX :findDrillLocationLocal:dx
  1049 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp436 :findDrillLocationLocal*retval false
-    * jump *label194 equal *tmp436 false
+ 1050 jump *label194 notEqual :findDrillLocationLocal*retval false
  1051 set :layoutThoriumDrill*retval false
  1052 jump *label192 always
  1053 jump *label195 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-35 instructions):
 
   115 jump *label38 notEqual *tmp53 false
   116 set *tmp27 false
   117 jump *label28 always
-    * jump *label39 always
   118 label *label38
   119 label *label39
   120 op sub *tmp57 :locateOreAway:x .coreX
 
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label30 always
-    * jump *label43 always
   131 label *label42
   132 label *label43
-    * jump *label41 always
   133 label *label40
   134 label *label41
   135 jump *label44 lessThan :locateOreAway:coreDist 8
 
   153 jump *label52 greaterThanEq *tmp84 7
   154 set *tmp73 true
   155 jump *label48 always
-    * jump *label53 always
   156 label *label52
   157 label *label53
   158 label *label50
 
   170 printflush message1
   171 set *tmp27 true
   172 jump *label28 always
-    * jump *label55 always
   173 label *label54
   174 label *label55
-    * jump *label47 always
   175 label *label46
   176 label *label47
-    * jump *label45 always
   177 label *label44
   178 label *label45
   179 label *label30
 
   188 jump *label56 notEqual *tmp27 false
   189 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   190 jump *label19 always
-    * jump *label57 always
   191 label *label56
   192 label *label57
   193 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   194 op add .mapSpots .mapSpots 1
-    * jump *label59 always
   195 label *label58
   196 label *label59
   197 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   236 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
   237 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   238 jump *label67 always
-    * jump *label70 always
   239 label *label69
   240 label *label70
   241 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
 
   244 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   245 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   246 set .mapSpots :findDrillLocationLocal:score
-    * jump *label74 always
   247 label *label73
   248 label *label74
   249 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   266 ucontrol unbind
   267 set :findDrillLocationLocal*retval true
   268 jump *label19 always
-    * jump *label76 always
   269 label *label75
   270 label *label76
-    * jump *label72 always
   271 label *label71
   272 label *label72
   273 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   274 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   275 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   276 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label79 always
   277 label *label78
   278 label *label79
   279 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   280 jump *label67 always
-    * jump *label81 always
   281 label *label80
   282 label *label81
   283 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   311 write :saveLocation.1:y bank1 .count
   312 op add .locations .locations 1
   313 label *label86
-    * jump *label85 always
   314 label *label84
   315 label *label85
   316 label *label26
 
   329 jump *label88 equal *tmp164 false
   330 set :shiftMask*retval 0
   331 jump *label87 always
-    * jump *label89 always
   332 label *label88
   333 label *label89
   334 op mul *tmp166 7 :shiftMask:shiftY
 
   347 op shr :shiftMask:keep 0b1111111 *tmp176
   348 jump *label94 lessThanEq :shiftMask:shiftX 0
   349 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label95 always
   350 label *label94
   351 label *label95
   352 op shl *tmp180 :shiftMask:keep 7
 
   356 op shl *tmp182 :shiftMask:keep 21
   357 op or :shiftMask:keep :shiftMask:keep *tmp182
   358 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label93 always
   359 label *label92
   360 label *label93
   361 set :shiftMask*retval :shiftMask:mask
 
   393 jump *label102 greaterThanEq :createMatrixOfSize:i 7
   394 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   395 jump *label102 always
-    * jump *label104 always
   396 label *label103
   397 label *label104
   398 op shl *tmp206 :createMatrixOfSize:matrix 7
 
   448 op add *tmp222 24 *tmp221
   449 op add :findPossiblePlacement*retval *tmp222 :findPossiblePlacement:x
   450 jump *label106 always
-    * jump *label114 always
   451 label *label113
   452 label *label114
   453 op sub *tmp224 3 :findPossiblePlacement:width
   454 jump *label115 lessThanEq :findPossiblePlacement:x *tmp224
   455 jump *label112 always
-    * jump *label116 always
   456 label *label115
   457 label *label116
   458 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   463 op sub *tmp227 3 :findPossiblePlacement:height
   464 jump *label117 lessThanEq :findPossiblePlacement:y *tmp227
   465 jump *label109 always
-    * jump *label118 always
   466 label *label117
   467 label *label118
   468 label *label108
 
   490 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   491 set :tryPlaceGenerator*retval false
   492 jump *label119 always
-    * jump *label124 always
   493 label *label123
   494 label *label124
   495 op add *tmp235 :tryPlaceGenerator:centerX 0.5
 
   517 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   518 set :tryPlaceGenerator*retval false
   519 jump *label119 always
-    * jump *label127 always
   520 label *label126
   521 label *label127
   522 op add *tmp247 :tryPlaceGenerator:centerX 0.5
 
   565 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   566 set :tryPlaceGenerator*retval false
   567 jump *label119 always
-    * jump *label131 always
   568 label *label130
   569 label *label131
   570 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   584 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   585 set :tryPlaceGenerator*retval false
   586 jump *label119 always
-    * jump *label134 always
   587 label *label133
   588 label *label134
   589 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   623 jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
   624 set :tryPlaceGenerator*retval false
   625 jump *label119 always
-    * jump *label139 always
   626 label *label138
   627 label *label139
   628 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   629 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   630 op shl *tmp307 1 :tryPlaceGenerator:shift
   631 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp307
-    * jump *label136 always
   632 label *label135
   633 label *label136
   634 set :tryPlaceGenerator*retval true
 
   824 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
   825 op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   826 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp382
-    * jump *label165 always
   827 label *label164
   828 label *label165
   829 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   843 op add .containerY *tmp388 :layoutThoriumDrillAtLocation:r
   844 op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   845 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
-    * jump *label168 always
   846 label *label167
   847 label *label168
   848 set :createFixedMatrix.4:row0 0b1100011
 
   880 jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   881 set :layoutThoriumDrillAtLocation*retval false
   882 jump *label154 always
-    * jump *label172 always
   883 label *label171
   884 label *label172
   885 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
 
   917 jump *label176 equal :tryPlaceGenerator*retval false
   918 set :layoutThoriumDrillAtLocation*retval true
   919 jump *label154 always
-    * jump *label177 always
   920 label *label176
   921 label *label177
   922 set :layoutThoriumDrillAtLocation:sx 3
 
   967 jump *label188 equal :tryPlaceGenerator*retval false
   968 set :layoutThoriumDrillAtLocation*retval true
   969 jump *label154 always
-    * jump *label189 always
   970 label *label188
   971 label *label189
   972 label *label179
 
  1016 jump *label194 notEqual :findDrillLocationLocal*retval false
  1017 set :layoutThoriumDrill*retval false
  1018 jump *label192 always
-    * jump *label195 always
  1019 label *label194
  1020 label *label195
  1021 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
   537 set :createFixedMatrix:row4 0b0000000
   538 set :createFixedMatrix:row5 0b1000001
   539 set :createFixedMatrix:row6 0b1100011
-    * op shl *tmp257 :createFixedMatrix:row0 0
+  540 set *tmp257 :createFixedMatrix:row0
   541 op shl *tmp258 :createFixedMatrix:row1 7
   542 op or *tmp259 *tmp257 *tmp258
   543 op shl *tmp260 :createFixedMatrix:row2 14
 
   761 set :createFixedMatrix.1:row4 0b0011100
   762 set :createFixedMatrix.1:row5 0b0000000
   763 set :createFixedMatrix.1:row6 0b0000000
-    * op shl *tmp341 :createFixedMatrix.1:row0 0
+  764 set *tmp341 :createFixedMatrix.1:row0
   765 op shl *tmp342 :createFixedMatrix.1:row1 7
   766 op or *tmp343 *tmp341 *tmp342
   767 op shl *tmp344 :createFixedMatrix.1:row2 14
 
   783 set :createFixedMatrix.2:row4 0b0011100
   784 set :createFixedMatrix.2:row5 0b0000000
   785 set :createFixedMatrix.2:row6 0b1000001
-    * op shl *tmp356 :createFixedMatrix.2:row0 0
+  786 set *tmp356 :createFixedMatrix.2:row0
   787 op shl *tmp357 :createFixedMatrix.2:row1 7
   788 op or *tmp358 *tmp356 *tmp357
   789 op shl *tmp359 :createFixedMatrix.2:row2 14
 
   800 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp355
   801 set :createFixedMatrix.3:row0 0b11
   802 set :createFixedMatrix.3:row1 0b11
-    * op shl *tmp371 :createFixedMatrix.3:row0 0
+  803 set *tmp371 :createFixedMatrix.3:row0
   804 op shl *tmp372 :createFixedMatrix.3:row1 7
   805 op or *tmp370 *tmp371 *tmp372
   806 label *label162
 
   852 set :createFixedMatrix.4:row4 0b0000000
   853 set :createFixedMatrix.4:row5 0b1000001
   854 set :createFixedMatrix.4:row6 0b1100011
-    * op shl *tmp392 :createFixedMatrix.4:row0 0
+  855 set *tmp392 :createFixedMatrix.4:row0
   856 op shl *tmp393 :createFixedMatrix.4:row1 7
   857 op or *tmp394 *tmp392 *tmp393
   858 op shl *tmp395 :createFixedMatrix.4:row2 14
 
   888 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
   889 set :createFixedMatrix.5:row0 0b1111
   890 set :createFixedMatrix.5:row1 0b1111
-    * op shl *tmp413 :createFixedMatrix.5:row0 0
+  891 set *tmp413 :createFixedMatrix.5:row0
   892 op shl *tmp414 :createFixedMatrix.5:row1 7
   893 op or *tmp412 *tmp413 *tmp414
   894 label *label173
 
   897 set :createFixedMatrix.6:row1 0b11
   898 set :createFixedMatrix.6:row2 0b11
   899 set :createFixedMatrix.6:row3 0b11
-    * op shl *tmp417 :createFixedMatrix.6:row0 0
+  900 set *tmp417 :createFixedMatrix.6:row0
   901 op shl *tmp418 :createFixedMatrix.6:row1 7
   902 op or *tmp419 *tmp417 *tmp418
   903 op shl *tmp420 :createFixedMatrix.6:row2 14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-12 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp12 @mapw .coreX
-    * op sub *tmp13 @maph .coreY
-    * op max *tmp14 .coreX .coreY
+   25 op sub *tmp12 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp13 @maph :findDrillLocationLocal:y
+   27 op max *tmp14 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp14 *tmp14 *tmp12
    29 op max *tmp14 *tmp14 *tmp13
    30 set :findDrillLocationLocal:distanceLimit *tmp14
    31 set .mapAction "Locating ore..."
    32 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp15 :moveTo:x
-    * set *tmp16 :moveTo:y
-    * set :moveTo.1:x *tmp15
-    * set :moveTo.1:y *tmp16
+   33 set .mapProgress 0
+   34 set :moveTo:x :findDrillLocationLocal:x
+   35 set :moveTo:y :findDrillLocationLocal:y
+   36 set *tmp15 .coreX
+   37 set *tmp16 .coreY
+   38 set :moveTo.1:x :moveTo:x
+   39 set :moveTo.1:y :moveTo:y
    40 set :moveTo.1:radius 6
    41 label *label22
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp17
+   42 ucontrol within *tmp15 *tmp16 6 *tmp17
    43 jump *label24 notEqual *tmp17 false
-    * op sub *tmp19 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp19
+   44 op sub *tmp19 6 0.5
+   45 ucontrol approach *tmp15 *tmp16 5.5
    46 label *label23
    47 jump *label22 always
    48 label *label24
    49 label *label21
    50 label *label20
-    * op div *tmp20 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   51 op div *tmp20 *tmp14 3.8197185279121366
    52 op pow .mapTotal *tmp20 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   74 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp33 :locateOreAway:a
    77 op mul *tmp34 *tmp33 :locateOreAway:distance
-    * op add *tmp35 .coreX *tmp34
+   78 op add *tmp35 :findDrillLocationLocal:x *tmp34
    79 op sub *tmp36 @mapw 5
    80 set :limit:value *tmp35
    81 set :limit:low 5
    82 set :limit:high *tmp36
-    * op max *tmp38 :limit:value :limit:low
-    * op min *tmp37 *tmp38 :limit:high
+   83 op max *tmp38 *tmp35 5
+   84 op min *tmp37 *tmp38 *tmp36
    85 label *label32
    86 set :locateOreAway:lx *tmp37
    87 op cos *tmp40 :locateOreAway:a
    88 op mul *tmp41 *tmp40 :locateOreAway:distance
-    * op add *tmp42 .coreY *tmp41
+   89 op add *tmp42 :findDrillLocationLocal:y *tmp41
    90 op sub *tmp43 @maph 5
    91 set :limit.1:value *tmp42
    92 set :limit.1:low 5
    93 set :limit.1:high *tmp43
-    * op max *tmp45 :limit.1:value :limit.1:low
-    * op min *tmp44 *tmp45 :limit.1:high
+   94 op max *tmp45 *tmp42 5
+   95 op min *tmp44 *tmp45 *tmp43
    96 label *label33
    97 set :locateOreAway:ly *tmp44
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   98 set :moveTo.2:x *tmp37
+   99 set :moveTo.2:y *tmp44
   100 set :moveTo.2:radius 5
   101 label *label35
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp47
+  102 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp47
   103 jump *label37 notEqual *tmp47 false
-    * op sub *tmp49 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp49
+  104 op sub *tmp49 5 0.5
+  105 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   106 label *label36
   107 jump *label35 always
   108 label *label37
 
   111 op add .angle .angle *tmp50
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp53 *tmp54
+  114 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp53 *tmp54
   115 jump *label38 notEqual *tmp53 false
   116 set *tmp27 false
   117 jump *label28 always
   118 label *label38
   119 label *label39
-    * op sub *tmp57 :locateOreAway:x .coreX
+  120 op sub *tmp57 :locateOreAway:x :findDrillLocationLocal:x
   121 op abs *tmp58 *tmp57
-    * op sub *tmp59 :locateOreAway:y .coreY
+  122 op sub *tmp59 :locateOreAway:y :findDrillLocationLocal:y
   123 op abs *tmp60 *tmp59
   124 op max :locateOreAway:coreDist *tmp58 *tmp60
-    * op sub *tmp62 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp63 :locateOreAway:y :locateOreAway:ly
+  125 op sub *tmp62 :locateOreAway:x *tmp37
+  126 op sub *tmp63 :locateOreAway:y *tmp44
   127 op len :locateOreAway:unitDist *tmp62 *tmp63
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
 
   147 read :visited:lx bank1 *tmp76
   148 op add *tmp80 :visited:index 3
   149 read :visited:ly bank1 *tmp80
-    * op sub *tmp82 :visited:x :visited:lx
-    * op sub *tmp83 :visited:y :visited:ly
+  150 op sub *tmp82 :locateOreAway:x :visited:lx
+  151 op sub *tmp83 :locateOreAway:y :visited:ly
   152 op len *tmp84 *tmp82 *tmp83
   153 jump *label52 greaterThanEq *tmp84 7
   154 set *tmp73 true
 
   161 label *label51
   162 set *tmp73 false
   163 jump *label48 always
-    * set *tmp73 null
   164 label *label48
   165 jump *label54 notEqual *tmp73 false
-    * op div *tmp89 7.639437055824273 :locateOreAway:distance
+  166 op div *tmp89 2 .angle
   167 op add .angle .angle *tmp89
   168 op mul .mapProgress .angle .angle
   169 printflush message1
 
   180 label *label31
   181 set *tmp27 false
   182 jump *label28 always
-    * set *tmp27 null
   183 label *label28
   184 set :findDrillLocationLocal:oreX :locateOreAway:x
   185 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   192 op add .mapSpots .mapSpots 1
   193 label *label58
   194 label *label59
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp97 :moveTo.3:x
-    * set *tmp98 :moveTo.3:y
-    * set :moveTo.4:x *tmp97
-    * set :moveTo.4:y *tmp98
+  195 set :moveTo.3:x :locateOreAway:x
+  196 set :moveTo.3:y :locateOreAway:y
+  197 set *tmp97 :findDrillLocationLocal:oreX
+  198 set *tmp98 :findDrillLocationLocal:oreY
+  199 set :moveTo.4:x :moveTo.3:x
+  200 set :moveTo.4:y :moveTo.3:y
   201 set :moveTo.4:radius 6
   202 label *label62
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp99
+  203 ucontrol within *tmp97 *tmp98 6 *tmp99
   204 jump *label64 notEqual *tmp99 false
-    * op sub *tmp101 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp101
+  205 op sub *tmp101 6 0.5
+  206 ucontrol approach *tmp97 *tmp98 5.5
   207 label *label63
   208 jump *label62 always
   209 label *label64
 
   227 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
   228 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   229 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * op sub *tmp113 :findDrillLocationLocal:newX .coreX
+  230 op sub *tmp113 :findDrillLocationLocal:newX :findDrillLocationLocal:x
   231 op abs *tmp114 *tmp113
-    * op sub *tmp115 :findDrillLocationLocal:newY .coreY
+  232 op sub *tmp115 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   233 op abs *tmp116 *tmp115
   234 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
   235 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
 
   251 set :saveLocation:y :findDrillLocationLocal:dy
   252 op add .count .count 1
   253 set *tmp126 .count
-    * sensor *tmp128 :saveLocation:item @id
-    * write *tmp128 bank1 *tmp126
+  254 sensor *tmp128 :findDrillLocationLocal:item @id
+  255 write *tmp128 bank1 .count
   256 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  257 write :findDrillLocationLocal:score bank1 .count
   258 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  259 write :findDrillLocationLocal:dx bank1 .count
   260 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  261 write :findDrillLocationLocal:dy bank1 .count
   262 op add .locations .locations 1
   263 label *label77
   264 ucontrol unbind
 
   299 set :saveLocation.1:y :findDrillLocationLocal:bestY
   300 op add .count .count 1
   301 set *tmp150 .count
-    * sensor *tmp152 :saveLocation.1:item @id
-    * write *tmp152 bank1 *tmp150
+  302 sensor *tmp152 :findDrillLocationLocal:item @id
+  303 write *tmp152 bank1 .count
   304 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  305 write :findDrillLocationLocal:best bank1 .count
   306 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  307 write :findDrillLocationLocal:bestX bank1 .count
   308 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  309 write :findDrillLocationLocal:bestY bank1 .count
   310 op add .locations .locations 1
   311 label *label86
   312 label *label84
 
   342 label *label91
   343 jump *label92 equal :shiftMask:shiftX 0
   344 op abs *tmp176 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp176
+  345 op shr :shiftMask:keep 0b1111111 *tmp160
   346 jump *label94 lessThanEq :shiftMask:shiftX 0
   347 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   348 label *label94
 
   358 label *label93
   359 set :shiftMask*retval :shiftMask:mask
   360 jump *label87 always
-    * set :shiftMask*retval null
   361 label *label87
   362 return :shiftMask*retaddr
   363 end
   364 label *label10
   365 op add *tmp183 :excludeArea:areaWidth 7
-    * op add *tmp184 *tmp183 1
+  366 op add *tmp184 :excludeArea:areaWidth 8
   367 op idiv *tmp185 *tmp184 2
   368 op sub *tmp186 :excludeArea:maskX :excludeArea:areaX
   369 op abs *tmp187 *tmp186
   370 op sub :excludeArea:overlapX *tmp185 *tmp187
   371 op add *tmp189 :excludeArea:areaHeight 7
-    * op add *tmp190 *tmp189 1
+  372 op add *tmp190 :excludeArea:areaHeight 8
   373 op idiv *tmp191 *tmp190 2
   374 op sub *tmp192 :excludeArea:maskY :excludeArea:areaY
   375 op abs *tmp193 *tmp192
 
   382 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   383 set :createMatrixOfSize:width :excludeArea:blockSizeX
   384 set :createMatrixOfSize:height :excludeArea:blockSizeY
-    * op shl *tmp202 1 :createMatrixOfSize:width
+  385 op shl *tmp202 1 :excludeArea:blockSizeX
   386 op sub :createMatrixOfSize:row *tmp202 1
   387 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   388 set :createMatrixOfSize:i 1
   389 label *label100
   390 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
+  391 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   392 jump *label102 always
   393 label *label103
   394 label *label104
 
   400 label *label102
   401 set *tmp201 :createMatrixOfSize:matrix
   402 jump *label99 always
-    * set *tmp201 null
   403 label *label99
-    * set :excludeArea:blocked *tmp201
+  404 set :excludeArea:blocked :createMatrixOfSize:matrix
   405 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
   406 op sub *tmp209 7 :excludeArea:blockSizeX
   407 op mul :excludeArea:shiftX *tmp208 *tmp209
   408 op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY
   409 op sub *tmp212 7 :excludeArea:blockSizeY
   410 op mul :excludeArea:shiftY *tmp211 *tmp212
-    * set :shiftMask:mask :excludeArea:blocked
+  411 set :shiftMask:mask *tmp201
   412 set :shiftMask:shiftX :excludeArea:shiftX
   413 set :shiftMask:shiftY :excludeArea:shiftY
   414 setaddr :shiftMask*retaddr *label105 (h:*label105)
   415 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   416 label *label105
   417 set :excludeArea:shifted :shiftMask*retval
-    * op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
+  418 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   419 jump *label96 always
-    * set *tmp198 null
   420 jump *label98 always
   421 label *label97
   422 set :excludeArea*retval :excludeArea:mask
   423 jump *label96 always
-    * set *tmp198 null
   424 label *label98
-    * set :excludeArea*retval *tmp198
+  425 set :excludeArea*retval null
   426 label *label96
   427 return :excludeArea*retaddr
   428 end
 
   465 label *label109
   466 set :findPossiblePlacement*retval -1
   467 jump *label106 always
-    * set :findPossiblePlacement*retval null
   468 label *label106
   469 return :findPossiblePlacement*retaddr
   470 end
 
   479 set :tryPlaceGenerator:c :findPossiblePlacement:x
   480 set :tryPlaceGenerator:r :findPossiblePlacement:y
   481 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label121 lessThan :tryPlaceGenerator:shift 0
-    * jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
+  482 jump *label121 lessThan :findPossiblePlacement*retval 0
+  483 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   484 set :tryPlaceGenerator*retval false
   485 jump *label119 always
   486 label *label123
   487 label *label124
   488 op add *tmp235 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp235 :tryPlaceGenerator:c
+  489 op add .water2X *tmp235 :findPossiblePlacement:x
   490 op add *tmp237 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp237 :tryPlaceGenerator:r
+  491 op add .water2Y *tmp237 :findPossiblePlacement:y
   492 op add *tmp239 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp239 :tryPlaceGenerator:c
+  493 op add .generatorX *tmp235 :findPossiblePlacement:x
   494 op add *tmp241 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp241 :tryPlaceGenerator:r
-    * op shl *tmp243 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  495 op add .generatorY *tmp241 :findPossiblePlacement:y
+  496 op shl *tmp243 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   497 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp243
   498 jump *label122 always
   499 label *label121
 
   507 set :tryPlaceGenerator:c :findPossiblePlacement:x
   508 set :tryPlaceGenerator:r :findPossiblePlacement:y
   509 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
+  510 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   511 set :tryPlaceGenerator*retval false
   512 jump *label119 always
   513 label *label126
   514 label *label127
   515 op add *tmp247 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp247 :tryPlaceGenerator:c
+  516 op add .water2X *tmp247 :findPossiblePlacement:x
   517 op add *tmp249 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp249 :tryPlaceGenerator:r
+  518 op add .water2Y *tmp249 :findPossiblePlacement:y
   519 op add *tmp251 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp251 :tryPlaceGenerator:c
+  520 op add .generatorX *tmp251 :findPossiblePlacement:x
   521 op add *tmp253 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp253 :tryPlaceGenerator:r
-    * op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  522 op add .generatorY *tmp249 :findPossiblePlacement:y
+  523 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   524 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
   525 label *label122
   526 set :createFixedMatrix:row0 0b1100011
 
   530 set :createFixedMatrix:row4 0b0000000
   531 set :createFixedMatrix:row5 0b1000001
   532 set :createFixedMatrix:row6 0b1100011
-    * set *tmp257 :createFixedMatrix:row0
-    * op shl *tmp258 :createFixedMatrix:row1 7
-    * op or *tmp259 *tmp257 *tmp258
-    * op shl *tmp260 :createFixedMatrix:row2 14
-    * op or *tmp261 *tmp259 *tmp260
-    * op shl *tmp262 :createFixedMatrix:row3 21
-    * op or *tmp263 *tmp261 *tmp262
-    * op shl *tmp264 :createFixedMatrix:row4 28
-    * op or *tmp265 *tmp263 *tmp264
-    * op shl *tmp266 :createFixedMatrix:row5 35
-    * op or *tmp267 *tmp265 *tmp266
-    * op shl *tmp268 :createFixedMatrix:row6 42
-    * op or *tmp256 *tmp267 *tmp268
+  533 set *tmp257 0b1100011
+  534 op shl *tmp258 0b1000001 7
+  535 op or *tmp259 :createFixedMatrix:row0 8320
+  536 op shl *tmp260 0b0000000 14
+  537 op or *tmp261 *tmp259 0
+  538 op shl *tmp262 0b0000000 21
+  539 op or *tmp263 *tmp261 0
+  540 op shl *tmp264 0b0000000 28
+  541 op or *tmp265 *tmp263 0
+  542 op shl *tmp266 0b1000001 35
+  543 op or *tmp267 *tmp265 2233382993920
+  544 op shl *tmp268 0b1100011 42
+  545 op or *tmp256 *tmp267 435406604599296
   546 label *label128
   547 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   548 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   555 set :tryPlaceGenerator:c :findPossiblePlacement:x
   556 set :tryPlaceGenerator:r :findPossiblePlacement:y
   557 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
+  558 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   559 set :tryPlaceGenerator*retval false
   560 jump *label119 always
   561 label *label130
   562 label *label131
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp275 1 :tryPlaceGenerator:shift
+  563 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  564 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  565 op shl *tmp275 1 :findPossiblePlacement*retval
   566 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp275
   567 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   568 set :findPossiblePlacement:placementMask 1
 
   574 set :tryPlaceGenerator:c :findPossiblePlacement:x
   575 set :tryPlaceGenerator:r :findPossiblePlacement:y
   576 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
+  577 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   578 set :tryPlaceGenerator*retval false
   579 jump *label119 always
   580 label *label133
   581 label *label134
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp281 1 :tryPlaceGenerator:shift
+  582 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  583 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  584 op shl *tmp281 1 :findPossiblePlacement*retval
   585 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp281
   586 op sub *tmp282 .water2X .node1X
   587 op sub *tmp283 .water2Y .node1Y
 
   613 set :tryPlaceGenerator:c :findPossiblePlacement:x
   614 set :tryPlaceGenerator:r :findPossiblePlacement:y
   615 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
+  616 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   617 set :tryPlaceGenerator*retval false
   618 jump *label119 always
   619 label *label138
   620 label *label139
-    * op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp307 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp307
+  621 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  622 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  623 op shl *tmp307 1 :findPossiblePlacement*retval
   624 label *label135
   625 label *label136
   626 set :tryPlaceGenerator*retval true
   627 jump *label119 always
-    * set :tryPlaceGenerator*retval null
   628 label *label119
   629 return :tryPlaceGenerator*retaddr
   630 end
 
   643 label *label143
   644 set :createBlockMaskRow*retval :createBlockMaskRow:result
   645 jump *label140 always
-    * set :createBlockMaskRow*retval null
   646 label *label140
   647 return :createBlockMaskRow*retaddr
   648 end
 
   655 set :createAdjacentMask:x :createCombinedMask:x
   656 set :createAdjacentMask:y :createCombinedMask:y
   657 set :createAdjacentMask:result 0
-    * op add *tmp318 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  658 op add *tmp318 :createCombinedMask:y 4
+  659 set :createBlockMaskRow:x :createCombinedMask:x
   660 set :createBlockMaskRow:y *tmp318
   661 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   662 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
 
   683 op or *tmp325 :createAdjacentMask:row2 *tmp324
   684 op shr *tmp326 :createAdjacentMask:row1 1
   685 op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createAdjacentMask:row0
+  686 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
   687 op shl *tmp329 :createAdjacentMask:result 7
   688 op and *tmp330 :createAdjacentMask:mask 0xFE
   689 op or :createAdjacentMask:result *tmp329 *tmp330
   690 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  691 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   692 label *label149
   693 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   694 jump *label148 always
 
   701 read *tmp333 processor1 ":createTerrainMask*finished"
   702 jump *label152 equal *tmp333 false
   703 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
-    * op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  704 op or :excludeArea:mask *tmp317 :createCombinedMask:terrainMask
   705 set :excludeArea:maskX :createCombinedMask:x
   706 set :excludeArea:maskY :createCombinedMask:y
   707 set :excludeArea:areaX .coreX
 
   713 label *label153
   714 set :createCombinedMask*retval :excludeArea*retval
   715 jump *label144 always
-    * set :createCombinedMask*retval null
   716 label *label144
   717 return :createCombinedMask*retaddr
   718 end
 
   729 set :moveTo.5:y .drillY
   730 set :moveTo.5:radius 1
   731 label *label156
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp336
+  732 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
   733 jump *label158 notEqual *tmp336 false
-    * op sub *tmp338 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp338
+  734 op sub *tmp338 1 0.5
+  735 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   736 label *label157
   737 jump *label156 always
   738 label *label158
 
   750 set :createFixedMatrix.1:row4 0b0011100
   751 set :createFixedMatrix.1:row5 0b0000000
   752 set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp341 :createFixedMatrix.1:row0
-    * op shl *tmp342 :createFixedMatrix.1:row1 7
-    * op or *tmp343 *tmp341 *tmp342
-    * op shl *tmp344 :createFixedMatrix.1:row2 14
-    * op or *tmp345 *tmp343 *tmp344
-    * op shl *tmp346 :createFixedMatrix.1:row3 21
-    * op or *tmp347 *tmp345 *tmp346
-    * op shl *tmp348 :createFixedMatrix.1:row4 28
-    * op or *tmp349 *tmp347 *tmp348
-    * op shl *tmp350 :createFixedMatrix.1:row5 35
-    * op or *tmp351 *tmp349 *tmp350
-    * op shl *tmp352 :createFixedMatrix.1:row6 42
-    * op or *tmp340 *tmp351 *tmp352
+  753 set *tmp341 0b0000000
+  754 op shl *tmp342 0b0000000 7
+  755 op or *tmp343 :createFixedMatrix.1:row0 0
+  756 op shl *tmp344 0b0011100 14
+  757 op or *tmp345 *tmp343 458752
+  758 op shl *tmp346 0b0011100 21
+  759 op or *tmp347 *tmp345 58720256
+  760 op shl *tmp348 0b0011100 28
+  761 op or *tmp349 *tmp347 7516192768
+  762 op shl *tmp350 0b0000000 35
+  763 op or *tmp351 *tmp349 0
+  764 op shl *tmp352 0b0000000 42
+  765 op or *tmp340 *tmp351 0
   766 label *label160
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp340
+  767 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp340
   768 set :createFixedMatrix.2:row0 0b1000001
   769 set :createFixedMatrix.2:row1 0b0000000
   770 set :createFixedMatrix.2:row2 0b0011100
 
   772 set :createFixedMatrix.2:row4 0b0011100
   773 set :createFixedMatrix.2:row5 0b0000000
   774 set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp356 :createFixedMatrix.2:row0
-    * op shl *tmp357 :createFixedMatrix.2:row1 7
-    * op or *tmp358 *tmp356 *tmp357
-    * op shl *tmp359 :createFixedMatrix.2:row2 14
-    * op or *tmp360 *tmp358 *tmp359
-    * op shl *tmp361 :createFixedMatrix.2:row3 21
-    * op or *tmp362 *tmp360 *tmp361
-    * op shl *tmp363 :createFixedMatrix.2:row4 28
-    * op or *tmp364 *tmp362 *tmp363
-    * op shl *tmp365 :createFixedMatrix.2:row5 35
-    * op or *tmp366 *tmp364 *tmp365
-    * op shl *tmp367 :createFixedMatrix.2:row6 42
-    * op or *tmp355 *tmp366 *tmp367
+  775 set *tmp356 0b1000001
+  776 op shl *tmp357 0b0000000 7
+  777 op or *tmp358 :createFixedMatrix.2:row0 0
+  778 op shl *tmp359 0b0011100 14
+  779 op or *tmp360 *tmp358 458752
+  780 op shl *tmp361 0b0011100 21
+  781 op or *tmp362 *tmp360 58720256
+  782 op shl *tmp363 0b0011100 28
+  783 op or *tmp364 *tmp362 7516192768
+  784 op shl *tmp365 0b0000000 35
+  785 op or *tmp366 *tmp364 0
+  786 op shl *tmp367 0b1000001 42
+  787 op or *tmp355 *tmp366 285873023221760
   788 label *label161
   789 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp355
   790 set :createFixedMatrix.3:row0 0b11
   791 set :createFixedMatrix.3:row1 0b11
-    * set *tmp371 :createFixedMatrix.3:row0
-    * op shl *tmp372 :createFixedMatrix.3:row1 7
-    * op or *tmp370 *tmp371 *tmp372
+  792 set *tmp371 0b11
+  793 op shl *tmp372 0b11 7
+  794 op or *tmp370 :createFixedMatrix.3:row0 384
   795 label *label162
   796 set :layoutThoriumDrillAtLocation:mask2x2 *tmp370
   797 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  798 set :findPossiblePlacement:placementMask *tmp370
   799 set :findPossiblePlacement:width 2
   800 set :findPossiblePlacement:height 2
   801 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
 
   804 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   805 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   806 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
+  807 jump *label164 lessThan :findPossiblePlacement*retval 0
   808 op add *tmp377 .drillX 0.5
-    * op add .water1X *tmp377 :layoutThoriumDrillAtLocation:c
+  809 op add .water1X *tmp377 :findPossiblePlacement:x
   810 op add *tmp379 .drillY 0.5
-    * op add .water1Y *tmp379 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp381 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  811 op add .water1Y *tmp379 :findPossiblePlacement:y
+  812 op shl *tmp381 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   813 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
-    * op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp382
+  814 op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  815 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp381
   816 label *label164
   817 label *label165
   818 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   825 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   826 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   827 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
+  828 jump *label167 lessThan :findPossiblePlacement*retval 0
   829 op add *tmp386 .drillX 0.5
-    * op add .containerX *tmp386 :layoutThoriumDrillAtLocation:c
+  830 op add .containerX *tmp386 :findPossiblePlacement:x
   831 op add *tmp388 .drillY 0.5
-    * op add .containerY *tmp388 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  832 op add .containerY *tmp388 :findPossiblePlacement:y
+  833 op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   834 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
   835 label *label167
   836 label *label168
 
   841 set :createFixedMatrix.4:row4 0b0000000
   842 set :createFixedMatrix.4:row5 0b1000001
   843 set :createFixedMatrix.4:row6 0b1100011
-    * set *tmp392 :createFixedMatrix.4:row0
-    * op shl *tmp393 :createFixedMatrix.4:row1 7
-    * op or *tmp394 *tmp392 *tmp393
-    * op shl *tmp395 :createFixedMatrix.4:row2 14
-    * op or *tmp396 *tmp394 *tmp395
-    * op shl *tmp397 :createFixedMatrix.4:row3 21
-    * op or *tmp398 *tmp396 *tmp397
-    * op shl *tmp399 :createFixedMatrix.4:row4 28
-    * op or *tmp400 *tmp398 *tmp399
-    * op shl *tmp401 :createFixedMatrix.4:row5 35
-    * op or *tmp402 *tmp400 *tmp401
-    * op shl *tmp403 :createFixedMatrix.4:row6 42
-    * op or *tmp391 *tmp402 *tmp403
+  844 set *tmp392 0b1100011
+  845 op shl *tmp393 0b1000001 7
+  846 op or *tmp394 :createFixedMatrix.4:row0 8320
+  847 op shl *tmp395 0b0000000 14
+  848 op or *tmp396 *tmp394 0
+  849 op shl *tmp397 0b0000000 21
+  850 op or *tmp398 *tmp396 0
+  851 op shl *tmp399 0b0000000 28
+  852 op or *tmp400 *tmp398 0
+  853 op shl *tmp401 0b1000001 35
+  854 op or *tmp402 *tmp400 2233382993920
+  855 op shl *tmp403 0b1100011 42
+  856 op or *tmp391 *tmp402 435406604599296
   857 label *label169
   858 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp391
   859 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
 
   866 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   867 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   868 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
+  869 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   870 set :layoutThoriumDrillAtLocation*retval false
   871 jump *label154 always
   872 label *label171
   873 label *label172
-    * op add .node1X .drillX :layoutThoriumDrillAtLocation:c
-    * op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
-    * op shl *tmp411 1 :layoutThoriumDrillAtLocation:shift
+  874 op add .node1X .drillX :findPossiblePlacement:x
+  875 op add .node1Y .drillY :findPossiblePlacement:y
+  876 op shl *tmp411 1 :findPossiblePlacement*retval
   877 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
   878 set :createFixedMatrix.5:row0 0b1111
   879 set :createFixedMatrix.5:row1 0b1111
-    * set *tmp413 :createFixedMatrix.5:row0
-    * op shl *tmp414 :createFixedMatrix.5:row1 7
-    * op or *tmp412 *tmp413 *tmp414
+  880 set *tmp413 0b1111
+  881 op shl *tmp414 0b1111 7
+  882 op or *tmp412 :createFixedMatrix.5:row0 1920
   883 label *label173
   884 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp412
   885 set :createFixedMatrix.6:row0 0b11
   886 set :createFixedMatrix.6:row1 0b11
   887 set :createFixedMatrix.6:row2 0b11
   888 set :createFixedMatrix.6:row3 0b11
-    * set *tmp417 :createFixedMatrix.6:row0
-    * op shl *tmp418 :createFixedMatrix.6:row1 7
-    * op or *tmp419 *tmp417 *tmp418
-    * op shl *tmp420 :createFixedMatrix.6:row2 14
-    * op or *tmp421 *tmp419 *tmp420
-    * op shl *tmp422 :createFixedMatrix.6:row3 21
-    * op or *tmp416 *tmp421 *tmp422
+  889 set *tmp417 0b11
+  890 op shl *tmp418 0b11 7
+  891 op or *tmp419 :createFixedMatrix.6:row0 384
+  892 op shl *tmp420 0b11 14
+  893 op or *tmp421 *tmp419 49152
+  894 op shl *tmp422 0b11 21
+  895 op or *tmp416 *tmp421 6291456
   896 label *label174
   897 set :layoutThoriumDrillAtLocation:generatorVertical *tmp416
   898 set :tryPlaceGenerator:centerX .drillX
   899 set :tryPlaceGenerator:centerY .drillY
   900 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  901 set :tryPlaceGenerator:generatorHorizontal *tmp412
+  902 set :tryPlaceGenerator:generatorVertical *tmp416
   903 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   904 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   905 label *label175
 
   942 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
   943 label *label186
   944 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  945 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   946 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
   947 op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy
   948 set :tryPlaceGenerator:centerX *tmp432
 
   964 label *label180
   965 set :layoutThoriumDrillAtLocation*retval true
   966 jump *label154 always
-    * set :layoutThoriumDrillAtLocation*retval null
   967 label *label154
   968 return :layoutThoriumDrillAtLocation*retaddr
   969 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-135 instructions):
 
    33 set .mapProgress 0
    34 set :moveTo:x :findDrillLocationLocal:x
    35 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp15 .coreX
-    * set *tmp16 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   36 set *tmp15 :findDrillLocationLocal:x
+   37 set *tmp16 :findDrillLocationLocal:y
+   38 set :moveTo.1:x :findDrillLocationLocal:x
+   39 set :moveTo.1:y :findDrillLocationLocal:y
    40 label *label22
-    * ucontrol within *tmp15 *tmp16 6 *tmp17
+   41 ucontrol within .coreX .coreY 6 *tmp17
    42 jump *label24 notEqual *tmp17 false
-    * op sub *tmp19 6 0.5
-    * ucontrol approach *tmp15 *tmp16 5.5
+   43 ucontrol approach .coreX .coreY 5.5
    44 label *label23
    45 jump *label22 always
    46 label *label24
 
    59 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    60 op div *tmp25 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    61 op pow .mapTotal *tmp25 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    62 set :locateOreAway:x :findDrillLocationLocal:oreX
    63 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    64 op mul :locateOreAway:distance 3.8197185279121366 .angle
    65 set :locateOreAway:lastX -1
    66 set :locateOreAway:lastY -1
 
    73 op mul *tmp34 *tmp33 :locateOreAway:distance
    74 op add *tmp35 :findDrillLocationLocal:x *tmp34
    75 op sub *tmp36 @mapw 5
-    * set :limit:value *tmp35
-    * set :limit:low 5
-    * set :limit:high *tmp36
    76 op max *tmp38 *tmp35 5
    77 op min *tmp37 *tmp38 *tmp36
    78 label *label32
 
    81 op mul *tmp41 *tmp40 :locateOreAway:distance
    82 op add *tmp42 :findDrillLocationLocal:y *tmp41
    83 op sub *tmp43 @maph 5
-    * set :limit.1:value *tmp42
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp43
    84 op max *tmp45 *tmp42 5
    85 op min *tmp44 *tmp45 *tmp43
    86 label *label33
    87 set :locateOreAway:ly *tmp44
-    * set :moveTo.2:x *tmp37
-    * set :moveTo.2:y *tmp44
-    * set :moveTo.2:radius 5
    88 label *label35
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp47
+   89 ucontrol within *tmp37 *tmp44 5 *tmp47
    90 jump *label37 notEqual *tmp47 false
-    * op sub *tmp49 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   91 ucontrol approach *tmp37 *tmp44 4.5
    92 label *label36
    93 jump *label35 always
    94 label *label37
 
   122 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   123 set :locateOreAway:lastX :locateOreAway:x
   124 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   125 set *tmp74 .locations
   126 set :visited:i .locationsStart
   127 label *label49
 
   178 label *label59
   179 set :moveTo.3:x :locateOreAway:x
   180 set :moveTo.3:y :locateOreAway:y
-    * set *tmp97 :findDrillLocationLocal:oreX
-    * set *tmp98 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  181 set *tmp97 :locateOreAway:x
+  182 set *tmp98 :locateOreAway:y
+  183 set :moveTo.4:x :locateOreAway:x
+  184 set :moveTo.4:y :locateOreAway:y
   185 label *label62
-    * ucontrol within *tmp97 *tmp98 6 *tmp99
+  186 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp99
   187 jump *label64 notEqual *tmp99 false
-    * op sub *tmp101 6 0.5
-    * ucontrol approach *tmp97 *tmp98 5.5
+  188 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   189 label *label63
   190 jump *label62 always
   191 label *label64
 
   227 label *label73
   228 label *label74
   229 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   230 op add .count .count 1
-    * set *tmp126 .count
   231 sensor *tmp128 :findDrillLocationLocal:item @id
   232 write *tmp128 bank1 .count
   233 op add .count .count 1
 
   270 jump *label65 always
   271 label *label67
   272 jump *label84 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   273 op add .count .count 1
-    * set *tmp150 .count
   274 sensor *tmp152 :findDrillLocationLocal:item @id
   275 write *tmp152 bank1 .count
   276 op add .count .count 1
 
   313 op shr :shiftMask:mask :shiftMask:mask *tmp173
   314 label *label91
   315 jump *label92 equal :shiftMask:shiftX 0
-    * op abs *tmp176 :shiftMask:shiftX
   316 op shr :shiftMask:keep 0b1111111 *tmp160
   317 jump *label94 lessThanEq :shiftMask:shiftX 0
   318 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   333 return :shiftMask*retaddr
   334 end
   335 label *label10
-    * op add *tmp183 :excludeArea:areaWidth 7
   336 op add *tmp184 :excludeArea:areaWidth 8
   337 op idiv *tmp185 *tmp184 2
   338 op sub *tmp186 :excludeArea:maskX :excludeArea:areaX
   339 op abs *tmp187 *tmp186
   340 op sub :excludeArea:overlapX *tmp185 *tmp187
-    * op add *tmp189 :excludeArea:areaHeight 7
   341 op add *tmp190 :excludeArea:areaHeight 8
   342 op idiv *tmp191 *tmp190 2
   343 op sub *tmp192 :excludeArea:maskY :excludeArea:areaY
 
   349 jump *label97 equal *tmp197 false
   350 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
   351 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
-    * set :createMatrixOfSize:width :excludeArea:blockSizeX
-    * set :createMatrixOfSize:height :excludeArea:blockSizeY
   352 op shl *tmp202 1 :excludeArea:blockSizeX
   353 op sub :createMatrixOfSize:row *tmp202 1
   354 set :createMatrixOfSize:matrix :createMatrixOfSize:row
 
   368 set *tmp201 :createMatrixOfSize:matrix
   369 jump *label99 always
   370 label *label99
-    * set :excludeArea:blocked :createMatrixOfSize:matrix
   371 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
   372 op sub *tmp209 7 :excludeArea:blockSizeX
   373 op mul :excludeArea:shiftX *tmp208 *tmp209
   374 op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY
   375 op sub *tmp212 7 :excludeArea:blockSizeY
   376 op mul :excludeArea:shiftY *tmp211 *tmp212
-    * set :shiftMask:mask *tmp201
+  377 set :shiftMask:mask :createMatrixOfSize:matrix
   378 set :shiftMask:shiftX :excludeArea:shiftX
   379 set :shiftMask:shiftY :excludeArea:shiftY
   380 setaddr :shiftMask*retaddr *label105 (h:*label105)
   381 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   382 label *label105
-    * set :excludeArea:shifted :shiftMask*retval
   383 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   384 jump *label96 always
   385 jump *label98 always
 
   387 set :excludeArea*retval :excludeArea:mask
   388 jump *label96 always
   389 label *label98
-    * set :excludeArea*retval null
   390 label *label96
   391 return :excludeArea*retaddr
   392 end
 
   440 setaddr :findPossiblePlacement*retaddr *label120 (h:*label120)
   441 call *label11 *invalid :findPossiblePlacement*retval (m:*label120) (h:*label120)
   442 label *label120
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   443 jump *label121 lessThan :findPossiblePlacement*retval 0
   444 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   445 set :tryPlaceGenerator*retval false
 
   450 op add .water2X *tmp235 :findPossiblePlacement:x
   451 op add *tmp237 :tryPlaceGenerator:centerY 0.5
   452 op add .water2Y *tmp237 :findPossiblePlacement:y
-    * op add *tmp239 :tryPlaceGenerator:centerX 0.5
   453 op add .generatorX *tmp235 :findPossiblePlacement:x
   454 op add *tmp241 :tryPlaceGenerator:centerY 2.5
   455 op add .generatorY *tmp241 :findPossiblePlacement:y
 
   464 setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
   465 call *label11 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
   466 label *label125
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   467 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   468 set :tryPlaceGenerator*retval false
   469 jump *label119 always
 
   475 op add .water2Y *tmp249 :findPossiblePlacement:y
   476 op add *tmp251 :tryPlaceGenerator:centerX 2.5
   477 op add .generatorX *tmp251 :findPossiblePlacement:x
-    * op add *tmp253 :tryPlaceGenerator:centerY 0.5
   478 op add .generatorY *tmp249 :findPossiblePlacement:y
   479 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   480 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
   481 label *label122
   482 set :createFixedMatrix:row0 0b1100011
-    * set :createFixedMatrix:row1 0b1000001
-    * set :createFixedMatrix:row2 0b0000000
-    * set :createFixedMatrix:row3 0b0000000
-    * set :createFixedMatrix:row4 0b0000000
-    * set :createFixedMatrix:row5 0b1000001
-    * set :createFixedMatrix:row6 0b1100011
-    * set *tmp257 0b1100011
-    * op shl *tmp258 0b1000001 7
-    * op or *tmp259 :createFixedMatrix:row0 8320
-    * op shl *tmp260 0b0000000 14
-    * op or *tmp261 *tmp259 0
-    * op shl *tmp262 0b0000000 21
-    * op or *tmp263 *tmp261 0
-    * op shl *tmp264 0b0000000 28
-    * op or *tmp265 *tmp263 0
-    * op shl *tmp266 0b1000001 35
-    * op or *tmp267 *tmp265 2233382993920
-    * op shl *tmp268 0b1100011 42
-    * op or *tmp256 *tmp267 435406604599296
+  483 op or *tmp259 0b1100011 8320
+  484 op or *tmp261 8419 0
+  485 op or *tmp263 8419 0
+  486 op or *tmp265 8419 0
+  487 op or *tmp267 8419 2233382993920
+  488 op or *tmp256 2233383002339 435406604599296
   489 label *label128
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
+  490 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   491 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   492 set :findPossiblePlacement:placementMask 1
   493 set :findPossiblePlacement:width 1
 
   495 setaddr :findPossiblePlacement*retaddr *label129 (h:*label129)
   496 call *label11 *invalid :findPossiblePlacement*retval (m:*label129) (h:*label129)
   497 label *label129
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   498 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   499 set :tryPlaceGenerator*retval false
   500 jump *label119 always
 
   511 setaddr :findPossiblePlacement*retaddr *label132 (h:*label132)
   512 call *label11 *invalid :findPossiblePlacement*retval (m:*label132) (h:*label132)
   513 label *label132
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   514 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   515 set :tryPlaceGenerator*retval false
   516 jump *label119 always
 
   547 setaddr :findPossiblePlacement*retaddr *label137 (h:*label137)
   548 call *label11 *invalid :findPossiblePlacement*retval (m:*label137) (h:*label137)
   549 label *label137
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   550 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   551 set :tryPlaceGenerator*retval false
   552 jump *label119 always
 
   554 label *label139
   555 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   556 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp307 1 :findPossiblePlacement*retval
   557 label *label135
   558 label *label136
   559 set :tryPlaceGenerator*retval true
 
   611 setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
   612 call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
   613 label *label151
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   614 op shl *tmp324 :createAdjacentMask:row1 1
   615 op or *tmp325 :createAdjacentMask:row2 *tmp324
   616 op shr *tmp326 :createAdjacentMask:row1 1
 
   627 label *label150
   628 op shr *tmp317 :createAdjacentMask:result 1
   629 label *label145
-    * set :createCombinedMask:adjacentMask *tmp317
   630 label *label152
   631 wait 1e-15
   632 read *tmp333 processor1 ":createTerrainMask*finished"
 
   658 set .water1X -1
   659 set :moveTo.5:x .drillX
   660 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   661 label *label156
   662 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
   663 jump *label158 notEqual *tmp336 false
-    * op sub *tmp338 1 0.5
   664 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   665 label *label157
   666 jump *label156 always
 
   671 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   672 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   673 label *label159
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   674 set :createFixedMatrix.1:row0 0b0000000
-    * set :createFixedMatrix.1:row1 0b0000000
-    * set :createFixedMatrix.1:row2 0b0011100
-    * set :createFixedMatrix.1:row3 0b0011100
-    * set :createFixedMatrix.1:row4 0b0011100
-    * set :createFixedMatrix.1:row5 0b0000000
-    * set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp341 0b0000000
-    * op shl *tmp342 0b0000000 7
-    * op or *tmp343 :createFixedMatrix.1:row0 0
-    * op shl *tmp344 0b0011100 14
-    * op or *tmp345 *tmp343 458752
-    * op shl *tmp346 0b0011100 21
-    * op or *tmp347 *tmp345 58720256
-    * op shl *tmp348 0b0011100 28
-    * op or *tmp349 *tmp347 7516192768
-    * op shl *tmp350 0b0000000 35
-    * op or *tmp351 *tmp349 0
-    * op shl *tmp352 0b0000000 42
-    * op or *tmp340 *tmp351 0
+  675 op or *tmp343 0b0000000 0
+  676 op or *tmp345 0 458752
+  677 op or *tmp347 458752 58720256
+  678 op or *tmp349 59179008 7516192768
+  679 op or *tmp351 7575371776 0
+  680 op or *tmp340 7575371776 0
   681 label *label160
-    * op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp340
+  682 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   683 set :createFixedMatrix.2:row0 0b1000001
-    * set :createFixedMatrix.2:row1 0b0000000
-    * set :createFixedMatrix.2:row2 0b0011100
-    * set :createFixedMatrix.2:row3 0b0011100
-    * set :createFixedMatrix.2:row4 0b0011100
-    * set :createFixedMatrix.2:row5 0b0000000
-    * set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp356 0b1000001
-    * op shl *tmp357 0b0000000 7
-    * op or *tmp358 :createFixedMatrix.2:row0 0
-    * op shl *tmp359 0b0011100 14
-    * op or *tmp360 *tmp358 458752
-    * op shl *tmp361 0b0011100 21
-    * op or *tmp362 *tmp360 58720256
-    * op shl *tmp363 0b0011100 28
-    * op or *tmp364 *tmp362 7516192768
-    * op shl *tmp365 0b0000000 35
-    * op or *tmp366 *tmp364 0
-    * op shl *tmp367 0b1000001 42
-    * op or *tmp355 *tmp366 285873023221760
+  684 op or *tmp358 0b1000001 0
+  685 op or *tmp360 65 458752
+  686 op or *tmp362 458817 58720256
+  687 op or *tmp364 59179073 7516192768
+  688 op or *tmp366 7575371841 0
+  689 op or *tmp355 7575371841 285873023221760
   690 label *label161
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp355
+  691 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   692 set :createFixedMatrix.3:row0 0b11
-    * set :createFixedMatrix.3:row1 0b11
-    * set *tmp371 0b11
-    * op shl *tmp372 0b11 7
-    * op or *tmp370 :createFixedMatrix.3:row0 384
+  693 op or *tmp370 0b11 384
   694 label *label162
-    * set :layoutThoriumDrillAtLocation:mask2x2 *tmp370
+  695 set :layoutThoriumDrillAtLocation:mask2x2 387
   696 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask *tmp370
+  697 set :findPossiblePlacement:placementMask 387
   698 set :findPossiblePlacement:width 2
   699 set :findPossiblePlacement:height 2
   700 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
   701 call *label11 *invalid :findPossiblePlacement*retval (m:*label163) (h:*label163)
   702 label *label163
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   703 jump *label164 lessThan :findPossiblePlacement*retval 0
   704 op add *tmp377 .drillX 0.5
   705 op add .water1X *tmp377 :findPossiblePlacement:x
 
   707 op add .water1Y *tmp379 :findPossiblePlacement:y
   708 op shl *tmp381 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   709 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
-    * op shl *tmp382 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   710 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp381
   711 label *label164
   712 label *label165
 
   717 setaddr :findPossiblePlacement*retaddr *label166 (h:*label166)
   718 call *label11 *invalid :findPossiblePlacement*retval (m:*label166) (h:*label166)
   719 label *label166
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   720 jump *label167 lessThan :findPossiblePlacement*retval 0
   721 op add *tmp386 .drillX 0.5
   722 op add .containerX *tmp386 :findPossiblePlacement:x
 
   727 label *label167
   728 label *label168
   729 set :createFixedMatrix.4:row0 0b1100011
-    * set :createFixedMatrix.4:row1 0b1000001
-    * set :createFixedMatrix.4:row2 0b0000000
-    * set :createFixedMatrix.4:row3 0b0000000
-    * set :createFixedMatrix.4:row4 0b0000000
-    * set :createFixedMatrix.4:row5 0b1000001
-    * set :createFixedMatrix.4:row6 0b1100011
-    * set *tmp392 0b1100011
-    * op shl *tmp393 0b1000001 7
-    * op or *tmp394 :createFixedMatrix.4:row0 8320
-    * op shl *tmp395 0b0000000 14
-    * op or *tmp396 *tmp394 0
-    * op shl *tmp397 0b0000000 21
-    * op or *tmp398 *tmp396 0
-    * op shl *tmp399 0b0000000 28
-    * op or *tmp400 *tmp398 0
-    * op shl *tmp401 0b1000001 35
-    * op or *tmp402 *tmp400 2233382993920
-    * op shl *tmp403 0b1100011 42
-    * op or *tmp391 *tmp402 435406604599296
+  730 op or *tmp394 0b1100011 8320
+  731 op or *tmp396 8419 0
+  732 op or *tmp398 8419 0
+  733 op or *tmp400 8419 0
+  734 op or *tmp402 8419 2233382993920
+  735 op or *tmp391 2233383002339 435406604599296
   736 label *label169
-    * op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp391
+  737 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   738 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   739 set :findPossiblePlacement:placementMask 1
   740 set :findPossiblePlacement:width 1
 
   742 setaddr :findPossiblePlacement*retaddr *label170 (h:*label170)
   743 call *label11 *invalid :findPossiblePlacement*retval (m:*label170) (h:*label170)
   744 label *label170
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   745 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   746 set :layoutThoriumDrillAtLocation*retval false
   747 jump *label154 always
 
   752 op shl *tmp411 1 :findPossiblePlacement*retval
   753 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
   754 set :createFixedMatrix.5:row0 0b1111
-    * set :createFixedMatrix.5:row1 0b1111
-    * set *tmp413 0b1111
-    * op shl *tmp414 0b1111 7
-    * op or *tmp412 :createFixedMatrix.5:row0 1920
+  755 op or *tmp412 0b1111 1920
   756 label *label173
-    * set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp412
+  757 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   758 set :createFixedMatrix.6:row0 0b11
-    * set :createFixedMatrix.6:row1 0b11
-    * set :createFixedMatrix.6:row2 0b11
-    * set :createFixedMatrix.6:row3 0b11
-    * set *tmp417 0b11
-    * op shl *tmp418 0b11 7
-    * op or *tmp419 :createFixedMatrix.6:row0 384
-    * op shl *tmp420 0b11 14
-    * op or *tmp421 *tmp419 49152
-    * op shl *tmp422 0b11 21
-    * op or *tmp416 *tmp421 6291456
+  759 op or *tmp419 0b11 384
+  760 op or *tmp421 387 49152
+  761 op or *tmp416 49539 6291456
   762 label *label174
-    * set :layoutThoriumDrillAtLocation:generatorVertical *tmp416
+  763 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   764 set :tryPlaceGenerator:centerX .drillX
   765 set :tryPlaceGenerator:centerY .drillY
   766 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal *tmp412
-    * set :tryPlaceGenerator:generatorVertical *tmp416
+  767 set :tryPlaceGenerator:generatorHorizontal 1935
+  768 set :tryPlaceGenerator:generatorVertical 6340995
   769 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   770 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   771 label *label175
 
   807 setaddr :shiftMask*retaddr *label186 (h:*label186)
   808 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
   809 label *label186
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   810 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   811 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
   812 op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-51 instructions):
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp15 :findDrillLocationLocal:x
-    * set *tmp16 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    34 label *label22
-    * ucontrol within .coreX .coreY 6 *tmp17
+   35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp17
    36 jump *label24 notEqual *tmp17 false
-    * ucontrol approach .coreX .coreY 5.5
+   37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label23
    39 jump *label22 always
    40 label *label24
 
    70 op max *tmp38 *tmp35 5
    71 op min *tmp37 *tmp38 *tmp36
    72 label *label32
-    * set :locateOreAway:lx *tmp37
    73 op cos *tmp40 :locateOreAway:a
    74 op mul *tmp41 *tmp40 :locateOreAway:distance
    75 op add *tmp42 :findDrillLocationLocal:y *tmp41
 
    77 op max *tmp45 *tmp42 5
    78 op min *tmp44 *tmp45 *tmp43
    79 label *label33
-    * set :locateOreAway:ly *tmp44
    80 label *label35
    81 ucontrol within *tmp37 *tmp44 5 *tmp47
    82 jump *label37 notEqual *tmp47 false
 
   168 op add .mapSpots .mapSpots 1
   169 label *label58
   170 label *label59
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp97 :locateOreAway:x
-    * set *tmp98 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   171 label *label62
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp99
+  172 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99
   173 jump *label64 notEqual *tmp99 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  174 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   175 label *label63
   176 jump *label62 always
   177 label *label64
 
   351 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   352 jump *label100 always
   353 label *label102
-    * set *tmp201 :createMatrixOfSize:matrix
   354 jump *label99 always
   355 label *label99
   356 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
 
   464 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   465 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
   466 label *label122
-    * set :createFixedMatrix:row0 0b1100011
-    * op or *tmp259 0b1100011 8320
-    * op or *tmp261 8419 0
-    * op or *tmp263 8419 0
-    * op or *tmp265 8419 0
-    * op or *tmp267 8419 2233382993920
-    * op or *tmp256 2233383002339 435406604599296
   467 label *label128
   468 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   469 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   649 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   650 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   651 label *label159
-    * set :createFixedMatrix.1:row0 0b0000000
-    * op or *tmp343 0b0000000 0
-    * op or *tmp345 0 458752
-    * op or *tmp347 458752 58720256
-    * op or *tmp349 59179008 7516192768
-    * op or *tmp351 7575371776 0
-    * op or *tmp340 7575371776 0
   652 label *label160
   653 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * set :createFixedMatrix.2:row0 0b1000001
-    * op or *tmp358 0b1000001 0
-    * op or *tmp360 65 458752
-    * op or *tmp362 458817 58720256
-    * op or *tmp364 59179073 7516192768
-    * op or *tmp366 7575371841 0
-    * op or *tmp355 7575371841 285873023221760
   654 label *label161
   655 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :createFixedMatrix.3:row0 0b11
-    * op or *tmp370 0b11 384
   656 label *label162
   657 set :layoutThoriumDrillAtLocation:mask2x2 387
   658 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   688 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
   689 label *label167
   690 label *label168
-    * set :createFixedMatrix.4:row0 0b1100011
-    * op or *tmp394 0b1100011 8320
-    * op or *tmp396 8419 0
-    * op or *tmp398 8419 0
-    * op or *tmp400 8419 0
-    * op or *tmp402 8419 2233382993920
-    * op or *tmp391 2233383002339 435406604599296
   691 label *label169
   692 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   693 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
 
   706 op add .node1Y .drillY :findPossiblePlacement:y
   707 op shl *tmp411 1 :findPossiblePlacement*retval
   708 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
-    * set :createFixedMatrix.5:row0 0b1111
-    * op or *tmp412 0b1111 1920
   709 label *label173
   710 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * set :createFixedMatrix.6:row0 0b11
-    * op or *tmp419 0b11 384
-    * op or *tmp421 387 49152
-    * op or *tmp416 49539 6291456
   711 label *label174
   712 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   713 set :tryPlaceGenerator:centerX .drillX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    60 set :locateOreAway:lastY -1
    61 op max .angle .angle @pi
    62 op mul .mapProgress .angle .angle
+   63 op sub *tmp36 @mapw 5
+   64 op sub *tmp43 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp33 :locateOreAway:a
    69 op mul *tmp34 *tmp33 :locateOreAway:distance
    70 op add *tmp35 :findDrillLocationLocal:x *tmp34
-    * op sub *tmp36 @mapw 5
    71 op max *tmp38 *tmp35 5
    72 op min *tmp37 *tmp38 *tmp36
    73 label *label32
    74 op cos *tmp40 :locateOreAway:a
    75 op mul *tmp41 *tmp40 :locateOreAway:distance
    76 op add *tmp42 :findDrillLocationLocal:y *tmp41
-    * op sub *tmp43 @maph 5
    77 op max *tmp45 *tmp42 5
    78 op min *tmp44 *tmp45 *tmp43
    79 label *label33

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    64 op sub *tmp43 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   67 label *label202
    68 op div :locateOreAway:a .angle @degToRad
    69 op sin *tmp33 :locateOreAway:a
    70 op mul *tmp34 *tmp33 :locateOreAway:distance
 
   119 set :visited:i .locationsStart
   120 label *label49
   121 jump *label51 greaterThanEq :visited:i *tmp74
+  122 label *label203
   123 op mul :visited:index 4 :visited:i
   124 op add *tmp76 :visited:index 2
   125 read :visited:lx bank1 *tmp76
 
   135 label *label53
   136 label *label50
   137 op add :visited:i :visited:i 1
-    * jump *label49 always
+  138 jump *label203 lessThan :visited:i *tmp74
   139 label *label51
   140 set *tmp73 false
   141 jump *label48 always
 
   154 label *label44
   155 label *label45
   156 label *label30
-    * jump *label29 always
+  157 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   158 label *label31
   159 set *tmp27 false
   160 jump *label28 always
 
   342 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   343 set :createMatrixOfSize:i 1
   344 label *label100
-    * jump *label102 greaterThanEq :createMatrixOfSize:i 7
+  345 label *label204
   346 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   347 jump *label102 always
   348 label *label103
 
   351 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   352 label *label101
   353 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label100 always
+  354 jump *label204 lessThan :createMatrixOfSize:i 7
   355 label *label102
   356 jump *label99 always
   357 label *label99
 
   381 set :findPossiblePlacement:y -3
   382 label *label107
   383 jump *label109 greaterThan :findPossiblePlacement:y 3
+  384 label *label205
   385 op add *tmp215 :findPossiblePlacement:y 3
   386 op mul *tmp216 7 *tmp215
   387 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp216
   388 set :findPossiblePlacement:x -3
   389 label *label110
   390 jump *label112 greaterThan :findPossiblePlacement:x 3
+  391 label *label206
   392 op and *tmp218 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   393 jump *label113 notEqual *tmp218 0
   394 op mul *tmp221 :findPossiblePlacement:y 7
 
   405 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   406 label *label111
   407 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label110 always
+  408 jump *label206 lessThanEq :findPossiblePlacement:x 3
   409 label *label112
   410 op sub *tmp227 3 :findPossiblePlacement:height
   411 jump *label117 lessThanEq :findPossiblePlacement:y *tmp227
 
   414 label *label118
   415 label *label108
   416 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label107 always
+  417 jump *label205 lessThanEq :findPossiblePlacement:y 3
   418 label *label109
   419 set :findPossiblePlacement*retval -1
   420 jump *label106 always
 
   547 set :createBlockMaskRow:result 0
   548 set :createBlockMaskRow:c 4
   549 label *label141
-    * jump *label143 lessThan :createBlockMaskRow:c -4
+  550 label *label207
   551 op shl *tmp308 :createBlockMaskRow:result 1
   552 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
   553 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   554 op or :createBlockMaskRow:result *tmp308 *tmp310
   555 label *label142
   556 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label141 always
+  557 jump *label207 greaterThanEq :createBlockMaskRow:c -4
   558 label *label143
   559 set :createBlockMaskRow*retval :createBlockMaskRow:result
   560 jump *label140 always
 
   586 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   587 set :createAdjacentMask:r 2
   588 label *label148
-    * jump *label150 lessThan :createAdjacentMask:r -4
+  589 label *label208
   590 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
   591 set :createBlockMaskRow:x :createAdjacentMask:x
   592 set :createBlockMaskRow:y *tmp322
 
   605 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   606 label *label149
   607 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label148 always
+  608 jump *label208 greaterThanEq :createAdjacentMask:r -4
   609 label *label150
   610 op shr *tmp317 :createAdjacentMask:result 1
   611 label *label145

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   210 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   211 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   212 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
-    * set .mapSpots :findDrillLocationLocal:score
-    * label *label73
-    * label *label74
+  213 select .mapSpots lessThan :findDrillLocationLocal:limit 1000 :findDrillLocationLocal:score .mapSpots
   214 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   215 op add .count .count 1
   216 sensor *tmp128 :findDrillLocationLocal:item @id

Modifications by Replicate loop condition at OreLocator.mnd:45:5 (+1 instructions):
 
    81 label *label35
    82 ucontrol within *tmp37 *tmp44 5 *tmp47
    83 jump *label37 notEqual *tmp47 false
+   84 label *label209
    85 ucontrol approach *tmp37 *tmp44 4.5
    86 label *label36
-    * jump *label35 always
+   87 ucontrol within *tmp37 *tmp44 5 *tmp47
+   88 jump *label209 equal *tmp47 false
    89 label *label37
    90 label *label34
    91 op div *tmp50 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   120 set *tmp74 .locations
   121 set :visited:i .locationsStart
   122 label *label49
-    * jump *label51 greaterThanEq :visited:i *tmp74
+  123 jump *label51 greaterThanEq .locationsStart *tmp74
   124 label *label203
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp76 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:474:5 (+39 instructions):
 
   544 end
   545 label *label13
   546 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label141
-    * label *label207
-    * op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label142
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label207 greaterThanEq :createBlockMaskRow:c -4
-    * label *label143
+  547 set :createBlockMaskRow:c 4
+  548 label *label210
+  549 label *label211
+  550 op shl *tmp308 :createBlockMaskRow:result 1
+  551 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  552 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  553 op or :createBlockMaskRow:result *tmp308 *tmp310
+  554 label *label212
+  555 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  556 label *label213
+  557 op shl *tmp308 :createBlockMaskRow:result 1
+  558 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  559 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  560 op or :createBlockMaskRow:result *tmp308 *tmp310
+  561 label *label214
+  562 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  563 label *label215
+  564 op shl *tmp308 :createBlockMaskRow:result 1
+  565 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  566 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  567 op or :createBlockMaskRow:result *tmp308 *tmp310
+  568 label *label216
+  569 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  570 label *label217
+  571 op shl *tmp308 :createBlockMaskRow:result 1
+  572 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  573 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  574 op or :createBlockMaskRow:result *tmp308 *tmp310
+  575 label *label218
+  576 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  577 label *label219
+  578 op shl *tmp308 :createBlockMaskRow:result 1
+  579 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  580 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  581 op or :createBlockMaskRow:result *tmp308 *tmp310
+  582 label *label220
+  583 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  584 label *label221
+  585 op shl *tmp308 :createBlockMaskRow:result 1
+  586 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  587 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  588 op or :createBlockMaskRow:result *tmp308 *tmp310
+  589 label *label222
+  590 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  591 label *label223
+  592 op shl *tmp308 :createBlockMaskRow:result 1
+  593 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  594 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  595 op or :createBlockMaskRow:result *tmp308 *tmp310
+  596 label *label224
+  597 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  598 label *label225
+  599 op shl *tmp308 :createBlockMaskRow:result 1
+  600 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  601 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  602 op or :createBlockMaskRow:result *tmp308 *tmp310
+  603 label *label226
+  604 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  605 label *label227
+  606 op shl *tmp308 :createBlockMaskRow:result 1
+  607 op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  608 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  609 op or :createBlockMaskRow:result *tmp308 *tmp310
+  610 label *label228
+  611 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  612 label *label143
   613 set :createBlockMaskRow*retval :createBlockMaskRow:result
   614 jump *label140 always
   615 label *label140

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   547 set :createBlockMaskRow:c 4
   548 label *label210
   549 label *label211
-    * op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  550 op shl *tmp308 0 1
+  551 op add *tmp309 :createBlockMaskRow:x 4
   552 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result *tmp308 *tmp310
+  553 op or :createBlockMaskRow:result 0 *tmp310
   554 label *label212
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  555 op sub :createBlockMaskRow:c 4 1
   556 label *label213
   557 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  558 op add *tmp309 :createBlockMaskRow:x 3
   559 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   560 op or :createBlockMaskRow:result *tmp308 *tmp310
   561 label *label214
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  562 op sub :createBlockMaskRow:c 3 1
   563 label *label215
   564 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  565 op add *tmp309 :createBlockMaskRow:x 2
   566 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   567 op or :createBlockMaskRow:result *tmp308 *tmp310
   568 label *label216
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  569 op sub :createBlockMaskRow:c 2 1
   570 label *label217
   571 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  572 op add *tmp309 :createBlockMaskRow:x 1
   573 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   574 op or :createBlockMaskRow:result *tmp308 *tmp310
   575 label *label218
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  576 op sub :createBlockMaskRow:c 1 1
   577 label *label219
   578 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  579 op add *tmp309 :createBlockMaskRow:x 0
   580 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   581 op or :createBlockMaskRow:result *tmp308 *tmp310
   582 label *label220
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  583 op sub :createBlockMaskRow:c 0 1
   584 label *label221
   585 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  586 op add *tmp309 :createBlockMaskRow:x -1
   587 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   588 op or :createBlockMaskRow:result *tmp308 *tmp310
   589 label *label222
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  590 op sub :createBlockMaskRow:c -1 1
   591 label *label223
   592 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  593 op add *tmp309 :createBlockMaskRow:x -2
   594 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   595 op or :createBlockMaskRow:result *tmp308 *tmp310
   596 label *label224
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  597 op sub :createBlockMaskRow:c -2 1
   598 label *label225
   599 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  600 op add *tmp309 :createBlockMaskRow:x -3
   601 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   602 op or :createBlockMaskRow:result *tmp308 *tmp310
   603 label *label226
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  604 op sub :createBlockMaskRow:c -3 1
   605 label *label227
   606 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x :createBlockMaskRow:c
+  607 op add *tmp309 :createBlockMaskRow:x -4
   608 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   609 op or :createBlockMaskRow:result *tmp308 *tmp310
   610 label *label228
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  611 op sub :createBlockMaskRow:c -4 1
   612 label *label143
   613 set :createBlockMaskRow*retval :createBlockMaskRow:result
   614 jump *label140 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   543 return :tryPlaceGenerator*retaddr
   544 end
   545 label *label13
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   546 label *label210
   547 label *label211
-    * op shl *tmp308 0 1
   548 op add *tmp309 :createBlockMaskRow:x 4
   549 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   550 op or :createBlockMaskRow:result 0 *tmp310
   551 label *label212
-    * op sub :createBlockMaskRow:c 4 1
   552 label *label213
   553 op shl *tmp308 :createBlockMaskRow:result 1
   554 op add *tmp309 :createBlockMaskRow:x 3
   555 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   556 op or :createBlockMaskRow:result *tmp308 *tmp310
   557 label *label214
-    * op sub :createBlockMaskRow:c 3 1
   558 label *label215
   559 op shl *tmp308 :createBlockMaskRow:result 1
   560 op add *tmp309 :createBlockMaskRow:x 2
   561 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   562 op or :createBlockMaskRow:result *tmp308 *tmp310
   563 label *label216
-    * op sub :createBlockMaskRow:c 2 1
   564 label *label217
   565 op shl *tmp308 :createBlockMaskRow:result 1
   566 op add *tmp309 :createBlockMaskRow:x 1
   567 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   568 op or :createBlockMaskRow:result *tmp308 *tmp310
   569 label *label218
-    * op sub :createBlockMaskRow:c 1 1
   570 label *label219
   571 op shl *tmp308 :createBlockMaskRow:result 1
   572 op add *tmp309 :createBlockMaskRow:x 0
   573 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   574 op or :createBlockMaskRow:result *tmp308 *tmp310
   575 label *label220
-    * op sub :createBlockMaskRow:c 0 1
   576 label *label221
   577 op shl *tmp308 :createBlockMaskRow:result 1
   578 op add *tmp309 :createBlockMaskRow:x -1
   579 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   580 op or :createBlockMaskRow:result *tmp308 *tmp310
   581 label *label222
-    * op sub :createBlockMaskRow:c -1 1
   582 label *label223
   583 op shl *tmp308 :createBlockMaskRow:result 1
   584 op add *tmp309 :createBlockMaskRow:x -2
   585 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   586 op or :createBlockMaskRow:result *tmp308 *tmp310
   587 label *label224
-    * op sub :createBlockMaskRow:c -2 1
   588 label *label225
   589 op shl *tmp308 :createBlockMaskRow:result 1
   590 op add *tmp309 :createBlockMaskRow:x -3
   591 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   592 op or :createBlockMaskRow:result *tmp308 *tmp310
   593 label *label226
-    * op sub :createBlockMaskRow:c -3 1
   594 label *label227
   595 op shl *tmp308 :createBlockMaskRow:result 1
   596 op add *tmp309 :createBlockMaskRow:x -4
   597 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   598 op or :createBlockMaskRow:result *tmp308 *tmp310
   599 label *label228
-    * op sub :createBlockMaskRow:c -4 1
   600 label *label143
   601 set :createBlockMaskRow*retval :createBlockMaskRow:result
   602 jump *label140 always

Modifications by Replicate loop condition at OreLocator.mnd:45:5 (+1 instructions):
 
   175 label *label62
   176 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99
   177 jump *label64 notEqual *tmp99 false
+  178 label *label229
   179 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   180 label *label63
-    * jump *label62 always
+  181 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99
+  182 jump *label229 equal *tmp99 false
   183 label *label64
   184 label *label61
   185 label *label60

Modifications by Unroll loop at OreLocator.mnd:353:5 (+24 instructions):
 
   341 op shl *tmp202 1 :excludeArea:blockSizeX
   342 op sub :createMatrixOfSize:row *tmp202 1
   343 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
-    * label *label100
-    * label *label204
-    * jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
-    * jump *label102 always
-    * label *label103
-    * label *label104
-    * op shl *tmp206 :createMatrixOfSize:matrix 7
-    * op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label101
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label204 lessThan :createMatrixOfSize:i 7
-    * label *label102
+  344 set :createMatrixOfSize:i 1
+  345 label *label230
+  346 label *label231
+  347 jump *label232 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  348 jump *label102 always
+  349 label *label232
+  350 label *label233
+  351 op shl *tmp206 :createMatrixOfSize:matrix 7
+  352 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  353 label *label234
+  354 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  355 label *label235
+  356 jump *label236 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  357 jump *label102 always
+  358 label *label236
+  359 label *label237
+  360 op shl *tmp206 :createMatrixOfSize:matrix 7
+  361 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  362 label *label238
+  363 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  364 label *label239
+  365 jump *label240 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  366 jump *label102 always
+  367 label *label240
+  368 label *label241
+  369 op shl *tmp206 :createMatrixOfSize:matrix 7
+  370 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  371 label *label242
+  372 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  373 label *label243
+  374 jump *label244 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  375 jump *label102 always
+  376 label *label244
+  377 label *label245
+  378 op shl *tmp206 :createMatrixOfSize:matrix 7
+  379 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  380 label *label246
+  381 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  382 label *label247
+  383 jump *label248 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  384 jump *label102 always
+  385 label *label248
+  386 label *label249
+  387 op shl *tmp206 :createMatrixOfSize:matrix 7
+  388 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  389 label *label250
+  390 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  391 label *label251
+  392 jump *label252 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  393 jump *label102 always
+  394 label *label252
+  395 label *label253
+  396 op shl *tmp206 :createMatrixOfSize:matrix 7
+  397 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
+  398 label *label254
+  399 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  400 label *label102
   401 jump *label99 always
   402 label *label99
   403 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   344 set :createMatrixOfSize:i 1
   345 label *label230
   346 label *label231
-    * jump *label232 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  347 jump *label232 lessThan 1 :excludeArea:blockSizeY
   348 jump *label102 always
   349 label *label232
   350 label *label233
-    * op shl *tmp206 :createMatrixOfSize:matrix 7
+  351 op shl *tmp206 :createMatrixOfSize:row 7
   352 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   353 label *label234
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  354 op add :createMatrixOfSize:i 1 1
   355 label *label235
-    * jump *label236 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  356 jump *label236 lessThan 2 :excludeArea:blockSizeY
   357 jump *label102 always
   358 label *label236
   359 label *label237
   360 op shl *tmp206 :createMatrixOfSize:matrix 7
   361 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   362 label *label238
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  363 op add :createMatrixOfSize:i 2 1
   364 label *label239
-    * jump *label240 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  365 jump *label240 lessThan 3 :excludeArea:blockSizeY
   366 jump *label102 always
   367 label *label240
   368 label *label241
   369 op shl *tmp206 :createMatrixOfSize:matrix 7
   370 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   371 label *label242
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  372 op add :createMatrixOfSize:i 3 1
   373 label *label243
-    * jump *label244 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  374 jump *label244 lessThan 4 :excludeArea:blockSizeY
   375 jump *label102 always
   376 label *label244
   377 label *label245
   378 op shl *tmp206 :createMatrixOfSize:matrix 7
   379 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   380 label *label246
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  381 op add :createMatrixOfSize:i 4 1
   382 label *label247
-    * jump *label248 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  383 jump *label248 lessThan 5 :excludeArea:blockSizeY
   384 jump *label102 always
   385 label *label248
   386 label *label249
   387 op shl *tmp206 :createMatrixOfSize:matrix 7
   388 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   389 label *label250
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  390 op add :createMatrixOfSize:i 5 1
   391 label *label251
-    * jump *label252 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  392 jump *label252 lessThan 6 :excludeArea:blockSizeY
   393 jump *label102 always
   394 label *label252
   395 label *label253
   396 op shl *tmp206 :createMatrixOfSize:matrix 7
   397 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   398 label *label254
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  399 op add :createMatrixOfSize:i 6 1
   400 label *label102
   401 jump *label99 always
   402 label *label99

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   341 op shl *tmp202 1 :excludeArea:blockSizeX
   342 op sub :createMatrixOfSize:row *tmp202 1
   343 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
   344 label *label230
   345 label *label231
   346 jump *label232 lessThan 1 :excludeArea:blockSizeY
 
   350 op shl *tmp206 :createMatrixOfSize:row 7
   351 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   352 label *label234
-    * op add :createMatrixOfSize:i 1 1
   353 label *label235
   354 jump *label236 lessThan 2 :excludeArea:blockSizeY
   355 jump *label102 always
 
   358 op shl *tmp206 :createMatrixOfSize:matrix 7
   359 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   360 label *label238
-    * op add :createMatrixOfSize:i 2 1
   361 label *label239
   362 jump *label240 lessThan 3 :excludeArea:blockSizeY
   363 jump *label102 always
 
   366 op shl *tmp206 :createMatrixOfSize:matrix 7
   367 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   368 label *label242
-    * op add :createMatrixOfSize:i 3 1
   369 label *label243
   370 jump *label244 lessThan 4 :excludeArea:blockSizeY
   371 jump *label102 always
 
   374 op shl *tmp206 :createMatrixOfSize:matrix 7
   375 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   376 label *label246
-    * op add :createMatrixOfSize:i 4 1
   377 label *label247
   378 jump *label248 lessThan 5 :excludeArea:blockSizeY
   379 jump *label102 always
 
   382 op shl *tmp206 :createMatrixOfSize:matrix 7
   383 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   384 label *label250
-    * op add :createMatrixOfSize:i 5 1
   385 label *label251
   386 jump *label252 lessThan 6 :excludeArea:blockSizeY
   387 jump *label102 always
 
   390 op shl *tmp206 :createMatrixOfSize:matrix 7
   391 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   392 label *label254
-    * op add :createMatrixOfSize:i 6 1
   393 label *label102
   394 jump *label99 always
   395 label *label99

Modifications by Unroll loop at OreLocator.mnd:488:5 (+95 instructions):
 
   665 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
   666 label *label147
   667 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label148
-    * label *label208
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
-    * label *label151
-    * op shl *tmp324 :createAdjacentMask:row1 1
-    * op or *tmp325 :createAdjacentMask:row2 *tmp324
-    * op shr *tmp326 :createAdjacentMask:row1 1
-    * op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
-    * op shl *tmp329 :createAdjacentMask:result 7
-    * op and *tmp330 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp329 *tmp330
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label149
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label208 greaterThanEq :createAdjacentMask:r -4
-    * label *label150
+  668 set :createAdjacentMask:r 2
+  669 label *label255
+  670 label *label256
+  671 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  672 set :createBlockMaskRow:x :createAdjacentMask:x
+  673 set :createBlockMaskRow:y *tmp322
+  674 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
+  675 call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)
+  676 label *label257
+  677 op shl *tmp324 :createAdjacentMask:row1 1
+  678 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  679 op shr *tmp326 :createAdjacentMask:row1 1
+  680 op or *tmp327 *tmp325 *tmp326
+  681 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  682 op shl *tmp329 :createAdjacentMask:result 7
+  683 op and *tmp330 :createAdjacentMask:mask 0xFE
+  684 op or :createAdjacentMask:result *tmp329 *tmp330
+  685 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  686 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  687 label *label258
+  688 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  689 label *label259
+  690 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  691 set :createBlockMaskRow:x :createAdjacentMask:x
+  692 set :createBlockMaskRow:y *tmp322
+  693 setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
+  694 call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)
+  695 label *label260
+  696 op shl *tmp324 :createAdjacentMask:row1 1
+  697 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  698 op shr *tmp326 :createAdjacentMask:row1 1
+  699 op or *tmp327 *tmp325 *tmp326
+  700 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  701 op shl *tmp329 :createAdjacentMask:result 7
+  702 op and *tmp330 :createAdjacentMask:mask 0xFE
+  703 op or :createAdjacentMask:result *tmp329 *tmp330
+  704 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  705 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  706 label *label261
+  707 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  708 label *label262
+  709 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  710 set :createBlockMaskRow:x :createAdjacentMask:x
+  711 set :createBlockMaskRow:y *tmp322
+  712 setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
+  713 call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)
+  714 label *label263
+  715 op shl *tmp324 :createAdjacentMask:row1 1
+  716 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  717 op shr *tmp326 :createAdjacentMask:row1 1
+  718 op or *tmp327 *tmp325 *tmp326
+  719 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  720 op shl *tmp329 :createAdjacentMask:result 7
+  721 op and *tmp330 :createAdjacentMask:mask 0xFE
+  722 op or :createAdjacentMask:result *tmp329 *tmp330
+  723 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  724 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  725 label *label264
+  726 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  727 label *label265
+  728 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  729 set :createBlockMaskRow:x :createAdjacentMask:x
+  730 set :createBlockMaskRow:y *tmp322
+  731 setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
+  732 call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)
+  733 label *label266
+  734 op shl *tmp324 :createAdjacentMask:row1 1
+  735 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  736 op shr *tmp326 :createAdjacentMask:row1 1
+  737 op or *tmp327 *tmp325 *tmp326
+  738 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  739 op shl *tmp329 :createAdjacentMask:result 7
+  740 op and *tmp330 :createAdjacentMask:mask 0xFE
+  741 op or :createAdjacentMask:result *tmp329 *tmp330
+  742 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  743 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  744 label *label267
+  745 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  746 label *label268
+  747 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  748 set :createBlockMaskRow:x :createAdjacentMask:x
+  749 set :createBlockMaskRow:y *tmp322
+  750 setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
+  751 call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)
+  752 label *label269
+  753 op shl *tmp324 :createAdjacentMask:row1 1
+  754 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  755 op shr *tmp326 :createAdjacentMask:row1 1
+  756 op or *tmp327 *tmp325 *tmp326
+  757 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  758 op shl *tmp329 :createAdjacentMask:result 7
+  759 op and *tmp330 :createAdjacentMask:mask 0xFE
+  760 op or :createAdjacentMask:result *tmp329 *tmp330
+  761 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  762 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  763 label *label270
+  764 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  765 label *label271
+  766 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  767 set :createBlockMaskRow:x :createAdjacentMask:x
+  768 set :createBlockMaskRow:y *tmp322
+  769 setaddr :createBlockMaskRow*retaddr *label272 (h:*label272)
+  770 call *label13 *invalid :createBlockMaskRow*retval (m:*label272) (h:*label272)
+  771 label *label272
+  772 op shl *tmp324 :createAdjacentMask:row1 1
+  773 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  774 op shr *tmp326 :createAdjacentMask:row1 1
+  775 op or *tmp327 *tmp325 *tmp326
+  776 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  777 op shl *tmp329 :createAdjacentMask:result 7
+  778 op and *tmp330 :createAdjacentMask:mask 0xFE
+  779 op or :createAdjacentMask:result *tmp329 *tmp330
+  780 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  781 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  782 label *label273
+  783 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  784 label *label274
+  785 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  786 set :createBlockMaskRow:x :createAdjacentMask:x
+  787 set :createBlockMaskRow:y *tmp322
+  788 setaddr :createBlockMaskRow*retaddr *label275 (h:*label275)
+  789 call *label13 *invalid :createBlockMaskRow*retval (m:*label275) (h:*label275)
+  790 label *label275
+  791 op shl *tmp324 :createAdjacentMask:row1 1
+  792 op or *tmp325 :createAdjacentMask:row2 *tmp324
+  793 op shr *tmp326 :createAdjacentMask:row1 1
+  794 op or *tmp327 *tmp325 *tmp326
+  795 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  796 op shl *tmp329 :createAdjacentMask:result 7
+  797 op and *tmp330 :createAdjacentMask:mask 0xFE
+  798 op or :createAdjacentMask:result *tmp329 *tmp330
+  799 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  800 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  801 label *label276
+  802 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  803 label *label150
   804 op shr *tmp317 :createAdjacentMask:result 1
   805 label *label145
   806 label *label152

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   668 set :createAdjacentMask:r 2
   669 label *label255
   670 label *label256
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
+  671 op add *tmp322 :createAdjacentMask:y 2
   672 set :createBlockMaskRow:x :createAdjacentMask:x
   673 set :createBlockMaskRow:y *tmp322
   674 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)

Modifications by Replicate loop condition at OreLocator.mnd:45:5 (+1 instructions):
 
    34 label *label22
    35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp17
    36 jump *label24 notEqual *tmp17 false
+   37 label *label277
    38 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    39 label *label23
-    * jump *label22 always
+   40 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp17
+   41 jump *label277 equal *tmp17 false
    42 label *label24
    43 label *label21
    44 label *label20

Modifications by Replicate loop condition at OreLocator.mnd:45:5 (+1 instructions):
 
   839 label *label156
   840 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
   841 jump *label158 notEqual *tmp336 false
+  842 label *label278
   843 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   844 label *label157
-    * jump *label156 always
+  845 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
+  846 jump *label278 equal *tmp336 false
   847 label *label158
   848 label *label155
   849 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:276:1 (+24 instructions):
 
   281 label *label19
   282 return :findDrillLocationLocal*retaddr
   283 end
-    * label *label9
-    * op abs *tmp160 :shiftMask:shiftX
-    * op greaterThan *tmp161 *tmp160 6
-    * op abs *tmp162 :shiftMask:shiftY
-    * op greaterThan *tmp163 *tmp162 6
-    * op or *tmp164 *tmp161 *tmp163
-    * jump *label88 equal *tmp164 false
-    * set :shiftMask*retval 0
-    * jump *label87 always
-    * label *label88
-    * label *label89
-    * op mul *tmp166 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp166
-    * jump *label90 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp171 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp171 :shiftMask:shift
-    * jump *label91 always
-    * label *label90
-    * op sub *tmp173 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp173
-    * label *label91
-    * jump *label92 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp160
-    * jump *label94 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label94
-    * label *label95
-    * op shl *tmp180 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp180
-    * op shl *tmp181 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp181
-    * op shl *tmp182 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp182
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label92
-    * label *label93
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label87 always
-    * label *label87
-    * return :shiftMask*retaddr
-    * end
   284 label *label10
   285 op add *tmp184 :excludeArea:areaWidth 8
   286 op idiv *tmp185 *tmp184 2
 
   362 set :shiftMask:mask :createMatrixOfSize:matrix
   363 set :shiftMask:shiftX :excludeArea:shiftX
   364 set :shiftMask:shiftY :excludeArea:shiftY
-    * setaddr :shiftMask*retaddr *label105 (h:*label105)
-    * call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
-    * label *label105
+  365 label *label279
+  366 op abs *tmp160 :shiftMask:shiftX
+  367 op greaterThan *tmp161 *tmp160 6
+  368 op abs *tmp162 :shiftMask:shiftY
+  369 op greaterThan *tmp163 *tmp162 6
+  370 op or *tmp164 *tmp161 *tmp163
+  371 jump *label280 equal *tmp164 false
+  372 set :shiftMask*retval 0
+  373 jump *label288 always
+  374 label *label280
+  375 label *label281
+  376 op mul *tmp166 7 :shiftMask:shiftY
+  377 op add :shiftMask:shift :shiftMask:shiftX *tmp166
+  378 jump *label282 lessThanEq :shiftMask:shift 0
+  379 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  380 op and *tmp171 :shiftMask:mask :shiftMask:clearMask
+  381 op shl :shiftMask:mask *tmp171 :shiftMask:shift
+  382 jump *label283 always
+  383 label *label282
+  384 op sub *tmp173 0 :shiftMask:shift
+  385 op shr :shiftMask:mask :shiftMask:mask *tmp173
+  386 label *label283
+  387 jump *label286 equal :shiftMask:shiftX 0
+  388 op shr :shiftMask:keep 0b1111111 *tmp160
+  389 jump *label284 lessThanEq :shiftMask:shiftX 0
+  390 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  391 label *label284
+  392 label *label285
+  393 op shl *tmp180 :shiftMask:keep 7
+  394 op or :shiftMask:keep :shiftMask:keep *tmp180
+  395 op shl *tmp181 :shiftMask:keep 14
+  396 op or :shiftMask:keep :shiftMask:keep *tmp181
+  397 op shl *tmp182 :shiftMask:keep 21
+  398 op or :shiftMask:keep :shiftMask:keep *tmp182
+  399 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  400 label *label286
+  401 label *label287
+  402 set :shiftMask*retval :shiftMask:mask
+  403 jump *label288 always
+  404 label *label288
   405 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   406 jump *label96 always
   407 jump *label98 always
 
   950 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   951 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   952 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label186 (h:*label186)
-    * call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
-    * label *label186
+  953 label *label289
+  954 op abs *tmp160 :shiftMask:shiftX
+  955 op greaterThan *tmp161 *tmp160 6
+  956 op abs *tmp162 :shiftMask:shiftY
+  957 op greaterThan *tmp163 *tmp162 6
+  958 op or *tmp164 *tmp161 *tmp163
+  959 jump *label290 equal *tmp164 false
+  960 set :shiftMask*retval 0
+  961 jump *label298 always
+  962 label *label290
+  963 label *label291
+  964 op mul *tmp166 7 :shiftMask:shiftY
+  965 op add :shiftMask:shift :shiftMask:shiftX *tmp166
+  966 jump *label292 lessThanEq :shiftMask:shift 0
+  967 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  968 op and *tmp171 :shiftMask:mask :shiftMask:clearMask
+  969 op shl :shiftMask:mask *tmp171 :shiftMask:shift
+  970 jump *label293 always
+  971 label *label292
+  972 op sub *tmp173 0 :shiftMask:shift
+  973 op shr :shiftMask:mask :shiftMask:mask *tmp173
+  974 label *label293
+  975 jump *label296 equal :shiftMask:shiftX 0
+  976 op shr :shiftMask:keep 0b1111111 *tmp160
+  977 jump *label294 lessThanEq :shiftMask:shiftX 0
+  978 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  979 label *label294
+  980 label *label295
+  981 op shl *tmp180 :shiftMask:keep 7
+  982 op or :shiftMask:keep :shiftMask:keep *tmp180
+  983 op shl *tmp181 :shiftMask:keep 14
+  984 op or :shiftMask:keep :shiftMask:keep *tmp181
+  985 op shl *tmp182 :shiftMask:keep 21
+  986 op or :shiftMask:keep :shiftMask:keep *tmp182
+  987 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  988 label *label296
+  989 label *label297
+  990 set :shiftMask*retval :shiftMask:mask
+  991 jump *label298 always
+  992 label *label298
   993 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   994 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
   995 op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   363 set :shiftMask:shiftX :excludeArea:shiftX
   364 set :shiftMask:shiftY :excludeArea:shiftY
   365 label *label279
-    * op abs *tmp160 :shiftMask:shiftX
+  366 op abs *tmp160 :excludeArea:shiftX
   367 op greaterThan *tmp161 *tmp160 6
-    * op abs *tmp162 :shiftMask:shiftY
+  368 op abs *tmp162 :excludeArea:shiftY
   369 op greaterThan *tmp163 *tmp162 6
   370 op or *tmp164 *tmp161 *tmp163
   371 jump *label280 equal *tmp164 false
 
   373 jump *label288 always
   374 label *label280
   375 label *label281
-    * op mul *tmp166 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp166
+  376 op mul *tmp166 7 :excludeArea:shiftY
+  377 op add :shiftMask:shift :excludeArea:shiftX *tmp166
   378 jump *label282 lessThanEq :shiftMask:shift 0
   379 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp171 :shiftMask:mask :shiftMask:clearMask
+  380 op and *tmp171 :createMatrixOfSize:matrix :shiftMask:clearMask
   381 op shl :shiftMask:mask *tmp171 :shiftMask:shift
   382 jump *label283 always
   383 label *label282
   384 op sub *tmp173 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp173
+  385 op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp173
   386 label *label283
-    * jump *label286 equal :shiftMask:shiftX 0
+  387 jump *label286 equal :excludeArea:shiftX 0
   388 op shr :shiftMask:keep 0b1111111 *tmp160
-    * jump *label284 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  389 jump *label284 lessThanEq :excludeArea:shiftX 0
+  390 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   391 label *label284
   392 label *label285
   393 op shl *tmp180 :shiftMask:keep 7
 
   951 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   952 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   953 label *label289
-    * op abs *tmp160 :shiftMask:shiftX
+  954 op abs *tmp160 :layoutThoriumDrillAtLocation:sx
   955 op greaterThan *tmp161 *tmp160 6
-    * op abs *tmp162 :shiftMask:shiftY
+  956 op abs *tmp162 :layoutThoriumDrillAtLocation:sy
   957 op greaterThan *tmp163 *tmp162 6
   958 op or *tmp164 *tmp161 *tmp163
   959 jump *label290 equal *tmp164 false
 
   961 jump *label298 always
   962 label *label290
   963 label *label291
-    * op mul *tmp166 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp166
+  964 op mul *tmp166 7 :layoutThoriumDrillAtLocation:sy
+  965 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp166
   966 jump *label292 lessThanEq :shiftMask:shift 0
   967 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp171 :shiftMask:mask :shiftMask:clearMask
+  968 op and *tmp171 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   969 op shl :shiftMask:mask *tmp171 :shiftMask:shift
   970 jump *label293 always
   971 label *label292
   972 op sub *tmp173 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp173
+  973 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp173
   974 label *label293
-    * jump *label296 equal :shiftMask:shiftX 0
+  975 jump *label296 equal :layoutThoriumDrillAtLocation:sx 0
   976 op shr :shiftMask:keep 0b1111111 *tmp160
-    * jump *label294 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  977 jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  978 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   979 label *label294
   980 label *label295
   981 op shl *tmp180 :shiftMask:keep 7
 
   990 set :shiftMask*retval :shiftMask:mask
   991 jump *label298 always
   992 label *label298
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  993 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   994 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
   995 op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy
   996 set :tryPlaceGenerator:centerX *tmp432

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   359 op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY
   360 op sub *tmp212 7 :excludeArea:blockSizeY
   361 op mul :excludeArea:shiftY *tmp211 *tmp212
-    * set :shiftMask:mask :createMatrixOfSize:matrix
-    * set :shiftMask:shiftX :excludeArea:shiftX
-    * set :shiftMask:shiftY :excludeArea:shiftY
   362 label *label279
   363 op abs *tmp160 :excludeArea:shiftX
   364 op greaterThan *tmp161 *tmp160 6
 
   943 setaddr :createCombinedMask*retaddr *label185 (h:*label185)
   944 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
   945 label *label185
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   946 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   947 label *label289
   948 op abs *tmp160 :layoutThoriumDrillAtLocation:sx
   949 op greaterThan *tmp161 *tmp160 6

Modifications by Inline function call at OreLocator.mnd:485:16 (+35 instructions):
 
   648 op add *tmp318 :createCombinedMask:y 4
   649 set :createBlockMaskRow:x :createCombinedMask:x
   650 set :createBlockMaskRow:y *tmp318
-    * setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
-    * label *label146
+  651 label *label299
+  652 label *label300
+  653 label *label301
+  654 op add *tmp309 :createBlockMaskRow:x 4
+  655 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  656 op or :createBlockMaskRow:result 0 *tmp310
+  657 label *label302
+  658 label *label303
+  659 op shl *tmp308 :createBlockMaskRow:result 1
+  660 op add *tmp309 :createBlockMaskRow:x 3
+  661 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  662 op or :createBlockMaskRow:result *tmp308 *tmp310
+  663 label *label304
+  664 label *label305
+  665 op shl *tmp308 :createBlockMaskRow:result 1
+  666 op add *tmp309 :createBlockMaskRow:x 2
+  667 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  668 op or :createBlockMaskRow:result *tmp308 *tmp310
+  669 label *label306
+  670 label *label307
+  671 op shl *tmp308 :createBlockMaskRow:result 1
+  672 op add *tmp309 :createBlockMaskRow:x 1
+  673 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  674 op or :createBlockMaskRow:result *tmp308 *tmp310
+  675 label *label308
+  676 label *label309
+  677 op shl *tmp308 :createBlockMaskRow:result 1
+  678 op add *tmp309 :createBlockMaskRow:x 0
+  679 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  680 op or :createBlockMaskRow:result *tmp308 *tmp310
+  681 label *label310
+  682 label *label311
+  683 op shl *tmp308 :createBlockMaskRow:result 1
+  684 op add *tmp309 :createBlockMaskRow:x -1
+  685 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  686 op or :createBlockMaskRow:result *tmp308 *tmp310
+  687 label *label312
+  688 label *label313
+  689 op shl *tmp308 :createBlockMaskRow:result 1
+  690 op add *tmp309 :createBlockMaskRow:x -2
+  691 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  692 op or :createBlockMaskRow:result *tmp308 *tmp310
+  693 label *label314
+  694 label *label315
+  695 op shl *tmp308 :createBlockMaskRow:result 1
+  696 op add *tmp309 :createBlockMaskRow:x -3
+  697 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  698 op or :createBlockMaskRow:result *tmp308 *tmp310
+  699 label *label316
+  700 label *label317
+  701 op shl *tmp308 :createBlockMaskRow:result 1
+  702 op add *tmp309 :createBlockMaskRow:x -4
+  703 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  704 op or :createBlockMaskRow:result *tmp308 *tmp310
+  705 label *label318
+  706 label *label319
+  707 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  708 jump *label320 always
+  709 label *label320
   710 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   711 op add *tmp320 :createAdjacentMask:y 3
   712 set :createBlockMaskRow:x :createAdjacentMask:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   651 label *label299
   652 label *label300
   653 label *label301
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  654 op add *tmp309 :createCombinedMask:x 4
+  655 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   656 op or :createBlockMaskRow:result 0 *tmp310
   657 label *label302
   658 label *label303
   659 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  660 op add *tmp309 :createCombinedMask:x 3
+  661 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   662 op or :createBlockMaskRow:result *tmp308 *tmp310
   663 label *label304
   664 label *label305
   665 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  666 op add *tmp309 :createCombinedMask:x 2
+  667 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   668 op or :createBlockMaskRow:result *tmp308 *tmp310
   669 label *label306
   670 label *label307
   671 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  672 op add *tmp309 :createCombinedMask:x 1
+  673 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   674 op or :createBlockMaskRow:result *tmp308 *tmp310
   675 label *label308
   676 label *label309
   677 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  678 op add *tmp309 :createCombinedMask:x 0
+  679 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   680 op or :createBlockMaskRow:result *tmp308 *tmp310
   681 label *label310
   682 label *label311
   683 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  684 op add *tmp309 :createCombinedMask:x -1
+  685 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   686 op or :createBlockMaskRow:result *tmp308 *tmp310
   687 label *label312
   688 label *label313
   689 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  690 op add *tmp309 :createCombinedMask:x -2
+  691 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   692 op or :createBlockMaskRow:result *tmp308 *tmp310
   693 label *label314
   694 label *label315
   695 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  696 op add *tmp309 :createCombinedMask:x -3
+  697 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   698 op or :createBlockMaskRow:result *tmp308 *tmp310
   699 label *label316
   700 label *label317
   701 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  702 op add *tmp309 :createCombinedMask:x -4
+  703 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   704 op or :createBlockMaskRow:result *tmp308 *tmp310
   705 label *label318
   706 label *label319
   707 set :createBlockMaskRow*retval :createBlockMaskRow:result
   708 jump *label320 always
   709 label *label320
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp320 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  710 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  711 op add *tmp320 :createCombinedMask:y 3
+  712 set :createBlockMaskRow:x :createCombinedMask:x
   713 set :createBlockMaskRow:y *tmp320
   714 setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
   715 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   646 set :createAdjacentMask:y :createCombinedMask:y
   647 set :createAdjacentMask:result 0
   648 op add *tmp318 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp318
   649 label *label299
   650 label *label300
   651 label *label301
 
   702 op or :createBlockMaskRow:result *tmp308 *tmp310
   703 label *label318
   704 label *label319
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   705 jump *label320 always
   706 label *label320
   707 set :createAdjacentMask:row2 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:486:16 (+35 instructions):
 
   708 op add *tmp320 :createCombinedMask:y 3
   709 set :createBlockMaskRow:x :createCombinedMask:x
   710 set :createBlockMaskRow:y *tmp320
-    * setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
-    * label *label147
+  711 label *label321
+  712 label *label322
+  713 label *label323
+  714 op add *tmp309 :createBlockMaskRow:x 4
+  715 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  716 op or :createBlockMaskRow:result 0 *tmp310
+  717 label *label324
+  718 label *label325
+  719 op shl *tmp308 :createBlockMaskRow:result 1
+  720 op add *tmp309 :createBlockMaskRow:x 3
+  721 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  722 op or :createBlockMaskRow:result *tmp308 *tmp310
+  723 label *label326
+  724 label *label327
+  725 op shl *tmp308 :createBlockMaskRow:result 1
+  726 op add *tmp309 :createBlockMaskRow:x 2
+  727 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  728 op or :createBlockMaskRow:result *tmp308 *tmp310
+  729 label *label328
+  730 label *label329
+  731 op shl *tmp308 :createBlockMaskRow:result 1
+  732 op add *tmp309 :createBlockMaskRow:x 1
+  733 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  734 op or :createBlockMaskRow:result *tmp308 *tmp310
+  735 label *label330
+  736 label *label331
+  737 op shl *tmp308 :createBlockMaskRow:result 1
+  738 op add *tmp309 :createBlockMaskRow:x 0
+  739 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  740 op or :createBlockMaskRow:result *tmp308 *tmp310
+  741 label *label332
+  742 label *label333
+  743 op shl *tmp308 :createBlockMaskRow:result 1
+  744 op add *tmp309 :createBlockMaskRow:x -1
+  745 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  746 op or :createBlockMaskRow:result *tmp308 *tmp310
+  747 label *label334
+  748 label *label335
+  749 op shl *tmp308 :createBlockMaskRow:result 1
+  750 op add *tmp309 :createBlockMaskRow:x -2
+  751 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  752 op or :createBlockMaskRow:result *tmp308 *tmp310
+  753 label *label336
+  754 label *label337
+  755 op shl *tmp308 :createBlockMaskRow:result 1
+  756 op add *tmp309 :createBlockMaskRow:x -3
+  757 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  758 op or :createBlockMaskRow:result *tmp308 *tmp310
+  759 label *label338
+  760 label *label339
+  761 op shl *tmp308 :createBlockMaskRow:result 1
+  762 op add *tmp309 :createBlockMaskRow:x -4
+  763 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  764 op or :createBlockMaskRow:result *tmp308 *tmp310
+  765 label *label340
+  766 label *label341
+  767 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  768 jump *label342 always
+  769 label *label342
   770 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   771 set :createAdjacentMask:r 2
   772 label *label255

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   711 label *label321
   712 label *label322
   713 label *label323
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  714 op add *tmp309 :createCombinedMask:x 4
+  715 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   716 op or :createBlockMaskRow:result 0 *tmp310
   717 label *label324
   718 label *label325
   719 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  720 op add *tmp309 :createCombinedMask:x 3
+  721 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   722 op or :createBlockMaskRow:result *tmp308 *tmp310
   723 label *label326
   724 label *label327
   725 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  726 op add *tmp309 :createCombinedMask:x 2
+  727 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   728 op or :createBlockMaskRow:result *tmp308 *tmp310
   729 label *label328
   730 label *label329
   731 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  732 op add *tmp309 :createCombinedMask:x 1
+  733 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   734 op or :createBlockMaskRow:result *tmp308 *tmp310
   735 label *label330
   736 label *label331
   737 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  738 op add *tmp309 :createCombinedMask:x 0
+  739 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   740 op or :createBlockMaskRow:result *tmp308 *tmp310
   741 label *label332
   742 label *label333
   743 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  744 op add *tmp309 :createCombinedMask:x -1
+  745 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   746 op or :createBlockMaskRow:result *tmp308 *tmp310
   747 label *label334
   748 label *label335
   749 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  750 op add *tmp309 :createCombinedMask:x -2
+  751 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   752 op or :createBlockMaskRow:result *tmp308 *tmp310
   753 label *label336
   754 label *label337
   755 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  756 op add *tmp309 :createCombinedMask:x -3
+  757 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   758 op or :createBlockMaskRow:result *tmp308 *tmp310
   759 label *label338
   760 label *label339
   761 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  762 op add *tmp309 :createCombinedMask:x -4
+  763 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   764 op or :createBlockMaskRow:result *tmp308 *tmp310
   765 label *label340
   766 label *label341
   767 set :createBlockMaskRow*retval :createBlockMaskRow:result
   768 jump *label342 always
   769 label *label342
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  770 set :createAdjacentMask:row1 :createBlockMaskRow:result
   771 set :createAdjacentMask:r 2
   772 label *label255
   773 label *label256
-    * op add *tmp322 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  774 op add *tmp322 :createCombinedMask:y 2
+  775 set :createBlockMaskRow:x :createCombinedMask:x
   776 set :createBlockMaskRow:y *tmp322
   777 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
   778 call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   706 label *label320
   707 set :createAdjacentMask:row2 :createBlockMaskRow:result
   708 op add *tmp320 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp320
   709 label *label321
   710 label *label322
   711 label *label323
 
   762 op or :createBlockMaskRow:result *tmp308 *tmp310
   763 label *label340
   764 label *label341
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   765 jump *label342 always
   766 label *label342
   767 set :createAdjacentMask:row1 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:489:20 (+35 instructions):
 
   771 op add *tmp322 :createCombinedMask:y 2
   772 set :createBlockMaskRow:x :createCombinedMask:x
   773 set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)
-    * label *label257
+  774 label *label343
+  775 label *label344
+  776 label *label345
+  777 op add *tmp309 :createBlockMaskRow:x 4
+  778 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  779 op or :createBlockMaskRow:result 0 *tmp310
+  780 label *label346
+  781 label *label347
+  782 op shl *tmp308 :createBlockMaskRow:result 1
+  783 op add *tmp309 :createBlockMaskRow:x 3
+  784 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  785 op or :createBlockMaskRow:result *tmp308 *tmp310
+  786 label *label348
+  787 label *label349
+  788 op shl *tmp308 :createBlockMaskRow:result 1
+  789 op add *tmp309 :createBlockMaskRow:x 2
+  790 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  791 op or :createBlockMaskRow:result *tmp308 *tmp310
+  792 label *label350
+  793 label *label351
+  794 op shl *tmp308 :createBlockMaskRow:result 1
+  795 op add *tmp309 :createBlockMaskRow:x 1
+  796 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  797 op or :createBlockMaskRow:result *tmp308 *tmp310
+  798 label *label352
+  799 label *label353
+  800 op shl *tmp308 :createBlockMaskRow:result 1
+  801 op add *tmp309 :createBlockMaskRow:x 0
+  802 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  803 op or :createBlockMaskRow:result *tmp308 *tmp310
+  804 label *label354
+  805 label *label355
+  806 op shl *tmp308 :createBlockMaskRow:result 1
+  807 op add *tmp309 :createBlockMaskRow:x -1
+  808 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  809 op or :createBlockMaskRow:result *tmp308 *tmp310
+  810 label *label356
+  811 label *label357
+  812 op shl *tmp308 :createBlockMaskRow:result 1
+  813 op add *tmp309 :createBlockMaskRow:x -2
+  814 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  815 op or :createBlockMaskRow:result *tmp308 *tmp310
+  816 label *label358
+  817 label *label359
+  818 op shl *tmp308 :createBlockMaskRow:result 1
+  819 op add *tmp309 :createBlockMaskRow:x -3
+  820 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  821 op or :createBlockMaskRow:result *tmp308 *tmp310
+  822 label *label360
+  823 label *label361
+  824 op shl *tmp308 :createBlockMaskRow:result 1
+  825 op add *tmp309 :createBlockMaskRow:x -4
+  826 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  827 op or :createBlockMaskRow:result *tmp308 *tmp310
+  828 label *label362
+  829 label *label363
+  830 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  831 jump *label364 always
+  832 label *label364
   833 op shl *tmp324 :createAdjacentMask:row1 1
   834 op or *tmp325 :createAdjacentMask:row2 *tmp324
   835 op shr *tmp326 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   774 label *label343
   775 label *label344
   776 label *label345
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  777 op add *tmp309 :createCombinedMask:x 4
+  778 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   779 op or :createBlockMaskRow:result 0 *tmp310
   780 label *label346
   781 label *label347
   782 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  783 op add *tmp309 :createCombinedMask:x 3
+  784 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   785 op or :createBlockMaskRow:result *tmp308 *tmp310
   786 label *label348
   787 label *label349
   788 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  789 op add *tmp309 :createCombinedMask:x 2
+  790 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   791 op or :createBlockMaskRow:result *tmp308 *tmp310
   792 label *label350
   793 label *label351
   794 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  795 op add *tmp309 :createCombinedMask:x 1
+  796 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   797 op or :createBlockMaskRow:result *tmp308 *tmp310
   798 label *label352
   799 label *label353
   800 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  801 op add *tmp309 :createCombinedMask:x 0
+  802 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   803 op or :createBlockMaskRow:result *tmp308 *tmp310
   804 label *label354
   805 label *label355
   806 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  807 op add *tmp309 :createCombinedMask:x -1
+  808 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   809 op or :createBlockMaskRow:result *tmp308 *tmp310
   810 label *label356
   811 label *label357
   812 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  813 op add *tmp309 :createCombinedMask:x -2
+  814 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   815 op or :createBlockMaskRow:result *tmp308 *tmp310
   816 label *label358
   817 label *label359
   818 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  819 op add *tmp309 :createCombinedMask:x -3
+  820 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   821 op or :createBlockMaskRow:result *tmp308 *tmp310
   822 label *label360
   823 label *label361
   824 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  825 op add *tmp309 :createCombinedMask:x -4
+  826 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   827 op or :createBlockMaskRow:result *tmp308 *tmp310
   828 label *label362
   829 label *label363
 
   834 op or *tmp325 :createAdjacentMask:row2 *tmp324
   835 op shr *tmp326 :createAdjacentMask:row1 1
   836 op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
-    * op shl *tmp329 :createAdjacentMask:result 7
+  837 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
+  838 op shl *tmp329 0 7
   839 op and *tmp330 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp329 *tmp330
+  840 op or :createAdjacentMask:result 0 *tmp330
   841 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  842 set :createAdjacentMask:row1 :createBlockMaskRow:result
   843 label *label258
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  844 op sub :createAdjacentMask:r 2 1
   845 label *label259
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  846 op add *tmp322 :createCombinedMask:y 1
+  847 set :createBlockMaskRow:x :createCombinedMask:x
   848 set :createBlockMaskRow:y *tmp322
   849 setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
   850 call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   644 write 1 processor1 "@counter"
   645 set :createAdjacentMask:x :createCombinedMask:x
   646 set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   647 op add *tmp318 :createCombinedMask:y 4
   648 label *label299
   649 label *label300
 
   764 jump *label342 always
   765 label *label342
   766 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   767 label *label255
   768 label *label256
   769 op add *tmp322 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp322
   770 label *label343
   771 label *label344
   772 label *label345
 
   823 op or :createBlockMaskRow:result *tmp308 *tmp310
   824 label *label362
   825 label *label363
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   826 jump *label364 always
   827 label *label364
   828 op shl *tmp324 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:489:20 (+35 instructions):
 
   841 op add *tmp322 :createCombinedMask:y 1
   842 set :createBlockMaskRow:x :createCombinedMask:x
   843 set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)
-    * label *label260
+  844 label *label365
+  845 label *label366
+  846 label *label367
+  847 op add *tmp309 :createBlockMaskRow:x 4
+  848 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  849 op or :createBlockMaskRow:result 0 *tmp310
+  850 label *label368
+  851 label *label369
+  852 op shl *tmp308 :createBlockMaskRow:result 1
+  853 op add *tmp309 :createBlockMaskRow:x 3
+  854 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  855 op or :createBlockMaskRow:result *tmp308 *tmp310
+  856 label *label370
+  857 label *label371
+  858 op shl *tmp308 :createBlockMaskRow:result 1
+  859 op add *tmp309 :createBlockMaskRow:x 2
+  860 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  861 op or :createBlockMaskRow:result *tmp308 *tmp310
+  862 label *label372
+  863 label *label373
+  864 op shl *tmp308 :createBlockMaskRow:result 1
+  865 op add *tmp309 :createBlockMaskRow:x 1
+  866 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  867 op or :createBlockMaskRow:result *tmp308 *tmp310
+  868 label *label374
+  869 label *label375
+  870 op shl *tmp308 :createBlockMaskRow:result 1
+  871 op add *tmp309 :createBlockMaskRow:x 0
+  872 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  873 op or :createBlockMaskRow:result *tmp308 *tmp310
+  874 label *label376
+  875 label *label377
+  876 op shl *tmp308 :createBlockMaskRow:result 1
+  877 op add *tmp309 :createBlockMaskRow:x -1
+  878 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  879 op or :createBlockMaskRow:result *tmp308 *tmp310
+  880 label *label378
+  881 label *label379
+  882 op shl *tmp308 :createBlockMaskRow:result 1
+  883 op add *tmp309 :createBlockMaskRow:x -2
+  884 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  885 op or :createBlockMaskRow:result *tmp308 *tmp310
+  886 label *label380
+  887 label *label381
+  888 op shl *tmp308 :createBlockMaskRow:result 1
+  889 op add *tmp309 :createBlockMaskRow:x -3
+  890 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  891 op or :createBlockMaskRow:result *tmp308 *tmp310
+  892 label *label382
+  893 label *label383
+  894 op shl *tmp308 :createBlockMaskRow:result 1
+  895 op add *tmp309 :createBlockMaskRow:x -4
+  896 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  897 op or :createBlockMaskRow:result *tmp308 *tmp310
+  898 label *label384
+  899 label *label385
+  900 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  901 jump *label386 always
+  902 label *label386
   903 op shl *tmp324 :createAdjacentMask:row1 1
   904 op or *tmp325 :createAdjacentMask:row2 *tmp324
   905 op shr *tmp326 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   830 op shr *tmp326 :createAdjacentMask:row1 1
   831 op or *tmp327 *tmp325 *tmp326
   832 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
-    * op shl *tmp329 0 7
   833 op and *tmp330 :createAdjacentMask:mask 0xFE
   834 op or :createAdjacentMask:result 0 *tmp330
   835 set :createAdjacentMask:row2 :createAdjacentMask:row1
 
   843 label *label365
   844 label *label366
   845 label *label367
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  846 op add *tmp309 :createCombinedMask:x 4
+  847 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   848 op or :createBlockMaskRow:result 0 *tmp310
   849 label *label368
   850 label *label369
   851 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  852 op add *tmp309 :createCombinedMask:x 3
+  853 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   854 op or :createBlockMaskRow:result *tmp308 *tmp310
   855 label *label370
   856 label *label371
   857 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  858 op add *tmp309 :createCombinedMask:x 2
+  859 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   860 op or :createBlockMaskRow:result *tmp308 *tmp310
   861 label *label372
   862 label *label373
   863 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  864 op add *tmp309 :createCombinedMask:x 1
+  865 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   866 op or :createBlockMaskRow:result *tmp308 *tmp310
   867 label *label374
   868 label *label375
   869 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  870 op add *tmp309 :createCombinedMask:x 0
+  871 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   872 op or :createBlockMaskRow:result *tmp308 *tmp310
   873 label *label376
   874 label *label377
   875 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  876 op add *tmp309 :createCombinedMask:x -1
+  877 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   878 op or :createBlockMaskRow:result *tmp308 *tmp310
   879 label *label378
   880 label *label379
   881 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  882 op add *tmp309 :createCombinedMask:x -2
+  883 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   884 op or :createBlockMaskRow:result *tmp308 *tmp310
   885 label *label380
   886 label *label381
   887 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  888 op add *tmp309 :createCombinedMask:x -3
+  889 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   890 op or :createBlockMaskRow:result *tmp308 *tmp310
   891 label *label382
   892 label *label383
   893 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  894 op add *tmp309 :createCombinedMask:x -4
+  895 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   896 op or :createBlockMaskRow:result *tmp308 *tmp310
   897 label *label384
   898 label *label385
 
   903 op or *tmp325 :createAdjacentMask:row2 *tmp324
   904 op shr *tmp326 :createAdjacentMask:row1 1
   905 op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  906 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
   907 op shl *tmp329 :createAdjacentMask:result 7
   908 op and *tmp330 :createAdjacentMask:mask 0xFE
   909 op or :createAdjacentMask:result *tmp329 *tmp330
   910 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  911 set :createAdjacentMask:row1 :createBlockMaskRow:result
   912 label *label261
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  913 op sub :createAdjacentMask:r 1 1
   914 label *label262
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  915 op add *tmp322 :createCombinedMask:y 0
+  916 set :createBlockMaskRow:x :createCombinedMask:x
   917 set :createBlockMaskRow:y *tmp322
   918 setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
   919 call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   835 set :createAdjacentMask:row2 :createAdjacentMask:row1
   836 set :createAdjacentMask:row1 :createBlockMaskRow:result
   837 label *label258
-    * op sub :createAdjacentMask:r 2 1
   838 label *label259
   839 op add *tmp322 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp322
   840 label *label365
   841 label *label366
   842 label *label367
 
   893 op or :createBlockMaskRow:result *tmp308 *tmp310
   894 label *label384
   895 label *label385
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   896 jump *label386 always
   897 label *label386
   898 op shl *tmp324 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:489:20 (+35 instructions):
 
   911 op add *tmp322 :createCombinedMask:y 0
   912 set :createBlockMaskRow:x :createCombinedMask:x
   913 set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)
-    * label *label263
+  914 label *label387
+  915 label *label388
+  916 label *label389
+  917 op add *tmp309 :createBlockMaskRow:x 4
+  918 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  919 op or :createBlockMaskRow:result 0 *tmp310
+  920 label *label390
+  921 label *label391
+  922 op shl *tmp308 :createBlockMaskRow:result 1
+  923 op add *tmp309 :createBlockMaskRow:x 3
+  924 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  925 op or :createBlockMaskRow:result *tmp308 *tmp310
+  926 label *label392
+  927 label *label393
+  928 op shl *tmp308 :createBlockMaskRow:result 1
+  929 op add *tmp309 :createBlockMaskRow:x 2
+  930 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  931 op or :createBlockMaskRow:result *tmp308 *tmp310
+  932 label *label394
+  933 label *label395
+  934 op shl *tmp308 :createBlockMaskRow:result 1
+  935 op add *tmp309 :createBlockMaskRow:x 1
+  936 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  937 op or :createBlockMaskRow:result *tmp308 *tmp310
+  938 label *label396
+  939 label *label397
+  940 op shl *tmp308 :createBlockMaskRow:result 1
+  941 op add *tmp309 :createBlockMaskRow:x 0
+  942 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  943 op or :createBlockMaskRow:result *tmp308 *tmp310
+  944 label *label398
+  945 label *label399
+  946 op shl *tmp308 :createBlockMaskRow:result 1
+  947 op add *tmp309 :createBlockMaskRow:x -1
+  948 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  949 op or :createBlockMaskRow:result *tmp308 *tmp310
+  950 label *label400
+  951 label *label401
+  952 op shl *tmp308 :createBlockMaskRow:result 1
+  953 op add *tmp309 :createBlockMaskRow:x -2
+  954 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  955 op or :createBlockMaskRow:result *tmp308 *tmp310
+  956 label *label402
+  957 label *label403
+  958 op shl *tmp308 :createBlockMaskRow:result 1
+  959 op add *tmp309 :createBlockMaskRow:x -3
+  960 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  961 op or :createBlockMaskRow:result *tmp308 *tmp310
+  962 label *label404
+  963 label *label405
+  964 op shl *tmp308 :createBlockMaskRow:result 1
+  965 op add *tmp309 :createBlockMaskRow:x -4
+  966 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  967 op or :createBlockMaskRow:result *tmp308 *tmp310
+  968 label *label406
+  969 label *label407
+  970 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  971 jump *label408 always
+  972 label *label408
   973 op shl *tmp324 :createAdjacentMask:row1 1
   974 op or *tmp325 :createAdjacentMask:row2 *tmp324
   975 op shr *tmp326 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   914 label *label387
   915 label *label388
   916 label *label389
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  917 op add *tmp309 :createCombinedMask:x 4
+  918 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   919 op or :createBlockMaskRow:result 0 *tmp310
   920 label *label390
   921 label *label391
   922 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  923 op add *tmp309 :createCombinedMask:x 3
+  924 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   925 op or :createBlockMaskRow:result *tmp308 *tmp310
   926 label *label392
   927 label *label393
   928 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  929 op add *tmp309 :createCombinedMask:x 2
+  930 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   931 op or :createBlockMaskRow:result *tmp308 *tmp310
   932 label *label394
   933 label *label395
   934 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  935 op add *tmp309 :createCombinedMask:x 1
+  936 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   937 op or :createBlockMaskRow:result *tmp308 *tmp310
   938 label *label396
   939 label *label397
   940 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  941 op add *tmp309 :createCombinedMask:x 0
+  942 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   943 op or :createBlockMaskRow:result *tmp308 *tmp310
   944 label *label398
   945 label *label399
   946 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  947 op add *tmp309 :createCombinedMask:x -1
+  948 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   949 op or :createBlockMaskRow:result *tmp308 *tmp310
   950 label *label400
   951 label *label401
   952 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  953 op add *tmp309 :createCombinedMask:x -2
+  954 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   955 op or :createBlockMaskRow:result *tmp308 *tmp310
   956 label *label402
   957 label *label403
   958 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  959 op add *tmp309 :createCombinedMask:x -3
+  960 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   961 op or :createBlockMaskRow:result *tmp308 *tmp310
   962 label *label404
   963 label *label405
   964 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  965 op add *tmp309 :createCombinedMask:x -4
+  966 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   967 op or :createBlockMaskRow:result *tmp308 *tmp310
   968 label *label406
   969 label *label407
 
   974 op or *tmp325 :createAdjacentMask:row2 *tmp324
   975 op shr *tmp326 :createAdjacentMask:row1 1
   976 op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+  977 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
   978 op shl *tmp329 :createAdjacentMask:result 7
   979 op and *tmp330 :createAdjacentMask:mask 0xFE
   980 op or :createAdjacentMask:result *tmp329 *tmp330
   981 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  982 set :createAdjacentMask:row1 :createBlockMaskRow:result
   983 label *label264
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  984 op sub :createAdjacentMask:r 0 1
   985 label *label265
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  986 op add *tmp322 :createCombinedMask:y -1
+  987 set :createBlockMaskRow:x :createCombinedMask:x
   988 set :createBlockMaskRow:y *tmp322
   989 setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
   990 call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   906 set :createAdjacentMask:row2 :createAdjacentMask:row1
   907 set :createAdjacentMask:row1 :createBlockMaskRow:result
   908 label *label261
-    * op sub :createAdjacentMask:r 1 1
   909 label *label262
   910 op add *tmp322 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp322
   911 label *label387
   912 label *label388
   913 label *label389
 
   964 op or :createBlockMaskRow:result *tmp308 *tmp310
   965 label *label406
   966 label *label407
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   967 jump *label408 always
   968 label *label408
   969 op shl *tmp324 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:489:20 (+35 instructions):
 
   982 op add *tmp322 :createCombinedMask:y -1
   983 set :createBlockMaskRow:x :createCombinedMask:x
   984 set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)
-    * label *label266
+  985 label *label409
+  986 label *label410
+  987 label *label411
+  988 op add *tmp309 :createBlockMaskRow:x 4
+  989 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  990 op or :createBlockMaskRow:result 0 *tmp310
+  991 label *label412
+  992 label *label413
+  993 op shl *tmp308 :createBlockMaskRow:result 1
+  994 op add *tmp309 :createBlockMaskRow:x 3
+  995 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  996 op or :createBlockMaskRow:result *tmp308 *tmp310
+  997 label *label414
+  998 label *label415
+  999 op shl *tmp308 :createBlockMaskRow:result 1
+ 1000 op add *tmp309 :createBlockMaskRow:x 2
+ 1001 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1002 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1003 label *label416
+ 1004 label *label417
+ 1005 op shl *tmp308 :createBlockMaskRow:result 1
+ 1006 op add *tmp309 :createBlockMaskRow:x 1
+ 1007 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1008 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1009 label *label418
+ 1010 label *label419
+ 1011 op shl *tmp308 :createBlockMaskRow:result 1
+ 1012 op add *tmp309 :createBlockMaskRow:x 0
+ 1013 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1014 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1015 label *label420
+ 1016 label *label421
+ 1017 op shl *tmp308 :createBlockMaskRow:result 1
+ 1018 op add *tmp309 :createBlockMaskRow:x -1
+ 1019 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1020 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1021 label *label422
+ 1022 label *label423
+ 1023 op shl *tmp308 :createBlockMaskRow:result 1
+ 1024 op add *tmp309 :createBlockMaskRow:x -2
+ 1025 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1026 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1027 label *label424
+ 1028 label *label425
+ 1029 op shl *tmp308 :createBlockMaskRow:result 1
+ 1030 op add *tmp309 :createBlockMaskRow:x -3
+ 1031 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1032 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1033 label *label426
+ 1034 label *label427
+ 1035 op shl *tmp308 :createBlockMaskRow:result 1
+ 1036 op add *tmp309 :createBlockMaskRow:x -4
+ 1037 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1038 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1039 label *label428
+ 1040 label *label429
+ 1041 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1042 jump *label430 always
+ 1043 label *label430
  1044 op shl *tmp324 :createAdjacentMask:row1 1
  1045 op or *tmp325 :createAdjacentMask:row2 *tmp324
  1046 op shr *tmp326 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   985 label *label409
   986 label *label410
   987 label *label411
-    * op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  988 op add *tmp309 :createCombinedMask:x 4
+  989 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   990 op or :createBlockMaskRow:result 0 *tmp310
   991 label *label412
   992 label *label413
   993 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  994 op add *tmp309 :createCombinedMask:x 3
+  995 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   996 op or :createBlockMaskRow:result *tmp308 *tmp310
   997 label *label414
   998 label *label415
   999 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1000 op add *tmp309 :createCombinedMask:x 2
+ 1001 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1002 op or :createBlockMaskRow:result *tmp308 *tmp310
  1003 label *label416
  1004 label *label417
  1005 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1006 op add *tmp309 :createCombinedMask:x 1
+ 1007 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1008 op or :createBlockMaskRow:result *tmp308 *tmp310
  1009 label *label418
  1010 label *label419
  1011 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1012 op add *tmp309 :createCombinedMask:x 0
+ 1013 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1014 op or :createBlockMaskRow:result *tmp308 *tmp310
  1015 label *label420
  1016 label *label421
  1017 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1018 op add *tmp309 :createCombinedMask:x -1
+ 1019 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1020 op or :createBlockMaskRow:result *tmp308 *tmp310
  1021 label *label422
  1022 label *label423
  1023 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1024 op add *tmp309 :createCombinedMask:x -2
+ 1025 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1026 op or :createBlockMaskRow:result *tmp308 *tmp310
  1027 label *label424
  1028 label *label425
  1029 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1030 op add *tmp309 :createCombinedMask:x -3
+ 1031 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1032 op or :createBlockMaskRow:result *tmp308 *tmp310
  1033 label *label426
  1034 label *label427
  1035 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1036 op add *tmp309 :createCombinedMask:x -4
+ 1037 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
  1038 op or :createBlockMaskRow:result *tmp308 *tmp310
  1039 label *label428
  1040 label *label429
 
  1045 op or *tmp325 :createAdjacentMask:row2 *tmp324
  1046 op shr *tmp326 :createAdjacentMask:row1 1
  1047 op or *tmp327 *tmp325 *tmp326
-    * op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*retval
+ 1048 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
  1049 op shl *tmp329 :createAdjacentMask:result 7
  1050 op and *tmp330 :createAdjacentMask:mask 0xFE
  1051 op or :createAdjacentMask:result *tmp329 *tmp330
  1052 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1053 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1054 label *label267
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1055 op sub :createAdjacentMask:r -1 1
  1056 label *label268
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1057 op add *tmp322 :createCombinedMask:y -2
+ 1058 set :createBlockMaskRow:x :createCombinedMask:x
  1059 set :createBlockMaskRow:y *tmp322
  1060 setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
  1061 call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   977 set :createAdjacentMask:row2 :createAdjacentMask:row1
   978 set :createAdjacentMask:row1 :createBlockMaskRow:result
   979 label *label264
-    * op sub :createAdjacentMask:r 0 1
   980 label *label265
   981 op add *tmp322 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp322
   982 label *label409
   983 label *label410
   984 label *label411
 
  1035 op or :createBlockMaskRow:result *tmp308 *tmp310
  1036 label *label428
  1037 label *label429
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1038 jump *label430 always
  1039 label *label430
  1040 op shl *tmp324 :createAdjacentMask:row1 1

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-16 instructions):
 
   142 jump *label203 lessThan :visited:i *tmp74
   143 label *label51
   144 set *tmp73 false
-    * jump *label48 always
   145 label *label48
   146 jump *label54 notEqual *tmp73 false
   147 op div *tmp89 2 .angle
 
   160 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   161 label *label31
   162 set *tmp27 false
-    * jump *label28 always
   163 label *label28
   164 set :findDrillLocationLocal:oreX :locateOreAway:x
   165 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   349 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   350 label *label254
   351 label *label102
-    * jump *label99 always
   352 label *label99
   353 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
   354 op sub *tmp209 7 :excludeArea:blockSizeX
 
   394 label *label286
   395 label *label287
   396 set :shiftMask*retval :shiftMask:mask
-    * jump *label288 always
   397 label *label288
   398 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   399 jump *label96 always
   400 jump *label98 always
   401 label *label97
   402 set :excludeArea*retval :excludeArea:mask
-    * jump *label96 always
   403 label *label98
   404 label *label96
   405 return :excludeArea*retaddr
 
   444 jump *label205 lessThanEq :findPossiblePlacement:y 3
   445 label *label109
   446 set :findPossiblePlacement*retval -1
-    * jump *label106 always
   447 label *label106
   448 return :findPossiblePlacement*retaddr
   449 end
 
   626 label *label228
   627 label *label143
   628 set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label140 always
   629 label *label140
   630 return :createBlockMaskRow*retaddr
   631 end
 
   694 op or :createBlockMaskRow:result *tmp308 *tmp310
   695 label *label318
   696 label *label319
-    * jump *label320 always
   697 label *label320
   698 set :createAdjacentMask:row2 :createBlockMaskRow:result
   699 op add *tmp320 :createCombinedMask:y 3
 
   753 op or :createBlockMaskRow:result *tmp308 *tmp310
   754 label *label340
   755 label *label341
-    * jump *label342 always
   756 label *label342
   757 set :createAdjacentMask:row1 :createBlockMaskRow:result
   758 label *label255
 
   814 op or :createBlockMaskRow:result *tmp308 *tmp310
   815 label *label362
   816 label *label363
-    * jump *label364 always
   817 label *label364
   818 op shl *tmp324 :createAdjacentMask:row1 1
   819 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   883 op or :createBlockMaskRow:result *tmp308 *tmp310
   884 label *label384
   885 label *label385
-    * jump *label386 always
   886 label *label386
   887 op shl *tmp324 :createAdjacentMask:row1 1
   888 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   953 op or :createBlockMaskRow:result *tmp308 *tmp310
   954 label *label406
   955 label *label407
-    * jump *label408 always
   956 label *label408
   957 op shl *tmp324 :createAdjacentMask:row1 1
   958 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
  1023 op or :createBlockMaskRow:result *tmp308 *tmp310
  1024 label *label428
  1025 label *label429
-    * jump *label430 always
  1026 label *label430
  1027 op shl *tmp324 :createAdjacentMask:row1 1
  1028 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
  1112 call *label10 *invalid :excludeArea*retval (m:*label153) (h:*label153)
  1113 label *label153
  1114 set :createCombinedMask*retval :excludeArea*retval
-    * jump *label144 always
  1115 label *label144
  1116 return :createCombinedMask*retaddr
  1117 end
 
  1280 label *label296
  1281 label *label297
  1282 set :shiftMask*retval :shiftMask:mask
-    * jump *label298 always
  1283 label *label298
  1284 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1285 op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx
 
  1302 multilabel *label184 (m:marker0)
  1303 label *label180
  1304 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
  1305 label *label154
  1306 return :layoutThoriumDrillAtLocation*retaddr
  1307 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   574 label *label211
   575 op add *tmp309 :createBlockMaskRow:x 4
   576 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  577 set :createBlockMaskRow:result *tmp310
   578 label *label212
   579 label *label213
   580 op shl *tmp308 :createBlockMaskRow:result 1
 
   596 label *label218
   597 label *label219
   598 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 0
+  599 set *tmp309 :createBlockMaskRow:x
   600 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   601 op or :createBlockMaskRow:result *tmp308 *tmp310
   602 label *label220
 
   643 label *label301
   644 op add *tmp309 :createCombinedMask:x 4
   645 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  646 set :createBlockMaskRow:result *tmp310
   647 label *label302
   648 label *label303
   649 op shl *tmp308 :createBlockMaskRow:result 1
 
   665 label *label308
   666 label *label309
   667 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  668 set *tmp309 :createCombinedMask:x
   669 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   670 op or :createBlockMaskRow:result *tmp308 *tmp310
   671 label *label310
 
   702 label *label323
   703 op add *tmp309 :createCombinedMask:x 4
   704 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  705 set :createBlockMaskRow:result *tmp310
   706 label *label324
   707 label *label325
   708 op shl *tmp308 :createBlockMaskRow:result 1
 
   724 label *label330
   725 label *label331
   726 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  727 set *tmp309 :createCombinedMask:x
   728 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   729 op or :createBlockMaskRow:result *tmp308 *tmp310
   730 label *label332
 
   763 label *label345
   764 op add *tmp309 :createCombinedMask:x 4
   765 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  766 set :createBlockMaskRow:result *tmp310
   767 label *label346
   768 label *label347
   769 op shl *tmp308 :createBlockMaskRow:result 1
 
   785 label *label352
   786 label *label353
   787 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  788 set *tmp309 :createCombinedMask:x
   789 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   790 op or :createBlockMaskRow:result *tmp308 *tmp310
   791 label *label354
 
   821 op or *tmp327 *tmp325 *tmp326
   822 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
   823 op and *tmp330 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp330
+  824 set :createAdjacentMask:result *tmp330
   825 set :createAdjacentMask:row2 :createAdjacentMask:row1
   826 set :createAdjacentMask:row1 :createBlockMaskRow:result
   827 label *label258
 
   832 label *label367
   833 op add *tmp309 :createCombinedMask:x 4
   834 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  835 set :createBlockMaskRow:result *tmp310
   836 label *label368
   837 label *label369
   838 op shl *tmp308 :createBlockMaskRow:result 1
 
   854 label *label374
   855 label *label375
   856 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  857 set *tmp309 :createCombinedMask:x
   858 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   859 op or :createBlockMaskRow:result *tmp308 *tmp310
   860 label *label376
 
   896 set :createAdjacentMask:row1 :createBlockMaskRow:result
   897 label *label261
   898 label *label262
-    * op add *tmp322 :createCombinedMask:y 0
+  899 set *tmp322 :createCombinedMask:y
   900 label *label387
   901 label *label388
   902 label *label389
   903 op add *tmp309 :createCombinedMask:x 4
   904 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  905 set :createBlockMaskRow:result *tmp310
   906 label *label390
   907 label *label391
   908 op shl *tmp308 :createBlockMaskRow:result 1
 
   924 label *label396
   925 label *label397
   926 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  927 set *tmp309 :createCombinedMask:x
   928 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   929 op or :createBlockMaskRow:result *tmp308 *tmp310
   930 label *label398
 
   972 label *label411
   973 op add *tmp309 :createCombinedMask:x 4
   974 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result 0 *tmp310
+  975 set :createBlockMaskRow:result *tmp310
   976 label *label412
   977 label *label413
   978 op shl *tmp308 :createBlockMaskRow:result 1
 
   994 label *label418
   995 label *label419
   996 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createCombinedMask:x 0
+  997 set *tmp309 :createCombinedMask:x
   998 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   999 op or :createBlockMaskRow:result *tmp308 *tmp310
  1000 label *label420

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-11 instructions):
 
   573 label *label210
   574 label *label211
   575 op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  576 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
   577 label *label212
   578 label *label213
   579 op shl *tmp308 :createBlockMaskRow:result 1
 
   621 op shl *tmp308 :createBlockMaskRow:result 1
   622 op add *tmp309 :createBlockMaskRow:x -4
   623 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result *tmp308 *tmp310
+  624 op or :createBlockMaskRow*retval *tmp308 *tmp310
   625 label *label228
   626 label *label143
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   627 label *label140
   628 return :createBlockMaskRow*retaddr
   629 end
 
   640 label *label300
   641 label *label301
   642 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  643 ucontrol getBlock *tmp309 *tmp318 *tmp311 :createBlockMaskRow:result *tmp312
   644 label *label302
   645 label *label303
   646 op shl *tmp308 :createBlockMaskRow:result 1
 
   688 op shl *tmp308 :createBlockMaskRow:result 1
   689 op add *tmp309 :createCombinedMask:x -4
   690 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result *tmp308 *tmp310
+  691 op or :createAdjacentMask:row2 *tmp308 *tmp310
   692 label *label318
   693 label *label319
   694 label *label320
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   695 op add *tmp320 :createCombinedMask:y 3
   696 label *label321
   697 label *label322
   698 label *label323
   699 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  700 ucontrol getBlock *tmp309 *tmp320 *tmp311 :createBlockMaskRow:result *tmp312
   701 label *label324
   702 label *label325
   703 op shl *tmp308 :createBlockMaskRow:result 1
 
   745 op shl *tmp308 :createBlockMaskRow:result 1
   746 op add *tmp309 :createCombinedMask:x -4
   747 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
-    * op or :createBlockMaskRow:result *tmp308 *tmp310
+  748 op or :createAdjacentMask:row1 *tmp308 *tmp310
   749 label *label340
   750 label *label341
   751 label *label342
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   752 label *label255
   753 label *label256
   754 op add *tmp322 :createCombinedMask:y 2
 
   756 label *label344
   757 label *label345
   758 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  759 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
   760 label *label346
   761 label *label347
   762 op shl *tmp308 :createBlockMaskRow:result 1
 
   813 op shr *tmp326 :createAdjacentMask:row1 1
   814 op or *tmp327 *tmp325 *tmp326
   815 op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:result
-    * op and *tmp330 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp330
+  816 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   817 set :createAdjacentMask:row2 :createAdjacentMask:row1
   818 set :createAdjacentMask:row1 :createBlockMaskRow:result
   819 label *label258
 
   823 label *label366
   824 label *label367
   825 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  826 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
   827 label *label368
   828 label *label369
   829 op shl *tmp308 :createBlockMaskRow:result 1
 
   892 label *label388
   893 label *label389
   894 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  895 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
   896 label *label390
   897 label *label391
   898 op shl *tmp308 :createBlockMaskRow:result 1
 
   961 label *label410
   962 label *label411
   963 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
-    * set :createBlockMaskRow:result *tmp310
+  964 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
   965 label *label412
   966 label *label413
   967 op shl *tmp308 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   596 label *label219
   597 op shl *tmp308 :createBlockMaskRow:result 1
   598 set *tmp309 :createBlockMaskRow:x
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  599 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   600 op or :createBlockMaskRow:result *tmp308 *tmp310
   601 label *label220
   602 label *label221
 
   663 label *label309
   664 op shl *tmp308 :createBlockMaskRow:result 1
   665 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  666 ucontrol getBlock :createCombinedMask:x *tmp318 *tmp311 *tmp310 *tmp312
   667 op or :createBlockMaskRow:result *tmp308 *tmp310
   668 label *label310
   669 label *label311
 
   720 label *label331
   721 op shl *tmp308 :createBlockMaskRow:result 1
   722 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  723 ucontrol getBlock :createCombinedMask:x *tmp320 *tmp311 *tmp310 *tmp312
   724 op or :createBlockMaskRow:result *tmp308 *tmp310
   725 label *label332
   726 label *label333
 
   779 label *label353
   780 op shl *tmp308 :createBlockMaskRow:result 1
   781 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  782 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   783 op or :createBlockMaskRow:result *tmp308 *tmp310
   784 label *label354
   785 label *label355
 
   846 label *label375
   847 op shl *tmp308 :createBlockMaskRow:result 1
   848 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  849 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   850 op or :createBlockMaskRow:result *tmp308 *tmp310
   851 label *label376
   852 label *label377
 
   892 label *label388
   893 label *label389
   894 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
+  895 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 :createBlockMaskRow:result *tmp312
   896 label *label390
   897 label *label391
   898 op shl *tmp308 :createBlockMaskRow:result 1
   899 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  900 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   901 op or :createBlockMaskRow:result *tmp308 *tmp310
   902 label *label392
   903 label *label393
   904 op shl *tmp308 :createBlockMaskRow:result 1
   905 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  906 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   907 op or :createBlockMaskRow:result *tmp308 *tmp310
   908 label *label394
   909 label *label395
   910 op shl *tmp308 :createBlockMaskRow:result 1
   911 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  912 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   913 op or :createBlockMaskRow:result *tmp308 *tmp310
   914 label *label396
   915 label *label397
   916 op shl *tmp308 :createBlockMaskRow:result 1
   917 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  918 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp311 *tmp310 *tmp312
   919 op or :createBlockMaskRow:result *tmp308 *tmp310
   920 label *label398
   921 label *label399
   922 op shl *tmp308 :createBlockMaskRow:result 1
   923 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  924 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   925 op or :createBlockMaskRow:result *tmp308 *tmp310
   926 label *label400
   927 label *label401
   928 op shl *tmp308 :createBlockMaskRow:result 1
   929 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  930 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   931 op or :createBlockMaskRow:result *tmp308 *tmp310
   932 label *label402
   933 label *label403
   934 op shl *tmp308 :createBlockMaskRow:result 1
   935 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  936 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   937 op or :createBlockMaskRow:result *tmp308 *tmp310
   938 label *label404
   939 label *label405
   940 op shl *tmp308 :createBlockMaskRow:result 1
   941 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  942 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   943 op or :createBlockMaskRow:result *tmp308 *tmp310
   944 label *label406
   945 label *label407
 
   984 label *label419
   985 op shl *tmp308 :createBlockMaskRow:result 1
   986 set *tmp309 :createCombinedMask:x
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  987 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   988 op or :createBlockMaskRow:result *tmp308 *tmp310
   989 label *label420
   990 label *label421

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-8 instructions):
 
   595 label *label218
   596 label *label219
   597 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createBlockMaskRow:x
   598 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   599 op or :createBlockMaskRow:result *tmp308 *tmp310
   600 label *label220
 
   661 label *label308
   662 label *label309
   663 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   664 ucontrol getBlock :createCombinedMask:x *tmp318 *tmp311 *tmp310 *tmp312
   665 op or :createBlockMaskRow:result *tmp308 *tmp310
   666 label *label310
 
   717 label *label330
   718 label *label331
   719 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   720 ucontrol getBlock :createCombinedMask:x *tmp320 *tmp311 *tmp310 *tmp312
   721 op or :createBlockMaskRow:result *tmp308 *tmp310
   722 label *label332
 
   775 label *label352
   776 label *label353
   777 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   778 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   779 op or :createBlockMaskRow:result *tmp308 *tmp310
   780 label *label354
 
   841 label *label374
   842 label *label375
   843 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   844 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   845 op or :createBlockMaskRow:result *tmp308 *tmp310
   846 label *label376
 
   882 set :createAdjacentMask:row1 :createBlockMaskRow:result
   883 label *label261
   884 label *label262
-    * set *tmp322 :createCombinedMask:y
   885 label *label387
   886 label *label388
   887 label *label389
 
   908 label *label396
   909 label *label397
   910 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   911 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp311 *tmp310 *tmp312
   912 op or :createBlockMaskRow:result *tmp308 *tmp310
   913 label *label398
 
   976 label *label418
   977 label *label419
   978 op shl *tmp308 :createBlockMaskRow:result 1
-    * set *tmp309 :createCombinedMask:x
   979 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   980 op or :createBlockMaskRow:result *tmp308 *tmp310
   981 label *label420

Modifications by Inline function call at OreLocator.mnd:489:20 (+31 instructions):
 
  1021 op add *tmp322 :createCombinedMask:y -2
  1022 set :createBlockMaskRow:x :createCombinedMask:x
  1023 set :createBlockMaskRow:y *tmp322
-    * setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)
-    * label *label269
+ 1024 label *label431
+ 1025 label *label432
+ 1026 label *label433
+ 1027 op add *tmp309 :createBlockMaskRow:x 4
+ 1028 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
+ 1029 label *label434
+ 1030 label *label435
+ 1031 op shl *tmp308 :createBlockMaskRow:result 1
+ 1032 op add *tmp309 :createBlockMaskRow:x 3
+ 1033 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1034 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1035 label *label436
+ 1036 label *label437
+ 1037 op shl *tmp308 :createBlockMaskRow:result 1
+ 1038 op add *tmp309 :createBlockMaskRow:x 2
+ 1039 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1040 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1041 label *label438
+ 1042 label *label439
+ 1043 op shl *tmp308 :createBlockMaskRow:result 1
+ 1044 op add *tmp309 :createBlockMaskRow:x 1
+ 1045 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1046 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1047 label *label440
+ 1048 label *label441
+ 1049 op shl *tmp308 :createBlockMaskRow:result 1
+ 1050 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1051 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1052 label *label442
+ 1053 label *label443
+ 1054 op shl *tmp308 :createBlockMaskRow:result 1
+ 1055 op add *tmp309 :createBlockMaskRow:x -1
+ 1056 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1057 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1058 label *label444
+ 1059 label *label445
+ 1060 op shl *tmp308 :createBlockMaskRow:result 1
+ 1061 op add *tmp309 :createBlockMaskRow:x -2
+ 1062 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1063 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1064 label *label446
+ 1065 label *label447
+ 1066 op shl *tmp308 :createBlockMaskRow:result 1
+ 1067 op add *tmp309 :createBlockMaskRow:x -3
+ 1068 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1069 op or :createBlockMaskRow:result *tmp308 *tmp310
+ 1070 label *label448
+ 1071 label *label449
+ 1072 op shl *tmp308 :createBlockMaskRow:result 1
+ 1073 op add *tmp309 :createBlockMaskRow:x -4
+ 1074 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1075 op or :createBlockMaskRow*retval *tmp308 *tmp310
+ 1076 label *label450
+ 1077 label *label451
+ 1078 label *label452
  1079 op shl *tmp324 :createAdjacentMask:row1 1
  1080 op or *tmp325 :createAdjacentMask:row2 *tmp324
  1081 op shr *tmp326 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1018 label *label267
  1019 op sub :createAdjacentMask:r -1 1
  1020 label *label268
-    * op add *tmp322 :createCombinedMask:y -2
+ 1021 op add :createBlockMaskRow:y :createCombinedMask:y -2
  1022 set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp322
  1023 label *label431
  1024 label *label432
  1025 label *label433

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
  1023 label *label431
  1024 label *label432
  1025 label *label433
-    * op add *tmp309 :createBlockMaskRow:x 4
+ 1026 op add *tmp309 :createCombinedMask:x 4
  1027 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
  1028 label *label434
  1029 label *label435
  1030 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 3
+ 1031 op add *tmp309 :createCombinedMask:x 3
  1032 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1033 op or :createBlockMaskRow:result *tmp308 *tmp310
  1034 label *label436
  1035 label *label437
  1036 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 2
+ 1037 op add *tmp309 :createCombinedMask:x 2
  1038 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1039 op or :createBlockMaskRow:result *tmp308 *tmp310
  1040 label *label438
  1041 label *label439
  1042 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x 1
+ 1043 op add *tmp309 :createCombinedMask:x 1
  1044 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1045 op or :createBlockMaskRow:result *tmp308 *tmp310
  1046 label *label440
  1047 label *label441
  1048 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+ 1049 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1050 op or :createBlockMaskRow:result *tmp308 *tmp310
  1051 label *label442
  1052 label *label443
  1053 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -1
+ 1054 op add *tmp309 :createCombinedMask:x -1
  1055 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1056 op or :createBlockMaskRow:result *tmp308 *tmp310
  1057 label *label444
  1058 label *label445
  1059 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -2
+ 1060 op add *tmp309 :createCombinedMask:x -2
  1061 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1062 op or :createBlockMaskRow:result *tmp308 *tmp310
  1063 label *label446
  1064 label *label447
  1065 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -3
+ 1066 op add *tmp309 :createCombinedMask:x -3
  1067 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1068 op or :createBlockMaskRow:result *tmp308 *tmp310
  1069 label *label448
  1070 label *label449
  1071 op shl *tmp308 :createBlockMaskRow:result 1
-    * op add *tmp309 :createBlockMaskRow:x -4
+ 1072 op add *tmp309 :createCombinedMask:x -4
  1073 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
  1074 op or :createBlockMaskRow*retval *tmp308 *tmp310
  1075 label *label450
 
  1086 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1087 set :createAdjacentMask:row1 :createBlockMaskRow*retval
  1088 label *label270
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1089 op sub :createAdjacentMask:r -2 1
  1090 label *label271
-    * op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1091 op add *tmp322 :createCombinedMask:y -3
+ 1092 set :createBlockMaskRow:x :createCombinedMask:x
  1093 set :createBlockMaskRow:y *tmp322
  1094 setaddr :createBlockMaskRow*retaddr *label272 (h:*label272)
  1095 call *label13 *invalid :createBlockMaskRow*retval (m:*label272) (h:*label272)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
  1016 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1017 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1018 label *label267
-    * op sub :createAdjacentMask:r -1 1
  1019 label *label268
  1020 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
  1021 label *label431
  1022 label *label432
  1023 label *label433

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * label *label22
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp17
    35 jump *label24 notEqual *tmp17 false
    36 label *label277
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label23
    38 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp17
    39 jump *label277 equal *tmp17 false
    40 label *label24
-    * label *label21
-    * label *label20
    41 op div *tmp20 *tmp14 3.8197185279121366
    42 op pow .mapTotal *tmp20 2
    43 set :findDrillLocationLocal:oreX 0
 
    60 op mul .mapProgress .angle .angle
    61 op sub *tmp36 @mapw 5
    62 op sub *tmp43 @maph 5
-    * label *label29
    63 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    64 label *label202
    65 op div :locateOreAway:a .angle @degToRad
 
    68 op add *tmp35 :findDrillLocationLocal:x *tmp34
    69 op max *tmp38 *tmp35 5
    70 op min *tmp37 *tmp38 *tmp36
-    * label *label32
    71 op cos *tmp40 :locateOreAway:a
    72 op mul *tmp41 *tmp40 :locateOreAway:distance
    73 op add *tmp42 :findDrillLocationLocal:y *tmp41
    74 op max *tmp45 *tmp42 5
    75 op min *tmp44 *tmp45 *tmp43
-    * label *label33
-    * label *label35
    76 ucontrol within *tmp37 *tmp44 5 *tmp47
    77 jump *label37 notEqual *tmp47 false
    78 label *label209
    79 ucontrol approach *tmp37 *tmp44 4.5
-    * label *label36
    80 ucontrol within *tmp37 *tmp44 5 *tmp47
    81 jump *label209 equal *tmp47 false
    82 label *label37
-    * label *label34
    83 op div *tmp50 3.8197185279121366 :locateOreAway:distance
    84 op add .angle .angle *tmp50
    85 op mul .mapProgress .angle .angle
 
    89 set *tmp27 false
    90 jump *label28 always
    91 label *label38
-    * label *label39
    92 op sub *tmp57 :locateOreAway:x :findDrillLocationLocal:x
    93 op abs *tmp58 *tmp57
    94 op sub *tmp59 :locateOreAway:y :findDrillLocationLocal:y
 
   101 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   102 jump *label30 always
   103 label *label42
-    * label *label43
   104 label *label40
-    * label *label41
   105 jump *label44 lessThan :locateOreAway:coreDist 8
   106 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   107 set :locateOreAway:lastX :locateOreAway:x
   108 set :locateOreAway:lastY :locateOreAway:y
   109 set *tmp74 .locations
   110 set :visited:i .locationsStart
-    * label *label49
   111 jump *label51 greaterThanEq .locationsStart *tmp74
   112 label *label203
   113 op mul :visited:index 4 :visited:i
 
   122 set *tmp73 true
   123 jump *label48 always
   124 label *label52
-    * label *label53
-    * label *label50
   125 op add :visited:i :visited:i 1
   126 jump *label203 lessThan :visited:i *tmp74
   127 label *label51
 
   135 set *tmp27 true
   136 jump *label28 always
   137 label *label54
-    * label *label55
   138 label *label46
-    * label *label47
   139 label *label44
-    * label *label45
   140 label *label30
   141 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   142 label *label31
 
   148 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   149 jump *label19 always
   150 label *label56
-    * label *label57
   151 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   152 op add .mapSpots .mapSpots 1
   153 label *label58
-    * label *label59
-    * label *label62
   154 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99
   155 jump *label64 notEqual *tmp99 false
   156 label *label229
   157 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label63
   158 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99
   159 jump *label229 equal *tmp99 false
   160 label *label64
-    * label *label61
-    * label *label60
   161 set :findDrillLocationLocal:last 0
   162 label *label65
   163 write @unit processor1 ":findBestPosition:unit"
 
   184 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   185 jump *label67 always
   186 label *label69
-    * label *label70
   187 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   188 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   189 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   200 op add .count .count 1
   201 write :findDrillLocationLocal:dy bank1 .count
   202 op add .locations .locations 1
-    * label *label77
   203 ucontrol unbind
   204 set :findDrillLocationLocal*retval true
   205 jump *label19 always
   206 label *label75
-    * label *label76
   207 label *label71
-    * label *label72
   208 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   209 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   210 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   211 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   212 label *label78
-    * label *label79
   213 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   214 jump *label67 always
   215 label *label80
-    * label *label81
   216 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   217 op mul :round:x :findDrillLocationLocal:diffX 1.1
   218 op add *tmp142 :round:x 0.5
   219 op floor *tmp141 *tmp142
-    * label *label82
   220 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp141
   221 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   222 op add *tmp146 :round.1:x 0.5
   223 op floor *tmp145 *tmp146
-    * label *label83
   224 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp145
-    * label *label66
   225 jump *label65 always
   226 label *label67
   227 jump *label84 lessThan :findDrillLocationLocal:best 0
 
   235 op add .count .count 1
   236 write :findDrillLocationLocal:bestY bank1 .count
   237 op add .locations .locations 1
-    * label *label86
   238 label *label84
-    * label *label85
-    * label *label26
   239 jump *label25 always
-    * label *label27
   240 set :findDrillLocationLocal*retval null
   241 label *label19
   242 return :findDrillLocationLocal*retaddr
 
   261 op shl *tmp202 1 :excludeArea:blockSizeX
   262 op sub :createMatrixOfSize:row *tmp202 1
   263 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * label *label230
-    * label *label231
   264 jump *label232 lessThan 1 :excludeArea:blockSizeY
   265 jump *label102 always
   266 label *label232
-    * label *label233
   267 op shl *tmp206 :createMatrixOfSize:row 7
   268 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label234
-    * label *label235
   269 jump *label236 lessThan 2 :excludeArea:blockSizeY
   270 jump *label102 always
   271 label *label236
-    * label *label237
   272 op shl *tmp206 :createMatrixOfSize:matrix 7
   273 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label238
-    * label *label239
   274 jump *label240 lessThan 3 :excludeArea:blockSizeY
   275 jump *label102 always
   276 label *label240
-    * label *label241
   277 op shl *tmp206 :createMatrixOfSize:matrix 7
   278 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label242
-    * label *label243
   279 jump *label244 lessThan 4 :excludeArea:blockSizeY
   280 jump *label102 always
   281 label *label244
-    * label *label245
   282 op shl *tmp206 :createMatrixOfSize:matrix 7
   283 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label246
-    * label *label247
   284 jump *label248 lessThan 5 :excludeArea:blockSizeY
   285 jump *label102 always
   286 label *label248
-    * label *label249
   287 op shl *tmp206 :createMatrixOfSize:matrix 7
   288 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label250
-    * label *label251
   289 jump *label252 lessThan 6 :excludeArea:blockSizeY
   290 jump *label102 always
   291 label *label252
-    * label *label253
   292 op shl *tmp206 :createMatrixOfSize:matrix 7
   293 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * label *label254
   294 label *label102
-    * label *label99
   295 op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX
   296 op sub *tmp209 7 :excludeArea:blockSizeX
   297 op mul :excludeArea:shiftX *tmp208 *tmp209
   298 op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY
   299 op sub *tmp212 7 :excludeArea:blockSizeY
   300 op mul :excludeArea:shiftY *tmp211 *tmp212
-    * label *label279
   301 op abs *tmp160 :excludeArea:shiftX
   302 op greaterThan *tmp161 *tmp160 6
   303 op abs *tmp162 :excludeArea:shiftY
 
   307 set :shiftMask*retval 0
   308 jump *label288 always
   309 label *label280
-    * label *label281
   310 op mul *tmp166 7 :excludeArea:shiftY
   311 op add :shiftMask:shift :excludeArea:shiftX *tmp166
   312 jump *label282 lessThanEq :shiftMask:shift 0
 
   323 jump *label284 lessThanEq :excludeArea:shiftX 0
   324 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   325 label *label284
-    * label *label285
   326 op shl *tmp180 :shiftMask:keep 7
   327 op or :shiftMask:keep :shiftMask:keep *tmp180
   328 op shl *tmp181 :shiftMask:keep 14
 
   331 op or :shiftMask:keep :shiftMask:keep *tmp182
   332 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   333 label *label286
-    * label *label287
   334 set :shiftMask*retval :shiftMask:mask
   335 label *label288
   336 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
 
   344 end
   345 label *label11
   346 set :findPossiblePlacement:y -3
-    * label *label107
   347 jump *label109 greaterThan :findPossiblePlacement:y 3
   348 label *label205
   349 op add *tmp215 :findPossiblePlacement:y 3
   350 op mul *tmp216 7 *tmp215
   351 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp216
   352 set :findPossiblePlacement:x -3
-    * label *label110
   353 jump *label112 greaterThan :findPossiblePlacement:x 3
   354 label *label206
   355 op and *tmp218 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   359 op add :findPossiblePlacement*retval *tmp222 :findPossiblePlacement:x
   360 jump *label106 always
   361 label *label113
-    * label *label114
   362 op sub *tmp224 3 :findPossiblePlacement:width
   363 jump *label115 lessThanEq :findPossiblePlacement:x *tmp224
   364 jump *label112 always
   365 label *label115
-    * label *label116
   366 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label111
   367 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   368 jump *label206 lessThanEq :findPossiblePlacement:x 3
   369 label *label112
 
   371 jump *label117 lessThanEq :findPossiblePlacement:y *tmp227
   372 jump *label109 always
   373 label *label117
-    * label *label118
-    * label *label108
   374 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   375 jump *label205 lessThanEq :findPossiblePlacement:y 3
   376 label *label109
 
   391 set :tryPlaceGenerator*retval false
   392 jump *label119 always
   393 label *label123
-    * label *label124
   394 op add *tmp235 :tryPlaceGenerator:centerX 0.5
   395 op add .water2X *tmp235 :findPossiblePlacement:x
   396 op add *tmp237 :tryPlaceGenerator:centerY 0.5
 
   413 set :tryPlaceGenerator*retval false
   414 jump *label119 always
   415 label *label126
-    * label *label127
   416 op add *tmp247 :tryPlaceGenerator:centerX 0.5
   417 op add .water2X *tmp247 :findPossiblePlacement:x
   418 op add *tmp249 :tryPlaceGenerator:centerY 0.5
 
   423 op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   424 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp255
   425 label *label122
-    * label *label128
   426 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   427 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   428 set :findPossiblePlacement:placementMask 1
 
   435 set :tryPlaceGenerator*retval false
   436 jump *label119 always
   437 label *label130
-    * label *label131
   438 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   439 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   440 op shl *tmp275 1 :findPossiblePlacement*retval
 
   450 set :tryPlaceGenerator*retval false
   451 jump *label119 always
   452 label *label133
-    * label *label134
   453 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   454 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   455 op shl *tmp281 1 :findPossiblePlacement*retval
 
   485 set :tryPlaceGenerator*retval false
   486 jump *label119 always
   487 label *label138
-    * label *label139
   488 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   489 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   490 label *label135
-    * label *label136
   491 set :tryPlaceGenerator*retval true
   492 jump *label119 always
   493 label *label119
   494 return :tryPlaceGenerator*retaddr
   495 end
   496 label *label13
-    * label *label210
-    * label *label211
   497 op add *tmp309 :createBlockMaskRow:x 4
   498 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label212
-    * label *label213
   499 op shl *tmp308 :createBlockMaskRow:result 1
   500 op add *tmp309 :createBlockMaskRow:x 3
   501 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   502 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label214
-    * label *label215
   503 op shl *tmp308 :createBlockMaskRow:result 1
   504 op add *tmp309 :createBlockMaskRow:x 2
   505 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   506 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label216
-    * label *label217
   507 op shl *tmp308 :createBlockMaskRow:result 1
   508 op add *tmp309 :createBlockMaskRow:x 1
   509 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   510 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label218
-    * label *label219
   511 op shl *tmp308 :createBlockMaskRow:result 1
   512 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   513 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label220
-    * label *label221
   514 op shl *tmp308 :createBlockMaskRow:result 1
   515 op add *tmp309 :createBlockMaskRow:x -1
   516 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   517 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label222
-    * label *label223
   518 op shl *tmp308 :createBlockMaskRow:result 1
   519 op add *tmp309 :createBlockMaskRow:x -2
   520 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   521 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label224
-    * label *label225
   522 op shl *tmp308 :createBlockMaskRow:result 1
   523 op add *tmp309 :createBlockMaskRow:x -3
   524 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   525 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label226
-    * label *label227
   526 op shl *tmp308 :createBlockMaskRow:result 1
   527 op add *tmp309 :createBlockMaskRow:x -4
   528 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   529 op or :createBlockMaskRow*retval *tmp308 *tmp310
-    * label *label228
-    * label *label143
-    * label *label140
   530 return :createBlockMaskRow*retaddr
   531 end
   532 label *label14
 
   538 set :createAdjacentMask:x :createCombinedMask:x
   539 set :createAdjacentMask:y :createCombinedMask:y
   540 op add *tmp318 :createCombinedMask:y 4
-    * label *label299
-    * label *label300
-    * label *label301
   541 op add *tmp309 :createCombinedMask:x 4
   542 ucontrol getBlock *tmp309 *tmp318 *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label302
-    * label *label303
   543 op shl *tmp308 :createBlockMaskRow:result 1
   544 op add *tmp309 :createCombinedMask:x 3
   545 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   546 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label304
-    * label *label305
   547 op shl *tmp308 :createBlockMaskRow:result 1
   548 op add *tmp309 :createCombinedMask:x 2
   549 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   550 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label306
-    * label *label307
   551 op shl *tmp308 :createBlockMaskRow:result 1
   552 op add *tmp309 :createCombinedMask:x 1
   553 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   554 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label308
-    * label *label309
   555 op shl *tmp308 :createBlockMaskRow:result 1
   556 ucontrol getBlock :createCombinedMask:x *tmp318 *tmp311 *tmp310 *tmp312
   557 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label310
-    * label *label311
   558 op shl *tmp308 :createBlockMaskRow:result 1
   559 op add *tmp309 :createCombinedMask:x -1
   560 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   561 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label312
-    * label *label313
   562 op shl *tmp308 :createBlockMaskRow:result 1
   563 op add *tmp309 :createCombinedMask:x -2
   564 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   565 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label314
-    * label *label315
   566 op shl *tmp308 :createBlockMaskRow:result 1
   567 op add *tmp309 :createCombinedMask:x -3
   568 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   569 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label316
-    * label *label317
   570 op shl *tmp308 :createBlockMaskRow:result 1
   571 op add *tmp309 :createCombinedMask:x -4
   572 ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
   573 op or :createAdjacentMask:row2 *tmp308 *tmp310
-    * label *label318
-    * label *label319
-    * label *label320
   574 op add *tmp320 :createCombinedMask:y 3
-    * label *label321
-    * label *label322
-    * label *label323
   575 op add *tmp309 :createCombinedMask:x 4
   576 ucontrol getBlock *tmp309 *tmp320 *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label324
-    * label *label325
   577 op shl *tmp308 :createBlockMaskRow:result 1
   578 op add *tmp309 :createCombinedMask:x 3
   579 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   580 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label326
-    * label *label327
   581 op shl *tmp308 :createBlockMaskRow:result 1
   582 op add *tmp309 :createCombinedMask:x 2
   583 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   584 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label328
-    * label *label329
   585 op shl *tmp308 :createBlockMaskRow:result 1
   586 op add *tmp309 :createCombinedMask:x 1
   587 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   588 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label330
-    * label *label331
   589 op shl *tmp308 :createBlockMaskRow:result 1
   590 ucontrol getBlock :createCombinedMask:x *tmp320 *tmp311 *tmp310 *tmp312
   591 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label332
-    * label *label333
   592 op shl *tmp308 :createBlockMaskRow:result 1
   593 op add *tmp309 :createCombinedMask:x -1
   594 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   595 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label334
-    * label *label335
   596 op shl *tmp308 :createBlockMaskRow:result 1
   597 op add *tmp309 :createCombinedMask:x -2
   598 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   599 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label336
-    * label *label337
   600 op shl *tmp308 :createBlockMaskRow:result 1
   601 op add *tmp309 :createCombinedMask:x -3
   602 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   603 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label338
-    * label *label339
   604 op shl *tmp308 :createBlockMaskRow:result 1
   605 op add *tmp309 :createCombinedMask:x -4
   606 ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
   607 op or :createAdjacentMask:row1 *tmp308 *tmp310
-    * label *label340
-    * label *label341
-    * label *label342
-    * label *label255
-    * label *label256
   608 op add *tmp322 :createCombinedMask:y 2
-    * label *label343
-    * label *label344
-    * label *label345
   609 op add *tmp309 :createCombinedMask:x 4
   610 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label346
-    * label *label347
   611 op shl *tmp308 :createBlockMaskRow:result 1
   612 op add *tmp309 :createCombinedMask:x 3
   613 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   614 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label348
-    * label *label349
   615 op shl *tmp308 :createBlockMaskRow:result 1
   616 op add *tmp309 :createCombinedMask:x 2
   617 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   618 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label350
-    * label *label351
   619 op shl *tmp308 :createBlockMaskRow:result 1
   620 op add *tmp309 :createCombinedMask:x 1
   621 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   622 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label352
-    * label *label353
   623 op shl *tmp308 :createBlockMaskRow:result 1
   624 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   625 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label354
-    * label *label355
   626 op shl *tmp308 :createBlockMaskRow:result 1
   627 op add *tmp309 :createCombinedMask:x -1
   628 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   629 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label356
-    * label *label357
   630 op shl *tmp308 :createBlockMaskRow:result 1
   631 op add *tmp309 :createCombinedMask:x -2
   632 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   633 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label358
-    * label *label359
   634 op shl *tmp308 :createBlockMaskRow:result 1
   635 op add *tmp309 :createCombinedMask:x -3
   636 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   637 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label360
-    * label *label361
   638 op shl *tmp308 :createBlockMaskRow:result 1
   639 op add *tmp309 :createCombinedMask:x -4
   640 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   641 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label362
-    * label *label363
-    * label *label364
   642 op shl *tmp324 :createAdjacentMask:row1 1
   643 op or *tmp325 :createAdjacentMask:row2 *tmp324
   644 op shr *tmp326 :createAdjacentMask:row1 1
 
   647 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   648 set :createAdjacentMask:row2 :createAdjacentMask:row1
   649 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label258
-    * label *label259
   650 op add *tmp322 :createCombinedMask:y 1
-    * label *label365
-    * label *label366
-    * label *label367
   651 op add *tmp309 :createCombinedMask:x 4
   652 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label368
-    * label *label369
   653 op shl *tmp308 :createBlockMaskRow:result 1
   654 op add *tmp309 :createCombinedMask:x 3
   655 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   656 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label370
-    * label *label371
   657 op shl *tmp308 :createBlockMaskRow:result 1
   658 op add *tmp309 :createCombinedMask:x 2
   659 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   660 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label372
-    * label *label373
   661 op shl *tmp308 :createBlockMaskRow:result 1
   662 op add *tmp309 :createCombinedMask:x 1
   663 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   664 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label374
-    * label *label375
   665 op shl *tmp308 :createBlockMaskRow:result 1
   666 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   667 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label376
-    * label *label377
   668 op shl *tmp308 :createBlockMaskRow:result 1
   669 op add *tmp309 :createCombinedMask:x -1
   670 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   671 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label378
-    * label *label379
   672 op shl *tmp308 :createBlockMaskRow:result 1
   673 op add *tmp309 :createCombinedMask:x -2
   674 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   675 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label380
-    * label *label381
   676 op shl *tmp308 :createBlockMaskRow:result 1
   677 op add *tmp309 :createCombinedMask:x -3
   678 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   679 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label382
-    * label *label383
   680 op shl *tmp308 :createBlockMaskRow:result 1
   681 op add *tmp309 :createCombinedMask:x -4
   682 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   683 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label384
-    * label *label385
-    * label *label386
   684 op shl *tmp324 :createAdjacentMask:row1 1
   685 op or *tmp325 :createAdjacentMask:row2 *tmp324
   686 op shr *tmp326 :createAdjacentMask:row1 1
 
   691 op or :createAdjacentMask:result *tmp329 *tmp330
   692 set :createAdjacentMask:row2 :createAdjacentMask:row1
   693 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label261
-    * label *label262
-    * label *label387
-    * label *label388
-    * label *label389
   694 op add *tmp309 :createCombinedMask:x 4
   695 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label390
-    * label *label391
   696 op shl *tmp308 :createBlockMaskRow:result 1
   697 op add *tmp309 :createCombinedMask:x 3
   698 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   699 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label392
-    * label *label393
   700 op shl *tmp308 :createBlockMaskRow:result 1
   701 op add *tmp309 :createCombinedMask:x 2
   702 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   703 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label394
-    * label *label395
   704 op shl *tmp308 :createBlockMaskRow:result 1
   705 op add *tmp309 :createCombinedMask:x 1
   706 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   707 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label396
-    * label *label397
   708 op shl *tmp308 :createBlockMaskRow:result 1
   709 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp311 *tmp310 *tmp312
   710 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label398
-    * label *label399
   711 op shl *tmp308 :createBlockMaskRow:result 1
   712 op add *tmp309 :createCombinedMask:x -1
   713 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   714 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label400
-    * label *label401
   715 op shl *tmp308 :createBlockMaskRow:result 1
   716 op add *tmp309 :createCombinedMask:x -2
   717 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   718 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label402
-    * label *label403
   719 op shl *tmp308 :createBlockMaskRow:result 1
   720 op add *tmp309 :createCombinedMask:x -3
   721 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   722 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label404
-    * label *label405
   723 op shl *tmp308 :createBlockMaskRow:result 1
   724 op add *tmp309 :createCombinedMask:x -4
   725 ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
   726 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label406
-    * label *label407
-    * label *label408
   727 op shl *tmp324 :createAdjacentMask:row1 1
   728 op or *tmp325 :createAdjacentMask:row2 *tmp324
   729 op shr *tmp326 :createAdjacentMask:row1 1
 
   734 op or :createAdjacentMask:result *tmp329 *tmp330
   735 set :createAdjacentMask:row2 :createAdjacentMask:row1
   736 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label264
-    * label *label265
   737 op add *tmp322 :createCombinedMask:y -1
-    * label *label409
-    * label *label410
-    * label *label411
   738 op add *tmp309 :createCombinedMask:x 4
   739 ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label412
-    * label *label413
   740 op shl *tmp308 :createBlockMaskRow:result 1
   741 op add *tmp309 :createCombinedMask:x 3
   742 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   743 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label414
-    * label *label415
   744 op shl *tmp308 :createBlockMaskRow:result 1
   745 op add *tmp309 :createCombinedMask:x 2
   746 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   747 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label416
-    * label *label417
   748 op shl *tmp308 :createBlockMaskRow:result 1
   749 op add *tmp309 :createCombinedMask:x 1
   750 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   751 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label418
-    * label *label419
   752 op shl *tmp308 :createBlockMaskRow:result 1
   753 ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
   754 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label420
-    * label *label421
   755 op shl *tmp308 :createBlockMaskRow:result 1
   756 op add *tmp309 :createCombinedMask:x -1
   757 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   758 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label422
-    * label *label423
   759 op shl *tmp308 :createBlockMaskRow:result 1
   760 op add *tmp309 :createCombinedMask:x -2
   761 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   762 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label424
-    * label *label425
   763 op shl *tmp308 :createBlockMaskRow:result 1
   764 op add *tmp309 :createCombinedMask:x -3
   765 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   766 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label426
-    * label *label427
   767 op shl *tmp308 :createBlockMaskRow:result 1
   768 op add *tmp309 :createCombinedMask:x -4
   769 ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
   770 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label428
-    * label *label429
-    * label *label430
   771 op shl *tmp324 :createAdjacentMask:row1 1
   772 op or *tmp325 :createAdjacentMask:row2 *tmp324
   773 op shr *tmp326 :createAdjacentMask:row1 1
 
   778 op or :createAdjacentMask:result *tmp329 *tmp330
   779 set :createAdjacentMask:row2 :createAdjacentMask:row1
   780 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label267
-    * label *label268
   781 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * label *label431
-    * label *label432
-    * label *label433
   782 op add *tmp309 :createCombinedMask:x 4
   783 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
-    * label *label434
-    * label *label435
   784 op shl *tmp308 :createBlockMaskRow:result 1
   785 op add *tmp309 :createCombinedMask:x 3
   786 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   787 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label436
-    * label *label437
   788 op shl *tmp308 :createBlockMaskRow:result 1
   789 op add *tmp309 :createCombinedMask:x 2
   790 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   791 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label438
-    * label *label439
   792 op shl *tmp308 :createBlockMaskRow:result 1
   793 op add *tmp309 :createCombinedMask:x 1
   794 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   795 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label440
-    * label *label441
   796 op shl *tmp308 :createBlockMaskRow:result 1
   797 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   798 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label442
-    * label *label443
   799 op shl *tmp308 :createBlockMaskRow:result 1
   800 op add *tmp309 :createCombinedMask:x -1
   801 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   802 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label444
-    * label *label445
   803 op shl *tmp308 :createBlockMaskRow:result 1
   804 op add *tmp309 :createCombinedMask:x -2
   805 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   806 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label446
-    * label *label447
   807 op shl *tmp308 :createBlockMaskRow:result 1
   808 op add *tmp309 :createCombinedMask:x -3
   809 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   810 op or :createBlockMaskRow:result *tmp308 *tmp310
-    * label *label448
-    * label *label449
   811 op shl *tmp308 :createBlockMaskRow:result 1
   812 op add *tmp309 :createCombinedMask:x -4
   813 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   814 op or :createBlockMaskRow*retval *tmp308 *tmp310
-    * label *label450
-    * label *label451
-    * label *label452
   815 op shl *tmp324 :createAdjacentMask:row1 1
   816 op or *tmp325 :createAdjacentMask:row2 *tmp324
   817 op shr *tmp326 :createAdjacentMask:row1 1
 
   822 op or :createAdjacentMask:result *tmp329 *tmp330
   823 set :createAdjacentMask:row2 :createAdjacentMask:row1
   824 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label270
   825 op sub :createAdjacentMask:r -2 1
-    * label *label271
   826 op add *tmp322 :createCombinedMask:y -3
   827 set :createBlockMaskRow:x :createCombinedMask:x
   828 set :createBlockMaskRow:y *tmp322
 
   839 op or :createAdjacentMask:result *tmp329 *tmp330
   840 set :createAdjacentMask:row2 :createAdjacentMask:row1
   841 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label273
   842 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label274
   843 op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r
   844 set :createBlockMaskRow:x :createAdjacentMask:x
   845 set :createBlockMaskRow:y *tmp322
 
   856 op or :createAdjacentMask:result *tmp329 *tmp330
   857 set :createAdjacentMask:row2 :createAdjacentMask:row1
   858 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label276
   859 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label150
   860 op shr *tmp317 :createAdjacentMask:result 1
-    * label *label145
   861 label *label152
   862 wait 1e-15
   863 read *tmp333 processor1 ":createTerrainMask*finished"
 
   874 call *label10 *invalid :excludeArea*retval (m:*label153) (h:*label153)
   875 label *label153
   876 set :createCombinedMask*retval :excludeArea*retval
-    * label *label144
   877 return :createCombinedMask*retaddr
   878 end
   879 label *label15
 
   887 set .water1X -1
   888 set :moveTo.5:x .drillX
   889 set :moveTo.5:y .drillY
-    * label *label156
   890 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
   891 jump *label158 notEqual *tmp336 false
   892 label *label278
   893 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label157
   894 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336
   895 jump *label278 equal *tmp336 false
   896 label *label158
-    * label *label155
   897 set :createCombinedMask:x .drillX
   898 set :createCombinedMask:y .drillY
   899 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   900 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   901 label *label159
-    * label *label160
   902 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * label *label161
   903 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * label *label162
   904 set :layoutThoriumDrillAtLocation:mask2x2 387
   905 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   906 set :findPossiblePlacement:placementMask 387
 
   918 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp381
   919 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp381
   920 label *label164
-    * label *label165
   921 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   922 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   923 set :findPossiblePlacement:width 2
 
   933 op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   934 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp390
   935 label *label167
-    * label *label168
-    * label *label169
   936 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   937 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   938 set :findPossiblePlacement:placementMask 1
 
   945 set :layoutThoriumDrillAtLocation*retval false
   946 jump *label154 always
   947 label *label171
-    * label *label172
   948 op add .node1X .drillX :findPossiblePlacement:x
   949 op add .node1Y .drillY :findPossiblePlacement:y
   950 op shl *tmp411 1 :findPossiblePlacement*retval
   951 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp411
-    * label *label173
   952 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * label *label174
   953 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   954 set :tryPlaceGenerator:centerX .drillX
   955 set :tryPlaceGenerator:centerY .drillY
 
   963 set :layoutThoriumDrillAtLocation*retval true
   964 jump *label154 always
   965 label *label176
-    * label *label177
   966 set :layoutThoriumDrillAtLocation:sx 3
   967 set :layoutThoriumDrillAtLocation:sy 3
   968 setaddr *tmp426 *label181
 
   990 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
   991 label *label185
   992 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label289
   993 op abs *tmp160 :layoutThoriumDrillAtLocation:sx
   994 op greaterThan *tmp161 *tmp160 6
   995 op abs *tmp162 :layoutThoriumDrillAtLocation:sy
 
   999 set :shiftMask*retval 0
  1000 jump *label298 always
  1001 label *label290
-    * label *label291
  1002 op mul *tmp166 7 :layoutThoriumDrillAtLocation:sy
  1003 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp166
  1004 jump *label292 lessThanEq :shiftMask:shift 0
 
  1015 jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0
  1016 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
  1017 label *label294
-    * label *label295
  1018 op shl *tmp180 :shiftMask:keep 7
  1019 op or :shiftMask:keep :shiftMask:keep *tmp180
  1020 op shl *tmp181 :shiftMask:keep 14
 
  1023 op or :shiftMask:keep :shiftMask:keep *tmp182
  1024 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
  1025 label *label296
-    * label *label297
  1026 set :shiftMask*retval :shiftMask:mask
  1027 label *label298
  1028 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
  1040 set :layoutThoriumDrillAtLocation*retval true
  1041 jump *label154 always
  1042 label *label188
-    * label *label189
-    * label *label179
  1043 multijump *tmp426 0 0 (m:marker0)
  1044 multilabel *label184 (m:marker0)
-    * label *label180
  1045 set :layoutThoriumDrillAtLocation*retval true
  1046 label *label154
  1047 return :layoutThoriumDrillAtLocation*retaddr
 
  1063 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1064 set .searchFinished true
  1065 set :findDrillLocation*retval true
-    * label *label190
  1066 set :findDrillLocation*finished true
  1067 jump *label18 always
  1068 end
 
  1083 set :layoutThoriumDrill*retval false
  1084 jump *label192 always
  1085 label *label194
-    * label *label195
  1086 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)
  1087 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label196) (h:*label196)
  1088 label *label196
 
  1097 set .mapTotal 0
  1098 set .mapProgress 0
  1099 ucontrol unbind
-    * label *label197
  1100 set :stopLocation*finished true
  1101 jump *label18 always
  1102 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-11 instructions):
 
    98 op sub *tmp63 :locateOreAway:y *tmp44
    99 op len :locateOreAway:unitDist *tmp62 *tmp63
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label30 always
+  101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
   102 label *label42
   103 label *label40
   104 jump *label44 lessThan :locateOreAway:coreDist 8
 
   180 op sub *tmp115 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   181 op abs *tmp116 *tmp115
   182 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
-    * jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
-    * jump *label67 always
+  183 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
   184 label *label69
   185 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   186 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
 
   208 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   209 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   210 label *label78
-    * jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label67 always
+  211 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   212 label *label80
   213 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   214 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   258 op shl *tmp202 1 :excludeArea:blockSizeX
   259 op sub :createMatrixOfSize:row *tmp202 1
   260 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * jump *label232 lessThan 1 :excludeArea:blockSizeY
-    * jump *label102 always
+  261 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
   262 label *label232
   263 op shl *tmp206 :createMatrixOfSize:row 7
   264 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * jump *label236 lessThan 2 :excludeArea:blockSizeY
-    * jump *label102 always
+  265 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
   266 label *label236
   267 op shl *tmp206 :createMatrixOfSize:matrix 7
   268 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * jump *label240 lessThan 3 :excludeArea:blockSizeY
-    * jump *label102 always
+  269 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
   270 label *label240
   271 op shl *tmp206 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * jump *label244 lessThan 4 :excludeArea:blockSizeY
-    * jump *label102 always
+  273 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
   274 label *label244
   275 op shl *tmp206 :createMatrixOfSize:matrix 7
   276 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * jump *label248 lessThan 5 :excludeArea:blockSizeY
-    * jump *label102 always
+  277 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
   278 label *label248
   279 op shl *tmp206 :createMatrixOfSize:matrix 7
   280 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
-    * jump *label252 lessThan 6 :excludeArea:blockSizeY
-    * jump *label102 always
+  281 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
   282 label *label252
   283 op shl *tmp206 :createMatrixOfSize:matrix 7
   284 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
 
   351 jump *label106 always
   352 label *label113
   353 op sub *tmp224 3 :findPossiblePlacement:width
-    * jump *label115 lessThanEq :findPossiblePlacement:x *tmp224
-    * jump *label112 always
+  354 jump *label112 greaterThan :findPossiblePlacement:x *tmp224
   355 label *label115
   356 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   357 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   358 jump *label206 lessThanEq :findPossiblePlacement:x 3
   359 label *label112
   360 op sub *tmp227 3 :findPossiblePlacement:height
-    * jump *label117 lessThanEq :findPossiblePlacement:y *tmp227
-    * jump *label109 always
+  361 jump *label109 greaterThan :findPossiblePlacement:y *tmp227
   362 label *label117
   363 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   364 jump *label205 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    99 op len :locateOreAway:unitDist *tmp62 *tmp63
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label42
   102 label *label40
   103 jump *label44 lessThan :locateOreAway:coreDist 8
   104 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   180 op abs *tmp116 *tmp115
   181 op max :findDrillLocationLocal:coreDist *tmp114 *tmp116
   182 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
-    * label *label69
   183 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   184 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   185 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   207 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   208 label *label78
   209 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label80
   210 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   211 op mul :round:x :findDrillLocationLocal:diffX 1.1
   212 op add *tmp142 :round:x 0.5
 
   256 op sub :createMatrixOfSize:row *tmp202 1
   257 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   258 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
-    * label *label232
   259 op shl *tmp206 :createMatrixOfSize:row 7
   260 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   261 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
-    * label *label236
   262 op shl *tmp206 :createMatrixOfSize:matrix 7
   263 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   264 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
-    * label *label240
   265 op shl *tmp206 :createMatrixOfSize:matrix 7
   266 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   267 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
-    * label *label244
   268 op shl *tmp206 :createMatrixOfSize:matrix 7
   269 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   270 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
-    * label *label248
   271 op shl *tmp206 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   273 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
-    * label *label252
   274 op shl *tmp206 :createMatrixOfSize:matrix 7
   275 op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize:row
   276 label *label102
 
   343 label *label113
   344 op sub *tmp224 3 :findPossiblePlacement:width
   345 jump *label112 greaterThan :findPossiblePlacement:x *tmp224
-    * label *label115
   346 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   347 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   348 jump *label206 lessThanEq :findPossiblePlacement:x 3
   349 label *label112
   350 op sub *tmp227 3 :findPossiblePlacement:height
   351 jump *label109 greaterThan :findPossiblePlacement:y *tmp227
-    * label *label117
   352 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   353 jump *label205 lessThanEq :findPossiblePlacement:y 3
   354 label *label109

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   144 set :findDrillLocationLocal:oreY :locateOreAway:y
   145 jump *label56 notEqual *tmp27 false
   146 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label19 always
+  147 return :findDrillLocationLocal*retaddr
   148 label *label56
   149 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   150 op add .mapSpots .mapSpots 1
 
   198 op add .locations .locations 1
   199 ucontrol unbind
   200 set :findDrillLocationLocal*retval true
-    * jump *label19 always
+  201 return :findDrillLocationLocal*retaddr
   202 label *label75
   203 label *label71
   204 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   218 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp145
   219 jump *label65 always
   220 label *label67
-    * jump *label84 lessThan :findDrillLocationLocal:best 0
+  221 jump *label25 lessThan :findDrillLocationLocal:best 0
   222 op add .count .count 1
   223 sensor *tmp152 :findDrillLocationLocal:item @id
   224 write *tmp152 bank1 .count
 
   316 set :shiftMask*retval :shiftMask:mask
   317 label *label288
   318 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
-    * jump *label96 always
-    * jump *label98 always
+  319 return :excludeArea*retaddr
+  320 return :excludeArea*retaddr
   321 label *label97
   322 set :excludeArea*retval :excludeArea:mask
   323 label *label98
 
   339 op mul *tmp221 :findPossiblePlacement:y 7
   340 op add *tmp222 24 *tmp221
   341 op add :findPossiblePlacement*retval *tmp222 :findPossiblePlacement:x
-    * jump *label106 always
+  342 return :findPossiblePlacement*retaddr
   343 label *label113
   344 op sub *tmp224 3 :findPossiblePlacement:width
   345 jump *label112 greaterThan :findPossiblePlacement:x *tmp224
 
   367 jump *label121 lessThan :findPossiblePlacement*retval 0
   368 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   369 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  370 return :tryPlaceGenerator*retaddr
   371 label *label123
   372 op add *tmp235 :tryPlaceGenerator:centerX 0.5
   373 op add .water2X *tmp235 :findPossiblePlacement:x
 
   389 label *label125
   390 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   391 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  392 return :tryPlaceGenerator*retaddr
   393 label *label126
   394 op add *tmp247 :tryPlaceGenerator:centerX 0.5
   395 op add .water2X *tmp247 :findPossiblePlacement:x
 
   411 label *label129
   412 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   413 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  414 return :tryPlaceGenerator*retaddr
   415 label *label130
   416 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   417 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   426 label *label132
   427 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   428 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  429 return :tryPlaceGenerator*retaddr
   430 label *label133
   431 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   432 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   461 label *label137
   462 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   463 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  464 return :tryPlaceGenerator*retaddr
   465 label *label138
   466 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   467 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   468 label *label135
   469 set :tryPlaceGenerator*retval true
-    * jump *label119 always
+  470 return :tryPlaceGenerator*retaddr
   471 label *label119
   472 return :tryPlaceGenerator*retaddr
   473 end
 
   921 label *label170
   922 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   923 set :layoutThoriumDrillAtLocation*retval false
-    * jump *label154 always
+  924 return :layoutThoriumDrillAtLocation*retaddr
   925 label *label171
   926 op add .node1X .drillX :findPossiblePlacement:x
   927 op add .node1Y .drillY :findPossiblePlacement:y
 
   939 label *label175
   940 jump *label176 equal :tryPlaceGenerator*retval false
   941 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
+  942 return :layoutThoriumDrillAtLocation*retaddr
   943 label *label176
   944 set :layoutThoriumDrillAtLocation:sx 3
   945 set :layoutThoriumDrillAtLocation:sy 3
 
  1016 label *label187
  1017 jump *label188 equal :tryPlaceGenerator*retval false
  1018 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
+ 1019 return :layoutThoriumDrillAtLocation*retaddr
  1020 label *label188
  1021 multijump *tmp426 0 0 (m:marker0)
  1022 multilabel *label184 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-15 instructions):
 
    12 label *label18
    13 wait 1e12
    14 jump *label18 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   228 op add .count .count 1
   229 write :findDrillLocationLocal:bestY bank1 .count
   230 op add .locations .locations 1
-    * label *label84
   231 jump *label25 always
-    * set :findDrillLocationLocal*retval null
-    * label *label19
-    * return :findDrillLocationLocal*retaddr
-    * end
   232 label *label10
   233 op add *tmp184 :excludeArea:areaWidth 8
   234 op idiv *tmp185 *tmp184 2
 
   311 label *label288
   312 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   313 return :excludeArea*retaddr
-    * return :excludeArea*retaddr
   314 label *label97
   315 set :excludeArea*retval :excludeArea:mask
-    * label *label98
-    * label *label96
   316 return :excludeArea*retaddr
-    * end
   317 label *label11
   318 set :findPossiblePlacement:y -3
   319 jump *label109 greaterThan :findPossiblePlacement:y 3
 
   343 jump *label205 lessThanEq :findPossiblePlacement:y 3
   344 label *label109
   345 set :findPossiblePlacement*retval -1
-    * label *label106
   346 return :findPossiblePlacement*retaddr
-    * end
   347 label *label12
   348 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   349 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
 
   456 label *label135
   457 set :tryPlaceGenerator*retval true
   458 return :tryPlaceGenerator*retaddr
-    * label *label119
-    * return :tryPlaceGenerator*retaddr
-    * end
   459 label *label13
   460 op add *tmp309 :createBlockMaskRow:x 4
   461 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
 
   491 ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
   492 op or :createBlockMaskRow*retval *tmp308 *tmp310
   493 return :createBlockMaskRow*retaddr
-    * end
   494 label *label14
   495 write @unit processor1 ":createTerrainMask:unit"
   496 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   837 label *label153
   838 set :createCombinedMask*retval :excludeArea*retval
   839 return :createCombinedMask*retaddr
-    * end
   840 label *label15
   841 set .panelY -1
   842 set .panelX -1
 
  1004 multijump *tmp426 0 0 (m:marker0)
  1005 multilabel *label184 (m:marker0)
  1006 set :layoutThoriumDrillAtLocation*retval true
-    * label *label154
  1007 return :layoutThoriumDrillAtLocation*retaddr
-    * end
  1008 label *label2
  1009 set .searchFinished false
  1010 set :findDrillLocationLocal:x :findDrillLocation:x
 
  1024 set :findDrillLocation*retval true
  1025 set :findDrillLocation*finished true
  1026 jump *label18 always
-    * end
  1027 label *label3
  1028 set :findDrillLocationLocal:x :layoutThoriumDrill:x
  1029 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1048 label *label192
  1049 set :layoutThoriumDrill*finished true
  1050 jump *label18 always
-    * end
  1051 label *label4
  1052 set .mapSpots 0
  1053 set .mapAction 0
 
  1056 ucontrol unbind
  1057 set :stopLocation*finished true
  1058 jump *label18 always
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    83 op add .angle .angle *tmp50
    84 op mul .mapProgress .angle .angle
    85 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp53 *tmp54
+   86 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp53 0
    87 jump *label38 notEqual *tmp53 false
    88 set *tmp27 false
    89 jump *label28 always
 
   458 return :tryPlaceGenerator*retaddr
   459 label *label13
   460 op add *tmp309 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
+  461 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   462 op shl *tmp308 :createBlockMaskRow:result 1
   463 op add *tmp309 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  464 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   465 op or :createBlockMaskRow:result *tmp308 *tmp310
   466 op shl *tmp308 :createBlockMaskRow:result 1
   467 op add *tmp309 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  468 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   469 op or :createBlockMaskRow:result *tmp308 *tmp310
   470 op shl *tmp308 :createBlockMaskRow:result 1
   471 op add *tmp309 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  472 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   473 op or :createBlockMaskRow:result *tmp308 *tmp310
   474 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  475 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp310 0
   476 op or :createBlockMaskRow:result *tmp308 *tmp310
   477 op shl *tmp308 :createBlockMaskRow:result 1
   478 op add *tmp309 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  479 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   480 op or :createBlockMaskRow:result *tmp308 *tmp310
   481 op shl *tmp308 :createBlockMaskRow:result 1
   482 op add *tmp309 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  483 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   484 op or :createBlockMaskRow:result *tmp308 *tmp310
   485 op shl *tmp308 :createBlockMaskRow:result 1
   486 op add *tmp309 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  487 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   488 op or :createBlockMaskRow:result *tmp308 *tmp310
   489 op shl *tmp308 :createBlockMaskRow:result 1
   490 op add *tmp309 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  491 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   492 op or :createBlockMaskRow*retval *tmp308 *tmp310
   493 return :createBlockMaskRow*retaddr
   494 label *label14
 
   501 set :createAdjacentMask:y :createCombinedMask:y
   502 op add *tmp318 :createCombinedMask:y 4
   503 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 :createBlockMaskRow:result *tmp312
+  504 ucontrol getBlock *tmp309 *tmp318 0 :createBlockMaskRow:result 0
   505 op shl *tmp308 :createBlockMaskRow:result 1
   506 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  507 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   508 op or :createBlockMaskRow:result *tmp308 *tmp310
   509 op shl *tmp308 :createBlockMaskRow:result 1
   510 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  511 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   512 op or :createBlockMaskRow:result *tmp308 *tmp310
   513 op shl *tmp308 :createBlockMaskRow:result 1
   514 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  515 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   516 op or :createBlockMaskRow:result *tmp308 *tmp310
   517 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp318 *tmp311 *tmp310 *tmp312
+  518 ucontrol getBlock :createCombinedMask:x *tmp318 0 *tmp310 0
   519 op or :createBlockMaskRow:result *tmp308 *tmp310
   520 op shl *tmp308 :createBlockMaskRow:result 1
   521 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  522 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   523 op or :createBlockMaskRow:result *tmp308 *tmp310
   524 op shl *tmp308 :createBlockMaskRow:result 1
   525 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  526 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   527 op or :createBlockMaskRow:result *tmp308 *tmp310
   528 op shl *tmp308 :createBlockMaskRow:result 1
   529 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  530 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   531 op or :createBlockMaskRow:result *tmp308 *tmp310
   532 op shl *tmp308 :createBlockMaskRow:result 1
   533 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp318 *tmp311 *tmp310 *tmp312
+  534 ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0
   535 op or :createAdjacentMask:row2 *tmp308 *tmp310
   536 op add *tmp320 :createCombinedMask:y 3
   537 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 :createBlockMaskRow:result *tmp312
+  538 ucontrol getBlock *tmp309 *tmp320 0 :createBlockMaskRow:result 0
   539 op shl *tmp308 :createBlockMaskRow:result 1
   540 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  541 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   542 op or :createBlockMaskRow:result *tmp308 *tmp310
   543 op shl *tmp308 :createBlockMaskRow:result 1
   544 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  545 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   546 op or :createBlockMaskRow:result *tmp308 *tmp310
   547 op shl *tmp308 :createBlockMaskRow:result 1
   548 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  549 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   550 op or :createBlockMaskRow:result *tmp308 *tmp310
   551 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp320 *tmp311 *tmp310 *tmp312
+  552 ucontrol getBlock :createCombinedMask:x *tmp320 0 *tmp310 0
   553 op or :createBlockMaskRow:result *tmp308 *tmp310
   554 op shl *tmp308 :createBlockMaskRow:result 1
   555 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  556 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   557 op or :createBlockMaskRow:result *tmp308 *tmp310
   558 op shl *tmp308 :createBlockMaskRow:result 1
   559 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  560 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   561 op or :createBlockMaskRow:result *tmp308 *tmp310
   562 op shl *tmp308 :createBlockMaskRow:result 1
   563 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  564 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   565 op or :createBlockMaskRow:result *tmp308 *tmp310
   566 op shl *tmp308 :createBlockMaskRow:result 1
   567 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp320 *tmp311 *tmp310 *tmp312
+  568 ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0
   569 op or :createAdjacentMask:row1 *tmp308 *tmp310
   570 op add *tmp322 :createCombinedMask:y 2
   571 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
+  572 ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:result 0
   573 op shl *tmp308 :createBlockMaskRow:result 1
   574 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  575 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   576 op or :createBlockMaskRow:result *tmp308 *tmp310
   577 op shl *tmp308 :createBlockMaskRow:result 1
   578 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  579 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   580 op or :createBlockMaskRow:result *tmp308 *tmp310
   581 op shl *tmp308 :createBlockMaskRow:result 1
   582 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  583 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   584 op or :createBlockMaskRow:result *tmp308 *tmp310
   585 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
+  586 ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0
   587 op or :createBlockMaskRow:result *tmp308 *tmp310
   588 op shl *tmp308 :createBlockMaskRow:result 1
   589 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  590 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   591 op or :createBlockMaskRow:result *tmp308 *tmp310
   592 op shl *tmp308 :createBlockMaskRow:result 1
   593 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  594 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   595 op or :createBlockMaskRow:result *tmp308 *tmp310
   596 op shl *tmp308 :createBlockMaskRow:result 1
   597 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  598 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   599 op or :createBlockMaskRow:result *tmp308 *tmp310
   600 op shl *tmp308 :createBlockMaskRow:result 1
   601 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  602 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   603 op or :createBlockMaskRow:result *tmp308 *tmp310
   604 op shl *tmp324 :createAdjacentMask:row1 1
   605 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   611 set :createAdjacentMask:row1 :createBlockMaskRow:result
   612 op add *tmp322 :createCombinedMask:y 1
   613 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
+  614 ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:result 0
   615 op shl *tmp308 :createBlockMaskRow:result 1
   616 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  617 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   618 op or :createBlockMaskRow:result *tmp308 *tmp310
   619 op shl *tmp308 :createBlockMaskRow:result 1
   620 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  621 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   622 op or :createBlockMaskRow:result *tmp308 *tmp310
   623 op shl *tmp308 :createBlockMaskRow:result 1
   624 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  625 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   626 op or :createBlockMaskRow:result *tmp308 *tmp310
   627 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
+  628 ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0
   629 op or :createBlockMaskRow:result *tmp308 *tmp310
   630 op shl *tmp308 :createBlockMaskRow:result 1
   631 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  632 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   633 op or :createBlockMaskRow:result *tmp308 *tmp310
   634 op shl *tmp308 :createBlockMaskRow:result 1
   635 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  636 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   637 op or :createBlockMaskRow:result *tmp308 *tmp310
   638 op shl *tmp308 :createBlockMaskRow:result 1
   639 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  640 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   641 op or :createBlockMaskRow:result *tmp308 *tmp310
   642 op shl *tmp308 :createBlockMaskRow:result 1
   643 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  644 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   645 op or :createBlockMaskRow:result *tmp308 *tmp310
   646 op shl *tmp324 :createAdjacentMask:row1 1
   647 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   654 set :createAdjacentMask:row2 :createAdjacentMask:row1
   655 set :createAdjacentMask:row1 :createBlockMaskRow:result
   656 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 :createBlockMaskRow:result *tmp312
+  657 ucontrol getBlock *tmp309 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   658 op shl *tmp308 :createBlockMaskRow:result 1
   659 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  660 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   661 op or :createBlockMaskRow:result *tmp308 *tmp310
   662 op shl *tmp308 :createBlockMaskRow:result 1
   663 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  664 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   665 op or :createBlockMaskRow:result *tmp308 *tmp310
   666 op shl *tmp308 :createBlockMaskRow:result 1
   667 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  668 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   669 op or :createBlockMaskRow:result *tmp308 *tmp310
   670 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  671 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp310 0
   672 op or :createBlockMaskRow:result *tmp308 *tmp310
   673 op shl *tmp308 :createBlockMaskRow:result 1
   674 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  675 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   676 op or :createBlockMaskRow:result *tmp308 *tmp310
   677 op shl *tmp308 :createBlockMaskRow:result 1
   678 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  679 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   680 op or :createBlockMaskRow:result *tmp308 *tmp310
   681 op shl *tmp308 :createBlockMaskRow:result 1
   682 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  683 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   684 op or :createBlockMaskRow:result *tmp308 *tmp310
   685 op shl *tmp308 :createBlockMaskRow:result 1
   686 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 :createCombinedMask:y *tmp311 *tmp310 *tmp312
+  687 ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0
   688 op or :createBlockMaskRow:result *tmp308 *tmp310
   689 op shl *tmp324 :createAdjacentMask:row1 1
   690 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   698 set :createAdjacentMask:row1 :createBlockMaskRow:result
   699 op add *tmp322 :createCombinedMask:y -1
   700 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 :createBlockMaskRow:result *tmp312
+  701 ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:result 0
   702 op shl *tmp308 :createBlockMaskRow:result 1
   703 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  704 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   705 op or :createBlockMaskRow:result *tmp308 *tmp310
   706 op shl *tmp308 :createBlockMaskRow:result 1
   707 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  708 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   709 op or :createBlockMaskRow:result *tmp308 *tmp310
   710 op shl *tmp308 :createBlockMaskRow:result 1
   711 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  712 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   713 op or :createBlockMaskRow:result *tmp308 *tmp310
   714 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp322 *tmp311 *tmp310 *tmp312
+  715 ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0
   716 op or :createBlockMaskRow:result *tmp308 *tmp310
   717 op shl *tmp308 :createBlockMaskRow:result 1
   718 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  719 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   720 op or :createBlockMaskRow:result *tmp308 *tmp310
   721 op shl *tmp308 :createBlockMaskRow:result 1
   722 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  723 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   724 op or :createBlockMaskRow:result *tmp308 *tmp310
   725 op shl *tmp308 :createBlockMaskRow:result 1
   726 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  727 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   728 op or :createBlockMaskRow:result *tmp308 *tmp310
   729 op shl *tmp308 :createBlockMaskRow:result 1
   730 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 *tmp322 *tmp311 *tmp310 *tmp312
+  731 ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0
   732 op or :createBlockMaskRow:result *tmp308 *tmp310
   733 op shl *tmp324 :createAdjacentMask:row1 1
   734 op or *tmp325 :createAdjacentMask:row2 *tmp324
 
   742 set :createAdjacentMask:row1 :createBlockMaskRow:result
   743 op add :createBlockMaskRow:y :createCombinedMask:y -2
   744 op add *tmp309 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 :createBlockMaskRow:result *tmp312
+  745 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   746 op shl *tmp308 :createBlockMaskRow:result 1
   747 op add *tmp309 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  748 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   749 op or :createBlockMaskRow:result *tmp308 *tmp310
   750 op shl *tmp308 :createBlockMaskRow:result 1
   751 op add *tmp309 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  752 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   753 op or :createBlockMaskRow:result *tmp308 *tmp310
   754 op shl *tmp308 :createBlockMaskRow:result 1
   755 op add *tmp309 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  756 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   757 op or :createBlockMaskRow:result *tmp308 *tmp310
   758 op shl *tmp308 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  759 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp310 0
   760 op or :createBlockMaskRow:result *tmp308 *tmp310
   761 op shl *tmp308 :createBlockMaskRow:result 1
   762 op add *tmp309 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  763 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   764 op or :createBlockMaskRow:result *tmp308 *tmp310
   765 op shl *tmp308 :createBlockMaskRow:result 1
   766 op add *tmp309 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  767 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   768 op or :createBlockMaskRow:result *tmp308 *tmp310
   769 op shl *tmp308 :createBlockMaskRow:result 1
   770 op add *tmp309 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  771 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   772 op or :createBlockMaskRow:result *tmp308 *tmp310
   773 op shl *tmp308 :createBlockMaskRow:result 1
   774 op add *tmp309 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp309 :createBlockMaskRow:y *tmp311 *tmp310 *tmp312
+  775 ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0
   776 op or :createBlockMaskRow*retval *tmp308 *tmp310
   777 op shl *tmp324 :createAdjacentMask:row1 1
   778 op or *tmp325 :createAdjacentMask:row2 *tmp324

Final code before resolving virtual instructions:

    0:  jump *label16 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label16                                               ...
        label *label17                                               OreLocator.mnd: require "Matrices.mnd" remote matrices;
    4:  read *tmp10 processor1 "*signature"                          ...
    5:  jump *label17 notEqual *tmp10 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label18                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label18 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set .coreX :findDrillLocationLocal:x                         OreLocator.mnd: coreX = x;
   15:  set .coreY :findDrillLocationLocal:y                         OreLocator.mnd: coreY = y;
   16:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   17:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   18:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   19:  set .mapSpots :findDrillLocationLocal:dx                     ...
   20:  op sub *tmp12 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   21:  op sub *tmp13 @maph :findDrillLocationLocal:y                ...
   22:  op max *tmp14 :findDrillLocationLocal:x :findDrillLocationLo ...
   23:  op max *tmp14 *tmp14 *tmp12                                  ...
   24:  op max *tmp14 *tmp14 *tmp13                                  ...
   25:  set :findDrillLocationLocal:distanceLimit *tmp14             ...
   26:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   27:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   28:  set .mapProgress 0                                           ...
   29:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   30:  jump *label24 notEqual *tmp17 false                          ...
        label *label277                                              ...
   31:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   32:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   33:  jump *label277 equal *tmp17 false                            ...
        label *label24                                               ...
   34:  op div *tmp20 *tmp14 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   35:  op pow .mapTotal *tmp20 2                                    ...
   36:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   37:  set :findDrillLocationLocal:oreY 0                           ...
        label *label25                                               OreLocator.mnd: while true do
   38:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   39:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   40:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   41:  op sub *tmp22 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   42:  op mul :findDrillLocationLocal:maxDistance *tmp22 .attenuati ...
   43:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   44:  op div *tmp25 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   45:  op pow .mapTotal *tmp25 2                                    ...
   46:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   47:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   48:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   49:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   50:  set :locateOreAway:lastY -1                                  ...
   51:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   52:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   53:  op sub *tmp36 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   54:  op sub *tmp43 @maph 5                                        ...
   55:  jump *label31 greaterThanEq :locateOreAway:distance :findDri ...
        label *label202                                              ...
   56:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   57:  op sin *tmp33 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   58:  op mul *tmp34 *tmp33 :locateOreAway:distance                 ...
   59:  op add *tmp35 :findDrillLocationLocal:x *tmp34               ...
   60:  op max *tmp38 *tmp35 5                                       OreLocator.mnd: min(max(value, low), high);
   61:  op min *tmp37 *tmp38 *tmp36                                  ...
   62:  op cos *tmp40 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   63:  op mul *tmp41 *tmp40 :locateOreAway:distance                 ...
   64:  op add *tmp42 :findDrillLocationLocal:y *tmp41               ...
   65:  op max *tmp45 *tmp42 5                                       OreLocator.mnd: min(max(value, low), high);
   66:  op min *tmp44 *tmp45 *tmp43                                  ...
   67:  ucontrol within *tmp37 *tmp44 5 *tmp47 0                     OreLocator.mnd: while !within(x, y, radius) do
   68:  jump *label37 notEqual *tmp47 false                          ...
        label *label209                                              ...
   69:  ucontrol approach *tmp37 *tmp44 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   70:  ucontrol within *tmp37 *tmp44 5 *tmp47 0                     OreLocator.mnd: while !within(x, y, radius) do
   71:  jump *label209 equal *tmp47 false                            ...
        label *label37                                               ...
   72:  op div *tmp50 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   73:  op add .angle .angle *tmp50                                  ...
   74:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   75:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   76:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   77:  jump *label38 notEqual *tmp53 false                          ...
   78:  set *tmp27 false                                             OreLocator.mnd: return false;
   79:  jump *label28 always 0 0                                     ...
        label *label38                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   80:  op sub *tmp57 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   81:  op abs *tmp58 *tmp57 0                                       ...
   82:  op sub *tmp59 :locateOreAway:y :findDrillLocationLocal:y     ...
   83:  op abs *tmp60 *tmp59 0                                       ...
   84:  op max :locateOreAway:coreDist *tmp58 *tmp60                 ...
   85:  op sub *tmp62 :locateOreAway:x *tmp37                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   86:  op sub *tmp63 :locateOreAway:y *tmp44                        ...
   87:  op len :locateOreAway:unitDist *tmp62 *tmp63                 ...
   88:  jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   89:  jump *label30 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label40                                               ...
   90:  jump *label44 lessThan :locateOreAway:coreDist 8             OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   91:  jump *label46 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   92:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   93:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   94:  set *tmp74 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   95:  set :visited:i .locationsStart                               ...
   96:  jump *label51 greaterThanEq .locationsStart *tmp74           ...
        label *label203                                              ...
   97:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   98:  op add *tmp76 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   99:  read :visited:lx bank1 *tmp76                                ...
  100:  op add *tmp80 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
  101:  read :visited:ly bank1 *tmp80                                ...
  102:  op sub *tmp82 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  103:  op sub *tmp83 :locateOreAway:y :visited:ly                   ...
  104:  op len *tmp84 *tmp82 *tmp83                                  ...
  105:  jump *label52 greaterThanEq *tmp84 7                         ...
  106:  set *tmp73 true                                              OreLocator.mnd: return true;
  107:  jump *label48 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  108:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  109:  jump *label203 lessThan :visited:i *tmp74                    ...
        label *label51                                               ...
  110:  set *tmp73 false                                             OreLocator.mnd: return false;
        label *label48                                               OreLocator.mnd: if !visited(x, y) then
  111:  jump *label54 notEqual *tmp73 false                          ...
  112:  op div *tmp89 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  113:  op add .angle .angle *tmp89                                  ...
  114:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  115:  printflush message1                                          OreLocator.mnd: printflush(message1);
  116:  set *tmp27 true                                              OreLocator.mnd: return true;
  117:  jump *label28 always 0 0                                     ...
        label *label54                                               OreLocator.mnd: if !visited(x, y) then
        label *label46                                               OreLocator.mnd: if unitDist < distance then
        label *label44                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label30                                               OreLocator.mnd: while distance < distanceLimit do
  118:  jump *label202 lessThan :locateOreAway:distance :findDrillLo ...
        label *label31                                               ...
  119:  set *tmp27 false                                             OreLocator.mnd: return false;
        label *label28                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  120:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  121:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  122:  jump *label56 notEqual *tmp27 false                          ...
  123:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  124:  return :findDrillLocationLocal*retaddr                       ...
        label *label56                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  125:  jump *label58 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  126:  op add .mapSpots .mapSpots 1                                 ...
        label *label58                                               ...
  127:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99 0 OreLocator.mnd: while !within(x, y, radius) do
  128:  jump *label64 notEqual *tmp99 false                          ...
        label *label229                                              ...
  129:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  130:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp99 0 OreLocator.mnd: while !within(x, y, radius) do
  131:  jump *label229 equal *tmp99 false                            ...
        label *label64                                               ...
  132:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label65                                               OreLocator.mnd: while true do
  133:  write @unit processor1 ":findBestPosition:unit"              OreLocator.mnd: var score = matrices.findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  134:  write :findDrillLocationLocal:oreX processor1 ":findBestPosi ...
  135:  write :findDrillLocationLocal:oreY processor1 ":findBestPosi ...
  136:  write :findDrillLocationLocal:ore processor1 ":findBestPosit ...
  137:  write :findDrillLocationLocal:size processor1 ":findBestPosi ...
  138:  write false processor1 ":findBestPosition*finished"          ...
  139:  write 2 processor1 "@counter"                                ...
        label *label68                                               ...
  140:  wait 1e-15                                                   ...
  141:  read *tmp109 processor1 ":findBestPosition*finished"         ...
  142:  jump *label68 equal *tmp109 false                            ...
  143:  read :findDrillLocationLocal:diffX processor1 ":findBestPosi ...
  144:  read :findDrillLocationLocal:diffY processor1 ":findBestPosi ...
  145:  read :findDrillLocationLocal:score processor1 ":findBestPosi ...
  146:  op add :findDrillLocationLocal:newX :findDrillLocationLocal: OreLocator.mnd: var newX = oreX + diffX;
  147:  op add :findDrillLocationLocal:newY :findDrillLocationLocal: OreLocator.mnd: var newY = oreY + diffY;
  148:  op sub *tmp113 :findDrillLocationLocal:newX :findDrillLocati OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  149:  op abs *tmp114 *tmp113 0                                     ...
  150:  op sub *tmp115 :findDrillLocationLocal:newY :findDrillLocati ...
  151:  op abs *tmp116 *tmp115 0                                     ...
  152:  op max :findDrillLocationLocal:coreDist *tmp114 *tmp116      ...
  153:  jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8  OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  154:  jump *label71 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  155:  set :findDrillLocationLocal:dx :findDrillLocationLocal:newX  OreLocator.mnd: dx = newX;
  156:  set :findDrillLocationLocal:dy :findDrillLocationLocal:newY  OreLocator.mnd: dy = newY;
  157:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  158:  select .mapSpots lessThan :findDrillLocationLocal:limit 1000 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  159:  jump *label75 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  160:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  161:  sensor *tmp128 :findDrillLocationLocal:item @id              ...
  162:  write *tmp128 bank1 .count                                   ...
  163:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  164:  write :findDrillLocationLocal:score bank1 .count             ...
  165:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  166:  write :findDrillLocationLocal:dx bank1 .count                ...
  167:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  168:  write :findDrillLocationLocal:dy bank1 .count                ...
  169:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  170:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  171:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  172:  return :findDrillLocationLocal*retaddr                       ...
        label *label75                                               OreLocator.mnd: if capacity >= limit then
        label *label71                                               OreLocator.mnd: if score > capacity then
  173:  jump *label78 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  174:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:ne OreLocator.mnd: bestX = newX;
  175:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:ne OreLocator.mnd: bestY = newY;
  176:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label78                                               OreLocator.mnd: if score > best then
  177:  jump *label67 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  178:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  179:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  180:  op add *tmp142 :round:x 0.5                                  *math: floor(x + 0.5);
  181:  op floor *tmp141 *tmp142 0                                   ...
  182:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  183:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  184:  op add *tmp146 :round.1:x 0.5                                *math: floor(x + 0.5);
  185:  op floor *tmp145 *tmp146 0                                   ...
  186:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: OreLocator.mnd: oreY += round(diffY * 1.1);
  187:  jump *label65 always 0 0                                     OreLocator.mnd: while true do
        label *label67                                               ...
  188:  jump *label25 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  189:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  190:  sensor *tmp152 :findDrillLocationLocal:item @id              ...
  191:  write *tmp152 bank1 .count                                   ...
  192:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  193:  write :findDrillLocationLocal:best bank1 .count              ...
  194:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  195:  write :findDrillLocationLocal:bestX bank1 .count             ...
  196:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  197:  write :findDrillLocationLocal:bestY bank1 .count             ...
  198:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  199:  jump *label25 always 0 0                                     OreLocator.mnd: while true do
        label *label10                                               OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
  200:  op add *tmp184 :excludeArea:areaWidth 8                      OreLocator.mnd: var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
  201:  op idiv *tmp185 *tmp184 2                                    ...
  202:  op sub *tmp186 :excludeArea:maskX :excludeArea:areaX         ...
  203:  op abs *tmp187 *tmp186 0                                     ...
  204:  op sub :excludeArea:overlapX *tmp185 *tmp187                 ...
  205:  op add *tmp190 :excludeArea:areaHeight 8                     OreLocator.mnd: var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);
  206:  op idiv *tmp191 *tmp190 2                                    ...
  207:  op sub *tmp192 :excludeArea:maskY :excludeArea:areaY         ...
  208:  op abs *tmp193 *tmp192 0                                     ...
  209:  op sub :excludeArea:overlapY *tmp191 *tmp193                 ...
  210:  op greaterThan *tmp195 :excludeArea:overlapX 0               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  211:  op greaterThan *tmp196 :excludeArea:overlapY 0               ...
  212:  op land *tmp197 *tmp195 *tmp196                              ...
  213:  jump *label97 equal *tmp197 false                            ...
  214:  op min :excludeArea:blockSizeX 7 :excludeArea:overlapX       OreLocator.mnd: var blockSizeX = min(7, overlapX);
  215:  op min :excludeArea:blockSizeY 7 :excludeArea:overlapY       OreLocator.mnd: var blockSizeY = min(7, overlapY);
  216:  op shl *tmp202 1 :excludeArea:blockSizeX                     OreLocator.mnd: var row = (1 << width) - 1;
  217:  op sub :createMatrixOfSize:row *tmp202 1                     ...
  218:  set :createMatrixOfSize:matrix :createMatrixOfSize:row       OreLocator.mnd: var matrix = row;
  219:  jump *label102 greaterThanEq 1 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  220:  op shl *tmp206 :createMatrixOfSize:row 7                     OreLocator.mnd: matrix = (matrix << 7) | row;
  221:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
  222:  jump *label102 greaterThanEq 2 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  223:  op shl *tmp206 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  224:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
  225:  jump *label102 greaterThanEq 3 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  226:  op shl *tmp206 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  227:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
  228:  jump *label102 greaterThanEq 4 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  229:  op shl *tmp206 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  230:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
  231:  jump *label102 greaterThanEq 5 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  232:  op shl *tmp206 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  233:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
  234:  jump *label102 greaterThanEq 6 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  235:  op shl *tmp206 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  236:  op or :createMatrixOfSize:matrix *tmp206 :createMatrixOfSize ...
        label *label102                                              OreLocator.mnd: for var i in 1 ... 7 do
  237:  op lessThan *tmp208 :excludeArea:maskX :excludeArea:areaX    OreLocator.mnd: var shiftX = (maskX < areaX) * (7 - blockSizeX);
  238:  op sub *tmp209 7 :excludeArea:blockSizeX                     ...
  239:  op mul :excludeArea:shiftX *tmp208 *tmp209                   ...
  240:  op lessThan *tmp211 :excludeArea:maskY :excludeArea:areaY    OreLocator.mnd: var shiftY = (maskY < areaY) * (7 - blockSizeY);
  241:  op sub *tmp212 7 :excludeArea:blockSizeY                     ...
  242:  op mul :excludeArea:shiftY *tmp211 *tmp212                   ...
  243:  op abs *tmp160 :excludeArea:shiftX 0                         OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  244:  op greaterThan *tmp161 *tmp160 6                             ...
  245:  op abs *tmp162 :excludeArea:shiftY 0                         ...
  246:  op greaterThan *tmp163 *tmp162 6                             ...
  247:  op or *tmp164 *tmp161 *tmp163                                ...
  248:  jump *label280 equal *tmp164 false                           ...
  249:  set :shiftMask*retval 0                                      ...
  250:  jump *label288 always 0 0                                    ...
        label *label280                                              ...
  251:  op mul *tmp166 7 :excludeArea:shiftY                         OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  252:  op add :shiftMask:shift :excludeArea:shiftX *tmp166          ...
  253:  jump *label282 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  254:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  255:  op and *tmp171 :createMatrixOfSize:matrix :shiftMask:clearMa OreLocator.mnd: mask = (mask & clearMask) << shift;
  256:  op shl :shiftMask:mask *tmp171 :shiftMask:shift              ...
  257:  jump *label283 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label282                                              ...
  258:  op sub *tmp173 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  259:  op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp173    ...
        label *label283                                              OreLocator.mnd: if shift > 0 then
  260:  jump *label286 equal :excludeArea:shiftX 0                   OreLocator.mnd: if shiftX != 0 then
  261:  op shr :shiftMask:keep 0b1111111 *tmp160                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  262:  jump *label284 lessThanEq :excludeArea:shiftX 0              OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  263:  op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX   ...
        label *label284                                              ...
  264:  op shl *tmp180 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  265:  op or :shiftMask:keep :shiftMask:keep *tmp180                ...
  266:  op shl *tmp181 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  267:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  268:  op shl *tmp182 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  269:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  270:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label286                                              OreLocator.mnd: if shiftX != 0 then
  271:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label288                                              OreLocator.mnd: var shifted = shiftMask(blocked, shiftX, shiftY);
  272:  op or :excludeArea*retval :excludeArea:mask :shiftMask*retva OreLocator.mnd: return mask | shifted;
  273:  return :excludeArea*retaddr                                  ...
        label *label97                                               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  274:  set :excludeArea*retval :excludeArea:mask                    OreLocator.mnd: return mask;
  275:  return :excludeArea*retaddr                                  OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
        label *label11                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  276:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  277:  jump *label109 greaterThan :findPossiblePlacement:y 3        ...
        label *label205                                              ...
  278:  op add *tmp215 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  279:  op mul *tmp216 7 *tmp215                                     ...
  280:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  281:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  282:  jump *label112 greaterThan :findPossiblePlacement:x 3        ...
        label *label206                                              ...
  283:  op and *tmp218 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  284:  jump *label113 notEqual *tmp218 0                            ...
  285:  op mul *tmp221 :findPossiblePlacement:y 7                    ...
  286:  op add *tmp222 24 *tmp221                                    ...
  287:  op add :findPossiblePlacement*retval *tmp222 :findPossiblePl ...
  288:  return :findPossiblePlacement*retaddr                        ...
        label *label113                                              ...
  289:  op sub *tmp224 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  290:  jump *label112 greaterThan :findPossiblePlacement:x *tmp224  ...
  291:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  292:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  293:  jump *label206 lessThanEq :findPossiblePlacement:x 3         ...
        label *label112                                              ...
  294:  op sub *tmp227 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  295:  jump *label109 greaterThan :findPossiblePlacement:y *tmp227  ...
  296:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  297:  jump *label205 lessThanEq :findPossiblePlacement:y 3         ...
        label *label109                                              ...
  298:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  299:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
  300:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  301:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  302:  set :findPossiblePlacement:width 2                           ...
  303:  set :findPossiblePlacement:height 4                          ...
  304:  setaddr :findPossiblePlacement*retaddr *label120             ...
  305:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label120                                              ...
  306:  jump *label121 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  307:  jump *label123 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  308:  set :tryPlaceGenerator*retval false                          ...
  309:  return :tryPlaceGenerator*retaddr                            ...
        label *label123                                              ...
  310:  op add *tmp235 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  311:  op add .water2X *tmp235 :findPossiblePlacement:x             ...
  312:  op add *tmp237 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  313:  op add .water2Y *tmp237 :findPossiblePlacement:y             ...
  314:  op add .generatorX *tmp235 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  315:  op add *tmp241 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  316:  op add .generatorY *tmp241 :findPossiblePlacement:y          ...
  317:  op shl *tmp243 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  318:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  319:  jump *label122 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label121                                              ...
  320:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  321:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  322:  set :findPossiblePlacement:width 4                           ...
  323:  set :findPossiblePlacement:height 2                          ...
  324:  setaddr :findPossiblePlacement*retaddr *label125             ...
  325:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label125                                              ...
  326:  jump *label126 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  327:  set :tryPlaceGenerator*retval false                          ...
  328:  return :tryPlaceGenerator*retaddr                            ...
        label *label126                                              ...
  329:  op add *tmp247 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  330:  op add .water2X *tmp247 :findPossiblePlacement:x             ...
  331:  op add *tmp249 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  332:  op add .water2Y *tmp249 :findPossiblePlacement:y             ...
  333:  op add *tmp251 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  334:  op add .generatorX *tmp251 :findPossiblePlacement:x          ...
  335:  op add .generatorY *tmp249 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  336:  op shl *tmp255 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  337:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label122                                              OreLocator.mnd: if shift >= 0 then
  338:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr OreLocator.mnd: terrainMask |= createFixedMatrix(
  339:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  340:  set :findPossiblePlacement:placementMask 1                   ...
  341:  set :findPossiblePlacement:width 1                           ...
  342:  set :findPossiblePlacement:height 1                          ...
  343:  setaddr :findPossiblePlacement*retaddr *label129             ...
  344:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label129                                              ...
  345:  jump *label130 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  346:  set :tryPlaceGenerator*retval false                          ...
  347:  return :tryPlaceGenerator*retaddr                            ...
        label *label130                                              ...
  348:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  349:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  350:  op shl *tmp275 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  351:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  352:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  353:  set :findPossiblePlacement:placementMask 1                   ...
  354:  set :findPossiblePlacement:width 1                           ...
  355:  set :findPossiblePlacement:height 1                          ...
  356:  setaddr :findPossiblePlacement*retaddr *label132             ...
  357:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label132                                              ...
  358:  jump *label133 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  359:  set :tryPlaceGenerator*retval false                          ...
  360:  return :tryPlaceGenerator*retaddr                            ...
        label *label133                                              ...
  361:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  362:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  363:  op shl *tmp281 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  364:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  365:  op sub *tmp282 .water2X .node1X                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  366:  op sub *tmp283 .water2Y .node1Y                              ...
  367:  op len *tmp284 *tmp282 *tmp283                               ...
  368:  op greaterThan *tmp285 *tmp284 7                             ...
  369:  op sub *tmp286 .generatorX .node1X                           OreLocator.mnd: or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
  370:  op sub *tmp287 .generatorY .node1Y                           ...
  371:  op len *tmp288 *tmp286 *tmp287                               ...
  372:  op greaterThan *tmp289 *tmp288 7                             ...
  373:  op or *tmp290 *tmp285 *tmp289                                ...
  374:  op sub *tmp291 .panelX .node1X                               OreLocator.mnd: or len(panelX - node1X, panelY - node1Y) > 6
  375:  op sub *tmp292 .panelY .node1Y                               ...
  376:  op len *tmp293 *tmp291 *tmp292                               ...
  377:  op greaterThan *tmp294 *tmp293 6                             ...
  378:  op or *tmp295 *tmp290 *tmp294                                ...
  379:  op sub *tmp296 .batteryX .node1X                             OreLocator.mnd: or len(batteryX - node1X, batteryY - node1Y) > 6
  380:  op sub *tmp297 .batteryY .node1Y                             ...
  381:  op len *tmp298 *tmp296 *tmp297                               ...
  382:  op greaterThan *tmp299 *tmp298 6                             ...
  383:  op or *tmp300 *tmp295 *tmp299                                ...
  384:  jump *label135 equal *tmp300 false                           OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  385:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  386:  set :findPossiblePlacement:placementMask 1                   ...
  387:  set :findPossiblePlacement:width 1                           ...
  388:  set :findPossiblePlacement:height 1                          ...
  389:  setaddr :findPossiblePlacement*retaddr *label137             ...
  390:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label137                                              ...
  391:  jump *label138 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  392:  set :tryPlaceGenerator*retval false                          ...
  393:  return :tryPlaceGenerator*retaddr                            ...
        label *label138                                              ...
  394:  op add .node2X :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: node2X = centerX + c;
  395:  op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: node2Y = centerY + r;
        label *label135                                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  396:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  397:  return :tryPlaceGenerator*retaddr                            ...
        label *label13                                               OreLocator.mnd: def createBlockMaskRow(x, y)
  398:  op add *tmp309 :createBlockMaskRow:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  399:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 :createBlo ...
  400:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  401:  op add *tmp309 :createBlockMaskRow:x 3                       ...
  402:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  403:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  404:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  405:  op add *tmp309 :createBlockMaskRow:x 2                       ...
  406:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  407:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  408:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  409:  op add *tmp309 :createBlockMaskRow:x 1                       ...
  410:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  411:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  412:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  413:  ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow: ...
  414:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  415:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  416:  op add *tmp309 :createBlockMaskRow:x -1                      ...
  417:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  418:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  419:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  420:  op add *tmp309 :createBlockMaskRow:x -2                      ...
  421:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  422:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  423:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  424:  op add *tmp309 :createBlockMaskRow:x -3                      ...
  425:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  426:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  427:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  428:  op add *tmp309 :createBlockMaskRow:x -4                      ...
  429:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  430:  op or :createBlockMaskRow*retval *tmp308 *tmp310             ...
  431:  return :createBlockMaskRow*retaddr                           OreLocator.mnd: def createBlockMaskRow(x, y)
        label *label14                                               OreLocator.mnd: def createCombinedMask(x, y);
  432:  write @unit processor1 ":createTerrainMask:unit"             OreLocator.mnd: async(matrices.createTerrainMask(@unit, x, y));
  433:  write :createCombinedMask:x processor1 ":createTerrainMask:x ...
  434:  write :createCombinedMask:y processor1 ":createTerrainMask:y ...
  435:  write false processor1 ":createTerrainMask*finished"         ...
  436:  write 1 processor1 "@counter"                                ...
  437:  set :createAdjacentMask:x :createCombinedMask:x              OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
  438:  set :createAdjacentMask:y :createCombinedMask:y              ...
  439:  op add *tmp318 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  440:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  441:  ucontrol getBlock *tmp309 *tmp318 0 :createBlockMaskRow:resu ...
  442:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  443:  op add *tmp309 :createCombinedMask:x 3                       ...
  444:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  445:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  446:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  447:  op add *tmp309 :createCombinedMask:x 2                       ...
  448:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  449:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  450:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  451:  op add *tmp309 :createCombinedMask:x 1                       ...
  452:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  453:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  454:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  455:  ucontrol getBlock :createCombinedMask:x *tmp318 0 *tmp310 0  ...
  456:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  457:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  458:  op add *tmp309 :createCombinedMask:x -1                      ...
  459:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  460:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  461:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  462:  op add *tmp309 :createCombinedMask:x -2                      ...
  463:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  464:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  465:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  466:  op add *tmp309 :createCombinedMask:x -3                      ...
  467:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  468:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  469:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  470:  op add *tmp309 :createCombinedMask:x -4                      ...
  471:  ucontrol getBlock *tmp309 *tmp318 0 *tmp310 0                ...
  472:  op or :createAdjacentMask:row2 *tmp308 *tmp310               ...
  473:  op add *tmp320 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  474:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  475:  ucontrol getBlock *tmp309 *tmp320 0 :createBlockMaskRow:resu ...
  476:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  477:  op add *tmp309 :createCombinedMask:x 3                       ...
  478:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  479:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  480:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  481:  op add *tmp309 :createCombinedMask:x 2                       ...
  482:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  483:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  484:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  485:  op add *tmp309 :createCombinedMask:x 1                       ...
  486:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  487:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  488:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  489:  ucontrol getBlock :createCombinedMask:x *tmp320 0 *tmp310 0  ...
  490:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  491:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  492:  op add *tmp309 :createCombinedMask:x -1                      ...
  493:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  494:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  495:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  496:  op add *tmp309 :createCombinedMask:x -2                      ...
  497:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  498:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  499:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  500:  op add *tmp309 :createCombinedMask:x -3                      ...
  501:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  502:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  503:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  504:  op add *tmp309 :createCombinedMask:x -4                      ...
  505:  ucontrol getBlock *tmp309 *tmp320 0 *tmp310 0                ...
  506:  op or :createAdjacentMask:row1 *tmp308 *tmp310               ...
  507:  op add *tmp322 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  508:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  509:  ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:resu ...
  510:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  511:  op add *tmp309 :createCombinedMask:x 3                       ...
  512:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  513:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  514:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  515:  op add *tmp309 :createCombinedMask:x 2                       ...
  516:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  517:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  518:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  519:  op add *tmp309 :createCombinedMask:x 1                       ...
  520:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  521:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  522:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  523:  ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0  ...
  524:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  525:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  526:  op add *tmp309 :createCombinedMask:x -1                      ...
  527:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  528:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  529:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  530:  op add *tmp309 :createCombinedMask:x -2                      ...
  531:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  532:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  533:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  534:  op add *tmp309 :createCombinedMask:x -3                      ...
  535:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  536:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  537:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  538:  op add *tmp309 :createCombinedMask:x -4                      ...
  539:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  540:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  541:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  542:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  543:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  544:  op or *tmp327 *tmp325 *tmp326                                ...
  545:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:r ...
  546:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  547:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  548:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  549:  op add *tmp322 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  550:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  551:  ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:resu ...
  552:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  553:  op add *tmp309 :createCombinedMask:x 3                       ...
  554:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  555:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  556:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  557:  op add *tmp309 :createCombinedMask:x 2                       ...
  558:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  559:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  560:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  561:  op add *tmp309 :createCombinedMask:x 1                       ...
  562:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  563:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  564:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  565:  ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0  ...
  566:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  567:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  568:  op add *tmp309 :createCombinedMask:x -1                      ...
  569:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  570:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  571:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  572:  op add *tmp309 :createCombinedMask:x -2                      ...
  573:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  574:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  575:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  576:  op add *tmp309 :createCombinedMask:x -3                      ...
  577:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  578:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  579:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  580:  op add *tmp309 :createCombinedMask:x -4                      ...
  581:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  582:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  583:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  584:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  585:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  586:  op or *tmp327 *tmp325 *tmp326                                ...
  587:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:r ...
  588:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  589:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  590:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  591:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  592:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  593:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  594:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 :createBlo ...
  595:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  596:  op add *tmp309 :createCombinedMask:x 3                       ...
  597:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  598:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  599:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  600:  op add *tmp309 :createCombinedMask:x 2                       ...
  601:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  602:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  603:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  604:  op add *tmp309 :createCombinedMask:x 1                       ...
  605:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  606:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  607:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  608:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  609:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  610:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  611:  op add *tmp309 :createCombinedMask:x -1                      ...
  612:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  613:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  614:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  615:  op add *tmp309 :createCombinedMask:x -2                      ...
  616:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  617:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  618:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  619:  op add *tmp309 :createCombinedMask:x -3                      ...
  620:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  621:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  622:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  623:  op add *tmp309 :createCombinedMask:x -4                      ...
  624:  ucontrol getBlock *tmp309 :createCombinedMask:y 0 *tmp310 0  ...
  625:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  626:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  627:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  628:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  629:  op or *tmp327 *tmp325 *tmp326                                ...
  630:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:r ...
  631:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  632:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  633:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  634:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  635:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  636:  op add *tmp322 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  637:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  638:  ucontrol getBlock *tmp309 *tmp322 0 :createBlockMaskRow:resu ...
  639:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  640:  op add *tmp309 :createCombinedMask:x 3                       ...
  641:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  642:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  643:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  644:  op add *tmp309 :createCombinedMask:x 2                       ...
  645:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  646:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  647:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  648:  op add *tmp309 :createCombinedMask:x 1                       ...
  649:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  650:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  651:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  652:  ucontrol getBlock :createCombinedMask:x *tmp322 0 *tmp310 0  ...
  653:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  654:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  655:  op add *tmp309 :createCombinedMask:x -1                      ...
  656:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  657:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  658:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  659:  op add *tmp309 :createCombinedMask:x -2                      ...
  660:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  661:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  662:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  663:  op add *tmp309 :createCombinedMask:x -3                      ...
  664:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  665:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  666:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  667:  op add *tmp309 :createCombinedMask:x -4                      ...
  668:  ucontrol getBlock *tmp309 *tmp322 0 *tmp310 0                ...
  669:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  670:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  671:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  672:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  673:  op or *tmp327 *tmp325 *tmp326                                ...
  674:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow:r ...
  675:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  676:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  677:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  678:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  679:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  680:  op add :createBlockMaskRow:y :createCombinedMask:y -2        OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  681:  op add *tmp309 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  682:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 :createBlo ...
  683:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  684:  op add *tmp309 :createCombinedMask:x 3                       ...
  685:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  686:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  687:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  688:  op add *tmp309 :createCombinedMask:x 2                       ...
  689:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  690:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  691:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  692:  op add *tmp309 :createCombinedMask:x 1                       ...
  693:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  694:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  695:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  696:  ucontrol getBlock :createCombinedMask:x :createBlockMaskRow: ...
  697:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  698:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  699:  op add *tmp309 :createCombinedMask:x -1                      ...
  700:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  701:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  702:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  703:  op add *tmp309 :createCombinedMask:x -2                      ...
  704:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  705:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  706:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  707:  op add *tmp309 :createCombinedMask:x -3                      ...
  708:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  709:  op or :createBlockMaskRow:result *tmp308 *tmp310             ...
  710:  op shl *tmp308 :createBlockMaskRow:result 1                  ...
  711:  op add *tmp309 :createCombinedMask:x -4                      ...
  712:  ucontrol getBlock *tmp309 :createBlockMaskRow:y 0 *tmp310 0  ...
  713:  op or :createBlockMaskRow*retval *tmp308 *tmp310             ...
  714:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  715:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  716:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  717:  op or *tmp327 *tmp325 *tmp326                                ...
  718:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*r ...
  719:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  720:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  721:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  722:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  723:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  724:  op sub :createAdjacentMask:r -2 1                            OreLocator.mnd: for var r in -4 .. 2 descending do
  725:  op add *tmp322 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  726:  set :createBlockMaskRow:x :createCombinedMask:x              ...
  727:  set :createBlockMaskRow:y *tmp322                            ...
  728:  setaddr :createBlockMaskRow*retaddr *label272                ...
  729:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label272                                              ...
  730:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  731:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  732:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  733:  op or *tmp327 *tmp325 *tmp326                                ...
  734:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*r ...
  735:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  736:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  737:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  738:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  739:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  740:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  741:  op add *tmp322 :createAdjacentMask:y :createAdjacentMask:r   OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  742:  set :createBlockMaskRow:x :createAdjacentMask:x              ...
  743:  set :createBlockMaskRow:y *tmp322                            ...
  744:  setaddr :createBlockMaskRow*retaddr *label275                ...
  745:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label275                                              ...
  746:  op shl *tmp324 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  747:  op or *tmp325 :createAdjacentMask:row2 *tmp324               ...
  748:  op shr *tmp326 :createAdjacentMask:row1 1                    ...
  749:  op or *tmp327 *tmp325 *tmp326                                ...
  750:  op or :createAdjacentMask:mask *tmp327 :createBlockMaskRow*r ...
  751:  op shl *tmp329 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  752:  op and *tmp330 :createAdjacentMask:mask 0xFE                 ...
  753:  op or :createAdjacentMask:result *tmp329 *tmp330             ...
  754:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  755:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  756:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  757:  op shr *tmp317 :createAdjacentMask:result 1                  OreLocator.mnd: result >> 1;
        label *label152                                              OreLocator.mnd: var terrainMask = await(matrices.createTerrainMask);
  758:  wait 1e-15                                                   ...
  759:  read *tmp333 processor1 ":createTerrainMask*finished"        ...
  760:  jump *label152 equal *tmp333 false                           ...
  761:  read :createCombinedMask:terrainMask processor1 ":createTerr ...
  762:  op or :excludeArea:mask *tmp317 :createCombinedMask:terrainM OreLocator.mnd: return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
  763:  set :excludeArea:maskX :createCombinedMask:x                 ...
  764:  set :excludeArea:maskY :createCombinedMask:y                 ...
  765:  set :excludeArea:areaX .coreX                                ...
  766:  set :excludeArea:areaY .coreY                                ...
  767:  set :excludeArea:areaWidth 15                                ...
  768:  set :excludeArea:areaHeight 15                               ...
  769:  setaddr :excludeArea*retaddr *label153                       ...
  770:  call *label10 *invalid :excludeArea*retval                   ...
        label *label153                                              ...
  771:  set :createCombinedMask*retval :excludeArea*retval           ...
  772:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label15                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  773:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  774:  set .panelX -1                                               ...
  775:  set .generatorY -1                                           ...
  776:  set .generatorX -1                                           ...
  777:  set .water2Y -1                                              ...
  778:  set .water2X -1                                              ...
  779:  set .water1Y -1                                              ...
  780:  set .water1X -1                                              ...
  781:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  782:  set :moveTo.5:y .drillY                                      ...
  783:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336 0          OreLocator.mnd: while !within(x, y, radius) do
  784:  jump *label158 notEqual *tmp336 false                        ...
        label *label278                                              ...
  785:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  786:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp336 0          OreLocator.mnd: while !within(x, y, radius) do
  787:  jump *label278 equal *tmp336 false                           ...
        label *label158                                              ...
  788:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  789:  set :createCombinedMask:y .drillY                            ...
  790:  setaddr :createCombinedMask*retaddr *label159                ...
  791:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label159                                              ...
  792:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  793:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  794:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  795:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  796:  set :findPossiblePlacement:placementMask 387                 ...
  797:  set :findPossiblePlacement:width 2                           ...
  798:  set :findPossiblePlacement:height 2                          ...
  799:  setaddr :findPossiblePlacement*retaddr *label163             ...
  800:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label163                                              ...
  801:  jump *label164 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  802:  op add *tmp377 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  803:  op add .water1X *tmp377 :findPossiblePlacement:x             ...
  804:  op add *tmp379 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  805:  op add .water1Y *tmp379 :findPossiblePlacement:y             ...
  806:  op shl *tmp381 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  807:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  808:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label164                                              OreLocator.mnd: if shift >= 0 then
  809:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  810:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  811:  set :findPossiblePlacement:width 2                           ...
  812:  set :findPossiblePlacement:height 2                          ...
  813:  setaddr :findPossiblePlacement*retaddr *label166             ...
  814:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label166                                              ...
  815:  jump *label167 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  816:  op add *tmp386 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  817:  op add .containerX *tmp386 :findPossiblePlacement:x          ...
  818:  op add *tmp388 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  819:  op add .containerY *tmp388 :findPossiblePlacement:y          ...
  820:  op shl *tmp390 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  821:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label167                                              OreLocator.mnd: if shift >= 0 then
  822:  op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumD OreLocator.mnd: var nodeMask = terrainMask | createFixedMatrix(
  823:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
  824:  set :findPossiblePlacement:placementMask 1                   ...
  825:  set :findPossiblePlacement:width 1                           ...
  826:  set :findPossiblePlacement:height 1                          ...
  827:  setaddr :findPossiblePlacement*retaddr *label170             ...
  828:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label170                                              ...
  829:  jump *label171 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  830:  set :layoutThoriumDrillAtLocation*retval false               ...
  831:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label171                                              ...
  832:  op add .node1X .drillX :findPossiblePlacement:x              OreLocator.mnd: node1X = drillX + c;
  833:  op add .node1Y .drillY :findPossiblePlacement:y              OreLocator.mnd: node1Y = drillY + r;
  834:  op shl *tmp411 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  835:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  836:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  837:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  838:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  839:  set :tryPlaceGenerator:centerY .drillY                       ...
  840:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  841:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  842:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  843:  setaddr :tryPlaceGenerator*retaddr *label175                 ...
  844:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label175                                              ...
  845:  jump *label176 equal :tryPlaceGenerator*retval false         ...
  846:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  847:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label176                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  848:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  849:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  850:  setaddr *tmp426 *label181                                    ...
  851:  jump *label178 always 0 0                                    ...
        multilabel *label181                                         ...
  852:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  853:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  854:  setaddr *tmp426 *label182                                    ...
  855:  jump *label178 always 0 0                                    ...
        multilabel *label182                                         ...
  856:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  857:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  858:  setaddr *tmp426 *label183                                    ...
  859:  jump *label178 always 0 0                                    ...
        multilabel *label183                                         ...
  860:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  861:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  862:  setaddr *tmp426 *label184                                    ...
        label *label178                                              ...
  863:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  864:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  865:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  866:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  867:  setaddr :createCombinedMask*retaddr *label185                ...
  868:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label185                                              ...
  869:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  870:  op abs *tmp160 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  871:  op greaterThan *tmp161 *tmp160 6                             ...
  872:  op abs *tmp162 :layoutThoriumDrillAtLocation:sy 0            ...
  873:  op greaterThan *tmp163 *tmp162 6                             ...
  874:  op or *tmp164 *tmp161 *tmp163                                ...
  875:  jump *label290 equal *tmp164 false                           ...
  876:  set :shiftMask*retval 0                                      ...
  877:  jump *label298 always 0 0                                    ...
        label *label290                                              ...
  878:  op mul *tmp166 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  879:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  880:  jump *label292 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  881:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  882:  op and *tmp171 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  883:  op shl :shiftMask:mask *tmp171 :shiftMask:shift              ...
  884:  jump *label293 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label292                                              ...
  885:  op sub *tmp173 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  886:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label293                                              OreLocator.mnd: if shift > 0 then
  887:  jump *label296 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  888:  op shr :shiftMask:keep 0b1111111 *tmp160                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  889:  jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  890:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label294                                              ...
  891:  op shl *tmp180 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  892:  op or :shiftMask:keep :shiftMask:keep *tmp180                ...
  893:  op shl *tmp181 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  894:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  895:  op shl *tmp182 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  896:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  897:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label296                                              OreLocator.mnd: if shiftX != 0 then
  898:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label298                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  899:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  900:  op sub *tmp432 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  901:  op sub *tmp433 .drillY :layoutThoriumDrillAtLocation:sy      ...
  902:  set :tryPlaceGenerator:centerX *tmp432                       ...
  903:  set :tryPlaceGenerator:centerY *tmp433                       ...
  904:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  905:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  906:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  907:  setaddr :tryPlaceGenerator*retaddr *label187                 ...
  908:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label187                                              ...
  909:  jump *label188 equal :tryPlaceGenerator*retval false         ...
  910:  set :layoutThoriumDrillAtLocation*retval true                ...
  911:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label188                                              ...
  912:  multijump *tmp426 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label184                                         ...
  913:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  914:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  915:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  916:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  917:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  918:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  919:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  920:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  921:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  922:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  923:  setaddr :findDrillLocationLocal*retaddr *label191            ...
  924:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label191                                              ...
  925:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  926:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  927:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  928:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  929:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  930:  set :findDrillLocation*finished true                         ...
  931:  jump *label18 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  932:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  933:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  934:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  935:  set :findDrillLocationLocal:item @thorium                    ...
  936:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  937:  set :findDrillLocationLocal:size 3                           ...
  938:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  939:  setaddr :findDrillLocationLocal*retaddr *label193            ...
  940:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label193                                              ...
  941:  set .drillX :findDrillLocationLocal:dx                       ...
  942:  set .drillY :findDrillLocationLocal:dy                       ...
  943:  jump *label194 notEqual :findDrillLocationLocal*retval false ...
  944:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  945:  jump *label192 always 0 0                                    ...
        label *label194                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  946:  setaddr :layoutThoriumDrillAtLocation*retaddr *label196      OreLocator.mnd: layoutThoriumDrillAtLocation();
  947:  call *label15 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label196                                              ...
  948:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label192                                              ...
  949:  set :layoutThoriumDrill*finished true                        ...
  950:  jump *label18 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  951:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  952:  set .mapAction 0                                             ...
  953:  set .mapTotal 0                                              ...
  954:  set .mapProgress 0                                           ...
  955:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  956:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  957:  jump *label18 always 0 0                                     ...


Performance: parsed in 512 ms, compiled in 377 ms, optimized in 1,853 ms, run in 9 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp10 processor1 "*signature":
Variable 'processor1' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
