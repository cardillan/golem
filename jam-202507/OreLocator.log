   996 instructions before optimizations.
   101 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
    77 instructions eliminated by Dead Code Elimination (6 iterations).
     2 instructions eliminated by Jump Normalization (5 iterations).
    38 instructions eliminated by Jump Optimization (5 iterations).
    51 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    16 instructions modified by Expression Optimization (3 iterations).
     1 instructions eliminated by If Expression Optimization (4 iterations).
   168 instructions eliminated by Data Flow Optimization (14 passes, 47 iterations).
     1 loops improved by Loop Hoisting.
     1 instructions added by Loop Optimization (3 iterations).
    11 loops improved by Loop Optimization.
   158 instructions added by Loop Unrolling (18 iterations).
     3 loops unrolled by Loop Unrolling.
   265 instructions added by Function Inlining (18 iterations).
     9 function calls inlined by Function Inlining.
    11 instructions eliminated by Jump Straightening (5 iterations).
    15 instructions updated by Jump Threading.
    15 instructions eliminated by Unreachable Code Elimination (2 iterations).
   956 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 358):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:350:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:471:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:485:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:483:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:486:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:518:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 357):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:350:5                          size   +17, benefit     3900.0, efficiency    229.412
  * Unroll loop at OreLocator.mnd:471:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:485:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:483:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:486:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:518:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 330):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:350:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:485:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:518:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 329):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:350:5                          size   +17, benefit     3900.0, efficiency    229.412 (+17 instructions)
    Unroll loop at OreLocator.mnd:485:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:518:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 312):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:485:5                          size   +87, benefit     9100.0, efficiency    104.598 (+95 instructions)
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:518:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 217):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:518:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 216):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:518:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 215):
    Unroll iteration loop at OreLocator.mnd:607:5                size   +81, benefit       19.0, efficiency      0.235
  * Inline function 'shiftMask' defined at OreLocator.mnd:273:1  size   +28, benefit      171.0, efficiency      6.107 (+18 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:315:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:518:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:615:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 197):
    Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +147, benefit      104.0, efficiency      0.707
  * Inline function call at OreLocator.mnd:482:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:518:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:613:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 165):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +251, benefit      832.0, efficiency      3.315
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +179, benefit      104.0, efficiency      0.581
  * Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +180, benefit        4.0, efficiency      0.022
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +180, benefit      100.0, efficiency      0.556
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 133):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +215, benefit      728.0, efficiency      3.386
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +211, benefit      104.0, efficiency      0.493
  * Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +212, benefit        4.0, efficiency      0.019
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +212, benefit      100.0, efficiency      0.472
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 103):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +179, benefit      624.0, efficiency      3.486
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +241, benefit      104.0, efficiency      0.432
  * Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +242, benefit        4.0, efficiency      0.017
    Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +242, benefit      100.0, efficiency      0.413
    Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 73):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +143, benefit      520.0, efficiency      3.636
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +271, benefit      104.0, efficiency      0.384
  * Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +272, benefit        4.0, efficiency      0.015
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +272, benefit      100.0, efficiency      0.368
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 42):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size  +107, benefit      416.0, efficiency      3.888
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +302, benefit      104.0, efficiency      0.344
  * Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +303, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +303, benefit      100.0, efficiency      0.330
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 11):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +71, benefit      312.0, efficiency      4.394
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +333, benefit      104.0, efficiency      0.312
  ! Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:486:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:518:28                size  +334, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +334, benefit      100.0, efficiency      0.299
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 46):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +63, benefit      312.0, efficiency      4.952
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +310, benefit      104.0, efficiency      0.335
  * Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250 (+28 instructions)
    Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
    Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:518:28                size  +311, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +311, benefit      100.0, efficiency      0.322
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 18):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:518:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Pass 3: speed optimization selection (cost limit 18):
  ! Unroll iteration loop at OreLocator.mnd:607:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:381:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:469:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:504:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:486:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:518:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:602:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:613:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:630:12                size   +97, benefit      137.5, efficiency      1.418

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-68 instructions):
 
   132 jump *label38 equal *tmp56 false
   133 set *tmp28 false
   134 jump *label28 always
-    * set *tmp57 null
   135 jump *label39 always
   136 label *label38
-    * set *tmp57 null
   137 label *label39
   138 op sub *tmp58 :locateOreAway:x .coreX
   139 op abs *tmp59 *tmp58
 
   155 label *label42
   156 set *tmp69 null
   157 label *label43
-    * set *tmp67 *tmp69
   158 jump *label41 always
   159 label *label40
-    * set *tmp67 null
   160 label *label41
   161 op greaterThanEq *tmp70 :locateOreAway:coreDist 8
   162 jump *label44 equal *tmp70 false
 
   187 jump *label52 equal *tmp86 false
   188 set *tmp74 true
   189 jump *label48 always
-    * set *tmp87 null
   190 jump *label53 always
   191 label *label52
-    * set *tmp87 null
   192 label *label53
   193 label *label50
   194 op add :visited:i :visited:i 1
 
   217 label *label46
   218 set *tmp73 null
   219 label *label47
-    * set *tmp71 *tmp73
   220 jump *label45 always
   221 label *label44
-    * set *tmp71 null
   222 label *label45
   223 label *label30
   224 jump *label29 always
 
   234 op greaterThan *tmp94 :findDrillLocationLocal:capacity 0
   235 set :findDrillLocationLocal*retval *tmp94
   236 jump *label19 always
-    * set *tmp93 null
   237 jump *label57 always
   238 label *label56
-    * set *tmp93 null
   239 label *label57
   240 op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
   241 jump *label58 equal *tmp95 false
   242 set *tmp97 .mapSpots
   243 op add .mapSpots .mapSpots 1
-    * set *tmp96 *tmp97
   244 jump *label59 always
   245 label *label58
-    * set *tmp96 null
   246 label *label59
   247 set :moveTo.3:x :findDrillLocationLocal:oreX
   248 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   295 op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
   296 jump *label69 equal *tmp119 false
   297 jump *label67 always
-    * set *tmp120 null
   298 jump *label70 always
   299 label *label69
-    * set *tmp120 null
   300 label *label70
   301 op greaterThan *tmp121 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   302 jump *label71 equal *tmp121 false
 
   306 op lessThan *tmp123 :findDrillLocationLocal:limit 1000
   307 jump *label73 equal *tmp123 false
   308 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp124 :findDrillLocationLocal:score
   309 jump *label74 always
   310 label *label73
-    * set *tmp124 null
   311 label *label74
   312 op greaterThanEq *tmp125 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   313 jump *label75 equal *tmp125 false
 
   328 op add .count .count 1
   329 set *tmp134 .count
   330 write :saveLocation:y bank1 *tmp134
-    * set *tmp136 .locations
   331 op add .locations .locations 1
   332 label *label77
   333 ucontrol unbind
 
   338 label *label75
   339 set *tmp126 null
   340 label *label76
-    * set *tmp122 *tmp126
   341 jump *label72 always
   342 label *label71
-    * set *tmp122 null
   343 label *label72
   344 op greaterThan *tmp137 :findDrillLocationLocal:score :findDrillLocationLocal:best
   345 jump *label78 equal *tmp137 false
   346 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   347 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   348 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp138 :findDrillLocationLocal:best
   349 jump *label79 always
   350 label *label78
-    * set *tmp138 null
   351 label *label79
   352 op lessThanEq *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:last
   353 jump *label80 equal *tmp139 false
   354 jump *label67 always
-    * set *tmp140 null
   355 jump *label81 always
   356 label *label80
-    * set *tmp140 null
   357 label *label81
   358 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   359 op mul *tmp141 :findDrillLocationLocal:diffX 1.1
 
   392 op add .count .count 1
   393 set *tmp158 .count
   394 write :saveLocation.1:y bank1 *tmp158
-    * set *tmp160 .locations
   395 op add .locations .locations 1
   396 label *label86
-    * set *tmp150 null
   397 jump *label85 always
   398 label *label84
-    * set *tmp150 null
   399 label *label85
   400 label *label26
   401 jump *label25 always
 
   413 jump *label88 equal *tmp165 false
   414 set :shiftMask*retval 0
   415 jump *label87 always
-    * set *tmp166 null
   416 jump *label89 always
   417 label *label88
-    * set *tmp166 null
   418 label *label89
   419 op mul *tmp167 7 :shiftMask:shiftY
   420 op add *tmp168 :shiftMask:shiftX *tmp167
 
   426 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   427 op shl *tmp173 *tmp172 :shiftMask:shift
   428 set :shiftMask:mask *tmp173
-    * set *tmp170 :shiftMask:mask
   429 jump *label91 always
   430 label *label90
   431 op sub *tmp174 0 :shiftMask:shift
   432 op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * set *tmp170 :shiftMask:mask
   433 label *label91
   434 op notEqual *tmp175 :shiftMask:shiftX 0
   435 jump *label92 equal *tmp175 false
 
   439 op greaterThan *tmp179 :shiftMask:shiftX 0
   440 jump *label94 equal *tmp179 false
   441 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp180 :shiftMask:keep
   442 jump *label95 always
   443 label *label94
-    * set *tmp180 null
   444 label *label95
   445 op shl *tmp181 :shiftMask:keep 7
   446 op or :shiftMask:keep :shiftMask:keep *tmp181
 
   449 op shl *tmp183 :shiftMask:keep 21
   450 op or :shiftMask:keep :shiftMask:keep *tmp183
   451 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp176 :shiftMask:mask
   452 jump *label93 always
   453 label *label92
-    * set *tmp176 null
   454 label *label93
   455 set :shiftMask*retval :shiftMask:mask
   456 jump *label87 always
 
   493 op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
   494 jump *label103 equal *tmp205 false
   495 jump *label102 always
-    * set *tmp206 null
   496 jump *label104 always
   497 label *label103
-    * set *tmp206 null
   498 label *label104
   499 op shl *tmp207 :createMatrixOfSize:matrix 7
   500 op or *tmp208 *tmp207 :createMatrixOfSize:row
 
   556 op add *tmp224 *tmp223 :findPossiblePlacement:x
   557 set :findPossiblePlacement*retval *tmp224
   558 jump *label106 always
-    * set *tmp221 null
   559 jump *label114 always
   560 label *label113
-    * set *tmp221 null
   561 label *label114
   562 op sub *tmp225 3 :findPossiblePlacement:width
   563 op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
   564 jump *label115 equal *tmp226 false
   565 jump *label112 always
-    * set *tmp227 null
   566 jump *label116 always
   567 label *label115
-    * set *tmp227 null
   568 label *label116
   569 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   570 label *label111
 
   575 op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
   576 jump *label117 equal *tmp229 false
   577 jump *label109 always
-    * set *tmp230 null
   578 jump *label118 always
   579 label *label117
-    * set *tmp230 null
   580 label *label118
   581 label *label108
   582 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   606 jump *label123 equal *tmp234 false
   607 set :tryPlaceGenerator*retval false
   608 jump *label119 always
-    * set *tmp235 null
   609 jump *label124 always
   610 label *label123
-    * set *tmp235 null
   611 label *label124
   612 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   613 op add *tmp237 *tmp236 :tryPlaceGenerator:c
 
   623 set .generatorY *tmp243
   624 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   625 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   626 jump *label122 always
   627 label *label121
   628 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   640 jump *label126 equal *tmp246 false
   641 set :tryPlaceGenerator*retval false
   642 jump *label119 always
-    * set *tmp247 null
   643 jump *label127 always
   644 label *label126
-    * set *tmp247 null
   645 label *label127
   646 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   647 op add *tmp249 *tmp248 :tryPlaceGenerator:c
 
   657 set .generatorY *tmp255
   658 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   659 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   660 label *label122
   661 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   662 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   674 jump *label129 equal *tmp258 false
   675 set :tryPlaceGenerator*retval false
   676 jump *label119 always
-    * set *tmp259 null
   677 jump *label130 always
   678 label *label129
-    * set *tmp259 null
   679 label *label130
   680 op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   681 set .panelX *tmp260
 
   698 jump *label132 equal *tmp264 false
   699 set :tryPlaceGenerator*retval false
   700 jump *label119 always
-    * set *tmp265 null
   701 jump *label133 always
   702 label *label132
-    * set *tmp265 null
   703 label *label133
   704 op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   705 set .batteryX *tmp266
 
   742 jump *label137 equal *tmp290 false
   743 set :tryPlaceGenerator*retval false
   744 jump *label119 always
-    * set *tmp291 null
   745 jump *label138 always
   746 label *label137
-    * set *tmp291 null
   747 label *label138
   748 op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   749 set .node2X *tmp292
 
   751 set .node2Y *tmp293
   752 op shl *tmp294 1 :tryPlaceGenerator:shift
   753 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * set *tmp288 :tryPlaceGenerator:terrainMask
   754 jump *label135 always
   755 label *label134
-    * set *tmp288 null
   756 label *label135
   757 set :tryPlaceGenerator*retval true
   758 jump *label119 always
 
   916 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   917 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   918 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * set *tmp331 :layoutThoriumDrillAtLocation:cornersMask
   919 jump *label161 always
   920 label *label160
-    * set *tmp331 null
   921 label *label161
   922 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   923 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   940 set .containerY *tmp344
   941 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   942 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * set *tmp340 :layoutThoriumDrillAtLocation:terrainMask
   943 jump *label164 always
   944 label *label163
-    * set *tmp340 null
   945 label *label164
   946 op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   947 set :layoutThoriumDrillAtLocation:nodeMask *tmp346
 
   960 jump *label166 equal *tmp348 false
   961 set :layoutThoriumDrillAtLocation*retval false
   962 jump *label153 always
-    * set *tmp349 null
   963 jump *label167 always
   964 label *label166
-    * set *tmp349 null
   965 label *label167
   966 op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
   967 set .node1X *tmp350
 
   983 jump *label169 equal *tmp353 false
   984 set :layoutThoriumDrillAtLocation*retval true
   985 jump *label153 always
-    * set *tmp354 null
   986 jump *label170 always
   987 label *label169
-    * set *tmp354 null
   988 label *label170
   989 set :layoutThoriumDrillAtLocation:sx 3
   990 set :layoutThoriumDrillAtLocation:sy 3
 
  1040 jump *label181 equal *tmp363 false
  1041 set :layoutThoriumDrillAtLocation*retval true
  1042 jump *label153 always
-    * set *tmp364 null
  1043 jump *label182 always
  1044 label *label181
-    * set *tmp364 null
  1045 label *label182
  1046 label *label172
  1047 multijump *tmp355 0 0 (m:marker0)
 
  1091 jump *label187 equal *tmp365 false
  1092 set :layoutThoriumDrill*retval false
  1093 jump *label185 always
-    * set *tmp366 null
  1094 jump *label188 always
  1095 label *label187
-    * set *tmp366 null
  1096 label *label188
  1097 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)
  1098 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label189) (h:*label189)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   150 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
   151 jump *label42 equal *tmp68 false
   152 jump *label30 always
-    * set *tmp69 null
   153 jump *label43 always
   154 label *label42
-    * set *tmp69 null
   155 label *label43
   156 jump *label41 always
   157 label *label40
 
   210 label *label54
   211 set *tmp89 null
   212 label *label55
-    * set *tmp73 *tmp89
   213 jump *label47 always
   214 label *label46
-    * set *tmp73 null
   215 label *label47
   216 jump *label45 always
   217 label *label44
 
   235 label *label57
   236 op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
   237 jump *label58 equal *tmp95 false
-    * set *tmp97 .mapSpots
   238 op add .mapSpots .mapSpots 1
   239 jump *label59 always
   240 label *label58
 
   328 ucontrol unbind
   329 set :findDrillLocationLocal*retval true
   330 jump *label19 always
-    * set *tmp126 null
   331 jump *label76 always
   332 label *label75
-    * set *tmp126 null
   333 label *label76
   334 jump *label72 always
   335 label *label71

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   205 printflush message1
   206 set *tmp28 true
   207 jump *label28 always
-    * set *tmp89 null
   208 jump *label55 always
   209 label *label54
-    * set *tmp89 null
   210 label *label55
   211 jump *label47 always
   212 label *label46

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-101 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp12 .locations
-    * set .locationsStart *tmp12
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    49 label *label21
    50 label *label20
    51 op div *tmp21 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp22 *tmp21 2
-    * set .mapTotal *tmp22
+   52 op pow .mapTotal *tmp21 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
    55 label *label25
 
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    60 op sub *tmp23 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp24 *tmp23 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp24
-    * op min *tmp25 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp25
+   61 op mul :findDrillLocationLocal:maxDistance *tmp23 .attenuationRate
+   62 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    63 op div *tmp26 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp27 *tmp26 2
-    * set .mapTotal *tmp27
+   64 op pow .mapTotal *tmp26 2
    65 set :locateOreAway:ore :findDrillLocationLocal:item
    66 set :locateOreAway:x :findDrillLocationLocal:oreX
    67 set :locateOreAway:y :findDrillLocationLocal:oreY
    68 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp29 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp29
+   69 op mul :locateOreAway:distance 3.8197185279121366 .angle
    70 set :locateOreAway:lastX -1
    71 set :locateOreAway:lastY -1
-    * op max *tmp30 .angle @pi
-    * set .angle *tmp30
-    * op mul *tmp31 .angle .angle
-    * set .mapProgress *tmp31
+   72 op max .angle .angle @pi
+   73 op mul .mapProgress .angle .angle
    74 label *label29
    75 op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
    76 jump *label31 equal *tmp32 false
-    * op div *tmp33 .angle @degToRad
-    * set :locateOreAway:a *tmp33
+   77 op div :locateOreAway:a .angle @degToRad
    78 op sin *tmp34 :locateOreAway:a
    79 op mul *tmp35 *tmp34 :locateOreAway:distance
    80 op add *tmp36 .coreX *tmp35
 
    83 set :limit:low 5
    84 set :limit:high *tmp37
    85 op max *tmp39 :limit:value :limit:low
-    * op min *tmp40 *tmp39 :limit:high
-    * set *tmp38 *tmp40
+   86 op min *tmp38 *tmp39 :limit:high
    87 label *label32
    88 set :locateOreAway:lx *tmp38
    89 op cos *tmp41 :locateOreAway:a
 
    94 set :limit.1:low 5
    95 set :limit.1:high *tmp44
    96 op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp47 *tmp46 :limit.1:high
-    * set *tmp45 *tmp47
+   97 op min *tmp45 *tmp46 :limit.1:high
    98 label *label33
    99 set :locateOreAway:ly *tmp45
   100 set :moveTo.2:x :locateOreAway:lx
 
   112 label *label34
   113 op div *tmp51 3.8197185279121366 :locateOreAway:distance
   114 op add .angle .angle *tmp51
-    * op mul *tmp52 .angle .angle
-    * set .mapProgress *tmp52
-    * op mul *tmp53 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp53
+  115 op mul .mapProgress .angle .angle
+  116 op mul :locateOreAway:distance 3.8197185279121366 .angle
   117 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   118 op equal *tmp56 *tmp54 false
   119 jump *label38 equal *tmp56 false
 
   126 op abs *tmp59 *tmp58
   127 op sub *tmp60 :locateOreAway:y .coreY
   128 op abs *tmp61 *tmp60
-    * op max *tmp62 *tmp59 *tmp61
-    * set :locateOreAway:coreDist *tmp62
+  129 op max :locateOreAway:coreDist *tmp59 *tmp61
   130 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   131 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp65 *tmp63 *tmp64
-    * set :locateOreAway:unitDist *tmp65
+  132 op len :locateOreAway:unitDist *tmp63 *tmp64
   133 op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
   134 jump *label40 equal *tmp66 false
   135 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
 
   153 set :visited:i .locationsStart
   154 label *label49
   155 jump *label51 greaterThanEq :visited:i *tmp75
-    * op mul *tmp76 4 :visited:i
-    * set :visited:index *tmp76
-    * op add *tmp77 :visited:index 2
-    * set *tmp78 *tmp77
-    * read *tmp79 bank1 *tmp78
-    * set :visited:lx *tmp79
-    * op add *tmp80 :visited:index 3
-    * set *tmp81 *tmp80
-    * read *tmp82 bank1 *tmp81
-    * set :visited:ly *tmp82
+  156 op mul :visited:index 4 :visited:i
+  157 op add *tmp78 :visited:index 2
+  158 read :visited:lx bank1 *tmp78
+  159 op add *tmp81 :visited:index 3
+  160 read :visited:ly bank1 *tmp81
   161 op sub *tmp83 :visited:x :visited:lx
   162 op sub *tmp84 :visited:y :visited:ly
   163 op len *tmp85 *tmp83 *tmp84
 
   180 jump *label54 equal *tmp88 false
   181 op div *tmp90 7.639437055824273 :locateOreAway:distance
   182 op add .angle .angle *tmp90
-    * op mul *tmp91 .angle .angle
-    * set .mapProgress *tmp91
+  183 op mul .mapProgress .angle .angle
   184 printflush message1
   185 set *tmp28 true
   186 jump *label28 always
 
   204 set :findDrillLocationLocal:oreY :locateOreAway:y
   205 op equal *tmp92 *tmp28 false
   206 jump *label56 equal *tmp92 false
-    * op greaterThan *tmp94 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp94
+  207 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   208 jump *label19 always
   209 jump *label57 always
   210 label *label56
 
   247 wait 1e-15
   248 read *tmp110 processor4 ":findBestPosition*finished"
   249 jump *label68 equal *tmp110 false
-    * read *tmp108 processor4 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp108
-    * read *tmp109 processor4 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp109
-    * read *tmp111 processor4 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp111
-    * op add *tmp112 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:newX *tmp112
-    * op add *tmp113 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:newY *tmp113
+  250 read :findDrillLocationLocal:diffX processor4 ":findBestPosition:bestX"
+  251 read :findDrillLocationLocal:diffY processor4 ":findBestPosition:bestY"
+  252 read :findDrillLocationLocal:score processor4 ":findBestPosition*retval"
+  253 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  254 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   255 op sub *tmp114 :findDrillLocationLocal:newX .coreX
   256 op abs *tmp115 *tmp114
   257 op sub *tmp116 :findDrillLocationLocal:newY .coreY
   258 op abs *tmp117 *tmp116
-    * op max *tmp118 *tmp115 *tmp117
-    * set :findDrillLocationLocal:coreDist *tmp118
+  259 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   260 op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
   261 jump *label69 equal *tmp119 false
   262 jump *label67 always
 
   285 sensor *tmp129 :saveLocation:item @id
   286 write *tmp129 bank1 *tmp127
   287 op add .count .count 1
-    * set *tmp130 .count
-    * write :saveLocation:value bank1 *tmp130
+  288 write :saveLocation:value bank1 .count
   289 op add .count .count 1
-    * set *tmp132 .count
-    * write :saveLocation:x bank1 *tmp132
+  290 write :saveLocation:x bank1 .count
   291 op add .count .count 1
-    * set *tmp134 .count
-    * write :saveLocation:y bank1 *tmp134
+  292 write :saveLocation:y bank1 .count
   293 op add .locations .locations 1
   294 label *label77
   295 ucontrol unbind
 
   316 label *label80
   317 label *label81
   318 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp141 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp141
+  319 op mul :round:x :findDrillLocationLocal:diffX 1.1
   320 op add *tmp143 :round:x 0.5
-    * op floor *tmp144 *tmp143
-    * set *tmp142 *tmp144
+  321 op floor *tmp142 *tmp143
   322 label *label82
   323 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp142
-    * op mul *tmp145 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp145
+  324 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   325 op add *tmp147 :round.1:x 0.5
-    * op floor *tmp148 *tmp147
-    * set *tmp146 *tmp148
+  326 op floor *tmp146 *tmp147
   327 label *label83
   328 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
   329 label *label66
 
   340 sensor *tmp153 :saveLocation.1:item @id
   341 write *tmp153 bank1 *tmp151
   342 op add .count .count 1
-    * set *tmp154 .count
-    * write :saveLocation.1:value bank1 *tmp154
+  343 write :saveLocation.1:value bank1 .count
   344 op add .count .count 1
-    * set *tmp156 .count
-    * write :saveLocation.1:x bank1 *tmp156
+  345 write :saveLocation.1:x bank1 .count
   346 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:y bank1 *tmp158
+  347 write :saveLocation.1:y bank1 .count
   348 op add .locations .locations 1
   349 label *label86
   350 jump *label85 always
 
   370 label *label88
   371 label *label89
   372 op mul *tmp167 7 :shiftMask:shiftY
-    * op add *tmp168 :shiftMask:shiftX *tmp167
-    * set :shiftMask:shift *tmp168
+  373 op add :shiftMask:shift :shiftMask:shiftX *tmp167
   374 op greaterThan *tmp169 :shiftMask:shift 0
   375 jump *label90 equal *tmp169 false
-    * op shr *tmp171 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp171
+  376 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   377 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp173 *tmp172 :shiftMask:shift
-    * set :shiftMask:mask *tmp173
+  378 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   379 jump *label91 always
   380 label *label90
   381 op sub *tmp174 0 :shiftMask:shift
 
   384 op notEqual *tmp175 :shiftMask:shiftX 0
   385 jump *label92 equal *tmp175 false
   386 op abs *tmp177 :shiftMask:shiftX
-    * op shr *tmp178 0b1111111 *tmp177
-    * set :shiftMask:keep *tmp178
+  387 op shr :shiftMask:keep 0b1111111 *tmp177
   388 op greaterThan *tmp179 :shiftMask:shiftX 0
   389 jump *label94 equal *tmp179 false
   390 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   413 op idiv *tmp186 *tmp185 2
   414 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   415 op abs *tmp188 *tmp187
-    * op sub *tmp189 *tmp186 *tmp188
-    * set :excludeArea:overlapX *tmp189
+  416 op sub :excludeArea:overlapX *tmp186 *tmp188
   417 op add *tmp190 :excludeArea:areaHeight 7
   418 op add *tmp191 *tmp190 1
   419 op idiv *tmp192 *tmp191 2
   420 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   421 op abs *tmp194 *tmp193
-    * op sub *tmp195 *tmp192 *tmp194
-    * set :excludeArea:overlapY *tmp195
+  422 op sub :excludeArea:overlapY *tmp192 *tmp194
   423 op greaterThan *tmp196 :excludeArea:overlapX 0
   424 op greaterThan *tmp197 :excludeArea:overlapY 0
   425 op land *tmp198 *tmp196 *tmp197
   426 jump *label97 equal *tmp198 false
-    * op min *tmp200 7 :excludeArea:overlapX
-    * set :excludeArea:blockSizeX *tmp200
-    * op min *tmp201 7 :excludeArea:overlapY
-    * set :excludeArea:blockSizeY *tmp201
+  427 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
+  428 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   429 set :createMatrixOfSize:width :excludeArea:blockSizeX
   430 set :createMatrixOfSize:height :excludeArea:blockSizeY
   431 op shl *tmp203 1 :createMatrixOfSize:width
-    * op sub *tmp204 *tmp203 1
-    * set :createMatrixOfSize:row *tmp204
+  432 op sub :createMatrixOfSize:row *tmp203 1
   433 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   434 set :createMatrixOfSize:i 1
   435 label *label100
 
   441 label *label103
   442 label *label104
   443 op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or *tmp208 *tmp207 :createMatrixOfSize:row
-    * set :createMatrixOfSize:matrix *tmp208
+  444 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   445 label *label101
   446 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   447 jump *label100 always
 
   453 set :excludeArea:blocked *tmp202
   454 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   455 op sub *tmp210 7 :excludeArea:blockSizeX
-    * op mul *tmp211 *tmp209 *tmp210
-    * set :excludeArea:shiftX *tmp211
+  456 op mul :excludeArea:shiftX *tmp209 *tmp210
   457 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   458 op sub *tmp213 7 :excludeArea:blockSizeY
-    * op mul *tmp214 *tmp212 *tmp213
-    * set :excludeArea:shiftY *tmp214
+  459 op mul :excludeArea:shiftY *tmp212 *tmp213
   460 set :shiftMask:mask :excludeArea:blocked
   461 set :shiftMask:shiftX :excludeArea:shiftX
   462 set :shiftMask:shiftY :excludeArea:shiftY
 
   464 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   465 label *label105
   466 set :excludeArea:shifted :shiftMask*retval
-    * op or *tmp215 :excludeArea:mask :excludeArea:shifted
-    * set :excludeArea*retval *tmp215
+  467 op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
   468 jump *label96 always
   469 set *tmp199 null
   470 jump *label98 always
 
   483 jump *label109 greaterThan :findPossiblePlacement:y 3
   484 op add *tmp216 :findPossiblePlacement:y 3
   485 op mul *tmp217 7 *tmp216
-    * op shl *tmp218 :findPossiblePlacement:placementMask *tmp217
-    * set :findPossiblePlacement:mask *tmp218
+  486 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   487 set :findPossiblePlacement:x -3
   488 label *label110
   489 jump *label112 greaterThan :findPossiblePlacement:x 3
 
   492 jump *label113 equal *tmp220 false
   493 op mul *tmp222 :findPossiblePlacement:y 7
   494 op add *tmp223 24 *tmp222
-    * op add *tmp224 *tmp223 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp224
+  495 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   496 jump *label106 always
   497 jump *label114 always
   498 label *label113
 
   536 label *label120
   537 set :tryPlaceGenerator:c :findPossiblePlacement:x
   538 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp231 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp231
+  539 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   540 op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
   541 jump *label121 equal *tmp232 false
   542 op lessThan *tmp234 :tryPlaceGenerator:shift 0
 
   547 label *label123
   548 label *label124
   549 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp237 *tmp236 :tryPlaceGenerator:c
-    * set .water2X *tmp237
+  550 op add .water2X *tmp236 :tryPlaceGenerator:c
   551 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp239 *tmp238 :tryPlaceGenerator:r
-    * set .water2Y *tmp239
+  552 op add .water2Y *tmp238 :tryPlaceGenerator:r
   553 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp241 *tmp240 :tryPlaceGenerator:c
-    * set .generatorX *tmp241
+  554 op add .generatorX *tmp240 :tryPlaceGenerator:c
   555 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp243 *tmp242 :tryPlaceGenerator:r
-    * set .generatorY *tmp243
+  556 op add .generatorY *tmp242 :tryPlaceGenerator:r
   557 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   558 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   559 jump *label122 always
 
   567 label *label125
   568 set :tryPlaceGenerator:c :findPossiblePlacement:x
   569 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp245 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp245
+  570 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   571 op lessThan *tmp246 :tryPlaceGenerator:shift 0
   572 jump *label126 equal *tmp246 false
   573 set :tryPlaceGenerator*retval false
 
   576 label *label126
   577 label *label127
   578 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp249 *tmp248 :tryPlaceGenerator:c
-    * set .water2X *tmp249
+  579 op add .water2X *tmp248 :tryPlaceGenerator:c
   580 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp251 *tmp250 :tryPlaceGenerator:r
-    * set .water2Y *tmp251
+  581 op add .water2Y *tmp250 :tryPlaceGenerator:r
   582 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp253 *tmp252 :tryPlaceGenerator:c
-    * set .generatorX *tmp253
+  583 op add .generatorX *tmp252 :tryPlaceGenerator:c
   584 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp255 *tmp254 :tryPlaceGenerator:r
-    * set .generatorY *tmp255
+  585 op add .generatorY *tmp254 :tryPlaceGenerator:r
   586 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   587 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   588 label *label122
 
   596 label *label128
   597 set :tryPlaceGenerator:c :findPossiblePlacement:x
   598 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp257 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp257
+  599 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   600 op lessThan *tmp258 :tryPlaceGenerator:shift 0
   601 jump *label129 equal *tmp258 false
   602 set :tryPlaceGenerator*retval false
 
   604 jump *label130 always
   605 label *label129
   606 label *label130
-    * op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp260
-    * op add *tmp261 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp261
+  607 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  608 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   609 op shl *tmp262 1 :tryPlaceGenerator:shift
   610 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   611 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   617 label *label131
   618 set :tryPlaceGenerator:c :findPossiblePlacement:x
   619 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp263 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp263
+  620 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   621 op lessThan *tmp264 :tryPlaceGenerator:shift 0
   622 jump *label132 equal *tmp264 false
   623 set :tryPlaceGenerator*retval false
 
   625 jump *label133 always
   626 label *label132
   627 label *label133
-    * op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp266
-    * op add *tmp267 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp267
+  628 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  629 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   630 op shl *tmp268 1 :tryPlaceGenerator:shift
   631 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   632 op sub *tmp269 .water2X .node1X
 
   658 label *label136
   659 set :tryPlaceGenerator:c :findPossiblePlacement:x
   660 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp289 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp289
+  661 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   662 op lessThan *tmp290 :tryPlaceGenerator:shift 0
   663 jump *label137 equal *tmp290 false
   664 set :tryPlaceGenerator*retval false
 
   666 jump *label138 always
   667 label *label137
   668 label *label138
-    * op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .node2X *tmp292
-    * op add *tmp293 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .node2Y *tmp293
+  669 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  670 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   671 op shl *tmp294 1 :tryPlaceGenerator:shift
   672 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
   673 jump *label135 always
 
   687 op shl *tmp295 :createBlockMaskRow:result 1
   688 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   689 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or *tmp300 *tmp295 *tmp297
-    * set :createBlockMaskRow:result *tmp300
+  690 op or :createBlockMaskRow:result *tmp295 *tmp297
   691 label *label141
   692 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   693 jump *label140 always
 
   713 setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
   714 call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
   715 label *label145
-    * set *tmp306 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp306
+  716 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   717 op add *tmp307 :createAdjacentMask:y 3
   718 set :createBlockMaskRow:x :createAdjacentMask:x
   719 set :createBlockMaskRow:y *tmp307
   720 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   721 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   722 label *label146
-    * set *tmp308 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp308
+  723 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   724 set :createAdjacentMask:r 2
   725 label *label147
   726 jump *label149 lessThan :createAdjacentMask:r -4
 
   730 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   731 call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   732 label *label150
-    * set *tmp310 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp310
+  733 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   734 op shl *tmp311 :createAdjacentMask:row1 1
   735 op or *tmp312 :createAdjacentMask:row2 *tmp311
   736 op shr *tmp313 :createAdjacentMask:row1 1
   737 op or *tmp314 *tmp312 *tmp313
-    * op or *tmp315 *tmp314 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp315
+  738 op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
   739 op shl *tmp316 :createAdjacentMask:result 7
   740 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or *tmp318 *tmp316 *tmp317
-    * set :createAdjacentMask:result *tmp318
+  741 op or :createAdjacentMask:result *tmp316 *tmp317
   742 set :createAdjacentMask:row2 :createAdjacentMask:row1
   743 set :createAdjacentMask:row1 :createAdjacentMask:row0
   744 label *label148
   745 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   746 jump *label147 always
   747 label *label149
-    * op shr *tmp319 :createAdjacentMask:result 1
-    * set *tmp304 *tmp319
+  748 op shr *tmp304 :createAdjacentMask:result 1
   749 label *label144
   750 set :createCombinedMask:adjacentMask *tmp304
   751 label *label151
   752 wait 1e-15
   753 read *tmp320 processor4 ":createTerrainMask*finished"
   754 jump *label151 equal *tmp320 false
-    * read *tmp321 processor4 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp321
-    * op or *tmp322 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :excludeArea:mask *tmp322
+  755 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
+  756 op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   757 set :excludeArea:maskX :createCombinedMask:x
   758 set :excludeArea:maskY :createCombinedMask:y
   759 set :excludeArea:areaX .coreX
 
   796 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
   797 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   798 label *label158
-    * set *tmp326 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp326
-    * op or *tmp327 :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp327
-    * op or *tmp328 :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp328
+  799 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
+  800 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  801 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   802 set :layoutThoriumDrillAtLocation:mask2x2 387
   803 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   804 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   809 label *label159
   810 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   811 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp329 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp329
+  812 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   813 op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
   814 jump *label160 equal *tmp330 false
   815 op add *tmp332 .drillX 0.5
-    * op add *tmp333 *tmp332 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp333
+  816 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   817 op add *tmp334 .drillY 0.5
-    * op add *tmp335 *tmp334 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp335
+  818 op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
   819 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   820 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   821 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   832 label *label162
   833 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   834 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp338 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp338
+  835 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   836 op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
   837 jump *label163 equal *tmp339 false
   838 op add *tmp341 .drillX 0.5
-    * op add *tmp342 *tmp341 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp342
+  839 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   840 op add *tmp343 .drillY 0.5
-    * op add *tmp344 *tmp343 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp344
+  841 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   842 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   843 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   844 jump *label164 always
   845 label *label163
   846 label *label164
-    * op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
-    * set :layoutThoriumDrillAtLocation:nodeMask *tmp346
+  847 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   848 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   849 set :findPossiblePlacement:placementMask 1
   850 set :findPossiblePlacement:width 1
 
   854 label *label165
   855 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   856 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp347 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp347
+  857 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   858 op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
   859 jump *label166 equal *tmp348 false
   860 set :layoutThoriumDrillAtLocation*retval false
 
   862 jump *label167 always
   863 label *label166
   864 label *label167
-    * op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
-    * set .node1X *tmp350
-    * op add *tmp351 .drillY :layoutThoriumDrillAtLocation:r
-    * set .node1Y *tmp351
+  865 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
+  866 op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
   867 op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
   868 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   869 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
 
   876 setaddr :tryPlaceGenerator*retaddr *label168 (h:*label168)
   877 call *label12 *invalid :tryPlaceGenerator*retval (m:*label168) (h:*label168)
   878 label *label168
-    * set *tmp353 :tryPlaceGenerator*retval
-    * jump *label169 equal *tmp353 false
+  879 jump *label169 equal :tryPlaceGenerator*retval false
   880 set :layoutThoriumDrillAtLocation*retval true
   881 jump *label153 always
   882 jump *label170 always
 
   901 set :layoutThoriumDrillAtLocation:sy -3
   902 setaddr *tmp355 *label177
   903 label *label171
-    * op sub *tmp356 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp356
-    * op sub *tmp357 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp357
+  904 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  905 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   906 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   907 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   908 setaddr :createCombinedMask*retaddr *label178 (h:*label178)
   909 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   910 label *label178
-    * set *tmp358 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp358
+  911 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   912 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   913 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   914 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   915 setaddr :shiftMask*retaddr *label179 (h:*label179)
   916 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   917 label *label179
-    * set *tmp359 :shiftMask*retval
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp359
-    * op or *tmp360 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp360
+  918 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
+  919 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   920 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   921 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   922 set :tryPlaceGenerator:centerX *tmp361
 
   927 setaddr :tryPlaceGenerator*retaddr *label180 (h:*label180)
   928 call *label12 *invalid :tryPlaceGenerator*retval (m:*label180) (h:*label180)
   929 label *label180
-    * set *tmp363 :tryPlaceGenerator*retval
-    * jump *label181 equal *tmp363 false
+  930 jump *label181 equal :tryPlaceGenerator*retval false
   931 set :layoutThoriumDrillAtLocation*retval true
   932 jump *label153 always
   933 jump *label182 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
    55 label *label25
-    * jump *label27 equal true false
    56 set :findDrillLocationLocal:best -1
    57 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    58 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   234 label *label60
   235 set :findDrillLocationLocal:last 0
   236 label *label65
-    * jump *label67 equal true false
   237 write @unit processor4 ":findBestPosition:unit"
   238 write :findDrillLocationLocal:oreX processor4 ":findBestPosition:x"
   239 write :findDrillLocationLocal:oreY processor4 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-38 instructions):
 
    39 set :moveTo.1:radius 6
    40 label *label22
    41 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
-    * op equal *tmp19 *tmp18 false
-    * jump *label24 equal *tmp19 false
+   42 jump *label24 notEqual *tmp18 false
    43 op sub *tmp20 :moveTo.1:radius 0.5
    44 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
    45 label *label23
 
    70 op max .angle .angle @pi
    71 op mul .mapProgress .angle .angle
    72 label *label29
-    * op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label31 equal *tmp32 false
+   73 jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    74 op div :locateOreAway:a .angle @degToRad
    75 op sin *tmp34 :locateOreAway:a
    76 op mul *tmp35 *tmp34 :locateOreAway:distance
 
    99 set :moveTo.2:radius 5
   100 label *label35
   101 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
-    * op equal *tmp49 *tmp48 false
-    * jump *label37 equal *tmp49 false
+  102 jump *label37 notEqual *tmp48 false
   103 op sub *tmp50 :moveTo.2:radius 0.5
   104 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
   105 label *label36
 
   111 op mul .mapProgress .angle .angle
   112 op mul :locateOreAway:distance 3.8197185279121366 .angle
   113 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
-    * op equal *tmp56 *tmp54 false
-    * jump *label38 equal *tmp56 false
+  114 jump *label38 notEqual *tmp54 false
   115 set *tmp28 false
   116 jump *label28 always
   117 jump *label39 always
 
   125 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   126 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
   127 op len :locateOreAway:unitDist *tmp63 *tmp64
-    * op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 equal *tmp66 false
-    * op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
-    * jump *label42 equal *tmp68 false
+  128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
+  129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label30 always
   131 jump *label43 always
   132 label *label42
 
   134 jump *label41 always
   135 label *label40
   136 label *label41
-    * op greaterThanEq *tmp70 :locateOreAway:coreDist 8
-    * jump *label44 equal *tmp70 false
-    * op lessThan *tmp72 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label46 equal *tmp72 false
+  137 jump *label44 lessThan :locateOreAway:coreDist 8
+  138 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   139 set :locateOreAway:lastX :locateOreAway:x
   140 set :locateOreAway:lastY :locateOreAway:y
   141 set :visited:x :locateOreAway:x
 
   152 op sub *tmp83 :visited:x :visited:lx
   153 op sub *tmp84 :visited:y :visited:ly
   154 op len *tmp85 *tmp83 *tmp84
-    * op lessThan *tmp86 *tmp85 7
-    * jump *label52 equal *tmp86 false
+  155 jump *label52 greaterThanEq *tmp85 7
   156 set *tmp74 true
   157 jump *label48 always
   158 jump *label53 always
 
   166 jump *label48 always
   167 set *tmp74 null
   168 label *label48
-    * op equal *tmp88 *tmp74 false
-    * jump *label54 equal *tmp88 false
+  169 jump *label54 notEqual *tmp74 false
   170 op div *tmp90 7.639437055824273 :locateOreAway:distance
   171 op add .angle .angle *tmp90
   172 op mul .mapProgress .angle .angle
 
   191 label *label28
   192 set :findDrillLocationLocal:oreX :locateOreAway:x
   193 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp92 *tmp28 false
-    * jump *label56 equal *tmp92 false
+  194 jump *label56 notEqual *tmp28 false
   195 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   196 jump *label19 always
   197 jump *label57 always
   198 label *label56
   199 label *label57
-    * op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
-    * jump *label58 equal *tmp95 false
+  200 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   201 op add .mapSpots .mapSpots 1
   202 jump *label59 always
   203 label *label58
 
   211 set :moveTo.4:radius 6
   212 label *label62
   213 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
-    * op equal *tmp101 *tmp100 false
-    * jump *label64 equal *tmp101 false
+  214 jump *label64 notEqual *tmp100 false
   215 op sub *tmp102 :moveTo.4:radius 0.5
   216 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
   217 label *label63
 
   242 op sub *tmp116 :findDrillLocationLocal:newY .coreY
   243 op abs *tmp117 *tmp116
   244 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
-    * op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
-    * jump *label69 equal *tmp119 false
+  245 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   246 jump *label67 always
   247 jump *label70 always
   248 label *label69
   249 label *label70
-    * op greaterThan *tmp121 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label71 equal *tmp121 false
+  250 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   251 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   252 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   253 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp123 :findDrillLocationLocal:limit 1000
-    * jump *label73 equal *tmp123 false
+  254 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   255 set .mapSpots :findDrillLocationLocal:score
   256 jump *label74 always
   257 label *label73
   258 label *label74
-    * op greaterThanEq *tmp125 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label75 equal *tmp125 false
+  259 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   260 set :saveLocation:item :findDrillLocationLocal:item
   261 set :saveLocation:value :findDrillLocationLocal:score
   262 set :saveLocation:x :findDrillLocationLocal:dx
 
   282 jump *label72 always
   283 label *label71
   284 label *label72
-    * op greaterThan *tmp137 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label78 equal *tmp137 false
+  285 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   286 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   287 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   288 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   289 jump *label79 always
   290 label *label78
   291 label *label79
-    * op lessThanEq *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label80 equal *tmp139 false
+  292 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   293 jump *label67 always
   294 jump *label81 always
   295 label *label80
 
   308 label *label66
   309 jump *label65 always
   310 label *label67
-    * op greaterThanEq *tmp149 :findDrillLocationLocal:best 0
-    * jump *label84 equal *tmp149 false
+  311 jump *label84 lessThan :findDrillLocationLocal:best 0
   312 set :saveLocation.1:item :findDrillLocationLocal:item
   313 set :saveLocation.1:value :findDrillLocationLocal:best
   314 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   349 label *label89
   350 op mul *tmp167 7 :shiftMask:shiftY
   351 op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * op greaterThan *tmp169 :shiftMask:shift 0
-    * jump *label90 equal *tmp169 false
+  352 jump *label90 lessThanEq :shiftMask:shift 0
   353 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   354 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   355 op shl :shiftMask:mask *tmp172 :shiftMask:shift
 
   358 op sub *tmp174 0 :shiftMask:shift
   359 op shr :shiftMask:mask :shiftMask:mask *tmp174
   360 label *label91
-    * op notEqual *tmp175 :shiftMask:shiftX 0
-    * jump *label92 equal *tmp175 false
+  361 jump *label92 equal :shiftMask:shiftX 0
   362 op abs *tmp177 :shiftMask:shiftX
   363 op shr :shiftMask:keep 0b1111111 *tmp177
-    * op greaterThan *tmp179 :shiftMask:shiftX 0
-    * jump *label94 equal *tmp179 false
+  364 jump *label94 lessThanEq :shiftMask:shiftX 0
   365 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   366 jump *label95 always
   367 label *label94
 
   409 set :createMatrixOfSize:i 1
   410 label *label100
   411 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
-    * jump *label103 equal *tmp205 false
+  412 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   413 jump *label102 always
   414 jump *label104 always
   415 label *label103
 
   462 label *label110
   463 jump *label112 greaterThan :findPossiblePlacement:x 3
   464 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp220 *tmp219 0
-    * jump *label113 equal *tmp220 false
+  465 jump *label113 notEqual *tmp219 0
   466 op mul *tmp222 :findPossiblePlacement:y 7
   467 op add *tmp223 24 *tmp222
   468 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
 
   471 label *label113
   472 label *label114
   473 op sub *tmp225 3 :findPossiblePlacement:width
-    * op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
-    * jump *label115 equal *tmp226 false
+  474 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   475 jump *label112 always
   476 jump *label116 always
   477 label *label115
 
   482 jump *label110 always
   483 label *label112
   484 op sub *tmp228 3 :findPossiblePlacement:height
-    * op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
-    * jump *label117 equal *tmp229 false
+  485 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   486 jump *label109 always
   487 jump *label118 always
   488 label *label117
 
   508 set :tryPlaceGenerator:c :findPossiblePlacement:x
   509 set :tryPlaceGenerator:r :findPossiblePlacement:y
   510 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
-    * jump *label121 equal *tmp232 false
-    * op lessThan *tmp234 :tryPlaceGenerator:shift 0
-    * jump *label123 equal *tmp234 false
+  511 jump *label121 lessThan :tryPlaceGenerator:shift 0
+  512 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   513 set :tryPlaceGenerator*retval false
   514 jump *label119 always
   515 jump *label124 always
 
   537 set :tryPlaceGenerator:c :findPossiblePlacement:x
   538 set :tryPlaceGenerator:r :findPossiblePlacement:y
   539 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp246 :tryPlaceGenerator:shift 0
-    * jump *label126 equal *tmp246 false
+  540 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   541 set :tryPlaceGenerator*retval false
   542 jump *label119 always
   543 jump *label127 always
 
   565 set :tryPlaceGenerator:c :findPossiblePlacement:x
   566 set :tryPlaceGenerator:r :findPossiblePlacement:y
   567 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp258 :tryPlaceGenerator:shift 0
-    * jump *label129 equal *tmp258 false
+  568 jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
   569 set :tryPlaceGenerator*retval false
   570 jump *label119 always
   571 jump *label130 always
 
   585 set :tryPlaceGenerator:c :findPossiblePlacement:x
   586 set :tryPlaceGenerator:r :findPossiblePlacement:y
   587 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp264 :tryPlaceGenerator:shift 0
-    * jump *label132 equal *tmp264 false
+  588 jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
   589 set :tryPlaceGenerator*retval false
   590 jump *label119 always
   591 jump *label133 always
 
   625 set :tryPlaceGenerator:c :findPossiblePlacement:x
   626 set :tryPlaceGenerator:r :findPossiblePlacement:y
   627 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp290 :tryPlaceGenerator:shift 0
-    * jump *label137 equal *tmp290 false
+  628 jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
   629 set :tryPlaceGenerator*retval false
   630 jump *label119 always
   631 jump *label138 always
 
   748 set :moveTo.5:radius 1
   749 label *label155
   750 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
-    * op equal *tmp324 *tmp323 false
-    * jump *label157 equal *tmp324 false
+  751 jump *label157 notEqual *tmp323 false
   752 op sub *tmp325 :moveTo.5:radius 0.5
   753 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
   754 label *label156
 
   774 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   775 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   776 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label160 equal *tmp330 false
+  777 jump *label160 lessThan :layoutThoriumDrillAtLocation:shift 0
   778 op add *tmp332 .drillX 0.5
   779 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   780 op add *tmp334 .drillY 0.5
 
   796 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   797 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   798 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label163 equal *tmp339 false
+  799 jump *label163 lessThan :layoutThoriumDrillAtLocation:shift 0
   800 op add *tmp341 .drillX 0.5
   801 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   802 op add *tmp343 .drillY 0.5
 
   817 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   818 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   819 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label166 equal *tmp348 false
+  820 jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   821 set :layoutThoriumDrillAtLocation*retval false
   822 jump *label153 always
   823 jump *label167 always
 
   938 label *label186
   939 set .drillX :findDrillLocationLocal:dx
   940 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp365 :findDrillLocationLocal*retval false
-    * jump *label187 equal *tmp365 false
+  941 jump *label187 notEqual :findDrillLocationLocal*retval false
   942 set :layoutThoriumDrill*retval false
   943 jump *label185 always
   944 jump *label188 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-35 instructions):
 
   114 jump *label38 notEqual *tmp54 false
   115 set *tmp28 false
   116 jump *label28 always
-    * jump *label39 always
   117 label *label38
   118 label *label39
   119 op sub *tmp58 :locateOreAway:x .coreX
 
   127 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   128 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   129 jump *label30 always
-    * jump *label43 always
   130 label *label42
   131 label *label43
-    * jump *label41 always
   132 label *label40
   133 label *label41
   134 jump *label44 lessThan :locateOreAway:coreDist 8
 
   152 jump *label52 greaterThanEq *tmp85 7
   153 set *tmp74 true
   154 jump *label48 always
-    * jump *label53 always
   155 label *label52
   156 label *label53
   157 label *label50
 
   169 printflush message1
   170 set *tmp28 true
   171 jump *label28 always
-    * jump *label55 always
   172 label *label54
   173 label *label55
-    * jump *label47 always
   174 label *label46
   175 label *label47
-    * jump *label45 always
   176 label *label44
   177 label *label45
   178 label *label30
 
   187 jump *label56 notEqual *tmp28 false
   188 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   189 jump *label19 always
-    * jump *label57 always
   190 label *label56
   191 label *label57
   192 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   193 op add .mapSpots .mapSpots 1
-    * jump *label59 always
   194 label *label58
   195 label *label59
   196 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   235 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   236 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   237 jump *label67 always
-    * jump *label70 always
   238 label *label69
   239 label *label70
   240 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
 
   243 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   244 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   245 set .mapSpots :findDrillLocationLocal:score
-    * jump *label74 always
   246 label *label73
   247 label *label74
   248 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   265 ucontrol unbind
   266 set :findDrillLocationLocal*retval true
   267 jump *label19 always
-    * jump *label76 always
   268 label *label75
   269 label *label76
-    * jump *label72 always
   270 label *label71
   271 label *label72
   272 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   273 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   274 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   275 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label79 always
   276 label *label78
   277 label *label79
   278 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   279 jump *label67 always
-    * jump *label81 always
   280 label *label80
   281 label *label81
   282 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   310 write :saveLocation.1:y bank1 .count
   311 op add .locations .locations 1
   312 label *label86
-    * jump *label85 always
   313 label *label84
   314 label *label85
   315 label *label26
 
   328 jump *label88 equal *tmp165 false
   329 set :shiftMask*retval 0
   330 jump *label87 always
-    * jump *label89 always
   331 label *label88
   332 label *label89
   333 op mul *tmp167 7 :shiftMask:shiftY
 
   346 op shr :shiftMask:keep 0b1111111 *tmp177
   347 jump *label94 lessThanEq :shiftMask:shiftX 0
   348 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label95 always
   349 label *label94
   350 label *label95
   351 op shl *tmp181 :shiftMask:keep 7
 
   355 op shl *tmp183 :shiftMask:keep 21
   356 op or :shiftMask:keep :shiftMask:keep *tmp183
   357 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label93 always
   358 label *label92
   359 label *label93
   360 set :shiftMask*retval :shiftMask:mask
 
   392 jump *label102 greaterThanEq :createMatrixOfSize:i 7
   393 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   394 jump *label102 always
-    * jump *label104 always
   395 label *label103
   396 label *label104
   397 op shl *tmp207 :createMatrixOfSize:matrix 7
 
   447 op add *tmp223 24 *tmp222
   448 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   449 jump *label106 always
-    * jump *label114 always
   450 label *label113
   451 label *label114
   452 op sub *tmp225 3 :findPossiblePlacement:width
   453 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   454 jump *label112 always
-    * jump *label116 always
   455 label *label115
   456 label *label116
   457 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   462 op sub *tmp228 3 :findPossiblePlacement:height
   463 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   464 jump *label109 always
-    * jump *label118 always
   465 label *label117
   466 label *label118
   467 label *label108
 
   489 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   490 set :tryPlaceGenerator*retval false
   491 jump *label119 always
-    * jump *label124 always
   492 label *label123
   493 label *label124
   494 op add *tmp236 :tryPlaceGenerator:centerX 0.5
 
   516 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   517 set :tryPlaceGenerator*retval false
   518 jump *label119 always
-    * jump *label127 always
   519 label *label126
   520 label *label127
   521 op add *tmp248 :tryPlaceGenerator:centerX 0.5
 
   543 jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
   544 set :tryPlaceGenerator*retval false
   545 jump *label119 always
-    * jump *label130 always
   546 label *label129
   547 label *label130
   548 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   562 jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
   563 set :tryPlaceGenerator*retval false
   564 jump *label119 always
-    * jump *label133 always
   565 label *label132
   566 label *label133
   567 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   601 jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
   602 set :tryPlaceGenerator*retval false
   603 jump *label119 always
-    * jump *label138 always
   604 label *label137
   605 label *label138
   606 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   607 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   608 op shl *tmp294 1 :tryPlaceGenerator:shift
   609 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * jump *label135 always
   610 label *label134
   611 label *label135
   612 set :tryPlaceGenerator*retval true
 
   754 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   755 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   756 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * jump *label161 always
   757 label *label160
   758 label *label161
   759 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   773 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   774 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   775 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * jump *label164 always
   776 label *label163
   777 label *label164
   778 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
 
   789 jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   790 set :layoutThoriumDrillAtLocation*retval false
   791 jump *label153 always
-    * jump *label167 always
   792 label *label166
   793 label *label167
   794 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
 
   808 jump *label169 equal :tryPlaceGenerator*retval false
   809 set :layoutThoriumDrillAtLocation*retval true
   810 jump *label153 always
-    * jump *label170 always
   811 label *label169
   812 label *label170
   813 set :layoutThoriumDrillAtLocation:sx 3
 
   858 jump *label181 equal :tryPlaceGenerator*retval false
   859 set :layoutThoriumDrillAtLocation*retval true
   860 jump *label153 always
-    * jump *label182 always
   861 label *label181
   862 label *label182
   863 label *label172
 
   907 jump *label187 notEqual :findDrillLocationLocal*retval false
   908 set :layoutThoriumDrill*retval false
   909 jump *label185 always
-    * jump *label188 always
   910 label *label187
   911 label *label188
   912 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-12 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp13 @mapw .coreX
-    * op sub *tmp14 @maph .coreY
-    * op max *tmp15 .coreX .coreY
+   25 op sub *tmp13 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp14 @maph :findDrillLocationLocal:y
+   27 op max *tmp15 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp15 *tmp15 *tmp13
    29 op max *tmp15 *tmp15 *tmp14
    30 set :findDrillLocationLocal:distanceLimit *tmp15
    31 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp16 :moveTo:x
-    * set *tmp17 :moveTo:y
-    * set :moveTo.1:x *tmp16
-    * set :moveTo.1:y *tmp17
+   32 set .mapProgress 0
+   33 set :moveTo:x :findDrillLocationLocal:x
+   34 set :moveTo:y :findDrillLocationLocal:y
+   35 set *tmp16 .coreX
+   36 set *tmp17 .coreY
+   37 set :moveTo.1:x :moveTo:x
+   38 set :moveTo.1:y :moveTo:y
    39 set :moveTo.1:radius 6
    40 label *label22
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
+   41 ucontrol within *tmp16 *tmp17 6 *tmp18
    42 jump *label24 notEqual *tmp18 false
-    * op sub *tmp20 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
+   43 op sub *tmp20 6 0.5
+   44 ucontrol approach *tmp16 *tmp17 5.5
    45 label *label23
    46 jump *label22 always
    47 label *label24
    48 label *label21
    49 label *label20
-    * op div *tmp21 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   50 op div *tmp21 *tmp15 3.8197185279121366
    51 op pow .mapTotal *tmp21 2
    52 set :findDrillLocationLocal:oreX 0
    53 set :findDrillLocationLocal:oreY 0
 
    70 op max .angle .angle @pi
    71 op mul .mapProgress .angle .angle
    72 label *label29
-    * jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   73 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    74 op div :locateOreAway:a .angle @degToRad
    75 op sin *tmp34 :locateOreAway:a
    76 op mul *tmp35 *tmp34 :locateOreAway:distance
-    * op add *tmp36 .coreX *tmp35
+   77 op add *tmp36 :findDrillLocationLocal:x *tmp35
    78 op sub *tmp37 @mapw 5
    79 set :limit:value *tmp36
    80 set :limit:low 5
    81 set :limit:high *tmp37
-    * op max *tmp39 :limit:value :limit:low
-    * op min *tmp38 *tmp39 :limit:high
+   82 op max *tmp39 *tmp36 5
+   83 op min *tmp38 *tmp39 *tmp37
    84 label *label32
    85 set :locateOreAway:lx *tmp38
    86 op cos *tmp41 :locateOreAway:a
    87 op mul *tmp42 *tmp41 :locateOreAway:distance
-    * op add *tmp43 .coreY *tmp42
+   88 op add *tmp43 :findDrillLocationLocal:y *tmp42
    89 op sub *tmp44 @maph 5
    90 set :limit.1:value *tmp43
    91 set :limit.1:low 5
    92 set :limit.1:high *tmp44
-    * op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp45 *tmp46 :limit.1:high
+   93 op max *tmp46 *tmp43 5
+   94 op min *tmp45 *tmp46 *tmp44
    95 label *label33
    96 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   97 set :moveTo.2:x *tmp38
+   98 set :moveTo.2:y *tmp45
    99 set :moveTo.2:radius 5
   100 label *label35
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
+  101 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
   102 jump *label37 notEqual *tmp48 false
-    * op sub *tmp50 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
+  103 op sub *tmp50 5 0.5
+  104 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   105 label *label36
   106 jump *label35 always
   107 label *label37
 
   110 op add .angle .angle *tmp51
   111 op mul .mapProgress .angle .angle
   112 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+  113 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   114 jump *label38 notEqual *tmp54 false
   115 set *tmp28 false
   116 jump *label28 always
   117 label *label38
   118 label *label39
-    * op sub *tmp58 :locateOreAway:x .coreX
+  119 op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x
   120 op abs *tmp59 *tmp58
-    * op sub *tmp60 :locateOreAway:y .coreY
+  121 op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y
   122 op abs *tmp61 *tmp60
   123 op max :locateOreAway:coreDist *tmp59 *tmp61
-    * op sub *tmp63 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp64 :locateOreAway:y :locateOreAway:ly
+  124 op sub *tmp63 :locateOreAway:x *tmp38
+  125 op sub *tmp64 :locateOreAway:y *tmp45
   126 op len :locateOreAway:unitDist *tmp63 *tmp64
   127 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   128 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
 
   146 read :visited:lx bank1 *tmp78
   147 op add *tmp81 :visited:index 3
   148 read :visited:ly bank1 *tmp81
-    * op sub *tmp83 :visited:x :visited:lx
-    * op sub *tmp84 :visited:y :visited:ly
+  149 op sub *tmp83 :locateOreAway:x :visited:lx
+  150 op sub *tmp84 :locateOreAway:y :visited:ly
   151 op len *tmp85 *tmp83 *tmp84
   152 jump *label52 greaterThanEq *tmp85 7
   153 set *tmp74 true
 
   160 label *label51
   161 set *tmp74 false
   162 jump *label48 always
-    * set *tmp74 null
   163 label *label48
   164 jump *label54 notEqual *tmp74 false
-    * op div *tmp90 7.639437055824273 :locateOreAway:distance
+  165 op div *tmp90 2 .angle
   166 op add .angle .angle *tmp90
   167 op mul .mapProgress .angle .angle
   168 printflush message1
 
   179 label *label31
   180 set *tmp28 false
   181 jump *label28 always
-    * set *tmp28 null
   182 label *label28
   183 set :findDrillLocationLocal:oreX :locateOreAway:x
   184 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   191 op add .mapSpots .mapSpots 1
   192 label *label58
   193 label *label59
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp98 :moveTo.3:x
-    * set *tmp99 :moveTo.3:y
-    * set :moveTo.4:x *tmp98
-    * set :moveTo.4:y *tmp99
+  194 set :moveTo.3:x :locateOreAway:x
+  195 set :moveTo.3:y :locateOreAway:y
+  196 set *tmp98 :findDrillLocationLocal:oreX
+  197 set *tmp99 :findDrillLocationLocal:oreY
+  198 set :moveTo.4:x :moveTo.3:x
+  199 set :moveTo.4:y :moveTo.3:y
   200 set :moveTo.4:radius 6
   201 label *label62
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
+  202 ucontrol within *tmp98 *tmp99 6 *tmp100
   203 jump *label64 notEqual *tmp100 false
-    * op sub *tmp102 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
+  204 op sub *tmp102 6 0.5
+  205 ucontrol approach *tmp98 *tmp99 5.5
   206 label *label63
   207 jump *label62 always
   208 label *label64
 
   226 read :findDrillLocationLocal:score processor4 ":findBestPosition*retval"
   227 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   228 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * op sub *tmp114 :findDrillLocationLocal:newX .coreX
+  229 op sub *tmp114 :findDrillLocationLocal:newX :findDrillLocationLocal:x
   230 op abs *tmp115 *tmp114
-    * op sub *tmp116 :findDrillLocationLocal:newY .coreY
+  231 op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   232 op abs *tmp117 *tmp116
   233 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   234 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
 
   250 set :saveLocation:y :findDrillLocationLocal:dy
   251 op add .count .count 1
   252 set *tmp127 .count
-    * sensor *tmp129 :saveLocation:item @id
-    * write *tmp129 bank1 *tmp127
+  253 sensor *tmp129 :findDrillLocationLocal:item @id
+  254 write *tmp129 bank1 .count
   255 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  256 write :findDrillLocationLocal:score bank1 .count
   257 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  258 write :findDrillLocationLocal:dx bank1 .count
   259 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  260 write :findDrillLocationLocal:dy bank1 .count
   261 op add .locations .locations 1
   262 label *label77
   263 ucontrol unbind
 
   298 set :saveLocation.1:y :findDrillLocationLocal:bestY
   299 op add .count .count 1
   300 set *tmp151 .count
-    * sensor *tmp153 :saveLocation.1:item @id
-    * write *tmp153 bank1 *tmp151
+  301 sensor *tmp153 :findDrillLocationLocal:item @id
+  302 write *tmp153 bank1 .count
   303 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  304 write :findDrillLocationLocal:best bank1 .count
   305 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  306 write :findDrillLocationLocal:bestX bank1 .count
   307 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  308 write :findDrillLocationLocal:bestY bank1 .count
   309 op add .locations .locations 1
   310 label *label86
   311 label *label84
 
   341 label *label91
   342 jump *label92 equal :shiftMask:shiftX 0
   343 op abs *tmp177 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp177
+  344 op shr :shiftMask:keep 0b1111111 *tmp161
   345 jump *label94 lessThanEq :shiftMask:shiftX 0
   346 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   347 label *label94
 
   357 label *label93
   358 set :shiftMask*retval :shiftMask:mask
   359 jump *label87 always
-    * set :shiftMask*retval null
   360 label *label87
   361 return :shiftMask*retaddr
   362 end
   363 label *label10
   364 op add *tmp184 :excludeArea:areaWidth 7
-    * op add *tmp185 *tmp184 1
+  365 op add *tmp185 :excludeArea:areaWidth 8
   366 op idiv *tmp186 *tmp185 2
   367 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   368 op abs *tmp188 *tmp187
   369 op sub :excludeArea:overlapX *tmp186 *tmp188
   370 op add *tmp190 :excludeArea:areaHeight 7
-    * op add *tmp191 *tmp190 1
+  371 op add *tmp191 :excludeArea:areaHeight 8
   372 op idiv *tmp192 *tmp191 2
   373 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   374 op abs *tmp194 *tmp193
 
   381 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   382 set :createMatrixOfSize:width :excludeArea:blockSizeX
   383 set :createMatrixOfSize:height :excludeArea:blockSizeY
-    * op shl *tmp203 1 :createMatrixOfSize:width
+  384 op shl *tmp203 1 :excludeArea:blockSizeX
   385 op sub :createMatrixOfSize:row *tmp203 1
   386 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   387 set :createMatrixOfSize:i 1
   388 label *label100
   389 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
+  390 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   391 jump *label102 always
   392 label *label103
   393 label *label104
 
   399 label *label102
   400 set *tmp202 :createMatrixOfSize:matrix
   401 jump *label99 always
-    * set *tmp202 null
   402 label *label99
-    * set :excludeArea:blocked *tmp202
+  403 set :excludeArea:blocked :createMatrixOfSize:matrix
   404 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   405 op sub *tmp210 7 :excludeArea:blockSizeX
   406 op mul :excludeArea:shiftX *tmp209 *tmp210
   407 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   408 op sub *tmp213 7 :excludeArea:blockSizeY
   409 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :excludeArea:blocked
+  410 set :shiftMask:mask *tmp202
   411 set :shiftMask:shiftX :excludeArea:shiftX
   412 set :shiftMask:shiftY :excludeArea:shiftY
   413 setaddr :shiftMask*retaddr *label105 (h:*label105)
   414 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   415 label *label105
   416 set :excludeArea:shifted :shiftMask*retval
-    * op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
+  417 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   418 jump *label96 always
-    * set *tmp199 null
   419 jump *label98 always
   420 label *label97
   421 set :excludeArea*retval :excludeArea:mask
   422 jump *label96 always
-    * set *tmp199 null
   423 label *label98
-    * set :excludeArea*retval *tmp199
+  424 set :excludeArea*retval null
   425 label *label96
   426 return :excludeArea*retaddr
   427 end
 
   464 label *label109
   465 set :findPossiblePlacement*retval -1
   466 jump *label106 always
-    * set :findPossiblePlacement*retval null
   467 label *label106
   468 return :findPossiblePlacement*retaddr
   469 end
 
   478 set :tryPlaceGenerator:c :findPossiblePlacement:x
   479 set :tryPlaceGenerator:r :findPossiblePlacement:y
   480 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label121 lessThan :tryPlaceGenerator:shift 0
-    * jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
+  481 jump *label121 lessThan :findPossiblePlacement*retval 0
+  482 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   483 set :tryPlaceGenerator*retval false
   484 jump *label119 always
   485 label *label123
   486 label *label124
   487 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp236 :tryPlaceGenerator:c
+  488 op add .water2X *tmp236 :findPossiblePlacement:x
   489 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp238 :tryPlaceGenerator:r
+  490 op add .water2Y *tmp238 :findPossiblePlacement:y
   491 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp240 :tryPlaceGenerator:c
+  492 op add .generatorX *tmp236 :findPossiblePlacement:x
   493 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp242 :tryPlaceGenerator:r
-    * op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  494 op add .generatorY *tmp242 :findPossiblePlacement:y
+  495 op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   496 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   497 jump *label122 always
   498 label *label121
 
   506 set :tryPlaceGenerator:c :findPossiblePlacement:x
   507 set :tryPlaceGenerator:r :findPossiblePlacement:y
   508 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
+  509 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   510 set :tryPlaceGenerator*retval false
   511 jump *label119 always
   512 label *label126
   513 label *label127
   514 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp248 :tryPlaceGenerator:c
+  515 op add .water2X *tmp248 :findPossiblePlacement:x
   516 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp250 :tryPlaceGenerator:r
+  517 op add .water2Y *tmp250 :findPossiblePlacement:y
   518 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp252 :tryPlaceGenerator:c
+  519 op add .generatorX *tmp252 :findPossiblePlacement:x
   520 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp254 :tryPlaceGenerator:r
-    * op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  521 op add .generatorY *tmp250 :findPossiblePlacement:y
+  522 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   523 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   524 label *label122
   525 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
 
   533 set :tryPlaceGenerator:c :findPossiblePlacement:x
   534 set :tryPlaceGenerator:r :findPossiblePlacement:y
   535 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
+  536 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   537 set :tryPlaceGenerator*retval false
   538 jump *label119 always
   539 label *label129
   540 label *label130
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp262 1 :tryPlaceGenerator:shift
+  541 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  542 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  543 op shl *tmp262 1 :findPossiblePlacement*retval
   544 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   545 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   546 set :findPossiblePlacement:placementMask 1
 
   552 set :tryPlaceGenerator:c :findPossiblePlacement:x
   553 set :tryPlaceGenerator:r :findPossiblePlacement:y
   554 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
+  555 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   556 set :tryPlaceGenerator*retval false
   557 jump *label119 always
   558 label *label132
   559 label *label133
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp268 1 :tryPlaceGenerator:shift
+  560 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  561 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  562 op shl *tmp268 1 :findPossiblePlacement*retval
   563 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   564 op sub *tmp269 .water2X .node1X
   565 op sub *tmp270 .water2Y .node1Y
 
   591 set :tryPlaceGenerator:c :findPossiblePlacement:x
   592 set :tryPlaceGenerator:r :findPossiblePlacement:y
   593 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
+  594 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   595 set :tryPlaceGenerator*retval false
   596 jump *label119 always
   597 label *label137
   598 label *label138
-    * op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp294 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
+  599 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  600 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  601 op shl *tmp294 1 :findPossiblePlacement*retval
   602 label *label134
   603 label *label135
   604 set :tryPlaceGenerator*retval true
   605 jump *label119 always
-    * set :tryPlaceGenerator*retval null
   606 label *label119
   607 return :tryPlaceGenerator*retaddr
   608 end
 
   621 label *label142
   622 set :createBlockMaskRow*retval :createBlockMaskRow:result
   623 jump *label139 always
-    * set :createBlockMaskRow*retval null
   624 label *label139
   625 return :createBlockMaskRow*retaddr
   626 end
 
   633 set :createAdjacentMask:x :createCombinedMask:x
   634 set :createAdjacentMask:y :createCombinedMask:y
   635 set :createAdjacentMask:result 0
-    * op add *tmp305 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  636 op add *tmp305 :createCombinedMask:y 4
+  637 set :createBlockMaskRow:x :createCombinedMask:x
   638 set :createBlockMaskRow:y *tmp305
   639 setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
   640 call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
 
   661 op or *tmp312 :createAdjacentMask:row2 *tmp311
   662 op shr *tmp313 :createAdjacentMask:row1 1
   663 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
+  664 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
   665 op shl *tmp316 :createAdjacentMask:result 7
   666 op and *tmp317 :createAdjacentMask:mask 0xFE
   667 op or :createAdjacentMask:result *tmp316 *tmp317
   668 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  669 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   670 label *label148
   671 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   672 jump *label147 always
 
   679 read *tmp320 processor4 ":createTerrainMask*finished"
   680 jump *label151 equal *tmp320 false
   681 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
-    * op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  682 op or :excludeArea:mask *tmp304 :createCombinedMask:terrainMask
   683 set :excludeArea:maskX :createCombinedMask:x
   684 set :excludeArea:maskY :createCombinedMask:y
   685 set :excludeArea:areaX .coreX
 
   691 label *label152
   692 set :createCombinedMask*retval :excludeArea*retval
   693 jump *label143 always
-    * set :createCombinedMask*retval null
   694 label *label143
   695 return :createCombinedMask*retaddr
   696 end
 
   707 set :moveTo.5:y .drillY
   708 set :moveTo.5:radius 1
   709 label *label155
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
+  710 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   711 jump *label157 notEqual *tmp323 false
-    * op sub *tmp325 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
+  712 op sub *tmp325 1 0.5
+  713 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   714 label *label156
   715 jump *label155 always
   716 label *label157
 
   721 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   722 label *label158
   723 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  724 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   725 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   726 set :layoutThoriumDrillAtLocation:mask2x2 387
   727 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  728 set :findPossiblePlacement:placementMask 387
   729 set :findPossiblePlacement:width 2
   730 set :findPossiblePlacement:height 2
   731 setaddr :findPossiblePlacement*retaddr *label159 (h:*label159)
 
   734 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   735 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   736 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label160 lessThan :layoutThoriumDrillAtLocation:shift 0
+  737 jump *label160 lessThan :findPossiblePlacement*retval 0
   738 op add *tmp332 .drillX 0.5
-    * op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
+  739 op add .water1X *tmp332 :findPossiblePlacement:x
   740 op add *tmp334 .drillY 0.5
-    * op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  741 op add .water1Y *tmp334 :findPossiblePlacement:y
+  742 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   743 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
+  744 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  745 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   746 label *label160
   747 label *label161
   748 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   755 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   756 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   757 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label163 lessThan :layoutThoriumDrillAtLocation:shift 0
+  758 jump *label163 lessThan :findPossiblePlacement*retval 0
   759 op add *tmp341 .drillX 0.5
-    * op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
+  760 op add .containerX *tmp341 :findPossiblePlacement:x
   761 op add *tmp343 .drillY 0.5
-    * op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  762 op add .containerY *tmp343 :findPossiblePlacement:y
+  763 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   764 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   765 label *label163
   766 label *label164
 
   775 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   776 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   777 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
+  778 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   779 set :layoutThoriumDrillAtLocation*retval false
   780 jump *label153 always
   781 label *label166
   782 label *label167
-    * op add .node1X .drillX :layoutThoriumDrillAtLocation:c
-    * op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
-    * op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
+  783 op add .node1X .drillX :findPossiblePlacement:x
+  784 op add .node1Y .drillY :findPossiblePlacement:y
+  785 op shl *tmp352 1 :findPossiblePlacement*retval
   786 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   787 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   788 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   789 set :tryPlaceGenerator:centerX .drillX
   790 set :tryPlaceGenerator:centerY .drillY
   791 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  792 set :tryPlaceGenerator:generatorHorizontal 1935
+  793 set :tryPlaceGenerator:generatorVertical 6340995
   794 setaddr :tryPlaceGenerator*retaddr *label168 (h:*label168)
   795 call *label12 *invalid :tryPlaceGenerator*retval (m:*label168) (h:*label168)
   796 label *label168
 
   833 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   834 label *label179
   835 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  836 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   837 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   838 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   839 set :tryPlaceGenerator:centerX *tmp361
 
   855 label *label173
   856 set :layoutThoriumDrillAtLocation*retval true
   857 jump *label153 always
-    * set :layoutThoriumDrillAtLocation*retval null
   858 label *label153
   859 return :layoutThoriumDrillAtLocation*retaddr
   860 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-70 instructions):
 
    32 set .mapProgress 0
    33 set :moveTo:x :findDrillLocationLocal:x
    34 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp16 .coreX
-    * set *tmp17 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   35 set *tmp16 :findDrillLocationLocal:x
+   36 set *tmp17 :findDrillLocationLocal:y
+   37 set :moveTo.1:x :findDrillLocationLocal:x
+   38 set :moveTo.1:y :findDrillLocationLocal:y
    39 label *label22
-    * ucontrol within *tmp16 *tmp17 6 *tmp18
+   40 ucontrol within .coreX .coreY 6 *tmp18
    41 jump *label24 notEqual *tmp18 false
-    * op sub *tmp20 6 0.5
-    * ucontrol approach *tmp16 *tmp17 5.5
+   42 ucontrol approach .coreX .coreY 5.5
    43 label *label23
    44 jump *label22 always
    45 label *label24
 
    58 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    59 op div *tmp26 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    60 op pow .mapTotal *tmp26 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    61 set :locateOreAway:x :findDrillLocationLocal:oreX
    62 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    63 op mul :locateOreAway:distance 3.8197185279121366 .angle
    64 set :locateOreAway:lastX -1
    65 set :locateOreAway:lastY -1
 
    72 op mul *tmp35 *tmp34 :locateOreAway:distance
    73 op add *tmp36 :findDrillLocationLocal:x *tmp35
    74 op sub *tmp37 @mapw 5
-    * set :limit:value *tmp36
-    * set :limit:low 5
-    * set :limit:high *tmp37
    75 op max *tmp39 *tmp36 5
    76 op min *tmp38 *tmp39 *tmp37
    77 label *label32
 
    80 op mul *tmp42 *tmp41 :locateOreAway:distance
    81 op add *tmp43 :findDrillLocationLocal:y *tmp42
    82 op sub *tmp44 @maph 5
-    * set :limit.1:value *tmp43
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp44
    83 op max *tmp46 *tmp43 5
    84 op min *tmp45 *tmp46 *tmp44
    85 label *label33
    86 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x *tmp38
-    * set :moveTo.2:y *tmp45
-    * set :moveTo.2:radius 5
    87 label *label35
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
+   88 ucontrol within *tmp38 *tmp45 5 *tmp48
    89 jump *label37 notEqual *tmp48 false
-    * op sub *tmp50 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   90 ucontrol approach *tmp38 *tmp45 4.5
    91 label *label36
    92 jump *label35 always
    93 label *label37
 
   121 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   122 set :locateOreAway:lastX :locateOreAway:x
   123 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   124 set *tmp75 .locations
   125 set :visited:i .locationsStart
   126 label *label49
 
   177 label *label59
   178 set :moveTo.3:x :locateOreAway:x
   179 set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :findDrillLocationLocal:oreX
-    * set *tmp99 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  180 set *tmp98 :locateOreAway:x
+  181 set *tmp99 :locateOreAway:y
+  182 set :moveTo.4:x :locateOreAway:x
+  183 set :moveTo.4:y :locateOreAway:y
   184 label *label62
-    * ucontrol within *tmp98 *tmp99 6 *tmp100
+  185 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp100
   186 jump *label64 notEqual *tmp100 false
-    * op sub *tmp102 6 0.5
-    * ucontrol approach *tmp98 *tmp99 5.5
+  187 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   188 label *label63
   189 jump *label62 always
   190 label *label64
 
   226 label *label73
   227 label *label74
   228 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   229 op add .count .count 1
-    * set *tmp127 .count
   230 sensor *tmp129 :findDrillLocationLocal:item @id
   231 write *tmp129 bank1 .count
   232 op add .count .count 1
 
   269 jump *label65 always
   270 label *label67
   271 jump *label84 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   272 op add .count .count 1
-    * set *tmp151 .count
   273 sensor *tmp153 :findDrillLocationLocal:item @id
   274 write *tmp153 bank1 .count
   275 op add .count .count 1
 
   312 op shr :shiftMask:mask :shiftMask:mask *tmp174
   313 label *label91
   314 jump *label92 equal :shiftMask:shiftX 0
-    * op abs *tmp177 :shiftMask:shiftX
   315 op shr :shiftMask:keep 0b1111111 *tmp161
   316 jump *label94 lessThanEq :shiftMask:shiftX 0
   317 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   332 return :shiftMask*retaddr
   333 end
   334 label *label10
-    * op add *tmp184 :excludeArea:areaWidth 7
   335 op add *tmp185 :excludeArea:areaWidth 8
   336 op idiv *tmp186 *tmp185 2
   337 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   338 op abs *tmp188 *tmp187
   339 op sub :excludeArea:overlapX *tmp186 *tmp188
-    * op add *tmp190 :excludeArea:areaHeight 7
   340 op add *tmp191 :excludeArea:areaHeight 8
   341 op idiv *tmp192 *tmp191 2
   342 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
 
   348 jump *label97 equal *tmp198 false
   349 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
   350 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
-    * set :createMatrixOfSize:width :excludeArea:blockSizeX
-    * set :createMatrixOfSize:height :excludeArea:blockSizeY
   351 op shl *tmp203 1 :excludeArea:blockSizeX
   352 op sub :createMatrixOfSize:row *tmp203 1
   353 set :createMatrixOfSize:matrix :createMatrixOfSize:row
 
   367 set *tmp202 :createMatrixOfSize:matrix
   368 jump *label99 always
   369 label *label99
-    * set :excludeArea:blocked :createMatrixOfSize:matrix
   370 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   371 op sub *tmp210 7 :excludeArea:blockSizeX
   372 op mul :excludeArea:shiftX *tmp209 *tmp210
   373 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   374 op sub *tmp213 7 :excludeArea:blockSizeY
   375 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask *tmp202
+  376 set :shiftMask:mask :createMatrixOfSize:matrix
   377 set :shiftMask:shiftX :excludeArea:shiftX
   378 set :shiftMask:shiftY :excludeArea:shiftY
   379 setaddr :shiftMask*retaddr *label105 (h:*label105)
   380 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   381 label *label105
-    * set :excludeArea:shifted :shiftMask*retval
   382 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   383 jump *label96 always
   384 jump *label98 always
 
   386 set :excludeArea*retval :excludeArea:mask
   387 jump *label96 always
   388 label *label98
-    * set :excludeArea*retval null
   389 label *label96
   390 return :excludeArea*retaddr
   391 end
 
   439 setaddr :findPossiblePlacement*retaddr *label120 (h:*label120)
   440 call *label11 *invalid :findPossiblePlacement*retval (m:*label120) (h:*label120)
   441 label *label120
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   442 jump *label121 lessThan :findPossiblePlacement*retval 0
   443 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   444 set :tryPlaceGenerator*retval false
 
   449 op add .water2X *tmp236 :findPossiblePlacement:x
   450 op add *tmp238 :tryPlaceGenerator:centerY 0.5
   451 op add .water2Y *tmp238 :findPossiblePlacement:y
-    * op add *tmp240 :tryPlaceGenerator:centerX 0.5
   452 op add .generatorX *tmp236 :findPossiblePlacement:x
   453 op add *tmp242 :tryPlaceGenerator:centerY 2.5
   454 op add .generatorY *tmp242 :findPossiblePlacement:y
 
   463 setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
   464 call *label11 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
   465 label *label125
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   466 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   467 set :tryPlaceGenerator*retval false
   468 jump *label119 always
 
   474 op add .water2Y *tmp250 :findPossiblePlacement:y
   475 op add *tmp252 :tryPlaceGenerator:centerX 2.5
   476 op add .generatorX *tmp252 :findPossiblePlacement:x
-    * op add *tmp254 :tryPlaceGenerator:centerY 0.5
   477 op add .generatorY *tmp250 :findPossiblePlacement:y
   478 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   479 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
 
   486 setaddr :findPossiblePlacement*retaddr *label128 (h:*label128)
   487 call *label11 *invalid :findPossiblePlacement*retval (m:*label128) (h:*label128)
   488 label *label128
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   489 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   490 set :tryPlaceGenerator*retval false
   491 jump *label119 always
 
   502 setaddr :findPossiblePlacement*retaddr *label131 (h:*label131)
   503 call *label11 *invalid :findPossiblePlacement*retval (m:*label131) (h:*label131)
   504 label *label131
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   505 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   506 set :tryPlaceGenerator*retval false
   507 jump *label119 always
 
   538 setaddr :findPossiblePlacement*retaddr *label136 (h:*label136)
   539 call *label11 *invalid :findPossiblePlacement*retval (m:*label136) (h:*label136)
   540 label *label136
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   541 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   542 set :tryPlaceGenerator*retval false
   543 jump *label119 always
 
   545 label *label138
   546 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   547 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp294 1 :findPossiblePlacement*retval
   548 label *label134
   549 label *label135
   550 set :tryPlaceGenerator*retval true
 
   602 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   603 call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   604 label *label150
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   605 op shl *tmp311 :createAdjacentMask:row1 1
   606 op or *tmp312 :createAdjacentMask:row2 *tmp311
   607 op shr *tmp313 :createAdjacentMask:row1 1
 
   618 label *label149
   619 op shr *tmp304 :createAdjacentMask:result 1
   620 label *label144
-    * set :createCombinedMask:adjacentMask *tmp304
   621 label *label151
   622 wait 1e-15
   623 read *tmp320 processor4 ":createTerrainMask*finished"
 
   649 set .water1X -1
   650 set :moveTo.5:x .drillX
   651 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   652 label *label155
   653 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   654 jump *label157 notEqual *tmp323 false
-    * op sub *tmp325 1 0.5
   655 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   656 label *label156
   657 jump *label155 always
 
   662 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
   663 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   664 label *label158
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   665 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   666 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   667 set :layoutThoriumDrillAtLocation:mask2x2 387
 
   672 setaddr :findPossiblePlacement*retaddr *label159 (h:*label159)
   673 call *label11 *invalid :findPossiblePlacement*retval (m:*label159) (h:*label159)
   674 label *label159
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   675 jump *label160 lessThan :findPossiblePlacement*retval 0
   676 op add *tmp332 .drillX 0.5
   677 op add .water1X *tmp332 :findPossiblePlacement:x
 
   679 op add .water1Y *tmp334 :findPossiblePlacement:y
   680 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   681 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   682 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   683 label *label160
   684 label *label161
 
   689 setaddr :findPossiblePlacement*retaddr *label162 (h:*label162)
   690 call *label11 *invalid :findPossiblePlacement*retval (m:*label162) (h:*label162)
   691 label *label162
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   692 jump *label163 lessThan :findPossiblePlacement*retval 0
   693 op add *tmp341 .drillX 0.5
   694 op add .containerX *tmp341 :findPossiblePlacement:x
 
   706 setaddr :findPossiblePlacement*retaddr *label165 (h:*label165)
   707 call *label11 *invalid :findPossiblePlacement*retval (m:*label165) (h:*label165)
   708 label *label165
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   709 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   710 set :layoutThoriumDrillAtLocation*retval false
   711 jump *label153 always
 
   763 setaddr :shiftMask*retaddr *label179 (h:*label179)
   764 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   765 label *label179
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   766 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   767 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   768 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-15 instructions):
 
    30 set :findDrillLocationLocal:distanceLimit *tmp15
    31 set .angle 0
    32 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp16 :findDrillLocationLocal:x
-    * set *tmp17 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    33 label *label22
-    * ucontrol within .coreX .coreY 6 *tmp18
+   34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    35 jump *label24 notEqual *tmp18 false
-    * ucontrol approach .coreX .coreY 5.5
+   36 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    37 label *label23
    38 jump *label22 always
    39 label *label24
 
    69 op max *tmp39 *tmp36 5
    70 op min *tmp38 *tmp39 *tmp37
    71 label *label32
-    * set :locateOreAway:lx *tmp38
    72 op cos *tmp41 :locateOreAway:a
    73 op mul *tmp42 *tmp41 :locateOreAway:distance
    74 op add *tmp43 :findDrillLocationLocal:y *tmp42
 
    76 op max *tmp46 *tmp43 5
    77 op min *tmp45 *tmp46 *tmp44
    78 label *label33
-    * set :locateOreAway:ly *tmp45
    79 label *label35
    80 ucontrol within *tmp38 *tmp45 5 *tmp48
    81 jump *label37 notEqual *tmp48 false
 
   167 op add .mapSpots .mapSpots 1
   168 label *label58
   169 label *label59
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :locateOreAway:x
-    * set *tmp99 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   170 label *label62
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp100
+  171 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   172 jump *label64 notEqual *tmp100 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  173 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   174 label *label63
   175 jump *label62 always
   176 label *label64
 
   350 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   351 jump *label100 always
   352 label *label102
-    * set *tmp202 :createMatrixOfSize:matrix
   353 jump *label99 always
   354 label *label99
   355 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    59 set :locateOreAway:lastY -1
    60 op max .angle .angle @pi
    61 op mul .mapProgress .angle .angle
+   62 op sub *tmp37 @mapw 5
+   63 op sub *tmp44 @maph 5
    64 label *label29
    65 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    66 op div :locateOreAway:a .angle @degToRad
    67 op sin *tmp34 :locateOreAway:a
    68 op mul *tmp35 *tmp34 :locateOreAway:distance
    69 op add *tmp36 :findDrillLocationLocal:x *tmp35
-    * op sub *tmp37 @mapw 5
    70 op max *tmp39 *tmp36 5
    71 op min *tmp38 *tmp39 *tmp37
    72 label *label32
    73 op cos *tmp41 :locateOreAway:a
    74 op mul *tmp42 *tmp41 :locateOreAway:distance
    75 op add *tmp43 :findDrillLocationLocal:y *tmp42
-    * op sub *tmp44 @maph 5
    76 op max *tmp46 *tmp43 5
    77 op min *tmp45 *tmp46 *tmp44
    78 label *label33

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    63 op sub *tmp44 @maph 5
    64 label *label29
    65 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   66 label *label195
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp34 :locateOreAway:a
    69 op mul *tmp35 *tmp34 :locateOreAway:distance
 
   118 set :visited:i .locationsStart
   119 label *label49
   120 jump *label51 greaterThanEq :visited:i *tmp75
+  121 label *label196
   122 op mul :visited:index 4 :visited:i
   123 op add *tmp78 :visited:index 2
   124 read :visited:lx bank1 *tmp78
 
   134 label *label53
   135 label *label50
   136 op add :visited:i :visited:i 1
-    * jump *label49 always
+  137 jump *label196 lessThan :visited:i *tmp75
   138 label *label51
   139 set *tmp74 false
   140 jump *label48 always
 
   153 label *label44
   154 label *label45
   155 label *label30
-    * jump *label29 always
+  156 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   157 label *label31
   158 set *tmp28 false
   159 jump *label28 always
 
   341 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   342 set :createMatrixOfSize:i 1
   343 label *label100
-    * jump *label102 greaterThanEq :createMatrixOfSize:i 7
+  344 label *label197
   345 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   346 jump *label102 always
   347 label *label103
 
   350 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   351 label *label101
   352 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label100 always
+  353 jump *label197 lessThan :createMatrixOfSize:i 7
   354 label *label102
   355 jump *label99 always
   356 label *label99
 
   380 set :findPossiblePlacement:y -3
   381 label *label107
   382 jump *label109 greaterThan :findPossiblePlacement:y 3
+  383 label *label198
   384 op add *tmp216 :findPossiblePlacement:y 3
   385 op mul *tmp217 7 *tmp216
   386 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   387 set :findPossiblePlacement:x -3
   388 label *label110
   389 jump *label112 greaterThan :findPossiblePlacement:x 3
+  390 label *label199
   391 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   392 jump *label113 notEqual *tmp219 0
   393 op mul *tmp222 :findPossiblePlacement:y 7
 
   404 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   405 label *label111
   406 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label110 always
+  407 jump *label199 lessThanEq :findPossiblePlacement:x 3
   408 label *label112
   409 op sub *tmp228 3 :findPossiblePlacement:height
   410 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
 
   413 label *label118
   414 label *label108
   415 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label107 always
+  416 jump *label198 lessThanEq :findPossiblePlacement:y 3
   417 label *label109
   418 set :findPossiblePlacement*retval -1
   419 jump *label106 always
 
   545 set :createBlockMaskRow:result 0
   546 set :createBlockMaskRow:c 4
   547 label *label140
-    * jump *label142 lessThan :createBlockMaskRow:c -4
+  548 label *label200
   549 op shl *tmp295 :createBlockMaskRow:result 1
   550 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   551 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   552 op or :createBlockMaskRow:result *tmp295 *tmp297
   553 label *label141
   554 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label140 always
+  555 jump *label200 greaterThanEq :createBlockMaskRow:c -4
   556 label *label142
   557 set :createBlockMaskRow*retval :createBlockMaskRow:result
   558 jump *label139 always
 
   584 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   585 set :createAdjacentMask:r 2
   586 label *label147
-    * jump *label149 lessThan :createAdjacentMask:r -4
+  587 label *label201
   588 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   589 set :createBlockMaskRow:x :createAdjacentMask:x
   590 set :createBlockMaskRow:y *tmp309
 
   603 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   604 label *label148
   605 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label147 always
+  606 jump *label201 greaterThanEq :createAdjacentMask:r -4
   607 label *label149
   608 op shr *tmp304 :createAdjacentMask:result 1
   609 label *label144

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   209 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   210 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   211 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
-    * set .mapSpots :findDrillLocationLocal:score
-    * label *label73
-    * label *label74
+  212 select .mapSpots lessThan :findDrillLocationLocal:limit 1000 :findDrillLocationLocal:score .mapSpots
   213 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   214 op add .count .count 1
   215 sensor *tmp129 :findDrillLocationLocal:item @id

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    80 label *label35
    81 ucontrol within *tmp38 *tmp45 5 *tmp48
    82 jump *label37 notEqual *tmp48 false
+   83 label *label202
    84 ucontrol approach *tmp38 *tmp45 4.5
    85 label *label36
-    * jump *label35 always
+   86 ucontrol within *tmp38 *tmp45 5 *tmp48
+   87 jump *label202 equal *tmp48 false
    88 label *label37
    89 label *label34
    90 op div *tmp51 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   119 set *tmp75 .locations
   120 set :visited:i .locationsStart
   121 label *label49
-    * jump *label51 greaterThanEq :visited:i *tmp75
+  122 jump *label51 greaterThanEq .locationsStart *tmp75
   123 label *label196
   124 op mul :visited:index 4 :visited:i
   125 op add *tmp78 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:471:5 (+39 instructions):
 
   542 end
   543 label *label13
   544 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label140
-    * label *label200
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label141
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label200 greaterThanEq :createBlockMaskRow:c -4
-    * label *label142
+  545 set :createBlockMaskRow:c 4
+  546 label *label203
+  547 label *label204
+  548 op shl *tmp295 :createBlockMaskRow:result 1
+  549 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  550 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  551 op or :createBlockMaskRow:result *tmp295 *tmp297
+  552 label *label205
+  553 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  554 label *label206
+  555 op shl *tmp295 :createBlockMaskRow:result 1
+  556 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  557 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  558 op or :createBlockMaskRow:result *tmp295 *tmp297
+  559 label *label207
+  560 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  561 label *label208
+  562 op shl *tmp295 :createBlockMaskRow:result 1
+  563 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  564 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  565 op or :createBlockMaskRow:result *tmp295 *tmp297
+  566 label *label209
+  567 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  568 label *label210
+  569 op shl *tmp295 :createBlockMaskRow:result 1
+  570 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  571 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  572 op or :createBlockMaskRow:result *tmp295 *tmp297
+  573 label *label211
+  574 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  575 label *label212
+  576 op shl *tmp295 :createBlockMaskRow:result 1
+  577 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  579 op or :createBlockMaskRow:result *tmp295 *tmp297
+  580 label *label213
+  581 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  582 label *label214
+  583 op shl *tmp295 :createBlockMaskRow:result 1
+  584 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  585 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  586 op or :createBlockMaskRow:result *tmp295 *tmp297
+  587 label *label215
+  588 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  589 label *label216
+  590 op shl *tmp295 :createBlockMaskRow:result 1
+  591 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  592 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  593 op or :createBlockMaskRow:result *tmp295 *tmp297
+  594 label *label217
+  595 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  596 label *label218
+  597 op shl *tmp295 :createBlockMaskRow:result 1
+  598 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  599 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  600 op or :createBlockMaskRow:result *tmp295 *tmp297
+  601 label *label219
+  602 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  603 label *label220
+  604 op shl *tmp295 :createBlockMaskRow:result 1
+  605 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  606 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  607 op or :createBlockMaskRow:result *tmp295 *tmp297
+  608 label *label221
+  609 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  610 label *label142
   611 set :createBlockMaskRow*retval :createBlockMaskRow:result
   612 jump *label139 always
   613 label *label139

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   545 set :createBlockMaskRow:c 4
   546 label *label203
   547 label *label204
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  548 op shl *tmp295 0 1
+  549 op add *tmp296 :createBlockMaskRow:x 4
   550 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  551 op or :createBlockMaskRow:result 0 *tmp297
   552 label *label205
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  553 op sub :createBlockMaskRow:c 4 1
   554 label *label206
   555 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  556 op add *tmp296 :createBlockMaskRow:x 3
   557 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   558 op or :createBlockMaskRow:result *tmp295 *tmp297
   559 label *label207
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  560 op sub :createBlockMaskRow:c 3 1
   561 label *label208
   562 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  563 op add *tmp296 :createBlockMaskRow:x 2
   564 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   565 op or :createBlockMaskRow:result *tmp295 *tmp297
   566 label *label209
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  567 op sub :createBlockMaskRow:c 2 1
   568 label *label210
   569 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  570 op add *tmp296 :createBlockMaskRow:x 1
   571 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   572 op or :createBlockMaskRow:result *tmp295 *tmp297
   573 label *label211
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  574 op sub :createBlockMaskRow:c 1 1
   575 label *label212
   576 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  577 op add *tmp296 :createBlockMaskRow:x 0
   578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
   580 label *label213
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  581 op sub :createBlockMaskRow:c 0 1
   582 label *label214
   583 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  584 op add *tmp296 :createBlockMaskRow:x -1
   585 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   586 op or :createBlockMaskRow:result *tmp295 *tmp297
   587 label *label215
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  588 op sub :createBlockMaskRow:c -1 1
   589 label *label216
   590 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  591 op add *tmp296 :createBlockMaskRow:x -2
   592 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   593 op or :createBlockMaskRow:result *tmp295 *tmp297
   594 label *label217
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  595 op sub :createBlockMaskRow:c -2 1
   596 label *label218
   597 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  598 op add *tmp296 :createBlockMaskRow:x -3
   599 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   600 op or :createBlockMaskRow:result *tmp295 *tmp297
   601 label *label219
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  602 op sub :createBlockMaskRow:c -3 1
   603 label *label220
   604 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  605 op add *tmp296 :createBlockMaskRow:x -4
   606 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   607 op or :createBlockMaskRow:result *tmp295 *tmp297
   608 label *label221
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  609 op sub :createBlockMaskRow:c -4 1
   610 label *label142
   611 set :createBlockMaskRow*retval :createBlockMaskRow:result
   612 jump *label139 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   541 return :tryPlaceGenerator*retaddr
   542 end
   543 label *label13
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   544 label *label203
   545 label *label204
-    * op shl *tmp295 0 1
   546 op add *tmp296 :createBlockMaskRow:x 4
   547 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   548 op or :createBlockMaskRow:result 0 *tmp297
   549 label *label205
-    * op sub :createBlockMaskRow:c 4 1
   550 label *label206
   551 op shl *tmp295 :createBlockMaskRow:result 1
   552 op add *tmp296 :createBlockMaskRow:x 3
   553 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   554 op or :createBlockMaskRow:result *tmp295 *tmp297
   555 label *label207
-    * op sub :createBlockMaskRow:c 3 1
   556 label *label208
   557 op shl *tmp295 :createBlockMaskRow:result 1
   558 op add *tmp296 :createBlockMaskRow:x 2
   559 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   560 op or :createBlockMaskRow:result *tmp295 *tmp297
   561 label *label209
-    * op sub :createBlockMaskRow:c 2 1
   562 label *label210
   563 op shl *tmp295 :createBlockMaskRow:result 1
   564 op add *tmp296 :createBlockMaskRow:x 1
   565 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   566 op or :createBlockMaskRow:result *tmp295 *tmp297
   567 label *label211
-    * op sub :createBlockMaskRow:c 1 1
   568 label *label212
   569 op shl *tmp295 :createBlockMaskRow:result 1
   570 op add *tmp296 :createBlockMaskRow:x 0
   571 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   572 op or :createBlockMaskRow:result *tmp295 *tmp297
   573 label *label213
-    * op sub :createBlockMaskRow:c 0 1
   574 label *label214
   575 op shl *tmp295 :createBlockMaskRow:result 1
   576 op add *tmp296 :createBlockMaskRow:x -1
   577 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   578 op or :createBlockMaskRow:result *tmp295 *tmp297
   579 label *label215
-    * op sub :createBlockMaskRow:c -1 1
   580 label *label216
   581 op shl *tmp295 :createBlockMaskRow:result 1
   582 op add *tmp296 :createBlockMaskRow:x -2
   583 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   584 op or :createBlockMaskRow:result *tmp295 *tmp297
   585 label *label217
-    * op sub :createBlockMaskRow:c -2 1
   586 label *label218
   587 op shl *tmp295 :createBlockMaskRow:result 1
   588 op add *tmp296 :createBlockMaskRow:x -3
   589 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   590 op or :createBlockMaskRow:result *tmp295 *tmp297
   591 label *label219
-    * op sub :createBlockMaskRow:c -3 1
   592 label *label220
   593 op shl *tmp295 :createBlockMaskRow:result 1
   594 op add *tmp296 :createBlockMaskRow:x -4
   595 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   596 op or :createBlockMaskRow:result *tmp295 *tmp297
   597 label *label221
-    * op sub :createBlockMaskRow:c -4 1
   598 label *label142
   599 set :createBlockMaskRow*retval :createBlockMaskRow:result
   600 jump *label139 always

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   174 label *label62
   175 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   176 jump *label64 notEqual *tmp100 false
+  177 label *label222
   178 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   179 label *label63
-    * jump *label62 always
+  180 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
+  181 jump *label222 equal *tmp100 false
   182 label *label64
   183 label *label61
   184 label *label60

Modifications by Unroll loop at OreLocator.mnd:350:5 (+24 instructions):
 
   340 op shl *tmp203 1 :excludeArea:blockSizeX
   341 op sub :createMatrixOfSize:row *tmp203 1
   342 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
-    * label *label100
-    * label *label197
-    * jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
-    * jump *label102 always
-    * label *label103
-    * label *label104
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label101
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label197 lessThan :createMatrixOfSize:i 7
-    * label *label102
+  343 set :createMatrixOfSize:i 1
+  344 label *label223
+  345 label *label224
+  346 jump *label225 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  347 jump *label102 always
+  348 label *label225
+  349 label *label226
+  350 op shl *tmp207 :createMatrixOfSize:matrix 7
+  351 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  352 label *label227
+  353 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  354 label *label228
+  355 jump *label229 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  356 jump *label102 always
+  357 label *label229
+  358 label *label230
+  359 op shl *tmp207 :createMatrixOfSize:matrix 7
+  360 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  361 label *label231
+  362 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  363 label *label232
+  364 jump *label233 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  365 jump *label102 always
+  366 label *label233
+  367 label *label234
+  368 op shl *tmp207 :createMatrixOfSize:matrix 7
+  369 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  370 label *label235
+  371 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  372 label *label236
+  373 jump *label237 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  374 jump *label102 always
+  375 label *label237
+  376 label *label238
+  377 op shl *tmp207 :createMatrixOfSize:matrix 7
+  378 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  379 label *label239
+  380 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  381 label *label240
+  382 jump *label241 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  383 jump *label102 always
+  384 label *label241
+  385 label *label242
+  386 op shl *tmp207 :createMatrixOfSize:matrix 7
+  387 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  388 label *label243
+  389 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  390 label *label244
+  391 jump *label245 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  392 jump *label102 always
+  393 label *label245
+  394 label *label246
+  395 op shl *tmp207 :createMatrixOfSize:matrix 7
+  396 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  397 label *label247
+  398 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  399 label *label102
   400 jump *label99 always
   401 label *label99
   402 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   343 set :createMatrixOfSize:i 1
   344 label *label223
   345 label *label224
-    * jump *label225 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  346 jump *label225 lessThan 1 :excludeArea:blockSizeY
   347 jump *label102 always
   348 label *label225
   349 label *label226
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
+  350 op shl *tmp207 :createMatrixOfSize:row 7
   351 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   352 label *label227
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  353 op add :createMatrixOfSize:i 1 1
   354 label *label228
-    * jump *label229 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  355 jump *label229 lessThan 2 :excludeArea:blockSizeY
   356 jump *label102 always
   357 label *label229
   358 label *label230
   359 op shl *tmp207 :createMatrixOfSize:matrix 7
   360 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   361 label *label231
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  362 op add :createMatrixOfSize:i 2 1
   363 label *label232
-    * jump *label233 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  364 jump *label233 lessThan 3 :excludeArea:blockSizeY
   365 jump *label102 always
   366 label *label233
   367 label *label234
   368 op shl *tmp207 :createMatrixOfSize:matrix 7
   369 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   370 label *label235
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  371 op add :createMatrixOfSize:i 3 1
   372 label *label236
-    * jump *label237 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  373 jump *label237 lessThan 4 :excludeArea:blockSizeY
   374 jump *label102 always
   375 label *label237
   376 label *label238
   377 op shl *tmp207 :createMatrixOfSize:matrix 7
   378 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   379 label *label239
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  380 op add :createMatrixOfSize:i 4 1
   381 label *label240
-    * jump *label241 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  382 jump *label241 lessThan 5 :excludeArea:blockSizeY
   383 jump *label102 always
   384 label *label241
   385 label *label242
   386 op shl *tmp207 :createMatrixOfSize:matrix 7
   387 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   388 label *label243
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  389 op add :createMatrixOfSize:i 5 1
   390 label *label244
-    * jump *label245 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  391 jump *label245 lessThan 6 :excludeArea:blockSizeY
   392 jump *label102 always
   393 label *label245
   394 label *label246
   395 op shl *tmp207 :createMatrixOfSize:matrix 7
   396 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   397 label *label247
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  398 op add :createMatrixOfSize:i 6 1
   399 label *label102
   400 jump *label99 always
   401 label *label99

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   340 op shl *tmp203 1 :excludeArea:blockSizeX
   341 op sub :createMatrixOfSize:row *tmp203 1
   342 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
   343 label *label223
   344 label *label224
   345 jump *label225 lessThan 1 :excludeArea:blockSizeY
 
   349 op shl *tmp207 :createMatrixOfSize:row 7
   350 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   351 label *label227
-    * op add :createMatrixOfSize:i 1 1
   352 label *label228
   353 jump *label229 lessThan 2 :excludeArea:blockSizeY
   354 jump *label102 always
 
   357 op shl *tmp207 :createMatrixOfSize:matrix 7
   358 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   359 label *label231
-    * op add :createMatrixOfSize:i 2 1
   360 label *label232
   361 jump *label233 lessThan 3 :excludeArea:blockSizeY
   362 jump *label102 always
 
   365 op shl *tmp207 :createMatrixOfSize:matrix 7
   366 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   367 label *label235
-    * op add :createMatrixOfSize:i 3 1
   368 label *label236
   369 jump *label237 lessThan 4 :excludeArea:blockSizeY
   370 jump *label102 always
 
   373 op shl *tmp207 :createMatrixOfSize:matrix 7
   374 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   375 label *label239
-    * op add :createMatrixOfSize:i 4 1
   376 label *label240
   377 jump *label241 lessThan 5 :excludeArea:blockSizeY
   378 jump *label102 always
 
   381 op shl *tmp207 :createMatrixOfSize:matrix 7
   382 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   383 label *label243
-    * op add :createMatrixOfSize:i 5 1
   384 label *label244
   385 jump *label245 lessThan 6 :excludeArea:blockSizeY
   386 jump *label102 always
 
   389 op shl *tmp207 :createMatrixOfSize:matrix 7
   390 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   391 label *label247
-    * op add :createMatrixOfSize:i 6 1
   392 label *label102
   393 jump *label99 always
   394 label *label99

Modifications by Unroll loop at OreLocator.mnd:485:5 (+95 instructions):
 
   663 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   664 label *label146
   665 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label147
-    * label *label201
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
-    * label *label150
-    * op shl *tmp311 :createAdjacentMask:row1 1
-    * op or *tmp312 :createAdjacentMask:row2 *tmp311
-    * op shr *tmp313 :createAdjacentMask:row1 1
-    * op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label148
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label201 greaterThanEq :createAdjacentMask:r -4
-    * label *label149
+  666 set :createAdjacentMask:r 2
+  667 label *label248
+  668 label *label249
+  669 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  670 set :createBlockMaskRow:x :createAdjacentMask:x
+  671 set :createBlockMaskRow:y *tmp309
+  672 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
+  673 call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)
+  674 label *label250
+  675 op shl *tmp311 :createAdjacentMask:row1 1
+  676 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  677 op shr *tmp313 :createAdjacentMask:row1 1
+  678 op or *tmp314 *tmp312 *tmp313
+  679 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  680 op shl *tmp316 :createAdjacentMask:result 7
+  681 op and *tmp317 :createAdjacentMask:mask 0xFE
+  682 op or :createAdjacentMask:result *tmp316 *tmp317
+  683 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  684 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  685 label *label251
+  686 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  687 label *label252
+  688 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  689 set :createBlockMaskRow:x :createAdjacentMask:x
+  690 set :createBlockMaskRow:y *tmp309
+  691 setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
+  692 call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)
+  693 label *label253
+  694 op shl *tmp311 :createAdjacentMask:row1 1
+  695 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  696 op shr *tmp313 :createAdjacentMask:row1 1
+  697 op or *tmp314 *tmp312 *tmp313
+  698 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  699 op shl *tmp316 :createAdjacentMask:result 7
+  700 op and *tmp317 :createAdjacentMask:mask 0xFE
+  701 op or :createAdjacentMask:result *tmp316 *tmp317
+  702 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  703 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  704 label *label254
+  705 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  706 label *label255
+  707 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  708 set :createBlockMaskRow:x :createAdjacentMask:x
+  709 set :createBlockMaskRow:y *tmp309
+  710 setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
+  711 call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)
+  712 label *label256
+  713 op shl *tmp311 :createAdjacentMask:row1 1
+  714 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  715 op shr *tmp313 :createAdjacentMask:row1 1
+  716 op or *tmp314 *tmp312 *tmp313
+  717 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  718 op shl *tmp316 :createAdjacentMask:result 7
+  719 op and *tmp317 :createAdjacentMask:mask 0xFE
+  720 op or :createAdjacentMask:result *tmp316 *tmp317
+  721 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  722 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  723 label *label257
+  724 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  725 label *label258
+  726 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  727 set :createBlockMaskRow:x :createAdjacentMask:x
+  728 set :createBlockMaskRow:y *tmp309
+  729 setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
+  730 call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)
+  731 label *label259
+  732 op shl *tmp311 :createAdjacentMask:row1 1
+  733 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  734 op shr *tmp313 :createAdjacentMask:row1 1
+  735 op or *tmp314 *tmp312 *tmp313
+  736 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  737 op shl *tmp316 :createAdjacentMask:result 7
+  738 op and *tmp317 :createAdjacentMask:mask 0xFE
+  739 op or :createAdjacentMask:result *tmp316 *tmp317
+  740 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  741 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  742 label *label260
+  743 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  744 label *label261
+  745 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  746 set :createBlockMaskRow:x :createAdjacentMask:x
+  747 set :createBlockMaskRow:y *tmp309
+  748 setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
+  749 call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)
+  750 label *label262
+  751 op shl *tmp311 :createAdjacentMask:row1 1
+  752 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  753 op shr *tmp313 :createAdjacentMask:row1 1
+  754 op or *tmp314 *tmp312 *tmp313
+  755 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  756 op shl *tmp316 :createAdjacentMask:result 7
+  757 op and *tmp317 :createAdjacentMask:mask 0xFE
+  758 op or :createAdjacentMask:result *tmp316 *tmp317
+  759 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  760 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  761 label *label263
+  762 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  763 label *label264
+  764 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  765 set :createBlockMaskRow:x :createAdjacentMask:x
+  766 set :createBlockMaskRow:y *tmp309
+  767 setaddr :createBlockMaskRow*retaddr *label265 (h:*label265)
+  768 call *label13 *invalid :createBlockMaskRow*retval (m:*label265) (h:*label265)
+  769 label *label265
+  770 op shl *tmp311 :createAdjacentMask:row1 1
+  771 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  772 op shr *tmp313 :createAdjacentMask:row1 1
+  773 op or *tmp314 *tmp312 *tmp313
+  774 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  775 op shl *tmp316 :createAdjacentMask:result 7
+  776 op and *tmp317 :createAdjacentMask:mask 0xFE
+  777 op or :createAdjacentMask:result *tmp316 *tmp317
+  778 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  779 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  780 label *label266
+  781 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  782 label *label267
+  783 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  784 set :createBlockMaskRow:x :createAdjacentMask:x
+  785 set :createBlockMaskRow:y *tmp309
+  786 setaddr :createBlockMaskRow*retaddr *label268 (h:*label268)
+  787 call *label13 *invalid :createBlockMaskRow*retval (m:*label268) (h:*label268)
+  788 label *label268
+  789 op shl *tmp311 :createAdjacentMask:row1 1
+  790 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  791 op shr *tmp313 :createAdjacentMask:row1 1
+  792 op or *tmp314 *tmp312 *tmp313
+  793 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  794 op shl *tmp316 :createAdjacentMask:result 7
+  795 op and *tmp317 :createAdjacentMask:mask 0xFE
+  796 op or :createAdjacentMask:result *tmp316 *tmp317
+  797 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  798 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  799 label *label269
+  800 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  801 label *label149
   802 op shr *tmp304 :createAdjacentMask:result 1
   803 label *label144
   804 label *label151

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   666 set :createAdjacentMask:r 2
   667 label *label248
   668 label *label249
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  669 op add *tmp309 :createAdjacentMask:y 2
   670 set :createBlockMaskRow:x :createAdjacentMask:x
   671 set :createBlockMaskRow:y *tmp309
   672 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    33 label *label22
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    35 jump *label24 notEqual *tmp18 false
+   36 label *label270
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label23
-    * jump *label22 always
+   39 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
+   40 jump *label270 equal *tmp18 false
    41 label *label24
    42 label *label21
    43 label *label20

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   837 label *label155
   838 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   839 jump *label157 notEqual *tmp323 false
+  840 label *label271
   841 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   842 label *label156
-    * jump *label155 always
+  843 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
+  844 jump *label271 equal *tmp323 false
   845 label *label157
   846 label *label154
   847 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:273:1 (+24 instructions):
 
   280 label *label19
   281 return :findDrillLocationLocal*retaddr
   282 end
-    * label *label9
-    * op abs *tmp161 :shiftMask:shiftX
-    * op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
-    * op greaterThan *tmp164 *tmp163 6
-    * op or *tmp165 *tmp162 *tmp164
-    * jump *label88 equal *tmp165 false
-    * set :shiftMask*retval 0
-    * jump *label87 always
-    * label *label88
-    * label *label89
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * jump *label90 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp172 :shiftMask:shift
-    * jump *label91 always
-    * label *label90
-    * op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * label *label91
-    * jump *label92 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label94 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label94
-    * label *label95
-    * op shl *tmp181 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp181
-    * op shl *tmp182 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp182
-    * op shl *tmp183 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp183
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label92
-    * label *label93
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label87 always
-    * label *label87
-    * return :shiftMask*retaddr
-    * end
   283 label *label10
   284 op add *tmp185 :excludeArea:areaWidth 8
   285 op idiv *tmp186 *tmp185 2
 
   361 set :shiftMask:mask :createMatrixOfSize:matrix
   362 set :shiftMask:shiftX :excludeArea:shiftX
   363 set :shiftMask:shiftY :excludeArea:shiftY
-    * setaddr :shiftMask*retaddr *label105 (h:*label105)
-    * call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
-    * label *label105
+  364 label *label272
+  365 op abs *tmp161 :shiftMask:shiftX
+  366 op greaterThan *tmp162 *tmp161 6
+  367 op abs *tmp163 :shiftMask:shiftY
+  368 op greaterThan *tmp164 *tmp163 6
+  369 op or *tmp165 *tmp162 *tmp164
+  370 jump *label273 equal *tmp165 false
+  371 set :shiftMask*retval 0
+  372 jump *label281 always
+  373 label *label273
+  374 label *label274
+  375 op mul *tmp167 7 :shiftMask:shiftY
+  376 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  377 jump *label275 lessThanEq :shiftMask:shift 0
+  378 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  379 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  380 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  381 jump *label276 always
+  382 label *label275
+  383 op sub *tmp174 0 :shiftMask:shift
+  384 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  385 label *label276
+  386 jump *label279 equal :shiftMask:shiftX 0
+  387 op shr :shiftMask:keep 0b1111111 *tmp161
+  388 jump *label277 lessThanEq :shiftMask:shiftX 0
+  389 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  390 label *label277
+  391 label *label278
+  392 op shl *tmp181 :shiftMask:keep 7
+  393 op or :shiftMask:keep :shiftMask:keep *tmp181
+  394 op shl *tmp182 :shiftMask:keep 14
+  395 op or :shiftMask:keep :shiftMask:keep *tmp182
+  396 op shl *tmp183 :shiftMask:keep 21
+  397 op or :shiftMask:keep :shiftMask:keep *tmp183
+  398 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  399 label *label279
+  400 label *label280
+  401 set :shiftMask*retval :shiftMask:mask
+  402 jump *label281 always
+  403 label *label281
   404 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   405 jump *label96 always
   406 jump *label98 always
 
   942 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   943 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   944 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label179 (h:*label179)
-    * call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
-    * label *label179
+  945 label *label282
+  946 op abs *tmp161 :shiftMask:shiftX
+  947 op greaterThan *tmp162 *tmp161 6
+  948 op abs *tmp163 :shiftMask:shiftY
+  949 op greaterThan *tmp164 *tmp163 6
+  950 op or *tmp165 *tmp162 *tmp164
+  951 jump *label283 equal *tmp165 false
+  952 set :shiftMask*retval 0
+  953 jump *label291 always
+  954 label *label283
+  955 label *label284
+  956 op mul *tmp167 7 :shiftMask:shiftY
+  957 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  958 jump *label285 lessThanEq :shiftMask:shift 0
+  959 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  960 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  961 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  962 jump *label286 always
+  963 label *label285
+  964 op sub *tmp174 0 :shiftMask:shift
+  965 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  966 label *label286
+  967 jump *label289 equal :shiftMask:shiftX 0
+  968 op shr :shiftMask:keep 0b1111111 *tmp161
+  969 jump *label287 lessThanEq :shiftMask:shiftX 0
+  970 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  971 label *label287
+  972 label *label288
+  973 op shl *tmp181 :shiftMask:keep 7
+  974 op or :shiftMask:keep :shiftMask:keep *tmp181
+  975 op shl *tmp182 :shiftMask:keep 14
+  976 op or :shiftMask:keep :shiftMask:keep *tmp182
+  977 op shl *tmp183 :shiftMask:keep 21
+  978 op or :shiftMask:keep :shiftMask:keep *tmp183
+  979 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  980 label *label289
+  981 label *label290
+  982 set :shiftMask*retval :shiftMask:mask
+  983 jump *label291 always
+  984 label *label291
   985 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   986 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   987 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   362 set :shiftMask:shiftX :excludeArea:shiftX
   363 set :shiftMask:shiftY :excludeArea:shiftY
   364 label *label272
-    * op abs *tmp161 :shiftMask:shiftX
+  365 op abs *tmp161 :excludeArea:shiftX
   366 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  367 op abs *tmp163 :excludeArea:shiftY
   368 op greaterThan *tmp164 *tmp163 6
   369 op or *tmp165 *tmp162 *tmp164
   370 jump *label273 equal *tmp165 false
 
   372 jump *label281 always
   373 label *label273
   374 label *label274
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  375 op mul *tmp167 7 :excludeArea:shiftY
+  376 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   377 jump *label275 lessThanEq :shiftMask:shift 0
   378 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  379 op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMask
   380 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   381 jump *label276 always
   382 label *label275
   383 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  384 op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174
   385 label *label276
-    * jump *label279 equal :shiftMask:shiftX 0
+  386 jump *label279 equal :excludeArea:shiftX 0
   387 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label277 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  388 jump *label277 lessThanEq :excludeArea:shiftX 0
+  389 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   390 label *label277
   391 label *label278
   392 op shl *tmp181 :shiftMask:keep 7
 
   943 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   944 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   945 label *label282
-    * op abs *tmp161 :shiftMask:shiftX
+  946 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   947 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  948 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
   949 op greaterThan *tmp164 *tmp163 6
   950 op or *tmp165 *tmp162 *tmp164
   951 jump *label283 equal *tmp165 false
 
   953 jump *label291 always
   954 label *label283
   955 label *label284
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  956 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
+  957 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
   958 jump *label285 lessThanEq :shiftMask:shift 0
   959 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  960 op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   961 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   962 jump *label286 always
   963 label *label285
   964 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  965 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp174
   966 label *label286
-    * jump *label289 equal :shiftMask:shiftX 0
+  967 jump *label289 equal :layoutThoriumDrillAtLocation:sx 0
   968 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label287 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  969 jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  970 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   971 label *label287
   972 label *label288
   973 op shl *tmp181 :shiftMask:keep 7
 
   982 set :shiftMask*retval :shiftMask:mask
   983 jump *label291 always
   984 label *label291
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  985 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   986 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   987 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   988 set :tryPlaceGenerator:centerX *tmp361

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   358 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   359 op sub *tmp213 7 :excludeArea:blockSizeY
   360 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :createMatrixOfSize:matrix
-    * set :shiftMask:shiftX :excludeArea:shiftX
-    * set :shiftMask:shiftY :excludeArea:shiftY
   361 label *label272
   362 op abs *tmp161 :excludeArea:shiftX
   363 op greaterThan *tmp162 *tmp161 6
 
   935 setaddr :createCombinedMask*retaddr *label178 (h:*label178)
   936 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   937 label *label178
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   938 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   939 label *label282
   940 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   941 op greaterThan *tmp162 *tmp161 6

Modifications by Inline function call at OreLocator.mnd:482:16 (+35 instructions):
 
   646 op add *tmp305 :createCombinedMask:y 4
   647 set :createBlockMaskRow:x :createCombinedMask:x
   648 set :createBlockMaskRow:y *tmp305
-    * setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
-    * label *label145
+  649 label *label292
+  650 label *label293
+  651 label *label294
+  652 op add *tmp296 :createBlockMaskRow:x 4
+  653 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  654 op or :createBlockMaskRow:result 0 *tmp297
+  655 label *label295
+  656 label *label296
+  657 op shl *tmp295 :createBlockMaskRow:result 1
+  658 op add *tmp296 :createBlockMaskRow:x 3
+  659 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  660 op or :createBlockMaskRow:result *tmp295 *tmp297
+  661 label *label297
+  662 label *label298
+  663 op shl *tmp295 :createBlockMaskRow:result 1
+  664 op add *tmp296 :createBlockMaskRow:x 2
+  665 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  666 op or :createBlockMaskRow:result *tmp295 *tmp297
+  667 label *label299
+  668 label *label300
+  669 op shl *tmp295 :createBlockMaskRow:result 1
+  670 op add *tmp296 :createBlockMaskRow:x 1
+  671 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  672 op or :createBlockMaskRow:result *tmp295 *tmp297
+  673 label *label301
+  674 label *label302
+  675 op shl *tmp295 :createBlockMaskRow:result 1
+  676 op add *tmp296 :createBlockMaskRow:x 0
+  677 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  678 op or :createBlockMaskRow:result *tmp295 *tmp297
+  679 label *label303
+  680 label *label304
+  681 op shl *tmp295 :createBlockMaskRow:result 1
+  682 op add *tmp296 :createBlockMaskRow:x -1
+  683 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  684 op or :createBlockMaskRow:result *tmp295 *tmp297
+  685 label *label305
+  686 label *label306
+  687 op shl *tmp295 :createBlockMaskRow:result 1
+  688 op add *tmp296 :createBlockMaskRow:x -2
+  689 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  690 op or :createBlockMaskRow:result *tmp295 *tmp297
+  691 label *label307
+  692 label *label308
+  693 op shl *tmp295 :createBlockMaskRow:result 1
+  694 op add *tmp296 :createBlockMaskRow:x -3
+  695 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  696 op or :createBlockMaskRow:result *tmp295 *tmp297
+  697 label *label309
+  698 label *label310
+  699 op shl *tmp295 :createBlockMaskRow:result 1
+  700 op add *tmp296 :createBlockMaskRow:x -4
+  701 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  702 op or :createBlockMaskRow:result *tmp295 *tmp297
+  703 label *label311
+  704 label *label312
+  705 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  706 jump *label313 always
+  707 label *label313
   708 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   709 op add *tmp307 :createAdjacentMask:y 3
   710 set :createBlockMaskRow:x :createAdjacentMask:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   649 label *label292
   650 label *label293
   651 label *label294
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  652 op add *tmp296 :createCombinedMask:x 4
+  653 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   654 op or :createBlockMaskRow:result 0 *tmp297
   655 label *label295
   656 label *label296
   657 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  658 op add *tmp296 :createCombinedMask:x 3
+  659 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   660 op or :createBlockMaskRow:result *tmp295 *tmp297
   661 label *label297
   662 label *label298
   663 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  664 op add *tmp296 :createCombinedMask:x 2
+  665 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   666 op or :createBlockMaskRow:result *tmp295 *tmp297
   667 label *label299
   668 label *label300
   669 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  670 op add *tmp296 :createCombinedMask:x 1
+  671 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   672 op or :createBlockMaskRow:result *tmp295 *tmp297
   673 label *label301
   674 label *label302
   675 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  676 op add *tmp296 :createCombinedMask:x 0
+  677 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   678 op or :createBlockMaskRow:result *tmp295 *tmp297
   679 label *label303
   680 label *label304
   681 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  682 op add *tmp296 :createCombinedMask:x -1
+  683 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   684 op or :createBlockMaskRow:result *tmp295 *tmp297
   685 label *label305
   686 label *label306
   687 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  688 op add *tmp296 :createCombinedMask:x -2
+  689 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   690 op or :createBlockMaskRow:result *tmp295 *tmp297
   691 label *label307
   692 label *label308
   693 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  694 op add *tmp296 :createCombinedMask:x -3
+  695 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   696 op or :createBlockMaskRow:result *tmp295 *tmp297
   697 label *label309
   698 label *label310
   699 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  700 op add *tmp296 :createCombinedMask:x -4
+  701 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   702 op or :createBlockMaskRow:result *tmp295 *tmp297
   703 label *label311
   704 label *label312
   705 set :createBlockMaskRow*retval :createBlockMaskRow:result
   706 jump *label313 always
   707 label *label313
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp307 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  708 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  709 op add *tmp307 :createCombinedMask:y 3
+  710 set :createBlockMaskRow:x :createCombinedMask:x
   711 set :createBlockMaskRow:y *tmp307
   712 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   713 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   644 set :createAdjacentMask:y :createCombinedMask:y
   645 set :createAdjacentMask:result 0
   646 op add *tmp305 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp305
   647 label *label292
   648 label *label293
   649 label *label294
 
   700 op or :createBlockMaskRow:result *tmp295 *tmp297
   701 label *label311
   702 label *label312
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   703 jump *label313 always
   704 label *label313
   705 set :createAdjacentMask:row2 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:483:16 (+35 instructions):
 
   706 op add *tmp307 :createCombinedMask:y 3
   707 set :createBlockMaskRow:x :createCombinedMask:x
   708 set :createBlockMaskRow:y *tmp307
-    * setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
-    * label *label146
+  709 label *label314
+  710 label *label315
+  711 label *label316
+  712 op add *tmp296 :createBlockMaskRow:x 4
+  713 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  714 op or :createBlockMaskRow:result 0 *tmp297
+  715 label *label317
+  716 label *label318
+  717 op shl *tmp295 :createBlockMaskRow:result 1
+  718 op add *tmp296 :createBlockMaskRow:x 3
+  719 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  720 op or :createBlockMaskRow:result *tmp295 *tmp297
+  721 label *label319
+  722 label *label320
+  723 op shl *tmp295 :createBlockMaskRow:result 1
+  724 op add *tmp296 :createBlockMaskRow:x 2
+  725 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  726 op or :createBlockMaskRow:result *tmp295 *tmp297
+  727 label *label321
+  728 label *label322
+  729 op shl *tmp295 :createBlockMaskRow:result 1
+  730 op add *tmp296 :createBlockMaskRow:x 1
+  731 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  732 op or :createBlockMaskRow:result *tmp295 *tmp297
+  733 label *label323
+  734 label *label324
+  735 op shl *tmp295 :createBlockMaskRow:result 1
+  736 op add *tmp296 :createBlockMaskRow:x 0
+  737 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  738 op or :createBlockMaskRow:result *tmp295 *tmp297
+  739 label *label325
+  740 label *label326
+  741 op shl *tmp295 :createBlockMaskRow:result 1
+  742 op add *tmp296 :createBlockMaskRow:x -1
+  743 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  744 op or :createBlockMaskRow:result *tmp295 *tmp297
+  745 label *label327
+  746 label *label328
+  747 op shl *tmp295 :createBlockMaskRow:result 1
+  748 op add *tmp296 :createBlockMaskRow:x -2
+  749 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  750 op or :createBlockMaskRow:result *tmp295 *tmp297
+  751 label *label329
+  752 label *label330
+  753 op shl *tmp295 :createBlockMaskRow:result 1
+  754 op add *tmp296 :createBlockMaskRow:x -3
+  755 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  756 op or :createBlockMaskRow:result *tmp295 *tmp297
+  757 label *label331
+  758 label *label332
+  759 op shl *tmp295 :createBlockMaskRow:result 1
+  760 op add *tmp296 :createBlockMaskRow:x -4
+  761 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  762 op or :createBlockMaskRow:result *tmp295 *tmp297
+  763 label *label333
+  764 label *label334
+  765 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  766 jump *label335 always
+  767 label *label335
   768 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   769 set :createAdjacentMask:r 2
   770 label *label248

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   709 label *label314
   710 label *label315
   711 label *label316
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  712 op add *tmp296 :createCombinedMask:x 4
+  713 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   714 op or :createBlockMaskRow:result 0 *tmp297
   715 label *label317
   716 label *label318
   717 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  718 op add *tmp296 :createCombinedMask:x 3
+  719 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   720 op or :createBlockMaskRow:result *tmp295 *tmp297
   721 label *label319
   722 label *label320
   723 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  724 op add *tmp296 :createCombinedMask:x 2
+  725 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   726 op or :createBlockMaskRow:result *tmp295 *tmp297
   727 label *label321
   728 label *label322
   729 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  730 op add *tmp296 :createCombinedMask:x 1
+  731 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   732 op or :createBlockMaskRow:result *tmp295 *tmp297
   733 label *label323
   734 label *label324
   735 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  736 op add *tmp296 :createCombinedMask:x 0
+  737 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   738 op or :createBlockMaskRow:result *tmp295 *tmp297
   739 label *label325
   740 label *label326
   741 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  742 op add *tmp296 :createCombinedMask:x -1
+  743 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   744 op or :createBlockMaskRow:result *tmp295 *tmp297
   745 label *label327
   746 label *label328
   747 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  748 op add *tmp296 :createCombinedMask:x -2
+  749 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   750 op or :createBlockMaskRow:result *tmp295 *tmp297
   751 label *label329
   752 label *label330
   753 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  754 op add *tmp296 :createCombinedMask:x -3
+  755 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   756 op or :createBlockMaskRow:result *tmp295 *tmp297
   757 label *label331
   758 label *label332
   759 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  760 op add *tmp296 :createCombinedMask:x -4
+  761 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   762 op or :createBlockMaskRow:result *tmp295 *tmp297
   763 label *label333
   764 label *label334
   765 set :createBlockMaskRow*retval :createBlockMaskRow:result
   766 jump *label335 always
   767 label *label335
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  768 set :createAdjacentMask:row1 :createBlockMaskRow:result
   769 set :createAdjacentMask:r 2
   770 label *label248
   771 label *label249
-    * op add *tmp309 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  772 op add *tmp309 :createCombinedMask:y 2
+  773 set :createBlockMaskRow:x :createCombinedMask:x
   774 set :createBlockMaskRow:y *tmp309
   775 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
   776 call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   704 label *label313
   705 set :createAdjacentMask:row2 :createBlockMaskRow:result
   706 op add *tmp307 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp307
   707 label *label314
   708 label *label315
   709 label *label316
 
   760 op or :createBlockMaskRow:result *tmp295 *tmp297
   761 label *label333
   762 label *label334
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   763 jump *label335 always
   764 label *label335
   765 set :createAdjacentMask:row1 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:486:20 (+35 instructions):
 
   769 op add *tmp309 :createCombinedMask:y 2
   770 set :createBlockMaskRow:x :createCombinedMask:x
   771 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)
-    * label *label250
+  772 label *label336
+  773 label *label337
+  774 label *label338
+  775 op add *tmp296 :createBlockMaskRow:x 4
+  776 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  777 op or :createBlockMaskRow:result 0 *tmp297
+  778 label *label339
+  779 label *label340
+  780 op shl *tmp295 :createBlockMaskRow:result 1
+  781 op add *tmp296 :createBlockMaskRow:x 3
+  782 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  783 op or :createBlockMaskRow:result *tmp295 *tmp297
+  784 label *label341
+  785 label *label342
+  786 op shl *tmp295 :createBlockMaskRow:result 1
+  787 op add *tmp296 :createBlockMaskRow:x 2
+  788 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  789 op or :createBlockMaskRow:result *tmp295 *tmp297
+  790 label *label343
+  791 label *label344
+  792 op shl *tmp295 :createBlockMaskRow:result 1
+  793 op add *tmp296 :createBlockMaskRow:x 1
+  794 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  795 op or :createBlockMaskRow:result *tmp295 *tmp297
+  796 label *label345
+  797 label *label346
+  798 op shl *tmp295 :createBlockMaskRow:result 1
+  799 op add *tmp296 :createBlockMaskRow:x 0
+  800 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  801 op or :createBlockMaskRow:result *tmp295 *tmp297
+  802 label *label347
+  803 label *label348
+  804 op shl *tmp295 :createBlockMaskRow:result 1
+  805 op add *tmp296 :createBlockMaskRow:x -1
+  806 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  807 op or :createBlockMaskRow:result *tmp295 *tmp297
+  808 label *label349
+  809 label *label350
+  810 op shl *tmp295 :createBlockMaskRow:result 1
+  811 op add *tmp296 :createBlockMaskRow:x -2
+  812 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  813 op or :createBlockMaskRow:result *tmp295 *tmp297
+  814 label *label351
+  815 label *label352
+  816 op shl *tmp295 :createBlockMaskRow:result 1
+  817 op add *tmp296 :createBlockMaskRow:x -3
+  818 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  819 op or :createBlockMaskRow:result *tmp295 *tmp297
+  820 label *label353
+  821 label *label354
+  822 op shl *tmp295 :createBlockMaskRow:result 1
+  823 op add *tmp296 :createBlockMaskRow:x -4
+  824 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  825 op or :createBlockMaskRow:result *tmp295 *tmp297
+  826 label *label355
+  827 label *label356
+  828 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  829 jump *label357 always
+  830 label *label357
   831 op shl *tmp311 :createAdjacentMask:row1 1
   832 op or *tmp312 :createAdjacentMask:row2 *tmp311
   833 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   772 label *label336
   773 label *label337
   774 label *label338
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  775 op add *tmp296 :createCombinedMask:x 4
+  776 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   777 op or :createBlockMaskRow:result 0 *tmp297
   778 label *label339
   779 label *label340
   780 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  781 op add *tmp296 :createCombinedMask:x 3
+  782 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   783 op or :createBlockMaskRow:result *tmp295 *tmp297
   784 label *label341
   785 label *label342
   786 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  787 op add *tmp296 :createCombinedMask:x 2
+  788 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   789 op or :createBlockMaskRow:result *tmp295 *tmp297
   790 label *label343
   791 label *label344
   792 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  793 op add *tmp296 :createCombinedMask:x 1
+  794 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   795 op or :createBlockMaskRow:result *tmp295 *tmp297
   796 label *label345
   797 label *label346
   798 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  799 op add *tmp296 :createCombinedMask:x 0
+  800 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   801 op or :createBlockMaskRow:result *tmp295 *tmp297
   802 label *label347
   803 label *label348
   804 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  805 op add *tmp296 :createCombinedMask:x -1
+  806 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   807 op or :createBlockMaskRow:result *tmp295 *tmp297
   808 label *label349
   809 label *label350
   810 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  811 op add *tmp296 :createCombinedMask:x -2
+  812 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   813 op or :createBlockMaskRow:result *tmp295 *tmp297
   814 label *label351
   815 label *label352
   816 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  817 op add *tmp296 :createCombinedMask:x -3
+  818 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   819 op or :createBlockMaskRow:result *tmp295 *tmp297
   820 label *label353
   821 label *label354
   822 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  823 op add *tmp296 :createCombinedMask:x -4
+  824 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   825 op or :createBlockMaskRow:result *tmp295 *tmp297
   826 label *label355
   827 label *label356
 
   832 op or *tmp312 :createAdjacentMask:row2 *tmp311
   833 op shr *tmp313 :createAdjacentMask:row1 1
   834 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
+  835 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
+  836 op shl *tmp316 0 7
   837 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
+  838 op or :createAdjacentMask:result 0 *tmp317
   839 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  840 set :createAdjacentMask:row1 :createBlockMaskRow:result
   841 label *label251
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  842 op sub :createAdjacentMask:r 2 1
   843 label *label252
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  844 op add *tmp309 :createCombinedMask:y 1
+  845 set :createBlockMaskRow:x :createCombinedMask:x
   846 set :createBlockMaskRow:y *tmp309
   847 setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
   848 call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   642 write 1 processor4 "@counter"
   643 set :createAdjacentMask:x :createCombinedMask:x
   644 set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   645 op add *tmp305 :createCombinedMask:y 4
   646 label *label292
   647 label *label293
 
   762 jump *label335 always
   763 label *label335
   764 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   765 label *label248
   766 label *label249
   767 op add *tmp309 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   768 label *label336
   769 label *label337
   770 label *label338
 
   821 op or :createBlockMaskRow:result *tmp295 *tmp297
   822 label *label355
   823 label *label356
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   824 jump *label357 always
   825 label *label357
   826 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:486:20 (+35 instructions):
 
   839 op add *tmp309 :createCombinedMask:y 1
   840 set :createBlockMaskRow:x :createCombinedMask:x
   841 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)
-    * label *label253
+  842 label *label358
+  843 label *label359
+  844 label *label360
+  845 op add *tmp296 :createBlockMaskRow:x 4
+  846 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  847 op or :createBlockMaskRow:result 0 *tmp297
+  848 label *label361
+  849 label *label362
+  850 op shl *tmp295 :createBlockMaskRow:result 1
+  851 op add *tmp296 :createBlockMaskRow:x 3
+  852 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  853 op or :createBlockMaskRow:result *tmp295 *tmp297
+  854 label *label363
+  855 label *label364
+  856 op shl *tmp295 :createBlockMaskRow:result 1
+  857 op add *tmp296 :createBlockMaskRow:x 2
+  858 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  859 op or :createBlockMaskRow:result *tmp295 *tmp297
+  860 label *label365
+  861 label *label366
+  862 op shl *tmp295 :createBlockMaskRow:result 1
+  863 op add *tmp296 :createBlockMaskRow:x 1
+  864 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  865 op or :createBlockMaskRow:result *tmp295 *tmp297
+  866 label *label367
+  867 label *label368
+  868 op shl *tmp295 :createBlockMaskRow:result 1
+  869 op add *tmp296 :createBlockMaskRow:x 0
+  870 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  871 op or :createBlockMaskRow:result *tmp295 *tmp297
+  872 label *label369
+  873 label *label370
+  874 op shl *tmp295 :createBlockMaskRow:result 1
+  875 op add *tmp296 :createBlockMaskRow:x -1
+  876 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  877 op or :createBlockMaskRow:result *tmp295 *tmp297
+  878 label *label371
+  879 label *label372
+  880 op shl *tmp295 :createBlockMaskRow:result 1
+  881 op add *tmp296 :createBlockMaskRow:x -2
+  882 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  883 op or :createBlockMaskRow:result *tmp295 *tmp297
+  884 label *label373
+  885 label *label374
+  886 op shl *tmp295 :createBlockMaskRow:result 1
+  887 op add *tmp296 :createBlockMaskRow:x -3
+  888 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  889 op or :createBlockMaskRow:result *tmp295 *tmp297
+  890 label *label375
+  891 label *label376
+  892 op shl *tmp295 :createBlockMaskRow:result 1
+  893 op add *tmp296 :createBlockMaskRow:x -4
+  894 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  895 op or :createBlockMaskRow:result *tmp295 *tmp297
+  896 label *label377
+  897 label *label378
+  898 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  899 jump *label379 always
+  900 label *label379
   901 op shl *tmp311 :createAdjacentMask:row1 1
   902 op or *tmp312 :createAdjacentMask:row2 *tmp311
   903 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   828 op shr *tmp313 :createAdjacentMask:row1 1
   829 op or *tmp314 *tmp312 *tmp313
   830 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op shl *tmp316 0 7
   831 op and *tmp317 :createAdjacentMask:mask 0xFE
   832 op or :createAdjacentMask:result 0 *tmp317
   833 set :createAdjacentMask:row2 :createAdjacentMask:row1
 
   841 label *label358
   842 label *label359
   843 label *label360
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  844 op add *tmp296 :createCombinedMask:x 4
+  845 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   846 op or :createBlockMaskRow:result 0 *tmp297
   847 label *label361
   848 label *label362
   849 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  850 op add *tmp296 :createCombinedMask:x 3
+  851 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   852 op or :createBlockMaskRow:result *tmp295 *tmp297
   853 label *label363
   854 label *label364
   855 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  856 op add *tmp296 :createCombinedMask:x 2
+  857 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   858 op or :createBlockMaskRow:result *tmp295 *tmp297
   859 label *label365
   860 label *label366
   861 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  862 op add *tmp296 :createCombinedMask:x 1
+  863 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   864 op or :createBlockMaskRow:result *tmp295 *tmp297
   865 label *label367
   866 label *label368
   867 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  868 op add *tmp296 :createCombinedMask:x 0
+  869 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   870 op or :createBlockMaskRow:result *tmp295 *tmp297
   871 label *label369
   872 label *label370
   873 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  874 op add *tmp296 :createCombinedMask:x -1
+  875 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   876 op or :createBlockMaskRow:result *tmp295 *tmp297
   877 label *label371
   878 label *label372
   879 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  880 op add *tmp296 :createCombinedMask:x -2
+  881 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   882 op or :createBlockMaskRow:result *tmp295 *tmp297
   883 label *label373
   884 label *label374
   885 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  886 op add *tmp296 :createCombinedMask:x -3
+  887 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   888 op or :createBlockMaskRow:result *tmp295 *tmp297
   889 label *label375
   890 label *label376
   891 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  892 op add *tmp296 :createCombinedMask:x -4
+  893 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   894 op or :createBlockMaskRow:result *tmp295 *tmp297
   895 label *label377
   896 label *label378
 
   901 op or *tmp312 :createAdjacentMask:row2 *tmp311
   902 op shr *tmp313 :createAdjacentMask:row1 1
   903 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  904 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   905 op shl *tmp316 :createAdjacentMask:result 7
   906 op and *tmp317 :createAdjacentMask:mask 0xFE
   907 op or :createAdjacentMask:result *tmp316 *tmp317
   908 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  909 set :createAdjacentMask:row1 :createBlockMaskRow:result
   910 label *label254
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  911 op sub :createAdjacentMask:r 1 1
   912 label *label255
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  913 op add *tmp309 :createCombinedMask:y 0
+  914 set :createBlockMaskRow:x :createCombinedMask:x
   915 set :createBlockMaskRow:y *tmp309
   916 setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
   917 call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   833 set :createAdjacentMask:row2 :createAdjacentMask:row1
   834 set :createAdjacentMask:row1 :createBlockMaskRow:result
   835 label *label251
-    * op sub :createAdjacentMask:r 2 1
   836 label *label252
   837 op add *tmp309 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   838 label *label358
   839 label *label359
   840 label *label360
 
   891 op or :createBlockMaskRow:result *tmp295 *tmp297
   892 label *label377
   893 label *label378
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   894 jump *label379 always
   895 label *label379
   896 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:486:20 (+35 instructions):
 
   909 op add *tmp309 :createCombinedMask:y 0
   910 set :createBlockMaskRow:x :createCombinedMask:x
   911 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)
-    * label *label256
+  912 label *label380
+  913 label *label381
+  914 label *label382
+  915 op add *tmp296 :createBlockMaskRow:x 4
+  916 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  917 op or :createBlockMaskRow:result 0 *tmp297
+  918 label *label383
+  919 label *label384
+  920 op shl *tmp295 :createBlockMaskRow:result 1
+  921 op add *tmp296 :createBlockMaskRow:x 3
+  922 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  923 op or :createBlockMaskRow:result *tmp295 *tmp297
+  924 label *label385
+  925 label *label386
+  926 op shl *tmp295 :createBlockMaskRow:result 1
+  927 op add *tmp296 :createBlockMaskRow:x 2
+  928 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  929 op or :createBlockMaskRow:result *tmp295 *tmp297
+  930 label *label387
+  931 label *label388
+  932 op shl *tmp295 :createBlockMaskRow:result 1
+  933 op add *tmp296 :createBlockMaskRow:x 1
+  934 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  935 op or :createBlockMaskRow:result *tmp295 *tmp297
+  936 label *label389
+  937 label *label390
+  938 op shl *tmp295 :createBlockMaskRow:result 1
+  939 op add *tmp296 :createBlockMaskRow:x 0
+  940 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  941 op or :createBlockMaskRow:result *tmp295 *tmp297
+  942 label *label391
+  943 label *label392
+  944 op shl *tmp295 :createBlockMaskRow:result 1
+  945 op add *tmp296 :createBlockMaskRow:x -1
+  946 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  947 op or :createBlockMaskRow:result *tmp295 *tmp297
+  948 label *label393
+  949 label *label394
+  950 op shl *tmp295 :createBlockMaskRow:result 1
+  951 op add *tmp296 :createBlockMaskRow:x -2
+  952 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  953 op or :createBlockMaskRow:result *tmp295 *tmp297
+  954 label *label395
+  955 label *label396
+  956 op shl *tmp295 :createBlockMaskRow:result 1
+  957 op add *tmp296 :createBlockMaskRow:x -3
+  958 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  959 op or :createBlockMaskRow:result *tmp295 *tmp297
+  960 label *label397
+  961 label *label398
+  962 op shl *tmp295 :createBlockMaskRow:result 1
+  963 op add *tmp296 :createBlockMaskRow:x -4
+  964 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  965 op or :createBlockMaskRow:result *tmp295 *tmp297
+  966 label *label399
+  967 label *label400
+  968 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  969 jump *label401 always
+  970 label *label401
   971 op shl *tmp311 :createAdjacentMask:row1 1
   972 op or *tmp312 :createAdjacentMask:row2 *tmp311
   973 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   912 label *label380
   913 label *label381
   914 label *label382
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  915 op add *tmp296 :createCombinedMask:x 4
+  916 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   917 op or :createBlockMaskRow:result 0 *tmp297
   918 label *label383
   919 label *label384
   920 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  921 op add *tmp296 :createCombinedMask:x 3
+  922 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   923 op or :createBlockMaskRow:result *tmp295 *tmp297
   924 label *label385
   925 label *label386
   926 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  927 op add *tmp296 :createCombinedMask:x 2
+  928 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   929 op or :createBlockMaskRow:result *tmp295 *tmp297
   930 label *label387
   931 label *label388
   932 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  933 op add *tmp296 :createCombinedMask:x 1
+  934 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   935 op or :createBlockMaskRow:result *tmp295 *tmp297
   936 label *label389
   937 label *label390
   938 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  939 op add *tmp296 :createCombinedMask:x 0
+  940 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   941 op or :createBlockMaskRow:result *tmp295 *tmp297
   942 label *label391
   943 label *label392
   944 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  945 op add *tmp296 :createCombinedMask:x -1
+  946 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   947 op or :createBlockMaskRow:result *tmp295 *tmp297
   948 label *label393
   949 label *label394
   950 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  951 op add *tmp296 :createCombinedMask:x -2
+  952 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   953 op or :createBlockMaskRow:result *tmp295 *tmp297
   954 label *label395
   955 label *label396
   956 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  957 op add *tmp296 :createCombinedMask:x -3
+  958 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   959 op or :createBlockMaskRow:result *tmp295 *tmp297
   960 label *label397
   961 label *label398
   962 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  963 op add *tmp296 :createCombinedMask:x -4
+  964 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   965 op or :createBlockMaskRow:result *tmp295 *tmp297
   966 label *label399
   967 label *label400
 
   972 op or *tmp312 :createAdjacentMask:row2 *tmp311
   973 op shr *tmp313 :createAdjacentMask:row1 1
   974 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  975 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   976 op shl *tmp316 :createAdjacentMask:result 7
   977 op and *tmp317 :createAdjacentMask:mask 0xFE
   978 op or :createAdjacentMask:result *tmp316 *tmp317
   979 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  980 set :createAdjacentMask:row1 :createBlockMaskRow:result
   981 label *label257
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  982 op sub :createAdjacentMask:r 0 1
   983 label *label258
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  984 op add *tmp309 :createCombinedMask:y -1
+  985 set :createBlockMaskRow:x :createCombinedMask:x
   986 set :createBlockMaskRow:y *tmp309
   987 setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
   988 call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   904 set :createAdjacentMask:row2 :createAdjacentMask:row1
   905 set :createAdjacentMask:row1 :createBlockMaskRow:result
   906 label *label254
-    * op sub :createAdjacentMask:r 1 1
   907 label *label255
   908 op add *tmp309 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   909 label *label380
   910 label *label381
   911 label *label382
 
   962 op or :createBlockMaskRow:result *tmp295 *tmp297
   963 label *label399
   964 label *label400
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   965 jump *label401 always
   966 label *label401
   967 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:486:20 (+35 instructions):
 
   980 op add *tmp309 :createCombinedMask:y -1
   981 set :createBlockMaskRow:x :createCombinedMask:x
   982 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)
-    * label *label259
+  983 label *label402
+  984 label *label403
+  985 label *label404
+  986 op add *tmp296 :createBlockMaskRow:x 4
+  987 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  988 op or :createBlockMaskRow:result 0 *tmp297
+  989 label *label405
+  990 label *label406
+  991 op shl *tmp295 :createBlockMaskRow:result 1
+  992 op add *tmp296 :createBlockMaskRow:x 3
+  993 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  994 op or :createBlockMaskRow:result *tmp295 *tmp297
+  995 label *label407
+  996 label *label408
+  997 op shl *tmp295 :createBlockMaskRow:result 1
+  998 op add *tmp296 :createBlockMaskRow:x 2
+  999 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1000 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1001 label *label409
+ 1002 label *label410
+ 1003 op shl *tmp295 :createBlockMaskRow:result 1
+ 1004 op add *tmp296 :createBlockMaskRow:x 1
+ 1005 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1006 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1007 label *label411
+ 1008 label *label412
+ 1009 op shl *tmp295 :createBlockMaskRow:result 1
+ 1010 op add *tmp296 :createBlockMaskRow:x 0
+ 1011 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1012 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1013 label *label413
+ 1014 label *label414
+ 1015 op shl *tmp295 :createBlockMaskRow:result 1
+ 1016 op add *tmp296 :createBlockMaskRow:x -1
+ 1017 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1018 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1019 label *label415
+ 1020 label *label416
+ 1021 op shl *tmp295 :createBlockMaskRow:result 1
+ 1022 op add *tmp296 :createBlockMaskRow:x -2
+ 1023 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1024 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1025 label *label417
+ 1026 label *label418
+ 1027 op shl *tmp295 :createBlockMaskRow:result 1
+ 1028 op add *tmp296 :createBlockMaskRow:x -3
+ 1029 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1030 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1031 label *label419
+ 1032 label *label420
+ 1033 op shl *tmp295 :createBlockMaskRow:result 1
+ 1034 op add *tmp296 :createBlockMaskRow:x -4
+ 1035 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1036 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1037 label *label421
+ 1038 label *label422
+ 1039 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1040 jump *label423 always
+ 1041 label *label423
  1042 op shl *tmp311 :createAdjacentMask:row1 1
  1043 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1044 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   983 label *label402
   984 label *label403
   985 label *label404
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  986 op add *tmp296 :createCombinedMask:x 4
+  987 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   988 op or :createBlockMaskRow:result 0 *tmp297
   989 label *label405
   990 label *label406
   991 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  992 op add *tmp296 :createCombinedMask:x 3
+  993 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   994 op or :createBlockMaskRow:result *tmp295 *tmp297
   995 label *label407
   996 label *label408
   997 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  998 op add *tmp296 :createCombinedMask:x 2
+  999 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1000 op or :createBlockMaskRow:result *tmp295 *tmp297
  1001 label *label409
  1002 label *label410
  1003 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1004 op add *tmp296 :createCombinedMask:x 1
+ 1005 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1006 op or :createBlockMaskRow:result *tmp295 *tmp297
  1007 label *label411
  1008 label *label412
  1009 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1010 op add *tmp296 :createCombinedMask:x 0
+ 1011 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1012 op or :createBlockMaskRow:result *tmp295 *tmp297
  1013 label *label413
  1014 label *label414
  1015 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1016 op add *tmp296 :createCombinedMask:x -1
+ 1017 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1018 op or :createBlockMaskRow:result *tmp295 *tmp297
  1019 label *label415
  1020 label *label416
  1021 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1022 op add *tmp296 :createCombinedMask:x -2
+ 1023 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1024 op or :createBlockMaskRow:result *tmp295 *tmp297
  1025 label *label417
  1026 label *label418
  1027 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1028 op add *tmp296 :createCombinedMask:x -3
+ 1029 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1030 op or :createBlockMaskRow:result *tmp295 *tmp297
  1031 label *label419
  1032 label *label420
  1033 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1034 op add *tmp296 :createCombinedMask:x -4
+ 1035 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1036 op or :createBlockMaskRow:result *tmp295 *tmp297
  1037 label *label421
  1038 label *label422
 
  1043 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1044 op shr *tmp313 :createAdjacentMask:row1 1
  1045 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+ 1046 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
  1047 op shl *tmp316 :createAdjacentMask:result 7
  1048 op and *tmp317 :createAdjacentMask:mask 0xFE
  1049 op or :createAdjacentMask:result *tmp316 *tmp317
  1050 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1051 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1052 label *label260
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1053 op sub :createAdjacentMask:r -1 1
  1054 label *label261
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1055 op add *tmp309 :createCombinedMask:y -2
+ 1056 set :createBlockMaskRow:x :createCombinedMask:x
  1057 set :createBlockMaskRow:y *tmp309
  1058 setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
  1059 call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   975 set :createAdjacentMask:row2 :createAdjacentMask:row1
   976 set :createAdjacentMask:row1 :createBlockMaskRow:result
   977 label *label257
-    * op sub :createAdjacentMask:r 0 1
   978 label *label258
   979 op add *tmp309 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   980 label *label402
   981 label *label403
   982 label *label404
 
  1033 op or :createBlockMaskRow:result *tmp295 *tmp297
  1034 label *label421
  1035 label *label422
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1036 jump *label423 always
  1037 label *label423
  1038 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-16 instructions):
 
   141 jump *label196 lessThan :visited:i *tmp75
   142 label *label51
   143 set *tmp74 false
-    * jump *label48 always
   144 label *label48
   145 jump *label54 notEqual *tmp74 false
   146 op div *tmp90 2 .angle
 
   159 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   160 label *label31
   161 set *tmp28 false
-    * jump *label28 always
   162 label *label28
   163 set :findDrillLocationLocal:oreX :locateOreAway:x
   164 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   348 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   349 label *label247
   350 label *label102
-    * jump *label99 always
   351 label *label99
   352 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   353 op sub *tmp210 7 :excludeArea:blockSizeX
 
   393 label *label279
   394 label *label280
   395 set :shiftMask*retval :shiftMask:mask
-    * jump *label281 always
   396 label *label281
   397 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   398 jump *label96 always
   399 jump *label98 always
   400 label *label97
   401 set :excludeArea*retval :excludeArea:mask
-    * jump *label96 always
   402 label *label98
   403 label *label96
   404 return :excludeArea*retaddr
 
   443 jump *label198 lessThanEq :findPossiblePlacement:y 3
   444 label *label109
   445 set :findPossiblePlacement*retval -1
-    * jump *label106 always
   446 label *label106
   447 return :findPossiblePlacement*retaddr
   448 end
 
   624 label *label221
   625 label *label142
   626 set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label139 always
   627 label *label139
   628 return :createBlockMaskRow*retaddr
   629 end
 
   692 op or :createBlockMaskRow:result *tmp295 *tmp297
   693 label *label311
   694 label *label312
-    * jump *label313 always
   695 label *label313
   696 set :createAdjacentMask:row2 :createBlockMaskRow:result
   697 op add *tmp307 :createCombinedMask:y 3
 
   751 op or :createBlockMaskRow:result *tmp295 *tmp297
   752 label *label333
   753 label *label334
-    * jump *label335 always
   754 label *label335
   755 set :createAdjacentMask:row1 :createBlockMaskRow:result
   756 label *label248
 
   812 op or :createBlockMaskRow:result *tmp295 *tmp297
   813 label *label355
   814 label *label356
-    * jump *label357 always
   815 label *label357
   816 op shl *tmp311 :createAdjacentMask:row1 1
   817 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   881 op or :createBlockMaskRow:result *tmp295 *tmp297
   882 label *label377
   883 label *label378
-    * jump *label379 always
   884 label *label379
   885 op shl *tmp311 :createAdjacentMask:row1 1
   886 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   951 op or :createBlockMaskRow:result *tmp295 *tmp297
   952 label *label399
   953 label *label400
-    * jump *label401 always
   954 label *label401
   955 op shl *tmp311 :createAdjacentMask:row1 1
   956 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1021 op or :createBlockMaskRow:result *tmp295 *tmp297
  1022 label *label421
  1023 label *label422
-    * jump *label423 always
  1024 label *label423
  1025 op shl *tmp311 :createAdjacentMask:row1 1
  1026 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1110 call *label10 *invalid :excludeArea*retval (m:*label152) (h:*label152)
  1111 label *label152
  1112 set :createCombinedMask*retval :excludeArea*retval
-    * jump *label143 always
  1113 label *label143
  1114 return :createCombinedMask*retaddr
  1115 end
 
  1272 label *label289
  1273 label *label290
  1274 set :shiftMask*retval :shiftMask:mask
-    * jump *label291 always
  1275 label *label291
  1276 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1277 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
 
  1294 multilabel *label177 (m:marker0)
  1295 label *label173
  1296 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
  1297 label *label153
  1298 return :layoutThoriumDrillAtLocation*retaddr
  1299 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   572 label *label204
   573 op add *tmp296 :createBlockMaskRow:x 4
   574 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  575 set :createBlockMaskRow:result *tmp297
   576 label *label205
   577 label *label206
   578 op shl *tmp295 :createBlockMaskRow:result 1
 
   594 label *label211
   595 label *label212
   596 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
+  597 set *tmp296 :createBlockMaskRow:x
   598 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   599 op or :createBlockMaskRow:result *tmp295 *tmp297
   600 label *label213
 
   641 label *label294
   642 op add *tmp296 :createCombinedMask:x 4
   643 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  644 set :createBlockMaskRow:result *tmp297
   645 label *label295
   646 label *label296
   647 op shl *tmp295 :createBlockMaskRow:result 1
 
   663 label *label301
   664 label *label302
   665 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  666 set *tmp296 :createCombinedMask:x
   667 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   668 op or :createBlockMaskRow:result *tmp295 *tmp297
   669 label *label303
 
   700 label *label316
   701 op add *tmp296 :createCombinedMask:x 4
   702 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  703 set :createBlockMaskRow:result *tmp297
   704 label *label317
   705 label *label318
   706 op shl *tmp295 :createBlockMaskRow:result 1
 
   722 label *label323
   723 label *label324
   724 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  725 set *tmp296 :createCombinedMask:x
   726 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   727 op or :createBlockMaskRow:result *tmp295 *tmp297
   728 label *label325
 
   761 label *label338
   762 op add *tmp296 :createCombinedMask:x 4
   763 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  764 set :createBlockMaskRow:result *tmp297
   765 label *label339
   766 label *label340
   767 op shl *tmp295 :createBlockMaskRow:result 1
 
   783 label *label345
   784 label *label346
   785 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  786 set *tmp296 :createCombinedMask:x
   787 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   788 op or :createBlockMaskRow:result *tmp295 *tmp297
   789 label *label347
 
   819 op or *tmp314 *tmp312 *tmp313
   820 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   821 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp317
+  822 set :createAdjacentMask:result *tmp317
   823 set :createAdjacentMask:row2 :createAdjacentMask:row1
   824 set :createAdjacentMask:row1 :createBlockMaskRow:result
   825 label *label251
 
   830 label *label360
   831 op add *tmp296 :createCombinedMask:x 4
   832 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  833 set :createBlockMaskRow:result *tmp297
   834 label *label361
   835 label *label362
   836 op shl *tmp295 :createBlockMaskRow:result 1
 
   852 label *label367
   853 label *label368
   854 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  855 set *tmp296 :createCombinedMask:x
   856 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   857 op or :createBlockMaskRow:result *tmp295 *tmp297
   858 label *label369
 
   894 set :createAdjacentMask:row1 :createBlockMaskRow:result
   895 label *label254
   896 label *label255
-    * op add *tmp309 :createCombinedMask:y 0
+  897 set *tmp309 :createCombinedMask:y
   898 label *label380
   899 label *label381
   900 label *label382
   901 op add *tmp296 :createCombinedMask:x 4
   902 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  903 set :createBlockMaskRow:result *tmp297
   904 label *label383
   905 label *label384
   906 op shl *tmp295 :createBlockMaskRow:result 1
 
   922 label *label389
   923 label *label390
   924 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  925 set *tmp296 :createCombinedMask:x
   926 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   927 op or :createBlockMaskRow:result *tmp295 *tmp297
   928 label *label391
 
   970 label *label404
   971 op add *tmp296 :createCombinedMask:x 4
   972 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  973 set :createBlockMaskRow:result *tmp297
   974 label *label405
   975 label *label406
   976 op shl *tmp295 :createBlockMaskRow:result 1
 
   992 label *label411
   993 label *label412
   994 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  995 set *tmp296 :createCombinedMask:x
   996 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   997 op or :createBlockMaskRow:result *tmp295 *tmp297
   998 label *label413

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-11 instructions):
 
   571 label *label203
   572 label *label204
   573 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  574 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
   575 label *label205
   576 label *label206
   577 op shl *tmp295 :createBlockMaskRow:result 1
 
   619 op shl *tmp295 :createBlockMaskRow:result 1
   620 op add *tmp296 :createBlockMaskRow:x -4
   621 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  622 op or :createBlockMaskRow*retval *tmp295 *tmp297
   623 label *label221
   624 label *label142
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   625 label *label139
   626 return :createBlockMaskRow*retaddr
   627 end
 
   638 label *label293
   639 label *label294
   640 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  641 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
   642 label *label295
   643 label *label296
   644 op shl *tmp295 :createBlockMaskRow:result 1
 
   686 op shl *tmp295 :createBlockMaskRow:result 1
   687 op add *tmp296 :createCombinedMask:x -4
   688 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  689 op or :createAdjacentMask:row2 *tmp295 *tmp297
   690 label *label311
   691 label *label312
   692 label *label313
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   693 op add *tmp307 :createCombinedMask:y 3
   694 label *label314
   695 label *label315
   696 label *label316
   697 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  698 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
   699 label *label317
   700 label *label318
   701 op shl *tmp295 :createBlockMaskRow:result 1
 
   743 op shl *tmp295 :createBlockMaskRow:result 1
   744 op add *tmp296 :createCombinedMask:x -4
   745 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  746 op or :createAdjacentMask:row1 *tmp295 *tmp297
   747 label *label333
   748 label *label334
   749 label *label335
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   750 label *label248
   751 label *label249
   752 op add *tmp309 :createCombinedMask:y 2
 
   754 label *label337
   755 label *label338
   756 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  757 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   758 label *label339
   759 label *label340
   760 op shl *tmp295 :createBlockMaskRow:result 1
 
   811 op shr *tmp313 :createAdjacentMask:row1 1
   812 op or *tmp314 *tmp312 *tmp313
   813 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp317
+  814 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   815 set :createAdjacentMask:row2 :createAdjacentMask:row1
   816 set :createAdjacentMask:row1 :createBlockMaskRow:result
   817 label *label251
 
   821 label *label359
   822 label *label360
   823 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  824 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   825 label *label361
   826 label *label362
   827 op shl *tmp295 :createBlockMaskRow:result 1
 
   890 label *label381
   891 label *label382
   892 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  893 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   894 label *label383
   895 label *label384
   896 op shl *tmp295 :createBlockMaskRow:result 1
 
   959 label *label403
   960 label *label404
   961 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  962 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   963 label *label405
   964 label *label406
   965 op shl *tmp295 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   594 label *label212
   595 op shl *tmp295 :createBlockMaskRow:result 1
   596 set *tmp296 :createBlockMaskRow:x
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  597 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   598 op or :createBlockMaskRow:result *tmp295 *tmp297
   599 label *label213
   600 label *label214
 
   661 label *label302
   662 op shl *tmp295 :createBlockMaskRow:result 1
   663 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  664 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   665 op or :createBlockMaskRow:result *tmp295 *tmp297
   666 label *label303
   667 label *label304
 
   718 label *label324
   719 op shl *tmp295 :createBlockMaskRow:result 1
   720 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  721 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   722 op or :createBlockMaskRow:result *tmp295 *tmp297
   723 label *label325
   724 label *label326
 
   777 label *label346
   778 op shl *tmp295 :createBlockMaskRow:result 1
   779 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  780 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   781 op or :createBlockMaskRow:result *tmp295 *tmp297
   782 label *label347
   783 label *label348
 
   844 label *label368
   845 op shl *tmp295 :createBlockMaskRow:result 1
   846 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  847 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   848 op or :createBlockMaskRow:result *tmp295 *tmp297
   849 label *label369
   850 label *label370
 
   890 label *label381
   891 label *label382
   892 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  893 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
   894 label *label383
   895 label *label384
   896 op shl *tmp295 :createBlockMaskRow:result 1
   897 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  898 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   899 op or :createBlockMaskRow:result *tmp295 *tmp297
   900 label *label385
   901 label *label386
   902 op shl *tmp295 :createBlockMaskRow:result 1
   903 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  904 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   905 op or :createBlockMaskRow:result *tmp295 *tmp297
   906 label *label387
   907 label *label388
   908 op shl *tmp295 :createBlockMaskRow:result 1
   909 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  910 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   911 op or :createBlockMaskRow:result *tmp295 *tmp297
   912 label *label389
   913 label *label390
   914 op shl *tmp295 :createBlockMaskRow:result 1
   915 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  916 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   917 op or :createBlockMaskRow:result *tmp295 *tmp297
   918 label *label391
   919 label *label392
   920 op shl *tmp295 :createBlockMaskRow:result 1
   921 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  922 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   923 op or :createBlockMaskRow:result *tmp295 *tmp297
   924 label *label393
   925 label *label394
   926 op shl *tmp295 :createBlockMaskRow:result 1
   927 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  928 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   929 op or :createBlockMaskRow:result *tmp295 *tmp297
   930 label *label395
   931 label *label396
   932 op shl *tmp295 :createBlockMaskRow:result 1
   933 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  934 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   935 op or :createBlockMaskRow:result *tmp295 *tmp297
   936 label *label397
   937 label *label398
   938 op shl *tmp295 :createBlockMaskRow:result 1
   939 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  940 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   941 op or :createBlockMaskRow:result *tmp295 *tmp297
   942 label *label399
   943 label *label400
 
   982 label *label412
   983 op shl *tmp295 :createBlockMaskRow:result 1
   984 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  985 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   986 op or :createBlockMaskRow:result *tmp295 *tmp297
   987 label *label413
   988 label *label414

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-8 instructions):
 
   593 label *label211
   594 label *label212
   595 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createBlockMaskRow:x
   596 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   597 op or :createBlockMaskRow:result *tmp295 *tmp297
   598 label *label213
 
   659 label *label301
   660 label *label302
   661 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   662 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   663 op or :createBlockMaskRow:result *tmp295 *tmp297
   664 label *label303
 
   715 label *label323
   716 label *label324
   717 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   718 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   719 op or :createBlockMaskRow:result *tmp295 *tmp297
   720 label *label325
 
   773 label *label345
   774 label *label346
   775 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   776 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   777 op or :createBlockMaskRow:result *tmp295 *tmp297
   778 label *label347
 
   839 label *label367
   840 label *label368
   841 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   842 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   843 op or :createBlockMaskRow:result *tmp295 *tmp297
   844 label *label369
 
   880 set :createAdjacentMask:row1 :createBlockMaskRow:result
   881 label *label254
   882 label *label255
-    * set *tmp309 :createCombinedMask:y
   883 label *label380
   884 label *label381
   885 label *label382
 
   906 label *label389
   907 label *label390
   908 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   909 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   910 op or :createBlockMaskRow:result *tmp295 *tmp297
   911 label *label391
 
   974 label *label411
   975 label *label412
   976 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   977 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   978 op or :createBlockMaskRow:result *tmp295 *tmp297
   979 label *label413

Modifications by Inline function call at OreLocator.mnd:486:20 (+31 instructions):
 
  1019 op add *tmp309 :createCombinedMask:y -2
  1020 set :createBlockMaskRow:x :createCombinedMask:x
  1021 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)
-    * label *label262
+ 1022 label *label424
+ 1023 label *label425
+ 1024 label *label426
+ 1025 op add *tmp296 :createBlockMaskRow:x 4
+ 1026 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+ 1027 label *label427
+ 1028 label *label428
+ 1029 op shl *tmp295 :createBlockMaskRow:result 1
+ 1030 op add *tmp296 :createBlockMaskRow:x 3
+ 1031 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1032 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1033 label *label429
+ 1034 label *label430
+ 1035 op shl *tmp295 :createBlockMaskRow:result 1
+ 1036 op add *tmp296 :createBlockMaskRow:x 2
+ 1037 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1038 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1039 label *label431
+ 1040 label *label432
+ 1041 op shl *tmp295 :createBlockMaskRow:result 1
+ 1042 op add *tmp296 :createBlockMaskRow:x 1
+ 1043 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1044 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1045 label *label433
+ 1046 label *label434
+ 1047 op shl *tmp295 :createBlockMaskRow:result 1
+ 1048 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1049 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1050 label *label435
+ 1051 label *label436
+ 1052 op shl *tmp295 :createBlockMaskRow:result 1
+ 1053 op add *tmp296 :createBlockMaskRow:x -1
+ 1054 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1055 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1056 label *label437
+ 1057 label *label438
+ 1058 op shl *tmp295 :createBlockMaskRow:result 1
+ 1059 op add *tmp296 :createBlockMaskRow:x -2
+ 1060 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1061 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1062 label *label439
+ 1063 label *label440
+ 1064 op shl *tmp295 :createBlockMaskRow:result 1
+ 1065 op add *tmp296 :createBlockMaskRow:x -3
+ 1066 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1067 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1068 label *label441
+ 1069 label *label442
+ 1070 op shl *tmp295 :createBlockMaskRow:result 1
+ 1071 op add *tmp296 :createBlockMaskRow:x -4
+ 1072 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1073 op or :createBlockMaskRow*retval *tmp295 *tmp297
+ 1074 label *label443
+ 1075 label *label444
+ 1076 label *label445
  1077 op shl *tmp311 :createAdjacentMask:row1 1
  1078 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1079 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1016 label *label260
  1017 op sub :createAdjacentMask:r -1 1
  1018 label *label261
-    * op add *tmp309 :createCombinedMask:y -2
+ 1019 op add :createBlockMaskRow:y :createCombinedMask:y -2
  1020 set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
  1021 label *label424
  1022 label *label425
  1023 label *label426

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
  1021 label *label424
  1022 label *label425
  1023 label *label426
-    * op add *tmp296 :createBlockMaskRow:x 4
+ 1024 op add *tmp296 :createCombinedMask:x 4
  1025 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
  1026 label *label427
  1027 label *label428
  1028 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
+ 1029 op add *tmp296 :createCombinedMask:x 3
  1030 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1031 op or :createBlockMaskRow:result *tmp295 *tmp297
  1032 label *label429
  1033 label *label430
  1034 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
+ 1035 op add *tmp296 :createCombinedMask:x 2
  1036 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1037 op or :createBlockMaskRow:result *tmp295 *tmp297
  1038 label *label431
  1039 label *label432
  1040 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
+ 1041 op add *tmp296 :createCombinedMask:x 1
  1042 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1043 op or :createBlockMaskRow:result *tmp295 *tmp297
  1044 label *label433
  1045 label *label434
  1046 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1047 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1048 op or :createBlockMaskRow:result *tmp295 *tmp297
  1049 label *label435
  1050 label *label436
  1051 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
+ 1052 op add *tmp296 :createCombinedMask:x -1
  1053 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1054 op or :createBlockMaskRow:result *tmp295 *tmp297
  1055 label *label437
  1056 label *label438
  1057 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
+ 1058 op add *tmp296 :createCombinedMask:x -2
  1059 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1060 op or :createBlockMaskRow:result *tmp295 *tmp297
  1061 label *label439
  1062 label *label440
  1063 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
+ 1064 op add *tmp296 :createCombinedMask:x -3
  1065 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1066 op or :createBlockMaskRow:result *tmp295 *tmp297
  1067 label *label441
  1068 label *label442
  1069 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
+ 1070 op add *tmp296 :createCombinedMask:x -4
  1071 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1072 op or :createBlockMaskRow*retval *tmp295 *tmp297
  1073 label *label443
 
  1084 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1085 set :createAdjacentMask:row1 :createBlockMaskRow*retval
  1086 label *label263
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1087 op sub :createAdjacentMask:r -2 1
  1088 label *label264
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1089 op add *tmp309 :createCombinedMask:y -3
+ 1090 set :createBlockMaskRow:x :createCombinedMask:x
  1091 set :createBlockMaskRow:y *tmp309
  1092 setaddr :createBlockMaskRow*retaddr *label265 (h:*label265)
  1093 call *label13 *invalid :createBlockMaskRow*retval (m:*label265) (h:*label265)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
  1014 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1015 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1016 label *label260
-    * op sub :createAdjacentMask:r -1 1
  1017 label *label261
  1018 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
  1019 label *label424
  1020 label *label425
  1021 label *label426

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    30 set :findDrillLocationLocal:distanceLimit *tmp15
    31 set .angle 0
    32 set .mapProgress 0
-    * label *label22
    33 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    34 jump *label24 notEqual *tmp18 false
    35 label *label270
    36 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label23
    37 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    38 jump *label270 equal *tmp18 false
    39 label *label24
-    * label *label21
-    * label *label20
    40 op div *tmp21 *tmp15 3.8197185279121366
    41 op pow .mapTotal *tmp21 2
    42 set :findDrillLocationLocal:oreX 0
 
    59 op mul .mapProgress .angle .angle
    60 op sub *tmp37 @mapw 5
    61 op sub *tmp44 @maph 5
-    * label *label29
    62 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    63 label *label195
    64 op div :locateOreAway:a .angle @degToRad
 
    67 op add *tmp36 :findDrillLocationLocal:x *tmp35
    68 op max *tmp39 *tmp36 5
    69 op min *tmp38 *tmp39 *tmp37
-    * label *label32
    70 op cos *tmp41 :locateOreAway:a
    71 op mul *tmp42 *tmp41 :locateOreAway:distance
    72 op add *tmp43 :findDrillLocationLocal:y *tmp42
    73 op max *tmp46 *tmp43 5
    74 op min *tmp45 *tmp46 *tmp44
-    * label *label33
-    * label *label35
    75 ucontrol within *tmp38 *tmp45 5 *tmp48
    76 jump *label37 notEqual *tmp48 false
    77 label *label202
    78 ucontrol approach *tmp38 *tmp45 4.5
-    * label *label36
    79 ucontrol within *tmp38 *tmp45 5 *tmp48
    80 jump *label202 equal *tmp48 false
    81 label *label37
-    * label *label34
    82 op div *tmp51 3.8197185279121366 :locateOreAway:distance
    83 op add .angle .angle *tmp51
    84 op mul .mapProgress .angle .angle
 
    88 set *tmp28 false
    89 jump *label28 always
    90 label *label38
-    * label *label39
    91 op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x
    92 op abs *tmp59 *tmp58
    93 op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y
 
   100 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   101 jump *label30 always
   102 label *label42
-    * label *label43
   103 label *label40
-    * label *label41
   104 jump *label44 lessThan :locateOreAway:coreDist 8
   105 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   106 set :locateOreAway:lastX :locateOreAway:x
   107 set :locateOreAway:lastY :locateOreAway:y
   108 set *tmp75 .locations
   109 set :visited:i .locationsStart
-    * label *label49
   110 jump *label51 greaterThanEq .locationsStart *tmp75
   111 label *label196
   112 op mul :visited:index 4 :visited:i
 
   121 set *tmp74 true
   122 jump *label48 always
   123 label *label52
-    * label *label53
-    * label *label50
   124 op add :visited:i :visited:i 1
   125 jump *label196 lessThan :visited:i *tmp75
   126 label *label51
 
   134 set *tmp28 true
   135 jump *label28 always
   136 label *label54
-    * label *label55
   137 label *label46
-    * label *label47
   138 label *label44
-    * label *label45
   139 label *label30
   140 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   141 label *label31
 
   147 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   148 jump *label19 always
   149 label *label56
-    * label *label57
   150 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   151 op add .mapSpots .mapSpots 1
   152 label *label58
-    * label *label59
-    * label *label62
   153 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   154 jump *label64 notEqual *tmp100 false
   155 label *label222
   156 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label63
   157 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   158 jump *label222 equal *tmp100 false
   159 label *label64
-    * label *label61
-    * label *label60
   160 set :findDrillLocationLocal:last 0
   161 label *label65
   162 write @unit processor4 ":findBestPosition:unit"
 
   183 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   184 jump *label67 always
   185 label *label69
-    * label *label70
   186 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   187 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   188 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   199 op add .count .count 1
   200 write :findDrillLocationLocal:dy bank1 .count
   201 op add .locations .locations 1
-    * label *label77
   202 ucontrol unbind
   203 set :findDrillLocationLocal*retval true
   204 jump *label19 always
   205 label *label75
-    * label *label76
   206 label *label71
-    * label *label72
   207 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   208 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   209 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   210 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   211 label *label78
-    * label *label79
   212 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   213 jump *label67 always
   214 label *label80
-    * label *label81
   215 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   216 op mul :round:x :findDrillLocationLocal:diffX 1.1
   217 op add *tmp143 :round:x 0.5
   218 op floor *tmp142 *tmp143
-    * label *label82
   219 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp142
   220 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   221 op add *tmp147 :round.1:x 0.5
   222 op floor *tmp146 *tmp147
-    * label *label83
   223 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
-    * label *label66
   224 jump *label65 always
   225 label *label67
   226 jump *label84 lessThan :findDrillLocationLocal:best 0
 
   234 op add .count .count 1
   235 write :findDrillLocationLocal:bestY bank1 .count
   236 op add .locations .locations 1
-    * label *label86
   237 label *label84
-    * label *label85
-    * label *label26
   238 jump *label25 always
-    * label *label27
   239 set :findDrillLocationLocal*retval null
   240 label *label19
   241 return :findDrillLocationLocal*retaddr
 
   260 op shl *tmp203 1 :excludeArea:blockSizeX
   261 op sub :createMatrixOfSize:row *tmp203 1
   262 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * label *label223
-    * label *label224
   263 jump *label225 lessThan 1 :excludeArea:blockSizeY
   264 jump *label102 always
   265 label *label225
-    * label *label226
   266 op shl *tmp207 :createMatrixOfSize:row 7
   267 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label227
-    * label *label228
   268 jump *label229 lessThan 2 :excludeArea:blockSizeY
   269 jump *label102 always
   270 label *label229
-    * label *label230
   271 op shl *tmp207 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label231
-    * label *label232
   273 jump *label233 lessThan 3 :excludeArea:blockSizeY
   274 jump *label102 always
   275 label *label233
-    * label *label234
   276 op shl *tmp207 :createMatrixOfSize:matrix 7
   277 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label235
-    * label *label236
   278 jump *label237 lessThan 4 :excludeArea:blockSizeY
   279 jump *label102 always
   280 label *label237
-    * label *label238
   281 op shl *tmp207 :createMatrixOfSize:matrix 7
   282 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label239
-    * label *label240
   283 jump *label241 lessThan 5 :excludeArea:blockSizeY
   284 jump *label102 always
   285 label *label241
-    * label *label242
   286 op shl *tmp207 :createMatrixOfSize:matrix 7
   287 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label243
-    * label *label244
   288 jump *label245 lessThan 6 :excludeArea:blockSizeY
   289 jump *label102 always
   290 label *label245
-    * label *label246
   291 op shl *tmp207 :createMatrixOfSize:matrix 7
   292 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label247
   293 label *label102
-    * label *label99
   294 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   295 op sub *tmp210 7 :excludeArea:blockSizeX
   296 op mul :excludeArea:shiftX *tmp209 *tmp210
   297 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   298 op sub *tmp213 7 :excludeArea:blockSizeY
   299 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * label *label272
   300 op abs *tmp161 :excludeArea:shiftX
   301 op greaterThan *tmp162 *tmp161 6
   302 op abs *tmp163 :excludeArea:shiftY
 
   306 set :shiftMask*retval 0
   307 jump *label281 always
   308 label *label273
-    * label *label274
   309 op mul *tmp167 7 :excludeArea:shiftY
   310 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   311 jump *label275 lessThanEq :shiftMask:shift 0
 
   322 jump *label277 lessThanEq :excludeArea:shiftX 0
   323 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   324 label *label277
-    * label *label278
   325 op shl *tmp181 :shiftMask:keep 7
   326 op or :shiftMask:keep :shiftMask:keep *tmp181
   327 op shl *tmp182 :shiftMask:keep 14
 
   330 op or :shiftMask:keep :shiftMask:keep *tmp183
   331 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   332 label *label279
-    * label *label280
   333 set :shiftMask*retval :shiftMask:mask
   334 label *label281
   335 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
 
   343 end
   344 label *label11
   345 set :findPossiblePlacement:y -3
-    * label *label107
   346 jump *label109 greaterThan :findPossiblePlacement:y 3
   347 label *label198
   348 op add *tmp216 :findPossiblePlacement:y 3
   349 op mul *tmp217 7 *tmp216
   350 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   351 set :findPossiblePlacement:x -3
-    * label *label110
   352 jump *label112 greaterThan :findPossiblePlacement:x 3
   353 label *label199
   354 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   358 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   359 jump *label106 always
   360 label *label113
-    * label *label114
   361 op sub *tmp225 3 :findPossiblePlacement:width
   362 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   363 jump *label112 always
   364 label *label115
-    * label *label116
   365 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label111
   366 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   367 jump *label199 lessThanEq :findPossiblePlacement:x 3
   368 label *label112
 
   370 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   371 jump *label109 always
   372 label *label117
-    * label *label118
-    * label *label108
   373 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   374 jump *label198 lessThanEq :findPossiblePlacement:y 3
   375 label *label109
 
   390 set :tryPlaceGenerator*retval false
   391 jump *label119 always
   392 label *label123
-    * label *label124
   393 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   394 op add .water2X *tmp236 :findPossiblePlacement:x
   395 op add *tmp238 :tryPlaceGenerator:centerY 0.5
 
   412 set :tryPlaceGenerator*retval false
   413 jump *label119 always
   414 label *label126
-    * label *label127
   415 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   416 op add .water2X *tmp248 :findPossiblePlacement:x
   417 op add *tmp250 :tryPlaceGenerator:centerY 0.5
 
   434 set :tryPlaceGenerator*retval false
   435 jump *label119 always
   436 label *label129
-    * label *label130
   437 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   438 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   439 op shl *tmp262 1 :findPossiblePlacement*retval
 
   449 set :tryPlaceGenerator*retval false
   450 jump *label119 always
   451 label *label132
-    * label *label133
   452 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   453 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   454 op shl *tmp268 1 :findPossiblePlacement*retval
 
   484 set :tryPlaceGenerator*retval false
   485 jump *label119 always
   486 label *label137
-    * label *label138
   487 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   488 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   489 label *label134
-    * label *label135
   490 set :tryPlaceGenerator*retval true
   491 jump *label119 always
   492 label *label119
   493 return :tryPlaceGenerator*retaddr
   494 end
   495 label *label13
-    * label *label203
-    * label *label204
   496 op add *tmp296 :createBlockMaskRow:x 4
   497 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label205
-    * label *label206
   498 op shl *tmp295 :createBlockMaskRow:result 1
   499 op add *tmp296 :createBlockMaskRow:x 3
   500 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   501 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label207
-    * label *label208
   502 op shl *tmp295 :createBlockMaskRow:result 1
   503 op add *tmp296 :createBlockMaskRow:x 2
   504 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   505 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label209
-    * label *label210
   506 op shl *tmp295 :createBlockMaskRow:result 1
   507 op add *tmp296 :createBlockMaskRow:x 1
   508 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   509 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label211
-    * label *label212
   510 op shl *tmp295 :createBlockMaskRow:result 1
   511 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   512 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label213
-    * label *label214
   513 op shl *tmp295 :createBlockMaskRow:result 1
   514 op add *tmp296 :createBlockMaskRow:x -1
   515 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   516 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label215
-    * label *label216
   517 op shl *tmp295 :createBlockMaskRow:result 1
   518 op add *tmp296 :createBlockMaskRow:x -2
   519 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   520 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label217
-    * label *label218
   521 op shl *tmp295 :createBlockMaskRow:result 1
   522 op add *tmp296 :createBlockMaskRow:x -3
   523 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   524 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label219
-    * label *label220
   525 op shl *tmp295 :createBlockMaskRow:result 1
   526 op add *tmp296 :createBlockMaskRow:x -4
   527 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   528 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label221
-    * label *label142
-    * label *label139
   529 return :createBlockMaskRow*retaddr
   530 end
   531 label *label14
 
   537 set :createAdjacentMask:x :createCombinedMask:x
   538 set :createAdjacentMask:y :createCombinedMask:y
   539 op add *tmp305 :createCombinedMask:y 4
-    * label *label292
-    * label *label293
-    * label *label294
   540 op add *tmp296 :createCombinedMask:x 4
   541 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label295
-    * label *label296
   542 op shl *tmp295 :createBlockMaskRow:result 1
   543 op add *tmp296 :createCombinedMask:x 3
   544 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   545 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label297
-    * label *label298
   546 op shl *tmp295 :createBlockMaskRow:result 1
   547 op add *tmp296 :createCombinedMask:x 2
   548 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   549 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label299
-    * label *label300
   550 op shl *tmp295 :createBlockMaskRow:result 1
   551 op add *tmp296 :createCombinedMask:x 1
   552 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   553 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label301
-    * label *label302
   554 op shl *tmp295 :createBlockMaskRow:result 1
   555 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   556 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label303
-    * label *label304
   557 op shl *tmp295 :createBlockMaskRow:result 1
   558 op add *tmp296 :createCombinedMask:x -1
   559 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   560 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label305
-    * label *label306
   561 op shl *tmp295 :createBlockMaskRow:result 1
   562 op add *tmp296 :createCombinedMask:x -2
   563 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   564 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label307
-    * label *label308
   565 op shl *tmp295 :createBlockMaskRow:result 1
   566 op add *tmp296 :createCombinedMask:x -3
   567 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   568 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label309
-    * label *label310
   569 op shl *tmp295 :createBlockMaskRow:result 1
   570 op add *tmp296 :createCombinedMask:x -4
   571 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   572 op or :createAdjacentMask:row2 *tmp295 *tmp297
-    * label *label311
-    * label *label312
-    * label *label313
   573 op add *tmp307 :createCombinedMask:y 3
-    * label *label314
-    * label *label315
-    * label *label316
   574 op add *tmp296 :createCombinedMask:x 4
   575 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label317
-    * label *label318
   576 op shl *tmp295 :createBlockMaskRow:result 1
   577 op add *tmp296 :createCombinedMask:x 3
   578 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label319
-    * label *label320
   580 op shl *tmp295 :createBlockMaskRow:result 1
   581 op add *tmp296 :createCombinedMask:x 2
   582 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   583 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label321
-    * label *label322
   584 op shl *tmp295 :createBlockMaskRow:result 1
   585 op add *tmp296 :createCombinedMask:x 1
   586 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   587 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label323
-    * label *label324
   588 op shl *tmp295 :createBlockMaskRow:result 1
   589 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   590 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label325
-    * label *label326
   591 op shl *tmp295 :createBlockMaskRow:result 1
   592 op add *tmp296 :createCombinedMask:x -1
   593 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   594 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label327
-    * label *label328
   595 op shl *tmp295 :createBlockMaskRow:result 1
   596 op add *tmp296 :createCombinedMask:x -2
   597 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   598 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label329
-    * label *label330
   599 op shl *tmp295 :createBlockMaskRow:result 1
   600 op add *tmp296 :createCombinedMask:x -3
   601 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   602 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label331
-    * label *label332
   603 op shl *tmp295 :createBlockMaskRow:result 1
   604 op add *tmp296 :createCombinedMask:x -4
   605 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   606 op or :createAdjacentMask:row1 *tmp295 *tmp297
-    * label *label333
-    * label *label334
-    * label *label335
-    * label *label248
-    * label *label249
   607 op add *tmp309 :createCombinedMask:y 2
-    * label *label336
-    * label *label337
-    * label *label338
   608 op add *tmp296 :createCombinedMask:x 4
   609 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label339
-    * label *label340
   610 op shl *tmp295 :createBlockMaskRow:result 1
   611 op add *tmp296 :createCombinedMask:x 3
   612 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   613 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label341
-    * label *label342
   614 op shl *tmp295 :createBlockMaskRow:result 1
   615 op add *tmp296 :createCombinedMask:x 2
   616 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   617 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label343
-    * label *label344
   618 op shl *tmp295 :createBlockMaskRow:result 1
   619 op add *tmp296 :createCombinedMask:x 1
   620 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   621 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label345
-    * label *label346
   622 op shl *tmp295 :createBlockMaskRow:result 1
   623 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   624 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label347
-    * label *label348
   625 op shl *tmp295 :createBlockMaskRow:result 1
   626 op add *tmp296 :createCombinedMask:x -1
   627 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   628 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label349
-    * label *label350
   629 op shl *tmp295 :createBlockMaskRow:result 1
   630 op add *tmp296 :createCombinedMask:x -2
   631 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   632 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label351
-    * label *label352
   633 op shl *tmp295 :createBlockMaskRow:result 1
   634 op add *tmp296 :createCombinedMask:x -3
   635 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   636 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label353
-    * label *label354
   637 op shl *tmp295 :createBlockMaskRow:result 1
   638 op add *tmp296 :createCombinedMask:x -4
   639 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   640 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label355
-    * label *label356
-    * label *label357
   641 op shl *tmp311 :createAdjacentMask:row1 1
   642 op or *tmp312 :createAdjacentMask:row2 *tmp311
   643 op shr *tmp313 :createAdjacentMask:row1 1
 
   646 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   647 set :createAdjacentMask:row2 :createAdjacentMask:row1
   648 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label251
-    * label *label252
   649 op add *tmp309 :createCombinedMask:y 1
-    * label *label358
-    * label *label359
-    * label *label360
   650 op add *tmp296 :createCombinedMask:x 4
   651 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label361
-    * label *label362
   652 op shl *tmp295 :createBlockMaskRow:result 1
   653 op add *tmp296 :createCombinedMask:x 3
   654 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   655 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label363
-    * label *label364
   656 op shl *tmp295 :createBlockMaskRow:result 1
   657 op add *tmp296 :createCombinedMask:x 2
   658 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   659 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label365
-    * label *label366
   660 op shl *tmp295 :createBlockMaskRow:result 1
   661 op add *tmp296 :createCombinedMask:x 1
   662 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   663 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label367
-    * label *label368
   664 op shl *tmp295 :createBlockMaskRow:result 1
   665 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   666 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label369
-    * label *label370
   667 op shl *tmp295 :createBlockMaskRow:result 1
   668 op add *tmp296 :createCombinedMask:x -1
   669 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   670 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label371
-    * label *label372
   671 op shl *tmp295 :createBlockMaskRow:result 1
   672 op add *tmp296 :createCombinedMask:x -2
   673 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   674 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label373
-    * label *label374
   675 op shl *tmp295 :createBlockMaskRow:result 1
   676 op add *tmp296 :createCombinedMask:x -3
   677 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   678 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label375
-    * label *label376
   679 op shl *tmp295 :createBlockMaskRow:result 1
   680 op add *tmp296 :createCombinedMask:x -4
   681 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   682 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label377
-    * label *label378
-    * label *label379
   683 op shl *tmp311 :createAdjacentMask:row1 1
   684 op or *tmp312 :createAdjacentMask:row2 *tmp311
   685 op shr *tmp313 :createAdjacentMask:row1 1
 
   690 op or :createAdjacentMask:result *tmp316 *tmp317
   691 set :createAdjacentMask:row2 :createAdjacentMask:row1
   692 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label254
-    * label *label255
-    * label *label380
-    * label *label381
-    * label *label382
   693 op add *tmp296 :createCombinedMask:x 4
   694 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label383
-    * label *label384
   695 op shl *tmp295 :createBlockMaskRow:result 1
   696 op add *tmp296 :createCombinedMask:x 3
   697 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   698 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label385
-    * label *label386
   699 op shl *tmp295 :createBlockMaskRow:result 1
   700 op add *tmp296 :createCombinedMask:x 2
   701 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   702 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label387
-    * label *label388
   703 op shl *tmp295 :createBlockMaskRow:result 1
   704 op add *tmp296 :createCombinedMask:x 1
   705 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   706 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label389
-    * label *label390
   707 op shl *tmp295 :createBlockMaskRow:result 1
   708 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   709 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label391
-    * label *label392
   710 op shl *tmp295 :createBlockMaskRow:result 1
   711 op add *tmp296 :createCombinedMask:x -1
   712 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   713 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label393
-    * label *label394
   714 op shl *tmp295 :createBlockMaskRow:result 1
   715 op add *tmp296 :createCombinedMask:x -2
   716 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   717 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label395
-    * label *label396
   718 op shl *tmp295 :createBlockMaskRow:result 1
   719 op add *tmp296 :createCombinedMask:x -3
   720 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   721 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label397
-    * label *label398
   722 op shl *tmp295 :createBlockMaskRow:result 1
   723 op add *tmp296 :createCombinedMask:x -4
   724 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   725 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label399
-    * label *label400
-    * label *label401
   726 op shl *tmp311 :createAdjacentMask:row1 1
   727 op or *tmp312 :createAdjacentMask:row2 *tmp311
   728 op shr *tmp313 :createAdjacentMask:row1 1
 
   733 op or :createAdjacentMask:result *tmp316 *tmp317
   734 set :createAdjacentMask:row2 :createAdjacentMask:row1
   735 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label257
-    * label *label258
   736 op add *tmp309 :createCombinedMask:y -1
-    * label *label402
-    * label *label403
-    * label *label404
   737 op add *tmp296 :createCombinedMask:x 4
   738 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label405
-    * label *label406
   739 op shl *tmp295 :createBlockMaskRow:result 1
   740 op add *tmp296 :createCombinedMask:x 3
   741 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   742 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label407
-    * label *label408
   743 op shl *tmp295 :createBlockMaskRow:result 1
   744 op add *tmp296 :createCombinedMask:x 2
   745 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   746 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label409
-    * label *label410
   747 op shl *tmp295 :createBlockMaskRow:result 1
   748 op add *tmp296 :createCombinedMask:x 1
   749 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   750 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label411
-    * label *label412
   751 op shl *tmp295 :createBlockMaskRow:result 1
   752 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   753 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label413
-    * label *label414
   754 op shl *tmp295 :createBlockMaskRow:result 1
   755 op add *tmp296 :createCombinedMask:x -1
   756 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   757 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label415
-    * label *label416
   758 op shl *tmp295 :createBlockMaskRow:result 1
   759 op add *tmp296 :createCombinedMask:x -2
   760 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   761 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label417
-    * label *label418
   762 op shl *tmp295 :createBlockMaskRow:result 1
   763 op add *tmp296 :createCombinedMask:x -3
   764 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   765 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label419
-    * label *label420
   766 op shl *tmp295 :createBlockMaskRow:result 1
   767 op add *tmp296 :createCombinedMask:x -4
   768 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   769 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label421
-    * label *label422
-    * label *label423
   770 op shl *tmp311 :createAdjacentMask:row1 1
   771 op or *tmp312 :createAdjacentMask:row2 *tmp311
   772 op shr *tmp313 :createAdjacentMask:row1 1
 
   777 op or :createAdjacentMask:result *tmp316 *tmp317
   778 set :createAdjacentMask:row2 :createAdjacentMask:row1
   779 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label260
-    * label *label261
   780 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * label *label424
-    * label *label425
-    * label *label426
   781 op add *tmp296 :createCombinedMask:x 4
   782 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label427
-    * label *label428
   783 op shl *tmp295 :createBlockMaskRow:result 1
   784 op add *tmp296 :createCombinedMask:x 3
   785 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   786 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label429
-    * label *label430
   787 op shl *tmp295 :createBlockMaskRow:result 1
   788 op add *tmp296 :createCombinedMask:x 2
   789 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   790 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label431
-    * label *label432
   791 op shl *tmp295 :createBlockMaskRow:result 1
   792 op add *tmp296 :createCombinedMask:x 1
   793 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   794 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label433
-    * label *label434
   795 op shl *tmp295 :createBlockMaskRow:result 1
   796 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   797 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label435
-    * label *label436
   798 op shl *tmp295 :createBlockMaskRow:result 1
   799 op add *tmp296 :createCombinedMask:x -1
   800 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   801 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label437
-    * label *label438
   802 op shl *tmp295 :createBlockMaskRow:result 1
   803 op add *tmp296 :createCombinedMask:x -2
   804 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   805 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label439
-    * label *label440
   806 op shl *tmp295 :createBlockMaskRow:result 1
   807 op add *tmp296 :createCombinedMask:x -3
   808 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   809 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label441
-    * label *label442
   810 op shl *tmp295 :createBlockMaskRow:result 1
   811 op add *tmp296 :createCombinedMask:x -4
   812 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   813 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label443
-    * label *label444
-    * label *label445
   814 op shl *tmp311 :createAdjacentMask:row1 1
   815 op or *tmp312 :createAdjacentMask:row2 *tmp311
   816 op shr *tmp313 :createAdjacentMask:row1 1
 
   821 op or :createAdjacentMask:result *tmp316 *tmp317
   822 set :createAdjacentMask:row2 :createAdjacentMask:row1
   823 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label263
   824 op sub :createAdjacentMask:r -2 1
-    * label *label264
   825 op add *tmp309 :createCombinedMask:y -3
   826 set :createBlockMaskRow:x :createCombinedMask:x
   827 set :createBlockMaskRow:y *tmp309
 
   838 op or :createAdjacentMask:result *tmp316 *tmp317
   839 set :createAdjacentMask:row2 :createAdjacentMask:row1
   840 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label266
   841 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label267
   842 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   843 set :createBlockMaskRow:x :createAdjacentMask:x
   844 set :createBlockMaskRow:y *tmp309
 
   855 op or :createAdjacentMask:result *tmp316 *tmp317
   856 set :createAdjacentMask:row2 :createAdjacentMask:row1
   857 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label269
   858 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label149
   859 op shr *tmp304 :createAdjacentMask:result 1
-    * label *label144
   860 label *label151
   861 wait 1e-15
   862 read *tmp320 processor4 ":createTerrainMask*finished"
 
   873 call *label10 *invalid :excludeArea*retval (m:*label152) (h:*label152)
   874 label *label152
   875 set :createCombinedMask*retval :excludeArea*retval
-    * label *label143
   876 return :createCombinedMask*retaddr
   877 end
   878 label *label15
 
   886 set .water1X -1
   887 set :moveTo.5:x .drillX
   888 set :moveTo.5:y .drillY
-    * label *label155
   889 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   890 jump *label157 notEqual *tmp323 false
   891 label *label271
   892 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label156
   893 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   894 jump *label271 equal *tmp323 false
   895 label *label157
-    * label *label154
   896 set :createCombinedMask:x .drillX
   897 set :createCombinedMask:y .drillY
   898 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
 
   917 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   918 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   919 label *label160
-    * label *label161
   920 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   921 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   922 set :findPossiblePlacement:width 2
 
   932 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   933 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   934 label *label163
-    * label *label164
   935 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   936 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   937 set :findPossiblePlacement:placementMask 1
 
   944 set :layoutThoriumDrillAtLocation*retval false
   945 jump *label153 always
   946 label *label166
-    * label *label167
   947 op add .node1X .drillX :findPossiblePlacement:x
   948 op add .node1Y .drillY :findPossiblePlacement:y
   949 op shl *tmp352 1 :findPossiblePlacement*retval
 
   962 set :layoutThoriumDrillAtLocation*retval true
   963 jump *label153 always
   964 label *label169
-    * label *label170
   965 set :layoutThoriumDrillAtLocation:sx 3
   966 set :layoutThoriumDrillAtLocation:sy 3
   967 setaddr *tmp355 *label174
 
   989 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   990 label *label178
   991 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label282
   992 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   993 op greaterThan *tmp162 *tmp161 6
   994 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
 
   998 set :shiftMask*retval 0
   999 jump *label291 always
  1000 label *label283
-    * label *label284
  1001 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
  1002 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
  1003 jump *label285 lessThanEq :shiftMask:shift 0
 
  1014 jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0
  1015 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
  1016 label *label287
-    * label *label288
  1017 op shl *tmp181 :shiftMask:keep 7
  1018 op or :shiftMask:keep :shiftMask:keep *tmp181
  1019 op shl *tmp182 :shiftMask:keep 14
 
  1022 op or :shiftMask:keep :shiftMask:keep *tmp183
  1023 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
  1024 label *label289
-    * label *label290
  1025 set :shiftMask*retval :shiftMask:mask
  1026 label *label291
  1027 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
  1039 set :layoutThoriumDrillAtLocation*retval true
  1040 jump *label153 always
  1041 label *label181
-    * label *label182
-    * label *label172
  1042 multijump *tmp355 0 0 (m:marker0)
  1043 multilabel *label177 (m:marker0)
-    * label *label173
  1044 set :layoutThoriumDrillAtLocation*retval true
  1045 label *label153
  1046 return :layoutThoriumDrillAtLocation*retaddr
 
  1062 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1063 set .searchFinished true
  1064 set :findDrillLocation*retval true
-    * label *label183
  1065 set :findDrillLocation*finished true
  1066 jump *label18 always
  1067 end
 
  1082 set :layoutThoriumDrill*retval false
  1083 jump *label185 always
  1084 label *label187
-    * label *label188
  1085 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)
  1086 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label189) (h:*label189)
  1087 label *label189
 
  1095 set .mapTotal 0
  1096 set .mapProgress 0
  1097 ucontrol unbind
-    * label *label190
  1098 set :stopLocation*finished true
  1099 jump *label18 always
  1100 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-11 instructions):
 
    97 op sub *tmp64 :locateOreAway:y *tmp45
    98 op len :locateOreAway:unitDist *tmp63 *tmp64
    99 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label30 always
+  100 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
   101 label *label42
   102 label *label40
   103 jump *label44 lessThan :locateOreAway:coreDist 8
 
   179 op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   180 op abs *tmp117 *tmp116
   181 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
-    * jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
-    * jump *label67 always
+  182 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
   183 label *label69
   184 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   185 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
 
   207 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   208 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   209 label *label78
-    * jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label67 always
+  210 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   211 label *label80
   212 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   213 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   257 op shl *tmp203 1 :excludeArea:blockSizeX
   258 op sub :createMatrixOfSize:row *tmp203 1
   259 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * jump *label225 lessThan 1 :excludeArea:blockSizeY
-    * jump *label102 always
+  260 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
   261 label *label225
   262 op shl *tmp207 :createMatrixOfSize:row 7
   263 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label229 lessThan 2 :excludeArea:blockSizeY
-    * jump *label102 always
+  264 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
   265 label *label229
   266 op shl *tmp207 :createMatrixOfSize:matrix 7
   267 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label233 lessThan 3 :excludeArea:blockSizeY
-    * jump *label102 always
+  268 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
   269 label *label233
   270 op shl *tmp207 :createMatrixOfSize:matrix 7
   271 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label237 lessThan 4 :excludeArea:blockSizeY
-    * jump *label102 always
+  272 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
   273 label *label237
   274 op shl *tmp207 :createMatrixOfSize:matrix 7
   275 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label241 lessThan 5 :excludeArea:blockSizeY
-    * jump *label102 always
+  276 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
   277 label *label241
   278 op shl *tmp207 :createMatrixOfSize:matrix 7
   279 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label245 lessThan 6 :excludeArea:blockSizeY
-    * jump *label102 always
+  280 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
   281 label *label245
   282 op shl *tmp207 :createMatrixOfSize:matrix 7
   283 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
 
   350 jump *label106 always
   351 label *label113
   352 op sub *tmp225 3 :findPossiblePlacement:width
-    * jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
-    * jump *label112 always
+  353 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
   354 label *label115
   355 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   356 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   357 jump *label199 lessThanEq :findPossiblePlacement:x 3
   358 label *label112
   359 op sub *tmp228 3 :findPossiblePlacement:height
-    * jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
-    * jump *label109 always
+  360 jump *label109 greaterThan :findPossiblePlacement:y *tmp228
   361 label *label117
   362 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   363 jump *label198 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    98 op len :locateOreAway:unitDist *tmp63 *tmp64
    99 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   100 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label42
   101 label *label40
   102 jump *label44 lessThan :locateOreAway:coreDist 8
   103 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   179 op abs *tmp117 *tmp116
   180 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   181 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
-    * label *label69
   182 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   183 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   184 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   206 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   207 label *label78
   208 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label80
   209 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   210 op mul :round:x :findDrillLocationLocal:diffX 1.1
   211 op add *tmp143 :round:x 0.5
 
   255 op sub :createMatrixOfSize:row *tmp203 1
   256 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   257 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
-    * label *label225
   258 op shl *tmp207 :createMatrixOfSize:row 7
   259 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   260 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
-    * label *label229
   261 op shl *tmp207 :createMatrixOfSize:matrix 7
   262 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   263 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
-    * label *label233
   264 op shl *tmp207 :createMatrixOfSize:matrix 7
   265 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   266 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
-    * label *label237
   267 op shl *tmp207 :createMatrixOfSize:matrix 7
   268 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   269 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
-    * label *label241
   270 op shl *tmp207 :createMatrixOfSize:matrix 7
   271 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   272 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
-    * label *label245
   273 op shl *tmp207 :createMatrixOfSize:matrix 7
   274 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   275 label *label102
 
   342 label *label113
   343 op sub *tmp225 3 :findPossiblePlacement:width
   344 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
-    * label *label115
   345 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   346 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   347 jump *label199 lessThanEq :findPossiblePlacement:x 3
   348 label *label112
   349 op sub *tmp228 3 :findPossiblePlacement:height
   350 jump *label109 greaterThan :findPossiblePlacement:y *tmp228
-    * label *label117
   351 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   352 jump *label198 lessThanEq :findPossiblePlacement:y 3
   353 label *label109

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   143 set :findDrillLocationLocal:oreY :locateOreAway:y
   144 jump *label56 notEqual *tmp28 false
   145 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label19 always
+  146 return :findDrillLocationLocal*retaddr
   147 label *label56
   148 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   149 op add .mapSpots .mapSpots 1
 
   197 op add .locations .locations 1
   198 ucontrol unbind
   199 set :findDrillLocationLocal*retval true
-    * jump *label19 always
+  200 return :findDrillLocationLocal*retaddr
   201 label *label75
   202 label *label71
   203 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   217 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
   218 jump *label65 always
   219 label *label67
-    * jump *label84 lessThan :findDrillLocationLocal:best 0
+  220 jump *label25 lessThan :findDrillLocationLocal:best 0
   221 op add .count .count 1
   222 sensor *tmp153 :findDrillLocationLocal:item @id
   223 write *tmp153 bank1 .count
 
   315 set :shiftMask*retval :shiftMask:mask
   316 label *label281
   317 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
-    * jump *label96 always
-    * jump *label98 always
+  318 return :excludeArea*retaddr
+  319 return :excludeArea*retaddr
   320 label *label97
   321 set :excludeArea*retval :excludeArea:mask
   322 label *label98
 
   338 op mul *tmp222 :findPossiblePlacement:y 7
   339 op add *tmp223 24 *tmp222
   340 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
-    * jump *label106 always
+  341 return :findPossiblePlacement*retaddr
   342 label *label113
   343 op sub *tmp225 3 :findPossiblePlacement:width
   344 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
 
   366 jump *label121 lessThan :findPossiblePlacement*retval 0
   367 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   368 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  369 return :tryPlaceGenerator*retaddr
   370 label *label123
   371 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   372 op add .water2X *tmp236 :findPossiblePlacement:x
 
   388 label *label125
   389 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   390 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  391 return :tryPlaceGenerator*retaddr
   392 label *label126
   393 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   394 op add .water2X *tmp248 :findPossiblePlacement:x
 
   410 label *label128
   411 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   412 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  413 return :tryPlaceGenerator*retaddr
   414 label *label129
   415 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   416 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   425 label *label131
   426 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   427 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  428 return :tryPlaceGenerator*retaddr
   429 label *label132
   430 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   431 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   460 label *label136
   461 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   462 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  463 return :tryPlaceGenerator*retaddr
   464 label *label137
   465 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   466 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   467 label *label134
   468 set :tryPlaceGenerator*retval true
-    * jump *label119 always
+  469 return :tryPlaceGenerator*retaddr
   470 label *label119
   471 return :tryPlaceGenerator*retaddr
   472 end
 
   920 label *label165
   921 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   922 set :layoutThoriumDrillAtLocation*retval false
-    * jump *label153 always
+  923 return :layoutThoriumDrillAtLocation*retaddr
   924 label *label166
   925 op add .node1X .drillX :findPossiblePlacement:x
   926 op add .node1Y .drillY :findPossiblePlacement:y
 
   938 label *label168
   939 jump *label169 equal :tryPlaceGenerator*retval false
   940 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
+  941 return :layoutThoriumDrillAtLocation*retaddr
   942 label *label169
   943 set :layoutThoriumDrillAtLocation:sx 3
   944 set :layoutThoriumDrillAtLocation:sy 3
 
  1015 label *label180
  1016 jump *label181 equal :tryPlaceGenerator*retval false
  1017 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
+ 1018 return :layoutThoriumDrillAtLocation*retaddr
  1019 label *label181
  1020 multijump *tmp355 0 0 (m:marker0)
  1021 multilabel *label177 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-15 instructions):
 
    12 label *label18
    13 wait 1e12
    14 jump *label18 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   227 op add .count .count 1
   228 write :findDrillLocationLocal:bestY bank1 .count
   229 op add .locations .locations 1
-    * label *label84
   230 jump *label25 always
-    * set :findDrillLocationLocal*retval null
-    * label *label19
-    * return :findDrillLocationLocal*retaddr
-    * end
   231 label *label10
   232 op add *tmp185 :excludeArea:areaWidth 8
   233 op idiv *tmp186 *tmp185 2
 
   310 label *label281
   311 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   312 return :excludeArea*retaddr
-    * return :excludeArea*retaddr
   313 label *label97
   314 set :excludeArea*retval :excludeArea:mask
-    * label *label98
-    * label *label96
   315 return :excludeArea*retaddr
-    * end
   316 label *label11
   317 set :findPossiblePlacement:y -3
   318 jump *label109 greaterThan :findPossiblePlacement:y 3
 
   342 jump *label198 lessThanEq :findPossiblePlacement:y 3
   343 label *label109
   344 set :findPossiblePlacement*retval -1
-    * label *label106
   345 return :findPossiblePlacement*retaddr
-    * end
   346 label *label12
   347 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   348 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
 
   455 label *label134
   456 set :tryPlaceGenerator*retval true
   457 return :tryPlaceGenerator*retaddr
-    * label *label119
-    * return :tryPlaceGenerator*retaddr
-    * end
   458 label *label13
   459 op add *tmp296 :createBlockMaskRow:x 4
   460 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
 
   490 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   491 op or :createBlockMaskRow*retval *tmp295 *tmp297
   492 return :createBlockMaskRow*retaddr
-    * end
   493 label *label14
   494 write @unit processor4 ":createTerrainMask:unit"
   495 write :createCombinedMask:x processor4 ":createTerrainMask:x"
 
   836 label *label152
   837 set :createCombinedMask*retval :excludeArea*retval
   838 return :createCombinedMask*retaddr
-    * end
   839 label *label15
   840 set .panelY -1
   841 set .panelX -1
 
  1003 multijump *tmp355 0 0 (m:marker0)
  1004 multilabel *label177 (m:marker0)
  1005 set :layoutThoriumDrillAtLocation*retval true
-    * label *label153
  1006 return :layoutThoriumDrillAtLocation*retaddr
-    * end
  1007 label *label2
  1008 set .searchFinished false
  1009 set :findDrillLocationLocal:x :findDrillLocation:x
 
  1023 set :findDrillLocation*retval true
  1024 set :findDrillLocation*finished true
  1025 jump *label18 always
-    * end
  1026 label *label3
  1027 set :findDrillLocationLocal:x :layoutThoriumDrill:x
  1028 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1047 label *label185
  1048 set :layoutThoriumDrill*finished true
  1049 jump *label18 always
-    * end
  1050 label *label4
  1051 set .mapSpots 0
  1052 set .mapTotal 0
 
  1054 ucontrol unbind
  1055 set :stopLocation*finished true
  1056 jump *label18 always
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    82 op add .angle .angle *tmp51
    83 op mul .mapProgress .angle .angle
    84 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+   85 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 0
    86 jump *label38 notEqual *tmp54 false
    87 set *tmp28 false
    88 jump *label28 always
 
   457 return :tryPlaceGenerator*retaddr
   458 label *label13
   459 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  460 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   461 op shl *tmp295 :createBlockMaskRow:result 1
   462 op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  463 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   464 op or :createBlockMaskRow:result *tmp295 *tmp297
   465 op shl *tmp295 :createBlockMaskRow:result 1
   466 op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  467 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   468 op or :createBlockMaskRow:result *tmp295 *tmp297
   469 op shl *tmp295 :createBlockMaskRow:result 1
   470 op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  471 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   472 op or :createBlockMaskRow:result *tmp295 *tmp297
   473 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  474 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp297 0
   475 op or :createBlockMaskRow:result *tmp295 *tmp297
   476 op shl *tmp295 :createBlockMaskRow:result 1
   477 op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  478 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   479 op or :createBlockMaskRow:result *tmp295 *tmp297
   480 op shl *tmp295 :createBlockMaskRow:result 1
   481 op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  482 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   483 op or :createBlockMaskRow:result *tmp295 *tmp297
   484 op shl *tmp295 :createBlockMaskRow:result 1
   485 op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  486 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   487 op or :createBlockMaskRow:result *tmp295 *tmp297
   488 op shl *tmp295 :createBlockMaskRow:result 1
   489 op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  490 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   491 op or :createBlockMaskRow*retval *tmp295 *tmp297
   492 return :createBlockMaskRow*retaddr
   493 label *label14
 
   500 set :createAdjacentMask:y :createCombinedMask:y
   501 op add *tmp305 :createCombinedMask:y 4
   502 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
+  503 ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:result 0
   504 op shl *tmp295 :createBlockMaskRow:result 1
   505 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  506 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   507 op or :createBlockMaskRow:result *tmp295 *tmp297
   508 op shl *tmp295 :createBlockMaskRow:result 1
   509 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  510 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   511 op or :createBlockMaskRow:result *tmp295 *tmp297
   512 op shl *tmp295 :createBlockMaskRow:result 1
   513 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  514 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   515 op or :createBlockMaskRow:result *tmp295 *tmp297
   516 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
+  517 ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0
   518 op or :createBlockMaskRow:result *tmp295 *tmp297
   519 op shl *tmp295 :createBlockMaskRow:result 1
   520 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  521 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   522 op or :createBlockMaskRow:result *tmp295 *tmp297
   523 op shl *tmp295 :createBlockMaskRow:result 1
   524 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  525 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   526 op or :createBlockMaskRow:result *tmp295 *tmp297
   527 op shl *tmp295 :createBlockMaskRow:result 1
   528 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  529 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   530 op or :createBlockMaskRow:result *tmp295 *tmp297
   531 op shl *tmp295 :createBlockMaskRow:result 1
   532 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  533 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   534 op or :createAdjacentMask:row2 *tmp295 *tmp297
   535 op add *tmp307 :createCombinedMask:y 3
   536 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
+  537 ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:result 0
   538 op shl *tmp295 :createBlockMaskRow:result 1
   539 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  540 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   541 op or :createBlockMaskRow:result *tmp295 *tmp297
   542 op shl *tmp295 :createBlockMaskRow:result 1
   543 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  544 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   545 op or :createBlockMaskRow:result *tmp295 *tmp297
   546 op shl *tmp295 :createBlockMaskRow:result 1
   547 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  548 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   549 op or :createBlockMaskRow:result *tmp295 *tmp297
   550 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
+  551 ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0
   552 op or :createBlockMaskRow:result *tmp295 *tmp297
   553 op shl *tmp295 :createBlockMaskRow:result 1
   554 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  555 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   556 op or :createBlockMaskRow:result *tmp295 *tmp297
   557 op shl *tmp295 :createBlockMaskRow:result 1
   558 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  559 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   560 op or :createBlockMaskRow:result *tmp295 *tmp297
   561 op shl *tmp295 :createBlockMaskRow:result 1
   562 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  563 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   564 op or :createBlockMaskRow:result *tmp295 *tmp297
   565 op shl *tmp295 :createBlockMaskRow:result 1
   566 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  567 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   568 op or :createAdjacentMask:row1 *tmp295 *tmp297
   569 op add *tmp309 :createCombinedMask:y 2
   570 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  571 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   572 op shl *tmp295 :createBlockMaskRow:result 1
   573 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  574 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   575 op or :createBlockMaskRow:result *tmp295 *tmp297
   576 op shl *tmp295 :createBlockMaskRow:result 1
   577 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  578 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
   580 op shl *tmp295 :createBlockMaskRow:result 1
   581 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  582 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   583 op or :createBlockMaskRow:result *tmp295 *tmp297
   584 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  585 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   586 op or :createBlockMaskRow:result *tmp295 *tmp297
   587 op shl *tmp295 :createBlockMaskRow:result 1
   588 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  589 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   590 op or :createBlockMaskRow:result *tmp295 *tmp297
   591 op shl *tmp295 :createBlockMaskRow:result 1
   592 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  593 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   594 op or :createBlockMaskRow:result *tmp295 *tmp297
   595 op shl *tmp295 :createBlockMaskRow:result 1
   596 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  597 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   598 op or :createBlockMaskRow:result *tmp295 *tmp297
   599 op shl *tmp295 :createBlockMaskRow:result 1
   600 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  601 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   602 op or :createBlockMaskRow:result *tmp295 *tmp297
   603 op shl *tmp311 :createAdjacentMask:row1 1
   604 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   610 set :createAdjacentMask:row1 :createBlockMaskRow:result
   611 op add *tmp309 :createCombinedMask:y 1
   612 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  613 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   614 op shl *tmp295 :createBlockMaskRow:result 1
   615 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  616 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   617 op or :createBlockMaskRow:result *tmp295 *tmp297
   618 op shl *tmp295 :createBlockMaskRow:result 1
   619 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  620 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   621 op or :createBlockMaskRow:result *tmp295 *tmp297
   622 op shl *tmp295 :createBlockMaskRow:result 1
   623 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  624 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   625 op or :createBlockMaskRow:result *tmp295 *tmp297
   626 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  627 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   628 op or :createBlockMaskRow:result *tmp295 *tmp297
   629 op shl *tmp295 :createBlockMaskRow:result 1
   630 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  631 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   632 op or :createBlockMaskRow:result *tmp295 *tmp297
   633 op shl *tmp295 :createBlockMaskRow:result 1
   634 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  635 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   636 op or :createBlockMaskRow:result *tmp295 *tmp297
   637 op shl *tmp295 :createBlockMaskRow:result 1
   638 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  639 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   640 op or :createBlockMaskRow:result *tmp295 *tmp297
   641 op shl *tmp295 :createBlockMaskRow:result 1
   642 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  643 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   644 op or :createBlockMaskRow:result *tmp295 *tmp297
   645 op shl *tmp311 :createAdjacentMask:row1 1
   646 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   653 set :createAdjacentMask:row2 :createAdjacentMask:row1
   654 set :createAdjacentMask:row1 :createBlockMaskRow:result
   655 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
+  656 ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   657 op shl *tmp295 :createBlockMaskRow:result 1
   658 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  659 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   660 op or :createBlockMaskRow:result *tmp295 *tmp297
   661 op shl *tmp295 :createBlockMaskRow:result 1
   662 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  663 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   664 op or :createBlockMaskRow:result *tmp295 *tmp297
   665 op shl *tmp295 :createBlockMaskRow:result 1
   666 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  667 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   668 op or :createBlockMaskRow:result *tmp295 *tmp297
   669 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  670 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp297 0
   671 op or :createBlockMaskRow:result *tmp295 *tmp297
   672 op shl *tmp295 :createBlockMaskRow:result 1
   673 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  674 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   675 op or :createBlockMaskRow:result *tmp295 *tmp297
   676 op shl *tmp295 :createBlockMaskRow:result 1
   677 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  678 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   679 op or :createBlockMaskRow:result *tmp295 *tmp297
   680 op shl *tmp295 :createBlockMaskRow:result 1
   681 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  682 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   683 op or :createBlockMaskRow:result *tmp295 *tmp297
   684 op shl *tmp295 :createBlockMaskRow:result 1
   685 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  686 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   687 op or :createBlockMaskRow:result *tmp295 *tmp297
   688 op shl *tmp311 :createAdjacentMask:row1 1
   689 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   697 set :createAdjacentMask:row1 :createBlockMaskRow:result
   698 op add *tmp309 :createCombinedMask:y -1
   699 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  700 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   701 op shl *tmp295 :createBlockMaskRow:result 1
   702 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  703 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   704 op or :createBlockMaskRow:result *tmp295 *tmp297
   705 op shl *tmp295 :createBlockMaskRow:result 1
   706 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  707 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   708 op or :createBlockMaskRow:result *tmp295 *tmp297
   709 op shl *tmp295 :createBlockMaskRow:result 1
   710 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  711 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   712 op or :createBlockMaskRow:result *tmp295 *tmp297
   713 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  714 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   715 op or :createBlockMaskRow:result *tmp295 *tmp297
   716 op shl *tmp295 :createBlockMaskRow:result 1
   717 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  718 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   719 op or :createBlockMaskRow:result *tmp295 *tmp297
   720 op shl *tmp295 :createBlockMaskRow:result 1
   721 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  722 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   723 op or :createBlockMaskRow:result *tmp295 *tmp297
   724 op shl *tmp295 :createBlockMaskRow:result 1
   725 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  726 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   727 op or :createBlockMaskRow:result *tmp295 *tmp297
   728 op shl *tmp295 :createBlockMaskRow:result 1
   729 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  730 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   731 op or :createBlockMaskRow:result *tmp295 *tmp297
   732 op shl *tmp311 :createAdjacentMask:row1 1
   733 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   741 set :createAdjacentMask:row1 :createBlockMaskRow:result
   742 op add :createBlockMaskRow:y :createCombinedMask:y -2
   743 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  744 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   745 op shl *tmp295 :createBlockMaskRow:result 1
   746 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  747 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   748 op or :createBlockMaskRow:result *tmp295 *tmp297
   749 op shl *tmp295 :createBlockMaskRow:result 1
   750 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  751 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   752 op or :createBlockMaskRow:result *tmp295 *tmp297
   753 op shl *tmp295 :createBlockMaskRow:result 1
   754 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  755 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   756 op or :createBlockMaskRow:result *tmp295 *tmp297
   757 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  758 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp297 0
   759 op or :createBlockMaskRow:result *tmp295 *tmp297
   760 op shl *tmp295 :createBlockMaskRow:result 1
   761 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  762 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   763 op or :createBlockMaskRow:result *tmp295 *tmp297
   764 op shl *tmp295 :createBlockMaskRow:result 1
   765 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  766 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   767 op or :createBlockMaskRow:result *tmp295 *tmp297
   768 op shl *tmp295 :createBlockMaskRow:result 1
   769 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  770 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   771 op or :createBlockMaskRow:result *tmp295 *tmp297
   772 op shl *tmp295 :createBlockMaskRow:result 1
   773 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  774 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   775 op or :createBlockMaskRow*retval *tmp295 *tmp297
   776 op shl *tmp311 :createAdjacentMask:row1 1
   777 op or *tmp312 :createAdjacentMask:row2 *tmp311

Final code before resolving virtual instructions:

    0:  jump *label16 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label16                                               ...
        label *label17                                               OreLocator.mnd: require "Matrices.mnd" remote matrices;
    4:  read *tmp11 processor4 "*signature"                          ...
    5:  jump *label17 notEqual *tmp11 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label18                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label18 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set .coreX :findDrillLocationLocal:x                         OreLocator.mnd: coreX = x;
   15:  set .coreY :findDrillLocationLocal:y                         OreLocator.mnd: coreY = y;
   16:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   17:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   18:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   19:  set .mapSpots :findDrillLocationLocal:dx                     ...
   20:  op sub *tmp13 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   21:  op sub *tmp14 @maph :findDrillLocationLocal:y                ...
   22:  op max *tmp15 :findDrillLocationLocal:x :findDrillLocationLo ...
   23:  op max *tmp15 *tmp15 *tmp13                                  ...
   24:  op max *tmp15 *tmp15 *tmp14                                  ...
   25:  set :findDrillLocationLocal:distanceLimit *tmp15             ...
   26:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   27:  set .mapProgress 0                                           ...
   28:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   29:  jump *label24 notEqual *tmp18 false                          ...
        label *label270                                              ...
   30:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   31:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   32:  jump *label270 equal *tmp18 false                            ...
        label *label24                                               ...
   33:  op div *tmp21 *tmp15 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   34:  op pow .mapTotal *tmp21 2                                    ...
   35:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   36:  set :findDrillLocationLocal:oreY 0                           ...
        label *label25                                               OreLocator.mnd: while true do
   37:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   38:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   39:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   40:  op sub *tmp23 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   41:  op mul :findDrillLocationLocal:maxDistance *tmp23 .attenuati ...
   42:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   43:  op div *tmp26 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   44:  op pow .mapTotal *tmp26 2                                    ...
   45:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   46:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   47:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   48:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   49:  set :locateOreAway:lastY -1                                  ...
   50:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   51:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   52:  op sub *tmp37 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   53:  op sub *tmp44 @maph 5                                        ...
   54:  jump *label31 greaterThanEq :locateOreAway:distance :findDri ...
        label *label195                                              ...
   55:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   56:  op sin *tmp34 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   57:  op mul *tmp35 *tmp34 :locateOreAway:distance                 ...
   58:  op add *tmp36 :findDrillLocationLocal:x *tmp35               ...
   59:  op max *tmp39 *tmp36 5                                       OreLocator.mnd: min(max(value, low), high);
   60:  op min *tmp38 *tmp39 *tmp37                                  ...
   61:  op cos *tmp41 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   62:  op mul *tmp42 *tmp41 :locateOreAway:distance                 ...
   63:  op add *tmp43 :findDrillLocationLocal:y *tmp42               ...
   64:  op max *tmp46 *tmp43 5                                       OreLocator.mnd: min(max(value, low), high);
   65:  op min *tmp45 *tmp46 *tmp44                                  ...
   66:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   67:  jump *label37 notEqual *tmp48 false                          ...
        label *label202                                              ...
   68:  ucontrol approach *tmp38 *tmp45 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   69:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   70:  jump *label202 equal *tmp48 false                            ...
        label *label37                                               ...
   71:  op div *tmp51 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   72:  op add .angle .angle *tmp51                                  ...
   73:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   74:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   75:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   76:  jump *label38 notEqual *tmp54 false                          ...
   77:  set *tmp28 false                                             OreLocator.mnd: return false;
   78:  jump *label28 always 0 0                                     ...
        label *label38                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   79:  op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   80:  op abs *tmp59 *tmp58 0                                       ...
   81:  op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y     ...
   82:  op abs *tmp61 *tmp60 0                                       ...
   83:  op max :locateOreAway:coreDist *tmp59 *tmp61                 ...
   84:  op sub *tmp63 :locateOreAway:x *tmp38                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   85:  op sub *tmp64 :locateOreAway:y *tmp45                        ...
   86:  op len :locateOreAway:unitDist *tmp63 *tmp64                 ...
   87:  jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   88:  jump *label30 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label40                                               ...
   89:  jump *label44 lessThan :locateOreAway:coreDist 8             OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   90:  jump *label46 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   91:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   92:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   93:  set *tmp75 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   94:  set :visited:i .locationsStart                               ...
   95:  jump *label51 greaterThanEq .locationsStart *tmp75           ...
        label *label196                                              ...
   96:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   97:  op add *tmp78 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   98:  read :visited:lx bank1 *tmp78                                ...
   99:  op add *tmp81 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
  100:  read :visited:ly bank1 *tmp81                                ...
  101:  op sub *tmp83 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  102:  op sub *tmp84 :locateOreAway:y :visited:ly                   ...
  103:  op len *tmp85 *tmp83 *tmp84                                  ...
  104:  jump *label52 greaterThanEq *tmp85 7                         ...
  105:  set *tmp74 true                                              OreLocator.mnd: return true;
  106:  jump *label48 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  107:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  108:  jump *label196 lessThan :visited:i *tmp75                    ...
        label *label51                                               ...
  109:  set *tmp74 false                                             OreLocator.mnd: return false;
        label *label48                                               OreLocator.mnd: if !visited(x, y) then
  110:  jump *label54 notEqual *tmp74 false                          ...
  111:  op div *tmp90 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  112:  op add .angle .angle *tmp90                                  ...
  113:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  114:  printflush message1                                          OreLocator.mnd: printflush(message1);
  115:  set *tmp28 true                                              OreLocator.mnd: return true;
  116:  jump *label28 always 0 0                                     ...
        label *label54                                               OreLocator.mnd: if !visited(x, y) then
        label *label46                                               OreLocator.mnd: if unitDist < distance then
        label *label44                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label30                                               OreLocator.mnd: while distance < distanceLimit do
  117:  jump *label195 lessThan :locateOreAway:distance :findDrillLo ...
        label *label31                                               ...
  118:  set *tmp28 false                                             OreLocator.mnd: return false;
        label *label28                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  119:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  120:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  121:  jump *label56 notEqual *tmp28 false                          ...
  122:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  123:  return :findDrillLocationLocal*retaddr                       ...
        label *label56                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  124:  jump *label58 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  125:  op add .mapSpots .mapSpots 1                                 ...
        label *label58                                               ...
  126:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  127:  jump *label64 notEqual *tmp100 false                         ...
        label *label222                                              ...
  128:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  129:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  130:  jump *label222 equal *tmp100 false                           ...
        label *label64                                               ...
  131:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label65                                               OreLocator.mnd: while true do
  132:  write @unit processor4 ":findBestPosition:unit"              OreLocator.mnd: var score = matrices.findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  133:  write :findDrillLocationLocal:oreX processor4 ":findBestPosi ...
  134:  write :findDrillLocationLocal:oreY processor4 ":findBestPosi ...
  135:  write :findDrillLocationLocal:ore processor4 ":findBestPosit ...
  136:  write :findDrillLocationLocal:size processor4 ":findBestPosi ...
  137:  write false processor4 ":findBestPosition*finished"          ...
  138:  write 2 processor4 "@counter"                                ...
        label *label68                                               ...
  139:  wait 1e-15                                                   ...
  140:  read *tmp110 processor4 ":findBestPosition*finished"         ...
  141:  jump *label68 equal *tmp110 false                            ...
  142:  read :findDrillLocationLocal:diffX processor4 ":findBestPosi ...
  143:  read :findDrillLocationLocal:diffY processor4 ":findBestPosi ...
  144:  read :findDrillLocationLocal:score processor4 ":findBestPosi ...
  145:  op add :findDrillLocationLocal:newX :findDrillLocationLocal: OreLocator.mnd: var newX = oreX + diffX;
  146:  op add :findDrillLocationLocal:newY :findDrillLocationLocal: OreLocator.mnd: var newY = oreY + diffY;
  147:  op sub *tmp114 :findDrillLocationLocal:newX :findDrillLocati OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  148:  op abs *tmp115 *tmp114 0                                     ...
  149:  op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocati ...
  150:  op abs *tmp117 *tmp116 0                                     ...
  151:  op max :findDrillLocationLocal:coreDist *tmp115 *tmp117      ...
  152:  jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8  OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  153:  jump *label71 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  154:  set :findDrillLocationLocal:dx :findDrillLocationLocal:newX  OreLocator.mnd: dx = newX;
  155:  set :findDrillLocationLocal:dy :findDrillLocationLocal:newY  OreLocator.mnd: dy = newY;
  156:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  157:  select .mapSpots lessThan :findDrillLocationLocal:limit 1000 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  158:  jump *label75 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  159:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  160:  sensor *tmp129 :findDrillLocationLocal:item @id              ...
  161:  write *tmp129 bank1 .count                                   ...
  162:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  163:  write :findDrillLocationLocal:score bank1 .count             ...
  164:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  165:  write :findDrillLocationLocal:dx bank1 .count                ...
  166:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  167:  write :findDrillLocationLocal:dy bank1 .count                ...
  168:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  169:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  170:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  171:  return :findDrillLocationLocal*retaddr                       ...
        label *label75                                               OreLocator.mnd: if capacity >= limit then
        label *label71                                               OreLocator.mnd: if score > capacity then
  172:  jump *label78 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  173:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:ne OreLocator.mnd: bestX = newX;
  174:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:ne OreLocator.mnd: bestY = newY;
  175:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label78                                               OreLocator.mnd: if score > best then
  176:  jump *label67 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  177:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  178:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  179:  op add *tmp143 :round:x 0.5                                  *math: floor(x + 0.5);
  180:  op floor *tmp142 *tmp143 0                                   ...
  181:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  182:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  183:  op add *tmp147 :round.1:x 0.5                                *math: floor(x + 0.5);
  184:  op floor *tmp146 *tmp147 0                                   ...
  185:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: OreLocator.mnd: oreY += round(diffY * 1.1);
  186:  jump *label65 always 0 0                                     OreLocator.mnd: while true do
        label *label67                                               ...
  187:  jump *label25 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  188:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  189:  sensor *tmp153 :findDrillLocationLocal:item @id              ...
  190:  write *tmp153 bank1 .count                                   ...
  191:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  192:  write :findDrillLocationLocal:best bank1 .count              ...
  193:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  194:  write :findDrillLocationLocal:bestX bank1 .count             ...
  195:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  196:  write :findDrillLocationLocal:bestY bank1 .count             ...
  197:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  198:  jump *label25 always 0 0                                     OreLocator.mnd: while true do
        label *label10                                               OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
  199:  op add *tmp185 :excludeArea:areaWidth 8                      OreLocator.mnd: var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
  200:  op idiv *tmp186 *tmp185 2                                    ...
  201:  op sub *tmp187 :excludeArea:maskX :excludeArea:areaX         ...
  202:  op abs *tmp188 *tmp187 0                                     ...
  203:  op sub :excludeArea:overlapX *tmp186 *tmp188                 ...
  204:  op add *tmp191 :excludeArea:areaHeight 8                     OreLocator.mnd: var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);
  205:  op idiv *tmp192 *tmp191 2                                    ...
  206:  op sub *tmp193 :excludeArea:maskY :excludeArea:areaY         ...
  207:  op abs *tmp194 *tmp193 0                                     ...
  208:  op sub :excludeArea:overlapY *tmp192 *tmp194                 ...
  209:  op greaterThan *tmp196 :excludeArea:overlapX 0               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  210:  op greaterThan *tmp197 :excludeArea:overlapY 0               ...
  211:  op land *tmp198 *tmp196 *tmp197                              ...
  212:  jump *label97 equal *tmp198 false                            ...
  213:  op min :excludeArea:blockSizeX 7 :excludeArea:overlapX       OreLocator.mnd: var blockSizeX = min(7, overlapX);
  214:  op min :excludeArea:blockSizeY 7 :excludeArea:overlapY       OreLocator.mnd: var blockSizeY = min(7, overlapY);
  215:  op shl *tmp203 1 :excludeArea:blockSizeX                     OreLocator.mnd: var row = (1 << width) - 1;
  216:  op sub :createMatrixOfSize:row *tmp203 1                     ...
  217:  set :createMatrixOfSize:matrix :createMatrixOfSize:row       OreLocator.mnd: var matrix = row;
  218:  jump *label102 greaterThanEq 1 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  219:  op shl *tmp207 :createMatrixOfSize:row 7                     OreLocator.mnd: matrix = (matrix << 7) | row;
  220:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  221:  jump *label102 greaterThanEq 2 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  222:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  223:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  224:  jump *label102 greaterThanEq 3 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  225:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  226:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  227:  jump *label102 greaterThanEq 4 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  228:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  229:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  230:  jump *label102 greaterThanEq 5 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  231:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  232:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  233:  jump *label102 greaterThanEq 6 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  234:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  235:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
        label *label102                                              OreLocator.mnd: for var i in 1 ... 7 do
  236:  op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX    OreLocator.mnd: var shiftX = (maskX < areaX) * (7 - blockSizeX);
  237:  op sub *tmp210 7 :excludeArea:blockSizeX                     ...
  238:  op mul :excludeArea:shiftX *tmp209 *tmp210                   ...
  239:  op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY    OreLocator.mnd: var shiftY = (maskY < areaY) * (7 - blockSizeY);
  240:  op sub *tmp213 7 :excludeArea:blockSizeY                     ...
  241:  op mul :excludeArea:shiftY *tmp212 *tmp213                   ...
  242:  op abs *tmp161 :excludeArea:shiftX 0                         OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  243:  op greaterThan *tmp162 *tmp161 6                             ...
  244:  op abs *tmp163 :excludeArea:shiftY 0                         ...
  245:  op greaterThan *tmp164 *tmp163 6                             ...
  246:  op or *tmp165 *tmp162 *tmp164                                ...
  247:  jump *label273 equal *tmp165 false                           ...
  248:  set :shiftMask*retval 0                                      ...
  249:  jump *label281 always 0 0                                    ...
        label *label273                                              ...
  250:  op mul *tmp167 7 :excludeArea:shiftY                         OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  251:  op add :shiftMask:shift :excludeArea:shiftX *tmp167          ...
  252:  jump *label275 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  253:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  254:  op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMa OreLocator.mnd: mask = (mask & clearMask) << shift;
  255:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  256:  jump *label276 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label275                                              ...
  257:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  258:  op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174    ...
        label *label276                                              OreLocator.mnd: if shift > 0 then
  259:  jump *label279 equal :excludeArea:shiftX 0                   OreLocator.mnd: if shiftX != 0 then
  260:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  261:  jump *label277 lessThanEq :excludeArea:shiftX 0              OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  262:  op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX   ...
        label *label277                                              ...
  263:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  264:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  265:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  266:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  267:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  268:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  269:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label279                                              OreLocator.mnd: if shiftX != 0 then
  270:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label281                                              OreLocator.mnd: var shifted = shiftMask(blocked, shiftX, shiftY);
  271:  op or :excludeArea*retval :excludeArea:mask :shiftMask*retva OreLocator.mnd: return mask | shifted;
  272:  return :excludeArea*retaddr                                  ...
        label *label97                                               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  273:  set :excludeArea*retval :excludeArea:mask                    OreLocator.mnd: return mask;
  274:  return :excludeArea*retaddr                                  OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
        label *label11                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  275:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  276:  jump *label109 greaterThan :findPossiblePlacement:y 3        ...
        label *label198                                              ...
  277:  op add *tmp216 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  278:  op mul *tmp217 7 *tmp216                                     ...
  279:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  280:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  281:  jump *label112 greaterThan :findPossiblePlacement:x 3        ...
        label *label199                                              ...
  282:  op and *tmp219 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  283:  jump *label113 notEqual *tmp219 0                            ...
  284:  op mul *tmp222 :findPossiblePlacement:y 7                    ...
  285:  op add *tmp223 24 *tmp222                                    ...
  286:  op add :findPossiblePlacement*retval *tmp223 :findPossiblePl ...
  287:  return :findPossiblePlacement*retaddr                        ...
        label *label113                                              ...
  288:  op sub *tmp225 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  289:  jump *label112 greaterThan :findPossiblePlacement:x *tmp225  ...
  290:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  291:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  292:  jump *label199 lessThanEq :findPossiblePlacement:x 3         ...
        label *label112                                              ...
  293:  op sub *tmp228 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  294:  jump *label109 greaterThan :findPossiblePlacement:y *tmp228  ...
  295:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  296:  jump *label198 lessThanEq :findPossiblePlacement:y 3         ...
        label *label109                                              ...
  297:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  298:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
  299:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  300:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  301:  set :findPossiblePlacement:width 2                           ...
  302:  set :findPossiblePlacement:height 4                          ...
  303:  setaddr :findPossiblePlacement*retaddr *label120             ...
  304:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label120                                              ...
  305:  jump *label121 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  306:  jump *label123 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  307:  set :tryPlaceGenerator*retval false                          ...
  308:  return :tryPlaceGenerator*retaddr                            ...
        label *label123                                              ...
  309:  op add *tmp236 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  310:  op add .water2X *tmp236 :findPossiblePlacement:x             ...
  311:  op add *tmp238 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  312:  op add .water2Y *tmp238 :findPossiblePlacement:y             ...
  313:  op add .generatorX *tmp236 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  314:  op add *tmp242 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  315:  op add .generatorY *tmp242 :findPossiblePlacement:y          ...
  316:  op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  317:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  318:  jump *label122 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label121                                              ...
  319:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  320:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  321:  set :findPossiblePlacement:width 4                           ...
  322:  set :findPossiblePlacement:height 2                          ...
  323:  setaddr :findPossiblePlacement*retaddr *label125             ...
  324:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label125                                              ...
  325:  jump *label126 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  326:  set :tryPlaceGenerator*retval false                          ...
  327:  return :tryPlaceGenerator*retaddr                            ...
        label *label126                                              ...
  328:  op add *tmp248 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  329:  op add .water2X *tmp248 :findPossiblePlacement:x             ...
  330:  op add *tmp250 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  331:  op add .water2Y *tmp250 :findPossiblePlacement:y             ...
  332:  op add *tmp252 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  333:  op add .generatorX *tmp252 :findPossiblePlacement:x          ...
  334:  op add .generatorY *tmp250 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  335:  op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  336:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label122                                              OreLocator.mnd: if shift >= 0 then
  337:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr OreLocator.mnd: terrainMask |= createFixedMatrix(
  338:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  339:  set :findPossiblePlacement:placementMask 1                   ...
  340:  set :findPossiblePlacement:width 1                           ...
  341:  set :findPossiblePlacement:height 1                          ...
  342:  setaddr :findPossiblePlacement*retaddr *label128             ...
  343:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label128                                              ...
  344:  jump *label129 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  345:  set :tryPlaceGenerator*retval false                          ...
  346:  return :tryPlaceGenerator*retaddr                            ...
        label *label129                                              ...
  347:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  348:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  349:  op shl *tmp262 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  350:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  351:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  352:  set :findPossiblePlacement:placementMask 1                   ...
  353:  set :findPossiblePlacement:width 1                           ...
  354:  set :findPossiblePlacement:height 1                          ...
  355:  setaddr :findPossiblePlacement*retaddr *label131             ...
  356:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label131                                              ...
  357:  jump *label132 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  358:  set :tryPlaceGenerator*retval false                          ...
  359:  return :tryPlaceGenerator*retaddr                            ...
        label *label132                                              ...
  360:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  361:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  362:  op shl *tmp268 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  363:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  364:  op sub *tmp269 .water2X .node1X                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  365:  op sub *tmp270 .water2Y .node1Y                              ...
  366:  op len *tmp271 *tmp269 *tmp270                               ...
  367:  op greaterThan *tmp272 *tmp271 7                             ...
  368:  op sub *tmp273 .generatorX .node1X                           OreLocator.mnd: or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
  369:  op sub *tmp274 .generatorY .node1Y                           ...
  370:  op len *tmp275 *tmp273 *tmp274                               ...
  371:  op greaterThan *tmp276 *tmp275 7                             ...
  372:  op or *tmp277 *tmp272 *tmp276                                ...
  373:  op sub *tmp278 .panelX .node1X                               OreLocator.mnd: or len(panelX - node1X, panelY - node1Y) > 6
  374:  op sub *tmp279 .panelY .node1Y                               ...
  375:  op len *tmp280 *tmp278 *tmp279                               ...
  376:  op greaterThan *tmp281 *tmp280 6                             ...
  377:  op or *tmp282 *tmp277 *tmp281                                ...
  378:  op sub *tmp283 .batteryX .node1X                             OreLocator.mnd: or len(batteryX - node1X, batteryY - node1Y) > 6
  379:  op sub *tmp284 .batteryY .node1Y                             ...
  380:  op len *tmp285 *tmp283 *tmp284                               ...
  381:  op greaterThan *tmp286 *tmp285 6                             ...
  382:  op or *tmp287 *tmp282 *tmp286                                ...
  383:  jump *label134 equal *tmp287 false                           OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  384:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  385:  set :findPossiblePlacement:placementMask 1                   ...
  386:  set :findPossiblePlacement:width 1                           ...
  387:  set :findPossiblePlacement:height 1                          ...
  388:  setaddr :findPossiblePlacement*retaddr *label136             ...
  389:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label136                                              ...
  390:  jump *label137 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  391:  set :tryPlaceGenerator*retval false                          ...
  392:  return :tryPlaceGenerator*retaddr                            ...
        label *label137                                              ...
  393:  op add .node2X :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: node2X = centerX + c;
  394:  op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: node2Y = centerY + r;
        label *label134                                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  395:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  396:  return :tryPlaceGenerator*retaddr                            ...
        label *label13                                               OreLocator.mnd: def createBlockMaskRow(x, y)
  397:  op add *tmp296 :createBlockMaskRow:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  398:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  399:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  400:  op add *tmp296 :createBlockMaskRow:x 3                       ...
  401:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  402:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  403:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  404:  op add *tmp296 :createBlockMaskRow:x 2                       ...
  405:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  406:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  407:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  408:  op add *tmp296 :createBlockMaskRow:x 1                       ...
  409:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  410:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  411:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  412:  ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow: ...
  413:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  414:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  415:  op add *tmp296 :createBlockMaskRow:x -1                      ...
  416:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  417:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  418:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  419:  op add *tmp296 :createBlockMaskRow:x -2                      ...
  420:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  421:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  422:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  423:  op add *tmp296 :createBlockMaskRow:x -3                      ...
  424:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  425:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  426:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  427:  op add *tmp296 :createBlockMaskRow:x -4                      ...
  428:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  429:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  430:  return :createBlockMaskRow*retaddr                           OreLocator.mnd: def createBlockMaskRow(x, y)
        label *label14                                               OreLocator.mnd: def createCombinedMask(x, y);
  431:  write @unit processor4 ":createTerrainMask:unit"             OreLocator.mnd: async(matrices.createTerrainMask(@unit, x, y));
  432:  write :createCombinedMask:x processor4 ":createTerrainMask:x ...
  433:  write :createCombinedMask:y processor4 ":createTerrainMask:y ...
  434:  write false processor4 ":createTerrainMask*finished"         ...
  435:  write 1 processor4 "@counter"                                ...
  436:  set :createAdjacentMask:x :createCombinedMask:x              OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
  437:  set :createAdjacentMask:y :createCombinedMask:y              ...
  438:  op add *tmp305 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  439:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  440:  ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:resu ...
  441:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  442:  op add *tmp296 :createCombinedMask:x 3                       ...
  443:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  444:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  445:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  446:  op add *tmp296 :createCombinedMask:x 2                       ...
  447:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  448:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  449:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  450:  op add *tmp296 :createCombinedMask:x 1                       ...
  451:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  452:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  453:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  454:  ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0  ...
  455:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  456:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  457:  op add *tmp296 :createCombinedMask:x -1                      ...
  458:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  459:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  460:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  461:  op add *tmp296 :createCombinedMask:x -2                      ...
  462:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  463:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  464:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  465:  op add *tmp296 :createCombinedMask:x -3                      ...
  466:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  467:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  468:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  469:  op add *tmp296 :createCombinedMask:x -4                      ...
  470:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  471:  op or :createAdjacentMask:row2 *tmp295 *tmp297               ...
  472:  op add *tmp307 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  473:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  474:  ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:resu ...
  475:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  476:  op add *tmp296 :createCombinedMask:x 3                       ...
  477:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  478:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  479:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  480:  op add *tmp296 :createCombinedMask:x 2                       ...
  481:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  482:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  483:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  484:  op add *tmp296 :createCombinedMask:x 1                       ...
  485:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  486:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  487:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  488:  ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0  ...
  489:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  490:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  491:  op add *tmp296 :createCombinedMask:x -1                      ...
  492:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  493:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  494:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  495:  op add *tmp296 :createCombinedMask:x -2                      ...
  496:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  497:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  498:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  499:  op add *tmp296 :createCombinedMask:x -3                      ...
  500:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  501:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  502:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  503:  op add *tmp296 :createCombinedMask:x -4                      ...
  504:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  505:  op or :createAdjacentMask:row1 *tmp295 *tmp297               ...
  506:  op add *tmp309 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  507:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  508:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  509:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  510:  op add *tmp296 :createCombinedMask:x 3                       ...
  511:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  512:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  513:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  514:  op add *tmp296 :createCombinedMask:x 2                       ...
  515:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  516:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  517:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  518:  op add *tmp296 :createCombinedMask:x 1                       ...
  519:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  520:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  521:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  522:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  523:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  524:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  525:  op add *tmp296 :createCombinedMask:x -1                      ...
  526:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  527:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  528:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  529:  op add *tmp296 :createCombinedMask:x -2                      ...
  530:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  531:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  532:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  533:  op add *tmp296 :createCombinedMask:x -3                      ...
  534:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  535:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  536:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  537:  op add *tmp296 :createCombinedMask:x -4                      ...
  538:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  539:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  540:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  541:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  542:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  543:  op or *tmp314 *tmp312 *tmp313                                ...
  544:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  545:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  546:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  547:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  548:  op add *tmp309 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  549:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  550:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  551:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  552:  op add *tmp296 :createCombinedMask:x 3                       ...
  553:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  554:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  555:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  556:  op add *tmp296 :createCombinedMask:x 2                       ...
  557:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  558:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  559:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  560:  op add *tmp296 :createCombinedMask:x 1                       ...
  561:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  562:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  563:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  564:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  565:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  566:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  567:  op add *tmp296 :createCombinedMask:x -1                      ...
  568:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  569:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  570:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  571:  op add *tmp296 :createCombinedMask:x -2                      ...
  572:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  573:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  574:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  575:  op add *tmp296 :createCombinedMask:x -3                      ...
  576:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  577:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  578:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  579:  op add *tmp296 :createCombinedMask:x -4                      ...
  580:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  581:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  582:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  583:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  584:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  585:  op or *tmp314 *tmp312 *tmp313                                ...
  586:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  587:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  588:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  589:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  590:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  591:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  592:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  593:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlo ...
  594:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  595:  op add *tmp296 :createCombinedMask:x 3                       ...
  596:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  597:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  598:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  599:  op add *tmp296 :createCombinedMask:x 2                       ...
  600:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  601:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  602:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  603:  op add *tmp296 :createCombinedMask:x 1                       ...
  604:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  605:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  606:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  607:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  608:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  609:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  610:  op add *tmp296 :createCombinedMask:x -1                      ...
  611:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  612:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  613:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  614:  op add *tmp296 :createCombinedMask:x -2                      ...
  615:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  616:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  617:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  618:  op add *tmp296 :createCombinedMask:x -3                      ...
  619:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  620:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  621:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  622:  op add *tmp296 :createCombinedMask:x -4                      ...
  623:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  624:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  625:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  626:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  627:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  628:  op or *tmp314 *tmp312 *tmp313                                ...
  629:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  630:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  631:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  632:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  633:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  634:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  635:  op add *tmp309 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  636:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  637:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  638:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  639:  op add *tmp296 :createCombinedMask:x 3                       ...
  640:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  641:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  642:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  643:  op add *tmp296 :createCombinedMask:x 2                       ...
  644:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  645:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  646:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  647:  op add *tmp296 :createCombinedMask:x 1                       ...
  648:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  649:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  650:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  651:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  652:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  653:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  654:  op add *tmp296 :createCombinedMask:x -1                      ...
  655:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  656:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  657:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  658:  op add *tmp296 :createCombinedMask:x -2                      ...
  659:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  660:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  661:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  662:  op add *tmp296 :createCombinedMask:x -3                      ...
  663:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  664:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  665:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  666:  op add *tmp296 :createCombinedMask:x -4                      ...
  667:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  668:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  669:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  670:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  671:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  672:  op or *tmp314 *tmp312 *tmp313                                ...
  673:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  674:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  675:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  676:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  677:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  678:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  679:  op add :createBlockMaskRow:y :createCombinedMask:y -2        OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  680:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  681:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  682:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  683:  op add *tmp296 :createCombinedMask:x 3                       ...
  684:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  685:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  686:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  687:  op add *tmp296 :createCombinedMask:x 2                       ...
  688:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  689:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  690:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  691:  op add *tmp296 :createCombinedMask:x 1                       ...
  692:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  693:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  694:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  695:  ucontrol getBlock :createCombinedMask:x :createBlockMaskRow: ...
  696:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  697:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  698:  op add *tmp296 :createCombinedMask:x -1                      ...
  699:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  700:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  701:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  702:  op add *tmp296 :createCombinedMask:x -2                      ...
  703:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  704:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  705:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  706:  op add *tmp296 :createCombinedMask:x -3                      ...
  707:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  708:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  709:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  710:  op add *tmp296 :createCombinedMask:x -4                      ...
  711:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  712:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  713:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  714:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  715:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  716:  op or *tmp314 *tmp312 *tmp313                                ...
  717:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  718:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  719:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  720:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  721:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  722:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  723:  op sub :createAdjacentMask:r -2 1                            OreLocator.mnd: for var r in -4 .. 2 descending do
  724:  op add *tmp309 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  725:  set :createBlockMaskRow:x :createCombinedMask:x              ...
  726:  set :createBlockMaskRow:y *tmp309                            ...
  727:  setaddr :createBlockMaskRow*retaddr *label265                ...
  728:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label265                                              ...
  729:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  730:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  731:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  732:  op or *tmp314 *tmp312 *tmp313                                ...
  733:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  734:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  735:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  736:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  737:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  738:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  739:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  740:  op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r   OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  741:  set :createBlockMaskRow:x :createAdjacentMask:x              ...
  742:  set :createBlockMaskRow:y *tmp309                            ...
  743:  setaddr :createBlockMaskRow*retaddr *label268                ...
  744:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label268                                              ...
  745:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  746:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  747:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  748:  op or *tmp314 *tmp312 *tmp313                                ...
  749:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  750:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  751:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  752:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  753:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  754:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  755:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  756:  op shr *tmp304 :createAdjacentMask:result 1                  OreLocator.mnd: result >> 1;
        label *label151                                              OreLocator.mnd: var terrainMask = await(matrices.createTerrainMask);
  757:  wait 1e-15                                                   ...
  758:  read *tmp320 processor4 ":createTerrainMask*finished"        ...
  759:  jump *label151 equal *tmp320 false                           ...
  760:  read :createCombinedMask:terrainMask processor4 ":createTerr ...
  761:  op or :excludeArea:mask *tmp304 :createCombinedMask:terrainM OreLocator.mnd: return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
  762:  set :excludeArea:maskX :createCombinedMask:x                 ...
  763:  set :excludeArea:maskY :createCombinedMask:y                 ...
  764:  set :excludeArea:areaX .coreX                                ...
  765:  set :excludeArea:areaY .coreY                                ...
  766:  set :excludeArea:areaWidth 15                                ...
  767:  set :excludeArea:areaHeight 15                               ...
  768:  setaddr :excludeArea*retaddr *label152                       ...
  769:  call *label10 *invalid :excludeArea*retval                   ...
        label *label152                                              ...
  770:  set :createCombinedMask*retval :excludeArea*retval           ...
  771:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label15                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  772:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  773:  set .panelX -1                                               ...
  774:  set .generatorY -1                                           ...
  775:  set .generatorX -1                                           ...
  776:  set .water2Y -1                                              ...
  777:  set .water2X -1                                              ...
  778:  set .water1Y -1                                              ...
  779:  set .water1X -1                                              ...
  780:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  781:  set :moveTo.5:y .drillY                                      ...
  782:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  783:  jump *label157 notEqual *tmp323 false                        ...
        label *label271                                              ...
  784:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  785:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  786:  jump *label271 equal *tmp323 false                           ...
        label *label157                                              ...
  787:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  788:  set :createCombinedMask:y .drillY                            ...
  789:  setaddr :createCombinedMask*retaddr *label158                ...
  790:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label158                                              ...
  791:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  792:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  793:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  794:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  795:  set :findPossiblePlacement:placementMask 387                 ...
  796:  set :findPossiblePlacement:width 2                           ...
  797:  set :findPossiblePlacement:height 2                          ...
  798:  setaddr :findPossiblePlacement*retaddr *label159             ...
  799:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label159                                              ...
  800:  jump *label160 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  801:  op add *tmp332 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  802:  op add .water1X *tmp332 :findPossiblePlacement:x             ...
  803:  op add *tmp334 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  804:  op add .water1Y *tmp334 :findPossiblePlacement:y             ...
  805:  op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  806:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  807:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label160                                              OreLocator.mnd: if shift >= 0 then
  808:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  809:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  810:  set :findPossiblePlacement:width 2                           ...
  811:  set :findPossiblePlacement:height 2                          ...
  812:  setaddr :findPossiblePlacement*retaddr *label162             ...
  813:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label162                                              ...
  814:  jump *label163 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  815:  op add *tmp341 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  816:  op add .containerX *tmp341 :findPossiblePlacement:x          ...
  817:  op add *tmp343 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  818:  op add .containerY *tmp343 :findPossiblePlacement:y          ...
  819:  op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  820:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label163                                              OreLocator.mnd: if shift >= 0 then
  821:  op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumD OreLocator.mnd: var nodeMask = terrainMask | createFixedMatrix(
  822:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
  823:  set :findPossiblePlacement:placementMask 1                   ...
  824:  set :findPossiblePlacement:width 1                           ...
  825:  set :findPossiblePlacement:height 1                          ...
  826:  setaddr :findPossiblePlacement*retaddr *label165             ...
  827:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label165                                              ...
  828:  jump *label166 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  829:  set :layoutThoriumDrillAtLocation*retval false               ...
  830:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label166                                              ...
  831:  op add .node1X .drillX :findPossiblePlacement:x              OreLocator.mnd: node1X = drillX + c;
  832:  op add .node1Y .drillY :findPossiblePlacement:y              OreLocator.mnd: node1Y = drillY + r;
  833:  op shl *tmp352 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  834:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  835:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  836:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  837:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  838:  set :tryPlaceGenerator:centerY .drillY                       ...
  839:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  840:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  841:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  842:  setaddr :tryPlaceGenerator*retaddr *label168                 ...
  843:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label168                                              ...
  844:  jump *label169 equal :tryPlaceGenerator*retval false         ...
  845:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  846:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label169                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  847:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  848:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  849:  setaddr *tmp355 *label174                                    ...
  850:  jump *label171 always 0 0                                    ...
        multilabel *label174                                         ...
  851:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  852:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  853:  setaddr *tmp355 *label175                                    ...
  854:  jump *label171 always 0 0                                    ...
        multilabel *label175                                         ...
  855:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  856:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  857:  setaddr *tmp355 *label176                                    ...
  858:  jump *label171 always 0 0                                    ...
        multilabel *label176                                         ...
  859:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  860:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  861:  setaddr *tmp355 *label177                                    ...
        label *label171                                              ...
  862:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  863:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  864:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  865:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  866:  setaddr :createCombinedMask*retaddr *label178                ...
  867:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label178                                              ...
  868:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  869:  op abs *tmp161 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  870:  op greaterThan *tmp162 *tmp161 6                             ...
  871:  op abs *tmp163 :layoutThoriumDrillAtLocation:sy 0            ...
  872:  op greaterThan *tmp164 *tmp163 6                             ...
  873:  op or *tmp165 *tmp162 *tmp164                                ...
  874:  jump *label283 equal *tmp165 false                           ...
  875:  set :shiftMask*retval 0                                      ...
  876:  jump *label291 always 0 0                                    ...
        label *label283                                              ...
  877:  op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  878:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  879:  jump *label285 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  880:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  881:  op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  882:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  883:  jump *label286 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label285                                              ...
  884:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  885:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label286                                              OreLocator.mnd: if shift > 0 then
  886:  jump *label289 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  887:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  888:  jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  889:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label287                                              ...
  890:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  891:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  892:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  893:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  894:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  895:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  896:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label289                                              OreLocator.mnd: if shiftX != 0 then
  897:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label291                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  898:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  899:  op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  900:  op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy      ...
  901:  set :tryPlaceGenerator:centerX *tmp361                       ...
  902:  set :tryPlaceGenerator:centerY *tmp362                       ...
  903:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  904:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  905:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  906:  setaddr :tryPlaceGenerator*retaddr *label180                 ...
  907:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label180                                              ...
  908:  jump *label181 equal :tryPlaceGenerator*retval false         ...
  909:  set :layoutThoriumDrillAtLocation*retval true                ...
  910:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label181                                              ...
  911:  multijump *tmp355 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label177                                         ...
  912:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  913:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  914:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  915:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  916:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  917:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  918:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  919:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  920:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  921:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  922:  setaddr :findDrillLocationLocal*retaddr *label184            ...
  923:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label184                                              ...
  924:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  925:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  926:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  927:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  928:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  929:  set :findDrillLocation*finished true                         ...
  930:  jump *label18 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  931:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  932:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  933:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  934:  set :findDrillLocationLocal:item @thorium                    ...
  935:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  936:  set :findDrillLocationLocal:size 3                           ...
  937:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  938:  setaddr :findDrillLocationLocal*retaddr *label186            ...
  939:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label186                                              ...
  940:  set .drillX :findDrillLocationLocal:dx                       ...
  941:  set .drillY :findDrillLocationLocal:dy                       ...
  942:  jump *label187 notEqual :findDrillLocationLocal*retval false ...
  943:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  944:  jump *label185 always 0 0                                    ...
        label *label187                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  945:  setaddr :layoutThoriumDrillAtLocation*retaddr *label189      OreLocator.mnd: layoutThoriumDrillAtLocation();
  946:  call *label15 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label189                                              ...
  947:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label185                                              ...
  948:  set :layoutThoriumDrill*finished true                        ...
  949:  jump *label18 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  950:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapSpots = 0;
  951:  set .mapTotal 0                                              ...
  952:  set .mapProgress 0                                           ...
  953:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  954:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  955:  jump *label18 always 0 0                                     ...


Performance: parsed in 636 ms, compiled in 453 ms, optimized in 2,181 ms, run in 16 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp11 processor4 "*signature":
Variable 'processor4' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
