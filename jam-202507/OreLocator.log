   930 instructions before optimizations.
    93 instructions eliminated by Temp Variables Elimination (2 iterations).
    74 instructions eliminated by Dead Code Elimination (2 passes, 8 iterations).
C:\Home\golem\jam-202507\OreLocator.mnd:21:19 Variable 'mapProgress' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:21:32 Variable 'mapTotal' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:21:42 Variable 'mapAction' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:26:5 Variable 'searchFinished' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:28:5 Variable 'water1X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:28:14 Variable 'water1Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:5 Variable 'containerX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:17 Variable 'containerY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:5 Variable 'water2X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:14 Variable 'water2Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:5 Variable 'generatorX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:17 Variable 'generatorY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:5 Variable 'nodeX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:12 Variable 'nodeY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:5 Variable 'panelX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:13 Variable 'panelY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:5 Variable 'batteryX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:15 Variable 'batteryY' is not used.
     2 instructions eliminated by Jump Normalization (6 iterations).
    36 instructions eliminated by Jump Optimization (6 iterations).
    47 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
    25 instructions modified by Expression Optimization (2 passes, 3 iterations).
   221 instructions eliminated by Data Flow Optimization (7 passes, 25 iterations).
     1 loops improved by Loop Hoisting.
     2 instructions added by Loop Optimization (3 iterations).
    10 loops improved by Loop Optimization.
   134 instructions added by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
   347 instructions added by Function Inlining (11 iterations).
    11 function calls inlined by Function Inlining.
     6 instructions eliminated by Jump Straightening (2 passes, 6 iterations).
     6 instructions updated by JumpThreading.
    10 instructions eliminated by Unreachable Code Elimination (3 iterations).
   924 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 452):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:414:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size   +44, benefit      104.0, efficiency      2.364
    Inline function call at OreLocator.mnd:425:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:426:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:464:28                size   +45, benefit        4.0, efficiency      0.089
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +45, benefit      100.0, efficiency      2.222
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 451):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:414:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size   +44, benefit      104.0, efficiency      2.364
    Inline function call at OreLocator.mnd:425:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:426:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:464:28                size   +45, benefit        4.0, efficiency      0.089
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +45, benefit      100.0, efficiency      2.222
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 424):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size   +44, benefit      104.0, efficiency      2.364
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:464:28                size   +45, benefit        4.0, efficiency      0.089
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +45, benefit      100.0, efficiency      2.222
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 423):
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:428:5                          size   +87, benefit     9100.0, efficiency    104.598 (+92 instructions)
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size   +44, benefit      104.0, efficiency      2.364
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:464:28                size   +45, benefit        4.0, efficiency      0.089
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +45, benefit      100.0, efficiency      2.222
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 331):
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +136, benefit      104.0, efficiency      0.765
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +137, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +137, benefit      100.0, efficiency      0.730
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 330):
  * Replicate loop condition at OreLocator.mnd:41:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +136, benefit      104.0, efficiency      0.765
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +137, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +137, benefit      100.0, efficiency      0.730
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 329):
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907
  * Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 size  +287, benefit      936.0, efficiency      3.261 (+238 instructions)
    Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +136, benefit      104.0, efficiency      0.765
    Inline function call at OreLocator.mnd:425:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:426:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +137, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +137, benefit      100.0, efficiency      0.730
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 91):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
  * Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 size   +75, benefit      143.0, efficiency      1.907 (+71 instructions)
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +413, benefit      104.0, efficiency      0.252
  ! Inline function call at OreLocator.mnd:464:28                size  +414, benefit        4.0, efficiency      0.010
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
  ! Inline function call at OreLocator.mnd:541:30                size  +414, benefit      100.0, efficiency      0.242
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 20):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +481, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +413, benefit      104.0, efficiency      0.252
  ! Inline function call at OreLocator.mnd:464:28                size  +414, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +414, benefit      100.0, efficiency      0.242

Pass 2: speed optimization selection (cost limit 57):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +477, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +381, benefit      104.0, efficiency      0.273
  ! Inline function call at OreLocator.mnd:464:28                size  +382, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +382, benefit      100.0, efficiency      0.262

Pass 3: speed optimization selection (cost limit 57):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +477, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:451:1 size  +381, benefit      104.0, efficiency      0.273
  ! Inline function call at OreLocator.mnd:464:28                size  +382, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +382, benefit      100.0, efficiency      0.262

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-62 instructions):
 
   133 jump *label36 equal *tmp65 false
   134 set *tmp37 false
   135 jump *label26 always
-    * set *tmp66 null
   136 jump *label37 always
   137 label *label36
-    * set *tmp66 null
   138 label *label37
   139 op sub *tmp67 :locateOreAway:x .coreX
   140 op abs *tmp68 *tmp67
 
   156 label *label40
   157 set *tmp78 null
   158 label *label41
-    * set *tmp76 *tmp78
   159 jump *label39 always
   160 label *label38
-    * set *tmp76 null
   161 label *label39
   162 op greaterThanEq *tmp79 :locateOreAway:coreDist 7
   163 jump *label42 equal *tmp79 false
 
   188 jump *label50 equal *tmp95 false
   189 set *tmp83 true
   190 jump *label46 always
-    * set *tmp96 null
   191 jump *label51 always
   192 label *label50
-    * set *tmp96 null
   193 label *label51
   194 label *label48
   195 op add :visited:i :visited:i 1
 
   218 label *label44
   219 set *tmp82 null
   220 label *label45
-    * set *tmp80 *tmp82
   221 jump *label43 always
   222 label *label42
-    * set *tmp80 null
   223 label *label43
   224 label *label28
   225 jump *label27 always
 
   235 op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
   236 set :findDrillLocationLocal*retval *tmp103
   237 jump *label17 always
-    * set *tmp102 null
   238 jump *label55 always
   239 label *label54
-    * set *tmp102 null
   240 label *label55
   241 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   242 jump *label56 equal *tmp104 false
   243 set *tmp106 .mapSpots
   244 op add .mapSpots .mapSpots 1
-    * set *tmp105 *tmp106
   245 jump *label57 always
   246 label *label56
-    * set *tmp105 null
   247 label *label57
   248 set :moveTo.3:x :findDrillLocationLocal:oreX
   249 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   293 op lessThan *tmp118 :findDrillLocationLocal:limit 1000
   294 jump *label69 equal *tmp118 false
   295 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp119 :findDrillLocationLocal:score
   296 jump *label70 always
   297 label *label69
-    * set *tmp119 null
   298 label *label70
   299 op greaterThanEq *tmp120 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   300 jump *label71 equal *tmp120 false
 
   315 op add .count .count 1
   316 set *tmp129 .count
   317 write :saveLocation:y bank1 *tmp129
-    * set *tmp131 .locations
   318 op add .locations .locations 1
   319 label *label73
   320 ucontrol unbind
 
   325 label *label71
   326 set *tmp121 null
   327 label *label72
-    * set *tmp115 *tmp121
   328 jump *label68 always
   329 label *label67
-    * set *tmp115 null
   330 label *label68
   331 op greaterThan *tmp132 :findDrillLocationLocal:score :findDrillLocationLocal:best
   332 jump *label74 equal *tmp132 false
 
   335 op add *tmp135 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   336 set :findDrillLocationLocal:bestY *tmp135
   337 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp133 :findDrillLocationLocal:best
   338 jump *label75 always
   339 label *label74
-    * set *tmp133 null
   340 label *label75
   341 op lessThanEq *tmp136 :findDrillLocationLocal:score :findDrillLocationLocal:last
   342 jump *label76 equal *tmp136 false
   343 jump *label65 always
-    * set *tmp137 null
   344 jump *label77 always
   345 label *label76
-    * set *tmp137 null
   346 label *label77
   347 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   348 op mul *tmp138 :findDrillLocationLocal:diffX 1.1
 
   367 op lessThan *tmp151 *tmp150 7
   368 jump *label80 equal *tmp151 false
   369 jump *label65 always
-    * set *tmp152 null
   370 jump *label81 always
   371 label *label80
-    * set *tmp152 null
   372 label *label81
   373 label *label64
   374 jump *label63 always
 
   392 op add .count .count 1
   393 set *tmp162 .count
   394 write :saveLocation.1:y bank1 *tmp162
-    * set *tmp164 .locations
   395 op add .locations .locations 1
   396 label *label84
-    * set *tmp154 null
   397 jump *label83 always
   398 label *label82
-    * set *tmp154 null
   399 label *label83
   400 label *label24
   401 jump *label23 always
 
   423 op add *tmp173 *tmp172 :findPossiblePlacement:x
   424 set :findPossiblePlacement*retval *tmp173
   425 jump *label85 always
-    * set *tmp170 null
   426 jump *label93 always
   427 label *label92
-    * set *tmp170 null
   428 label *label93
   429 op sub *tmp174 3 :findPossiblePlacement:width
   430 op greaterThan *tmp175 :findPossiblePlacement:x *tmp174
   431 jump *label94 equal *tmp175 false
   432 jump *label91 always
-    * set *tmp176 null
   433 jump *label95 always
   434 label *label94
-    * set *tmp176 null
   435 label *label95
   436 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   437 label *label90
 
   442 op greaterThan *tmp178 :findPossiblePlacement:y *tmp177
   443 jump *label96 equal *tmp178 false
   444 jump *label88 always
-    * set *tmp179 null
   445 jump *label97 always
   446 label *label96
-    * set *tmp179 null
   447 label *label97
   448 label *label87
   449 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   473 jump *label102 equal *tmp183 false
   474 set :tryPlaceGenerator*retval false
   475 jump *label98 always
-    * set *tmp184 null
   476 jump *label103 always
   477 label *label102
-    * set *tmp184 null
   478 label *label103
   479 op add *tmp185 :tryPlaceGenerator:centerX 0.5
   480 op add *tmp186 *tmp185 :tryPlaceGenerator:c
 
   490 set .generatorY *tmp192
   491 op shl *tmp193 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   492 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
-    * set *tmp182 :tryPlaceGenerator:terrainMask
   493 jump *label101 always
   494 label *label100
   495 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   507 jump *label105 equal *tmp195 false
   508 set :tryPlaceGenerator*retval false
   509 jump *label98 always
-    * set *tmp196 null
   510 jump *label106 always
   511 label *label105
-    * set *tmp196 null
   512 label *label106
   513 op add *tmp197 :tryPlaceGenerator:centerX 0.5
   514 op add *tmp198 *tmp197 :tryPlaceGenerator:c
 
   524 set .generatorY *tmp204
   525 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   526 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
-    * set *tmp182 :tryPlaceGenerator:terrainMask
   527 label *label101
   528 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   529 set :findPossiblePlacement:placementMask 1
 
   540 jump *label108 equal *tmp207 false
   541 set :tryPlaceGenerator*retval false
   542 jump *label98 always
-    * set *tmp208 null
   543 jump *label109 always
   544 label *label108
-    * set *tmp208 null
   545 label *label109
   546 op add *tmp209 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   547 set .nodeX *tmp209
 
   564 jump *label111 equal *tmp213 false
   565 set :tryPlaceGenerator*retval false
   566 jump *label98 always
-    * set *tmp214 null
   567 jump *label112 always
   568 label *label111
-    * set *tmp214 null
   569 label *label112
   570 op add *tmp215 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   571 set .panelX *tmp215
 
   588 jump *label114 equal *tmp219 false
   589 set :tryPlaceGenerator*retval false
   590 jump *label98 always
-    * set *tmp220 null
   591 jump *label115 always
   592 label *label114
-    * set *tmp220 null
   593 label *label115
   594 op add *tmp221 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   595 set .batteryX *tmp221
 
   800 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
   801 op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   802 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp298
-    * set *tmp292 :layoutThoriumDrillAtLocation:cornersMask
   803 jump *label140 always
   804 label *label139
-    * set *tmp292 null
   805 label *label140
   806 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   807 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   824 set .containerY *tmp305
   825 op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   826 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
-    * set *tmp301 :layoutThoriumDrillAtLocation:terrainMask
   827 jump *label143 always
   828 label *label142
-    * set *tmp301 null
   829 label *label143
   830 set :createFixedMatrix.3:row0 0b1111
   831 set :createFixedMatrix.3:row1 0b1111
 
   861 jump *label147 equal *tmp319 false
   862 set :layoutThoriumDrillAtLocation*retval true
   863 jump *label129 always
-    * set *tmp320 null
   864 jump *label148 always
   865 label *label147
-    * set *tmp320 null
   866 label *label148
   867 set :layoutThoriumDrillAtLocation:sx 3
   868 set :layoutThoriumDrillAtLocation:sy 3
 
   905 jump *label158 equal *tmp330 false
   906 set *tmp325 0
   907 jump *label157 always
-    * set *tmp331 null
   908 jump *label159 always
   909 label *label158
-    * set *tmp331 null
   910 label *label159
   911 op mul *tmp332 7 :shiftMask:shiftY
   912 op add *tmp333 :shiftMask:shiftX *tmp332
 
   918 op and *tmp337 :shiftMask:mask :shiftMask:clearMask
   919 op shl *tmp338 *tmp337 :shiftMask:shift
   920 set :shiftMask:mask *tmp338
-    * set *tmp335 :shiftMask:mask
   921 jump *label161 always
   922 label *label160
   923 op sub *tmp339 0 :shiftMask:shift
   924 op shr :shiftMask:mask :shiftMask:mask *tmp339
-    * set *tmp335 :shiftMask:mask
   925 label *label161
   926 op notEqual *tmp340 :shiftMask:shiftX 0
   927 jump *label162 equal *tmp340 false
 
   931 op greaterThan *tmp344 :shiftMask:shiftX 0
   932 jump *label164 equal *tmp344 false
   933 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp345 :shiftMask:keep
   934 jump *label165 always
   935 label *label164
-    * set *tmp345 null
   936 label *label165
   937 op shl *tmp346 :shiftMask:keep 7
   938 op or :shiftMask:keep :shiftMask:keep *tmp346
 
   941 op shl *tmp348 :shiftMask:keep 21
   942 op or :shiftMask:keep :shiftMask:keep *tmp348
   943 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp341 :shiftMask:mask
   944 jump *label163 always
   945 label *label162
-    * set *tmp341 null
   946 label *label163
   947 set *tmp325 :shiftMask:mask
   948 jump *label157 always
 
   965 jump *label167 equal *tmp352 false
   966 set :layoutThoriumDrillAtLocation*retval true
   967 jump *label129 always
-    * set *tmp353 null
   968 jump *label168 always
   969 label *label167
-    * set *tmp353 null
   970 label *label168
   971 label *label150
   972 multijump *tmp321 0 0 (m:marker0)
 
  1016 jump *label173 equal *tmp354 false
  1017 set :layoutThoriumDrill*retval false
  1018 jump *label171 always
-    * set *tmp355 null
  1019 jump *label174 always
  1020 label *label173
-    * set *tmp355 null
  1021 label *label174
  1022 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)
  1023 call *label13 *invalid :layoutThoriumDrillAtLocation*retval (m:*label175) (h:*label175)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   151 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
   152 jump *label40 equal *tmp77 false
   153 jump *label28 always
-    * set *tmp78 null
   154 jump *label41 always
   155 label *label40
-    * set *tmp78 null
   156 label *label41
   157 jump *label39 always
   158 label *label38
 
   211 label *label52
   212 set *tmp98 null
   213 label *label53
-    * set *tmp82 *tmp98
   214 jump *label45 always
   215 label *label44
-    * set *tmp82 null
   216 label *label45
   217 jump *label43 always
   218 label *label42
 
   236 label *label55
   237 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   238 jump *label56 equal *tmp104 false
-    * set *tmp106 .mapSpots
   239 op add .mapSpots .mapSpots 1
   240 jump *label57 always
   241 label *label56
 
   315 ucontrol unbind
   316 set :findDrillLocationLocal*retval true
   317 jump *label17 always
-    * set *tmp121 null
   318 jump *label72 always
   319 label *label71
-    * set *tmp121 null
   320 label *label72
   321 jump *label68 always
   322 label *label67

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   206 printflush message1
   207 set *tmp37 true
   208 jump *label26 always
-    * set *tmp98 null
   209 jump *label53 always
   210 label *label52
-    * set *tmp98 null
   211 label *label53
   212 jump *label45 always
   213 label *label44

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-93 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp21 .locations
-    * set .locationsStart *tmp21
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    50 label *label19
    51 label *label18
    52 op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp31 *tmp30 2
-    * set .mapTotal *tmp31
+   53 op pow .mapTotal *tmp30 2
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label23
 
    59 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    60 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    61 op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp33 *tmp32 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp33
-    * op min *tmp34 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp34
+   62 op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuationRate
+   63 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    64 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp36 *tmp35 2
-    * set .mapTotal *tmp36
+   65 op pow .mapTotal *tmp35 2
    66 set :locateOreAway:ore :findDrillLocationLocal:item
    67 set :locateOreAway:x :findDrillLocationLocal:oreX
    68 set :locateOreAway:y :findDrillLocationLocal:oreY
    69 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp38 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp38
+   70 op mul :locateOreAway:distance 3.8197185279121366 .angle
    71 set :locateOreAway:lastX -1
    72 set :locateOreAway:lastY -1
-    * op max *tmp39 .angle @pi
-    * set .angle *tmp39
-    * op mul *tmp40 .angle .angle
-    * set .mapProgress *tmp40
+   73 op max .angle .angle @pi
+   74 op mul .mapProgress .angle .angle
    75 label *label27
    76 op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
    77 jump *label29 equal *tmp41 false
-    * op div *tmp42 .angle @degToRad
-    * set :locateOreAway:a *tmp42
+   78 op div :locateOreAway:a .angle @degToRad
    79 op sin *tmp43 :locateOreAway:a
    80 op mul *tmp44 *tmp43 :locateOreAway:distance
    81 op add *tmp45 .coreX *tmp44
 
    84 set :limit:low 5
    85 set :limit:high *tmp46
    86 op max *tmp48 :limit:value :limit:low
-    * op min *tmp49 *tmp48 :limit:high
-    * set *tmp47 *tmp49
+   87 op min *tmp47 *tmp48 :limit:high
    88 label *label30
    89 set :locateOreAway:lx *tmp47
    90 op cos *tmp50 :locateOreAway:a
 
    95 set :limit.1:low 5
    96 set :limit.1:high *tmp53
    97 op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp56 *tmp55 :limit.1:high
-    * set *tmp54 *tmp56
+   98 op min *tmp54 *tmp55 :limit.1:high
    99 label *label31
   100 set :locateOreAway:ly *tmp54
   101 set :moveTo.2:x :locateOreAway:lx
 
   113 label *label32
   114 op div *tmp60 3.8197185279121366 :locateOreAway:distance
   115 op add .angle .angle *tmp60
-    * op mul *tmp61 .angle .angle
-    * set .mapProgress *tmp61
-    * op mul *tmp62 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp62
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 *tmp64
+  116 op mul .mapProgress .angle .angle
+  117 op mul :locateOreAway:distance 3.8197185279121366 .angle
+  118 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
   119 op equal *tmp65 *tmp63 false
   120 jump *label36 equal *tmp65 false
   121 set *tmp37 false
 
   127 op abs *tmp68 *tmp67
   128 op sub *tmp69 :locateOreAway:y .coreY
   129 op abs *tmp70 *tmp69
-    * op max *tmp71 *tmp68 *tmp70
-    * set :locateOreAway:coreDist *tmp71
+  130 op max :locateOreAway:coreDist *tmp68 *tmp70
   131 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   132 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp74 *tmp72 *tmp73
-    * set :locateOreAway:unitDist *tmp74
+  133 op len :locateOreAway:unitDist *tmp72 *tmp73
   134 op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
   135 jump *label38 equal *tmp75 false
   136 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
 
   154 set :visited:i .locationsStart
   155 label *label47
   156 jump *label49 greaterThanEq :visited:i *tmp84
-    * op mul *tmp85 4 :visited:i
-    * set :visited:index *tmp85
-    * op add *tmp86 :visited:index 2
-    * set *tmp87 *tmp86
-    * read *tmp88 bank1 *tmp87
-    * set :visited:lx *tmp88
-    * op add *tmp89 :visited:index 3
-    * set *tmp90 *tmp89
-    * read *tmp91 bank1 *tmp90
-    * set :visited:ly *tmp91
+  157 op mul :visited:index 4 :visited:i
+  158 op add *tmp87 :visited:index 2
+  159 read :visited:lx bank1 *tmp87
+  160 op add *tmp90 :visited:index 3
+  161 read :visited:ly bank1 *tmp90
   162 op sub *tmp92 :visited:x :visited:lx
   163 op sub *tmp93 :visited:y :visited:ly
   164 op len *tmp94 *tmp92 *tmp93
 
   181 jump *label52 equal *tmp97 false
   182 op div *tmp99 7.639437055824273 :locateOreAway:distance
   183 op add .angle .angle *tmp99
-    * op mul *tmp100 .angle .angle
-    * set .mapProgress *tmp100
+  184 op mul .mapProgress .angle .angle
   185 printflush message1
   186 set *tmp37 true
   187 jump *label26 always
 
   205 set :findDrillLocationLocal:oreY :locateOreAway:y
   206 op equal *tmp101 *tmp37 false
   207 jump *label54 equal *tmp101 false
-    * op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp103
+  208 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   209 jump *label17 always
   210 jump *label55 always
   211 label *label54
 
   248 wait 1e-15
   249 read *tmp112 processor1 ":findBestPosition*finished"
   250 jump *label66 equal *tmp112 false
-    * read *tmp8 processor1 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp8
-    * read *tmp9 processor1 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp9
-    * read *tmp113 processor1 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp113
+  251 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
+  252 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
+  253 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
   254 op greaterThan *tmp114 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   255 jump *label67 equal *tmp114 false
-    * op add *tmp116 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:dx *tmp116
-    * op add *tmp117 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:dy *tmp117
+  256 op add :findDrillLocationLocal:dx :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  257 op add :findDrillLocationLocal:dy :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   258 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   259 op lessThan *tmp118 :findDrillLocationLocal:limit 1000
   260 jump *label69 equal *tmp118 false
 
   273 sensor *tmp124 :saveLocation:item @id
   274 write *tmp124 bank1 *tmp122
   275 op add .count .count 1
-    * set *tmp125 .count
-    * write :saveLocation:value bank1 *tmp125
+  276 write :saveLocation:value bank1 .count
   277 op add .count .count 1
-    * set *tmp127 .count
-    * write :saveLocation:x bank1 *tmp127
+  278 write :saveLocation:x bank1 .count
   279 op add .count .count 1
-    * set *tmp129 .count
-    * write :saveLocation:y bank1 *tmp129
+  280 write :saveLocation:y bank1 .count
   281 op add .locations .locations 1
   282 label *label73
   283 ucontrol unbind
 
   291 label *label68
   292 op greaterThan *tmp132 :findDrillLocationLocal:score :findDrillLocationLocal:best
   293 jump *label74 equal *tmp132 false
-    * op add *tmp134 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:bestX *tmp134
-    * op add *tmp135 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:bestY *tmp135
+  294 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  295 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   296 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   297 jump *label75 always
   298 label *label74
 
   304 label *label76
   305 label *label77
   306 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp138 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp138
+  307 op mul :round:x :findDrillLocationLocal:diffX 1.1
   308 op add *tmp140 :round:x 0.5
-    * op floor *tmp141 *tmp140
-    * set *tmp139 *tmp141
+  309 op floor *tmp139 *tmp140
   310 label *label78
   311 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp139
-    * op mul *tmp142 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp142
+  312 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   313 op add *tmp144 :round.1:x 0.5
-    * op floor *tmp145 *tmp144
-    * set *tmp143 *tmp145
+  314 op floor *tmp143 *tmp144
   315 label *label79
   316 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp143
   317 op sub *tmp146 :findDrillLocationLocal:oreX .coreX
 
   339 sensor *tmp157 :saveLocation.1:item @id
   340 write *tmp157 bank1 *tmp155
   341 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:value bank1 *tmp158
+  342 write :saveLocation.1:value bank1 .count
   343 op add .count .count 1
-    * set *tmp160 .count
-    * write :saveLocation.1:x bank1 *tmp160
+  344 write :saveLocation.1:x bank1 .count
   345 op add .count .count 1
-    * set *tmp162 .count
-    * write :saveLocation.1:y bank1 *tmp162
+  346 write :saveLocation.1:y bank1 .count
   347 op add .locations .locations 1
   348 label *label84
   349 jump *label83 always
 
   362 jump *label88 greaterThan :findPossiblePlacement:y 3
   363 op add *tmp165 :findPossiblePlacement:y 3
   364 op mul *tmp166 7 *tmp165
-    * op shl *tmp167 :findPossiblePlacement:placementMask *tmp166
-    * set :findPossiblePlacement:mask *tmp167
+  365 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp166
   366 set :findPossiblePlacement:x -3
   367 label *label89
   368 jump *label91 greaterThan :findPossiblePlacement:x 3
 
   371 jump *label92 equal *tmp169 false
   372 op mul *tmp171 :findPossiblePlacement:y 7
   373 op add *tmp172 24 *tmp171
-    * op add *tmp173 *tmp172 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp173
+  374 op add :findPossiblePlacement*retval *tmp172 :findPossiblePlacement:x
   375 jump *label85 always
   376 jump *label93 always
   377 label *label92
 
   415 label *label99
   416 set :tryPlaceGenerator:c :findPossiblePlacement:x
   417 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp180 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp180
+  418 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   419 op greaterThanEq *tmp181 :tryPlaceGenerator:shift 0
   420 jump *label100 equal *tmp181 false
   421 op lessThan *tmp183 :tryPlaceGenerator:shift 0
 
   426 label *label102
   427 label *label103
   428 op add *tmp185 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp186 *tmp185 :tryPlaceGenerator:c
-    * set .water2X *tmp186
+  429 op add .water2X *tmp185 :tryPlaceGenerator:c
   430 op add *tmp187 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp188 *tmp187 :tryPlaceGenerator:r
-    * set .water2Y *tmp188
+  431 op add .water2Y *tmp187 :tryPlaceGenerator:r
   432 op add *tmp189 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp190 *tmp189 :tryPlaceGenerator:c
-    * set .generatorX *tmp190
+  433 op add .generatorX *tmp189 :tryPlaceGenerator:c
   434 op add *tmp191 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp192 *tmp191 :tryPlaceGenerator:r
-    * set .generatorY *tmp192
+  435 op add .generatorY *tmp191 :tryPlaceGenerator:r
   436 op shl *tmp193 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   437 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
   438 jump *label101 always
 
   446 label *label104
   447 set :tryPlaceGenerator:c :findPossiblePlacement:x
   448 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp194 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp194
+  449 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   450 op lessThan *tmp195 :tryPlaceGenerator:shift 0
   451 jump *label105 equal *tmp195 false
   452 set :tryPlaceGenerator*retval false
 
   455 label *label105
   456 label *label106
   457 op add *tmp197 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp198 *tmp197 :tryPlaceGenerator:c
-    * set .water2X *tmp198
+  458 op add .water2X *tmp197 :tryPlaceGenerator:c
   459 op add *tmp199 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp200 *tmp199 :tryPlaceGenerator:r
-    * set .water2Y *tmp200
+  460 op add .water2Y *tmp199 :tryPlaceGenerator:r
   461 op add *tmp201 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp202 *tmp201 :tryPlaceGenerator:c
-    * set .generatorX *tmp202
+  462 op add .generatorX *tmp201 :tryPlaceGenerator:c
   463 op add *tmp203 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp204 *tmp203 :tryPlaceGenerator:r
-    * set .generatorY *tmp204
+  464 op add .generatorY *tmp203 :tryPlaceGenerator:r
   465 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   466 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
   467 label *label101
 
   474 label *label107
   475 set :tryPlaceGenerator:c :findPossiblePlacement:x
   476 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp206 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp206
+  477 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   478 op lessThan *tmp207 :tryPlaceGenerator:shift 0
   479 jump *label108 equal *tmp207 false
   480 set :tryPlaceGenerator*retval false
 
   482 jump *label109 always
   483 label *label108
   484 label *label109
-    * op add *tmp209 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .nodeX *tmp209
-    * op add *tmp210 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .nodeY *tmp210
+  485 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  486 op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   487 op shl *tmp211 1 :tryPlaceGenerator:shift
   488 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp211
   489 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   495 label *label110
   496 set :tryPlaceGenerator:c :findPossiblePlacement:x
   497 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp212 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp212
+  498 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   499 op lessThan *tmp213 :tryPlaceGenerator:shift 0
   500 jump *label111 equal *tmp213 false
   501 set :tryPlaceGenerator*retval false
 
   503 jump *label112 always
   504 label *label111
   505 label *label112
-    * op add *tmp215 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp215
-    * op add *tmp216 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp216
+  506 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  507 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   508 op shl *tmp217 1 :tryPlaceGenerator:shift
   509 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp217
   510 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   516 label *label113
   517 set :tryPlaceGenerator:c :findPossiblePlacement:x
   518 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp218 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp218
+  519 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   520 op lessThan *tmp219 :tryPlaceGenerator:shift 0
   521 jump *label114 equal *tmp219 false
   522 set :tryPlaceGenerator*retval false
 
   524 jump *label115 always
   525 label *label114
   526 label *label115
-    * op add *tmp221 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp221
-    * op add *tmp222 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp222
+  527 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  528 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   529 op shl *tmp223 1 :tryPlaceGenerator:shift
   530 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp223
   531 set :tryPlaceGenerator*retval true
 
   541 jump *label119 lessThan :createBlockMaskRow:c -4
   542 op shl *tmp224 :createBlockMaskRow:result 1
   543 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y *tmp227 *tmp226 *tmp228
-    * op or *tmp229 *tmp224 *tmp226
-    * set :createBlockMaskRow:result *tmp229
+  544 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  545 op or :createBlockMaskRow:result *tmp224 *tmp226
   546 label *label118
   547 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   548 jump *label117 always
 
   568 setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
   569 call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
   570 label *label122
-    * set *tmp235 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp235
+  571 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   572 op add *tmp236 :createAdjacentMask:y 3
   573 set :createBlockMaskRow:x :createAdjacentMask:x
   574 set :createBlockMaskRow:y *tmp236
   575 setaddr :createBlockMaskRow*retaddr *label123 (h:*label123)
   576 call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
   577 label *label123
-    * set *tmp237 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp237
+  578 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   579 set :createAdjacentMask:r 2
   580 label *label124
   581 jump *label126 lessThan :createAdjacentMask:r -4
 
   585 setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
   586 call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
   587 label *label127
-    * set *tmp239 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp239
+  588 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   589 op shl *tmp240 :createAdjacentMask:row1 1
   590 op or *tmp241 :createAdjacentMask:row2 *tmp240
   591 op shr *tmp242 :createAdjacentMask:row1 1
   592 op or *tmp243 *tmp241 *tmp242
-    * op or *tmp244 *tmp243 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp244
+  593 op or :createAdjacentMask:mask *tmp243 :createAdjacentMask:row0
   594 op shl *tmp245 :createAdjacentMask:result 7
   595 op and *tmp246 :createAdjacentMask:mask 0xFE
-    * op or *tmp247 *tmp245 *tmp246
-    * set :createAdjacentMask:result *tmp247
+  596 op or :createAdjacentMask:result *tmp245 *tmp246
   597 set :createAdjacentMask:row2 :createAdjacentMask:row1
   598 set :createAdjacentMask:row1 :createAdjacentMask:row0
   599 label *label125
   600 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   601 jump *label124 always
   602 label *label126
-    * op shr *tmp248 :createAdjacentMask:result 1
-    * set *tmp233 *tmp248
+  603 op shr *tmp233 :createAdjacentMask:result 1
   604 label *label121
   605 set .adjacentMask *tmp233
   606 label *label128
   607 wait 1e-15
   608 read *tmp249 processor1 ":createTerrainMask*finished"
   609 jump *label128 equal *tmp249 false
-    * read *tmp250 processor1 ":createTerrainMask*retval"
-    * set .terrainMask *tmp250
-    * op or *tmp251 .adjacentMask .terrainMask
-    * set :createCombinedMask*retval *tmp251
+  610 read .terrainMask processor1 ":createTerrainMask*retval"
+  611 op or :createCombinedMask*retval .adjacentMask .terrainMask
   612 jump *label120 always
   613 set :createCombinedMask*retval null
   614 label *label120
 
   641 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   642 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   643 label *label134
-    * set *tmp255 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp255
+  644 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   645 set :createFixedMatrix:row0 0b0000000
   646 set :createFixedMatrix:row1 0b0000000
   647 set :createFixedMatrix:row2 0b0011100
 
   661 op shl *tmp266 :createFixedMatrix:row5 35
   662 op or *tmp267 *tmp265 *tmp266
   663 op shl *tmp268 :createFixedMatrix:row6 42
-    * op or *tmp269 *tmp267 *tmp268
-    * set *tmp256 *tmp269
+  664 op or *tmp256 *tmp267 *tmp268
   665 label *label135
-    * op or *tmp270 :layoutThoriumDrillAtLocation:plainTerrainMask *tmp256
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp270
+  666 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp256
   667 set :createFixedMatrix.1:row0 0b1000001
   668 set :createFixedMatrix.1:row1 0b0000000
   669 set :createFixedMatrix.1:row2 0b0011100
 
   683 op shl *tmp281 :createFixedMatrix.1:row5 35
   684 op or *tmp282 *tmp280 *tmp281
   685 op shl *tmp283 :createFixedMatrix.1:row6 42
-    * op or *tmp284 *tmp282 *tmp283
-    * set *tmp271 *tmp284
+  686 op or *tmp271 *tmp282 *tmp283
   687 label *label136
-    * op or *tmp285 :layoutThoriumDrillAtLocation:terrainMask *tmp271
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp285
+  688 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp271
   689 set :createFixedMatrix.2:row0 0b11
   690 set :createFixedMatrix.2:row1 0b11
   691 op shl *tmp287 :createFixedMatrix.2:row0 0
   692 op shl *tmp288 :createFixedMatrix.2:row1 7
-    * op or *tmp289 *tmp287 *tmp288
-    * set *tmp286 *tmp289
+  693 op or *tmp286 *tmp287 *tmp288
   694 label *label137
   695 set :layoutThoriumDrillAtLocation:mask2x2 *tmp286
   696 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   702 label *label138
   703 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   704 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp290 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp290
+  705 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   706 op greaterThanEq *tmp291 :layoutThoriumDrillAtLocation:shift 0
   707 jump *label139 equal *tmp291 false
   708 op add *tmp293 .drillX 0.5
-    * op add *tmp294 *tmp293 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp294
+  709 op add .water1X *tmp293 :layoutThoriumDrillAtLocation:c
   710 op add *tmp295 .drillY 0.5
-    * op add *tmp296 *tmp295 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp296
+  711 op add .water1Y *tmp295 :layoutThoriumDrillAtLocation:r
   712 op shl *tmp297 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   713 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
   714 op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   725 label *label141
   726 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   727 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp299 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp299
+  728 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   729 op greaterThanEq *tmp300 :layoutThoriumDrillAtLocation:shift 0
   730 jump *label142 equal *tmp300 false
   731 op add *tmp302 .drillX 0.5
-    * op add *tmp303 *tmp302 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp303
+  732 op add .containerX *tmp302 :layoutThoriumDrillAtLocation:c
   733 op add *tmp304 .drillY 0.5
-    * op add *tmp305 *tmp304 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp305
+  734 op add .containerY *tmp304 :layoutThoriumDrillAtLocation:r
   735 op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   736 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
   737 jump *label143 always
 
   741 set :createFixedMatrix.3:row1 0b1111
   742 op shl *tmp308 :createFixedMatrix.3:row0 0
   743 op shl *tmp309 :createFixedMatrix.3:row1 7
-    * op or *tmp310 *tmp308 *tmp309
-    * set *tmp307 *tmp310
+  744 op or *tmp307 *tmp308 *tmp309
   745 label *label144
   746 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp307
   747 set :createFixedMatrix.4:row0 0b11
 
   754 op shl *tmp315 :createFixedMatrix.4:row2 14
   755 op or *tmp316 *tmp314 *tmp315
   756 op shl *tmp317 :createFixedMatrix.4:row3 21
-    * op or *tmp318 *tmp316 *tmp317
-    * set *tmp311 *tmp318
+  757 op or *tmp311 *tmp316 *tmp317
   758 label *label145
   759 set :layoutThoriumDrillAtLocation:generatorVertical *tmp311
   760 set :tryPlaceGenerator:centerX .drillX
 
   765 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   766 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   767 label *label146
-    * set *tmp319 :tryPlaceGenerator*retval
-    * jump *label147 equal *tmp319 false
+  768 jump *label147 equal :tryPlaceGenerator*retval false
   769 set :layoutThoriumDrillAtLocation*retval true
   770 jump *label129 always
   771 jump *label148 always
 
   790 set :layoutThoriumDrillAtLocation:sy -3
   791 setaddr *tmp321 *label155
   792 label *label149
-    * op sub *tmp322 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp322
-    * op sub *tmp323 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp323
+  793 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  794 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   795 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   796 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   797 setaddr :createCombinedMask*retaddr *label156 (h:*label156)
   798 call *label12 *invalid :createCombinedMask*retval (m:*label156) (h:*label156)
   799 label *label156
-    * set *tmp324 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp324
+  800 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   801 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   802 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   803 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
 
   813 label *label158
   814 label *label159
   815 op mul *tmp332 7 :shiftMask:shiftY
-    * op add *tmp333 :shiftMask:shiftX *tmp332
-    * set :shiftMask:shift *tmp333
+  816 op add :shiftMask:shift :shiftMask:shiftX *tmp332
   817 op greaterThan *tmp334 :shiftMask:shift 0
   818 jump *label160 equal *tmp334 false
-    * op shr *tmp336 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp336
+  819 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   820 op and *tmp337 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp338 *tmp337 :shiftMask:shift
-    * set :shiftMask:mask *tmp338
+  821 op shl :shiftMask:mask *tmp337 :shiftMask:shift
   822 jump *label161 always
   823 label *label160
   824 op sub *tmp339 0 :shiftMask:shift
 
   827 op notEqual *tmp340 :shiftMask:shiftX 0
   828 jump *label162 equal *tmp340 false
   829 op abs *tmp342 :shiftMask:shiftX
-    * op shr *tmp343 0b1111111 *tmp342
-    * set :shiftMask:keep *tmp343
+  830 op shr :shiftMask:keep 0b1111111 *tmp342
   831 op greaterThan *tmp344 :shiftMask:shiftX 0
   832 jump *label164 equal *tmp344 false
   833 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   849 set *tmp325 null
   850 label *label157
   851 set :layoutThoriumDrillAtLocation:shiftedMask *tmp325
-    * op or *tmp349 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp349
+  852 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   853 op sub *tmp350 .drillX :layoutThoriumDrillAtLocation:sx
   854 op sub *tmp351 .drillY :layoutThoriumDrillAtLocation:sy
   855 set :tryPlaceGenerator:centerX *tmp350
 
   860 setaddr :tryPlaceGenerator*retaddr *label166 (h:*label166)
   861 call *label10 *invalid :tryPlaceGenerator*retval (m:*label166) (h:*label166)
   862 label *label166
-    * set *tmp352 :tryPlaceGenerator*retval
-    * jump *label167 equal *tmp352 false
+  863 jump *label167 equal :tryPlaceGenerator*retval false
   864 set :layoutThoriumDrillAtLocation*retval true
   865 jump *label129 always
   866 jump *label168 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label23
-    * jump *label25 equal true false
    57 set :findDrillLocationLocal:best -1
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   235 label *label58
   236 set :findDrillLocationLocal:last 0
   237 label *label63
-    * jump *label65 equal true false
   238 write @unit processor1 ":findBestPosition:unit"
   239 write :findDrillLocationLocal:oreX processor1 ":findBestPosition:x"
   240 write :findDrillLocationLocal:oreY processor1 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-36 instructions):
 
    40 set :moveTo.1:radius 6
    41 label *label20
    42 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
-    * op equal *tmp28 *tmp27 false
-    * jump *label22 equal *tmp28 false
+   43 jump *label22 notEqual *tmp27 false
    44 op sub *tmp29 :moveTo.1:radius 0.5
    45 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
    46 label *label21
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label27
-    * op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label29 equal *tmp41 false
+   74 jump *label29 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   100 set :moveTo.2:radius 5
   101 label *label33
   102 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
-    * op equal *tmp58 *tmp57 false
-    * jump *label35 equal *tmp58 false
+  103 jump *label35 notEqual *tmp57 false
   104 op sub *tmp59 :moveTo.2:radius 0.5
   105 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
   106 label *label34
 
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
   114 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
-    * op equal *tmp65 *tmp63 false
-    * jump *label36 equal *tmp65 false
+  115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
   118 jump *label37 always
 
   126 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   127 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
   128 op len :locateOreAway:unitDist *tmp72 *tmp73
-    * op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
-    * jump *label38 equal *tmp75 false
-    * op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
-    * jump *label40 equal *tmp77 false
+  129 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
+  130 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   131 jump *label28 always
   132 jump *label41 always
   133 label *label40
 
   135 jump *label39 always
   136 label *label38
   137 label *label39
-    * op greaterThanEq *tmp79 :locateOreAway:coreDist 7
-    * jump *label42 equal *tmp79 false
-    * op lessThan *tmp81 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label44 equal *tmp81 false
+  138 jump *label42 lessThan :locateOreAway:coreDist 7
+  139 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   140 set :locateOreAway:lastX :locateOreAway:x
   141 set :locateOreAway:lastY :locateOreAway:y
   142 set :visited:x :locateOreAway:x
 
   153 op sub *tmp92 :visited:x :visited:lx
   154 op sub *tmp93 :visited:y :visited:ly
   155 op len *tmp94 *tmp92 *tmp93
-    * op lessThan *tmp95 *tmp94 7
-    * jump *label50 equal *tmp95 false
+  156 jump *label50 greaterThanEq *tmp94 7
   157 set *tmp83 true
   158 jump *label46 always
   159 jump *label51 always
 
   167 jump *label46 always
   168 set *tmp83 null
   169 label *label46
-    * op equal *tmp97 *tmp83 false
-    * jump *label52 equal *tmp97 false
+  170 jump *label52 notEqual *tmp83 false
   171 op div *tmp99 7.639437055824273 :locateOreAway:distance
   172 op add .angle .angle *tmp99
   173 op mul .mapProgress .angle .angle
 
   192 label *label26
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp101 *tmp37 false
-    * jump *label54 equal *tmp101 false
+  195 jump *label54 notEqual *tmp37 false
   196 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   197 jump *label17 always
   198 jump *label55 always
   199 label *label54
   200 label *label55
-    * op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
-    * jump *label56 equal *tmp104 false
+  201 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   202 op add .mapSpots .mapSpots 1
   203 jump *label57 always
   204 label *label56
 
   212 set :moveTo.4:radius 6
   213 label *label60
   214 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
-    * op equal *tmp110 *tmp109 false
-    * jump *label62 equal *tmp110 false
+  215 jump *label62 notEqual *tmp109 false
   216 op sub *tmp111 :moveTo.4:radius 0.5
   217 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
   218 label *label61
 
   236 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
   237 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
   238 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
-    * op greaterThan *tmp114 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label67 equal *tmp114 false
+  239 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   240 op add :findDrillLocationLocal:dx :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   241 op add :findDrillLocationLocal:dy :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   242 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp118 :findDrillLocationLocal:limit 1000
-    * jump *label69 equal *tmp118 false
+  243 jump *label69 greaterThanEq :findDrillLocationLocal:limit 1000
   244 set .mapSpots :findDrillLocationLocal:score
   245 jump *label70 always
   246 label *label69
   247 label *label70
-    * op greaterThanEq *tmp120 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label71 equal *tmp120 false
+  248 jump *label71 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   249 set :saveLocation:item :findDrillLocationLocal:item
   250 set :saveLocation:value :findDrillLocationLocal:score
   251 set :saveLocation:x :findDrillLocationLocal:dx
 
   271 jump *label68 always
   272 label *label67
   273 label *label68
-    * op greaterThan *tmp132 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label74 equal *tmp132 false
+  274 jump *label74 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   275 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   276 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   277 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   278 jump *label75 always
   279 label *label74
   280 label *label75
-    * op lessThanEq *tmp136 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label76 equal *tmp136 false
+  281 jump *label76 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   282 jump *label65 always
   283 jump *label77 always
   284 label *label76
 
   299 op sub *tmp148 :findDrillLocationLocal:oreY .coreY
   300 op abs *tmp149 *tmp148
   301 op min *tmp150 *tmp147 *tmp149
-    * op lessThan *tmp151 *tmp150 7
-    * jump *label80 equal *tmp151 false
+  302 jump *label80 greaterThanEq *tmp150 7
   303 jump *label65 always
   304 jump *label81 always
   305 label *label80
 
   307 label *label64
   308 jump *label63 always
   309 label *label65
-    * op greaterThanEq *tmp153 :findDrillLocationLocal:best 0
-    * jump *label82 equal *tmp153 false
+  310 jump *label82 lessThan :findDrillLocationLocal:best 0
   311 set :saveLocation.1:item :findDrillLocationLocal:item
   312 set :saveLocation.1:value :findDrillLocationLocal:best
   313 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   345 label *label89
   346 jump *label91 greaterThan :findPossiblePlacement:x 3
   347 op and *tmp168 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp169 *tmp168 0
-    * jump *label92 equal *tmp169 false
+  348 jump *label92 notEqual *tmp168 0
   349 op mul *tmp171 :findPossiblePlacement:y 7
   350 op add *tmp172 24 *tmp171
   351 op add :findPossiblePlacement*retval *tmp172 :findPossiblePlacement:x
 
   354 label *label92
   355 label *label93
   356 op sub *tmp174 3 :findPossiblePlacement:width
-    * op greaterThan *tmp175 :findPossiblePlacement:x *tmp174
-    * jump *label94 equal *tmp175 false
+  357 jump *label94 lessThanEq :findPossiblePlacement:x *tmp174
   358 jump *label91 always
   359 jump *label95 always
   360 label *label94
 
   365 jump *label89 always
   366 label *label91
   367 op sub *tmp177 3 :findPossiblePlacement:height
-    * op greaterThan *tmp178 :findPossiblePlacement:y *tmp177
-    * jump *label96 equal *tmp178 false
+  368 jump *label96 lessThanEq :findPossiblePlacement:y *tmp177
   369 jump *label88 always
   370 jump *label97 always
   371 label *label96
 
   391 set :tryPlaceGenerator:c :findPossiblePlacement:x
   392 set :tryPlaceGenerator:r :findPossiblePlacement:y
   393 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp181 :tryPlaceGenerator:shift 0
-    * jump *label100 equal *tmp181 false
-    * op lessThan *tmp183 :tryPlaceGenerator:shift 0
-    * jump *label102 equal *tmp183 false
+  394 jump *label100 lessThan :tryPlaceGenerator:shift 0
+  395 jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
   396 set :tryPlaceGenerator*retval false
   397 jump *label98 always
   398 jump *label103 always
 
   420 set :tryPlaceGenerator:c :findPossiblePlacement:x
   421 set :tryPlaceGenerator:r :findPossiblePlacement:y
   422 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp195 :tryPlaceGenerator:shift 0
-    * jump *label105 equal *tmp195 false
+  423 jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
   424 set :tryPlaceGenerator*retval false
   425 jump *label98 always
   426 jump *label106 always
 
   447 set :tryPlaceGenerator:c :findPossiblePlacement:x
   448 set :tryPlaceGenerator:r :findPossiblePlacement:y
   449 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp207 :tryPlaceGenerator:shift 0
-    * jump *label108 equal *tmp207 false
+  450 jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
   451 set :tryPlaceGenerator*retval false
   452 jump *label98 always
   453 jump *label109 always
 
   467 set :tryPlaceGenerator:c :findPossiblePlacement:x
   468 set :tryPlaceGenerator:r :findPossiblePlacement:y
   469 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp213 :tryPlaceGenerator:shift 0
-    * jump *label111 equal *tmp213 false
+  470 jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
   471 set :tryPlaceGenerator*retval false
   472 jump *label98 always
   473 jump *label112 always
 
   487 set :tryPlaceGenerator:c :findPossiblePlacement:x
   488 set :tryPlaceGenerator:r :findPossiblePlacement:y
   489 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp219 :tryPlaceGenerator:shift 0
-    * jump *label114 equal *tmp219 false
+  490 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   491 set :tryPlaceGenerator*retval false
   492 jump *label98 always
   493 jump *label115 always
 
   597 set :moveTo.5:radius 1
   598 label *label131
   599 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp252
-    * op equal *tmp253 *tmp252 false
-    * jump *label133 equal *tmp253 false
+  600 jump *label133 notEqual *tmp252 false
   601 op sub *tmp254 :moveTo.5:radius 0.5
   602 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp254
   603 label *label132
 
   671 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   672 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   673 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp291 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label139 equal *tmp291 false
+  674 jump *label139 lessThan :layoutThoriumDrillAtLocation:shift 0
   675 op add *tmp293 .drillX 0.5
   676 op add .water1X *tmp293 :layoutThoriumDrillAtLocation:c
   677 op add *tmp295 .drillY 0.5
 
   693 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   694 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   695 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp300 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label142 equal *tmp300 false
+  696 jump *label142 lessThan :layoutThoriumDrillAtLocation:shift 0
   697 op add *tmp302 .drillX 0.5
   698 op add .containerX *tmp302 :layoutThoriumDrillAtLocation:c
   699 op add *tmp304 .drillY 0.5
 
   780 label *label159
   781 op mul *tmp332 7 :shiftMask:shiftY
   782 op add :shiftMask:shift :shiftMask:shiftX *tmp332
-    * op greaterThan *tmp334 :shiftMask:shift 0
-    * jump *label160 equal *tmp334 false
+  783 jump *label160 lessThanEq :shiftMask:shift 0
   784 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   785 op and *tmp337 :shiftMask:mask :shiftMask:clearMask
   786 op shl :shiftMask:mask *tmp337 :shiftMask:shift
 
   789 op sub *tmp339 0 :shiftMask:shift
   790 op shr :shiftMask:mask :shiftMask:mask *tmp339
   791 label *label161
-    * op notEqual *tmp340 :shiftMask:shiftX 0
-    * jump *label162 equal *tmp340 false
+  792 jump *label162 equal :shiftMask:shiftX 0
   793 op abs *tmp342 :shiftMask:shiftX
   794 op shr :shiftMask:keep 0b1111111 *tmp342
-    * op greaterThan *tmp344 :shiftMask:shiftX 0
-    * jump *label164 equal *tmp344 false
+  795 jump *label164 lessThanEq :shiftMask:shiftX 0
   796 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   797 jump *label165 always
   798 label *label164
 
   873 label *label172
   874 set .drillX :findDrillLocationLocal:dx
   875 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp354 :findDrillLocationLocal*retval false
-    * jump *label173 equal *tmp354 false
+  876 jump *label173 notEqual :findDrillLocationLocal*retval false
   877 set :layoutThoriumDrill*retval false
   878 jump *label171 always
   879 jump *label174 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-32 instructions):
 
   115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
-    * jump *label37 always
   118 label *label36
   119 label *label37
   120 op sub *tmp67 :locateOreAway:x .coreX
 
   128 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label28 always
-    * jump *label41 always
   131 label *label40
   132 label *label41
-    * jump *label39 always
   133 label *label38
   134 label *label39
   135 jump *label42 lessThan :locateOreAway:coreDist 7
 
   153 jump *label50 greaterThanEq *tmp94 7
   154 set *tmp83 true
   155 jump *label46 always
-    * jump *label51 always
   156 label *label50
   157 label *label51
   158 label *label48
 
   170 printflush message1
   171 set *tmp37 true
   172 jump *label26 always
-    * jump *label53 always
   173 label *label52
   174 label *label53
-    * jump *label45 always
   175 label *label44
   176 label *label45
-    * jump *label43 always
   177 label *label42
   178 label *label43
   179 label *label28
 
   188 jump *label54 notEqual *tmp37 false
   189 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   190 jump *label17 always
-    * jump *label55 always
   191 label *label54
   192 label *label55
   193 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   194 op add .mapSpots .mapSpots 1
-    * jump *label57 always
   195 label *label56
   196 label *label57
   197 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   233 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   234 jump *label69 greaterThanEq :findDrillLocationLocal:limit 1000
   235 set .mapSpots :findDrillLocationLocal:score
-    * jump *label70 always
   236 label *label69
   237 label *label70
   238 jump *label71 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   255 ucontrol unbind
   256 set :findDrillLocationLocal*retval true
   257 jump *label17 always
-    * jump *label72 always
   258 label *label71
   259 label *label72
-    * jump *label68 always
   260 label *label67
   261 label *label68
   262 jump *label74 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   263 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   264 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   265 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label75 always
   266 label *label74
   267 label *label75
   268 jump *label76 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   269 jump *label65 always
-    * jump *label77 always
   270 label *label76
   271 label *label77
   272 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   287 op min *tmp150 *tmp147 *tmp149
   288 jump *label80 greaterThanEq *tmp150 7
   289 jump *label65 always
-    * jump *label81 always
   290 label *label80
   291 label *label81
   292 label *label64
 
   309 write :saveLocation.1:y bank1 .count
   310 op add .locations .locations 1
   311 label *label84
-    * jump *label83 always
   312 label *label82
   313 label *label83
   314 label *label24
 
   334 op add *tmp172 24 *tmp171
   335 op add :findPossiblePlacement*retval *tmp172 :findPossiblePlacement:x
   336 jump *label85 always
-    * jump *label93 always
   337 label *label92
   338 label *label93
   339 op sub *tmp174 3 :findPossiblePlacement:width
   340 jump *label94 lessThanEq :findPossiblePlacement:x *tmp174
   341 jump *label91 always
-    * jump *label95 always
   342 label *label94
   343 label *label95
   344 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   349 op sub *tmp177 3 :findPossiblePlacement:height
   350 jump *label96 lessThanEq :findPossiblePlacement:y *tmp177
   351 jump *label88 always
-    * jump *label97 always
   352 label *label96
   353 label *label97
   354 label *label87
 
   376 jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
   377 set :tryPlaceGenerator*retval false
   378 jump *label98 always
-    * jump *label103 always
   379 label *label102
   380 label *label103
   381 op add *tmp185 :tryPlaceGenerator:centerX 0.5
 
   403 jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
   404 set :tryPlaceGenerator*retval false
   405 jump *label98 always
-    * jump *label106 always
   406 label *label105
   407 label *label106
   408 op add *tmp197 :tryPlaceGenerator:centerX 0.5
 
   429 jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
   430 set :tryPlaceGenerator*retval false
   431 jump *label98 always
-    * jump *label109 always
   432 label *label108
   433 label *label109
   434 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   448 jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
   449 set :tryPlaceGenerator*retval false
   450 jump *label98 always
-    * jump *label112 always
   451 label *label111
   452 label *label112
   453 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   467 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   468 set :tryPlaceGenerator*retval false
   469 jump *label98 always
-    * jump *label115 always
   470 label *label114
   471 label *label115
   472 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   656 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
   657 op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   658 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp298
-    * jump *label140 always
   659 label *label139
   660 label *label140
   661 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   675 op add .containerY *tmp304 :layoutThoriumDrillAtLocation:r
   676 op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   677 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
-    * jump *label143 always
   678 label *label142
   679 label *label143
   680 set :createFixedMatrix.3:row0 0b1111
 
   708 jump *label147 equal :tryPlaceGenerator*retval false
   709 set :layoutThoriumDrillAtLocation*retval true
   710 jump *label129 always
-    * jump *label148 always
   711 label *label147
   712 label *label148
   713 set :layoutThoriumDrillAtLocation:sx 3
 
   748 jump *label158 equal *tmp330 false
   749 set *tmp325 0
   750 jump *label157 always
-    * jump *label159 always
   751 label *label158
   752 label *label159
   753 op mul *tmp332 7 :shiftMask:shiftY
 
   766 op shr :shiftMask:keep 0b1111111 *tmp342
   767 jump *label164 lessThanEq :shiftMask:shiftX 0
   768 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label165 always
   769 label *label164
   770 label *label165
   771 op shl *tmp346 :shiftMask:keep 7
 
   775 op shl *tmp348 :shiftMask:keep 21
   776 op or :shiftMask:keep :shiftMask:keep *tmp348
   777 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label163 always
   778 label *label162
   779 label *label163
   780 set *tmp325 :shiftMask:mask
 
   796 jump *label167 equal :tryPlaceGenerator*retval false
   797 set :layoutThoriumDrillAtLocation*retval true
   798 jump *label129 always
-    * jump *label168 always
   799 label *label167
   800 label *label168
   801 label *label150
 
   845 jump *label173 notEqual :findDrillLocationLocal*retval false
   846 set :layoutThoriumDrill*retval false
   847 jump *label171 always
-    * jump *label174 always
   848 label *label173
   849 label *label174
   850 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
   593 set :createFixedMatrix:row4 0b0011100
   594 set :createFixedMatrix:row5 0b0000000
   595 set :createFixedMatrix:row6 0b0000000
-    * op shl *tmp257 :createFixedMatrix:row0 0
+  596 set *tmp257 :createFixedMatrix:row0
   597 op shl *tmp258 :createFixedMatrix:row1 7
   598 op or *tmp259 *tmp257 *tmp258
   599 op shl *tmp260 :createFixedMatrix:row2 14
 
   615 set :createFixedMatrix.1:row4 0b0011100
   616 set :createFixedMatrix.1:row5 0b0000000
   617 set :createFixedMatrix.1:row6 0b1000001
-    * op shl *tmp272 :createFixedMatrix.1:row0 0
+  618 set *tmp272 :createFixedMatrix.1:row0
   619 op shl *tmp273 :createFixedMatrix.1:row1 7
   620 op or *tmp274 *tmp272 *tmp273
   621 op shl *tmp275 :createFixedMatrix.1:row2 14
 
   632 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp271
   633 set :createFixedMatrix.2:row0 0b11
   634 set :createFixedMatrix.2:row1 0b11
-    * op shl *tmp287 :createFixedMatrix.2:row0 0
+  635 set *tmp287 :createFixedMatrix.2:row0
   636 op shl *tmp288 :createFixedMatrix.2:row1 7
   637 op or *tmp286 *tmp287 *tmp288
   638 label *label137
 
   679 label *label143
   680 set :createFixedMatrix.3:row0 0b1111
   681 set :createFixedMatrix.3:row1 0b1111
-    * op shl *tmp308 :createFixedMatrix.3:row0 0
+  682 set *tmp308 :createFixedMatrix.3:row0
   683 op shl *tmp309 :createFixedMatrix.3:row1 7
   684 op or *tmp307 *tmp308 *tmp309
   685 label *label144
 
   688 set :createFixedMatrix.4:row1 0b11
   689 set :createFixedMatrix.4:row2 0b11
   690 set :createFixedMatrix.4:row3 0b11
-    * op shl *tmp312 :createFixedMatrix.4:row0 0
+  691 set *tmp312 :createFixedMatrix.4:row0
   692 op shl *tmp313 :createFixedMatrix.4:row1 7
   693 op or *tmp314 *tmp312 *tmp313
   694 op shl *tmp315 :createFixedMatrix.4:row2 14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp22 @mapw .coreX
-    * op sub *tmp23 @maph .coreY
-    * op max *tmp24 .coreX .coreY
+   25 op sub *tmp22 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp23 @maph :findDrillLocationLocal:y
+   27 op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp24 *tmp24 *tmp22
    29 op max *tmp24 *tmp24 *tmp23
    30 set :findDrillLocationLocal:distanceLimit *tmp24
    31 set .mapAction "Locating ore..."
    32 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp25 :moveTo:x
-    * set *tmp26 :moveTo:y
-    * set :moveTo.1:x *tmp25
-    * set :moveTo.1:y *tmp26
+   33 set .mapProgress 0
+   34 set :moveTo:x :findDrillLocationLocal:x
+   35 set :moveTo:y :findDrillLocationLocal:y
+   36 set *tmp25 .coreX
+   37 set *tmp26 .coreY
+   38 set :moveTo.1:x :moveTo:x
+   39 set :moveTo.1:y :moveTo:y
    40 set :moveTo.1:radius 6
    41 label *label20
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
+   42 ucontrol within *tmp25 *tmp26 6 *tmp27
    43 jump *label22 notEqual *tmp27 false
-    * op sub *tmp29 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
+   44 op sub *tmp29 6 0.5
+   45 ucontrol approach *tmp25 *tmp26 5.5
    46 label *label21
    47 jump *label20 always
    48 label *label22
    49 label *label19
    50 label *label18
-    * op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   51 op div *tmp30 *tmp24 3.8197185279121366
    52 op pow .mapTotal *tmp30 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label27
-    * jump *label29 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   74 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
-    * op add *tmp45 .coreX *tmp44
+   78 op add *tmp45 :findDrillLocationLocal:x *tmp44
    79 op sub *tmp46 @mapw 5
    80 set :limit:value *tmp45
    81 set :limit:low 5
    82 set :limit:high *tmp46
-    * op max *tmp48 :limit:value :limit:low
-    * op min *tmp47 *tmp48 :limit:high
+   83 op max *tmp48 *tmp45 5
+   84 op min *tmp47 *tmp48 *tmp46
    85 label *label30
    86 set :locateOreAway:lx *tmp47
    87 op cos *tmp50 :locateOreAway:a
    88 op mul *tmp51 *tmp50 :locateOreAway:distance
-    * op add *tmp52 .coreY *tmp51
+   89 op add *tmp52 :findDrillLocationLocal:y *tmp51
    90 op sub *tmp53 @maph 5
    91 set :limit.1:value *tmp52
    92 set :limit.1:low 5
    93 set :limit.1:high *tmp53
-    * op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp54 *tmp55 :limit.1:high
+   94 op max *tmp55 *tmp52 5
+   95 op min *tmp54 *tmp55 *tmp53
    96 label *label31
    97 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   98 set :moveTo.2:x *tmp47
+   99 set :moveTo.2:y *tmp54
   100 set :moveTo.2:radius 5
   101 label *label33
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
+  102 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
   103 jump *label35 notEqual *tmp57 false
-    * op sub *tmp59 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
+  104 op sub *tmp59 5 0.5
+  105 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   106 label *label34
   107 jump *label33 always
   108 label *label35
 
   111 op add .angle .angle *tmp60
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
+  114 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp63 0
   115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
   118 label *label36
   119 label *label37
-    * op sub *tmp67 :locateOreAway:x .coreX
+  120 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
   121 op abs *tmp68 *tmp67
-    * op sub *tmp69 :locateOreAway:y .coreY
+  122 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
   123 op abs *tmp70 *tmp69
   124 op max :locateOreAway:coreDist *tmp68 *tmp70
-    * op sub *tmp72 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp73 :locateOreAway:y :locateOreAway:ly
+  125 op sub *tmp72 :locateOreAway:x *tmp47
+  126 op sub *tmp73 :locateOreAway:y *tmp54
   127 op len :locateOreAway:unitDist *tmp72 *tmp73
   128 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
 
   147 read :visited:lx bank1 *tmp87
   148 op add *tmp90 :visited:index 3
   149 read :visited:ly bank1 *tmp90
-    * op sub *tmp92 :visited:x :visited:lx
-    * op sub *tmp93 :visited:y :visited:ly
+  150 op sub *tmp92 :locateOreAway:x :visited:lx
+  151 op sub *tmp93 :locateOreAway:y :visited:ly
   152 op len *tmp94 *tmp92 *tmp93
   153 jump *label50 greaterThanEq *tmp94 7
   154 set *tmp83 true
 
   161 label *label49
   162 set *tmp83 false
   163 jump *label46 always
-    * set *tmp83 null
   164 label *label46
   165 jump *label52 notEqual *tmp83 false
-    * op div *tmp99 7.639437055824273 :locateOreAway:distance
+  166 op div *tmp99 2 .angle
   167 op add .angle .angle *tmp99
   168 op mul .mapProgress .angle .angle
   169 printflush message1
 
   180 label *label29
   181 set *tmp37 false
   182 jump *label26 always
-    * set *tmp37 null
   183 label *label26
   184 set :findDrillLocationLocal:oreX :locateOreAway:x
   185 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   192 op add .mapSpots .mapSpots 1
   193 label *label56
   194 label *label57
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp107 :moveTo.3:x
-    * set *tmp108 :moveTo.3:y
-    * set :moveTo.4:x *tmp107
-    * set :moveTo.4:y *tmp108
+  195 set :moveTo.3:x :locateOreAway:x
+  196 set :moveTo.3:y :locateOreAway:y
+  197 set *tmp107 :findDrillLocationLocal:oreX
+  198 set *tmp108 :findDrillLocationLocal:oreY
+  199 set :moveTo.4:x :moveTo.3:x
+  200 set :moveTo.4:y :moveTo.3:y
   201 set :moveTo.4:radius 6
   202 label *label60
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
+  203 ucontrol within *tmp107 *tmp108 6 *tmp109
   204 jump *label62 notEqual *tmp109 false
-    * op sub *tmp111 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
+  205 op sub *tmp111 6 0.5
+  206 ucontrol approach *tmp107 *tmp108 5.5
   207 label *label61
   208 jump *label60 always
   209 label *label62
 
   240 set :saveLocation:y :findDrillLocationLocal:dy
   241 op add .count .count 1
   242 set *tmp122 .count
-    * sensor *tmp124 :saveLocation:item @id
-    * write *tmp124 bank1 *tmp122
+  243 sensor *tmp124 :findDrillLocationLocal:item @id
+  244 write *tmp124 bank1 .count
   245 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  246 write :findDrillLocationLocal:score bank1 .count
   247 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  248 write :findDrillLocationLocal:dx bank1 .count
   249 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  250 write :findDrillLocationLocal:dy bank1 .count
   251 op add .locations .locations 1
   252 label *label73
   253 ucontrol unbind
 
   278 op floor *tmp143 *tmp144
   279 label *label79
   280 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp143
-    * op sub *tmp146 :findDrillLocationLocal:oreX .coreX
+  281 op sub *tmp146 :findDrillLocationLocal:oreX :findDrillLocationLocal:x
   282 op abs *tmp147 *tmp146
-    * op sub *tmp148 :findDrillLocationLocal:oreY .coreY
+  283 op sub *tmp148 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   284 op abs *tmp149 *tmp148
   285 op min *tmp150 *tmp147 *tmp149
   286 jump *label80 greaterThanEq *tmp150 7
 
   297 set :saveLocation.1:y :findDrillLocationLocal:bestY
   298 op add .count .count 1
   299 set *tmp155 .count
-    * sensor *tmp157 :saveLocation.1:item @id
-    * write *tmp157 bank1 *tmp155
+  300 sensor *tmp157 :findDrillLocationLocal:item @id
+  301 write *tmp157 bank1 .count
   302 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  303 write :findDrillLocationLocal:best bank1 .count
   304 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  305 write :findDrillLocationLocal:bestX bank1 .count
   306 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  307 write :findDrillLocationLocal:bestY bank1 .count
   308 op add .locations .locations 1
   309 label *label84
   310 label *label82
 
   355 label *label88
   356 set :findPossiblePlacement*retval -1
   357 jump *label85 always
-    * set :findPossiblePlacement*retval null
   358 label *label85
   359 return :findPossiblePlacement*retaddr
   360 end
 
   369 set :tryPlaceGenerator:c :findPossiblePlacement:x
   370 set :tryPlaceGenerator:r :findPossiblePlacement:y
   371 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label100 lessThan :tryPlaceGenerator:shift 0
-    * jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
+  372 jump *label100 lessThan :findPossiblePlacement*retval 0
+  373 jump *label102 greaterThanEq :findPossiblePlacement*retval 0
   374 set :tryPlaceGenerator*retval false
   375 jump *label98 always
   376 label *label102
   377 label *label103
   378 op add *tmp185 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp185 :tryPlaceGenerator:c
+  379 op add .water2X *tmp185 :findPossiblePlacement:x
   380 op add *tmp187 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp187 :tryPlaceGenerator:r
+  381 op add .water2Y *tmp187 :findPossiblePlacement:y
   382 op add *tmp189 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp189 :tryPlaceGenerator:c
+  383 op add .generatorX *tmp185 :findPossiblePlacement:x
   384 op add *tmp191 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp191 :tryPlaceGenerator:r
-    * op shl *tmp193 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  385 op add .generatorY *tmp191 :findPossiblePlacement:y
+  386 op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   387 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
   388 jump *label101 always
   389 label *label100
 
   397 set :tryPlaceGenerator:c :findPossiblePlacement:x
   398 set :tryPlaceGenerator:r :findPossiblePlacement:y
   399 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
+  400 jump *label105 greaterThanEq :findPossiblePlacement*retval 0
   401 set :tryPlaceGenerator*retval false
   402 jump *label98 always
   403 label *label105
   404 label *label106
   405 op add *tmp197 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp197 :tryPlaceGenerator:c
+  406 op add .water2X *tmp197 :findPossiblePlacement:x
   407 op add *tmp199 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp199 :tryPlaceGenerator:r
+  408 op add .water2Y *tmp199 :findPossiblePlacement:y
   409 op add *tmp201 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp201 :tryPlaceGenerator:c
+  410 op add .generatorX *tmp201 :findPossiblePlacement:x
   411 op add *tmp203 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp203 :tryPlaceGenerator:r
-    * op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  412 op add .generatorY *tmp199 :findPossiblePlacement:y
+  413 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   414 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
   415 label *label101
   416 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   423 set :tryPlaceGenerator:c :findPossiblePlacement:x
   424 set :tryPlaceGenerator:r :findPossiblePlacement:y
   425 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
+  426 jump *label108 greaterThanEq :findPossiblePlacement*retval 0
   427 set :tryPlaceGenerator*retval false
   428 jump *label98 always
   429 label *label108
   430 label *label109
-    * op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp211 1 :tryPlaceGenerator:shift
+  431 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  432 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  433 op shl *tmp211 1 :findPossiblePlacement*retval
   434 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp211
   435 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   436 set :findPossiblePlacement:placementMask 1
 
   442 set :tryPlaceGenerator:c :findPossiblePlacement:x
   443 set :tryPlaceGenerator:r :findPossiblePlacement:y
   444 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
+  445 jump *label111 greaterThanEq :findPossiblePlacement*retval 0
   446 set :tryPlaceGenerator*retval false
   447 jump *label98 always
   448 label *label111
   449 label *label112
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp217 1 :tryPlaceGenerator:shift
+  450 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  451 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  452 op shl *tmp217 1 :findPossiblePlacement*retval
   453 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp217
   454 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   455 set :findPossiblePlacement:placementMask 1
 
   461 set :tryPlaceGenerator:c :findPossiblePlacement:x
   462 set :tryPlaceGenerator:r :findPossiblePlacement:y
   463 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
+  464 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   465 set :tryPlaceGenerator*retval false
   466 jump *label98 always
   467 label *label114
   468 label *label115
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp223 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp223
+  469 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  470 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  471 op shl *tmp223 1 :findPossiblePlacement*retval
   472 set :tryPlaceGenerator*retval true
   473 jump *label98 always
-    * set :tryPlaceGenerator*retval null
   474 label *label98
   475 return :tryPlaceGenerator*retaddr
   476 end
 
   489 label *label119
   490 set :createBlockMaskRow*retval :createBlockMaskRow:result
   491 jump *label116 always
-    * set :createBlockMaskRow*retval null
   492 label *label116
   493 return :createBlockMaskRow*retaddr
   494 end
 
   501 set :createAdjacentMask:x :createCombinedMask:x
   502 set :createAdjacentMask:y :createCombinedMask:y
   503 set :createAdjacentMask:result 0
-    * op add *tmp234 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  504 op add *tmp234 :createCombinedMask:y 4
+  505 set :createBlockMaskRow:x :createCombinedMask:x
   506 set :createBlockMaskRow:y *tmp234
   507 setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
   508 call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
 
   529 op or *tmp241 :createAdjacentMask:row2 *tmp240
   530 op shr *tmp242 :createAdjacentMask:row1 1
   531 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createAdjacentMask:row0
+  532 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
   533 op shl *tmp245 :createAdjacentMask:result 7
   534 op and *tmp246 :createAdjacentMask:mask 0xFE
   535 op or :createAdjacentMask:result *tmp245 *tmp246
   536 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  537 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   538 label *label125
   539 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   540 jump *label124 always
 
   547 read *tmp249 processor1 ":createTerrainMask*finished"
   548 jump *label128 equal *tmp249 false
   549 read .terrainMask processor1 ":createTerrainMask*retval"
-    * op or :createCombinedMask*retval .adjacentMask .terrainMask
+  550 op or :createCombinedMask*retval *tmp233 .terrainMask
   551 jump *label120 always
-    * set :createCombinedMask*retval null
   552 label *label120
   553 return :createCombinedMask*retaddr
   554 end
 
   565 set :moveTo.5:y .drillY
   566 set :moveTo.5:radius 1
   567 label *label131
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp252
+  568 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
   569 jump *label133 notEqual *tmp252 false
-    * op sub *tmp254 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp254
+  570 op sub *tmp254 1 0.5
+  571 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   572 label *label132
   573 jump *label131 always
   574 label *label133
 
   586 set :createFixedMatrix:row4 0b0011100
   587 set :createFixedMatrix:row5 0b0000000
   588 set :createFixedMatrix:row6 0b0000000
-    * set *tmp257 :createFixedMatrix:row0
-    * op shl *tmp258 :createFixedMatrix:row1 7
-    * op or *tmp259 *tmp257 *tmp258
-    * op shl *tmp260 :createFixedMatrix:row2 14
-    * op or *tmp261 *tmp259 *tmp260
-    * op shl *tmp262 :createFixedMatrix:row3 21
-    * op or *tmp263 *tmp261 *tmp262
-    * op shl *tmp264 :createFixedMatrix:row4 28
-    * op or *tmp265 *tmp263 *tmp264
-    * op shl *tmp266 :createFixedMatrix:row5 35
-    * op or *tmp267 *tmp265 *tmp266
-    * op shl *tmp268 :createFixedMatrix:row6 42
-    * op or *tmp256 *tmp267 *tmp268
+  589 set *tmp257 0b0000000
+  590 op shl *tmp258 0b0000000 7
+  591 op or *tmp259 :createFixedMatrix:row0 0
+  592 op shl *tmp260 0b0011100 14
+  593 op or *tmp261 *tmp259 458752
+  594 op shl *tmp262 0b0011100 21
+  595 op or *tmp263 *tmp261 58720256
+  596 op shl *tmp264 0b0011100 28
+  597 op or *tmp265 *tmp263 7516192768
+  598 op shl *tmp266 0b0000000 35
+  599 op or *tmp267 *tmp265 0
+  600 op shl *tmp268 0b0000000 42
+  601 op or *tmp256 *tmp267 0
   602 label *label135
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp256
+  603 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp256
   604 set :createFixedMatrix.1:row0 0b1000001
   605 set :createFixedMatrix.1:row1 0b0000000
   606 set :createFixedMatrix.1:row2 0b0011100
 
   608 set :createFixedMatrix.1:row4 0b0011100
   609 set :createFixedMatrix.1:row5 0b0000000
   610 set :createFixedMatrix.1:row6 0b1000001
-    * set *tmp272 :createFixedMatrix.1:row0
-    * op shl *tmp273 :createFixedMatrix.1:row1 7
-    * op or *tmp274 *tmp272 *tmp273
-    * op shl *tmp275 :createFixedMatrix.1:row2 14
-    * op or *tmp276 *tmp274 *tmp275
-    * op shl *tmp277 :createFixedMatrix.1:row3 21
-    * op or *tmp278 *tmp276 *tmp277
-    * op shl *tmp279 :createFixedMatrix.1:row4 28
-    * op or *tmp280 *tmp278 *tmp279
-    * op shl *tmp281 :createFixedMatrix.1:row5 35
-    * op or *tmp282 *tmp280 *tmp281
-    * op shl *tmp283 :createFixedMatrix.1:row6 42
-    * op or *tmp271 *tmp282 *tmp283
+  611 set *tmp272 0b1000001
+  612 op shl *tmp273 0b0000000 7
+  613 op or *tmp274 :createFixedMatrix.1:row0 0
+  614 op shl *tmp275 0b0011100 14
+  615 op or *tmp276 *tmp274 458752
+  616 op shl *tmp277 0b0011100 21
+  617 op or *tmp278 *tmp276 58720256
+  618 op shl *tmp279 0b0011100 28
+  619 op or *tmp280 *tmp278 7516192768
+  620 op shl *tmp281 0b0000000 35
+  621 op or *tmp282 *tmp280 0
+  622 op shl *tmp283 0b1000001 42
+  623 op or *tmp271 *tmp282 285873023221760
   624 label *label136
   625 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp271
   626 set :createFixedMatrix.2:row0 0b11
   627 set :createFixedMatrix.2:row1 0b11
-    * set *tmp287 :createFixedMatrix.2:row0
-    * op shl *tmp288 :createFixedMatrix.2:row1 7
-    * op or *tmp286 *tmp287 *tmp288
+  628 set *tmp287 0b11
+  629 op shl *tmp288 0b11 7
+  630 op or *tmp286 :createFixedMatrix.2:row0 384
   631 label *label137
   632 set :layoutThoriumDrillAtLocation:mask2x2 *tmp286
   633 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  634 set :findPossiblePlacement:placementMask *tmp286
   635 set :findPossiblePlacement:width 2
   636 set :findPossiblePlacement:height 2
   637 setaddr :findPossiblePlacement*retaddr *label138 (h:*label138)
 
   640 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   641 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   642 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label139 lessThan :layoutThoriumDrillAtLocation:shift 0
+  643 jump *label139 lessThan :findPossiblePlacement*retval 0
   644 op add *tmp293 .drillX 0.5
-    * op add .water1X *tmp293 :layoutThoriumDrillAtLocation:c
+  645 op add .water1X *tmp293 :findPossiblePlacement:x
   646 op add *tmp295 .drillY 0.5
-    * op add .water1Y *tmp295 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp297 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  647 op add .water1Y *tmp295 :findPossiblePlacement:y
+  648 op shl *tmp297 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   649 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
-    * op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp298
+  650 op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  651 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp297
   652 label *label139
   653 label *label140
   654 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   661 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   662 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   663 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label142 lessThan :layoutThoriumDrillAtLocation:shift 0
+  664 jump *label142 lessThan :findPossiblePlacement*retval 0
   665 op add *tmp302 .drillX 0.5
-    * op add .containerX *tmp302 :layoutThoriumDrillAtLocation:c
+  666 op add .containerX *tmp302 :findPossiblePlacement:x
   667 op add *tmp304 .drillY 0.5
-    * op add .containerY *tmp304 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  668 op add .containerY *tmp304 :findPossiblePlacement:y
+  669 op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   670 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
   671 label *label142
   672 label *label143
   673 set :createFixedMatrix.3:row0 0b1111
   674 set :createFixedMatrix.3:row1 0b1111
-    * set *tmp308 :createFixedMatrix.3:row0
-    * op shl *tmp309 :createFixedMatrix.3:row1 7
-    * op or *tmp307 *tmp308 *tmp309
+  675 set *tmp308 0b1111
+  676 op shl *tmp309 0b1111 7
+  677 op or *tmp307 :createFixedMatrix.3:row0 1920
   678 label *label144
   679 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp307
   680 set :createFixedMatrix.4:row0 0b11
   681 set :createFixedMatrix.4:row1 0b11
   682 set :createFixedMatrix.4:row2 0b11
   683 set :createFixedMatrix.4:row3 0b11
-    * set *tmp312 :createFixedMatrix.4:row0
-    * op shl *tmp313 :createFixedMatrix.4:row1 7
-    * op or *tmp314 *tmp312 *tmp313
-    * op shl *tmp315 :createFixedMatrix.4:row2 14
-    * op or *tmp316 *tmp314 *tmp315
-    * op shl *tmp317 :createFixedMatrix.4:row3 21
-    * op or *tmp311 *tmp316 *tmp317
+  684 set *tmp312 0b11
+  685 op shl *tmp313 0b11 7
+  686 op or *tmp314 :createFixedMatrix.4:row0 384
+  687 op shl *tmp315 0b11 14
+  688 op or *tmp316 *tmp314 49152
+  689 op shl *tmp317 0b11 21
+  690 op or *tmp311 *tmp316 6291456
   691 label *label145
   692 set :layoutThoriumDrillAtLocation:generatorVertical *tmp311
   693 set :tryPlaceGenerator:centerX .drillX
   694 set :tryPlaceGenerator:centerY .drillY
   695 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  696 set :tryPlaceGenerator:generatorHorizontal *tmp307
+  697 set :tryPlaceGenerator:generatorVertical *tmp311
   698 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   699 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   700 label *label146
 
   733 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   734 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   735 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * op abs *tmp326 :shiftMask:shiftX
+  736 op abs *tmp326 :layoutThoriumDrillAtLocation:sx
   737 op greaterThan *tmp327 *tmp326 6
-    * op abs *tmp328 :shiftMask:shiftY
+  738 op abs *tmp328 :layoutThoriumDrillAtLocation:sy
   739 op greaterThan *tmp329 *tmp328 6
   740 op or *tmp330 *tmp327 *tmp329
   741 jump *label158 equal *tmp330 false
 
   743 jump *label157 always
   744 label *label158
   745 label *label159
-    * op mul *tmp332 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp332
+  746 op mul *tmp332 7 :layoutThoriumDrillAtLocation:sy
+  747 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp332
   748 jump *label160 lessThanEq :shiftMask:shift 0
   749 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp337 :shiftMask:mask :shiftMask:clearMask
+  750 op and *tmp337 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   751 op shl :shiftMask:mask *tmp337 :shiftMask:shift
   752 jump *label161 always
   753 label *label160
   754 op sub *tmp339 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp339
+  755 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp339
   756 label *label161
-    * jump *label162 equal :shiftMask:shiftX 0
-    * op abs *tmp342 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp342
-    * jump *label164 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  757 jump *label162 equal :layoutThoriumDrillAtLocation:sx 0
+  758 op abs *tmp342 :layoutThoriumDrillAtLocation:sx
+  759 op shr :shiftMask:keep 0b1111111 *tmp326
+  760 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  761 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   762 label *label164
   763 label *label165
   764 op shl *tmp346 :shiftMask:keep 7
 
   772 label *label163
   773 set *tmp325 :shiftMask:mask
   774 jump *label157 always
-    * set *tmp325 null
   775 label *label157
   776 set :layoutThoriumDrillAtLocation:shiftedMask *tmp325
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  777 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp325
   778 op sub *tmp350 .drillX :layoutThoriumDrillAtLocation:sx
   779 op sub *tmp351 .drillY :layoutThoriumDrillAtLocation:sy
   780 set :tryPlaceGenerator:centerX *tmp350
 
   796 label *label151
   797 set :layoutThoriumDrillAtLocation*retval true
   798 jump *label129 always
-    * set :layoutThoriumDrillAtLocation*retval null
   799 label *label129
   800 return :layoutThoriumDrillAtLocation*retaddr
   801 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-101 instructions):
 
    33 set .mapProgress 0
    34 set :moveTo:x :findDrillLocationLocal:x
    35 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 .coreX
-    * set *tmp26 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   36 set *tmp25 :findDrillLocationLocal:x
+   37 set *tmp26 :findDrillLocationLocal:y
+   38 set :moveTo.1:x :findDrillLocationLocal:x
+   39 set :moveTo.1:y :findDrillLocationLocal:y
    40 label *label20
-    * ucontrol within *tmp25 *tmp26 6 *tmp27
+   41 ucontrol within .coreX .coreY 6 *tmp27
    42 jump *label22 notEqual *tmp27 false
-    * op sub *tmp29 6 0.5
-    * ucontrol approach *tmp25 *tmp26 5.5
+   43 ucontrol approach .coreX .coreY 5.5
    44 label *label21
    45 jump *label20 always
    46 label *label22
 
    59 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    60 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    61 op pow .mapTotal *tmp35 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    62 set :locateOreAway:x :findDrillLocationLocal:oreX
    63 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    64 op mul :locateOreAway:distance 3.8197185279121366 .angle
    65 set :locateOreAway:lastX -1
    66 set :locateOreAway:lastY -1
 
    73 op mul *tmp44 *tmp43 :locateOreAway:distance
    74 op add *tmp45 :findDrillLocationLocal:x *tmp44
    75 op sub *tmp46 @mapw 5
-    * set :limit:value *tmp45
-    * set :limit:low 5
-    * set :limit:high *tmp46
    76 op max *tmp48 *tmp45 5
    77 op min *tmp47 *tmp48 *tmp46
    78 label *label30
 
    81 op mul *tmp51 *tmp50 :locateOreAway:distance
    82 op add *tmp52 :findDrillLocationLocal:y *tmp51
    83 op sub *tmp53 @maph 5
-    * set :limit.1:value *tmp52
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp53
    84 op max *tmp55 *tmp52 5
    85 op min *tmp54 *tmp55 *tmp53
    86 label *label31
    87 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x *tmp47
-    * set :moveTo.2:y *tmp54
-    * set :moveTo.2:radius 5
    88 label *label33
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
+   89 ucontrol within *tmp47 *tmp54 5 *tmp57
    90 jump *label35 notEqual *tmp57 false
-    * op sub *tmp59 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   91 ucontrol approach *tmp47 *tmp54 4.5
    92 label *label34
    93 jump *label33 always
    94 label *label35
 
   122 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   123 set :locateOreAway:lastX :locateOreAway:x
   124 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   125 set *tmp84 .locations
   126 set :visited:i .locationsStart
   127 label *label47
 
   178 label *label57
   179 set :moveTo.3:x :locateOreAway:x
   180 set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :findDrillLocationLocal:oreX
-    * set *tmp108 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  181 set *tmp107 :locateOreAway:x
+  182 set *tmp108 :locateOreAway:y
+  183 set :moveTo.4:x :locateOreAway:x
+  184 set :moveTo.4:y :locateOreAway:y
   185 label *label60
-    * ucontrol within *tmp107 *tmp108 6 *tmp109
+  186 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
   187 jump *label62 notEqual *tmp109 false
-    * op sub *tmp111 6 0.5
-    * ucontrol approach *tmp107 *tmp108 5.5
+  188 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   189 label *label61
   190 jump *label60 always
   191 label *label62
 
   216 label *label69
   217 label *label70
   218 jump *label71 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   219 op add .count .count 1
-    * set *tmp122 .count
   220 sensor *tmp124 :findDrillLocationLocal:item @id
   221 write *tmp124 bank1 .count
   222 op add .count .count 1
 
   268 jump *label63 always
   269 label *label65
   270 jump *label82 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   271 op add .count .count 1
-    * set *tmp155 .count
   272 sensor *tmp157 :findDrillLocationLocal:item @id
   273 write *tmp157 bank1 .count
   274 op add .count .count 1
 
   338 setaddr :findPossiblePlacement*retaddr *label99 (h:*label99)
   339 call *label9 *invalid :findPossiblePlacement*retval (m:*label99) (h:*label99)
   340 label *label99
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   341 jump *label100 lessThan :findPossiblePlacement*retval 0
   342 jump *label102 greaterThanEq :findPossiblePlacement*retval 0
   343 set :tryPlaceGenerator*retval false
 
   348 op add .water2X *tmp185 :findPossiblePlacement:x
   349 op add *tmp187 :tryPlaceGenerator:centerY 0.5
   350 op add .water2Y *tmp187 :findPossiblePlacement:y
-    * op add *tmp189 :tryPlaceGenerator:centerX 0.5
   351 op add .generatorX *tmp185 :findPossiblePlacement:x
   352 op add *tmp191 :tryPlaceGenerator:centerY 2.5
   353 op add .generatorY *tmp191 :findPossiblePlacement:y
 
   362 setaddr :findPossiblePlacement*retaddr *label104 (h:*label104)
   363 call *label9 *invalid :findPossiblePlacement*retval (m:*label104) (h:*label104)
   364 label *label104
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   365 jump *label105 greaterThanEq :findPossiblePlacement*retval 0
   366 set :tryPlaceGenerator*retval false
   367 jump *label98 always
 
   373 op add .water2Y *tmp199 :findPossiblePlacement:y
   374 op add *tmp201 :tryPlaceGenerator:centerX 2.5
   375 op add .generatorX *tmp201 :findPossiblePlacement:x
-    * op add *tmp203 :tryPlaceGenerator:centerY 0.5
   376 op add .generatorY *tmp199 :findPossiblePlacement:y
   377 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   378 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
 
   384 setaddr :findPossiblePlacement*retaddr *label107 (h:*label107)
   385 call *label9 *invalid :findPossiblePlacement*retval (m:*label107) (h:*label107)
   386 label *label107
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   387 jump *label108 greaterThanEq :findPossiblePlacement*retval 0
   388 set :tryPlaceGenerator*retval false
   389 jump *label98 always
 
   400 setaddr :findPossiblePlacement*retaddr *label110 (h:*label110)
   401 call *label9 *invalid :findPossiblePlacement*retval (m:*label110) (h:*label110)
   402 label *label110
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   403 jump *label111 greaterThanEq :findPossiblePlacement*retval 0
   404 set :tryPlaceGenerator*retval false
   405 jump *label98 always
 
   416 setaddr :findPossiblePlacement*retaddr *label113 (h:*label113)
   417 call *label9 *invalid :findPossiblePlacement*retval (m:*label113) (h:*label113)
   418 label *label113
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   419 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   420 set :tryPlaceGenerator*retval false
   421 jump *label98 always
 
   423 label *label115
   424 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   425 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp223 1 :findPossiblePlacement*retval
   426 set :tryPlaceGenerator*retval true
   427 jump *label98 always
   428 label *label98
 
   478 setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
   479 call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
   480 label *label127
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   481 op shl *tmp240 :createAdjacentMask:row1 1
   482 op or *tmp241 :createAdjacentMask:row2 *tmp240
   483 op shr *tmp242 :createAdjacentMask:row1 1
 
   516 set .water1X -1
   517 set :moveTo.5:x .drillX
   518 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   519 label *label131
   520 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
   521 jump *label133 notEqual *tmp252 false
-    * op sub *tmp254 1 0.5
   522 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   523 label *label132
   524 jump *label131 always
 
   529 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   530 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   531 label *label134
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   532 set :createFixedMatrix:row0 0b0000000
-    * set :createFixedMatrix:row1 0b0000000
-    * set :createFixedMatrix:row2 0b0011100
-    * set :createFixedMatrix:row3 0b0011100
-    * set :createFixedMatrix:row4 0b0011100
-    * set :createFixedMatrix:row5 0b0000000
-    * set :createFixedMatrix:row6 0b0000000
-    * set *tmp257 0b0000000
-    * op shl *tmp258 0b0000000 7
-    * op or *tmp259 :createFixedMatrix:row0 0
-    * op shl *tmp260 0b0011100 14
-    * op or *tmp261 *tmp259 458752
-    * op shl *tmp262 0b0011100 21
-    * op or *tmp263 *tmp261 58720256
-    * op shl *tmp264 0b0011100 28
-    * op or *tmp265 *tmp263 7516192768
-    * op shl *tmp266 0b0000000 35
-    * op or *tmp267 *tmp265 0
-    * op shl *tmp268 0b0000000 42
-    * op or *tmp256 *tmp267 0
+  533 op or *tmp259 0b0000000 0
+  534 op or *tmp261 0 458752
+  535 op or *tmp263 458752 58720256
+  536 op or *tmp265 59179008 7516192768
+  537 op or *tmp267 7575371776 0
+  538 op or *tmp256 7575371776 0
   539 label *label135
-    * op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp256
+  540 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   541 set :createFixedMatrix.1:row0 0b1000001
-    * set :createFixedMatrix.1:row1 0b0000000
-    * set :createFixedMatrix.1:row2 0b0011100
-    * set :createFixedMatrix.1:row3 0b0011100
-    * set :createFixedMatrix.1:row4 0b0011100
-    * set :createFixedMatrix.1:row5 0b0000000
-    * set :createFixedMatrix.1:row6 0b1000001
-    * set *tmp272 0b1000001
-    * op shl *tmp273 0b0000000 7
-    * op or *tmp274 :createFixedMatrix.1:row0 0
-    * op shl *tmp275 0b0011100 14
-    * op or *tmp276 *tmp274 458752
-    * op shl *tmp277 0b0011100 21
-    * op or *tmp278 *tmp276 58720256
-    * op shl *tmp279 0b0011100 28
-    * op or *tmp280 *tmp278 7516192768
-    * op shl *tmp281 0b0000000 35
-    * op or *tmp282 *tmp280 0
-    * op shl *tmp283 0b1000001 42
-    * op or *tmp271 *tmp282 285873023221760
+  542 op or *tmp274 0b1000001 0
+  543 op or *tmp276 65 458752
+  544 op or *tmp278 458817 58720256
+  545 op or *tmp280 59179073 7516192768
+  546 op or *tmp282 7575371841 0
+  547 op or *tmp271 7575371841 285873023221760
   548 label *label136
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp271
+  549 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   550 set :createFixedMatrix.2:row0 0b11
-    * set :createFixedMatrix.2:row1 0b11
-    * set *tmp287 0b11
-    * op shl *tmp288 0b11 7
-    * op or *tmp286 :createFixedMatrix.2:row0 384
+  551 op or *tmp286 0b11 384
   552 label *label137
-    * set :layoutThoriumDrillAtLocation:mask2x2 *tmp286
+  553 set :layoutThoriumDrillAtLocation:mask2x2 387
   554 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask *tmp286
+  555 set :findPossiblePlacement:placementMask 387
   556 set :findPossiblePlacement:width 2
   557 set :findPossiblePlacement:height 2
   558 setaddr :findPossiblePlacement*retaddr *label138 (h:*label138)
   559 call *label9 *invalid :findPossiblePlacement*retval (m:*label138) (h:*label138)
   560 label *label138
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   561 jump *label139 lessThan :findPossiblePlacement*retval 0
   562 op add *tmp293 .drillX 0.5
   563 op add .water1X *tmp293 :findPossiblePlacement:x
 
   565 op add .water1Y *tmp295 :findPossiblePlacement:y
   566 op shl *tmp297 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   567 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
-    * op shl *tmp298 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   568 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp297
   569 label *label139
   570 label *label140
 
   575 setaddr :findPossiblePlacement*retaddr *label141 (h:*label141)
   576 call *label9 *invalid :findPossiblePlacement*retval (m:*label141) (h:*label141)
   577 label *label141
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   578 jump *label142 lessThan :findPossiblePlacement*retval 0
   579 op add *tmp302 .drillX 0.5
   580 op add .containerX *tmp302 :findPossiblePlacement:x
 
   585 label *label142
   586 label *label143
   587 set :createFixedMatrix.3:row0 0b1111
-    * set :createFixedMatrix.3:row1 0b1111
-    * set *tmp308 0b1111
-    * op shl *tmp309 0b1111 7
-    * op or *tmp307 :createFixedMatrix.3:row0 1920
+  588 op or *tmp307 0b1111 1920
   589 label *label144
-    * set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp307
+  590 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   591 set :createFixedMatrix.4:row0 0b11
-    * set :createFixedMatrix.4:row1 0b11
-    * set :createFixedMatrix.4:row2 0b11
-    * set :createFixedMatrix.4:row3 0b11
-    * set *tmp312 0b11
-    * op shl *tmp313 0b11 7
-    * op or *tmp314 :createFixedMatrix.4:row0 384
-    * op shl *tmp315 0b11 14
-    * op or *tmp316 *tmp314 49152
-    * op shl *tmp317 0b11 21
-    * op or *tmp311 *tmp316 6291456
+  592 op or *tmp314 0b11 384
+  593 op or *tmp316 387 49152
+  594 op or *tmp311 49539 6291456
   595 label *label145
-    * set :layoutThoriumDrillAtLocation:generatorVertical *tmp311
+  596 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   597 set :tryPlaceGenerator:centerX .drillX
   598 set :tryPlaceGenerator:centerY .drillY
   599 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal *tmp307
-    * set :tryPlaceGenerator:generatorVertical *tmp311
+  600 set :tryPlaceGenerator:generatorHorizontal 1935
+  601 set :tryPlaceGenerator:generatorVertical 6340995
   602 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   603 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   604 label *label146
 
   633 setaddr :createCombinedMask*retaddr *label156 (h:*label156)
   634 call *label12 *invalid :createCombinedMask*retval (m:*label156) (h:*label156)
   635 label *label156
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   636 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   637 op abs *tmp326 :layoutThoriumDrillAtLocation:sx
   638 op greaterThan *tmp327 *tmp326 6
   639 op abs *tmp328 :layoutThoriumDrillAtLocation:sy
 
   656 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp339
   657 label *label161
   658 jump *label162 equal :layoutThoriumDrillAtLocation:sx 0
-    * op abs *tmp342 :layoutThoriumDrillAtLocation:sx
   659 op shr :shiftMask:keep 0b1111111 *tmp326
   660 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
   661 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
 
   673 set *tmp325 :shiftMask:mask
   674 jump *label157 always
   675 label *label157
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp325
   676 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp325
   677 op sub *tmp350 .drillX :layoutThoriumDrillAtLocation:sx
   678 op sub *tmp351 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-36 instructions):
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 :findDrillLocationLocal:x
-    * set *tmp26 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    34 label *label20
-    * ucontrol within .coreX .coreY 6 *tmp27
+   35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label22 notEqual *tmp27 false
-    * ucontrol approach .coreX .coreY 5.5
+   37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label21
    39 jump *label20 always
    40 label *label22
 
    70 op max *tmp48 *tmp45 5
    71 op min *tmp47 *tmp48 *tmp46
    72 label *label30
-    * set :locateOreAway:lx *tmp47
    73 op cos *tmp50 :locateOreAway:a
    74 op mul *tmp51 *tmp50 :locateOreAway:distance
    75 op add *tmp52 :findDrillLocationLocal:y *tmp51
 
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label31
-    * set :locateOreAway:ly *tmp54
    80 label *label33
    81 ucontrol within *tmp47 *tmp54 5 *tmp57
    82 jump *label35 notEqual *tmp57 false
 
   168 op add .mapSpots .mapSpots 1
   169 label *label56
   170 label *label57
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :locateOreAway:x
-    * set *tmp108 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   171 label *label60
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
+  172 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   173 jump *label62 notEqual *tmp109 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  174 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   175 label *label61
   176 jump *label60 always
   177 label *label62
 
   515 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   516 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   517 label *label134
-    * set :createFixedMatrix:row0 0b0000000
-    * op or *tmp259 0b0000000 0
-    * op or *tmp261 0 458752
-    * op or *tmp263 458752 58720256
-    * op or *tmp265 59179008 7516192768
-    * op or *tmp267 7575371776 0
-    * op or *tmp256 7575371776 0
   518 label *label135
   519 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * set :createFixedMatrix.1:row0 0b1000001
-    * op or *tmp274 0b1000001 0
-    * op or *tmp276 65 458752
-    * op or *tmp278 458817 58720256
-    * op or *tmp280 59179073 7516192768
-    * op or *tmp282 7575371841 0
-    * op or *tmp271 7575371841 285873023221760
   520 label *label136
   521 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :createFixedMatrix.2:row0 0b11
-    * op or *tmp286 0b11 384
   522 label *label137
   523 set :layoutThoriumDrillAtLocation:mask2x2 387
   524 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   554 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
   555 label *label142
   556 label *label143
-    * set :createFixedMatrix.3:row0 0b1111
-    * op or *tmp307 0b1111 1920
   557 label *label144
   558 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * set :createFixedMatrix.4:row0 0b11
-    * op or *tmp314 0b11 384
-    * op or *tmp316 387 49152
-    * op or *tmp311 49539 6291456
   559 label *label145
   560 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   561 set :tryPlaceGenerator:centerX .drillX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    60 set :locateOreAway:lastY -1
    61 op max .angle .angle @pi
    62 op mul .mapProgress .angle .angle
+   63 op sub *tmp46 @mapw 5
+   64 op sub *tmp53 @maph 5
    65 label *label27
    66 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp43 :locateOreAway:a
    69 op mul *tmp44 *tmp43 :locateOreAway:distance
    70 op add *tmp45 :findDrillLocationLocal:x *tmp44
-    * op sub *tmp46 @mapw 5
    71 op max *tmp48 *tmp45 5
    72 op min *tmp47 *tmp48 *tmp46
    73 label *label30
    74 op cos *tmp50 :locateOreAway:a
    75 op mul *tmp51 *tmp50 :locateOreAway:distance
    76 op add *tmp52 :findDrillLocationLocal:y *tmp51
-    * op sub *tmp53 @maph 5
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
    64 op sub *tmp53 @maph 5
    65 label *label27
    66 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   67 label *label177
    68 op div :locateOreAway:a .angle @degToRad
    69 op sin *tmp43 :locateOreAway:a
    70 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   119 set :visited:i .locationsStart
   120 label *label47
   121 jump *label49 greaterThanEq :visited:i *tmp84
+  122 label *label178
   123 op mul :visited:index 4 :visited:i
   124 op add *tmp87 :visited:index 2
   125 read :visited:lx bank1 *tmp87
 
   135 label *label51
   136 label *label48
   137 op add :visited:i :visited:i 1
-    * jump *label47 always
+  138 jump *label178 lessThan :visited:i *tmp84
   139 label *label49
   140 set *tmp83 false
   141 jump *label46 always
 
   154 label *label42
   155 label *label43
   156 label *label28
-    * jump *label27 always
+  157 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   158 label *label29
   159 set *tmp37 false
   160 jump *label26 always
 
   280 set :findPossiblePlacement:y -3
   281 label *label86
   282 jump *label88 greaterThan :findPossiblePlacement:y 3
+  283 label *label179
   284 op add *tmp165 :findPossiblePlacement:y 3
   285 op mul *tmp166 7 *tmp165
   286 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp166
   287 set :findPossiblePlacement:x -3
   288 label *label89
   289 jump *label91 greaterThan :findPossiblePlacement:x 3
+  290 label *label180
   291 op and *tmp168 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   292 jump *label92 notEqual *tmp168 0
   293 op mul *tmp171 :findPossiblePlacement:y 7
 
   304 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   305 label *label90
   306 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label89 always
+  307 jump *label180 lessThanEq :findPossiblePlacement:x 3
   308 label *label91
   309 op sub *tmp177 3 :findPossiblePlacement:height
   310 jump *label96 lessThanEq :findPossiblePlacement:y *tmp177
 
   313 label *label97
   314 label *label87
   315 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label86 always
+  316 jump *label179 lessThanEq :findPossiblePlacement:y 3
   317 label *label88
   318 set :findPossiblePlacement*retval -1
   319 jump *label85 always
 
   422 set :createBlockMaskRow:result 0
   423 set :createBlockMaskRow:c 4
   424 label *label117
-    * jump *label119 lessThan :createBlockMaskRow:c -4
+  425 label *label181
   426 op shl *tmp224 :createBlockMaskRow:result 1
   427 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
   428 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   429 op or :createBlockMaskRow:result *tmp224 *tmp226
   430 label *label118
   431 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label117 always
+  432 jump *label181 greaterThanEq :createBlockMaskRow:c -4
   433 label *label119
   434 set :createBlockMaskRow*retval :createBlockMaskRow:result
   435 jump *label116 always
 
   461 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   462 set :createAdjacentMask:r 2
   463 label *label124
-    * jump *label126 lessThan :createAdjacentMask:r -4
+  464 label *label182
   465 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   466 set :createBlockMaskRow:x :createAdjacentMask:x
   467 set :createBlockMaskRow:y *tmp238
 
   480 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   481 label *label125
   482 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label124 always
+  483 jump *label182 greaterThanEq :createAdjacentMask:r -4
   484 label *label126
   485 op shr *tmp233 :createAdjacentMask:result 1
   486 label *label121

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
    81 label *label33
    82 ucontrol within *tmp47 *tmp54 5 *tmp57
    83 jump *label35 notEqual *tmp57 false
+   84 label *label183
    85 ucontrol approach *tmp47 *tmp54 4.5
    86 label *label34
-    * jump *label33 always
+   87 ucontrol within *tmp47 *tmp54 5 *tmp57
+   88 jump *label183 equal *tmp57 false
    89 label *label35
    90 label *label32
    91 op div *tmp60 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   120 set *tmp84 .locations
   121 set :visited:i .locationsStart
   122 label *label47
-    * jump *label49 greaterThanEq :visited:i *tmp84
+  123 jump *label49 greaterThanEq .locationsStart *tmp84
   124 label *label178
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp87 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:414:5 (+39 instructions):
 
   422 end
   423 label *label11
   424 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label117
-    * label *label181
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label118
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label181 greaterThanEq :createBlockMaskRow:c -4
-    * label *label119
+  425 set :createBlockMaskRow:c 4
+  426 label *label184
+  427 label *label185
+  428 op shl *tmp224 :createBlockMaskRow:result 1
+  429 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  430 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  431 op or :createBlockMaskRow:result *tmp224 *tmp226
+  432 label *label186
+  433 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  434 label *label187
+  435 op shl *tmp224 :createBlockMaskRow:result 1
+  436 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  437 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  438 op or :createBlockMaskRow:result *tmp224 *tmp226
+  439 label *label188
+  440 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  441 label *label189
+  442 op shl *tmp224 :createBlockMaskRow:result 1
+  443 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  444 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  445 op or :createBlockMaskRow:result *tmp224 *tmp226
+  446 label *label190
+  447 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  448 label *label191
+  449 op shl *tmp224 :createBlockMaskRow:result 1
+  450 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  451 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  452 op or :createBlockMaskRow:result *tmp224 *tmp226
+  453 label *label192
+  454 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  455 label *label193
+  456 op shl *tmp224 :createBlockMaskRow:result 1
+  457 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  458 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  459 op or :createBlockMaskRow:result *tmp224 *tmp226
+  460 label *label194
+  461 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  462 label *label195
+  463 op shl *tmp224 :createBlockMaskRow:result 1
+  464 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  465 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  466 op or :createBlockMaskRow:result *tmp224 *tmp226
+  467 label *label196
+  468 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  469 label *label197
+  470 op shl *tmp224 :createBlockMaskRow:result 1
+  471 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  472 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  473 op or :createBlockMaskRow:result *tmp224 *tmp226
+  474 label *label198
+  475 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  476 label *label199
+  477 op shl *tmp224 :createBlockMaskRow:result 1
+  478 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  479 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  480 op or :createBlockMaskRow:result *tmp224 *tmp226
+  481 label *label200
+  482 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  483 label *label201
+  484 op shl *tmp224 :createBlockMaskRow:result 1
+  485 op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  486 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  487 op or :createBlockMaskRow:result *tmp224 *tmp226
+  488 label *label202
+  489 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  490 label *label119
   491 set :createBlockMaskRow*retval :createBlockMaskRow:result
   492 jump *label116 always
   493 label *label116

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   425 set :createBlockMaskRow:c 4
   426 label *label184
   427 label *label185
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  428 op shl *tmp224 0 1
+  429 op add *tmp225 :createBlockMaskRow:x 4
   430 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
+  431 op or :createBlockMaskRow:result 0 *tmp226
   432 label *label186
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  433 op sub :createBlockMaskRow:c 4 1
   434 label *label187
   435 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  436 op add *tmp225 :createBlockMaskRow:x 3
   437 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   438 op or :createBlockMaskRow:result *tmp224 *tmp226
   439 label *label188
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  440 op sub :createBlockMaskRow:c 3 1
   441 label *label189
   442 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  443 op add *tmp225 :createBlockMaskRow:x 2
   444 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   445 op or :createBlockMaskRow:result *tmp224 *tmp226
   446 label *label190
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  447 op sub :createBlockMaskRow:c 2 1
   448 label *label191
   449 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  450 op add *tmp225 :createBlockMaskRow:x 1
   451 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   452 op or :createBlockMaskRow:result *tmp224 *tmp226
   453 label *label192
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  454 op sub :createBlockMaskRow:c 1 1
   455 label *label193
   456 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  457 op add *tmp225 :createBlockMaskRow:x 0
   458 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   459 op or :createBlockMaskRow:result *tmp224 *tmp226
   460 label *label194
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  461 op sub :createBlockMaskRow:c 0 1
   462 label *label195
   463 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  464 op add *tmp225 :createBlockMaskRow:x -1
   465 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   466 op or :createBlockMaskRow:result *tmp224 *tmp226
   467 label *label196
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  468 op sub :createBlockMaskRow:c -1 1
   469 label *label197
   470 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  471 op add *tmp225 :createBlockMaskRow:x -2
   472 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   473 op or :createBlockMaskRow:result *tmp224 *tmp226
   474 label *label198
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  475 op sub :createBlockMaskRow:c -2 1
   476 label *label199
   477 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  478 op add *tmp225 :createBlockMaskRow:x -3
   479 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   480 op or :createBlockMaskRow:result *tmp224 *tmp226
   481 label *label200
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  482 op sub :createBlockMaskRow:c -3 1
   483 label *label201
   484 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x :createBlockMaskRow:c
+  485 op add *tmp225 :createBlockMaskRow:x -4
   486 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   487 op or :createBlockMaskRow:result *tmp224 *tmp226
   488 label *label202
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  489 op sub :createBlockMaskRow:c -4 1
   490 label *label119
   491 set :createBlockMaskRow*retval :createBlockMaskRow:result
   492 jump *label116 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   421 return :tryPlaceGenerator*retaddr
   422 end
   423 label *label11
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   424 label *label184
   425 label *label185
-    * op shl *tmp224 0 1
   426 op add *tmp225 :createBlockMaskRow:x 4
   427 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   428 op or :createBlockMaskRow:result 0 *tmp226
   429 label *label186
-    * op sub :createBlockMaskRow:c 4 1
   430 label *label187
   431 op shl *tmp224 :createBlockMaskRow:result 1
   432 op add *tmp225 :createBlockMaskRow:x 3
   433 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   434 op or :createBlockMaskRow:result *tmp224 *tmp226
   435 label *label188
-    * op sub :createBlockMaskRow:c 3 1
   436 label *label189
   437 op shl *tmp224 :createBlockMaskRow:result 1
   438 op add *tmp225 :createBlockMaskRow:x 2
   439 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   440 op or :createBlockMaskRow:result *tmp224 *tmp226
   441 label *label190
-    * op sub :createBlockMaskRow:c 2 1
   442 label *label191
   443 op shl *tmp224 :createBlockMaskRow:result 1
   444 op add *tmp225 :createBlockMaskRow:x 1
   445 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   446 op or :createBlockMaskRow:result *tmp224 *tmp226
   447 label *label192
-    * op sub :createBlockMaskRow:c 1 1
   448 label *label193
   449 op shl *tmp224 :createBlockMaskRow:result 1
   450 op add *tmp225 :createBlockMaskRow:x 0
   451 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   452 op or :createBlockMaskRow:result *tmp224 *tmp226
   453 label *label194
-    * op sub :createBlockMaskRow:c 0 1
   454 label *label195
   455 op shl *tmp224 :createBlockMaskRow:result 1
   456 op add *tmp225 :createBlockMaskRow:x -1
   457 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   458 op or :createBlockMaskRow:result *tmp224 *tmp226
   459 label *label196
-    * op sub :createBlockMaskRow:c -1 1
   460 label *label197
   461 op shl *tmp224 :createBlockMaskRow:result 1
   462 op add *tmp225 :createBlockMaskRow:x -2
   463 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   464 op or :createBlockMaskRow:result *tmp224 *tmp226
   465 label *label198
-    * op sub :createBlockMaskRow:c -2 1
   466 label *label199
   467 op shl *tmp224 :createBlockMaskRow:result 1
   468 op add *tmp225 :createBlockMaskRow:x -3
   469 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   470 op or :createBlockMaskRow:result *tmp224 *tmp226
   471 label *label200
-    * op sub :createBlockMaskRow:c -3 1
   472 label *label201
   473 op shl *tmp224 :createBlockMaskRow:result 1
   474 op add *tmp225 :createBlockMaskRow:x -4
   475 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
   476 op or :createBlockMaskRow:result *tmp224 *tmp226
   477 label *label202
-    * op sub :createBlockMaskRow:c -4 1
   478 label *label119
   479 set :createBlockMaskRow*retval :createBlockMaskRow:result
   480 jump *label116 always

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
   175 label *label60
   176 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   177 jump *label62 notEqual *tmp109 false
+  178 label *label203
   179 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   180 label *label61
-    * jump *label60 always
+  181 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
+  182 jump *label203 equal *tmp109 false
   183 label *label62
   184 label *label59
   185 label *label58

Modifications by Unroll loop at OreLocator.mnd:428:5 (+95 instructions):
 
   506 call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
   507 label *label123
   508 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label124
-    * label *label182
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
-    * label *label127
-    * op shl *tmp240 :createAdjacentMask:row1 1
-    * op or *tmp241 :createAdjacentMask:row2 *tmp240
-    * op shr *tmp242 :createAdjacentMask:row1 1
-    * op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
-    * op shl *tmp245 :createAdjacentMask:result 7
-    * op and *tmp246 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp245 *tmp246
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label125
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label182 greaterThanEq :createAdjacentMask:r -4
-    * label *label126
+  509 set :createAdjacentMask:r 2
+  510 label *label204
+  511 label *label205
+  512 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  513 set :createBlockMaskRow:x :createAdjacentMask:x
+  514 set :createBlockMaskRow:y *tmp238
+  515 setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
+  516 call *label11 *invalid :createBlockMaskRow*retval (m:*label206) (h:*label206)
+  517 label *label206
+  518 op shl *tmp240 :createAdjacentMask:row1 1
+  519 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  520 op shr *tmp242 :createAdjacentMask:row1 1
+  521 op or *tmp243 *tmp241 *tmp242
+  522 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  523 op shl *tmp245 :createAdjacentMask:result 7
+  524 op and *tmp246 :createAdjacentMask:mask 0xFE
+  525 op or :createAdjacentMask:result *tmp245 *tmp246
+  526 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  527 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  528 label *label207
+  529 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  530 label *label208
+  531 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  532 set :createBlockMaskRow:x :createAdjacentMask:x
+  533 set :createBlockMaskRow:y *tmp238
+  534 setaddr :createBlockMaskRow*retaddr *label209 (h:*label209)
+  535 call *label11 *invalid :createBlockMaskRow*retval (m:*label209) (h:*label209)
+  536 label *label209
+  537 op shl *tmp240 :createAdjacentMask:row1 1
+  538 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  539 op shr *tmp242 :createAdjacentMask:row1 1
+  540 op or *tmp243 *tmp241 *tmp242
+  541 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  542 op shl *tmp245 :createAdjacentMask:result 7
+  543 op and *tmp246 :createAdjacentMask:mask 0xFE
+  544 op or :createAdjacentMask:result *tmp245 *tmp246
+  545 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  546 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  547 label *label210
+  548 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  549 label *label211
+  550 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  551 set :createBlockMaskRow:x :createAdjacentMask:x
+  552 set :createBlockMaskRow:y *tmp238
+  553 setaddr :createBlockMaskRow*retaddr *label212 (h:*label212)
+  554 call *label11 *invalid :createBlockMaskRow*retval (m:*label212) (h:*label212)
+  555 label *label212
+  556 op shl *tmp240 :createAdjacentMask:row1 1
+  557 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  558 op shr *tmp242 :createAdjacentMask:row1 1
+  559 op or *tmp243 *tmp241 *tmp242
+  560 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  561 op shl *tmp245 :createAdjacentMask:result 7
+  562 op and *tmp246 :createAdjacentMask:mask 0xFE
+  563 op or :createAdjacentMask:result *tmp245 *tmp246
+  564 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  565 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  566 label *label213
+  567 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  568 label *label214
+  569 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  570 set :createBlockMaskRow:x :createAdjacentMask:x
+  571 set :createBlockMaskRow:y *tmp238
+  572 setaddr :createBlockMaskRow*retaddr *label215 (h:*label215)
+  573 call *label11 *invalid :createBlockMaskRow*retval (m:*label215) (h:*label215)
+  574 label *label215
+  575 op shl *tmp240 :createAdjacentMask:row1 1
+  576 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  577 op shr *tmp242 :createAdjacentMask:row1 1
+  578 op or *tmp243 *tmp241 *tmp242
+  579 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  580 op shl *tmp245 :createAdjacentMask:result 7
+  581 op and *tmp246 :createAdjacentMask:mask 0xFE
+  582 op or :createAdjacentMask:result *tmp245 *tmp246
+  583 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  584 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  585 label *label216
+  586 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  587 label *label217
+  588 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  589 set :createBlockMaskRow:x :createAdjacentMask:x
+  590 set :createBlockMaskRow:y *tmp238
+  591 setaddr :createBlockMaskRow*retaddr *label218 (h:*label218)
+  592 call *label11 *invalid :createBlockMaskRow*retval (m:*label218) (h:*label218)
+  593 label *label218
+  594 op shl *tmp240 :createAdjacentMask:row1 1
+  595 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  596 op shr *tmp242 :createAdjacentMask:row1 1
+  597 op or *tmp243 *tmp241 *tmp242
+  598 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  599 op shl *tmp245 :createAdjacentMask:result 7
+  600 op and *tmp246 :createAdjacentMask:mask 0xFE
+  601 op or :createAdjacentMask:result *tmp245 *tmp246
+  602 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  603 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  604 label *label219
+  605 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  606 label *label220
+  607 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  608 set :createBlockMaskRow:x :createAdjacentMask:x
+  609 set :createBlockMaskRow:y *tmp238
+  610 setaddr :createBlockMaskRow*retaddr *label221 (h:*label221)
+  611 call *label11 *invalid :createBlockMaskRow*retval (m:*label221) (h:*label221)
+  612 label *label221
+  613 op shl *tmp240 :createAdjacentMask:row1 1
+  614 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  615 op shr *tmp242 :createAdjacentMask:row1 1
+  616 op or *tmp243 *tmp241 *tmp242
+  617 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  618 op shl *tmp245 :createAdjacentMask:result 7
+  619 op and *tmp246 :createAdjacentMask:mask 0xFE
+  620 op or :createAdjacentMask:result *tmp245 *tmp246
+  621 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  622 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  623 label *label222
+  624 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  625 label *label223
+  626 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  627 set :createBlockMaskRow:x :createAdjacentMask:x
+  628 set :createBlockMaskRow:y *tmp238
+  629 setaddr :createBlockMaskRow*retaddr *label224 (h:*label224)
+  630 call *label11 *invalid :createBlockMaskRow*retval (m:*label224) (h:*label224)
+  631 label *label224
+  632 op shl *tmp240 :createAdjacentMask:row1 1
+  633 op or *tmp241 :createAdjacentMask:row2 *tmp240
+  634 op shr *tmp242 :createAdjacentMask:row1 1
+  635 op or *tmp243 *tmp241 *tmp242
+  636 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  637 op shl *tmp245 :createAdjacentMask:result 7
+  638 op and *tmp246 :createAdjacentMask:mask 0xFE
+  639 op or :createAdjacentMask:result *tmp245 *tmp246
+  640 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  641 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  642 label *label225
+  643 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  644 label *label126
   645 op shr *tmp233 :createAdjacentMask:result 1
   646 label *label121
   647 set .adjacentMask *tmp233

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-3 instructions):
 
   509 set :createAdjacentMask:r 2
   510 label *label204
   511 label *label205
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
+  512 op add *tmp238 :createAdjacentMask:y 2
   513 set :createBlockMaskRow:x :createAdjacentMask:x
   514 set :createBlockMaskRow:y *tmp238
   515 setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
 
   637 op shl *tmp245 :createAdjacentMask:result 7
   638 op and *tmp246 :createAdjacentMask:mask 0xFE
   639 op or :createAdjacentMask:result *tmp245 *tmp246
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
   640 label *label225
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
   641 label *label126
   642 op shr *tmp233 :createAdjacentMask:result 1
   643 label *label121

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
    34 label *label20
    35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label22 notEqual *tmp27 false
+   37 label *label226
    38 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    39 label *label21
-    * jump *label20 always
+   40 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
+   41 jump *label226 equal *tmp27 false
    42 label *label22
    43 label *label19
    44 label *label18

Modifications by Replicate loop condition at OreLocator.mnd:41:5 (+1 instructions):
 
   668 label *label131
   669 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
   670 jump *label133 notEqual *tmp252 false
+  671 label *label227
   672 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   673 label *label132
-    * jump *label131 always
+  674 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
+  675 jump *label227 equal *tmp252 false
   676 label *label133
   677 label *label130
   678 set :createCombinedMask:x .drillX

Modifications by Inline function 'createBlockMaskRow' defined at OreLocator.mnd:412:1 (+276 instructions):
 
   424 label *label98
   425 return :tryPlaceGenerator*retaddr
   426 end
-    * label *label11
-    * label *label184
-    * label *label185
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
-    * label *label186
-    * label *label187
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label188
-    * label *label189
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label190
-    * label *label191
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label192
-    * label *label193
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label194
-    * label *label195
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label196
-    * label *label197
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label198
-    * label *label199
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label200
-    * label *label201
-    * op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label202
-    * label *label119
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label116 always
-    * label *label116
-    * return :createBlockMaskRow*retaddr
-    * end
   427 label *label12
   428 write @unit processor1 ":createTerrainMask:unit"
   429 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   436 op add *tmp234 :createCombinedMask:y 4
   437 set :createBlockMaskRow:x :createCombinedMask:x
   438 set :createBlockMaskRow:y *tmp234
-    * setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
-    * label *label122
+  439 label *label228
+  440 label *label229
+  441 label *label230
+  442 op add *tmp225 :createBlockMaskRow:x 4
+  443 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  444 op or :createBlockMaskRow:result 0 *tmp226
+  445 label *label231
+  446 label *label232
+  447 op shl *tmp224 :createBlockMaskRow:result 1
+  448 op add *tmp225 :createBlockMaskRow:x 3
+  449 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  450 op or :createBlockMaskRow:result *tmp224 *tmp226
+  451 label *label233
+  452 label *label234
+  453 op shl *tmp224 :createBlockMaskRow:result 1
+  454 op add *tmp225 :createBlockMaskRow:x 2
+  455 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  456 op or :createBlockMaskRow:result *tmp224 *tmp226
+  457 label *label235
+  458 label *label236
+  459 op shl *tmp224 :createBlockMaskRow:result 1
+  460 op add *tmp225 :createBlockMaskRow:x 1
+  461 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  462 op or :createBlockMaskRow:result *tmp224 *tmp226
+  463 label *label237
+  464 label *label238
+  465 op shl *tmp224 :createBlockMaskRow:result 1
+  466 op add *tmp225 :createBlockMaskRow:x 0
+  467 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  468 op or :createBlockMaskRow:result *tmp224 *tmp226
+  469 label *label239
+  470 label *label240
+  471 op shl *tmp224 :createBlockMaskRow:result 1
+  472 op add *tmp225 :createBlockMaskRow:x -1
+  473 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  474 op or :createBlockMaskRow:result *tmp224 *tmp226
+  475 label *label241
+  476 label *label242
+  477 op shl *tmp224 :createBlockMaskRow:result 1
+  478 op add *tmp225 :createBlockMaskRow:x -2
+  479 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  480 op or :createBlockMaskRow:result *tmp224 *tmp226
+  481 label *label243
+  482 label *label244
+  483 op shl *tmp224 :createBlockMaskRow:result 1
+  484 op add *tmp225 :createBlockMaskRow:x -3
+  485 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  486 op or :createBlockMaskRow:result *tmp224 *tmp226
+  487 label *label245
+  488 label *label246
+  489 op shl *tmp224 :createBlockMaskRow:result 1
+  490 op add *tmp225 :createBlockMaskRow:x -4
+  491 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  492 op or :createBlockMaskRow:result *tmp224 *tmp226
+  493 label *label247
+  494 label *label248
+  495 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  496 jump *label249 always
+  497 label *label249
   498 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   499 op add *tmp236 :createAdjacentMask:y 3
   500 set :createBlockMaskRow:x :createAdjacentMask:x
   501 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label123 (h:*label123)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
-    * label *label123
+  502 label *label250
+  503 label *label251
+  504 label *label252
+  505 op add *tmp225 :createBlockMaskRow:x 4
+  506 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  507 op or :createBlockMaskRow:result 0 *tmp226
+  508 label *label253
+  509 label *label254
+  510 op shl *tmp224 :createBlockMaskRow:result 1
+  511 op add *tmp225 :createBlockMaskRow:x 3
+  512 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  513 op or :createBlockMaskRow:result *tmp224 *tmp226
+  514 label *label255
+  515 label *label256
+  516 op shl *tmp224 :createBlockMaskRow:result 1
+  517 op add *tmp225 :createBlockMaskRow:x 2
+  518 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  519 op or :createBlockMaskRow:result *tmp224 *tmp226
+  520 label *label257
+  521 label *label258
+  522 op shl *tmp224 :createBlockMaskRow:result 1
+  523 op add *tmp225 :createBlockMaskRow:x 1
+  524 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  525 op or :createBlockMaskRow:result *tmp224 *tmp226
+  526 label *label259
+  527 label *label260
+  528 op shl *tmp224 :createBlockMaskRow:result 1
+  529 op add *tmp225 :createBlockMaskRow:x 0
+  530 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  531 op or :createBlockMaskRow:result *tmp224 *tmp226
+  532 label *label261
+  533 label *label262
+  534 op shl *tmp224 :createBlockMaskRow:result 1
+  535 op add *tmp225 :createBlockMaskRow:x -1
+  536 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  537 op or :createBlockMaskRow:result *tmp224 *tmp226
+  538 label *label263
+  539 label *label264
+  540 op shl *tmp224 :createBlockMaskRow:result 1
+  541 op add *tmp225 :createBlockMaskRow:x -2
+  542 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  543 op or :createBlockMaskRow:result *tmp224 *tmp226
+  544 label *label265
+  545 label *label266
+  546 op shl *tmp224 :createBlockMaskRow:result 1
+  547 op add *tmp225 :createBlockMaskRow:x -3
+  548 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  549 op or :createBlockMaskRow:result *tmp224 *tmp226
+  550 label *label267
+  551 label *label268
+  552 op shl *tmp224 :createBlockMaskRow:result 1
+  553 op add *tmp225 :createBlockMaskRow:x -4
+  554 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  555 op or :createBlockMaskRow:result *tmp224 *tmp226
+  556 label *label269
+  557 label *label270
+  558 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  559 jump *label271 always
+  560 label *label271
   561 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   562 set :createAdjacentMask:r 2
   563 label *label204
 
   565 op add *tmp238 :createAdjacentMask:y 2
   566 set :createBlockMaskRow:x :createAdjacentMask:x
   567 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label206) (h:*label206)
-    * label *label206
+  568 label *label272
+  569 label *label273
+  570 label *label274
+  571 op add *tmp225 :createBlockMaskRow:x 4
+  572 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  573 op or :createBlockMaskRow:result 0 *tmp226
+  574 label *label275
+  575 label *label276
+  576 op shl *tmp224 :createBlockMaskRow:result 1
+  577 op add *tmp225 :createBlockMaskRow:x 3
+  578 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  579 op or :createBlockMaskRow:result *tmp224 *tmp226
+  580 label *label277
+  581 label *label278
+  582 op shl *tmp224 :createBlockMaskRow:result 1
+  583 op add *tmp225 :createBlockMaskRow:x 2
+  584 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  585 op or :createBlockMaskRow:result *tmp224 *tmp226
+  586 label *label279
+  587 label *label280
+  588 op shl *tmp224 :createBlockMaskRow:result 1
+  589 op add *tmp225 :createBlockMaskRow:x 1
+  590 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  591 op or :createBlockMaskRow:result *tmp224 *tmp226
+  592 label *label281
+  593 label *label282
+  594 op shl *tmp224 :createBlockMaskRow:result 1
+  595 op add *tmp225 :createBlockMaskRow:x 0
+  596 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  597 op or :createBlockMaskRow:result *tmp224 *tmp226
+  598 label *label283
+  599 label *label284
+  600 op shl *tmp224 :createBlockMaskRow:result 1
+  601 op add *tmp225 :createBlockMaskRow:x -1
+  602 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  603 op or :createBlockMaskRow:result *tmp224 *tmp226
+  604 label *label285
+  605 label *label286
+  606 op shl *tmp224 :createBlockMaskRow:result 1
+  607 op add *tmp225 :createBlockMaskRow:x -2
+  608 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  609 op or :createBlockMaskRow:result *tmp224 *tmp226
+  610 label *label287
+  611 label *label288
+  612 op shl *tmp224 :createBlockMaskRow:result 1
+  613 op add *tmp225 :createBlockMaskRow:x -3
+  614 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  615 op or :createBlockMaskRow:result *tmp224 *tmp226
+  616 label *label289
+  617 label *label290
+  618 op shl *tmp224 :createBlockMaskRow:result 1
+  619 op add *tmp225 :createBlockMaskRow:x -4
+  620 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  621 op or :createBlockMaskRow:result *tmp224 *tmp226
+  622 label *label291
+  623 label *label292
+  624 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  625 jump *label293 always
+  626 label *label293
   627 op shl *tmp240 :createAdjacentMask:row1 1
   628 op or *tmp241 :createAdjacentMask:row2 *tmp240
   629 op shr *tmp242 :createAdjacentMask:row1 1
 
   640 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   641 set :createBlockMaskRow:x :createAdjacentMask:x
   642 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label209 (h:*label209)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label209) (h:*label209)
-    * label *label209
+  643 label *label294
+  644 label *label295
+  645 label *label296
+  646 op add *tmp225 :createBlockMaskRow:x 4
+  647 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  648 op or :createBlockMaskRow:result 0 *tmp226
+  649 label *label297
+  650 label *label298
+  651 op shl *tmp224 :createBlockMaskRow:result 1
+  652 op add *tmp225 :createBlockMaskRow:x 3
+  653 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  654 op or :createBlockMaskRow:result *tmp224 *tmp226
+  655 label *label299
+  656 label *label300
+  657 op shl *tmp224 :createBlockMaskRow:result 1
+  658 op add *tmp225 :createBlockMaskRow:x 2
+  659 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  660 op or :createBlockMaskRow:result *tmp224 *tmp226
+  661 label *label301
+  662 label *label302
+  663 op shl *tmp224 :createBlockMaskRow:result 1
+  664 op add *tmp225 :createBlockMaskRow:x 1
+  665 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  666 op or :createBlockMaskRow:result *tmp224 *tmp226
+  667 label *label303
+  668 label *label304
+  669 op shl *tmp224 :createBlockMaskRow:result 1
+  670 op add *tmp225 :createBlockMaskRow:x 0
+  671 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  672 op or :createBlockMaskRow:result *tmp224 *tmp226
+  673 label *label305
+  674 label *label306
+  675 op shl *tmp224 :createBlockMaskRow:result 1
+  676 op add *tmp225 :createBlockMaskRow:x -1
+  677 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  678 op or :createBlockMaskRow:result *tmp224 *tmp226
+  679 label *label307
+  680 label *label308
+  681 op shl *tmp224 :createBlockMaskRow:result 1
+  682 op add *tmp225 :createBlockMaskRow:x -2
+  683 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  684 op or :createBlockMaskRow:result *tmp224 *tmp226
+  685 label *label309
+  686 label *label310
+  687 op shl *tmp224 :createBlockMaskRow:result 1
+  688 op add *tmp225 :createBlockMaskRow:x -3
+  689 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  690 op or :createBlockMaskRow:result *tmp224 *tmp226
+  691 label *label311
+  692 label *label312
+  693 op shl *tmp224 :createBlockMaskRow:result 1
+  694 op add *tmp225 :createBlockMaskRow:x -4
+  695 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  696 op or :createBlockMaskRow:result *tmp224 *tmp226
+  697 label *label313
+  698 label *label314
+  699 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  700 jump *label315 always
+  701 label *label315
   702 op shl *tmp240 :createAdjacentMask:row1 1
   703 op or *tmp241 :createAdjacentMask:row2 *tmp240
   704 op shr *tmp242 :createAdjacentMask:row1 1
 
   715 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   716 set :createBlockMaskRow:x :createAdjacentMask:x
   717 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label212 (h:*label212)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label212) (h:*label212)
-    * label *label212
+  718 label *label316
+  719 label *label317
+  720 label *label318
+  721 op add *tmp225 :createBlockMaskRow:x 4
+  722 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  723 op or :createBlockMaskRow:result 0 *tmp226
+  724 label *label319
+  725 label *label320
+  726 op shl *tmp224 :createBlockMaskRow:result 1
+  727 op add *tmp225 :createBlockMaskRow:x 3
+  728 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  729 op or :createBlockMaskRow:result *tmp224 *tmp226
+  730 label *label321
+  731 label *label322
+  732 op shl *tmp224 :createBlockMaskRow:result 1
+  733 op add *tmp225 :createBlockMaskRow:x 2
+  734 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  735 op or :createBlockMaskRow:result *tmp224 *tmp226
+  736 label *label323
+  737 label *label324
+  738 op shl *tmp224 :createBlockMaskRow:result 1
+  739 op add *tmp225 :createBlockMaskRow:x 1
+  740 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  741 op or :createBlockMaskRow:result *tmp224 *tmp226
+  742 label *label325
+  743 label *label326
+  744 op shl *tmp224 :createBlockMaskRow:result 1
+  745 op add *tmp225 :createBlockMaskRow:x 0
+  746 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  747 op or :createBlockMaskRow:result *tmp224 *tmp226
+  748 label *label327
+  749 label *label328
+  750 op shl *tmp224 :createBlockMaskRow:result 1
+  751 op add *tmp225 :createBlockMaskRow:x -1
+  752 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  753 op or :createBlockMaskRow:result *tmp224 *tmp226
+  754 label *label329
+  755 label *label330
+  756 op shl *tmp224 :createBlockMaskRow:result 1
+  757 op add *tmp225 :createBlockMaskRow:x -2
+  758 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  759 op or :createBlockMaskRow:result *tmp224 *tmp226
+  760 label *label331
+  761 label *label332
+  762 op shl *tmp224 :createBlockMaskRow:result 1
+  763 op add *tmp225 :createBlockMaskRow:x -3
+  764 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  765 op or :createBlockMaskRow:result *tmp224 *tmp226
+  766 label *label333
+  767 label *label334
+  768 op shl *tmp224 :createBlockMaskRow:result 1
+  769 op add *tmp225 :createBlockMaskRow:x -4
+  770 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  771 op or :createBlockMaskRow:result *tmp224 *tmp226
+  772 label *label335
+  773 label *label336
+  774 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  775 jump *label337 always
+  776 label *label337
   777 op shl *tmp240 :createAdjacentMask:row1 1
   778 op or *tmp241 :createAdjacentMask:row2 *tmp240
   779 op shr *tmp242 :createAdjacentMask:row1 1
 
   790 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   791 set :createBlockMaskRow:x :createAdjacentMask:x
   792 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label215 (h:*label215)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label215) (h:*label215)
-    * label *label215
+  793 label *label338
+  794 label *label339
+  795 label *label340
+  796 op add *tmp225 :createBlockMaskRow:x 4
+  797 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  798 op or :createBlockMaskRow:result 0 *tmp226
+  799 label *label341
+  800 label *label342
+  801 op shl *tmp224 :createBlockMaskRow:result 1
+  802 op add *tmp225 :createBlockMaskRow:x 3
+  803 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  804 op or :createBlockMaskRow:result *tmp224 *tmp226
+  805 label *label343
+  806 label *label344
+  807 op shl *tmp224 :createBlockMaskRow:result 1
+  808 op add *tmp225 :createBlockMaskRow:x 2
+  809 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  810 op or :createBlockMaskRow:result *tmp224 *tmp226
+  811 label *label345
+  812 label *label346
+  813 op shl *tmp224 :createBlockMaskRow:result 1
+  814 op add *tmp225 :createBlockMaskRow:x 1
+  815 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  816 op or :createBlockMaskRow:result *tmp224 *tmp226
+  817 label *label347
+  818 label *label348
+  819 op shl *tmp224 :createBlockMaskRow:result 1
+  820 op add *tmp225 :createBlockMaskRow:x 0
+  821 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  822 op or :createBlockMaskRow:result *tmp224 *tmp226
+  823 label *label349
+  824 label *label350
+  825 op shl *tmp224 :createBlockMaskRow:result 1
+  826 op add *tmp225 :createBlockMaskRow:x -1
+  827 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  828 op or :createBlockMaskRow:result *tmp224 *tmp226
+  829 label *label351
+  830 label *label352
+  831 op shl *tmp224 :createBlockMaskRow:result 1
+  832 op add *tmp225 :createBlockMaskRow:x -2
+  833 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  834 op or :createBlockMaskRow:result *tmp224 *tmp226
+  835 label *label353
+  836 label *label354
+  837 op shl *tmp224 :createBlockMaskRow:result 1
+  838 op add *tmp225 :createBlockMaskRow:x -3
+  839 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  840 op or :createBlockMaskRow:result *tmp224 *tmp226
+  841 label *label355
+  842 label *label356
+  843 op shl *tmp224 :createBlockMaskRow:result 1
+  844 op add *tmp225 :createBlockMaskRow:x -4
+  845 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  846 op or :createBlockMaskRow:result *tmp224 *tmp226
+  847 label *label357
+  848 label *label358
+  849 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  850 jump *label359 always
+  851 label *label359
   852 op shl *tmp240 :createAdjacentMask:row1 1
   853 op or *tmp241 :createAdjacentMask:row2 *tmp240
   854 op shr *tmp242 :createAdjacentMask:row1 1
 
   865 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   866 set :createBlockMaskRow:x :createAdjacentMask:x
   867 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label218 (h:*label218)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label218) (h:*label218)
-    * label *label218
+  868 label *label360
+  869 label *label361
+  870 label *label362
+  871 op add *tmp225 :createBlockMaskRow:x 4
+  872 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  873 op or :createBlockMaskRow:result 0 *tmp226
+  874 label *label363
+  875 label *label364
+  876 op shl *tmp224 :createBlockMaskRow:result 1
+  877 op add *tmp225 :createBlockMaskRow:x 3
+  878 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  879 op or :createBlockMaskRow:result *tmp224 *tmp226
+  880 label *label365
+  881 label *label366
+  882 op shl *tmp224 :createBlockMaskRow:result 1
+  883 op add *tmp225 :createBlockMaskRow:x 2
+  884 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  885 op or :createBlockMaskRow:result *tmp224 *tmp226
+  886 label *label367
+  887 label *label368
+  888 op shl *tmp224 :createBlockMaskRow:result 1
+  889 op add *tmp225 :createBlockMaskRow:x 1
+  890 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  891 op or :createBlockMaskRow:result *tmp224 *tmp226
+  892 label *label369
+  893 label *label370
+  894 op shl *tmp224 :createBlockMaskRow:result 1
+  895 op add *tmp225 :createBlockMaskRow:x 0
+  896 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  897 op or :createBlockMaskRow:result *tmp224 *tmp226
+  898 label *label371
+  899 label *label372
+  900 op shl *tmp224 :createBlockMaskRow:result 1
+  901 op add *tmp225 :createBlockMaskRow:x -1
+  902 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  903 op or :createBlockMaskRow:result *tmp224 *tmp226
+  904 label *label373
+  905 label *label374
+  906 op shl *tmp224 :createBlockMaskRow:result 1
+  907 op add *tmp225 :createBlockMaskRow:x -2
+  908 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  909 op or :createBlockMaskRow:result *tmp224 *tmp226
+  910 label *label375
+  911 label *label376
+  912 op shl *tmp224 :createBlockMaskRow:result 1
+  913 op add *tmp225 :createBlockMaskRow:x -3
+  914 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  915 op or :createBlockMaskRow:result *tmp224 *tmp226
+  916 label *label377
+  917 label *label378
+  918 op shl *tmp224 :createBlockMaskRow:result 1
+  919 op add *tmp225 :createBlockMaskRow:x -4
+  920 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  921 op or :createBlockMaskRow:result *tmp224 *tmp226
+  922 label *label379
+  923 label *label380
+  924 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  925 jump *label381 always
+  926 label *label381
   927 op shl *tmp240 :createAdjacentMask:row1 1
   928 op or *tmp241 :createAdjacentMask:row2 *tmp240
   929 op shr *tmp242 :createAdjacentMask:row1 1
 
   940 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
   941 set :createBlockMaskRow:x :createAdjacentMask:x
   942 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label221 (h:*label221)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label221) (h:*label221)
-    * label *label221
+  943 label *label382
+  944 label *label383
+  945 label *label384
+  946 op add *tmp225 :createBlockMaskRow:x 4
+  947 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  948 op or :createBlockMaskRow:result 0 *tmp226
+  949 label *label385
+  950 label *label386
+  951 op shl *tmp224 :createBlockMaskRow:result 1
+  952 op add *tmp225 :createBlockMaskRow:x 3
+  953 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  954 op or :createBlockMaskRow:result *tmp224 *tmp226
+  955 label *label387
+  956 label *label388
+  957 op shl *tmp224 :createBlockMaskRow:result 1
+  958 op add *tmp225 :createBlockMaskRow:x 2
+  959 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  960 op or :createBlockMaskRow:result *tmp224 *tmp226
+  961 label *label389
+  962 label *label390
+  963 op shl *tmp224 :createBlockMaskRow:result 1
+  964 op add *tmp225 :createBlockMaskRow:x 1
+  965 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  966 op or :createBlockMaskRow:result *tmp224 *tmp226
+  967 label *label391
+  968 label *label392
+  969 op shl *tmp224 :createBlockMaskRow:result 1
+  970 op add *tmp225 :createBlockMaskRow:x 0
+  971 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  972 op or :createBlockMaskRow:result *tmp224 *tmp226
+  973 label *label393
+  974 label *label394
+  975 op shl *tmp224 :createBlockMaskRow:result 1
+  976 op add *tmp225 :createBlockMaskRow:x -1
+  977 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  978 op or :createBlockMaskRow:result *tmp224 *tmp226
+  979 label *label395
+  980 label *label396
+  981 op shl *tmp224 :createBlockMaskRow:result 1
+  982 op add *tmp225 :createBlockMaskRow:x -2
+  983 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  984 op or :createBlockMaskRow:result *tmp224 *tmp226
+  985 label *label397
+  986 label *label398
+  987 op shl *tmp224 :createBlockMaskRow:result 1
+  988 op add *tmp225 :createBlockMaskRow:x -3
+  989 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  990 op or :createBlockMaskRow:result *tmp224 *tmp226
+  991 label *label399
+  992 label *label400
+  993 op shl *tmp224 :createBlockMaskRow:result 1
+  994 op add *tmp225 :createBlockMaskRow:x -4
+  995 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  996 op or :createBlockMaskRow:result *tmp224 *tmp226
+  997 label *label401
+  998 label *label402
+  999 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1000 jump *label403 always
+ 1001 label *label403
  1002 op shl *tmp240 :createAdjacentMask:row1 1
  1003 op or *tmp241 :createAdjacentMask:row2 *tmp240
  1004 op shr *tmp242 :createAdjacentMask:row1 1
 
  1015 op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
  1016 set :createBlockMaskRow:x :createAdjacentMask:x
  1017 set :createBlockMaskRow:y *tmp238
-    * setaddr :createBlockMaskRow*retaddr *label224 (h:*label224)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label224) (h:*label224)
-    * label *label224
+ 1018 label *label404
+ 1019 label *label405
+ 1020 label *label406
+ 1021 op add *tmp225 :createBlockMaskRow:x 4
+ 1022 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1023 op or :createBlockMaskRow:result 0 *tmp226
+ 1024 label *label407
+ 1025 label *label408
+ 1026 op shl *tmp224 :createBlockMaskRow:result 1
+ 1027 op add *tmp225 :createBlockMaskRow:x 3
+ 1028 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1029 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1030 label *label409
+ 1031 label *label410
+ 1032 op shl *tmp224 :createBlockMaskRow:result 1
+ 1033 op add *tmp225 :createBlockMaskRow:x 2
+ 1034 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1035 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1036 label *label411
+ 1037 label *label412
+ 1038 op shl *tmp224 :createBlockMaskRow:result 1
+ 1039 op add *tmp225 :createBlockMaskRow:x 1
+ 1040 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1041 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1042 label *label413
+ 1043 label *label414
+ 1044 op shl *tmp224 :createBlockMaskRow:result 1
+ 1045 op add *tmp225 :createBlockMaskRow:x 0
+ 1046 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1047 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1048 label *label415
+ 1049 label *label416
+ 1050 op shl *tmp224 :createBlockMaskRow:result 1
+ 1051 op add *tmp225 :createBlockMaskRow:x -1
+ 1052 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1053 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1054 label *label417
+ 1055 label *label418
+ 1056 op shl *tmp224 :createBlockMaskRow:result 1
+ 1057 op add *tmp225 :createBlockMaskRow:x -2
+ 1058 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1059 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1060 label *label419
+ 1061 label *label420
+ 1062 op shl *tmp224 :createBlockMaskRow:result 1
+ 1063 op add *tmp225 :createBlockMaskRow:x -3
+ 1064 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1065 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1066 label *label421
+ 1067 label *label422
+ 1068 op shl *tmp224 :createBlockMaskRow:result 1
+ 1069 op add *tmp225 :createBlockMaskRow:x -4
+ 1070 ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1071 op or :createBlockMaskRow:result *tmp224 *tmp226
+ 1072 label *label423
+ 1073 label *label424
+ 1074 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1075 jump *label425 always
+ 1076 label *label425
  1077 op shl *tmp240 :createAdjacentMask:row1 1
  1078 op or *tmp241 :createAdjacentMask:row2 *tmp240
  1079 op shr *tmp242 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   439 label *label228
   440 label *label229
   441 label *label230
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  442 op add *tmp225 :createCombinedMask:x 4
+  443 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   444 op or :createBlockMaskRow:result 0 *tmp226
   445 label *label231
   446 label *label232
   447 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  448 op add *tmp225 :createCombinedMask:x 3
+  449 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   450 op or :createBlockMaskRow:result *tmp224 *tmp226
   451 label *label233
   452 label *label234
   453 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  454 op add *tmp225 :createCombinedMask:x 2
+  455 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   456 op or :createBlockMaskRow:result *tmp224 *tmp226
   457 label *label235
   458 label *label236
   459 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  460 op add *tmp225 :createCombinedMask:x 1
+  461 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   462 op or :createBlockMaskRow:result *tmp224 *tmp226
   463 label *label237
   464 label *label238
   465 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  466 op add *tmp225 :createCombinedMask:x 0
+  467 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   468 op or :createBlockMaskRow:result *tmp224 *tmp226
   469 label *label239
   470 label *label240
   471 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  472 op add *tmp225 :createCombinedMask:x -1
+  473 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   474 op or :createBlockMaskRow:result *tmp224 *tmp226
   475 label *label241
   476 label *label242
   477 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  478 op add *tmp225 :createCombinedMask:x -2
+  479 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   480 op or :createBlockMaskRow:result *tmp224 *tmp226
   481 label *label243
   482 label *label244
   483 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  484 op add *tmp225 :createCombinedMask:x -3
+  485 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   486 op or :createBlockMaskRow:result *tmp224 *tmp226
   487 label *label245
   488 label *label246
   489 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  490 op add *tmp225 :createCombinedMask:x -4
+  491 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   492 op or :createBlockMaskRow:result *tmp224 *tmp226
   493 label *label247
   494 label *label248
   495 set :createBlockMaskRow*retval :createBlockMaskRow:result
   496 jump *label249 always
   497 label *label249
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp236 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  498 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  499 op add *tmp236 :createCombinedMask:y 3
+  500 set :createBlockMaskRow:x :createCombinedMask:x
   501 set :createBlockMaskRow:y *tmp236
   502 label *label250
   503 label *label251
   504 label *label252
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  505 op add *tmp225 :createAdjacentMask:x 4
+  506 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   507 op or :createBlockMaskRow:result 0 *tmp226
   508 label *label253
   509 label *label254
   510 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  511 op add *tmp225 :createAdjacentMask:x 3
+  512 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   513 op or :createBlockMaskRow:result *tmp224 *tmp226
   514 label *label255
   515 label *label256
   516 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  517 op add *tmp225 :createAdjacentMask:x 2
+  518 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   519 op or :createBlockMaskRow:result *tmp224 *tmp226
   520 label *label257
   521 label *label258
   522 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  523 op add *tmp225 :createAdjacentMask:x 1
+  524 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   525 op or :createBlockMaskRow:result *tmp224 *tmp226
   526 label *label259
   527 label *label260
   528 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  529 op add *tmp225 :createAdjacentMask:x 0
+  530 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   531 op or :createBlockMaskRow:result *tmp224 *tmp226
   532 label *label261
   533 label *label262
   534 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  535 op add *tmp225 :createAdjacentMask:x -1
+  536 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   537 op or :createBlockMaskRow:result *tmp224 *tmp226
   538 label *label263
   539 label *label264
   540 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  541 op add *tmp225 :createAdjacentMask:x -2
+  542 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   543 op or :createBlockMaskRow:result *tmp224 *tmp226
   544 label *label265
   545 label *label266
   546 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  547 op add *tmp225 :createAdjacentMask:x -3
+  548 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   549 op or :createBlockMaskRow:result *tmp224 *tmp226
   550 label *label267
   551 label *label268
   552 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  553 op add *tmp225 :createAdjacentMask:x -4
+  554 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   555 op or :createBlockMaskRow:result *tmp224 *tmp226
   556 label *label269
   557 label *label270
   558 set :createBlockMaskRow*retval :createBlockMaskRow:result
   559 jump *label271 always
   560 label *label271
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  561 set :createAdjacentMask:row1 :createBlockMaskRow:result
   562 set :createAdjacentMask:r 2
   563 label *label204
   564 label *label205
-    * op add *tmp238 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  565 op add *tmp238 :createCombinedMask:y 2
+  566 set :createBlockMaskRow:x :createCombinedMask:x
   567 set :createBlockMaskRow:y *tmp238
   568 label *label272
   569 label *label273
   570 label *label274
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  571 op add *tmp225 :createAdjacentMask:x 4
+  572 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   573 op or :createBlockMaskRow:result 0 *tmp226
   574 label *label275
   575 label *label276
   576 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  577 op add *tmp225 :createAdjacentMask:x 3
+  578 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   579 op or :createBlockMaskRow:result *tmp224 *tmp226
   580 label *label277
   581 label *label278
   582 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  583 op add *tmp225 :createAdjacentMask:x 2
+  584 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   585 op or :createBlockMaskRow:result *tmp224 *tmp226
   586 label *label279
   587 label *label280
   588 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  589 op add *tmp225 :createAdjacentMask:x 1
+  590 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   591 op or :createBlockMaskRow:result *tmp224 *tmp226
   592 label *label281
   593 label *label282
   594 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  595 op add *tmp225 :createAdjacentMask:x 0
+  596 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   597 op or :createBlockMaskRow:result *tmp224 *tmp226
   598 label *label283
   599 label *label284
   600 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  601 op add *tmp225 :createAdjacentMask:x -1
+  602 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   603 op or :createBlockMaskRow:result *tmp224 *tmp226
   604 label *label285
   605 label *label286
   606 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  607 op add *tmp225 :createAdjacentMask:x -2
+  608 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   609 op or :createBlockMaskRow:result *tmp224 *tmp226
   610 label *label287
   611 label *label288
   612 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  613 op add *tmp225 :createAdjacentMask:x -3
+  614 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   615 op or :createBlockMaskRow:result *tmp224 *tmp226
   616 label *label289
   617 label *label290
   618 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  619 op add *tmp225 :createAdjacentMask:x -4
+  620 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   621 op or :createBlockMaskRow:result *tmp224 *tmp226
   622 label *label291
   623 label *label292
 
   628 op or *tmp241 :createAdjacentMask:row2 *tmp240
   629 op shr *tmp242 :createAdjacentMask:row1 1
   630 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
-    * op shl *tmp245 :createAdjacentMask:result 7
+  631 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
+  632 op shl *tmp245 0 7
   633 op and *tmp246 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp245 *tmp246
+  634 op or :createAdjacentMask:result 0 *tmp246
   635 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  636 set :createAdjacentMask:row1 :createBlockMaskRow:result
   637 label *label207
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  638 op sub :createAdjacentMask:r 2 1
   639 label *label208
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  640 op add *tmp238 :createCombinedMask:y 1
+  641 set :createBlockMaskRow:x :createCombinedMask:x
   642 set :createBlockMaskRow:y *tmp238
   643 label *label294
   644 label *label295
   645 label *label296
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  646 op add *tmp225 :createAdjacentMask:x 4
+  647 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   648 op or :createBlockMaskRow:result 0 *tmp226
   649 label *label297
   650 label *label298
   651 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  652 op add *tmp225 :createAdjacentMask:x 3
+  653 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   654 op or :createBlockMaskRow:result *tmp224 *tmp226
   655 label *label299
   656 label *label300
   657 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  658 op add *tmp225 :createAdjacentMask:x 2
+  659 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   660 op or :createBlockMaskRow:result *tmp224 *tmp226
   661 label *label301
   662 label *label302
   663 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  664 op add *tmp225 :createAdjacentMask:x 1
+  665 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   666 op or :createBlockMaskRow:result *tmp224 *tmp226
   667 label *label303
   668 label *label304
   669 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  670 op add *tmp225 :createAdjacentMask:x 0
+  671 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   672 op or :createBlockMaskRow:result *tmp224 *tmp226
   673 label *label305
   674 label *label306
   675 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  676 op add *tmp225 :createAdjacentMask:x -1
+  677 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   678 op or :createBlockMaskRow:result *tmp224 *tmp226
   679 label *label307
   680 label *label308
   681 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  682 op add *tmp225 :createAdjacentMask:x -2
+  683 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   684 op or :createBlockMaskRow:result *tmp224 *tmp226
   685 label *label309
   686 label *label310
   687 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  688 op add *tmp225 :createAdjacentMask:x -3
+  689 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   690 op or :createBlockMaskRow:result *tmp224 *tmp226
   691 label *label311
   692 label *label312
   693 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  694 op add *tmp225 :createAdjacentMask:x -4
+  695 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   696 op or :createBlockMaskRow:result *tmp224 *tmp226
   697 label *label313
   698 label *label314
 
   703 op or *tmp241 :createAdjacentMask:row2 *tmp240
   704 op shr *tmp242 :createAdjacentMask:row1 1
   705 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  706 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
   707 op shl *tmp245 :createAdjacentMask:result 7
   708 op and *tmp246 :createAdjacentMask:mask 0xFE
   709 op or :createAdjacentMask:result *tmp245 *tmp246
   710 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  711 set :createAdjacentMask:row1 :createBlockMaskRow:result
   712 label *label210
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  713 op sub :createAdjacentMask:r 1 1
   714 label *label211
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  715 op add *tmp238 :createCombinedMask:y 0
+  716 set :createBlockMaskRow:x :createCombinedMask:x
   717 set :createBlockMaskRow:y *tmp238
   718 label *label316
   719 label *label317
   720 label *label318
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  721 op add *tmp225 :createAdjacentMask:x 4
+  722 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   723 op or :createBlockMaskRow:result 0 *tmp226
   724 label *label319
   725 label *label320
   726 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  727 op add *tmp225 :createAdjacentMask:x 3
+  728 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   729 op or :createBlockMaskRow:result *tmp224 *tmp226
   730 label *label321
   731 label *label322
   732 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  733 op add *tmp225 :createAdjacentMask:x 2
+  734 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   735 op or :createBlockMaskRow:result *tmp224 *tmp226
   736 label *label323
   737 label *label324
   738 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  739 op add *tmp225 :createAdjacentMask:x 1
+  740 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   741 op or :createBlockMaskRow:result *tmp224 *tmp226
   742 label *label325
   743 label *label326
   744 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  745 op add *tmp225 :createAdjacentMask:x 0
+  746 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   747 op or :createBlockMaskRow:result *tmp224 *tmp226
   748 label *label327
   749 label *label328
   750 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  751 op add *tmp225 :createAdjacentMask:x -1
+  752 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   753 op or :createBlockMaskRow:result *tmp224 *tmp226
   754 label *label329
   755 label *label330
   756 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  757 op add *tmp225 :createAdjacentMask:x -2
+  758 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   759 op or :createBlockMaskRow:result *tmp224 *tmp226
   760 label *label331
   761 label *label332
   762 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  763 op add *tmp225 :createAdjacentMask:x -3
+  764 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   765 op or :createBlockMaskRow:result *tmp224 *tmp226
   766 label *label333
   767 label *label334
   768 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  769 op add *tmp225 :createAdjacentMask:x -4
+  770 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   771 op or :createBlockMaskRow:result *tmp224 *tmp226
   772 label *label335
   773 label *label336
 
   778 op or *tmp241 :createAdjacentMask:row2 *tmp240
   779 op shr *tmp242 :createAdjacentMask:row1 1
   780 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  781 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
   782 op shl *tmp245 :createAdjacentMask:result 7
   783 op and *tmp246 :createAdjacentMask:mask 0xFE
   784 op or :createAdjacentMask:result *tmp245 *tmp246
   785 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  786 set :createAdjacentMask:row1 :createBlockMaskRow:result
   787 label *label213
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  788 op sub :createAdjacentMask:r 0 1
   789 label *label214
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  790 op add *tmp238 :createCombinedMask:y -1
+  791 set :createBlockMaskRow:x :createCombinedMask:x
   792 set :createBlockMaskRow:y *tmp238
   793 label *label338
   794 label *label339
   795 label *label340
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  796 op add *tmp225 :createAdjacentMask:x 4
+  797 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   798 op or :createBlockMaskRow:result 0 *tmp226
   799 label *label341
   800 label *label342
   801 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  802 op add *tmp225 :createAdjacentMask:x 3
+  803 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   804 op or :createBlockMaskRow:result *tmp224 *tmp226
   805 label *label343
   806 label *label344
   807 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  808 op add *tmp225 :createAdjacentMask:x 2
+  809 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   810 op or :createBlockMaskRow:result *tmp224 *tmp226
   811 label *label345
   812 label *label346
   813 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  814 op add *tmp225 :createAdjacentMask:x 1
+  815 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   816 op or :createBlockMaskRow:result *tmp224 *tmp226
   817 label *label347
   818 label *label348
   819 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  820 op add *tmp225 :createAdjacentMask:x 0
+  821 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   822 op or :createBlockMaskRow:result *tmp224 *tmp226
   823 label *label349
   824 label *label350
   825 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  826 op add *tmp225 :createAdjacentMask:x -1
+  827 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   828 op or :createBlockMaskRow:result *tmp224 *tmp226
   829 label *label351
   830 label *label352
   831 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  832 op add *tmp225 :createAdjacentMask:x -2
+  833 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   834 op or :createBlockMaskRow:result *tmp224 *tmp226
   835 label *label353
   836 label *label354
   837 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  838 op add *tmp225 :createAdjacentMask:x -3
+  839 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   840 op or :createBlockMaskRow:result *tmp224 *tmp226
   841 label *label355
   842 label *label356
   843 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  844 op add *tmp225 :createAdjacentMask:x -4
+  845 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   846 op or :createBlockMaskRow:result *tmp224 *tmp226
   847 label *label357
   848 label *label358
 
   853 op or *tmp241 :createAdjacentMask:row2 *tmp240
   854 op shr *tmp242 :createAdjacentMask:row1 1
   855 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  856 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
   857 op shl *tmp245 :createAdjacentMask:result 7
   858 op and *tmp246 :createAdjacentMask:mask 0xFE
   859 op or :createAdjacentMask:result *tmp245 *tmp246
   860 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  861 set :createAdjacentMask:row1 :createBlockMaskRow:result
   862 label *label216
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  863 op sub :createAdjacentMask:r -1 1
   864 label *label217
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  865 op add *tmp238 :createCombinedMask:y -2
+  866 set :createBlockMaskRow:x :createCombinedMask:x
   867 set :createBlockMaskRow:y *tmp238
   868 label *label360
   869 label *label361
   870 label *label362
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  871 op add *tmp225 :createAdjacentMask:x 4
+  872 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   873 op or :createBlockMaskRow:result 0 *tmp226
   874 label *label363
   875 label *label364
   876 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  877 op add *tmp225 :createAdjacentMask:x 3
+  878 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   879 op or :createBlockMaskRow:result *tmp224 *tmp226
   880 label *label365
   881 label *label366
   882 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  883 op add *tmp225 :createAdjacentMask:x 2
+  884 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   885 op or :createBlockMaskRow:result *tmp224 *tmp226
   886 label *label367
   887 label *label368
   888 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  889 op add *tmp225 :createAdjacentMask:x 1
+  890 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   891 op or :createBlockMaskRow:result *tmp224 *tmp226
   892 label *label369
   893 label *label370
   894 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  895 op add *tmp225 :createAdjacentMask:x 0
+  896 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   897 op or :createBlockMaskRow:result *tmp224 *tmp226
   898 label *label371
   899 label *label372
   900 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  901 op add *tmp225 :createAdjacentMask:x -1
+  902 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   903 op or :createBlockMaskRow:result *tmp224 *tmp226
   904 label *label373
   905 label *label374
   906 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  907 op add *tmp225 :createAdjacentMask:x -2
+  908 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   909 op or :createBlockMaskRow:result *tmp224 *tmp226
   910 label *label375
   911 label *label376
   912 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  913 op add *tmp225 :createAdjacentMask:x -3
+  914 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   915 op or :createBlockMaskRow:result *tmp224 *tmp226
   916 label *label377
   917 label *label378
   918 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  919 op add *tmp225 :createAdjacentMask:x -4
+  920 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   921 op or :createBlockMaskRow:result *tmp224 *tmp226
   922 label *label379
   923 label *label380
 
   928 op or *tmp241 :createAdjacentMask:row2 *tmp240
   929 op shr *tmp242 :createAdjacentMask:row1 1
   930 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+  931 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
   932 op shl *tmp245 :createAdjacentMask:result 7
   933 op and *tmp246 :createAdjacentMask:mask 0xFE
   934 op or :createAdjacentMask:result *tmp245 *tmp246
   935 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  936 set :createAdjacentMask:row1 :createBlockMaskRow:result
   937 label *label219
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  938 op sub :createAdjacentMask:r -2 1
   939 label *label220
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  940 op add *tmp238 :createCombinedMask:y -3
+  941 set :createBlockMaskRow:x :createCombinedMask:x
   942 set :createBlockMaskRow:y *tmp238
   943 label *label382
   944 label *label383
   945 label *label384
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  946 op add *tmp225 :createAdjacentMask:x 4
+  947 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   948 op or :createBlockMaskRow:result 0 *tmp226
   949 label *label385
   950 label *label386
   951 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  952 op add *tmp225 :createAdjacentMask:x 3
+  953 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   954 op or :createBlockMaskRow:result *tmp224 *tmp226
   955 label *label387
   956 label *label388
   957 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  958 op add *tmp225 :createAdjacentMask:x 2
+  959 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   960 op or :createBlockMaskRow:result *tmp224 *tmp226
   961 label *label389
   962 label *label390
   963 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  964 op add *tmp225 :createAdjacentMask:x 1
+  965 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   966 op or :createBlockMaskRow:result *tmp224 *tmp226
   967 label *label391
   968 label *label392
   969 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  970 op add *tmp225 :createAdjacentMask:x 0
+  971 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   972 op or :createBlockMaskRow:result *tmp224 *tmp226
   973 label *label393
   974 label *label394
   975 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  976 op add *tmp225 :createAdjacentMask:x -1
+  977 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   978 op or :createBlockMaskRow:result *tmp224 *tmp226
   979 label *label395
   980 label *label396
   981 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  982 op add *tmp225 :createAdjacentMask:x -2
+  983 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   984 op or :createBlockMaskRow:result *tmp224 *tmp226
   985 label *label397
   986 label *label398
   987 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  988 op add *tmp225 :createAdjacentMask:x -3
+  989 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   990 op or :createBlockMaskRow:result *tmp224 *tmp226
   991 label *label399
   992 label *label400
   993 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+  994 op add *tmp225 :createAdjacentMask:x -4
+  995 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   996 op or :createBlockMaskRow:result *tmp224 *tmp226
   997 label *label401
   998 label *label402
 
  1003 op or *tmp241 :createAdjacentMask:row2 *tmp240
  1004 op shr *tmp242 :createAdjacentMask:row1 1
  1005 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+ 1006 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
  1007 op shl *tmp245 :createAdjacentMask:result 7
  1008 op and *tmp246 :createAdjacentMask:mask 0xFE
  1009 op or :createAdjacentMask:result *tmp245 *tmp246
  1010 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1011 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1012 label *label222
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1013 op sub :createAdjacentMask:r -3 1
  1014 label *label223
-    * op add *tmp238 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1015 op add *tmp238 :createCombinedMask:y -4
+ 1016 set :createBlockMaskRow:x :createCombinedMask:x
  1017 set :createBlockMaskRow:y *tmp238
  1018 label *label404
  1019 label *label405
  1020 label *label406
-    * op add *tmp225 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1021 op add *tmp225 :createAdjacentMask:x 4
+ 1022 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1023 op or :createBlockMaskRow:result 0 *tmp226
  1024 label *label407
  1025 label *label408
  1026 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1027 op add *tmp225 :createAdjacentMask:x 3
+ 1028 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1029 op or :createBlockMaskRow:result *tmp224 *tmp226
  1030 label *label409
  1031 label *label410
  1032 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1033 op add *tmp225 :createAdjacentMask:x 2
+ 1034 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1035 op or :createBlockMaskRow:result *tmp224 *tmp226
  1036 label *label411
  1037 label *label412
  1038 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1039 op add *tmp225 :createAdjacentMask:x 1
+ 1040 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1041 op or :createBlockMaskRow:result *tmp224 *tmp226
  1042 label *label413
  1043 label *label414
  1044 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1045 op add *tmp225 :createAdjacentMask:x 0
+ 1046 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1047 op or :createBlockMaskRow:result *tmp224 *tmp226
  1048 label *label415
  1049 label *label416
  1050 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1051 op add *tmp225 :createAdjacentMask:x -1
+ 1052 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1053 op or :createBlockMaskRow:result *tmp224 *tmp226
  1054 label *label417
  1055 label *label418
  1056 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1057 op add *tmp225 :createAdjacentMask:x -2
+ 1058 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1059 op or :createBlockMaskRow:result *tmp224 *tmp226
  1060 label *label419
  1061 label *label420
  1062 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1063 op add *tmp225 :createAdjacentMask:x -3
+ 1064 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1065 op or :createBlockMaskRow:result *tmp224 *tmp226
  1066 label *label421
  1067 label *label422
  1068 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp225 :createBlockMaskRow:y 0 *tmp226 0
+ 1069 op add *tmp225 :createAdjacentMask:x -4
+ 1070 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1071 op or :createBlockMaskRow:result *tmp224 *tmp226
  1072 label *label423
  1073 label *label424
 
  1078 op or *tmp241 :createAdjacentMask:row2 *tmp240
  1079 op shr *tmp242 :createAdjacentMask:row1 1
  1080 op or *tmp243 *tmp241 *tmp242
-    * op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow*retval
+ 1081 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
  1082 op shl *tmp245 :createAdjacentMask:result 7
  1083 op and *tmp246 :createAdjacentMask:mask 0xFE
  1084 op or :createAdjacentMask:result *tmp245 *tmp246

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-37 instructions):
 
   431 write false processor1 ":createTerrainMask*finished"
   432 write 1 processor1 "@counter"
   433 set :createAdjacentMask:x :createCombinedMask:x
-    * set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   434 op add *tmp234 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp234
   435 label *label228
   436 label *label229
   437 label *label230
 
   488 op or :createBlockMaskRow:result *tmp224 *tmp226
   489 label *label247
   490 label *label248
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   491 jump *label249 always
   492 label *label249
   493 set :createAdjacentMask:row2 :createBlockMaskRow:result
   494 op add *tmp236 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   495 label *label250
   496 label *label251
   497 label *label252
-    * op add *tmp225 :createAdjacentMask:x 4
+  498 op add *tmp225 :createCombinedMask:x 4
   499 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   500 op or :createBlockMaskRow:result 0 *tmp226
   501 label *label253
   502 label *label254
   503 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  504 op add *tmp225 :createCombinedMask:x 3
   505 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   506 op or :createBlockMaskRow:result *tmp224 *tmp226
   507 label *label255
   508 label *label256
   509 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  510 op add *tmp225 :createCombinedMask:x 2
   511 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   512 op or :createBlockMaskRow:result *tmp224 *tmp226
   513 label *label257
   514 label *label258
   515 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  516 op add *tmp225 :createCombinedMask:x 1
   517 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   518 op or :createBlockMaskRow:result *tmp224 *tmp226
   519 label *label259
   520 label *label260
   521 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  522 op add *tmp225 :createCombinedMask:x 0
   523 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   524 op or :createBlockMaskRow:result *tmp224 *tmp226
   525 label *label261
   526 label *label262
   527 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  528 op add *tmp225 :createCombinedMask:x -1
   529 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   530 op or :createBlockMaskRow:result *tmp224 *tmp226
   531 label *label263
   532 label *label264
   533 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  534 op add *tmp225 :createCombinedMask:x -2
   535 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   536 op or :createBlockMaskRow:result *tmp224 *tmp226
   537 label *label265
   538 label *label266
   539 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  540 op add *tmp225 :createCombinedMask:x -3
   541 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   542 op or :createBlockMaskRow:result *tmp224 *tmp226
   543 label *label267
   544 label *label268
   545 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  546 op add *tmp225 :createCombinedMask:x -4
   547 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   548 op or :createBlockMaskRow:result *tmp224 *tmp226
   549 label *label269
   550 label *label270
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   551 jump *label271 always
   552 label *label271
   553 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   554 label *label204
   555 label *label205
   556 op add *tmp238 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   557 label *label272
   558 label *label273
   559 label *label274
-    * op add *tmp225 :createAdjacentMask:x 4
+  560 op add *tmp225 :createCombinedMask:x 4
   561 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   562 op or :createBlockMaskRow:result 0 *tmp226
   563 label *label275
   564 label *label276
   565 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  566 op add *tmp225 :createCombinedMask:x 3
   567 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   568 op or :createBlockMaskRow:result *tmp224 *tmp226
   569 label *label277
   570 label *label278
   571 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  572 op add *tmp225 :createCombinedMask:x 2
   573 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   574 op or :createBlockMaskRow:result *tmp224 *tmp226
   575 label *label279
   576 label *label280
   577 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  578 op add *tmp225 :createCombinedMask:x 1
   579 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   580 op or :createBlockMaskRow:result *tmp224 *tmp226
   581 label *label281
   582 label *label282
   583 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  584 op add *tmp225 :createCombinedMask:x 0
   585 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   586 op or :createBlockMaskRow:result *tmp224 *tmp226
   587 label *label283
   588 label *label284
   589 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  590 op add *tmp225 :createCombinedMask:x -1
   591 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   592 op or :createBlockMaskRow:result *tmp224 *tmp226
   593 label *label285
   594 label *label286
   595 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  596 op add *tmp225 :createCombinedMask:x -2
   597 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   598 op or :createBlockMaskRow:result *tmp224 *tmp226
   599 label *label287
   600 label *label288
   601 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  602 op add *tmp225 :createCombinedMask:x -3
   603 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   604 op or :createBlockMaskRow:result *tmp224 *tmp226
   605 label *label289
   606 label *label290
   607 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  608 op add *tmp225 :createCombinedMask:x -4
   609 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   610 op or :createBlockMaskRow:result *tmp224 *tmp226
   611 label *label291
   612 label *label292
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   613 jump *label293 always
   614 label *label293
   615 op shl *tmp240 :createAdjacentMask:row1 1
 
   617 op shr *tmp242 :createAdjacentMask:row1 1
   618 op or *tmp243 *tmp241 *tmp242
   619 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
-    * op shl *tmp245 0 7
   620 op and *tmp246 :createAdjacentMask:mask 0xFE
   621 op or :createAdjacentMask:result 0 *tmp246
   622 set :createAdjacentMask:row2 :createAdjacentMask:row1
   623 set :createAdjacentMask:row1 :createBlockMaskRow:result
   624 label *label207
-    * op sub :createAdjacentMask:r 2 1
   625 label *label208
   626 op add *tmp238 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   627 label *label294
   628 label *label295
   629 label *label296
-    * op add *tmp225 :createAdjacentMask:x 4
+  630 op add *tmp225 :createCombinedMask:x 4
   631 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   632 op or :createBlockMaskRow:result 0 *tmp226
   633 label *label297
   634 label *label298
   635 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  636 op add *tmp225 :createCombinedMask:x 3
   637 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   638 op or :createBlockMaskRow:result *tmp224 *tmp226
   639 label *label299
   640 label *label300
   641 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  642 op add *tmp225 :createCombinedMask:x 2
   643 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   644 op or :createBlockMaskRow:result *tmp224 *tmp226
   645 label *label301
   646 label *label302
   647 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  648 op add *tmp225 :createCombinedMask:x 1
   649 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   650 op or :createBlockMaskRow:result *tmp224 *tmp226
   651 label *label303
   652 label *label304
   653 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  654 op add *tmp225 :createCombinedMask:x 0
   655 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   656 op or :createBlockMaskRow:result *tmp224 *tmp226
   657 label *label305
   658 label *label306
   659 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  660 op add *tmp225 :createCombinedMask:x -1
   661 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   662 op or :createBlockMaskRow:result *tmp224 *tmp226
   663 label *label307
   664 label *label308
   665 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  666 op add *tmp225 :createCombinedMask:x -2
   667 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   668 op or :createBlockMaskRow:result *tmp224 *tmp226
   669 label *label309
   670 label *label310
   671 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  672 op add *tmp225 :createCombinedMask:x -3
   673 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   674 op or :createBlockMaskRow:result *tmp224 *tmp226
   675 label *label311
   676 label *label312
   677 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  678 op add *tmp225 :createCombinedMask:x -4
   679 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   680 op or :createBlockMaskRow:result *tmp224 *tmp226
   681 label *label313
   682 label *label314
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   683 jump *label315 always
   684 label *label315
   685 op shl *tmp240 :createAdjacentMask:row1 1
 
   693 set :createAdjacentMask:row2 :createAdjacentMask:row1
   694 set :createAdjacentMask:row1 :createBlockMaskRow:result
   695 label *label210
-    * op sub :createAdjacentMask:r 1 1
   696 label *label211
   697 op add *tmp238 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   698 label *label316
   699 label *label317
   700 label *label318
-    * op add *tmp225 :createAdjacentMask:x 4
+  701 op add *tmp225 :createCombinedMask:x 4
   702 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   703 op or :createBlockMaskRow:result 0 *tmp226
   704 label *label319
   705 label *label320
   706 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  707 op add *tmp225 :createCombinedMask:x 3
   708 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   709 op or :createBlockMaskRow:result *tmp224 *tmp226
   710 label *label321
   711 label *label322
   712 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  713 op add *tmp225 :createCombinedMask:x 2
   714 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   715 op or :createBlockMaskRow:result *tmp224 *tmp226
   716 label *label323
   717 label *label324
   718 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  719 op add *tmp225 :createCombinedMask:x 1
   720 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   721 op or :createBlockMaskRow:result *tmp224 *tmp226
   722 label *label325
   723 label *label326
   724 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  725 op add *tmp225 :createCombinedMask:x 0
   726 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   727 op or :createBlockMaskRow:result *tmp224 *tmp226
   728 label *label327
   729 label *label328
   730 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  731 op add *tmp225 :createCombinedMask:x -1
   732 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   733 op or :createBlockMaskRow:result *tmp224 *tmp226
   734 label *label329
   735 label *label330
   736 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  737 op add *tmp225 :createCombinedMask:x -2
   738 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   739 op or :createBlockMaskRow:result *tmp224 *tmp226
   740 label *label331
   741 label *label332
   742 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  743 op add *tmp225 :createCombinedMask:x -3
   744 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   745 op or :createBlockMaskRow:result *tmp224 *tmp226
   746 label *label333
   747 label *label334
   748 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  749 op add *tmp225 :createCombinedMask:x -4
   750 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   751 op or :createBlockMaskRow:result *tmp224 *tmp226
   752 label *label335
   753 label *label336
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   754 jump *label337 always
   755 label *label337
   756 op shl *tmp240 :createAdjacentMask:row1 1
 
   764 set :createAdjacentMask:row2 :createAdjacentMask:row1
   765 set :createAdjacentMask:row1 :createBlockMaskRow:result
   766 label *label213
-    * op sub :createAdjacentMask:r 0 1
   767 label *label214
   768 op add *tmp238 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   769 label *label338
   770 label *label339
   771 label *label340
-    * op add *tmp225 :createAdjacentMask:x 4
+  772 op add *tmp225 :createCombinedMask:x 4
   773 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   774 op or :createBlockMaskRow:result 0 *tmp226
   775 label *label341
   776 label *label342
   777 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  778 op add *tmp225 :createCombinedMask:x 3
   779 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   780 op or :createBlockMaskRow:result *tmp224 *tmp226
   781 label *label343
   782 label *label344
   783 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  784 op add *tmp225 :createCombinedMask:x 2
   785 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   786 op or :createBlockMaskRow:result *tmp224 *tmp226
   787 label *label345
   788 label *label346
   789 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  790 op add *tmp225 :createCombinedMask:x 1
   791 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   792 op or :createBlockMaskRow:result *tmp224 *tmp226
   793 label *label347
   794 label *label348
   795 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  796 op add *tmp225 :createCombinedMask:x 0
   797 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   798 op or :createBlockMaskRow:result *tmp224 *tmp226
   799 label *label349
   800 label *label350
   801 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  802 op add *tmp225 :createCombinedMask:x -1
   803 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   804 op or :createBlockMaskRow:result *tmp224 *tmp226
   805 label *label351
   806 label *label352
   807 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  808 op add *tmp225 :createCombinedMask:x -2
   809 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   810 op or :createBlockMaskRow:result *tmp224 *tmp226
   811 label *label353
   812 label *label354
   813 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  814 op add *tmp225 :createCombinedMask:x -3
   815 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   816 op or :createBlockMaskRow:result *tmp224 *tmp226
   817 label *label355
   818 label *label356
   819 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  820 op add *tmp225 :createCombinedMask:x -4
   821 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   822 op or :createBlockMaskRow:result *tmp224 *tmp226
   823 label *label357
   824 label *label358
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   825 jump *label359 always
   826 label *label359
   827 op shl *tmp240 :createAdjacentMask:row1 1
 
   835 set :createAdjacentMask:row2 :createAdjacentMask:row1
   836 set :createAdjacentMask:row1 :createBlockMaskRow:result
   837 label *label216
-    * op sub :createAdjacentMask:r -1 1
   838 label *label217
   839 op add *tmp238 :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   840 label *label360
   841 label *label361
   842 label *label362
-    * op add *tmp225 :createAdjacentMask:x 4
+  843 op add *tmp225 :createCombinedMask:x 4
   844 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   845 op or :createBlockMaskRow:result 0 *tmp226
   846 label *label363
   847 label *label364
   848 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  849 op add *tmp225 :createCombinedMask:x 3
   850 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   851 op or :createBlockMaskRow:result *tmp224 *tmp226
   852 label *label365
   853 label *label366
   854 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  855 op add *tmp225 :createCombinedMask:x 2
   856 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   857 op or :createBlockMaskRow:result *tmp224 *tmp226
   858 label *label367
   859 label *label368
   860 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  861 op add *tmp225 :createCombinedMask:x 1
   862 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   863 op or :createBlockMaskRow:result *tmp224 *tmp226
   864 label *label369
   865 label *label370
   866 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  867 op add *tmp225 :createCombinedMask:x 0
   868 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   869 op or :createBlockMaskRow:result *tmp224 *tmp226
   870 label *label371
   871 label *label372
   872 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  873 op add *tmp225 :createCombinedMask:x -1
   874 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   875 op or :createBlockMaskRow:result *tmp224 *tmp226
   876 label *label373
   877 label *label374
   878 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  879 op add *tmp225 :createCombinedMask:x -2
   880 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   881 op or :createBlockMaskRow:result *tmp224 *tmp226
   882 label *label375
   883 label *label376
   884 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  885 op add *tmp225 :createCombinedMask:x -3
   886 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   887 op or :createBlockMaskRow:result *tmp224 *tmp226
   888 label *label377
   889 label *label378
   890 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  891 op add *tmp225 :createCombinedMask:x -4
   892 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   893 op or :createBlockMaskRow:result *tmp224 *tmp226
   894 label *label379
   895 label *label380
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   896 jump *label381 always
   897 label *label381
   898 op shl *tmp240 :createAdjacentMask:row1 1
 
   906 set :createAdjacentMask:row2 :createAdjacentMask:row1
   907 set :createAdjacentMask:row1 :createBlockMaskRow:result
   908 label *label219
-    * op sub :createAdjacentMask:r -2 1
   909 label *label220
   910 op add *tmp238 :createCombinedMask:y -3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   911 label *label382
   912 label *label383
   913 label *label384
-    * op add *tmp225 :createAdjacentMask:x 4
+  914 op add *tmp225 :createCombinedMask:x 4
   915 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   916 op or :createBlockMaskRow:result 0 *tmp226
   917 label *label385
   918 label *label386
   919 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  920 op add *tmp225 :createCombinedMask:x 3
   921 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   922 op or :createBlockMaskRow:result *tmp224 *tmp226
   923 label *label387
   924 label *label388
   925 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  926 op add *tmp225 :createCombinedMask:x 2
   927 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   928 op or :createBlockMaskRow:result *tmp224 *tmp226
   929 label *label389
   930 label *label390
   931 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+  932 op add *tmp225 :createCombinedMask:x 1
   933 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   934 op or :createBlockMaskRow:result *tmp224 *tmp226
   935 label *label391
   936 label *label392
   937 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+  938 op add *tmp225 :createCombinedMask:x 0
   939 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   940 op or :createBlockMaskRow:result *tmp224 *tmp226
   941 label *label393
   942 label *label394
   943 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+  944 op add *tmp225 :createCombinedMask:x -1
   945 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   946 op or :createBlockMaskRow:result *tmp224 *tmp226
   947 label *label395
   948 label *label396
   949 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+  950 op add *tmp225 :createCombinedMask:x -2
   951 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   952 op or :createBlockMaskRow:result *tmp224 *tmp226
   953 label *label397
   954 label *label398
   955 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+  956 op add *tmp225 :createCombinedMask:x -3
   957 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   958 op or :createBlockMaskRow:result *tmp224 *tmp226
   959 label *label399
   960 label *label400
   961 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+  962 op add *tmp225 :createCombinedMask:x -4
   963 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   964 op or :createBlockMaskRow:result *tmp224 *tmp226
   965 label *label401
   966 label *label402
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   967 jump *label403 always
   968 label *label403
   969 op shl *tmp240 :createAdjacentMask:row1 1
 
   977 set :createAdjacentMask:row2 :createAdjacentMask:row1
   978 set :createAdjacentMask:row1 :createBlockMaskRow:result
   979 label *label222
-    * op sub :createAdjacentMask:r -3 1
   980 label *label223
   981 op add *tmp238 :createCombinedMask:y -4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp238
   982 label *label404
   983 label *label405
   984 label *label406
-    * op add *tmp225 :createAdjacentMask:x 4
+  985 op add *tmp225 :createCombinedMask:x 4
   986 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   987 op or :createBlockMaskRow:result 0 *tmp226
   988 label *label407
   989 label *label408
   990 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 3
+  991 op add *tmp225 :createCombinedMask:x 3
   992 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   993 op or :createBlockMaskRow:result *tmp224 *tmp226
   994 label *label409
   995 label *label410
   996 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 2
+  997 op add *tmp225 :createCombinedMask:x 2
   998 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   999 op or :createBlockMaskRow:result *tmp224 *tmp226
  1000 label *label411
  1001 label *label412
  1002 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 1
+ 1003 op add *tmp225 :createCombinedMask:x 1
  1004 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1005 op or :createBlockMaskRow:result *tmp224 *tmp226
  1006 label *label413
  1007 label *label414
  1008 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x 0
+ 1009 op add *tmp225 :createCombinedMask:x 0
  1010 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1011 op or :createBlockMaskRow:result *tmp224 *tmp226
  1012 label *label415
  1013 label *label416
  1014 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -1
+ 1015 op add *tmp225 :createCombinedMask:x -1
  1016 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1017 op or :createBlockMaskRow:result *tmp224 *tmp226
  1018 label *label417
  1019 label *label418
  1020 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -2
+ 1021 op add *tmp225 :createCombinedMask:x -2
  1022 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1023 op or :createBlockMaskRow:result *tmp224 *tmp226
  1024 label *label419
  1025 label *label420
  1026 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -3
+ 1027 op add *tmp225 :createCombinedMask:x -3
  1028 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1029 op or :createBlockMaskRow:result *tmp224 *tmp226
  1030 label *label421
  1031 label *label422
  1032 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createAdjacentMask:x -4
+ 1033 op add *tmp225 :createCombinedMask:x -4
  1034 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
  1035 op or :createBlockMaskRow:result *tmp224 *tmp226
  1036 label *label423
  1037 label *label424
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1038 jump *label425 always
  1039 label *label425
  1040 op shl *tmp240 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
 
   430 write :createCombinedMask:y processor1 ":createTerrainMask:y"
   431 write false processor1 ":createTerrainMask*finished"
   432 write 1 processor1 "@counter"
-    * set :createAdjacentMask:x :createCombinedMask:x
   433 op add *tmp234 :createCombinedMask:y 4
   434 label *label228
   435 label *label229

Modifications by Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:341:1 (+71 instructions):
 
   326 label *label85
   327 return :findPossiblePlacement*retaddr
   328 end
-    * label *label10
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
-    * set :findPossiblePlacement:width 2
-    * set :findPossiblePlacement:height 4
-    * setaddr :findPossiblePlacement*retaddr *label99 (h:*label99)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label99) (h:*label99)
-    * label *label99
-    * jump *label100 lessThan :findPossiblePlacement*retval 0
-    * jump *label102 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label102
-    * label *label103
-    * op add *tmp185 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp185 :findPossiblePlacement:x
-    * op add *tmp187 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp187 :findPossiblePlacement:y
-    * op add .generatorX *tmp185 :findPossiblePlacement:x
-    * op add *tmp191 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp191 :findPossiblePlacement:y
-    * op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
-    * jump *label101 always
-    * label *label100
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
-    * set :findPossiblePlacement:width 4
-    * set :findPossiblePlacement:height 2
-    * setaddr :findPossiblePlacement*retaddr *label104 (h:*label104)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label104) (h:*label104)
-    * label *label104
-    * jump *label105 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label105
-    * label *label106
-    * op add *tmp197 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp197 :findPossiblePlacement:x
-    * op add *tmp199 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp199 :findPossiblePlacement:y
-    * op add *tmp201 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp201 :findPossiblePlacement:x
-    * op add .generatorY *tmp199 :findPossiblePlacement:y
-    * op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
-    * label *label101
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label107 (h:*label107)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label107) (h:*label107)
-    * label *label107
-    * jump *label108 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label108
-    * label *label109
-    * op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp211 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp211
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label110 (h:*label110)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label110) (h:*label110)
-    * label *label110
-    * jump *label111 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label111
-    * label *label112
-    * op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp217 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp217
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label113 (h:*label113)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label113) (h:*label113)
-    * label *label113
-    * jump *label114 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label114
-    * label *label115
-    * op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * set :tryPlaceGenerator*retval true
-    * jump *label98 always
-    * label *label98
-    * return :tryPlaceGenerator*retaddr
-    * end
   329 label *label12
   330 write @unit processor1 ":createTerrainMask:unit"
   331 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
  1035 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
  1036 set :tryPlaceGenerator:generatorHorizontal 1935
  1037 set :tryPlaceGenerator:generatorVertical 6340995
-    * setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
-    * call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
-    * label *label146
+ 1038 label *label426
+ 1039 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1040 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1041 set :findPossiblePlacement:width 2
+ 1042 set :findPossiblePlacement:height 4
+ 1043 setaddr :findPossiblePlacement*retaddr *label427 (h:*label427)
+ 1044 call *label9 *invalid :findPossiblePlacement*retval (m:*label427) (h:*label427)
+ 1045 label *label427
+ 1046 jump *label430 lessThan :findPossiblePlacement*retval 0
+ 1047 jump *label428 greaterThanEq :findPossiblePlacement*retval 0
+ 1048 set :tryPlaceGenerator*retval false
+ 1049 jump *label444 always
+ 1050 label *label428
+ 1051 label *label429
+ 1052 op add *tmp185 :tryPlaceGenerator:centerX 0.5
+ 1053 op add .water2X *tmp185 :findPossiblePlacement:x
+ 1054 op add *tmp187 :tryPlaceGenerator:centerY 0.5
+ 1055 op add .water2Y *tmp187 :findPossiblePlacement:y
+ 1056 op add .generatorX *tmp185 :findPossiblePlacement:x
+ 1057 op add *tmp191 :tryPlaceGenerator:centerY 2.5
+ 1058 op add .generatorY *tmp191 :findPossiblePlacement:y
+ 1059 op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1060 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
+ 1061 jump *label434 always
+ 1062 label *label430
+ 1063 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1064 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1065 set :findPossiblePlacement:width 4
+ 1066 set :findPossiblePlacement:height 2
+ 1067 setaddr :findPossiblePlacement*retaddr *label431 (h:*label431)
+ 1068 call *label9 *invalid :findPossiblePlacement*retval (m:*label431) (h:*label431)
+ 1069 label *label431
+ 1070 jump *label432 greaterThanEq :findPossiblePlacement*retval 0
+ 1071 set :tryPlaceGenerator*retval false
+ 1072 jump *label444 always
+ 1073 label *label432
+ 1074 label *label433
+ 1075 op add *tmp197 :tryPlaceGenerator:centerX 0.5
+ 1076 op add .water2X *tmp197 :findPossiblePlacement:x
+ 1077 op add *tmp199 :tryPlaceGenerator:centerY 0.5
+ 1078 op add .water2Y *tmp199 :findPossiblePlacement:y
+ 1079 op add *tmp201 :tryPlaceGenerator:centerX 2.5
+ 1080 op add .generatorX *tmp201 :findPossiblePlacement:x
+ 1081 op add .generatorY *tmp199 :findPossiblePlacement:y
+ 1082 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1083 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
+ 1084 label *label434
+ 1085 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1086 set :findPossiblePlacement:placementMask 1
+ 1087 set :findPossiblePlacement:width 1
+ 1088 set :findPossiblePlacement:height 1
+ 1089 setaddr :findPossiblePlacement*retaddr *label435 (h:*label435)
+ 1090 call *label9 *invalid :findPossiblePlacement*retval (m:*label435) (h:*label435)
+ 1091 label *label435
+ 1092 jump *label436 greaterThanEq :findPossiblePlacement*retval 0
+ 1093 set :tryPlaceGenerator*retval false
+ 1094 jump *label444 always
+ 1095 label *label436
+ 1096 label *label437
+ 1097 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1098 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1099 op shl *tmp211 1 :findPossiblePlacement*retval
+ 1100 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp211
+ 1101 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1102 set :findPossiblePlacement:placementMask 1
+ 1103 set :findPossiblePlacement:width 1
+ 1104 set :findPossiblePlacement:height 1
+ 1105 setaddr :findPossiblePlacement*retaddr *label438 (h:*label438)
+ 1106 call *label9 *invalid :findPossiblePlacement*retval (m:*label438) (h:*label438)
+ 1107 label *label438
+ 1108 jump *label439 greaterThanEq :findPossiblePlacement*retval 0
+ 1109 set :tryPlaceGenerator*retval false
+ 1110 jump *label444 always
+ 1111 label *label439
+ 1112 label *label440
+ 1113 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1114 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1115 op shl *tmp217 1 :findPossiblePlacement*retval
+ 1116 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp217
+ 1117 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1118 set :findPossiblePlacement:placementMask 1
+ 1119 set :findPossiblePlacement:width 1
+ 1120 set :findPossiblePlacement:height 1
+ 1121 setaddr :findPossiblePlacement*retaddr *label441 (h:*label441)
+ 1122 call *label9 *invalid :findPossiblePlacement*retval (m:*label441) (h:*label441)
+ 1123 label *label441
+ 1124 jump *label442 greaterThanEq :findPossiblePlacement*retval 0
+ 1125 set :tryPlaceGenerator*retval false
+ 1126 jump *label444 always
+ 1127 label *label442
+ 1128 label *label443
+ 1129 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1130 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1131 set :tryPlaceGenerator*retval true
+ 1132 jump *label444 always
+ 1133 label *label444
  1134 jump *label147 equal :tryPlaceGenerator*retval false
  1135 set :layoutThoriumDrillAtLocation*retval true
  1136 jump *label129 always
 
  1210 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
  1211 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1212 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * setaddr :tryPlaceGenerator*retaddr *label166 (h:*label166)
-    * call *label10 *invalid :tryPlaceGenerator*retval (m:*label166) (h:*label166)
-    * label *label166
+ 1213 label *label445
+ 1214 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1215 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1216 set :findPossiblePlacement:width 2
+ 1217 set :findPossiblePlacement:height 4
+ 1218 setaddr :findPossiblePlacement*retaddr *label446 (h:*label446)
+ 1219 call *label9 *invalid :findPossiblePlacement*retval (m:*label446) (h:*label446)
+ 1220 label *label446
+ 1221 jump *label449 lessThan :findPossiblePlacement*retval 0
+ 1222 jump *label447 greaterThanEq :findPossiblePlacement*retval 0
+ 1223 set :tryPlaceGenerator*retval false
+ 1224 jump *label463 always
+ 1225 label *label447
+ 1226 label *label448
+ 1227 op add *tmp185 :tryPlaceGenerator:centerX 0.5
+ 1228 op add .water2X *tmp185 :findPossiblePlacement:x
+ 1229 op add *tmp187 :tryPlaceGenerator:centerY 0.5
+ 1230 op add .water2Y *tmp187 :findPossiblePlacement:y
+ 1231 op add .generatorX *tmp185 :findPossiblePlacement:x
+ 1232 op add *tmp191 :tryPlaceGenerator:centerY 2.5
+ 1233 op add .generatorY *tmp191 :findPossiblePlacement:y
+ 1234 op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1235 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp193
+ 1236 jump *label453 always
+ 1237 label *label449
+ 1238 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1239 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1240 set :findPossiblePlacement:width 4
+ 1241 set :findPossiblePlacement:height 2
+ 1242 setaddr :findPossiblePlacement*retaddr *label450 (h:*label450)
+ 1243 call *label9 *invalid :findPossiblePlacement*retval (m:*label450) (h:*label450)
+ 1244 label *label450
+ 1245 jump *label451 greaterThanEq :findPossiblePlacement*retval 0
+ 1246 set :tryPlaceGenerator*retval false
+ 1247 jump *label463 always
+ 1248 label *label451
+ 1249 label *label452
+ 1250 op add *tmp197 :tryPlaceGenerator:centerX 0.5
+ 1251 op add .water2X *tmp197 :findPossiblePlacement:x
+ 1252 op add *tmp199 :tryPlaceGenerator:centerY 0.5
+ 1253 op add .water2Y *tmp199 :findPossiblePlacement:y
+ 1254 op add *tmp201 :tryPlaceGenerator:centerX 2.5
+ 1255 op add .generatorX *tmp201 :findPossiblePlacement:x
+ 1256 op add .generatorY *tmp199 :findPossiblePlacement:y
+ 1257 op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1258 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp205
+ 1259 label *label453
+ 1260 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1261 set :findPossiblePlacement:placementMask 1
+ 1262 set :findPossiblePlacement:width 1
+ 1263 set :findPossiblePlacement:height 1
+ 1264 setaddr :findPossiblePlacement*retaddr *label454 (h:*label454)
+ 1265 call *label9 *invalid :findPossiblePlacement*retval (m:*label454) (h:*label454)
+ 1266 label *label454
+ 1267 jump *label455 greaterThanEq :findPossiblePlacement*retval 0
+ 1268 set :tryPlaceGenerator*retval false
+ 1269 jump *label463 always
+ 1270 label *label455
+ 1271 label *label456
+ 1272 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1273 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1274 op shl *tmp211 1 :findPossiblePlacement*retval
+ 1275 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp211
+ 1276 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1277 set :findPossiblePlacement:placementMask 1
+ 1278 set :findPossiblePlacement:width 1
+ 1279 set :findPossiblePlacement:height 1
+ 1280 setaddr :findPossiblePlacement*retaddr *label457 (h:*label457)
+ 1281 call *label9 *invalid :findPossiblePlacement*retval (m:*label457) (h:*label457)
+ 1282 label *label457
+ 1283 jump *label458 greaterThanEq :findPossiblePlacement*retval 0
+ 1284 set :tryPlaceGenerator*retval false
+ 1285 jump *label463 always
+ 1286 label *label458
+ 1287 label *label459
+ 1288 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1289 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1290 op shl *tmp217 1 :findPossiblePlacement*retval
+ 1291 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp217
+ 1292 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1293 set :findPossiblePlacement:placementMask 1
+ 1294 set :findPossiblePlacement:width 1
+ 1295 set :findPossiblePlacement:height 1
+ 1296 setaddr :findPossiblePlacement*retaddr *label460 (h:*label460)
+ 1297 call *label9 *invalid :findPossiblePlacement*retval (m:*label460) (h:*label460)
+ 1298 label *label460
+ 1299 jump *label461 greaterThanEq :findPossiblePlacement*retval 0
+ 1300 set :tryPlaceGenerator*retval false
+ 1301 jump *label463 always
+ 1302 label *label461
+ 1303 label *label462
+ 1304 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1305 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1306 set :tryPlaceGenerator*retval true
+ 1307 jump *label463 always
+ 1308 label *label463
  1309 jump *label167 equal :tryPlaceGenerator*retval false
  1310 set :layoutThoriumDrillAtLocation*retval true
  1311 jump *label129 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1036 set :tryPlaceGenerator:generatorHorizontal 1935
  1037 set :tryPlaceGenerator:generatorVertical 6340995
  1038 label *label426
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1039 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
+ 1040 set :findPossiblePlacement:placementMask 6340995
  1041 set :findPossiblePlacement:width 2
  1042 set :findPossiblePlacement:height 4
  1043 setaddr :findPossiblePlacement*retaddr *label427 (h:*label427)
 
  1211 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1212 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
  1213 label *label445
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1214 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
+ 1215 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
  1216 set :findPossiblePlacement:width 2
  1217 set :findPossiblePlacement:height 4
  1218 setaddr :findPossiblePlacement*retaddr *label446 (h:*label446)

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-15 instructions):
 
   142 jump *label178 lessThan :visited:i *tmp84
   143 label *label49
   144 set *tmp83 false
-    * jump *label46 always
   145 label *label46
   146 jump *label52 notEqual *tmp83 false
   147 op div *tmp99 2 .angle
 
   160 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   161 label *label29
   162 set *tmp37 false
-    * jump *label26 always
   163 label *label26
   164 set :findDrillLocationLocal:oreX :locateOreAway:x
   165 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   320 jump *label179 lessThanEq :findPossiblePlacement:y 3
   321 label *label88
   322 set :findPossiblePlacement*retval -1
-    * jump *label85 always
   323 label *label85
   324 return :findPossiblePlacement*retaddr
   325 end
 
   386 op or :createBlockMaskRow:result *tmp224 *tmp226
   387 label *label247
   388 label *label248
-    * jump *label249 always
   389 label *label249
   390 set :createAdjacentMask:row2 :createBlockMaskRow:result
   391 op add *tmp236 :createCombinedMask:y 3
 
   445 op or :createBlockMaskRow:result *tmp224 *tmp226
   446 label *label269
   447 label *label270
-    * jump *label271 always
   448 label *label271
   449 set :createAdjacentMask:row1 :createBlockMaskRow:result
   450 label *label204
 
   506 op or :createBlockMaskRow:result *tmp224 *tmp226
   507 label *label291
   508 label *label292
-    * jump *label293 always
   509 label *label293
   510 op shl *tmp240 :createAdjacentMask:row1 1
   511 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   575 op or :createBlockMaskRow:result *tmp224 *tmp226
   576 label *label313
   577 label *label314
-    * jump *label315 always
   578 label *label315
   579 op shl *tmp240 :createAdjacentMask:row1 1
   580 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   645 op or :createBlockMaskRow:result *tmp224 *tmp226
   646 label *label335
   647 label *label336
-    * jump *label337 always
   648 label *label337
   649 op shl *tmp240 :createAdjacentMask:row1 1
   650 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   715 op or :createBlockMaskRow:result *tmp224 *tmp226
   716 label *label357
   717 label *label358
-    * jump *label359 always
   718 label *label359
   719 op shl *tmp240 :createAdjacentMask:row1 1
   720 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   785 op or :createBlockMaskRow:result *tmp224 *tmp226
   786 label *label379
   787 label *label380
-    * jump *label381 always
   788 label *label381
   789 op shl *tmp240 :createAdjacentMask:row1 1
   790 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   855 op or :createBlockMaskRow:result *tmp224 *tmp226
   856 label *label401
   857 label *label402
-    * jump *label403 always
   858 label *label403
   859 op shl *tmp240 :createAdjacentMask:row1 1
   860 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   925 op or :createBlockMaskRow:result *tmp224 *tmp226
   926 label *label423
   927 label *label424
-    * jump *label425 always
   928 label *label425
   929 op shl *tmp240 :createAdjacentMask:row1 1
   930 op or *tmp241 :createAdjacentMask:row2 *tmp240
 
   945 jump *label128 equal *tmp249 false
   946 read .terrainMask processor1 ":createTerrainMask*retval"
   947 op or :createCombinedMask*retval *tmp233 .terrainMask
-    * jump *label120 always
   948 label *label120
   949 return :createCombinedMask*retaddr
   950 end
 
  1187 label *label162
  1188 label *label163
  1189 set *tmp325 :shiftMask:mask
-    * jump *label157 always
  1190 label *label157
  1191 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp325
  1192 op sub *tmp350 .drillX :layoutThoriumDrillAtLocation:sx
 
  1302 multilabel *label155 (m:marker0)
  1303 label *label151
  1304 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
  1305 label *label129
  1306 return :layoutThoriumDrillAtLocation*retaddr
  1307 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   335 label *label230
   336 op add *tmp225 :createCombinedMask:x 4
   337 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  338 set :createBlockMaskRow:result *tmp226
   339 label *label231
   340 label *label232
   341 op shl *tmp224 :createBlockMaskRow:result 1
 
   357 label *label237
   358 label *label238
   359 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  360 set *tmp225 :createCombinedMask:x
   361 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   362 op or :createBlockMaskRow:result *tmp224 *tmp226
   363 label *label239
 
   394 label *label252
   395 op add *tmp225 :createCombinedMask:x 4
   396 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  397 set :createBlockMaskRow:result *tmp226
   398 label *label253
   399 label *label254
   400 op shl *tmp224 :createBlockMaskRow:result 1
 
   416 label *label259
   417 label *label260
   418 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  419 set *tmp225 :createCombinedMask:x
   420 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   421 op or :createBlockMaskRow:result *tmp224 *tmp226
   422 label *label261
 
   455 label *label274
   456 op add *tmp225 :createCombinedMask:x 4
   457 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  458 set :createBlockMaskRow:result *tmp226
   459 label *label275
   460 label *label276
   461 op shl *tmp224 :createBlockMaskRow:result 1
 
   477 label *label281
   478 label *label282
   479 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  480 set *tmp225 :createCombinedMask:x
   481 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   482 op or :createBlockMaskRow:result *tmp224 *tmp226
   483 label *label283
 
   513 op or *tmp243 *tmp241 *tmp242
   514 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
   515 op and *tmp246 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp246
+  516 set :createAdjacentMask:result *tmp246
   517 set :createAdjacentMask:row2 :createAdjacentMask:row1
   518 set :createAdjacentMask:row1 :createBlockMaskRow:result
   519 label *label207
 
   524 label *label296
   525 op add *tmp225 :createCombinedMask:x 4
   526 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  527 set :createBlockMaskRow:result *tmp226
   528 label *label297
   529 label *label298
   530 op shl *tmp224 :createBlockMaskRow:result 1
 
   546 label *label303
   547 label *label304
   548 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  549 set *tmp225 :createCombinedMask:x
   550 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   551 op or :createBlockMaskRow:result *tmp224 *tmp226
   552 label *label305
 
   588 set :createAdjacentMask:row1 :createBlockMaskRow:result
   589 label *label210
   590 label *label211
-    * op add *tmp238 :createCombinedMask:y 0
+  591 set *tmp238 :createCombinedMask:y
   592 label *label316
   593 label *label317
   594 label *label318
   595 op add *tmp225 :createCombinedMask:x 4
   596 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  597 set :createBlockMaskRow:result *tmp226
   598 label *label319
   599 label *label320
   600 op shl *tmp224 :createBlockMaskRow:result 1
 
   616 label *label325
   617 label *label326
   618 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  619 set *tmp225 :createCombinedMask:x
   620 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   621 op or :createBlockMaskRow:result *tmp224 *tmp226
   622 label *label327
 
   664 label *label340
   665 op add *tmp225 :createCombinedMask:x 4
   666 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  667 set :createBlockMaskRow:result *tmp226
   668 label *label341
   669 label *label342
   670 op shl *tmp224 :createBlockMaskRow:result 1
 
   686 label *label347
   687 label *label348
   688 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  689 set *tmp225 :createCombinedMask:x
   690 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   691 op or :createBlockMaskRow:result *tmp224 *tmp226
   692 label *label349
 
   734 label *label362
   735 op add *tmp225 :createCombinedMask:x 4
   736 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  737 set :createBlockMaskRow:result *tmp226
   738 label *label363
   739 label *label364
   740 op shl *tmp224 :createBlockMaskRow:result 1
 
   756 label *label369
   757 label *label370
   758 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  759 set *tmp225 :createCombinedMask:x
   760 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   761 op or :createBlockMaskRow:result *tmp224 *tmp226
   762 label *label371
 
   804 label *label384
   805 op add *tmp225 :createCombinedMask:x 4
   806 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  807 set :createBlockMaskRow:result *tmp226
   808 label *label385
   809 label *label386
   810 op shl *tmp224 :createBlockMaskRow:result 1
 
   826 label *label391
   827 label *label392
   828 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  829 set *tmp225 :createCombinedMask:x
   830 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   831 op or :createBlockMaskRow:result *tmp224 *tmp226
   832 label *label393
 
   874 label *label406
   875 op add *tmp225 :createCombinedMask:x 4
   876 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * op or :createBlockMaskRow:result 0 *tmp226
+  877 set :createBlockMaskRow:result *tmp226
   878 label *label407
   879 label *label408
   880 op shl *tmp224 :createBlockMaskRow:result 1
 
   896 label *label413
   897 label *label414
   898 op shl *tmp224 :createBlockMaskRow:result 1
-    * op add *tmp225 :createCombinedMask:x 0
+  899 set *tmp225 :createCombinedMask:x
   900 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   901 op or :createBlockMaskRow:result *tmp224 *tmp226
   902 label *label415

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-12 instructions):
 
   334 label *label229
   335 label *label230
   336 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  337 ucontrol getBlock *tmp225 *tmp234 0 :createBlockMaskRow:result 0
   338 label *label231
   339 label *label232
   340 op shl *tmp224 :createBlockMaskRow:result 1
 
   382 op shl *tmp224 :createBlockMaskRow:result 1
   383 op add *tmp225 :createCombinedMask:x -4
   384 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
+  385 op or :createAdjacentMask:row2 *tmp224 *tmp226
   386 label *label247
   387 label *label248
   388 label *label249
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   389 op add *tmp236 :createCombinedMask:y 3
   390 label *label250
   391 label *label251
   392 label *label252
   393 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  394 ucontrol getBlock *tmp225 *tmp236 0 :createBlockMaskRow:result 0
   395 label *label253
   396 label *label254
   397 op shl *tmp224 :createBlockMaskRow:result 1
 
   439 op shl *tmp224 :createBlockMaskRow:result 1
   440 op add *tmp225 :createCombinedMask:x -4
   441 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
-    * op or :createBlockMaskRow:result *tmp224 *tmp226
+  442 op or :createAdjacentMask:row1 *tmp224 *tmp226
   443 label *label269
   444 label *label270
   445 label *label271
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   446 label *label204
   447 label *label205
   448 op add *tmp238 :createCombinedMask:y 2
 
   450 label *label273
   451 label *label274
   452 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  453 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   454 label *label275
   455 label *label276
   456 op shl *tmp224 :createBlockMaskRow:result 1
 
   507 op shr *tmp242 :createAdjacentMask:row1 1
   508 op or *tmp243 *tmp241 *tmp242
   509 op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:result
-    * op and *tmp246 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp246
+  510 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   511 set :createAdjacentMask:row2 :createAdjacentMask:row1
   512 set :createAdjacentMask:row1 :createBlockMaskRow:result
   513 label *label207
 
   517 label *label295
   518 label *label296
   519 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  520 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   521 label *label297
   522 label *label298
   523 op shl *tmp224 :createBlockMaskRow:result 1
 
   586 label *label317
   587 label *label318
   588 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  589 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   590 label *label319
   591 label *label320
   592 op shl *tmp224 :createBlockMaskRow:result 1
 
   655 label *label339
   656 label *label340
   657 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  658 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   659 label *label341
   660 label *label342
   661 op shl *tmp224 :createBlockMaskRow:result 1
 
   724 label *label361
   725 label *label362
   726 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  727 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   728 label *label363
   729 label *label364
   730 op shl *tmp224 :createBlockMaskRow:result 1
 
   793 label *label383
   794 label *label384
   795 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  796 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   797 label *label385
   798 label *label386
   799 op shl *tmp224 :createBlockMaskRow:result 1
 
   862 label *label405
   863 label *label406
   864 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
-    * set :createBlockMaskRow:result *tmp226
+  865 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
   866 label *label407
   867 label *label408
   868 op shl *tmp224 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   357 label *label238
   358 op shl *tmp224 :createBlockMaskRow:result 1
   359 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
+  360 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp226 0
   361 op or :createBlockMaskRow:result *tmp224 *tmp226
   362 label *label239
   363 label *label240
 
   414 label *label260
   415 op shl *tmp224 :createBlockMaskRow:result 1
   416 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
+  417 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp226 0
   418 op or :createBlockMaskRow:result *tmp224 *tmp226
   419 label *label261
   420 label *label262
 
   473 label *label282
   474 op shl *tmp224 :createBlockMaskRow:result 1
   475 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  476 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   477 op or :createBlockMaskRow:result *tmp224 *tmp226
   478 label *label283
   479 label *label284
 
   540 label *label304
   541 op shl *tmp224 :createBlockMaskRow:result 1
   542 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  543 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   544 op or :createBlockMaskRow:result *tmp224 *tmp226
   545 label *label305
   546 label *label306
 
   586 label *label317
   587 label *label318
   588 op add *tmp225 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
+  589 ucontrol getBlock *tmp225 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   590 label *label319
   591 label *label320
   592 op shl *tmp224 :createBlockMaskRow:result 1
   593 op add *tmp225 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  594 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   595 op or :createBlockMaskRow:result *tmp224 *tmp226
   596 label *label321
   597 label *label322
   598 op shl *tmp224 :createBlockMaskRow:result 1
   599 op add *tmp225 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  600 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   601 op or :createBlockMaskRow:result *tmp224 *tmp226
   602 label *label323
   603 label *label324
   604 op shl *tmp224 :createBlockMaskRow:result 1
   605 op add *tmp225 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  606 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   607 op or :createBlockMaskRow:result *tmp224 *tmp226
   608 label *label325
   609 label *label326
   610 op shl *tmp224 :createBlockMaskRow:result 1
   611 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  612 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp226 0
   613 op or :createBlockMaskRow:result *tmp224 *tmp226
   614 label *label327
   615 label *label328
   616 op shl *tmp224 :createBlockMaskRow:result 1
   617 op add *tmp225 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  618 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   619 op or :createBlockMaskRow:result *tmp224 *tmp226
   620 label *label329
   621 label *label330
   622 op shl *tmp224 :createBlockMaskRow:result 1
   623 op add *tmp225 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  624 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   625 op or :createBlockMaskRow:result *tmp224 *tmp226
   626 label *label331
   627 label *label332
   628 op shl *tmp224 :createBlockMaskRow:result 1
   629 op add *tmp225 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  630 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   631 op or :createBlockMaskRow:result *tmp224 *tmp226
   632 label *label333
   633 label *label334
   634 op shl *tmp224 :createBlockMaskRow:result 1
   635 op add *tmp225 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  636 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   637 op or :createBlockMaskRow:result *tmp224 *tmp226
   638 label *label335
   639 label *label336
 
   678 label *label348
   679 op shl *tmp224 :createBlockMaskRow:result 1
   680 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  681 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   682 op or :createBlockMaskRow:result *tmp224 *tmp226
   683 label *label349
   684 label *label350
 
   747 label *label370
   748 op shl *tmp224 :createBlockMaskRow:result 1
   749 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  750 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   751 op or :createBlockMaskRow:result *tmp224 *tmp226
   752 label *label371
   753 label *label372
 
   816 label *label392
   817 op shl *tmp224 :createBlockMaskRow:result 1
   818 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  819 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   820 op or :createBlockMaskRow:result *tmp224 *tmp226
   821 label *label393
   822 label *label394
 
   885 label *label414
   886 op shl *tmp224 :createBlockMaskRow:result 1
   887 set *tmp225 :createCombinedMask:x
-    * ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
+  888 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   889 op or :createBlockMaskRow:result *tmp224 *tmp226
   890 label *label415
   891 label *label416

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-10 instructions):
 
   356 label *label237
   357 label *label238
   358 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   359 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp226 0
   360 op or :createBlockMaskRow:result *tmp224 *tmp226
   361 label *label239
 
   412 label *label259
   413 label *label260
   414 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   415 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp226 0
   416 op or :createBlockMaskRow:result *tmp224 *tmp226
   417 label *label261
 
   470 label *label281
   471 label *label282
   472 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   473 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   474 op or :createBlockMaskRow:result *tmp224 *tmp226
   475 label *label283
 
   536 label *label303
   537 label *label304
   538 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   539 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   540 op or :createBlockMaskRow:result *tmp224 *tmp226
   541 label *label305
 
   577 set :createAdjacentMask:row1 :createBlockMaskRow:result
   578 label *label210
   579 label *label211
-    * set *tmp238 :createCombinedMask:y
   580 label *label316
   581 label *label317
   582 label *label318
 
   603 label *label325
   604 label *label326
   605 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   606 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp226 0
   607 op or :createBlockMaskRow:result *tmp224 *tmp226
   608 label *label327
 
   671 label *label347
   672 label *label348
   673 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   674 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   675 op or :createBlockMaskRow:result *tmp224 *tmp226
   676 label *label349
 
   739 label *label369
   740 label *label370
   741 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   742 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   743 op or :createBlockMaskRow:result *tmp224 *tmp226
   744 label *label371
 
   807 label *label391
   808 label *label392
   809 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   810 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   811 op or :createBlockMaskRow:result *tmp224 *tmp226
   812 label *label393
 
   875 label *label413
   876 label *label414
   877 op shl *tmp224 :createBlockMaskRow:result 1
-    * set *tmp225 :createCombinedMask:x
   878 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   879 op or :createBlockMaskRow:result *tmp224 *tmp226
   880 label *label415

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * label *label20
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    35 jump *label22 notEqual *tmp27 false
    36 label *label226
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label21
    38 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    39 jump *label226 equal *tmp27 false
    40 label *label22
-    * label *label19
-    * label *label18
    41 op div *tmp30 *tmp24 3.8197185279121366
    42 op pow .mapTotal *tmp30 2
    43 set :findDrillLocationLocal:oreX 0
 
    60 op mul .mapProgress .angle .angle
    61 op sub *tmp46 @mapw 5
    62 op sub *tmp53 @maph 5
-    * label *label27
    63 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    64 label *label177
    65 op div :locateOreAway:a .angle @degToRad
 
    68 op add *tmp45 :findDrillLocationLocal:x *tmp44
    69 op max *tmp48 *tmp45 5
    70 op min *tmp47 *tmp48 *tmp46
-    * label *label30
    71 op cos *tmp50 :locateOreAway:a
    72 op mul *tmp51 *tmp50 :locateOreAway:distance
    73 op add *tmp52 :findDrillLocationLocal:y *tmp51
    74 op max *tmp55 *tmp52 5
    75 op min *tmp54 *tmp55 *tmp53
-    * label *label31
-    * label *label33
    76 ucontrol within *tmp47 *tmp54 5 *tmp57
    77 jump *label35 notEqual *tmp57 false
    78 label *label183
    79 ucontrol approach *tmp47 *tmp54 4.5
-    * label *label34
    80 ucontrol within *tmp47 *tmp54 5 *tmp57
    81 jump *label183 equal *tmp57 false
    82 label *label35
-    * label *label32
    83 op div *tmp60 3.8197185279121366 :locateOreAway:distance
    84 op add .angle .angle *tmp60
    85 op mul .mapProgress .angle .angle
 
    89 set *tmp37 false
    90 jump *label26 always
    91 label *label36
-    * label *label37
    92 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
    93 op abs *tmp68 *tmp67
    94 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
 
   101 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   102 jump *label28 always
   103 label *label40
-    * label *label41
   104 label *label38
-    * label *label39
   105 jump *label42 lessThan :locateOreAway:coreDist 7
   106 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   107 set :locateOreAway:lastX :locateOreAway:x
   108 set :locateOreAway:lastY :locateOreAway:y
   109 set *tmp84 .locations
   110 set :visited:i .locationsStart
-    * label *label47
   111 jump *label49 greaterThanEq .locationsStart *tmp84
   112 label *label178
   113 op mul :visited:index 4 :visited:i
 
   122 set *tmp83 true
   123 jump *label46 always
   124 label *label50
-    * label *label51
-    * label *label48
   125 op add :visited:i :visited:i 1
   126 jump *label178 lessThan :visited:i *tmp84
   127 label *label49
 
   135 set *tmp37 true
   136 jump *label26 always
   137 label *label52
-    * label *label53
   138 label *label44
-    * label *label45
   139 label *label42
-    * label *label43
   140 label *label28
   141 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   142 label *label29
 
   148 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   149 jump *label17 always
   150 label *label54
-    * label *label55
   151 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   152 op add .mapSpots .mapSpots 1
   153 label *label56
-    * label *label57
-    * label *label60
   154 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   155 jump *label62 notEqual *tmp109 false
   156 label *label203
   157 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label61
   158 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   159 jump *label203 equal *tmp109 false
   160 label *label62
-    * label *label59
-    * label *label58
   161 set :findDrillLocationLocal:last 0
   162 label *label63
   163 write @unit processor1 ":findBestPosition:unit"
 
   181 jump *label69 greaterThanEq :findDrillLocationLocal:limit 1000
   182 set .mapSpots :findDrillLocationLocal:score
   183 label *label69
-    * label *label70
   184 jump *label71 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   185 op add .count .count 1
   186 sensor *tmp124 :findDrillLocationLocal:item @id
 
   192 op add .count .count 1
   193 write :findDrillLocationLocal:dy bank1 .count
   194 op add .locations .locations 1
-    * label *label73
   195 ucontrol unbind
   196 set :findDrillLocationLocal*retval true
   197 jump *label17 always
   198 label *label71
-    * label *label72
   199 label *label67
-    * label *label68
   200 jump *label74 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   201 op add :findDrillLocationLocal:bestX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   202 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   203 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   204 label *label74
-    * label *label75
   205 jump *label76 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   206 jump *label65 always
   207 label *label76
-    * label *label77
   208 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   209 op mul :round:x :findDrillLocationLocal:diffX 1.1
   210 op add *tmp140 :round:x 0.5
   211 op floor *tmp139 *tmp140
-    * label *label78
   212 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp139
   213 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   214 op add *tmp144 :round.1:x 0.5
   215 op floor *tmp143 *tmp144
-    * label *label79
   216 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp143
   217 op sub *tmp146 :findDrillLocationLocal:oreX :findDrillLocationLocal:x
   218 op abs *tmp147 *tmp146
 
   222 jump *label80 greaterThanEq *tmp150 7
   223 jump *label65 always
   224 label *label80
-    * label *label81
-    * label *label64
   225 jump *label63 always
   226 label *label65
   227 jump *label82 lessThan :findDrillLocationLocal:best 0
 
   235 op add .count .count 1
   236 write :findDrillLocationLocal:bestY bank1 .count
   237 op add .locations .locations 1
-    * label *label84
   238 label *label82
-    * label *label83
-    * label *label24
   239 jump *label23 always
-    * label *label25
   240 set :findDrillLocationLocal*retval null
   241 label *label17
   242 return :findDrillLocationLocal*retaddr
   243 end
   244 label *label9
   245 set :findPossiblePlacement:y -3
-    * label *label86
   246 jump *label88 greaterThan :findPossiblePlacement:y 3
   247 label *label179
   248 op add *tmp165 :findPossiblePlacement:y 3
   249 op mul *tmp166 7 *tmp165
   250 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp166
   251 set :findPossiblePlacement:x -3
-    * label *label89
   252 jump *label91 greaterThan :findPossiblePlacement:x 3
   253 label *label180
   254 op and *tmp168 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   258 op add :findPossiblePlacement*retval *tmp172 :findPossiblePlacement:x
   259 jump *label85 always
   260 label *label92
-    * label *label93
   261 op sub *tmp174 3 :findPossiblePlacement:width
   262 jump *label94 lessThanEq :findPossiblePlacement:x *tmp174
   263 jump *label91 always
   264 label *label94
-    * label *label95
   265 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label90
   266 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   267 jump *label180 lessThanEq :findPossiblePlacement:x 3
   268 label *label91
 
   270 jump *label96 lessThanEq :findPossiblePlacement:y *tmp177
   271 jump *label88 always
   272 label *label96
-    * label *label97
-    * label *label87
   273 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   274 jump *label179 lessThanEq :findPossiblePlacement:y 3
   275 label *label88
 
   284 write false processor1 ":createTerrainMask*finished"
   285 write 1 processor1 "@counter"
   286 op add *tmp234 :createCombinedMask:y 4
-    * label *label228
-    * label *label229
-    * label *label230
   287 op add *tmp225 :createCombinedMask:x 4
   288 ucontrol getBlock *tmp225 *tmp234 0 :createBlockMaskRow:result 0
-    * label *label231
-    * label *label232
   289 op shl *tmp224 :createBlockMaskRow:result 1
   290 op add *tmp225 :createCombinedMask:x 3
   291 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   292 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label233
-    * label *label234
   293 op shl *tmp224 :createBlockMaskRow:result 1
   294 op add *tmp225 :createCombinedMask:x 2
   295 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   296 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label235
-    * label *label236
   297 op shl *tmp224 :createBlockMaskRow:result 1
   298 op add *tmp225 :createCombinedMask:x 1
   299 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   300 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label237
-    * label *label238
   301 op shl *tmp224 :createBlockMaskRow:result 1
   302 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp226 0
   303 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label239
-    * label *label240
   304 op shl *tmp224 :createBlockMaskRow:result 1
   305 op add *tmp225 :createCombinedMask:x -1
   306 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   307 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label241
-    * label *label242
   308 op shl *tmp224 :createBlockMaskRow:result 1
   309 op add *tmp225 :createCombinedMask:x -2
   310 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   311 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label243
-    * label *label244
   312 op shl *tmp224 :createBlockMaskRow:result 1
   313 op add *tmp225 :createCombinedMask:x -3
   314 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   315 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label245
-    * label *label246
   316 op shl *tmp224 :createBlockMaskRow:result 1
   317 op add *tmp225 :createCombinedMask:x -4
   318 ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0
   319 op or :createAdjacentMask:row2 *tmp224 *tmp226
-    * label *label247
-    * label *label248
-    * label *label249
   320 op add *tmp236 :createCombinedMask:y 3
-    * label *label250
-    * label *label251
-    * label *label252
   321 op add *tmp225 :createCombinedMask:x 4
   322 ucontrol getBlock *tmp225 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label253
-    * label *label254
   323 op shl *tmp224 :createBlockMaskRow:result 1
   324 op add *tmp225 :createCombinedMask:x 3
   325 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   326 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label255
-    * label *label256
   327 op shl *tmp224 :createBlockMaskRow:result 1
   328 op add *tmp225 :createCombinedMask:x 2
   329 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   330 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label257
-    * label *label258
   331 op shl *tmp224 :createBlockMaskRow:result 1
   332 op add *tmp225 :createCombinedMask:x 1
   333 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   334 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label259
-    * label *label260
   335 op shl *tmp224 :createBlockMaskRow:result 1
   336 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp226 0
   337 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label261
-    * label *label262
   338 op shl *tmp224 :createBlockMaskRow:result 1
   339 op add *tmp225 :createCombinedMask:x -1
   340 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   341 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label263
-    * label *label264
   342 op shl *tmp224 :createBlockMaskRow:result 1
   343 op add *tmp225 :createCombinedMask:x -2
   344 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   345 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label265
-    * label *label266
   346 op shl *tmp224 :createBlockMaskRow:result 1
   347 op add *tmp225 :createCombinedMask:x -3
   348 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   349 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label267
-    * label *label268
   350 op shl *tmp224 :createBlockMaskRow:result 1
   351 op add *tmp225 :createCombinedMask:x -4
   352 ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0
   353 op or :createAdjacentMask:row1 *tmp224 *tmp226
-    * label *label269
-    * label *label270
-    * label *label271
-    * label *label204
-    * label *label205
   354 op add *tmp238 :createCombinedMask:y 2
-    * label *label272
-    * label *label273
-    * label *label274
   355 op add *tmp225 :createCombinedMask:x 4
   356 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label275
-    * label *label276
   357 op shl *tmp224 :createBlockMaskRow:result 1
   358 op add *tmp225 :createCombinedMask:x 3
   359 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   360 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label277
-    * label *label278
   361 op shl *tmp224 :createBlockMaskRow:result 1
   362 op add *tmp225 :createCombinedMask:x 2
   363 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   364 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label279
-    * label *label280
   365 op shl *tmp224 :createBlockMaskRow:result 1
   366 op add *tmp225 :createCombinedMask:x 1
   367 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   368 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label281
-    * label *label282
   369 op shl *tmp224 :createBlockMaskRow:result 1
   370 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   371 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label283
-    * label *label284
   372 op shl *tmp224 :createBlockMaskRow:result 1
   373 op add *tmp225 :createCombinedMask:x -1
   374 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   375 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label285
-    * label *label286
   376 op shl *tmp224 :createBlockMaskRow:result 1
   377 op add *tmp225 :createCombinedMask:x -2
   378 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   379 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label287
-    * label *label288
   380 op shl *tmp224 :createBlockMaskRow:result 1
   381 op add *tmp225 :createCombinedMask:x -3
   382 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   383 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label289
-    * label *label290
   384 op shl *tmp224 :createBlockMaskRow:result 1
   385 op add *tmp225 :createCombinedMask:x -4
   386 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   387 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label291
-    * label *label292
-    * label *label293
   388 op shl *tmp240 :createAdjacentMask:row1 1
   389 op or *tmp241 :createAdjacentMask:row2 *tmp240
   390 op shr *tmp242 :createAdjacentMask:row1 1
 
   393 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   394 set :createAdjacentMask:row2 :createAdjacentMask:row1
   395 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label207
-    * label *label208
   396 op add *tmp238 :createCombinedMask:y 1
-    * label *label294
-    * label *label295
-    * label *label296
   397 op add *tmp225 :createCombinedMask:x 4
   398 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label297
-    * label *label298
   399 op shl *tmp224 :createBlockMaskRow:result 1
   400 op add *tmp225 :createCombinedMask:x 3
   401 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   402 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label299
-    * label *label300
   403 op shl *tmp224 :createBlockMaskRow:result 1
   404 op add *tmp225 :createCombinedMask:x 2
   405 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   406 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label301
-    * label *label302
   407 op shl *tmp224 :createBlockMaskRow:result 1
   408 op add *tmp225 :createCombinedMask:x 1
   409 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   410 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label303
-    * label *label304
   411 op shl *tmp224 :createBlockMaskRow:result 1
   412 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   413 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label305
-    * label *label306
   414 op shl *tmp224 :createBlockMaskRow:result 1
   415 op add *tmp225 :createCombinedMask:x -1
   416 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   417 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label307
-    * label *label308
   418 op shl *tmp224 :createBlockMaskRow:result 1
   419 op add *tmp225 :createCombinedMask:x -2
   420 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   421 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label309
-    * label *label310
   422 op shl *tmp224 :createBlockMaskRow:result 1
   423 op add *tmp225 :createCombinedMask:x -3
   424 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   425 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label311
-    * label *label312
   426 op shl *tmp224 :createBlockMaskRow:result 1
   427 op add *tmp225 :createCombinedMask:x -4
   428 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   429 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label313
-    * label *label314
-    * label *label315
   430 op shl *tmp240 :createAdjacentMask:row1 1
   431 op or *tmp241 :createAdjacentMask:row2 *tmp240
   432 op shr *tmp242 :createAdjacentMask:row1 1
 
   437 op or :createAdjacentMask:result *tmp245 *tmp246
   438 set :createAdjacentMask:row2 :createAdjacentMask:row1
   439 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label210
-    * label *label211
-    * label *label316
-    * label *label317
-    * label *label318
   440 op add *tmp225 :createCombinedMask:x 4
   441 ucontrol getBlock *tmp225 :createCombinedMask:y 0 :createBlockMaskRow:result 0
-    * label *label319
-    * label *label320
   442 op shl *tmp224 :createBlockMaskRow:result 1
   443 op add *tmp225 :createCombinedMask:x 3
   444 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   445 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label321
-    * label *label322
   446 op shl *tmp224 :createBlockMaskRow:result 1
   447 op add *tmp225 :createCombinedMask:x 2
   448 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   449 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label323
-    * label *label324
   450 op shl *tmp224 :createBlockMaskRow:result 1
   451 op add *tmp225 :createCombinedMask:x 1
   452 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   453 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label325
-    * label *label326
   454 op shl *tmp224 :createBlockMaskRow:result 1
   455 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp226 0
   456 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label327
-    * label *label328
   457 op shl *tmp224 :createBlockMaskRow:result 1
   458 op add *tmp225 :createCombinedMask:x -1
   459 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   460 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label329
-    * label *label330
   461 op shl *tmp224 :createBlockMaskRow:result 1
   462 op add *tmp225 :createCombinedMask:x -2
   463 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   464 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label331
-    * label *label332
   465 op shl *tmp224 :createBlockMaskRow:result 1
   466 op add *tmp225 :createCombinedMask:x -3
   467 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   468 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label333
-    * label *label334
   469 op shl *tmp224 :createBlockMaskRow:result 1
   470 op add *tmp225 :createCombinedMask:x -4
   471 ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0
   472 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label335
-    * label *label336
-    * label *label337
   473 op shl *tmp240 :createAdjacentMask:row1 1
   474 op or *tmp241 :createAdjacentMask:row2 *tmp240
   475 op shr *tmp242 :createAdjacentMask:row1 1
 
   480 op or :createAdjacentMask:result *tmp245 *tmp246
   481 set :createAdjacentMask:row2 :createAdjacentMask:row1
   482 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label213
-    * label *label214
   483 op add *tmp238 :createCombinedMask:y -1
-    * label *label338
-    * label *label339
-    * label *label340
   484 op add *tmp225 :createCombinedMask:x 4
   485 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label341
-    * label *label342
   486 op shl *tmp224 :createBlockMaskRow:result 1
   487 op add *tmp225 :createCombinedMask:x 3
   488 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   489 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label343
-    * label *label344
   490 op shl *tmp224 :createBlockMaskRow:result 1
   491 op add *tmp225 :createCombinedMask:x 2
   492 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   493 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label345
-    * label *label346
   494 op shl *tmp224 :createBlockMaskRow:result 1
   495 op add *tmp225 :createCombinedMask:x 1
   496 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   497 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label347
-    * label *label348
   498 op shl *tmp224 :createBlockMaskRow:result 1
   499 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   500 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label349
-    * label *label350
   501 op shl *tmp224 :createBlockMaskRow:result 1
   502 op add *tmp225 :createCombinedMask:x -1
   503 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   504 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label351
-    * label *label352
   505 op shl *tmp224 :createBlockMaskRow:result 1
   506 op add *tmp225 :createCombinedMask:x -2
   507 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   508 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label353
-    * label *label354
   509 op shl *tmp224 :createBlockMaskRow:result 1
   510 op add *tmp225 :createCombinedMask:x -3
   511 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   512 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label355
-    * label *label356
   513 op shl *tmp224 :createBlockMaskRow:result 1
   514 op add *tmp225 :createCombinedMask:x -4
   515 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   516 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label357
-    * label *label358
-    * label *label359
   517 op shl *tmp240 :createAdjacentMask:row1 1
   518 op or *tmp241 :createAdjacentMask:row2 *tmp240
   519 op shr *tmp242 :createAdjacentMask:row1 1
 
   524 op or :createAdjacentMask:result *tmp245 *tmp246
   525 set :createAdjacentMask:row2 :createAdjacentMask:row1
   526 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label216
-    * label *label217
   527 op add *tmp238 :createCombinedMask:y -2
-    * label *label360
-    * label *label361
-    * label *label362
   528 op add *tmp225 :createCombinedMask:x 4
   529 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label363
-    * label *label364
   530 op shl *tmp224 :createBlockMaskRow:result 1
   531 op add *tmp225 :createCombinedMask:x 3
   532 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   533 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label365
-    * label *label366
   534 op shl *tmp224 :createBlockMaskRow:result 1
   535 op add *tmp225 :createCombinedMask:x 2
   536 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   537 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label367
-    * label *label368
   538 op shl *tmp224 :createBlockMaskRow:result 1
   539 op add *tmp225 :createCombinedMask:x 1
   540 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   541 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label369
-    * label *label370
   542 op shl *tmp224 :createBlockMaskRow:result 1
   543 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   544 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label371
-    * label *label372
   545 op shl *tmp224 :createBlockMaskRow:result 1
   546 op add *tmp225 :createCombinedMask:x -1
   547 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   548 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label373
-    * label *label374
   549 op shl *tmp224 :createBlockMaskRow:result 1
   550 op add *tmp225 :createCombinedMask:x -2
   551 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   552 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label375
-    * label *label376
   553 op shl *tmp224 :createBlockMaskRow:result 1
   554 op add *tmp225 :createCombinedMask:x -3
   555 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   556 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label377
-    * label *label378
   557 op shl *tmp224 :createBlockMaskRow:result 1
   558 op add *tmp225 :createCombinedMask:x -4
   559 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   560 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label379
-    * label *label380
-    * label *label381
   561 op shl *tmp240 :createAdjacentMask:row1 1
   562 op or *tmp241 :createAdjacentMask:row2 *tmp240
   563 op shr *tmp242 :createAdjacentMask:row1 1
 
   568 op or :createAdjacentMask:result *tmp245 *tmp246
   569 set :createAdjacentMask:row2 :createAdjacentMask:row1
   570 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label219
-    * label *label220
   571 op add *tmp238 :createCombinedMask:y -3
-    * label *label382
-    * label *label383
-    * label *label384
   572 op add *tmp225 :createCombinedMask:x 4
   573 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label385
-    * label *label386
   574 op shl *tmp224 :createBlockMaskRow:result 1
   575 op add *tmp225 :createCombinedMask:x 3
   576 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   577 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label387
-    * label *label388
   578 op shl *tmp224 :createBlockMaskRow:result 1
   579 op add *tmp225 :createCombinedMask:x 2
   580 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   581 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label389
-    * label *label390
   582 op shl *tmp224 :createBlockMaskRow:result 1
   583 op add *tmp225 :createCombinedMask:x 1
   584 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   585 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label391
-    * label *label392
   586 op shl *tmp224 :createBlockMaskRow:result 1
   587 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   588 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label393
-    * label *label394
   589 op shl *tmp224 :createBlockMaskRow:result 1
   590 op add *tmp225 :createCombinedMask:x -1
   591 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   592 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label395
-    * label *label396
   593 op shl *tmp224 :createBlockMaskRow:result 1
   594 op add *tmp225 :createCombinedMask:x -2
   595 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   596 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label397
-    * label *label398
   597 op shl *tmp224 :createBlockMaskRow:result 1
   598 op add *tmp225 :createCombinedMask:x -3
   599 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   600 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label399
-    * label *label400
   601 op shl *tmp224 :createBlockMaskRow:result 1
   602 op add *tmp225 :createCombinedMask:x -4
   603 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   604 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label401
-    * label *label402
-    * label *label403
   605 op shl *tmp240 :createAdjacentMask:row1 1
   606 op or *tmp241 :createAdjacentMask:row2 *tmp240
   607 op shr *tmp242 :createAdjacentMask:row1 1
 
   612 op or :createAdjacentMask:result *tmp245 *tmp246
   613 set :createAdjacentMask:row2 :createAdjacentMask:row1
   614 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label222
-    * label *label223
   615 op add *tmp238 :createCombinedMask:y -4
-    * label *label404
-    * label *label405
-    * label *label406
   616 op add *tmp225 :createCombinedMask:x 4
   617 ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:result 0
-    * label *label407
-    * label *label408
   618 op shl *tmp224 :createBlockMaskRow:result 1
   619 op add *tmp225 :createCombinedMask:x 3
   620 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   621 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label409
-    * label *label410
   622 op shl *tmp224 :createBlockMaskRow:result 1
   623 op add *tmp225 :createCombinedMask:x 2
   624 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   625 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label411
-    * label *label412
   626 op shl *tmp224 :createBlockMaskRow:result 1
   627 op add *tmp225 :createCombinedMask:x 1
   628 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   629 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label413
-    * label *label414
   630 op shl *tmp224 :createBlockMaskRow:result 1
   631 ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0
   632 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label415
-    * label *label416
   633 op shl *tmp224 :createBlockMaskRow:result 1
   634 op add *tmp225 :createCombinedMask:x -1
   635 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   636 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label417
-    * label *label418
   637 op shl *tmp224 :createBlockMaskRow:result 1
   638 op add *tmp225 :createCombinedMask:x -2
   639 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   640 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label419
-    * label *label420
   641 op shl *tmp224 :createBlockMaskRow:result 1
   642 op add *tmp225 :createCombinedMask:x -3
   643 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   644 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label421
-    * label *label422
   645 op shl *tmp224 :createBlockMaskRow:result 1
   646 op add *tmp225 :createCombinedMask:x -4
   647 ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0
   648 op or :createBlockMaskRow:result *tmp224 *tmp226
-    * label *label423
-    * label *label424
-    * label *label425
   649 op shl *tmp240 :createAdjacentMask:row1 1
   650 op or *tmp241 :createAdjacentMask:row2 *tmp240
   651 op shr *tmp242 :createAdjacentMask:row1 1
 
   654 op shl *tmp245 :createAdjacentMask:result 7
   655 op and *tmp246 :createAdjacentMask:mask 0xFE
   656 op or :createAdjacentMask:result *tmp245 *tmp246
-    * label *label225
-    * label *label126
   657 op shr *tmp233 :createAdjacentMask:result 1
-    * label *label121
   658 set .adjacentMask *tmp233
   659 label *label128
   660 wait 1e-15
 
   662 jump *label128 equal *tmp249 false
   663 read .terrainMask processor1 ":createTerrainMask*retval"
   664 op or :createCombinedMask*retval *tmp233 .terrainMask
-    * label *label120
   665 return :createCombinedMask*retaddr
   666 end
   667 label *label13
 
   675 set .water1X -1
   676 set :moveTo.5:x .drillX
   677 set :moveTo.5:y .drillY
-    * label *label131
   678 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
   679 jump *label133 notEqual *tmp252 false
   680 label *label227
   681 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label132
   682 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252
   683 jump *label227 equal *tmp252 false
   684 label *label133
-    * label *label130
   685 set :createCombinedMask:x .drillX
   686 set :createCombinedMask:y .drillY
   687 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   688 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   689 label *label134
-    * label *label135
   690 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * label *label136
   691 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * label *label137
   692 set :layoutThoriumDrillAtLocation:mask2x2 387
   693 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   694 set :findPossiblePlacement:placementMask 387
 
   706 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp297
   707 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp297
   708 label *label139
-    * label *label140
   709 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   710 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   711 set :findPossiblePlacement:width 2
 
   721 op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   722 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp306
   723 label *label142
-    * label *label143
-    * label *label144
   724 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * label *label145
   725 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   726 set :tryPlaceGenerator:centerX .drillX
   727 set :tryPlaceGenerator:centerY .drillY
   728 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   729 set :tryPlaceGenerator:generatorHorizontal 1935
   730 set :tryPlaceGenerator:generatorVertical 6340995
-    * label *label426
   731 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   732 set :findPossiblePlacement:placementMask 6340995
   733 set :findPossiblePlacement:width 2
 
   740 set :tryPlaceGenerator*retval false
   741 jump *label444 always
   742 label *label428
-    * label *label429
   743 op add *tmp185 :tryPlaceGenerator:centerX 0.5
   744 op add .water2X *tmp185 :findPossiblePlacement:x
   745 op add *tmp187 :tryPlaceGenerator:centerY 0.5
 
   762 set :tryPlaceGenerator*retval false
   763 jump *label444 always
   764 label *label432
-    * label *label433
   765 op add *tmp197 :tryPlaceGenerator:centerX 0.5
   766 op add .water2X *tmp197 :findPossiblePlacement:x
   767 op add *tmp199 :tryPlaceGenerator:centerY 0.5
 
   783 set :tryPlaceGenerator*retval false
   784 jump *label444 always
   785 label *label436
-    * label *label437
   786 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   787 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   788 op shl *tmp211 1 :findPossiblePlacement*retval
 
   798 set :tryPlaceGenerator*retval false
   799 jump *label444 always
   800 label *label439
-    * label *label440
   801 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   802 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   803 op shl *tmp217 1 :findPossiblePlacement*retval
 
   813 set :tryPlaceGenerator*retval false
   814 jump *label444 always
   815 label *label442
-    * label *label443
   816 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   817 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   818 set :tryPlaceGenerator*retval true
 
   822 set :layoutThoriumDrillAtLocation*retval true
   823 jump *label129 always
   824 label *label147
-    * label *label148
   825 set :layoutThoriumDrillAtLocation:sx 3
   826 set :layoutThoriumDrillAtLocation:sy 3
   827 setaddr *tmp321 *label152
 
   858 set *tmp325 0
   859 jump *label157 always
   860 label *label158
-    * label *label159
   861 op mul *tmp332 7 :layoutThoriumDrillAtLocation:sy
   862 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp332
   863 jump *label160 lessThanEq :shiftMask:shift 0
 
   874 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
   875 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   876 label *label164
-    * label *label165
   877 op shl *tmp346 :shiftMask:keep 7
   878 op or :shiftMask:keep :shiftMask:keep *tmp346
   879 op shl *tmp347 :shiftMask:keep 14
 
   882 op or :shiftMask:keep :shiftMask:keep *tmp348
   883 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   884 label *label162
-    * label *label163
   885 set *tmp325 :shiftMask:mask
   886 label *label157
   887 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp325
 
   892 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   893 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
   894 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * label *label445
   895 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   896 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
   897 set :findPossiblePlacement:width 2
 
   904 set :tryPlaceGenerator*retval false
   905 jump *label463 always
   906 label *label447
-    * label *label448
   907 op add *tmp185 :tryPlaceGenerator:centerX 0.5
   908 op add .water2X *tmp185 :findPossiblePlacement:x
   909 op add *tmp187 :tryPlaceGenerator:centerY 0.5
 
   926 set :tryPlaceGenerator*retval false
   927 jump *label463 always
   928 label *label451
-    * label *label452
   929 op add *tmp197 :tryPlaceGenerator:centerX 0.5
   930 op add .water2X *tmp197 :findPossiblePlacement:x
   931 op add *tmp199 :tryPlaceGenerator:centerY 0.5
 
   947 set :tryPlaceGenerator*retval false
   948 jump *label463 always
   949 label *label455
-    * label *label456
   950 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   951 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   952 op shl *tmp211 1 :findPossiblePlacement*retval
 
   962 set :tryPlaceGenerator*retval false
   963 jump *label463 always
   964 label *label458
-    * label *label459
   965 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   966 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   967 op shl *tmp217 1 :findPossiblePlacement*retval
 
   977 set :tryPlaceGenerator*retval false
   978 jump *label463 always
   979 label *label461
-    * label *label462
   980 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   981 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   982 set :tryPlaceGenerator*retval true
 
   986 set :layoutThoriumDrillAtLocation*retval true
   987 jump *label129 always
   988 label *label167
-    * label *label168
-    * label *label150
   989 multijump *tmp321 0 0 (m:marker0)
   990 multilabel *label155 (m:marker0)
-    * label *label151
   991 set :layoutThoriumDrillAtLocation*retval true
   992 label *label129
   993 return :layoutThoriumDrillAtLocation*retaddr
 
  1009 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1010 set .searchFinished true
  1011 set :findDrillLocation*retval true
-    * label *label169
  1012 set :findDrillLocation*finished true
  1013 jump *label16 always
  1014 end
 
  1029 set :layoutThoriumDrill*retval false
  1030 jump *label171 always
  1031 label *label173
-    * label *label174
  1032 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)
  1033 call *label13 *invalid :layoutThoriumDrillAtLocation*retval (m:*label175) (h:*label175)
  1034 label *label175
 
  1043 set .mapTotal 0
  1044 set .mapProgress 0
  1045 ucontrol unbind
-    * label *label176
  1046 set :stopLocation*finished true
  1047 jump *label16 always
  1048 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-5 instructions):
 
    98 op sub *tmp73 :locateOreAway:y *tmp54
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label28 always
+  101 jump *label28 equal :locateOreAway:lastY :locateOreAway:y
   102 label *label40
   103 label *label38
   104 jump *label42 lessThan :locateOreAway:coreDist 7
 
   201 op add :findDrillLocationLocal:bestY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   202 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   203 label *label74
-    * jump *label76 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label65 always
+  204 jump *label65 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   205 label *label76
   206 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   207 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   217 op sub *tmp148 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   218 op abs *tmp149 *tmp148
   219 op min *tmp150 *tmp147 *tmp149
-    * jump *label80 greaterThanEq *tmp150 7
-    * jump *label65 always
+  220 jump *label65 lessThan *tmp150 7
   221 label *label80
   222 jump *label63 always
   223 label *label65
 
   256 jump *label85 always
   257 label *label92
   258 op sub *tmp174 3 :findPossiblePlacement:width
-    * jump *label94 lessThanEq :findPossiblePlacement:x *tmp174
-    * jump *label91 always
+  259 jump *label91 greaterThan :findPossiblePlacement:x *tmp174
   260 label *label94
   261 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   262 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   263 jump *label180 lessThanEq :findPossiblePlacement:x 3
   264 label *label91
   265 op sub *tmp177 3 :findPossiblePlacement:height
-    * jump *label96 lessThanEq :findPossiblePlacement:y *tmp177
-    * jump *label88 always
+  266 jump *label88 greaterThan :findPossiblePlacement:y *tmp177
   267 label *label96
   268 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   269 jump *label179 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   101 jump *label28 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label40
   102 label *label38
   103 jump *label42 lessThan :locateOreAway:coreDist 7
   104 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   201 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   202 label *label74
   203 jump *label65 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label76
   204 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   205 op mul :round:x :findDrillLocationLocal:diffX 1.1
   206 op add *tmp140 :round:x 0.5
 
   216 op abs *tmp149 *tmp148
   217 op min *tmp150 *tmp147 *tmp149
   218 jump *label65 lessThan *tmp150 7
-    * label *label80
   219 jump *label63 always
   220 label *label65
   221 jump *label82 lessThan :findDrillLocationLocal:best 0
 
   254 label *label92
   255 op sub *tmp174 3 :findPossiblePlacement:width
   256 jump *label91 greaterThan :findPossiblePlacement:x *tmp174
-    * label *label94
   257 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   258 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   259 jump *label180 lessThanEq :findPossiblePlacement:x 3
   260 label *label91
   261 op sub *tmp177 3 :findPossiblePlacement:height
   262 jump *label88 greaterThan :findPossiblePlacement:y *tmp177
-    * label *label96
   263 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   264 jump *label179 lessThanEq :findPossiblePlacement:y 3
   265 label *label88

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   144 set :findDrillLocationLocal:oreY :locateOreAway:y
   145 jump *label54 notEqual *tmp37 false
   146 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label17 always
+  147 return :findDrillLocationLocal*retaddr
   148 label *label54
   149 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   150 op add .mapSpots .mapSpots 1
 
   192 op add .locations .locations 1
   193 ucontrol unbind
   194 set :findDrillLocationLocal*retval true
-    * jump *label17 always
+  195 return :findDrillLocationLocal*retaddr
   196 label *label71
   197 label *label67
   198 jump *label74 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   218 jump *label65 lessThan *tmp150 7
   219 jump *label63 always
   220 label *label65
-    * jump *label82 lessThan :findDrillLocationLocal:best 0
+  221 jump *label23 lessThan :findDrillLocationLocal:best 0
   222 op add .count .count 1
   223 sensor *tmp157 :findDrillLocationLocal:item @id
   224 write *tmp157 bank1 .count
 
   250 op mul *tmp171 :findPossiblePlacement:y 7
   251 op add *tmp172 24 *tmp171
   252 op add :findPossiblePlacement*retval *tmp172 :findPossiblePlacement:x
-    * jump *label85 always
+  253 return :findPossiblePlacement*retaddr
   254 label *label92
   255 op sub *tmp174 3 :findPossiblePlacement:width
   256 jump *label91 greaterThan :findPossiblePlacement:x *tmp174
 
   810 label *label444
   811 jump *label147 equal :tryPlaceGenerator*retval false
   812 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
+  813 return :layoutThoriumDrillAtLocation*retaddr
   814 label *label147
   815 set :layoutThoriumDrillAtLocation:sx 3
   816 set :layoutThoriumDrillAtLocation:sy 3
 
   974 label *label463
   975 jump *label167 equal :tryPlaceGenerator*retval false
   976 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
+  977 return :layoutThoriumDrillAtLocation*retaddr
   978 label *label167
   979 multijump *tmp321 0 0 (m:marker0)
   980 multilabel *label155 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-10 instructions):
 
    12 label *label16
    13 wait 1e12
    14 jump *label16 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   228 op add .count .count 1
   229 write :findDrillLocationLocal:bestY bank1 .count
   230 op add .locations .locations 1
-    * label *label82
   231 jump *label23 always
-    * set :findDrillLocationLocal*retval null
-    * label *label17
-    * return :findDrillLocationLocal*retaddr
-    * end
   232 label *label9
   233 set :findPossiblePlacement:y -3
   234 jump *label88 greaterThan :findPossiblePlacement:y 3
 
   258 jump *label179 lessThanEq :findPossiblePlacement:y 3
   259 label *label88
   260 set :findPossiblePlacement*retval -1
-    * label *label85
   261 return :findPossiblePlacement*retaddr
-    * end
   262 label *label12
   263 write @unit processor1 ":createTerrainMask:unit"
   264 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   645 read .terrainMask processor1 ":createTerrainMask*retval"
   646 op or :createCombinedMask*retval *tmp233 .terrainMask
   647 return :createCombinedMask*retaddr
-    * end
   648 label *label13
   649 set .panelY -1
   650 set .panelX -1
 
   970 multijump *tmp321 0 0 (m:marker0)
   971 multilabel *label155 (m:marker0)
   972 set :layoutThoriumDrillAtLocation*retval true
-    * label *label129
   973 return :layoutThoriumDrillAtLocation*retaddr
-    * end
   974 label *label2
   975 set .searchFinished false
   976 set :findDrillLocationLocal:x :findDrillLocation:x
 
   990 set :findDrillLocation*retval true
   991 set :findDrillLocation*finished true
   992 jump *label16 always
-    * end
   993 label *label3
   994 set :findDrillLocationLocal:x :layoutThoriumDrill:x
   995 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1014 label *label171
  1015 set :layoutThoriumDrill*finished true
  1016 jump *label16 always
-    * end
  1017 label *label4
  1018 set .mapSpots 0
  1019 set .mapAction 0
 
  1022 ucontrol unbind
  1023 set :stopLocation*finished true
  1024 jump *label16 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1 (-3 instructions):
 
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
-    * set .coreX :findDrillLocationLocal:x
-    * set .coreY :findDrillLocationLocal:y
    18 set :findDrillLocationLocal:capacity 0
    19 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    20 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
 
   635 op and *tmp246 :createAdjacentMask:mask 0xFE
   636 op or :createAdjacentMask:result *tmp245 *tmp246
   637 op shr *tmp233 :createAdjacentMask:result 1
-    * set .adjacentMask *tmp233
   638 label *label128
   639 wait 1e-15
   640 read *tmp249 processor1 ":createTerrainMask*finished"

Modifications by Jumps phase, Jump Straightening, pass 5, iteration 1 (-1 instructions):
 
   212 op sub *tmp148 :findDrillLocationLocal:oreY :findDrillLocationLocal:y
   213 op abs *tmp149 *tmp148
   214 op min *tmp150 *tmp147 *tmp149
-    * jump *label65 lessThan *tmp150 7
-    * jump *label63 always
+  215 jump *label63 greaterThanEq *tmp150 7
   216 label *label65
   217 jump *label23 lessThan :findDrillLocationLocal:best 0
   218 op add .count .count 1

Final code before resolving virtual instructions:

    0:  jump *label14 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label14                                               ...
        label *label15                                               OreLocator.mnd: require "Matrices.mnd" remote processor1;
    4:  read *tmp20 processor1 "*signature"                          ...
    5:  jump *label15 notEqual *tmp20 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label16                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label16 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   15:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   16:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   17:  set .mapSpots :findDrillLocationLocal:dx                     ...
   18:  op sub *tmp22 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   19:  op sub *tmp23 @maph :findDrillLocationLocal:y                ...
   20:  op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLo ...
   21:  op max *tmp24 *tmp24 *tmp22                                  ...
   22:  op max *tmp24 *tmp24 *tmp23                                  ...
   23:  set :findDrillLocationLocal:distanceLimit *tmp24             ...
   24:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   25:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   26:  set .mapProgress 0                                           ...
   27:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   28:  jump *label22 notEqual *tmp27 false                          ...
        label *label226                                              ...
   29:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   30:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   31:  jump *label226 equal *tmp27 false                            ...
        label *label22                                               ...
   32:  op div *tmp30 *tmp24 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   33:  op pow .mapTotal *tmp30 2                                    ...
   34:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   35:  set :findDrillLocationLocal:oreY 0                           ...
        label *label23                                               OreLocator.mnd: while true do
   36:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   37:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   38:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   39:  op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   40:  op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuati ...
   41:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   42:  op div *tmp35 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   43:  op pow .mapTotal *tmp35 2                                    ...
   44:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   45:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   46:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   47:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   48:  set :locateOreAway:lastY -1                                  ...
   49:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   50:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   51:  op sub *tmp46 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   52:  op sub *tmp53 @maph 5                                        ...
   53:  jump *label29 greaterThanEq :locateOreAway:distance :findDri ...
        label *label177                                              ...
   54:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   55:  op sin *tmp43 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   56:  op mul *tmp44 *tmp43 :locateOreAway:distance                 ...
   57:  op add *tmp45 :findDrillLocationLocal:x *tmp44               ...
   58:  op max *tmp48 *tmp45 5                                       OreLocator.mnd: min(max(value, low), high);
   59:  op min *tmp47 *tmp48 *tmp46                                  OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   60:  op cos *tmp50 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   61:  op mul *tmp51 *tmp50 :locateOreAway:distance                 ...
   62:  op add *tmp52 :findDrillLocationLocal:y *tmp51               ...
   63:  op max *tmp55 *tmp52 5                                       OreLocator.mnd: min(max(value, low), high);
   64:  op min *tmp54 *tmp55 *tmp53                                  OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   65:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   66:  jump *label35 notEqual *tmp57 false                          ...
        label *label183                                              ...
   67:  ucontrol approach *tmp47 *tmp54 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   68:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   69:  jump *label183 equal *tmp57 false                            ...
        label *label35                                               ...
   70:  op div *tmp60 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   71:  op add .angle .angle *tmp60                                  ...
   72:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   73:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   74:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   75:  jump *label36 notEqual *tmp63 false                          ...
   76:  set *tmp37 false                                             OreLocator.mnd: return false;
   77:  jump *label26 always 0 0                                     ...
        label *label36                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   78:  op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   79:  op abs *tmp68 *tmp67 0                                       ...
   80:  op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y     ...
   81:  op abs *tmp70 *tmp69 0                                       ...
   82:  op max :locateOreAway:coreDist *tmp68 *tmp70                 ...
   83:  op sub *tmp72 :locateOreAway:x *tmp47                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   84:  op sub *tmp73 :locateOreAway:y *tmp54                        ...
   85:  op len :locateOreAway:unitDist *tmp72 *tmp73                 ...
   86:  jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   87:  jump *label28 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label38                                               ...
   88:  jump *label42 lessThan :locateOreAway:coreDist 7             OreLocator.mnd: if coreDist >= 7 then
   89:  jump *label44 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   90:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   91:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   92:  set *tmp84 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   93:  set :visited:i .locationsStart                               ...
   94:  jump *label49 greaterThanEq .locationsStart *tmp84           ...
        label *label178                                              ...
   95:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   96:  op add *tmp87 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   97:  read :visited:lx bank1 *tmp87                                ...
   98:  op add *tmp90 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
   99:  read :visited:ly bank1 *tmp90                                ...
  100:  op sub *tmp92 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  101:  op sub *tmp93 :locateOreAway:y :visited:ly                   ...
  102:  op len *tmp94 *tmp92 *tmp93                                  ...
  103:  jump *label50 greaterThanEq *tmp94 7                         ...
  104:  set *tmp83 true                                              OreLocator.mnd: return true;
  105:  jump *label46 always 0 0                                     ...
        label *label50                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  106:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  107:  jump *label178 lessThan :visited:i *tmp84                    ...
        label *label49                                               ...
  108:  set *tmp83 false                                             OreLocator.mnd: return false;
        label *label46                                               OreLocator.mnd: if !visited(x, y) then
  109:  jump *label52 notEqual *tmp83 false                          ...
  110:  op div *tmp99 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  111:  op add .angle .angle *tmp99                                  ...
  112:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  113:  printflush message1                                          OreLocator.mnd: printflush(message1);
  114:  set *tmp37 true                                              OreLocator.mnd: return true;
  115:  jump *label26 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if !visited(x, y) then
        label *label44                                               OreLocator.mnd: if unitDist < distance then
        label *label42                                               OreLocator.mnd: if coreDist >= 7 then
        label *label28                                               OreLocator.mnd: while distance < distanceLimit do
  116:  jump *label177 lessThan :locateOreAway:distance :findDrillLo ...
        label *label29                                               ...
  117:  set *tmp37 false                                             OreLocator.mnd: return false;
        label *label26                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  118:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  119:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  120:  jump *label54 notEqual *tmp37 false                          ...
  121:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  122:  return :findDrillLocationLocal*retaddr                       ...
        label *label54                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  123:  jump *label56 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  124:  op add .mapSpots .mapSpots 1                                 ...
        label *label56                                               ...
  125:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  126:  jump *label62 notEqual *tmp109 false                         ...
        label *label203                                              ...
  127:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  128:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  129:  jump *label203 equal *tmp109 false                           ...
        label *label62                                               ...
  130:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label63                                               OreLocator.mnd: while true do
  131:  write @unit processor1 ":findBestPosition:unit"              OreLocator.mnd: var score = findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  132:  write :findDrillLocationLocal:oreX processor1 ":findBestPosi ...
  133:  write :findDrillLocationLocal:oreY processor1 ":findBestPosi ...
  134:  write :findDrillLocationLocal:ore processor1 ":findBestPosit ...
  135:  write :findDrillLocationLocal:size processor1 ":findBestPosi ...
  136:  write false processor1 ":findBestPosition*finished"          ...
  137:  write 2 processor1 "@counter"                                ...
        label *label66                                               ...
  138:  wait 1e-15                                                   ...
  139:  read *tmp112 processor1 ":findBestPosition*finished"         ...
  140:  jump *label66 equal *tmp112 false                            ...
  141:  read :findDrillLocationLocal:diffX processor1 ":findBestPosi ...
  142:  read :findDrillLocationLocal:diffY processor1 ":findBestPosi ...
  143:  read :findDrillLocationLocal:score processor1 ":findBestPosi ...
  144:  jump *label67 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  145:  op add :findDrillLocationLocal:dx :findDrillLocationLocal:or OreLocator.mnd: dx = oreX + diffX;
  146:  op add :findDrillLocationLocal:dy :findDrillLocationLocal:or OreLocator.mnd: dy = oreY + diffY;
  147:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  148:  jump *label69 greaterThanEq :findDrillLocationLocal:limit 10 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  149:  set .mapSpots :findDrillLocationLocal:score                  ...
        label *label69                                               ...
  150:  jump *label71 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  151:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  152:  sensor *tmp124 :findDrillLocationLocal:item @id              ...
  153:  write *tmp124 bank1 .count                                   ...
  154:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  155:  write :findDrillLocationLocal:score bank1 .count             ...
  156:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  157:  write :findDrillLocationLocal:dx bank1 .count                ...
  158:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  159:  write :findDrillLocationLocal:dy bank1 .count                ...
  160:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  161:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  162:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  163:  return :findDrillLocationLocal*retaddr                       ...
        label *label71                                               OreLocator.mnd: if capacity >= limit then
        label *label67                                               OreLocator.mnd: if score > capacity then
  164:  jump *label74 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  165:  op add :findDrillLocationLocal:bestX :findDrillLocationLocal OreLocator.mnd: bestX = oreX + diffX;
  166:  op add :findDrillLocationLocal:bestY :findDrillLocationLocal OreLocator.mnd: bestY = oreY + diffY;
  167:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label74                                               OreLocator.mnd: if score > best then
  168:  jump *label65 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  169:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  170:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  171:  op add *tmp140 :round:x 0.5                                  *math: floor(x + 0.5);
  172:  op floor *tmp139 *tmp140 0                                   OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  173:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: ...
  174:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  175:  op add *tmp144 :round.1:x 0.5                                *math: floor(x + 0.5);
  176:  op floor *tmp143 *tmp144 0                                   OreLocator.mnd: oreY += round(diffY * 1.1);
  177:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: ...
  178:  op sub *tmp146 :findDrillLocationLocal:oreX :findDrillLocati OreLocator.mnd: if min(abs(oreX - coreX), abs(oreY - coreY)) < 7 then break; end;
  179:  op abs *tmp147 *tmp146 0                                     ...
  180:  op sub *tmp148 :findDrillLocationLocal:oreY :findDrillLocati ...
  181:  op abs *tmp149 *tmp148 0                                     ...
  182:  op min *tmp150 *tmp147 *tmp149                               ...
  183:  jump *label63 greaterThanEq *tmp150 7                        ...
        label *label65                                               OreLocator.mnd: while true do
  184:  jump *label23 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  185:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  186:  sensor *tmp157 :findDrillLocationLocal:item @id              ...
  187:  write *tmp157 bank1 .count                                   ...
  188:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  189:  write :findDrillLocationLocal:best bank1 .count              ...
  190:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  191:  write :findDrillLocationLocal:bestX bank1 .count             ...
  192:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  193:  write :findDrillLocationLocal:bestY bank1 .count             ...
  194:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  195:  jump *label23 always 0 0                                     OreLocator.mnd: while true do
        label *label9                                                OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  196:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  197:  jump *label88 greaterThan :findPossiblePlacement:y 3         ...
        label *label179                                              ...
  198:  op add *tmp165 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  199:  op mul *tmp166 7 *tmp165                                     ...
  200:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  201:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  202:  jump *label91 greaterThan :findPossiblePlacement:x 3         ...
        label *label180                                              ...
  203:  op and *tmp168 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  204:  jump *label92 notEqual *tmp168 0                             ...
  205:  op mul *tmp171 :findPossiblePlacement:y 7                    ...
  206:  op add *tmp172 24 *tmp171                                    ...
  207:  op add :findPossiblePlacement*retval *tmp172 :findPossiblePl ...
  208:  return :findPossiblePlacement*retaddr                        ...
        label *label92                                               ...
  209:  op sub *tmp174 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  210:  jump *label91 greaterThan :findPossiblePlacement:x *tmp174   ...
  211:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  212:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  213:  jump *label180 lessThanEq :findPossiblePlacement:x 3         ...
        label *label91                                               ...
  214:  op sub *tmp177 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  215:  jump *label88 greaterThan :findPossiblePlacement:y *tmp177   ...
  216:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  217:  jump *label179 lessThanEq :findPossiblePlacement:y 3         ...
        label *label88                                               ...
  218:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  219:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def createCombinedMask(x, y);
  220:  write @unit processor1 ":createTerrainMask:unit"             OreLocator.mnd: async(processor1.createTerrainMask(@unit, x, y));
  221:  write :createCombinedMask:x processor1 ":createTerrainMask:x ...
  222:  write :createCombinedMask:y processor1 ":createTerrainMask:y ...
  223:  write false processor1 ":createTerrainMask*finished"         ...
  224:  write 1 processor1 "@counter"                                ...
  225:  op add *tmp234 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  226:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  227:  ucontrol getBlock *tmp225 *tmp234 0 :createBlockMaskRow:resu ...
  228:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  229:  op add *tmp225 :createCombinedMask:x 3                       ...
  230:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  231:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  232:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  233:  op add *tmp225 :createCombinedMask:x 2                       ...
  234:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  235:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  236:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  237:  op add *tmp225 :createCombinedMask:x 1                       ...
  238:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  239:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  240:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  241:  ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp226 0  ...
  242:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  243:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  244:  op add *tmp225 :createCombinedMask:x -1                      ...
  245:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  246:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  247:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  248:  op add *tmp225 :createCombinedMask:x -2                      ...
  249:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  250:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  251:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  252:  op add *tmp225 :createCombinedMask:x -3                      ...
  253:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  254:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  255:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  256:  op add *tmp225 :createCombinedMask:x -4                      ...
  257:  ucontrol getBlock *tmp225 *tmp234 0 *tmp226 0                ...
  258:  op or :createAdjacentMask:row2 *tmp224 *tmp226               ...
  259:  op add *tmp236 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  260:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  261:  ucontrol getBlock *tmp225 *tmp236 0 :createBlockMaskRow:resu ...
  262:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  263:  op add *tmp225 :createCombinedMask:x 3                       ...
  264:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  265:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  266:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  267:  op add *tmp225 :createCombinedMask:x 2                       ...
  268:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  269:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  270:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  271:  op add *tmp225 :createCombinedMask:x 1                       ...
  272:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  273:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  274:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  275:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp226 0  ...
  276:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  277:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  278:  op add *tmp225 :createCombinedMask:x -1                      ...
  279:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  280:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  281:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  282:  op add *tmp225 :createCombinedMask:x -2                      ...
  283:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  284:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  285:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  286:  op add *tmp225 :createCombinedMask:x -3                      ...
  287:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  288:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  289:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  290:  op add *tmp225 :createCombinedMask:x -4                      ...
  291:  ucontrol getBlock *tmp225 *tmp236 0 *tmp226 0                ...
  292:  op or :createAdjacentMask:row1 *tmp224 *tmp226               ...
  293:  op add *tmp238 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  294:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  295:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  296:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  297:  op add *tmp225 :createCombinedMask:x 3                       ...
  298:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  299:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  300:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  301:  op add *tmp225 :createCombinedMask:x 2                       ...
  302:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  303:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  304:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  305:  op add *tmp225 :createCombinedMask:x 1                       ...
  306:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  307:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  308:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  309:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  310:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  311:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  312:  op add *tmp225 :createCombinedMask:x -1                      ...
  313:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  314:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  315:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  316:  op add *tmp225 :createCombinedMask:x -2                      ...
  317:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  318:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  319:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  320:  op add *tmp225 :createCombinedMask:x -3                      ...
  321:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  322:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  323:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  324:  op add *tmp225 :createCombinedMask:x -4                      ...
  325:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  326:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  327:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  328:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  329:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  330:  op or *tmp243 *tmp241 *tmp242                                ...
  331:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  332:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  333:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  334:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  335:  op add *tmp238 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  336:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  337:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  338:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  339:  op add *tmp225 :createCombinedMask:x 3                       ...
  340:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  341:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  342:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  343:  op add *tmp225 :createCombinedMask:x 2                       ...
  344:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  345:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  346:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  347:  op add *tmp225 :createCombinedMask:x 1                       ...
  348:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  349:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  350:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  351:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  352:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  353:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  354:  op add *tmp225 :createCombinedMask:x -1                      ...
  355:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  356:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  357:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  358:  op add *tmp225 :createCombinedMask:x -2                      ...
  359:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  360:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  361:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  362:  op add *tmp225 :createCombinedMask:x -3                      ...
  363:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  364:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  365:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  366:  op add *tmp225 :createCombinedMask:x -4                      ...
  367:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  368:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  369:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  370:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  371:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  372:  op or *tmp243 *tmp241 *tmp242                                ...
  373:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  374:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  375:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  376:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  377:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  378:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  379:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  380:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 :createBlo ...
  381:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  382:  op add *tmp225 :createCombinedMask:x 3                       ...
  383:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  384:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  385:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  386:  op add *tmp225 :createCombinedMask:x 2                       ...
  387:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  388:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  389:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  390:  op add *tmp225 :createCombinedMask:x 1                       ...
  391:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  392:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  393:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  394:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  395:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  396:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  397:  op add *tmp225 :createCombinedMask:x -1                      ...
  398:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  399:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  400:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  401:  op add *tmp225 :createCombinedMask:x -2                      ...
  402:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  403:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  404:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  405:  op add *tmp225 :createCombinedMask:x -3                      ...
  406:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  407:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  408:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  409:  op add *tmp225 :createCombinedMask:x -4                      ...
  410:  ucontrol getBlock *tmp225 :createCombinedMask:y 0 *tmp226 0  ...
  411:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  412:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  413:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  414:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  415:  op or *tmp243 *tmp241 *tmp242                                ...
  416:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  417:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  418:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  419:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  420:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  421:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  422:  op add *tmp238 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  423:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  424:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  425:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  426:  op add *tmp225 :createCombinedMask:x 3                       ...
  427:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  428:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  429:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  430:  op add *tmp225 :createCombinedMask:x 2                       ...
  431:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  432:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  433:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  434:  op add *tmp225 :createCombinedMask:x 1                       ...
  435:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  436:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  437:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  438:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  439:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  440:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  441:  op add *tmp225 :createCombinedMask:x -1                      ...
  442:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  443:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  444:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  445:  op add *tmp225 :createCombinedMask:x -2                      ...
  446:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  447:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  448:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  449:  op add *tmp225 :createCombinedMask:x -3                      ...
  450:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  451:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  452:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  453:  op add *tmp225 :createCombinedMask:x -4                      ...
  454:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  455:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  456:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  457:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  458:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  459:  op or *tmp243 *tmp241 *tmp242                                ...
  460:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  461:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  462:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  463:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  464:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  465:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  466:  op add *tmp238 :createCombinedMask:y -2                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  467:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  468:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  469:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  470:  op add *tmp225 :createCombinedMask:x 3                       ...
  471:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  472:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  473:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  474:  op add *tmp225 :createCombinedMask:x 2                       ...
  475:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  476:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  477:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  478:  op add *tmp225 :createCombinedMask:x 1                       ...
  479:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  480:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  481:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  482:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  483:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  484:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  485:  op add *tmp225 :createCombinedMask:x -1                      ...
  486:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  487:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  488:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  489:  op add *tmp225 :createCombinedMask:x -2                      ...
  490:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  491:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  492:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  493:  op add *tmp225 :createCombinedMask:x -3                      ...
  494:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  495:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  496:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  497:  op add *tmp225 :createCombinedMask:x -4                      ...
  498:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  499:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  500:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  501:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  502:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  503:  op or *tmp243 *tmp241 *tmp242                                ...
  504:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  505:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  506:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  507:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  508:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  509:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  510:  op add *tmp238 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  511:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  512:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  513:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  514:  op add *tmp225 :createCombinedMask:x 3                       ...
  515:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  516:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  517:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  518:  op add *tmp225 :createCombinedMask:x 2                       ...
  519:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  520:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  521:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  522:  op add *tmp225 :createCombinedMask:x 1                       ...
  523:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  524:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  525:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  526:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  527:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  528:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  529:  op add *tmp225 :createCombinedMask:x -1                      ...
  530:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  531:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  532:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  533:  op add *tmp225 :createCombinedMask:x -2                      ...
  534:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  535:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  536:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  537:  op add *tmp225 :createCombinedMask:x -3                      ...
  538:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  539:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  540:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  541:  op add *tmp225 :createCombinedMask:x -4                      ...
  542:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  543:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  544:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  545:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  546:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  547:  op or *tmp243 *tmp241 *tmp242                                ...
  548:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  549:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  550:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  551:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  552:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  553:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  554:  op add *tmp238 :createCombinedMask:y -4                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  555:  op add *tmp225 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  556:  ucontrol getBlock *tmp225 *tmp238 0 :createBlockMaskRow:resu ...
  557:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  558:  op add *tmp225 :createCombinedMask:x 3                       ...
  559:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  560:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  561:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  562:  op add *tmp225 :createCombinedMask:x 2                       ...
  563:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  564:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  565:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  566:  op add *tmp225 :createCombinedMask:x 1                       ...
  567:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  568:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  569:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  570:  ucontrol getBlock :createCombinedMask:x *tmp238 0 *tmp226 0  ...
  571:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  572:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  573:  op add *tmp225 :createCombinedMask:x -1                      ...
  574:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  575:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  576:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  577:  op add *tmp225 :createCombinedMask:x -2                      ...
  578:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  579:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  580:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  581:  op add *tmp225 :createCombinedMask:x -3                      ...
  582:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  583:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  584:  op shl *tmp224 :createBlockMaskRow:result 1                  ...
  585:  op add *tmp225 :createCombinedMask:x -4                      ...
  586:  ucontrol getBlock *tmp225 *tmp238 0 *tmp226 0                ...
  587:  op or :createBlockMaskRow:result *tmp224 *tmp226             ...
  588:  op shl *tmp240 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  589:  op or *tmp241 :createAdjacentMask:row2 *tmp240               ...
  590:  op shr *tmp242 :createAdjacentMask:row1 1                    ...
  591:  op or *tmp243 *tmp241 *tmp242                                ...
  592:  op or :createAdjacentMask:mask *tmp243 :createBlockMaskRow:r ...
  593:  op shl *tmp245 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  594:  op and *tmp246 :createAdjacentMask:mask 0xFE                 ...
  595:  op or :createAdjacentMask:result *tmp245 *tmp246             ...
  596:  op shr *tmp233 :createAdjacentMask:result 1                  OreLocator.mnd: adjacentMask = createAdjacentMask(x, y);
        label *label128                                              OreLocator.mnd: terrainMask = await(processor1.createTerrainMask);
  597:  wait 1e-15                                                   ...
  598:  read *tmp249 processor1 ":createTerrainMask*finished"        ...
  599:  jump *label128 equal *tmp249 false                           ...
  600:  read .terrainMask processor1 ":createTerrainMask*retval"     ...
  601:  op or :createCombinedMask*retval *tmp233 .terrainMask        OreLocator.mnd: return adjacentMask | terrainMask;
  602:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label13                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  603:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  604:  set .panelX -1                                               ...
  605:  set .generatorY -1                                           ...
  606:  set .generatorX -1                                           ...
  607:  set .water2Y -1                                              ...
  608:  set .water2X -1                                              ...
  609:  set .water1Y -1                                              ...
  610:  set .water1X -1                                              ...
  611:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  612:  set :moveTo.5:y .drillY                                      ...
  613:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252 0          OreLocator.mnd: while !within(x, y, radius) do
  614:  jump *label133 notEqual *tmp252 false                        ...
        label *label227                                              ...
  615:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  616:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp252 0          OreLocator.mnd: while !within(x, y, radius) do
  617:  jump *label227 equal *tmp252 false                           ...
        label *label133                                              ...
  618:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  619:  set :createCombinedMask:y .drillY                            ...
  620:  setaddr :createCombinedMask*retaddr *label134                ...
  621:  call *label12 *invalid :createCombinedMask*retval            ...
        label *label134                                              ...
  622:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  623:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  624:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  625:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  626:  set :findPossiblePlacement:placementMask 387                 ...
  627:  set :findPossiblePlacement:width 2                           ...
  628:  set :findPossiblePlacement:height 2                          ...
  629:  setaddr :findPossiblePlacement*retaddr *label138             ...
  630:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label138                                              ...
  631:  jump *label139 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  632:  op add *tmp293 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  633:  op add .water1X *tmp293 :findPossiblePlacement:x             ...
  634:  op add *tmp295 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  635:  op add .water1Y *tmp295 :findPossiblePlacement:y             ...
  636:  op shl *tmp297 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  637:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  638:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label139                                              OreLocator.mnd: if shift >= 0 then
  639:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  640:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  641:  set :findPossiblePlacement:width 2                           ...
  642:  set :findPossiblePlacement:height 2                          ...
  643:  setaddr :findPossiblePlacement*retaddr *label141             ...
  644:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label141                                              ...
  645:  jump *label142 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  646:  op add *tmp302 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  647:  op add .containerX *tmp302 :findPossiblePlacement:x          ...
  648:  op add *tmp304 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  649:  op add .containerY *tmp304 :findPossiblePlacement:y          ...
  650:  op shl *tmp306 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  651:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label142                                              OreLocator.mnd: if shift >= 0 then
  652:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  653:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  654:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  655:  set :tryPlaceGenerator:centerY .drillY                       ...
  656:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  657:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  658:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  659:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  660:  set :findPossiblePlacement:placementMask 6340995             ...
  661:  set :findPossiblePlacement:width 2                           ...
  662:  set :findPossiblePlacement:height 4                          ...
  663:  setaddr :findPossiblePlacement*retaddr *label427             ...
  664:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label427                                              ...
  665:  jump *label430 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  666:  jump *label428 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  667:  set :tryPlaceGenerator*retval false                          ...
  668:  jump *label444 always 0 0                                    ...
        label *label428                                              ...
  669:  op add *tmp185 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  670:  op add .water2X *tmp185 :findPossiblePlacement:x             ...
  671:  op add *tmp187 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  672:  op add .water2Y *tmp187 :findPossiblePlacement:y             ...
  673:  op add .generatorX *tmp185 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  674:  op add *tmp191 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  675:  op add .generatorY *tmp191 :findPossiblePlacement:y          ...
  676:  op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  677:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  678:  jump *label434 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label430                                              ...
  679:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  680:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  681:  set :findPossiblePlacement:width 4                           ...
  682:  set :findPossiblePlacement:height 2                          ...
  683:  setaddr :findPossiblePlacement*retaddr *label431             ...
  684:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label431                                              ...
  685:  jump *label432 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  686:  set :tryPlaceGenerator*retval false                          ...
  687:  jump *label444 always 0 0                                    ...
        label *label432                                              ...
  688:  op add *tmp197 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  689:  op add .water2X *tmp197 :findPossiblePlacement:x             ...
  690:  op add *tmp199 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  691:  op add .water2Y *tmp199 :findPossiblePlacement:y             ...
  692:  op add *tmp201 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  693:  op add .generatorX *tmp201 :findPossiblePlacement:x          ...
  694:  op add .generatorY *tmp199 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  695:  op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  696:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label434                                              OreLocator.mnd: if shift >= 0 then
  697:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  698:  set :findPossiblePlacement:placementMask 1                   ...
  699:  set :findPossiblePlacement:width 1                           ...
  700:  set :findPossiblePlacement:height 1                          ...
  701:  setaddr :findPossiblePlacement*retaddr *label435             ...
  702:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label435                                              ...
  703:  jump *label436 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  704:  set :tryPlaceGenerator*retval false                          ...
  705:  jump *label444 always 0 0                                    ...
        label *label436                                              ...
  706:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  707:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  708:  op shl *tmp211 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  709:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  710:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  711:  set :findPossiblePlacement:placementMask 1                   ...
  712:  set :findPossiblePlacement:width 1                           ...
  713:  set :findPossiblePlacement:height 1                          ...
  714:  setaddr :findPossiblePlacement*retaddr *label438             ...
  715:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label438                                              ...
  716:  jump *label439 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  717:  set :tryPlaceGenerator*retval false                          ...
  718:  jump *label444 always 0 0                                    ...
        label *label439                                              ...
  719:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  720:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  721:  op shl *tmp217 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  722:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  723:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  724:  set :findPossiblePlacement:placementMask 1                   ...
  725:  set :findPossiblePlacement:width 1                           ...
  726:  set :findPossiblePlacement:height 1                          ...
  727:  setaddr :findPossiblePlacement*retaddr *label441             ...
  728:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label441                                              ...
  729:  jump *label442 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  730:  set :tryPlaceGenerator*retval false                          ...
  731:  jump *label444 always 0 0                                    ...
        label *label442                                              ...
  732:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  733:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  734:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  735:  jump *label444 always 0 0                                    ...
        label *label444                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  736:  jump *label147 equal :tryPlaceGenerator*retval false         ...
  737:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  738:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label147                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  739:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  740:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  741:  setaddr *tmp321 *label152                                    ...
  742:  jump *label149 always 0 0                                    ...
        multilabel *label152                                         ...
  743:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  744:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  745:  setaddr *tmp321 *label153                                    ...
  746:  jump *label149 always 0 0                                    ...
        multilabel *label153                                         ...
  747:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  748:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  749:  setaddr *tmp321 *label154                                    ...
  750:  jump *label149 always 0 0                                    ...
        multilabel *label154                                         ...
  751:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  752:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  753:  setaddr *tmp321 *label155                                    ...
        label *label149                                              ...
  754:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  755:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  756:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  757:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  758:  setaddr :createCombinedMask*retaddr *label156                ...
  759:  call *label12 *invalid :createCombinedMask*retval            ...
        label *label156                                              ...
  760:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  761:  op abs *tmp326 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  762:  op greaterThan *tmp327 *tmp326 6                             ...
  763:  op abs *tmp328 :layoutThoriumDrillAtLocation:sy 0            ...
  764:  op greaterThan *tmp329 *tmp328 6                             ...
  765:  op or *tmp330 *tmp327 *tmp329                                ...
  766:  jump *label158 equal *tmp330 false                           ...
  767:  set *tmp325 0                                                ...
  768:  jump *label157 always 0 0                                    ...
        label *label158                                              ...
  769:  op mul *tmp332 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  770:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  771:  jump *label160 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  772:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = ((1 << 49) - 1) >> shift;
  773:  op and *tmp337 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  774:  op shl :shiftMask:mask *tmp337 :shiftMask:shift              ...
  775:  jump *label161 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label160                                              ...
  776:  op sub *tmp339 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  777:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label161                                              OreLocator.mnd: if shift > 0 then
  778:  jump *label162 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  779:  op shr :shiftMask:keep 0b1111111 *tmp326                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  780:  jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  781:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label164                                              ...
  782:  op shl *tmp346 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  783:  op or :shiftMask:keep :shiftMask:keep *tmp346                ...
  784:  op shl *tmp347 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  785:  op or :shiftMask:keep :shiftMask:keep *tmp347                ...
  786:  op shl *tmp348 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  787:  op or :shiftMask:keep :shiftMask:keep *tmp348                ...
  788:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label162                                              OreLocator.mnd: if shiftX != 0 then
  789:  set *tmp325 :shiftMask:mask                                  OreLocator.mnd: return mask;
        label *label157                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  790:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  791:  op sub *tmp350 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  792:  op sub *tmp351 .drillY :layoutThoriumDrillAtLocation:sy      ...
  793:  set :tryPlaceGenerator:centerX *tmp350                       ...
  794:  set :tryPlaceGenerator:centerY *tmp351                       ...
  795:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  796:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  797:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  798:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  799:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  800:  set :findPossiblePlacement:width 2                           ...
  801:  set :findPossiblePlacement:height 4                          ...
  802:  setaddr :findPossiblePlacement*retaddr *label446             ...
  803:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label446                                              ...
  804:  jump *label449 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  805:  jump *label447 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  806:  set :tryPlaceGenerator*retval false                          ...
  807:  jump *label463 always 0 0                                    ...
        label *label447                                              ...
  808:  op add *tmp185 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  809:  op add .water2X *tmp185 :findPossiblePlacement:x             ...
  810:  op add *tmp187 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  811:  op add .water2Y *tmp187 :findPossiblePlacement:y             ...
  812:  op add .generatorX *tmp185 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  813:  op add *tmp191 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  814:  op add .generatorY *tmp191 :findPossiblePlacement:y          ...
  815:  op shl *tmp193 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  816:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  817:  jump *label453 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label449                                              ...
  818:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  819:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  820:  set :findPossiblePlacement:width 4                           ...
  821:  set :findPossiblePlacement:height 2                          ...
  822:  setaddr :findPossiblePlacement*retaddr *label450             ...
  823:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label450                                              ...
  824:  jump *label451 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  825:  set :tryPlaceGenerator*retval false                          ...
  826:  jump *label463 always 0 0                                    ...
        label *label451                                              ...
  827:  op add *tmp197 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  828:  op add .water2X *tmp197 :findPossiblePlacement:x             ...
  829:  op add *tmp199 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  830:  op add .water2Y *tmp199 :findPossiblePlacement:y             ...
  831:  op add *tmp201 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  832:  op add .generatorX *tmp201 :findPossiblePlacement:x          ...
  833:  op add .generatorY *tmp199 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  834:  op shl *tmp205 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  835:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label453                                              OreLocator.mnd: if shift >= 0 then
  836:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  837:  set :findPossiblePlacement:placementMask 1                   ...
  838:  set :findPossiblePlacement:width 1                           ...
  839:  set :findPossiblePlacement:height 1                          ...
  840:  setaddr :findPossiblePlacement*retaddr *label454             ...
  841:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label454                                              ...
  842:  jump *label455 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  843:  set :tryPlaceGenerator*retval false                          ...
  844:  jump *label463 always 0 0                                    ...
        label *label455                                              ...
  845:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  846:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  847:  op shl *tmp211 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  848:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  849:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  850:  set :findPossiblePlacement:placementMask 1                   ...
  851:  set :findPossiblePlacement:width 1                           ...
  852:  set :findPossiblePlacement:height 1                          ...
  853:  setaddr :findPossiblePlacement*retaddr *label457             ...
  854:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label457                                              ...
  855:  jump *label458 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  856:  set :tryPlaceGenerator*retval false                          ...
  857:  jump *label463 always 0 0                                    ...
        label *label458                                              ...
  858:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  859:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  860:  op shl *tmp217 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  861:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  862:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  863:  set :findPossiblePlacement:placementMask 1                   ...
  864:  set :findPossiblePlacement:width 1                           ...
  865:  set :findPossiblePlacement:height 1                          ...
  866:  setaddr :findPossiblePlacement*retaddr *label460             ...
  867:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label460                                              ...
  868:  jump *label461 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  869:  set :tryPlaceGenerator*retval false                          ...
  870:  jump *label463 always 0 0                                    ...
        label *label461                                              ...
  871:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  872:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  873:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  874:  jump *label463 always 0 0                                    ...
        label *label463                                              OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  875:  jump *label167 equal :tryPlaceGenerator*retval false         ...
  876:  set :layoutThoriumDrillAtLocation*retval true                ...
  877:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label167                                              ...
  878:  multijump *tmp321 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label155                                         ...
  879:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  880:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  881:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  882:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  883:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  884:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  885:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  886:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  887:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  888:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  889:  setaddr :findDrillLocationLocal*retaddr *label170            ...
  890:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label170                                              ...
  891:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  892:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  893:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  894:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  895:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  896:  set :findDrillLocation*finished true                         ...
  897:  jump *label16 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  898:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  899:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  900:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  901:  set :findDrillLocationLocal:item @thorium                    ...
  902:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  903:  set :findDrillLocationLocal:size 3                           ...
  904:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  905:  setaddr :findDrillLocationLocal*retaddr *label172            ...
  906:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label172                                              ...
  907:  set .drillX :findDrillLocationLocal:dx                       ...
  908:  set .drillY :findDrillLocationLocal:dy                       ...
  909:  jump *label173 notEqual :findDrillLocationLocal*retval false ...
  910:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  911:  jump *label171 always 0 0                                    ...
        label *label173                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  912:  setaddr :layoutThoriumDrillAtLocation*retaddr *label175      OreLocator.mnd: layoutThoriumDrillAtLocation();
  913:  call *label13 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label175                                              ...
  914:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label171                                              ...
  915:  set :layoutThoriumDrill*finished true                        ...
  916:  jump *label16 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  917:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  918:  set .mapAction 0                                             ...
  919:  set .mapTotal 0                                              ...
  920:  set .mapProgress 0                                           ...
  921:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  922:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  923:  jump *label16 always 0 0                                     ...


Performance: parsed in 472 ms, compiled in 347 ms, optimized in 1,231 ms, run in 14 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp20 processor1 "*signature":
Variable 'processor1' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
