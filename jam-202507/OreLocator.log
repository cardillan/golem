   998 instructions before optimizations.
   101 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
    77 instructions eliminated by Dead Code Elimination (6 iterations).
     2 instructions eliminated by Jump Normalization (5 iterations).
    38 instructions eliminated by Jump Optimization (5 iterations).
    51 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    16 instructions modified by Expression Optimization (3 iterations).
     1 instructions eliminated by If Expression Optimization (4 iterations).
   168 instructions eliminated by Data Flow Optimization (14 passes, 47 iterations).
     1 loops improved by Loop Hoisting.
     1 instructions added by Loop Optimization (3 iterations).
    11 loops improved by Loop Optimization.
   158 instructions added by Loop Unrolling (18 iterations).
     3 loops unrolled by Loop Unrolling.
   265 instructions added by Function Inlining (18 iterations).
     9 function calls inlined by Function Inlining.
    11 instructions eliminated by Jump Straightening (5 iterations).
    15 instructions updated by Jump Threading.
    15 instructions eliminated by Unreachable Code Elimination (2 iterations).
   958 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 356):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:351:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:472:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:486:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:484:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:487:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:519:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 355):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:351:5                          size   +17, benefit     3900.0, efficiency    229.412
  * Unroll loop at OreLocator.mnd:472:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:486:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:484:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:487:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:519:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 328):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:351:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:486:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:519:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 327):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:351:5                          size   +17, benefit     3900.0, efficiency    229.412 (+17 instructions)
    Unroll loop at OreLocator.mnd:486:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:519:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 310):
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:486:5                          size   +87, benefit     9100.0, efficiency    104.598 (+95 instructions)
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:519:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 215):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:519:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 214):
  * Replicate loop condition at OreLocator.mnd:43:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:519:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 213):
    Unroll iteration loop at OreLocator.mnd:608:5                size   +81, benefit       19.0, efficiency      0.235
  * Inline function 'shiftMask' defined at OreLocator.mnd:274:1  size   +28, benefit      171.0, efficiency      6.107 (+18 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:316:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:519:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:616:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 195):
    Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +147, benefit      104.0, efficiency      0.707
  * Inline function call at OreLocator.mnd:483:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:519:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:614:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 163):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +251, benefit      832.0, efficiency      3.315
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +179, benefit      104.0, efficiency      0.581
  * Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +180, benefit        4.0, efficiency      0.022
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +180, benefit      100.0, efficiency      0.556
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 131):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +215, benefit      728.0, efficiency      3.386
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +211, benefit      104.0, efficiency      0.493
  * Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +212, benefit        4.0, efficiency      0.019
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +212, benefit      100.0, efficiency      0.472
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 101):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +179, benefit      624.0, efficiency      3.486
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +241, benefit      104.0, efficiency      0.432
  * Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +242, benefit        4.0, efficiency      0.017
    Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +242, benefit      100.0, efficiency      0.413
    Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 71):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +143, benefit      520.0, efficiency      3.636
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +271, benefit      104.0, efficiency      0.384
  * Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +272, benefit        4.0, efficiency      0.015
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +272, benefit      100.0, efficiency      0.368
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 40):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size  +107, benefit      416.0, efficiency      3.888
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +302, benefit      104.0, efficiency      0.344
  * Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +303, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +303, benefit      100.0, efficiency      0.330
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 9):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +71, benefit      312.0, efficiency      4.394
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +333, benefit      104.0, efficiency      0.312
  ! Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:487:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:519:28                size  +334, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +334, benefit      100.0, efficiency      0.299
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 44):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +63, benefit      312.0, efficiency      4.952
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +310, benefit      104.0, efficiency      0.335
  * Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250 (+28 instructions)
    Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
    Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:519:28                size  +311, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +311, benefit      100.0, efficiency      0.322
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 16):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:519:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Pass 3: speed optimization selection (cost limit 16):
  ! Unroll iteration loop at OreLocator.mnd:608:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:382:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:470:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:505:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:487:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:519:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:603:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:614:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:631:12                size   +97, benefit      137.5, efficiency      1.418

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-68 instructions):
 
   133 jump *label38 equal *tmp56 false
   134 set *tmp28 false
   135 jump *label28 always
-    * set *tmp57 null
   136 jump *label39 always
   137 label *label38
-    * set *tmp57 null
   138 label *label39
   139 op sub *tmp58 :locateOreAway:x .coreX
   140 op abs *tmp59 *tmp58
 
   156 label *label42
   157 set *tmp69 null
   158 label *label43
-    * set *tmp67 *tmp69
   159 jump *label41 always
   160 label *label40
-    * set *tmp67 null
   161 label *label41
   162 op greaterThanEq *tmp70 :locateOreAway:coreDist 8
   163 jump *label44 equal *tmp70 false
 
   188 jump *label52 equal *tmp86 false
   189 set *tmp74 true
   190 jump *label48 always
-    * set *tmp87 null
   191 jump *label53 always
   192 label *label52
-    * set *tmp87 null
   193 label *label53
   194 label *label50
   195 op add :visited:i :visited:i 1
 
   218 label *label46
   219 set *tmp73 null
   220 label *label47
-    * set *tmp71 *tmp73
   221 jump *label45 always
   222 label *label44
-    * set *tmp71 null
   223 label *label45
   224 label *label30
   225 jump *label29 always
 
   235 op greaterThan *tmp94 :findDrillLocationLocal:capacity 0
   236 set :findDrillLocationLocal*retval *tmp94
   237 jump *label19 always
-    * set *tmp93 null
   238 jump *label57 always
   239 label *label56
-    * set *tmp93 null
   240 label *label57
   241 op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
   242 jump *label58 equal *tmp95 false
   243 set *tmp97 .mapSpots
   244 op add .mapSpots .mapSpots 1
-    * set *tmp96 *tmp97
   245 jump *label59 always
   246 label *label58
-    * set *tmp96 null
   247 label *label59
   248 set :moveTo.3:x :findDrillLocationLocal:oreX
   249 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   296 op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
   297 jump *label69 equal *tmp119 false
   298 jump *label67 always
-    * set *tmp120 null
   299 jump *label70 always
   300 label *label69
-    * set *tmp120 null
   301 label *label70
   302 op greaterThan *tmp121 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   303 jump *label71 equal *tmp121 false
 
   307 op lessThan *tmp123 :findDrillLocationLocal:limit 1000
   308 jump *label73 equal *tmp123 false
   309 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp124 :findDrillLocationLocal:score
   310 jump *label74 always
   311 label *label73
-    * set *tmp124 null
   312 label *label74
   313 op greaterThanEq *tmp125 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   314 jump *label75 equal *tmp125 false
 
   329 op add .count .count 1
   330 set *tmp134 .count
   331 write :saveLocation:y bank1 *tmp134
-    * set *tmp136 .locations
   332 op add .locations .locations 1
   333 label *label77
   334 ucontrol unbind
 
   339 label *label75
   340 set *tmp126 null
   341 label *label76
-    * set *tmp122 *tmp126
   342 jump *label72 always
   343 label *label71
-    * set *tmp122 null
   344 label *label72
   345 op greaterThan *tmp137 :findDrillLocationLocal:score :findDrillLocationLocal:best
   346 jump *label78 equal *tmp137 false
   347 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   348 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   349 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp138 :findDrillLocationLocal:best
   350 jump *label79 always
   351 label *label78
-    * set *tmp138 null
   352 label *label79
   353 op lessThanEq *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:last
   354 jump *label80 equal *tmp139 false
   355 jump *label67 always
-    * set *tmp140 null
   356 jump *label81 always
   357 label *label80
-    * set *tmp140 null
   358 label *label81
   359 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   360 op mul *tmp141 :findDrillLocationLocal:diffX 1.1
 
   393 op add .count .count 1
   394 set *tmp158 .count
   395 write :saveLocation.1:y bank1 *tmp158
-    * set *tmp160 .locations
   396 op add .locations .locations 1
   397 label *label86
-    * set *tmp150 null
   398 jump *label85 always
   399 label *label84
-    * set *tmp150 null
   400 label *label85
   401 label *label26
   402 jump *label25 always
 
   414 jump *label88 equal *tmp165 false
   415 set :shiftMask*retval 0
   416 jump *label87 always
-    * set *tmp166 null
   417 jump *label89 always
   418 label *label88
-    * set *tmp166 null
   419 label *label89
   420 op mul *tmp167 7 :shiftMask:shiftY
   421 op add *tmp168 :shiftMask:shiftX *tmp167
 
   427 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   428 op shl *tmp173 *tmp172 :shiftMask:shift
   429 set :shiftMask:mask *tmp173
-    * set *tmp170 :shiftMask:mask
   430 jump *label91 always
   431 label *label90
   432 op sub *tmp174 0 :shiftMask:shift
   433 op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * set *tmp170 :shiftMask:mask
   434 label *label91
   435 op notEqual *tmp175 :shiftMask:shiftX 0
   436 jump *label92 equal *tmp175 false
 
   440 op greaterThan *tmp179 :shiftMask:shiftX 0
   441 jump *label94 equal *tmp179 false
   442 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp180 :shiftMask:keep
   443 jump *label95 always
   444 label *label94
-    * set *tmp180 null
   445 label *label95
   446 op shl *tmp181 :shiftMask:keep 7
   447 op or :shiftMask:keep :shiftMask:keep *tmp181
 
   450 op shl *tmp183 :shiftMask:keep 21
   451 op or :shiftMask:keep :shiftMask:keep *tmp183
   452 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp176 :shiftMask:mask
   453 jump *label93 always
   454 label *label92
-    * set *tmp176 null
   455 label *label93
   456 set :shiftMask*retval :shiftMask:mask
   457 jump *label87 always
 
   494 op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
   495 jump *label103 equal *tmp205 false
   496 jump *label102 always
-    * set *tmp206 null
   497 jump *label104 always
   498 label *label103
-    * set *tmp206 null
   499 label *label104
   500 op shl *tmp207 :createMatrixOfSize:matrix 7
   501 op or *tmp208 *tmp207 :createMatrixOfSize:row
 
   557 op add *tmp224 *tmp223 :findPossiblePlacement:x
   558 set :findPossiblePlacement*retval *tmp224
   559 jump *label106 always
-    * set *tmp221 null
   560 jump *label114 always
   561 label *label113
-    * set *tmp221 null
   562 label *label114
   563 op sub *tmp225 3 :findPossiblePlacement:width
   564 op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
   565 jump *label115 equal *tmp226 false
   566 jump *label112 always
-    * set *tmp227 null
   567 jump *label116 always
   568 label *label115
-    * set *tmp227 null
   569 label *label116
   570 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   571 label *label111
 
   576 op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
   577 jump *label117 equal *tmp229 false
   578 jump *label109 always
-    * set *tmp230 null
   579 jump *label118 always
   580 label *label117
-    * set *tmp230 null
   581 label *label118
   582 label *label108
   583 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   607 jump *label123 equal *tmp234 false
   608 set :tryPlaceGenerator*retval false
   609 jump *label119 always
-    * set *tmp235 null
   610 jump *label124 always
   611 label *label123
-    * set *tmp235 null
   612 label *label124
   613 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   614 op add *tmp237 *tmp236 :tryPlaceGenerator:c
 
   624 set .generatorY *tmp243
   625 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   626 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   627 jump *label122 always
   628 label *label121
   629 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   641 jump *label126 equal *tmp246 false
   642 set :tryPlaceGenerator*retval false
   643 jump *label119 always
-    * set *tmp247 null
   644 jump *label127 always
   645 label *label126
-    * set *tmp247 null
   646 label *label127
   647 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   648 op add *tmp249 *tmp248 :tryPlaceGenerator:c
 
   658 set .generatorY *tmp255
   659 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   660 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
-    * set *tmp233 :tryPlaceGenerator:terrainMask
   661 label *label122
   662 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   663 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   675 jump *label129 equal *tmp258 false
   676 set :tryPlaceGenerator*retval false
   677 jump *label119 always
-    * set *tmp259 null
   678 jump *label130 always
   679 label *label129
-    * set *tmp259 null
   680 label *label130
   681 op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   682 set .panelX *tmp260
 
   699 jump *label132 equal *tmp264 false
   700 set :tryPlaceGenerator*retval false
   701 jump *label119 always
-    * set *tmp265 null
   702 jump *label133 always
   703 label *label132
-    * set *tmp265 null
   704 label *label133
   705 op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   706 set .batteryX *tmp266
 
   743 jump *label137 equal *tmp290 false
   744 set :tryPlaceGenerator*retval false
   745 jump *label119 always
-    * set *tmp291 null
   746 jump *label138 always
   747 label *label137
-    * set *tmp291 null
   748 label *label138
   749 op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   750 set .node2X *tmp292
 
   752 set .node2Y *tmp293
   753 op shl *tmp294 1 :tryPlaceGenerator:shift
   754 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * set *tmp288 :tryPlaceGenerator:terrainMask
   755 jump *label135 always
   756 label *label134
-    * set *tmp288 null
   757 label *label135
   758 set :tryPlaceGenerator*retval true
   759 jump *label119 always
 
   917 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   918 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   919 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * set *tmp331 :layoutThoriumDrillAtLocation:cornersMask
   920 jump *label161 always
   921 label *label160
-    * set *tmp331 null
   922 label *label161
   923 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   924 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   941 set .containerY *tmp344
   942 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   943 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * set *tmp340 :layoutThoriumDrillAtLocation:terrainMask
   944 jump *label164 always
   945 label *label163
-    * set *tmp340 null
   946 label *label164
   947 op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   948 set :layoutThoriumDrillAtLocation:nodeMask *tmp346
 
   961 jump *label166 equal *tmp348 false
   962 set :layoutThoriumDrillAtLocation*retval false
   963 jump *label153 always
-    * set *tmp349 null
   964 jump *label167 always
   965 label *label166
-    * set *tmp349 null
   966 label *label167
   967 op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
   968 set .node1X *tmp350
 
   984 jump *label169 equal *tmp353 false
   985 set :layoutThoriumDrillAtLocation*retval true
   986 jump *label153 always
-    * set *tmp354 null
   987 jump *label170 always
   988 label *label169
-    * set *tmp354 null
   989 label *label170
   990 set :layoutThoriumDrillAtLocation:sx 3
   991 set :layoutThoriumDrillAtLocation:sy 3
 
  1041 jump *label181 equal *tmp363 false
  1042 set :layoutThoriumDrillAtLocation*retval true
  1043 jump *label153 always
-    * set *tmp364 null
  1044 jump *label182 always
  1045 label *label181
-    * set *tmp364 null
  1046 label *label182
  1047 label *label172
  1048 multijump *tmp355 0 0 (m:marker0)
 
  1092 jump *label187 equal *tmp365 false
  1093 set :layoutThoriumDrill*retval false
  1094 jump *label185 always
-    * set *tmp366 null
  1095 jump *label188 always
  1096 label *label187
-    * set *tmp366 null
  1097 label *label188
  1098 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)
  1099 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label189) (h:*label189)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   151 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
   152 jump *label42 equal *tmp68 false
   153 jump *label30 always
-    * set *tmp69 null
   154 jump *label43 always
   155 label *label42
-    * set *tmp69 null
   156 label *label43
   157 jump *label41 always
   158 label *label40
 
   211 label *label54
   212 set *tmp89 null
   213 label *label55
-    * set *tmp73 *tmp89
   214 jump *label47 always
   215 label *label46
-    * set *tmp73 null
   216 label *label47
   217 jump *label45 always
   218 label *label44
 
   236 label *label57
   237 op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
   238 jump *label58 equal *tmp95 false
-    * set *tmp97 .mapSpots
   239 op add .mapSpots .mapSpots 1
   240 jump *label59 always
   241 label *label58
 
   329 ucontrol unbind
   330 set :findDrillLocationLocal*retval true
   331 jump *label19 always
-    * set *tmp126 null
   332 jump *label76 always
   333 label *label75
-    * set *tmp126 null
   334 label *label76
   335 jump *label72 always
   336 label *label71

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   206 printflush message1
   207 set *tmp28 true
   208 jump *label28 always
-    * set *tmp89 null
   209 jump *label55 always
   210 label *label54
-    * set *tmp89 null
   211 label *label55
   212 jump *label47 always
   213 label *label46

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-101 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp12 .locations
-    * set .locationsStart *tmp12
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    50 label *label21
    51 label *label20
    52 op div *tmp21 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp22 *tmp21 2
-    * set .mapTotal *tmp22
+   53 op pow .mapTotal *tmp21 2
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
 
    59 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    60 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    61 op sub *tmp23 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp24 *tmp23 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp24
-    * op min *tmp25 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp25
+   62 op mul :findDrillLocationLocal:maxDistance *tmp23 .attenuationRate
+   63 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    64 op div *tmp26 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp27 *tmp26 2
-    * set .mapTotal *tmp27
+   65 op pow .mapTotal *tmp26 2
    66 set :locateOreAway:ore :findDrillLocationLocal:item
    67 set :locateOreAway:x :findDrillLocationLocal:oreX
    68 set :locateOreAway:y :findDrillLocationLocal:oreY
    69 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp29 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp29
+   70 op mul :locateOreAway:distance 3.8197185279121366 .angle
    71 set :locateOreAway:lastX -1
    72 set :locateOreAway:lastY -1
-    * op max *tmp30 .angle @pi
-    * set .angle *tmp30
-    * op mul *tmp31 .angle .angle
-    * set .mapProgress *tmp31
+   73 op max .angle .angle @pi
+   74 op mul .mapProgress .angle .angle
    75 label *label29
    76 op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
    77 jump *label31 equal *tmp32 false
-    * op div *tmp33 .angle @degToRad
-    * set :locateOreAway:a *tmp33
+   78 op div :locateOreAway:a .angle @degToRad
    79 op sin *tmp34 :locateOreAway:a
    80 op mul *tmp35 *tmp34 :locateOreAway:distance
    81 op add *tmp36 .coreX *tmp35
 
    84 set :limit:low 5
    85 set :limit:high *tmp37
    86 op max *tmp39 :limit:value :limit:low
-    * op min *tmp40 *tmp39 :limit:high
-    * set *tmp38 *tmp40
+   87 op min *tmp38 *tmp39 :limit:high
    88 label *label32
    89 set :locateOreAway:lx *tmp38
    90 op cos *tmp41 :locateOreAway:a
 
    95 set :limit.1:low 5
    96 set :limit.1:high *tmp44
    97 op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp47 *tmp46 :limit.1:high
-    * set *tmp45 *tmp47
+   98 op min *tmp45 *tmp46 :limit.1:high
    99 label *label33
   100 set :locateOreAway:ly *tmp45
   101 set :moveTo.2:x :locateOreAway:lx
 
   113 label *label34
   114 op div *tmp51 3.8197185279121366 :locateOreAway:distance
   115 op add .angle .angle *tmp51
-    * op mul *tmp52 .angle .angle
-    * set .mapProgress *tmp52
-    * op mul *tmp53 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp53
+  116 op mul .mapProgress .angle .angle
+  117 op mul :locateOreAway:distance 3.8197185279121366 .angle
   118 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   119 op equal *tmp56 *tmp54 false
   120 jump *label38 equal *tmp56 false
 
   127 op abs *tmp59 *tmp58
   128 op sub *tmp60 :locateOreAway:y .coreY
   129 op abs *tmp61 *tmp60
-    * op max *tmp62 *tmp59 *tmp61
-    * set :locateOreAway:coreDist *tmp62
+  130 op max :locateOreAway:coreDist *tmp59 *tmp61
   131 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   132 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp65 *tmp63 *tmp64
-    * set :locateOreAway:unitDist *tmp65
+  133 op len :locateOreAway:unitDist *tmp63 *tmp64
   134 op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
   135 jump *label40 equal *tmp66 false
   136 op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
 
   154 set :visited:i .locationsStart
   155 label *label49
   156 jump *label51 greaterThanEq :visited:i *tmp75
-    * op mul *tmp76 4 :visited:i
-    * set :visited:index *tmp76
-    * op add *tmp77 :visited:index 2
-    * set *tmp78 *tmp77
-    * read *tmp79 bank1 *tmp78
-    * set :visited:lx *tmp79
-    * op add *tmp80 :visited:index 3
-    * set *tmp81 *tmp80
-    * read *tmp82 bank1 *tmp81
-    * set :visited:ly *tmp82
+  157 op mul :visited:index 4 :visited:i
+  158 op add *tmp78 :visited:index 2
+  159 read :visited:lx bank1 *tmp78
+  160 op add *tmp81 :visited:index 3
+  161 read :visited:ly bank1 *tmp81
   162 op sub *tmp83 :visited:x :visited:lx
   163 op sub *tmp84 :visited:y :visited:ly
   164 op len *tmp85 *tmp83 *tmp84
 
   181 jump *label54 equal *tmp88 false
   182 op div *tmp90 7.639437055824273 :locateOreAway:distance
   183 op add .angle .angle *tmp90
-    * op mul *tmp91 .angle .angle
-    * set .mapProgress *tmp91
+  184 op mul .mapProgress .angle .angle
   185 printflush message1
   186 set *tmp28 true
   187 jump *label28 always
 
   205 set :findDrillLocationLocal:oreY :locateOreAway:y
   206 op equal *tmp92 *tmp28 false
   207 jump *label56 equal *tmp92 false
-    * op greaterThan *tmp94 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp94
+  208 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   209 jump *label19 always
   210 jump *label57 always
   211 label *label56
 
   248 wait 1e-15
   249 read *tmp110 processor4 ":findBestPosition*finished"
   250 jump *label68 equal *tmp110 false
-    * read *tmp108 processor4 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp108
-    * read *tmp109 processor4 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp109
-    * read *tmp111 processor4 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp111
-    * op add *tmp112 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:newX *tmp112
-    * op add *tmp113 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:newY *tmp113
+  251 read :findDrillLocationLocal:diffX processor4 ":findBestPosition:bestX"
+  252 read :findDrillLocationLocal:diffY processor4 ":findBestPosition:bestY"
+  253 read :findDrillLocationLocal:score processor4 ":findBestPosition*retval"
+  254 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  255 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   256 op sub *tmp114 :findDrillLocationLocal:newX .coreX
   257 op abs *tmp115 *tmp114
   258 op sub *tmp116 :findDrillLocationLocal:newY .coreY
   259 op abs *tmp117 *tmp116
-    * op max *tmp118 *tmp115 *tmp117
-    * set :findDrillLocationLocal:coreDist *tmp118
+  260 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   261 op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
   262 jump *label69 equal *tmp119 false
   263 jump *label67 always
 
   286 sensor *tmp129 :saveLocation:item @id
   287 write *tmp129 bank1 *tmp127
   288 op add .count .count 1
-    * set *tmp130 .count
-    * write :saveLocation:value bank1 *tmp130
+  289 write :saveLocation:value bank1 .count
   290 op add .count .count 1
-    * set *tmp132 .count
-    * write :saveLocation:x bank1 *tmp132
+  291 write :saveLocation:x bank1 .count
   292 op add .count .count 1
-    * set *tmp134 .count
-    * write :saveLocation:y bank1 *tmp134
+  293 write :saveLocation:y bank1 .count
   294 op add .locations .locations 1
   295 label *label77
   296 ucontrol unbind
 
   317 label *label80
   318 label *label81
   319 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp141 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp141
+  320 op mul :round:x :findDrillLocationLocal:diffX 1.1
   321 op add *tmp143 :round:x 0.5
-    * op floor *tmp144 *tmp143
-    * set *tmp142 *tmp144
+  322 op floor *tmp142 *tmp143
   323 label *label82
   324 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp142
-    * op mul *tmp145 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp145
+  325 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   326 op add *tmp147 :round.1:x 0.5
-    * op floor *tmp148 *tmp147
-    * set *tmp146 *tmp148
+  327 op floor *tmp146 *tmp147
   328 label *label83
   329 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
   330 label *label66
 
   341 sensor *tmp153 :saveLocation.1:item @id
   342 write *tmp153 bank1 *tmp151
   343 op add .count .count 1
-    * set *tmp154 .count
-    * write :saveLocation.1:value bank1 *tmp154
+  344 write :saveLocation.1:value bank1 .count
   345 op add .count .count 1
-    * set *tmp156 .count
-    * write :saveLocation.1:x bank1 *tmp156
+  346 write :saveLocation.1:x bank1 .count
   347 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:y bank1 *tmp158
+  348 write :saveLocation.1:y bank1 .count
   349 op add .locations .locations 1
   350 label *label86
   351 jump *label85 always
 
   371 label *label88
   372 label *label89
   373 op mul *tmp167 7 :shiftMask:shiftY
-    * op add *tmp168 :shiftMask:shiftX *tmp167
-    * set :shiftMask:shift *tmp168
+  374 op add :shiftMask:shift :shiftMask:shiftX *tmp167
   375 op greaterThan *tmp169 :shiftMask:shift 0
   376 jump *label90 equal *tmp169 false
-    * op shr *tmp171 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp171
+  377 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   378 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp173 *tmp172 :shiftMask:shift
-    * set :shiftMask:mask *tmp173
+  379 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   380 jump *label91 always
   381 label *label90
   382 op sub *tmp174 0 :shiftMask:shift
 
   385 op notEqual *tmp175 :shiftMask:shiftX 0
   386 jump *label92 equal *tmp175 false
   387 op abs *tmp177 :shiftMask:shiftX
-    * op shr *tmp178 0b1111111 *tmp177
-    * set :shiftMask:keep *tmp178
+  388 op shr :shiftMask:keep 0b1111111 *tmp177
   389 op greaterThan *tmp179 :shiftMask:shiftX 0
   390 jump *label94 equal *tmp179 false
   391 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   414 op idiv *tmp186 *tmp185 2
   415 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   416 op abs *tmp188 *tmp187
-    * op sub *tmp189 *tmp186 *tmp188
-    * set :excludeArea:overlapX *tmp189
+  417 op sub :excludeArea:overlapX *tmp186 *tmp188
   418 op add *tmp190 :excludeArea:areaHeight 7
   419 op add *tmp191 *tmp190 1
   420 op idiv *tmp192 *tmp191 2
   421 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   422 op abs *tmp194 *tmp193
-    * op sub *tmp195 *tmp192 *tmp194
-    * set :excludeArea:overlapY *tmp195
+  423 op sub :excludeArea:overlapY *tmp192 *tmp194
   424 op greaterThan *tmp196 :excludeArea:overlapX 0
   425 op greaterThan *tmp197 :excludeArea:overlapY 0
   426 op land *tmp198 *tmp196 *tmp197
   427 jump *label97 equal *tmp198 false
-    * op min *tmp200 7 :excludeArea:overlapX
-    * set :excludeArea:blockSizeX *tmp200
-    * op min *tmp201 7 :excludeArea:overlapY
-    * set :excludeArea:blockSizeY *tmp201
+  428 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
+  429 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   430 set :createMatrixOfSize:width :excludeArea:blockSizeX
   431 set :createMatrixOfSize:height :excludeArea:blockSizeY
   432 op shl *tmp203 1 :createMatrixOfSize:width
-    * op sub *tmp204 *tmp203 1
-    * set :createMatrixOfSize:row *tmp204
+  433 op sub :createMatrixOfSize:row *tmp203 1
   434 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   435 set :createMatrixOfSize:i 1
   436 label *label100
 
   442 label *label103
   443 label *label104
   444 op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or *tmp208 *tmp207 :createMatrixOfSize:row
-    * set :createMatrixOfSize:matrix *tmp208
+  445 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   446 label *label101
   447 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   448 jump *label100 always
 
   454 set :excludeArea:blocked *tmp202
   455 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   456 op sub *tmp210 7 :excludeArea:blockSizeX
-    * op mul *tmp211 *tmp209 *tmp210
-    * set :excludeArea:shiftX *tmp211
+  457 op mul :excludeArea:shiftX *tmp209 *tmp210
   458 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   459 op sub *tmp213 7 :excludeArea:blockSizeY
-    * op mul *tmp214 *tmp212 *tmp213
-    * set :excludeArea:shiftY *tmp214
+  460 op mul :excludeArea:shiftY *tmp212 *tmp213
   461 set :shiftMask:mask :excludeArea:blocked
   462 set :shiftMask:shiftX :excludeArea:shiftX
   463 set :shiftMask:shiftY :excludeArea:shiftY
 
   465 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   466 label *label105
   467 set :excludeArea:shifted :shiftMask*retval
-    * op or *tmp215 :excludeArea:mask :excludeArea:shifted
-    * set :excludeArea*retval *tmp215
+  468 op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
   469 jump *label96 always
   470 set *tmp199 null
   471 jump *label98 always
 
   484 jump *label109 greaterThan :findPossiblePlacement:y 3
   485 op add *tmp216 :findPossiblePlacement:y 3
   486 op mul *tmp217 7 *tmp216
-    * op shl *tmp218 :findPossiblePlacement:placementMask *tmp217
-    * set :findPossiblePlacement:mask *tmp218
+  487 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   488 set :findPossiblePlacement:x -3
   489 label *label110
   490 jump *label112 greaterThan :findPossiblePlacement:x 3
 
   493 jump *label113 equal *tmp220 false
   494 op mul *tmp222 :findPossiblePlacement:y 7
   495 op add *tmp223 24 *tmp222
-    * op add *tmp224 *tmp223 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp224
+  496 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   497 jump *label106 always
   498 jump *label114 always
   499 label *label113
 
   537 label *label120
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp231 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp231
+  540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   541 op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
   542 jump *label121 equal *tmp232 false
   543 op lessThan *tmp234 :tryPlaceGenerator:shift 0
 
   548 label *label123
   549 label *label124
   550 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp237 *tmp236 :tryPlaceGenerator:c
-    * set .water2X *tmp237
+  551 op add .water2X *tmp236 :tryPlaceGenerator:c
   552 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp239 *tmp238 :tryPlaceGenerator:r
-    * set .water2Y *tmp239
+  553 op add .water2Y *tmp238 :tryPlaceGenerator:r
   554 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp241 *tmp240 :tryPlaceGenerator:c
-    * set .generatorX *tmp241
+  555 op add .generatorX *tmp240 :tryPlaceGenerator:c
   556 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp243 *tmp242 :tryPlaceGenerator:r
-    * set .generatorY *tmp243
+  557 op add .generatorY *tmp242 :tryPlaceGenerator:r
   558 op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   559 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   560 jump *label122 always
 
   568 label *label125
   569 set :tryPlaceGenerator:c :findPossiblePlacement:x
   570 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp245 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp245
+  571 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   572 op lessThan *tmp246 :tryPlaceGenerator:shift 0
   573 jump *label126 equal *tmp246 false
   574 set :tryPlaceGenerator*retval false
 
   577 label *label126
   578 label *label127
   579 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp249 *tmp248 :tryPlaceGenerator:c
-    * set .water2X *tmp249
+  580 op add .water2X *tmp248 :tryPlaceGenerator:c
   581 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp251 *tmp250 :tryPlaceGenerator:r
-    * set .water2Y *tmp251
+  582 op add .water2Y *tmp250 :tryPlaceGenerator:r
   583 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp253 *tmp252 :tryPlaceGenerator:c
-    * set .generatorX *tmp253
+  584 op add .generatorX *tmp252 :tryPlaceGenerator:c
   585 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp255 *tmp254 :tryPlaceGenerator:r
-    * set .generatorY *tmp255
+  586 op add .generatorY *tmp254 :tryPlaceGenerator:r
   587 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   588 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   589 label *label122
 
   597 label *label128
   598 set :tryPlaceGenerator:c :findPossiblePlacement:x
   599 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp257 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp257
+  600 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   601 op lessThan *tmp258 :tryPlaceGenerator:shift 0
   602 jump *label129 equal *tmp258 false
   603 set :tryPlaceGenerator*retval false
 
   605 jump *label130 always
   606 label *label129
   607 label *label130
-    * op add *tmp260 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp260
-    * op add *tmp261 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp261
+  608 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  609 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   610 op shl *tmp262 1 :tryPlaceGenerator:shift
   611 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   612 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   618 label *label131
   619 set :tryPlaceGenerator:c :findPossiblePlacement:x
   620 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp263 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp263
+  621 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   622 op lessThan *tmp264 :tryPlaceGenerator:shift 0
   623 jump *label132 equal *tmp264 false
   624 set :tryPlaceGenerator*retval false
 
   626 jump *label133 always
   627 label *label132
   628 label *label133
-    * op add *tmp266 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp266
-    * op add *tmp267 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp267
+  629 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  630 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   631 op shl *tmp268 1 :tryPlaceGenerator:shift
   632 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   633 op sub *tmp269 .water2X .node1X
 
   659 label *label136
   660 set :tryPlaceGenerator:c :findPossiblePlacement:x
   661 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp289 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp289
+  662 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   663 op lessThan *tmp290 :tryPlaceGenerator:shift 0
   664 jump *label137 equal *tmp290 false
   665 set :tryPlaceGenerator*retval false
 
   667 jump *label138 always
   668 label *label137
   669 label *label138
-    * op add *tmp292 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .node2X *tmp292
-    * op add *tmp293 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .node2Y *tmp293
+  670 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  671 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   672 op shl *tmp294 1 :tryPlaceGenerator:shift
   673 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
   674 jump *label135 always
 
   688 op shl *tmp295 :createBlockMaskRow:result 1
   689 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   690 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or *tmp300 *tmp295 *tmp297
-    * set :createBlockMaskRow:result *tmp300
+  691 op or :createBlockMaskRow:result *tmp295 *tmp297
   692 label *label141
   693 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   694 jump *label140 always
 
   714 setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
   715 call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
   716 label *label145
-    * set *tmp306 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp306
+  717 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   718 op add *tmp307 :createAdjacentMask:y 3
   719 set :createBlockMaskRow:x :createAdjacentMask:x
   720 set :createBlockMaskRow:y *tmp307
   721 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   722 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   723 label *label146
-    * set *tmp308 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp308
+  724 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   725 set :createAdjacentMask:r 2
   726 label *label147
   727 jump *label149 lessThan :createAdjacentMask:r -4
 
   731 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   732 call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   733 label *label150
-    * set *tmp310 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp310
+  734 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   735 op shl *tmp311 :createAdjacentMask:row1 1
   736 op or *tmp312 :createAdjacentMask:row2 *tmp311
   737 op shr *tmp313 :createAdjacentMask:row1 1
   738 op or *tmp314 *tmp312 *tmp313
-    * op or *tmp315 *tmp314 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp315
+  739 op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
   740 op shl *tmp316 :createAdjacentMask:result 7
   741 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or *tmp318 *tmp316 *tmp317
-    * set :createAdjacentMask:result *tmp318
+  742 op or :createAdjacentMask:result *tmp316 *tmp317
   743 set :createAdjacentMask:row2 :createAdjacentMask:row1
   744 set :createAdjacentMask:row1 :createAdjacentMask:row0
   745 label *label148
   746 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   747 jump *label147 always
   748 label *label149
-    * op shr *tmp319 :createAdjacentMask:result 1
-    * set *tmp304 *tmp319
+  749 op shr *tmp304 :createAdjacentMask:result 1
   750 label *label144
   751 set :createCombinedMask:adjacentMask *tmp304
   752 label *label151
   753 wait 1e-15
   754 read *tmp320 processor4 ":createTerrainMask*finished"
   755 jump *label151 equal *tmp320 false
-    * read *tmp321 processor4 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp321
-    * op or *tmp322 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :excludeArea:mask *tmp322
+  756 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
+  757 op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   758 set :excludeArea:maskX :createCombinedMask:x
   759 set :excludeArea:maskY :createCombinedMask:y
   760 set :excludeArea:areaX .coreX
 
   797 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
   798 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   799 label *label158
-    * set *tmp326 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp326
-    * op or *tmp327 :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp327
-    * op or *tmp328 :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp328
+  800 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
+  801 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  802 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   803 set :layoutThoriumDrillAtLocation:mask2x2 387
   804 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   805 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   810 label *label159
   811 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   812 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp329 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp329
+  813 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   814 op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
   815 jump *label160 equal *tmp330 false
   816 op add *tmp332 .drillX 0.5
-    * op add *tmp333 *tmp332 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp333
+  817 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   818 op add *tmp334 .drillY 0.5
-    * op add *tmp335 *tmp334 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp335
+  819 op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
   820 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   821 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   822 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   833 label *label162
   834 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   835 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp338 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp338
+  836 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   837 op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
   838 jump *label163 equal *tmp339 false
   839 op add *tmp341 .drillX 0.5
-    * op add *tmp342 *tmp341 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp342
+  840 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   841 op add *tmp343 .drillY 0.5
-    * op add *tmp344 *tmp343 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp344
+  842 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   843 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   844 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   845 jump *label164 always
   846 label *label163
   847 label *label164
-    * op or *tmp346 :layoutThoriumDrillAtLocation:terrainMask 437639987601635
-    * set :layoutThoriumDrillAtLocation:nodeMask *tmp346
+  848 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   849 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   850 set :findPossiblePlacement:placementMask 1
   851 set :findPossiblePlacement:width 1
 
   855 label *label165
   856 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   857 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp347 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp347
+  858 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   859 op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
   860 jump *label166 equal *tmp348 false
   861 set :layoutThoriumDrillAtLocation*retval false
 
   863 jump *label167 always
   864 label *label166
   865 label *label167
-    * op add *tmp350 .drillX :layoutThoriumDrillAtLocation:c
-    * set .node1X *tmp350
-    * op add *tmp351 .drillY :layoutThoriumDrillAtLocation:r
-    * set .node1Y *tmp351
+  866 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
+  867 op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
   868 op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
   869 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   870 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
 
   877 setaddr :tryPlaceGenerator*retaddr *label168 (h:*label168)
   878 call *label12 *invalid :tryPlaceGenerator*retval (m:*label168) (h:*label168)
   879 label *label168
-    * set *tmp353 :tryPlaceGenerator*retval
-    * jump *label169 equal *tmp353 false
+  880 jump *label169 equal :tryPlaceGenerator*retval false
   881 set :layoutThoriumDrillAtLocation*retval true
   882 jump *label153 always
   883 jump *label170 always
 
   902 set :layoutThoriumDrillAtLocation:sy -3
   903 setaddr *tmp355 *label177
   904 label *label171
-    * op sub *tmp356 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp356
-    * op sub *tmp357 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp357
+  905 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  906 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   907 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   908 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   909 setaddr :createCombinedMask*retaddr *label178 (h:*label178)
   910 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   911 label *label178
-    * set *tmp358 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp358
+  912 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   913 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   914 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   915 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   916 setaddr :shiftMask*retaddr *label179 (h:*label179)
   917 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   918 label *label179
-    * set *tmp359 :shiftMask*retval
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp359
-    * op or *tmp360 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp360
+  919 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
+  920 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   921 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   922 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   923 set :tryPlaceGenerator:centerX *tmp361
 
   928 setaddr :tryPlaceGenerator*retaddr *label180 (h:*label180)
   929 call *label12 *invalid :tryPlaceGenerator*retval (m:*label180) (h:*label180)
   930 label *label180
-    * set *tmp363 :tryPlaceGenerator*retval
-    * jump *label181 equal *tmp363 false
+  931 jump *label181 equal :tryPlaceGenerator*retval false
   932 set :layoutThoriumDrillAtLocation*retval true
   933 jump *label153 always
   934 jump *label182 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
-    * jump *label27 equal true false
    57 set :findDrillLocationLocal:best -1
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   235 label *label60
   236 set :findDrillLocationLocal:last 0
   237 label *label65
-    * jump *label67 equal true false
   238 write @unit processor4 ":findBestPosition:unit"
   239 write :findDrillLocationLocal:oreX processor4 ":findBestPosition:x"
   240 write :findDrillLocationLocal:oreY processor4 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-38 instructions):
 
    40 set :moveTo.1:radius 6
    41 label *label22
    42 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
-    * op equal *tmp19 *tmp18 false
-    * jump *label24 equal *tmp19 false
+   43 jump *label24 notEqual *tmp18 false
    44 op sub *tmp20 :moveTo.1:radius 0.5
    45 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
    46 label *label23
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * op lessThan *tmp32 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label31 equal *tmp32 false
+   74 jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp34 :locateOreAway:a
    77 op mul *tmp35 *tmp34 :locateOreAway:distance
 
   100 set :moveTo.2:radius 5
   101 label *label35
   102 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
-    * op equal *tmp49 *tmp48 false
-    * jump *label37 equal *tmp49 false
+  103 jump *label37 notEqual *tmp48 false
   104 op sub *tmp50 :moveTo.2:radius 0.5
   105 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
   106 label *label36
 
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
   114 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
-    * op equal *tmp56 *tmp54 false
-    * jump *label38 equal *tmp56 false
+  115 jump *label38 notEqual *tmp54 false
   116 set *tmp28 false
   117 jump *label28 always
   118 jump *label39 always
 
   126 op sub *tmp63 :locateOreAway:x :locateOreAway:lx
   127 op sub *tmp64 :locateOreAway:y :locateOreAway:ly
   128 op len :locateOreAway:unitDist *tmp63 *tmp64
-    * op equal *tmp66 :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 equal *tmp66 false
-    * op equal *tmp68 :locateOreAway:lastY :locateOreAway:y
-    * jump *label42 equal *tmp68 false
+  129 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
+  130 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   131 jump *label30 always
   132 jump *label43 always
   133 label *label42
 
   135 jump *label41 always
   136 label *label40
   137 label *label41
-    * op greaterThanEq *tmp70 :locateOreAway:coreDist 8
-    * jump *label44 equal *tmp70 false
-    * op lessThan *tmp72 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label46 equal *tmp72 false
+  138 jump *label44 lessThan :locateOreAway:coreDist 8
+  139 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   140 set :locateOreAway:lastX :locateOreAway:x
   141 set :locateOreAway:lastY :locateOreAway:y
   142 set :visited:x :locateOreAway:x
 
   153 op sub *tmp83 :visited:x :visited:lx
   154 op sub *tmp84 :visited:y :visited:ly
   155 op len *tmp85 *tmp83 *tmp84
-    * op lessThan *tmp86 *tmp85 7
-    * jump *label52 equal *tmp86 false
+  156 jump *label52 greaterThanEq *tmp85 7
   157 set *tmp74 true
   158 jump *label48 always
   159 jump *label53 always
 
   167 jump *label48 always
   168 set *tmp74 null
   169 label *label48
-    * op equal *tmp88 *tmp74 false
-    * jump *label54 equal *tmp88 false
+  170 jump *label54 notEqual *tmp74 false
   171 op div *tmp90 7.639437055824273 :locateOreAway:distance
   172 op add .angle .angle *tmp90
   173 op mul .mapProgress .angle .angle
 
   192 label *label28
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp92 *tmp28 false
-    * jump *label56 equal *tmp92 false
+  195 jump *label56 notEqual *tmp28 false
   196 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   197 jump *label19 always
   198 jump *label57 always
   199 label *label56
   200 label *label57
-    * op greaterThanEq *tmp95 :findDrillLocationLocal:limit 1000
-    * jump *label58 equal *tmp95 false
+  201 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   202 op add .mapSpots .mapSpots 1
   203 jump *label59 always
   204 label *label58
 
   212 set :moveTo.4:radius 6
   213 label *label62
   214 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
-    * op equal *tmp101 *tmp100 false
-    * jump *label64 equal *tmp101 false
+  215 jump *label64 notEqual *tmp100 false
   216 op sub *tmp102 :moveTo.4:radius 0.5
   217 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
   218 label *label63
 
   243 op sub *tmp116 :findDrillLocationLocal:newY .coreY
   244 op abs *tmp117 *tmp116
   245 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
-    * op lessThanEq *tmp119 :findDrillLocationLocal:coreDist 8
-    * jump *label69 equal *tmp119 false
+  246 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   247 jump *label67 always
   248 jump *label70 always
   249 label *label69
   250 label *label70
-    * op greaterThan *tmp121 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label71 equal *tmp121 false
+  251 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   252 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   253 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   254 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp123 :findDrillLocationLocal:limit 1000
-    * jump *label73 equal *tmp123 false
+  255 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   256 set .mapSpots :findDrillLocationLocal:score
   257 jump *label74 always
   258 label *label73
   259 label *label74
-    * op greaterThanEq *tmp125 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label75 equal *tmp125 false
+  260 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   261 set :saveLocation:item :findDrillLocationLocal:item
   262 set :saveLocation:value :findDrillLocationLocal:score
   263 set :saveLocation:x :findDrillLocationLocal:dx
 
   283 jump *label72 always
   284 label *label71
   285 label *label72
-    * op greaterThan *tmp137 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label78 equal *tmp137 false
+  286 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   287 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   288 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   289 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   290 jump *label79 always
   291 label *label78
   292 label *label79
-    * op lessThanEq *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label80 equal *tmp139 false
+  293 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   294 jump *label67 always
   295 jump *label81 always
   296 label *label80
 
   309 label *label66
   310 jump *label65 always
   311 label *label67
-    * op greaterThanEq *tmp149 :findDrillLocationLocal:best 0
-    * jump *label84 equal *tmp149 false
+  312 jump *label84 lessThan :findDrillLocationLocal:best 0
   313 set :saveLocation.1:item :findDrillLocationLocal:item
   314 set :saveLocation.1:value :findDrillLocationLocal:best
   315 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   350 label *label89
   351 op mul *tmp167 7 :shiftMask:shiftY
   352 op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * op greaterThan *tmp169 :shiftMask:shift 0
-    * jump *label90 equal *tmp169 false
+  353 jump *label90 lessThanEq :shiftMask:shift 0
   354 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   355 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
   356 op shl :shiftMask:mask *tmp172 :shiftMask:shift
 
   359 op sub *tmp174 0 :shiftMask:shift
   360 op shr :shiftMask:mask :shiftMask:mask *tmp174
   361 label *label91
-    * op notEqual *tmp175 :shiftMask:shiftX 0
-    * jump *label92 equal *tmp175 false
+  362 jump *label92 equal :shiftMask:shiftX 0
   363 op abs *tmp177 :shiftMask:shiftX
   364 op shr :shiftMask:keep 0b1111111 *tmp177
-    * op greaterThan *tmp179 :shiftMask:shiftX 0
-    * jump *label94 equal *tmp179 false
+  365 jump *label94 lessThanEq :shiftMask:shiftX 0
   366 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   367 jump *label95 always
   368 label *label94
 
   410 set :createMatrixOfSize:i 1
   411 label *label100
   412 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * op greaterThanEq *tmp205 :createMatrixOfSize:i :createMatrixOfSize:height
-    * jump *label103 equal *tmp205 false
+  413 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   414 jump *label102 always
   415 jump *label104 always
   416 label *label103
 
   463 label *label110
   464 jump *label112 greaterThan :findPossiblePlacement:x 3
   465 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp220 *tmp219 0
-    * jump *label113 equal *tmp220 false
+  466 jump *label113 notEqual *tmp219 0
   467 op mul *tmp222 :findPossiblePlacement:y 7
   468 op add *tmp223 24 *tmp222
   469 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
 
   472 label *label113
   473 label *label114
   474 op sub *tmp225 3 :findPossiblePlacement:width
-    * op greaterThan *tmp226 :findPossiblePlacement:x *tmp225
-    * jump *label115 equal *tmp226 false
+  475 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   476 jump *label112 always
   477 jump *label116 always
   478 label *label115
 
   483 jump *label110 always
   484 label *label112
   485 op sub *tmp228 3 :findPossiblePlacement:height
-    * op greaterThan *tmp229 :findPossiblePlacement:y *tmp228
-    * jump *label117 equal *tmp229 false
+  486 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   487 jump *label109 always
   488 jump *label118 always
   489 label *label117
 
   509 set :tryPlaceGenerator:c :findPossiblePlacement:x
   510 set :tryPlaceGenerator:r :findPossiblePlacement:y
   511 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp232 :tryPlaceGenerator:shift 0
-    * jump *label121 equal *tmp232 false
-    * op lessThan *tmp234 :tryPlaceGenerator:shift 0
-    * jump *label123 equal *tmp234 false
+  512 jump *label121 lessThan :tryPlaceGenerator:shift 0
+  513 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   514 set :tryPlaceGenerator*retval false
   515 jump *label119 always
   516 jump *label124 always
 
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
   540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp246 :tryPlaceGenerator:shift 0
-    * jump *label126 equal *tmp246 false
+  541 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   542 set :tryPlaceGenerator*retval false
   543 jump *label119 always
   544 jump *label127 always
 
   566 set :tryPlaceGenerator:c :findPossiblePlacement:x
   567 set :tryPlaceGenerator:r :findPossiblePlacement:y
   568 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp258 :tryPlaceGenerator:shift 0
-    * jump *label129 equal *tmp258 false
+  569 jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
   570 set :tryPlaceGenerator*retval false
   571 jump *label119 always
   572 jump *label130 always
 
   586 set :tryPlaceGenerator:c :findPossiblePlacement:x
   587 set :tryPlaceGenerator:r :findPossiblePlacement:y
   588 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp264 :tryPlaceGenerator:shift 0
-    * jump *label132 equal *tmp264 false
+  589 jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
   590 set :tryPlaceGenerator*retval false
   591 jump *label119 always
   592 jump *label133 always
 
   626 set :tryPlaceGenerator:c :findPossiblePlacement:x
   627 set :tryPlaceGenerator:r :findPossiblePlacement:y
   628 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp290 :tryPlaceGenerator:shift 0
-    * jump *label137 equal *tmp290 false
+  629 jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
   630 set :tryPlaceGenerator*retval false
   631 jump *label119 always
   632 jump *label138 always
 
   749 set :moveTo.5:radius 1
   750 label *label155
   751 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
-    * op equal *tmp324 *tmp323 false
-    * jump *label157 equal *tmp324 false
+  752 jump *label157 notEqual *tmp323 false
   753 op sub *tmp325 :moveTo.5:radius 0.5
   754 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
   755 label *label156
 
   775 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   776 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   777 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp330 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label160 equal *tmp330 false
+  778 jump *label160 lessThan :layoutThoriumDrillAtLocation:shift 0
   779 op add *tmp332 .drillX 0.5
   780 op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
   781 op add *tmp334 .drillY 0.5
 
   797 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   798 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   799 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp339 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label163 equal *tmp339 false
+  800 jump *label163 lessThan :layoutThoriumDrillAtLocation:shift 0
   801 op add *tmp341 .drillX 0.5
   802 op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
   803 op add *tmp343 .drillY 0.5
 
   818 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   819 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   820 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op lessThan *tmp348 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label166 equal *tmp348 false
+  821 jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   822 set :layoutThoriumDrillAtLocation*retval false
   823 jump *label153 always
   824 jump *label167 always
 
   939 label *label186
   940 set .drillX :findDrillLocationLocal:dx
   941 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp365 :findDrillLocationLocal*retval false
-    * jump *label187 equal *tmp365 false
+  942 jump *label187 notEqual :findDrillLocationLocal*retval false
   943 set :layoutThoriumDrill*retval false
   944 jump *label185 always
   945 jump *label188 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-35 instructions):
 
   115 jump *label38 notEqual *tmp54 false
   116 set *tmp28 false
   117 jump *label28 always
-    * jump *label39 always
   118 label *label38
   119 label *label39
   120 op sub *tmp58 :locateOreAway:x .coreX
 
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label30 always
-    * jump *label43 always
   131 label *label42
   132 label *label43
-    * jump *label41 always
   133 label *label40
   134 label *label41
   135 jump *label44 lessThan :locateOreAway:coreDist 8
 
   153 jump *label52 greaterThanEq *tmp85 7
   154 set *tmp74 true
   155 jump *label48 always
-    * jump *label53 always
   156 label *label52
   157 label *label53
   158 label *label50
 
   170 printflush message1
   171 set *tmp28 true
   172 jump *label28 always
-    * jump *label55 always
   173 label *label54
   174 label *label55
-    * jump *label47 always
   175 label *label46
   176 label *label47
-    * jump *label45 always
   177 label *label44
   178 label *label45
   179 label *label30
 
   188 jump *label56 notEqual *tmp28 false
   189 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   190 jump *label19 always
-    * jump *label57 always
   191 label *label56
   192 label *label57
   193 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   194 op add .mapSpots .mapSpots 1
-    * jump *label59 always
   195 label *label58
   196 label *label59
   197 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   236 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   237 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   238 jump *label67 always
-    * jump *label70 always
   239 label *label69
   240 label *label70
   241 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
 
   244 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   245 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   246 set .mapSpots :findDrillLocationLocal:score
-    * jump *label74 always
   247 label *label73
   248 label *label74
   249 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   266 ucontrol unbind
   267 set :findDrillLocationLocal*retval true
   268 jump *label19 always
-    * jump *label76 always
   269 label *label75
   270 label *label76
-    * jump *label72 always
   271 label *label71
   272 label *label72
   273 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   274 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   275 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   276 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label79 always
   277 label *label78
   278 label *label79
   279 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   280 jump *label67 always
-    * jump *label81 always
   281 label *label80
   282 label *label81
   283 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   311 write :saveLocation.1:y bank1 .count
   312 op add .locations .locations 1
   313 label *label86
-    * jump *label85 always
   314 label *label84
   315 label *label85
   316 label *label26
 
   329 jump *label88 equal *tmp165 false
   330 set :shiftMask*retval 0
   331 jump *label87 always
-    * jump *label89 always
   332 label *label88
   333 label *label89
   334 op mul *tmp167 7 :shiftMask:shiftY
 
   347 op shr :shiftMask:keep 0b1111111 *tmp177
   348 jump *label94 lessThanEq :shiftMask:shiftX 0
   349 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label95 always
   350 label *label94
   351 label *label95
   352 op shl *tmp181 :shiftMask:keep 7
 
   356 op shl *tmp183 :shiftMask:keep 21
   357 op or :shiftMask:keep :shiftMask:keep *tmp183
   358 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label93 always
   359 label *label92
   360 label *label93
   361 set :shiftMask*retval :shiftMask:mask
 
   393 jump *label102 greaterThanEq :createMatrixOfSize:i 7
   394 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   395 jump *label102 always
-    * jump *label104 always
   396 label *label103
   397 label *label104
   398 op shl *tmp207 :createMatrixOfSize:matrix 7
 
   448 op add *tmp223 24 *tmp222
   449 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   450 jump *label106 always
-    * jump *label114 always
   451 label *label113
   452 label *label114
   453 op sub *tmp225 3 :findPossiblePlacement:width
   454 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   455 jump *label112 always
-    * jump *label116 always
   456 label *label115
   457 label *label116
   458 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   463 op sub *tmp228 3 :findPossiblePlacement:height
   464 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   465 jump *label109 always
-    * jump *label118 always
   466 label *label117
   467 label *label118
   468 label *label108
 
   490 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   491 set :tryPlaceGenerator*retval false
   492 jump *label119 always
-    * jump *label124 always
   493 label *label123
   494 label *label124
   495 op add *tmp236 :tryPlaceGenerator:centerX 0.5
 
   517 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   518 set :tryPlaceGenerator*retval false
   519 jump *label119 always
-    * jump *label127 always
   520 label *label126
   521 label *label127
   522 op add *tmp248 :tryPlaceGenerator:centerX 0.5
 
   544 jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
   545 set :tryPlaceGenerator*retval false
   546 jump *label119 always
-    * jump *label130 always
   547 label *label129
   548 label *label130
   549 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   563 jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
   564 set :tryPlaceGenerator*retval false
   565 jump *label119 always
-    * jump *label133 always
   566 label *label132
   567 label *label133
   568 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   602 jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
   603 set :tryPlaceGenerator*retval false
   604 jump *label119 always
-    * jump *label138 always
   605 label *label137
   606 label *label138
   607 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   608 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   609 op shl *tmp294 1 :tryPlaceGenerator:shift
   610 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
-    * jump *label135 always
   611 label *label134
   612 label *label135
   613 set :tryPlaceGenerator*retval true
 
   755 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   756 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   757 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
-    * jump *label161 always
   758 label *label160
   759 label *label161
   760 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   774 op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
   775 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   776 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
-    * jump *label164 always
   777 label *label163
   778 label *label164
   779 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
 
   790 jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   791 set :layoutThoriumDrillAtLocation*retval false
   792 jump *label153 always
-    * jump *label167 always
   793 label *label166
   794 label *label167
   795 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
 
   809 jump *label169 equal :tryPlaceGenerator*retval false
   810 set :layoutThoriumDrillAtLocation*retval true
   811 jump *label153 always
-    * jump *label170 always
   812 label *label169
   813 label *label170
   814 set :layoutThoriumDrillAtLocation:sx 3
 
   859 jump *label181 equal :tryPlaceGenerator*retval false
   860 set :layoutThoriumDrillAtLocation*retval true
   861 jump *label153 always
-    * jump *label182 always
   862 label *label181
   863 label *label182
   864 label *label172
 
   908 jump *label187 notEqual :findDrillLocationLocal*retval false
   909 set :layoutThoriumDrill*retval false
   910 jump *label185 always
-    * jump *label188 always
   911 label *label187
   912 label *label188
   913 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-12 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp13 @mapw .coreX
-    * op sub *tmp14 @maph .coreY
-    * op max *tmp15 .coreX .coreY
+   25 op sub *tmp13 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp14 @maph :findDrillLocationLocal:y
+   27 op max *tmp15 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp15 *tmp15 *tmp13
    29 op max *tmp15 *tmp15 *tmp14
    30 set :findDrillLocationLocal:distanceLimit *tmp15
    31 set .mapAction "Locating ore..."
    32 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp16 :moveTo:x
-    * set *tmp17 :moveTo:y
-    * set :moveTo.1:x *tmp16
-    * set :moveTo.1:y *tmp17
+   33 set .mapProgress 0
+   34 set :moveTo:x :findDrillLocationLocal:x
+   35 set :moveTo:y :findDrillLocationLocal:y
+   36 set *tmp16 .coreX
+   37 set *tmp17 .coreY
+   38 set :moveTo.1:x :moveTo:x
+   39 set :moveTo.1:y :moveTo:y
    40 set :moveTo.1:radius 6
    41 label *label22
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp18
+   42 ucontrol within *tmp16 *tmp17 6 *tmp18
    43 jump *label24 notEqual *tmp18 false
-    * op sub *tmp20 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp20
+   44 op sub *tmp20 6 0.5
+   45 ucontrol approach *tmp16 *tmp17 5.5
    46 label *label23
    47 jump *label22 always
    48 label *label24
    49 label *label21
    50 label *label20
-    * op div *tmp21 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   51 op div *tmp21 *tmp15 3.8197185279121366
    52 op pow .mapTotal *tmp21 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   74 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp34 :locateOreAway:a
    77 op mul *tmp35 *tmp34 :locateOreAway:distance
-    * op add *tmp36 .coreX *tmp35
+   78 op add *tmp36 :findDrillLocationLocal:x *tmp35
    79 op sub *tmp37 @mapw 5
    80 set :limit:value *tmp36
    81 set :limit:low 5
    82 set :limit:high *tmp37
-    * op max *tmp39 :limit:value :limit:low
-    * op min *tmp38 *tmp39 :limit:high
+   83 op max *tmp39 *tmp36 5
+   84 op min *tmp38 *tmp39 *tmp37
    85 label *label32
    86 set :locateOreAway:lx *tmp38
    87 op cos *tmp41 :locateOreAway:a
    88 op mul *tmp42 *tmp41 :locateOreAway:distance
-    * op add *tmp43 .coreY *tmp42
+   89 op add *tmp43 :findDrillLocationLocal:y *tmp42
    90 op sub *tmp44 @maph 5
    91 set :limit.1:value *tmp43
    92 set :limit.1:low 5
    93 set :limit.1:high *tmp44
-    * op max *tmp46 :limit.1:value :limit.1:low
-    * op min *tmp45 *tmp46 :limit.1:high
+   94 op max *tmp46 *tmp43 5
+   95 op min *tmp45 *tmp46 *tmp44
    96 label *label33
    97 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   98 set :moveTo.2:x *tmp38
+   99 set :moveTo.2:y *tmp45
   100 set :moveTo.2:radius 5
   101 label *label35
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp48
+  102 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
   103 jump *label37 notEqual *tmp48 false
-    * op sub *tmp50 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp50
+  104 op sub *tmp50 5 0.5
+  105 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   106 label *label36
   107 jump *label35 always
   108 label *label37
 
   111 op add .angle .angle *tmp51
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+  114 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
   115 jump *label38 notEqual *tmp54 false
   116 set *tmp28 false
   117 jump *label28 always
   118 label *label38
   119 label *label39
-    * op sub *tmp58 :locateOreAway:x .coreX
+  120 op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x
   121 op abs *tmp59 *tmp58
-    * op sub *tmp60 :locateOreAway:y .coreY
+  122 op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y
   123 op abs *tmp61 *tmp60
   124 op max :locateOreAway:coreDist *tmp59 *tmp61
-    * op sub *tmp63 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp64 :locateOreAway:y :locateOreAway:ly
+  125 op sub *tmp63 :locateOreAway:x *tmp38
+  126 op sub *tmp64 :locateOreAway:y *tmp45
   127 op len :locateOreAway:unitDist *tmp63 *tmp64
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
 
   147 read :visited:lx bank1 *tmp78
   148 op add *tmp81 :visited:index 3
   149 read :visited:ly bank1 *tmp81
-    * op sub *tmp83 :visited:x :visited:lx
-    * op sub *tmp84 :visited:y :visited:ly
+  150 op sub *tmp83 :locateOreAway:x :visited:lx
+  151 op sub *tmp84 :locateOreAway:y :visited:ly
   152 op len *tmp85 *tmp83 *tmp84
   153 jump *label52 greaterThanEq *tmp85 7
   154 set *tmp74 true
 
   161 label *label51
   162 set *tmp74 false
   163 jump *label48 always
-    * set *tmp74 null
   164 label *label48
   165 jump *label54 notEqual *tmp74 false
-    * op div *tmp90 7.639437055824273 :locateOreAway:distance
+  166 op div *tmp90 2 .angle
   167 op add .angle .angle *tmp90
   168 op mul .mapProgress .angle .angle
   169 printflush message1
 
   180 label *label31
   181 set *tmp28 false
   182 jump *label28 always
-    * set *tmp28 null
   183 label *label28
   184 set :findDrillLocationLocal:oreX :locateOreAway:x
   185 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   192 op add .mapSpots .mapSpots 1
   193 label *label58
   194 label *label59
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp98 :moveTo.3:x
-    * set *tmp99 :moveTo.3:y
-    * set :moveTo.4:x *tmp98
-    * set :moveTo.4:y *tmp99
+  195 set :moveTo.3:x :locateOreAway:x
+  196 set :moveTo.3:y :locateOreAway:y
+  197 set *tmp98 :findDrillLocationLocal:oreX
+  198 set *tmp99 :findDrillLocationLocal:oreY
+  199 set :moveTo.4:x :moveTo.3:x
+  200 set :moveTo.4:y :moveTo.3:y
   201 set :moveTo.4:radius 6
   202 label *label62
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp100
+  203 ucontrol within *tmp98 *tmp99 6 *tmp100
   204 jump *label64 notEqual *tmp100 false
-    * op sub *tmp102 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp102
+  205 op sub *tmp102 6 0.5
+  206 ucontrol approach *tmp98 *tmp99 5.5
   207 label *label63
   208 jump *label62 always
   209 label *label64
 
   227 read :findDrillLocationLocal:score processor4 ":findBestPosition*retval"
   228 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   229 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * op sub *tmp114 :findDrillLocationLocal:newX .coreX
+  230 op sub *tmp114 :findDrillLocationLocal:newX :findDrillLocationLocal:x
   231 op abs *tmp115 *tmp114
-    * op sub *tmp116 :findDrillLocationLocal:newY .coreY
+  232 op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   233 op abs *tmp117 *tmp116
   234 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   235 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
 
   251 set :saveLocation:y :findDrillLocationLocal:dy
   252 op add .count .count 1
   253 set *tmp127 .count
-    * sensor *tmp129 :saveLocation:item @id
-    * write *tmp129 bank1 *tmp127
+  254 sensor *tmp129 :findDrillLocationLocal:item @id
+  255 write *tmp129 bank1 .count
   256 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  257 write :findDrillLocationLocal:score bank1 .count
   258 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  259 write :findDrillLocationLocal:dx bank1 .count
   260 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  261 write :findDrillLocationLocal:dy bank1 .count
   262 op add .locations .locations 1
   263 label *label77
   264 ucontrol unbind
 
   299 set :saveLocation.1:y :findDrillLocationLocal:bestY
   300 op add .count .count 1
   301 set *tmp151 .count
-    * sensor *tmp153 :saveLocation.1:item @id
-    * write *tmp153 bank1 *tmp151
+  302 sensor *tmp153 :findDrillLocationLocal:item @id
+  303 write *tmp153 bank1 .count
   304 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  305 write :findDrillLocationLocal:best bank1 .count
   306 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  307 write :findDrillLocationLocal:bestX bank1 .count
   308 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  309 write :findDrillLocationLocal:bestY bank1 .count
   310 op add .locations .locations 1
   311 label *label86
   312 label *label84
 
   342 label *label91
   343 jump *label92 equal :shiftMask:shiftX 0
   344 op abs *tmp177 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp177
+  345 op shr :shiftMask:keep 0b1111111 *tmp161
   346 jump *label94 lessThanEq :shiftMask:shiftX 0
   347 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   348 label *label94
 
   358 label *label93
   359 set :shiftMask*retval :shiftMask:mask
   360 jump *label87 always
-    * set :shiftMask*retval null
   361 label *label87
   362 return :shiftMask*retaddr
   363 end
   364 label *label10
   365 op add *tmp184 :excludeArea:areaWidth 7
-    * op add *tmp185 *tmp184 1
+  366 op add *tmp185 :excludeArea:areaWidth 8
   367 op idiv *tmp186 *tmp185 2
   368 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   369 op abs *tmp188 *tmp187
   370 op sub :excludeArea:overlapX *tmp186 *tmp188
   371 op add *tmp190 :excludeArea:areaHeight 7
-    * op add *tmp191 *tmp190 1
+  372 op add *tmp191 :excludeArea:areaHeight 8
   373 op idiv *tmp192 *tmp191 2
   374 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
   375 op abs *tmp194 *tmp193
 
   382 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   383 set :createMatrixOfSize:width :excludeArea:blockSizeX
   384 set :createMatrixOfSize:height :excludeArea:blockSizeY
-    * op shl *tmp203 1 :createMatrixOfSize:width
+  385 op shl *tmp203 1 :excludeArea:blockSizeX
   386 op sub :createMatrixOfSize:row *tmp203 1
   387 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   388 set :createMatrixOfSize:i 1
   389 label *label100
   390 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
+  391 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   392 jump *label102 always
   393 label *label103
   394 label *label104
 
   400 label *label102
   401 set *tmp202 :createMatrixOfSize:matrix
   402 jump *label99 always
-    * set *tmp202 null
   403 label *label99
-    * set :excludeArea:blocked *tmp202
+  404 set :excludeArea:blocked :createMatrixOfSize:matrix
   405 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   406 op sub *tmp210 7 :excludeArea:blockSizeX
   407 op mul :excludeArea:shiftX *tmp209 *tmp210
   408 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   409 op sub *tmp213 7 :excludeArea:blockSizeY
   410 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :excludeArea:blocked
+  411 set :shiftMask:mask *tmp202
   412 set :shiftMask:shiftX :excludeArea:shiftX
   413 set :shiftMask:shiftY :excludeArea:shiftY
   414 setaddr :shiftMask*retaddr *label105 (h:*label105)
   415 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   416 label *label105
   417 set :excludeArea:shifted :shiftMask*retval
-    * op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
+  418 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   419 jump *label96 always
-    * set *tmp199 null
   420 jump *label98 always
   421 label *label97
   422 set :excludeArea*retval :excludeArea:mask
   423 jump *label96 always
-    * set *tmp199 null
   424 label *label98
-    * set :excludeArea*retval *tmp199
+  425 set :excludeArea*retval null
   426 label *label96
   427 return :excludeArea*retaddr
   428 end
 
   465 label *label109
   466 set :findPossiblePlacement*retval -1
   467 jump *label106 always
-    * set :findPossiblePlacement*retval null
   468 label *label106
   469 return :findPossiblePlacement*retaddr
   470 end
 
   479 set :tryPlaceGenerator:c :findPossiblePlacement:x
   480 set :tryPlaceGenerator:r :findPossiblePlacement:y
   481 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label121 lessThan :tryPlaceGenerator:shift 0
-    * jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
+  482 jump *label121 lessThan :findPossiblePlacement*retval 0
+  483 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   484 set :tryPlaceGenerator*retval false
   485 jump *label119 always
   486 label *label123
   487 label *label124
   488 op add *tmp236 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp236 :tryPlaceGenerator:c
+  489 op add .water2X *tmp236 :findPossiblePlacement:x
   490 op add *tmp238 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp238 :tryPlaceGenerator:r
+  491 op add .water2Y *tmp238 :findPossiblePlacement:y
   492 op add *tmp240 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp240 :tryPlaceGenerator:c
+  493 op add .generatorX *tmp236 :findPossiblePlacement:x
   494 op add *tmp242 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp242 :tryPlaceGenerator:r
-    * op shl *tmp244 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  495 op add .generatorY *tmp242 :findPossiblePlacement:y
+  496 op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   497 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp244
   498 jump *label122 always
   499 label *label121
 
   507 set :tryPlaceGenerator:c :findPossiblePlacement:x
   508 set :tryPlaceGenerator:r :findPossiblePlacement:y
   509 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
+  510 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   511 set :tryPlaceGenerator*retval false
   512 jump *label119 always
   513 label *label126
   514 label *label127
   515 op add *tmp248 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp248 :tryPlaceGenerator:c
+  516 op add .water2X *tmp248 :findPossiblePlacement:x
   517 op add *tmp250 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp250 :tryPlaceGenerator:r
+  518 op add .water2Y *tmp250 :findPossiblePlacement:y
   519 op add *tmp252 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp252 :tryPlaceGenerator:c
+  520 op add .generatorX *tmp252 :findPossiblePlacement:x
   521 op add *tmp254 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp254 :tryPlaceGenerator:r
-    * op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  522 op add .generatorY *tmp250 :findPossiblePlacement:y
+  523 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   524 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
   525 label *label122
   526 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
 
   534 set :tryPlaceGenerator:c :findPossiblePlacement:x
   535 set :tryPlaceGenerator:r :findPossiblePlacement:y
   536 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label129 greaterThanEq :tryPlaceGenerator:shift 0
+  537 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   538 set :tryPlaceGenerator*retval false
   539 jump *label119 always
   540 label *label129
   541 label *label130
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp262 1 :tryPlaceGenerator:shift
+  542 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  543 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  544 op shl *tmp262 1 :findPossiblePlacement*retval
   545 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp262
   546 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   547 set :findPossiblePlacement:placementMask 1
 
   553 set :tryPlaceGenerator:c :findPossiblePlacement:x
   554 set :tryPlaceGenerator:r :findPossiblePlacement:y
   555 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label132 greaterThanEq :tryPlaceGenerator:shift 0
+  556 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   557 set :tryPlaceGenerator*retval false
   558 jump *label119 always
   559 label *label132
   560 label *label133
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp268 1 :tryPlaceGenerator:shift
+  561 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  562 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  563 op shl *tmp268 1 :findPossiblePlacement*retval
   564 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp268
   565 op sub *tmp269 .water2X .node1X
   566 op sub *tmp270 .water2Y .node1Y
 
   592 set :tryPlaceGenerator:c :findPossiblePlacement:x
   593 set :tryPlaceGenerator:r :findPossiblePlacement:y
   594 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label137 greaterThanEq :tryPlaceGenerator:shift 0
+  595 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   596 set :tryPlaceGenerator*retval false
   597 jump *label119 always
   598 label *label137
   599 label *label138
-    * op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp294 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp294
+  600 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  601 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  602 op shl *tmp294 1 :findPossiblePlacement*retval
   603 label *label134
   604 label *label135
   605 set :tryPlaceGenerator*retval true
   606 jump *label119 always
-    * set :tryPlaceGenerator*retval null
   607 label *label119
   608 return :tryPlaceGenerator*retaddr
   609 end
 
   622 label *label142
   623 set :createBlockMaskRow*retval :createBlockMaskRow:result
   624 jump *label139 always
-    * set :createBlockMaskRow*retval null
   625 label *label139
   626 return :createBlockMaskRow*retaddr
   627 end
 
   634 set :createAdjacentMask:x :createCombinedMask:x
   635 set :createAdjacentMask:y :createCombinedMask:y
   636 set :createAdjacentMask:result 0
-    * op add *tmp305 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  637 op add *tmp305 :createCombinedMask:y 4
+  638 set :createBlockMaskRow:x :createCombinedMask:x
   639 set :createBlockMaskRow:y *tmp305
   640 setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
   641 call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
 
   662 op or *tmp312 :createAdjacentMask:row2 *tmp311
   663 op shr *tmp313 :createAdjacentMask:row1 1
   664 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createAdjacentMask:row0
+  665 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
   666 op shl *tmp316 :createAdjacentMask:result 7
   667 op and *tmp317 :createAdjacentMask:mask 0xFE
   668 op or :createAdjacentMask:result *tmp316 *tmp317
   669 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  670 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   671 label *label148
   672 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   673 jump *label147 always
 
   680 read *tmp320 processor4 ":createTerrainMask*finished"
   681 jump *label151 equal *tmp320 false
   682 read :createCombinedMask:terrainMask processor4 ":createTerrainMask*retval"
-    * op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  683 op or :excludeArea:mask *tmp304 :createCombinedMask:terrainMask
   684 set :excludeArea:maskX :createCombinedMask:x
   685 set :excludeArea:maskY :createCombinedMask:y
   686 set :excludeArea:areaX .coreX
 
   692 label *label152
   693 set :createCombinedMask*retval :excludeArea*retval
   694 jump *label143 always
-    * set :createCombinedMask*retval null
   695 label *label143
   696 return :createCombinedMask*retaddr
   697 end
 
   708 set :moveTo.5:y .drillY
   709 set :moveTo.5:radius 1
   710 label *label155
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp323
+  711 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   712 jump *label157 notEqual *tmp323 false
-    * op sub *tmp325 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp325
+  713 op sub *tmp325 1 0.5
+  714 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   715 label *label156
   716 jump *label155 always
   717 label *label157
 
   722 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   723 label *label158
   724 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask 7575371776
+  725 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   726 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   727 set :layoutThoriumDrillAtLocation:mask2x2 387
   728 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  729 set :findPossiblePlacement:placementMask 387
   730 set :findPossiblePlacement:width 2
   731 set :findPossiblePlacement:height 2
   732 setaddr :findPossiblePlacement*retaddr *label159 (h:*label159)
 
   735 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   736 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   737 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label160 lessThan :layoutThoriumDrillAtLocation:shift 0
+  738 jump *label160 lessThan :findPossiblePlacement*retval 0
   739 op add *tmp332 .drillX 0.5
-    * op add .water1X *tmp332 :layoutThoriumDrillAtLocation:c
+  740 op add .water1X *tmp332 :findPossiblePlacement:x
   741 op add *tmp334 .drillY 0.5
-    * op add .water1Y *tmp334 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  742 op add .water1Y *tmp334 :findPossiblePlacement:y
+  743 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   744 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp337
+  745 op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  746 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   747 label *label160
   748 label *label161
   749 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   756 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   757 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   758 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label163 lessThan :layoutThoriumDrillAtLocation:shift 0
+  759 jump *label163 lessThan :findPossiblePlacement*retval 0
   760 op add *tmp341 .drillX 0.5
-    * op add .containerX *tmp341 :layoutThoriumDrillAtLocation:c
+  761 op add .containerX *tmp341 :findPossiblePlacement:x
   762 op add *tmp343 .drillY 0.5
-    * op add .containerY *tmp343 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  763 op add .containerY *tmp343 :findPossiblePlacement:y
+  764 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   765 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   766 label *label163
   767 label *label164
 
   776 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   777 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   778 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label166 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
+  779 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   780 set :layoutThoriumDrillAtLocation*retval false
   781 jump *label153 always
   782 label *label166
   783 label *label167
-    * op add .node1X .drillX :layoutThoriumDrillAtLocation:c
-    * op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
-    * op shl *tmp352 1 :layoutThoriumDrillAtLocation:shift
+  784 op add .node1X .drillX :findPossiblePlacement:x
+  785 op add .node1Y .drillY :findPossiblePlacement:y
+  786 op shl *tmp352 1 :findPossiblePlacement*retval
   787 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp352
   788 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   789 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   790 set :tryPlaceGenerator:centerX .drillX
   791 set :tryPlaceGenerator:centerY .drillY
   792 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  793 set :tryPlaceGenerator:generatorHorizontal 1935
+  794 set :tryPlaceGenerator:generatorVertical 6340995
   795 setaddr :tryPlaceGenerator*retaddr *label168 (h:*label168)
   796 call *label12 *invalid :tryPlaceGenerator*retval (m:*label168) (h:*label168)
   797 label *label168
 
   834 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   835 label *label179
   836 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  837 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   838 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   839 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   840 set :tryPlaceGenerator:centerX *tmp361
 
   856 label *label173
   857 set :layoutThoriumDrillAtLocation*retval true
   858 jump *label153 always
-    * set :layoutThoriumDrillAtLocation*retval null
   859 label *label153
   860 return :layoutThoriumDrillAtLocation*retaddr
   861 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-70 instructions):
 
    33 set .mapProgress 0
    34 set :moveTo:x :findDrillLocationLocal:x
    35 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp16 .coreX
-    * set *tmp17 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   36 set *tmp16 :findDrillLocationLocal:x
+   37 set *tmp17 :findDrillLocationLocal:y
+   38 set :moveTo.1:x :findDrillLocationLocal:x
+   39 set :moveTo.1:y :findDrillLocationLocal:y
    40 label *label22
-    * ucontrol within *tmp16 *tmp17 6 *tmp18
+   41 ucontrol within .coreX .coreY 6 *tmp18
    42 jump *label24 notEqual *tmp18 false
-    * op sub *tmp20 6 0.5
-    * ucontrol approach *tmp16 *tmp17 5.5
+   43 ucontrol approach .coreX .coreY 5.5
    44 label *label23
    45 jump *label22 always
    46 label *label24
 
    59 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    60 op div *tmp26 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    61 op pow .mapTotal *tmp26 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    62 set :locateOreAway:x :findDrillLocationLocal:oreX
    63 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    64 op mul :locateOreAway:distance 3.8197185279121366 .angle
    65 set :locateOreAway:lastX -1
    66 set :locateOreAway:lastY -1
 
    73 op mul *tmp35 *tmp34 :locateOreAway:distance
    74 op add *tmp36 :findDrillLocationLocal:x *tmp35
    75 op sub *tmp37 @mapw 5
-    * set :limit:value *tmp36
-    * set :limit:low 5
-    * set :limit:high *tmp37
    76 op max *tmp39 *tmp36 5
    77 op min *tmp38 *tmp39 *tmp37
    78 label *label32
 
    81 op mul *tmp42 *tmp41 :locateOreAway:distance
    82 op add *tmp43 :findDrillLocationLocal:y *tmp42
    83 op sub *tmp44 @maph 5
-    * set :limit.1:value *tmp43
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp44
    84 op max *tmp46 *tmp43 5
    85 op min *tmp45 *tmp46 *tmp44
    86 label *label33
    87 set :locateOreAway:ly *tmp45
-    * set :moveTo.2:x *tmp38
-    * set :moveTo.2:y *tmp45
-    * set :moveTo.2:radius 5
    88 label *label35
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp48
+   89 ucontrol within *tmp38 *tmp45 5 *tmp48
    90 jump *label37 notEqual *tmp48 false
-    * op sub *tmp50 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   91 ucontrol approach *tmp38 *tmp45 4.5
    92 label *label36
    93 jump *label35 always
    94 label *label37
 
   122 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   123 set :locateOreAway:lastX :locateOreAway:x
   124 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   125 set *tmp75 .locations
   126 set :visited:i .locationsStart
   127 label *label49
 
   178 label *label59
   179 set :moveTo.3:x :locateOreAway:x
   180 set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :findDrillLocationLocal:oreX
-    * set *tmp99 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  181 set *tmp98 :locateOreAway:x
+  182 set *tmp99 :locateOreAway:y
+  183 set :moveTo.4:x :locateOreAway:x
+  184 set :moveTo.4:y :locateOreAway:y
   185 label *label62
-    * ucontrol within *tmp98 *tmp99 6 *tmp100
+  186 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp100
   187 jump *label64 notEqual *tmp100 false
-    * op sub *tmp102 6 0.5
-    * ucontrol approach *tmp98 *tmp99 5.5
+  188 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   189 label *label63
   190 jump *label62 always
   191 label *label64
 
   227 label *label73
   228 label *label74
   229 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   230 op add .count .count 1
-    * set *tmp127 .count
   231 sensor *tmp129 :findDrillLocationLocal:item @id
   232 write *tmp129 bank1 .count
   233 op add .count .count 1
 
   270 jump *label65 always
   271 label *label67
   272 jump *label84 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   273 op add .count .count 1
-    * set *tmp151 .count
   274 sensor *tmp153 :findDrillLocationLocal:item @id
   275 write *tmp153 bank1 .count
   276 op add .count .count 1
 
   313 op shr :shiftMask:mask :shiftMask:mask *tmp174
   314 label *label91
   315 jump *label92 equal :shiftMask:shiftX 0
-    * op abs *tmp177 :shiftMask:shiftX
   316 op shr :shiftMask:keep 0b1111111 *tmp161
   317 jump *label94 lessThanEq :shiftMask:shiftX 0
   318 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   333 return :shiftMask*retaddr
   334 end
   335 label *label10
-    * op add *tmp184 :excludeArea:areaWidth 7
   336 op add *tmp185 :excludeArea:areaWidth 8
   337 op idiv *tmp186 *tmp185 2
   338 op sub *tmp187 :excludeArea:maskX :excludeArea:areaX
   339 op abs *tmp188 *tmp187
   340 op sub :excludeArea:overlapX *tmp186 *tmp188
-    * op add *tmp190 :excludeArea:areaHeight 7
   341 op add *tmp191 :excludeArea:areaHeight 8
   342 op idiv *tmp192 *tmp191 2
   343 op sub *tmp193 :excludeArea:maskY :excludeArea:areaY
 
   349 jump *label97 equal *tmp198 false
   350 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
   351 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
-    * set :createMatrixOfSize:width :excludeArea:blockSizeX
-    * set :createMatrixOfSize:height :excludeArea:blockSizeY
   352 op shl *tmp203 1 :excludeArea:blockSizeX
   353 op sub :createMatrixOfSize:row *tmp203 1
   354 set :createMatrixOfSize:matrix :createMatrixOfSize:row
 
   368 set *tmp202 :createMatrixOfSize:matrix
   369 jump *label99 always
   370 label *label99
-    * set :excludeArea:blocked :createMatrixOfSize:matrix
   371 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   372 op sub *tmp210 7 :excludeArea:blockSizeX
   373 op mul :excludeArea:shiftX *tmp209 *tmp210
   374 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   375 op sub *tmp213 7 :excludeArea:blockSizeY
   376 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask *tmp202
+  377 set :shiftMask:mask :createMatrixOfSize:matrix
   378 set :shiftMask:shiftX :excludeArea:shiftX
   379 set :shiftMask:shiftY :excludeArea:shiftY
   380 setaddr :shiftMask*retaddr *label105 (h:*label105)
   381 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   382 label *label105
-    * set :excludeArea:shifted :shiftMask*retval
   383 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   384 jump *label96 always
   385 jump *label98 always
 
   387 set :excludeArea*retval :excludeArea:mask
   388 jump *label96 always
   389 label *label98
-    * set :excludeArea*retval null
   390 label *label96
   391 return :excludeArea*retaddr
   392 end
 
   440 setaddr :findPossiblePlacement*retaddr *label120 (h:*label120)
   441 call *label11 *invalid :findPossiblePlacement*retval (m:*label120) (h:*label120)
   442 label *label120
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   443 jump *label121 lessThan :findPossiblePlacement*retval 0
   444 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   445 set :tryPlaceGenerator*retval false
 
   450 op add .water2X *tmp236 :findPossiblePlacement:x
   451 op add *tmp238 :tryPlaceGenerator:centerY 0.5
   452 op add .water2Y *tmp238 :findPossiblePlacement:y
-    * op add *tmp240 :tryPlaceGenerator:centerX 0.5
   453 op add .generatorX *tmp236 :findPossiblePlacement:x
   454 op add *tmp242 :tryPlaceGenerator:centerY 2.5
   455 op add .generatorY *tmp242 :findPossiblePlacement:y
 
   464 setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
   465 call *label11 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
   466 label *label125
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   467 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   468 set :tryPlaceGenerator*retval false
   469 jump *label119 always
 
   475 op add .water2Y *tmp250 :findPossiblePlacement:y
   476 op add *tmp252 :tryPlaceGenerator:centerX 2.5
   477 op add .generatorX *tmp252 :findPossiblePlacement:x
-    * op add *tmp254 :tryPlaceGenerator:centerY 0.5
   478 op add .generatorY *tmp250 :findPossiblePlacement:y
   479 op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   480 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp256
 
   487 setaddr :findPossiblePlacement*retaddr *label128 (h:*label128)
   488 call *label11 *invalid :findPossiblePlacement*retval (m:*label128) (h:*label128)
   489 label *label128
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   490 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   491 set :tryPlaceGenerator*retval false
   492 jump *label119 always
 
   503 setaddr :findPossiblePlacement*retaddr *label131 (h:*label131)
   504 call *label11 *invalid :findPossiblePlacement*retval (m:*label131) (h:*label131)
   505 label *label131
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   506 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   507 set :tryPlaceGenerator*retval false
   508 jump *label119 always
 
   539 setaddr :findPossiblePlacement*retaddr *label136 (h:*label136)
   540 call *label11 *invalid :findPossiblePlacement*retval (m:*label136) (h:*label136)
   541 label *label136
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   542 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   543 set :tryPlaceGenerator*retval false
   544 jump *label119 always
 
   546 label *label138
   547 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   548 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp294 1 :findPossiblePlacement*retval
   549 label *label134
   550 label *label135
   551 set :tryPlaceGenerator*retval true
 
   603 setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
   604 call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
   605 label *label150
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   606 op shl *tmp311 :createAdjacentMask:row1 1
   607 op or *tmp312 :createAdjacentMask:row2 *tmp311
   608 op shr *tmp313 :createAdjacentMask:row1 1
 
   619 label *label149
   620 op shr *tmp304 :createAdjacentMask:result 1
   621 label *label144
-    * set :createCombinedMask:adjacentMask *tmp304
   622 label *label151
   623 wait 1e-15
   624 read *tmp320 processor4 ":createTerrainMask*finished"
 
   650 set .water1X -1
   651 set :moveTo.5:x .drillX
   652 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   653 label *label155
   654 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   655 jump *label157 notEqual *tmp323 false
-    * op sub *tmp325 1 0.5
   656 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   657 label *label156
   658 jump *label155 always
 
   663 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
   664 call *label14 *invalid :createCombinedMask*retval (m:*label158) (h:*label158)
   665 label *label158
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   666 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   667 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   668 set :layoutThoriumDrillAtLocation:mask2x2 387
 
   673 setaddr :findPossiblePlacement*retaddr *label159 (h:*label159)
   674 call *label11 *invalid :findPossiblePlacement*retval (m:*label159) (h:*label159)
   675 label *label159
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   676 jump *label160 lessThan :findPossiblePlacement*retval 0
   677 op add *tmp332 .drillX 0.5
   678 op add .water1X *tmp332 :findPossiblePlacement:x
 
   680 op add .water1Y *tmp334 :findPossiblePlacement:y
   681 op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   682 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
-    * op shl *tmp337 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   683 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   684 label *label160
   685 label *label161
 
   690 setaddr :findPossiblePlacement*retaddr *label162 (h:*label162)
   691 call *label11 *invalid :findPossiblePlacement*retval (m:*label162) (h:*label162)
   692 label *label162
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   693 jump *label163 lessThan :findPossiblePlacement*retval 0
   694 op add *tmp341 .drillX 0.5
   695 op add .containerX *tmp341 :findPossiblePlacement:x
 
   707 setaddr :findPossiblePlacement*retaddr *label165 (h:*label165)
   708 call *label11 *invalid :findPossiblePlacement*retval (m:*label165) (h:*label165)
   709 label *label165
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   710 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   711 set :layoutThoriumDrillAtLocation*retval false
   712 jump *label153 always
 
   764 setaddr :shiftMask*retaddr *label179 (h:*label179)
   765 call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
   766 label *label179
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   767 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   768 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   769 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-15 instructions):
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp16 :findDrillLocationLocal:x
-    * set *tmp17 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    34 label *label22
-    * ucontrol within .coreX .coreY 6 *tmp18
+   35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    36 jump *label24 notEqual *tmp18 false
-    * ucontrol approach .coreX .coreY 5.5
+   37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label23
    39 jump *label22 always
    40 label *label24
 
    70 op max *tmp39 *tmp36 5
    71 op min *tmp38 *tmp39 *tmp37
    72 label *label32
-    * set :locateOreAway:lx *tmp38
    73 op cos *tmp41 :locateOreAway:a
    74 op mul *tmp42 *tmp41 :locateOreAway:distance
    75 op add *tmp43 :findDrillLocationLocal:y *tmp42
 
    77 op max *tmp46 *tmp43 5
    78 op min *tmp45 *tmp46 *tmp44
    79 label *label33
-    * set :locateOreAway:ly *tmp45
    80 label *label35
    81 ucontrol within *tmp38 *tmp45 5 *tmp48
    82 jump *label37 notEqual *tmp48 false
 
   168 op add .mapSpots .mapSpots 1
   169 label *label58
   170 label *label59
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp98 :locateOreAway:x
-    * set *tmp99 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   171 label *label62
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp100
+  172 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   173 jump *label64 notEqual *tmp100 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  174 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   175 label *label63
   176 jump *label62 always
   177 label *label64
 
   351 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   352 jump *label100 always
   353 label *label102
-    * set *tmp202 :createMatrixOfSize:matrix
   354 jump *label99 always
   355 label *label99
   356 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    60 set :locateOreAway:lastY -1
    61 op max .angle .angle @pi
    62 op mul .mapProgress .angle .angle
+   63 op sub *tmp37 @mapw 5
+   64 op sub *tmp44 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp34 :locateOreAway:a
    69 op mul *tmp35 *tmp34 :locateOreAway:distance
    70 op add *tmp36 :findDrillLocationLocal:x *tmp35
-    * op sub *tmp37 @mapw 5
    71 op max *tmp39 *tmp36 5
    72 op min *tmp38 *tmp39 *tmp37
    73 label *label32
    74 op cos *tmp41 :locateOreAway:a
    75 op mul *tmp42 *tmp41 :locateOreAway:distance
    76 op add *tmp43 :findDrillLocationLocal:y *tmp42
-    * op sub *tmp44 @maph 5
    77 op max *tmp46 *tmp43 5
    78 op min *tmp45 *tmp46 *tmp44
    79 label *label33

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    64 op sub *tmp44 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   67 label *label195
    68 op div :locateOreAway:a .angle @degToRad
    69 op sin *tmp34 :locateOreAway:a
    70 op mul *tmp35 *tmp34 :locateOreAway:distance
 
   119 set :visited:i .locationsStart
   120 label *label49
   121 jump *label51 greaterThanEq :visited:i *tmp75
+  122 label *label196
   123 op mul :visited:index 4 :visited:i
   124 op add *tmp78 :visited:index 2
   125 read :visited:lx bank1 *tmp78
 
   135 label *label53
   136 label *label50
   137 op add :visited:i :visited:i 1
-    * jump *label49 always
+  138 jump *label196 lessThan :visited:i *tmp75
   139 label *label51
   140 set *tmp74 false
   141 jump *label48 always
 
   154 label *label44
   155 label *label45
   156 label *label30
-    * jump *label29 always
+  157 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   158 label *label31
   159 set *tmp28 false
   160 jump *label28 always
 
   342 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   343 set :createMatrixOfSize:i 1
   344 label *label100
-    * jump *label102 greaterThanEq :createMatrixOfSize:i 7
+  345 label *label197
   346 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   347 jump *label102 always
   348 label *label103
 
   351 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   352 label *label101
   353 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label100 always
+  354 jump *label197 lessThan :createMatrixOfSize:i 7
   355 label *label102
   356 jump *label99 always
   357 label *label99
 
   381 set :findPossiblePlacement:y -3
   382 label *label107
   383 jump *label109 greaterThan :findPossiblePlacement:y 3
+  384 label *label198
   385 op add *tmp216 :findPossiblePlacement:y 3
   386 op mul *tmp217 7 *tmp216
   387 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   388 set :findPossiblePlacement:x -3
   389 label *label110
   390 jump *label112 greaterThan :findPossiblePlacement:x 3
+  391 label *label199
   392 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   393 jump *label113 notEqual *tmp219 0
   394 op mul *tmp222 :findPossiblePlacement:y 7
 
   405 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   406 label *label111
   407 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label110 always
+  408 jump *label199 lessThanEq :findPossiblePlacement:x 3
   409 label *label112
   410 op sub *tmp228 3 :findPossiblePlacement:height
   411 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
 
   414 label *label118
   415 label *label108
   416 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label107 always
+  417 jump *label198 lessThanEq :findPossiblePlacement:y 3
   418 label *label109
   419 set :findPossiblePlacement*retval -1
   420 jump *label106 always
 
   546 set :createBlockMaskRow:result 0
   547 set :createBlockMaskRow:c 4
   548 label *label140
-    * jump *label142 lessThan :createBlockMaskRow:c -4
+  549 label *label200
   550 op shl *tmp295 :createBlockMaskRow:result 1
   551 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
   552 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   553 op or :createBlockMaskRow:result *tmp295 *tmp297
   554 label *label141
   555 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label140 always
+  556 jump *label200 greaterThanEq :createBlockMaskRow:c -4
   557 label *label142
   558 set :createBlockMaskRow*retval :createBlockMaskRow:result
   559 jump *label139 always
 
   585 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   586 set :createAdjacentMask:r 2
   587 label *label147
-    * jump *label149 lessThan :createAdjacentMask:r -4
+  588 label *label201
   589 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   590 set :createBlockMaskRow:x :createAdjacentMask:x
   591 set :createBlockMaskRow:y *tmp309
 
   604 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   605 label *label148
   606 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label147 always
+  607 jump *label201 greaterThanEq :createAdjacentMask:r -4
   608 label *label149
   609 op shr *tmp304 :createAdjacentMask:result 1
   610 label *label144

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   210 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   211 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   212 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
-    * set .mapSpots :findDrillLocationLocal:score
-    * label *label73
-    * label *label74
+  213 select .mapSpots lessThan :findDrillLocationLocal:limit 1000 :findDrillLocationLocal:score .mapSpots
   214 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   215 op add .count .count 1
   216 sensor *tmp129 :findDrillLocationLocal:item @id

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    81 label *label35
    82 ucontrol within *tmp38 *tmp45 5 *tmp48
    83 jump *label37 notEqual *tmp48 false
+   84 label *label202
    85 ucontrol approach *tmp38 *tmp45 4.5
    86 label *label36
-    * jump *label35 always
+   87 ucontrol within *tmp38 *tmp45 5 *tmp48
+   88 jump *label202 equal *tmp48 false
    89 label *label37
    90 label *label34
    91 op div *tmp51 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   120 set *tmp75 .locations
   121 set :visited:i .locationsStart
   122 label *label49
-    * jump *label51 greaterThanEq :visited:i *tmp75
+  123 jump *label51 greaterThanEq .locationsStart *tmp75
   124 label *label196
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp78 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:472:5 (+39 instructions):
 
   543 end
   544 label *label13
   545 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label140
-    * label *label200
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label141
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label200 greaterThanEq :createBlockMaskRow:c -4
-    * label *label142
+  546 set :createBlockMaskRow:c 4
+  547 label *label203
+  548 label *label204
+  549 op shl *tmp295 :createBlockMaskRow:result 1
+  550 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  551 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  552 op or :createBlockMaskRow:result *tmp295 *tmp297
+  553 label *label205
+  554 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  555 label *label206
+  556 op shl *tmp295 :createBlockMaskRow:result 1
+  557 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  558 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  559 op or :createBlockMaskRow:result *tmp295 *tmp297
+  560 label *label207
+  561 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  562 label *label208
+  563 op shl *tmp295 :createBlockMaskRow:result 1
+  564 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  565 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  566 op or :createBlockMaskRow:result *tmp295 *tmp297
+  567 label *label209
+  568 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  569 label *label210
+  570 op shl *tmp295 :createBlockMaskRow:result 1
+  571 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  572 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  573 op or :createBlockMaskRow:result *tmp295 *tmp297
+  574 label *label211
+  575 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  576 label *label212
+  577 op shl *tmp295 :createBlockMaskRow:result 1
+  578 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  579 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  580 op or :createBlockMaskRow:result *tmp295 *tmp297
+  581 label *label213
+  582 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  583 label *label214
+  584 op shl *tmp295 :createBlockMaskRow:result 1
+  585 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  586 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  587 op or :createBlockMaskRow:result *tmp295 *tmp297
+  588 label *label215
+  589 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  590 label *label216
+  591 op shl *tmp295 :createBlockMaskRow:result 1
+  592 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  593 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  594 op or :createBlockMaskRow:result *tmp295 *tmp297
+  595 label *label217
+  596 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  597 label *label218
+  598 op shl *tmp295 :createBlockMaskRow:result 1
+  599 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  600 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  601 op or :createBlockMaskRow:result *tmp295 *tmp297
+  602 label *label219
+  603 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  604 label *label220
+  605 op shl *tmp295 :createBlockMaskRow:result 1
+  606 op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  607 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  608 op or :createBlockMaskRow:result *tmp295 *tmp297
+  609 label *label221
+  610 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  611 label *label142
   612 set :createBlockMaskRow*retval :createBlockMaskRow:result
   613 jump *label139 always
   614 label *label139

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   546 set :createBlockMaskRow:c 4
   547 label *label203
   548 label *label204
-    * op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  549 op shl *tmp295 0 1
+  550 op add *tmp296 :createBlockMaskRow:x 4
   551 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  552 op or :createBlockMaskRow:result 0 *tmp297
   553 label *label205
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  554 op sub :createBlockMaskRow:c 4 1
   555 label *label206
   556 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  557 op add *tmp296 :createBlockMaskRow:x 3
   558 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   559 op or :createBlockMaskRow:result *tmp295 *tmp297
   560 label *label207
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  561 op sub :createBlockMaskRow:c 3 1
   562 label *label208
   563 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  564 op add *tmp296 :createBlockMaskRow:x 2
   565 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   566 op or :createBlockMaskRow:result *tmp295 *tmp297
   567 label *label209
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  568 op sub :createBlockMaskRow:c 2 1
   569 label *label210
   570 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  571 op add *tmp296 :createBlockMaskRow:x 1
   572 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   573 op or :createBlockMaskRow:result *tmp295 *tmp297
   574 label *label211
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  575 op sub :createBlockMaskRow:c 1 1
   576 label *label212
   577 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  578 op add *tmp296 :createBlockMaskRow:x 0
   579 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   580 op or :createBlockMaskRow:result *tmp295 *tmp297
   581 label *label213
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  582 op sub :createBlockMaskRow:c 0 1
   583 label *label214
   584 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  585 op add *tmp296 :createBlockMaskRow:x -1
   586 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   587 op or :createBlockMaskRow:result *tmp295 *tmp297
   588 label *label215
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  589 op sub :createBlockMaskRow:c -1 1
   590 label *label216
   591 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  592 op add *tmp296 :createBlockMaskRow:x -2
   593 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   594 op or :createBlockMaskRow:result *tmp295 *tmp297
   595 label *label217
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  596 op sub :createBlockMaskRow:c -2 1
   597 label *label218
   598 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  599 op add *tmp296 :createBlockMaskRow:x -3
   600 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   601 op or :createBlockMaskRow:result *tmp295 *tmp297
   602 label *label219
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  603 op sub :createBlockMaskRow:c -3 1
   604 label *label220
   605 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x :createBlockMaskRow:c
+  606 op add *tmp296 :createBlockMaskRow:x -4
   607 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   608 op or :createBlockMaskRow:result *tmp295 *tmp297
   609 label *label221
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  610 op sub :createBlockMaskRow:c -4 1
   611 label *label142
   612 set :createBlockMaskRow*retval :createBlockMaskRow:result
   613 jump *label139 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   542 return :tryPlaceGenerator*retaddr
   543 end
   544 label *label13
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   545 label *label203
   546 label *label204
-    * op shl *tmp295 0 1
   547 op add *tmp296 :createBlockMaskRow:x 4
   548 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   549 op or :createBlockMaskRow:result 0 *tmp297
   550 label *label205
-    * op sub :createBlockMaskRow:c 4 1
   551 label *label206
   552 op shl *tmp295 :createBlockMaskRow:result 1
   553 op add *tmp296 :createBlockMaskRow:x 3
   554 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   555 op or :createBlockMaskRow:result *tmp295 *tmp297
   556 label *label207
-    * op sub :createBlockMaskRow:c 3 1
   557 label *label208
   558 op shl *tmp295 :createBlockMaskRow:result 1
   559 op add *tmp296 :createBlockMaskRow:x 2
   560 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   561 op or :createBlockMaskRow:result *tmp295 *tmp297
   562 label *label209
-    * op sub :createBlockMaskRow:c 2 1
   563 label *label210
   564 op shl *tmp295 :createBlockMaskRow:result 1
   565 op add *tmp296 :createBlockMaskRow:x 1
   566 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   567 op or :createBlockMaskRow:result *tmp295 *tmp297
   568 label *label211
-    * op sub :createBlockMaskRow:c 1 1
   569 label *label212
   570 op shl *tmp295 :createBlockMaskRow:result 1
   571 op add *tmp296 :createBlockMaskRow:x 0
   572 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   573 op or :createBlockMaskRow:result *tmp295 *tmp297
   574 label *label213
-    * op sub :createBlockMaskRow:c 0 1
   575 label *label214
   576 op shl *tmp295 :createBlockMaskRow:result 1
   577 op add *tmp296 :createBlockMaskRow:x -1
   578 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   579 op or :createBlockMaskRow:result *tmp295 *tmp297
   580 label *label215
-    * op sub :createBlockMaskRow:c -1 1
   581 label *label216
   582 op shl *tmp295 :createBlockMaskRow:result 1
   583 op add *tmp296 :createBlockMaskRow:x -2
   584 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   585 op or :createBlockMaskRow:result *tmp295 *tmp297
   586 label *label217
-    * op sub :createBlockMaskRow:c -2 1
   587 label *label218
   588 op shl *tmp295 :createBlockMaskRow:result 1
   589 op add *tmp296 :createBlockMaskRow:x -3
   590 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   591 op or :createBlockMaskRow:result *tmp295 *tmp297
   592 label *label219
-    * op sub :createBlockMaskRow:c -3 1
   593 label *label220
   594 op shl *tmp295 :createBlockMaskRow:result 1
   595 op add *tmp296 :createBlockMaskRow:x -4
   596 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   597 op or :createBlockMaskRow:result *tmp295 *tmp297
   598 label *label221
-    * op sub :createBlockMaskRow:c -4 1
   599 label *label142
   600 set :createBlockMaskRow*retval :createBlockMaskRow:result
   601 jump *label139 always

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   175 label *label62
   176 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   177 jump *label64 notEqual *tmp100 false
+  178 label *label222
   179 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   180 label *label63
-    * jump *label62 always
+  181 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
+  182 jump *label222 equal *tmp100 false
   183 label *label64
   184 label *label61
   185 label *label60

Modifications by Unroll loop at OreLocator.mnd:351:5 (+24 instructions):
 
   341 op shl *tmp203 1 :excludeArea:blockSizeX
   342 op sub :createMatrixOfSize:row *tmp203 1
   343 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
-    * label *label100
-    * label *label197
-    * jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
-    * jump *label102 always
-    * label *label103
-    * label *label104
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
-    * op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label101
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label197 lessThan :createMatrixOfSize:i 7
-    * label *label102
+  344 set :createMatrixOfSize:i 1
+  345 label *label223
+  346 label *label224
+  347 jump *label225 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  348 jump *label102 always
+  349 label *label225
+  350 label *label226
+  351 op shl *tmp207 :createMatrixOfSize:matrix 7
+  352 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  353 label *label227
+  354 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  355 label *label228
+  356 jump *label229 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  357 jump *label102 always
+  358 label *label229
+  359 label *label230
+  360 op shl *tmp207 :createMatrixOfSize:matrix 7
+  361 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  362 label *label231
+  363 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  364 label *label232
+  365 jump *label233 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  366 jump *label102 always
+  367 label *label233
+  368 label *label234
+  369 op shl *tmp207 :createMatrixOfSize:matrix 7
+  370 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  371 label *label235
+  372 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  373 label *label236
+  374 jump *label237 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  375 jump *label102 always
+  376 label *label237
+  377 label *label238
+  378 op shl *tmp207 :createMatrixOfSize:matrix 7
+  379 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  380 label *label239
+  381 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  382 label *label240
+  383 jump *label241 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  384 jump *label102 always
+  385 label *label241
+  386 label *label242
+  387 op shl *tmp207 :createMatrixOfSize:matrix 7
+  388 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  389 label *label243
+  390 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  391 label *label244
+  392 jump *label245 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  393 jump *label102 always
+  394 label *label245
+  395 label *label246
+  396 op shl *tmp207 :createMatrixOfSize:matrix 7
+  397 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
+  398 label *label247
+  399 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  400 label *label102
   401 jump *label99 always
   402 label *label99
   403 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   344 set :createMatrixOfSize:i 1
   345 label *label223
   346 label *label224
-    * jump *label225 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  347 jump *label225 lessThan 1 :excludeArea:blockSizeY
   348 jump *label102 always
   349 label *label225
   350 label *label226
-    * op shl *tmp207 :createMatrixOfSize:matrix 7
+  351 op shl *tmp207 :createMatrixOfSize:row 7
   352 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   353 label *label227
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  354 op add :createMatrixOfSize:i 1 1
   355 label *label228
-    * jump *label229 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  356 jump *label229 lessThan 2 :excludeArea:blockSizeY
   357 jump *label102 always
   358 label *label229
   359 label *label230
   360 op shl *tmp207 :createMatrixOfSize:matrix 7
   361 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   362 label *label231
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  363 op add :createMatrixOfSize:i 2 1
   364 label *label232
-    * jump *label233 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  365 jump *label233 lessThan 3 :excludeArea:blockSizeY
   366 jump *label102 always
   367 label *label233
   368 label *label234
   369 op shl *tmp207 :createMatrixOfSize:matrix 7
   370 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   371 label *label235
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  372 op add :createMatrixOfSize:i 3 1
   373 label *label236
-    * jump *label237 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  374 jump *label237 lessThan 4 :excludeArea:blockSizeY
   375 jump *label102 always
   376 label *label237
   377 label *label238
   378 op shl *tmp207 :createMatrixOfSize:matrix 7
   379 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   380 label *label239
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  381 op add :createMatrixOfSize:i 4 1
   382 label *label240
-    * jump *label241 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  383 jump *label241 lessThan 5 :excludeArea:blockSizeY
   384 jump *label102 always
   385 label *label241
   386 label *label242
   387 op shl *tmp207 :createMatrixOfSize:matrix 7
   388 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   389 label *label243
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  390 op add :createMatrixOfSize:i 5 1
   391 label *label244
-    * jump *label245 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  392 jump *label245 lessThan 6 :excludeArea:blockSizeY
   393 jump *label102 always
   394 label *label245
   395 label *label246
   396 op shl *tmp207 :createMatrixOfSize:matrix 7
   397 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   398 label *label247
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  399 op add :createMatrixOfSize:i 6 1
   400 label *label102
   401 jump *label99 always
   402 label *label99

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   341 op shl *tmp203 1 :excludeArea:blockSizeX
   342 op sub :createMatrixOfSize:row *tmp203 1
   343 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
   344 label *label223
   345 label *label224
   346 jump *label225 lessThan 1 :excludeArea:blockSizeY
 
   350 op shl *tmp207 :createMatrixOfSize:row 7
   351 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   352 label *label227
-    * op add :createMatrixOfSize:i 1 1
   353 label *label228
   354 jump *label229 lessThan 2 :excludeArea:blockSizeY
   355 jump *label102 always
 
   358 op shl *tmp207 :createMatrixOfSize:matrix 7
   359 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   360 label *label231
-    * op add :createMatrixOfSize:i 2 1
   361 label *label232
   362 jump *label233 lessThan 3 :excludeArea:blockSizeY
   363 jump *label102 always
 
   366 op shl *tmp207 :createMatrixOfSize:matrix 7
   367 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   368 label *label235
-    * op add :createMatrixOfSize:i 3 1
   369 label *label236
   370 jump *label237 lessThan 4 :excludeArea:blockSizeY
   371 jump *label102 always
 
   374 op shl *tmp207 :createMatrixOfSize:matrix 7
   375 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   376 label *label239
-    * op add :createMatrixOfSize:i 4 1
   377 label *label240
   378 jump *label241 lessThan 5 :excludeArea:blockSizeY
   379 jump *label102 always
 
   382 op shl *tmp207 :createMatrixOfSize:matrix 7
   383 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   384 label *label243
-    * op add :createMatrixOfSize:i 5 1
   385 label *label244
   386 jump *label245 lessThan 6 :excludeArea:blockSizeY
   387 jump *label102 always
 
   390 op shl *tmp207 :createMatrixOfSize:matrix 7
   391 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   392 label *label247
-    * op add :createMatrixOfSize:i 6 1
   393 label *label102
   394 jump *label99 always
   395 label *label99

Modifications by Unroll loop at OreLocator.mnd:486:5 (+95 instructions):
 
   664 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   665 label *label146
   666 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label147
-    * label *label201
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label150 (h:*label150)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label150) (h:*label150)
-    * label *label150
-    * op shl *tmp311 :createAdjacentMask:row1 1
-    * op or *tmp312 :createAdjacentMask:row2 *tmp311
-    * op shr *tmp313 :createAdjacentMask:row1 1
-    * op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label148
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label201 greaterThanEq :createAdjacentMask:r -4
-    * label *label149
+  667 set :createAdjacentMask:r 2
+  668 label *label248
+  669 label *label249
+  670 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  671 set :createBlockMaskRow:x :createAdjacentMask:x
+  672 set :createBlockMaskRow:y *tmp309
+  673 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
+  674 call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)
+  675 label *label250
+  676 op shl *tmp311 :createAdjacentMask:row1 1
+  677 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  678 op shr *tmp313 :createAdjacentMask:row1 1
+  679 op or *tmp314 *tmp312 *tmp313
+  680 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  681 op shl *tmp316 :createAdjacentMask:result 7
+  682 op and *tmp317 :createAdjacentMask:mask 0xFE
+  683 op or :createAdjacentMask:result *tmp316 *tmp317
+  684 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  685 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  686 label *label251
+  687 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  688 label *label252
+  689 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  690 set :createBlockMaskRow:x :createAdjacentMask:x
+  691 set :createBlockMaskRow:y *tmp309
+  692 setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
+  693 call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)
+  694 label *label253
+  695 op shl *tmp311 :createAdjacentMask:row1 1
+  696 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  697 op shr *tmp313 :createAdjacentMask:row1 1
+  698 op or *tmp314 *tmp312 *tmp313
+  699 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  700 op shl *tmp316 :createAdjacentMask:result 7
+  701 op and *tmp317 :createAdjacentMask:mask 0xFE
+  702 op or :createAdjacentMask:result *tmp316 *tmp317
+  703 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  704 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  705 label *label254
+  706 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  707 label *label255
+  708 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  709 set :createBlockMaskRow:x :createAdjacentMask:x
+  710 set :createBlockMaskRow:y *tmp309
+  711 setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
+  712 call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)
+  713 label *label256
+  714 op shl *tmp311 :createAdjacentMask:row1 1
+  715 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  716 op shr *tmp313 :createAdjacentMask:row1 1
+  717 op or *tmp314 *tmp312 *tmp313
+  718 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  719 op shl *tmp316 :createAdjacentMask:result 7
+  720 op and *tmp317 :createAdjacentMask:mask 0xFE
+  721 op or :createAdjacentMask:result *tmp316 *tmp317
+  722 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  723 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  724 label *label257
+  725 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  726 label *label258
+  727 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  728 set :createBlockMaskRow:x :createAdjacentMask:x
+  729 set :createBlockMaskRow:y *tmp309
+  730 setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
+  731 call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)
+  732 label *label259
+  733 op shl *tmp311 :createAdjacentMask:row1 1
+  734 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  735 op shr *tmp313 :createAdjacentMask:row1 1
+  736 op or *tmp314 *tmp312 *tmp313
+  737 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  738 op shl *tmp316 :createAdjacentMask:result 7
+  739 op and *tmp317 :createAdjacentMask:mask 0xFE
+  740 op or :createAdjacentMask:result *tmp316 *tmp317
+  741 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  742 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  743 label *label260
+  744 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  745 label *label261
+  746 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  747 set :createBlockMaskRow:x :createAdjacentMask:x
+  748 set :createBlockMaskRow:y *tmp309
+  749 setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
+  750 call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)
+  751 label *label262
+  752 op shl *tmp311 :createAdjacentMask:row1 1
+  753 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  754 op shr *tmp313 :createAdjacentMask:row1 1
+  755 op or *tmp314 *tmp312 *tmp313
+  756 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  757 op shl *tmp316 :createAdjacentMask:result 7
+  758 op and *tmp317 :createAdjacentMask:mask 0xFE
+  759 op or :createAdjacentMask:result *tmp316 *tmp317
+  760 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  761 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  762 label *label263
+  763 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  764 label *label264
+  765 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  766 set :createBlockMaskRow:x :createAdjacentMask:x
+  767 set :createBlockMaskRow:y *tmp309
+  768 setaddr :createBlockMaskRow*retaddr *label265 (h:*label265)
+  769 call *label13 *invalid :createBlockMaskRow*retval (m:*label265) (h:*label265)
+  770 label *label265
+  771 op shl *tmp311 :createAdjacentMask:row1 1
+  772 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  773 op shr *tmp313 :createAdjacentMask:row1 1
+  774 op or *tmp314 *tmp312 *tmp313
+  775 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  776 op shl *tmp316 :createAdjacentMask:result 7
+  777 op and *tmp317 :createAdjacentMask:mask 0xFE
+  778 op or :createAdjacentMask:result *tmp316 *tmp317
+  779 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  780 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  781 label *label266
+  782 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  783 label *label267
+  784 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  785 set :createBlockMaskRow:x :createAdjacentMask:x
+  786 set :createBlockMaskRow:y *tmp309
+  787 setaddr :createBlockMaskRow*retaddr *label268 (h:*label268)
+  788 call *label13 *invalid :createBlockMaskRow*retval (m:*label268) (h:*label268)
+  789 label *label268
+  790 op shl *tmp311 :createAdjacentMask:row1 1
+  791 op or *tmp312 :createAdjacentMask:row2 *tmp311
+  792 op shr *tmp313 :createAdjacentMask:row1 1
+  793 op or *tmp314 *tmp312 *tmp313
+  794 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  795 op shl *tmp316 :createAdjacentMask:result 7
+  796 op and *tmp317 :createAdjacentMask:mask 0xFE
+  797 op or :createAdjacentMask:result *tmp316 *tmp317
+  798 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  799 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  800 label *label269
+  801 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  802 label *label149
   803 op shr *tmp304 :createAdjacentMask:result 1
   804 label *label144
   805 label *label151

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   667 set :createAdjacentMask:r 2
   668 label *label248
   669 label *label249
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
+  670 op add *tmp309 :createAdjacentMask:y 2
   671 set :createBlockMaskRow:x :createAdjacentMask:x
   672 set :createBlockMaskRow:y *tmp309
   673 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
    34 label *label22
    35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    36 jump *label24 notEqual *tmp18 false
+   37 label *label270
    38 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    39 label *label23
-    * jump *label22 always
+   40 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
+   41 jump *label270 equal *tmp18 false
    42 label *label24
    43 label *label21
    44 label *label20

Modifications by Replicate loop condition at OreLocator.mnd:43:5 (+1 instructions):
 
   838 label *label155
   839 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   840 jump *label157 notEqual *tmp323 false
+  841 label *label271
   842 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   843 label *label156
-    * jump *label155 always
+  844 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
+  845 jump *label271 equal *tmp323 false
   846 label *label157
   847 label *label154
   848 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:274:1 (+24 instructions):
 
   281 label *label19
   282 return :findDrillLocationLocal*retaddr
   283 end
-    * label *label9
-    * op abs *tmp161 :shiftMask:shiftX
-    * op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
-    * op greaterThan *tmp164 *tmp163 6
-    * op or *tmp165 *tmp162 *tmp164
-    * jump *label88 equal *tmp165 false
-    * set :shiftMask*retval 0
-    * jump *label87 always
-    * label *label88
-    * label *label89
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
-    * jump *label90 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp172 :shiftMask:shift
-    * jump *label91 always
-    * label *label90
-    * op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
-    * label *label91
-    * jump *label92 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label94 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label94
-    * label *label95
-    * op shl *tmp181 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp181
-    * op shl *tmp182 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp182
-    * op shl *tmp183 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp183
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label92
-    * label *label93
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label87 always
-    * label *label87
-    * return :shiftMask*retaddr
-    * end
   284 label *label10
   285 op add *tmp185 :excludeArea:areaWidth 8
   286 op idiv *tmp186 *tmp185 2
 
   362 set :shiftMask:mask :createMatrixOfSize:matrix
   363 set :shiftMask:shiftX :excludeArea:shiftX
   364 set :shiftMask:shiftY :excludeArea:shiftY
-    * setaddr :shiftMask*retaddr *label105 (h:*label105)
-    * call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
-    * label *label105
+  365 label *label272
+  366 op abs *tmp161 :shiftMask:shiftX
+  367 op greaterThan *tmp162 *tmp161 6
+  368 op abs *tmp163 :shiftMask:shiftY
+  369 op greaterThan *tmp164 *tmp163 6
+  370 op or *tmp165 *tmp162 *tmp164
+  371 jump *label273 equal *tmp165 false
+  372 set :shiftMask*retval 0
+  373 jump *label281 always
+  374 label *label273
+  375 label *label274
+  376 op mul *tmp167 7 :shiftMask:shiftY
+  377 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  378 jump *label275 lessThanEq :shiftMask:shift 0
+  379 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  380 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  381 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  382 jump *label276 always
+  383 label *label275
+  384 op sub *tmp174 0 :shiftMask:shift
+  385 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  386 label *label276
+  387 jump *label279 equal :shiftMask:shiftX 0
+  388 op shr :shiftMask:keep 0b1111111 *tmp161
+  389 jump *label277 lessThanEq :shiftMask:shiftX 0
+  390 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  391 label *label277
+  392 label *label278
+  393 op shl *tmp181 :shiftMask:keep 7
+  394 op or :shiftMask:keep :shiftMask:keep *tmp181
+  395 op shl *tmp182 :shiftMask:keep 14
+  396 op or :shiftMask:keep :shiftMask:keep *tmp182
+  397 op shl *tmp183 :shiftMask:keep 21
+  398 op or :shiftMask:keep :shiftMask:keep *tmp183
+  399 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  400 label *label279
+  401 label *label280
+  402 set :shiftMask*retval :shiftMask:mask
+  403 jump *label281 always
+  404 label *label281
   405 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   406 jump *label96 always
   407 jump *label98 always
 
   943 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   944 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   945 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label179 (h:*label179)
-    * call *label9 *invalid :shiftMask*retval (m:*label179) (h:*label179)
-    * label *label179
+  946 label *label282
+  947 op abs *tmp161 :shiftMask:shiftX
+  948 op greaterThan *tmp162 *tmp161 6
+  949 op abs *tmp163 :shiftMask:shiftY
+  950 op greaterThan *tmp164 *tmp163 6
+  951 op or *tmp165 *tmp162 *tmp164
+  952 jump *label283 equal *tmp165 false
+  953 set :shiftMask*retval 0
+  954 jump *label291 always
+  955 label *label283
+  956 label *label284
+  957 op mul *tmp167 7 :shiftMask:shiftY
+  958 op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  959 jump *label285 lessThanEq :shiftMask:shift 0
+  960 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  961 op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  962 op shl :shiftMask:mask *tmp172 :shiftMask:shift
+  963 jump *label286 always
+  964 label *label285
+  965 op sub *tmp174 0 :shiftMask:shift
+  966 op shr :shiftMask:mask :shiftMask:mask *tmp174
+  967 label *label286
+  968 jump *label289 equal :shiftMask:shiftX 0
+  969 op shr :shiftMask:keep 0b1111111 *tmp161
+  970 jump *label287 lessThanEq :shiftMask:shiftX 0
+  971 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  972 label *label287
+  973 label *label288
+  974 op shl *tmp181 :shiftMask:keep 7
+  975 op or :shiftMask:keep :shiftMask:keep *tmp181
+  976 op shl *tmp182 :shiftMask:keep 14
+  977 op or :shiftMask:keep :shiftMask:keep *tmp182
+  978 op shl *tmp183 :shiftMask:keep 21
+  979 op or :shiftMask:keep :shiftMask:keep *tmp183
+  980 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  981 label *label289
+  982 label *label290
+  983 set :shiftMask*retval :shiftMask:mask
+  984 jump *label291 always
+  985 label *label291
   986 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   987 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   988 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   363 set :shiftMask:shiftX :excludeArea:shiftX
   364 set :shiftMask:shiftY :excludeArea:shiftY
   365 label *label272
-    * op abs *tmp161 :shiftMask:shiftX
+  366 op abs *tmp161 :excludeArea:shiftX
   367 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  368 op abs *tmp163 :excludeArea:shiftY
   369 op greaterThan *tmp164 *tmp163 6
   370 op or *tmp165 *tmp162 *tmp164
   371 jump *label273 equal *tmp165 false
 
   373 jump *label281 always
   374 label *label273
   375 label *label274
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  376 op mul *tmp167 7 :excludeArea:shiftY
+  377 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   378 jump *label275 lessThanEq :shiftMask:shift 0
   379 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  380 op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMask
   381 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   382 jump *label276 always
   383 label *label275
   384 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  385 op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174
   386 label *label276
-    * jump *label279 equal :shiftMask:shiftX 0
+  387 jump *label279 equal :excludeArea:shiftX 0
   388 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label277 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  389 jump *label277 lessThanEq :excludeArea:shiftX 0
+  390 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   391 label *label277
   392 label *label278
   393 op shl *tmp181 :shiftMask:keep 7
 
   944 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   945 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   946 label *label282
-    * op abs *tmp161 :shiftMask:shiftX
+  947 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   948 op greaterThan *tmp162 *tmp161 6
-    * op abs *tmp163 :shiftMask:shiftY
+  949 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
   950 op greaterThan *tmp164 *tmp163 6
   951 op or *tmp165 *tmp162 *tmp164
   952 jump *label283 equal *tmp165 false
 
   954 jump *label291 always
   955 label *label283
   956 label *label284
-    * op mul *tmp167 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp167
+  957 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
+  958 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
   959 jump *label285 lessThanEq :shiftMask:shift 0
   960 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp172 :shiftMask:mask :shiftMask:clearMask
+  961 op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   962 op shl :shiftMask:mask *tmp172 :shiftMask:shift
   963 jump *label286 always
   964 label *label285
   965 op sub *tmp174 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp174
+  966 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp174
   967 label *label286
-    * jump *label289 equal :shiftMask:shiftX 0
+  968 jump *label289 equal :layoutThoriumDrillAtLocation:sx 0
   969 op shr :shiftMask:keep 0b1111111 *tmp161
-    * jump *label287 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  970 jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  971 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   972 label *label287
   973 label *label288
   974 op shl *tmp181 :shiftMask:keep 7
 
   983 set :shiftMask*retval :shiftMask:mask
   984 jump *label291 always
   985 label *label291
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  986 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   987 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
   988 op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy
   989 set :tryPlaceGenerator:centerX *tmp361

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   359 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   360 op sub *tmp213 7 :excludeArea:blockSizeY
   361 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * set :shiftMask:mask :createMatrixOfSize:matrix
-    * set :shiftMask:shiftX :excludeArea:shiftX
-    * set :shiftMask:shiftY :excludeArea:shiftY
   362 label *label272
   363 op abs *tmp161 :excludeArea:shiftX
   364 op greaterThan *tmp162 *tmp161 6
 
   936 setaddr :createCombinedMask*retaddr *label178 (h:*label178)
   937 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   938 label *label178
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   939 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   940 label *label282
   941 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   942 op greaterThan *tmp162 *tmp161 6

Modifications by Inline function call at OreLocator.mnd:483:16 (+35 instructions):
 
   647 op add *tmp305 :createCombinedMask:y 4
   648 set :createBlockMaskRow:x :createCombinedMask:x
   649 set :createBlockMaskRow:y *tmp305
-    * setaddr :createBlockMaskRow*retaddr *label145 (h:*label145)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label145) (h:*label145)
-    * label *label145
+  650 label *label292
+  651 label *label293
+  652 label *label294
+  653 op add *tmp296 :createBlockMaskRow:x 4
+  654 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  655 op or :createBlockMaskRow:result 0 *tmp297
+  656 label *label295
+  657 label *label296
+  658 op shl *tmp295 :createBlockMaskRow:result 1
+  659 op add *tmp296 :createBlockMaskRow:x 3
+  660 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  661 op or :createBlockMaskRow:result *tmp295 *tmp297
+  662 label *label297
+  663 label *label298
+  664 op shl *tmp295 :createBlockMaskRow:result 1
+  665 op add *tmp296 :createBlockMaskRow:x 2
+  666 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  667 op or :createBlockMaskRow:result *tmp295 *tmp297
+  668 label *label299
+  669 label *label300
+  670 op shl *tmp295 :createBlockMaskRow:result 1
+  671 op add *tmp296 :createBlockMaskRow:x 1
+  672 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  673 op or :createBlockMaskRow:result *tmp295 *tmp297
+  674 label *label301
+  675 label *label302
+  676 op shl *tmp295 :createBlockMaskRow:result 1
+  677 op add *tmp296 :createBlockMaskRow:x 0
+  678 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  679 op or :createBlockMaskRow:result *tmp295 *tmp297
+  680 label *label303
+  681 label *label304
+  682 op shl *tmp295 :createBlockMaskRow:result 1
+  683 op add *tmp296 :createBlockMaskRow:x -1
+  684 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  685 op or :createBlockMaskRow:result *tmp295 *tmp297
+  686 label *label305
+  687 label *label306
+  688 op shl *tmp295 :createBlockMaskRow:result 1
+  689 op add *tmp296 :createBlockMaskRow:x -2
+  690 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  691 op or :createBlockMaskRow:result *tmp295 *tmp297
+  692 label *label307
+  693 label *label308
+  694 op shl *tmp295 :createBlockMaskRow:result 1
+  695 op add *tmp296 :createBlockMaskRow:x -3
+  696 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  697 op or :createBlockMaskRow:result *tmp295 *tmp297
+  698 label *label309
+  699 label *label310
+  700 op shl *tmp295 :createBlockMaskRow:result 1
+  701 op add *tmp296 :createBlockMaskRow:x -4
+  702 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  703 op or :createBlockMaskRow:result *tmp295 *tmp297
+  704 label *label311
+  705 label *label312
+  706 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  707 jump *label313 always
+  708 label *label313
   709 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   710 op add *tmp307 :createAdjacentMask:y 3
   711 set :createBlockMaskRow:x :createAdjacentMask:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   650 label *label292
   651 label *label293
   652 label *label294
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  653 op add *tmp296 :createCombinedMask:x 4
+  654 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   655 op or :createBlockMaskRow:result 0 *tmp297
   656 label *label295
   657 label *label296
   658 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  659 op add *tmp296 :createCombinedMask:x 3
+  660 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   661 op or :createBlockMaskRow:result *tmp295 *tmp297
   662 label *label297
   663 label *label298
   664 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  665 op add *tmp296 :createCombinedMask:x 2
+  666 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   667 op or :createBlockMaskRow:result *tmp295 *tmp297
   668 label *label299
   669 label *label300
   670 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  671 op add *tmp296 :createCombinedMask:x 1
+  672 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   673 op or :createBlockMaskRow:result *tmp295 *tmp297
   674 label *label301
   675 label *label302
   676 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  677 op add *tmp296 :createCombinedMask:x 0
+  678 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   679 op or :createBlockMaskRow:result *tmp295 *tmp297
   680 label *label303
   681 label *label304
   682 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  683 op add *tmp296 :createCombinedMask:x -1
+  684 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   685 op or :createBlockMaskRow:result *tmp295 *tmp297
   686 label *label305
   687 label *label306
   688 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  689 op add *tmp296 :createCombinedMask:x -2
+  690 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   691 op or :createBlockMaskRow:result *tmp295 *tmp297
   692 label *label307
   693 label *label308
   694 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  695 op add *tmp296 :createCombinedMask:x -3
+  696 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   697 op or :createBlockMaskRow:result *tmp295 *tmp297
   698 label *label309
   699 label *label310
   700 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  701 op add *tmp296 :createCombinedMask:x -4
+  702 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   703 op or :createBlockMaskRow:result *tmp295 *tmp297
   704 label *label311
   705 label *label312
   706 set :createBlockMaskRow*retval :createBlockMaskRow:result
   707 jump *label313 always
   708 label *label313
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp307 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  709 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  710 op add *tmp307 :createCombinedMask:y 3
+  711 set :createBlockMaskRow:x :createCombinedMask:x
   712 set :createBlockMaskRow:y *tmp307
   713 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   714 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   645 set :createAdjacentMask:y :createCombinedMask:y
   646 set :createAdjacentMask:result 0
   647 op add *tmp305 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp305
   648 label *label292
   649 label *label293
   650 label *label294
 
   701 op or :createBlockMaskRow:result *tmp295 *tmp297
   702 label *label311
   703 label *label312
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   704 jump *label313 always
   705 label *label313
   706 set :createAdjacentMask:row2 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:484:16 (+35 instructions):
 
   707 op add *tmp307 :createCombinedMask:y 3
   708 set :createBlockMaskRow:x :createCombinedMask:x
   709 set :createBlockMaskRow:y *tmp307
-    * setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
-    * label *label146
+  710 label *label314
+  711 label *label315
+  712 label *label316
+  713 op add *tmp296 :createBlockMaskRow:x 4
+  714 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  715 op or :createBlockMaskRow:result 0 *tmp297
+  716 label *label317
+  717 label *label318
+  718 op shl *tmp295 :createBlockMaskRow:result 1
+  719 op add *tmp296 :createBlockMaskRow:x 3
+  720 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  721 op or :createBlockMaskRow:result *tmp295 *tmp297
+  722 label *label319
+  723 label *label320
+  724 op shl *tmp295 :createBlockMaskRow:result 1
+  725 op add *tmp296 :createBlockMaskRow:x 2
+  726 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  727 op or :createBlockMaskRow:result *tmp295 *tmp297
+  728 label *label321
+  729 label *label322
+  730 op shl *tmp295 :createBlockMaskRow:result 1
+  731 op add *tmp296 :createBlockMaskRow:x 1
+  732 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  733 op or :createBlockMaskRow:result *tmp295 *tmp297
+  734 label *label323
+  735 label *label324
+  736 op shl *tmp295 :createBlockMaskRow:result 1
+  737 op add *tmp296 :createBlockMaskRow:x 0
+  738 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  739 op or :createBlockMaskRow:result *tmp295 *tmp297
+  740 label *label325
+  741 label *label326
+  742 op shl *tmp295 :createBlockMaskRow:result 1
+  743 op add *tmp296 :createBlockMaskRow:x -1
+  744 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  745 op or :createBlockMaskRow:result *tmp295 *tmp297
+  746 label *label327
+  747 label *label328
+  748 op shl *tmp295 :createBlockMaskRow:result 1
+  749 op add *tmp296 :createBlockMaskRow:x -2
+  750 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  751 op or :createBlockMaskRow:result *tmp295 *tmp297
+  752 label *label329
+  753 label *label330
+  754 op shl *tmp295 :createBlockMaskRow:result 1
+  755 op add *tmp296 :createBlockMaskRow:x -3
+  756 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  757 op or :createBlockMaskRow:result *tmp295 *tmp297
+  758 label *label331
+  759 label *label332
+  760 op shl *tmp295 :createBlockMaskRow:result 1
+  761 op add *tmp296 :createBlockMaskRow:x -4
+  762 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  763 op or :createBlockMaskRow:result *tmp295 *tmp297
+  764 label *label333
+  765 label *label334
+  766 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  767 jump *label335 always
+  768 label *label335
   769 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   770 set :createAdjacentMask:r 2
   771 label *label248

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   710 label *label314
   711 label *label315
   712 label *label316
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  713 op add *tmp296 :createCombinedMask:x 4
+  714 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   715 op or :createBlockMaskRow:result 0 *tmp297
   716 label *label317
   717 label *label318
   718 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  719 op add *tmp296 :createCombinedMask:x 3
+  720 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   721 op or :createBlockMaskRow:result *tmp295 *tmp297
   722 label *label319
   723 label *label320
   724 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  725 op add *tmp296 :createCombinedMask:x 2
+  726 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   727 op or :createBlockMaskRow:result *tmp295 *tmp297
   728 label *label321
   729 label *label322
   730 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  731 op add *tmp296 :createCombinedMask:x 1
+  732 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   733 op or :createBlockMaskRow:result *tmp295 *tmp297
   734 label *label323
   735 label *label324
   736 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  737 op add *tmp296 :createCombinedMask:x 0
+  738 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   739 op or :createBlockMaskRow:result *tmp295 *tmp297
   740 label *label325
   741 label *label326
   742 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  743 op add *tmp296 :createCombinedMask:x -1
+  744 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   745 op or :createBlockMaskRow:result *tmp295 *tmp297
   746 label *label327
   747 label *label328
   748 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  749 op add *tmp296 :createCombinedMask:x -2
+  750 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   751 op or :createBlockMaskRow:result *tmp295 *tmp297
   752 label *label329
   753 label *label330
   754 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  755 op add *tmp296 :createCombinedMask:x -3
+  756 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   757 op or :createBlockMaskRow:result *tmp295 *tmp297
   758 label *label331
   759 label *label332
   760 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  761 op add *tmp296 :createCombinedMask:x -4
+  762 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   763 op or :createBlockMaskRow:result *tmp295 *tmp297
   764 label *label333
   765 label *label334
   766 set :createBlockMaskRow*retval :createBlockMaskRow:result
   767 jump *label335 always
   768 label *label335
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  769 set :createAdjacentMask:row1 :createBlockMaskRow:result
   770 set :createAdjacentMask:r 2
   771 label *label248
   772 label *label249
-    * op add *tmp309 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  773 op add *tmp309 :createCombinedMask:y 2
+  774 set :createBlockMaskRow:x :createCombinedMask:x
   775 set :createBlockMaskRow:y *tmp309
   776 setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
   777 call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   705 label *label313
   706 set :createAdjacentMask:row2 :createBlockMaskRow:result
   707 op add *tmp307 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp307
   708 label *label314
   709 label *label315
   710 label *label316
 
   761 op or :createBlockMaskRow:result *tmp295 *tmp297
   762 label *label333
   763 label *label334
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   764 jump *label335 always
   765 label *label335
   766 set :createAdjacentMask:row1 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:487:20 (+35 instructions):
 
   770 op add *tmp309 :createCombinedMask:y 2
   771 set :createBlockMaskRow:x :createCombinedMask:x
   772 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label250 (h:*label250)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label250) (h:*label250)
-    * label *label250
+  773 label *label336
+  774 label *label337
+  775 label *label338
+  776 op add *tmp296 :createBlockMaskRow:x 4
+  777 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  778 op or :createBlockMaskRow:result 0 *tmp297
+  779 label *label339
+  780 label *label340
+  781 op shl *tmp295 :createBlockMaskRow:result 1
+  782 op add *tmp296 :createBlockMaskRow:x 3
+  783 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  784 op or :createBlockMaskRow:result *tmp295 *tmp297
+  785 label *label341
+  786 label *label342
+  787 op shl *tmp295 :createBlockMaskRow:result 1
+  788 op add *tmp296 :createBlockMaskRow:x 2
+  789 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  790 op or :createBlockMaskRow:result *tmp295 *tmp297
+  791 label *label343
+  792 label *label344
+  793 op shl *tmp295 :createBlockMaskRow:result 1
+  794 op add *tmp296 :createBlockMaskRow:x 1
+  795 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  796 op or :createBlockMaskRow:result *tmp295 *tmp297
+  797 label *label345
+  798 label *label346
+  799 op shl *tmp295 :createBlockMaskRow:result 1
+  800 op add *tmp296 :createBlockMaskRow:x 0
+  801 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  802 op or :createBlockMaskRow:result *tmp295 *tmp297
+  803 label *label347
+  804 label *label348
+  805 op shl *tmp295 :createBlockMaskRow:result 1
+  806 op add *tmp296 :createBlockMaskRow:x -1
+  807 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  808 op or :createBlockMaskRow:result *tmp295 *tmp297
+  809 label *label349
+  810 label *label350
+  811 op shl *tmp295 :createBlockMaskRow:result 1
+  812 op add *tmp296 :createBlockMaskRow:x -2
+  813 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  814 op or :createBlockMaskRow:result *tmp295 *tmp297
+  815 label *label351
+  816 label *label352
+  817 op shl *tmp295 :createBlockMaskRow:result 1
+  818 op add *tmp296 :createBlockMaskRow:x -3
+  819 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  820 op or :createBlockMaskRow:result *tmp295 *tmp297
+  821 label *label353
+  822 label *label354
+  823 op shl *tmp295 :createBlockMaskRow:result 1
+  824 op add *tmp296 :createBlockMaskRow:x -4
+  825 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  826 op or :createBlockMaskRow:result *tmp295 *tmp297
+  827 label *label355
+  828 label *label356
+  829 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  830 jump *label357 always
+  831 label *label357
   832 op shl *tmp311 :createAdjacentMask:row1 1
   833 op or *tmp312 :createAdjacentMask:row2 *tmp311
   834 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   773 label *label336
   774 label *label337
   775 label *label338
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  776 op add *tmp296 :createCombinedMask:x 4
+  777 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   778 op or :createBlockMaskRow:result 0 *tmp297
   779 label *label339
   780 label *label340
   781 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  782 op add *tmp296 :createCombinedMask:x 3
+  783 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   784 op or :createBlockMaskRow:result *tmp295 *tmp297
   785 label *label341
   786 label *label342
   787 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  788 op add *tmp296 :createCombinedMask:x 2
+  789 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   790 op or :createBlockMaskRow:result *tmp295 *tmp297
   791 label *label343
   792 label *label344
   793 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  794 op add *tmp296 :createCombinedMask:x 1
+  795 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   796 op or :createBlockMaskRow:result *tmp295 *tmp297
   797 label *label345
   798 label *label346
   799 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  800 op add *tmp296 :createCombinedMask:x 0
+  801 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   802 op or :createBlockMaskRow:result *tmp295 *tmp297
   803 label *label347
   804 label *label348
   805 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  806 op add *tmp296 :createCombinedMask:x -1
+  807 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   808 op or :createBlockMaskRow:result *tmp295 *tmp297
   809 label *label349
   810 label *label350
   811 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  812 op add *tmp296 :createCombinedMask:x -2
+  813 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   814 op or :createBlockMaskRow:result *tmp295 *tmp297
   815 label *label351
   816 label *label352
   817 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  818 op add *tmp296 :createCombinedMask:x -3
+  819 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   820 op or :createBlockMaskRow:result *tmp295 *tmp297
   821 label *label353
   822 label *label354
   823 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  824 op add *tmp296 :createCombinedMask:x -4
+  825 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   826 op or :createBlockMaskRow:result *tmp295 *tmp297
   827 label *label355
   828 label *label356
 
   833 op or *tmp312 :createAdjacentMask:row2 *tmp311
   834 op shr *tmp313 :createAdjacentMask:row1 1
   835 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
-    * op shl *tmp316 :createAdjacentMask:result 7
+  836 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
+  837 op shl *tmp316 0 7
   838 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp316 *tmp317
+  839 op or :createAdjacentMask:result 0 *tmp317
   840 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  841 set :createAdjacentMask:row1 :createBlockMaskRow:result
   842 label *label251
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  843 op sub :createAdjacentMask:r 2 1
   844 label *label252
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  845 op add *tmp309 :createCombinedMask:y 1
+  846 set :createBlockMaskRow:x :createCombinedMask:x
   847 set :createBlockMaskRow:y *tmp309
   848 setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
   849 call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   643 write 1 processor4 "@counter"
   644 set :createAdjacentMask:x :createCombinedMask:x
   645 set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   646 op add *tmp305 :createCombinedMask:y 4
   647 label *label292
   648 label *label293
 
   763 jump *label335 always
   764 label *label335
   765 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   766 label *label248
   767 label *label249
   768 op add *tmp309 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   769 label *label336
   770 label *label337
   771 label *label338
 
   822 op or :createBlockMaskRow:result *tmp295 *tmp297
   823 label *label355
   824 label *label356
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   825 jump *label357 always
   826 label *label357
   827 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:487:20 (+35 instructions):
 
   840 op add *tmp309 :createCombinedMask:y 1
   841 set :createBlockMaskRow:x :createCombinedMask:x
   842 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label253 (h:*label253)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label253) (h:*label253)
-    * label *label253
+  843 label *label358
+  844 label *label359
+  845 label *label360
+  846 op add *tmp296 :createBlockMaskRow:x 4
+  847 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  848 op or :createBlockMaskRow:result 0 *tmp297
+  849 label *label361
+  850 label *label362
+  851 op shl *tmp295 :createBlockMaskRow:result 1
+  852 op add *tmp296 :createBlockMaskRow:x 3
+  853 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  854 op or :createBlockMaskRow:result *tmp295 *tmp297
+  855 label *label363
+  856 label *label364
+  857 op shl *tmp295 :createBlockMaskRow:result 1
+  858 op add *tmp296 :createBlockMaskRow:x 2
+  859 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  860 op or :createBlockMaskRow:result *tmp295 *tmp297
+  861 label *label365
+  862 label *label366
+  863 op shl *tmp295 :createBlockMaskRow:result 1
+  864 op add *tmp296 :createBlockMaskRow:x 1
+  865 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  866 op or :createBlockMaskRow:result *tmp295 *tmp297
+  867 label *label367
+  868 label *label368
+  869 op shl *tmp295 :createBlockMaskRow:result 1
+  870 op add *tmp296 :createBlockMaskRow:x 0
+  871 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  872 op or :createBlockMaskRow:result *tmp295 *tmp297
+  873 label *label369
+  874 label *label370
+  875 op shl *tmp295 :createBlockMaskRow:result 1
+  876 op add *tmp296 :createBlockMaskRow:x -1
+  877 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  878 op or :createBlockMaskRow:result *tmp295 *tmp297
+  879 label *label371
+  880 label *label372
+  881 op shl *tmp295 :createBlockMaskRow:result 1
+  882 op add *tmp296 :createBlockMaskRow:x -2
+  883 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  884 op or :createBlockMaskRow:result *tmp295 *tmp297
+  885 label *label373
+  886 label *label374
+  887 op shl *tmp295 :createBlockMaskRow:result 1
+  888 op add *tmp296 :createBlockMaskRow:x -3
+  889 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  890 op or :createBlockMaskRow:result *tmp295 *tmp297
+  891 label *label375
+  892 label *label376
+  893 op shl *tmp295 :createBlockMaskRow:result 1
+  894 op add *tmp296 :createBlockMaskRow:x -4
+  895 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  896 op or :createBlockMaskRow:result *tmp295 *tmp297
+  897 label *label377
+  898 label *label378
+  899 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  900 jump *label379 always
+  901 label *label379
   902 op shl *tmp311 :createAdjacentMask:row1 1
   903 op or *tmp312 :createAdjacentMask:row2 *tmp311
   904 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   829 op shr *tmp313 :createAdjacentMask:row1 1
   830 op or *tmp314 *tmp312 *tmp313
   831 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op shl *tmp316 0 7
   832 op and *tmp317 :createAdjacentMask:mask 0xFE
   833 op or :createAdjacentMask:result 0 *tmp317
   834 set :createAdjacentMask:row2 :createAdjacentMask:row1
 
   842 label *label358
   843 label *label359
   844 label *label360
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  845 op add *tmp296 :createCombinedMask:x 4
+  846 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   847 op or :createBlockMaskRow:result 0 *tmp297
   848 label *label361
   849 label *label362
   850 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  851 op add *tmp296 :createCombinedMask:x 3
+  852 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   853 op or :createBlockMaskRow:result *tmp295 *tmp297
   854 label *label363
   855 label *label364
   856 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  857 op add *tmp296 :createCombinedMask:x 2
+  858 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   859 op or :createBlockMaskRow:result *tmp295 *tmp297
   860 label *label365
   861 label *label366
   862 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  863 op add *tmp296 :createCombinedMask:x 1
+  864 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   865 op or :createBlockMaskRow:result *tmp295 *tmp297
   866 label *label367
   867 label *label368
   868 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  869 op add *tmp296 :createCombinedMask:x 0
+  870 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   871 op or :createBlockMaskRow:result *tmp295 *tmp297
   872 label *label369
   873 label *label370
   874 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  875 op add *tmp296 :createCombinedMask:x -1
+  876 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   877 op or :createBlockMaskRow:result *tmp295 *tmp297
   878 label *label371
   879 label *label372
   880 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  881 op add *tmp296 :createCombinedMask:x -2
+  882 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   883 op or :createBlockMaskRow:result *tmp295 *tmp297
   884 label *label373
   885 label *label374
   886 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  887 op add *tmp296 :createCombinedMask:x -3
+  888 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   889 op or :createBlockMaskRow:result *tmp295 *tmp297
   890 label *label375
   891 label *label376
   892 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  893 op add *tmp296 :createCombinedMask:x -4
+  894 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   895 op or :createBlockMaskRow:result *tmp295 *tmp297
   896 label *label377
   897 label *label378
 
   902 op or *tmp312 :createAdjacentMask:row2 *tmp311
   903 op shr *tmp313 :createAdjacentMask:row1 1
   904 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  905 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   906 op shl *tmp316 :createAdjacentMask:result 7
   907 op and *tmp317 :createAdjacentMask:mask 0xFE
   908 op or :createAdjacentMask:result *tmp316 *tmp317
   909 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  910 set :createAdjacentMask:row1 :createBlockMaskRow:result
   911 label *label254
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  912 op sub :createAdjacentMask:r 1 1
   913 label *label255
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  914 op add *tmp309 :createCombinedMask:y 0
+  915 set :createBlockMaskRow:x :createCombinedMask:x
   916 set :createBlockMaskRow:y *tmp309
   917 setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
   918 call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   834 set :createAdjacentMask:row2 :createAdjacentMask:row1
   835 set :createAdjacentMask:row1 :createBlockMaskRow:result
   836 label *label251
-    * op sub :createAdjacentMask:r 2 1
   837 label *label252
   838 op add *tmp309 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   839 label *label358
   840 label *label359
   841 label *label360
 
   892 op or :createBlockMaskRow:result *tmp295 *tmp297
   893 label *label377
   894 label *label378
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   895 jump *label379 always
   896 label *label379
   897 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:487:20 (+35 instructions):
 
   910 op add *tmp309 :createCombinedMask:y 0
   911 set :createBlockMaskRow:x :createCombinedMask:x
   912 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label256 (h:*label256)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label256) (h:*label256)
-    * label *label256
+  913 label *label380
+  914 label *label381
+  915 label *label382
+  916 op add *tmp296 :createBlockMaskRow:x 4
+  917 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  918 op or :createBlockMaskRow:result 0 *tmp297
+  919 label *label383
+  920 label *label384
+  921 op shl *tmp295 :createBlockMaskRow:result 1
+  922 op add *tmp296 :createBlockMaskRow:x 3
+  923 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  924 op or :createBlockMaskRow:result *tmp295 *tmp297
+  925 label *label385
+  926 label *label386
+  927 op shl *tmp295 :createBlockMaskRow:result 1
+  928 op add *tmp296 :createBlockMaskRow:x 2
+  929 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  930 op or :createBlockMaskRow:result *tmp295 *tmp297
+  931 label *label387
+  932 label *label388
+  933 op shl *tmp295 :createBlockMaskRow:result 1
+  934 op add *tmp296 :createBlockMaskRow:x 1
+  935 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  936 op or :createBlockMaskRow:result *tmp295 *tmp297
+  937 label *label389
+  938 label *label390
+  939 op shl *tmp295 :createBlockMaskRow:result 1
+  940 op add *tmp296 :createBlockMaskRow:x 0
+  941 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  942 op or :createBlockMaskRow:result *tmp295 *tmp297
+  943 label *label391
+  944 label *label392
+  945 op shl *tmp295 :createBlockMaskRow:result 1
+  946 op add *tmp296 :createBlockMaskRow:x -1
+  947 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  948 op or :createBlockMaskRow:result *tmp295 *tmp297
+  949 label *label393
+  950 label *label394
+  951 op shl *tmp295 :createBlockMaskRow:result 1
+  952 op add *tmp296 :createBlockMaskRow:x -2
+  953 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  954 op or :createBlockMaskRow:result *tmp295 *tmp297
+  955 label *label395
+  956 label *label396
+  957 op shl *tmp295 :createBlockMaskRow:result 1
+  958 op add *tmp296 :createBlockMaskRow:x -3
+  959 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  960 op or :createBlockMaskRow:result *tmp295 *tmp297
+  961 label *label397
+  962 label *label398
+  963 op shl *tmp295 :createBlockMaskRow:result 1
+  964 op add *tmp296 :createBlockMaskRow:x -4
+  965 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  966 op or :createBlockMaskRow:result *tmp295 *tmp297
+  967 label *label399
+  968 label *label400
+  969 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  970 jump *label401 always
+  971 label *label401
   972 op shl *tmp311 :createAdjacentMask:row1 1
   973 op or *tmp312 :createAdjacentMask:row2 *tmp311
   974 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   913 label *label380
   914 label *label381
   915 label *label382
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  916 op add *tmp296 :createCombinedMask:x 4
+  917 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   918 op or :createBlockMaskRow:result 0 *tmp297
   919 label *label383
   920 label *label384
   921 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  922 op add *tmp296 :createCombinedMask:x 3
+  923 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   924 op or :createBlockMaskRow:result *tmp295 *tmp297
   925 label *label385
   926 label *label386
   927 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  928 op add *tmp296 :createCombinedMask:x 2
+  929 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   930 op or :createBlockMaskRow:result *tmp295 *tmp297
   931 label *label387
   932 label *label388
   933 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  934 op add *tmp296 :createCombinedMask:x 1
+  935 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   936 op or :createBlockMaskRow:result *tmp295 *tmp297
   937 label *label389
   938 label *label390
   939 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  940 op add *tmp296 :createCombinedMask:x 0
+  941 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   942 op or :createBlockMaskRow:result *tmp295 *tmp297
   943 label *label391
   944 label *label392
   945 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  946 op add *tmp296 :createCombinedMask:x -1
+  947 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   948 op or :createBlockMaskRow:result *tmp295 *tmp297
   949 label *label393
   950 label *label394
   951 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  952 op add *tmp296 :createCombinedMask:x -2
+  953 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   954 op or :createBlockMaskRow:result *tmp295 *tmp297
   955 label *label395
   956 label *label396
   957 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  958 op add *tmp296 :createCombinedMask:x -3
+  959 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   960 op or :createBlockMaskRow:result *tmp295 *tmp297
   961 label *label397
   962 label *label398
   963 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  964 op add *tmp296 :createCombinedMask:x -4
+  965 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   966 op or :createBlockMaskRow:result *tmp295 *tmp297
   967 label *label399
   968 label *label400
 
   973 op or *tmp312 :createAdjacentMask:row2 *tmp311
   974 op shr *tmp313 :createAdjacentMask:row1 1
   975 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+  976 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   977 op shl *tmp316 :createAdjacentMask:result 7
   978 op and *tmp317 :createAdjacentMask:mask 0xFE
   979 op or :createAdjacentMask:result *tmp316 *tmp317
   980 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  981 set :createAdjacentMask:row1 :createBlockMaskRow:result
   982 label *label257
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  983 op sub :createAdjacentMask:r 0 1
   984 label *label258
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  985 op add *tmp309 :createCombinedMask:y -1
+  986 set :createBlockMaskRow:x :createCombinedMask:x
   987 set :createBlockMaskRow:y *tmp309
   988 setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
   989 call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   905 set :createAdjacentMask:row2 :createAdjacentMask:row1
   906 set :createAdjacentMask:row1 :createBlockMaskRow:result
   907 label *label254
-    * op sub :createAdjacentMask:r 1 1
   908 label *label255
   909 op add *tmp309 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   910 label *label380
   911 label *label381
   912 label *label382
 
   963 op or :createBlockMaskRow:result *tmp295 *tmp297
   964 label *label399
   965 label *label400
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   966 jump *label401 always
   967 label *label401
   968 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:487:20 (+35 instructions):
 
   981 op add *tmp309 :createCombinedMask:y -1
   982 set :createBlockMaskRow:x :createCombinedMask:x
   983 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label259 (h:*label259)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label259) (h:*label259)
-    * label *label259
+  984 label *label402
+  985 label *label403
+  986 label *label404
+  987 op add *tmp296 :createBlockMaskRow:x 4
+  988 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  989 op or :createBlockMaskRow:result 0 *tmp297
+  990 label *label405
+  991 label *label406
+  992 op shl *tmp295 :createBlockMaskRow:result 1
+  993 op add *tmp296 :createBlockMaskRow:x 3
+  994 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  995 op or :createBlockMaskRow:result *tmp295 *tmp297
+  996 label *label407
+  997 label *label408
+  998 op shl *tmp295 :createBlockMaskRow:result 1
+  999 op add *tmp296 :createBlockMaskRow:x 2
+ 1000 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1001 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1002 label *label409
+ 1003 label *label410
+ 1004 op shl *tmp295 :createBlockMaskRow:result 1
+ 1005 op add *tmp296 :createBlockMaskRow:x 1
+ 1006 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1007 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1008 label *label411
+ 1009 label *label412
+ 1010 op shl *tmp295 :createBlockMaskRow:result 1
+ 1011 op add *tmp296 :createBlockMaskRow:x 0
+ 1012 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1013 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1014 label *label413
+ 1015 label *label414
+ 1016 op shl *tmp295 :createBlockMaskRow:result 1
+ 1017 op add *tmp296 :createBlockMaskRow:x -1
+ 1018 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1019 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1020 label *label415
+ 1021 label *label416
+ 1022 op shl *tmp295 :createBlockMaskRow:result 1
+ 1023 op add *tmp296 :createBlockMaskRow:x -2
+ 1024 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1025 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1026 label *label417
+ 1027 label *label418
+ 1028 op shl *tmp295 :createBlockMaskRow:result 1
+ 1029 op add *tmp296 :createBlockMaskRow:x -3
+ 1030 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1031 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1032 label *label419
+ 1033 label *label420
+ 1034 op shl *tmp295 :createBlockMaskRow:result 1
+ 1035 op add *tmp296 :createBlockMaskRow:x -4
+ 1036 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1037 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1038 label *label421
+ 1039 label *label422
+ 1040 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1041 jump *label423 always
+ 1042 label *label423
  1043 op shl *tmp311 :createAdjacentMask:row1 1
  1044 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1045 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   984 label *label402
   985 label *label403
   986 label *label404
-    * op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  987 op add *tmp296 :createCombinedMask:x 4
+  988 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   989 op or :createBlockMaskRow:result 0 *tmp297
   990 label *label405
   991 label *label406
   992 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  993 op add *tmp296 :createCombinedMask:x 3
+  994 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   995 op or :createBlockMaskRow:result *tmp295 *tmp297
   996 label *label407
   997 label *label408
   998 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  999 op add *tmp296 :createCombinedMask:x 2
+ 1000 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1001 op or :createBlockMaskRow:result *tmp295 *tmp297
  1002 label *label409
  1003 label *label410
  1004 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1005 op add *tmp296 :createCombinedMask:x 1
+ 1006 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1007 op or :createBlockMaskRow:result *tmp295 *tmp297
  1008 label *label411
  1009 label *label412
  1010 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1011 op add *tmp296 :createCombinedMask:x 0
+ 1012 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1013 op or :createBlockMaskRow:result *tmp295 *tmp297
  1014 label *label413
  1015 label *label414
  1016 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1017 op add *tmp296 :createCombinedMask:x -1
+ 1018 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1019 op or :createBlockMaskRow:result *tmp295 *tmp297
  1020 label *label415
  1021 label *label416
  1022 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1023 op add *tmp296 :createCombinedMask:x -2
+ 1024 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1025 op or :createBlockMaskRow:result *tmp295 *tmp297
  1026 label *label417
  1027 label *label418
  1028 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1029 op add *tmp296 :createCombinedMask:x -3
+ 1030 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1031 op or :createBlockMaskRow:result *tmp295 *tmp297
  1032 label *label419
  1033 label *label420
  1034 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1035 op add *tmp296 :createCombinedMask:x -4
+ 1036 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
  1037 op or :createBlockMaskRow:result *tmp295 *tmp297
  1038 label *label421
  1039 label *label422
 
  1044 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1045 op shr *tmp313 :createAdjacentMask:row1 1
  1046 op or *tmp314 *tmp312 *tmp313
-    * op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*retval
+ 1047 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
  1048 op shl *tmp316 :createAdjacentMask:result 7
  1049 op and *tmp317 :createAdjacentMask:mask 0xFE
  1050 op or :createAdjacentMask:result *tmp316 *tmp317
  1051 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1052 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1053 label *label260
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1054 op sub :createAdjacentMask:r -1 1
  1055 label *label261
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1056 op add *tmp309 :createCombinedMask:y -2
+ 1057 set :createBlockMaskRow:x :createCombinedMask:x
  1058 set :createBlockMaskRow:y *tmp309
  1059 setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
  1060 call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   976 set :createAdjacentMask:row2 :createAdjacentMask:row1
   977 set :createAdjacentMask:row1 :createBlockMaskRow:result
   978 label *label257
-    * op sub :createAdjacentMask:r 0 1
   979 label *label258
   980 op add *tmp309 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
   981 label *label402
   982 label *label403
   983 label *label404
 
  1034 op or :createBlockMaskRow:result *tmp295 *tmp297
  1035 label *label421
  1036 label *label422
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1037 jump *label423 always
  1038 label *label423
  1039 op shl *tmp311 :createAdjacentMask:row1 1

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-16 instructions):
 
   142 jump *label196 lessThan :visited:i *tmp75
   143 label *label51
   144 set *tmp74 false
-    * jump *label48 always
   145 label *label48
   146 jump *label54 notEqual *tmp74 false
   147 op div *tmp90 2 .angle
 
   160 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   161 label *label31
   162 set *tmp28 false
-    * jump *label28 always
   163 label *label28
   164 set :findDrillLocationLocal:oreX :locateOreAway:x
   165 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   349 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   350 label *label247
   351 label *label102
-    * jump *label99 always
   352 label *label99
   353 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   354 op sub *tmp210 7 :excludeArea:blockSizeX
 
   394 label *label279
   395 label *label280
   396 set :shiftMask*retval :shiftMask:mask
-    * jump *label281 always
   397 label *label281
   398 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   399 jump *label96 always
   400 jump *label98 always
   401 label *label97
   402 set :excludeArea*retval :excludeArea:mask
-    * jump *label96 always
   403 label *label98
   404 label *label96
   405 return :excludeArea*retaddr
 
   444 jump *label198 lessThanEq :findPossiblePlacement:y 3
   445 label *label109
   446 set :findPossiblePlacement*retval -1
-    * jump *label106 always
   447 label *label106
   448 return :findPossiblePlacement*retaddr
   449 end
 
   625 label *label221
   626 label *label142
   627 set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label139 always
   628 label *label139
   629 return :createBlockMaskRow*retaddr
   630 end
 
   693 op or :createBlockMaskRow:result *tmp295 *tmp297
   694 label *label311
   695 label *label312
-    * jump *label313 always
   696 label *label313
   697 set :createAdjacentMask:row2 :createBlockMaskRow:result
   698 op add *tmp307 :createCombinedMask:y 3
 
   752 op or :createBlockMaskRow:result *tmp295 *tmp297
   753 label *label333
   754 label *label334
-    * jump *label335 always
   755 label *label335
   756 set :createAdjacentMask:row1 :createBlockMaskRow:result
   757 label *label248
 
   813 op or :createBlockMaskRow:result *tmp295 *tmp297
   814 label *label355
   815 label *label356
-    * jump *label357 always
   816 label *label357
   817 op shl *tmp311 :createAdjacentMask:row1 1
   818 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   882 op or :createBlockMaskRow:result *tmp295 *tmp297
   883 label *label377
   884 label *label378
-    * jump *label379 always
   885 label *label379
   886 op shl *tmp311 :createAdjacentMask:row1 1
   887 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   952 op or :createBlockMaskRow:result *tmp295 *tmp297
   953 label *label399
   954 label *label400
-    * jump *label401 always
   955 label *label401
   956 op shl *tmp311 :createAdjacentMask:row1 1
   957 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1022 op or :createBlockMaskRow:result *tmp295 *tmp297
  1023 label *label421
  1024 label *label422
-    * jump *label423 always
  1025 label *label423
  1026 op shl *tmp311 :createAdjacentMask:row1 1
  1027 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
  1111 call *label10 *invalid :excludeArea*retval (m:*label152) (h:*label152)
  1112 label *label152
  1113 set :createCombinedMask*retval :excludeArea*retval
-    * jump *label143 always
  1114 label *label143
  1115 return :createCombinedMask*retaddr
  1116 end
 
  1273 label *label289
  1274 label *label290
  1275 set :shiftMask*retval :shiftMask:mask
-    * jump *label291 always
  1276 label *label291
  1277 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1278 op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx
 
  1295 multilabel *label177 (m:marker0)
  1296 label *label173
  1297 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
  1298 label *label153
  1299 return :layoutThoriumDrillAtLocation*retaddr
  1300 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   573 label *label204
   574 op add *tmp296 :createBlockMaskRow:x 4
   575 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  576 set :createBlockMaskRow:result *tmp297
   577 label *label205
   578 label *label206
   579 op shl *tmp295 :createBlockMaskRow:result 1
 
   595 label *label211
   596 label *label212
   597 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 0
+  598 set *tmp296 :createBlockMaskRow:x
   599 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   600 op or :createBlockMaskRow:result *tmp295 *tmp297
   601 label *label213
 
   642 label *label294
   643 op add *tmp296 :createCombinedMask:x 4
   644 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  645 set :createBlockMaskRow:result *tmp297
   646 label *label295
   647 label *label296
   648 op shl *tmp295 :createBlockMaskRow:result 1
 
   664 label *label301
   665 label *label302
   666 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  667 set *tmp296 :createCombinedMask:x
   668 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   669 op or :createBlockMaskRow:result *tmp295 *tmp297
   670 label *label303
 
   701 label *label316
   702 op add *tmp296 :createCombinedMask:x 4
   703 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  704 set :createBlockMaskRow:result *tmp297
   705 label *label317
   706 label *label318
   707 op shl *tmp295 :createBlockMaskRow:result 1
 
   723 label *label323
   724 label *label324
   725 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  726 set *tmp296 :createCombinedMask:x
   727 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   728 op or :createBlockMaskRow:result *tmp295 *tmp297
   729 label *label325
 
   762 label *label338
   763 op add *tmp296 :createCombinedMask:x 4
   764 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  765 set :createBlockMaskRow:result *tmp297
   766 label *label339
   767 label *label340
   768 op shl *tmp295 :createBlockMaskRow:result 1
 
   784 label *label345
   785 label *label346
   786 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  787 set *tmp296 :createCombinedMask:x
   788 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   789 op or :createBlockMaskRow:result *tmp295 *tmp297
   790 label *label347
 
   820 op or *tmp314 *tmp312 *tmp313
   821 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
   822 op and *tmp317 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp317
+  823 set :createAdjacentMask:result *tmp317
   824 set :createAdjacentMask:row2 :createAdjacentMask:row1
   825 set :createAdjacentMask:row1 :createBlockMaskRow:result
   826 label *label251
 
   831 label *label360
   832 op add *tmp296 :createCombinedMask:x 4
   833 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  834 set :createBlockMaskRow:result *tmp297
   835 label *label361
   836 label *label362
   837 op shl *tmp295 :createBlockMaskRow:result 1
 
   853 label *label367
   854 label *label368
   855 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  856 set *tmp296 :createCombinedMask:x
   857 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   858 op or :createBlockMaskRow:result *tmp295 *tmp297
   859 label *label369
 
   895 set :createAdjacentMask:row1 :createBlockMaskRow:result
   896 label *label254
   897 label *label255
-    * op add *tmp309 :createCombinedMask:y 0
+  898 set *tmp309 :createCombinedMask:y
   899 label *label380
   900 label *label381
   901 label *label382
   902 op add *tmp296 :createCombinedMask:x 4
   903 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  904 set :createBlockMaskRow:result *tmp297
   905 label *label383
   906 label *label384
   907 op shl *tmp295 :createBlockMaskRow:result 1
 
   923 label *label389
   924 label *label390
   925 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  926 set *tmp296 :createCombinedMask:x
   927 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   928 op or :createBlockMaskRow:result *tmp295 *tmp297
   929 label *label391
 
   971 label *label404
   972 op add *tmp296 :createCombinedMask:x 4
   973 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result 0 *tmp297
+  974 set :createBlockMaskRow:result *tmp297
   975 label *label405
   976 label *label406
   977 op shl *tmp295 :createBlockMaskRow:result 1
 
   993 label *label411
   994 label *label412
   995 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createCombinedMask:x 0
+  996 set *tmp296 :createCombinedMask:x
   997 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   998 op or :createBlockMaskRow:result *tmp295 *tmp297
   999 label *label413

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-11 instructions):
 
   572 label *label203
   573 label *label204
   574 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  575 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
   576 label *label205
   577 label *label206
   578 op shl *tmp295 :createBlockMaskRow:result 1
 
   620 op shl *tmp295 :createBlockMaskRow:result 1
   621 op add *tmp296 :createBlockMaskRow:x -4
   622 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  623 op or :createBlockMaskRow*retval *tmp295 *tmp297
   624 label *label221
   625 label *label142
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   626 label *label139
   627 return :createBlockMaskRow*retaddr
   628 end
 
   639 label *label293
   640 label *label294
   641 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  642 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
   643 label *label295
   644 label *label296
   645 op shl *tmp295 :createBlockMaskRow:result 1
 
   687 op shl *tmp295 :createBlockMaskRow:result 1
   688 op add *tmp296 :createCombinedMask:x -4
   689 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  690 op or :createAdjacentMask:row2 *tmp295 *tmp297
   691 label *label311
   692 label *label312
   693 label *label313
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   694 op add *tmp307 :createCombinedMask:y 3
   695 label *label314
   696 label *label315
   697 label *label316
   698 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  699 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
   700 label *label317
   701 label *label318
   702 op shl *tmp295 :createBlockMaskRow:result 1
 
   744 op shl *tmp295 :createBlockMaskRow:result 1
   745 op add *tmp296 :createCombinedMask:x -4
   746 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
-    * op or :createBlockMaskRow:result *tmp295 *tmp297
+  747 op or :createAdjacentMask:row1 *tmp295 *tmp297
   748 label *label333
   749 label *label334
   750 label *label335
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   751 label *label248
   752 label *label249
   753 op add *tmp309 :createCombinedMask:y 2
 
   755 label *label337
   756 label *label338
   757 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  758 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   759 label *label339
   760 label *label340
   761 op shl *tmp295 :createBlockMaskRow:result 1
 
   812 op shr *tmp313 :createAdjacentMask:row1 1
   813 op or *tmp314 *tmp312 *tmp313
   814 op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:result
-    * op and *tmp317 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp317
+  815 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   816 set :createAdjacentMask:row2 :createAdjacentMask:row1
   817 set :createAdjacentMask:row1 :createBlockMaskRow:result
   818 label *label251
 
   822 label *label359
   823 label *label360
   824 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  825 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   826 label *label361
   827 label *label362
   828 op shl *tmp295 :createBlockMaskRow:result 1
 
   891 label *label381
   892 label *label382
   893 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  894 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   895 label *label383
   896 label *label384
   897 op shl *tmp295 :createBlockMaskRow:result 1
 
   960 label *label403
   961 label *label404
   962 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
-    * set :createBlockMaskRow:result *tmp297
+  963 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
   964 label *label405
   965 label *label406
   966 op shl *tmp295 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   595 label *label212
   596 op shl *tmp295 :createBlockMaskRow:result 1
   597 set *tmp296 :createBlockMaskRow:x
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  598 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   599 op or :createBlockMaskRow:result *tmp295 *tmp297
   600 label *label213
   601 label *label214
 
   662 label *label302
   663 op shl *tmp295 :createBlockMaskRow:result 1
   664 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  665 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   666 op or :createBlockMaskRow:result *tmp295 *tmp297
   667 label *label303
   668 label *label304
 
   719 label *label324
   720 op shl *tmp295 :createBlockMaskRow:result 1
   721 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  722 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   723 op or :createBlockMaskRow:result *tmp295 *tmp297
   724 label *label325
   725 label *label326
 
   778 label *label346
   779 op shl *tmp295 :createBlockMaskRow:result 1
   780 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  781 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   782 op or :createBlockMaskRow:result *tmp295 *tmp297
   783 label *label347
   784 label *label348
 
   845 label *label368
   846 op shl *tmp295 :createBlockMaskRow:result 1
   847 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  848 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   849 op or :createBlockMaskRow:result *tmp295 *tmp297
   850 label *label369
   851 label *label370
 
   891 label *label381
   892 label *label382
   893 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  894 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
   895 label *label383
   896 label *label384
   897 op shl *tmp295 :createBlockMaskRow:result 1
   898 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  899 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   900 op or :createBlockMaskRow:result *tmp295 *tmp297
   901 label *label385
   902 label *label386
   903 op shl *tmp295 :createBlockMaskRow:result 1
   904 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  905 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   906 op or :createBlockMaskRow:result *tmp295 *tmp297
   907 label *label387
   908 label *label388
   909 op shl *tmp295 :createBlockMaskRow:result 1
   910 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  911 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   912 op or :createBlockMaskRow:result *tmp295 *tmp297
   913 label *label389
   914 label *label390
   915 op shl *tmp295 :createBlockMaskRow:result 1
   916 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  917 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   918 op or :createBlockMaskRow:result *tmp295 *tmp297
   919 label *label391
   920 label *label392
   921 op shl *tmp295 :createBlockMaskRow:result 1
   922 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  923 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   924 op or :createBlockMaskRow:result *tmp295 *tmp297
   925 label *label393
   926 label *label394
   927 op shl *tmp295 :createBlockMaskRow:result 1
   928 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  929 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   930 op or :createBlockMaskRow:result *tmp295 *tmp297
   931 label *label395
   932 label *label396
   933 op shl *tmp295 :createBlockMaskRow:result 1
   934 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  935 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   936 op or :createBlockMaskRow:result *tmp295 *tmp297
   937 label *label397
   938 label *label398
   939 op shl *tmp295 :createBlockMaskRow:result 1
   940 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  941 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   942 op or :createBlockMaskRow:result *tmp295 *tmp297
   943 label *label399
   944 label *label400
 
   983 label *label412
   984 op shl *tmp295 :createBlockMaskRow:result 1
   985 set *tmp296 :createCombinedMask:x
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  986 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   987 op or :createBlockMaskRow:result *tmp295 *tmp297
   988 label *label413
   989 label *label414

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-8 instructions):
 
   594 label *label211
   595 label *label212
   596 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createBlockMaskRow:x
   597 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   598 op or :createBlockMaskRow:result *tmp295 *tmp297
   599 label *label213
 
   660 label *label301
   661 label *label302
   662 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   663 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   664 op or :createBlockMaskRow:result *tmp295 *tmp297
   665 label *label303
 
   716 label *label323
   717 label *label324
   718 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   719 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   720 op or :createBlockMaskRow:result *tmp295 *tmp297
   721 label *label325
 
   774 label *label345
   775 label *label346
   776 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   777 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   778 op or :createBlockMaskRow:result *tmp295 *tmp297
   779 label *label347
 
   840 label *label367
   841 label *label368
   842 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   843 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   844 op or :createBlockMaskRow:result *tmp295 *tmp297
   845 label *label369
 
   881 set :createAdjacentMask:row1 :createBlockMaskRow:result
   882 label *label254
   883 label *label255
-    * set *tmp309 :createCombinedMask:y
   884 label *label380
   885 label *label381
   886 label *label382
 
   907 label *label389
   908 label *label390
   909 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   910 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   911 op or :createBlockMaskRow:result *tmp295 *tmp297
   912 label *label391
 
   975 label *label411
   976 label *label412
   977 op shl *tmp295 :createBlockMaskRow:result 1
-    * set *tmp296 :createCombinedMask:x
   978 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   979 op or :createBlockMaskRow:result *tmp295 *tmp297
   980 label *label413

Modifications by Inline function call at OreLocator.mnd:487:20 (+31 instructions):
 
  1020 op add *tmp309 :createCombinedMask:y -2
  1021 set :createBlockMaskRow:x :createCombinedMask:x
  1022 set :createBlockMaskRow:y *tmp309
-    * setaddr :createBlockMaskRow*retaddr *label262 (h:*label262)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label262) (h:*label262)
-    * label *label262
+ 1023 label *label424
+ 1024 label *label425
+ 1025 label *label426
+ 1026 op add *tmp296 :createBlockMaskRow:x 4
+ 1027 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+ 1028 label *label427
+ 1029 label *label428
+ 1030 op shl *tmp295 :createBlockMaskRow:result 1
+ 1031 op add *tmp296 :createBlockMaskRow:x 3
+ 1032 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1033 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1034 label *label429
+ 1035 label *label430
+ 1036 op shl *tmp295 :createBlockMaskRow:result 1
+ 1037 op add *tmp296 :createBlockMaskRow:x 2
+ 1038 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1039 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1040 label *label431
+ 1041 label *label432
+ 1042 op shl *tmp295 :createBlockMaskRow:result 1
+ 1043 op add *tmp296 :createBlockMaskRow:x 1
+ 1044 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1045 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1046 label *label433
+ 1047 label *label434
+ 1048 op shl *tmp295 :createBlockMaskRow:result 1
+ 1049 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1050 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1051 label *label435
+ 1052 label *label436
+ 1053 op shl *tmp295 :createBlockMaskRow:result 1
+ 1054 op add *tmp296 :createBlockMaskRow:x -1
+ 1055 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1056 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1057 label *label437
+ 1058 label *label438
+ 1059 op shl *tmp295 :createBlockMaskRow:result 1
+ 1060 op add *tmp296 :createBlockMaskRow:x -2
+ 1061 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1062 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1063 label *label439
+ 1064 label *label440
+ 1065 op shl *tmp295 :createBlockMaskRow:result 1
+ 1066 op add *tmp296 :createBlockMaskRow:x -3
+ 1067 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1068 op or :createBlockMaskRow:result *tmp295 *tmp297
+ 1069 label *label441
+ 1070 label *label442
+ 1071 op shl *tmp295 :createBlockMaskRow:result 1
+ 1072 op add *tmp296 :createBlockMaskRow:x -4
+ 1073 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1074 op or :createBlockMaskRow*retval *tmp295 *tmp297
+ 1075 label *label443
+ 1076 label *label444
+ 1077 label *label445
  1078 op shl *tmp311 :createAdjacentMask:row1 1
  1079 op or *tmp312 :createAdjacentMask:row2 *tmp311
  1080 op shr *tmp313 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1017 label *label260
  1018 op sub :createAdjacentMask:r -1 1
  1019 label *label261
-    * op add *tmp309 :createCombinedMask:y -2
+ 1020 op add :createBlockMaskRow:y :createCombinedMask:y -2
  1021 set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp309
  1022 label *label424
  1023 label *label425
  1024 label *label426

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
  1022 label *label424
  1023 label *label425
  1024 label *label426
-    * op add *tmp296 :createBlockMaskRow:x 4
+ 1025 op add *tmp296 :createCombinedMask:x 4
  1026 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
  1027 label *label427
  1028 label *label428
  1029 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 3
+ 1030 op add *tmp296 :createCombinedMask:x 3
  1031 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1032 op or :createBlockMaskRow:result *tmp295 *tmp297
  1033 label *label429
  1034 label *label430
  1035 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 2
+ 1036 op add *tmp296 :createCombinedMask:x 2
  1037 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1038 op or :createBlockMaskRow:result *tmp295 *tmp297
  1039 label *label431
  1040 label *label432
  1041 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x 1
+ 1042 op add *tmp296 :createCombinedMask:x 1
  1043 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1044 op or :createBlockMaskRow:result *tmp295 *tmp297
  1045 label *label433
  1046 label *label434
  1047 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+ 1048 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1049 op or :createBlockMaskRow:result *tmp295 *tmp297
  1050 label *label435
  1051 label *label436
  1052 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -1
+ 1053 op add *tmp296 :createCombinedMask:x -1
  1054 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1055 op or :createBlockMaskRow:result *tmp295 *tmp297
  1056 label *label437
  1057 label *label438
  1058 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -2
+ 1059 op add *tmp296 :createCombinedMask:x -2
  1060 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1061 op or :createBlockMaskRow:result *tmp295 *tmp297
  1062 label *label439
  1063 label *label440
  1064 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -3
+ 1065 op add *tmp296 :createCombinedMask:x -3
  1066 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1067 op or :createBlockMaskRow:result *tmp295 *tmp297
  1068 label *label441
  1069 label *label442
  1070 op shl *tmp295 :createBlockMaskRow:result 1
-    * op add *tmp296 :createBlockMaskRow:x -4
+ 1071 op add *tmp296 :createCombinedMask:x -4
  1072 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
  1073 op or :createBlockMaskRow*retval *tmp295 *tmp297
  1074 label *label443
 
  1085 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1086 set :createAdjacentMask:row1 :createBlockMaskRow*retval
  1087 label *label263
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1088 op sub :createAdjacentMask:r -2 1
  1089 label *label264
-    * op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1090 op add *tmp309 :createCombinedMask:y -3
+ 1091 set :createBlockMaskRow:x :createCombinedMask:x
  1092 set :createBlockMaskRow:y *tmp309
  1093 setaddr :createBlockMaskRow*retaddr *label265 (h:*label265)
  1094 call *label13 *invalid :createBlockMaskRow*retval (m:*label265) (h:*label265)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
  1015 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1016 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1017 label *label260
-    * op sub :createAdjacentMask:r -1 1
  1018 label *label261
  1019 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
  1020 label *label424
  1021 label *label425
  1022 label *label426

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * label *label22
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    35 jump *label24 notEqual *tmp18 false
    36 label *label270
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label23
    38 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp18
    39 jump *label270 equal *tmp18 false
    40 label *label24
-    * label *label21
-    * label *label20
    41 op div *tmp21 *tmp15 3.8197185279121366
    42 op pow .mapTotal *tmp21 2
    43 set :findDrillLocationLocal:oreX 0
 
    60 op mul .mapProgress .angle .angle
    61 op sub *tmp37 @mapw 5
    62 op sub *tmp44 @maph 5
-    * label *label29
    63 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    64 label *label195
    65 op div :locateOreAway:a .angle @degToRad
 
    68 op add *tmp36 :findDrillLocationLocal:x *tmp35
    69 op max *tmp39 *tmp36 5
    70 op min *tmp38 *tmp39 *tmp37
-    * label *label32
    71 op cos *tmp41 :locateOreAway:a
    72 op mul *tmp42 *tmp41 :locateOreAway:distance
    73 op add *tmp43 :findDrillLocationLocal:y *tmp42
    74 op max *tmp46 *tmp43 5
    75 op min *tmp45 *tmp46 *tmp44
-    * label *label33
-    * label *label35
    76 ucontrol within *tmp38 *tmp45 5 *tmp48
    77 jump *label37 notEqual *tmp48 false
    78 label *label202
    79 ucontrol approach *tmp38 *tmp45 4.5
-    * label *label36
    80 ucontrol within *tmp38 *tmp45 5 *tmp48
    81 jump *label202 equal *tmp48 false
    82 label *label37
-    * label *label34
    83 op div *tmp51 3.8197185279121366 :locateOreAway:distance
    84 op add .angle .angle *tmp51
    85 op mul .mapProgress .angle .angle
 
    89 set *tmp28 false
    90 jump *label28 always
    91 label *label38
-    * label *label39
    92 op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x
    93 op abs *tmp59 *tmp58
    94 op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y
 
   101 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   102 jump *label30 always
   103 label *label42
-    * label *label43
   104 label *label40
-    * label *label41
   105 jump *label44 lessThan :locateOreAway:coreDist 8
   106 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   107 set :locateOreAway:lastX :locateOreAway:x
   108 set :locateOreAway:lastY :locateOreAway:y
   109 set *tmp75 .locations
   110 set :visited:i .locationsStart
-    * label *label49
   111 jump *label51 greaterThanEq .locationsStart *tmp75
   112 label *label196
   113 op mul :visited:index 4 :visited:i
 
   122 set *tmp74 true
   123 jump *label48 always
   124 label *label52
-    * label *label53
-    * label *label50
   125 op add :visited:i :visited:i 1
   126 jump *label196 lessThan :visited:i *tmp75
   127 label *label51
 
   135 set *tmp28 true
   136 jump *label28 always
   137 label *label54
-    * label *label55
   138 label *label46
-    * label *label47
   139 label *label44
-    * label *label45
   140 label *label30
   141 jump *label195 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   142 label *label31
 
   148 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   149 jump *label19 always
   150 label *label56
-    * label *label57
   151 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   152 op add .mapSpots .mapSpots 1
   153 label *label58
-    * label *label59
-    * label *label62
   154 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   155 jump *label64 notEqual *tmp100 false
   156 label *label222
   157 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label63
   158 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100
   159 jump *label222 equal *tmp100 false
   160 label *label64
-    * label *label61
-    * label *label60
   161 set :findDrillLocationLocal:last 0
   162 label *label65
   163 write @unit processor4 ":findBestPosition:unit"
 
   184 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   185 jump *label67 always
   186 label *label69
-    * label *label70
   187 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   188 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   189 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   200 op add .count .count 1
   201 write :findDrillLocationLocal:dy bank1 .count
   202 op add .locations .locations 1
-    * label *label77
   203 ucontrol unbind
   204 set :findDrillLocationLocal*retval true
   205 jump *label19 always
   206 label *label75
-    * label *label76
   207 label *label71
-    * label *label72
   208 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   209 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   210 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   211 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   212 label *label78
-    * label *label79
   213 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   214 jump *label67 always
   215 label *label80
-    * label *label81
   216 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   217 op mul :round:x :findDrillLocationLocal:diffX 1.1
   218 op add *tmp143 :round:x 0.5
   219 op floor *tmp142 *tmp143
-    * label *label82
   220 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp142
   221 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   222 op add *tmp147 :round.1:x 0.5
   223 op floor *tmp146 *tmp147
-    * label *label83
   224 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
-    * label *label66
   225 jump *label65 always
   226 label *label67
   227 jump *label84 lessThan :findDrillLocationLocal:best 0
 
   235 op add .count .count 1
   236 write :findDrillLocationLocal:bestY bank1 .count
   237 op add .locations .locations 1
-    * label *label86
   238 label *label84
-    * label *label85
-    * label *label26
   239 jump *label25 always
-    * label *label27
   240 set :findDrillLocationLocal*retval null
   241 label *label19
   242 return :findDrillLocationLocal*retaddr
 
   261 op shl *tmp203 1 :excludeArea:blockSizeX
   262 op sub :createMatrixOfSize:row *tmp203 1
   263 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * label *label223
-    * label *label224
   264 jump *label225 lessThan 1 :excludeArea:blockSizeY
   265 jump *label102 always
   266 label *label225
-    * label *label226
   267 op shl *tmp207 :createMatrixOfSize:row 7
   268 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label227
-    * label *label228
   269 jump *label229 lessThan 2 :excludeArea:blockSizeY
   270 jump *label102 always
   271 label *label229
-    * label *label230
   272 op shl *tmp207 :createMatrixOfSize:matrix 7
   273 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label231
-    * label *label232
   274 jump *label233 lessThan 3 :excludeArea:blockSizeY
   275 jump *label102 always
   276 label *label233
-    * label *label234
   277 op shl *tmp207 :createMatrixOfSize:matrix 7
   278 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label235
-    * label *label236
   279 jump *label237 lessThan 4 :excludeArea:blockSizeY
   280 jump *label102 always
   281 label *label237
-    * label *label238
   282 op shl *tmp207 :createMatrixOfSize:matrix 7
   283 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label239
-    * label *label240
   284 jump *label241 lessThan 5 :excludeArea:blockSizeY
   285 jump *label102 always
   286 label *label241
-    * label *label242
   287 op shl *tmp207 :createMatrixOfSize:matrix 7
   288 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label243
-    * label *label244
   289 jump *label245 lessThan 6 :excludeArea:blockSizeY
   290 jump *label102 always
   291 label *label245
-    * label *label246
   292 op shl *tmp207 :createMatrixOfSize:matrix 7
   293 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * label *label247
   294 label *label102
-    * label *label99
   295 op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX
   296 op sub *tmp210 7 :excludeArea:blockSizeX
   297 op mul :excludeArea:shiftX *tmp209 *tmp210
   298 op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY
   299 op sub *tmp213 7 :excludeArea:blockSizeY
   300 op mul :excludeArea:shiftY *tmp212 *tmp213
-    * label *label272
   301 op abs *tmp161 :excludeArea:shiftX
   302 op greaterThan *tmp162 *tmp161 6
   303 op abs *tmp163 :excludeArea:shiftY
 
   307 set :shiftMask*retval 0
   308 jump *label281 always
   309 label *label273
-    * label *label274
   310 op mul *tmp167 7 :excludeArea:shiftY
   311 op add :shiftMask:shift :excludeArea:shiftX *tmp167
   312 jump *label275 lessThanEq :shiftMask:shift 0
 
   323 jump *label277 lessThanEq :excludeArea:shiftX 0
   324 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   325 label *label277
-    * label *label278
   326 op shl *tmp181 :shiftMask:keep 7
   327 op or :shiftMask:keep :shiftMask:keep *tmp181
   328 op shl *tmp182 :shiftMask:keep 14
 
   331 op or :shiftMask:keep :shiftMask:keep *tmp183
   332 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   333 label *label279
-    * label *label280
   334 set :shiftMask*retval :shiftMask:mask
   335 label *label281
   336 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
 
   344 end
   345 label *label11
   346 set :findPossiblePlacement:y -3
-    * label *label107
   347 jump *label109 greaterThan :findPossiblePlacement:y 3
   348 label *label198
   349 op add *tmp216 :findPossiblePlacement:y 3
   350 op mul *tmp217 7 *tmp216
   351 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp217
   352 set :findPossiblePlacement:x -3
-    * label *label110
   353 jump *label112 greaterThan :findPossiblePlacement:x 3
   354 label *label199
   355 op and *tmp219 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   359 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
   360 jump *label106 always
   361 label *label113
-    * label *label114
   362 op sub *tmp225 3 :findPossiblePlacement:width
   363 jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
   364 jump *label112 always
   365 label *label115
-    * label *label116
   366 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label111
   367 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   368 jump *label199 lessThanEq :findPossiblePlacement:x 3
   369 label *label112
 
   371 jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
   372 jump *label109 always
   373 label *label117
-    * label *label118
-    * label *label108
   374 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   375 jump *label198 lessThanEq :findPossiblePlacement:y 3
   376 label *label109
 
   391 set :tryPlaceGenerator*retval false
   392 jump *label119 always
   393 label *label123
-    * label *label124
   394 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   395 op add .water2X *tmp236 :findPossiblePlacement:x
   396 op add *tmp238 :tryPlaceGenerator:centerY 0.5
 
   413 set :tryPlaceGenerator*retval false
   414 jump *label119 always
   415 label *label126
-    * label *label127
   416 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   417 op add .water2X *tmp248 :findPossiblePlacement:x
   418 op add *tmp250 :tryPlaceGenerator:centerY 0.5
 
   435 set :tryPlaceGenerator*retval false
   436 jump *label119 always
   437 label *label129
-    * label *label130
   438 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   439 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   440 op shl *tmp262 1 :findPossiblePlacement*retval
 
   450 set :tryPlaceGenerator*retval false
   451 jump *label119 always
   452 label *label132
-    * label *label133
   453 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   454 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   455 op shl *tmp268 1 :findPossiblePlacement*retval
 
   485 set :tryPlaceGenerator*retval false
   486 jump *label119 always
   487 label *label137
-    * label *label138
   488 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   489 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   490 label *label134
-    * label *label135
   491 set :tryPlaceGenerator*retval true
   492 jump *label119 always
   493 label *label119
   494 return :tryPlaceGenerator*retaddr
   495 end
   496 label *label13
-    * label *label203
-    * label *label204
   497 op add *tmp296 :createBlockMaskRow:x 4
   498 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label205
-    * label *label206
   499 op shl *tmp295 :createBlockMaskRow:result 1
   500 op add *tmp296 :createBlockMaskRow:x 3
   501 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   502 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label207
-    * label *label208
   503 op shl *tmp295 :createBlockMaskRow:result 1
   504 op add *tmp296 :createBlockMaskRow:x 2
   505 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   506 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label209
-    * label *label210
   507 op shl *tmp295 :createBlockMaskRow:result 1
   508 op add *tmp296 :createBlockMaskRow:x 1
   509 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   510 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label211
-    * label *label212
   511 op shl *tmp295 :createBlockMaskRow:result 1
   512 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   513 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label213
-    * label *label214
   514 op shl *tmp295 :createBlockMaskRow:result 1
   515 op add *tmp296 :createBlockMaskRow:x -1
   516 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   517 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label215
-    * label *label216
   518 op shl *tmp295 :createBlockMaskRow:result 1
   519 op add *tmp296 :createBlockMaskRow:x -2
   520 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   521 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label217
-    * label *label218
   522 op shl *tmp295 :createBlockMaskRow:result 1
   523 op add *tmp296 :createBlockMaskRow:x -3
   524 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   525 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label219
-    * label *label220
   526 op shl *tmp295 :createBlockMaskRow:result 1
   527 op add *tmp296 :createBlockMaskRow:x -4
   528 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   529 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label221
-    * label *label142
-    * label *label139
   530 return :createBlockMaskRow*retaddr
   531 end
   532 label *label14
 
   538 set :createAdjacentMask:x :createCombinedMask:x
   539 set :createAdjacentMask:y :createCombinedMask:y
   540 op add *tmp305 :createCombinedMask:y 4
-    * label *label292
-    * label *label293
-    * label *label294
   541 op add *tmp296 :createCombinedMask:x 4
   542 ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label295
-    * label *label296
   543 op shl *tmp295 :createBlockMaskRow:result 1
   544 op add *tmp296 :createCombinedMask:x 3
   545 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   546 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label297
-    * label *label298
   547 op shl *tmp295 :createBlockMaskRow:result 1
   548 op add *tmp296 :createCombinedMask:x 2
   549 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   550 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label299
-    * label *label300
   551 op shl *tmp295 :createBlockMaskRow:result 1
   552 op add *tmp296 :createCombinedMask:x 1
   553 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   554 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label301
-    * label *label302
   555 op shl *tmp295 :createBlockMaskRow:result 1
   556 ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
   557 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label303
-    * label *label304
   558 op shl *tmp295 :createBlockMaskRow:result 1
   559 op add *tmp296 :createCombinedMask:x -1
   560 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   561 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label305
-    * label *label306
   562 op shl *tmp295 :createBlockMaskRow:result 1
   563 op add *tmp296 :createCombinedMask:x -2
   564 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   565 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label307
-    * label *label308
   566 op shl *tmp295 :createBlockMaskRow:result 1
   567 op add *tmp296 :createCombinedMask:x -3
   568 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   569 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label309
-    * label *label310
   570 op shl *tmp295 :createBlockMaskRow:result 1
   571 op add *tmp296 :createCombinedMask:x -4
   572 ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
   573 op or :createAdjacentMask:row2 *tmp295 *tmp297
-    * label *label311
-    * label *label312
-    * label *label313
   574 op add *tmp307 :createCombinedMask:y 3
-    * label *label314
-    * label *label315
-    * label *label316
   575 op add *tmp296 :createCombinedMask:x 4
   576 ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label317
-    * label *label318
   577 op shl *tmp295 :createBlockMaskRow:result 1
   578 op add *tmp296 :createCombinedMask:x 3
   579 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   580 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label319
-    * label *label320
   581 op shl *tmp295 :createBlockMaskRow:result 1
   582 op add *tmp296 :createCombinedMask:x 2
   583 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   584 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label321
-    * label *label322
   585 op shl *tmp295 :createBlockMaskRow:result 1
   586 op add *tmp296 :createCombinedMask:x 1
   587 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   588 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label323
-    * label *label324
   589 op shl *tmp295 :createBlockMaskRow:result 1
   590 ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
   591 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label325
-    * label *label326
   592 op shl *tmp295 :createBlockMaskRow:result 1
   593 op add *tmp296 :createCombinedMask:x -1
   594 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   595 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label327
-    * label *label328
   596 op shl *tmp295 :createBlockMaskRow:result 1
   597 op add *tmp296 :createCombinedMask:x -2
   598 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   599 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label329
-    * label *label330
   600 op shl *tmp295 :createBlockMaskRow:result 1
   601 op add *tmp296 :createCombinedMask:x -3
   602 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   603 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label331
-    * label *label332
   604 op shl *tmp295 :createBlockMaskRow:result 1
   605 op add *tmp296 :createCombinedMask:x -4
   606 ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
   607 op or :createAdjacentMask:row1 *tmp295 *tmp297
-    * label *label333
-    * label *label334
-    * label *label335
-    * label *label248
-    * label *label249
   608 op add *tmp309 :createCombinedMask:y 2
-    * label *label336
-    * label *label337
-    * label *label338
   609 op add *tmp296 :createCombinedMask:x 4
   610 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label339
-    * label *label340
   611 op shl *tmp295 :createBlockMaskRow:result 1
   612 op add *tmp296 :createCombinedMask:x 3
   613 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   614 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label341
-    * label *label342
   615 op shl *tmp295 :createBlockMaskRow:result 1
   616 op add *tmp296 :createCombinedMask:x 2
   617 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   618 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label343
-    * label *label344
   619 op shl *tmp295 :createBlockMaskRow:result 1
   620 op add *tmp296 :createCombinedMask:x 1
   621 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   622 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label345
-    * label *label346
   623 op shl *tmp295 :createBlockMaskRow:result 1
   624 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   625 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label347
-    * label *label348
   626 op shl *tmp295 :createBlockMaskRow:result 1
   627 op add *tmp296 :createCombinedMask:x -1
   628 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   629 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label349
-    * label *label350
   630 op shl *tmp295 :createBlockMaskRow:result 1
   631 op add *tmp296 :createCombinedMask:x -2
   632 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   633 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label351
-    * label *label352
   634 op shl *tmp295 :createBlockMaskRow:result 1
   635 op add *tmp296 :createCombinedMask:x -3
   636 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   637 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label353
-    * label *label354
   638 op shl *tmp295 :createBlockMaskRow:result 1
   639 op add *tmp296 :createCombinedMask:x -4
   640 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   641 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label355
-    * label *label356
-    * label *label357
   642 op shl *tmp311 :createAdjacentMask:row1 1
   643 op or *tmp312 :createAdjacentMask:row2 *tmp311
   644 op shr *tmp313 :createAdjacentMask:row1 1
 
   647 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   648 set :createAdjacentMask:row2 :createAdjacentMask:row1
   649 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label251
-    * label *label252
   650 op add *tmp309 :createCombinedMask:y 1
-    * label *label358
-    * label *label359
-    * label *label360
   651 op add *tmp296 :createCombinedMask:x 4
   652 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label361
-    * label *label362
   653 op shl *tmp295 :createBlockMaskRow:result 1
   654 op add *tmp296 :createCombinedMask:x 3
   655 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   656 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label363
-    * label *label364
   657 op shl *tmp295 :createBlockMaskRow:result 1
   658 op add *tmp296 :createCombinedMask:x 2
   659 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   660 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label365
-    * label *label366
   661 op shl *tmp295 :createBlockMaskRow:result 1
   662 op add *tmp296 :createCombinedMask:x 1
   663 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   664 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label367
-    * label *label368
   665 op shl *tmp295 :createBlockMaskRow:result 1
   666 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   667 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label369
-    * label *label370
   668 op shl *tmp295 :createBlockMaskRow:result 1
   669 op add *tmp296 :createCombinedMask:x -1
   670 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   671 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label371
-    * label *label372
   672 op shl *tmp295 :createBlockMaskRow:result 1
   673 op add *tmp296 :createCombinedMask:x -2
   674 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   675 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label373
-    * label *label374
   676 op shl *tmp295 :createBlockMaskRow:result 1
   677 op add *tmp296 :createCombinedMask:x -3
   678 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   679 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label375
-    * label *label376
   680 op shl *tmp295 :createBlockMaskRow:result 1
   681 op add *tmp296 :createCombinedMask:x -4
   682 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   683 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label377
-    * label *label378
-    * label *label379
   684 op shl *tmp311 :createAdjacentMask:row1 1
   685 op or *tmp312 :createAdjacentMask:row2 *tmp311
   686 op shr *tmp313 :createAdjacentMask:row1 1
 
   691 op or :createAdjacentMask:result *tmp316 *tmp317
   692 set :createAdjacentMask:row2 :createAdjacentMask:row1
   693 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label254
-    * label *label255
-    * label *label380
-    * label *label381
-    * label *label382
   694 op add *tmp296 :createCombinedMask:x 4
   695 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label383
-    * label *label384
   696 op shl *tmp295 :createBlockMaskRow:result 1
   697 op add *tmp296 :createCombinedMask:x 3
   698 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   699 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label385
-    * label *label386
   700 op shl *tmp295 :createBlockMaskRow:result 1
   701 op add *tmp296 :createCombinedMask:x 2
   702 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   703 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label387
-    * label *label388
   704 op shl *tmp295 :createBlockMaskRow:result 1
   705 op add *tmp296 :createCombinedMask:x 1
   706 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   707 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label389
-    * label *label390
   708 op shl *tmp295 :createBlockMaskRow:result 1
   709 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
   710 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label391
-    * label *label392
   711 op shl *tmp295 :createBlockMaskRow:result 1
   712 op add *tmp296 :createCombinedMask:x -1
   713 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   714 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label393
-    * label *label394
   715 op shl *tmp295 :createBlockMaskRow:result 1
   716 op add *tmp296 :createCombinedMask:x -2
   717 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   718 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label395
-    * label *label396
   719 op shl *tmp295 :createBlockMaskRow:result 1
   720 op add *tmp296 :createCombinedMask:x -3
   721 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   722 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label397
-    * label *label398
   723 op shl *tmp295 :createBlockMaskRow:result 1
   724 op add *tmp296 :createCombinedMask:x -4
   725 ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
   726 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label399
-    * label *label400
-    * label *label401
   727 op shl *tmp311 :createAdjacentMask:row1 1
   728 op or *tmp312 :createAdjacentMask:row2 *tmp311
   729 op shr *tmp313 :createAdjacentMask:row1 1
 
   734 op or :createAdjacentMask:result *tmp316 *tmp317
   735 set :createAdjacentMask:row2 :createAdjacentMask:row1
   736 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label257
-    * label *label258
   737 op add *tmp309 :createCombinedMask:y -1
-    * label *label402
-    * label *label403
-    * label *label404
   738 op add *tmp296 :createCombinedMask:x 4
   739 ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label405
-    * label *label406
   740 op shl *tmp295 :createBlockMaskRow:result 1
   741 op add *tmp296 :createCombinedMask:x 3
   742 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   743 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label407
-    * label *label408
   744 op shl *tmp295 :createBlockMaskRow:result 1
   745 op add *tmp296 :createCombinedMask:x 2
   746 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   747 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label409
-    * label *label410
   748 op shl *tmp295 :createBlockMaskRow:result 1
   749 op add *tmp296 :createCombinedMask:x 1
   750 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   751 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label411
-    * label *label412
   752 op shl *tmp295 :createBlockMaskRow:result 1
   753 ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
   754 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label413
-    * label *label414
   755 op shl *tmp295 :createBlockMaskRow:result 1
   756 op add *tmp296 :createCombinedMask:x -1
   757 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   758 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label415
-    * label *label416
   759 op shl *tmp295 :createBlockMaskRow:result 1
   760 op add *tmp296 :createCombinedMask:x -2
   761 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   762 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label417
-    * label *label418
   763 op shl *tmp295 :createBlockMaskRow:result 1
   764 op add *tmp296 :createCombinedMask:x -3
   765 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   766 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label419
-    * label *label420
   767 op shl *tmp295 :createBlockMaskRow:result 1
   768 op add *tmp296 :createCombinedMask:x -4
   769 ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
   770 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label421
-    * label *label422
-    * label *label423
   771 op shl *tmp311 :createAdjacentMask:row1 1
   772 op or *tmp312 :createAdjacentMask:row2 *tmp311
   773 op shr *tmp313 :createAdjacentMask:row1 1
 
   778 op or :createAdjacentMask:result *tmp316 *tmp317
   779 set :createAdjacentMask:row2 :createAdjacentMask:row1
   780 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label260
-    * label *label261
   781 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * label *label424
-    * label *label425
-    * label *label426
   782 op add *tmp296 :createCombinedMask:x 4
   783 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
-    * label *label427
-    * label *label428
   784 op shl *tmp295 :createBlockMaskRow:result 1
   785 op add *tmp296 :createCombinedMask:x 3
   786 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   787 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label429
-    * label *label430
   788 op shl *tmp295 :createBlockMaskRow:result 1
   789 op add *tmp296 :createCombinedMask:x 2
   790 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   791 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label431
-    * label *label432
   792 op shl *tmp295 :createBlockMaskRow:result 1
   793 op add *tmp296 :createCombinedMask:x 1
   794 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   795 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label433
-    * label *label434
   796 op shl *tmp295 :createBlockMaskRow:result 1
   797 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   798 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label435
-    * label *label436
   799 op shl *tmp295 :createBlockMaskRow:result 1
   800 op add *tmp296 :createCombinedMask:x -1
   801 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   802 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label437
-    * label *label438
   803 op shl *tmp295 :createBlockMaskRow:result 1
   804 op add *tmp296 :createCombinedMask:x -2
   805 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   806 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label439
-    * label *label440
   807 op shl *tmp295 :createBlockMaskRow:result 1
   808 op add *tmp296 :createCombinedMask:x -3
   809 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   810 op or :createBlockMaskRow:result *tmp295 *tmp297
-    * label *label441
-    * label *label442
   811 op shl *tmp295 :createBlockMaskRow:result 1
   812 op add *tmp296 :createCombinedMask:x -4
   813 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   814 op or :createBlockMaskRow*retval *tmp295 *tmp297
-    * label *label443
-    * label *label444
-    * label *label445
   815 op shl *tmp311 :createAdjacentMask:row1 1
   816 op or *tmp312 :createAdjacentMask:row2 *tmp311
   817 op shr *tmp313 :createAdjacentMask:row1 1
 
   822 op or :createAdjacentMask:result *tmp316 *tmp317
   823 set :createAdjacentMask:row2 :createAdjacentMask:row1
   824 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label263
   825 op sub :createAdjacentMask:r -2 1
-    * label *label264
   826 op add *tmp309 :createCombinedMask:y -3
   827 set :createBlockMaskRow:x :createCombinedMask:x
   828 set :createBlockMaskRow:y *tmp309
 
   839 op or :createAdjacentMask:result *tmp316 *tmp317
   840 set :createAdjacentMask:row2 :createAdjacentMask:row1
   841 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label266
   842 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label267
   843 op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r
   844 set :createBlockMaskRow:x :createAdjacentMask:x
   845 set :createBlockMaskRow:y *tmp309
 
   856 op or :createAdjacentMask:result *tmp316 *tmp317
   857 set :createAdjacentMask:row2 :createAdjacentMask:row1
   858 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label269
   859 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label149
   860 op shr *tmp304 :createAdjacentMask:result 1
-    * label *label144
   861 label *label151
   862 wait 1e-15
   863 read *tmp320 processor4 ":createTerrainMask*finished"
 
   874 call *label10 *invalid :excludeArea*retval (m:*label152) (h:*label152)
   875 label *label152
   876 set :createCombinedMask*retval :excludeArea*retval
-    * label *label143
   877 return :createCombinedMask*retaddr
   878 end
   879 label *label15
 
   887 set .water1X -1
   888 set :moveTo.5:x .drillX
   889 set :moveTo.5:y .drillY
-    * label *label155
   890 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   891 jump *label157 notEqual *tmp323 false
   892 label *label271
   893 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label156
   894 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323
   895 jump *label271 equal *tmp323 false
   896 label *label157
-    * label *label154
   897 set :createCombinedMask:x .drillX
   898 set :createCombinedMask:y .drillY
   899 setaddr :createCombinedMask*retaddr *label158 (h:*label158)
 
   918 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp336
   919 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp336
   920 label *label160
-    * label *label161
   921 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   922 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   923 set :findPossiblePlacement:width 2
 
   933 op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   934 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp345
   935 label *label163
-    * label *label164
   936 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   937 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   938 set :findPossiblePlacement:placementMask 1
 
   945 set :layoutThoriumDrillAtLocation*retval false
   946 jump *label153 always
   947 label *label166
-    * label *label167
   948 op add .node1X .drillX :findPossiblePlacement:x
   949 op add .node1Y .drillY :findPossiblePlacement:y
   950 op shl *tmp352 1 :findPossiblePlacement*retval
 
   963 set :layoutThoriumDrillAtLocation*retval true
   964 jump *label153 always
   965 label *label169
-    * label *label170
   966 set :layoutThoriumDrillAtLocation:sx 3
   967 set :layoutThoriumDrillAtLocation:sy 3
   968 setaddr *tmp355 *label174
 
   990 call *label14 *invalid :createCombinedMask*retval (m:*label178) (h:*label178)
   991 label *label178
   992 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label282
   993 op abs *tmp161 :layoutThoriumDrillAtLocation:sx
   994 op greaterThan *tmp162 *tmp161 6
   995 op abs *tmp163 :layoutThoriumDrillAtLocation:sy
 
   999 set :shiftMask*retval 0
  1000 jump *label291 always
  1001 label *label283
-    * label *label284
  1002 op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy
  1003 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp167
  1004 jump *label285 lessThanEq :shiftMask:shift 0
 
  1015 jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0
  1016 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
  1017 label *label287
-    * label *label288
  1018 op shl *tmp181 :shiftMask:keep 7
  1019 op or :shiftMask:keep :shiftMask:keep *tmp181
  1020 op shl *tmp182 :shiftMask:keep 14
 
  1023 op or :shiftMask:keep :shiftMask:keep *tmp183
  1024 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
  1025 label *label289
-    * label *label290
  1026 set :shiftMask*retval :shiftMask:mask
  1027 label *label291
  1028 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
  1040 set :layoutThoriumDrillAtLocation*retval true
  1041 jump *label153 always
  1042 label *label181
-    * label *label182
-    * label *label172
  1043 multijump *tmp355 0 0 (m:marker0)
  1044 multilabel *label177 (m:marker0)
-    * label *label173
  1045 set :layoutThoriumDrillAtLocation*retval true
  1046 label *label153
  1047 return :layoutThoriumDrillAtLocation*retaddr
 
  1063 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1064 set .searchFinished true
  1065 set :findDrillLocation*retval true
-    * label *label183
  1066 set :findDrillLocation*finished true
  1067 jump *label18 always
  1068 end
 
  1083 set :layoutThoriumDrill*retval false
  1084 jump *label185 always
  1085 label *label187
-    * label *label188
  1086 setaddr :layoutThoriumDrillAtLocation*retaddr *label189 (h:*label189)
  1087 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label189) (h:*label189)
  1088 label *label189
 
  1097 set .mapTotal 0
  1098 set .mapProgress 0
  1099 ucontrol unbind
-    * label *label190
  1100 set :stopLocation*finished true
  1101 jump *label18 always
  1102 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-11 instructions):
 
    98 op sub *tmp64 :locateOreAway:y *tmp45
    99 op len :locateOreAway:unitDist *tmp63 *tmp64
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label30 always
+  101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
   102 label *label42
   103 label *label40
   104 jump *label44 lessThan :locateOreAway:coreDist 8
 
   180 op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   181 op abs *tmp117 *tmp116
   182 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
-    * jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
-    * jump *label67 always
+  183 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
   184 label *label69
   185 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   186 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
 
   208 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   209 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   210 label *label78
-    * jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label67 always
+  211 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   212 label *label80
   213 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   214 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   258 op shl *tmp203 1 :excludeArea:blockSizeX
   259 op sub :createMatrixOfSize:row *tmp203 1
   260 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * jump *label225 lessThan 1 :excludeArea:blockSizeY
-    * jump *label102 always
+  261 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
   262 label *label225
   263 op shl *tmp207 :createMatrixOfSize:row 7
   264 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label229 lessThan 2 :excludeArea:blockSizeY
-    * jump *label102 always
+  265 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
   266 label *label229
   267 op shl *tmp207 :createMatrixOfSize:matrix 7
   268 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label233 lessThan 3 :excludeArea:blockSizeY
-    * jump *label102 always
+  269 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
   270 label *label233
   271 op shl *tmp207 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label237 lessThan 4 :excludeArea:blockSizeY
-    * jump *label102 always
+  273 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
   274 label *label237
   275 op shl *tmp207 :createMatrixOfSize:matrix 7
   276 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label241 lessThan 5 :excludeArea:blockSizeY
-    * jump *label102 always
+  277 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
   278 label *label241
   279 op shl *tmp207 :createMatrixOfSize:matrix 7
   280 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
-    * jump *label245 lessThan 6 :excludeArea:blockSizeY
-    * jump *label102 always
+  281 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
   282 label *label245
   283 op shl *tmp207 :createMatrixOfSize:matrix 7
   284 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
 
   351 jump *label106 always
   352 label *label113
   353 op sub *tmp225 3 :findPossiblePlacement:width
-    * jump *label115 lessThanEq :findPossiblePlacement:x *tmp225
-    * jump *label112 always
+  354 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
   355 label *label115
   356 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   357 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   358 jump *label199 lessThanEq :findPossiblePlacement:x 3
   359 label *label112
   360 op sub *tmp228 3 :findPossiblePlacement:height
-    * jump *label117 lessThanEq :findPossiblePlacement:y *tmp228
-    * jump *label109 always
+  361 jump *label109 greaterThan :findPossiblePlacement:y *tmp228
   362 label *label117
   363 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   364 jump *label198 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    99 op len :locateOreAway:unitDist *tmp63 *tmp64
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label42
   102 label *label40
   103 jump *label44 lessThan :locateOreAway:coreDist 8
   104 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   180 op abs *tmp117 *tmp116
   181 op max :findDrillLocationLocal:coreDist *tmp115 *tmp117
   182 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
-    * label *label69
   183 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   184 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   185 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   207 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   208 label *label78
   209 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label80
   210 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   211 op mul :round:x :findDrillLocationLocal:diffX 1.1
   212 op add *tmp143 :round:x 0.5
 
   256 op sub :createMatrixOfSize:row *tmp203 1
   257 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   258 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
-    * label *label225
   259 op shl *tmp207 :createMatrixOfSize:row 7
   260 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   261 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
-    * label *label229
   262 op shl *tmp207 :createMatrixOfSize:matrix 7
   263 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   264 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
-    * label *label233
   265 op shl *tmp207 :createMatrixOfSize:matrix 7
   266 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   267 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
-    * label *label237
   268 op shl *tmp207 :createMatrixOfSize:matrix 7
   269 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   270 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
-    * label *label241
   271 op shl *tmp207 :createMatrixOfSize:matrix 7
   272 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   273 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
-    * label *label245
   274 op shl *tmp207 :createMatrixOfSize:matrix 7
   275 op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize:row
   276 label *label102
 
   343 label *label113
   344 op sub *tmp225 3 :findPossiblePlacement:width
   345 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
-    * label *label115
   346 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   347 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   348 jump *label199 lessThanEq :findPossiblePlacement:x 3
   349 label *label112
   350 op sub *tmp228 3 :findPossiblePlacement:height
   351 jump *label109 greaterThan :findPossiblePlacement:y *tmp228
-    * label *label117
   352 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   353 jump *label198 lessThanEq :findPossiblePlacement:y 3
   354 label *label109

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   144 set :findDrillLocationLocal:oreY :locateOreAway:y
   145 jump *label56 notEqual *tmp28 false
   146 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label19 always
+  147 return :findDrillLocationLocal*retaddr
   148 label *label56
   149 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   150 op add .mapSpots .mapSpots 1
 
   198 op add .locations .locations 1
   199 ucontrol unbind
   200 set :findDrillLocationLocal*retval true
-    * jump *label19 always
+  201 return :findDrillLocationLocal*retaddr
   202 label *label75
   203 label *label71
   204 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   218 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp146
   219 jump *label65 always
   220 label *label67
-    * jump *label84 lessThan :findDrillLocationLocal:best 0
+  221 jump *label25 lessThan :findDrillLocationLocal:best 0
   222 op add .count .count 1
   223 sensor *tmp153 :findDrillLocationLocal:item @id
   224 write *tmp153 bank1 .count
 
   316 set :shiftMask*retval :shiftMask:mask
   317 label *label281
   318 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
-    * jump *label96 always
-    * jump *label98 always
+  319 return :excludeArea*retaddr
+  320 return :excludeArea*retaddr
   321 label *label97
   322 set :excludeArea*retval :excludeArea:mask
   323 label *label98
 
   339 op mul *tmp222 :findPossiblePlacement:y 7
   340 op add *tmp223 24 *tmp222
   341 op add :findPossiblePlacement*retval *tmp223 :findPossiblePlacement:x
-    * jump *label106 always
+  342 return :findPossiblePlacement*retaddr
   343 label *label113
   344 op sub *tmp225 3 :findPossiblePlacement:width
   345 jump *label112 greaterThan :findPossiblePlacement:x *tmp225
 
   367 jump *label121 lessThan :findPossiblePlacement*retval 0
   368 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   369 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  370 return :tryPlaceGenerator*retaddr
   371 label *label123
   372 op add *tmp236 :tryPlaceGenerator:centerX 0.5
   373 op add .water2X *tmp236 :findPossiblePlacement:x
 
   389 label *label125
   390 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   391 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  392 return :tryPlaceGenerator*retaddr
   393 label *label126
   394 op add *tmp248 :tryPlaceGenerator:centerX 0.5
   395 op add .water2X *tmp248 :findPossiblePlacement:x
 
   411 label *label128
   412 jump *label129 greaterThanEq :findPossiblePlacement*retval 0
   413 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  414 return :tryPlaceGenerator*retaddr
   415 label *label129
   416 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   417 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   426 label *label131
   427 jump *label132 greaterThanEq :findPossiblePlacement*retval 0
   428 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  429 return :tryPlaceGenerator*retaddr
   430 label *label132
   431 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   432 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   461 label *label136
   462 jump *label137 greaterThanEq :findPossiblePlacement*retval 0
   463 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  464 return :tryPlaceGenerator*retaddr
   465 label *label137
   466 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   467 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   468 label *label134
   469 set :tryPlaceGenerator*retval true
-    * jump *label119 always
+  470 return :tryPlaceGenerator*retaddr
   471 label *label119
   472 return :tryPlaceGenerator*retaddr
   473 end
 
   921 label *label165
   922 jump *label166 greaterThanEq :findPossiblePlacement*retval 0
   923 set :layoutThoriumDrillAtLocation*retval false
-    * jump *label153 always
+  924 return :layoutThoriumDrillAtLocation*retaddr
   925 label *label166
   926 op add .node1X .drillX :findPossiblePlacement:x
   927 op add .node1Y .drillY :findPossiblePlacement:y
 
   939 label *label168
   940 jump *label169 equal :tryPlaceGenerator*retval false
   941 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
+  942 return :layoutThoriumDrillAtLocation*retaddr
   943 label *label169
   944 set :layoutThoriumDrillAtLocation:sx 3
   945 set :layoutThoriumDrillAtLocation:sy 3
 
  1016 label *label180
  1017 jump *label181 equal :tryPlaceGenerator*retval false
  1018 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label153 always
+ 1019 return :layoutThoriumDrillAtLocation*retaddr
  1020 label *label181
  1021 multijump *tmp355 0 0 (m:marker0)
  1022 multilabel *label177 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-15 instructions):
 
    12 label *label18
    13 wait 1e12
    14 jump *label18 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   228 op add .count .count 1
   229 write :findDrillLocationLocal:bestY bank1 .count
   230 op add .locations .locations 1
-    * label *label84
   231 jump *label25 always
-    * set :findDrillLocationLocal*retval null
-    * label *label19
-    * return :findDrillLocationLocal*retaddr
-    * end
   232 label *label10
   233 op add *tmp185 :excludeArea:areaWidth 8
   234 op idiv *tmp186 *tmp185 2
 
   311 label *label281
   312 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   313 return :excludeArea*retaddr
-    * return :excludeArea*retaddr
   314 label *label97
   315 set :excludeArea*retval :excludeArea:mask
-    * label *label98
-    * label *label96
   316 return :excludeArea*retaddr
-    * end
   317 label *label11
   318 set :findPossiblePlacement:y -3
   319 jump *label109 greaterThan :findPossiblePlacement:y 3
 
   343 jump *label198 lessThanEq :findPossiblePlacement:y 3
   344 label *label109
   345 set :findPossiblePlacement*retval -1
-    * label *label106
   346 return :findPossiblePlacement*retaddr
-    * end
   347 label *label12
   348 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   349 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
 
   456 label *label134
   457 set :tryPlaceGenerator*retval true
   458 return :tryPlaceGenerator*retaddr
-    * label *label119
-    * return :tryPlaceGenerator*retaddr
-    * end
   459 label *label13
   460 op add *tmp296 :createBlockMaskRow:x 4
   461 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
 
   491 ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
   492 op or :createBlockMaskRow*retval *tmp295 *tmp297
   493 return :createBlockMaskRow*retaddr
-    * end
   494 label *label14
   495 write @unit processor4 ":createTerrainMask:unit"
   496 write :createCombinedMask:x processor4 ":createTerrainMask:x"
 
   837 label *label152
   838 set :createCombinedMask*retval :excludeArea*retval
   839 return :createCombinedMask*retaddr
-    * end
   840 label *label15
   841 set .panelY -1
   842 set .panelX -1
 
  1004 multijump *tmp355 0 0 (m:marker0)
  1005 multilabel *label177 (m:marker0)
  1006 set :layoutThoriumDrillAtLocation*retval true
-    * label *label153
  1007 return :layoutThoriumDrillAtLocation*retaddr
-    * end
  1008 label *label2
  1009 set .searchFinished false
  1010 set :findDrillLocationLocal:x :findDrillLocation:x
 
  1024 set :findDrillLocation*retval true
  1025 set :findDrillLocation*finished true
  1026 jump *label18 always
-    * end
  1027 label *label3
  1028 set :findDrillLocationLocal:x :layoutThoriumDrill:x
  1029 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1048 label *label185
  1049 set :layoutThoriumDrill*finished true
  1050 jump *label18 always
-    * end
  1051 label *label4
  1052 set .mapSpots 0
  1053 set .mapAction 0
 
  1056 ucontrol unbind
  1057 set :stopLocation*finished true
  1058 jump *label18 always
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    83 op add .angle .angle *tmp51
    84 op mul .mapProgress .angle .angle
    85 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 *tmp55
+   86 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp54 0
    87 jump *label38 notEqual *tmp54 false
    88 set *tmp28 false
    89 jump *label28 always
 
   458 return :tryPlaceGenerator*retaddr
   459 label *label13
   460 op add *tmp296 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  461 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   462 op shl *tmp295 :createBlockMaskRow:result 1
   463 op add *tmp296 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  464 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   465 op or :createBlockMaskRow:result *tmp295 *tmp297
   466 op shl *tmp295 :createBlockMaskRow:result 1
   467 op add *tmp296 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  468 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   469 op or :createBlockMaskRow:result *tmp295 *tmp297
   470 op shl *tmp295 :createBlockMaskRow:result 1
   471 op add *tmp296 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  472 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   473 op or :createBlockMaskRow:result *tmp295 *tmp297
   474 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  475 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp297 0
   476 op or :createBlockMaskRow:result *tmp295 *tmp297
   477 op shl *tmp295 :createBlockMaskRow:result 1
   478 op add *tmp296 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  479 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   480 op or :createBlockMaskRow:result *tmp295 *tmp297
   481 op shl *tmp295 :createBlockMaskRow:result 1
   482 op add *tmp296 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  483 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   484 op or :createBlockMaskRow:result *tmp295 *tmp297
   485 op shl *tmp295 :createBlockMaskRow:result 1
   486 op add *tmp296 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  487 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   488 op or :createBlockMaskRow:result *tmp295 *tmp297
   489 op shl *tmp295 :createBlockMaskRow:result 1
   490 op add *tmp296 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  491 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   492 op or :createBlockMaskRow*retval *tmp295 *tmp297
   493 return :createBlockMaskRow*retaddr
   494 label *label14
 
   501 set :createAdjacentMask:y :createCombinedMask:y
   502 op add *tmp305 :createCombinedMask:y 4
   503 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 :createBlockMaskRow:result *tmp299
+  504 ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:result 0
   505 op shl *tmp295 :createBlockMaskRow:result 1
   506 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  507 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   508 op or :createBlockMaskRow:result *tmp295 *tmp297
   509 op shl *tmp295 :createBlockMaskRow:result 1
   510 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  511 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   512 op or :createBlockMaskRow:result *tmp295 *tmp297
   513 op shl *tmp295 :createBlockMaskRow:result 1
   514 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  515 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   516 op or :createBlockMaskRow:result *tmp295 *tmp297
   517 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp305 *tmp298 *tmp297 *tmp299
+  518 ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0
   519 op or :createBlockMaskRow:result *tmp295 *tmp297
   520 op shl *tmp295 :createBlockMaskRow:result 1
   521 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  522 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   523 op or :createBlockMaskRow:result *tmp295 *tmp297
   524 op shl *tmp295 :createBlockMaskRow:result 1
   525 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  526 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   527 op or :createBlockMaskRow:result *tmp295 *tmp297
   528 op shl *tmp295 :createBlockMaskRow:result 1
   529 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  530 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   531 op or :createBlockMaskRow:result *tmp295 *tmp297
   532 op shl *tmp295 :createBlockMaskRow:result 1
   533 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp305 *tmp298 *tmp297 *tmp299
+  534 ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0
   535 op or :createAdjacentMask:row2 *tmp295 *tmp297
   536 op add *tmp307 :createCombinedMask:y 3
   537 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 :createBlockMaskRow:result *tmp299
+  538 ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:result 0
   539 op shl *tmp295 :createBlockMaskRow:result 1
   540 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  541 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   542 op or :createBlockMaskRow:result *tmp295 *tmp297
   543 op shl *tmp295 :createBlockMaskRow:result 1
   544 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  545 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   546 op or :createBlockMaskRow:result *tmp295 *tmp297
   547 op shl *tmp295 :createBlockMaskRow:result 1
   548 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  549 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   550 op or :createBlockMaskRow:result *tmp295 *tmp297
   551 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp307 *tmp298 *tmp297 *tmp299
+  552 ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0
   553 op or :createBlockMaskRow:result *tmp295 *tmp297
   554 op shl *tmp295 :createBlockMaskRow:result 1
   555 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  556 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   557 op or :createBlockMaskRow:result *tmp295 *tmp297
   558 op shl *tmp295 :createBlockMaskRow:result 1
   559 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  560 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   561 op or :createBlockMaskRow:result *tmp295 *tmp297
   562 op shl *tmp295 :createBlockMaskRow:result 1
   563 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  564 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   565 op or :createBlockMaskRow:result *tmp295 *tmp297
   566 op shl *tmp295 :createBlockMaskRow:result 1
   567 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp307 *tmp298 *tmp297 *tmp299
+  568 ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0
   569 op or :createAdjacentMask:row1 *tmp295 *tmp297
   570 op add *tmp309 :createCombinedMask:y 2
   571 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  572 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   573 op shl *tmp295 :createBlockMaskRow:result 1
   574 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  575 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   576 op or :createBlockMaskRow:result *tmp295 *tmp297
   577 op shl *tmp295 :createBlockMaskRow:result 1
   578 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  579 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   580 op or :createBlockMaskRow:result *tmp295 *tmp297
   581 op shl *tmp295 :createBlockMaskRow:result 1
   582 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  583 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   584 op or :createBlockMaskRow:result *tmp295 *tmp297
   585 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  586 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   587 op or :createBlockMaskRow:result *tmp295 *tmp297
   588 op shl *tmp295 :createBlockMaskRow:result 1
   589 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  590 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   591 op or :createBlockMaskRow:result *tmp295 *tmp297
   592 op shl *tmp295 :createBlockMaskRow:result 1
   593 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  594 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   595 op or :createBlockMaskRow:result *tmp295 *tmp297
   596 op shl *tmp295 :createBlockMaskRow:result 1
   597 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  598 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   599 op or :createBlockMaskRow:result *tmp295 *tmp297
   600 op shl *tmp295 :createBlockMaskRow:result 1
   601 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  602 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   603 op or :createBlockMaskRow:result *tmp295 *tmp297
   604 op shl *tmp311 :createAdjacentMask:row1 1
   605 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   611 set :createAdjacentMask:row1 :createBlockMaskRow:result
   612 op add *tmp309 :createCombinedMask:y 1
   613 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  614 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   615 op shl *tmp295 :createBlockMaskRow:result 1
   616 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  617 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   618 op or :createBlockMaskRow:result *tmp295 *tmp297
   619 op shl *tmp295 :createBlockMaskRow:result 1
   620 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  621 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   622 op or :createBlockMaskRow:result *tmp295 *tmp297
   623 op shl *tmp295 :createBlockMaskRow:result 1
   624 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  625 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   626 op or :createBlockMaskRow:result *tmp295 *tmp297
   627 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  628 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   629 op or :createBlockMaskRow:result *tmp295 *tmp297
   630 op shl *tmp295 :createBlockMaskRow:result 1
   631 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  632 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   633 op or :createBlockMaskRow:result *tmp295 *tmp297
   634 op shl *tmp295 :createBlockMaskRow:result 1
   635 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  636 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   637 op or :createBlockMaskRow:result *tmp295 *tmp297
   638 op shl *tmp295 :createBlockMaskRow:result 1
   639 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  640 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   641 op or :createBlockMaskRow:result *tmp295 *tmp297
   642 op shl *tmp295 :createBlockMaskRow:result 1
   643 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  644 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   645 op or :createBlockMaskRow:result *tmp295 *tmp297
   646 op shl *tmp311 :createAdjacentMask:row1 1
   647 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   654 set :createAdjacentMask:row2 :createAdjacentMask:row1
   655 set :createAdjacentMask:row1 :createBlockMaskRow:result
   656 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 :createBlockMaskRow:result *tmp299
+  657 ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   658 op shl *tmp295 :createBlockMaskRow:result 1
   659 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  660 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   661 op or :createBlockMaskRow:result *tmp295 *tmp297
   662 op shl *tmp295 :createBlockMaskRow:result 1
   663 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  664 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   665 op or :createBlockMaskRow:result *tmp295 *tmp297
   666 op shl *tmp295 :createBlockMaskRow:result 1
   667 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  668 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   669 op or :createBlockMaskRow:result *tmp295 *tmp297
   670 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  671 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp297 0
   672 op or :createBlockMaskRow:result *tmp295 *tmp297
   673 op shl *tmp295 :createBlockMaskRow:result 1
   674 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  675 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   676 op or :createBlockMaskRow:result *tmp295 *tmp297
   677 op shl *tmp295 :createBlockMaskRow:result 1
   678 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  679 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   680 op or :createBlockMaskRow:result *tmp295 *tmp297
   681 op shl *tmp295 :createBlockMaskRow:result 1
   682 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  683 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   684 op or :createBlockMaskRow:result *tmp295 *tmp297
   685 op shl *tmp295 :createBlockMaskRow:result 1
   686 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createCombinedMask:y *tmp298 *tmp297 *tmp299
+  687 ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0
   688 op or :createBlockMaskRow:result *tmp295 *tmp297
   689 op shl *tmp311 :createAdjacentMask:row1 1
   690 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   698 set :createAdjacentMask:row1 :createBlockMaskRow:result
   699 op add *tmp309 :createCombinedMask:y -1
   700 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 :createBlockMaskRow:result *tmp299
+  701 ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:result 0
   702 op shl *tmp295 :createBlockMaskRow:result 1
   703 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  704 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   705 op or :createBlockMaskRow:result *tmp295 *tmp297
   706 op shl *tmp295 :createBlockMaskRow:result 1
   707 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  708 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   709 op or :createBlockMaskRow:result *tmp295 *tmp297
   710 op shl *tmp295 :createBlockMaskRow:result 1
   711 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  712 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   713 op or :createBlockMaskRow:result *tmp295 *tmp297
   714 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x *tmp309 *tmp298 *tmp297 *tmp299
+  715 ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0
   716 op or :createBlockMaskRow:result *tmp295 *tmp297
   717 op shl *tmp295 :createBlockMaskRow:result 1
   718 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  719 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   720 op or :createBlockMaskRow:result *tmp295 *tmp297
   721 op shl *tmp295 :createBlockMaskRow:result 1
   722 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  723 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   724 op or :createBlockMaskRow:result *tmp295 *tmp297
   725 op shl *tmp295 :createBlockMaskRow:result 1
   726 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  727 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   728 op or :createBlockMaskRow:result *tmp295 *tmp297
   729 op shl *tmp295 :createBlockMaskRow:result 1
   730 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 *tmp309 *tmp298 *tmp297 *tmp299
+  731 ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0
   732 op or :createBlockMaskRow:result *tmp295 *tmp297
   733 op shl *tmp311 :createAdjacentMask:row1 1
   734 op or *tmp312 :createAdjacentMask:row2 *tmp311
 
   742 set :createAdjacentMask:row1 :createBlockMaskRow:result
   743 op add :createBlockMaskRow:y :createCombinedMask:y -2
   744 op add *tmp296 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 :createBlockMaskRow:result *tmp299
+  745 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   746 op shl *tmp295 :createBlockMaskRow:result 1
   747 op add *tmp296 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  748 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   749 op or :createBlockMaskRow:result *tmp295 *tmp297
   750 op shl *tmp295 :createBlockMaskRow:result 1
   751 op add *tmp296 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  752 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   753 op or :createBlockMaskRow:result *tmp295 *tmp297
   754 op shl *tmp295 :createBlockMaskRow:result 1
   755 op add *tmp296 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  756 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   757 op or :createBlockMaskRow:result *tmp295 *tmp297
   758 op shl *tmp295 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  759 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp297 0
   760 op or :createBlockMaskRow:result *tmp295 *tmp297
   761 op shl *tmp295 :createBlockMaskRow:result 1
   762 op add *tmp296 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  763 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   764 op or :createBlockMaskRow:result *tmp295 *tmp297
   765 op shl *tmp295 :createBlockMaskRow:result 1
   766 op add *tmp296 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  767 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   768 op or :createBlockMaskRow:result *tmp295 *tmp297
   769 op shl *tmp295 :createBlockMaskRow:result 1
   770 op add *tmp296 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  771 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   772 op or :createBlockMaskRow:result *tmp295 *tmp297
   773 op shl *tmp295 :createBlockMaskRow:result 1
   774 op add *tmp296 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp296 :createBlockMaskRow:y *tmp298 *tmp297 *tmp299
+  775 ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0
   776 op or :createBlockMaskRow*retval *tmp295 *tmp297
   777 op shl *tmp311 :createAdjacentMask:row1 1
   778 op or *tmp312 :createAdjacentMask:row2 *tmp311

Final code before resolving virtual instructions:

    0:  jump *label16 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label16                                               ...
        label *label17                                               OreLocator.mnd: require "Matrices.mnd" remote matrices;
    4:  read *tmp11 processor4 "*signature"                          ...
    5:  jump *label17 notEqual *tmp11 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label18                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label18 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set .coreX :findDrillLocationLocal:x                         OreLocator.mnd: coreX = x;
   15:  set .coreY :findDrillLocationLocal:y                         OreLocator.mnd: coreY = y;
   16:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   17:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   18:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   19:  set .mapSpots :findDrillLocationLocal:dx                     ...
   20:  op sub *tmp13 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   21:  op sub *tmp14 @maph :findDrillLocationLocal:y                ...
   22:  op max *tmp15 :findDrillLocationLocal:x :findDrillLocationLo ...
   23:  op max *tmp15 *tmp15 *tmp13                                  ...
   24:  op max *tmp15 *tmp15 *tmp14                                  ...
   25:  set :findDrillLocationLocal:distanceLimit *tmp15             ...
   26:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   27:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   28:  set .mapProgress 0                                           ...
   29:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   30:  jump *label24 notEqual *tmp18 false                          ...
        label *label270                                              ...
   31:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   32:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   33:  jump *label270 equal *tmp18 false                            ...
        label *label24                                               ...
   34:  op div *tmp21 *tmp15 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   35:  op pow .mapTotal *tmp21 2                                    ...
   36:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   37:  set :findDrillLocationLocal:oreY 0                           ...
        label *label25                                               OreLocator.mnd: while true do
   38:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   39:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   40:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   41:  op sub *tmp23 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   42:  op mul :findDrillLocationLocal:maxDistance *tmp23 .attenuati ...
   43:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   44:  op div *tmp26 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   45:  op pow .mapTotal *tmp26 2                                    ...
   46:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   47:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   48:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   49:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   50:  set :locateOreAway:lastY -1                                  ...
   51:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   52:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   53:  op sub *tmp37 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   54:  op sub *tmp44 @maph 5                                        ...
   55:  jump *label31 greaterThanEq :locateOreAway:distance :findDri ...
        label *label195                                              ...
   56:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   57:  op sin *tmp34 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   58:  op mul *tmp35 *tmp34 :locateOreAway:distance                 ...
   59:  op add *tmp36 :findDrillLocationLocal:x *tmp35               ...
   60:  op max *tmp39 *tmp36 5                                       OreLocator.mnd: min(max(value, low), high);
   61:  op min *tmp38 *tmp39 *tmp37                                  ...
   62:  op cos *tmp41 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   63:  op mul *tmp42 *tmp41 :locateOreAway:distance                 ...
   64:  op add *tmp43 :findDrillLocationLocal:y *tmp42               ...
   65:  op max *tmp46 *tmp43 5                                       OreLocator.mnd: min(max(value, low), high);
   66:  op min *tmp45 *tmp46 *tmp44                                  ...
   67:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   68:  jump *label37 notEqual *tmp48 false                          ...
        label *label202                                              ...
   69:  ucontrol approach *tmp38 *tmp45 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   70:  ucontrol within *tmp38 *tmp45 5 *tmp48 0                     OreLocator.mnd: while !within(x, y, radius) do
   71:  jump *label202 equal *tmp48 false                            ...
        label *label37                                               ...
   72:  op div *tmp51 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   73:  op add .angle .angle *tmp51                                  ...
   74:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   75:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   76:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   77:  jump *label38 notEqual *tmp54 false                          ...
   78:  set *tmp28 false                                             OreLocator.mnd: return false;
   79:  jump *label28 always 0 0                                     ...
        label *label38                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   80:  op sub *tmp58 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   81:  op abs *tmp59 *tmp58 0                                       ...
   82:  op sub *tmp60 :locateOreAway:y :findDrillLocationLocal:y     ...
   83:  op abs *tmp61 *tmp60 0                                       ...
   84:  op max :locateOreAway:coreDist *tmp59 *tmp61                 ...
   85:  op sub *tmp63 :locateOreAway:x *tmp38                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   86:  op sub *tmp64 :locateOreAway:y *tmp45                        ...
   87:  op len :locateOreAway:unitDist *tmp63 *tmp64                 ...
   88:  jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   89:  jump *label30 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label40                                               ...
   90:  jump *label44 lessThan :locateOreAway:coreDist 8             OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   91:  jump *label46 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   92:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   93:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   94:  set *tmp75 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   95:  set :visited:i .locationsStart                               ...
   96:  jump *label51 greaterThanEq .locationsStart *tmp75           ...
        label *label196                                              ...
   97:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   98:  op add *tmp78 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   99:  read :visited:lx bank1 *tmp78                                ...
  100:  op add *tmp81 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
  101:  read :visited:ly bank1 *tmp81                                ...
  102:  op sub *tmp83 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  103:  op sub *tmp84 :locateOreAway:y :visited:ly                   ...
  104:  op len *tmp85 *tmp83 *tmp84                                  ...
  105:  jump *label52 greaterThanEq *tmp85 7                         ...
  106:  set *tmp74 true                                              OreLocator.mnd: return true;
  107:  jump *label48 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  108:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  109:  jump *label196 lessThan :visited:i *tmp75                    ...
        label *label51                                               ...
  110:  set *tmp74 false                                             OreLocator.mnd: return false;
        label *label48                                               OreLocator.mnd: if !visited(x, y) then
  111:  jump *label54 notEqual *tmp74 false                          ...
  112:  op div *tmp90 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  113:  op add .angle .angle *tmp90                                  ...
  114:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  115:  printflush message1                                          OreLocator.mnd: printflush(message1);
  116:  set *tmp28 true                                              OreLocator.mnd: return true;
  117:  jump *label28 always 0 0                                     ...
        label *label54                                               OreLocator.mnd: if !visited(x, y) then
        label *label46                                               OreLocator.mnd: if unitDist < distance then
        label *label44                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label30                                               OreLocator.mnd: while distance < distanceLimit do
  118:  jump *label195 lessThan :locateOreAway:distance :findDrillLo ...
        label *label31                                               ...
  119:  set *tmp28 false                                             OreLocator.mnd: return false;
        label *label28                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  120:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  121:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  122:  jump *label56 notEqual *tmp28 false                          ...
  123:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  124:  return :findDrillLocationLocal*retaddr                       ...
        label *label56                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  125:  jump *label58 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  126:  op add .mapSpots .mapSpots 1                                 ...
        label *label58                                               ...
  127:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  128:  jump *label64 notEqual *tmp100 false                         ...
        label *label222                                              ...
  129:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  130:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp100  OreLocator.mnd: while !within(x, y, radius) do
  131:  jump *label222 equal *tmp100 false                           ...
        label *label64                                               ...
  132:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label65                                               OreLocator.mnd: while true do
  133:  write @unit processor4 ":findBestPosition:unit"              OreLocator.mnd: var score = matrices.findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  134:  write :findDrillLocationLocal:oreX processor4 ":findBestPosi ...
  135:  write :findDrillLocationLocal:oreY processor4 ":findBestPosi ...
  136:  write :findDrillLocationLocal:ore processor4 ":findBestPosit ...
  137:  write :findDrillLocationLocal:size processor4 ":findBestPosi ...
  138:  write false processor4 ":findBestPosition*finished"          ...
  139:  write 2 processor4 "@counter"                                ...
        label *label68                                               ...
  140:  wait 1e-15                                                   ...
  141:  read *tmp110 processor4 ":findBestPosition*finished"         ...
  142:  jump *label68 equal *tmp110 false                            ...
  143:  read :findDrillLocationLocal:diffX processor4 ":findBestPosi ...
  144:  read :findDrillLocationLocal:diffY processor4 ":findBestPosi ...
  145:  read :findDrillLocationLocal:score processor4 ":findBestPosi ...
  146:  op add :findDrillLocationLocal:newX :findDrillLocationLocal: OreLocator.mnd: var newX = oreX + diffX;
  147:  op add :findDrillLocationLocal:newY :findDrillLocationLocal: OreLocator.mnd: var newY = oreY + diffY;
  148:  op sub *tmp114 :findDrillLocationLocal:newX :findDrillLocati OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  149:  op abs *tmp115 *tmp114 0                                     ...
  150:  op sub *tmp116 :findDrillLocationLocal:newY :findDrillLocati ...
  151:  op abs *tmp117 *tmp116 0                                     ...
  152:  op max :findDrillLocationLocal:coreDist *tmp115 *tmp117      ...
  153:  jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8  OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  154:  jump *label71 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  155:  set :findDrillLocationLocal:dx :findDrillLocationLocal:newX  OreLocator.mnd: dx = newX;
  156:  set :findDrillLocationLocal:dy :findDrillLocationLocal:newY  OreLocator.mnd: dy = newY;
  157:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  158:  select .mapSpots lessThan :findDrillLocationLocal:limit 1000 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  159:  jump *label75 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  160:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  161:  sensor *tmp129 :findDrillLocationLocal:item @id              ...
  162:  write *tmp129 bank1 .count                                   ...
  163:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  164:  write :findDrillLocationLocal:score bank1 .count             ...
  165:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  166:  write :findDrillLocationLocal:dx bank1 .count                ...
  167:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  168:  write :findDrillLocationLocal:dy bank1 .count                ...
  169:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  170:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  171:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  172:  return :findDrillLocationLocal*retaddr                       ...
        label *label75                                               OreLocator.mnd: if capacity >= limit then
        label *label71                                               OreLocator.mnd: if score > capacity then
  173:  jump *label78 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  174:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:ne OreLocator.mnd: bestX = newX;
  175:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:ne OreLocator.mnd: bestY = newY;
  176:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label78                                               OreLocator.mnd: if score > best then
  177:  jump *label67 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  178:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  179:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  180:  op add *tmp143 :round:x 0.5                                  *math: floor(x + 0.5);
  181:  op floor *tmp142 *tmp143 0                                   ...
  182:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  183:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  184:  op add *tmp147 :round.1:x 0.5                                *math: floor(x + 0.5);
  185:  op floor *tmp146 *tmp147 0                                   ...
  186:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: OreLocator.mnd: oreY += round(diffY * 1.1);
  187:  jump *label65 always 0 0                                     OreLocator.mnd: while true do
        label *label67                                               ...
  188:  jump *label25 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  189:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  190:  sensor *tmp153 :findDrillLocationLocal:item @id              ...
  191:  write *tmp153 bank1 .count                                   ...
  192:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  193:  write :findDrillLocationLocal:best bank1 .count              ...
  194:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  195:  write :findDrillLocationLocal:bestX bank1 .count             ...
  196:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  197:  write :findDrillLocationLocal:bestY bank1 .count             ...
  198:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  199:  jump *label25 always 0 0                                     OreLocator.mnd: while true do
        label *label10                                               OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
  200:  op add *tmp185 :excludeArea:areaWidth 8                      OreLocator.mnd: var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
  201:  op idiv *tmp186 *tmp185 2                                    ...
  202:  op sub *tmp187 :excludeArea:maskX :excludeArea:areaX         ...
  203:  op abs *tmp188 *tmp187 0                                     ...
  204:  op sub :excludeArea:overlapX *tmp186 *tmp188                 ...
  205:  op add *tmp191 :excludeArea:areaHeight 8                     OreLocator.mnd: var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);
  206:  op idiv *tmp192 *tmp191 2                                    ...
  207:  op sub *tmp193 :excludeArea:maskY :excludeArea:areaY         ...
  208:  op abs *tmp194 *tmp193 0                                     ...
  209:  op sub :excludeArea:overlapY *tmp192 *tmp194                 ...
  210:  op greaterThan *tmp196 :excludeArea:overlapX 0               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  211:  op greaterThan *tmp197 :excludeArea:overlapY 0               ...
  212:  op land *tmp198 *tmp196 *tmp197                              ...
  213:  jump *label97 equal *tmp198 false                            ...
  214:  op min :excludeArea:blockSizeX 7 :excludeArea:overlapX       OreLocator.mnd: var blockSizeX = min(7, overlapX);
  215:  op min :excludeArea:blockSizeY 7 :excludeArea:overlapY       OreLocator.mnd: var blockSizeY = min(7, overlapY);
  216:  op shl *tmp203 1 :excludeArea:blockSizeX                     OreLocator.mnd: var row = (1 << width) - 1;
  217:  op sub :createMatrixOfSize:row *tmp203 1                     ...
  218:  set :createMatrixOfSize:matrix :createMatrixOfSize:row       OreLocator.mnd: var matrix = row;
  219:  jump *label102 greaterThanEq 1 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  220:  op shl *tmp207 :createMatrixOfSize:row 7                     OreLocator.mnd: matrix = (matrix << 7) | row;
  221:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  222:  jump *label102 greaterThanEq 2 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  223:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  224:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  225:  jump *label102 greaterThanEq 3 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  226:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  227:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  228:  jump *label102 greaterThanEq 4 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  229:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  230:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  231:  jump *label102 greaterThanEq 5 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  232:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  233:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
  234:  jump *label102 greaterThanEq 6 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  235:  op shl *tmp207 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  236:  op or :createMatrixOfSize:matrix *tmp207 :createMatrixOfSize ...
        label *label102                                              OreLocator.mnd: for var i in 1 ... 7 do
  237:  op lessThan *tmp209 :excludeArea:maskX :excludeArea:areaX    OreLocator.mnd: var shiftX = (maskX < areaX) * (7 - blockSizeX);
  238:  op sub *tmp210 7 :excludeArea:blockSizeX                     ...
  239:  op mul :excludeArea:shiftX *tmp209 *tmp210                   ...
  240:  op lessThan *tmp212 :excludeArea:maskY :excludeArea:areaY    OreLocator.mnd: var shiftY = (maskY < areaY) * (7 - blockSizeY);
  241:  op sub *tmp213 7 :excludeArea:blockSizeY                     ...
  242:  op mul :excludeArea:shiftY *tmp212 *tmp213                   ...
  243:  op abs *tmp161 :excludeArea:shiftX 0                         OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  244:  op greaterThan *tmp162 *tmp161 6                             ...
  245:  op abs *tmp163 :excludeArea:shiftY 0                         ...
  246:  op greaterThan *tmp164 *tmp163 6                             ...
  247:  op or *tmp165 *tmp162 *tmp164                                ...
  248:  jump *label273 equal *tmp165 false                           ...
  249:  set :shiftMask*retval 0                                      ...
  250:  jump *label281 always 0 0                                    ...
        label *label273                                              ...
  251:  op mul *tmp167 7 :excludeArea:shiftY                         OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  252:  op add :shiftMask:shift :excludeArea:shiftX *tmp167          ...
  253:  jump *label275 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  254:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  255:  op and *tmp172 :createMatrixOfSize:matrix :shiftMask:clearMa OreLocator.mnd: mask = (mask & clearMask) << shift;
  256:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  257:  jump *label276 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label275                                              ...
  258:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  259:  op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp174    ...
        label *label276                                              OreLocator.mnd: if shift > 0 then
  260:  jump *label279 equal :excludeArea:shiftX 0                   OreLocator.mnd: if shiftX != 0 then
  261:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  262:  jump *label277 lessThanEq :excludeArea:shiftX 0              OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  263:  op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX   ...
        label *label277                                              ...
  264:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  265:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  266:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  267:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  268:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  269:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  270:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label279                                              OreLocator.mnd: if shiftX != 0 then
  271:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label281                                              OreLocator.mnd: var shifted = shiftMask(blocked, shiftX, shiftY);
  272:  op or :excludeArea*retval :excludeArea:mask :shiftMask*retva OreLocator.mnd: return mask | shifted;
  273:  return :excludeArea*retaddr                                  ...
        label *label97                                               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  274:  set :excludeArea*retval :excludeArea:mask                    OreLocator.mnd: return mask;
  275:  return :excludeArea*retaddr                                  OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
        label *label11                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  276:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  277:  jump *label109 greaterThan :findPossiblePlacement:y 3        ...
        label *label198                                              ...
  278:  op add *tmp216 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  279:  op mul *tmp217 7 *tmp216                                     ...
  280:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  281:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  282:  jump *label112 greaterThan :findPossiblePlacement:x 3        ...
        label *label199                                              ...
  283:  op and *tmp219 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  284:  jump *label113 notEqual *tmp219 0                            ...
  285:  op mul *tmp222 :findPossiblePlacement:y 7                    ...
  286:  op add *tmp223 24 *tmp222                                    ...
  287:  op add :findPossiblePlacement*retval *tmp223 :findPossiblePl ...
  288:  return :findPossiblePlacement*retaddr                        ...
        label *label113                                              ...
  289:  op sub *tmp225 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  290:  jump *label112 greaterThan :findPossiblePlacement:x *tmp225  ...
  291:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  292:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  293:  jump *label199 lessThanEq :findPossiblePlacement:x 3         ...
        label *label112                                              ...
  294:  op sub *tmp228 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  295:  jump *label109 greaterThan :findPossiblePlacement:y *tmp228  ...
  296:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  297:  jump *label198 lessThanEq :findPossiblePlacement:y 3         ...
        label *label109                                              ...
  298:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  299:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
  300:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  301:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  302:  set :findPossiblePlacement:width 2                           ...
  303:  set :findPossiblePlacement:height 4                          ...
  304:  setaddr :findPossiblePlacement*retaddr *label120             ...
  305:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label120                                              ...
  306:  jump *label121 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  307:  jump *label123 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  308:  set :tryPlaceGenerator*retval false                          ...
  309:  return :tryPlaceGenerator*retaddr                            ...
        label *label123                                              ...
  310:  op add *tmp236 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  311:  op add .water2X *tmp236 :findPossiblePlacement:x             ...
  312:  op add *tmp238 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  313:  op add .water2Y *tmp238 :findPossiblePlacement:y             ...
  314:  op add .generatorX *tmp236 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  315:  op add *tmp242 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  316:  op add .generatorY *tmp242 :findPossiblePlacement:y          ...
  317:  op shl *tmp244 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  318:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  319:  jump *label122 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label121                                              ...
  320:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  321:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  322:  set :findPossiblePlacement:width 4                           ...
  323:  set :findPossiblePlacement:height 2                          ...
  324:  setaddr :findPossiblePlacement*retaddr *label125             ...
  325:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label125                                              ...
  326:  jump *label126 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  327:  set :tryPlaceGenerator*retval false                          ...
  328:  return :tryPlaceGenerator*retaddr                            ...
        label *label126                                              ...
  329:  op add *tmp248 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  330:  op add .water2X *tmp248 :findPossiblePlacement:x             ...
  331:  op add *tmp250 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  332:  op add .water2Y *tmp250 :findPossiblePlacement:y             ...
  333:  op add *tmp252 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  334:  op add .generatorX *tmp252 :findPossiblePlacement:x          ...
  335:  op add .generatorY *tmp250 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  336:  op shl *tmp256 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  337:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label122                                              OreLocator.mnd: if shift >= 0 then
  338:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr OreLocator.mnd: terrainMask |= createFixedMatrix(
  339:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  340:  set :findPossiblePlacement:placementMask 1                   ...
  341:  set :findPossiblePlacement:width 1                           ...
  342:  set :findPossiblePlacement:height 1                          ...
  343:  setaddr :findPossiblePlacement*retaddr *label128             ...
  344:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label128                                              ...
  345:  jump *label129 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  346:  set :tryPlaceGenerator*retval false                          ...
  347:  return :tryPlaceGenerator*retaddr                            ...
        label *label129                                              ...
  348:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  349:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  350:  op shl *tmp262 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  351:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  352:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  353:  set :findPossiblePlacement:placementMask 1                   ...
  354:  set :findPossiblePlacement:width 1                           ...
  355:  set :findPossiblePlacement:height 1                          ...
  356:  setaddr :findPossiblePlacement*retaddr *label131             ...
  357:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label131                                              ...
  358:  jump *label132 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  359:  set :tryPlaceGenerator*retval false                          ...
  360:  return :tryPlaceGenerator*retaddr                            ...
        label *label132                                              ...
  361:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  362:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  363:  op shl *tmp268 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  364:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  365:  op sub *tmp269 .water2X .node1X                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  366:  op sub *tmp270 .water2Y .node1Y                              ...
  367:  op len *tmp271 *tmp269 *tmp270                               ...
  368:  op greaterThan *tmp272 *tmp271 7                             ...
  369:  op sub *tmp273 .generatorX .node1X                           OreLocator.mnd: or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
  370:  op sub *tmp274 .generatorY .node1Y                           ...
  371:  op len *tmp275 *tmp273 *tmp274                               ...
  372:  op greaterThan *tmp276 *tmp275 7                             ...
  373:  op or *tmp277 *tmp272 *tmp276                                ...
  374:  op sub *tmp278 .panelX .node1X                               OreLocator.mnd: or len(panelX - node1X, panelY - node1Y) > 6
  375:  op sub *tmp279 .panelY .node1Y                               ...
  376:  op len *tmp280 *tmp278 *tmp279                               ...
  377:  op greaterThan *tmp281 *tmp280 6                             ...
  378:  op or *tmp282 *tmp277 *tmp281                                ...
  379:  op sub *tmp283 .batteryX .node1X                             OreLocator.mnd: or len(batteryX - node1X, batteryY - node1Y) > 6
  380:  op sub *tmp284 .batteryY .node1Y                             ...
  381:  op len *tmp285 *tmp283 *tmp284                               ...
  382:  op greaterThan *tmp286 *tmp285 6                             ...
  383:  op or *tmp287 *tmp282 *tmp286                                ...
  384:  jump *label134 equal *tmp287 false                           OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  385:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  386:  set :findPossiblePlacement:placementMask 1                   ...
  387:  set :findPossiblePlacement:width 1                           ...
  388:  set :findPossiblePlacement:height 1                          ...
  389:  setaddr :findPossiblePlacement*retaddr *label136             ...
  390:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label136                                              ...
  391:  jump *label137 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  392:  set :tryPlaceGenerator*retval false                          ...
  393:  return :tryPlaceGenerator*retaddr                            ...
        label *label137                                              ...
  394:  op add .node2X :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: node2X = centerX + c;
  395:  op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: node2Y = centerY + r;
        label *label134                                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  396:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  397:  return :tryPlaceGenerator*retaddr                            ...
        label *label13                                               OreLocator.mnd: def createBlockMaskRow(x, y)
  398:  op add *tmp296 :createBlockMaskRow:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  399:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  400:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  401:  op add *tmp296 :createBlockMaskRow:x 3                       ...
  402:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  403:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  404:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  405:  op add *tmp296 :createBlockMaskRow:x 2                       ...
  406:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  407:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  408:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  409:  op add *tmp296 :createBlockMaskRow:x 1                       ...
  410:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  411:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  412:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  413:  ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow: ...
  414:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  415:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  416:  op add *tmp296 :createBlockMaskRow:x -1                      ...
  417:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  418:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  419:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  420:  op add *tmp296 :createBlockMaskRow:x -2                      ...
  421:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  422:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  423:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  424:  op add *tmp296 :createBlockMaskRow:x -3                      ...
  425:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  426:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  427:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  428:  op add *tmp296 :createBlockMaskRow:x -4                      ...
  429:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  430:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  431:  return :createBlockMaskRow*retaddr                           OreLocator.mnd: def createBlockMaskRow(x, y)
        label *label14                                               OreLocator.mnd: def createCombinedMask(x, y);
  432:  write @unit processor4 ":createTerrainMask:unit"             OreLocator.mnd: async(matrices.createTerrainMask(@unit, x, y));
  433:  write :createCombinedMask:x processor4 ":createTerrainMask:x ...
  434:  write :createCombinedMask:y processor4 ":createTerrainMask:y ...
  435:  write false processor4 ":createTerrainMask*finished"         ...
  436:  write 1 processor4 "@counter"                                ...
  437:  set :createAdjacentMask:x :createCombinedMask:x              OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
  438:  set :createAdjacentMask:y :createCombinedMask:y              ...
  439:  op add *tmp305 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  440:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  441:  ucontrol getBlock *tmp296 *tmp305 0 :createBlockMaskRow:resu ...
  442:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  443:  op add *tmp296 :createCombinedMask:x 3                       ...
  444:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  445:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  446:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  447:  op add *tmp296 :createCombinedMask:x 2                       ...
  448:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  449:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  450:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  451:  op add *tmp296 :createCombinedMask:x 1                       ...
  452:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  453:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  454:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  455:  ucontrol getBlock :createCombinedMask:x *tmp305 0 *tmp297 0  ...
  456:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  457:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  458:  op add *tmp296 :createCombinedMask:x -1                      ...
  459:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  460:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  461:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  462:  op add *tmp296 :createCombinedMask:x -2                      ...
  463:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  464:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  465:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  466:  op add *tmp296 :createCombinedMask:x -3                      ...
  467:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  468:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  469:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  470:  op add *tmp296 :createCombinedMask:x -4                      ...
  471:  ucontrol getBlock *tmp296 *tmp305 0 *tmp297 0                ...
  472:  op or :createAdjacentMask:row2 *tmp295 *tmp297               ...
  473:  op add *tmp307 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  474:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  475:  ucontrol getBlock *tmp296 *tmp307 0 :createBlockMaskRow:resu ...
  476:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  477:  op add *tmp296 :createCombinedMask:x 3                       ...
  478:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  479:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  480:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  481:  op add *tmp296 :createCombinedMask:x 2                       ...
  482:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  483:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  484:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  485:  op add *tmp296 :createCombinedMask:x 1                       ...
  486:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  487:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  488:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  489:  ucontrol getBlock :createCombinedMask:x *tmp307 0 *tmp297 0  ...
  490:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  491:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  492:  op add *tmp296 :createCombinedMask:x -1                      ...
  493:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  494:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  495:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  496:  op add *tmp296 :createCombinedMask:x -2                      ...
  497:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  498:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  499:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  500:  op add *tmp296 :createCombinedMask:x -3                      ...
  501:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  502:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  503:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  504:  op add *tmp296 :createCombinedMask:x -4                      ...
  505:  ucontrol getBlock *tmp296 *tmp307 0 *tmp297 0                ...
  506:  op or :createAdjacentMask:row1 *tmp295 *tmp297               ...
  507:  op add *tmp309 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  508:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  509:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  510:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  511:  op add *tmp296 :createCombinedMask:x 3                       ...
  512:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  513:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  514:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  515:  op add *tmp296 :createCombinedMask:x 2                       ...
  516:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  517:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  518:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  519:  op add *tmp296 :createCombinedMask:x 1                       ...
  520:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  521:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  522:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  523:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  524:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  525:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  526:  op add *tmp296 :createCombinedMask:x -1                      ...
  527:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  528:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  529:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  530:  op add *tmp296 :createCombinedMask:x -2                      ...
  531:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  532:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  533:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  534:  op add *tmp296 :createCombinedMask:x -3                      ...
  535:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  536:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  537:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  538:  op add *tmp296 :createCombinedMask:x -4                      ...
  539:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  540:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  541:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  542:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  543:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  544:  op or *tmp314 *tmp312 *tmp313                                ...
  545:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  546:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  547:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  548:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  549:  op add *tmp309 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  550:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  551:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  552:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  553:  op add *tmp296 :createCombinedMask:x 3                       ...
  554:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  555:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  556:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  557:  op add *tmp296 :createCombinedMask:x 2                       ...
  558:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  559:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  560:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  561:  op add *tmp296 :createCombinedMask:x 1                       ...
  562:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  563:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  564:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  565:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  566:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  567:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  568:  op add *tmp296 :createCombinedMask:x -1                      ...
  569:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  570:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  571:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  572:  op add *tmp296 :createCombinedMask:x -2                      ...
  573:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  574:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  575:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  576:  op add *tmp296 :createCombinedMask:x -3                      ...
  577:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  578:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  579:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  580:  op add *tmp296 :createCombinedMask:x -4                      ...
  581:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  582:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  583:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  584:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  585:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  586:  op or *tmp314 *tmp312 *tmp313                                ...
  587:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  588:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  589:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  590:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  591:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  592:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  593:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  594:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 :createBlo ...
  595:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  596:  op add *tmp296 :createCombinedMask:x 3                       ...
  597:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  598:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  599:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  600:  op add *tmp296 :createCombinedMask:x 2                       ...
  601:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  602:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  603:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  604:  op add *tmp296 :createCombinedMask:x 1                       ...
  605:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  606:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  607:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  608:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  609:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  610:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  611:  op add *tmp296 :createCombinedMask:x -1                      ...
  612:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  613:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  614:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  615:  op add *tmp296 :createCombinedMask:x -2                      ...
  616:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  617:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  618:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  619:  op add *tmp296 :createCombinedMask:x -3                      ...
  620:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  621:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  622:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  623:  op add *tmp296 :createCombinedMask:x -4                      ...
  624:  ucontrol getBlock *tmp296 :createCombinedMask:y 0 *tmp297 0  ...
  625:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  626:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  627:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  628:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  629:  op or *tmp314 *tmp312 *tmp313                                ...
  630:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  631:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  632:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  633:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  634:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  635:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  636:  op add *tmp309 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  637:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  638:  ucontrol getBlock *tmp296 *tmp309 0 :createBlockMaskRow:resu ...
  639:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  640:  op add *tmp296 :createCombinedMask:x 3                       ...
  641:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  642:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  643:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  644:  op add *tmp296 :createCombinedMask:x 2                       ...
  645:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  646:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  647:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  648:  op add *tmp296 :createCombinedMask:x 1                       ...
  649:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  650:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  651:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  652:  ucontrol getBlock :createCombinedMask:x *tmp309 0 *tmp297 0  ...
  653:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  654:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  655:  op add *tmp296 :createCombinedMask:x -1                      ...
  656:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  657:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  658:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  659:  op add *tmp296 :createCombinedMask:x -2                      ...
  660:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  661:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  662:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  663:  op add *tmp296 :createCombinedMask:x -3                      ...
  664:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  665:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  666:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  667:  op add *tmp296 :createCombinedMask:x -4                      ...
  668:  ucontrol getBlock *tmp296 *tmp309 0 *tmp297 0                ...
  669:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  670:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  671:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  672:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  673:  op or *tmp314 *tmp312 *tmp313                                ...
  674:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow:r ...
  675:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  676:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  677:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  678:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  679:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  680:  op add :createBlockMaskRow:y :createCombinedMask:y -2        OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  681:  op add *tmp296 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  682:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 :createBlo ...
  683:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  684:  op add *tmp296 :createCombinedMask:x 3                       ...
  685:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  686:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  687:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  688:  op add *tmp296 :createCombinedMask:x 2                       ...
  689:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  690:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  691:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  692:  op add *tmp296 :createCombinedMask:x 1                       ...
  693:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  694:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  695:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  696:  ucontrol getBlock :createCombinedMask:x :createBlockMaskRow: ...
  697:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  698:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  699:  op add *tmp296 :createCombinedMask:x -1                      ...
  700:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  701:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  702:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  703:  op add *tmp296 :createCombinedMask:x -2                      ...
  704:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  705:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  706:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  707:  op add *tmp296 :createCombinedMask:x -3                      ...
  708:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  709:  op or :createBlockMaskRow:result *tmp295 *tmp297             ...
  710:  op shl *tmp295 :createBlockMaskRow:result 1                  ...
  711:  op add *tmp296 :createCombinedMask:x -4                      ...
  712:  ucontrol getBlock *tmp296 :createBlockMaskRow:y 0 *tmp297 0  ...
  713:  op or :createBlockMaskRow*retval *tmp295 *tmp297             ...
  714:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  715:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  716:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  717:  op or *tmp314 *tmp312 *tmp313                                ...
  718:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  719:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  720:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  721:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  722:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  723:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  724:  op sub :createAdjacentMask:r -2 1                            OreLocator.mnd: for var r in -4 .. 2 descending do
  725:  op add *tmp309 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  726:  set :createBlockMaskRow:x :createCombinedMask:x              ...
  727:  set :createBlockMaskRow:y *tmp309                            ...
  728:  setaddr :createBlockMaskRow*retaddr *label265                ...
  729:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label265                                              ...
  730:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  731:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  732:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  733:  op or *tmp314 *tmp312 *tmp313                                ...
  734:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  735:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  736:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  737:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  738:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  739:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  740:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  741:  op add *tmp309 :createAdjacentMask:y :createAdjacentMask:r   OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  742:  set :createBlockMaskRow:x :createAdjacentMask:x              ...
  743:  set :createBlockMaskRow:y *tmp309                            ...
  744:  setaddr :createBlockMaskRow*retaddr *label268                ...
  745:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label268                                              ...
  746:  op shl *tmp311 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  747:  op or *tmp312 :createAdjacentMask:row2 *tmp311               ...
  748:  op shr *tmp313 :createAdjacentMask:row1 1                    ...
  749:  op or *tmp314 *tmp312 *tmp313                                ...
  750:  op or :createAdjacentMask:mask *tmp314 :createBlockMaskRow*r ...
  751:  op shl *tmp316 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  752:  op and *tmp317 :createAdjacentMask:mask 0xFE                 ...
  753:  op or :createAdjacentMask:result *tmp316 *tmp317             ...
  754:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  755:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  756:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  757:  op shr *tmp304 :createAdjacentMask:result 1                  OreLocator.mnd: result >> 1;
        label *label151                                              OreLocator.mnd: var terrainMask = await(matrices.createTerrainMask);
  758:  wait 1e-15                                                   ...
  759:  read *tmp320 processor4 ":createTerrainMask*finished"        ...
  760:  jump *label151 equal *tmp320 false                           ...
  761:  read :createCombinedMask:terrainMask processor4 ":createTerr ...
  762:  op or :excludeArea:mask *tmp304 :createCombinedMask:terrainM OreLocator.mnd: return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
  763:  set :excludeArea:maskX :createCombinedMask:x                 ...
  764:  set :excludeArea:maskY :createCombinedMask:y                 ...
  765:  set :excludeArea:areaX .coreX                                ...
  766:  set :excludeArea:areaY .coreY                                ...
  767:  set :excludeArea:areaWidth 15                                ...
  768:  set :excludeArea:areaHeight 15                               ...
  769:  setaddr :excludeArea*retaddr *label152                       ...
  770:  call *label10 *invalid :excludeArea*retval                   ...
        label *label152                                              ...
  771:  set :createCombinedMask*retval :excludeArea*retval           ...
  772:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label15                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  773:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  774:  set .panelX -1                                               ...
  775:  set .generatorY -1                                           ...
  776:  set .generatorX -1                                           ...
  777:  set .water2Y -1                                              ...
  778:  set .water2X -1                                              ...
  779:  set .water1Y -1                                              ...
  780:  set .water1X -1                                              ...
  781:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  782:  set :moveTo.5:y .drillY                                      ...
  783:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  784:  jump *label157 notEqual *tmp323 false                        ...
        label *label271                                              ...
  785:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  786:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp323 0          OreLocator.mnd: while !within(x, y, radius) do
  787:  jump *label271 equal *tmp323 false                           ...
        label *label157                                              ...
  788:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  789:  set :createCombinedMask:y .drillY                            ...
  790:  setaddr :createCombinedMask*retaddr *label158                ...
  791:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label158                                              ...
  792:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  793:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  794:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  795:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  796:  set :findPossiblePlacement:placementMask 387                 ...
  797:  set :findPossiblePlacement:width 2                           ...
  798:  set :findPossiblePlacement:height 2                          ...
  799:  setaddr :findPossiblePlacement*retaddr *label159             ...
  800:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label159                                              ...
  801:  jump *label160 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  802:  op add *tmp332 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  803:  op add .water1X *tmp332 :findPossiblePlacement:x             ...
  804:  op add *tmp334 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  805:  op add .water1Y *tmp334 :findPossiblePlacement:y             ...
  806:  op shl *tmp336 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  807:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  808:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label160                                              OreLocator.mnd: if shift >= 0 then
  809:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  810:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  811:  set :findPossiblePlacement:width 2                           ...
  812:  set :findPossiblePlacement:height 2                          ...
  813:  setaddr :findPossiblePlacement*retaddr *label162             ...
  814:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label162                                              ...
  815:  jump *label163 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  816:  op add *tmp341 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  817:  op add .containerX *tmp341 :findPossiblePlacement:x          ...
  818:  op add *tmp343 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  819:  op add .containerY *tmp343 :findPossiblePlacement:y          ...
  820:  op shl *tmp345 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  821:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label163                                              OreLocator.mnd: if shift >= 0 then
  822:  op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumD OreLocator.mnd: var nodeMask = terrainMask | createFixedMatrix(
  823:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
  824:  set :findPossiblePlacement:placementMask 1                   ...
  825:  set :findPossiblePlacement:width 1                           ...
  826:  set :findPossiblePlacement:height 1                          ...
  827:  setaddr :findPossiblePlacement*retaddr *label165             ...
  828:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label165                                              ...
  829:  jump *label166 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  830:  set :layoutThoriumDrillAtLocation*retval false               ...
  831:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label166                                              ...
  832:  op add .node1X .drillX :findPossiblePlacement:x              OreLocator.mnd: node1X = drillX + c;
  833:  op add .node1Y .drillY :findPossiblePlacement:y              OreLocator.mnd: node1Y = drillY + r;
  834:  op shl *tmp352 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  835:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  836:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  837:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  838:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  839:  set :tryPlaceGenerator:centerY .drillY                       ...
  840:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  841:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  842:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  843:  setaddr :tryPlaceGenerator*retaddr *label168                 ...
  844:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label168                                              ...
  845:  jump *label169 equal :tryPlaceGenerator*retval false         ...
  846:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  847:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label169                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  848:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  849:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  850:  setaddr *tmp355 *label174                                    ...
  851:  jump *label171 always 0 0                                    ...
        multilabel *label174                                         ...
  852:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  853:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  854:  setaddr *tmp355 *label175                                    ...
  855:  jump *label171 always 0 0                                    ...
        multilabel *label175                                         ...
  856:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  857:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  858:  setaddr *tmp355 *label176                                    ...
  859:  jump *label171 always 0 0                                    ...
        multilabel *label176                                         ...
  860:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  861:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  862:  setaddr *tmp355 *label177                                    ...
        label *label171                                              ...
  863:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  864:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  865:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  866:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  867:  setaddr :createCombinedMask*retaddr *label178                ...
  868:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label178                                              ...
  869:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  870:  op abs *tmp161 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  871:  op greaterThan *tmp162 *tmp161 6                             ...
  872:  op abs *tmp163 :layoutThoriumDrillAtLocation:sy 0            ...
  873:  op greaterThan *tmp164 *tmp163 6                             ...
  874:  op or *tmp165 *tmp162 *tmp164                                ...
  875:  jump *label283 equal *tmp165 false                           ...
  876:  set :shiftMask*retval 0                                      ...
  877:  jump *label291 always 0 0                                    ...
        label *label283                                              ...
  878:  op mul *tmp167 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  879:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  880:  jump *label285 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  881:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  882:  op and *tmp172 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  883:  op shl :shiftMask:mask *tmp172 :shiftMask:shift              ...
  884:  jump *label286 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label285                                              ...
  885:  op sub *tmp174 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  886:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label286                                              OreLocator.mnd: if shift > 0 then
  887:  jump *label289 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  888:  op shr :shiftMask:keep 0b1111111 *tmp161                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  889:  jump *label287 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  890:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label287                                              ...
  891:  op shl *tmp181 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  892:  op or :shiftMask:keep :shiftMask:keep *tmp181                ...
  893:  op shl *tmp182 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  894:  op or :shiftMask:keep :shiftMask:keep *tmp182                ...
  895:  op shl *tmp183 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  896:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  897:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label289                                              OreLocator.mnd: if shiftX != 0 then
  898:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label291                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  899:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  900:  op sub *tmp361 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  901:  op sub *tmp362 .drillY :layoutThoriumDrillAtLocation:sy      ...
  902:  set :tryPlaceGenerator:centerX *tmp361                       ...
  903:  set :tryPlaceGenerator:centerY *tmp362                       ...
  904:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  905:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  906:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  907:  setaddr :tryPlaceGenerator*retaddr *label180                 ...
  908:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label180                                              ...
  909:  jump *label181 equal :tryPlaceGenerator*retval false         ...
  910:  set :layoutThoriumDrillAtLocation*retval true                ...
  911:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label181                                              ...
  912:  multijump *tmp355 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label177                                         ...
  913:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  914:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  915:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  916:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  917:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  918:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  919:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  920:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  921:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  922:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  923:  setaddr :findDrillLocationLocal*retaddr *label184            ...
  924:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label184                                              ...
  925:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  926:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  927:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  928:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  929:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  930:  set :findDrillLocation*finished true                         ...
  931:  jump *label18 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  932:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  933:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  934:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  935:  set :findDrillLocationLocal:item @thorium                    ...
  936:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  937:  set :findDrillLocationLocal:size 3                           ...
  938:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  939:  setaddr :findDrillLocationLocal*retaddr *label186            ...
  940:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label186                                              ...
  941:  set .drillX :findDrillLocationLocal:dx                       ...
  942:  set .drillY :findDrillLocationLocal:dy                       ...
  943:  jump *label187 notEqual :findDrillLocationLocal*retval false ...
  944:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  945:  jump *label185 always 0 0                                    ...
        label *label187                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  946:  setaddr :layoutThoriumDrillAtLocation*retaddr *label189      OreLocator.mnd: layoutThoriumDrillAtLocation();
  947:  call *label15 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label189                                              ...
  948:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label185                                              ...
  949:  set :layoutThoriumDrill*finished true                        ...
  950:  jump *label18 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  951:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  952:  set .mapAction 0                                             ...
  953:  set .mapTotal 0                                              ...
  954:  set .mapProgress 0                                           ...
  955:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  956:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  957:  jump *label18 always 0 0                                     ...


Performance: parsed in 612 ms, compiled in 553 ms, optimized in 2,186 ms, run in 14 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: success.

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp11 processor4 "*signature":
Variable 'processor4' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
