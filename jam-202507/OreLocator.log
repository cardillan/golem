  1106 instructions before optimizations.
   108 instructions eliminated by Temp Variables Elimination (2 iterations).
    77 instructions eliminated by Dead Code Elimination (6 iterations).
C:\Home\golem\jam-202507\OreLocator.mnd:23:19 Variable 'mapProgress' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:23:32 Variable 'mapTotal' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:23:42 Variable 'mapAction' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:28:5 Variable 'searchFinished' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:5 Variable 'water1X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:14 Variable 'water1Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:5 Variable 'containerX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:17 Variable 'containerY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:35:5 Variable 'node2X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:35:13 Variable 'node2Y' is not used.
     2 instructions eliminated by Jump Normalization (5 iterations).
    38 instructions eliminated by Jump Optimization (5 iterations).
    51 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    23 instructions modified by Expression Optimization (2 passes, 3 iterations).
   269 instructions eliminated by Data Flow Optimization (14 passes, 47 iterations).
     1 loops improved by Loop Hoisting.
     1 instructions added by Loop Optimization (3 iterations).
    11 loops improved by Loop Optimization.
   158 instructions added by Loop Unrolling (18 iterations).
     3 loops unrolled by Loop Unrolling.
   265 instructions added by Function Inlining (18 iterations).
     9 function calls inlined by Function Inlining.
    11 instructions eliminated by Jump Straightening (5 iterations).
    15 instructions updated by JumpThreading.
    15 instructions eliminated by Unreachable Code Elimination (2 iterations).
   959 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 355):
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:352:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:473:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:487:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:485:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:488:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:520:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 354):
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:352:5                          size   +17, benefit     3900.0, efficiency    229.412
  * Unroll loop at OreLocator.mnd:473:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:487:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:485:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:488:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:520:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 327):
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:352:5                          size   +17, benefit     3900.0, efficiency    229.412
    Unroll loop at OreLocator.mnd:487:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:520:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 326):
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:352:5                          size   +17, benefit     3900.0, efficiency    229.412 (+17 instructions)
    Unroll loop at OreLocator.mnd:487:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:520:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 309):
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:487:5                          size   +87, benefit     9100.0, efficiency    104.598 (+95 instructions)
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size   +52, benefit      104.0, efficiency      2.000
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:520:28                size   +53, benefit        4.0, efficiency      0.075
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size   +53, benefit      100.0, efficiency      1.887
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 214):
  * Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:520:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 213):
  * Replicate loop condition at OreLocator.mnd:44:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
    Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:520:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 212):
    Unroll iteration loop at OreLocator.mnd:609:5                size   +81, benefit       19.0, efficiency      0.235
  * Inline function 'shiftMask' defined at OreLocator.mnd:275:1  size   +28, benefit      171.0, efficiency      6.107 (+18 instructions)
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +147, benefit      104.0, efficiency      0.707
    Inline function call at OreLocator.mnd:317:23                size   +29, benefit       58.5, efficiency      2.017
    Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:520:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:617:27                size   +29, benefit      112.5, efficiency      3.879
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 194):
    Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +147, benefit      104.0, efficiency      0.707
  * Inline function call at OreLocator.mnd:484:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:520:28                size  +148, benefit        4.0, efficiency      0.027
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
    Inline function call at OreLocator.mnd:615:30                size  +148, benefit      100.0, efficiency      0.676
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 162):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +251, benefit      832.0, efficiency      3.315
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +179, benefit      104.0, efficiency      0.581
  * Inline function call at OreLocator.mnd:485:16                size   +36, benefit      104.0, efficiency      2.889 (+32 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +180, benefit        4.0, efficiency      0.022
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +180, benefit      100.0, efficiency      0.556
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 130):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +215, benefit      728.0, efficiency      3.386
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +211, benefit      104.0, efficiency      0.493
  * Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +212, benefit        4.0, efficiency      0.019
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +212, benefit      100.0, efficiency      0.472
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 100):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +179, benefit      624.0, efficiency      3.486
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +241, benefit      104.0, efficiency      0.432
  * Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889 (+30 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +242, benefit        4.0, efficiency      0.017
    Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +242, benefit      100.0, efficiency      0.413
    Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 70):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +143, benefit      520.0, efficiency      3.636
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +271, benefit      104.0, efficiency      0.384
  * Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +272, benefit        4.0, efficiency      0.015
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +272, benefit      100.0, efficiency      0.368
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 39):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size  +107, benefit      416.0, efficiency      3.888
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +302, benefit      104.0, efficiency      0.344
  * Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889 (+31 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +303, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +303, benefit      100.0, efficiency      0.330
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 1: speed optimization selection (cost limit 8):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +181, benefit       19.0, efficiency      0.105
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +71, benefit      312.0, efficiency      4.394
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +333, benefit      104.0, efficiency      0.312
  ! Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:488:20                size   +36, benefit      104.0, efficiency      2.889
  ! Inline function call at OreLocator.mnd:520:28                size  +334, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +334, benefit      100.0, efficiency      0.299
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 43):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +63, benefit      312.0, efficiency      4.952
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +310, benefit      104.0, efficiency      0.335
  * Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250 (+28 instructions)
    Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
    Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:520:28                size  +311, benefit        4.0, efficiency      0.013
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +311, benefit      100.0, efficiency      0.322
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 2: speed optimization selection (cost limit 15):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:520:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Pass 3: speed optimization selection (cost limit 15):
  ! Unroll iteration loop at OreLocator.mnd:609:5                size  +177, benefit       19.0, efficiency      0.107
  ! Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:383:1 size   +96, benefit      143.0, efficiency      1.490
  ! Inline function 'createBlockMaskRow' defined at OreLocator.mnd:471:1 size   +31, benefit      208.0, efficiency      6.710
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:506:1 size  +338, benefit      104.0, efficiency      0.308
  ! Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:488:20                size   +32, benefit      104.0, efficiency      3.250
  ! Inline function call at OreLocator.mnd:520:28                size  +339, benefit        4.0, efficiency      0.012
  ! Inline function call at OreLocator.mnd:604:8                 size   +97, benefit        5.5, efficiency      0.057
  ! Inline function call at OreLocator.mnd:615:30                size  +339, benefit      100.0, efficiency      0.295
  ! Inline function call at OreLocator.mnd:632:12                size   +97, benefit      137.5, efficiency      1.418

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-68 instructions):
 
   133 jump *label38 equal *tmp65 false
   134 set *tmp37 false
   135 jump *label28 always
-    * set *tmp66 null
   136 jump *label39 always
   137 label *label38
-    * set *tmp66 null
   138 label *label39
   139 op sub *tmp67 :locateOreAway:x .coreX
   140 op abs *tmp68 *tmp67
 
   156 label *label42
   157 set *tmp78 null
   158 label *label43
-    * set *tmp76 *tmp78
   159 jump *label41 always
   160 label *label40
-    * set *tmp76 null
   161 label *label41
   162 op greaterThanEq *tmp79 :locateOreAway:coreDist 8
   163 jump *label44 equal *tmp79 false
 
   188 jump *label52 equal *tmp95 false
   189 set *tmp83 true
   190 jump *label48 always
-    * set *tmp96 null
   191 jump *label53 always
   192 label *label52
-    * set *tmp96 null
   193 label *label53
   194 label *label50
   195 op add :visited:i :visited:i 1
 
   218 label *label46
   219 set *tmp82 null
   220 label *label47
-    * set *tmp80 *tmp82
   221 jump *label45 always
   222 label *label44
-    * set *tmp80 null
   223 label *label45
   224 label *label30
   225 jump *label29 always
 
   235 op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
   236 set :findDrillLocationLocal*retval *tmp103
   237 jump *label19 always
-    * set *tmp102 null
   238 jump *label57 always
   239 label *label56
-    * set *tmp102 null
   240 label *label57
   241 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   242 jump *label58 equal *tmp104 false
   243 set *tmp106 .mapSpots
   244 op add .mapSpots .mapSpots 1
-    * set *tmp105 *tmp106
   245 jump *label59 always
   246 label *label58
-    * set *tmp105 null
   247 label *label59
   248 set :moveTo.3:x :findDrillLocationLocal:oreX
   249 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   296 op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 8
   297 jump *label69 equal *tmp121 false
   298 jump *label67 always
-    * set *tmp122 null
   299 jump *label70 always
   300 label *label69
-    * set *tmp122 null
   301 label *label70
   302 op greaterThan *tmp123 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   303 jump *label71 equal *tmp123 false
 
   307 op lessThan *tmp125 :findDrillLocationLocal:limit 1000
   308 jump *label73 equal *tmp125 false
   309 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp126 :findDrillLocationLocal:score
   310 jump *label74 always
   311 label *label73
-    * set *tmp126 null
   312 label *label74
   313 op greaterThanEq *tmp127 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   314 jump *label75 equal *tmp127 false
 
   329 op add .count .count 1
   330 set *tmp136 .count
   331 write :saveLocation:y bank1 *tmp136
-    * set *tmp138 .locations
   332 op add .locations .locations 1
   333 label *label77
   334 ucontrol unbind
 
   339 label *label75
   340 set *tmp128 null
   341 label *label76
-    * set *tmp124 *tmp128
   342 jump *label72 always
   343 label *label71
-    * set *tmp124 null
   344 label *label72
   345 op greaterThan *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:best
   346 jump *label78 equal *tmp139 false
   347 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   348 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   349 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp140 :findDrillLocationLocal:best
   350 jump *label79 always
   351 label *label78
-    * set *tmp140 null
   352 label *label79
   353 op lessThanEq *tmp141 :findDrillLocationLocal:score :findDrillLocationLocal:last
   354 jump *label80 equal *tmp141 false
   355 jump *label67 always
-    * set *tmp142 null
   356 jump *label81 always
   357 label *label80
-    * set *tmp142 null
   358 label *label81
   359 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   360 op mul *tmp143 :findDrillLocationLocal:diffX 1.1
 
   393 op add .count .count 1
   394 set *tmp160 .count
   395 write :saveLocation.1:y bank1 *tmp160
-    * set *tmp162 .locations
   396 op add .locations .locations 1
   397 label *label86
-    * set *tmp152 null
   398 jump *label85 always
   399 label *label84
-    * set *tmp152 null
   400 label *label85
   401 label *label26
   402 jump *label25 always
 
   414 jump *label88 equal *tmp167 false
   415 set :shiftMask*retval 0
   416 jump *label87 always
-    * set *tmp168 null
   417 jump *label89 always
   418 label *label88
-    * set *tmp168 null
   419 label *label89
   420 op mul *tmp169 7 :shiftMask:shiftY
   421 op add *tmp170 :shiftMask:shiftX *tmp169
 
   427 op and *tmp174 :shiftMask:mask :shiftMask:clearMask
   428 op shl *tmp175 *tmp174 :shiftMask:shift
   429 set :shiftMask:mask *tmp175
-    * set *tmp172 :shiftMask:mask
   430 jump *label91 always
   431 label *label90
   432 op sub *tmp176 0 :shiftMask:shift
   433 op shr :shiftMask:mask :shiftMask:mask *tmp176
-    * set *tmp172 :shiftMask:mask
   434 label *label91
   435 op notEqual *tmp177 :shiftMask:shiftX 0
   436 jump *label92 equal *tmp177 false
 
   440 op greaterThan *tmp181 :shiftMask:shiftX 0
   441 jump *label94 equal *tmp181 false
   442 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp182 :shiftMask:keep
   443 jump *label95 always
   444 label *label94
-    * set *tmp182 null
   445 label *label95
   446 op shl *tmp183 :shiftMask:keep 7
   447 op or :shiftMask:keep :shiftMask:keep *tmp183
 
   450 op shl *tmp185 :shiftMask:keep 21
   451 op or :shiftMask:keep :shiftMask:keep *tmp185
   452 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp178 :shiftMask:mask
   453 jump *label93 always
   454 label *label92
-    * set *tmp178 null
   455 label *label93
   456 set :shiftMask*retval :shiftMask:mask
   457 jump *label87 always
 
   494 op greaterThanEq *tmp207 :createMatrixOfSize:i :createMatrixOfSize:height
   495 jump *label103 equal *tmp207 false
   496 jump *label102 always
-    * set *tmp208 null
   497 jump *label104 always
   498 label *label103
-    * set *tmp208 null
   499 label *label104
   500 op shl *tmp209 :createMatrixOfSize:matrix 7
   501 op or *tmp210 *tmp209 :createMatrixOfSize:row
 
   557 op add *tmp226 *tmp225 :findPossiblePlacement:x
   558 set :findPossiblePlacement*retval *tmp226
   559 jump *label106 always
-    * set *tmp223 null
   560 jump *label114 always
   561 label *label113
-    * set *tmp223 null
   562 label *label114
   563 op sub *tmp227 3 :findPossiblePlacement:width
   564 op greaterThan *tmp228 :findPossiblePlacement:x *tmp227
   565 jump *label115 equal *tmp228 false
   566 jump *label112 always
-    * set *tmp229 null
   567 jump *label116 always
   568 label *label115
-    * set *tmp229 null
   569 label *label116
   570 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   571 label *label111
 
   576 op greaterThan *tmp231 :findPossiblePlacement:y *tmp230
   577 jump *label117 equal *tmp231 false
   578 jump *label109 always
-    * set *tmp232 null
   579 jump *label118 always
   580 label *label117
-    * set *tmp232 null
   581 label *label118
   582 label *label108
   583 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   607 jump *label123 equal *tmp236 false
   608 set :tryPlaceGenerator*retval false
   609 jump *label119 always
-    * set *tmp237 null
   610 jump *label124 always
   611 label *label123
-    * set *tmp237 null
   612 label *label124
   613 op add *tmp238 :tryPlaceGenerator:centerX 0.5
   614 op add *tmp239 *tmp238 :tryPlaceGenerator:c
 
   624 set .generatorY *tmp245
   625 op shl *tmp246 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   626 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp246
-    * set *tmp235 :tryPlaceGenerator:terrainMask
   627 jump *label122 always
   628 label *label121
   629 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   641 jump *label126 equal *tmp248 false
   642 set :tryPlaceGenerator*retval false
   643 jump *label119 always
-    * set *tmp249 null
   644 jump *label127 always
   645 label *label126
-    * set *tmp249 null
   646 label *label127
   647 op add *tmp250 :tryPlaceGenerator:centerX 0.5
   648 op add *tmp251 *tmp250 :tryPlaceGenerator:c
 
   658 set .generatorY *tmp257
   659 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   660 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
-    * set *tmp235 :tryPlaceGenerator:terrainMask
   661 label *label122
   662 set :createFixedMatrix:row0 0b1100011
   663 set :createFixedMatrix:row1 0b1000001
 
   697 jump *label130 equal *tmp274 false
   698 set :tryPlaceGenerator*retval false
   699 jump *label119 always
-    * set *tmp275 null
   700 jump *label131 always
   701 label *label130
-    * set *tmp275 null
   702 label *label131
   703 op add *tmp276 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   704 set .panelX *tmp276
 
   721 jump *label133 equal *tmp280 false
   722 set :tryPlaceGenerator*retval false
   723 jump *label119 always
-    * set *tmp281 null
   724 jump *label134 always
   725 label *label133
-    * set *tmp281 null
   726 label *label134
   727 op add *tmp282 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   728 set .batteryX *tmp282
 
   765 jump *label138 equal *tmp306 false
   766 set :tryPlaceGenerator*retval false
   767 jump *label119 always
-    * set *tmp307 null
   768 jump *label139 always
   769 label *label138
-    * set *tmp307 null
   770 label *label139
   771 op add *tmp308 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   772 set .node2X *tmp308
 
   774 set .node2Y *tmp309
   775 op shl *tmp310 1 :tryPlaceGenerator:shift
   776 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp310
-    * set *tmp304 :tryPlaceGenerator:terrainMask
   777 jump *label136 always
   778 label *label135
-    * set *tmp304 null
   779 label *label136
   780 set :tryPlaceGenerator*retval true
   781 jump *label119 always
 
   990 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
   991 op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   992 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp385
-    * set *tmp379 :layoutThoriumDrillAtLocation:cornersMask
   993 jump *label165 always
   994 label *label164
-    * set *tmp379 null
   995 label *label165
   996 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   997 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
  1014 set .containerY *tmp392
  1015 op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
  1016 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
-    * set *tmp388 :layoutThoriumDrillAtLocation:terrainMask
  1017 jump *label168 always
  1018 label *label167
-    * set *tmp388 null
  1019 label *label168
  1020 set :createFixedMatrix.4:row0 0b1100011
  1021 set :createFixedMatrix.4:row1 0b1000001
 
  1056 jump *label171 equal *tmp410 false
  1057 set :layoutThoriumDrillAtLocation*retval false
  1058 jump *label154 always
-    * set *tmp411 null
  1059 jump *label172 always
  1060 label *label171
-    * set *tmp411 null
  1061 label *label172
  1062 op add *tmp412 .drillX :layoutThoriumDrillAtLocation:c
  1063 set .node1X *tmp412
 
  1099 jump *label176 equal *tmp427 false
  1100 set :layoutThoriumDrillAtLocation*retval true
  1101 jump *label154 always
-    * set *tmp428 null
  1102 jump *label177 always
  1103 label *label176
-    * set *tmp428 null
  1104 label *label177
  1105 set :layoutThoriumDrillAtLocation:sx 3
  1106 set :layoutThoriumDrillAtLocation:sy 3
 
  1156 jump *label188 equal *tmp437 false
  1157 set :layoutThoriumDrillAtLocation*retval true
  1158 jump *label154 always
-    * set *tmp438 null
  1159 jump *label189 always
  1160 label *label188
-    * set *tmp438 null
  1161 label *label189
  1162 label *label179
  1163 multijump *tmp429 0 0 (m:marker0)
 
  1207 jump *label194 equal *tmp439 false
  1208 set :layoutThoriumDrill*retval false
  1209 jump *label192 always
-    * set *tmp440 null
  1210 jump *label195 always
  1211 label *label194
-    * set *tmp440 null
  1212 label *label195
  1213 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)
  1214 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label196) (h:*label196)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   151 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
   152 jump *label42 equal *tmp77 false
   153 jump *label30 always
-    * set *tmp78 null
   154 jump *label43 always
   155 label *label42
-    * set *tmp78 null
   156 label *label43
   157 jump *label41 always
   158 label *label40
 
   211 label *label54
   212 set *tmp98 null
   213 label *label55
-    * set *tmp82 *tmp98
   214 jump *label47 always
   215 label *label46
-    * set *tmp82 null
   216 label *label47
   217 jump *label45 always
   218 label *label44
 
   236 label *label57
   237 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   238 jump *label58 equal *tmp104 false
-    * set *tmp106 .mapSpots
   239 op add .mapSpots .mapSpots 1
   240 jump *label59 always
   241 label *label58
 
   329 ucontrol unbind
   330 set :findDrillLocationLocal*retval true
   331 jump *label19 always
-    * set *tmp128 null
   332 jump *label76 always
   333 label *label75
-    * set *tmp128 null
   334 label *label76
   335 jump *label72 always
   336 label *label71

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   206 printflush message1
   207 set *tmp37 true
   208 jump *label28 always
-    * set *tmp98 null
   209 jump *label55 always
   210 label *label54
-    * set *tmp98 null
   211 label *label55
   212 jump *label47 always
   213 label *label46

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-108 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp21 .locations
-    * set .locationsStart *tmp21
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    50 label *label21
    51 label *label20
    52 op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp31 *tmp30 2
-    * set .mapTotal *tmp31
+   53 op pow .mapTotal *tmp30 2
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
 
    59 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    60 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    61 op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp33 *tmp32 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp33
-    * op min *tmp34 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp34
+   62 op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuationRate
+   63 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    64 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp36 *tmp35 2
-    * set .mapTotal *tmp36
+   65 op pow .mapTotal *tmp35 2
    66 set :locateOreAway:ore :findDrillLocationLocal:item
    67 set :locateOreAway:x :findDrillLocationLocal:oreX
    68 set :locateOreAway:y :findDrillLocationLocal:oreY
    69 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp38 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp38
+   70 op mul :locateOreAway:distance 3.8197185279121366 .angle
    71 set :locateOreAway:lastX -1
    72 set :locateOreAway:lastY -1
-    * op max *tmp39 .angle @pi
-    * set .angle *tmp39
-    * op mul *tmp40 .angle .angle
-    * set .mapProgress *tmp40
+   73 op max .angle .angle @pi
+   74 op mul .mapProgress .angle .angle
    75 label *label29
    76 op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
    77 jump *label31 equal *tmp41 false
-    * op div *tmp42 .angle @degToRad
-    * set :locateOreAway:a *tmp42
+   78 op div :locateOreAway:a .angle @degToRad
    79 op sin *tmp43 :locateOreAway:a
    80 op mul *tmp44 *tmp43 :locateOreAway:distance
    81 op add *tmp45 .coreX *tmp44
 
    84 set :limit:low 5
    85 set :limit:high *tmp46
    86 op max *tmp48 :limit:value :limit:low
-    * op min *tmp49 *tmp48 :limit:high
-    * set *tmp47 *tmp49
+   87 op min *tmp47 *tmp48 :limit:high
    88 label *label32
    89 set :locateOreAway:lx *tmp47
    90 op cos *tmp50 :locateOreAway:a
 
    95 set :limit.1:low 5
    96 set :limit.1:high *tmp53
    97 op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp56 *tmp55 :limit.1:high
-    * set *tmp54 *tmp56
+   98 op min *tmp54 *tmp55 :limit.1:high
    99 label *label33
   100 set :locateOreAway:ly *tmp54
   101 set :moveTo.2:x :locateOreAway:lx
 
   113 label *label34
   114 op div *tmp60 3.8197185279121366 :locateOreAway:distance
   115 op add .angle .angle *tmp60
-    * op mul *tmp61 .angle .angle
-    * set .mapProgress *tmp61
-    * op mul *tmp62 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp62
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 *tmp64
+  116 op mul .mapProgress .angle .angle
+  117 op mul :locateOreAway:distance 3.8197185279121366 .angle
+  118 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
   119 op equal *tmp65 *tmp63 false
   120 jump *label38 equal *tmp65 false
   121 set *tmp37 false
 
   127 op abs *tmp68 *tmp67
   128 op sub *tmp69 :locateOreAway:y .coreY
   129 op abs *tmp70 *tmp69
-    * op max *tmp71 *tmp68 *tmp70
-    * set :locateOreAway:coreDist *tmp71
+  130 op max :locateOreAway:coreDist *tmp68 *tmp70
   131 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   132 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp74 *tmp72 *tmp73
-    * set :locateOreAway:unitDist *tmp74
+  133 op len :locateOreAway:unitDist *tmp72 *tmp73
   134 op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
   135 jump *label40 equal *tmp75 false
   136 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
 
   154 set :visited:i .locationsStart
   155 label *label49
   156 jump *label51 greaterThanEq :visited:i *tmp84
-    * op mul *tmp85 4 :visited:i
-    * set :visited:index *tmp85
-    * op add *tmp86 :visited:index 2
-    * set *tmp87 *tmp86
-    * read *tmp88 bank1 *tmp87
-    * set :visited:lx *tmp88
-    * op add *tmp89 :visited:index 3
-    * set *tmp90 *tmp89
-    * read *tmp91 bank1 *tmp90
-    * set :visited:ly *tmp91
+  157 op mul :visited:index 4 :visited:i
+  158 op add *tmp87 :visited:index 2
+  159 read :visited:lx bank1 *tmp87
+  160 op add *tmp90 :visited:index 3
+  161 read :visited:ly bank1 *tmp90
   162 op sub *tmp92 :visited:x :visited:lx
   163 op sub *tmp93 :visited:y :visited:ly
   164 op len *tmp94 *tmp92 *tmp93
 
   181 jump *label54 equal *tmp97 false
   182 op div *tmp99 7.639437055824273 :locateOreAway:distance
   183 op add .angle .angle *tmp99
-    * op mul *tmp100 .angle .angle
-    * set .mapProgress *tmp100
+  184 op mul .mapProgress .angle .angle
   185 printflush message1
   186 set *tmp37 true
   187 jump *label28 always
 
   205 set :findDrillLocationLocal:oreY :locateOreAway:y
   206 op equal *tmp101 *tmp37 false
   207 jump *label56 equal *tmp101 false
-    * op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp103
+  208 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   209 jump *label19 always
   210 jump *label57 always
   211 label *label56
 
   248 wait 1e-15
   249 read *tmp112 processor1 ":findBestPosition*finished"
   250 jump *label68 equal *tmp112 false
-    * read *tmp8 processor1 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp8
-    * read *tmp9 processor1 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp9
-    * read *tmp113 processor1 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp113
-    * op add *tmp114 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:newX *tmp114
-    * op add *tmp115 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:newY *tmp115
+  251 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
+  252 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
+  253 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
+  254 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  255 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   256 op sub *tmp116 :findDrillLocationLocal:newX .coreX
   257 op abs *tmp117 *tmp116
   258 op sub *tmp118 :findDrillLocationLocal:newY .coreY
   259 op abs *tmp119 *tmp118
-    * op max *tmp120 *tmp117 *tmp119
-    * set :findDrillLocationLocal:coreDist *tmp120
+  260 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   261 op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 8
   262 jump *label69 equal *tmp121 false
   263 jump *label67 always
 
   286 sensor *tmp131 :saveLocation:item @id
   287 write *tmp131 bank1 *tmp129
   288 op add .count .count 1
-    * set *tmp132 .count
-    * write :saveLocation:value bank1 *tmp132
+  289 write :saveLocation:value bank1 .count
   290 op add .count .count 1
-    * set *tmp134 .count
-    * write :saveLocation:x bank1 *tmp134
+  291 write :saveLocation:x bank1 .count
   292 op add .count .count 1
-    * set *tmp136 .count
-    * write :saveLocation:y bank1 *tmp136
+  293 write :saveLocation:y bank1 .count
   294 op add .locations .locations 1
   295 label *label77
   296 ucontrol unbind
 
   317 label *label80
   318 label *label81
   319 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp143 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp143
+  320 op mul :round:x :findDrillLocationLocal:diffX 1.1
   321 op add *tmp145 :round:x 0.5
-    * op floor *tmp146 *tmp145
-    * set *tmp144 *tmp146
+  322 op floor *tmp144 *tmp145
   323 label *label82
   324 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp144
-    * op mul *tmp147 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp147
+  325 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   326 op add *tmp149 :round.1:x 0.5
-    * op floor *tmp150 *tmp149
-    * set *tmp148 *tmp150
+  327 op floor *tmp148 *tmp149
   328 label *label83
   329 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
   330 label *label66
 
   341 sensor *tmp155 :saveLocation.1:item @id
   342 write *tmp155 bank1 *tmp153
   343 op add .count .count 1
-    * set *tmp156 .count
-    * write :saveLocation.1:value bank1 *tmp156
+  344 write :saveLocation.1:value bank1 .count
   345 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:x bank1 *tmp158
+  346 write :saveLocation.1:x bank1 .count
   347 op add .count .count 1
-    * set *tmp160 .count
-    * write :saveLocation.1:y bank1 *tmp160
+  348 write :saveLocation.1:y bank1 .count
   349 op add .locations .locations 1
   350 label *label86
   351 jump *label85 always
 
   371 label *label88
   372 label *label89
   373 op mul *tmp169 7 :shiftMask:shiftY
-    * op add *tmp170 :shiftMask:shiftX *tmp169
-    * set :shiftMask:shift *tmp170
+  374 op add :shiftMask:shift :shiftMask:shiftX *tmp169
   375 op greaterThan *tmp171 :shiftMask:shift 0
   376 jump *label90 equal *tmp171 false
-    * op shr *tmp173 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp173
+  377 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   378 op and *tmp174 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp175 *tmp174 :shiftMask:shift
-    * set :shiftMask:mask *tmp175
+  379 op shl :shiftMask:mask *tmp174 :shiftMask:shift
   380 jump *label91 always
   381 label *label90
   382 op sub *tmp176 0 :shiftMask:shift
 
   385 op notEqual *tmp177 :shiftMask:shiftX 0
   386 jump *label92 equal *tmp177 false
   387 op abs *tmp179 :shiftMask:shiftX
-    * op shr *tmp180 0b1111111 *tmp179
-    * set :shiftMask:keep *tmp180
+  388 op shr :shiftMask:keep 0b1111111 *tmp179
   389 op greaterThan *tmp181 :shiftMask:shiftX 0
   390 jump *label94 equal *tmp181 false
   391 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   414 op idiv *tmp188 *tmp187 2
   415 op sub *tmp189 :excludeArea:maskX :excludeArea:areaX
   416 op abs *tmp190 *tmp189
-    * op sub *tmp191 *tmp188 *tmp190
-    * set :excludeArea:overlapX *tmp191
+  417 op sub :excludeArea:overlapX *tmp188 *tmp190
   418 op add *tmp192 :excludeArea:areaHeight 7
   419 op add *tmp193 *tmp192 1
   420 op idiv *tmp194 *tmp193 2
   421 op sub *tmp195 :excludeArea:maskY :excludeArea:areaY
   422 op abs *tmp196 *tmp195
-    * op sub *tmp197 *tmp194 *tmp196
-    * set :excludeArea:overlapY *tmp197
+  423 op sub :excludeArea:overlapY *tmp194 *tmp196
   424 op greaterThan *tmp198 :excludeArea:overlapX 0
   425 op greaterThan *tmp199 :excludeArea:overlapY 0
   426 op land *tmp200 *tmp198 *tmp199
   427 jump *label97 equal *tmp200 false
-    * op min *tmp202 7 :excludeArea:overlapX
-    * set :excludeArea:blockSizeX *tmp202
-    * op min *tmp203 7 :excludeArea:overlapY
-    * set :excludeArea:blockSizeY *tmp203
+  428 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
+  429 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   430 set :createMatrixOfSize:width :excludeArea:blockSizeX
   431 set :createMatrixOfSize:height :excludeArea:blockSizeY
   432 op shl *tmp205 1 :createMatrixOfSize:width
-    * op sub *tmp206 *tmp205 1
-    * set :createMatrixOfSize:row *tmp206
+  433 op sub :createMatrixOfSize:row *tmp205 1
   434 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   435 set :createMatrixOfSize:i 1
   436 label *label100
 
   442 label *label103
   443 label *label104
   444 op shl *tmp209 :createMatrixOfSize:matrix 7
-    * op or *tmp210 *tmp209 :createMatrixOfSize:row
-    * set :createMatrixOfSize:matrix *tmp210
+  445 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   446 label *label101
   447 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   448 jump *label100 always
 
   454 set :excludeArea:blocked *tmp204
   455 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
   456 op sub *tmp212 7 :excludeArea:blockSizeX
-    * op mul *tmp213 *tmp211 *tmp212
-    * set :excludeArea:shiftX *tmp213
+  457 op mul :excludeArea:shiftX *tmp211 *tmp212
   458 op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY
   459 op sub *tmp215 7 :excludeArea:blockSizeY
-    * op mul *tmp216 *tmp214 *tmp215
-    * set :excludeArea:shiftY *tmp216
+  460 op mul :excludeArea:shiftY *tmp214 *tmp215
   461 set :shiftMask:mask :excludeArea:blocked
   462 set :shiftMask:shiftX :excludeArea:shiftX
   463 set :shiftMask:shiftY :excludeArea:shiftY
 
   465 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   466 label *label105
   467 set :excludeArea:shifted :shiftMask*retval
-    * op or *tmp217 :excludeArea:mask :excludeArea:shifted
-    * set :excludeArea*retval *tmp217
+  468 op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
   469 jump *label96 always
   470 set *tmp201 null
   471 jump *label98 always
 
   484 jump *label109 greaterThan :findPossiblePlacement:y 3
   485 op add *tmp218 :findPossiblePlacement:y 3
   486 op mul *tmp219 7 *tmp218
-    * op shl *tmp220 :findPossiblePlacement:placementMask *tmp219
-    * set :findPossiblePlacement:mask *tmp220
+  487 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp219
   488 set :findPossiblePlacement:x -3
   489 label *label110
   490 jump *label112 greaterThan :findPossiblePlacement:x 3
 
   493 jump *label113 equal *tmp222 false
   494 op mul *tmp224 :findPossiblePlacement:y 7
   495 op add *tmp225 24 *tmp224
-    * op add *tmp226 *tmp225 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp226
+  496 op add :findPossiblePlacement*retval *tmp225 :findPossiblePlacement:x
   497 jump *label106 always
   498 jump *label114 always
   499 label *label113
 
   537 label *label120
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp233 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp233
+  540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   541 op greaterThanEq *tmp234 :tryPlaceGenerator:shift 0
   542 jump *label121 equal *tmp234 false
   543 op lessThan *tmp236 :tryPlaceGenerator:shift 0
 
   548 label *label123
   549 label *label124
   550 op add *tmp238 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp239 *tmp238 :tryPlaceGenerator:c
-    * set .water2X *tmp239
+  551 op add .water2X *tmp238 :tryPlaceGenerator:c
   552 op add *tmp240 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp241 *tmp240 :tryPlaceGenerator:r
-    * set .water2Y *tmp241
+  553 op add .water2Y *tmp240 :tryPlaceGenerator:r
   554 op add *tmp242 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp243 *tmp242 :tryPlaceGenerator:c
-    * set .generatorX *tmp243
+  555 op add .generatorX *tmp242 :tryPlaceGenerator:c
   556 op add *tmp244 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp245 *tmp244 :tryPlaceGenerator:r
-    * set .generatorY *tmp245
+  557 op add .generatorY *tmp244 :tryPlaceGenerator:r
   558 op shl *tmp246 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   559 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp246
   560 jump *label122 always
 
   568 label *label125
   569 set :tryPlaceGenerator:c :findPossiblePlacement:x
   570 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp247 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp247
+  571 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   572 op lessThan *tmp248 :tryPlaceGenerator:shift 0
   573 jump *label126 equal *tmp248 false
   574 set :tryPlaceGenerator*retval false
 
   577 label *label126
   578 label *label127
   579 op add *tmp250 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp251 *tmp250 :tryPlaceGenerator:c
-    * set .water2X *tmp251
+  580 op add .water2X *tmp250 :tryPlaceGenerator:c
   581 op add *tmp252 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp253 *tmp252 :tryPlaceGenerator:r
-    * set .water2Y *tmp253
+  582 op add .water2Y *tmp252 :tryPlaceGenerator:r
   583 op add *tmp254 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp255 *tmp254 :tryPlaceGenerator:c
-    * set .generatorX *tmp255
+  584 op add .generatorX *tmp254 :tryPlaceGenerator:c
   585 op add *tmp256 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp257 *tmp256 :tryPlaceGenerator:r
-    * set .generatorY *tmp257
+  586 op add .generatorY *tmp256 :tryPlaceGenerator:r
   587 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   588 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
   589 label *label122
 
   606 op shl *tmp269 :createFixedMatrix:row5 35
   607 op or *tmp270 *tmp268 *tmp269
   608 op shl *tmp271 :createFixedMatrix:row6 42
-    * op or *tmp272 *tmp270 *tmp271
-    * set *tmp259 *tmp272
+  609 op or *tmp259 *tmp270 *tmp271
   610 label *label128
   611 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp259
   612 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   618 label *label129
   619 set :tryPlaceGenerator:c :findPossiblePlacement:x
   620 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp273 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp273
+  621 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   622 op lessThan *tmp274 :tryPlaceGenerator:shift 0
   623 jump *label130 equal *tmp274 false
   624 set :tryPlaceGenerator*retval false
 
   626 jump *label131 always
   627 label *label130
   628 label *label131
-    * op add *tmp276 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp276
-    * op add *tmp277 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp277
+  629 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  630 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   631 op shl *tmp278 1 :tryPlaceGenerator:shift
   632 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp278
   633 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   639 label *label132
   640 set :tryPlaceGenerator:c :findPossiblePlacement:x
   641 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp279 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp279
+  642 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   643 op lessThan *tmp280 :tryPlaceGenerator:shift 0
   644 jump *label133 equal *tmp280 false
   645 set :tryPlaceGenerator*retval false
 
   647 jump *label134 always
   648 label *label133
   649 label *label134
-    * op add *tmp282 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp282
-    * op add *tmp283 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp283
+  650 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  651 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   652 op shl *tmp284 1 :tryPlaceGenerator:shift
   653 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp284
   654 op sub *tmp285 .water2X .node1X
 
   680 label *label137
   681 set :tryPlaceGenerator:c :findPossiblePlacement:x
   682 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp305 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp305
+  683 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   684 op lessThan *tmp306 :tryPlaceGenerator:shift 0
   685 jump *label138 equal *tmp306 false
   686 set :tryPlaceGenerator*retval false
 
   688 jump *label139 always
   689 label *label138
   690 label *label139
-    * op add *tmp308 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .node2X *tmp308
-    * op add *tmp309 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .node2Y *tmp309
+  691 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  692 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   693 op shl *tmp310 1 :tryPlaceGenerator:shift
   694 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp310
   695 jump *label136 always
 
   708 jump *label143 lessThan :createBlockMaskRow:c -4
   709 op shl *tmp311 :createBlockMaskRow:result 1
   710 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y *tmp314 *tmp313 *tmp315
-    * op or *tmp316 *tmp311 *tmp313
-    * set :createBlockMaskRow:result *tmp316
+  711 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  712 op or :createBlockMaskRow:result *tmp311 *tmp313
   713 label *label142
   714 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   715 jump *label141 always
 
   735 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   736 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
   737 label *label146
-    * set *tmp322 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp322
+  738 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   739 op add *tmp323 :createAdjacentMask:y 3
   740 set :createBlockMaskRow:x :createAdjacentMask:x
   741 set :createBlockMaskRow:y *tmp323
   742 setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
   743 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
   744 label *label147
-    * set *tmp324 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp324
+  745 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   746 set :createAdjacentMask:r 2
   747 label *label148
   748 jump *label150 lessThan :createAdjacentMask:r -4
 
   752 setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
   753 call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
   754 label *label151
-    * set *tmp326 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp326
+  755 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   756 op shl *tmp327 :createAdjacentMask:row1 1
   757 op or *tmp328 :createAdjacentMask:row2 *tmp327
   758 op shr *tmp329 :createAdjacentMask:row1 1
   759 op or *tmp330 *tmp328 *tmp329
-    * op or *tmp331 *tmp330 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp331
+  760 op or :createAdjacentMask:mask *tmp330 :createAdjacentMask:row0
   761 op shl *tmp332 :createAdjacentMask:result 7
   762 op and *tmp333 :createAdjacentMask:mask 0xFE
-    * op or *tmp334 *tmp332 *tmp333
-    * set :createAdjacentMask:result *tmp334
+  763 op or :createAdjacentMask:result *tmp332 *tmp333
   764 set :createAdjacentMask:row2 :createAdjacentMask:row1
   765 set :createAdjacentMask:row1 :createAdjacentMask:row0
   766 label *label149
   767 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   768 jump *label148 always
   769 label *label150
-    * op shr *tmp335 :createAdjacentMask:result 1
-    * set *tmp320 *tmp335
+  770 op shr *tmp320 :createAdjacentMask:result 1
   771 label *label145
   772 set :createCombinedMask:adjacentMask *tmp320
   773 label *label152
   774 wait 1e-15
   775 read *tmp336 processor1 ":createTerrainMask*finished"
   776 jump *label152 equal *tmp336 false
-    * read *tmp337 processor1 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp337
-    * op or *tmp338 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :excludeArea:mask *tmp338
+  777 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
+  778 op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   779 set :excludeArea:maskX :createCombinedMask:x
   780 set :excludeArea:maskY :createCombinedMask:y
   781 set :excludeArea:areaX .coreX
 
   818 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   819 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   820 label *label159
-    * set *tmp342 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp342
+  821 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   822 set :createFixedMatrix.1:row0 0b0000000
   823 set :createFixedMatrix.1:row1 0b0000000
   824 set :createFixedMatrix.1:row2 0b0011100
 
   838 op shl *tmp353 :createFixedMatrix.1:row5 35
   839 op or *tmp354 *tmp352 *tmp353
   840 op shl *tmp355 :createFixedMatrix.1:row6 42
-    * op or *tmp356 *tmp354 *tmp355
-    * set *tmp343 *tmp356
+  841 op or *tmp343 *tmp354 *tmp355
   842 label *label160
-    * op or *tmp357 :layoutThoriumDrillAtLocation:plainTerrainMask *tmp343
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp357
+  843 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp343
   844 set :createFixedMatrix.2:row0 0b1000001
   845 set :createFixedMatrix.2:row1 0b0000000
   846 set :createFixedMatrix.2:row2 0b0011100
 
   860 op shl *tmp368 :createFixedMatrix.2:row5 35
   861 op or *tmp369 *tmp367 *tmp368
   862 op shl *tmp370 :createFixedMatrix.2:row6 42
-    * op or *tmp371 *tmp369 *tmp370
-    * set *tmp358 *tmp371
+  863 op or *tmp358 *tmp369 *tmp370
   864 label *label161
-    * op or *tmp372 :layoutThoriumDrillAtLocation:terrainMask *tmp358
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp372
+  865 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp358
   866 set :createFixedMatrix.3:row0 0b11
   867 set :createFixedMatrix.3:row1 0b11
   868 op shl *tmp374 :createFixedMatrix.3:row0 0
   869 op shl *tmp375 :createFixedMatrix.3:row1 7
-    * op or *tmp376 *tmp374 *tmp375
-    * set *tmp373 *tmp376
+  870 op or *tmp373 *tmp374 *tmp375
   871 label *label162
   872 set :layoutThoriumDrillAtLocation:mask2x2 *tmp373
   873 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   879 label *label163
   880 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   881 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp377 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp377
+  882 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   883 op greaterThanEq *tmp378 :layoutThoriumDrillAtLocation:shift 0
   884 jump *label164 equal *tmp378 false
   885 op add *tmp380 .drillX 0.5
-    * op add *tmp381 *tmp380 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp381
+  886 op add .water1X *tmp380 :layoutThoriumDrillAtLocation:c
   887 op add *tmp382 .drillY 0.5
-    * op add *tmp383 *tmp382 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp383
+  888 op add .water1Y *tmp382 :layoutThoriumDrillAtLocation:r
   889 op shl *tmp384 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   890 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
   891 op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   902 label *label166
   903 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   904 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp386 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp386
+  905 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   906 op greaterThanEq *tmp387 :layoutThoriumDrillAtLocation:shift 0
   907 jump *label167 equal *tmp387 false
   908 op add *tmp389 .drillX 0.5
-    * op add *tmp390 *tmp389 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp390
+  909 op add .containerX *tmp389 :layoutThoriumDrillAtLocation:c
   910 op add *tmp391 .drillY 0.5
-    * op add *tmp392 *tmp391 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp392
+  911 op add .containerY *tmp391 :layoutThoriumDrillAtLocation:r
   912 op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   913 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
   914 jump *label168 always
 
   933 op shl *tmp404 :createFixedMatrix.4:row5 35
   934 op or *tmp405 *tmp403 *tmp404
   935 op shl *tmp406 :createFixedMatrix.4:row6 42
-    * op or *tmp407 *tmp405 *tmp406
-    * set *tmp394 *tmp407
+  936 op or *tmp394 *tmp405 *tmp406
   937 label *label169
-    * op or *tmp408 :layoutThoriumDrillAtLocation:terrainMask *tmp394
-    * set :layoutThoriumDrillAtLocation:nodeMask *tmp408
+  938 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp394
   939 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   940 set :findPossiblePlacement:placementMask 1
   941 set :findPossiblePlacement:width 1
 
   945 label *label170
   946 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   947 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp409 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp409
+  948 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   949 op lessThan *tmp410 :layoutThoriumDrillAtLocation:shift 0
   950 jump *label171 equal *tmp410 false
   951 set :layoutThoriumDrillAtLocation*retval false
 
   953 jump *label172 always
   954 label *label171
   955 label *label172
-    * op add *tmp412 .drillX :layoutThoriumDrillAtLocation:c
-    * set .node1X *tmp412
-    * op add *tmp413 .drillY :layoutThoriumDrillAtLocation:r
-    * set .node1Y *tmp413
+  956 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
+  957 op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
   958 op shl *tmp414 1 :layoutThoriumDrillAtLocation:shift
   959 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
   960 set :createFixedMatrix.5:row0 0b1111
   961 set :createFixedMatrix.5:row1 0b1111
   962 op shl *tmp416 :createFixedMatrix.5:row0 0
   963 op shl *tmp417 :createFixedMatrix.5:row1 7
-    * op or *tmp418 *tmp416 *tmp417
-    * set *tmp415 *tmp418
+  964 op or *tmp415 *tmp416 *tmp417
   965 label *label173
   966 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp415
   967 set :createFixedMatrix.6:row0 0b11
 
   974 op shl *tmp423 :createFixedMatrix.6:row2 14
   975 op or *tmp424 *tmp422 *tmp423
   976 op shl *tmp425 :createFixedMatrix.6:row3 21
-    * op or *tmp426 *tmp424 *tmp425
-    * set *tmp419 *tmp426
+  977 op or *tmp419 *tmp424 *tmp425
   978 label *label174
   979 set :layoutThoriumDrillAtLocation:generatorVertical *tmp419
   980 set :tryPlaceGenerator:centerX .drillX
 
   985 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   986 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   987 label *label175
-    * set *tmp427 :tryPlaceGenerator*retval
-    * jump *label176 equal *tmp427 false
+  988 jump *label176 equal :tryPlaceGenerator*retval false
   989 set :layoutThoriumDrillAtLocation*retval true
   990 jump *label154 always
   991 jump *label177 always
 
  1010 set :layoutThoriumDrillAtLocation:sy -3
  1011 setaddr *tmp429 *label184
  1012 label *label178
-    * op sub *tmp430 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp430
-    * op sub *tmp431 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp431
+ 1013 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+ 1014 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
  1015 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
  1016 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
  1017 setaddr :createCombinedMask*retaddr *label185 (h:*label185)
  1018 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
  1019 label *label185
-    * set *tmp432 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp432
+ 1020 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
  1021 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
  1022 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
  1023 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
  1024 setaddr :shiftMask*retaddr *label186 (h:*label186)
  1025 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
  1026 label *label186
-    * set *tmp433 :shiftMask*retval
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp433
-    * op or *tmp434 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp434
+ 1027 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
+ 1028 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
  1029 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
  1030 op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy
  1031 set :tryPlaceGenerator:centerX *tmp435
 
  1036 setaddr :tryPlaceGenerator*retaddr *label187 (h:*label187)
  1037 call *label12 *invalid :tryPlaceGenerator*retval (m:*label187) (h:*label187)
  1038 label *label187
-    * set *tmp437 :tryPlaceGenerator*retval
-    * jump *label188 equal *tmp437 false
+ 1039 jump *label188 equal :tryPlaceGenerator*retval false
  1040 set :layoutThoriumDrillAtLocation*retval true
  1041 jump *label154 always
  1042 jump *label189 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label25
-    * jump *label27 equal true false
    57 set :findDrillLocationLocal:best -1
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   235 label *label60
   236 set :findDrillLocationLocal:last 0
   237 label *label65
-    * jump *label67 equal true false
   238 write @unit processor1 ":findBestPosition:unit"
   239 write :findDrillLocationLocal:oreX processor1 ":findBestPosition:x"
   240 write :findDrillLocationLocal:oreY processor1 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-38 instructions):
 
    40 set :moveTo.1:radius 6
    41 label *label22
    42 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
-    * op equal *tmp28 *tmp27 false
-    * jump *label24 equal *tmp28 false
+   43 jump *label24 notEqual *tmp27 false
    44 op sub *tmp29 :moveTo.1:radius 0.5
    45 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
    46 label *label23
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label31 equal *tmp41 false
+   74 jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   100 set :moveTo.2:radius 5
   101 label *label35
   102 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
-    * op equal *tmp58 *tmp57 false
-    * jump *label37 equal *tmp58 false
+  103 jump *label37 notEqual *tmp57 false
   104 op sub *tmp59 :moveTo.2:radius 0.5
   105 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
   106 label *label36
 
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
   114 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
-    * op equal *tmp65 *tmp63 false
-    * jump *label38 equal *tmp65 false
+  115 jump *label38 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label28 always
   118 jump *label39 always
 
   126 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   127 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
   128 op len :locateOreAway:unitDist *tmp72 *tmp73
-    * op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 equal *tmp75 false
-    * op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
-    * jump *label42 equal *tmp77 false
+  129 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
+  130 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   131 jump *label30 always
   132 jump *label43 always
   133 label *label42
 
   135 jump *label41 always
   136 label *label40
   137 label *label41
-    * op greaterThanEq *tmp79 :locateOreAway:coreDist 8
-    * jump *label44 equal *tmp79 false
-    * op lessThan *tmp81 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label46 equal *tmp81 false
+  138 jump *label44 lessThan :locateOreAway:coreDist 8
+  139 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   140 set :locateOreAway:lastX :locateOreAway:x
   141 set :locateOreAway:lastY :locateOreAway:y
   142 set :visited:x :locateOreAway:x
 
   153 op sub *tmp92 :visited:x :visited:lx
   154 op sub *tmp93 :visited:y :visited:ly
   155 op len *tmp94 *tmp92 *tmp93
-    * op lessThan *tmp95 *tmp94 7
-    * jump *label52 equal *tmp95 false
+  156 jump *label52 greaterThanEq *tmp94 7
   157 set *tmp83 true
   158 jump *label48 always
   159 jump *label53 always
 
   167 jump *label48 always
   168 set *tmp83 null
   169 label *label48
-    * op equal *tmp97 *tmp83 false
-    * jump *label54 equal *tmp97 false
+  170 jump *label54 notEqual *tmp83 false
   171 op div *tmp99 7.639437055824273 :locateOreAway:distance
   172 op add .angle .angle *tmp99
   173 op mul .mapProgress .angle .angle
 
   192 label *label28
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp101 *tmp37 false
-    * jump *label56 equal *tmp101 false
+  195 jump *label56 notEqual *tmp37 false
   196 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   197 jump *label19 always
   198 jump *label57 always
   199 label *label56
   200 label *label57
-    * op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
-    * jump *label58 equal *tmp104 false
+  201 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   202 op add .mapSpots .mapSpots 1
   203 jump *label59 always
   204 label *label58
 
   212 set :moveTo.4:radius 6
   213 label *label62
   214 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
-    * op equal *tmp110 *tmp109 false
-    * jump *label64 equal *tmp110 false
+  215 jump *label64 notEqual *tmp109 false
   216 op sub *tmp111 :moveTo.4:radius 0.5
   217 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
   218 label *label63
 
   243 op sub *tmp118 :findDrillLocationLocal:newY .coreY
   244 op abs *tmp119 *tmp118
   245 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
-    * op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 8
-    * jump *label69 equal *tmp121 false
+  246 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   247 jump *label67 always
   248 jump *label70 always
   249 label *label69
   250 label *label70
-    * op greaterThan *tmp123 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label71 equal *tmp123 false
+  251 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   252 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   253 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   254 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp125 :findDrillLocationLocal:limit 1000
-    * jump *label73 equal *tmp125 false
+  255 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   256 set .mapSpots :findDrillLocationLocal:score
   257 jump *label74 always
   258 label *label73
   259 label *label74
-    * op greaterThanEq *tmp127 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label75 equal *tmp127 false
+  260 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   261 set :saveLocation:item :findDrillLocationLocal:item
   262 set :saveLocation:value :findDrillLocationLocal:score
   263 set :saveLocation:x :findDrillLocationLocal:dx
 
   283 jump *label72 always
   284 label *label71
   285 label *label72
-    * op greaterThan *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label78 equal *tmp139 false
+  286 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   287 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   288 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   289 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   290 jump *label79 always
   291 label *label78
   292 label *label79
-    * op lessThanEq *tmp141 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label80 equal *tmp141 false
+  293 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   294 jump *label67 always
   295 jump *label81 always
   296 label *label80
 
   309 label *label66
   310 jump *label65 always
   311 label *label67
-    * op greaterThanEq *tmp151 :findDrillLocationLocal:best 0
-    * jump *label84 equal *tmp151 false
+  312 jump *label84 lessThan :findDrillLocationLocal:best 0
   313 set :saveLocation.1:item :findDrillLocationLocal:item
   314 set :saveLocation.1:value :findDrillLocationLocal:best
   315 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   350 label *label89
   351 op mul *tmp169 7 :shiftMask:shiftY
   352 op add :shiftMask:shift :shiftMask:shiftX *tmp169
-    * op greaterThan *tmp171 :shiftMask:shift 0
-    * jump *label90 equal *tmp171 false
+  353 jump *label90 lessThanEq :shiftMask:shift 0
   354 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   355 op and *tmp174 :shiftMask:mask :shiftMask:clearMask
   356 op shl :shiftMask:mask *tmp174 :shiftMask:shift
 
   359 op sub *tmp176 0 :shiftMask:shift
   360 op shr :shiftMask:mask :shiftMask:mask *tmp176
   361 label *label91
-    * op notEqual *tmp177 :shiftMask:shiftX 0
-    * jump *label92 equal *tmp177 false
+  362 jump *label92 equal :shiftMask:shiftX 0
   363 op abs *tmp179 :shiftMask:shiftX
   364 op shr :shiftMask:keep 0b1111111 *tmp179
-    * op greaterThan *tmp181 :shiftMask:shiftX 0
-    * jump *label94 equal *tmp181 false
+  365 jump *label94 lessThanEq :shiftMask:shiftX 0
   366 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   367 jump *label95 always
   368 label *label94
 
   410 set :createMatrixOfSize:i 1
   411 label *label100
   412 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * op greaterThanEq *tmp207 :createMatrixOfSize:i :createMatrixOfSize:height
-    * jump *label103 equal *tmp207 false
+  413 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   414 jump *label102 always
   415 jump *label104 always
   416 label *label103
 
   463 label *label110
   464 jump *label112 greaterThan :findPossiblePlacement:x 3
   465 op and *tmp221 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp222 *tmp221 0
-    * jump *label113 equal *tmp222 false
+  466 jump *label113 notEqual *tmp221 0
   467 op mul *tmp224 :findPossiblePlacement:y 7
   468 op add *tmp225 24 *tmp224
   469 op add :findPossiblePlacement*retval *tmp225 :findPossiblePlacement:x
 
   472 label *label113
   473 label *label114
   474 op sub *tmp227 3 :findPossiblePlacement:width
-    * op greaterThan *tmp228 :findPossiblePlacement:x *tmp227
-    * jump *label115 equal *tmp228 false
+  475 jump *label115 lessThanEq :findPossiblePlacement:x *tmp227
   476 jump *label112 always
   477 jump *label116 always
   478 label *label115
 
   483 jump *label110 always
   484 label *label112
   485 op sub *tmp230 3 :findPossiblePlacement:height
-    * op greaterThan *tmp231 :findPossiblePlacement:y *tmp230
-    * jump *label117 equal *tmp231 false
+  486 jump *label117 lessThanEq :findPossiblePlacement:y *tmp230
   487 jump *label109 always
   488 jump *label118 always
   489 label *label117
 
   509 set :tryPlaceGenerator:c :findPossiblePlacement:x
   510 set :tryPlaceGenerator:r :findPossiblePlacement:y
   511 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp234 :tryPlaceGenerator:shift 0
-    * jump *label121 equal *tmp234 false
-    * op lessThan *tmp236 :tryPlaceGenerator:shift 0
-    * jump *label123 equal *tmp236 false
+  512 jump *label121 lessThan :tryPlaceGenerator:shift 0
+  513 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   514 set :tryPlaceGenerator*retval false
   515 jump *label119 always
   516 jump *label124 always
 
   538 set :tryPlaceGenerator:c :findPossiblePlacement:x
   539 set :tryPlaceGenerator:r :findPossiblePlacement:y
   540 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp248 :tryPlaceGenerator:shift 0
-    * jump *label126 equal *tmp248 false
+  541 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   542 set :tryPlaceGenerator*retval false
   543 jump *label119 always
   544 jump *label127 always
 
   587 set :tryPlaceGenerator:c :findPossiblePlacement:x
   588 set :tryPlaceGenerator:r :findPossiblePlacement:y
   589 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp274 :tryPlaceGenerator:shift 0
-    * jump *label130 equal *tmp274 false
+  590 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   591 set :tryPlaceGenerator*retval false
   592 jump *label119 always
   593 jump *label131 always
 
   607 set :tryPlaceGenerator:c :findPossiblePlacement:x
   608 set :tryPlaceGenerator:r :findPossiblePlacement:y
   609 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp280 :tryPlaceGenerator:shift 0
-    * jump *label133 equal *tmp280 false
+  610 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   611 set :tryPlaceGenerator*retval false
   612 jump *label119 always
   613 jump *label134 always
 
   647 set :tryPlaceGenerator:c :findPossiblePlacement:x
   648 set :tryPlaceGenerator:r :findPossiblePlacement:y
   649 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp306 :tryPlaceGenerator:shift 0
-    * jump *label138 equal *tmp306 false
+  650 jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
   651 set :tryPlaceGenerator*retval false
   652 jump *label119 always
   653 jump *label139 always
 
   770 set :moveTo.5:radius 1
   771 label *label156
   772 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp339
-    * op equal *tmp340 *tmp339 false
-    * jump *label158 equal *tmp340 false
+  773 jump *label158 notEqual *tmp339 false
   774 op sub *tmp341 :moveTo.5:radius 0.5
   775 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp341
   776 label *label157
 
   844 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   845 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   846 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp378 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label164 equal *tmp378 false
+  847 jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
   848 op add *tmp380 .drillX 0.5
   849 op add .water1X *tmp380 :layoutThoriumDrillAtLocation:c
   850 op add *tmp382 .drillY 0.5
 
   866 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   867 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   868 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp387 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label167 equal *tmp387 false
+  869 jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
   870 op add *tmp389 .drillX 0.5
   871 op add .containerX *tmp389 :layoutThoriumDrillAtLocation:c
   872 op add *tmp391 .drillY 0.5
 
   908 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   909 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   910 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op lessThan *tmp410 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label171 equal *tmp410 false
+  911 jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   912 set :layoutThoriumDrillAtLocation*retval false
   913 jump *label154 always
   914 jump *label172 always
 
  1047 label *label193
  1048 set .drillX :findDrillLocationLocal:dx
  1049 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp439 :findDrillLocationLocal*retval false
-    * jump *label194 equal *tmp439 false
+ 1050 jump *label194 notEqual :findDrillLocationLocal*retval false
  1051 set :layoutThoriumDrill*retval false
  1052 jump *label192 always
  1053 jump *label195 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-35 instructions):
 
   115 jump *label38 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label28 always
-    * jump *label39 always
   118 label *label38
   119 label *label39
   120 op sub *tmp67 :locateOreAway:x .coreX
 
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label30 always
-    * jump *label43 always
   131 label *label42
   132 label *label43
-    * jump *label41 always
   133 label *label40
   134 label *label41
   135 jump *label44 lessThan :locateOreAway:coreDist 8
 
   153 jump *label52 greaterThanEq *tmp94 7
   154 set *tmp83 true
   155 jump *label48 always
-    * jump *label53 always
   156 label *label52
   157 label *label53
   158 label *label50
 
   170 printflush message1
   171 set *tmp37 true
   172 jump *label28 always
-    * jump *label55 always
   173 label *label54
   174 label *label55
-    * jump *label47 always
   175 label *label46
   176 label *label47
-    * jump *label45 always
   177 label *label44
   178 label *label45
   179 label *label30
 
   188 jump *label56 notEqual *tmp37 false
   189 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   190 jump *label19 always
-    * jump *label57 always
   191 label *label56
   192 label *label57
   193 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   194 op add .mapSpots .mapSpots 1
-    * jump *label59 always
   195 label *label58
   196 label *label59
   197 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   236 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   237 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   238 jump *label67 always
-    * jump *label70 always
   239 label *label69
   240 label *label70
   241 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
 
   244 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   245 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   246 set .mapSpots :findDrillLocationLocal:score
-    * jump *label74 always
   247 label *label73
   248 label *label74
   249 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   266 ucontrol unbind
   267 set :findDrillLocationLocal*retval true
   268 jump *label19 always
-    * jump *label76 always
   269 label *label75
   270 label *label76
-    * jump *label72 always
   271 label *label71
   272 label *label72
   273 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   274 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   275 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   276 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label79 always
   277 label *label78
   278 label *label79
   279 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   280 jump *label67 always
-    * jump *label81 always
   281 label *label80
   282 label *label81
   283 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   311 write :saveLocation.1:y bank1 .count
   312 op add .locations .locations 1
   313 label *label86
-    * jump *label85 always
   314 label *label84
   315 label *label85
   316 label *label26
 
   329 jump *label88 equal *tmp167 false
   330 set :shiftMask*retval 0
   331 jump *label87 always
-    * jump *label89 always
   332 label *label88
   333 label *label89
   334 op mul *tmp169 7 :shiftMask:shiftY
 
   347 op shr :shiftMask:keep 0b1111111 *tmp179
   348 jump *label94 lessThanEq :shiftMask:shiftX 0
   349 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label95 always
   350 label *label94
   351 label *label95
   352 op shl *tmp183 :shiftMask:keep 7
 
   356 op shl *tmp185 :shiftMask:keep 21
   357 op or :shiftMask:keep :shiftMask:keep *tmp185
   358 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label93 always
   359 label *label92
   360 label *label93
   361 set :shiftMask*retval :shiftMask:mask
 
   393 jump *label102 greaterThanEq :createMatrixOfSize:i 7
   394 jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
   395 jump *label102 always
-    * jump *label104 always
   396 label *label103
   397 label *label104
   398 op shl *tmp209 :createMatrixOfSize:matrix 7
 
   448 op add *tmp225 24 *tmp224
   449 op add :findPossiblePlacement*retval *tmp225 :findPossiblePlacement:x
   450 jump *label106 always
-    * jump *label114 always
   451 label *label113
   452 label *label114
   453 op sub *tmp227 3 :findPossiblePlacement:width
   454 jump *label115 lessThanEq :findPossiblePlacement:x *tmp227
   455 jump *label112 always
-    * jump *label116 always
   456 label *label115
   457 label *label116
   458 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   463 op sub *tmp230 3 :findPossiblePlacement:height
   464 jump *label117 lessThanEq :findPossiblePlacement:y *tmp230
   465 jump *label109 always
-    * jump *label118 always
   466 label *label117
   467 label *label118
   468 label *label108
 
   490 jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
   491 set :tryPlaceGenerator*retval false
   492 jump *label119 always
-    * jump *label124 always
   493 label *label123
   494 label *label124
   495 op add *tmp238 :tryPlaceGenerator:centerX 0.5
 
   517 jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
   518 set :tryPlaceGenerator*retval false
   519 jump *label119 always
-    * jump *label127 always
   520 label *label126
   521 label *label127
   522 op add *tmp250 :tryPlaceGenerator:centerX 0.5
 
   565 jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
   566 set :tryPlaceGenerator*retval false
   567 jump *label119 always
-    * jump *label131 always
   568 label *label130
   569 label *label131
   570 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   584 jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
   585 set :tryPlaceGenerator*retval false
   586 jump *label119 always
-    * jump *label134 always
   587 label *label133
   588 label *label134
   589 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   623 jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
   624 set :tryPlaceGenerator*retval false
   625 jump *label119 always
-    * jump *label139 always
   626 label *label138
   627 label *label139
   628 op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   629 op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   630 op shl *tmp310 1 :tryPlaceGenerator:shift
   631 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp310
-    * jump *label136 always
   632 label *label135
   633 label *label136
   634 set :tryPlaceGenerator*retval true
 
   824 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
   825 op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   826 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp385
-    * jump *label165 always
   827 label *label164
   828 label *label165
   829 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   843 op add .containerY *tmp391 :layoutThoriumDrillAtLocation:r
   844 op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   845 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
-    * jump *label168 always
   846 label *label167
   847 label *label168
   848 set :createFixedMatrix.4:row0 0b1100011
 
   880 jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
   881 set :layoutThoriumDrillAtLocation*retval false
   882 jump *label154 always
-    * jump *label172 always
   883 label *label171
   884 label *label172
   885 op add .node1X .drillX :layoutThoriumDrillAtLocation:c
 
   917 jump *label176 equal :tryPlaceGenerator*retval false
   918 set :layoutThoriumDrillAtLocation*retval true
   919 jump *label154 always
-    * jump *label177 always
   920 label *label176
   921 label *label177
   922 set :layoutThoriumDrillAtLocation:sx 3
 
   967 jump *label188 equal :tryPlaceGenerator*retval false
   968 set :layoutThoriumDrillAtLocation*retval true
   969 jump *label154 always
-    * jump *label189 always
   970 label *label188
   971 label *label189
   972 label *label179
 
  1016 jump *label194 notEqual :findDrillLocationLocal*retval false
  1017 set :layoutThoriumDrill*retval false
  1018 jump *label192 always
-    * jump *label195 always
  1019 label *label194
  1020 label *label195
  1021 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
   537 set :createFixedMatrix:row4 0b0000000
   538 set :createFixedMatrix:row5 0b1000001
   539 set :createFixedMatrix:row6 0b1100011
-    * op shl *tmp260 :createFixedMatrix:row0 0
+  540 set *tmp260 :createFixedMatrix:row0
   541 op shl *tmp261 :createFixedMatrix:row1 7
   542 op or *tmp262 *tmp260 *tmp261
   543 op shl *tmp263 :createFixedMatrix:row2 14
 
   761 set :createFixedMatrix.1:row4 0b0011100
   762 set :createFixedMatrix.1:row5 0b0000000
   763 set :createFixedMatrix.1:row6 0b0000000
-    * op shl *tmp344 :createFixedMatrix.1:row0 0
+  764 set *tmp344 :createFixedMatrix.1:row0
   765 op shl *tmp345 :createFixedMatrix.1:row1 7
   766 op or *tmp346 *tmp344 *tmp345
   767 op shl *tmp347 :createFixedMatrix.1:row2 14
 
   783 set :createFixedMatrix.2:row4 0b0011100
   784 set :createFixedMatrix.2:row5 0b0000000
   785 set :createFixedMatrix.2:row6 0b1000001
-    * op shl *tmp359 :createFixedMatrix.2:row0 0
+  786 set *tmp359 :createFixedMatrix.2:row0
   787 op shl *tmp360 :createFixedMatrix.2:row1 7
   788 op or *tmp361 *tmp359 *tmp360
   789 op shl *tmp362 :createFixedMatrix.2:row2 14
 
   800 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp358
   801 set :createFixedMatrix.3:row0 0b11
   802 set :createFixedMatrix.3:row1 0b11
-    * op shl *tmp374 :createFixedMatrix.3:row0 0
+  803 set *tmp374 :createFixedMatrix.3:row0
   804 op shl *tmp375 :createFixedMatrix.3:row1 7
   805 op or *tmp373 *tmp374 *tmp375
   806 label *label162
 
   852 set :createFixedMatrix.4:row4 0b0000000
   853 set :createFixedMatrix.4:row5 0b1000001
   854 set :createFixedMatrix.4:row6 0b1100011
-    * op shl *tmp395 :createFixedMatrix.4:row0 0
+  855 set *tmp395 :createFixedMatrix.4:row0
   856 op shl *tmp396 :createFixedMatrix.4:row1 7
   857 op or *tmp397 *tmp395 *tmp396
   858 op shl *tmp398 :createFixedMatrix.4:row2 14
 
   888 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
   889 set :createFixedMatrix.5:row0 0b1111
   890 set :createFixedMatrix.5:row1 0b1111
-    * op shl *tmp416 :createFixedMatrix.5:row0 0
+  891 set *tmp416 :createFixedMatrix.5:row0
   892 op shl *tmp417 :createFixedMatrix.5:row1 7
   893 op or *tmp415 *tmp416 *tmp417
   894 label *label173
 
   897 set :createFixedMatrix.6:row1 0b11
   898 set :createFixedMatrix.6:row2 0b11
   899 set :createFixedMatrix.6:row3 0b11
-    * op shl *tmp420 :createFixedMatrix.6:row0 0
+  900 set *tmp420 :createFixedMatrix.6:row0
   901 op shl *tmp421 :createFixedMatrix.6:row1 7
   902 op or *tmp422 *tmp420 *tmp421
   903 op shl *tmp423 :createFixedMatrix.6:row2 14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-12 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp22 @mapw .coreX
-    * op sub *tmp23 @maph .coreY
-    * op max *tmp24 .coreX .coreY
+   25 op sub *tmp22 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp23 @maph :findDrillLocationLocal:y
+   27 op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp24 *tmp24 *tmp22
    29 op max *tmp24 *tmp24 *tmp23
    30 set :findDrillLocationLocal:distanceLimit *tmp24
    31 set .mapAction "Locating ore..."
    32 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp25 :moveTo:x
-    * set *tmp26 :moveTo:y
-    * set :moveTo.1:x *tmp25
-    * set :moveTo.1:y *tmp26
+   33 set .mapProgress 0
+   34 set :moveTo:x :findDrillLocationLocal:x
+   35 set :moveTo:y :findDrillLocationLocal:y
+   36 set *tmp25 .coreX
+   37 set *tmp26 .coreY
+   38 set :moveTo.1:x :moveTo:x
+   39 set :moveTo.1:y :moveTo:y
    40 set :moveTo.1:radius 6
    41 label *label22
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
+   42 ucontrol within *tmp25 *tmp26 6 *tmp27
    43 jump *label24 notEqual *tmp27 false
-    * op sub *tmp29 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
+   44 op sub *tmp29 6 0.5
+   45 ucontrol approach *tmp25 *tmp26 5.5
    46 label *label23
    47 jump *label22 always
    48 label *label24
    49 label *label21
    50 label *label20
-    * op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   51 op div *tmp30 *tmp24 3.8197185279121366
    52 op pow .mapTotal *tmp30 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label29
-    * jump *label31 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   74 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
-    * op add *tmp45 .coreX *tmp44
+   78 op add *tmp45 :findDrillLocationLocal:x *tmp44
    79 op sub *tmp46 @mapw 5
    80 set :limit:value *tmp45
    81 set :limit:low 5
    82 set :limit:high *tmp46
-    * op max *tmp48 :limit:value :limit:low
-    * op min *tmp47 *tmp48 :limit:high
+   83 op max *tmp48 *tmp45 5
+   84 op min *tmp47 *tmp48 *tmp46
    85 label *label32
    86 set :locateOreAway:lx *tmp47
    87 op cos *tmp50 :locateOreAway:a
    88 op mul *tmp51 *tmp50 :locateOreAway:distance
-    * op add *tmp52 .coreY *tmp51
+   89 op add *tmp52 :findDrillLocationLocal:y *tmp51
    90 op sub *tmp53 @maph 5
    91 set :limit.1:value *tmp52
    92 set :limit.1:low 5
    93 set :limit.1:high *tmp53
-    * op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp54 *tmp55 :limit.1:high
+   94 op max *tmp55 *tmp52 5
+   95 op min *tmp54 *tmp55 *tmp53
    96 label *label33
    97 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   98 set :moveTo.2:x *tmp47
+   99 set :moveTo.2:y *tmp54
   100 set :moveTo.2:radius 5
   101 label *label35
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
+  102 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
   103 jump *label37 notEqual *tmp57 false
-    * op sub *tmp59 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
+  104 op sub *tmp59 5 0.5
+  105 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   106 label *label36
   107 jump *label35 always
   108 label *label37
 
   111 op add .angle .angle *tmp60
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
+  114 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp63 0
   115 jump *label38 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label28 always
   118 label *label38
   119 label *label39
-    * op sub *tmp67 :locateOreAway:x .coreX
+  120 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
   121 op abs *tmp68 *tmp67
-    * op sub *tmp69 :locateOreAway:y .coreY
+  122 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
   123 op abs *tmp70 *tmp69
   124 op max :locateOreAway:coreDist *tmp68 *tmp70
-    * op sub *tmp72 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp73 :locateOreAway:y :locateOreAway:ly
+  125 op sub *tmp72 :locateOreAway:x *tmp47
+  126 op sub *tmp73 :locateOreAway:y *tmp54
   127 op len :locateOreAway:unitDist *tmp72 *tmp73
   128 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
 
   147 read :visited:lx bank1 *tmp87
   148 op add *tmp90 :visited:index 3
   149 read :visited:ly bank1 *tmp90
-    * op sub *tmp92 :visited:x :visited:lx
-    * op sub *tmp93 :visited:y :visited:ly
+  150 op sub *tmp92 :locateOreAway:x :visited:lx
+  151 op sub *tmp93 :locateOreAway:y :visited:ly
   152 op len *tmp94 *tmp92 *tmp93
   153 jump *label52 greaterThanEq *tmp94 7
   154 set *tmp83 true
 
   161 label *label51
   162 set *tmp83 false
   163 jump *label48 always
-    * set *tmp83 null
   164 label *label48
   165 jump *label54 notEqual *tmp83 false
-    * op div *tmp99 7.639437055824273 :locateOreAway:distance
+  166 op div *tmp99 2 .angle
   167 op add .angle .angle *tmp99
   168 op mul .mapProgress .angle .angle
   169 printflush message1
 
   180 label *label31
   181 set *tmp37 false
   182 jump *label28 always
-    * set *tmp37 null
   183 label *label28
   184 set :findDrillLocationLocal:oreX :locateOreAway:x
   185 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   192 op add .mapSpots .mapSpots 1
   193 label *label58
   194 label *label59
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp107 :moveTo.3:x
-    * set *tmp108 :moveTo.3:y
-    * set :moveTo.4:x *tmp107
-    * set :moveTo.4:y *tmp108
+  195 set :moveTo.3:x :locateOreAway:x
+  196 set :moveTo.3:y :locateOreAway:y
+  197 set *tmp107 :findDrillLocationLocal:oreX
+  198 set *tmp108 :findDrillLocationLocal:oreY
+  199 set :moveTo.4:x :moveTo.3:x
+  200 set :moveTo.4:y :moveTo.3:y
   201 set :moveTo.4:radius 6
   202 label *label62
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
+  203 ucontrol within *tmp107 *tmp108 6 *tmp109
   204 jump *label64 notEqual *tmp109 false
-    * op sub *tmp111 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
+  205 op sub *tmp111 6 0.5
+  206 ucontrol approach *tmp107 *tmp108 5.5
   207 label *label63
   208 jump *label62 always
   209 label *label64
 
   227 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
   228 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   229 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * op sub *tmp116 :findDrillLocationLocal:newX .coreX
+  230 op sub *tmp116 :findDrillLocationLocal:newX :findDrillLocationLocal:x
   231 op abs *tmp117 *tmp116
-    * op sub *tmp118 :findDrillLocationLocal:newY .coreY
+  232 op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   233 op abs *tmp119 *tmp118
   234 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   235 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
 
   251 set :saveLocation:y :findDrillLocationLocal:dy
   252 op add .count .count 1
   253 set *tmp129 .count
-    * sensor *tmp131 :saveLocation:item @id
-    * write *tmp131 bank1 *tmp129
+  254 sensor *tmp131 :findDrillLocationLocal:item @id
+  255 write *tmp131 bank1 .count
   256 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  257 write :findDrillLocationLocal:score bank1 .count
   258 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  259 write :findDrillLocationLocal:dx bank1 .count
   260 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  261 write :findDrillLocationLocal:dy bank1 .count
   262 op add .locations .locations 1
   263 label *label77
   264 ucontrol unbind
 
   299 set :saveLocation.1:y :findDrillLocationLocal:bestY
   300 op add .count .count 1
   301 set *tmp153 .count
-    * sensor *tmp155 :saveLocation.1:item @id
-    * write *tmp155 bank1 *tmp153
+  302 sensor *tmp155 :findDrillLocationLocal:item @id
+  303 write *tmp155 bank1 .count
   304 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  305 write :findDrillLocationLocal:best bank1 .count
   306 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  307 write :findDrillLocationLocal:bestX bank1 .count
   308 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  309 write :findDrillLocationLocal:bestY bank1 .count
   310 op add .locations .locations 1
   311 label *label86
   312 label *label84
 
   342 label *label91
   343 jump *label92 equal :shiftMask:shiftX 0
   344 op abs *tmp179 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp179
+  345 op shr :shiftMask:keep 0b1111111 *tmp163
   346 jump *label94 lessThanEq :shiftMask:shiftX 0
   347 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   348 label *label94
 
   358 label *label93
   359 set :shiftMask*retval :shiftMask:mask
   360 jump *label87 always
-    * set :shiftMask*retval null
   361 label *label87
   362 return :shiftMask*retaddr
   363 end
   364 label *label10
   365 op add *tmp186 :excludeArea:areaWidth 7
-    * op add *tmp187 *tmp186 1
+  366 op add *tmp187 :excludeArea:areaWidth 8
   367 op idiv *tmp188 *tmp187 2
   368 op sub *tmp189 :excludeArea:maskX :excludeArea:areaX
   369 op abs *tmp190 *tmp189
   370 op sub :excludeArea:overlapX *tmp188 *tmp190
   371 op add *tmp192 :excludeArea:areaHeight 7
-    * op add *tmp193 *tmp192 1
+  372 op add *tmp193 :excludeArea:areaHeight 8
   373 op idiv *tmp194 *tmp193 2
   374 op sub *tmp195 :excludeArea:maskY :excludeArea:areaY
   375 op abs *tmp196 *tmp195
 
   382 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
   383 set :createMatrixOfSize:width :excludeArea:blockSizeX
   384 set :createMatrixOfSize:height :excludeArea:blockSizeY
-    * op shl *tmp205 1 :createMatrixOfSize:width
+  385 op shl *tmp205 1 :excludeArea:blockSizeX
   386 op sub :createMatrixOfSize:row *tmp205 1
   387 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   388 set :createMatrixOfSize:i 1
   389 label *label100
   390 jump *label102 greaterThanEq :createMatrixOfSize:i 7
-    * jump *label103 lessThan :createMatrixOfSize:i :createMatrixOfSize:height
+  391 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   392 jump *label102 always
   393 label *label103
   394 label *label104
 
   400 label *label102
   401 set *tmp204 :createMatrixOfSize:matrix
   402 jump *label99 always
-    * set *tmp204 null
   403 label *label99
-    * set :excludeArea:blocked *tmp204
+  404 set :excludeArea:blocked :createMatrixOfSize:matrix
   405 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
   406 op sub *tmp212 7 :excludeArea:blockSizeX
   407 op mul :excludeArea:shiftX *tmp211 *tmp212
   408 op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY
   409 op sub *tmp215 7 :excludeArea:blockSizeY
   410 op mul :excludeArea:shiftY *tmp214 *tmp215
-    * set :shiftMask:mask :excludeArea:blocked
+  411 set :shiftMask:mask *tmp204
   412 set :shiftMask:shiftX :excludeArea:shiftX
   413 set :shiftMask:shiftY :excludeArea:shiftY
   414 setaddr :shiftMask*retaddr *label105 (h:*label105)
   415 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   416 label *label105
   417 set :excludeArea:shifted :shiftMask*retval
-    * op or :excludeArea*retval :excludeArea:mask :excludeArea:shifted
+  418 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   419 jump *label96 always
-    * set *tmp201 null
   420 jump *label98 always
   421 label *label97
   422 set :excludeArea*retval :excludeArea:mask
   423 jump *label96 always
-    * set *tmp201 null
   424 label *label98
-    * set :excludeArea*retval *tmp201
+  425 set :excludeArea*retval null
   426 label *label96
   427 return :excludeArea*retaddr
   428 end
 
   465 label *label109
   466 set :findPossiblePlacement*retval -1
   467 jump *label106 always
-    * set :findPossiblePlacement*retval null
   468 label *label106
   469 return :findPossiblePlacement*retaddr
   470 end
 
   479 set :tryPlaceGenerator:c :findPossiblePlacement:x
   480 set :tryPlaceGenerator:r :findPossiblePlacement:y
   481 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label121 lessThan :tryPlaceGenerator:shift 0
-    * jump *label123 greaterThanEq :tryPlaceGenerator:shift 0
+  482 jump *label121 lessThan :findPossiblePlacement*retval 0
+  483 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   484 set :tryPlaceGenerator*retval false
   485 jump *label119 always
   486 label *label123
   487 label *label124
   488 op add *tmp238 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp238 :tryPlaceGenerator:c
+  489 op add .water2X *tmp238 :findPossiblePlacement:x
   490 op add *tmp240 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp240 :tryPlaceGenerator:r
+  491 op add .water2Y *tmp240 :findPossiblePlacement:y
   492 op add *tmp242 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp242 :tryPlaceGenerator:c
+  493 op add .generatorX *tmp238 :findPossiblePlacement:x
   494 op add *tmp244 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp244 :tryPlaceGenerator:r
-    * op shl *tmp246 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  495 op add .generatorY *tmp244 :findPossiblePlacement:y
+  496 op shl *tmp246 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   497 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp246
   498 jump *label122 always
   499 label *label121
 
   507 set :tryPlaceGenerator:c :findPossiblePlacement:x
   508 set :tryPlaceGenerator:r :findPossiblePlacement:y
   509 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label126 greaterThanEq :tryPlaceGenerator:shift 0
+  510 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   511 set :tryPlaceGenerator*retval false
   512 jump *label119 always
   513 label *label126
   514 label *label127
   515 op add *tmp250 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp250 :tryPlaceGenerator:c
+  516 op add .water2X *tmp250 :findPossiblePlacement:x
   517 op add *tmp252 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp252 :tryPlaceGenerator:r
+  518 op add .water2Y *tmp252 :findPossiblePlacement:y
   519 op add *tmp254 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp254 :tryPlaceGenerator:c
+  520 op add .generatorX *tmp254 :findPossiblePlacement:x
   521 op add *tmp256 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp256 :tryPlaceGenerator:r
-    * op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  522 op add .generatorY *tmp252 :findPossiblePlacement:y
+  523 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   524 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
   525 label *label122
   526 set :createFixedMatrix:row0 0b1100011
 
   530 set :createFixedMatrix:row4 0b0000000
   531 set :createFixedMatrix:row5 0b1000001
   532 set :createFixedMatrix:row6 0b1100011
-    * set *tmp260 :createFixedMatrix:row0
-    * op shl *tmp261 :createFixedMatrix:row1 7
-    * op or *tmp262 *tmp260 *tmp261
-    * op shl *tmp263 :createFixedMatrix:row2 14
-    * op or *tmp264 *tmp262 *tmp263
-    * op shl *tmp265 :createFixedMatrix:row3 21
-    * op or *tmp266 *tmp264 *tmp265
-    * op shl *tmp267 :createFixedMatrix:row4 28
-    * op or *tmp268 *tmp266 *tmp267
-    * op shl *tmp269 :createFixedMatrix:row5 35
-    * op or *tmp270 *tmp268 *tmp269
-    * op shl *tmp271 :createFixedMatrix:row6 42
-    * op or *tmp259 *tmp270 *tmp271
+  533 set *tmp260 0b1100011
+  534 op shl *tmp261 0b1000001 7
+  535 op or *tmp262 :createFixedMatrix:row0 8320
+  536 op shl *tmp263 0b0000000 14
+  537 op or *tmp264 *tmp262 0
+  538 op shl *tmp265 0b0000000 21
+  539 op or *tmp266 *tmp264 0
+  540 op shl *tmp267 0b0000000 28
+  541 op or *tmp268 *tmp266 0
+  542 op shl *tmp269 0b1000001 35
+  543 op or *tmp270 *tmp268 2233382993920
+  544 op shl *tmp271 0b1100011 42
+  545 op or *tmp259 *tmp270 435406604599296
   546 label *label128
   547 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp259
   548 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   555 set :tryPlaceGenerator:c :findPossiblePlacement:x
   556 set :tryPlaceGenerator:r :findPossiblePlacement:y
   557 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label130 greaterThanEq :tryPlaceGenerator:shift 0
+  558 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   559 set :tryPlaceGenerator*retval false
   560 jump *label119 always
   561 label *label130
   562 label *label131
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp278 1 :tryPlaceGenerator:shift
+  563 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  564 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  565 op shl *tmp278 1 :findPossiblePlacement*retval
   566 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp278
   567 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   568 set :findPossiblePlacement:placementMask 1
 
   574 set :tryPlaceGenerator:c :findPossiblePlacement:x
   575 set :tryPlaceGenerator:r :findPossiblePlacement:y
   576 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label133 greaterThanEq :tryPlaceGenerator:shift 0
+  577 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   578 set :tryPlaceGenerator*retval false
   579 jump *label119 always
   580 label *label133
   581 label *label134
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp284 1 :tryPlaceGenerator:shift
+  582 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  583 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  584 op shl *tmp284 1 :findPossiblePlacement*retval
   585 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp284
   586 op sub *tmp285 .water2X .node1X
   587 op sub *tmp286 .water2Y .node1Y
 
   613 set :tryPlaceGenerator:c :findPossiblePlacement:x
   614 set :tryPlaceGenerator:r :findPossiblePlacement:y
   615 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label138 greaterThanEq :tryPlaceGenerator:shift 0
+  616 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   617 set :tryPlaceGenerator*retval false
   618 jump *label119 always
   619 label *label138
   620 label *label139
-    * op add .node2X :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .node2Y :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp310 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp310
+  621 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  622 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  623 op shl *tmp310 1 :findPossiblePlacement*retval
   624 label *label135
   625 label *label136
   626 set :tryPlaceGenerator*retval true
   627 jump *label119 always
-    * set :tryPlaceGenerator*retval null
   628 label *label119
   629 return :tryPlaceGenerator*retaddr
   630 end
 
   643 label *label143
   644 set :createBlockMaskRow*retval :createBlockMaskRow:result
   645 jump *label140 always
-    * set :createBlockMaskRow*retval null
   646 label *label140
   647 return :createBlockMaskRow*retaddr
   648 end
 
   655 set :createAdjacentMask:x :createCombinedMask:x
   656 set :createAdjacentMask:y :createCombinedMask:y
   657 set :createAdjacentMask:result 0
-    * op add *tmp321 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  658 op add *tmp321 :createCombinedMask:y 4
+  659 set :createBlockMaskRow:x :createCombinedMask:x
   660 set :createBlockMaskRow:y *tmp321
   661 setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
   662 call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
 
   683 op or *tmp328 :createAdjacentMask:row2 *tmp327
   684 op shr *tmp329 :createAdjacentMask:row1 1
   685 op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createAdjacentMask:row0
+  686 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
   687 op shl *tmp332 :createAdjacentMask:result 7
   688 op and *tmp333 :createAdjacentMask:mask 0xFE
   689 op or :createAdjacentMask:result *tmp332 *tmp333
   690 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  691 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   692 label *label149
   693 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   694 jump *label148 always
 
   701 read *tmp336 processor1 ":createTerrainMask*finished"
   702 jump *label152 equal *tmp336 false
   703 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
-    * op or :excludeArea:mask :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  704 op or :excludeArea:mask *tmp320 :createCombinedMask:terrainMask
   705 set :excludeArea:maskX :createCombinedMask:x
   706 set :excludeArea:maskY :createCombinedMask:y
   707 set :excludeArea:areaX .coreX
 
   713 label *label153
   714 set :createCombinedMask*retval :excludeArea*retval
   715 jump *label144 always
-    * set :createCombinedMask*retval null
   716 label *label144
   717 return :createCombinedMask*retaddr
   718 end
 
   729 set :moveTo.5:y .drillY
   730 set :moveTo.5:radius 1
   731 label *label156
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp339
+  732 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
   733 jump *label158 notEqual *tmp339 false
-    * op sub *tmp341 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp341
+  734 op sub *tmp341 1 0.5
+  735 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   736 label *label157
   737 jump *label156 always
   738 label *label158
 
   750 set :createFixedMatrix.1:row4 0b0011100
   751 set :createFixedMatrix.1:row5 0b0000000
   752 set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp344 :createFixedMatrix.1:row0
-    * op shl *tmp345 :createFixedMatrix.1:row1 7
-    * op or *tmp346 *tmp344 *tmp345
-    * op shl *tmp347 :createFixedMatrix.1:row2 14
-    * op or *tmp348 *tmp346 *tmp347
-    * op shl *tmp349 :createFixedMatrix.1:row3 21
-    * op or *tmp350 *tmp348 *tmp349
-    * op shl *tmp351 :createFixedMatrix.1:row4 28
-    * op or *tmp352 *tmp350 *tmp351
-    * op shl *tmp353 :createFixedMatrix.1:row5 35
-    * op or *tmp354 *tmp352 *tmp353
-    * op shl *tmp355 :createFixedMatrix.1:row6 42
-    * op or *tmp343 *tmp354 *tmp355
+  753 set *tmp344 0b0000000
+  754 op shl *tmp345 0b0000000 7
+  755 op or *tmp346 :createFixedMatrix.1:row0 0
+  756 op shl *tmp347 0b0011100 14
+  757 op or *tmp348 *tmp346 458752
+  758 op shl *tmp349 0b0011100 21
+  759 op or *tmp350 *tmp348 58720256
+  760 op shl *tmp351 0b0011100 28
+  761 op or *tmp352 *tmp350 7516192768
+  762 op shl *tmp353 0b0000000 35
+  763 op or *tmp354 *tmp352 0
+  764 op shl *tmp355 0b0000000 42
+  765 op or *tmp343 *tmp354 0
   766 label *label160
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp343
+  767 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp343
   768 set :createFixedMatrix.2:row0 0b1000001
   769 set :createFixedMatrix.2:row1 0b0000000
   770 set :createFixedMatrix.2:row2 0b0011100
 
   772 set :createFixedMatrix.2:row4 0b0011100
   773 set :createFixedMatrix.2:row5 0b0000000
   774 set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp359 :createFixedMatrix.2:row0
-    * op shl *tmp360 :createFixedMatrix.2:row1 7
-    * op or *tmp361 *tmp359 *tmp360
-    * op shl *tmp362 :createFixedMatrix.2:row2 14
-    * op or *tmp363 *tmp361 *tmp362
-    * op shl *tmp364 :createFixedMatrix.2:row3 21
-    * op or *tmp365 *tmp363 *tmp364
-    * op shl *tmp366 :createFixedMatrix.2:row4 28
-    * op or *tmp367 *tmp365 *tmp366
-    * op shl *tmp368 :createFixedMatrix.2:row5 35
-    * op or *tmp369 *tmp367 *tmp368
-    * op shl *tmp370 :createFixedMatrix.2:row6 42
-    * op or *tmp358 *tmp369 *tmp370
+  775 set *tmp359 0b1000001
+  776 op shl *tmp360 0b0000000 7
+  777 op or *tmp361 :createFixedMatrix.2:row0 0
+  778 op shl *tmp362 0b0011100 14
+  779 op or *tmp363 *tmp361 458752
+  780 op shl *tmp364 0b0011100 21
+  781 op or *tmp365 *tmp363 58720256
+  782 op shl *tmp366 0b0011100 28
+  783 op or *tmp367 *tmp365 7516192768
+  784 op shl *tmp368 0b0000000 35
+  785 op or *tmp369 *tmp367 0
+  786 op shl *tmp370 0b1000001 42
+  787 op or *tmp358 *tmp369 285873023221760
   788 label *label161
   789 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp358
   790 set :createFixedMatrix.3:row0 0b11
   791 set :createFixedMatrix.3:row1 0b11
-    * set *tmp374 :createFixedMatrix.3:row0
-    * op shl *tmp375 :createFixedMatrix.3:row1 7
-    * op or *tmp373 *tmp374 *tmp375
+  792 set *tmp374 0b11
+  793 op shl *tmp375 0b11 7
+  794 op or *tmp373 :createFixedMatrix.3:row0 384
   795 label *label162
   796 set :layoutThoriumDrillAtLocation:mask2x2 *tmp373
   797 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  798 set :findPossiblePlacement:placementMask *tmp373
   799 set :findPossiblePlacement:width 2
   800 set :findPossiblePlacement:height 2
   801 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
 
   804 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   805 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   806 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label164 lessThan :layoutThoriumDrillAtLocation:shift 0
+  807 jump *label164 lessThan :findPossiblePlacement*retval 0
   808 op add *tmp380 .drillX 0.5
-    * op add .water1X *tmp380 :layoutThoriumDrillAtLocation:c
+  809 op add .water1X *tmp380 :findPossiblePlacement:x
   810 op add *tmp382 .drillY 0.5
-    * op add .water1Y *tmp382 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp384 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  811 op add .water1Y *tmp382 :findPossiblePlacement:y
+  812 op shl *tmp384 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   813 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
-    * op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp385
+  814 op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  815 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp384
   816 label *label164
   817 label *label165
   818 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   825 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   826 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   827 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label167 lessThan :layoutThoriumDrillAtLocation:shift 0
+  828 jump *label167 lessThan :findPossiblePlacement*retval 0
   829 op add *tmp389 .drillX 0.5
-    * op add .containerX *tmp389 :layoutThoriumDrillAtLocation:c
+  830 op add .containerX *tmp389 :findPossiblePlacement:x
   831 op add *tmp391 .drillY 0.5
-    * op add .containerY *tmp391 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  832 op add .containerY *tmp391 :findPossiblePlacement:y
+  833 op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   834 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
   835 label *label167
   836 label *label168
 
   841 set :createFixedMatrix.4:row4 0b0000000
   842 set :createFixedMatrix.4:row5 0b1000001
   843 set :createFixedMatrix.4:row6 0b1100011
-    * set *tmp395 :createFixedMatrix.4:row0
-    * op shl *tmp396 :createFixedMatrix.4:row1 7
-    * op or *tmp397 *tmp395 *tmp396
-    * op shl *tmp398 :createFixedMatrix.4:row2 14
-    * op or *tmp399 *tmp397 *tmp398
-    * op shl *tmp400 :createFixedMatrix.4:row3 21
-    * op or *tmp401 *tmp399 *tmp400
-    * op shl *tmp402 :createFixedMatrix.4:row4 28
-    * op or *tmp403 *tmp401 *tmp402
-    * op shl *tmp404 :createFixedMatrix.4:row5 35
-    * op or *tmp405 *tmp403 *tmp404
-    * op shl *tmp406 :createFixedMatrix.4:row6 42
-    * op or *tmp394 *tmp405 *tmp406
+  844 set *tmp395 0b1100011
+  845 op shl *tmp396 0b1000001 7
+  846 op or *tmp397 :createFixedMatrix.4:row0 8320
+  847 op shl *tmp398 0b0000000 14
+  848 op or *tmp399 *tmp397 0
+  849 op shl *tmp400 0b0000000 21
+  850 op or *tmp401 *tmp399 0
+  851 op shl *tmp402 0b0000000 28
+  852 op or *tmp403 *tmp401 0
+  853 op shl *tmp404 0b1000001 35
+  854 op or *tmp405 *tmp403 2233382993920
+  855 op shl *tmp406 0b1100011 42
+  856 op or *tmp394 *tmp405 435406604599296
   857 label *label169
   858 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp394
   859 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
 
   866 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   867 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   868 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label171 greaterThanEq :layoutThoriumDrillAtLocation:shift 0
+  869 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   870 set :layoutThoriumDrillAtLocation*retval false
   871 jump *label154 always
   872 label *label171
   873 label *label172
-    * op add .node1X .drillX :layoutThoriumDrillAtLocation:c
-    * op add .node1Y .drillY :layoutThoriumDrillAtLocation:r
-    * op shl *tmp414 1 :layoutThoriumDrillAtLocation:shift
+  874 op add .node1X .drillX :findPossiblePlacement:x
+  875 op add .node1Y .drillY :findPossiblePlacement:y
+  876 op shl *tmp414 1 :findPossiblePlacement*retval
   877 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
   878 set :createFixedMatrix.5:row0 0b1111
   879 set :createFixedMatrix.5:row1 0b1111
-    * set *tmp416 :createFixedMatrix.5:row0
-    * op shl *tmp417 :createFixedMatrix.5:row1 7
-    * op or *tmp415 *tmp416 *tmp417
+  880 set *tmp416 0b1111
+  881 op shl *tmp417 0b1111 7
+  882 op or *tmp415 :createFixedMatrix.5:row0 1920
   883 label *label173
   884 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp415
   885 set :createFixedMatrix.6:row0 0b11
   886 set :createFixedMatrix.6:row1 0b11
   887 set :createFixedMatrix.6:row2 0b11
   888 set :createFixedMatrix.6:row3 0b11
-    * set *tmp420 :createFixedMatrix.6:row0
-    * op shl *tmp421 :createFixedMatrix.6:row1 7
-    * op or *tmp422 *tmp420 *tmp421
-    * op shl *tmp423 :createFixedMatrix.6:row2 14
-    * op or *tmp424 *tmp422 *tmp423
-    * op shl *tmp425 :createFixedMatrix.6:row3 21
-    * op or *tmp419 *tmp424 *tmp425
+  889 set *tmp420 0b11
+  890 op shl *tmp421 0b11 7
+  891 op or *tmp422 :createFixedMatrix.6:row0 384
+  892 op shl *tmp423 0b11 14
+  893 op or *tmp424 *tmp422 49152
+  894 op shl *tmp425 0b11 21
+  895 op or *tmp419 *tmp424 6291456
   896 label *label174
   897 set :layoutThoriumDrillAtLocation:generatorVertical *tmp419
   898 set :tryPlaceGenerator:centerX .drillX
   899 set :tryPlaceGenerator:centerY .drillY
   900 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  901 set :tryPlaceGenerator:generatorHorizontal *tmp415
+  902 set :tryPlaceGenerator:generatorVertical *tmp419
   903 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   904 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   905 label *label175
 
   942 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
   943 label *label186
   944 set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  945 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   946 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
   947 op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy
   948 set :tryPlaceGenerator:centerX *tmp435
 
   964 label *label180
   965 set :layoutThoriumDrillAtLocation*retval true
   966 jump *label154 always
-    * set :layoutThoriumDrillAtLocation*retval null
   967 label *label154
   968 return :layoutThoriumDrillAtLocation*retaddr
   969 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-135 instructions):
 
    33 set .mapProgress 0
    34 set :moveTo:x :findDrillLocationLocal:x
    35 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 .coreX
-    * set *tmp26 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   36 set *tmp25 :findDrillLocationLocal:x
+   37 set *tmp26 :findDrillLocationLocal:y
+   38 set :moveTo.1:x :findDrillLocationLocal:x
+   39 set :moveTo.1:y :findDrillLocationLocal:y
    40 label *label22
-    * ucontrol within *tmp25 *tmp26 6 *tmp27
+   41 ucontrol within .coreX .coreY 6 *tmp27
    42 jump *label24 notEqual *tmp27 false
-    * op sub *tmp29 6 0.5
-    * ucontrol approach *tmp25 *tmp26 5.5
+   43 ucontrol approach .coreX .coreY 5.5
    44 label *label23
    45 jump *label22 always
    46 label *label24
 
    59 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    60 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    61 op pow .mapTotal *tmp35 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    62 set :locateOreAway:x :findDrillLocationLocal:oreX
    63 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    64 op mul :locateOreAway:distance 3.8197185279121366 .angle
    65 set :locateOreAway:lastX -1
    66 set :locateOreAway:lastY -1
 
    73 op mul *tmp44 *tmp43 :locateOreAway:distance
    74 op add *tmp45 :findDrillLocationLocal:x *tmp44
    75 op sub *tmp46 @mapw 5
-    * set :limit:value *tmp45
-    * set :limit:low 5
-    * set :limit:high *tmp46
    76 op max *tmp48 *tmp45 5
    77 op min *tmp47 *tmp48 *tmp46
    78 label *label32
 
    81 op mul *tmp51 *tmp50 :locateOreAway:distance
    82 op add *tmp52 :findDrillLocationLocal:y *tmp51
    83 op sub *tmp53 @maph 5
-    * set :limit.1:value *tmp52
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp53
    84 op max *tmp55 *tmp52 5
    85 op min *tmp54 *tmp55 *tmp53
    86 label *label33
    87 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x *tmp47
-    * set :moveTo.2:y *tmp54
-    * set :moveTo.2:radius 5
    88 label *label35
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
+   89 ucontrol within *tmp47 *tmp54 5 *tmp57
    90 jump *label37 notEqual *tmp57 false
-    * op sub *tmp59 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   91 ucontrol approach *tmp47 *tmp54 4.5
    92 label *label36
    93 jump *label35 always
    94 label *label37
 
   122 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   123 set :locateOreAway:lastX :locateOreAway:x
   124 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   125 set *tmp84 .locations
   126 set :visited:i .locationsStart
   127 label *label49
 
   178 label *label59
   179 set :moveTo.3:x :locateOreAway:x
   180 set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :findDrillLocationLocal:oreX
-    * set *tmp108 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  181 set *tmp107 :locateOreAway:x
+  182 set *tmp108 :locateOreAway:y
+  183 set :moveTo.4:x :locateOreAway:x
+  184 set :moveTo.4:y :locateOreAway:y
   185 label *label62
-    * ucontrol within *tmp107 *tmp108 6 *tmp109
+  186 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
   187 jump *label64 notEqual *tmp109 false
-    * op sub *tmp111 6 0.5
-    * ucontrol approach *tmp107 *tmp108 5.5
+  188 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   189 label *label63
   190 jump *label62 always
   191 label *label64
 
   227 label *label73
   228 label *label74
   229 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   230 op add .count .count 1
-    * set *tmp129 .count
   231 sensor *tmp131 :findDrillLocationLocal:item @id
   232 write *tmp131 bank1 .count
   233 op add .count .count 1
 
   270 jump *label65 always
   271 label *label67
   272 jump *label84 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   273 op add .count .count 1
-    * set *tmp153 .count
   274 sensor *tmp155 :findDrillLocationLocal:item @id
   275 write *tmp155 bank1 .count
   276 op add .count .count 1
 
   313 op shr :shiftMask:mask :shiftMask:mask *tmp176
   314 label *label91
   315 jump *label92 equal :shiftMask:shiftX 0
-    * op abs *tmp179 :shiftMask:shiftX
   316 op shr :shiftMask:keep 0b1111111 *tmp163
   317 jump *label94 lessThanEq :shiftMask:shiftX 0
   318 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   333 return :shiftMask*retaddr
   334 end
   335 label *label10
-    * op add *tmp186 :excludeArea:areaWidth 7
   336 op add *tmp187 :excludeArea:areaWidth 8
   337 op idiv *tmp188 *tmp187 2
   338 op sub *tmp189 :excludeArea:maskX :excludeArea:areaX
   339 op abs *tmp190 *tmp189
   340 op sub :excludeArea:overlapX *tmp188 *tmp190
-    * op add *tmp192 :excludeArea:areaHeight 7
   341 op add *tmp193 :excludeArea:areaHeight 8
   342 op idiv *tmp194 *tmp193 2
   343 op sub *tmp195 :excludeArea:maskY :excludeArea:areaY
 
   349 jump *label97 equal *tmp200 false
   350 op min :excludeArea:blockSizeX 7 :excludeArea:overlapX
   351 op min :excludeArea:blockSizeY 7 :excludeArea:overlapY
-    * set :createMatrixOfSize:width :excludeArea:blockSizeX
-    * set :createMatrixOfSize:height :excludeArea:blockSizeY
   352 op shl *tmp205 1 :excludeArea:blockSizeX
   353 op sub :createMatrixOfSize:row *tmp205 1
   354 set :createMatrixOfSize:matrix :createMatrixOfSize:row
 
   368 set *tmp204 :createMatrixOfSize:matrix
   369 jump *label99 always
   370 label *label99
-    * set :excludeArea:blocked :createMatrixOfSize:matrix
   371 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
   372 op sub *tmp212 7 :excludeArea:blockSizeX
   373 op mul :excludeArea:shiftX *tmp211 *tmp212
   374 op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY
   375 op sub *tmp215 7 :excludeArea:blockSizeY
   376 op mul :excludeArea:shiftY *tmp214 *tmp215
-    * set :shiftMask:mask *tmp204
+  377 set :shiftMask:mask :createMatrixOfSize:matrix
   378 set :shiftMask:shiftX :excludeArea:shiftX
   379 set :shiftMask:shiftY :excludeArea:shiftY
   380 setaddr :shiftMask*retaddr *label105 (h:*label105)
   381 call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
   382 label *label105
-    * set :excludeArea:shifted :shiftMask*retval
   383 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   384 jump *label96 always
   385 jump *label98 always
 
   387 set :excludeArea*retval :excludeArea:mask
   388 jump *label96 always
   389 label *label98
-    * set :excludeArea*retval null
   390 label *label96
   391 return :excludeArea*retaddr
   392 end
 
   440 setaddr :findPossiblePlacement*retaddr *label120 (h:*label120)
   441 call *label11 *invalid :findPossiblePlacement*retval (m:*label120) (h:*label120)
   442 label *label120
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   443 jump *label121 lessThan :findPossiblePlacement*retval 0
   444 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   445 set :tryPlaceGenerator*retval false
 
   450 op add .water2X *tmp238 :findPossiblePlacement:x
   451 op add *tmp240 :tryPlaceGenerator:centerY 0.5
   452 op add .water2Y *tmp240 :findPossiblePlacement:y
-    * op add *tmp242 :tryPlaceGenerator:centerX 0.5
   453 op add .generatorX *tmp238 :findPossiblePlacement:x
   454 op add *tmp244 :tryPlaceGenerator:centerY 2.5
   455 op add .generatorY *tmp244 :findPossiblePlacement:y
 
   464 setaddr :findPossiblePlacement*retaddr *label125 (h:*label125)
   465 call *label11 *invalid :findPossiblePlacement*retval (m:*label125) (h:*label125)
   466 label *label125
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   467 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   468 set :tryPlaceGenerator*retval false
   469 jump *label119 always
 
   475 op add .water2Y *tmp252 :findPossiblePlacement:y
   476 op add *tmp254 :tryPlaceGenerator:centerX 2.5
   477 op add .generatorX *tmp254 :findPossiblePlacement:x
-    * op add *tmp256 :tryPlaceGenerator:centerY 0.5
   478 op add .generatorY *tmp252 :findPossiblePlacement:y
   479 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   480 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
   481 label *label122
   482 set :createFixedMatrix:row0 0b1100011
-    * set :createFixedMatrix:row1 0b1000001
-    * set :createFixedMatrix:row2 0b0000000
-    * set :createFixedMatrix:row3 0b0000000
-    * set :createFixedMatrix:row4 0b0000000
-    * set :createFixedMatrix:row5 0b1000001
-    * set :createFixedMatrix:row6 0b1100011
-    * set *tmp260 0b1100011
-    * op shl *tmp261 0b1000001 7
-    * op or *tmp262 :createFixedMatrix:row0 8320
-    * op shl *tmp263 0b0000000 14
-    * op or *tmp264 *tmp262 0
-    * op shl *tmp265 0b0000000 21
-    * op or *tmp266 *tmp264 0
-    * op shl *tmp267 0b0000000 28
-    * op or *tmp268 *tmp266 0
-    * op shl *tmp269 0b1000001 35
-    * op or *tmp270 *tmp268 2233382993920
-    * op shl *tmp271 0b1100011 42
-    * op or *tmp259 *tmp270 435406604599296
+  483 op or *tmp262 0b1100011 8320
+  484 op or *tmp264 8419 0
+  485 op or *tmp266 8419 0
+  486 op or *tmp268 8419 0
+  487 op or *tmp270 8419 2233382993920
+  488 op or *tmp259 2233383002339 435406604599296
   489 label *label128
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp259
+  490 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   491 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   492 set :findPossiblePlacement:placementMask 1
   493 set :findPossiblePlacement:width 1
 
   495 setaddr :findPossiblePlacement*retaddr *label129 (h:*label129)
   496 call *label11 *invalid :findPossiblePlacement*retval (m:*label129) (h:*label129)
   497 label *label129
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   498 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   499 set :tryPlaceGenerator*retval false
   500 jump *label119 always
 
   511 setaddr :findPossiblePlacement*retaddr *label132 (h:*label132)
   512 call *label11 *invalid :findPossiblePlacement*retval (m:*label132) (h:*label132)
   513 label *label132
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   514 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   515 set :tryPlaceGenerator*retval false
   516 jump *label119 always
 
   547 setaddr :findPossiblePlacement*retaddr *label137 (h:*label137)
   548 call *label11 *invalid :findPossiblePlacement*retval (m:*label137) (h:*label137)
   549 label *label137
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   550 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   551 set :tryPlaceGenerator*retval false
   552 jump *label119 always
 
   554 label *label139
   555 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   556 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp310 1 :findPossiblePlacement*retval
   557 label *label135
   558 label *label136
   559 set :tryPlaceGenerator*retval true
 
   611 setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
   612 call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
   613 label *label151
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   614 op shl *tmp327 :createAdjacentMask:row1 1
   615 op or *tmp328 :createAdjacentMask:row2 *tmp327
   616 op shr *tmp329 :createAdjacentMask:row1 1
 
   627 label *label150
   628 op shr *tmp320 :createAdjacentMask:result 1
   629 label *label145
-    * set :createCombinedMask:adjacentMask *tmp320
   630 label *label152
   631 wait 1e-15
   632 read *tmp336 processor1 ":createTerrainMask*finished"
 
   658 set .water1X -1
   659 set :moveTo.5:x .drillX
   660 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   661 label *label156
   662 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
   663 jump *label158 notEqual *tmp339 false
-    * op sub *tmp341 1 0.5
   664 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   665 label *label157
   666 jump *label156 always
 
   671 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   672 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   673 label *label159
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   674 set :createFixedMatrix.1:row0 0b0000000
-    * set :createFixedMatrix.1:row1 0b0000000
-    * set :createFixedMatrix.1:row2 0b0011100
-    * set :createFixedMatrix.1:row3 0b0011100
-    * set :createFixedMatrix.1:row4 0b0011100
-    * set :createFixedMatrix.1:row5 0b0000000
-    * set :createFixedMatrix.1:row6 0b0000000
-    * set *tmp344 0b0000000
-    * op shl *tmp345 0b0000000 7
-    * op or *tmp346 :createFixedMatrix.1:row0 0
-    * op shl *tmp347 0b0011100 14
-    * op or *tmp348 *tmp346 458752
-    * op shl *tmp349 0b0011100 21
-    * op or *tmp350 *tmp348 58720256
-    * op shl *tmp351 0b0011100 28
-    * op or *tmp352 *tmp350 7516192768
-    * op shl *tmp353 0b0000000 35
-    * op or *tmp354 *tmp352 0
-    * op shl *tmp355 0b0000000 42
-    * op or *tmp343 *tmp354 0
+  675 op or *tmp346 0b0000000 0
+  676 op or *tmp348 0 458752
+  677 op or *tmp350 458752 58720256
+  678 op or *tmp352 59179008 7516192768
+  679 op or *tmp354 7575371776 0
+  680 op or *tmp343 7575371776 0
   681 label *label160
-    * op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp343
+  682 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   683 set :createFixedMatrix.2:row0 0b1000001
-    * set :createFixedMatrix.2:row1 0b0000000
-    * set :createFixedMatrix.2:row2 0b0011100
-    * set :createFixedMatrix.2:row3 0b0011100
-    * set :createFixedMatrix.2:row4 0b0011100
-    * set :createFixedMatrix.2:row5 0b0000000
-    * set :createFixedMatrix.2:row6 0b1000001
-    * set *tmp359 0b1000001
-    * op shl *tmp360 0b0000000 7
-    * op or *tmp361 :createFixedMatrix.2:row0 0
-    * op shl *tmp362 0b0011100 14
-    * op or *tmp363 *tmp361 458752
-    * op shl *tmp364 0b0011100 21
-    * op or *tmp365 *tmp363 58720256
-    * op shl *tmp366 0b0011100 28
-    * op or *tmp367 *tmp365 7516192768
-    * op shl *tmp368 0b0000000 35
-    * op or *tmp369 *tmp367 0
-    * op shl *tmp370 0b1000001 42
-    * op or *tmp358 *tmp369 285873023221760
+  684 op or *tmp361 0b1000001 0
+  685 op or *tmp363 65 458752
+  686 op or *tmp365 458817 58720256
+  687 op or *tmp367 59179073 7516192768
+  688 op or *tmp369 7575371841 0
+  689 op or *tmp358 7575371841 285873023221760
   690 label *label161
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp358
+  691 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   692 set :createFixedMatrix.3:row0 0b11
-    * set :createFixedMatrix.3:row1 0b11
-    * set *tmp374 0b11
-    * op shl *tmp375 0b11 7
-    * op or *tmp373 :createFixedMatrix.3:row0 384
+  693 op or *tmp373 0b11 384
   694 label *label162
-    * set :layoutThoriumDrillAtLocation:mask2x2 *tmp373
+  695 set :layoutThoriumDrillAtLocation:mask2x2 387
   696 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask *tmp373
+  697 set :findPossiblePlacement:placementMask 387
   698 set :findPossiblePlacement:width 2
   699 set :findPossiblePlacement:height 2
   700 setaddr :findPossiblePlacement*retaddr *label163 (h:*label163)
   701 call *label11 *invalid :findPossiblePlacement*retval (m:*label163) (h:*label163)
   702 label *label163
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   703 jump *label164 lessThan :findPossiblePlacement*retval 0
   704 op add *tmp380 .drillX 0.5
   705 op add .water1X *tmp380 :findPossiblePlacement:x
 
   707 op add .water1Y *tmp382 :findPossiblePlacement:y
   708 op shl *tmp384 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   709 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
-    * op shl *tmp385 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   710 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp384
   711 label *label164
   712 label *label165
 
   717 setaddr :findPossiblePlacement*retaddr *label166 (h:*label166)
   718 call *label11 *invalid :findPossiblePlacement*retval (m:*label166) (h:*label166)
   719 label *label166
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   720 jump *label167 lessThan :findPossiblePlacement*retval 0
   721 op add *tmp389 .drillX 0.5
   722 op add .containerX *tmp389 :findPossiblePlacement:x
 
   727 label *label167
   728 label *label168
   729 set :createFixedMatrix.4:row0 0b1100011
-    * set :createFixedMatrix.4:row1 0b1000001
-    * set :createFixedMatrix.4:row2 0b0000000
-    * set :createFixedMatrix.4:row3 0b0000000
-    * set :createFixedMatrix.4:row4 0b0000000
-    * set :createFixedMatrix.4:row5 0b1000001
-    * set :createFixedMatrix.4:row6 0b1100011
-    * set *tmp395 0b1100011
-    * op shl *tmp396 0b1000001 7
-    * op or *tmp397 :createFixedMatrix.4:row0 8320
-    * op shl *tmp398 0b0000000 14
-    * op or *tmp399 *tmp397 0
-    * op shl *tmp400 0b0000000 21
-    * op or *tmp401 *tmp399 0
-    * op shl *tmp402 0b0000000 28
-    * op or *tmp403 *tmp401 0
-    * op shl *tmp404 0b1000001 35
-    * op or *tmp405 *tmp403 2233382993920
-    * op shl *tmp406 0b1100011 42
-    * op or *tmp394 *tmp405 435406604599296
+  730 op or *tmp397 0b1100011 8320
+  731 op or *tmp399 8419 0
+  732 op or *tmp401 8419 0
+  733 op or *tmp403 8419 0
+  734 op or *tmp405 8419 2233382993920
+  735 op or *tmp394 2233383002339 435406604599296
   736 label *label169
-    * op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask *tmp394
+  737 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   738 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   739 set :findPossiblePlacement:placementMask 1
   740 set :findPossiblePlacement:width 1
 
   742 setaddr :findPossiblePlacement*retaddr *label170 (h:*label170)
   743 call *label11 *invalid :findPossiblePlacement*retval (m:*label170) (h:*label170)
   744 label *label170
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   745 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   746 set :layoutThoriumDrillAtLocation*retval false
   747 jump *label154 always
 
   752 op shl *tmp414 1 :findPossiblePlacement*retval
   753 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
   754 set :createFixedMatrix.5:row0 0b1111
-    * set :createFixedMatrix.5:row1 0b1111
-    * set *tmp416 0b1111
-    * op shl *tmp417 0b1111 7
-    * op or *tmp415 :createFixedMatrix.5:row0 1920
+  755 op or *tmp415 0b1111 1920
   756 label *label173
-    * set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp415
+  757 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   758 set :createFixedMatrix.6:row0 0b11
-    * set :createFixedMatrix.6:row1 0b11
-    * set :createFixedMatrix.6:row2 0b11
-    * set :createFixedMatrix.6:row3 0b11
-    * set *tmp420 0b11
-    * op shl *tmp421 0b11 7
-    * op or *tmp422 :createFixedMatrix.6:row0 384
-    * op shl *tmp423 0b11 14
-    * op or *tmp424 *tmp422 49152
-    * op shl *tmp425 0b11 21
-    * op or *tmp419 *tmp424 6291456
+  759 op or *tmp422 0b11 384
+  760 op or *tmp424 387 49152
+  761 op or *tmp419 49539 6291456
   762 label *label174
-    * set :layoutThoriumDrillAtLocation:generatorVertical *tmp419
+  763 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   764 set :tryPlaceGenerator:centerX .drillX
   765 set :tryPlaceGenerator:centerY .drillY
   766 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal *tmp415
-    * set :tryPlaceGenerator:generatorVertical *tmp419
+  767 set :tryPlaceGenerator:generatorHorizontal 1935
+  768 set :tryPlaceGenerator:generatorVertical 6340995
   769 setaddr :tryPlaceGenerator*retaddr *label175 (h:*label175)
   770 call *label12 *invalid :tryPlaceGenerator*retval (m:*label175) (h:*label175)
   771 label *label175
 
   807 setaddr :shiftMask*retaddr *label186 (h:*label186)
   808 call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
   809 label *label186
-    * set :layoutThoriumDrillAtLocation:shiftedMask :shiftMask*retval
   810 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   811 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
   812 op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-51 instructions):
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 :findDrillLocationLocal:x
-    * set *tmp26 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    34 label *label22
-    * ucontrol within .coreX .coreY 6 *tmp27
+   35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label24 notEqual *tmp27 false
-    * ucontrol approach .coreX .coreY 5.5
+   37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label23
    39 jump *label22 always
    40 label *label24
 
    70 op max *tmp48 *tmp45 5
    71 op min *tmp47 *tmp48 *tmp46
    72 label *label32
-    * set :locateOreAway:lx *tmp47
    73 op cos *tmp50 :locateOreAway:a
    74 op mul *tmp51 *tmp50 :locateOreAway:distance
    75 op add *tmp52 :findDrillLocationLocal:y *tmp51
 
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label33
-    * set :locateOreAway:ly *tmp54
    80 label *label35
    81 ucontrol within *tmp47 *tmp54 5 *tmp57
    82 jump *label37 notEqual *tmp57 false
 
   168 op add .mapSpots .mapSpots 1
   169 label *label58
   170 label *label59
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :locateOreAway:x
-    * set *tmp108 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   171 label *label62
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
+  172 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   173 jump *label64 notEqual *tmp109 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  174 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   175 label *label63
   176 jump *label62 always
   177 label *label64
 
   351 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
   352 jump *label100 always
   353 label *label102
-    * set *tmp204 :createMatrixOfSize:matrix
   354 jump *label99 always
   355 label *label99
   356 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
 
   464 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   465 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
   466 label *label122
-    * set :createFixedMatrix:row0 0b1100011
-    * op or *tmp262 0b1100011 8320
-    * op or *tmp264 8419 0
-    * op or *tmp266 8419 0
-    * op or *tmp268 8419 0
-    * op or *tmp270 8419 2233382993920
-    * op or *tmp259 2233383002339 435406604599296
   467 label *label128
   468 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   469 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   649 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   650 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   651 label *label159
-    * set :createFixedMatrix.1:row0 0b0000000
-    * op or *tmp346 0b0000000 0
-    * op or *tmp348 0 458752
-    * op or *tmp350 458752 58720256
-    * op or *tmp352 59179008 7516192768
-    * op or *tmp354 7575371776 0
-    * op or *tmp343 7575371776 0
   652 label *label160
   653 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * set :createFixedMatrix.2:row0 0b1000001
-    * op or *tmp361 0b1000001 0
-    * op or *tmp363 65 458752
-    * op or *tmp365 458817 58720256
-    * op or *tmp367 59179073 7516192768
-    * op or *tmp369 7575371841 0
-    * op or *tmp358 7575371841 285873023221760
   654 label *label161
   655 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :createFixedMatrix.3:row0 0b11
-    * op or *tmp373 0b11 384
   656 label *label162
   657 set :layoutThoriumDrillAtLocation:mask2x2 387
   658 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   688 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
   689 label *label167
   690 label *label168
-    * set :createFixedMatrix.4:row0 0b1100011
-    * op or *tmp397 0b1100011 8320
-    * op or *tmp399 8419 0
-    * op or *tmp401 8419 0
-    * op or *tmp403 8419 0
-    * op or *tmp405 8419 2233382993920
-    * op or *tmp394 2233383002339 435406604599296
   691 label *label169
   692 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   693 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
 
   706 op add .node1Y .drillY :findPossiblePlacement:y
   707 op shl *tmp414 1 :findPossiblePlacement*retval
   708 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
-    * set :createFixedMatrix.5:row0 0b1111
-    * op or *tmp415 0b1111 1920
   709 label *label173
   710 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * set :createFixedMatrix.6:row0 0b11
-    * op or *tmp422 0b11 384
-    * op or *tmp424 387 49152
-    * op or *tmp419 49539 6291456
   711 label *label174
   712 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   713 set :tryPlaceGenerator:centerX .drillX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    60 set :locateOreAway:lastY -1
    61 op max .angle .angle @pi
    62 op mul .mapProgress .angle .angle
+   63 op sub *tmp46 @mapw 5
+   64 op sub *tmp53 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp43 :locateOreAway:a
    69 op mul *tmp44 *tmp43 :locateOreAway:distance
    70 op add *tmp45 :findDrillLocationLocal:x *tmp44
-    * op sub *tmp46 @mapw 5
    71 op max *tmp48 *tmp45 5
    72 op min *tmp47 *tmp48 *tmp46
    73 label *label32
    74 op cos *tmp50 :locateOreAway:a
    75 op mul *tmp51 *tmp50 :locateOreAway:distance
    76 op add *tmp52 :findDrillLocationLocal:y *tmp51
-    * op sub *tmp53 @maph 5
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label33

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    64 op sub *tmp53 @maph 5
    65 label *label29
    66 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   67 label *label202
    68 op div :locateOreAway:a .angle @degToRad
    69 op sin *tmp43 :locateOreAway:a
    70 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   119 set :visited:i .locationsStart
   120 label *label49
   121 jump *label51 greaterThanEq :visited:i *tmp84
+  122 label *label203
   123 op mul :visited:index 4 :visited:i
   124 op add *tmp87 :visited:index 2
   125 read :visited:lx bank1 *tmp87
 
   135 label *label53
   136 label *label50
   137 op add :visited:i :visited:i 1
-    * jump *label49 always
+  138 jump *label203 lessThan :visited:i *tmp84
   139 label *label51
   140 set *tmp83 false
   141 jump *label48 always
 
   154 label *label44
   155 label *label45
   156 label *label30
-    * jump *label29 always
+  157 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   158 label *label31
   159 set *tmp37 false
   160 jump *label28 always
 
   342 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   343 set :createMatrixOfSize:i 1
   344 label *label100
-    * jump *label102 greaterThanEq :createMatrixOfSize:i 7
+  345 label *label204
   346 jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
   347 jump *label102 always
   348 label *label103
 
   351 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   352 label *label101
   353 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label100 always
+  354 jump *label204 lessThan :createMatrixOfSize:i 7
   355 label *label102
   356 jump *label99 always
   357 label *label99
 
   381 set :findPossiblePlacement:y -3
   382 label *label107
   383 jump *label109 greaterThan :findPossiblePlacement:y 3
+  384 label *label205
   385 op add *tmp218 :findPossiblePlacement:y 3
   386 op mul *tmp219 7 *tmp218
   387 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp219
   388 set :findPossiblePlacement:x -3
   389 label *label110
   390 jump *label112 greaterThan :findPossiblePlacement:x 3
+  391 label *label206
   392 op and *tmp221 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   393 jump *label113 notEqual *tmp221 0
   394 op mul *tmp224 :findPossiblePlacement:y 7
 
   405 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   406 label *label111
   407 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label110 always
+  408 jump *label206 lessThanEq :findPossiblePlacement:x 3
   409 label *label112
   410 op sub *tmp230 3 :findPossiblePlacement:height
   411 jump *label117 lessThanEq :findPossiblePlacement:y *tmp230
 
   414 label *label118
   415 label *label108
   416 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label107 always
+  417 jump *label205 lessThanEq :findPossiblePlacement:y 3
   418 label *label109
   419 set :findPossiblePlacement*retval -1
   420 jump *label106 always
 
   547 set :createBlockMaskRow:result 0
   548 set :createBlockMaskRow:c 4
   549 label *label141
-    * jump *label143 lessThan :createBlockMaskRow:c -4
+  550 label *label207
   551 op shl *tmp311 :createBlockMaskRow:result 1
   552 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
   553 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   554 op or :createBlockMaskRow:result *tmp311 *tmp313
   555 label *label142
   556 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label141 always
+  557 jump *label207 greaterThanEq :createBlockMaskRow:c -4
   558 label *label143
   559 set :createBlockMaskRow*retval :createBlockMaskRow:result
   560 jump *label140 always
 
   586 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   587 set :createAdjacentMask:r 2
   588 label *label148
-    * jump *label150 lessThan :createAdjacentMask:r -4
+  589 label *label208
   590 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
   591 set :createBlockMaskRow:x :createAdjacentMask:x
   592 set :createBlockMaskRow:y *tmp325
 
   605 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   606 label *label149
   607 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label148 always
+  608 jump *label208 greaterThanEq :createAdjacentMask:r -4
   609 label *label150
   610 op shr *tmp320 :createAdjacentMask:result 1
   611 label *label145

Modifications by Replicate loop condition at OreLocator.mnd:44:5 (+1 instructions):
 
    81 label *label35
    82 ucontrol within *tmp47 *tmp54 5 *tmp57
    83 jump *label37 notEqual *tmp57 false
+   84 label *label209
    85 ucontrol approach *tmp47 *tmp54 4.5
    86 label *label36
-    * jump *label35 always
+   87 ucontrol within *tmp47 *tmp54 5 *tmp57
+   88 jump *label209 equal *tmp57 false
    89 label *label37
    90 label *label34
    91 op div *tmp60 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   120 set *tmp84 .locations
   121 set :visited:i .locationsStart
   122 label *label49
-    * jump *label51 greaterThanEq :visited:i *tmp84
+  123 jump *label51 greaterThanEq .locationsStart *tmp84
   124 label *label203
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp87 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:473:5 (+39 instructions):
 
   547 end
   548 label *label13
   549 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label141
-    * label *label207
-    * op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
-    * op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label142
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label207 greaterThanEq :createBlockMaskRow:c -4
-    * label *label143
+  550 set :createBlockMaskRow:c 4
+  551 label *label210
+  552 label *label211
+  553 op shl *tmp311 :createBlockMaskRow:result 1
+  554 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  555 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  556 op or :createBlockMaskRow:result *tmp311 *tmp313
+  557 label *label212
+  558 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  559 label *label213
+  560 op shl *tmp311 :createBlockMaskRow:result 1
+  561 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  562 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  563 op or :createBlockMaskRow:result *tmp311 *tmp313
+  564 label *label214
+  565 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  566 label *label215
+  567 op shl *tmp311 :createBlockMaskRow:result 1
+  568 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  569 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  570 op or :createBlockMaskRow:result *tmp311 *tmp313
+  571 label *label216
+  572 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  573 label *label217
+  574 op shl *tmp311 :createBlockMaskRow:result 1
+  575 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  576 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  577 op or :createBlockMaskRow:result *tmp311 *tmp313
+  578 label *label218
+  579 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  580 label *label219
+  581 op shl *tmp311 :createBlockMaskRow:result 1
+  582 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  583 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  584 op or :createBlockMaskRow:result *tmp311 *tmp313
+  585 label *label220
+  586 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  587 label *label221
+  588 op shl *tmp311 :createBlockMaskRow:result 1
+  589 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  590 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  591 op or :createBlockMaskRow:result *tmp311 *tmp313
+  592 label *label222
+  593 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  594 label *label223
+  595 op shl *tmp311 :createBlockMaskRow:result 1
+  596 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  597 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  598 op or :createBlockMaskRow:result *tmp311 *tmp313
+  599 label *label224
+  600 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  601 label *label225
+  602 op shl *tmp311 :createBlockMaskRow:result 1
+  603 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  604 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  605 op or :createBlockMaskRow:result *tmp311 *tmp313
+  606 label *label226
+  607 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  608 label *label227
+  609 op shl *tmp311 :createBlockMaskRow:result 1
+  610 op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  611 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  612 op or :createBlockMaskRow:result *tmp311 *tmp313
+  613 label *label228
+  614 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  615 label *label143
   616 set :createBlockMaskRow*retval :createBlockMaskRow:result
   617 jump *label140 always
   618 label *label140

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   550 set :createBlockMaskRow:c 4
   551 label *label210
   552 label *label211
-    * op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  553 op shl *tmp311 0 1
+  554 op add *tmp312 :createBlockMaskRow:x 4
   555 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
-    * op or :createBlockMaskRow:result *tmp311 *tmp313
+  556 op or :createBlockMaskRow:result 0 *tmp313
   557 label *label212
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  558 op sub :createBlockMaskRow:c 4 1
   559 label *label213
   560 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  561 op add *tmp312 :createBlockMaskRow:x 3
   562 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   563 op or :createBlockMaskRow:result *tmp311 *tmp313
   564 label *label214
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  565 op sub :createBlockMaskRow:c 3 1
   566 label *label215
   567 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  568 op add *tmp312 :createBlockMaskRow:x 2
   569 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   570 op or :createBlockMaskRow:result *tmp311 *tmp313
   571 label *label216
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  572 op sub :createBlockMaskRow:c 2 1
   573 label *label217
   574 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  575 op add *tmp312 :createBlockMaskRow:x 1
   576 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   577 op or :createBlockMaskRow:result *tmp311 *tmp313
   578 label *label218
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  579 op sub :createBlockMaskRow:c 1 1
   580 label *label219
   581 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  582 op add *tmp312 :createBlockMaskRow:x 0
   583 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   584 op or :createBlockMaskRow:result *tmp311 *tmp313
   585 label *label220
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  586 op sub :createBlockMaskRow:c 0 1
   587 label *label221
   588 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  589 op add *tmp312 :createBlockMaskRow:x -1
   590 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   591 op or :createBlockMaskRow:result *tmp311 *tmp313
   592 label *label222
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  593 op sub :createBlockMaskRow:c -1 1
   594 label *label223
   595 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  596 op add *tmp312 :createBlockMaskRow:x -2
   597 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   598 op or :createBlockMaskRow:result *tmp311 *tmp313
   599 label *label224
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  600 op sub :createBlockMaskRow:c -2 1
   601 label *label225
   602 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  603 op add *tmp312 :createBlockMaskRow:x -3
   604 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   605 op or :createBlockMaskRow:result *tmp311 *tmp313
   606 label *label226
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  607 op sub :createBlockMaskRow:c -3 1
   608 label *label227
   609 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x :createBlockMaskRow:c
+  610 op add *tmp312 :createBlockMaskRow:x -4
   611 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   612 op or :createBlockMaskRow:result *tmp311 *tmp313
   613 label *label228
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  614 op sub :createBlockMaskRow:c -4 1
   615 label *label143
   616 set :createBlockMaskRow*retval :createBlockMaskRow:result
   617 jump *label140 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   546 return :tryPlaceGenerator*retaddr
   547 end
   548 label *label13
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   549 label *label210
   550 label *label211
-    * op shl *tmp311 0 1
   551 op add *tmp312 :createBlockMaskRow:x 4
   552 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   553 op or :createBlockMaskRow:result 0 *tmp313
   554 label *label212
-    * op sub :createBlockMaskRow:c 4 1
   555 label *label213
   556 op shl *tmp311 :createBlockMaskRow:result 1
   557 op add *tmp312 :createBlockMaskRow:x 3
   558 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   559 op or :createBlockMaskRow:result *tmp311 *tmp313
   560 label *label214
-    * op sub :createBlockMaskRow:c 3 1
   561 label *label215
   562 op shl *tmp311 :createBlockMaskRow:result 1
   563 op add *tmp312 :createBlockMaskRow:x 2
   564 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   565 op or :createBlockMaskRow:result *tmp311 *tmp313
   566 label *label216
-    * op sub :createBlockMaskRow:c 2 1
   567 label *label217
   568 op shl *tmp311 :createBlockMaskRow:result 1
   569 op add *tmp312 :createBlockMaskRow:x 1
   570 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   571 op or :createBlockMaskRow:result *tmp311 *tmp313
   572 label *label218
-    * op sub :createBlockMaskRow:c 1 1
   573 label *label219
   574 op shl *tmp311 :createBlockMaskRow:result 1
   575 op add *tmp312 :createBlockMaskRow:x 0
   576 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   577 op or :createBlockMaskRow:result *tmp311 *tmp313
   578 label *label220
-    * op sub :createBlockMaskRow:c 0 1
   579 label *label221
   580 op shl *tmp311 :createBlockMaskRow:result 1
   581 op add *tmp312 :createBlockMaskRow:x -1
   582 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   583 op or :createBlockMaskRow:result *tmp311 *tmp313
   584 label *label222
-    * op sub :createBlockMaskRow:c -1 1
   585 label *label223
   586 op shl *tmp311 :createBlockMaskRow:result 1
   587 op add *tmp312 :createBlockMaskRow:x -2
   588 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   589 op or :createBlockMaskRow:result *tmp311 *tmp313
   590 label *label224
-    * op sub :createBlockMaskRow:c -2 1
   591 label *label225
   592 op shl *tmp311 :createBlockMaskRow:result 1
   593 op add *tmp312 :createBlockMaskRow:x -3
   594 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   595 op or :createBlockMaskRow:result *tmp311 *tmp313
   596 label *label226
-    * op sub :createBlockMaskRow:c -3 1
   597 label *label227
   598 op shl *tmp311 :createBlockMaskRow:result 1
   599 op add *tmp312 :createBlockMaskRow:x -4
   600 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   601 op or :createBlockMaskRow:result *tmp311 *tmp313
   602 label *label228
-    * op sub :createBlockMaskRow:c -4 1
   603 label *label143
   604 set :createBlockMaskRow*retval :createBlockMaskRow:result
   605 jump *label140 always

Modifications by Replicate loop condition at OreLocator.mnd:44:5 (+1 instructions):
 
   175 label *label62
   176 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   177 jump *label64 notEqual *tmp109 false
+  178 label *label229
   179 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   180 label *label63
-    * jump *label62 always
+  181 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
+  182 jump *label229 equal *tmp109 false
   183 label *label64
   184 label *label61
   185 label *label60

Modifications by Unroll loop at OreLocator.mnd:352:5 (+24 instructions):
 
   344 op shl *tmp205 1 :excludeArea:blockSizeX
   345 op sub :createMatrixOfSize:row *tmp205 1
   346 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
-    * label *label100
-    * label *label204
-    * jump *label103 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
-    * jump *label102 always
-    * label *label103
-    * label *label104
-    * op shl *tmp209 :createMatrixOfSize:matrix 7
-    * op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label101
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
-    * jump *label204 lessThan :createMatrixOfSize:i 7
-    * label *label102
+  347 set :createMatrixOfSize:i 1
+  348 label *label230
+  349 label *label231
+  350 jump *label232 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  351 jump *label102 always
+  352 label *label232
+  353 label *label233
+  354 op shl *tmp209 :createMatrixOfSize:matrix 7
+  355 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  356 label *label234
+  357 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  358 label *label235
+  359 jump *label236 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  360 jump *label102 always
+  361 label *label236
+  362 label *label237
+  363 op shl *tmp209 :createMatrixOfSize:matrix 7
+  364 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  365 label *label238
+  366 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  367 label *label239
+  368 jump *label240 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  369 jump *label102 always
+  370 label *label240
+  371 label *label241
+  372 op shl *tmp209 :createMatrixOfSize:matrix 7
+  373 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  374 label *label242
+  375 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  376 label *label243
+  377 jump *label244 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  378 jump *label102 always
+  379 label *label244
+  380 label *label245
+  381 op shl *tmp209 :createMatrixOfSize:matrix 7
+  382 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  383 label *label246
+  384 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  385 label *label247
+  386 jump *label248 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  387 jump *label102 always
+  388 label *label248
+  389 label *label249
+  390 op shl *tmp209 :createMatrixOfSize:matrix 7
+  391 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  392 label *label250
+  393 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  394 label *label251
+  395 jump *label252 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  396 jump *label102 always
+  397 label *label252
+  398 label *label253
+  399 op shl *tmp209 :createMatrixOfSize:matrix 7
+  400 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
+  401 label *label254
+  402 op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  403 label *label102
   404 jump *label99 always
   405 label *label99
   406 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   347 set :createMatrixOfSize:i 1
   348 label *label230
   349 label *label231
-    * jump *label232 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  350 jump *label232 lessThan 1 :excludeArea:blockSizeY
   351 jump *label102 always
   352 label *label232
   353 label *label233
-    * op shl *tmp209 :createMatrixOfSize:matrix 7
+  354 op shl *tmp209 :createMatrixOfSize:row 7
   355 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   356 label *label234
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  357 op add :createMatrixOfSize:i 1 1
   358 label *label235
-    * jump *label236 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  359 jump *label236 lessThan 2 :excludeArea:blockSizeY
   360 jump *label102 always
   361 label *label236
   362 label *label237
   363 op shl *tmp209 :createMatrixOfSize:matrix 7
   364 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   365 label *label238
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  366 op add :createMatrixOfSize:i 2 1
   367 label *label239
-    * jump *label240 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  368 jump *label240 lessThan 3 :excludeArea:blockSizeY
   369 jump *label102 always
   370 label *label240
   371 label *label241
   372 op shl *tmp209 :createMatrixOfSize:matrix 7
   373 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   374 label *label242
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  375 op add :createMatrixOfSize:i 3 1
   376 label *label243
-    * jump *label244 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  377 jump *label244 lessThan 4 :excludeArea:blockSizeY
   378 jump *label102 always
   379 label *label244
   380 label *label245
   381 op shl *tmp209 :createMatrixOfSize:matrix 7
   382 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   383 label *label246
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  384 op add :createMatrixOfSize:i 4 1
   385 label *label247
-    * jump *label248 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  386 jump *label248 lessThan 5 :excludeArea:blockSizeY
   387 jump *label102 always
   388 label *label248
   389 label *label249
   390 op shl *tmp209 :createMatrixOfSize:matrix 7
   391 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   392 label *label250
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  393 op add :createMatrixOfSize:i 5 1
   394 label *label251
-    * jump *label252 lessThan :createMatrixOfSize:i :excludeArea:blockSizeY
+  395 jump *label252 lessThan 6 :excludeArea:blockSizeY
   396 jump *label102 always
   397 label *label252
   398 label *label253
   399 op shl *tmp209 :createMatrixOfSize:matrix 7
   400 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   401 label *label254
-    * op add :createMatrixOfSize:i :createMatrixOfSize:i 1
+  402 op add :createMatrixOfSize:i 6 1
   403 label *label102
   404 jump *label99 always
   405 label *label99

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
   344 op shl *tmp205 1 :excludeArea:blockSizeX
   345 op sub :createMatrixOfSize:row *tmp205 1
   346 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * set :createMatrixOfSize:i 1
   347 label *label230
   348 label *label231
   349 jump *label232 lessThan 1 :excludeArea:blockSizeY
 
   353 op shl *tmp209 :createMatrixOfSize:row 7
   354 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   355 label *label234
-    * op add :createMatrixOfSize:i 1 1
   356 label *label235
   357 jump *label236 lessThan 2 :excludeArea:blockSizeY
   358 jump *label102 always
 
   361 op shl *tmp209 :createMatrixOfSize:matrix 7
   362 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   363 label *label238
-    * op add :createMatrixOfSize:i 2 1
   364 label *label239
   365 jump *label240 lessThan 3 :excludeArea:blockSizeY
   366 jump *label102 always
 
   369 op shl *tmp209 :createMatrixOfSize:matrix 7
   370 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   371 label *label242
-    * op add :createMatrixOfSize:i 3 1
   372 label *label243
   373 jump *label244 lessThan 4 :excludeArea:blockSizeY
   374 jump *label102 always
 
   377 op shl *tmp209 :createMatrixOfSize:matrix 7
   378 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   379 label *label246
-    * op add :createMatrixOfSize:i 4 1
   380 label *label247
   381 jump *label248 lessThan 5 :excludeArea:blockSizeY
   382 jump *label102 always
 
   385 op shl *tmp209 :createMatrixOfSize:matrix 7
   386 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   387 label *label250
-    * op add :createMatrixOfSize:i 5 1
   388 label *label251
   389 jump *label252 lessThan 6 :excludeArea:blockSizeY
   390 jump *label102 always
 
   393 op shl *tmp209 :createMatrixOfSize:matrix 7
   394 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   395 label *label254
-    * op add :createMatrixOfSize:i 6 1
   396 label *label102
   397 jump *label99 always
   398 label *label99

Modifications by Unroll loop at OreLocator.mnd:487:5 (+95 instructions):
 
   668 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
   669 label *label147
   670 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label148
-    * label *label208
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label151 (h:*label151)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label151) (h:*label151)
-    * label *label151
-    * op shl *tmp327 :createAdjacentMask:row1 1
-    * op or *tmp328 :createAdjacentMask:row2 *tmp327
-    * op shr *tmp329 :createAdjacentMask:row1 1
-    * op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
-    * op shl *tmp332 :createAdjacentMask:result 7
-    * op and *tmp333 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp332 *tmp333
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label149
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label208 greaterThanEq :createAdjacentMask:r -4
-    * label *label150
+  671 set :createAdjacentMask:r 2
+  672 label *label255
+  673 label *label256
+  674 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  675 set :createBlockMaskRow:x :createAdjacentMask:x
+  676 set :createBlockMaskRow:y *tmp325
+  677 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
+  678 call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)
+  679 label *label257
+  680 op shl *tmp327 :createAdjacentMask:row1 1
+  681 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  682 op shr *tmp329 :createAdjacentMask:row1 1
+  683 op or *tmp330 *tmp328 *tmp329
+  684 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  685 op shl *tmp332 :createAdjacentMask:result 7
+  686 op and *tmp333 :createAdjacentMask:mask 0xFE
+  687 op or :createAdjacentMask:result *tmp332 *tmp333
+  688 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  689 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  690 label *label258
+  691 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  692 label *label259
+  693 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  694 set :createBlockMaskRow:x :createAdjacentMask:x
+  695 set :createBlockMaskRow:y *tmp325
+  696 setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
+  697 call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)
+  698 label *label260
+  699 op shl *tmp327 :createAdjacentMask:row1 1
+  700 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  701 op shr *tmp329 :createAdjacentMask:row1 1
+  702 op or *tmp330 *tmp328 *tmp329
+  703 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  704 op shl *tmp332 :createAdjacentMask:result 7
+  705 op and *tmp333 :createAdjacentMask:mask 0xFE
+  706 op or :createAdjacentMask:result *tmp332 *tmp333
+  707 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  708 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  709 label *label261
+  710 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  711 label *label262
+  712 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  713 set :createBlockMaskRow:x :createAdjacentMask:x
+  714 set :createBlockMaskRow:y *tmp325
+  715 setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
+  716 call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)
+  717 label *label263
+  718 op shl *tmp327 :createAdjacentMask:row1 1
+  719 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  720 op shr *tmp329 :createAdjacentMask:row1 1
+  721 op or *tmp330 *tmp328 *tmp329
+  722 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  723 op shl *tmp332 :createAdjacentMask:result 7
+  724 op and *tmp333 :createAdjacentMask:mask 0xFE
+  725 op or :createAdjacentMask:result *tmp332 *tmp333
+  726 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  727 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  728 label *label264
+  729 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  730 label *label265
+  731 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  732 set :createBlockMaskRow:x :createAdjacentMask:x
+  733 set :createBlockMaskRow:y *tmp325
+  734 setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
+  735 call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)
+  736 label *label266
+  737 op shl *tmp327 :createAdjacentMask:row1 1
+  738 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  739 op shr *tmp329 :createAdjacentMask:row1 1
+  740 op or *tmp330 *tmp328 *tmp329
+  741 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  742 op shl *tmp332 :createAdjacentMask:result 7
+  743 op and *tmp333 :createAdjacentMask:mask 0xFE
+  744 op or :createAdjacentMask:result *tmp332 *tmp333
+  745 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  746 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  747 label *label267
+  748 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  749 label *label268
+  750 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  751 set :createBlockMaskRow:x :createAdjacentMask:x
+  752 set :createBlockMaskRow:y *tmp325
+  753 setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
+  754 call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)
+  755 label *label269
+  756 op shl *tmp327 :createAdjacentMask:row1 1
+  757 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  758 op shr *tmp329 :createAdjacentMask:row1 1
+  759 op or *tmp330 *tmp328 *tmp329
+  760 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  761 op shl *tmp332 :createAdjacentMask:result 7
+  762 op and *tmp333 :createAdjacentMask:mask 0xFE
+  763 op or :createAdjacentMask:result *tmp332 *tmp333
+  764 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  765 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  766 label *label270
+  767 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  768 label *label271
+  769 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  770 set :createBlockMaskRow:x :createAdjacentMask:x
+  771 set :createBlockMaskRow:y *tmp325
+  772 setaddr :createBlockMaskRow*retaddr *label272 (h:*label272)
+  773 call *label13 *invalid :createBlockMaskRow*retval (m:*label272) (h:*label272)
+  774 label *label272
+  775 op shl *tmp327 :createAdjacentMask:row1 1
+  776 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  777 op shr *tmp329 :createAdjacentMask:row1 1
+  778 op or *tmp330 *tmp328 *tmp329
+  779 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  780 op shl *tmp332 :createAdjacentMask:result 7
+  781 op and *tmp333 :createAdjacentMask:mask 0xFE
+  782 op or :createAdjacentMask:result *tmp332 *tmp333
+  783 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  784 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  785 label *label273
+  786 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  787 label *label274
+  788 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  789 set :createBlockMaskRow:x :createAdjacentMask:x
+  790 set :createBlockMaskRow:y *tmp325
+  791 setaddr :createBlockMaskRow*retaddr *label275 (h:*label275)
+  792 call *label13 *invalid :createBlockMaskRow*retval (m:*label275) (h:*label275)
+  793 label *label275
+  794 op shl *tmp327 :createAdjacentMask:row1 1
+  795 op or *tmp328 :createAdjacentMask:row2 *tmp327
+  796 op shr *tmp329 :createAdjacentMask:row1 1
+  797 op or *tmp330 *tmp328 *tmp329
+  798 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  799 op shl *tmp332 :createAdjacentMask:result 7
+  800 op and *tmp333 :createAdjacentMask:mask 0xFE
+  801 op or :createAdjacentMask:result *tmp332 *tmp333
+  802 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  803 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  804 label *label276
+  805 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  806 label *label150
   807 op shr *tmp320 :createAdjacentMask:result 1
   808 label *label145
   809 label *label152

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   671 set :createAdjacentMask:r 2
   672 label *label255
   673 label *label256
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
+  674 op add *tmp325 :createAdjacentMask:y 2
   675 set :createBlockMaskRow:x :createAdjacentMask:x
   676 set :createBlockMaskRow:y *tmp325
   677 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)

Modifications by Replicate loop condition at OreLocator.mnd:44:5 (+1 instructions):
 
    34 label *label22
    35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label24 notEqual *tmp27 false
+   37 label *label277
    38 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    39 label *label23
-    * jump *label22 always
+   40 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
+   41 jump *label277 equal *tmp27 false
    42 label *label24
    43 label *label21
    44 label *label20

Modifications by Replicate loop condition at OreLocator.mnd:44:5 (+1 instructions):
 
   842 label *label156
   843 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
   844 jump *label158 notEqual *tmp339 false
+  845 label *label278
   846 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   847 label *label157
-    * jump *label156 always
+  848 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
+  849 jump *label278 equal *tmp339 false
   850 label *label158
   851 label *label155
   852 set :createCombinedMask:x .drillX

Modifications by Inline function 'shiftMask' defined at OreLocator.mnd:275:1 (+24 instructions):
 
   284 label *label19
   285 return :findDrillLocationLocal*retaddr
   286 end
-    * label *label9
-    * op abs *tmp163 :shiftMask:shiftX
-    * op greaterThan *tmp164 *tmp163 6
-    * op abs *tmp165 :shiftMask:shiftY
-    * op greaterThan *tmp166 *tmp165 6
-    * op or *tmp167 *tmp164 *tmp166
-    * jump *label88 equal *tmp167 false
-    * set :shiftMask*retval 0
-    * jump *label87 always
-    * label *label88
-    * label *label89
-    * op mul *tmp169 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp169
-    * jump *label90 lessThanEq :shiftMask:shift 0
-    * op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp174 :shiftMask:mask :shiftMask:clearMask
-    * op shl :shiftMask:mask *tmp174 :shiftMask:shift
-    * jump *label91 always
-    * label *label90
-    * op sub *tmp176 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp176
-    * label *label91
-    * jump *label92 equal :shiftMask:shiftX 0
-    * op shr :shiftMask:keep 0b1111111 *tmp163
-    * jump *label94 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * label *label94
-    * label *label95
-    * op shl *tmp183 :shiftMask:keep 7
-    * op or :shiftMask:keep :shiftMask:keep *tmp183
-    * op shl *tmp184 :shiftMask:keep 14
-    * op or :shiftMask:keep :shiftMask:keep *tmp184
-    * op shl *tmp185 :shiftMask:keep 21
-    * op or :shiftMask:keep :shiftMask:keep *tmp185
-    * op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * label *label92
-    * label *label93
-    * set :shiftMask*retval :shiftMask:mask
-    * jump *label87 always
-    * label *label87
-    * return :shiftMask*retaddr
-    * end
   287 label *label10
   288 op add *tmp187 :excludeArea:areaWidth 8
   289 op idiv *tmp188 *tmp187 2
 
   365 set :shiftMask:mask :createMatrixOfSize:matrix
   366 set :shiftMask:shiftX :excludeArea:shiftX
   367 set :shiftMask:shiftY :excludeArea:shiftY
-    * setaddr :shiftMask*retaddr *label105 (h:*label105)
-    * call *label9 *invalid :shiftMask*retval (m:*label105) (h:*label105)
-    * label *label105
+  368 label *label279
+  369 op abs *tmp163 :shiftMask:shiftX
+  370 op greaterThan *tmp164 *tmp163 6
+  371 op abs *tmp165 :shiftMask:shiftY
+  372 op greaterThan *tmp166 *tmp165 6
+  373 op or *tmp167 *tmp164 *tmp166
+  374 jump *label280 equal *tmp167 false
+  375 set :shiftMask*retval 0
+  376 jump *label288 always
+  377 label *label280
+  378 label *label281
+  379 op mul *tmp169 7 :shiftMask:shiftY
+  380 op add :shiftMask:shift :shiftMask:shiftX *tmp169
+  381 jump *label282 lessThanEq :shiftMask:shift 0
+  382 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  383 op and *tmp174 :shiftMask:mask :shiftMask:clearMask
+  384 op shl :shiftMask:mask *tmp174 :shiftMask:shift
+  385 jump *label283 always
+  386 label *label282
+  387 op sub *tmp176 0 :shiftMask:shift
+  388 op shr :shiftMask:mask :shiftMask:mask *tmp176
+  389 label *label283
+  390 jump *label286 equal :shiftMask:shiftX 0
+  391 op shr :shiftMask:keep 0b1111111 *tmp163
+  392 jump *label284 lessThanEq :shiftMask:shiftX 0
+  393 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  394 label *label284
+  395 label *label285
+  396 op shl *tmp183 :shiftMask:keep 7
+  397 op or :shiftMask:keep :shiftMask:keep *tmp183
+  398 op shl *tmp184 :shiftMask:keep 14
+  399 op or :shiftMask:keep :shiftMask:keep *tmp184
+  400 op shl *tmp185 :shiftMask:keep 21
+  401 op or :shiftMask:keep :shiftMask:keep *tmp185
+  402 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  403 label *label286
+  404 label *label287
+  405 set :shiftMask*retval :shiftMask:mask
+  406 jump *label288 always
+  407 label *label288
   408 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   409 jump *label96 always
   410 jump *label98 always
 
   953 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   954 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   955 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * setaddr :shiftMask*retaddr *label186 (h:*label186)
-    * call *label9 *invalid :shiftMask*retval (m:*label186) (h:*label186)
-    * label *label186
+  956 label *label289
+  957 op abs *tmp163 :shiftMask:shiftX
+  958 op greaterThan *tmp164 *tmp163 6
+  959 op abs *tmp165 :shiftMask:shiftY
+  960 op greaterThan *tmp166 *tmp165 6
+  961 op or *tmp167 *tmp164 *tmp166
+  962 jump *label290 equal *tmp167 false
+  963 set :shiftMask*retval 0
+  964 jump *label298 always
+  965 label *label290
+  966 label *label291
+  967 op mul *tmp169 7 :shiftMask:shiftY
+  968 op add :shiftMask:shift :shiftMask:shiftX *tmp169
+  969 jump *label292 lessThanEq :shiftMask:shift 0
+  970 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
+  971 op and *tmp174 :shiftMask:mask :shiftMask:clearMask
+  972 op shl :shiftMask:mask *tmp174 :shiftMask:shift
+  973 jump *label293 always
+  974 label *label292
+  975 op sub *tmp176 0 :shiftMask:shift
+  976 op shr :shiftMask:mask :shiftMask:mask *tmp176
+  977 label *label293
+  978 jump *label296 equal :shiftMask:shiftX 0
+  979 op shr :shiftMask:keep 0b1111111 *tmp163
+  980 jump *label294 lessThanEq :shiftMask:shiftX 0
+  981 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  982 label *label294
+  983 label *label295
+  984 op shl *tmp183 :shiftMask:keep 7
+  985 op or :shiftMask:keep :shiftMask:keep *tmp183
+  986 op shl *tmp184 :shiftMask:keep 14
+  987 op or :shiftMask:keep :shiftMask:keep *tmp184
+  988 op shl *tmp185 :shiftMask:keep 21
+  989 op or :shiftMask:keep :shiftMask:keep *tmp185
+  990 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
+  991 label *label296
+  992 label *label297
+  993 set :shiftMask*retval :shiftMask:mask
+  994 jump *label298 always
+  995 label *label298
   996 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
   997 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
   998 op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   366 set :shiftMask:shiftX :excludeArea:shiftX
   367 set :shiftMask:shiftY :excludeArea:shiftY
   368 label *label279
-    * op abs *tmp163 :shiftMask:shiftX
+  369 op abs *tmp163 :excludeArea:shiftX
   370 op greaterThan *tmp164 *tmp163 6
-    * op abs *tmp165 :shiftMask:shiftY
+  371 op abs *tmp165 :excludeArea:shiftY
   372 op greaterThan *tmp166 *tmp165 6
   373 op or *tmp167 *tmp164 *tmp166
   374 jump *label280 equal *tmp167 false
 
   376 jump *label288 always
   377 label *label280
   378 label *label281
-    * op mul *tmp169 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp169
+  379 op mul *tmp169 7 :excludeArea:shiftY
+  380 op add :shiftMask:shift :excludeArea:shiftX *tmp169
   381 jump *label282 lessThanEq :shiftMask:shift 0
   382 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp174 :shiftMask:mask :shiftMask:clearMask
+  383 op and *tmp174 :createMatrixOfSize:matrix :shiftMask:clearMask
   384 op shl :shiftMask:mask *tmp174 :shiftMask:shift
   385 jump *label283 always
   386 label *label282
   387 op sub *tmp176 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp176
+  388 op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp176
   389 label *label283
-    * jump *label286 equal :shiftMask:shiftX 0
+  390 jump *label286 equal :excludeArea:shiftX 0
   391 op shr :shiftMask:keep 0b1111111 *tmp163
-    * jump *label284 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  392 jump *label284 lessThanEq :excludeArea:shiftX 0
+  393 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   394 label *label284
   395 label *label285
   396 op shl *tmp183 :shiftMask:keep 7
 
   954 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   955 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   956 label *label289
-    * op abs *tmp163 :shiftMask:shiftX
+  957 op abs *tmp163 :layoutThoriumDrillAtLocation:sx
   958 op greaterThan *tmp164 *tmp163 6
-    * op abs *tmp165 :shiftMask:shiftY
+  959 op abs *tmp165 :layoutThoriumDrillAtLocation:sy
   960 op greaterThan *tmp166 *tmp165 6
   961 op or *tmp167 *tmp164 *tmp166
   962 jump *label290 equal *tmp167 false
 
   964 jump *label298 always
   965 label *label290
   966 label *label291
-    * op mul *tmp169 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp169
+  967 op mul *tmp169 7 :layoutThoriumDrillAtLocation:sy
+  968 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp169
   969 jump *label292 lessThanEq :shiftMask:shift 0
   970 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp174 :shiftMask:mask :shiftMask:clearMask
+  971 op and *tmp174 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   972 op shl :shiftMask:mask *tmp174 :shiftMask:shift
   973 jump *label293 always
   974 label *label292
   975 op sub *tmp176 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp176
+  976 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp176
   977 label *label293
-    * jump *label296 equal :shiftMask:shiftX 0
+  978 jump *label296 equal :layoutThoriumDrillAtLocation:sx 0
   979 op shr :shiftMask:keep 0b1111111 *tmp163
-    * jump *label294 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  980 jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  981 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   982 label *label294
   983 label *label295
   984 op shl *tmp183 :shiftMask:keep 7
 
   993 set :shiftMask*retval :shiftMask:mask
   994 jump *label298 always
   995 label *label298
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :shiftMask*retval
+  996 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
   997 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
   998 op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy
   999 set :tryPlaceGenerator:centerX *tmp435

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
   362 op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY
   363 op sub *tmp215 7 :excludeArea:blockSizeY
   364 op mul :excludeArea:shiftY *tmp214 *tmp215
-    * set :shiftMask:mask :createMatrixOfSize:matrix
-    * set :shiftMask:shiftX :excludeArea:shiftX
-    * set :shiftMask:shiftY :excludeArea:shiftY
   365 label *label279
   366 op abs *tmp163 :excludeArea:shiftX
   367 op greaterThan *tmp164 *tmp163 6
 
   946 setaddr :createCombinedMask*retaddr *label185 (h:*label185)
   947 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
   948 label *label185
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   949 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   950 label *label289
   951 op abs *tmp163 :layoutThoriumDrillAtLocation:sx
   952 op greaterThan *tmp164 *tmp163 6

Modifications by Inline function call at OreLocator.mnd:484:16 (+35 instructions):
 
   651 op add *tmp321 :createCombinedMask:y 4
   652 set :createBlockMaskRow:x :createCombinedMask:x
   653 set :createBlockMaskRow:y *tmp321
-    * setaddr :createBlockMaskRow*retaddr *label146 (h:*label146)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label146) (h:*label146)
-    * label *label146
+  654 label *label299
+  655 label *label300
+  656 label *label301
+  657 op add *tmp312 :createBlockMaskRow:x 4
+  658 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  659 op or :createBlockMaskRow:result 0 *tmp313
+  660 label *label302
+  661 label *label303
+  662 op shl *tmp311 :createBlockMaskRow:result 1
+  663 op add *tmp312 :createBlockMaskRow:x 3
+  664 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  665 op or :createBlockMaskRow:result *tmp311 *tmp313
+  666 label *label304
+  667 label *label305
+  668 op shl *tmp311 :createBlockMaskRow:result 1
+  669 op add *tmp312 :createBlockMaskRow:x 2
+  670 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  671 op or :createBlockMaskRow:result *tmp311 *tmp313
+  672 label *label306
+  673 label *label307
+  674 op shl *tmp311 :createBlockMaskRow:result 1
+  675 op add *tmp312 :createBlockMaskRow:x 1
+  676 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  677 op or :createBlockMaskRow:result *tmp311 *tmp313
+  678 label *label308
+  679 label *label309
+  680 op shl *tmp311 :createBlockMaskRow:result 1
+  681 op add *tmp312 :createBlockMaskRow:x 0
+  682 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  683 op or :createBlockMaskRow:result *tmp311 *tmp313
+  684 label *label310
+  685 label *label311
+  686 op shl *tmp311 :createBlockMaskRow:result 1
+  687 op add *tmp312 :createBlockMaskRow:x -1
+  688 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  689 op or :createBlockMaskRow:result *tmp311 *tmp313
+  690 label *label312
+  691 label *label313
+  692 op shl *tmp311 :createBlockMaskRow:result 1
+  693 op add *tmp312 :createBlockMaskRow:x -2
+  694 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  695 op or :createBlockMaskRow:result *tmp311 *tmp313
+  696 label *label314
+  697 label *label315
+  698 op shl *tmp311 :createBlockMaskRow:result 1
+  699 op add *tmp312 :createBlockMaskRow:x -3
+  700 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  701 op or :createBlockMaskRow:result *tmp311 *tmp313
+  702 label *label316
+  703 label *label317
+  704 op shl *tmp311 :createBlockMaskRow:result 1
+  705 op add *tmp312 :createBlockMaskRow:x -4
+  706 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  707 op or :createBlockMaskRow:result *tmp311 *tmp313
+  708 label *label318
+  709 label *label319
+  710 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  711 jump *label320 always
+  712 label *label320
   713 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   714 op add *tmp323 :createAdjacentMask:y 3
   715 set :createBlockMaskRow:x :createAdjacentMask:x

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   654 label *label299
   655 label *label300
   656 label *label301
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  657 op add *tmp312 :createCombinedMask:x 4
+  658 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   659 op or :createBlockMaskRow:result 0 *tmp313
   660 label *label302
   661 label *label303
   662 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  663 op add *tmp312 :createCombinedMask:x 3
+  664 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   665 op or :createBlockMaskRow:result *tmp311 *tmp313
   666 label *label304
   667 label *label305
   668 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  669 op add *tmp312 :createCombinedMask:x 2
+  670 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   671 op or :createBlockMaskRow:result *tmp311 *tmp313
   672 label *label306
   673 label *label307
   674 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  675 op add *tmp312 :createCombinedMask:x 1
+  676 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   677 op or :createBlockMaskRow:result *tmp311 *tmp313
   678 label *label308
   679 label *label309
   680 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  681 op add *tmp312 :createCombinedMask:x 0
+  682 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   683 op or :createBlockMaskRow:result *tmp311 *tmp313
   684 label *label310
   685 label *label311
   686 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  687 op add *tmp312 :createCombinedMask:x -1
+  688 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   689 op or :createBlockMaskRow:result *tmp311 *tmp313
   690 label *label312
   691 label *label313
   692 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  693 op add *tmp312 :createCombinedMask:x -2
+  694 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   695 op or :createBlockMaskRow:result *tmp311 *tmp313
   696 label *label314
   697 label *label315
   698 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  699 op add *tmp312 :createCombinedMask:x -3
+  700 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   701 op or :createBlockMaskRow:result *tmp311 *tmp313
   702 label *label316
   703 label *label317
   704 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  705 op add *tmp312 :createCombinedMask:x -4
+  706 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   707 op or :createBlockMaskRow:result *tmp311 *tmp313
   708 label *label318
   709 label *label319
   710 set :createBlockMaskRow*retval :createBlockMaskRow:result
   711 jump *label320 always
   712 label *label320
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp323 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  713 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  714 op add *tmp323 :createCombinedMask:y 3
+  715 set :createBlockMaskRow:x :createCombinedMask:x
   716 set :createBlockMaskRow:y *tmp323
   717 setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
   718 call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   649 set :createAdjacentMask:y :createCombinedMask:y
   650 set :createAdjacentMask:result 0
   651 op add *tmp321 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp321
   652 label *label299
   653 label *label300
   654 label *label301
 
   705 op or :createBlockMaskRow:result *tmp311 *tmp313
   706 label *label318
   707 label *label319
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   708 jump *label320 always
   709 label *label320
   710 set :createAdjacentMask:row2 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:485:16 (+35 instructions):
 
   711 op add *tmp323 :createCombinedMask:y 3
   712 set :createBlockMaskRow:x :createCombinedMask:x
   713 set :createBlockMaskRow:y *tmp323
-    * setaddr :createBlockMaskRow*retaddr *label147 (h:*label147)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label147) (h:*label147)
-    * label *label147
+  714 label *label321
+  715 label *label322
+  716 label *label323
+  717 op add *tmp312 :createBlockMaskRow:x 4
+  718 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  719 op or :createBlockMaskRow:result 0 *tmp313
+  720 label *label324
+  721 label *label325
+  722 op shl *tmp311 :createBlockMaskRow:result 1
+  723 op add *tmp312 :createBlockMaskRow:x 3
+  724 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  725 op or :createBlockMaskRow:result *tmp311 *tmp313
+  726 label *label326
+  727 label *label327
+  728 op shl *tmp311 :createBlockMaskRow:result 1
+  729 op add *tmp312 :createBlockMaskRow:x 2
+  730 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  731 op or :createBlockMaskRow:result *tmp311 *tmp313
+  732 label *label328
+  733 label *label329
+  734 op shl *tmp311 :createBlockMaskRow:result 1
+  735 op add *tmp312 :createBlockMaskRow:x 1
+  736 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  737 op or :createBlockMaskRow:result *tmp311 *tmp313
+  738 label *label330
+  739 label *label331
+  740 op shl *tmp311 :createBlockMaskRow:result 1
+  741 op add *tmp312 :createBlockMaskRow:x 0
+  742 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  743 op or :createBlockMaskRow:result *tmp311 *tmp313
+  744 label *label332
+  745 label *label333
+  746 op shl *tmp311 :createBlockMaskRow:result 1
+  747 op add *tmp312 :createBlockMaskRow:x -1
+  748 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  749 op or :createBlockMaskRow:result *tmp311 *tmp313
+  750 label *label334
+  751 label *label335
+  752 op shl *tmp311 :createBlockMaskRow:result 1
+  753 op add *tmp312 :createBlockMaskRow:x -2
+  754 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  755 op or :createBlockMaskRow:result *tmp311 *tmp313
+  756 label *label336
+  757 label *label337
+  758 op shl *tmp311 :createBlockMaskRow:result 1
+  759 op add *tmp312 :createBlockMaskRow:x -3
+  760 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  761 op or :createBlockMaskRow:result *tmp311 *tmp313
+  762 label *label338
+  763 label *label339
+  764 op shl *tmp311 :createBlockMaskRow:result 1
+  765 op add *tmp312 :createBlockMaskRow:x -4
+  766 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  767 op or :createBlockMaskRow:result *tmp311 *tmp313
+  768 label *label340
+  769 label *label341
+  770 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  771 jump *label342 always
+  772 label *label342
   773 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   774 set :createAdjacentMask:r 2
   775 label *label255

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   714 label *label321
   715 label *label322
   716 label *label323
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  717 op add *tmp312 :createCombinedMask:x 4
+  718 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   719 op or :createBlockMaskRow:result 0 *tmp313
   720 label *label324
   721 label *label325
   722 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  723 op add *tmp312 :createCombinedMask:x 3
+  724 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   725 op or :createBlockMaskRow:result *tmp311 *tmp313
   726 label *label326
   727 label *label327
   728 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  729 op add *tmp312 :createCombinedMask:x 2
+  730 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   731 op or :createBlockMaskRow:result *tmp311 *tmp313
   732 label *label328
   733 label *label329
   734 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  735 op add *tmp312 :createCombinedMask:x 1
+  736 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   737 op or :createBlockMaskRow:result *tmp311 *tmp313
   738 label *label330
   739 label *label331
   740 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  741 op add *tmp312 :createCombinedMask:x 0
+  742 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   743 op or :createBlockMaskRow:result *tmp311 *tmp313
   744 label *label332
   745 label *label333
   746 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  747 op add *tmp312 :createCombinedMask:x -1
+  748 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   749 op or :createBlockMaskRow:result *tmp311 *tmp313
   750 label *label334
   751 label *label335
   752 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  753 op add *tmp312 :createCombinedMask:x -2
+  754 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   755 op or :createBlockMaskRow:result *tmp311 *tmp313
   756 label *label336
   757 label *label337
   758 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  759 op add *tmp312 :createCombinedMask:x -3
+  760 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   761 op or :createBlockMaskRow:result *tmp311 *tmp313
   762 label *label338
   763 label *label339
   764 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  765 op add *tmp312 :createCombinedMask:x -4
+  766 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   767 op or :createBlockMaskRow:result *tmp311 *tmp313
   768 label *label340
   769 label *label341
   770 set :createBlockMaskRow*retval :createBlockMaskRow:result
   771 jump *label342 always
   772 label *label342
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  773 set :createAdjacentMask:row1 :createBlockMaskRow:result
   774 set :createAdjacentMask:r 2
   775 label *label255
   776 label *label256
-    * op add *tmp325 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  777 op add *tmp325 :createCombinedMask:y 2
+  778 set :createBlockMaskRow:x :createCombinedMask:x
   779 set :createBlockMaskRow:y *tmp325
   780 setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
   781 call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
   709 label *label320
   710 set :createAdjacentMask:row2 :createBlockMaskRow:result
   711 op add *tmp323 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp323
   712 label *label321
   713 label *label322
   714 label *label323
 
   765 op or :createBlockMaskRow:result *tmp311 *tmp313
   766 label *label340
   767 label *label341
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   768 jump *label342 always
   769 label *label342
   770 set :createAdjacentMask:row1 :createBlockMaskRow:result

Modifications by Inline function call at OreLocator.mnd:488:20 (+35 instructions):
 
   774 op add *tmp325 :createCombinedMask:y 2
   775 set :createBlockMaskRow:x :createCombinedMask:x
   776 set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label257 (h:*label257)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label257) (h:*label257)
-    * label *label257
+  777 label *label343
+  778 label *label344
+  779 label *label345
+  780 op add *tmp312 :createBlockMaskRow:x 4
+  781 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  782 op or :createBlockMaskRow:result 0 *tmp313
+  783 label *label346
+  784 label *label347
+  785 op shl *tmp311 :createBlockMaskRow:result 1
+  786 op add *tmp312 :createBlockMaskRow:x 3
+  787 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  788 op or :createBlockMaskRow:result *tmp311 *tmp313
+  789 label *label348
+  790 label *label349
+  791 op shl *tmp311 :createBlockMaskRow:result 1
+  792 op add *tmp312 :createBlockMaskRow:x 2
+  793 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  794 op or :createBlockMaskRow:result *tmp311 *tmp313
+  795 label *label350
+  796 label *label351
+  797 op shl *tmp311 :createBlockMaskRow:result 1
+  798 op add *tmp312 :createBlockMaskRow:x 1
+  799 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  800 op or :createBlockMaskRow:result *tmp311 *tmp313
+  801 label *label352
+  802 label *label353
+  803 op shl *tmp311 :createBlockMaskRow:result 1
+  804 op add *tmp312 :createBlockMaskRow:x 0
+  805 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  806 op or :createBlockMaskRow:result *tmp311 *tmp313
+  807 label *label354
+  808 label *label355
+  809 op shl *tmp311 :createBlockMaskRow:result 1
+  810 op add *tmp312 :createBlockMaskRow:x -1
+  811 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  812 op or :createBlockMaskRow:result *tmp311 *tmp313
+  813 label *label356
+  814 label *label357
+  815 op shl *tmp311 :createBlockMaskRow:result 1
+  816 op add *tmp312 :createBlockMaskRow:x -2
+  817 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  818 op or :createBlockMaskRow:result *tmp311 *tmp313
+  819 label *label358
+  820 label *label359
+  821 op shl *tmp311 :createBlockMaskRow:result 1
+  822 op add *tmp312 :createBlockMaskRow:x -3
+  823 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  824 op or :createBlockMaskRow:result *tmp311 *tmp313
+  825 label *label360
+  826 label *label361
+  827 op shl *tmp311 :createBlockMaskRow:result 1
+  828 op add *tmp312 :createBlockMaskRow:x -4
+  829 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  830 op or :createBlockMaskRow:result *tmp311 *tmp313
+  831 label *label362
+  832 label *label363
+  833 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  834 jump *label364 always
+  835 label *label364
   836 op shl *tmp327 :createAdjacentMask:row1 1
   837 op or *tmp328 :createAdjacentMask:row2 *tmp327
   838 op shr *tmp329 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   777 label *label343
   778 label *label344
   779 label *label345
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  780 op add *tmp312 :createCombinedMask:x 4
+  781 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   782 op or :createBlockMaskRow:result 0 *tmp313
   783 label *label346
   784 label *label347
   785 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  786 op add *tmp312 :createCombinedMask:x 3
+  787 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   788 op or :createBlockMaskRow:result *tmp311 *tmp313
   789 label *label348
   790 label *label349
   791 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  792 op add *tmp312 :createCombinedMask:x 2
+  793 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   794 op or :createBlockMaskRow:result *tmp311 *tmp313
   795 label *label350
   796 label *label351
   797 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  798 op add *tmp312 :createCombinedMask:x 1
+  799 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   800 op or :createBlockMaskRow:result *tmp311 *tmp313
   801 label *label352
   802 label *label353
   803 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  804 op add *tmp312 :createCombinedMask:x 0
+  805 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   806 op or :createBlockMaskRow:result *tmp311 *tmp313
   807 label *label354
   808 label *label355
   809 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  810 op add *tmp312 :createCombinedMask:x -1
+  811 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   812 op or :createBlockMaskRow:result *tmp311 *tmp313
   813 label *label356
   814 label *label357
   815 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  816 op add *tmp312 :createCombinedMask:x -2
+  817 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   818 op or :createBlockMaskRow:result *tmp311 *tmp313
   819 label *label358
   820 label *label359
   821 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  822 op add *tmp312 :createCombinedMask:x -3
+  823 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   824 op or :createBlockMaskRow:result *tmp311 *tmp313
   825 label *label360
   826 label *label361
   827 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  828 op add *tmp312 :createCombinedMask:x -4
+  829 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   830 op or :createBlockMaskRow:result *tmp311 *tmp313
   831 label *label362
   832 label *label363
 
   837 op or *tmp328 :createAdjacentMask:row2 *tmp327
   838 op shr *tmp329 :createAdjacentMask:row1 1
   839 op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
-    * op shl *tmp332 :createAdjacentMask:result 7
+  840 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
+  841 op shl *tmp332 0 7
   842 op and *tmp333 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp332 *tmp333
+  843 op or :createAdjacentMask:result 0 *tmp333
   844 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  845 set :createAdjacentMask:row1 :createBlockMaskRow:result
   846 label *label258
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  847 op sub :createAdjacentMask:r 2 1
   848 label *label259
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  849 op add *tmp325 :createCombinedMask:y 1
+  850 set :createBlockMaskRow:x :createCombinedMask:x
   851 set :createBlockMaskRow:y *tmp325
   852 setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
   853 call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
   647 write 1 processor1 "@counter"
   648 set :createAdjacentMask:x :createCombinedMask:x
   649 set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   650 op add *tmp321 :createCombinedMask:y 4
   651 label *label299
   652 label *label300
 
   767 jump *label342 always
   768 label *label342
   769 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   770 label *label255
   771 label *label256
   772 op add *tmp325 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp325
   773 label *label343
   774 label *label344
   775 label *label345
 
   826 op or :createBlockMaskRow:result *tmp311 *tmp313
   827 label *label362
   828 label *label363
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   829 jump *label364 always
   830 label *label364
   831 op shl *tmp327 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:488:20 (+35 instructions):
 
   844 op add *tmp325 :createCombinedMask:y 1
   845 set :createBlockMaskRow:x :createCombinedMask:x
   846 set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label260 (h:*label260)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label260) (h:*label260)
-    * label *label260
+  847 label *label365
+  848 label *label366
+  849 label *label367
+  850 op add *tmp312 :createBlockMaskRow:x 4
+  851 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  852 op or :createBlockMaskRow:result 0 *tmp313
+  853 label *label368
+  854 label *label369
+  855 op shl *tmp311 :createBlockMaskRow:result 1
+  856 op add *tmp312 :createBlockMaskRow:x 3
+  857 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  858 op or :createBlockMaskRow:result *tmp311 *tmp313
+  859 label *label370
+  860 label *label371
+  861 op shl *tmp311 :createBlockMaskRow:result 1
+  862 op add *tmp312 :createBlockMaskRow:x 2
+  863 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  864 op or :createBlockMaskRow:result *tmp311 *tmp313
+  865 label *label372
+  866 label *label373
+  867 op shl *tmp311 :createBlockMaskRow:result 1
+  868 op add *tmp312 :createBlockMaskRow:x 1
+  869 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  870 op or :createBlockMaskRow:result *tmp311 *tmp313
+  871 label *label374
+  872 label *label375
+  873 op shl *tmp311 :createBlockMaskRow:result 1
+  874 op add *tmp312 :createBlockMaskRow:x 0
+  875 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  876 op or :createBlockMaskRow:result *tmp311 *tmp313
+  877 label *label376
+  878 label *label377
+  879 op shl *tmp311 :createBlockMaskRow:result 1
+  880 op add *tmp312 :createBlockMaskRow:x -1
+  881 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  882 op or :createBlockMaskRow:result *tmp311 *tmp313
+  883 label *label378
+  884 label *label379
+  885 op shl *tmp311 :createBlockMaskRow:result 1
+  886 op add *tmp312 :createBlockMaskRow:x -2
+  887 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  888 op or :createBlockMaskRow:result *tmp311 *tmp313
+  889 label *label380
+  890 label *label381
+  891 op shl *tmp311 :createBlockMaskRow:result 1
+  892 op add *tmp312 :createBlockMaskRow:x -3
+  893 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  894 op or :createBlockMaskRow:result *tmp311 *tmp313
+  895 label *label382
+  896 label *label383
+  897 op shl *tmp311 :createBlockMaskRow:result 1
+  898 op add *tmp312 :createBlockMaskRow:x -4
+  899 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  900 op or :createBlockMaskRow:result *tmp311 *tmp313
+  901 label *label384
+  902 label *label385
+  903 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  904 jump *label386 always
+  905 label *label386
   906 op shl *tmp327 :createAdjacentMask:row1 1
   907 op or *tmp328 :createAdjacentMask:row2 *tmp327
   908 op shr *tmp329 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
   833 op shr *tmp329 :createAdjacentMask:row1 1
   834 op or *tmp330 *tmp328 *tmp329
   835 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
-    * op shl *tmp332 0 7
   836 op and *tmp333 :createAdjacentMask:mask 0xFE
   837 op or :createAdjacentMask:result 0 *tmp333
   838 set :createAdjacentMask:row2 :createAdjacentMask:row1
 
   846 label *label365
   847 label *label366
   848 label *label367
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  849 op add *tmp312 :createCombinedMask:x 4
+  850 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   851 op or :createBlockMaskRow:result 0 *tmp313
   852 label *label368
   853 label *label369
   854 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  855 op add *tmp312 :createCombinedMask:x 3
+  856 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   857 op or :createBlockMaskRow:result *tmp311 *tmp313
   858 label *label370
   859 label *label371
   860 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  861 op add *tmp312 :createCombinedMask:x 2
+  862 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   863 op or :createBlockMaskRow:result *tmp311 *tmp313
   864 label *label372
   865 label *label373
   866 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  867 op add *tmp312 :createCombinedMask:x 1
+  868 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   869 op or :createBlockMaskRow:result *tmp311 *tmp313
   870 label *label374
   871 label *label375
   872 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  873 op add *tmp312 :createCombinedMask:x 0
+  874 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   875 op or :createBlockMaskRow:result *tmp311 *tmp313
   876 label *label376
   877 label *label377
   878 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  879 op add *tmp312 :createCombinedMask:x -1
+  880 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   881 op or :createBlockMaskRow:result *tmp311 *tmp313
   882 label *label378
   883 label *label379
   884 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  885 op add *tmp312 :createCombinedMask:x -2
+  886 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   887 op or :createBlockMaskRow:result *tmp311 *tmp313
   888 label *label380
   889 label *label381
   890 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  891 op add *tmp312 :createCombinedMask:x -3
+  892 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   893 op or :createBlockMaskRow:result *tmp311 *tmp313
   894 label *label382
   895 label *label383
   896 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  897 op add *tmp312 :createCombinedMask:x -4
+  898 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   899 op or :createBlockMaskRow:result *tmp311 *tmp313
   900 label *label384
   901 label *label385
 
   906 op or *tmp328 :createAdjacentMask:row2 *tmp327
   907 op shr *tmp329 :createAdjacentMask:row1 1
   908 op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  909 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
   910 op shl *tmp332 :createAdjacentMask:result 7
   911 op and *tmp333 :createAdjacentMask:mask 0xFE
   912 op or :createAdjacentMask:result *tmp332 *tmp333
   913 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  914 set :createAdjacentMask:row1 :createBlockMaskRow:result
   915 label *label261
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  916 op sub :createAdjacentMask:r 1 1
   917 label *label262
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  918 op add *tmp325 :createCombinedMask:y 0
+  919 set :createBlockMaskRow:x :createCombinedMask:x
   920 set :createBlockMaskRow:y *tmp325
   921 setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
   922 call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   838 set :createAdjacentMask:row2 :createAdjacentMask:row1
   839 set :createAdjacentMask:row1 :createBlockMaskRow:result
   840 label *label258
-    * op sub :createAdjacentMask:r 2 1
   841 label *label259
   842 op add *tmp325 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp325
   843 label *label365
   844 label *label366
   845 label *label367
 
   896 op or :createBlockMaskRow:result *tmp311 *tmp313
   897 label *label384
   898 label *label385
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   899 jump *label386 always
   900 label *label386
   901 op shl *tmp327 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:488:20 (+35 instructions):
 
   914 op add *tmp325 :createCombinedMask:y 0
   915 set :createBlockMaskRow:x :createCombinedMask:x
   916 set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label263 (h:*label263)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label263) (h:*label263)
-    * label *label263
+  917 label *label387
+  918 label *label388
+  919 label *label389
+  920 op add *tmp312 :createBlockMaskRow:x 4
+  921 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  922 op or :createBlockMaskRow:result 0 *tmp313
+  923 label *label390
+  924 label *label391
+  925 op shl *tmp311 :createBlockMaskRow:result 1
+  926 op add *tmp312 :createBlockMaskRow:x 3
+  927 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  928 op or :createBlockMaskRow:result *tmp311 *tmp313
+  929 label *label392
+  930 label *label393
+  931 op shl *tmp311 :createBlockMaskRow:result 1
+  932 op add *tmp312 :createBlockMaskRow:x 2
+  933 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  934 op or :createBlockMaskRow:result *tmp311 *tmp313
+  935 label *label394
+  936 label *label395
+  937 op shl *tmp311 :createBlockMaskRow:result 1
+  938 op add *tmp312 :createBlockMaskRow:x 1
+  939 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  940 op or :createBlockMaskRow:result *tmp311 *tmp313
+  941 label *label396
+  942 label *label397
+  943 op shl *tmp311 :createBlockMaskRow:result 1
+  944 op add *tmp312 :createBlockMaskRow:x 0
+  945 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  946 op or :createBlockMaskRow:result *tmp311 *tmp313
+  947 label *label398
+  948 label *label399
+  949 op shl *tmp311 :createBlockMaskRow:result 1
+  950 op add *tmp312 :createBlockMaskRow:x -1
+  951 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  952 op or :createBlockMaskRow:result *tmp311 *tmp313
+  953 label *label400
+  954 label *label401
+  955 op shl *tmp311 :createBlockMaskRow:result 1
+  956 op add *tmp312 :createBlockMaskRow:x -2
+  957 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  958 op or :createBlockMaskRow:result *tmp311 *tmp313
+  959 label *label402
+  960 label *label403
+  961 op shl *tmp311 :createBlockMaskRow:result 1
+  962 op add *tmp312 :createBlockMaskRow:x -3
+  963 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  964 op or :createBlockMaskRow:result *tmp311 *tmp313
+  965 label *label404
+  966 label *label405
+  967 op shl *tmp311 :createBlockMaskRow:result 1
+  968 op add *tmp312 :createBlockMaskRow:x -4
+  969 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  970 op or :createBlockMaskRow:result *tmp311 *tmp313
+  971 label *label406
+  972 label *label407
+  973 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  974 jump *label408 always
+  975 label *label408
   976 op shl *tmp327 :createAdjacentMask:row1 1
   977 op or *tmp328 :createAdjacentMask:row2 *tmp327
   978 op shr *tmp329 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   917 label *label387
   918 label *label388
   919 label *label389
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  920 op add *tmp312 :createCombinedMask:x 4
+  921 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   922 op or :createBlockMaskRow:result 0 *tmp313
   923 label *label390
   924 label *label391
   925 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  926 op add *tmp312 :createCombinedMask:x 3
+  927 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   928 op or :createBlockMaskRow:result *tmp311 *tmp313
   929 label *label392
   930 label *label393
   931 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  932 op add *tmp312 :createCombinedMask:x 2
+  933 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   934 op or :createBlockMaskRow:result *tmp311 *tmp313
   935 label *label394
   936 label *label395
   937 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  938 op add *tmp312 :createCombinedMask:x 1
+  939 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   940 op or :createBlockMaskRow:result *tmp311 *tmp313
   941 label *label396
   942 label *label397
   943 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  944 op add *tmp312 :createCombinedMask:x 0
+  945 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   946 op or :createBlockMaskRow:result *tmp311 *tmp313
   947 label *label398
   948 label *label399
   949 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  950 op add *tmp312 :createCombinedMask:x -1
+  951 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   952 op or :createBlockMaskRow:result *tmp311 *tmp313
   953 label *label400
   954 label *label401
   955 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  956 op add *tmp312 :createCombinedMask:x -2
+  957 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   958 op or :createBlockMaskRow:result *tmp311 *tmp313
   959 label *label402
   960 label *label403
   961 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  962 op add *tmp312 :createCombinedMask:x -3
+  963 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   964 op or :createBlockMaskRow:result *tmp311 *tmp313
   965 label *label404
   966 label *label405
   967 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  968 op add *tmp312 :createCombinedMask:x -4
+  969 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   970 op or :createBlockMaskRow:result *tmp311 *tmp313
   971 label *label406
   972 label *label407
 
   977 op or *tmp328 :createAdjacentMask:row2 *tmp327
   978 op shr *tmp329 :createAdjacentMask:row1 1
   979 op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+  980 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
   981 op shl *tmp332 :createAdjacentMask:result 7
   982 op and *tmp333 :createAdjacentMask:mask 0xFE
   983 op or :createAdjacentMask:result *tmp332 *tmp333
   984 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  985 set :createAdjacentMask:row1 :createBlockMaskRow:result
   986 label *label264
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  987 op sub :createAdjacentMask:r 0 1
   988 label *label265
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  989 op add *tmp325 :createCombinedMask:y -1
+  990 set :createBlockMaskRow:x :createCombinedMask:x
   991 set :createBlockMaskRow:y *tmp325
   992 setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
   993 call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   909 set :createAdjacentMask:row2 :createAdjacentMask:row1
   910 set :createAdjacentMask:row1 :createBlockMaskRow:result
   911 label *label261
-    * op sub :createAdjacentMask:r 1 1
   912 label *label262
   913 op add *tmp325 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp325
   914 label *label387
   915 label *label388
   916 label *label389
 
   967 op or :createBlockMaskRow:result *tmp311 *tmp313
   968 label *label406
   969 label *label407
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   970 jump *label408 always
   971 label *label408
   972 op shl *tmp327 :createAdjacentMask:row1 1

Modifications by Inline function call at OreLocator.mnd:488:20 (+35 instructions):
 
   985 op add *tmp325 :createCombinedMask:y -1
   986 set :createBlockMaskRow:x :createCombinedMask:x
   987 set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label266 (h:*label266)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label266) (h:*label266)
-    * label *label266
+  988 label *label409
+  989 label *label410
+  990 label *label411
+  991 op add *tmp312 :createBlockMaskRow:x 4
+  992 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  993 op or :createBlockMaskRow:result 0 *tmp313
+  994 label *label412
+  995 label *label413
+  996 op shl *tmp311 :createBlockMaskRow:result 1
+  997 op add *tmp312 :createBlockMaskRow:x 3
+  998 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  999 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1000 label *label414
+ 1001 label *label415
+ 1002 op shl *tmp311 :createBlockMaskRow:result 1
+ 1003 op add *tmp312 :createBlockMaskRow:x 2
+ 1004 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1005 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1006 label *label416
+ 1007 label *label417
+ 1008 op shl *tmp311 :createBlockMaskRow:result 1
+ 1009 op add *tmp312 :createBlockMaskRow:x 1
+ 1010 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1011 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1012 label *label418
+ 1013 label *label419
+ 1014 op shl *tmp311 :createBlockMaskRow:result 1
+ 1015 op add *tmp312 :createBlockMaskRow:x 0
+ 1016 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1017 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1018 label *label420
+ 1019 label *label421
+ 1020 op shl *tmp311 :createBlockMaskRow:result 1
+ 1021 op add *tmp312 :createBlockMaskRow:x -1
+ 1022 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1023 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1024 label *label422
+ 1025 label *label423
+ 1026 op shl *tmp311 :createBlockMaskRow:result 1
+ 1027 op add *tmp312 :createBlockMaskRow:x -2
+ 1028 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1029 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1030 label *label424
+ 1031 label *label425
+ 1032 op shl *tmp311 :createBlockMaskRow:result 1
+ 1033 op add *tmp312 :createBlockMaskRow:x -3
+ 1034 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1035 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1036 label *label426
+ 1037 label *label427
+ 1038 op shl *tmp311 :createBlockMaskRow:result 1
+ 1039 op add *tmp312 :createBlockMaskRow:x -4
+ 1040 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1041 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1042 label *label428
+ 1043 label *label429
+ 1044 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1045 jump *label430 always
+ 1046 label *label430
  1047 op shl *tmp327 :createAdjacentMask:row1 1
  1048 op or *tmp328 :createAdjacentMask:row2 *tmp327
  1049 op shr *tmp329 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   988 label *label409
   989 label *label410
   990 label *label411
-    * op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  991 op add *tmp312 :createCombinedMask:x 4
+  992 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   993 op or :createBlockMaskRow:result 0 *tmp313
   994 label *label412
   995 label *label413
   996 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  997 op add *tmp312 :createCombinedMask:x 3
+  998 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   999 op or :createBlockMaskRow:result *tmp311 *tmp313
  1000 label *label414
  1001 label *label415
  1002 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1003 op add *tmp312 :createCombinedMask:x 2
+ 1004 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1005 op or :createBlockMaskRow:result *tmp311 *tmp313
  1006 label *label416
  1007 label *label417
  1008 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1009 op add *tmp312 :createCombinedMask:x 1
+ 1010 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1011 op or :createBlockMaskRow:result *tmp311 *tmp313
  1012 label *label418
  1013 label *label419
  1014 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1015 op add *tmp312 :createCombinedMask:x 0
+ 1016 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1017 op or :createBlockMaskRow:result *tmp311 *tmp313
  1018 label *label420
  1019 label *label421
  1020 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1021 op add *tmp312 :createCombinedMask:x -1
+ 1022 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1023 op or :createBlockMaskRow:result *tmp311 *tmp313
  1024 label *label422
  1025 label *label423
  1026 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1027 op add *tmp312 :createCombinedMask:x -2
+ 1028 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1029 op or :createBlockMaskRow:result *tmp311 *tmp313
  1030 label *label424
  1031 label *label425
  1032 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1033 op add *tmp312 :createCombinedMask:x -3
+ 1034 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1035 op or :createBlockMaskRow:result *tmp311 *tmp313
  1036 label *label426
  1037 label *label427
  1038 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1039 op add *tmp312 :createCombinedMask:x -4
+ 1040 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1041 op or :createBlockMaskRow:result *tmp311 *tmp313
  1042 label *label428
  1043 label *label429
 
  1048 op or *tmp328 :createAdjacentMask:row2 *tmp327
  1049 op shr *tmp329 :createAdjacentMask:row1 1
  1050 op or *tmp330 *tmp328 *tmp329
-    * op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*retval
+ 1051 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
  1052 op shl *tmp332 :createAdjacentMask:result 7
  1053 op and *tmp333 :createAdjacentMask:mask 0xFE
  1054 op or :createAdjacentMask:result *tmp332 *tmp333
  1055 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1056 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1057 label *label267
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1058 op sub :createAdjacentMask:r -1 1
  1059 label *label268
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1060 op add *tmp325 :createCombinedMask:y -2
+ 1061 set :createBlockMaskRow:x :createCombinedMask:x
  1062 set :createBlockMaskRow:y *tmp325
  1063 setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
  1064 call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
   980 set :createAdjacentMask:row2 :createAdjacentMask:row1
   981 set :createAdjacentMask:row1 :createBlockMaskRow:result
   982 label *label264
-    * op sub :createAdjacentMask:r 0 1
   983 label *label265
   984 op add *tmp325 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp325
   985 label *label409
   986 label *label410
   987 label *label411
 
  1038 op or :createBlockMaskRow:result *tmp311 *tmp313
  1039 label *label428
  1040 label *label429
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1041 jump *label430 always
  1042 label *label430
  1043 op shl *tmp327 :createAdjacentMask:row1 1

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-16 instructions):
 
   142 jump *label203 lessThan :visited:i *tmp84
   143 label *label51
   144 set *tmp83 false
-    * jump *label48 always
   145 label *label48
   146 jump *label54 notEqual *tmp83 false
   147 op div *tmp99 2 .angle
 
   160 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   161 label *label31
   162 set *tmp37 false
-    * jump *label28 always
   163 label *label28
   164 set :findDrillLocationLocal:oreX :locateOreAway:x
   165 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   352 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   353 label *label254
   354 label *label102
-    * jump *label99 always
   355 label *label99
   356 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
   357 op sub *tmp212 7 :excludeArea:blockSizeX
 
   397 label *label286
   398 label *label287
   399 set :shiftMask*retval :shiftMask:mask
-    * jump *label288 always
   400 label *label288
   401 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   402 jump *label96 always
   403 jump *label98 always
   404 label *label97
   405 set :excludeArea*retval :excludeArea:mask
-    * jump *label96 always
   406 label *label98
   407 label *label96
   408 return :excludeArea*retaddr
 
   447 jump *label205 lessThanEq :findPossiblePlacement:y 3
   448 label *label109
   449 set :findPossiblePlacement*retval -1
-    * jump *label106 always
   450 label *label106
   451 return :findPossiblePlacement*retaddr
   452 end
 
   629 label *label228
   630 label *label143
   631 set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label140 always
   632 label *label140
   633 return :createBlockMaskRow*retaddr
   634 end
 
   697 op or :createBlockMaskRow:result *tmp311 *tmp313
   698 label *label318
   699 label *label319
-    * jump *label320 always
   700 label *label320
   701 set :createAdjacentMask:row2 :createBlockMaskRow:result
   702 op add *tmp323 :createCombinedMask:y 3
 
   756 op or :createBlockMaskRow:result *tmp311 *tmp313
   757 label *label340
   758 label *label341
-    * jump *label342 always
   759 label *label342
   760 set :createAdjacentMask:row1 :createBlockMaskRow:result
   761 label *label255
 
   817 op or :createBlockMaskRow:result *tmp311 *tmp313
   818 label *label362
   819 label *label363
-    * jump *label364 always
   820 label *label364
   821 op shl *tmp327 :createAdjacentMask:row1 1
   822 op or *tmp328 :createAdjacentMask:row2 *tmp327
 
   886 op or :createBlockMaskRow:result *tmp311 *tmp313
   887 label *label384
   888 label *label385
-    * jump *label386 always
   889 label *label386
   890 op shl *tmp327 :createAdjacentMask:row1 1
   891 op or *tmp328 :createAdjacentMask:row2 *tmp327
 
   956 op or :createBlockMaskRow:result *tmp311 *tmp313
   957 label *label406
   958 label *label407
-    * jump *label408 always
   959 label *label408
   960 op shl *tmp327 :createAdjacentMask:row1 1
   961 op or *tmp328 :createAdjacentMask:row2 *tmp327
 
  1026 op or :createBlockMaskRow:result *tmp311 *tmp313
  1027 label *label428
  1028 label *label429
-    * jump *label430 always
  1029 label *label430
  1030 op shl *tmp327 :createAdjacentMask:row1 1
  1031 op or *tmp328 :createAdjacentMask:row2 *tmp327
 
  1115 call *label10 *invalid :excludeArea*retval (m:*label153) (h:*label153)
  1116 label *label153
  1117 set :createCombinedMask*retval :excludeArea*retval
-    * jump *label144 always
  1118 label *label144
  1119 return :createCombinedMask*retaddr
  1120 end
 
  1283 label *label296
  1284 label *label297
  1285 set :shiftMask*retval :shiftMask:mask
-    * jump *label298 always
  1286 label *label298
  1287 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
  1288 op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx
 
  1305 multilabel *label184 (m:marker0)
  1306 label *label180
  1307 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
  1308 label *label154
  1309 return :layoutThoriumDrillAtLocation*retaddr
  1310 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   577 label *label211
   578 op add *tmp312 :createBlockMaskRow:x 4
   579 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  580 set :createBlockMaskRow:result *tmp313
   581 label *label212
   582 label *label213
   583 op shl *tmp311 :createBlockMaskRow:result 1
 
   599 label *label218
   600 label *label219
   601 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 0
+  602 set *tmp312 :createBlockMaskRow:x
   603 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   604 op or :createBlockMaskRow:result *tmp311 *tmp313
   605 label *label220
 
   646 label *label301
   647 op add *tmp312 :createCombinedMask:x 4
   648 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  649 set :createBlockMaskRow:result *tmp313
   650 label *label302
   651 label *label303
   652 op shl *tmp311 :createBlockMaskRow:result 1
 
   668 label *label308
   669 label *label309
   670 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+  671 set *tmp312 :createCombinedMask:x
   672 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   673 op or :createBlockMaskRow:result *tmp311 *tmp313
   674 label *label310
 
   705 label *label323
   706 op add *tmp312 :createCombinedMask:x 4
   707 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  708 set :createBlockMaskRow:result *tmp313
   709 label *label324
   710 label *label325
   711 op shl *tmp311 :createBlockMaskRow:result 1
 
   727 label *label330
   728 label *label331
   729 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+  730 set *tmp312 :createCombinedMask:x
   731 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   732 op or :createBlockMaskRow:result *tmp311 *tmp313
   733 label *label332
 
   766 label *label345
   767 op add *tmp312 :createCombinedMask:x 4
   768 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  769 set :createBlockMaskRow:result *tmp313
   770 label *label346
   771 label *label347
   772 op shl *tmp311 :createBlockMaskRow:result 1
 
   788 label *label352
   789 label *label353
   790 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+  791 set *tmp312 :createCombinedMask:x
   792 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   793 op or :createBlockMaskRow:result *tmp311 *tmp313
   794 label *label354
 
   824 op or *tmp330 *tmp328 *tmp329
   825 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
   826 op and *tmp333 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp333
+  827 set :createAdjacentMask:result *tmp333
   828 set :createAdjacentMask:row2 :createAdjacentMask:row1
   829 set :createAdjacentMask:row1 :createBlockMaskRow:result
   830 label *label258
 
   835 label *label367
   836 op add *tmp312 :createCombinedMask:x 4
   837 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  838 set :createBlockMaskRow:result *tmp313
   839 label *label368
   840 label *label369
   841 op shl *tmp311 :createBlockMaskRow:result 1
 
   857 label *label374
   858 label *label375
   859 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+  860 set *tmp312 :createCombinedMask:x
   861 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   862 op or :createBlockMaskRow:result *tmp311 *tmp313
   863 label *label376
 
   899 set :createAdjacentMask:row1 :createBlockMaskRow:result
   900 label *label261
   901 label *label262
-    * op add *tmp325 :createCombinedMask:y 0
+  902 set *tmp325 :createCombinedMask:y
   903 label *label387
   904 label *label388
   905 label *label389
   906 op add *tmp312 :createCombinedMask:x 4
   907 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  908 set :createBlockMaskRow:result *tmp313
   909 label *label390
   910 label *label391
   911 op shl *tmp311 :createBlockMaskRow:result 1
 
   927 label *label396
   928 label *label397
   929 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+  930 set *tmp312 :createCombinedMask:x
   931 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   932 op or :createBlockMaskRow:result *tmp311 *tmp313
   933 label *label398
 
   975 label *label411
   976 op add *tmp312 :createCombinedMask:x 4
   977 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * op or :createBlockMaskRow:result 0 *tmp313
+  978 set :createBlockMaskRow:result *tmp313
   979 label *label412
   980 label *label413
   981 op shl *tmp311 :createBlockMaskRow:result 1
 
   997 label *label418
   998 label *label419
   999 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createCombinedMask:x 0
+ 1000 set *tmp312 :createCombinedMask:x
  1001 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
  1002 op or :createBlockMaskRow:result *tmp311 *tmp313
  1003 label *label420

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-11 instructions):
 
   576 label *label210
   577 label *label211
   578 op add *tmp312 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  579 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
   580 label *label212
   581 label *label213
   582 op shl *tmp311 :createBlockMaskRow:result 1
 
   624 op shl *tmp311 :createBlockMaskRow:result 1
   625 op add *tmp312 :createBlockMaskRow:x -4
   626 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
-    * op or :createBlockMaskRow:result *tmp311 *tmp313
+  627 op or :createBlockMaskRow*retval *tmp311 *tmp313
   628 label *label228
   629 label *label143
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   630 label *label140
   631 return :createBlockMaskRow*retaddr
   632 end
 
   643 label *label300
   644 label *label301
   645 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  646 ucontrol getBlock *tmp312 *tmp321 0 :createBlockMaskRow:result 0
   647 label *label302
   648 label *label303
   649 op shl *tmp311 :createBlockMaskRow:result 1
 
   691 op shl *tmp311 :createBlockMaskRow:result 1
   692 op add *tmp312 :createCombinedMask:x -4
   693 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
-    * op or :createBlockMaskRow:result *tmp311 *tmp313
+  694 op or :createAdjacentMask:row2 *tmp311 *tmp313
   695 label *label318
   696 label *label319
   697 label *label320
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   698 op add *tmp323 :createCombinedMask:y 3
   699 label *label321
   700 label *label322
   701 label *label323
   702 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  703 ucontrol getBlock *tmp312 *tmp323 0 :createBlockMaskRow:result 0
   704 label *label324
   705 label *label325
   706 op shl *tmp311 :createBlockMaskRow:result 1
 
   748 op shl *tmp311 :createBlockMaskRow:result 1
   749 op add *tmp312 :createCombinedMask:x -4
   750 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
-    * op or :createBlockMaskRow:result *tmp311 *tmp313
+  751 op or :createAdjacentMask:row1 *tmp311 *tmp313
   752 label *label340
   753 label *label341
   754 label *label342
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   755 label *label255
   756 label *label256
   757 op add *tmp325 :createCombinedMask:y 2
 
   759 label *label344
   760 label *label345
   761 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  762 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
   763 label *label346
   764 label *label347
   765 op shl *tmp311 :createBlockMaskRow:result 1
 
   816 op shr *tmp329 :createAdjacentMask:row1 1
   817 op or *tmp330 *tmp328 *tmp329
   818 op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:result
-    * op and *tmp333 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp333
+  819 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   820 set :createAdjacentMask:row2 :createAdjacentMask:row1
   821 set :createAdjacentMask:row1 :createBlockMaskRow:result
   822 label *label258
 
   826 label *label366
   827 label *label367
   828 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  829 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
   830 label *label368
   831 label *label369
   832 op shl *tmp311 :createBlockMaskRow:result 1
 
   895 label *label388
   896 label *label389
   897 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  898 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
   899 label *label390
   900 label *label391
   901 op shl *tmp311 :createBlockMaskRow:result 1
 
   964 label *label410
   965 label *label411
   966 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
-    * set :createBlockMaskRow:result *tmp313
+  967 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
   968 label *label412
   969 label *label413
   970 op shl *tmp311 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   599 label *label219
   600 op shl *tmp311 :createBlockMaskRow:result 1
   601 set *tmp312 :createBlockMaskRow:x
-    * ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+  602 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp313 0
   603 op or :createBlockMaskRow:result *tmp311 *tmp313
   604 label *label220
   605 label *label221
 
   666 label *label309
   667 op shl *tmp311 :createBlockMaskRow:result 1
   668 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
+  669 ucontrol getBlock :createCombinedMask:x *tmp321 0 *tmp313 0
   670 op or :createBlockMaskRow:result *tmp311 *tmp313
   671 label *label310
   672 label *label311
 
   723 label *label331
   724 op shl *tmp311 :createBlockMaskRow:result 1
   725 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
+  726 ucontrol getBlock :createCombinedMask:x *tmp323 0 *tmp313 0
   727 op or :createBlockMaskRow:result *tmp311 *tmp313
   728 label *label332
   729 label *label333
 
   782 label *label353
   783 op shl *tmp311 :createBlockMaskRow:result 1
   784 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  785 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   786 op or :createBlockMaskRow:result *tmp311 *tmp313
   787 label *label354
   788 label *label355
 
   849 label *label375
   850 op shl *tmp311 :createBlockMaskRow:result 1
   851 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  852 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   853 op or :createBlockMaskRow:result *tmp311 *tmp313
   854 label *label376
   855 label *label377
 
   895 label *label388
   896 label *label389
   897 op add *tmp312 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
+  898 ucontrol getBlock *tmp312 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   899 label *label390
   900 label *label391
   901 op shl *tmp311 :createBlockMaskRow:result 1
   902 op add *tmp312 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  903 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   904 op or :createBlockMaskRow:result *tmp311 *tmp313
   905 label *label392
   906 label *label393
   907 op shl *tmp311 :createBlockMaskRow:result 1
   908 op add *tmp312 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  909 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   910 op or :createBlockMaskRow:result *tmp311 *tmp313
   911 label *label394
   912 label *label395
   913 op shl *tmp311 :createBlockMaskRow:result 1
   914 op add *tmp312 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  915 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   916 op or :createBlockMaskRow:result *tmp311 *tmp313
   917 label *label396
   918 label *label397
   919 op shl *tmp311 :createBlockMaskRow:result 1
   920 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  921 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp313 0
   922 op or :createBlockMaskRow:result *tmp311 *tmp313
   923 label *label398
   924 label *label399
   925 op shl *tmp311 :createBlockMaskRow:result 1
   926 op add *tmp312 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  927 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   928 op or :createBlockMaskRow:result *tmp311 *tmp313
   929 label *label400
   930 label *label401
   931 op shl *tmp311 :createBlockMaskRow:result 1
   932 op add *tmp312 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  933 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   934 op or :createBlockMaskRow:result *tmp311 *tmp313
   935 label *label402
   936 label *label403
   937 op shl *tmp311 :createBlockMaskRow:result 1
   938 op add *tmp312 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  939 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   940 op or :createBlockMaskRow:result *tmp311 *tmp313
   941 label *label404
   942 label *label405
   943 op shl *tmp311 :createBlockMaskRow:result 1
   944 op add *tmp312 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  945 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   946 op or :createBlockMaskRow:result *tmp311 *tmp313
   947 label *label406
   948 label *label407
 
   987 label *label419
   988 op shl *tmp311 :createBlockMaskRow:result 1
   989 set *tmp312 :createCombinedMask:x
-    * ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
+  990 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   991 op or :createBlockMaskRow:result *tmp311 *tmp313
   992 label *label420
   993 label *label421

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-8 instructions):
 
   598 label *label218
   599 label *label219
   600 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createBlockMaskRow:x
   601 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp313 0
   602 op or :createBlockMaskRow:result *tmp311 *tmp313
   603 label *label220
 
   664 label *label308
   665 label *label309
   666 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   667 ucontrol getBlock :createCombinedMask:x *tmp321 0 *tmp313 0
   668 op or :createBlockMaskRow:result *tmp311 *tmp313
   669 label *label310
 
   720 label *label330
   721 label *label331
   722 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   723 ucontrol getBlock :createCombinedMask:x *tmp323 0 *tmp313 0
   724 op or :createBlockMaskRow:result *tmp311 *tmp313
   725 label *label332
 
   778 label *label352
   779 label *label353
   780 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   781 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   782 op or :createBlockMaskRow:result *tmp311 *tmp313
   783 label *label354
 
   844 label *label374
   845 label *label375
   846 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   847 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   848 op or :createBlockMaskRow:result *tmp311 *tmp313
   849 label *label376
 
   885 set :createAdjacentMask:row1 :createBlockMaskRow:result
   886 label *label261
   887 label *label262
-    * set *tmp325 :createCombinedMask:y
   888 label *label387
   889 label *label388
   890 label *label389
 
   911 label *label396
   912 label *label397
   913 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   914 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp313 0
   915 op or :createBlockMaskRow:result *tmp311 *tmp313
   916 label *label398
 
   979 label *label418
   980 label *label419
   981 op shl *tmp311 :createBlockMaskRow:result 1
-    * set *tmp312 :createCombinedMask:x
   982 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   983 op or :createBlockMaskRow:result *tmp311 *tmp313
   984 label *label420

Modifications by Inline function call at OreLocator.mnd:488:20 (+31 instructions):
 
  1024 op add *tmp325 :createCombinedMask:y -2
  1025 set :createBlockMaskRow:x :createCombinedMask:x
  1026 set :createBlockMaskRow:y *tmp325
-    * setaddr :createBlockMaskRow*retaddr *label269 (h:*label269)
-    * call *label13 *invalid :createBlockMaskRow*retval (m:*label269) (h:*label269)
-    * label *label269
+ 1027 label *label431
+ 1028 label *label432
+ 1029 label *label433
+ 1030 op add *tmp312 :createBlockMaskRow:x 4
+ 1031 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
+ 1032 label *label434
+ 1033 label *label435
+ 1034 op shl *tmp311 :createBlockMaskRow:result 1
+ 1035 op add *tmp312 :createBlockMaskRow:x 3
+ 1036 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1037 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1038 label *label436
+ 1039 label *label437
+ 1040 op shl *tmp311 :createBlockMaskRow:result 1
+ 1041 op add *tmp312 :createBlockMaskRow:x 2
+ 1042 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1043 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1044 label *label438
+ 1045 label *label439
+ 1046 op shl *tmp311 :createBlockMaskRow:result 1
+ 1047 op add *tmp312 :createBlockMaskRow:x 1
+ 1048 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1049 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1050 label *label440
+ 1051 label *label441
+ 1052 op shl *tmp311 :createBlockMaskRow:result 1
+ 1053 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp313 0
+ 1054 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1055 label *label442
+ 1056 label *label443
+ 1057 op shl *tmp311 :createBlockMaskRow:result 1
+ 1058 op add *tmp312 :createBlockMaskRow:x -1
+ 1059 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1060 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1061 label *label444
+ 1062 label *label445
+ 1063 op shl *tmp311 :createBlockMaskRow:result 1
+ 1064 op add *tmp312 :createBlockMaskRow:x -2
+ 1065 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1066 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1067 label *label446
+ 1068 label *label447
+ 1069 op shl *tmp311 :createBlockMaskRow:result 1
+ 1070 op add *tmp312 :createBlockMaskRow:x -3
+ 1071 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1072 op or :createBlockMaskRow:result *tmp311 *tmp313
+ 1073 label *label448
+ 1074 label *label449
+ 1075 op shl *tmp311 :createBlockMaskRow:result 1
+ 1076 op add *tmp312 :createBlockMaskRow:x -4
+ 1077 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
+ 1078 op or :createBlockMaskRow*retval *tmp311 *tmp313
+ 1079 label *label450
+ 1080 label *label451
+ 1081 label *label452
  1082 op shl *tmp327 :createAdjacentMask:row1 1
  1083 op or *tmp328 :createAdjacentMask:row2 *tmp327
  1084 op shr *tmp329 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
  1021 label *label267
  1022 op sub :createAdjacentMask:r -1 1
  1023 label *label268
-    * op add *tmp325 :createCombinedMask:y -2
+ 1024 op add :createBlockMaskRow:y :createCombinedMask:y -2
  1025 set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp325
  1026 label *label431
  1027 label *label432
  1028 label *label433

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
  1026 label *label431
  1027 label *label432
  1028 label *label433
-    * op add *tmp312 :createBlockMaskRow:x 4
+ 1029 op add *tmp312 :createCombinedMask:x 4
  1030 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
  1031 label *label434
  1032 label *label435
  1033 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 3
+ 1034 op add *tmp312 :createCombinedMask:x 3
  1035 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1036 op or :createBlockMaskRow:result *tmp311 *tmp313
  1037 label *label436
  1038 label *label437
  1039 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 2
+ 1040 op add *tmp312 :createCombinedMask:x 2
  1041 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1042 op or :createBlockMaskRow:result *tmp311 *tmp313
  1043 label *label438
  1044 label *label439
  1045 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x 1
+ 1046 op add *tmp312 :createCombinedMask:x 1
  1047 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1048 op or :createBlockMaskRow:result *tmp311 *tmp313
  1049 label *label440
  1050 label *label441
  1051 op shl *tmp311 :createBlockMaskRow:result 1
-    * ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp313 0
+ 1052 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp313 0
  1053 op or :createBlockMaskRow:result *tmp311 *tmp313
  1054 label *label442
  1055 label *label443
  1056 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -1
+ 1057 op add *tmp312 :createCombinedMask:x -1
  1058 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1059 op or :createBlockMaskRow:result *tmp311 *tmp313
  1060 label *label444
  1061 label *label445
  1062 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -2
+ 1063 op add *tmp312 :createCombinedMask:x -2
  1064 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1065 op or :createBlockMaskRow:result *tmp311 *tmp313
  1066 label *label446
  1067 label *label447
  1068 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -3
+ 1069 op add *tmp312 :createCombinedMask:x -3
  1070 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1071 op or :createBlockMaskRow:result *tmp311 *tmp313
  1072 label *label448
  1073 label *label449
  1074 op shl *tmp311 :createBlockMaskRow:result 1
-    * op add *tmp312 :createBlockMaskRow:x -4
+ 1075 op add *tmp312 :createCombinedMask:x -4
  1076 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
  1077 op or :createBlockMaskRow*retval *tmp311 *tmp313
  1078 label *label450
 
  1089 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1090 set :createAdjacentMask:row1 :createBlockMaskRow*retval
  1091 label *label270
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1092 op sub :createAdjacentMask:r -2 1
  1093 label *label271
-    * op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1094 op add *tmp325 :createCombinedMask:y -3
+ 1095 set :createBlockMaskRow:x :createCombinedMask:x
  1096 set :createBlockMaskRow:y *tmp325
  1097 setaddr :createBlockMaskRow*retaddr *label272 (h:*label272)
  1098 call *label13 *invalid :createBlockMaskRow*retval (m:*label272) (h:*label272)

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-2 instructions):
 
  1019 set :createAdjacentMask:row2 :createAdjacentMask:row1
  1020 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1021 label *label267
-    * op sub :createAdjacentMask:r -1 1
  1022 label *label268
  1023 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
  1024 label *label431
  1025 label *label432
  1026 label *label433

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * label *label22
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    35 jump *label24 notEqual *tmp27 false
    36 label *label277
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label23
    38 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    39 jump *label277 equal *tmp27 false
    40 label *label24
-    * label *label21
-    * label *label20
    41 op div *tmp30 *tmp24 3.8197185279121366
    42 op pow .mapTotal *tmp30 2
    43 set :findDrillLocationLocal:oreX 0
 
    60 op mul .mapProgress .angle .angle
    61 op sub *tmp46 @mapw 5
    62 op sub *tmp53 @maph 5
-    * label *label29
    63 jump *label31 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    64 label *label202
    65 op div :locateOreAway:a .angle @degToRad
 
    68 op add *tmp45 :findDrillLocationLocal:x *tmp44
    69 op max *tmp48 *tmp45 5
    70 op min *tmp47 *tmp48 *tmp46
-    * label *label32
    71 op cos *tmp50 :locateOreAway:a
    72 op mul *tmp51 *tmp50 :locateOreAway:distance
    73 op add *tmp52 :findDrillLocationLocal:y *tmp51
    74 op max *tmp55 *tmp52 5
    75 op min *tmp54 *tmp55 *tmp53
-    * label *label33
-    * label *label35
    76 ucontrol within *tmp47 *tmp54 5 *tmp57
    77 jump *label37 notEqual *tmp57 false
    78 label *label209
    79 ucontrol approach *tmp47 *tmp54 4.5
-    * label *label36
    80 ucontrol within *tmp47 *tmp54 5 *tmp57
    81 jump *label209 equal *tmp57 false
    82 label *label37
-    * label *label34
    83 op div *tmp60 3.8197185279121366 :locateOreAway:distance
    84 op add .angle .angle *tmp60
    85 op mul .mapProgress .angle .angle
 
    89 set *tmp37 false
    90 jump *label28 always
    91 label *label38
-    * label *label39
    92 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
    93 op abs *tmp68 *tmp67
    94 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
 
   101 jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
   102 jump *label30 always
   103 label *label42
-    * label *label43
   104 label *label40
-    * label *label41
   105 jump *label44 lessThan :locateOreAway:coreDist 8
   106 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   107 set :locateOreAway:lastX :locateOreAway:x
   108 set :locateOreAway:lastY :locateOreAway:y
   109 set *tmp84 .locations
   110 set :visited:i .locationsStart
-    * label *label49
   111 jump *label51 greaterThanEq .locationsStart *tmp84
   112 label *label203
   113 op mul :visited:index 4 :visited:i
 
   122 set *tmp83 true
   123 jump *label48 always
   124 label *label52
-    * label *label53
-    * label *label50
   125 op add :visited:i :visited:i 1
   126 jump *label203 lessThan :visited:i *tmp84
   127 label *label51
 
   135 set *tmp37 true
   136 jump *label28 always
   137 label *label54
-    * label *label55
   138 label *label46
-    * label *label47
   139 label *label44
-    * label *label45
   140 label *label30
   141 jump *label202 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   142 label *label31
 
   148 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   149 jump *label19 always
   150 label *label56
-    * label *label57
   151 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   152 op add .mapSpots .mapSpots 1
   153 label *label58
-    * label *label59
-    * label *label62
   154 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   155 jump *label64 notEqual *tmp109 false
   156 label *label229
   157 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label63
   158 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   159 jump *label229 equal *tmp109 false
   160 label *label64
-    * label *label61
-    * label *label60
   161 set :findDrillLocationLocal:last 0
   162 label *label65
   163 write @unit processor1 ":findBestPosition:unit"
 
   184 jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
   185 jump *label67 always
   186 label *label69
-    * label *label70
   187 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   188 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   189 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   191 jump *label73 greaterThanEq :findDrillLocationLocal:limit 1000
   192 set .mapSpots :findDrillLocationLocal:score
   193 label *label73
-    * label *label74
   194 jump *label75 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   195 op add .count .count 1
   196 sensor *tmp131 :findDrillLocationLocal:item @id
 
   202 op add .count .count 1
   203 write :findDrillLocationLocal:dy bank1 .count
   204 op add .locations .locations 1
-    * label *label77
   205 ucontrol unbind
   206 set :findDrillLocationLocal*retval true
   207 jump *label19 always
   208 label *label75
-    * label *label76
   209 label *label71
-    * label *label72
   210 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   211 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   212 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   213 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   214 label *label78
-    * label *label79
   215 jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   216 jump *label67 always
   217 label *label80
-    * label *label81
   218 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   219 op mul :round:x :findDrillLocationLocal:diffX 1.1
   220 op add *tmp145 :round:x 0.5
   221 op floor *tmp144 *tmp145
-    * label *label82
   222 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp144
   223 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   224 op add *tmp149 :round.1:x 0.5
   225 op floor *tmp148 *tmp149
-    * label *label83
   226 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
-    * label *label66
   227 jump *label65 always
   228 label *label67
   229 jump *label84 lessThan :findDrillLocationLocal:best 0
 
   237 op add .count .count 1
   238 write :findDrillLocationLocal:bestY bank1 .count
   239 op add .locations .locations 1
-    * label *label86
   240 label *label84
-    * label *label85
-    * label *label26
   241 jump *label25 always
-    * label *label27
   242 set :findDrillLocationLocal*retval null
   243 label *label19
   244 return :findDrillLocationLocal*retaddr
 
   263 op shl *tmp205 1 :excludeArea:blockSizeX
   264 op sub :createMatrixOfSize:row *tmp205 1
   265 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * label *label230
-    * label *label231
   266 jump *label232 lessThan 1 :excludeArea:blockSizeY
   267 jump *label102 always
   268 label *label232
-    * label *label233
   269 op shl *tmp209 :createMatrixOfSize:row 7
   270 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label234
-    * label *label235
   271 jump *label236 lessThan 2 :excludeArea:blockSizeY
   272 jump *label102 always
   273 label *label236
-    * label *label237
   274 op shl *tmp209 :createMatrixOfSize:matrix 7
   275 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label238
-    * label *label239
   276 jump *label240 lessThan 3 :excludeArea:blockSizeY
   277 jump *label102 always
   278 label *label240
-    * label *label241
   279 op shl *tmp209 :createMatrixOfSize:matrix 7
   280 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label242
-    * label *label243
   281 jump *label244 lessThan 4 :excludeArea:blockSizeY
   282 jump *label102 always
   283 label *label244
-    * label *label245
   284 op shl *tmp209 :createMatrixOfSize:matrix 7
   285 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label246
-    * label *label247
   286 jump *label248 lessThan 5 :excludeArea:blockSizeY
   287 jump *label102 always
   288 label *label248
-    * label *label249
   289 op shl *tmp209 :createMatrixOfSize:matrix 7
   290 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label250
-    * label *label251
   291 jump *label252 lessThan 6 :excludeArea:blockSizeY
   292 jump *label102 always
   293 label *label252
-    * label *label253
   294 op shl *tmp209 :createMatrixOfSize:matrix 7
   295 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * label *label254
   296 label *label102
-    * label *label99
   297 op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX
   298 op sub *tmp212 7 :excludeArea:blockSizeX
   299 op mul :excludeArea:shiftX *tmp211 *tmp212
   300 op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY
   301 op sub *tmp215 7 :excludeArea:blockSizeY
   302 op mul :excludeArea:shiftY *tmp214 *tmp215
-    * label *label279
   303 op abs *tmp163 :excludeArea:shiftX
   304 op greaterThan *tmp164 *tmp163 6
   305 op abs *tmp165 :excludeArea:shiftY
 
   309 set :shiftMask*retval 0
   310 jump *label288 always
   311 label *label280
-    * label *label281
   312 op mul *tmp169 7 :excludeArea:shiftY
   313 op add :shiftMask:shift :excludeArea:shiftX *tmp169
   314 jump *label282 lessThanEq :shiftMask:shift 0
 
   325 jump *label284 lessThanEq :excludeArea:shiftX 0
   326 op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX
   327 label *label284
-    * label *label285
   328 op shl *tmp183 :shiftMask:keep 7
   329 op or :shiftMask:keep :shiftMask:keep *tmp183
   330 op shl *tmp184 :shiftMask:keep 14
 
   333 op or :shiftMask:keep :shiftMask:keep *tmp185
   334 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   335 label *label286
-    * label *label287
   336 set :shiftMask*retval :shiftMask:mask
   337 label *label288
   338 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
 
   346 end
   347 label *label11
   348 set :findPossiblePlacement:y -3
-    * label *label107
   349 jump *label109 greaterThan :findPossiblePlacement:y 3
   350 label *label205
   351 op add *tmp218 :findPossiblePlacement:y 3
   352 op mul *tmp219 7 *tmp218
   353 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp219
   354 set :findPossiblePlacement:x -3
-    * label *label110
   355 jump *label112 greaterThan :findPossiblePlacement:x 3
   356 label *label206
   357 op and *tmp221 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   361 op add :findPossiblePlacement*retval *tmp225 :findPossiblePlacement:x
   362 jump *label106 always
   363 label *label113
-    * label *label114
   364 op sub *tmp227 3 :findPossiblePlacement:width
   365 jump *label115 lessThanEq :findPossiblePlacement:x *tmp227
   366 jump *label112 always
   367 label *label115
-    * label *label116
   368 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label111
   369 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   370 jump *label206 lessThanEq :findPossiblePlacement:x 3
   371 label *label112
 
   373 jump *label117 lessThanEq :findPossiblePlacement:y *tmp230
   374 jump *label109 always
   375 label *label117
-    * label *label118
-    * label *label108
   376 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   377 jump *label205 lessThanEq :findPossiblePlacement:y 3
   378 label *label109
 
   393 set :tryPlaceGenerator*retval false
   394 jump *label119 always
   395 label *label123
-    * label *label124
   396 op add *tmp238 :tryPlaceGenerator:centerX 0.5
   397 op add .water2X *tmp238 :findPossiblePlacement:x
   398 op add *tmp240 :tryPlaceGenerator:centerY 0.5
 
   415 set :tryPlaceGenerator*retval false
   416 jump *label119 always
   417 label *label126
-    * label *label127
   418 op add *tmp250 :tryPlaceGenerator:centerX 0.5
   419 op add .water2X *tmp250 :findPossiblePlacement:x
   420 op add *tmp252 :tryPlaceGenerator:centerY 0.5
 
   425 op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   426 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp258
   427 label *label122
-    * label *label128
   428 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask 437639987601635
   429 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   430 set :findPossiblePlacement:placementMask 1
 
   437 set :tryPlaceGenerator*retval false
   438 jump *label119 always
   439 label *label130
-    * label *label131
   440 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   441 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   442 op shl *tmp278 1 :findPossiblePlacement*retval
 
   452 set :tryPlaceGenerator*retval false
   453 jump *label119 always
   454 label *label133
-    * label *label134
   455 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   456 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   457 op shl *tmp284 1 :findPossiblePlacement*retval
 
   487 set :tryPlaceGenerator*retval false
   488 jump *label119 always
   489 label *label138
-    * label *label139
   490 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   491 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   492 label *label135
-    * label *label136
   493 set :tryPlaceGenerator*retval true
   494 jump *label119 always
   495 label *label119
   496 return :tryPlaceGenerator*retaddr
   497 end
   498 label *label13
-    * label *label210
-    * label *label211
   499 op add *tmp312 :createBlockMaskRow:x 4
   500 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
-    * label *label212
-    * label *label213
   501 op shl *tmp311 :createBlockMaskRow:result 1
   502 op add *tmp312 :createBlockMaskRow:x 3
   503 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   504 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label214
-    * label *label215
   505 op shl *tmp311 :createBlockMaskRow:result 1
   506 op add *tmp312 :createBlockMaskRow:x 2
   507 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   508 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label216
-    * label *label217
   509 op shl *tmp311 :createBlockMaskRow:result 1
   510 op add *tmp312 :createBlockMaskRow:x 1
   511 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   512 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label218
-    * label *label219
   513 op shl *tmp311 :createBlockMaskRow:result 1
   514 ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow:y 0 *tmp313 0
   515 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label220
-    * label *label221
   516 op shl *tmp311 :createBlockMaskRow:result 1
   517 op add *tmp312 :createBlockMaskRow:x -1
   518 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   519 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label222
-    * label *label223
   520 op shl *tmp311 :createBlockMaskRow:result 1
   521 op add *tmp312 :createBlockMaskRow:x -2
   522 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   523 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label224
-    * label *label225
   524 op shl *tmp311 :createBlockMaskRow:result 1
   525 op add *tmp312 :createBlockMaskRow:x -3
   526 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   527 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label226
-    * label *label227
   528 op shl *tmp311 :createBlockMaskRow:result 1
   529 op add *tmp312 :createBlockMaskRow:x -4
   530 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   531 op or :createBlockMaskRow*retval *tmp311 *tmp313
-    * label *label228
-    * label *label143
-    * label *label140
   532 return :createBlockMaskRow*retaddr
   533 end
   534 label *label14
 
   540 set :createAdjacentMask:x :createCombinedMask:x
   541 set :createAdjacentMask:y :createCombinedMask:y
   542 op add *tmp321 :createCombinedMask:y 4
-    * label *label299
-    * label *label300
-    * label *label301
   543 op add *tmp312 :createCombinedMask:x 4
   544 ucontrol getBlock *tmp312 *tmp321 0 :createBlockMaskRow:result 0
-    * label *label302
-    * label *label303
   545 op shl *tmp311 :createBlockMaskRow:result 1
   546 op add *tmp312 :createCombinedMask:x 3
   547 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   548 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label304
-    * label *label305
   549 op shl *tmp311 :createBlockMaskRow:result 1
   550 op add *tmp312 :createCombinedMask:x 2
   551 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   552 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label306
-    * label *label307
   553 op shl *tmp311 :createBlockMaskRow:result 1
   554 op add *tmp312 :createCombinedMask:x 1
   555 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   556 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label308
-    * label *label309
   557 op shl *tmp311 :createBlockMaskRow:result 1
   558 ucontrol getBlock :createCombinedMask:x *tmp321 0 *tmp313 0
   559 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label310
-    * label *label311
   560 op shl *tmp311 :createBlockMaskRow:result 1
   561 op add *tmp312 :createCombinedMask:x -1
   562 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   563 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label312
-    * label *label313
   564 op shl *tmp311 :createBlockMaskRow:result 1
   565 op add *tmp312 :createCombinedMask:x -2
   566 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   567 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label314
-    * label *label315
   568 op shl *tmp311 :createBlockMaskRow:result 1
   569 op add *tmp312 :createCombinedMask:x -3
   570 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   571 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label316
-    * label *label317
   572 op shl *tmp311 :createBlockMaskRow:result 1
   573 op add *tmp312 :createCombinedMask:x -4
   574 ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0
   575 op or :createAdjacentMask:row2 *tmp311 *tmp313
-    * label *label318
-    * label *label319
-    * label *label320
   576 op add *tmp323 :createCombinedMask:y 3
-    * label *label321
-    * label *label322
-    * label *label323
   577 op add *tmp312 :createCombinedMask:x 4
   578 ucontrol getBlock *tmp312 *tmp323 0 :createBlockMaskRow:result 0
-    * label *label324
-    * label *label325
   579 op shl *tmp311 :createBlockMaskRow:result 1
   580 op add *tmp312 :createCombinedMask:x 3
   581 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   582 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label326
-    * label *label327
   583 op shl *tmp311 :createBlockMaskRow:result 1
   584 op add *tmp312 :createCombinedMask:x 2
   585 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   586 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label328
-    * label *label329
   587 op shl *tmp311 :createBlockMaskRow:result 1
   588 op add *tmp312 :createCombinedMask:x 1
   589 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   590 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label330
-    * label *label331
   591 op shl *tmp311 :createBlockMaskRow:result 1
   592 ucontrol getBlock :createCombinedMask:x *tmp323 0 *tmp313 0
   593 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label332
-    * label *label333
   594 op shl *tmp311 :createBlockMaskRow:result 1
   595 op add *tmp312 :createCombinedMask:x -1
   596 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   597 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label334
-    * label *label335
   598 op shl *tmp311 :createBlockMaskRow:result 1
   599 op add *tmp312 :createCombinedMask:x -2
   600 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   601 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label336
-    * label *label337
   602 op shl *tmp311 :createBlockMaskRow:result 1
   603 op add *tmp312 :createCombinedMask:x -3
   604 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   605 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label338
-    * label *label339
   606 op shl *tmp311 :createBlockMaskRow:result 1
   607 op add *tmp312 :createCombinedMask:x -4
   608 ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0
   609 op or :createAdjacentMask:row1 *tmp311 *tmp313
-    * label *label340
-    * label *label341
-    * label *label342
-    * label *label255
-    * label *label256
   610 op add *tmp325 :createCombinedMask:y 2
-    * label *label343
-    * label *label344
-    * label *label345
   611 op add *tmp312 :createCombinedMask:x 4
   612 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
-    * label *label346
-    * label *label347
   613 op shl *tmp311 :createBlockMaskRow:result 1
   614 op add *tmp312 :createCombinedMask:x 3
   615 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   616 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label348
-    * label *label349
   617 op shl *tmp311 :createBlockMaskRow:result 1
   618 op add *tmp312 :createCombinedMask:x 2
   619 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   620 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label350
-    * label *label351
   621 op shl *tmp311 :createBlockMaskRow:result 1
   622 op add *tmp312 :createCombinedMask:x 1
   623 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   624 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label352
-    * label *label353
   625 op shl *tmp311 :createBlockMaskRow:result 1
   626 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   627 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label354
-    * label *label355
   628 op shl *tmp311 :createBlockMaskRow:result 1
   629 op add *tmp312 :createCombinedMask:x -1
   630 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   631 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label356
-    * label *label357
   632 op shl *tmp311 :createBlockMaskRow:result 1
   633 op add *tmp312 :createCombinedMask:x -2
   634 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   635 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label358
-    * label *label359
   636 op shl *tmp311 :createBlockMaskRow:result 1
   637 op add *tmp312 :createCombinedMask:x -3
   638 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   639 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label360
-    * label *label361
   640 op shl *tmp311 :createBlockMaskRow:result 1
   641 op add *tmp312 :createCombinedMask:x -4
   642 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   643 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label362
-    * label *label363
-    * label *label364
   644 op shl *tmp327 :createAdjacentMask:row1 1
   645 op or *tmp328 :createAdjacentMask:row2 *tmp327
   646 op shr *tmp329 :createAdjacentMask:row1 1
 
   649 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   650 set :createAdjacentMask:row2 :createAdjacentMask:row1
   651 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label258
-    * label *label259
   652 op add *tmp325 :createCombinedMask:y 1
-    * label *label365
-    * label *label366
-    * label *label367
   653 op add *tmp312 :createCombinedMask:x 4
   654 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
-    * label *label368
-    * label *label369
   655 op shl *tmp311 :createBlockMaskRow:result 1
   656 op add *tmp312 :createCombinedMask:x 3
   657 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   658 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label370
-    * label *label371
   659 op shl *tmp311 :createBlockMaskRow:result 1
   660 op add *tmp312 :createCombinedMask:x 2
   661 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   662 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label372
-    * label *label373
   663 op shl *tmp311 :createBlockMaskRow:result 1
   664 op add *tmp312 :createCombinedMask:x 1
   665 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   666 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label374
-    * label *label375
   667 op shl *tmp311 :createBlockMaskRow:result 1
   668 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   669 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label376
-    * label *label377
   670 op shl *tmp311 :createBlockMaskRow:result 1
   671 op add *tmp312 :createCombinedMask:x -1
   672 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   673 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label378
-    * label *label379
   674 op shl *tmp311 :createBlockMaskRow:result 1
   675 op add *tmp312 :createCombinedMask:x -2
   676 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   677 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label380
-    * label *label381
   678 op shl *tmp311 :createBlockMaskRow:result 1
   679 op add *tmp312 :createCombinedMask:x -3
   680 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   681 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label382
-    * label *label383
   682 op shl *tmp311 :createBlockMaskRow:result 1
   683 op add *tmp312 :createCombinedMask:x -4
   684 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   685 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label384
-    * label *label385
-    * label *label386
   686 op shl *tmp327 :createAdjacentMask:row1 1
   687 op or *tmp328 :createAdjacentMask:row2 *tmp327
   688 op shr *tmp329 :createAdjacentMask:row1 1
 
   693 op or :createAdjacentMask:result *tmp332 *tmp333
   694 set :createAdjacentMask:row2 :createAdjacentMask:row1
   695 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label261
-    * label *label262
-    * label *label387
-    * label *label388
-    * label *label389
   696 op add *tmp312 :createCombinedMask:x 4
   697 ucontrol getBlock *tmp312 :createCombinedMask:y 0 :createBlockMaskRow:result 0
-    * label *label390
-    * label *label391
   698 op shl *tmp311 :createBlockMaskRow:result 1
   699 op add *tmp312 :createCombinedMask:x 3
   700 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   701 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label392
-    * label *label393
   702 op shl *tmp311 :createBlockMaskRow:result 1
   703 op add *tmp312 :createCombinedMask:x 2
   704 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   705 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label394
-    * label *label395
   706 op shl *tmp311 :createBlockMaskRow:result 1
   707 op add *tmp312 :createCombinedMask:x 1
   708 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   709 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label396
-    * label *label397
   710 op shl *tmp311 :createBlockMaskRow:result 1
   711 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp313 0
   712 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label398
-    * label *label399
   713 op shl *tmp311 :createBlockMaskRow:result 1
   714 op add *tmp312 :createCombinedMask:x -1
   715 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   716 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label400
-    * label *label401
   717 op shl *tmp311 :createBlockMaskRow:result 1
   718 op add *tmp312 :createCombinedMask:x -2
   719 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   720 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label402
-    * label *label403
   721 op shl *tmp311 :createBlockMaskRow:result 1
   722 op add *tmp312 :createCombinedMask:x -3
   723 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   724 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label404
-    * label *label405
   725 op shl *tmp311 :createBlockMaskRow:result 1
   726 op add *tmp312 :createCombinedMask:x -4
   727 ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0
   728 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label406
-    * label *label407
-    * label *label408
   729 op shl *tmp327 :createAdjacentMask:row1 1
   730 op or *tmp328 :createAdjacentMask:row2 *tmp327
   731 op shr *tmp329 :createAdjacentMask:row1 1
 
   736 op or :createAdjacentMask:result *tmp332 *tmp333
   737 set :createAdjacentMask:row2 :createAdjacentMask:row1
   738 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label264
-    * label *label265
   739 op add *tmp325 :createCombinedMask:y -1
-    * label *label409
-    * label *label410
-    * label *label411
   740 op add *tmp312 :createCombinedMask:x 4
   741 ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:result 0
-    * label *label412
-    * label *label413
   742 op shl *tmp311 :createBlockMaskRow:result 1
   743 op add *tmp312 :createCombinedMask:x 3
   744 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   745 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label414
-    * label *label415
   746 op shl *tmp311 :createBlockMaskRow:result 1
   747 op add *tmp312 :createCombinedMask:x 2
   748 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   749 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label416
-    * label *label417
   750 op shl *tmp311 :createBlockMaskRow:result 1
   751 op add *tmp312 :createCombinedMask:x 1
   752 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   753 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label418
-    * label *label419
   754 op shl *tmp311 :createBlockMaskRow:result 1
   755 ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0
   756 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label420
-    * label *label421
   757 op shl *tmp311 :createBlockMaskRow:result 1
   758 op add *tmp312 :createCombinedMask:x -1
   759 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   760 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label422
-    * label *label423
   761 op shl *tmp311 :createBlockMaskRow:result 1
   762 op add *tmp312 :createCombinedMask:x -2
   763 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   764 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label424
-    * label *label425
   765 op shl *tmp311 :createBlockMaskRow:result 1
   766 op add *tmp312 :createCombinedMask:x -3
   767 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   768 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label426
-    * label *label427
   769 op shl *tmp311 :createBlockMaskRow:result 1
   770 op add *tmp312 :createCombinedMask:x -4
   771 ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0
   772 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label428
-    * label *label429
-    * label *label430
   773 op shl *tmp327 :createAdjacentMask:row1 1
   774 op or *tmp328 :createAdjacentMask:row2 *tmp327
   775 op shr *tmp329 :createAdjacentMask:row1 1
 
   780 op or :createAdjacentMask:result *tmp332 *tmp333
   781 set :createAdjacentMask:row2 :createAdjacentMask:row1
   782 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label267
-    * label *label268
   783 op add :createBlockMaskRow:y :createCombinedMask:y -2
-    * label *label431
-    * label *label432
-    * label *label433
   784 op add *tmp312 :createCombinedMask:x 4
   785 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
-    * label *label434
-    * label *label435
   786 op shl *tmp311 :createBlockMaskRow:result 1
   787 op add *tmp312 :createCombinedMask:x 3
   788 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   789 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label436
-    * label *label437
   790 op shl *tmp311 :createBlockMaskRow:result 1
   791 op add *tmp312 :createCombinedMask:x 2
   792 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   793 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label438
-    * label *label439
   794 op shl *tmp311 :createBlockMaskRow:result 1
   795 op add *tmp312 :createCombinedMask:x 1
   796 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   797 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label440
-    * label *label441
   798 op shl *tmp311 :createBlockMaskRow:result 1
   799 ucontrol getBlock :createCombinedMask:x :createBlockMaskRow:y 0 *tmp313 0
   800 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label442
-    * label *label443
   801 op shl *tmp311 :createBlockMaskRow:result 1
   802 op add *tmp312 :createCombinedMask:x -1
   803 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   804 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label444
-    * label *label445
   805 op shl *tmp311 :createBlockMaskRow:result 1
   806 op add *tmp312 :createCombinedMask:x -2
   807 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   808 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label446
-    * label *label447
   809 op shl *tmp311 :createBlockMaskRow:result 1
   810 op add *tmp312 :createCombinedMask:x -3
   811 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   812 op or :createBlockMaskRow:result *tmp311 *tmp313
-    * label *label448
-    * label *label449
   813 op shl *tmp311 :createBlockMaskRow:result 1
   814 op add *tmp312 :createCombinedMask:x -4
   815 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   816 op or :createBlockMaskRow*retval *tmp311 *tmp313
-    * label *label450
-    * label *label451
-    * label *label452
   817 op shl *tmp327 :createAdjacentMask:row1 1
   818 op or *tmp328 :createAdjacentMask:row2 *tmp327
   819 op shr *tmp329 :createAdjacentMask:row1 1
 
   824 op or :createAdjacentMask:result *tmp332 *tmp333
   825 set :createAdjacentMask:row2 :createAdjacentMask:row1
   826 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label270
   827 op sub :createAdjacentMask:r -2 1
-    * label *label271
   828 op add *tmp325 :createCombinedMask:y -3
   829 set :createBlockMaskRow:x :createCombinedMask:x
   830 set :createBlockMaskRow:y *tmp325
 
   841 op or :createAdjacentMask:result *tmp332 *tmp333
   842 set :createAdjacentMask:row2 :createAdjacentMask:row1
   843 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label273
   844 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label274
   845 op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r
   846 set :createBlockMaskRow:x :createAdjacentMask:x
   847 set :createBlockMaskRow:y *tmp325
 
   858 op or :createAdjacentMask:result *tmp332 *tmp333
   859 set :createAdjacentMask:row2 :createAdjacentMask:row1
   860 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label276
   861 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * label *label150
   862 op shr *tmp320 :createAdjacentMask:result 1
-    * label *label145
   863 label *label152
   864 wait 1e-15
   865 read *tmp336 processor1 ":createTerrainMask*finished"
 
   876 call *label10 *invalid :excludeArea*retval (m:*label153) (h:*label153)
   877 label *label153
   878 set :createCombinedMask*retval :excludeArea*retval
-    * label *label144
   879 return :createCombinedMask*retaddr
   880 end
   881 label *label15
 
   889 set .water1X -1
   890 set :moveTo.5:x .drillX
   891 set :moveTo.5:y .drillY
-    * label *label156
   892 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
   893 jump *label158 notEqual *tmp339 false
   894 label *label278
   895 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label157
   896 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339
   897 jump *label278 equal *tmp339 false
   898 label *label158
-    * label *label155
   899 set :createCombinedMask:x .drillX
   900 set :createCombinedMask:y .drillY
   901 setaddr :createCombinedMask*retaddr *label159 (h:*label159)
   902 call *label14 *invalid :createCombinedMask*retval (m:*label159) (h:*label159)
   903 label *label159
-    * label *label160
   904 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * label *label161
   905 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * label *label162
   906 set :layoutThoriumDrillAtLocation:mask2x2 387
   907 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   908 set :findPossiblePlacement:placementMask 387
 
   920 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp384
   921 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp384
   922 label *label164
-    * label *label165
   923 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   924 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   925 set :findPossiblePlacement:width 2
 
   935 op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   936 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp393
   937 label *label167
-    * label *label168
-    * label *label169
   938 op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumDrillAtLocation:terrainMask 437639987601635
   939 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:nodeMask
   940 set :findPossiblePlacement:placementMask 1
 
   947 set :layoutThoriumDrillAtLocation*retval false
   948 jump *label154 always
   949 label *label171
-    * label *label172
   950 op add .node1X .drillX :findPossiblePlacement:x
   951 op add .node1Y .drillY :findPossiblePlacement:y
   952 op shl *tmp414 1 :findPossiblePlacement*retval
   953 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp414
-    * label *label173
   954 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * label *label174
   955 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   956 set :tryPlaceGenerator:centerX .drillX
   957 set :tryPlaceGenerator:centerY .drillY
 
   965 set :layoutThoriumDrillAtLocation*retval true
   966 jump *label154 always
   967 label *label176
-    * label *label177
   968 set :layoutThoriumDrillAtLocation:sx 3
   969 set :layoutThoriumDrillAtLocation:sy 3
   970 setaddr *tmp429 *label181
 
   992 call *label14 *invalid :createCombinedMask*retval (m:*label185) (h:*label185)
   993 label *label185
   994 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * label *label289
   995 op abs *tmp163 :layoutThoriumDrillAtLocation:sx
   996 op greaterThan *tmp164 *tmp163 6
   997 op abs *tmp165 :layoutThoriumDrillAtLocation:sy
 
  1001 set :shiftMask*retval 0
  1002 jump *label298 always
  1003 label *label290
-    * label *label291
  1004 op mul *tmp169 7 :layoutThoriumDrillAtLocation:sy
  1005 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp169
  1006 jump *label292 lessThanEq :shiftMask:shift 0
 
  1017 jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0
  1018 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
  1019 label *label294
-    * label *label295
  1020 op shl *tmp183 :shiftMask:keep 7
  1021 op or :shiftMask:keep :shiftMask:keep *tmp183
  1022 op shl *tmp184 :shiftMask:keep 14
 
  1025 op or :shiftMask:keep :shiftMask:keep *tmp185
  1026 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
  1027 label *label296
-    * label *label297
  1028 set :shiftMask*retval :shiftMask:mask
  1029 label *label298
  1030 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval :shiftMask*retval
 
  1042 set :layoutThoriumDrillAtLocation*retval true
  1043 jump *label154 always
  1044 label *label188
-    * label *label189
-    * label *label179
  1045 multijump *tmp429 0 0 (m:marker0)
  1046 multilabel *label184 (m:marker0)
-    * label *label180
  1047 set :layoutThoriumDrillAtLocation*retval true
  1048 label *label154
  1049 return :layoutThoriumDrillAtLocation*retaddr
 
  1065 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1066 set .searchFinished true
  1067 set :findDrillLocation*retval true
-    * label *label190
  1068 set :findDrillLocation*finished true
  1069 jump *label18 always
  1070 end
 
  1085 set :layoutThoriumDrill*retval false
  1086 jump *label192 always
  1087 label *label194
-    * label *label195
  1088 setaddr :layoutThoriumDrillAtLocation*retaddr *label196 (h:*label196)
  1089 call *label15 *invalid :layoutThoriumDrillAtLocation*retval (m:*label196) (h:*label196)
  1090 label *label196
 
  1099 set .mapTotal 0
  1100 set .mapProgress 0
  1101 ucontrol unbind
-    * label *label197
  1102 set :stopLocation*finished true
  1103 jump *label18 always
  1104 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-11 instructions):
 
    98 op sub *tmp73 :locateOreAway:y *tmp54
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label42 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label30 always
+  101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
   102 label *label42
   103 label *label40
   104 jump *label44 lessThan :locateOreAway:coreDist 8
 
   180 op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   181 op abs *tmp119 *tmp118
   182 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
-    * jump *label69 greaterThan :findDrillLocationLocal:coreDist 8
-    * jump *label67 always
+  183 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
   184 label *label69
   185 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   186 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
 
   210 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   211 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   212 label *label78
-    * jump *label80 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label67 always
+  213 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   214 label *label80
   215 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   216 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   260 op shl *tmp205 1 :excludeArea:blockSizeX
   261 op sub :createMatrixOfSize:row *tmp205 1
   262 set :createMatrixOfSize:matrix :createMatrixOfSize:row
-    * jump *label232 lessThan 1 :excludeArea:blockSizeY
-    * jump *label102 always
+  263 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
   264 label *label232
   265 op shl *tmp209 :createMatrixOfSize:row 7
   266 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * jump *label236 lessThan 2 :excludeArea:blockSizeY
-    * jump *label102 always
+  267 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
   268 label *label236
   269 op shl *tmp209 :createMatrixOfSize:matrix 7
   270 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * jump *label240 lessThan 3 :excludeArea:blockSizeY
-    * jump *label102 always
+  271 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
   272 label *label240
   273 op shl *tmp209 :createMatrixOfSize:matrix 7
   274 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * jump *label244 lessThan 4 :excludeArea:blockSizeY
-    * jump *label102 always
+  275 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
   276 label *label244
   277 op shl *tmp209 :createMatrixOfSize:matrix 7
   278 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * jump *label248 lessThan 5 :excludeArea:blockSizeY
-    * jump *label102 always
+  279 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
   280 label *label248
   281 op shl *tmp209 :createMatrixOfSize:matrix 7
   282 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
-    * jump *label252 lessThan 6 :excludeArea:blockSizeY
-    * jump *label102 always
+  283 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
   284 label *label252
   285 op shl *tmp209 :createMatrixOfSize:matrix 7
   286 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
 
   353 jump *label106 always
   354 label *label113
   355 op sub *tmp227 3 :findPossiblePlacement:width
-    * jump *label115 lessThanEq :findPossiblePlacement:x *tmp227
-    * jump *label112 always
+  356 jump *label112 greaterThan :findPossiblePlacement:x *tmp227
   357 label *label115
   358 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   359 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   360 jump *label206 lessThanEq :findPossiblePlacement:x 3
   361 label *label112
   362 op sub *tmp230 3 :findPossiblePlacement:height
-    * jump *label117 lessThanEq :findPossiblePlacement:y *tmp230
-    * jump *label109 always
+  363 jump *label109 greaterThan :findPossiblePlacement:y *tmp230
   364 label *label117
   365 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   366 jump *label205 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x
   101 jump *label30 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label42
   102 label *label40
   103 jump *label44 lessThan :locateOreAway:coreDist 8
   104 jump *label46 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   180 op abs *tmp119 *tmp118
   181 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   182 jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8
-    * label *label69
   183 jump *label71 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   184 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   185 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   209 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   210 label *label78
   211 jump *label67 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label80
   212 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   213 op mul :round:x :findDrillLocationLocal:diffX 1.1
   214 op add *tmp145 :round:x 0.5
 
   258 op sub :createMatrixOfSize:row *tmp205 1
   259 set :createMatrixOfSize:matrix :createMatrixOfSize:row
   260 jump *label102 greaterThanEq 1 :excludeArea:blockSizeY
-    * label *label232
   261 op shl *tmp209 :createMatrixOfSize:row 7
   262 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   263 jump *label102 greaterThanEq 2 :excludeArea:blockSizeY
-    * label *label236
   264 op shl *tmp209 :createMatrixOfSize:matrix 7
   265 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   266 jump *label102 greaterThanEq 3 :excludeArea:blockSizeY
-    * label *label240
   267 op shl *tmp209 :createMatrixOfSize:matrix 7
   268 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   269 jump *label102 greaterThanEq 4 :excludeArea:blockSizeY
-    * label *label244
   270 op shl *tmp209 :createMatrixOfSize:matrix 7
   271 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   272 jump *label102 greaterThanEq 5 :excludeArea:blockSizeY
-    * label *label248
   273 op shl *tmp209 :createMatrixOfSize:matrix 7
   274 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   275 jump *label102 greaterThanEq 6 :excludeArea:blockSizeY
-    * label *label252
   276 op shl *tmp209 :createMatrixOfSize:matrix 7
   277 op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize:row
   278 label *label102
 
   345 label *label113
   346 op sub *tmp227 3 :findPossiblePlacement:width
   347 jump *label112 greaterThan :findPossiblePlacement:x *tmp227
-    * label *label115
   348 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   349 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   350 jump *label206 lessThanEq :findPossiblePlacement:x 3
   351 label *label112
   352 op sub *tmp230 3 :findPossiblePlacement:height
   353 jump *label109 greaterThan :findPossiblePlacement:y *tmp230
-    * label *label117
   354 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   355 jump *label205 lessThanEq :findPossiblePlacement:y 3
   356 label *label109

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   144 set :findDrillLocationLocal:oreY :locateOreAway:y
   145 jump *label56 notEqual *tmp37 false
   146 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label19 always
+  147 return :findDrillLocationLocal*retaddr
   148 label *label56
   149 jump *label58 lessThan :findDrillLocationLocal:limit 1000
   150 op add .mapSpots .mapSpots 1
 
   200 op add .locations .locations 1
   201 ucontrol unbind
   202 set :findDrillLocationLocal*retval true
-    * jump *label19 always
+  203 return :findDrillLocationLocal*retaddr
   204 label *label75
   205 label *label71
   206 jump *label78 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   220 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
   221 jump *label65 always
   222 label *label67
-    * jump *label84 lessThan :findDrillLocationLocal:best 0
+  223 jump *label25 lessThan :findDrillLocationLocal:best 0
   224 op add .count .count 1
   225 sensor *tmp155 :findDrillLocationLocal:item @id
   226 write *tmp155 bank1 .count
 
   318 set :shiftMask*retval :shiftMask:mask
   319 label *label288
   320 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
-    * jump *label96 always
-    * jump *label98 always
+  321 return :excludeArea*retaddr
+  322 return :excludeArea*retaddr
   323 label *label97
   324 set :excludeArea*retval :excludeArea:mask
   325 label *label98
 
   341 op mul *tmp224 :findPossiblePlacement:y 7
   342 op add *tmp225 24 *tmp224
   343 op add :findPossiblePlacement*retval *tmp225 :findPossiblePlacement:x
-    * jump *label106 always
+  344 return :findPossiblePlacement*retaddr
   345 label *label113
   346 op sub *tmp227 3 :findPossiblePlacement:width
   347 jump *label112 greaterThan :findPossiblePlacement:x *tmp227
 
   369 jump *label121 lessThan :findPossiblePlacement*retval 0
   370 jump *label123 greaterThanEq :findPossiblePlacement*retval 0
   371 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  372 return :tryPlaceGenerator*retaddr
   373 label *label123
   374 op add *tmp238 :tryPlaceGenerator:centerX 0.5
   375 op add .water2X *tmp238 :findPossiblePlacement:x
 
   391 label *label125
   392 jump *label126 greaterThanEq :findPossiblePlacement*retval 0
   393 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  394 return :tryPlaceGenerator*retaddr
   395 label *label126
   396 op add *tmp250 :tryPlaceGenerator:centerX 0.5
   397 op add .water2X *tmp250 :findPossiblePlacement:x
 
   413 label *label129
   414 jump *label130 greaterThanEq :findPossiblePlacement*retval 0
   415 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  416 return :tryPlaceGenerator*retaddr
   417 label *label130
   418 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   419 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   428 label *label132
   429 jump *label133 greaterThanEq :findPossiblePlacement*retval 0
   430 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  431 return :tryPlaceGenerator*retaddr
   432 label *label133
   433 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   434 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
 
   463 label *label137
   464 jump *label138 greaterThanEq :findPossiblePlacement*retval 0
   465 set :tryPlaceGenerator*retval false
-    * jump *label119 always
+  466 return :tryPlaceGenerator*retaddr
   467 label *label138
   468 op add .node2X :tryPlaceGenerator:centerX :findPossiblePlacement:x
   469 op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlacement:y
   470 label *label135
   471 set :tryPlaceGenerator*retval true
-    * jump *label119 always
+  472 return :tryPlaceGenerator*retaddr
   473 label *label119
   474 return :tryPlaceGenerator*retaddr
   475 end
 
   923 label *label170
   924 jump *label171 greaterThanEq :findPossiblePlacement*retval 0
   925 set :layoutThoriumDrillAtLocation*retval false
-    * jump *label154 always
+  926 return :layoutThoriumDrillAtLocation*retaddr
   927 label *label171
   928 op add .node1X .drillX :findPossiblePlacement:x
   929 op add .node1Y .drillY :findPossiblePlacement:y
 
   941 label *label175
   942 jump *label176 equal :tryPlaceGenerator*retval false
   943 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
+  944 return :layoutThoriumDrillAtLocation*retaddr
   945 label *label176
   946 set :layoutThoriumDrillAtLocation:sx 3
   947 set :layoutThoriumDrillAtLocation:sy 3
 
  1018 label *label187
  1019 jump *label188 equal :tryPlaceGenerator*retval false
  1020 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label154 always
+ 1021 return :layoutThoriumDrillAtLocation*retaddr
  1022 label *label188
  1023 multijump *tmp429 0 0 (m:marker0)
  1024 multilabel *label184 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-15 instructions):
 
    12 label *label18
    13 wait 1e12
    14 jump *label18 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   230 op add .count .count 1
   231 write :findDrillLocationLocal:bestY bank1 .count
   232 op add .locations .locations 1
-    * label *label84
   233 jump *label25 always
-    * set :findDrillLocationLocal*retval null
-    * label *label19
-    * return :findDrillLocationLocal*retaddr
-    * end
   234 label *label10
   235 op add *tmp187 :excludeArea:areaWidth 8
   236 op idiv *tmp188 *tmp187 2
 
   313 label *label288
   314 op or :excludeArea*retval :excludeArea:mask :shiftMask*retval
   315 return :excludeArea*retaddr
-    * return :excludeArea*retaddr
   316 label *label97
   317 set :excludeArea*retval :excludeArea:mask
-    * label *label98
-    * label *label96
   318 return :excludeArea*retaddr
-    * end
   319 label *label11
   320 set :findPossiblePlacement:y -3
   321 jump *label109 greaterThan :findPossiblePlacement:y 3
 
   345 jump *label205 lessThanEq :findPossiblePlacement:y 3
   346 label *label109
   347 set :findPossiblePlacement*retval -1
-    * label *label106
   348 return :findPossiblePlacement*retaddr
-    * end
   349 label *label12
   350 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   351 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
 
   458 label *label135
   459 set :tryPlaceGenerator*retval true
   460 return :tryPlaceGenerator*retaddr
-    * label *label119
-    * return :tryPlaceGenerator*retaddr
-    * end
   461 label *label13
   462 op add *tmp312 :createBlockMaskRow:x 4
   463 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlockMaskRow:result 0
 
   493 ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0
   494 op or :createBlockMaskRow*retval *tmp311 *tmp313
   495 return :createBlockMaskRow*retaddr
-    * end
   496 label *label14
   497 write @unit processor1 ":createTerrainMask:unit"
   498 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   839 label *label153
   840 set :createCombinedMask*retval :excludeArea*retval
   841 return :createCombinedMask*retaddr
-    * end
   842 label *label15
   843 set .panelY -1
   844 set .panelX -1
 
  1006 multijump *tmp429 0 0 (m:marker0)
  1007 multilabel *label184 (m:marker0)
  1008 set :layoutThoriumDrillAtLocation*retval true
-    * label *label154
  1009 return :layoutThoriumDrillAtLocation*retaddr
-    * end
  1010 label *label2
  1011 set .searchFinished false
  1012 set :findDrillLocationLocal:x :findDrillLocation:x
 
  1026 set :findDrillLocation*retval true
  1027 set :findDrillLocation*finished true
  1028 jump *label18 always
-    * end
  1029 label *label3
  1030 set :findDrillLocationLocal:x :layoutThoriumDrill:x
  1031 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1050 label *label192
  1051 set :layoutThoriumDrill*finished true
  1052 jump *label18 always
-    * end
  1053 label *label4
  1054 set .mapSpots 0
  1055 set .mapAction 0
 
  1058 ucontrol unbind
  1059 set :stopLocation*finished true
  1060 jump *label18 always
-    * end

Final code before resolving virtual instructions:

    0:  jump *label16 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label16                                               ...
        label *label17                                               OreLocator.mnd: require "Matrices.mnd" remote processor1;
    4:  read *tmp20 processor1 "*signature"                          ...
    5:  jump *label17 notEqual *tmp20 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label18                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label18 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set .coreX :findDrillLocationLocal:x                         OreLocator.mnd: coreX = x;
   15:  set .coreY :findDrillLocationLocal:y                         OreLocator.mnd: coreY = y;
   16:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   17:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   18:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   19:  set .mapSpots :findDrillLocationLocal:dx                     ...
   20:  op sub *tmp22 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   21:  op sub *tmp23 @maph :findDrillLocationLocal:y                ...
   22:  op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLo ...
   23:  op max *tmp24 *tmp24 *tmp22                                  ...
   24:  op max *tmp24 *tmp24 *tmp23                                  ...
   25:  set :findDrillLocationLocal:distanceLimit *tmp24             ...
   26:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   27:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   28:  set .mapProgress 0                                           ...
   29:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   30:  jump *label24 notEqual *tmp27 false                          ...
        label *label277                                              ...
   31:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   32:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   33:  jump *label277 equal *tmp27 false                            ...
        label *label24                                               ...
   34:  op div *tmp30 *tmp24 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   35:  op pow .mapTotal *tmp30 2                                    ...
   36:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   37:  set :findDrillLocationLocal:oreY 0                           ...
        label *label25                                               OreLocator.mnd: while true do
   38:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   39:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   40:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   41:  op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   42:  op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuati ...
   43:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   44:  op div *tmp35 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   45:  op pow .mapTotal *tmp35 2                                    ...
   46:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   47:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   48:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   49:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   50:  set :locateOreAway:lastY -1                                  ...
   51:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   52:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   53:  op sub *tmp46 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   54:  op sub *tmp53 @maph 5                                        ...
   55:  jump *label31 greaterThanEq :locateOreAway:distance :findDri ...
        label *label202                                              ...
   56:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   57:  op sin *tmp43 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   58:  op mul *tmp44 *tmp43 :locateOreAway:distance                 ...
   59:  op add *tmp45 :findDrillLocationLocal:x *tmp44               ...
   60:  op max *tmp48 *tmp45 5                                       OreLocator.mnd: min(max(value, low), high);
   61:  op min *tmp47 *tmp48 *tmp46                                  OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   62:  op cos *tmp50 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   63:  op mul *tmp51 *tmp50 :locateOreAway:distance                 ...
   64:  op add *tmp52 :findDrillLocationLocal:y *tmp51               ...
   65:  op max *tmp55 *tmp52 5                                       OreLocator.mnd: min(max(value, low), high);
   66:  op min *tmp54 *tmp55 *tmp53                                  OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   67:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   68:  jump *label37 notEqual *tmp57 false                          ...
        label *label209                                              ...
   69:  ucontrol approach *tmp47 *tmp54 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   70:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   71:  jump *label209 equal *tmp57 false                            ...
        label *label37                                               ...
   72:  op div *tmp60 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   73:  op add .angle .angle *tmp60                                  ...
   74:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   75:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   76:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   77:  jump *label38 notEqual *tmp63 false                          ...
   78:  set *tmp37 false                                             OreLocator.mnd: return false;
   79:  jump *label28 always 0 0                                     ...
        label *label38                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   80:  op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   81:  op abs *tmp68 *tmp67 0                                       ...
   82:  op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y     ...
   83:  op abs *tmp70 *tmp69 0                                       ...
   84:  op max :locateOreAway:coreDist *tmp68 *tmp70                 ...
   85:  op sub *tmp72 :locateOreAway:x *tmp47                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   86:  op sub *tmp73 :locateOreAway:y *tmp54                        ...
   87:  op len :locateOreAway:unitDist *tmp72 *tmp73                 ...
   88:  jump *label40 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   89:  jump *label30 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label40                                               ...
   90:  jump *label44 lessThan :locateOreAway:coreDist 8             OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   91:  jump *label46 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   92:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   93:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   94:  set *tmp84 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   95:  set :visited:i .locationsStart                               ...
   96:  jump *label51 greaterThanEq .locationsStart *tmp84           ...
        label *label203                                              ...
   97:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   98:  op add *tmp87 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   99:  read :visited:lx bank1 *tmp87                                ...
  100:  op add *tmp90 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
  101:  read :visited:ly bank1 *tmp90                                ...
  102:  op sub *tmp92 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  103:  op sub *tmp93 :locateOreAway:y :visited:ly                   ...
  104:  op len *tmp94 *tmp92 *tmp93                                  ...
  105:  jump *label52 greaterThanEq *tmp94 7                         ...
  106:  set *tmp83 true                                              OreLocator.mnd: return true;
  107:  jump *label48 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  108:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  109:  jump *label203 lessThan :visited:i *tmp84                    ...
        label *label51                                               ...
  110:  set *tmp83 false                                             OreLocator.mnd: return false;
        label *label48                                               OreLocator.mnd: if !visited(x, y) then
  111:  jump *label54 notEqual *tmp83 false                          ...
  112:  op div *tmp99 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  113:  op add .angle .angle *tmp99                                  ...
  114:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  115:  printflush message1                                          OreLocator.mnd: printflush(message1);
  116:  set *tmp37 true                                              OreLocator.mnd: return true;
  117:  jump *label28 always 0 0                                     ...
        label *label54                                               OreLocator.mnd: if !visited(x, y) then
        label *label46                                               OreLocator.mnd: if unitDist < distance then
        label *label44                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label30                                               OreLocator.mnd: while distance < distanceLimit do
  118:  jump *label202 lessThan :locateOreAway:distance :findDrillLo ...
        label *label31                                               ...
  119:  set *tmp37 false                                             OreLocator.mnd: return false;
        label *label28                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  120:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  121:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  122:  jump *label56 notEqual *tmp37 false                          ...
  123:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  124:  return :findDrillLocationLocal*retaddr                       ...
        label *label56                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  125:  jump *label58 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  126:  op add .mapSpots .mapSpots 1                                 ...
        label *label58                                               ...
  127:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  128:  jump *label64 notEqual *tmp109 false                         ...
        label *label229                                              ...
  129:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  130:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  131:  jump *label229 equal *tmp109 false                           ...
        label *label64                                               ...
  132:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label65                                               OreLocator.mnd: while true do
  133:  write @unit processor1 ":findBestPosition:unit"              OreLocator.mnd: var score = findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  134:  write :findDrillLocationLocal:oreX processor1 ":findBestPosi ...
  135:  write :findDrillLocationLocal:oreY processor1 ":findBestPosi ...
  136:  write :findDrillLocationLocal:ore processor1 ":findBestPosit ...
  137:  write :findDrillLocationLocal:size processor1 ":findBestPosi ...
  138:  write false processor1 ":findBestPosition*finished"          ...
  139:  write 2 processor1 "@counter"                                ...
        label *label68                                               ...
  140:  wait 1e-15                                                   ...
  141:  read *tmp112 processor1 ":findBestPosition*finished"         ...
  142:  jump *label68 equal *tmp112 false                            ...
  143:  read :findDrillLocationLocal:diffX processor1 ":findBestPosi ...
  144:  read :findDrillLocationLocal:diffY processor1 ":findBestPosi ...
  145:  read :findDrillLocationLocal:score processor1 ":findBestPosi ...
  146:  op add :findDrillLocationLocal:newX :findDrillLocationLocal: OreLocator.mnd: var newX = oreX + diffX;
  147:  op add :findDrillLocationLocal:newY :findDrillLocationLocal: OreLocator.mnd: var newY = oreY + diffY;
  148:  op sub *tmp116 :findDrillLocationLocal:newX :findDrillLocati OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  149:  op abs *tmp117 *tmp116 0                                     ...
  150:  op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocati ...
  151:  op abs *tmp119 *tmp118 0                                     ...
  152:  op max :findDrillLocationLocal:coreDist *tmp117 *tmp119      ...
  153:  jump *label67 lessThanEq :findDrillLocationLocal:coreDist 8  OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  154:  jump *label71 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  155:  set :findDrillLocationLocal:dx :findDrillLocationLocal:newX  OreLocator.mnd: dx = newX;
  156:  set :findDrillLocationLocal:dy :findDrillLocationLocal:newY  OreLocator.mnd: dy = newY;
  157:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  158:  jump *label73 greaterThanEq :findDrillLocationLocal:limit 10 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  159:  set .mapSpots :findDrillLocationLocal:score                  ...
        label *label73                                               ...
  160:  jump *label75 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  161:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  162:  sensor *tmp131 :findDrillLocationLocal:item @id              ...
  163:  write *tmp131 bank1 .count                                   ...
  164:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  165:  write :findDrillLocationLocal:score bank1 .count             ...
  166:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  167:  write :findDrillLocationLocal:dx bank1 .count                ...
  168:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  169:  write :findDrillLocationLocal:dy bank1 .count                ...
  170:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  171:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  172:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  173:  return :findDrillLocationLocal*retaddr                       ...
        label *label75                                               OreLocator.mnd: if capacity >= limit then
        label *label71                                               OreLocator.mnd: if score > capacity then
  174:  jump *label78 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  175:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:ne OreLocator.mnd: bestX = newX;
  176:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:ne OreLocator.mnd: bestY = newY;
  177:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label78                                               OreLocator.mnd: if score > best then
  178:  jump *label67 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  179:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  180:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  181:  op add *tmp145 :round:x 0.5                                  *math: floor(x + 0.5);
  182:  op floor *tmp144 *tmp145 0                                   OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  183:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: ...
  184:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  185:  op add *tmp149 :round.1:x 0.5                                *math: floor(x + 0.5);
  186:  op floor *tmp148 *tmp149 0                                   OreLocator.mnd: oreY += round(diffY * 1.1);
  187:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: ...
  188:  jump *label65 always 0 0                                     OreLocator.mnd: while true do
        label *label67                                               ...
  189:  jump *label25 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  190:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  191:  sensor *tmp155 :findDrillLocationLocal:item @id              ...
  192:  write *tmp155 bank1 .count                                   ...
  193:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  194:  write :findDrillLocationLocal:best bank1 .count              ...
  195:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  196:  write :findDrillLocationLocal:bestX bank1 .count             ...
  197:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  198:  write :findDrillLocationLocal:bestY bank1 .count             ...
  199:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  200:  jump *label25 always 0 0                                     OreLocator.mnd: while true do
        label *label10                                               OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
  201:  op add *tmp187 :excludeArea:areaWidth 8                      OreLocator.mnd: var overlapX = (areaWidth + 7 + 1) \ 2 - abs(maskX - areaX);
  202:  op idiv *tmp188 *tmp187 2                                    ...
  203:  op sub *tmp189 :excludeArea:maskX :excludeArea:areaX         ...
  204:  op abs *tmp190 *tmp189 0                                     ...
  205:  op sub :excludeArea:overlapX *tmp188 *tmp190                 ...
  206:  op add *tmp193 :excludeArea:areaHeight 8                     OreLocator.mnd: var overlapY = (areaHeight + 7 + 1) \ 2 - abs(maskY - areaY);
  207:  op idiv *tmp194 *tmp193 2                                    ...
  208:  op sub *tmp195 :excludeArea:maskY :excludeArea:areaY         ...
  209:  op abs *tmp196 *tmp195 0                                     ...
  210:  op sub :excludeArea:overlapY *tmp194 *tmp196                 ...
  211:  op greaterThan *tmp198 :excludeArea:overlapX 0               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  212:  op greaterThan *tmp199 :excludeArea:overlapY 0               ...
  213:  op land *tmp200 *tmp198 *tmp199                              ...
  214:  jump *label97 equal *tmp200 false                            ...
  215:  op min :excludeArea:blockSizeX 7 :excludeArea:overlapX       OreLocator.mnd: var blockSizeX = min(7, overlapX);
  216:  op min :excludeArea:blockSizeY 7 :excludeArea:overlapY       OreLocator.mnd: var blockSizeY = min(7, overlapY);
  217:  op shl *tmp205 1 :excludeArea:blockSizeX                     OreLocator.mnd: var row = (1 << width) - 1;
  218:  op sub :createMatrixOfSize:row *tmp205 1                     ...
  219:  set :createMatrixOfSize:matrix :createMatrixOfSize:row       OreLocator.mnd: var matrix = row;
  220:  jump *label102 greaterThanEq 1 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  221:  op shl *tmp209 :createMatrixOfSize:row 7                     OreLocator.mnd: matrix = (matrix << 7) | row;
  222:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
  223:  jump *label102 greaterThanEq 2 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  224:  op shl *tmp209 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  225:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
  226:  jump *label102 greaterThanEq 3 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  227:  op shl *tmp209 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  228:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
  229:  jump *label102 greaterThanEq 4 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  230:  op shl *tmp209 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  231:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
  232:  jump *label102 greaterThanEq 5 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  233:  op shl *tmp209 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  234:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
  235:  jump *label102 greaterThanEq 6 :excludeArea:blockSizeY       OreLocator.mnd: if i >= height then break; end;
  236:  op shl *tmp209 :createMatrixOfSize:matrix 7                  OreLocator.mnd: matrix = (matrix << 7) | row;
  237:  op or :createMatrixOfSize:matrix *tmp209 :createMatrixOfSize ...
        label *label102                                              OreLocator.mnd: for var i in 1 ... 7 do
  238:  op lessThan *tmp211 :excludeArea:maskX :excludeArea:areaX    OreLocator.mnd: var shiftX = (maskX < areaX) * (7 - blockSizeX);
  239:  op sub *tmp212 7 :excludeArea:blockSizeX                     ...
  240:  op mul :excludeArea:shiftX *tmp211 *tmp212                   ...
  241:  op lessThan *tmp214 :excludeArea:maskY :excludeArea:areaY    OreLocator.mnd: var shiftY = (maskY < areaY) * (7 - blockSizeY);
  242:  op sub *tmp215 7 :excludeArea:blockSizeY                     ...
  243:  op mul :excludeArea:shiftY *tmp214 *tmp215                   ...
  244:  op abs *tmp163 :excludeArea:shiftX 0                         OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  245:  op greaterThan *tmp164 *tmp163 6                             ...
  246:  op abs *tmp165 :excludeArea:shiftY 0                         ...
  247:  op greaterThan *tmp166 *tmp165 6                             ...
  248:  op or *tmp167 *tmp164 *tmp166                                ...
  249:  jump *label280 equal *tmp167 false                           ...
  250:  set :shiftMask*retval 0                                      ...
  251:  jump *label288 always 0 0                                    ...
        label *label280                                              ...
  252:  op mul *tmp169 7 :excludeArea:shiftY                         OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  253:  op add :shiftMask:shift :excludeArea:shiftX *tmp169          ...
  254:  jump *label282 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  255:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  256:  op and *tmp174 :createMatrixOfSize:matrix :shiftMask:clearMa OreLocator.mnd: mask = (mask & clearMask) << shift;
  257:  op shl :shiftMask:mask *tmp174 :shiftMask:shift              ...
  258:  jump *label283 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label282                                              ...
  259:  op sub *tmp176 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  260:  op shr :shiftMask:mask :createMatrixOfSize:matrix *tmp176    ...
        label *label283                                              OreLocator.mnd: if shift > 0 then
  261:  jump *label286 equal :excludeArea:shiftX 0                   OreLocator.mnd: if shiftX != 0 then
  262:  op shr :shiftMask:keep 0b1111111 *tmp163                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  263:  jump *label284 lessThanEq :excludeArea:shiftX 0              OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  264:  op shl :shiftMask:keep :shiftMask:keep :excludeArea:shiftX   ...
        label *label284                                              ...
  265:  op shl *tmp183 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  266:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  267:  op shl *tmp184 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  268:  op or :shiftMask:keep :shiftMask:keep *tmp184                ...
  269:  op shl *tmp185 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  270:  op or :shiftMask:keep :shiftMask:keep *tmp185                ...
  271:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label286                                              OreLocator.mnd: if shiftX != 0 then
  272:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label288                                              OreLocator.mnd: var shifted = shiftMask(blocked, shiftX, shiftY);
  273:  op or :excludeArea*retval :excludeArea:mask :shiftMask*retva OreLocator.mnd: return mask | shifted;
  274:  return :excludeArea*retaddr                                  ...
        label *label97                                               OreLocator.mnd: if overlapX > 0 and overlapY > 0 then
  275:  set :excludeArea*retval :excludeArea:mask                    OreLocator.mnd: return mask;
  276:  return :excludeArea*retaddr                                  OreLocator.mnd: noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
        label *label11                                               OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  277:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  278:  jump *label109 greaterThan :findPossiblePlacement:y 3        ...
        label *label205                                              ...
  279:  op add *tmp218 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  280:  op mul *tmp219 7 *tmp218                                     ...
  281:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  282:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  283:  jump *label112 greaterThan :findPossiblePlacement:x 3        ...
        label *label206                                              ...
  284:  op and *tmp221 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  285:  jump *label113 notEqual *tmp221 0                            ...
  286:  op mul *tmp224 :findPossiblePlacement:y 7                    ...
  287:  op add *tmp225 24 *tmp224                                    ...
  288:  op add :findPossiblePlacement*retval *tmp225 :findPossiblePl ...
  289:  return :findPossiblePlacement*retaddr                        ...
        label *label113                                              ...
  290:  op sub *tmp227 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  291:  jump *label112 greaterThan :findPossiblePlacement:x *tmp227  ...
  292:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  293:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  294:  jump *label206 lessThanEq :findPossiblePlacement:x 3         ...
        label *label112                                              ...
  295:  op sub *tmp230 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  296:  jump *label109 greaterThan :findPossiblePlacement:y *tmp230  ...
  297:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  298:  jump *label205 lessThanEq :findPossiblePlacement:y 3         ...
        label *label109                                              ...
  299:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  300:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def tryPlaceGenerator(centerX, centerY, terrainMask, generatorHorizontal, generatorVertical)
  301:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  302:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  303:  set :findPossiblePlacement:width 2                           ...
  304:  set :findPossiblePlacement:height 4                          ...
  305:  setaddr :findPossiblePlacement*retaddr *label120             ...
  306:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label120                                              ...
  307:  jump *label121 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  308:  jump *label123 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  309:  set :tryPlaceGenerator*retval false                          ...
  310:  return :tryPlaceGenerator*retaddr                            ...
        label *label123                                              ...
  311:  op add *tmp238 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  312:  op add .water2X *tmp238 :findPossiblePlacement:x             ...
  313:  op add *tmp240 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  314:  op add .water2Y *tmp240 :findPossiblePlacement:y             ...
  315:  op add .generatorX *tmp238 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  316:  op add *tmp244 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  317:  op add .generatorY *tmp244 :findPossiblePlacement:y          ...
  318:  op shl *tmp246 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  319:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  320:  jump *label122 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label121                                              ...
  321:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  322:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  323:  set :findPossiblePlacement:width 4                           ...
  324:  set :findPossiblePlacement:height 2                          ...
  325:  setaddr :findPossiblePlacement*retaddr *label125             ...
  326:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label125                                              ...
  327:  jump *label126 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  328:  set :tryPlaceGenerator*retval false                          ...
  329:  return :tryPlaceGenerator*retaddr                            ...
        label *label126                                              ...
  330:  op add *tmp250 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  331:  op add .water2X *tmp250 :findPossiblePlacement:x             ...
  332:  op add *tmp252 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  333:  op add .water2Y *tmp252 :findPossiblePlacement:y             ...
  334:  op add *tmp254 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  335:  op add .generatorX *tmp254 :findPossiblePlacement:x          ...
  336:  op add .generatorY *tmp252 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  337:  op shl *tmp258 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  338:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label122                                              OreLocator.mnd: if shift >= 0 then
  339:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr OreLocator.mnd: terrainMask |= createFixedMatrix(
  340:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  341:  set :findPossiblePlacement:placementMask 1                   ...
  342:  set :findPossiblePlacement:width 1                           ...
  343:  set :findPossiblePlacement:height 1                          ...
  344:  setaddr :findPossiblePlacement*retaddr *label129             ...
  345:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label129                                              ...
  346:  jump *label130 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  347:  set :tryPlaceGenerator*retval false                          ...
  348:  return :tryPlaceGenerator*retaddr                            ...
        label *label130                                              ...
  349:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  350:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  351:  op shl *tmp278 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  352:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  353:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  354:  set :findPossiblePlacement:placementMask 1                   ...
  355:  set :findPossiblePlacement:width 1                           ...
  356:  set :findPossiblePlacement:height 1                          ...
  357:  setaddr :findPossiblePlacement*retaddr *label132             ...
  358:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label132                                              ...
  359:  jump *label133 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  360:  set :tryPlaceGenerator*retval false                          ...
  361:  return :tryPlaceGenerator*retaddr                            ...
        label *label133                                              ...
  362:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  363:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  364:  op shl *tmp284 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  365:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  366:  op sub *tmp285 .water2X .node1X                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  367:  op sub *tmp286 .water2Y .node1Y                              ...
  368:  op len *tmp287 *tmp285 *tmp286                               ...
  369:  op greaterThan *tmp288 *tmp287 7                             ...
  370:  op sub *tmp289 .generatorX .node1X                           OreLocator.mnd: or len(generatorX - node1X, generatorY - node1Y) > 7    // 2x2 block
  371:  op sub *tmp290 .generatorY .node1Y                           ...
  372:  op len *tmp291 *tmp289 *tmp290                               ...
  373:  op greaterThan *tmp292 *tmp291 7                             ...
  374:  op or *tmp293 *tmp288 *tmp292                                ...
  375:  op sub *tmp294 .panelX .node1X                               OreLocator.mnd: or len(panelX - node1X, panelY - node1Y) > 6
  376:  op sub *tmp295 .panelY .node1Y                               ...
  377:  op len *tmp296 *tmp294 *tmp295                               ...
  378:  op greaterThan *tmp297 *tmp296 6                             ...
  379:  op or *tmp298 *tmp293 *tmp297                                ...
  380:  op sub *tmp299 .batteryX .node1X                             OreLocator.mnd: or len(batteryX - node1X, batteryY - node1Y) > 6
  381:  op sub *tmp300 .batteryY .node1Y                             ...
  382:  op len *tmp301 *tmp299 *tmp300                               ...
  383:  op greaterThan *tmp302 *tmp301 6                             ...
  384:  op or *tmp303 *tmp298 *tmp302                                ...
  385:  jump *label135 equal *tmp303 false                           OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  386:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  387:  set :findPossiblePlacement:placementMask 1                   ...
  388:  set :findPossiblePlacement:width 1                           ...
  389:  set :findPossiblePlacement:height 1                          ...
  390:  setaddr :findPossiblePlacement*retaddr *label137             ...
  391:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label137                                              ...
  392:  jump *label138 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  393:  set :tryPlaceGenerator*retval false                          ...
  394:  return :tryPlaceGenerator*retaddr                            ...
        label *label138                                              ...
  395:  op add .node2X :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: node2X = centerX + c;
  396:  op add .node2Y :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: node2Y = centerY + r;
        label *label135                                              OreLocator.mnd: if len(water2X - node1X, water2Y - node1Y) > 7              // 2x2 block
  397:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  398:  return :tryPlaceGenerator*retaddr                            ...
        label *label13                                               OreLocator.mnd: def createBlockMaskRow(x, y)
  399:  op add *tmp312 :createBlockMaskRow:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  400:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlo ...
  401:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  402:  op add *tmp312 :createBlockMaskRow:x 3                       ...
  403:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  404:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  405:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  406:  op add *tmp312 :createBlockMaskRow:x 2                       ...
  407:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  408:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  409:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  410:  op add *tmp312 :createBlockMaskRow:x 1                       ...
  411:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  412:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  413:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  414:  ucontrol getBlock :createBlockMaskRow:x :createBlockMaskRow: ...
  415:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  416:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  417:  op add *tmp312 :createBlockMaskRow:x -1                      ...
  418:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  419:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  420:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  421:  op add *tmp312 :createBlockMaskRow:x -2                      ...
  422:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  423:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  424:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  425:  op add *tmp312 :createBlockMaskRow:x -3                      ...
  426:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  427:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  428:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  429:  op add *tmp312 :createBlockMaskRow:x -4                      ...
  430:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  431:  op or :createBlockMaskRow*retval *tmp311 *tmp313             ...
  432:  return :createBlockMaskRow*retaddr                           OreLocator.mnd: def createBlockMaskRow(x, y)
        label *label14                                               OreLocator.mnd: def createCombinedMask(x, y);
  433:  write @unit processor1 ":createTerrainMask:unit"             OreLocator.mnd: async(processor1.createTerrainMask(@unit, x, y));
  434:  write :createCombinedMask:x processor1 ":createTerrainMask:x ...
  435:  write :createCombinedMask:y processor1 ":createTerrainMask:y ...
  436:  write false processor1 ":createTerrainMask*finished"         ...
  437:  write 1 processor1 "@counter"                                ...
  438:  set :createAdjacentMask:x :createCombinedMask:x              OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
  439:  set :createAdjacentMask:y :createCombinedMask:y              ...
  440:  op add *tmp321 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  441:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  442:  ucontrol getBlock *tmp312 *tmp321 0 :createBlockMaskRow:resu ...
  443:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  444:  op add *tmp312 :createCombinedMask:x 3                       ...
  445:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  446:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  447:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  448:  op add *tmp312 :createCombinedMask:x 2                       ...
  449:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  450:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  451:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  452:  op add *tmp312 :createCombinedMask:x 1                       ...
  453:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  454:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  455:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  456:  ucontrol getBlock :createCombinedMask:x *tmp321 0 *tmp313 0  ...
  457:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  458:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  459:  op add *tmp312 :createCombinedMask:x -1                      ...
  460:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  461:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  462:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  463:  op add *tmp312 :createCombinedMask:x -2                      ...
  464:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  465:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  466:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  467:  op add *tmp312 :createCombinedMask:x -3                      ...
  468:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  469:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  470:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  471:  op add *tmp312 :createCombinedMask:x -4                      ...
  472:  ucontrol getBlock *tmp312 *tmp321 0 *tmp313 0                ...
  473:  op or :createAdjacentMask:row2 *tmp311 *tmp313               ...
  474:  op add *tmp323 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  475:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  476:  ucontrol getBlock *tmp312 *tmp323 0 :createBlockMaskRow:resu ...
  477:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  478:  op add *tmp312 :createCombinedMask:x 3                       ...
  479:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  480:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  481:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  482:  op add *tmp312 :createCombinedMask:x 2                       ...
  483:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  484:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  485:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  486:  op add *tmp312 :createCombinedMask:x 1                       ...
  487:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  488:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  489:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  490:  ucontrol getBlock :createCombinedMask:x *tmp323 0 *tmp313 0  ...
  491:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  492:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  493:  op add *tmp312 :createCombinedMask:x -1                      ...
  494:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  495:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  496:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  497:  op add *tmp312 :createCombinedMask:x -2                      ...
  498:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  499:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  500:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  501:  op add *tmp312 :createCombinedMask:x -3                      ...
  502:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  503:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  504:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  505:  op add *tmp312 :createCombinedMask:x -4                      ...
  506:  ucontrol getBlock *tmp312 *tmp323 0 *tmp313 0                ...
  507:  op or :createAdjacentMask:row1 *tmp311 *tmp313               ...
  508:  op add *tmp325 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  509:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  510:  ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:resu ...
  511:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  512:  op add *tmp312 :createCombinedMask:x 3                       ...
  513:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  514:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  515:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  516:  op add *tmp312 :createCombinedMask:x 2                       ...
  517:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  518:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  519:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  520:  op add *tmp312 :createCombinedMask:x 1                       ...
  521:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  522:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  523:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  524:  ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0  ...
  525:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  526:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  527:  op add *tmp312 :createCombinedMask:x -1                      ...
  528:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  529:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  530:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  531:  op add *tmp312 :createCombinedMask:x -2                      ...
  532:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  533:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  534:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  535:  op add *tmp312 :createCombinedMask:x -3                      ...
  536:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  537:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  538:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  539:  op add *tmp312 :createCombinedMask:x -4                      ...
  540:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  541:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  542:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  543:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  544:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  545:  op or *tmp330 *tmp328 *tmp329                                ...
  546:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:r ...
  547:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  548:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  549:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  550:  op add *tmp325 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  551:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  552:  ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:resu ...
  553:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  554:  op add *tmp312 :createCombinedMask:x 3                       ...
  555:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  556:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  557:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  558:  op add *tmp312 :createCombinedMask:x 2                       ...
  559:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  560:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  561:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  562:  op add *tmp312 :createCombinedMask:x 1                       ...
  563:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  564:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  565:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  566:  ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0  ...
  567:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  568:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  569:  op add *tmp312 :createCombinedMask:x -1                      ...
  570:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  571:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  572:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  573:  op add *tmp312 :createCombinedMask:x -2                      ...
  574:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  575:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  576:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  577:  op add *tmp312 :createCombinedMask:x -3                      ...
  578:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  579:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  580:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  581:  op add *tmp312 :createCombinedMask:x -4                      ...
  582:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  583:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  584:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  585:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  586:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  587:  op or *tmp330 *tmp328 *tmp329                                ...
  588:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:r ...
  589:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  590:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  591:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  592:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  593:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  594:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  595:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 :createBlo ...
  596:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  597:  op add *tmp312 :createCombinedMask:x 3                       ...
  598:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  599:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  600:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  601:  op add *tmp312 :createCombinedMask:x 2                       ...
  602:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  603:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  604:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  605:  op add *tmp312 :createCombinedMask:x 1                       ...
  606:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  607:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  608:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  609:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  610:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  611:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  612:  op add *tmp312 :createCombinedMask:x -1                      ...
  613:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  614:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  615:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  616:  op add *tmp312 :createCombinedMask:x -2                      ...
  617:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  618:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  619:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  620:  op add *tmp312 :createCombinedMask:x -3                      ...
  621:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  622:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  623:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  624:  op add *tmp312 :createCombinedMask:x -4                      ...
  625:  ucontrol getBlock *tmp312 :createCombinedMask:y 0 *tmp313 0  ...
  626:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  627:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  628:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  629:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  630:  op or *tmp330 *tmp328 *tmp329                                ...
  631:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:r ...
  632:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  633:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  634:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  635:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  636:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  637:  op add *tmp325 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  638:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  639:  ucontrol getBlock *tmp312 *tmp325 0 :createBlockMaskRow:resu ...
  640:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  641:  op add *tmp312 :createCombinedMask:x 3                       ...
  642:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  643:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  644:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  645:  op add *tmp312 :createCombinedMask:x 2                       ...
  646:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  647:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  648:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  649:  op add *tmp312 :createCombinedMask:x 1                       ...
  650:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  651:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  652:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  653:  ucontrol getBlock :createCombinedMask:x *tmp325 0 *tmp313 0  ...
  654:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  655:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  656:  op add *tmp312 :createCombinedMask:x -1                      ...
  657:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  658:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  659:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  660:  op add *tmp312 :createCombinedMask:x -2                      ...
  661:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  662:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  663:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  664:  op add *tmp312 :createCombinedMask:x -3                      ...
  665:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  666:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  667:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  668:  op add *tmp312 :createCombinedMask:x -4                      ...
  669:  ucontrol getBlock *tmp312 *tmp325 0 *tmp313 0                ...
  670:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  671:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  672:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  673:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  674:  op or *tmp330 *tmp328 *tmp329                                ...
  675:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow:r ...
  676:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  677:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  678:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  679:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  680:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  681:  op add :createBlockMaskRow:y :createCombinedMask:y -2        OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  682:  op add *tmp312 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  683:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 :createBlo ...
  684:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  685:  op add *tmp312 :createCombinedMask:x 3                       ...
  686:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  687:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  688:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  689:  op add *tmp312 :createCombinedMask:x 2                       ...
  690:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  691:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  692:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  693:  op add *tmp312 :createCombinedMask:x 1                       ...
  694:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  695:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  696:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  697:  ucontrol getBlock :createCombinedMask:x :createBlockMaskRow: ...
  698:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  699:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  700:  op add *tmp312 :createCombinedMask:x -1                      ...
  701:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  702:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  703:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  704:  op add *tmp312 :createCombinedMask:x -2                      ...
  705:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  706:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  707:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  708:  op add *tmp312 :createCombinedMask:x -3                      ...
  709:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  710:  op or :createBlockMaskRow:result *tmp311 *tmp313             ...
  711:  op shl *tmp311 :createBlockMaskRow:result 1                  ...
  712:  op add *tmp312 :createCombinedMask:x -4                      ...
  713:  ucontrol getBlock *tmp312 :createBlockMaskRow:y 0 *tmp313 0  ...
  714:  op or :createBlockMaskRow*retval *tmp311 *tmp313             ...
  715:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  716:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  717:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  718:  op or *tmp330 *tmp328 *tmp329                                ...
  719:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*r ...
  720:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  721:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  722:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  723:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  724:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  725:  op sub :createAdjacentMask:r -2 1                            OreLocator.mnd: for var r in -4 .. 2 descending do
  726:  op add *tmp325 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  727:  set :createBlockMaskRow:x :createCombinedMask:x              ...
  728:  set :createBlockMaskRow:y *tmp325                            ...
  729:  setaddr :createBlockMaskRow*retaddr *label272                ...
  730:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label272                                              ...
  731:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  732:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  733:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  734:  op or *tmp330 *tmp328 *tmp329                                ...
  735:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*r ...
  736:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  737:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  738:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  739:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  740:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  741:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  742:  op add *tmp325 :createAdjacentMask:y :createAdjacentMask:r   OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  743:  set :createBlockMaskRow:x :createAdjacentMask:x              ...
  744:  set :createBlockMaskRow:y *tmp325                            ...
  745:  setaddr :createBlockMaskRow*retaddr *label275                ...
  746:  call *label13 *invalid :createBlockMaskRow*retval            ...
        label *label275                                              ...
  747:  op shl *tmp327 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  748:  op or *tmp328 :createAdjacentMask:row2 *tmp327               ...
  749:  op shr *tmp329 :createAdjacentMask:row1 1                    ...
  750:  op or *tmp330 *tmp328 *tmp329                                ...
  751:  op or :createAdjacentMask:mask *tmp330 :createBlockMaskRow*r ...
  752:  op shl *tmp332 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  753:  op and *tmp333 :createAdjacentMask:mask 0xFE                 ...
  754:  op or :createAdjacentMask:result *tmp332 *tmp333             ...
  755:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  756:  set :createAdjacentMask:row1 :createBlockMaskRow*retval      OreLocator.mnd: row1 = row0;
  757:  op sub :createAdjacentMask:r :createAdjacentMask:r 1         OreLocator.mnd: for var r in -4 .. 2 descending do
  758:  op shr *tmp320 :createAdjacentMask:result 1                  OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
        label *label152                                              OreLocator.mnd: var terrainMask = await(processor1.createTerrainMask);
  759:  wait 1e-15                                                   ...
  760:  read *tmp336 processor1 ":createTerrainMask*finished"        ...
  761:  jump *label152 equal *tmp336 false                           ...
  762:  read :createCombinedMask:terrainMask processor1 ":createTerr ...
  763:  op or :excludeArea:mask *tmp320 :createCombinedMask:terrainM OreLocator.mnd: return excludeArea(adjacentMask | terrainMask, x, y, coreX, coreY, BASE_SIZE, BASE_SIZE);
  764:  set :excludeArea:maskX :createCombinedMask:x                 ...
  765:  set :excludeArea:maskY :createCombinedMask:y                 ...
  766:  set :excludeArea:areaX .coreX                                ...
  767:  set :excludeArea:areaY .coreY                                ...
  768:  set :excludeArea:areaWidth 15                                ...
  769:  set :excludeArea:areaHeight 15                               ...
  770:  setaddr :excludeArea*retaddr *label153                       ...
  771:  call *label10 *invalid :excludeArea*retval                   ...
        label *label153                                              ...
  772:  set :createCombinedMask*retval :excludeArea*retval           ...
  773:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label15                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  774:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  775:  set .panelX -1                                               ...
  776:  set .generatorY -1                                           ...
  777:  set .generatorX -1                                           ...
  778:  set .water2Y -1                                              ...
  779:  set .water2X -1                                              ...
  780:  set .water1Y -1                                              ...
  781:  set .water1X -1                                              ...
  782:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  783:  set :moveTo.5:y .drillY                                      ...
  784:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339 0          OreLocator.mnd: while !within(x, y, radius) do
  785:  jump *label158 notEqual *tmp339 false                        ...
        label *label278                                              ...
  786:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  787:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp339 0          OreLocator.mnd: while !within(x, y, radius) do
  788:  jump *label278 equal *tmp339 false                           ...
        label *label158                                              ...
  789:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  790:  set :createCombinedMask:y .drillY                            ...
  791:  setaddr :createCombinedMask*retaddr *label159                ...
  792:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label159                                              ...
  793:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  794:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  795:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  796:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  797:  set :findPossiblePlacement:placementMask 387                 ...
  798:  set :findPossiblePlacement:width 2                           ...
  799:  set :findPossiblePlacement:height 2                          ...
  800:  setaddr :findPossiblePlacement*retaddr *label163             ...
  801:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label163                                              ...
  802:  jump *label164 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  803:  op add *tmp380 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  804:  op add .water1X *tmp380 :findPossiblePlacement:x             ...
  805:  op add *tmp382 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  806:  op add .water1Y *tmp382 :findPossiblePlacement:y             ...
  807:  op shl *tmp384 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  808:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  809:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label164                                              OreLocator.mnd: if shift >= 0 then
  810:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  811:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  812:  set :findPossiblePlacement:width 2                           ...
  813:  set :findPossiblePlacement:height 2                          ...
  814:  setaddr :findPossiblePlacement*retaddr *label166             ...
  815:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label166                                              ...
  816:  jump *label167 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  817:  op add *tmp389 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  818:  op add .containerX *tmp389 :findPossiblePlacement:x          ...
  819:  op add *tmp391 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  820:  op add .containerY *tmp391 :findPossiblePlacement:y          ...
  821:  op shl *tmp393 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  822:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label167                                              OreLocator.mnd: if shift >= 0 then
  823:  op or :layoutThoriumDrillAtLocation:nodeMask :layoutThoriumD OreLocator.mnd: var nodeMask = terrainMask | createFixedMatrix(
  824:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(nodeMask, 1, 1, 1, out c, out r);
  825:  set :findPossiblePlacement:placementMask 1                   ...
  826:  set :findPossiblePlacement:width 1                           ...
  827:  set :findPossiblePlacement:height 1                          ...
  828:  setaddr :findPossiblePlacement*retaddr *label170             ...
  829:  call *label11 *invalid :findPossiblePlacement*retval         ...
        label *label170                                              ...
  830:  jump *label171 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  831:  set :layoutThoriumDrillAtLocation*retval false               ...
  832:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label171                                              ...
  833:  op add .node1X .drillX :findPossiblePlacement:x              OreLocator.mnd: node1X = drillX + c;
  834:  op add .node1Y .drillY :findPossiblePlacement:y              OreLocator.mnd: node1Y = drillY + r;
  835:  op shl *tmp414 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  836:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  837:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  838:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  839:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  840:  set :tryPlaceGenerator:centerY .drillY                       ...
  841:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  842:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  843:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  844:  setaddr :tryPlaceGenerator*retaddr *label175                 ...
  845:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label175                                              ...
  846:  jump *label176 equal :tryPlaceGenerator*retval false         ...
  847:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  848:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label176                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  849:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  850:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  851:  setaddr *tmp429 *label181                                    ...
  852:  jump *label178 always 0 0                                    ...
        multilabel *label181                                         ...
  853:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  854:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  855:  setaddr *tmp429 *label182                                    ...
  856:  jump *label178 always 0 0                                    ...
        multilabel *label182                                         ...
  857:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  858:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  859:  setaddr *tmp429 *label183                                    ...
  860:  jump *label178 always 0 0                                    ...
        multilabel *label183                                         ...
  861:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  862:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  863:  setaddr *tmp429 *label184                                    ...
        label *label178                                              ...
  864:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  865:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  866:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  867:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  868:  setaddr :createCombinedMask*retaddr *label185                ...
  869:  call *label14 *invalid :createCombinedMask*retval            ...
        label *label185                                              ...
  870:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  871:  op abs *tmp163 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  872:  op greaterThan *tmp164 *tmp163 6                             ...
  873:  op abs *tmp165 :layoutThoriumDrillAtLocation:sy 0            ...
  874:  op greaterThan *tmp166 *tmp165 6                             ...
  875:  op or *tmp167 *tmp164 *tmp166                                ...
  876:  jump *label290 equal *tmp167 false                           ...
  877:  set :shiftMask*retval 0                                      ...
  878:  jump *label298 always 0 0                                    ...
        label *label290                                              ...
  879:  op mul *tmp169 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  880:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  881:  jump *label292 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  882:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = FULL_MASK >> shift;
  883:  op and *tmp174 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  884:  op shl :shiftMask:mask *tmp174 :shiftMask:shift              ...
  885:  jump *label293 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label292                                              ...
  886:  op sub *tmp176 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  887:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label293                                              OreLocator.mnd: if shift > 0 then
  888:  jump *label296 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  889:  op shr :shiftMask:keep 0b1111111 *tmp163                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  890:  jump *label294 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  891:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label294                                              ...
  892:  op shl *tmp183 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  893:  op or :shiftMask:keep :shiftMask:keep *tmp183                ...
  894:  op shl *tmp184 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  895:  op or :shiftMask:keep :shiftMask:keep *tmp184                ...
  896:  op shl *tmp185 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  897:  op or :shiftMask:keep :shiftMask:keep *tmp185                ...
  898:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label296                                              OreLocator.mnd: if shiftX != 0 then
  899:  set :shiftMask*retval :shiftMask:mask                        OreLocator.mnd: return mask;
        label *label298                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  900:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  901:  op sub *tmp435 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  902:  op sub *tmp436 .drillY :layoutThoriumDrillAtLocation:sy      ...
  903:  set :tryPlaceGenerator:centerX *tmp435                       ...
  904:  set :tryPlaceGenerator:centerY *tmp436                       ...
  905:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  906:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  907:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  908:  setaddr :tryPlaceGenerator*retaddr *label187                 ...
  909:  call *label12 *invalid :tryPlaceGenerator*retval             ...
        label *label187                                              ...
  910:  jump *label188 equal :tryPlaceGenerator*retval false         ...
  911:  set :layoutThoriumDrillAtLocation*retval true                ...
  912:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label188                                              ...
  913:  multijump *tmp429 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label184                                         ...
  914:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  915:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  916:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  917:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  918:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  919:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  920:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  921:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  922:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  923:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  924:  setaddr :findDrillLocationLocal*retaddr *label191            ...
  925:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label191                                              ...
  926:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  927:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  928:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  929:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  930:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  931:  set :findDrillLocation*finished true                         ...
  932:  jump *label18 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  933:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  934:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  935:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  936:  set :findDrillLocationLocal:item @thorium                    ...
  937:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  938:  set :findDrillLocationLocal:size 3                           ...
  939:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  940:  setaddr :findDrillLocationLocal*retaddr *label193            ...
  941:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label193                                              ...
  942:  set .drillX :findDrillLocationLocal:dx                       ...
  943:  set .drillY :findDrillLocationLocal:dy                       ...
  944:  jump *label194 notEqual :findDrillLocationLocal*retval false ...
  945:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  946:  jump *label192 always 0 0                                    ...
        label *label194                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  947:  setaddr :layoutThoriumDrillAtLocation*retaddr *label196      OreLocator.mnd: layoutThoriumDrillAtLocation();
  948:  call *label15 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label196                                              ...
  949:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label192                                              ...
  950:  set :layoutThoriumDrill*finished true                        ...
  951:  jump *label18 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  952:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  953:  set .mapAction 0                                             ...
  954:  set .mapTotal 0                                              ...
  955:  set .mapProgress 0                                           ...
  956:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  957:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  958:  jump *label18 always 0 0                                     ...


Performance: parsed in 508 ms, compiled in 385 ms, optimized in 1,759 ms, run in 9 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp20 processor1 "*signature":
Variable 'processor1' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
