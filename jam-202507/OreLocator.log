   931 instructions before optimizations.
    92 instructions eliminated by Temp Variables Elimination (2 iterations).
    73 instructions eliminated by Dead Code Elimination (2 passes, 7 iterations).
C:\Home\golem\jam-202507\OreLocator.mnd:22:19 Variable 'mapProgress' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:22:32 Variable 'mapTotal' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:22:42 Variable 'mapAction' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:27:5 Variable 'searchFinished' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:5 Variable 'water1X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:29:14 Variable 'water1Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:5 Variable 'containerX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:30:17 Variable 'containerY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:5 Variable 'water2X' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:31:14 Variable 'water2Y' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:5 Variable 'generatorX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:32:17 Variable 'generatorY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:5 Variable 'nodeX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:33:12 Variable 'nodeY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:5 Variable 'panelX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:34:13 Variable 'panelY' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:35:5 Variable 'batteryX' is not used.
C:\Home\golem\jam-202507\OreLocator.mnd:35:15 Variable 'batteryY' is not used.
     2 instructions eliminated by Jump Normalization (5 iterations).
    36 instructions eliminated by Jump Optimization (5 iterations).
    47 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    25 instructions modified by Expression Optimization (2 passes, 3 iterations).
   222 instructions eliminated by Data Flow Optimization (7 passes, 25 iterations).
     1 loops improved by Loop Hoisting.
     2 instructions added by Loop Optimization (3 iterations).
    10 loops improved by Loop Optimization.
   134 instructions added by Loop Unrolling (11 iterations).
     2 loops unrolled by Loop Unrolling.
   347 instructions added by Function Inlining (11 iterations).
    11 function calls inlined by Function Inlining.
     5 instructions eliminated by Jump Straightening (5 iterations).
     6 instructions updated by JumpThreading.
    10 instructions eliminated by Unreachable Code Elimination (2 iterations).
   927 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 451):
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit    31250.0, efficiency  31250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:417:5                          size   +29, benefit   315900.0, efficiency  10893.103
    Unroll loop at OreLocator.mnd:431:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size   +43, benefit      104.0, efficiency      2.419
    Inline function call at OreLocator.mnd:428:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:432:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:464:28                size   +44, benefit        4.0, efficiency      0.091
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +44, benefit      100.0, efficiency      2.273
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 450):
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit     1250.0, efficiency   1250.000
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:417:5                          size   +29, benefit   315900.0, efficiency  10893.103 (+27 instructions)
    Unroll loop at OreLocator.mnd:431:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size   +17, benefit     2808.0, efficiency    165.176
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size   +43, benefit      104.0, efficiency      2.419
    Inline function call at OreLocator.mnd:428:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:429:16                size    +9, benefit      104.0, efficiency     11.556
    Inline function call at OreLocator.mnd:432:20                size    +9, benefit     2600.0, efficiency    288.889
    Inline function call at OreLocator.mnd:464:28                size   +44, benefit        4.0, efficiency      0.091
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +44, benefit      100.0, efficiency      2.273
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 423):
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       50.0, efficiency     50.000
  * Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit     1250.0, efficiency   1250.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll loop at OreLocator.mnd:431:5                          size   +87, benefit     9100.0, efficiency    104.598
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size   +43, benefit      104.0, efficiency      2.419
    Inline function call at OreLocator.mnd:428:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:464:28                size   +44, benefit        4.0, efficiency      0.091
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +44, benefit      100.0, efficiency      2.273
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 422):
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       50.0, efficiency     50.000
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000
  * Unroll loop at OreLocator.mnd:431:5                          size   +87, benefit     9100.0, efficiency    104.598 (+92 instructions)
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size   +71, benefit     2808.0, efficiency     39.549
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size   +43, benefit      104.0, efficiency      2.419
    Inline function call at OreLocator.mnd:428:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit     2600.0, efficiency     72.222
    Inline function call at OreLocator.mnd:464:28                size   +44, benefit        4.0, efficiency      0.091
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size   +44, benefit      100.0, efficiency      2.273
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 330):
  * Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       50.0, efficiency     50.000 (+1 instructions)
    Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +135, benefit      104.0, efficiency      0.770
    Inline function call at OreLocator.mnd:428:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +136, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +136, benefit      100.0, efficiency      0.735
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 329):
  * Replicate loop condition at OreLocator.mnd:42:5              size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
    Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size  +287, benefit      936.0, efficiency      3.261
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +135, benefit      104.0, efficiency      0.770
    Inline function call at OreLocator.mnd:428:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +136, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +136, benefit      100.0, efficiency      0.735
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 328):
    Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
    Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907
  * Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 size  +287, benefit      936.0, efficiency      3.261 (+238 instructions)
    Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +135, benefit      104.0, efficiency      0.770
    Inline function call at OreLocator.mnd:428:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:429:16                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:432:20                size   +36, benefit      104.0, efficiency      2.889
    Inline function call at OreLocator.mnd:464:28                size  +136, benefit        4.0, efficiency      0.029
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
    Inline function call at OreLocator.mnd:541:30                size  +136, benefit      100.0, efficiency      0.735
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 90):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +181, benefit       19.0, efficiency      0.105
  * Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 size   +75, benefit      143.0, efficiency      1.907 (+71 instructions)
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +412, benefit      104.0, efficiency      0.252
  ! Inline function call at OreLocator.mnd:464:28                size  +413, benefit        4.0, efficiency      0.010
    Inline function call at OreLocator.mnd:530:8                 size   +76, benefit        5.5, efficiency      0.072
  ! Inline function call at OreLocator.mnd:541:30                size  +413, benefit      100.0, efficiency      0.242
    Inline function call at OreLocator.mnd:558:12                size   +76, benefit      137.5, efficiency      1.809

Pass 1: speed optimization selection (cost limit 19):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +481, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +412, benefit      104.0, efficiency      0.252
  ! Inline function call at OreLocator.mnd:464:28                size  +413, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +413, benefit      100.0, efficiency      0.242

Pass 2: speed optimization selection (cost limit 56):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +477, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +380, benefit      104.0, efficiency      0.274
  ! Inline function call at OreLocator.mnd:464:28                size  +381, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +381, benefit      100.0, efficiency      0.262

Pass 3: speed optimization selection (cost limit 56):
  ! Unroll iteration loop at OreLocator.mnd:535:5                size  +477, benefit       19.0, efficiency      0.040
  ! Inline function 'createCombinedMask' defined at OreLocator.mnd:450:1 size  +380, benefit      104.0, efficiency      0.274
  ! Inline function call at OreLocator.mnd:464:28                size  +381, benefit        4.0, efficiency      0.010
  ! Inline function call at OreLocator.mnd:541:30                size  +381, benefit      100.0, efficiency      0.262

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-62 instructions):
 
   133 jump *label36 equal *tmp65 false
   134 set *tmp37 false
   135 jump *label26 always
-    * set *tmp66 null
   136 jump *label37 always
   137 label *label36
-    * set *tmp66 null
   138 label *label37
   139 op sub *tmp67 :locateOreAway:x .coreX
   140 op abs *tmp68 *tmp67
 
   156 label *label40
   157 set *tmp78 null
   158 label *label41
-    * set *tmp76 *tmp78
   159 jump *label39 always
   160 label *label38
-    * set *tmp76 null
   161 label *label39
   162 op greaterThanEq *tmp79 :locateOreAway:coreDist 10
   163 jump *label42 equal *tmp79 false
 
   188 jump *label50 equal *tmp95 false
   189 set *tmp83 true
   190 jump *label46 always
-    * set *tmp96 null
   191 jump *label51 always
   192 label *label50
-    * set *tmp96 null
   193 label *label51
   194 label *label48
   195 op add :visited:i :visited:i 1
 
   218 label *label44
   219 set *tmp82 null
   220 label *label45
-    * set *tmp80 *tmp82
   221 jump *label43 always
   222 label *label42
-    * set *tmp80 null
   223 label *label43
   224 label *label28
   225 jump *label27 always
 
   235 op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
   236 set :findDrillLocationLocal*retval *tmp103
   237 jump *label17 always
-    * set *tmp102 null
   238 jump *label55 always
   239 label *label54
-    * set *tmp102 null
   240 label *label55
   241 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   242 jump *label56 equal *tmp104 false
   243 set *tmp106 .mapSpots
   244 op add .mapSpots .mapSpots 1
-    * set *tmp105 *tmp106
   245 jump *label57 always
   246 label *label56
-    * set *tmp105 null
   247 label *label57
   248 set :moveTo.3:x :findDrillLocationLocal:oreX
   249 set :moveTo.3:y :findDrillLocationLocal:oreY
 
   296 op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 10
   297 jump *label67 equal *tmp121 false
   298 jump *label65 always
-    * set *tmp122 null
   299 jump *label68 always
   300 label *label67
-    * set *tmp122 null
   301 label *label68
   302 op greaterThan *tmp123 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   303 jump *label69 equal *tmp123 false
 
   307 op lessThan *tmp125 :findDrillLocationLocal:limit 1000
   308 jump *label71 equal *tmp125 false
   309 set .mapSpots :findDrillLocationLocal:score
-    * set *tmp126 :findDrillLocationLocal:score
   310 jump *label72 always
   311 label *label71
-    * set *tmp126 null
   312 label *label72
   313 op greaterThanEq *tmp127 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   314 jump *label73 equal *tmp127 false
 
   329 op add .count .count 1
   330 set *tmp136 .count
   331 write :saveLocation:y bank1 *tmp136
-    * set *tmp138 .locations
   332 op add .locations .locations 1
   333 label *label75
   334 ucontrol unbind
 
   339 label *label73
   340 set *tmp128 null
   341 label *label74
-    * set *tmp124 *tmp128
   342 jump *label70 always
   343 label *label69
-    * set *tmp124 null
   344 label *label70
   345 op greaterThan *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:best
   346 jump *label76 equal *tmp139 false
   347 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   348 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   349 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * set *tmp140 :findDrillLocationLocal:best
   350 jump *label77 always
   351 label *label76
-    * set *tmp140 null
   352 label *label77
   353 op lessThanEq *tmp141 :findDrillLocationLocal:score :findDrillLocationLocal:last
   354 jump *label78 equal *tmp141 false
   355 jump *label65 always
-    * set *tmp142 null
   356 jump *label79 always
   357 label *label78
-    * set *tmp142 null
   358 label *label79
   359 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   360 op mul *tmp143 :findDrillLocationLocal:diffX 1.1
 
   393 op add .count .count 1
   394 set *tmp160 .count
   395 write :saveLocation.1:y bank1 *tmp160
-    * set *tmp162 .locations
   396 op add .locations .locations 1
   397 label *label84
-    * set *tmp152 null
   398 jump *label83 always
   399 label *label82
-    * set *tmp152 null
   400 label *label83
   401 label *label24
   402 jump *label23 always
 
   424 op add *tmp171 *tmp170 :findPossiblePlacement:x
   425 set :findPossiblePlacement*retval *tmp171
   426 jump *label85 always
-    * set *tmp168 null
   427 jump *label93 always
   428 label *label92
-    * set *tmp168 null
   429 label *label93
   430 op sub *tmp172 3 :findPossiblePlacement:width
   431 op greaterThan *tmp173 :findPossiblePlacement:x *tmp172
   432 jump *label94 equal *tmp173 false
   433 jump *label91 always
-    * set *tmp174 null
   434 jump *label95 always
   435 label *label94
-    * set *tmp174 null
   436 label *label95
   437 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   438 label *label90
 
   443 op greaterThan *tmp176 :findPossiblePlacement:y *tmp175
   444 jump *label96 equal *tmp176 false
   445 jump *label88 always
-    * set *tmp177 null
   446 jump *label97 always
   447 label *label96
-    * set *tmp177 null
   448 label *label97
   449 label *label87
   450 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
 
   474 jump *label102 equal *tmp181 false
   475 set :tryPlaceGenerator*retval false
   476 jump *label98 always
-    * set *tmp182 null
   477 jump *label103 always
   478 label *label102
-    * set *tmp182 null
   479 label *label103
   480 op add *tmp183 :tryPlaceGenerator:centerX 0.5
   481 op add *tmp184 *tmp183 :tryPlaceGenerator:c
 
   491 set .generatorY *tmp190
   492 op shl *tmp191 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   493 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
-    * set *tmp180 :tryPlaceGenerator:terrainMask
   494 jump *label101 always
   495 label *label100
   496 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   508 jump *label105 equal *tmp193 false
   509 set :tryPlaceGenerator*retval false
   510 jump *label98 always
-    * set *tmp194 null
   511 jump *label106 always
   512 label *label105
-    * set *tmp194 null
   513 label *label106
   514 op add *tmp195 :tryPlaceGenerator:centerX 0.5
   515 op add *tmp196 *tmp195 :tryPlaceGenerator:c
 
   525 set .generatorY *tmp202
   526 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   527 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
-    * set *tmp180 :tryPlaceGenerator:terrainMask
   528 label *label101
   529 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   530 set :findPossiblePlacement:placementMask 1
 
   541 jump *label108 equal *tmp205 false
   542 set :tryPlaceGenerator*retval false
   543 jump *label98 always
-    * set *tmp206 null
   544 jump *label109 always
   545 label *label108
-    * set *tmp206 null
   546 label *label109
   547 op add *tmp207 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   548 set .nodeX *tmp207
 
   565 jump *label111 equal *tmp211 false
   566 set :tryPlaceGenerator*retval false
   567 jump *label98 always
-    * set *tmp212 null
   568 jump *label112 always
   569 label *label111
-    * set *tmp212 null
   570 label *label112
   571 op add *tmp213 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   572 set .panelX *tmp213
 
   589 jump *label114 equal *tmp217 false
   590 set :tryPlaceGenerator*retval false
   591 jump *label98 always
-    * set *tmp218 null
   592 jump *label115 always
   593 label *label114
-    * set *tmp218 null
   594 label *label115
   595 op add *tmp219 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
   596 set .batteryX *tmp219
 
   801 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
   802 op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   803 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp296
-    * set *tmp290 :layoutThoriumDrillAtLocation:cornersMask
   804 jump *label140 always
   805 label *label139
-    * set *tmp290 null
   806 label *label140
   807 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   808 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
 
   825 set .containerY *tmp303
   826 op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   827 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
-    * set *tmp299 :layoutThoriumDrillAtLocation:terrainMask
   828 jump *label143 always
   829 label *label142
-    * set *tmp299 null
   830 label *label143
   831 set :createFixedMatrix.3:row0 0b1111
   832 set :createFixedMatrix.3:row1 0b1111
 
   862 jump *label147 equal *tmp317 false
   863 set :layoutThoriumDrillAtLocation*retval true
   864 jump *label129 always
-    * set *tmp318 null
   865 jump *label148 always
   866 label *label147
-    * set *tmp318 null
   867 label *label148
   868 set :layoutThoriumDrillAtLocation:sx 3
   869 set :layoutThoriumDrillAtLocation:sy 3
 
   906 jump *label158 equal *tmp328 false
   907 set *tmp323 0
   908 jump *label157 always
-    * set *tmp329 null
   909 jump *label159 always
   910 label *label158
-    * set *tmp329 null
   911 label *label159
   912 op mul *tmp330 7 :shiftMask:shiftY
   913 op add *tmp331 :shiftMask:shiftX *tmp330
 
   919 op and *tmp335 :shiftMask:mask :shiftMask:clearMask
   920 op shl *tmp336 *tmp335 :shiftMask:shift
   921 set :shiftMask:mask *tmp336
-    * set *tmp333 :shiftMask:mask
   922 jump *label161 always
   923 label *label160
   924 op sub *tmp337 0 :shiftMask:shift
   925 op shr :shiftMask:mask :shiftMask:mask *tmp337
-    * set *tmp333 :shiftMask:mask
   926 label *label161
   927 op notEqual *tmp338 :shiftMask:shiftX 0
   928 jump *label162 equal *tmp338 false
 
   932 op greaterThan *tmp342 :shiftMask:shiftX 0
   933 jump *label164 equal *tmp342 false
   934 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * set *tmp343 :shiftMask:keep
   935 jump *label165 always
   936 label *label164
-    * set *tmp343 null
   937 label *label165
   938 op shl *tmp344 :shiftMask:keep 7
   939 op or :shiftMask:keep :shiftMask:keep *tmp344
 
   942 op shl *tmp346 :shiftMask:keep 21
   943 op or :shiftMask:keep :shiftMask:keep *tmp346
   944 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * set *tmp339 :shiftMask:mask
   945 jump *label163 always
   946 label *label162
-    * set *tmp339 null
   947 label *label163
   948 set *tmp323 :shiftMask:mask
   949 jump *label157 always
 
   966 jump *label167 equal *tmp350 false
   967 set :layoutThoriumDrillAtLocation*retval true
   968 jump *label129 always
-    * set *tmp351 null
   969 jump *label168 always
   970 label *label167
-    * set *tmp351 null
   971 label *label168
   972 label *label150
   973 multijump *tmp319 0 0 (m:marker0)
 
  1017 jump *label173 equal *tmp352 false
  1018 set :layoutThoriumDrill*retval false
  1019 jump *label171 always
-    * set *tmp353 null
  1020 jump *label174 always
  1021 label *label173
-    * set *tmp353 null
  1022 label *label174
  1023 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)
  1024 call *label13 *invalid :layoutThoriumDrillAtLocation*retval (m:*label175) (h:*label175)

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-7 instructions):
 
   151 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
   152 jump *label40 equal *tmp77 false
   153 jump *label28 always
-    * set *tmp78 null
   154 jump *label41 always
   155 label *label40
-    * set *tmp78 null
   156 label *label41
   157 jump *label39 always
   158 label *label38
 
   211 label *label52
   212 set *tmp98 null
   213 label *label53
-    * set *tmp82 *tmp98
   214 jump *label45 always
   215 label *label44
-    * set *tmp82 null
   216 label *label45
   217 jump *label43 always
   218 label *label42
 
   236 label *label55
   237 op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
   238 jump *label56 equal *tmp104 false
-    * set *tmp106 .mapSpots
   239 op add .mapSpots .mapSpots 1
   240 jump *label57 always
   241 label *label56
 
   329 ucontrol unbind
   330 set :findDrillLocationLocal*retval true
   331 jump *label17 always
-    * set *tmp128 null
   332 jump *label74 always
   333 label *label73
-    * set *tmp128 null
   334 label *label74
   335 jump *label70 always
   336 label *label69

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   206 printflush message1
   207 set *tmp37 true
   208 jump *label26 always
-    * set *tmp98 null
   209 jump *label53 always
   210 label *label52
-    * set *tmp98 null
   211 label *label53
   212 jump *label45 always
   213 label *label44

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-92 instructions):
 
    15 end
    16 label *label8
    17 ubind :findDrillLocationLocal:unit
-    * set *tmp21 .locations
-    * set .locationsStart *tmp21
+   18 set .locationsStart .locations
    19 set .coreX :findDrillLocationLocal:x
    20 set .coreY :findDrillLocationLocal:y
    21 set :findDrillLocationLocal:capacity 0
 
    50 label *label19
    51 label *label18
    52 op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp31 *tmp30 2
-    * set .mapTotal *tmp31
+   53 op pow .mapTotal *tmp30 2
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label23
 
    59 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    60 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
    61 op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocationLocal:capacity
-    * op mul *tmp33 *tmp32 .attenuationRate
-    * set :findDrillLocationLocal:maxDistance *tmp33
-    * op min *tmp34 :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
-    * set :findDrillLocationLocal:distanceLimit *tmp34
+   62 op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuationRate
+   63 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    64 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
-    * op pow *tmp36 *tmp35 2
-    * set .mapTotal *tmp36
+   65 op pow .mapTotal *tmp35 2
    66 set :locateOreAway:ore :findDrillLocationLocal:item
    67 set :locateOreAway:x :findDrillLocationLocal:oreX
    68 set :locateOreAway:y :findDrillLocationLocal:oreY
    69 set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
-    * op mul *tmp38 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp38
+   70 op mul :locateOreAway:distance 3.8197185279121366 .angle
    71 set :locateOreAway:lastX -1
    72 set :locateOreAway:lastY -1
-    * op max *tmp39 .angle @pi
-    * set .angle *tmp39
-    * op mul *tmp40 .angle .angle
-    * set .mapProgress *tmp40
+   73 op max .angle .angle @pi
+   74 op mul .mapProgress .angle .angle
    75 label *label27
    76 op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
    77 jump *label29 equal *tmp41 false
-    * op div *tmp42 .angle @degToRad
-    * set :locateOreAway:a *tmp42
+   78 op div :locateOreAway:a .angle @degToRad
    79 op sin *tmp43 :locateOreAway:a
    80 op mul *tmp44 *tmp43 :locateOreAway:distance
    81 op add *tmp45 .coreX *tmp44
 
    84 set :limit:low 5
    85 set :limit:high *tmp46
    86 op max *tmp48 :limit:value :limit:low
-    * op min *tmp49 *tmp48 :limit:high
-    * set *tmp47 *tmp49
+   87 op min *tmp47 *tmp48 :limit:high
    88 label *label30
    89 set :locateOreAway:lx *tmp47
    90 op cos *tmp50 :locateOreAway:a
 
    95 set :limit.1:low 5
    96 set :limit.1:high *tmp53
    97 op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp56 *tmp55 :limit.1:high
-    * set *tmp54 *tmp56
+   98 op min *tmp54 *tmp55 :limit.1:high
    99 label *label31
   100 set :locateOreAway:ly *tmp54
   101 set :moveTo.2:x :locateOreAway:lx
 
   113 label *label32
   114 op div *tmp60 3.8197185279121366 :locateOreAway:distance
   115 op add .angle .angle *tmp60
-    * op mul *tmp61 .angle .angle
-    * set .mapProgress *tmp61
-    * op mul *tmp62 3.8197185279121366 .angle
-    * set :locateOreAway:distance *tmp62
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 *tmp64
+  116 op mul .mapProgress .angle .angle
+  117 op mul :locateOreAway:distance 3.8197185279121366 .angle
+  118 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
   119 op equal *tmp65 *tmp63 false
   120 jump *label36 equal *tmp65 false
   121 set *tmp37 false
 
   127 op abs *tmp68 *tmp67
   128 op sub *tmp69 :locateOreAway:y .coreY
   129 op abs *tmp70 *tmp69
-    * op max *tmp71 *tmp68 *tmp70
-    * set :locateOreAway:coreDist *tmp71
+  130 op max :locateOreAway:coreDist *tmp68 *tmp70
   131 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   132 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
-    * op len *tmp74 *tmp72 *tmp73
-    * set :locateOreAway:unitDist *tmp74
+  133 op len :locateOreAway:unitDist *tmp72 *tmp73
   134 op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
   135 jump *label38 equal *tmp75 false
   136 op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
 
   154 set :visited:i .locationsStart
   155 label *label47
   156 jump *label49 greaterThanEq :visited:i *tmp84
-    * op mul *tmp85 4 :visited:i
-    * set :visited:index *tmp85
-    * op add *tmp86 :visited:index 2
-    * set *tmp87 *tmp86
-    * read *tmp88 bank1 *tmp87
-    * set :visited:lx *tmp88
-    * op add *tmp89 :visited:index 3
-    * set *tmp90 *tmp89
-    * read *tmp91 bank1 *tmp90
-    * set :visited:ly *tmp91
+  157 op mul :visited:index 4 :visited:i
+  158 op add *tmp87 :visited:index 2
+  159 read :visited:lx bank1 *tmp87
+  160 op add *tmp90 :visited:index 3
+  161 read :visited:ly bank1 *tmp90
   162 op sub *tmp92 :visited:x :visited:lx
   163 op sub *tmp93 :visited:y :visited:ly
   164 op len *tmp94 *tmp92 *tmp93
 
   181 jump *label52 equal *tmp97 false
   182 op div *tmp99 7.639437055824273 :locateOreAway:distance
   183 op add .angle .angle *tmp99
-    * op mul *tmp100 .angle .angle
-    * set .mapProgress *tmp100
+  184 op mul .mapProgress .angle .angle
   185 printflush message1
   186 set *tmp37 true
   187 jump *label26 always
 
   205 set :findDrillLocationLocal:oreY :locateOreAway:y
   206 op equal *tmp101 *tmp37 false
   207 jump *label54 equal *tmp101 false
-    * op greaterThan *tmp103 :findDrillLocationLocal:capacity 0
-    * set :findDrillLocationLocal*retval *tmp103
+  208 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   209 jump *label17 always
   210 jump *label55 always
   211 label *label54
 
   248 wait 1e-15
   249 read *tmp112 processor1 ":findBestPosition*finished"
   250 jump *label66 equal *tmp112 false
-    * read *tmp8 processor1 ":findBestPosition:bestX"
-    * set :findDrillLocationLocal:diffX *tmp8
-    * read *tmp9 processor1 ":findBestPosition:bestY"
-    * set :findDrillLocationLocal:diffY *tmp9
-    * read *tmp113 processor1 ":findBestPosition*retval"
-    * set :findDrillLocationLocal:score *tmp113
-    * op add *tmp114 :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
-    * set :findDrillLocationLocal:newX *tmp114
-    * op add *tmp115 :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * set :findDrillLocationLocal:newY *tmp115
+  251 read :findDrillLocationLocal:diffX processor1 ":findBestPosition:bestX"
+  252 read :findDrillLocationLocal:diffY processor1 ":findBestPosition:bestY"
+  253 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
+  254 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
+  255 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
   256 op sub *tmp116 :findDrillLocationLocal:newX .coreX
   257 op abs *tmp117 *tmp116
   258 op sub *tmp118 :findDrillLocationLocal:newY .coreY
   259 op abs *tmp119 *tmp118
-    * op max *tmp120 *tmp117 *tmp119
-    * set :findDrillLocationLocal:coreDist *tmp120
+  260 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   261 op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 10
   262 jump *label67 equal *tmp121 false
   263 jump *label65 always
 
   286 sensor *tmp131 :saveLocation:item @id
   287 write *tmp131 bank1 *tmp129
   288 op add .count .count 1
-    * set *tmp132 .count
-    * write :saveLocation:value bank1 *tmp132
+  289 write :saveLocation:value bank1 .count
   290 op add .count .count 1
-    * set *tmp134 .count
-    * write :saveLocation:x bank1 *tmp134
+  291 write :saveLocation:x bank1 .count
   292 op add .count .count 1
-    * set *tmp136 .count
-    * write :saveLocation:y bank1 *tmp136
+  293 write :saveLocation:y bank1 .count
   294 op add .locations .locations 1
   295 label *label75
   296 ucontrol unbind
 
   317 label *label78
   318 label *label79
   319 set :findDrillLocationLocal:last :findDrillLocationLocal:score
-    * op mul *tmp143 :findDrillLocationLocal:diffX 1.1
-    * set :round:x *tmp143
+  320 op mul :round:x :findDrillLocationLocal:diffX 1.1
   321 op add *tmp145 :round:x 0.5
-    * op floor *tmp146 *tmp145
-    * set *tmp144 *tmp146
+  322 op floor *tmp144 *tmp145
   323 label *label80
   324 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp144
-    * op mul *tmp147 :findDrillLocationLocal:diffY 1.1
-    * set :round.1:x *tmp147
+  325 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   326 op add *tmp149 :round.1:x 0.5
-    * op floor *tmp150 *tmp149
-    * set *tmp148 *tmp150
+  327 op floor *tmp148 *tmp149
   328 label *label81
   329 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
   330 label *label64
 
   341 sensor *tmp155 :saveLocation.1:item @id
   342 write *tmp155 bank1 *tmp153
   343 op add .count .count 1
-    * set *tmp156 .count
-    * write :saveLocation.1:value bank1 *tmp156
+  344 write :saveLocation.1:value bank1 .count
   345 op add .count .count 1
-    * set *tmp158 .count
-    * write :saveLocation.1:x bank1 *tmp158
+  346 write :saveLocation.1:x bank1 .count
   347 op add .count .count 1
-    * set *tmp160 .count
-    * write :saveLocation.1:y bank1 *tmp160
+  348 write :saveLocation.1:y bank1 .count
   349 op add .locations .locations 1
   350 label *label84
   351 jump *label83 always
 
   364 jump *label88 greaterThan :findPossiblePlacement:y 3
   365 op add *tmp163 :findPossiblePlacement:y 3
   366 op mul *tmp164 7 *tmp163
-    * op shl *tmp165 :findPossiblePlacement:placementMask *tmp164
-    * set :findPossiblePlacement:mask *tmp165
+  367 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp164
   368 set :findPossiblePlacement:x -3
   369 label *label89
   370 jump *label91 greaterThan :findPossiblePlacement:x 3
 
   373 jump *label92 equal *tmp167 false
   374 op mul *tmp169 :findPossiblePlacement:y 7
   375 op add *tmp170 24 *tmp169
-    * op add *tmp171 *tmp170 :findPossiblePlacement:x
-    * set :findPossiblePlacement*retval *tmp171
+  376 op add :findPossiblePlacement*retval *tmp170 :findPossiblePlacement:x
   377 jump *label85 always
   378 jump *label93 always
   379 label *label92
 
   417 label *label99
   418 set :tryPlaceGenerator:c :findPossiblePlacement:x
   419 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp178 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp178
+  420 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   421 op greaterThanEq *tmp179 :tryPlaceGenerator:shift 0
   422 jump *label100 equal *tmp179 false
   423 op lessThan *tmp181 :tryPlaceGenerator:shift 0
 
   428 label *label102
   429 label *label103
   430 op add *tmp183 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp184 *tmp183 :tryPlaceGenerator:c
-    * set .water2X *tmp184
+  431 op add .water2X *tmp183 :tryPlaceGenerator:c
   432 op add *tmp185 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp186 *tmp185 :tryPlaceGenerator:r
-    * set .water2Y *tmp186
+  433 op add .water2Y *tmp185 :tryPlaceGenerator:r
   434 op add *tmp187 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp188 *tmp187 :tryPlaceGenerator:c
-    * set .generatorX *tmp188
+  435 op add .generatorX *tmp187 :tryPlaceGenerator:c
   436 op add *tmp189 :tryPlaceGenerator:centerY 2.5
-    * op add *tmp190 *tmp189 :tryPlaceGenerator:r
-    * set .generatorY *tmp190
+  437 op add .generatorY *tmp189 :tryPlaceGenerator:r
   438 op shl *tmp191 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
   439 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
   440 jump *label101 always
 
   448 label *label104
   449 set :tryPlaceGenerator:c :findPossiblePlacement:x
   450 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp192 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp192
+  451 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   452 op lessThan *tmp193 :tryPlaceGenerator:shift 0
   453 jump *label105 equal *tmp193 false
   454 set :tryPlaceGenerator*retval false
 
   457 label *label105
   458 label *label106
   459 op add *tmp195 :tryPlaceGenerator:centerX 0.5
-    * op add *tmp196 *tmp195 :tryPlaceGenerator:c
-    * set .water2X *tmp196
+  460 op add .water2X *tmp195 :tryPlaceGenerator:c
   461 op add *tmp197 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp198 *tmp197 :tryPlaceGenerator:r
-    * set .water2Y *tmp198
+  462 op add .water2Y *tmp197 :tryPlaceGenerator:r
   463 op add *tmp199 :tryPlaceGenerator:centerX 2.5
-    * op add *tmp200 *tmp199 :tryPlaceGenerator:c
-    * set .generatorX *tmp200
+  464 op add .generatorX *tmp199 :tryPlaceGenerator:c
   465 op add *tmp201 :tryPlaceGenerator:centerY 0.5
-    * op add *tmp202 *tmp201 :tryPlaceGenerator:r
-    * set .generatorY *tmp202
+  466 op add .generatorY *tmp201 :tryPlaceGenerator:r
   467 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
   468 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
   469 label *label101
 
   476 label *label107
   477 set :tryPlaceGenerator:c :findPossiblePlacement:x
   478 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp204 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp204
+  479 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   480 op lessThan *tmp205 :tryPlaceGenerator:shift 0
   481 jump *label108 equal *tmp205 false
   482 set :tryPlaceGenerator*retval false
 
   484 jump *label109 always
   485 label *label108
   486 label *label109
-    * op add *tmp207 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .nodeX *tmp207
-    * op add *tmp208 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .nodeY *tmp208
+  487 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  488 op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   489 op shl *tmp209 1 :tryPlaceGenerator:shift
   490 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp209
   491 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   497 label *label110
   498 set :tryPlaceGenerator:c :findPossiblePlacement:x
   499 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp210 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp210
+  500 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   501 op lessThan *tmp211 :tryPlaceGenerator:shift 0
   502 jump *label111 equal *tmp211 false
   503 set :tryPlaceGenerator*retval false
 
   505 jump *label112 always
   506 label *label111
   507 label *label112
-    * op add *tmp213 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .panelX *tmp213
-    * op add *tmp214 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .panelY *tmp214
+  508 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  509 op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   510 op shl *tmp215 1 :tryPlaceGenerator:shift
   511 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp215
   512 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   518 label *label113
   519 set :tryPlaceGenerator:c :findPossiblePlacement:x
   520 set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set *tmp216 :findPossiblePlacement*retval
-    * set :tryPlaceGenerator:shift *tmp216
+  521 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   522 op lessThan *tmp217 :tryPlaceGenerator:shift 0
   523 jump *label114 equal *tmp217 false
   524 set :tryPlaceGenerator*retval false
 
   526 jump *label115 always
   527 label *label114
   528 label *label115
-    * op add *tmp219 :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * set .batteryX *tmp219
-    * op add *tmp220 :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * set .batteryY *tmp220
+  529 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
+  530 op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
   531 op shl *tmp221 1 :tryPlaceGenerator:shift
   532 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp221
   533 set :tryPlaceGenerator*retval true
 
   543 jump *label119 lessThan :createBlockMaskRow:c -4
   544 op shl *tmp222 :createBlockMaskRow:result 1
   545 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y *tmp225 *tmp224 *tmp226
-    * op or *tmp227 *tmp222 *tmp224
-    * set :createBlockMaskRow:result *tmp227
+  546 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  547 op or :createBlockMaskRow:result *tmp222 *tmp224
   548 label *label118
   549 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
   550 jump *label117 always
 
   570 setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
   571 call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
   572 label *label122
-    * set *tmp233 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row2 *tmp233
+  573 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   574 op add *tmp234 :createAdjacentMask:y 3
   575 set :createBlockMaskRow:x :createAdjacentMask:x
   576 set :createBlockMaskRow:y *tmp234
   577 setaddr :createBlockMaskRow*retaddr *label123 (h:*label123)
   578 call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
   579 label *label123
-    * set *tmp235 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row1 *tmp235
+  580 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   581 set :createAdjacentMask:r 2
   582 label *label124
   583 jump *label126 lessThan :createAdjacentMask:r -4
 
   587 setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
   588 call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
   589 label *label127
-    * set *tmp237 :createBlockMaskRow*retval
-    * set :createAdjacentMask:row0 *tmp237
+  590 set :createAdjacentMask:row0 :createBlockMaskRow*retval
   591 op shl *tmp238 :createAdjacentMask:row1 1
   592 op or *tmp239 :createAdjacentMask:row2 *tmp238
   593 op shr *tmp240 :createAdjacentMask:row1 1
   594 op or *tmp241 *tmp239 *tmp240
-    * op or *tmp242 *tmp241 :createAdjacentMask:row0
-    * set :createAdjacentMask:mask *tmp242
+  595 op or :createAdjacentMask:mask *tmp241 :createAdjacentMask:row0
   596 op shl *tmp243 :createAdjacentMask:result 7
   597 op and *tmp244 :createAdjacentMask:mask 0xFE
-    * op or *tmp245 *tmp243 *tmp244
-    * set :createAdjacentMask:result *tmp245
+  598 op or :createAdjacentMask:result *tmp243 *tmp244
   599 set :createAdjacentMask:row2 :createAdjacentMask:row1
   600 set :createAdjacentMask:row1 :createAdjacentMask:row0
   601 label *label125
   602 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   603 jump *label124 always
   604 label *label126
-    * op shr *tmp246 :createAdjacentMask:result 1
-    * set *tmp231 *tmp246
+  605 op shr *tmp231 :createAdjacentMask:result 1
   606 label *label121
   607 set :createCombinedMask:adjacentMask *tmp231
   608 label *label128
   609 wait 1e-15
   610 read *tmp247 processor1 ":createTerrainMask*finished"
   611 jump *label128 equal *tmp247 false
-    * read *tmp248 processor1 ":createTerrainMask*retval"
-    * set :createCombinedMask:terrainMask *tmp248
-    * op or *tmp249 :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
-    * set :createCombinedMask*retval *tmp249
+  612 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
+  613 op or :createCombinedMask*retval :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
   614 jump *label120 always
   615 set :createCombinedMask*retval null
   616 label *label120
 
   643 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   644 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   645 label *label134
-    * set *tmp253 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask *tmp253
+  646 set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   647 set :createFixedMatrix:row0 0b0000000
   648 set :createFixedMatrix:row1 0b0000000
   649 set :createFixedMatrix:row2 0b0011100
 
   663 op shl *tmp264 :createFixedMatrix:row5 35
   664 op or *tmp265 *tmp263 *tmp264
   665 op shl *tmp266 :createFixedMatrix:row6 42
-    * op or *tmp267 *tmp265 *tmp266
-    * set *tmp254 *tmp267
+  666 op or *tmp254 *tmp265 *tmp266
   667 label *label135
-    * op or *tmp268 :layoutThoriumDrillAtLocation:plainTerrainMask *tmp254
-    * set :layoutThoriumDrillAtLocation:terrainMask *tmp268
+  668 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp254
   669 set :createFixedMatrix.1:row0 0b1000001
   670 set :createFixedMatrix.1:row1 0b0000000
   671 set :createFixedMatrix.1:row2 0b0011100
 
   685 op shl *tmp279 :createFixedMatrix.1:row5 35
   686 op or *tmp280 *tmp278 *tmp279
   687 op shl *tmp281 :createFixedMatrix.1:row6 42
-    * op or *tmp282 *tmp280 *tmp281
-    * set *tmp269 *tmp282
+  688 op or *tmp269 *tmp280 *tmp281
   689 label *label136
-    * op or *tmp283 :layoutThoriumDrillAtLocation:terrainMask *tmp269
-    * set :layoutThoriumDrillAtLocation:cornersMask *tmp283
+  690 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp269
   691 set :createFixedMatrix.2:row0 0b11
   692 set :createFixedMatrix.2:row1 0b11
   693 op shl *tmp285 :createFixedMatrix.2:row0 0
   694 op shl *tmp286 :createFixedMatrix.2:row1 7
-    * op or *tmp287 *tmp285 *tmp286
-    * set *tmp284 *tmp287
+  695 op or *tmp284 *tmp285 *tmp286
   696 label *label137
   697 set :layoutThoriumDrillAtLocation:mask2x2 *tmp284
   698 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   704 label *label138
   705 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   706 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp288 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp288
+  707 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   708 op greaterThanEq *tmp289 :layoutThoriumDrillAtLocation:shift 0
   709 jump *label139 equal *tmp289 false
   710 op add *tmp291 .drillX 0.5
-    * op add *tmp292 *tmp291 :layoutThoriumDrillAtLocation:c
-    * set .water1X *tmp292
+  711 op add .water1X *tmp291 :layoutThoriumDrillAtLocation:c
   712 op add *tmp293 .drillY 0.5
-    * op add *tmp294 *tmp293 :layoutThoriumDrillAtLocation:r
-    * set .water1Y *tmp294
+  713 op add .water1Y *tmp293 :layoutThoriumDrillAtLocation:r
   714 op shl *tmp295 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   715 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
   716 op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
 
   727 label *label141
   728 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   729 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set *tmp297 :findPossiblePlacement*retval
-    * set :layoutThoriumDrillAtLocation:shift *tmp297
+  730 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   731 op greaterThanEq *tmp298 :layoutThoriumDrillAtLocation:shift 0
   732 jump *label142 equal *tmp298 false
   733 op add *tmp300 .drillX 0.5
-    * op add *tmp301 *tmp300 :layoutThoriumDrillAtLocation:c
-    * set .containerX *tmp301
+  734 op add .containerX *tmp300 :layoutThoriumDrillAtLocation:c
   735 op add *tmp302 .drillY 0.5
-    * op add *tmp303 *tmp302 :layoutThoriumDrillAtLocation:r
-    * set .containerY *tmp303
+  736 op add .containerY *tmp302 :layoutThoriumDrillAtLocation:r
   737 op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   738 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
   739 jump *label143 always
 
   743 set :createFixedMatrix.3:row1 0b1111
   744 op shl *tmp306 :createFixedMatrix.3:row0 0
   745 op shl *tmp307 :createFixedMatrix.3:row1 7
-    * op or *tmp308 *tmp306 *tmp307
-    * set *tmp305 *tmp308
+  746 op or *tmp305 *tmp306 *tmp307
   747 label *label144
   748 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp305
   749 set :createFixedMatrix.4:row0 0b11
 
   756 op shl *tmp313 :createFixedMatrix.4:row2 14
   757 op or *tmp314 *tmp312 *tmp313
   758 op shl *tmp315 :createFixedMatrix.4:row3 21
-    * op or *tmp316 *tmp314 *tmp315
-    * set *tmp309 *tmp316
+  759 op or *tmp309 *tmp314 *tmp315
   760 label *label145
   761 set :layoutThoriumDrillAtLocation:generatorVertical *tmp309
   762 set :tryPlaceGenerator:centerX .drillX
 
   767 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   768 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   769 label *label146
-    * set *tmp317 :tryPlaceGenerator*retval
-    * jump *label147 equal *tmp317 false
+  770 jump *label147 equal :tryPlaceGenerator*retval false
   771 set :layoutThoriumDrillAtLocation*retval true
   772 jump *label129 always
   773 jump *label148 always
 
   792 set :layoutThoriumDrillAtLocation:sy -3
   793 setaddr *tmp319 *label155
   794 label *label149
-    * op sub *tmp320 .drillX :layoutThoriumDrillAtLocation:sx
-    * set :layoutThoriumDrillAtLocation:newX *tmp320
-    * op sub *tmp321 .drillY :layoutThoriumDrillAtLocation:sy
-    * set :layoutThoriumDrillAtLocation:newY *tmp321
+  795 op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutThoriumDrillAtLocation:sx
+  796 op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutThoriumDrillAtLocation:sy
   797 set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX
   798 set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY
   799 setaddr :createCombinedMask*retaddr *label156 (h:*label156)
   800 call *label12 *invalid :createCombinedMask*retval (m:*label156) (h:*label156)
   801 label *label156
-    * set *tmp322 :createCombinedMask*retval
-    * set :layoutThoriumDrillAtLocation:newTerrainMask *tmp322
+  802 set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   803 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   804 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   805 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
 
   815 label *label158
   816 label *label159
   817 op mul *tmp330 7 :shiftMask:shiftY
-    * op add *tmp331 :shiftMask:shiftX *tmp330
-    * set :shiftMask:shift *tmp331
+  818 op add :shiftMask:shift :shiftMask:shiftX *tmp330
   819 op greaterThan *tmp332 :shiftMask:shift 0
   820 jump *label160 equal *tmp332 false
-    * op shr *tmp334 562949953421311 :shiftMask:shift
-    * set :shiftMask:clearMask *tmp334
+  821 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   822 op and *tmp335 :shiftMask:mask :shiftMask:clearMask
-    * op shl *tmp336 *tmp335 :shiftMask:shift
-    * set :shiftMask:mask *tmp336
+  823 op shl :shiftMask:mask *tmp335 :shiftMask:shift
   824 jump *label161 always
   825 label *label160
   826 op sub *tmp337 0 :shiftMask:shift
 
   829 op notEqual *tmp338 :shiftMask:shiftX 0
   830 jump *label162 equal *tmp338 false
   831 op abs *tmp340 :shiftMask:shiftX
-    * op shr *tmp341 0b1111111 *tmp340
-    * set :shiftMask:keep *tmp341
+  832 op shr :shiftMask:keep 0b1111111 *tmp340
   833 op greaterThan *tmp342 :shiftMask:shiftX 0
   834 jump *label164 equal *tmp342 false
   835 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
 
   851 set *tmp323 null
   852 label *label157
   853 set :layoutThoriumDrillAtLocation:shiftedMask *tmp323
-    * op or *tmp347 :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
-    * set :layoutThoriumDrillAtLocation:combinedMask *tmp347
+  854 op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
   855 op sub *tmp348 .drillX :layoutThoriumDrillAtLocation:sx
   856 op sub *tmp349 .drillY :layoutThoriumDrillAtLocation:sy
   857 set :tryPlaceGenerator:centerX *tmp348
 
   862 setaddr :tryPlaceGenerator*retaddr *label166 (h:*label166)
   863 call *label10 *invalid :tryPlaceGenerator*retval (m:*label166) (h:*label166)
   864 label *label166
-    * set *tmp350 :tryPlaceGenerator*retval
-    * jump *label167 equal *tmp350 false
+  865 jump *label167 equal :tryPlaceGenerator*retval false
   866 set :layoutThoriumDrillAtLocation*retval true
   867 jump *label129 always
   868 jump *label168 always

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    54 set :findDrillLocationLocal:oreX 0
    55 set :findDrillLocationLocal:oreY 0
    56 label *label23
-    * jump *label25 equal true false
    57 set :findDrillLocationLocal:best -1
    58 set :findDrillLocationLocal:bestX :findDrillLocationLocal:x
    59 set :findDrillLocationLocal:bestY :findDrillLocationLocal:y
 
   235 label *label58
   236 set :findDrillLocationLocal:last 0
   237 label *label63
-    * jump *label65 equal true false
   238 write @unit processor1 ":findBestPosition:unit"
   239 write :findDrillLocationLocal:oreX processor1 ":findBestPosition:x"
   240 write :findDrillLocationLocal:oreY processor1 ":findBestPosition:y"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-36 instructions):
 
    40 set :moveTo.1:radius 6
    41 label *label20
    42 ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
-    * op equal *tmp28 *tmp27 false
-    * jump *label22 equal *tmp28 false
+   43 jump *label22 notEqual *tmp27 false
    44 op sub *tmp29 :moveTo.1:radius 0.5
    45 ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
    46 label *label21
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label27
-    * op lessThan *tmp41 :locateOreAway:distance :locateOreAway:distanceLimit
-    * jump *label29 equal *tmp41 false
+   74 jump *label29 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   100 set :moveTo.2:radius 5
   101 label *label33
   102 ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
-    * op equal *tmp58 *tmp57 false
-    * jump *label35 equal *tmp58 false
+  103 jump *label35 notEqual *tmp57 false
   104 op sub *tmp59 :moveTo.2:radius 0.5
   105 ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
   106 label *label34
 
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
   114 ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
-    * op equal *tmp65 *tmp63 false
-    * jump *label36 equal *tmp65 false
+  115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
   118 jump *label37 always
 
   126 op sub *tmp72 :locateOreAway:x :locateOreAway:lx
   127 op sub *tmp73 :locateOreAway:y :locateOreAway:ly
   128 op len :locateOreAway:unitDist *tmp72 *tmp73
-    * op equal *tmp75 :locateOreAway:lastX :locateOreAway:x
-    * jump *label38 equal *tmp75 false
-    * op equal *tmp77 :locateOreAway:lastY :locateOreAway:y
-    * jump *label40 equal *tmp77 false
+  129 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
+  130 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   131 jump *label28 always
   132 jump *label41 always
   133 label *label40
 
   135 jump *label39 always
   136 label *label38
   137 label *label39
-    * op greaterThanEq *tmp79 :locateOreAway:coreDist 10
-    * jump *label42 equal *tmp79 false
-    * op lessThan *tmp81 :locateOreAway:unitDist :locateOreAway:distance
-    * jump *label44 equal *tmp81 false
+  138 jump *label42 lessThan :locateOreAway:coreDist 10
+  139 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   140 set :locateOreAway:lastX :locateOreAway:x
   141 set :locateOreAway:lastY :locateOreAway:y
   142 set :visited:x :locateOreAway:x
 
   153 op sub *tmp92 :visited:x :visited:lx
   154 op sub *tmp93 :visited:y :visited:ly
   155 op len *tmp94 *tmp92 *tmp93
-    * op lessThan *tmp95 *tmp94 7
-    * jump *label50 equal *tmp95 false
+  156 jump *label50 greaterThanEq *tmp94 7
   157 set *tmp83 true
   158 jump *label46 always
   159 jump *label51 always
 
   167 jump *label46 always
   168 set *tmp83 null
   169 label *label46
-    * op equal *tmp97 *tmp83 false
-    * jump *label52 equal *tmp97 false
+  170 jump *label52 notEqual *tmp83 false
   171 op div *tmp99 7.639437055824273 :locateOreAway:distance
   172 op add .angle .angle *tmp99
   173 op mul .mapProgress .angle .angle
 
   192 label *label26
   193 set :findDrillLocationLocal:oreX :locateOreAway:x
   194 set :findDrillLocationLocal:oreY :locateOreAway:y
-    * op equal *tmp101 *tmp37 false
-    * jump *label54 equal *tmp101 false
+  195 jump *label54 notEqual *tmp37 false
   196 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   197 jump *label17 always
   198 jump *label55 always
   199 label *label54
   200 label *label55
-    * op greaterThanEq *tmp104 :findDrillLocationLocal:limit 1000
-    * jump *label56 equal *tmp104 false
+  201 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   202 op add .mapSpots .mapSpots 1
   203 jump *label57 always
   204 label *label56
 
   212 set :moveTo.4:radius 6
   213 label *label60
   214 ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
-    * op equal *tmp110 *tmp109 false
-    * jump *label62 equal *tmp110 false
+  215 jump *label62 notEqual *tmp109 false
   216 op sub *tmp111 :moveTo.4:radius 0.5
   217 ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
   218 label *label61
 
   243 op sub *tmp118 :findDrillLocationLocal:newY .coreY
   244 op abs *tmp119 *tmp118
   245 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
-    * op lessThanEq *tmp121 :findDrillLocationLocal:coreDist 10
-    * jump *label67 equal *tmp121 false
+  246 jump *label67 greaterThan :findDrillLocationLocal:coreDist 10
   247 jump *label65 always
   248 jump *label68 always
   249 label *label67
   250 label *label68
-    * op greaterThan *tmp123 :findDrillLocationLocal:score :findDrillLocationLocal:capacity
-    * jump *label69 equal *tmp123 false
+  251 jump *label69 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   252 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   253 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
   254 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
-    * op lessThan *tmp125 :findDrillLocationLocal:limit 1000
-    * jump *label71 equal *tmp125 false
+  255 jump *label71 greaterThanEq :findDrillLocationLocal:limit 1000
   256 set .mapSpots :findDrillLocationLocal:score
   257 jump *label72 always
   258 label *label71
   259 label *label72
-    * op greaterThanEq *tmp127 :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * jump *label73 equal *tmp127 false
+  260 jump *label73 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   261 set :saveLocation:item :findDrillLocationLocal:item
   262 set :saveLocation:value :findDrillLocationLocal:score
   263 set :saveLocation:x :findDrillLocationLocal:dx
 
   283 jump *label70 always
   284 label *label69
   285 label *label70
-    * op greaterThan *tmp139 :findDrillLocationLocal:score :findDrillLocationLocal:best
-    * jump *label76 equal *tmp139 false
+  286 jump *label76 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   287 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   288 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   289 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   290 jump *label77 always
   291 label *label76
   292 label *label77
-    * op lessThanEq *tmp141 :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label78 equal *tmp141 false
+  293 jump *label78 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   294 jump *label65 always
   295 jump *label79 always
   296 label *label78
 
   309 label *label64
   310 jump *label63 always
   311 label *label65
-    * op greaterThanEq *tmp151 :findDrillLocationLocal:best 0
-    * jump *label82 equal *tmp151 false
+  312 jump *label82 lessThan :findDrillLocationLocal:best 0
   313 set :saveLocation.1:item :findDrillLocationLocal:item
   314 set :saveLocation.1:value :findDrillLocationLocal:best
   315 set :saveLocation.1:x :findDrillLocationLocal:bestX
 
   347 label *label89
   348 jump *label91 greaterThan :findPossiblePlacement:x 3
   349 op and *tmp166 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
-    * op equal *tmp167 *tmp166 0
-    * jump *label92 equal *tmp167 false
+  350 jump *label92 notEqual *tmp166 0
   351 op mul *tmp169 :findPossiblePlacement:y 7
   352 op add *tmp170 24 *tmp169
   353 op add :findPossiblePlacement*retval *tmp170 :findPossiblePlacement:x
 
   356 label *label92
   357 label *label93
   358 op sub *tmp172 3 :findPossiblePlacement:width
-    * op greaterThan *tmp173 :findPossiblePlacement:x *tmp172
-    * jump *label94 equal *tmp173 false
+  359 jump *label94 lessThanEq :findPossiblePlacement:x *tmp172
   360 jump *label91 always
   361 jump *label95 always
   362 label *label94
 
   367 jump *label89 always
   368 label *label91
   369 op sub *tmp175 3 :findPossiblePlacement:height
-    * op greaterThan *tmp176 :findPossiblePlacement:y *tmp175
-    * jump *label96 equal *tmp176 false
+  370 jump *label96 lessThanEq :findPossiblePlacement:y *tmp175
   371 jump *label88 always
   372 jump *label97 always
   373 label *label96
 
   393 set :tryPlaceGenerator:c :findPossiblePlacement:x
   394 set :tryPlaceGenerator:r :findPossiblePlacement:y
   395 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp179 :tryPlaceGenerator:shift 0
-    * jump *label100 equal *tmp179 false
-    * op lessThan *tmp181 :tryPlaceGenerator:shift 0
-    * jump *label102 equal *tmp181 false
+  396 jump *label100 lessThan :tryPlaceGenerator:shift 0
+  397 jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
   398 set :tryPlaceGenerator*retval false
   399 jump *label98 always
   400 jump *label103 always
 
   422 set :tryPlaceGenerator:c :findPossiblePlacement:x
   423 set :tryPlaceGenerator:r :findPossiblePlacement:y
   424 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp193 :tryPlaceGenerator:shift 0
-    * jump *label105 equal *tmp193 false
+  425 jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
   426 set :tryPlaceGenerator*retval false
   427 jump *label98 always
   428 jump *label106 always
 
   449 set :tryPlaceGenerator:c :findPossiblePlacement:x
   450 set :tryPlaceGenerator:r :findPossiblePlacement:y
   451 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp205 :tryPlaceGenerator:shift 0
-    * jump *label108 equal *tmp205 false
+  452 jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
   453 set :tryPlaceGenerator*retval false
   454 jump *label98 always
   455 jump *label109 always
 
   469 set :tryPlaceGenerator:c :findPossiblePlacement:x
   470 set :tryPlaceGenerator:r :findPossiblePlacement:y
   471 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp211 :tryPlaceGenerator:shift 0
-    * jump *label111 equal *tmp211 false
+  472 jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
   473 set :tryPlaceGenerator*retval false
   474 jump *label98 always
   475 jump *label112 always
 
   489 set :tryPlaceGenerator:c :findPossiblePlacement:x
   490 set :tryPlaceGenerator:r :findPossiblePlacement:y
   491 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * op lessThan *tmp217 :tryPlaceGenerator:shift 0
-    * jump *label114 equal *tmp217 false
+  492 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   493 set :tryPlaceGenerator*retval false
   494 jump *label98 always
   495 jump *label115 always
 
   599 set :moveTo.5:radius 1
   600 label *label131
   601 ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp250
-    * op equal *tmp251 *tmp250 false
-    * jump *label133 equal *tmp251 false
+  602 jump *label133 notEqual *tmp250 false
   603 op sub *tmp252 :moveTo.5:radius 0.5
   604 ucontrol approach :moveTo.5:x :moveTo.5:y *tmp252
   605 label *label132
 
   673 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   674 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   675 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp289 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label139 equal *tmp289 false
+  676 jump *label139 lessThan :layoutThoriumDrillAtLocation:shift 0
   677 op add *tmp291 .drillX 0.5
   678 op add .water1X *tmp291 :layoutThoriumDrillAtLocation:c
   679 op add *tmp293 .drillY 0.5
 
   695 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   696 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   697 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * op greaterThanEq *tmp298 :layoutThoriumDrillAtLocation:shift 0
-    * jump *label142 equal *tmp298 false
+  698 jump *label142 lessThan :layoutThoriumDrillAtLocation:shift 0
   699 op add *tmp300 .drillX 0.5
   700 op add .containerX *tmp300 :layoutThoriumDrillAtLocation:c
   701 op add *tmp302 .drillY 0.5
 
   782 label *label159
   783 op mul *tmp330 7 :shiftMask:shiftY
   784 op add :shiftMask:shift :shiftMask:shiftX *tmp330
-    * op greaterThan *tmp332 :shiftMask:shift 0
-    * jump *label160 equal *tmp332 false
+  785 jump *label160 lessThanEq :shiftMask:shift 0
   786 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
   787 op and *tmp335 :shiftMask:mask :shiftMask:clearMask
   788 op shl :shiftMask:mask *tmp335 :shiftMask:shift
 
   791 op sub *tmp337 0 :shiftMask:shift
   792 op shr :shiftMask:mask :shiftMask:mask *tmp337
   793 label *label161
-    * op notEqual *tmp338 :shiftMask:shiftX 0
-    * jump *label162 equal *tmp338 false
+  794 jump *label162 equal :shiftMask:shiftX 0
   795 op abs *tmp340 :shiftMask:shiftX
   796 op shr :shiftMask:keep 0b1111111 *tmp340
-    * op greaterThan *tmp342 :shiftMask:shiftX 0
-    * jump *label164 equal *tmp342 false
+  797 jump *label164 lessThanEq :shiftMask:shiftX 0
   798 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
   799 jump *label165 always
   800 label *label164
 
   875 label *label172
   876 set .drillX :findDrillLocationLocal:dx
   877 set .drillY :findDrillLocationLocal:dy
-    * op equal *tmp352 :findDrillLocationLocal*retval false
-    * jump *label173 equal *tmp352 false
+  878 jump *label173 notEqual :findDrillLocationLocal*retval false
   879 set :layoutThoriumDrill*retval false
   880 jump *label171 always
   881 jump *label174 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-32 instructions):
 
   115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
-    * jump *label37 always
   118 label *label36
   119 label *label37
   120 op sub *tmp67 :locateOreAway:x .coreX
 
   128 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   130 jump *label28 always
-    * jump *label41 always
   131 label *label40
   132 label *label41
-    * jump *label39 always
   133 label *label38
   134 label *label39
   135 jump *label42 lessThan :locateOreAway:coreDist 10
 
   153 jump *label50 greaterThanEq *tmp94 7
   154 set *tmp83 true
   155 jump *label46 always
-    * jump *label51 always
   156 label *label50
   157 label *label51
   158 label *label48
 
   170 printflush message1
   171 set *tmp37 true
   172 jump *label26 always
-    * jump *label53 always
   173 label *label52
   174 label *label53
-    * jump *label45 always
   175 label *label44
   176 label *label45
-    * jump *label43 always
   177 label *label42
   178 label *label43
   179 label *label28
 
   188 jump *label54 notEqual *tmp37 false
   189 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   190 jump *label17 always
-    * jump *label55 always
   191 label *label54
   192 label *label55
   193 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   194 op add .mapSpots .mapSpots 1
-    * jump *label57 always
   195 label *label56
   196 label *label57
   197 set :moveTo.3:x :findDrillLocationLocal:oreX
 
   236 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   237 jump *label67 greaterThan :findDrillLocationLocal:coreDist 10
   238 jump *label65 always
-    * jump *label68 always
   239 label *label67
   240 label *label68
   241 jump *label69 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
 
   244 set :findDrillLocationLocal:capacity :findDrillLocationLocal:score
   245 jump *label71 greaterThanEq :findDrillLocationLocal:limit 1000
   246 set .mapSpots :findDrillLocationLocal:score
-    * jump *label72 always
   247 label *label71
   248 label *label72
   249 jump *label73 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
 
   266 ucontrol unbind
   267 set :findDrillLocationLocal*retval true
   268 jump *label17 always
-    * jump *label74 always
   269 label *label73
   270 label *label74
-    * jump *label70 always
   271 label *label69
   272 label *label70
   273 jump *label76 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   274 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   275 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   276 set :findDrillLocationLocal:best :findDrillLocationLocal:score
-    * jump *label77 always
   277 label *label76
   278 label *label77
   279 jump *label78 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   280 jump *label65 always
-    * jump *label79 always
   281 label *label78
   282 label *label79
   283 set :findDrillLocationLocal:last :findDrillLocationLocal:score
 
   311 write :saveLocation.1:y bank1 .count
   312 op add .locations .locations 1
   313 label *label84
-    * jump *label83 always
   314 label *label82
   315 label *label83
   316 label *label24
 
   336 op add *tmp170 24 *tmp169
   337 op add :findPossiblePlacement*retval *tmp170 :findPossiblePlacement:x
   338 jump *label85 always
-    * jump *label93 always
   339 label *label92
   340 label *label93
   341 op sub *tmp172 3 :findPossiblePlacement:width
   342 jump *label94 lessThanEq :findPossiblePlacement:x *tmp172
   343 jump *label91 always
-    * jump *label95 always
   344 label *label94
   345 label *label95
   346 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
 
   351 op sub *tmp175 3 :findPossiblePlacement:height
   352 jump *label96 lessThanEq :findPossiblePlacement:y *tmp175
   353 jump *label88 always
-    * jump *label97 always
   354 label *label96
   355 label *label97
   356 label *label87
 
   378 jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
   379 set :tryPlaceGenerator*retval false
   380 jump *label98 always
-    * jump *label103 always
   381 label *label102
   382 label *label103
   383 op add *tmp183 :tryPlaceGenerator:centerX 0.5
 
   405 jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
   406 set :tryPlaceGenerator*retval false
   407 jump *label98 always
-    * jump *label106 always
   408 label *label105
   409 label *label106
   410 op add *tmp195 :tryPlaceGenerator:centerX 0.5
 
   431 jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
   432 set :tryPlaceGenerator*retval false
   433 jump *label98 always
-    * jump *label109 always
   434 label *label108
   435 label *label109
   436 op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   450 jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
   451 set :tryPlaceGenerator*retval false
   452 jump *label98 always
-    * jump *label112 always
   453 label *label111
   454 label *label112
   455 op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   469 jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
   470 set :tryPlaceGenerator*retval false
   471 jump *label98 always
-    * jump *label115 always
   472 label *label114
   473 label *label115
   474 op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
 
   658 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
   659 op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   660 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp296
-    * jump *label140 always
   661 label *label139
   662 label *label140
   663 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   677 op add .containerY *tmp302 :layoutThoriumDrillAtLocation:r
   678 op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
   679 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
-    * jump *label143 always
   680 label *label142
   681 label *label143
   682 set :createFixedMatrix.3:row0 0b1111
 
   710 jump *label147 equal :tryPlaceGenerator*retval false
   711 set :layoutThoriumDrillAtLocation*retval true
   712 jump *label129 always
-    * jump *label148 always
   713 label *label147
   714 label *label148
   715 set :layoutThoriumDrillAtLocation:sx 3
 
   750 jump *label158 equal *tmp328 false
   751 set *tmp323 0
   752 jump *label157 always
-    * jump *label159 always
   753 label *label158
   754 label *label159
   755 op mul *tmp330 7 :shiftMask:shiftY
 
   768 op shr :shiftMask:keep 0b1111111 *tmp340
   769 jump *label164 lessThanEq :shiftMask:shiftX 0
   770 op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
-    * jump *label165 always
   771 label *label164
   772 label *label165
   773 op shl *tmp344 :shiftMask:keep 7
 
   777 op shl *tmp346 :shiftMask:keep 21
   778 op or :shiftMask:keep :shiftMask:keep *tmp346
   779 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
-    * jump *label163 always
   780 label *label162
   781 label *label163
   782 set *tmp323 :shiftMask:mask
 
   798 jump *label167 equal :tryPlaceGenerator*retval false
   799 set :layoutThoriumDrillAtLocation*retval true
   800 jump *label129 always
-    * jump *label168 always
   801 label *label167
   802 label *label168
   803 label *label150
 
   847 jump *label173 notEqual :findDrillLocationLocal*retval false
   848 set :layoutThoriumDrill*retval false
   849 jump *label171 always
-    * jump *label174 always
   850 label *label173
   851 label *label174
   852 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
   595 set :createFixedMatrix:row4 0b0011100
   596 set :createFixedMatrix:row5 0b0000000
   597 set :createFixedMatrix:row6 0b0000000
-    * op shl *tmp255 :createFixedMatrix:row0 0
+  598 set *tmp255 :createFixedMatrix:row0
   599 op shl *tmp256 :createFixedMatrix:row1 7
   600 op or *tmp257 *tmp255 *tmp256
   601 op shl *tmp258 :createFixedMatrix:row2 14
 
   617 set :createFixedMatrix.1:row4 0b0011100
   618 set :createFixedMatrix.1:row5 0b0000000
   619 set :createFixedMatrix.1:row6 0b1000001
-    * op shl *tmp270 :createFixedMatrix.1:row0 0
+  620 set *tmp270 :createFixedMatrix.1:row0
   621 op shl *tmp271 :createFixedMatrix.1:row1 7
   622 op or *tmp272 *tmp270 *tmp271
   623 op shl *tmp273 :createFixedMatrix.1:row2 14
 
   634 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp269
   635 set :createFixedMatrix.2:row0 0b11
   636 set :createFixedMatrix.2:row1 0b11
-    * op shl *tmp285 :createFixedMatrix.2:row0 0
+  637 set *tmp285 :createFixedMatrix.2:row0
   638 op shl *tmp286 :createFixedMatrix.2:row1 7
   639 op or *tmp284 *tmp285 *tmp286
   640 label *label137
 
   681 label *label143
   682 set :createFixedMatrix.3:row0 0b1111
   683 set :createFixedMatrix.3:row1 0b1111
-    * op shl *tmp306 :createFixedMatrix.3:row0 0
+  684 set *tmp306 :createFixedMatrix.3:row0
   685 op shl *tmp307 :createFixedMatrix.3:row1 7
   686 op or *tmp305 *tmp306 *tmp307
   687 label *label144
 
   690 set :createFixedMatrix.4:row1 0b11
   691 set :createFixedMatrix.4:row2 0b11
   692 set :createFixedMatrix.4:row3 0b11
-    * op shl *tmp310 :createFixedMatrix.4:row0 0
+  693 set *tmp310 :createFixedMatrix.4:row0
   694 op shl *tmp311 :createFixedMatrix.4:row1 7
   695 op or *tmp312 *tmp310 *tmp311
   696 op shl *tmp313 :createFixedMatrix.4:row2 14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-9 instructions):
 
    22 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    23 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy
    24 set .mapSpots :findDrillLocationLocal:dx
-    * op sub *tmp22 @mapw .coreX
-    * op sub *tmp23 @maph .coreY
-    * op max *tmp24 .coreX .coreY
+   25 op sub *tmp22 @mapw :findDrillLocationLocal:x
+   26 op sub *tmp23 @maph :findDrillLocationLocal:y
+   27 op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLocal:y
    28 op max *tmp24 *tmp24 *tmp22
    29 op max *tmp24 *tmp24 *tmp23
    30 set :findDrillLocationLocal:distanceLimit *tmp24
    31 set .mapAction "Locating ore..."
    32 set .angle 0
-    * set .mapProgress .angle
-    * set :moveTo:x .coreX
-    * set :moveTo:y .coreY
-    * set *tmp25 :moveTo:x
-    * set *tmp26 :moveTo:y
-    * set :moveTo.1:x *tmp25
-    * set :moveTo.1:y *tmp26
+   33 set .mapProgress 0
+   34 set :moveTo:x :findDrillLocationLocal:x
+   35 set :moveTo:y :findDrillLocationLocal:y
+   36 set *tmp25 .coreX
+   37 set *tmp26 .coreY
+   38 set :moveTo.1:x :moveTo:x
+   39 set :moveTo.1:y :moveTo:y
    40 set :moveTo.1:radius 6
    41 label *label20
-    * ucontrol within :moveTo.1:x :moveTo.1:y :moveTo.1:radius *tmp27
+   42 ucontrol within *tmp25 *tmp26 6 *tmp27
    43 jump *label22 notEqual *tmp27 false
-    * op sub *tmp29 :moveTo.1:radius 0.5
-    * ucontrol approach :moveTo.1:x :moveTo.1:y *tmp29
+   44 op sub *tmp29 6 0.5
+   45 ucontrol approach *tmp25 *tmp26 5.5
    46 label *label21
    47 jump *label20 always
    48 label *label22
    49 label *label19
    50 label *label18
-    * op div *tmp30 :findDrillLocationLocal:distanceLimit 3.8197185279121366
+   51 op div *tmp30 *tmp24 3.8197185279121366
    52 op pow .mapTotal *tmp30 2
    53 set :findDrillLocationLocal:oreX 0
    54 set :findDrillLocationLocal:oreY 0
 
    71 op max .angle .angle @pi
    72 op mul .mapProgress .angle .angle
    73 label *label27
-    * jump *label29 greaterThanEq :locateOreAway:distance :locateOreAway:distanceLimit
+   74 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    75 op div :locateOreAway:a .angle @degToRad
    76 op sin *tmp43 :locateOreAway:a
    77 op mul *tmp44 *tmp43 :locateOreAway:distance
-    * op add *tmp45 .coreX *tmp44
+   78 op add *tmp45 :findDrillLocationLocal:x *tmp44
    79 op sub *tmp46 @mapw 5
    80 set :limit:value *tmp45
    81 set :limit:low 5
    82 set :limit:high *tmp46
-    * op max *tmp48 :limit:value :limit:low
-    * op min *tmp47 *tmp48 :limit:high
+   83 op max *tmp48 *tmp45 5
+   84 op min *tmp47 *tmp48 *tmp46
    85 label *label30
    86 set :locateOreAway:lx *tmp47
    87 op cos *tmp50 :locateOreAway:a
    88 op mul *tmp51 *tmp50 :locateOreAway:distance
-    * op add *tmp52 .coreY *tmp51
+   89 op add *tmp52 :findDrillLocationLocal:y *tmp51
    90 op sub *tmp53 @maph 5
    91 set :limit.1:value *tmp52
    92 set :limit.1:low 5
    93 set :limit.1:high *tmp53
-    * op max *tmp55 :limit.1:value :limit.1:low
-    * op min *tmp54 *tmp55 :limit.1:high
+   94 op max *tmp55 *tmp52 5
+   95 op min *tmp54 *tmp55 *tmp53
    96 label *label31
    97 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x :locateOreAway:lx
-    * set :moveTo.2:y :locateOreAway:ly
+   98 set :moveTo.2:x *tmp47
+   99 set :moveTo.2:y *tmp54
   100 set :moveTo.2:radius 5
   101 label *label33
-    * ucontrol within :moveTo.2:x :moveTo.2:y :moveTo.2:radius *tmp57
+  102 ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
   103 jump *label35 notEqual *tmp57 false
-    * op sub *tmp59 :moveTo.2:radius 0.5
-    * ucontrol approach :moveTo.2:x :moveTo.2:y *tmp59
+  104 op sub *tmp59 5 0.5
+  105 ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
   106 label *label34
   107 jump *label33 always
   108 label *label35
 
   111 op add .angle .angle *tmp60
   112 op mul .mapProgress .angle .angle
   113 op mul :locateOreAway:distance 3.8197185279121366 .angle
-    * ulocate ore core true :locateOreAway:ore :locateOreAway:x :locateOreAway:y *tmp63 0
+  114 ulocate ore core true :findDrillLocationLocal:item :locateOreAway:x :locateOreAway:y *tmp63 0
   115 jump *label36 notEqual *tmp63 false
   116 set *tmp37 false
   117 jump *label26 always
   118 label *label36
   119 label *label37
-    * op sub *tmp67 :locateOreAway:x .coreX
+  120 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
   121 op abs *tmp68 *tmp67
-    * op sub *tmp69 :locateOreAway:y .coreY
+  122 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
   123 op abs *tmp70 *tmp69
   124 op max :locateOreAway:coreDist *tmp68 *tmp70
-    * op sub *tmp72 :locateOreAway:x :locateOreAway:lx
-    * op sub *tmp73 :locateOreAway:y :locateOreAway:ly
+  125 op sub *tmp72 :locateOreAway:x *tmp47
+  126 op sub *tmp73 :locateOreAway:y *tmp54
   127 op len :locateOreAway:unitDist *tmp72 *tmp73
   128 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   129 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
 
   147 read :visited:lx bank1 *tmp87
   148 op add *tmp90 :visited:index 3
   149 read :visited:ly bank1 *tmp90
-    * op sub *tmp92 :visited:x :visited:lx
-    * op sub *tmp93 :visited:y :visited:ly
+  150 op sub *tmp92 :locateOreAway:x :visited:lx
+  151 op sub *tmp93 :locateOreAway:y :visited:ly
   152 op len *tmp94 *tmp92 *tmp93
   153 jump *label50 greaterThanEq *tmp94 7
   154 set *tmp83 true
 
   161 label *label49
   162 set *tmp83 false
   163 jump *label46 always
-    * set *tmp83 null
   164 label *label46
   165 jump *label52 notEqual *tmp83 false
-    * op div *tmp99 7.639437055824273 :locateOreAway:distance
+  166 op div *tmp99 2 .angle
   167 op add .angle .angle *tmp99
   168 op mul .mapProgress .angle .angle
   169 printflush message1
 
   180 label *label29
   181 set *tmp37 false
   182 jump *label26 always
-    * set *tmp37 null
   183 label *label26
   184 set :findDrillLocationLocal:oreX :locateOreAway:x
   185 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   192 op add .mapSpots .mapSpots 1
   193 label *label56
   194 label *label57
-    * set :moveTo.3:x :findDrillLocationLocal:oreX
-    * set :moveTo.3:y :findDrillLocationLocal:oreY
-    * set *tmp107 :moveTo.3:x
-    * set *tmp108 :moveTo.3:y
-    * set :moveTo.4:x *tmp107
-    * set :moveTo.4:y *tmp108
+  195 set :moveTo.3:x :locateOreAway:x
+  196 set :moveTo.3:y :locateOreAway:y
+  197 set *tmp107 :findDrillLocationLocal:oreX
+  198 set *tmp108 :findDrillLocationLocal:oreY
+  199 set :moveTo.4:x :moveTo.3:x
+  200 set :moveTo.4:y :moveTo.3:y
   201 set :moveTo.4:radius 6
   202 label *label60
-    * ucontrol within :moveTo.4:x :moveTo.4:y :moveTo.4:radius *tmp109
+  203 ucontrol within *tmp107 *tmp108 6 *tmp109
   204 jump *label62 notEqual *tmp109 false
-    * op sub *tmp111 :moveTo.4:radius 0.5
-    * ucontrol approach :moveTo.4:x :moveTo.4:y *tmp111
+  205 op sub *tmp111 6 0.5
+  206 ucontrol approach *tmp107 *tmp108 5.5
   207 label *label61
   208 jump *label60 always
   209 label *label62
 
   227 read :findDrillLocationLocal:score processor1 ":findBestPosition*retval"
   228 op add :findDrillLocationLocal:newX :findDrillLocationLocal:oreX :findDrillLocationLocal:diffX
   229 op add :findDrillLocationLocal:newY :findDrillLocationLocal:oreY :findDrillLocationLocal:diffY
-    * op sub *tmp116 :findDrillLocationLocal:newX .coreX
+  230 op sub *tmp116 :findDrillLocationLocal:newX :findDrillLocationLocal:x
   231 op abs *tmp117 *tmp116
-    * op sub *tmp118 :findDrillLocationLocal:newY .coreY
+  232 op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   233 op abs *tmp119 *tmp118
   234 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   235 jump *label67 greaterThan :findDrillLocationLocal:coreDist 10
 
   251 set :saveLocation:y :findDrillLocationLocal:dy
   252 op add .count .count 1
   253 set *tmp129 .count
-    * sensor *tmp131 :saveLocation:item @id
-    * write *tmp131 bank1 *tmp129
+  254 sensor *tmp131 :findDrillLocationLocal:item @id
+  255 write *tmp131 bank1 .count
   256 op add .count .count 1
-    * write :saveLocation:value bank1 .count
+  257 write :findDrillLocationLocal:score bank1 .count
   258 op add .count .count 1
-    * write :saveLocation:x bank1 .count
+  259 write :findDrillLocationLocal:dx bank1 .count
   260 op add .count .count 1
-    * write :saveLocation:y bank1 .count
+  261 write :findDrillLocationLocal:dy bank1 .count
   262 op add .locations .locations 1
   263 label *label75
   264 ucontrol unbind
 
   299 set :saveLocation.1:y :findDrillLocationLocal:bestY
   300 op add .count .count 1
   301 set *tmp153 .count
-    * sensor *tmp155 :saveLocation.1:item @id
-    * write *tmp155 bank1 *tmp153
+  302 sensor *tmp155 :findDrillLocationLocal:item @id
+  303 write *tmp155 bank1 .count
   304 op add .count .count 1
-    * write :saveLocation.1:value bank1 .count
+  305 write :findDrillLocationLocal:best bank1 .count
   306 op add .count .count 1
-    * write :saveLocation.1:x bank1 .count
+  307 write :findDrillLocationLocal:bestX bank1 .count
   308 op add .count .count 1
-    * write :saveLocation.1:y bank1 .count
+  309 write :findDrillLocationLocal:bestY bank1 .count
   310 op add .locations .locations 1
   311 label *label84
   312 label *label82
 
   357 label *label88
   358 set :findPossiblePlacement*retval -1
   359 jump *label85 always
-    * set :findPossiblePlacement*retval null
   360 label *label85
   361 return :findPossiblePlacement*retaddr
   362 end
 
   371 set :tryPlaceGenerator:c :findPossiblePlacement:x
   372 set :tryPlaceGenerator:r :findPossiblePlacement:y
   373 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label100 lessThan :tryPlaceGenerator:shift 0
-    * jump *label102 greaterThanEq :tryPlaceGenerator:shift 0
+  374 jump *label100 lessThan :findPossiblePlacement*retval 0
+  375 jump *label102 greaterThanEq :findPossiblePlacement*retval 0
   376 set :tryPlaceGenerator*retval false
   377 jump *label98 always
   378 label *label102
   379 label *label103
   380 op add *tmp183 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp183 :tryPlaceGenerator:c
+  381 op add .water2X *tmp183 :findPossiblePlacement:x
   382 op add *tmp185 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp185 :tryPlaceGenerator:r
+  383 op add .water2Y *tmp185 :findPossiblePlacement:y
   384 op add *tmp187 :tryPlaceGenerator:centerX 0.5
-    * op add .generatorX *tmp187 :tryPlaceGenerator:c
+  385 op add .generatorX *tmp183 :findPossiblePlacement:x
   386 op add *tmp189 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp189 :tryPlaceGenerator:r
-    * op shl *tmp191 :tryPlaceGenerator:generatorVertical :tryPlaceGenerator:shift
+  387 op add .generatorY *tmp189 :findPossiblePlacement:y
+  388 op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
   389 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
   390 jump *label101 always
   391 label *label100
 
   399 set :tryPlaceGenerator:c :findPossiblePlacement:x
   400 set :tryPlaceGenerator:r :findPossiblePlacement:y
   401 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label105 greaterThanEq :tryPlaceGenerator:shift 0
+  402 jump *label105 greaterThanEq :findPossiblePlacement*retval 0
   403 set :tryPlaceGenerator*retval false
   404 jump *label98 always
   405 label *label105
   406 label *label106
   407 op add *tmp195 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp195 :tryPlaceGenerator:c
+  408 op add .water2X *tmp195 :findPossiblePlacement:x
   409 op add *tmp197 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp197 :tryPlaceGenerator:r
+  410 op add .water2Y *tmp197 :findPossiblePlacement:y
   411 op add *tmp199 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp199 :tryPlaceGenerator:c
+  412 op add .generatorX *tmp199 :findPossiblePlacement:x
   413 op add *tmp201 :tryPlaceGenerator:centerY 0.5
-    * op add .generatorY *tmp201 :tryPlaceGenerator:r
-    * op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :tryPlaceGenerator:shift
+  414 op add .generatorY *tmp197 :findPossiblePlacement:y
+  415 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   416 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
   417 label *label101
   418 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
 
   425 set :tryPlaceGenerator:c :findPossiblePlacement:x
   426 set :tryPlaceGenerator:r :findPossiblePlacement:y
   427 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label108 greaterThanEq :tryPlaceGenerator:shift 0
+  428 jump *label108 greaterThanEq :findPossiblePlacement*retval 0
   429 set :tryPlaceGenerator*retval false
   430 jump *label98 always
   431 label *label108
   432 label *label109
-    * op add .nodeX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .nodeY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp209 1 :tryPlaceGenerator:shift
+  433 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  434 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  435 op shl *tmp209 1 :findPossiblePlacement*retval
   436 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp209
   437 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   438 set :findPossiblePlacement:placementMask 1
 
   444 set :tryPlaceGenerator:c :findPossiblePlacement:x
   445 set :tryPlaceGenerator:r :findPossiblePlacement:y
   446 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label111 greaterThanEq :tryPlaceGenerator:shift 0
+  447 jump *label111 greaterThanEq :findPossiblePlacement*retval 0
   448 set :tryPlaceGenerator*retval false
   449 jump *label98 always
   450 label *label111
   451 label *label112
-    * op add .panelX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .panelY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp215 1 :tryPlaceGenerator:shift
+  452 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  453 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  454 op shl *tmp215 1 :findPossiblePlacement*retval
   455 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp215
   456 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
   457 set :findPossiblePlacement:placementMask 1
 
   463 set :tryPlaceGenerator:c :findPossiblePlacement:x
   464 set :tryPlaceGenerator:r :findPossiblePlacement:y
   465 set :tryPlaceGenerator:shift :findPossiblePlacement*retval
-    * jump *label114 greaterThanEq :tryPlaceGenerator:shift 0
+  466 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   467 set :tryPlaceGenerator*retval false
   468 jump *label98 always
   469 label *label114
   470 label *label115
-    * op add .batteryX :tryPlaceGenerator:centerX :tryPlaceGenerator:c
-    * op add .batteryY :tryPlaceGenerator:centerY :tryPlaceGenerator:r
-    * op shl *tmp221 1 :tryPlaceGenerator:shift
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp221
+  471 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+  472 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+  473 op shl *tmp221 1 :findPossiblePlacement*retval
   474 set :tryPlaceGenerator*retval true
   475 jump *label98 always
-    * set :tryPlaceGenerator*retval null
   476 label *label98
   477 return :tryPlaceGenerator*retaddr
   478 end
 
   491 label *label119
   492 set :createBlockMaskRow*retval :createBlockMaskRow:result
   493 jump *label116 always
-    * set :createBlockMaskRow*retval null
   494 label *label116
   495 return :createBlockMaskRow*retaddr
   496 end
 
   503 set :createAdjacentMask:x :createCombinedMask:x
   504 set :createAdjacentMask:y :createCombinedMask:y
   505 set :createAdjacentMask:result 0
-    * op add *tmp232 :createAdjacentMask:y 4
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  506 op add *tmp232 :createCombinedMask:y 4
+  507 set :createBlockMaskRow:x :createCombinedMask:x
   508 set :createBlockMaskRow:y *tmp232
   509 setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
   510 call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
 
   531 op or *tmp239 :createAdjacentMask:row2 *tmp238
   532 op shr *tmp240 :createAdjacentMask:row1 1
   533 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createAdjacentMask:row0
+  534 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
   535 op shl *tmp243 :createAdjacentMask:result 7
   536 op and *tmp244 :createAdjacentMask:mask 0xFE
   537 op or :createAdjacentMask:result *tmp243 *tmp244
   538 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createAdjacentMask:row0
+  539 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   540 label *label125
   541 op sub :createAdjacentMask:r :createAdjacentMask:r 1
   542 jump *label124 always
 
   549 read *tmp247 processor1 ":createTerrainMask*finished"
   550 jump *label128 equal *tmp247 false
   551 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
-    * op or :createCombinedMask*retval :createCombinedMask:adjacentMask :createCombinedMask:terrainMask
+  552 op or :createCombinedMask*retval *tmp231 :createCombinedMask:terrainMask
   553 jump *label120 always
-    * set :createCombinedMask*retval null
   554 label *label120
   555 return :createCombinedMask*retaddr
   556 end
 
   567 set :moveTo.5:y .drillY
   568 set :moveTo.5:radius 1
   569 label *label131
-    * ucontrol within :moveTo.5:x :moveTo.5:y :moveTo.5:radius *tmp250
+  570 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
   571 jump *label133 notEqual *tmp250 false
-    * op sub *tmp252 :moveTo.5:radius 0.5
-    * ucontrol approach :moveTo.5:x :moveTo.5:y *tmp252
+  572 op sub *tmp252 1 0.5
+  573 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   574 label *label132
   575 jump *label131 always
   576 label *label133
 
   588 set :createFixedMatrix:row4 0b0011100
   589 set :createFixedMatrix:row5 0b0000000
   590 set :createFixedMatrix:row6 0b0000000
-    * set *tmp255 :createFixedMatrix:row0
-    * op shl *tmp256 :createFixedMatrix:row1 7
-    * op or *tmp257 *tmp255 *tmp256
-    * op shl *tmp258 :createFixedMatrix:row2 14
-    * op or *tmp259 *tmp257 *tmp258
-    * op shl *tmp260 :createFixedMatrix:row3 21
-    * op or *tmp261 *tmp259 *tmp260
-    * op shl *tmp262 :createFixedMatrix:row4 28
-    * op or *tmp263 *tmp261 *tmp262
-    * op shl *tmp264 :createFixedMatrix:row5 35
-    * op or *tmp265 *tmp263 *tmp264
-    * op shl *tmp266 :createFixedMatrix:row6 42
-    * op or *tmp254 *tmp265 *tmp266
+  591 set *tmp255 0b0000000
+  592 op shl *tmp256 0b0000000 7
+  593 op or *tmp257 :createFixedMatrix:row0 0
+  594 op shl *tmp258 0b0011100 14
+  595 op or *tmp259 *tmp257 458752
+  596 op shl *tmp260 0b0011100 21
+  597 op or *tmp261 *tmp259 58720256
+  598 op shl *tmp262 0b0011100 28
+  599 op or *tmp263 *tmp261 7516192768
+  600 op shl *tmp264 0b0000000 35
+  601 op or *tmp265 *tmp263 0
+  602 op shl *tmp266 0b0000000 42
+  603 op or *tmp254 *tmp265 0
   604 label *label135
-    * op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:plainTerrainMask *tmp254
+  605 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp254
   606 set :createFixedMatrix.1:row0 0b1000001
   607 set :createFixedMatrix.1:row1 0b0000000
   608 set :createFixedMatrix.1:row2 0b0011100
 
   610 set :createFixedMatrix.1:row4 0b0011100
   611 set :createFixedMatrix.1:row5 0b0000000
   612 set :createFixedMatrix.1:row6 0b1000001
-    * set *tmp270 :createFixedMatrix.1:row0
-    * op shl *tmp271 :createFixedMatrix.1:row1 7
-    * op or *tmp272 *tmp270 *tmp271
-    * op shl *tmp273 :createFixedMatrix.1:row2 14
-    * op or *tmp274 *tmp272 *tmp273
-    * op shl *tmp275 :createFixedMatrix.1:row3 21
-    * op or *tmp276 *tmp274 *tmp275
-    * op shl *tmp277 :createFixedMatrix.1:row4 28
-    * op or *tmp278 *tmp276 *tmp277
-    * op shl *tmp279 :createFixedMatrix.1:row5 35
-    * op or *tmp280 *tmp278 *tmp279
-    * op shl *tmp281 :createFixedMatrix.1:row6 42
-    * op or *tmp269 *tmp280 *tmp281
+  613 set *tmp270 0b1000001
+  614 op shl *tmp271 0b0000000 7
+  615 op or *tmp272 :createFixedMatrix.1:row0 0
+  616 op shl *tmp273 0b0011100 14
+  617 op or *tmp274 *tmp272 458752
+  618 op shl *tmp275 0b0011100 21
+  619 op or *tmp276 *tmp274 58720256
+  620 op shl *tmp277 0b0011100 28
+  621 op or *tmp278 *tmp276 7516192768
+  622 op shl *tmp279 0b0000000 35
+  623 op or *tmp280 *tmp278 0
+  624 op shl *tmp281 0b1000001 42
+  625 op or *tmp269 *tmp280 285873023221760
   626 label *label136
   627 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp269
   628 set :createFixedMatrix.2:row0 0b11
   629 set :createFixedMatrix.2:row1 0b11
-    * set *tmp285 :createFixedMatrix.2:row0
-    * op shl *tmp286 :createFixedMatrix.2:row1 7
-    * op or *tmp284 *tmp285 *tmp286
+  630 set *tmp285 0b11
+  631 op shl *tmp286 0b11 7
+  632 op or *tmp284 :createFixedMatrix.2:row0 384
   633 label *label137
   634 set :layoutThoriumDrillAtLocation:mask2x2 *tmp284
   635 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
+  636 set :findPossiblePlacement:placementMask *tmp284
   637 set :findPossiblePlacement:width 2
   638 set :findPossiblePlacement:height 2
   639 setaddr :findPossiblePlacement*retaddr *label138 (h:*label138)
 
   642 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   643 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   644 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label139 lessThan :layoutThoriumDrillAtLocation:shift 0
+  645 jump *label139 lessThan :findPossiblePlacement*retval 0
   646 op add *tmp291 .drillX 0.5
-    * op add .water1X *tmp291 :layoutThoriumDrillAtLocation:c
+  647 op add .water1X *tmp291 :findPossiblePlacement:x
   648 op add *tmp293 .drillY 0.5
-    * op add .water1Y *tmp293 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp295 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  649 op add .water1Y *tmp293 :findPossiblePlacement:y
+  650 op shl *tmp295 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   651 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
-    * op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp296
+  652 op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
+  653 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp295
   654 label *label139
   655 label *label140
   656 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   663 set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
   664 set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
   665 set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
-    * jump *label142 lessThan :layoutThoriumDrillAtLocation:shift 0
+  666 jump *label142 lessThan :findPossiblePlacement*retval 0
   667 op add *tmp300 .drillX 0.5
-    * op add .containerX *tmp300 :layoutThoriumDrillAtLocation:c
+  668 op add .containerX *tmp300 :findPossiblePlacement:x
   669 op add *tmp302 .drillY 0.5
-    * op add .containerY *tmp302 :layoutThoriumDrillAtLocation:r
-    * op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :layoutThoriumDrillAtLocation:shift
+  670 op add .containerY *tmp302 :findPossiblePlacement:y
+  671 op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   672 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
   673 label *label142
   674 label *label143
   675 set :createFixedMatrix.3:row0 0b1111
   676 set :createFixedMatrix.3:row1 0b1111
-    * set *tmp306 :createFixedMatrix.3:row0
-    * op shl *tmp307 :createFixedMatrix.3:row1 7
-    * op or *tmp305 *tmp306 *tmp307
+  677 set *tmp306 0b1111
+  678 op shl *tmp307 0b1111 7
+  679 op or *tmp305 :createFixedMatrix.3:row0 1920
   680 label *label144
   681 set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp305
   682 set :createFixedMatrix.4:row0 0b11
   683 set :createFixedMatrix.4:row1 0b11
   684 set :createFixedMatrix.4:row2 0b11
   685 set :createFixedMatrix.4:row3 0b11
-    * set *tmp310 :createFixedMatrix.4:row0
-    * op shl *tmp311 :createFixedMatrix.4:row1 7
-    * op or *tmp312 *tmp310 *tmp311
-    * op shl *tmp313 :createFixedMatrix.4:row2 14
-    * op or *tmp314 *tmp312 *tmp313
-    * op shl *tmp315 :createFixedMatrix.4:row3 21
-    * op or *tmp309 *tmp314 *tmp315
+  686 set *tmp310 0b11
+  687 op shl *tmp311 0b11 7
+  688 op or *tmp312 :createFixedMatrix.4:row0 384
+  689 op shl *tmp313 0b11 14
+  690 op or *tmp314 *tmp312 49152
+  691 op shl *tmp315 0b11 21
+  692 op or *tmp309 *tmp314 6291456
   693 label *label145
   694 set :layoutThoriumDrillAtLocation:generatorVertical *tmp309
   695 set :tryPlaceGenerator:centerX .drillX
   696 set :tryPlaceGenerator:centerY .drillY
   697 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
-    * set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
+  698 set :tryPlaceGenerator:generatorHorizontal *tmp305
+  699 set :tryPlaceGenerator:generatorVertical *tmp309
   700 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   701 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   702 label *label146
 
   735 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
   736 set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
   737 set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
-    * op abs *tmp324 :shiftMask:shiftX
+  738 op abs *tmp324 :layoutThoriumDrillAtLocation:sx
   739 op greaterThan *tmp325 *tmp324 6
-    * op abs *tmp326 :shiftMask:shiftY
+  740 op abs *tmp326 :layoutThoriumDrillAtLocation:sy
   741 op greaterThan *tmp327 *tmp326 6
   742 op or *tmp328 *tmp325 *tmp327
   743 jump *label158 equal *tmp328 false
 
   745 jump *label157 always
   746 label *label158
   747 label *label159
-    * op mul *tmp330 7 :shiftMask:shiftY
-    * op add :shiftMask:shift :shiftMask:shiftX *tmp330
+  748 op mul *tmp330 7 :layoutThoriumDrillAtLocation:sy
+  749 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp330
   750 jump *label160 lessThanEq :shiftMask:shift 0
   751 op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift
-    * op and *tmp335 :shiftMask:mask :shiftMask:clearMask
+  752 op and *tmp335 :layoutThoriumDrillAtLocation:terrainMask :shiftMask:clearMask
   753 op shl :shiftMask:mask *tmp335 :shiftMask:shift
   754 jump *label161 always
   755 label *label160
   756 op sub *tmp337 0 :shiftMask:shift
-    * op shr :shiftMask:mask :shiftMask:mask *tmp337
+  757 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp337
   758 label *label161
-    * jump *label162 equal :shiftMask:shiftX 0
-    * op abs *tmp340 :shiftMask:shiftX
-    * op shr :shiftMask:keep 0b1111111 *tmp340
-    * jump *label164 lessThanEq :shiftMask:shiftX 0
-    * op shl :shiftMask:keep :shiftMask:keep :shiftMask:shiftX
+  759 jump *label162 equal :layoutThoriumDrillAtLocation:sx 0
+  760 op abs *tmp340 :layoutThoriumDrillAtLocation:sx
+  761 op shr :shiftMask:keep 0b1111111 *tmp324
+  762 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
+  763 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   764 label *label164
   765 label *label165
   766 op shl *tmp344 :shiftMask:keep 7
 
   774 label *label163
   775 set *tmp323 :shiftMask:mask
   776 jump *label157 always
-    * set *tmp323 null
   777 label *label157
   778 set :layoutThoriumDrillAtLocation:shiftedMask *tmp323
-    * op or :layoutThoriumDrillAtLocation:combinedMask :layoutThoriumDrillAtLocation:newTerrainMask :layoutThoriumDrillAtLocation:shiftedMask
+  779 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp323
   780 op sub *tmp348 .drillX :layoutThoriumDrillAtLocation:sx
   781 op sub *tmp349 .drillY :layoutThoriumDrillAtLocation:sy
   782 set :tryPlaceGenerator:centerX *tmp348
 
   798 label *label151
   799 set :layoutThoriumDrillAtLocation*retval true
   800 jump *label129 always
-    * set :layoutThoriumDrillAtLocation*retval null
   801 label *label129
   802 return :layoutThoriumDrillAtLocation*retaddr
   803 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-102 instructions):
 
    33 set .mapProgress 0
    34 set :moveTo:x :findDrillLocationLocal:x
    35 set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 .coreX
-    * set *tmp26 .coreY
-    * set :moveTo.1:x :moveTo:x
-    * set :moveTo.1:y :moveTo:y
-    * set :moveTo.1:radius 6
+   36 set *tmp25 :findDrillLocationLocal:x
+   37 set *tmp26 :findDrillLocationLocal:y
+   38 set :moveTo.1:x :findDrillLocationLocal:x
+   39 set :moveTo.1:y :findDrillLocationLocal:y
    40 label *label20
-    * ucontrol within *tmp25 *tmp26 6 *tmp27
+   41 ucontrol within .coreX .coreY 6 *tmp27
    42 jump *label22 notEqual *tmp27 false
-    * op sub *tmp29 6 0.5
-    * ucontrol approach *tmp25 *tmp26 5.5
+   43 ucontrol approach .coreX .coreY 5.5
    44 label *label21
    45 jump *label20 always
    46 label *label22
 
    59 op min :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:distanceLimit :findDrillLocationLocal:maxDistance
    60 op div *tmp35 :findDrillLocationLocal:distanceLimit 3.8197185279121366
    61 op pow .mapTotal *tmp35 2
-    * set :locateOreAway:ore :findDrillLocationLocal:item
    62 set :locateOreAway:x :findDrillLocationLocal:oreX
    63 set :locateOreAway:y :findDrillLocationLocal:oreY
-    * set :locateOreAway:distanceLimit :findDrillLocationLocal:distanceLimit
    64 op mul :locateOreAway:distance 3.8197185279121366 .angle
    65 set :locateOreAway:lastX -1
    66 set :locateOreAway:lastY -1
 
    73 op mul *tmp44 *tmp43 :locateOreAway:distance
    74 op add *tmp45 :findDrillLocationLocal:x *tmp44
    75 op sub *tmp46 @mapw 5
-    * set :limit:value *tmp45
-    * set :limit:low 5
-    * set :limit:high *tmp46
    76 op max *tmp48 *tmp45 5
    77 op min *tmp47 *tmp48 *tmp46
    78 label *label30
 
    81 op mul *tmp51 *tmp50 :locateOreAway:distance
    82 op add *tmp52 :findDrillLocationLocal:y *tmp51
    83 op sub *tmp53 @maph 5
-    * set :limit.1:value *tmp52
-    * set :limit.1:low 5
-    * set :limit.1:high *tmp53
    84 op max *tmp55 *tmp52 5
    85 op min *tmp54 *tmp55 *tmp53
    86 label *label31
    87 set :locateOreAway:ly *tmp54
-    * set :moveTo.2:x *tmp47
-    * set :moveTo.2:y *tmp54
-    * set :moveTo.2:radius 5
    88 label *label33
-    * ucontrol within :locateOreAway:lx :locateOreAway:ly 5 *tmp57
+   89 ucontrol within *tmp47 *tmp54 5 *tmp57
    90 jump *label35 notEqual *tmp57 false
-    * op sub *tmp59 5 0.5
-    * ucontrol approach :locateOreAway:lx :locateOreAway:ly 4.5
+   91 ucontrol approach *tmp47 *tmp54 4.5
    92 label *label34
    93 jump *label33 always
    94 label *label35
 
   122 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   123 set :locateOreAway:lastX :locateOreAway:x
   124 set :locateOreAway:lastY :locateOreAway:y
-    * set :visited:x :locateOreAway:x
-    * set :visited:y :locateOreAway:y
   125 set *tmp84 .locations
   126 set :visited:i .locationsStart
   127 label *label47
 
   178 label *label57
   179 set :moveTo.3:x :locateOreAway:x
   180 set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :findDrillLocationLocal:oreX
-    * set *tmp108 :findDrillLocationLocal:oreY
-    * set :moveTo.4:x :moveTo.3:x
-    * set :moveTo.4:y :moveTo.3:y
-    * set :moveTo.4:radius 6
+  181 set *tmp107 :locateOreAway:x
+  182 set *tmp108 :locateOreAway:y
+  183 set :moveTo.4:x :locateOreAway:x
+  184 set :moveTo.4:y :locateOreAway:y
   185 label *label60
-    * ucontrol within *tmp107 *tmp108 6 *tmp109
+  186 ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
   187 jump *label62 notEqual *tmp109 false
-    * op sub *tmp111 6 0.5
-    * ucontrol approach *tmp107 *tmp108 5.5
+  188 ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
   189 label *label61
   190 jump *label60 always
   191 label *label62
 
   227 label *label71
   228 label *label72
   229 jump *label73 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
-    * set :saveLocation:item :findDrillLocationLocal:item
-    * set :saveLocation:value :findDrillLocationLocal:score
-    * set :saveLocation:x :findDrillLocationLocal:dx
-    * set :saveLocation:y :findDrillLocationLocal:dy
   230 op add .count .count 1
-    * set *tmp129 .count
   231 sensor *tmp131 :findDrillLocationLocal:item @id
   232 write *tmp131 bank1 .count
   233 op add .count .count 1
 
   270 jump *label63 always
   271 label *label65
   272 jump *label82 lessThan :findDrillLocationLocal:best 0
-    * set :saveLocation.1:item :findDrillLocationLocal:item
-    * set :saveLocation.1:value :findDrillLocationLocal:best
-    * set :saveLocation.1:x :findDrillLocationLocal:bestX
-    * set :saveLocation.1:y :findDrillLocationLocal:bestY
   273 op add .count .count 1
-    * set *tmp153 .count
   274 sensor *tmp155 :findDrillLocationLocal:item @id
   275 write *tmp155 bank1 .count
   276 op add .count .count 1
 
   340 setaddr :findPossiblePlacement*retaddr *label99 (h:*label99)
   341 call *label9 *invalid :findPossiblePlacement*retval (m:*label99) (h:*label99)
   342 label *label99
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   343 jump *label100 lessThan :findPossiblePlacement*retval 0
   344 jump *label102 greaterThanEq :findPossiblePlacement*retval 0
   345 set :tryPlaceGenerator*retval false
 
   350 op add .water2X *tmp183 :findPossiblePlacement:x
   351 op add *tmp185 :tryPlaceGenerator:centerY 0.5
   352 op add .water2Y *tmp185 :findPossiblePlacement:y
-    * op add *tmp187 :tryPlaceGenerator:centerX 0.5
   353 op add .generatorX *tmp183 :findPossiblePlacement:x
   354 op add *tmp189 :tryPlaceGenerator:centerY 2.5
   355 op add .generatorY *tmp189 :findPossiblePlacement:y
 
   364 setaddr :findPossiblePlacement*retaddr *label104 (h:*label104)
   365 call *label9 *invalid :findPossiblePlacement*retval (m:*label104) (h:*label104)
   366 label *label104
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   367 jump *label105 greaterThanEq :findPossiblePlacement*retval 0
   368 set :tryPlaceGenerator*retval false
   369 jump *label98 always
 
   375 op add .water2Y *tmp197 :findPossiblePlacement:y
   376 op add *tmp199 :tryPlaceGenerator:centerX 2.5
   377 op add .generatorX *tmp199 :findPossiblePlacement:x
-    * op add *tmp201 :tryPlaceGenerator:centerY 0.5
   378 op add .generatorY *tmp197 :findPossiblePlacement:y
   379 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
   380 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
 
   386 setaddr :findPossiblePlacement*retaddr *label107 (h:*label107)
   387 call *label9 *invalid :findPossiblePlacement*retval (m:*label107) (h:*label107)
   388 label *label107
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   389 jump *label108 greaterThanEq :findPossiblePlacement*retval 0
   390 set :tryPlaceGenerator*retval false
   391 jump *label98 always
 
   402 setaddr :findPossiblePlacement*retaddr *label110 (h:*label110)
   403 call *label9 *invalid :findPossiblePlacement*retval (m:*label110) (h:*label110)
   404 label *label110
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   405 jump *label111 greaterThanEq :findPossiblePlacement*retval 0
   406 set :tryPlaceGenerator*retval false
   407 jump *label98 always
 
   418 setaddr :findPossiblePlacement*retaddr *label113 (h:*label113)
   419 call *label9 *invalid :findPossiblePlacement*retval (m:*label113) (h:*label113)
   420 label *label113
-    * set :tryPlaceGenerator:c :findPossiblePlacement:x
-    * set :tryPlaceGenerator:r :findPossiblePlacement:y
-    * set :tryPlaceGenerator:shift :findPossiblePlacement*retval
   421 jump *label114 greaterThanEq :findPossiblePlacement*retval 0
   422 set :tryPlaceGenerator*retval false
   423 jump *label98 always
 
   425 label *label115
   426 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   427 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp221 1 :findPossiblePlacement*retval
   428 set :tryPlaceGenerator*retval true
   429 jump *label98 always
   430 label *label98
 
   480 setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
   481 call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
   482 label *label127
-    * set :createAdjacentMask:row0 :createBlockMaskRow*retval
   483 op shl *tmp238 :createAdjacentMask:row1 1
   484 op or *tmp239 :createAdjacentMask:row2 *tmp238
   485 op shr *tmp240 :createAdjacentMask:row1 1
 
   496 label *label126
   497 op shr *tmp231 :createAdjacentMask:result 1
   498 label *label121
-    * set :createCombinedMask:adjacentMask *tmp231
   499 label *label128
   500 wait 1e-15
   501 read *tmp247 processor1 ":createTerrainMask*finished"
 
   517 set .water1X -1
   518 set :moveTo.5:x .drillX
   519 set :moveTo.5:y .drillY
-    * set :moveTo.5:radius 1
   520 label *label131
   521 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
   522 jump *label133 notEqual *tmp250 false
-    * op sub *tmp252 1 0.5
   523 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   524 label *label132
   525 jump *label131 always
 
   530 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   531 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   532 label *label134
-    * set :layoutThoriumDrillAtLocation:plainTerrainMask :createCombinedMask*retval
   533 set :createFixedMatrix:row0 0b0000000
-    * set :createFixedMatrix:row1 0b0000000
-    * set :createFixedMatrix:row2 0b0011100
-    * set :createFixedMatrix:row3 0b0011100
-    * set :createFixedMatrix:row4 0b0011100
-    * set :createFixedMatrix:row5 0b0000000
-    * set :createFixedMatrix:row6 0b0000000
-    * set *tmp255 0b0000000
-    * op shl *tmp256 0b0000000 7
-    * op or *tmp257 :createFixedMatrix:row0 0
-    * op shl *tmp258 0b0011100 14
-    * op or *tmp259 *tmp257 458752
-    * op shl *tmp260 0b0011100 21
-    * op or *tmp261 *tmp259 58720256
-    * op shl *tmp262 0b0011100 28
-    * op or *tmp263 *tmp261 7516192768
-    * op shl *tmp264 0b0000000 35
-    * op or *tmp265 *tmp263 0
-    * op shl *tmp266 0b0000000 42
-    * op or *tmp254 *tmp265 0
+  534 op or *tmp257 0b0000000 0
+  535 op or *tmp259 0 458752
+  536 op or *tmp261 458752 58720256
+  537 op or *tmp263 59179008 7516192768
+  538 op or *tmp265 7575371776 0
+  539 op or *tmp254 7575371776 0
   540 label *label135
-    * op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval *tmp254
+  541 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
   542 set :createFixedMatrix.1:row0 0b1000001
-    * set :createFixedMatrix.1:row1 0b0000000
-    * set :createFixedMatrix.1:row2 0b0011100
-    * set :createFixedMatrix.1:row3 0b0011100
-    * set :createFixedMatrix.1:row4 0b0011100
-    * set :createFixedMatrix.1:row5 0b0000000
-    * set :createFixedMatrix.1:row6 0b1000001
-    * set *tmp270 0b1000001
-    * op shl *tmp271 0b0000000 7
-    * op or *tmp272 :createFixedMatrix.1:row0 0
-    * op shl *tmp273 0b0011100 14
-    * op or *tmp274 *tmp272 458752
-    * op shl *tmp275 0b0011100 21
-    * op or *tmp276 *tmp274 58720256
-    * op shl *tmp277 0b0011100 28
-    * op or *tmp278 *tmp276 7516192768
-    * op shl *tmp279 0b0000000 35
-    * op or *tmp280 *tmp278 0
-    * op shl *tmp281 0b1000001 42
-    * op or *tmp269 *tmp280 285873023221760
+  543 op or *tmp272 0b1000001 0
+  544 op or *tmp274 65 458752
+  545 op or *tmp276 458817 58720256
+  546 op or *tmp278 59179073 7516192768
+  547 op or *tmp280 7575371841 0
+  548 op or *tmp269 7575371841 285873023221760
   549 label *label136
-    * op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask *tmp269
+  550 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
   551 set :createFixedMatrix.2:row0 0b11
-    * set :createFixedMatrix.2:row1 0b11
-    * set *tmp285 0b11
-    * op shl *tmp286 0b11 7
-    * op or *tmp284 :createFixedMatrix.2:row0 384
+  552 op or *tmp284 0b11 384
   553 label *label137
-    * set :layoutThoriumDrillAtLocation:mask2x2 *tmp284
+  554 set :layoutThoriumDrillAtLocation:mask2x2 387
   555 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
-    * set :findPossiblePlacement:placementMask *tmp284
+  556 set :findPossiblePlacement:placementMask 387
   557 set :findPossiblePlacement:width 2
   558 set :findPossiblePlacement:height 2
   559 setaddr :findPossiblePlacement*retaddr *label138 (h:*label138)
   560 call *label9 *invalid :findPossiblePlacement*retval (m:*label138) (h:*label138)
   561 label *label138
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   562 jump *label139 lessThan :findPossiblePlacement*retval 0
   563 op add *tmp291 .drillX 0.5
   564 op add .water1X *tmp291 :findPossiblePlacement:x
 
   566 op add .water1Y *tmp293 :findPossiblePlacement:y
   567 op shl *tmp295 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   568 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
-    * op shl *tmp296 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   569 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp295
   570 label *label139
   571 label *label140
 
   576 setaddr :findPossiblePlacement*retaddr *label141 (h:*label141)
   577 call *label9 *invalid :findPossiblePlacement*retval (m:*label141) (h:*label141)
   578 label *label141
-    * set :layoutThoriumDrillAtLocation:c :findPossiblePlacement:x
-    * set :layoutThoriumDrillAtLocation:r :findPossiblePlacement:y
-    * set :layoutThoriumDrillAtLocation:shift :findPossiblePlacement*retval
   579 jump *label142 lessThan :findPossiblePlacement*retval 0
   580 op add *tmp300 .drillX 0.5
   581 op add .containerX *tmp300 :findPossiblePlacement:x
 
   586 label *label142
   587 label *label143
   588 set :createFixedMatrix.3:row0 0b1111
-    * set :createFixedMatrix.3:row1 0b1111
-    * set *tmp306 0b1111
-    * op shl *tmp307 0b1111 7
-    * op or *tmp305 :createFixedMatrix.3:row0 1920
+  589 op or *tmp305 0b1111 1920
   590 label *label144
-    * set :layoutThoriumDrillAtLocation:generatorHorizontal *tmp305
+  591 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
   592 set :createFixedMatrix.4:row0 0b11
-    * set :createFixedMatrix.4:row1 0b11
-    * set :createFixedMatrix.4:row2 0b11
-    * set :createFixedMatrix.4:row3 0b11
-    * set *tmp310 0b11
-    * op shl *tmp311 0b11 7
-    * op or *tmp312 :createFixedMatrix.4:row0 384
-    * op shl *tmp313 0b11 14
-    * op or *tmp314 *tmp312 49152
-    * op shl *tmp315 0b11 21
-    * op or *tmp309 *tmp314 6291456
+  593 op or *tmp312 0b11 384
+  594 op or *tmp314 387 49152
+  595 op or *tmp309 49539 6291456
   596 label *label145
-    * set :layoutThoriumDrillAtLocation:generatorVertical *tmp309
+  597 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   598 set :tryPlaceGenerator:centerX .drillX
   599 set :tryPlaceGenerator:centerY .drillY
   600 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
-    * set :tryPlaceGenerator:generatorHorizontal *tmp305
-    * set :tryPlaceGenerator:generatorVertical *tmp309
+  601 set :tryPlaceGenerator:generatorHorizontal 1935
+  602 set :tryPlaceGenerator:generatorVertical 6340995
   603 setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
   604 call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
   605 label *label146
 
   634 setaddr :createCombinedMask*retaddr *label156 (h:*label156)
   635 call *label12 *invalid :createCombinedMask*retval (m:*label156) (h:*label156)
   636 label *label156
-    * set :layoutThoriumDrillAtLocation:newTerrainMask :createCombinedMask*retval
   637 set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask
-    * set :shiftMask:shiftX :layoutThoriumDrillAtLocation:sx
-    * set :shiftMask:shiftY :layoutThoriumDrillAtLocation:sy
   638 op abs *tmp324 :layoutThoriumDrillAtLocation:sx
   639 op greaterThan *tmp325 *tmp324 6
   640 op abs *tmp326 :layoutThoriumDrillAtLocation:sy
 
   657 op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMask *tmp337
   658 label *label161
   659 jump *label162 equal :layoutThoriumDrillAtLocation:sx 0
-    * op abs *tmp340 :layoutThoriumDrillAtLocation:sx
   660 op shr :shiftMask:keep 0b1111111 *tmp324
   661 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
   662 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
 
   674 set *tmp323 :shiftMask:mask
   675 jump *label157 always
   676 label *label157
-    * set :layoutThoriumDrillAtLocation:shiftedMask *tmp323
   677 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp323
   678 op sub *tmp348 .drillX :layoutThoriumDrillAtLocation:sx
   679 op sub *tmp349 .drillY :layoutThoriumDrillAtLocation:sy

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-36 instructions):
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * set :moveTo:x :findDrillLocationLocal:x
-    * set :moveTo:y :findDrillLocationLocal:y
-    * set *tmp25 :findDrillLocationLocal:x
-    * set *tmp26 :findDrillLocationLocal:y
-    * set :moveTo.1:x :findDrillLocationLocal:x
-    * set :moveTo.1:y :findDrillLocationLocal:y
    34 label *label20
-    * ucontrol within .coreX .coreY 6 *tmp27
+   35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label22 notEqual *tmp27 false
-    * ucontrol approach .coreX .coreY 5.5
+   37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    38 label *label21
    39 jump *label20 always
    40 label *label22
 
    70 op max *tmp48 *tmp45 5
    71 op min *tmp47 *tmp48 *tmp46
    72 label *label30
-    * set :locateOreAway:lx *tmp47
    73 op cos *tmp50 :locateOreAway:a
    74 op mul *tmp51 *tmp50 :locateOreAway:distance
    75 op add *tmp52 :findDrillLocationLocal:y *tmp51
 
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label31
-    * set :locateOreAway:ly *tmp54
    80 label *label33
    81 ucontrol within *tmp47 *tmp54 5 *tmp57
    82 jump *label35 notEqual *tmp57 false
 
   168 op add .mapSpots .mapSpots 1
   169 label *label56
   170 label *label57
-    * set :moveTo.3:x :locateOreAway:x
-    * set :moveTo.3:y :locateOreAway:y
-    * set *tmp107 :locateOreAway:x
-    * set *tmp108 :locateOreAway:y
-    * set :moveTo.4:x :locateOreAway:x
-    * set :moveTo.4:y :locateOreAway:y
   171 label *label60
-    * ucontrol within :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 6 *tmp109
+  172 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   173 jump *label62 notEqual *tmp109 false
-    * ucontrol approach :findDrillLocationLocal:oreX :findDrillLocationLocal:oreY 5.5
+  174 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   175 label *label61
   176 jump *label60 always
   177 label *label62
 
   516 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   517 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   518 label *label134
-    * set :createFixedMatrix:row0 0b0000000
-    * op or *tmp257 0b0000000 0
-    * op or *tmp259 0 458752
-    * op or *tmp261 458752 58720256
-    * op or *tmp263 59179008 7516192768
-    * op or *tmp265 7575371776 0
-    * op or *tmp254 7575371776 0
   519 label *label135
   520 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * set :createFixedMatrix.1:row0 0b1000001
-    * op or *tmp272 0b1000001 0
-    * op or *tmp274 65 458752
-    * op or *tmp276 458817 58720256
-    * op or *tmp278 59179073 7516192768
-    * op or *tmp280 7575371841 0
-    * op or *tmp269 7575371841 285873023221760
   521 label *label136
   522 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * set :createFixedMatrix.2:row0 0b11
-    * op or *tmp284 0b11 384
   523 label *label137
   524 set :layoutThoriumDrillAtLocation:mask2x2 387
   525 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
 
   555 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
   556 label *label142
   557 label *label143
-    * set :createFixedMatrix.3:row0 0b1111
-    * op or *tmp305 0b1111 1920
   558 label *label144
   559 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * set :createFixedMatrix.4:row0 0b11
-    * op or *tmp312 0b11 384
-    * op or *tmp314 387 49152
-    * op or *tmp309 49539 6291456
   560 label *label145
   561 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   562 set :tryPlaceGenerator:centerX .drillX

Modifications by Iterated phase, Loop Hoisting, pass 1, iteration 1:
 
    60 set :locateOreAway:lastY -1
    61 op max .angle .angle @pi
    62 op mul .mapProgress .angle .angle
+   63 op sub *tmp46 @mapw 5
+   64 op sub *tmp53 @maph 5
    65 label *label27
    66 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    67 op div :locateOreAway:a .angle @degToRad
    68 op sin *tmp43 :locateOreAway:a
    69 op mul *tmp44 *tmp43 :locateOreAway:distance
    70 op add *tmp45 :findDrillLocationLocal:x *tmp44
-    * op sub *tmp46 @mapw 5
    71 op max *tmp48 *tmp45 5
    72 op min *tmp47 *tmp48 *tmp46
    73 label *label30
    74 op cos *tmp50 :locateOreAway:a
    75 op mul *tmp51 *tmp50 :locateOreAway:distance
    76 op add *tmp52 :findDrillLocationLocal:y *tmp51
-    * op sub *tmp53 @maph 5
    77 op max *tmp55 *tmp52 5
    78 op min *tmp54 *tmp55 *tmp53
    79 label *label31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
    64 op sub *tmp53 @maph 5
    65 label *label27
    66 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
+   67 label *label177
    68 op div :locateOreAway:a .angle @degToRad
    69 op sin *tmp43 :locateOreAway:a
    70 op mul *tmp44 *tmp43 :locateOreAway:distance
 
   119 set :visited:i .locationsStart
   120 label *label47
   121 jump *label49 greaterThanEq :visited:i *tmp84
+  122 label *label178
   123 op mul :visited:index 4 :visited:i
   124 op add *tmp87 :visited:index 2
   125 read :visited:lx bank1 *tmp87
 
   135 label *label51
   136 label *label48
   137 op add :visited:i :visited:i 1
-    * jump *label47 always
+  138 jump *label178 lessThan :visited:i *tmp84
   139 label *label49
   140 set *tmp83 false
   141 jump *label46 always
 
   154 label *label42
   155 label *label43
   156 label *label28
-    * jump *label27 always
+  157 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   158 label *label29
   159 set *tmp37 false
   160 jump *label26 always
 
   282 set :findPossiblePlacement:y -3
   283 label *label86
   284 jump *label88 greaterThan :findPossiblePlacement:y 3
+  285 label *label179
   286 op add *tmp163 :findPossiblePlacement:y 3
   287 op mul *tmp164 7 *tmp163
   288 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp164
   289 set :findPossiblePlacement:x -3
   290 label *label89
   291 jump *label91 greaterThan :findPossiblePlacement:x 3
+  292 label *label180
   293 op and *tmp166 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
   294 jump *label92 notEqual *tmp166 0
   295 op mul *tmp169 :findPossiblePlacement:y 7
 
   306 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   307 label *label90
   308 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
-    * jump *label89 always
+  309 jump *label180 lessThanEq :findPossiblePlacement:x 3
   310 label *label91
   311 op sub *tmp175 3 :findPossiblePlacement:height
   312 jump *label96 lessThanEq :findPossiblePlacement:y *tmp175
 
   315 label *label97
   316 label *label87
   317 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
-    * jump *label86 always
+  318 jump *label179 lessThanEq :findPossiblePlacement:y 3
   319 label *label88
   320 set :findPossiblePlacement*retval -1
   321 jump *label85 always
 
   424 set :createBlockMaskRow:result 0
   425 set :createBlockMaskRow:c 4
   426 label *label117
-    * jump *label119 lessThan :createBlockMaskRow:c -4
+  427 label *label181
   428 op shl *tmp222 :createBlockMaskRow:result 1
   429 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
   430 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   431 op or :createBlockMaskRow:result *tmp222 *tmp224
   432 label *label118
   433 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label117 always
+  434 jump *label181 greaterThanEq :createBlockMaskRow:c -4
   435 label *label119
   436 set :createBlockMaskRow*retval :createBlockMaskRow:result
   437 jump *label116 always
 
   463 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   464 set :createAdjacentMask:r 2
   465 label *label124
-    * jump *label126 lessThan :createAdjacentMask:r -4
+  466 label *label182
   467 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   468 set :createBlockMaskRow:x :createAdjacentMask:x
   469 set :createBlockMaskRow:y *tmp236
 
   482 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   483 label *label125
   484 op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label124 always
+  485 jump *label182 greaterThanEq :createAdjacentMask:r -4
   486 label *label126
   487 op shr *tmp231 :createAdjacentMask:result 1
   488 label *label121

Modifications by Replicate loop condition at OreLocator.mnd:42:5 (+1 instructions):
 
    81 label *label33
    82 ucontrol within *tmp47 *tmp54 5 *tmp57
    83 jump *label35 notEqual *tmp57 false
+   84 label *label183
    85 ucontrol approach *tmp47 *tmp54 4.5
    86 label *label34
-    * jump *label33 always
+   87 ucontrol within *tmp47 *tmp54 5 *tmp57
+   88 jump *label183 equal *tmp57 false
    89 label *label35
    90 label *label32
    91 op div *tmp60 3.8197185279121366 :locateOreAway:distance

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   120 set *tmp84 .locations
   121 set :visited:i .locationsStart
   122 label *label47
-    * jump *label49 greaterThanEq :visited:i *tmp84
+  123 jump *label49 greaterThanEq .locationsStart *tmp84
   124 label *label178
   125 op mul :visited:index 4 :visited:i
   126 op add *tmp87 :visited:index 2

Modifications by Unroll loop at OreLocator.mnd:417:5 (+39 instructions):
 
   424 end
   425 label *label11
   426 set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
-    * label *label117
-    * label *label181
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label118
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
-    * jump *label181 greaterThanEq :createBlockMaskRow:c -4
-    * label *label119
+  427 set :createBlockMaskRow:c 4
+  428 label *label184
+  429 label *label185
+  430 op shl *tmp222 :createBlockMaskRow:result 1
+  431 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  432 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  433 op or :createBlockMaskRow:result *tmp222 *tmp224
+  434 label *label186
+  435 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  436 label *label187
+  437 op shl *tmp222 :createBlockMaskRow:result 1
+  438 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  439 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  440 op or :createBlockMaskRow:result *tmp222 *tmp224
+  441 label *label188
+  442 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  443 label *label189
+  444 op shl *tmp222 :createBlockMaskRow:result 1
+  445 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  446 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  447 op or :createBlockMaskRow:result *tmp222 *tmp224
+  448 label *label190
+  449 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  450 label *label191
+  451 op shl *tmp222 :createBlockMaskRow:result 1
+  452 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  453 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  454 op or :createBlockMaskRow:result *tmp222 *tmp224
+  455 label *label192
+  456 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  457 label *label193
+  458 op shl *tmp222 :createBlockMaskRow:result 1
+  459 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  460 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  461 op or :createBlockMaskRow:result *tmp222 *tmp224
+  462 label *label194
+  463 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  464 label *label195
+  465 op shl *tmp222 :createBlockMaskRow:result 1
+  466 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  467 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  468 op or :createBlockMaskRow:result *tmp222 *tmp224
+  469 label *label196
+  470 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  471 label *label197
+  472 op shl *tmp222 :createBlockMaskRow:result 1
+  473 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  474 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  475 op or :createBlockMaskRow:result *tmp222 *tmp224
+  476 label *label198
+  477 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  478 label *label199
+  479 op shl *tmp222 :createBlockMaskRow:result 1
+  480 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  481 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  482 op or :createBlockMaskRow:result *tmp222 *tmp224
+  483 label *label200
+  484 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  485 label *label201
+  486 op shl *tmp222 :createBlockMaskRow:result 1
+  487 op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  488 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  489 op or :createBlockMaskRow:result *tmp222 *tmp224
+  490 label *label202
+  491 op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  492 label *label119
   493 set :createBlockMaskRow*retval :createBlockMaskRow:result
   494 jump *label116 always
   495 label *label116

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   427 set :createBlockMaskRow:c 4
   428 label *label184
   429 label *label185
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  430 op shl *tmp222 0 1
+  431 op add *tmp223 :createBlockMaskRow:x 4
   432 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
+  433 op or :createBlockMaskRow:result 0 *tmp224
   434 label *label186
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  435 op sub :createBlockMaskRow:c 4 1
   436 label *label187
   437 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  438 op add *tmp223 :createBlockMaskRow:x 3
   439 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   440 op or :createBlockMaskRow:result *tmp222 *tmp224
   441 label *label188
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  442 op sub :createBlockMaskRow:c 3 1
   443 label *label189
   444 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  445 op add *tmp223 :createBlockMaskRow:x 2
   446 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   447 op or :createBlockMaskRow:result *tmp222 *tmp224
   448 label *label190
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  449 op sub :createBlockMaskRow:c 2 1
   450 label *label191
   451 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  452 op add *tmp223 :createBlockMaskRow:x 1
   453 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   454 op or :createBlockMaskRow:result *tmp222 *tmp224
   455 label *label192
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  456 op sub :createBlockMaskRow:c 1 1
   457 label *label193
   458 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  459 op add *tmp223 :createBlockMaskRow:x 0
   460 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   461 op or :createBlockMaskRow:result *tmp222 *tmp224
   462 label *label194
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  463 op sub :createBlockMaskRow:c 0 1
   464 label *label195
   465 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  466 op add *tmp223 :createBlockMaskRow:x -1
   467 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   468 op or :createBlockMaskRow:result *tmp222 *tmp224
   469 label *label196
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  470 op sub :createBlockMaskRow:c -1 1
   471 label *label197
   472 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  473 op add *tmp223 :createBlockMaskRow:x -2
   474 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   475 op or :createBlockMaskRow:result *tmp222 *tmp224
   476 label *label198
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  477 op sub :createBlockMaskRow:c -2 1
   478 label *label199
   479 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  480 op add *tmp223 :createBlockMaskRow:x -3
   481 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   482 op or :createBlockMaskRow:result *tmp222 *tmp224
   483 label *label200
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  484 op sub :createBlockMaskRow:c -3 1
   485 label *label201
   486 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x :createBlockMaskRow:c
+  487 op add *tmp223 :createBlockMaskRow:x -4
   488 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   489 op or :createBlockMaskRow:result *tmp222 *tmp224
   490 label *label202
-    * op sub :createBlockMaskRow:c :createBlockMaskRow:c 1
+  491 op sub :createBlockMaskRow:c -4 1
   492 label *label119
   493 set :createBlockMaskRow*retval :createBlockMaskRow:result
   494 jump *label116 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-12 instructions):
 
   423 return :tryPlaceGenerator*retaddr
   424 end
   425 label *label11
-    * set :createBlockMaskRow:result 0
-    * set :createBlockMaskRow:c 4
   426 label *label184
   427 label *label185
-    * op shl *tmp222 0 1
   428 op add *tmp223 :createBlockMaskRow:x 4
   429 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   430 op or :createBlockMaskRow:result 0 *tmp224
   431 label *label186
-    * op sub :createBlockMaskRow:c 4 1
   432 label *label187
   433 op shl *tmp222 :createBlockMaskRow:result 1
   434 op add *tmp223 :createBlockMaskRow:x 3
   435 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   436 op or :createBlockMaskRow:result *tmp222 *tmp224
   437 label *label188
-    * op sub :createBlockMaskRow:c 3 1
   438 label *label189
   439 op shl *tmp222 :createBlockMaskRow:result 1
   440 op add *tmp223 :createBlockMaskRow:x 2
   441 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   442 op or :createBlockMaskRow:result *tmp222 *tmp224
   443 label *label190
-    * op sub :createBlockMaskRow:c 2 1
   444 label *label191
   445 op shl *tmp222 :createBlockMaskRow:result 1
   446 op add *tmp223 :createBlockMaskRow:x 1
   447 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   448 op or :createBlockMaskRow:result *tmp222 *tmp224
   449 label *label192
-    * op sub :createBlockMaskRow:c 1 1
   450 label *label193
   451 op shl *tmp222 :createBlockMaskRow:result 1
   452 op add *tmp223 :createBlockMaskRow:x 0
   453 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   454 op or :createBlockMaskRow:result *tmp222 *tmp224
   455 label *label194
-    * op sub :createBlockMaskRow:c 0 1
   456 label *label195
   457 op shl *tmp222 :createBlockMaskRow:result 1
   458 op add *tmp223 :createBlockMaskRow:x -1
   459 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   460 op or :createBlockMaskRow:result *tmp222 *tmp224
   461 label *label196
-    * op sub :createBlockMaskRow:c -1 1
   462 label *label197
   463 op shl *tmp222 :createBlockMaskRow:result 1
   464 op add *tmp223 :createBlockMaskRow:x -2
   465 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   466 op or :createBlockMaskRow:result *tmp222 *tmp224
   467 label *label198
-    * op sub :createBlockMaskRow:c -2 1
   468 label *label199
   469 op shl *tmp222 :createBlockMaskRow:result 1
   470 op add *tmp223 :createBlockMaskRow:x -3
   471 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   472 op or :createBlockMaskRow:result *tmp222 *tmp224
   473 label *label200
-    * op sub :createBlockMaskRow:c -3 1
   474 label *label201
   475 op shl *tmp222 :createBlockMaskRow:result 1
   476 op add *tmp223 :createBlockMaskRow:x -4
   477 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
   478 op or :createBlockMaskRow:result *tmp222 *tmp224
   479 label *label202
-    * op sub :createBlockMaskRow:c -4 1
   480 label *label119
   481 set :createBlockMaskRow*retval :createBlockMaskRow:result
   482 jump *label116 always

Modifications by Replicate loop condition at OreLocator.mnd:42:5 (+1 instructions):
 
   175 label *label60
   176 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   177 jump *label62 notEqual *tmp109 false
+  178 label *label203
   179 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
   180 label *label61
-    * jump *label60 always
+  181 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
+  182 jump *label203 equal *tmp109 false
   183 label *label62
   184 label *label59
   185 label *label58

Modifications by Unroll loop at OreLocator.mnd:431:5 (+95 instructions):
 
   508 call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
   509 label *label123
   510 set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * set :createAdjacentMask:r 2
-    * label *label124
-    * label *label182
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
-    * set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label127 (h:*label127)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label127) (h:*label127)
-    * label *label127
-    * op shl *tmp238 :createAdjacentMask:row1 1
-    * op or *tmp239 :createAdjacentMask:row2 *tmp238
-    * op shr *tmp240 :createAdjacentMask:row1 1
-    * op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
-    * op shl *tmp243 :createAdjacentMask:result 7
-    * op and *tmp244 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp243 *tmp244
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
-    * label *label125
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
-    * jump *label182 greaterThanEq :createAdjacentMask:r -4
-    * label *label126
+  511 set :createAdjacentMask:r 2
+  512 label *label204
+  513 label *label205
+  514 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  515 set :createBlockMaskRow:x :createAdjacentMask:x
+  516 set :createBlockMaskRow:y *tmp236
+  517 setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
+  518 call *label11 *invalid :createBlockMaskRow*retval (m:*label206) (h:*label206)
+  519 label *label206
+  520 op shl *tmp238 :createAdjacentMask:row1 1
+  521 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  522 op shr *tmp240 :createAdjacentMask:row1 1
+  523 op or *tmp241 *tmp239 *tmp240
+  524 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  525 op shl *tmp243 :createAdjacentMask:result 7
+  526 op and *tmp244 :createAdjacentMask:mask 0xFE
+  527 op or :createAdjacentMask:result *tmp243 *tmp244
+  528 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  529 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  530 label *label207
+  531 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  532 label *label208
+  533 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  534 set :createBlockMaskRow:x :createAdjacentMask:x
+  535 set :createBlockMaskRow:y *tmp236
+  536 setaddr :createBlockMaskRow*retaddr *label209 (h:*label209)
+  537 call *label11 *invalid :createBlockMaskRow*retval (m:*label209) (h:*label209)
+  538 label *label209
+  539 op shl *tmp238 :createAdjacentMask:row1 1
+  540 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  541 op shr *tmp240 :createAdjacentMask:row1 1
+  542 op or *tmp241 *tmp239 *tmp240
+  543 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  544 op shl *tmp243 :createAdjacentMask:result 7
+  545 op and *tmp244 :createAdjacentMask:mask 0xFE
+  546 op or :createAdjacentMask:result *tmp243 *tmp244
+  547 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  548 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  549 label *label210
+  550 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  551 label *label211
+  552 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  553 set :createBlockMaskRow:x :createAdjacentMask:x
+  554 set :createBlockMaskRow:y *tmp236
+  555 setaddr :createBlockMaskRow*retaddr *label212 (h:*label212)
+  556 call *label11 *invalid :createBlockMaskRow*retval (m:*label212) (h:*label212)
+  557 label *label212
+  558 op shl *tmp238 :createAdjacentMask:row1 1
+  559 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  560 op shr *tmp240 :createAdjacentMask:row1 1
+  561 op or *tmp241 *tmp239 *tmp240
+  562 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  563 op shl *tmp243 :createAdjacentMask:result 7
+  564 op and *tmp244 :createAdjacentMask:mask 0xFE
+  565 op or :createAdjacentMask:result *tmp243 *tmp244
+  566 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  567 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  568 label *label213
+  569 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  570 label *label214
+  571 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  572 set :createBlockMaskRow:x :createAdjacentMask:x
+  573 set :createBlockMaskRow:y *tmp236
+  574 setaddr :createBlockMaskRow*retaddr *label215 (h:*label215)
+  575 call *label11 *invalid :createBlockMaskRow*retval (m:*label215) (h:*label215)
+  576 label *label215
+  577 op shl *tmp238 :createAdjacentMask:row1 1
+  578 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  579 op shr *tmp240 :createAdjacentMask:row1 1
+  580 op or *tmp241 *tmp239 *tmp240
+  581 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  582 op shl *tmp243 :createAdjacentMask:result 7
+  583 op and *tmp244 :createAdjacentMask:mask 0xFE
+  584 op or :createAdjacentMask:result *tmp243 *tmp244
+  585 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  586 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  587 label *label216
+  588 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  589 label *label217
+  590 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  591 set :createBlockMaskRow:x :createAdjacentMask:x
+  592 set :createBlockMaskRow:y *tmp236
+  593 setaddr :createBlockMaskRow*retaddr *label218 (h:*label218)
+  594 call *label11 *invalid :createBlockMaskRow*retval (m:*label218) (h:*label218)
+  595 label *label218
+  596 op shl *tmp238 :createAdjacentMask:row1 1
+  597 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  598 op shr *tmp240 :createAdjacentMask:row1 1
+  599 op or *tmp241 *tmp239 *tmp240
+  600 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  601 op shl *tmp243 :createAdjacentMask:result 7
+  602 op and *tmp244 :createAdjacentMask:mask 0xFE
+  603 op or :createAdjacentMask:result *tmp243 *tmp244
+  604 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  605 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  606 label *label219
+  607 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  608 label *label220
+  609 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  610 set :createBlockMaskRow:x :createAdjacentMask:x
+  611 set :createBlockMaskRow:y *tmp236
+  612 setaddr :createBlockMaskRow*retaddr *label221 (h:*label221)
+  613 call *label11 *invalid :createBlockMaskRow*retval (m:*label221) (h:*label221)
+  614 label *label221
+  615 op shl *tmp238 :createAdjacentMask:row1 1
+  616 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  617 op shr *tmp240 :createAdjacentMask:row1 1
+  618 op or *tmp241 *tmp239 *tmp240
+  619 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  620 op shl *tmp243 :createAdjacentMask:result 7
+  621 op and *tmp244 :createAdjacentMask:mask 0xFE
+  622 op or :createAdjacentMask:result *tmp243 *tmp244
+  623 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  624 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  625 label *label222
+  626 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  627 label *label223
+  628 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  629 set :createBlockMaskRow:x :createAdjacentMask:x
+  630 set :createBlockMaskRow:y *tmp236
+  631 setaddr :createBlockMaskRow*retaddr *label224 (h:*label224)
+  632 call *label11 *invalid :createBlockMaskRow*retval (m:*label224) (h:*label224)
+  633 label *label224
+  634 op shl *tmp238 :createAdjacentMask:row1 1
+  635 op or *tmp239 :createAdjacentMask:row2 *tmp238
+  636 op shr *tmp240 :createAdjacentMask:row1 1
+  637 op or *tmp241 *tmp239 *tmp240
+  638 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  639 op shl *tmp243 :createAdjacentMask:result 7
+  640 op and *tmp244 :createAdjacentMask:mask 0xFE
+  641 op or :createAdjacentMask:result *tmp243 *tmp244
+  642 set :createAdjacentMask:row2 :createAdjacentMask:row1
+  643 set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  644 label *label225
+  645 op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  646 label *label126
   647 op shr *tmp231 :createAdjacentMask:result 1
   648 label *label121
   649 label *label128

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-3 instructions):
 
   511 set :createAdjacentMask:r 2
   512 label *label204
   513 label *label205
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
+  514 op add *tmp236 :createAdjacentMask:y 2
   515 set :createBlockMaskRow:x :createAdjacentMask:x
   516 set :createBlockMaskRow:y *tmp236
   517 setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
 
   639 op shl *tmp243 :createAdjacentMask:result 7
   640 op and *tmp244 :createAdjacentMask:mask 0xFE
   641 op or :createAdjacentMask:result *tmp243 *tmp244
-    * set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
   642 label *label225
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
   643 label *label126
   644 op shr *tmp231 :createAdjacentMask:result 1
   645 label *label121

Modifications by Replicate loop condition at OreLocator.mnd:42:5 (+1 instructions):
 
    34 label *label20
    35 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    36 jump *label22 notEqual *tmp27 false
+   37 label *label226
    38 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
    39 label *label21
-    * jump *label20 always
+   40 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
+   41 jump *label226 equal *tmp27 false
    42 label *label22
    43 label *label19
    44 label *label18

Modifications by Replicate loop condition at OreLocator.mnd:42:5 (+1 instructions):
 
   669 label *label131
   670 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
   671 jump *label133 notEqual *tmp250 false
+  672 label *label227
   673 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
   674 label *label132
-    * jump *label131 always
+  675 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
+  676 jump *label227 equal *tmp250 false
   677 label *label133
   678 label *label130
   679 set :createCombinedMask:x .drillX

Modifications by Inline function 'createBlockMaskRow' defined at OreLocator.mnd:415:1 (+276 instructions):
 
   426 label *label98
   427 return :tryPlaceGenerator*retaddr
   428 end
-    * label *label11
-    * label *label184
-    * label *label185
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
-    * label *label186
-    * label *label187
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label188
-    * label *label189
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label190
-    * label *label191
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label192
-    * label *label193
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label194
-    * label *label195
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label196
-    * label *label197
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label198
-    * label *label199
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label200
-    * label *label201
-    * op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label202
-    * label *label119
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
-    * jump *label116 always
-    * label *label116
-    * return :createBlockMaskRow*retaddr
-    * end
   429 label *label12
   430 write @unit processor1 ":createTerrainMask:unit"
   431 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   438 op add *tmp232 :createCombinedMask:y 4
   439 set :createBlockMaskRow:x :createCombinedMask:x
   440 set :createBlockMaskRow:y *tmp232
-    * setaddr :createBlockMaskRow*retaddr *label122 (h:*label122)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label122) (h:*label122)
-    * label *label122
+  441 label *label228
+  442 label *label229
+  443 label *label230
+  444 op add *tmp223 :createBlockMaskRow:x 4
+  445 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  446 op or :createBlockMaskRow:result 0 *tmp224
+  447 label *label231
+  448 label *label232
+  449 op shl *tmp222 :createBlockMaskRow:result 1
+  450 op add *tmp223 :createBlockMaskRow:x 3
+  451 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  452 op or :createBlockMaskRow:result *tmp222 *tmp224
+  453 label *label233
+  454 label *label234
+  455 op shl *tmp222 :createBlockMaskRow:result 1
+  456 op add *tmp223 :createBlockMaskRow:x 2
+  457 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  458 op or :createBlockMaskRow:result *tmp222 *tmp224
+  459 label *label235
+  460 label *label236
+  461 op shl *tmp222 :createBlockMaskRow:result 1
+  462 op add *tmp223 :createBlockMaskRow:x 1
+  463 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  464 op or :createBlockMaskRow:result *tmp222 *tmp224
+  465 label *label237
+  466 label *label238
+  467 op shl *tmp222 :createBlockMaskRow:result 1
+  468 op add *tmp223 :createBlockMaskRow:x 0
+  469 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  470 op or :createBlockMaskRow:result *tmp222 *tmp224
+  471 label *label239
+  472 label *label240
+  473 op shl *tmp222 :createBlockMaskRow:result 1
+  474 op add *tmp223 :createBlockMaskRow:x -1
+  475 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  476 op or :createBlockMaskRow:result *tmp222 *tmp224
+  477 label *label241
+  478 label *label242
+  479 op shl *tmp222 :createBlockMaskRow:result 1
+  480 op add *tmp223 :createBlockMaskRow:x -2
+  481 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  482 op or :createBlockMaskRow:result *tmp222 *tmp224
+  483 label *label243
+  484 label *label244
+  485 op shl *tmp222 :createBlockMaskRow:result 1
+  486 op add *tmp223 :createBlockMaskRow:x -3
+  487 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  488 op or :createBlockMaskRow:result *tmp222 *tmp224
+  489 label *label245
+  490 label *label246
+  491 op shl *tmp222 :createBlockMaskRow:result 1
+  492 op add *tmp223 :createBlockMaskRow:x -4
+  493 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  494 op or :createBlockMaskRow:result *tmp222 *tmp224
+  495 label *label247
+  496 label *label248
+  497 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  498 jump *label249 always
+  499 label *label249
   500 set :createAdjacentMask:row2 :createBlockMaskRow*retval
   501 op add *tmp234 :createAdjacentMask:y 3
   502 set :createBlockMaskRow:x :createAdjacentMask:x
   503 set :createBlockMaskRow:y *tmp234
-    * setaddr :createBlockMaskRow*retaddr *label123 (h:*label123)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label123) (h:*label123)
-    * label *label123
+  504 label *label250
+  505 label *label251
+  506 label *label252
+  507 op add *tmp223 :createBlockMaskRow:x 4
+  508 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  509 op or :createBlockMaskRow:result 0 *tmp224
+  510 label *label253
+  511 label *label254
+  512 op shl *tmp222 :createBlockMaskRow:result 1
+  513 op add *tmp223 :createBlockMaskRow:x 3
+  514 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  515 op or :createBlockMaskRow:result *tmp222 *tmp224
+  516 label *label255
+  517 label *label256
+  518 op shl *tmp222 :createBlockMaskRow:result 1
+  519 op add *tmp223 :createBlockMaskRow:x 2
+  520 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  521 op or :createBlockMaskRow:result *tmp222 *tmp224
+  522 label *label257
+  523 label *label258
+  524 op shl *tmp222 :createBlockMaskRow:result 1
+  525 op add *tmp223 :createBlockMaskRow:x 1
+  526 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  527 op or :createBlockMaskRow:result *tmp222 *tmp224
+  528 label *label259
+  529 label *label260
+  530 op shl *tmp222 :createBlockMaskRow:result 1
+  531 op add *tmp223 :createBlockMaskRow:x 0
+  532 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  533 op or :createBlockMaskRow:result *tmp222 *tmp224
+  534 label *label261
+  535 label *label262
+  536 op shl *tmp222 :createBlockMaskRow:result 1
+  537 op add *tmp223 :createBlockMaskRow:x -1
+  538 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  539 op or :createBlockMaskRow:result *tmp222 *tmp224
+  540 label *label263
+  541 label *label264
+  542 op shl *tmp222 :createBlockMaskRow:result 1
+  543 op add *tmp223 :createBlockMaskRow:x -2
+  544 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  545 op or :createBlockMaskRow:result *tmp222 *tmp224
+  546 label *label265
+  547 label *label266
+  548 op shl *tmp222 :createBlockMaskRow:result 1
+  549 op add *tmp223 :createBlockMaskRow:x -3
+  550 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  551 op or :createBlockMaskRow:result *tmp222 *tmp224
+  552 label *label267
+  553 label *label268
+  554 op shl *tmp222 :createBlockMaskRow:result 1
+  555 op add *tmp223 :createBlockMaskRow:x -4
+  556 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  557 op or :createBlockMaskRow:result *tmp222 *tmp224
+  558 label *label269
+  559 label *label270
+  560 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  561 jump *label271 always
+  562 label *label271
   563 set :createAdjacentMask:row1 :createBlockMaskRow*retval
   564 set :createAdjacentMask:r 2
   565 label *label204
 
   567 op add *tmp236 :createAdjacentMask:y 2
   568 set :createBlockMaskRow:x :createAdjacentMask:x
   569 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label206 (h:*label206)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label206) (h:*label206)
-    * label *label206
+  570 label *label272
+  571 label *label273
+  572 label *label274
+  573 op add *tmp223 :createBlockMaskRow:x 4
+  574 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  575 op or :createBlockMaskRow:result 0 *tmp224
+  576 label *label275
+  577 label *label276
+  578 op shl *tmp222 :createBlockMaskRow:result 1
+  579 op add *tmp223 :createBlockMaskRow:x 3
+  580 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  581 op or :createBlockMaskRow:result *tmp222 *tmp224
+  582 label *label277
+  583 label *label278
+  584 op shl *tmp222 :createBlockMaskRow:result 1
+  585 op add *tmp223 :createBlockMaskRow:x 2
+  586 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  587 op or :createBlockMaskRow:result *tmp222 *tmp224
+  588 label *label279
+  589 label *label280
+  590 op shl *tmp222 :createBlockMaskRow:result 1
+  591 op add *tmp223 :createBlockMaskRow:x 1
+  592 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  593 op or :createBlockMaskRow:result *tmp222 *tmp224
+  594 label *label281
+  595 label *label282
+  596 op shl *tmp222 :createBlockMaskRow:result 1
+  597 op add *tmp223 :createBlockMaskRow:x 0
+  598 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  599 op or :createBlockMaskRow:result *tmp222 *tmp224
+  600 label *label283
+  601 label *label284
+  602 op shl *tmp222 :createBlockMaskRow:result 1
+  603 op add *tmp223 :createBlockMaskRow:x -1
+  604 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  605 op or :createBlockMaskRow:result *tmp222 *tmp224
+  606 label *label285
+  607 label *label286
+  608 op shl *tmp222 :createBlockMaskRow:result 1
+  609 op add *tmp223 :createBlockMaskRow:x -2
+  610 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  611 op or :createBlockMaskRow:result *tmp222 *tmp224
+  612 label *label287
+  613 label *label288
+  614 op shl *tmp222 :createBlockMaskRow:result 1
+  615 op add *tmp223 :createBlockMaskRow:x -3
+  616 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  617 op or :createBlockMaskRow:result *tmp222 *tmp224
+  618 label *label289
+  619 label *label290
+  620 op shl *tmp222 :createBlockMaskRow:result 1
+  621 op add *tmp223 :createBlockMaskRow:x -4
+  622 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  623 op or :createBlockMaskRow:result *tmp222 *tmp224
+  624 label *label291
+  625 label *label292
+  626 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  627 jump *label293 always
+  628 label *label293
   629 op shl *tmp238 :createAdjacentMask:row1 1
   630 op or *tmp239 :createAdjacentMask:row2 *tmp238
   631 op shr *tmp240 :createAdjacentMask:row1 1
 
   642 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   643 set :createBlockMaskRow:x :createAdjacentMask:x
   644 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label209 (h:*label209)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label209) (h:*label209)
-    * label *label209
+  645 label *label294
+  646 label *label295
+  647 label *label296
+  648 op add *tmp223 :createBlockMaskRow:x 4
+  649 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  650 op or :createBlockMaskRow:result 0 *tmp224
+  651 label *label297
+  652 label *label298
+  653 op shl *tmp222 :createBlockMaskRow:result 1
+  654 op add *tmp223 :createBlockMaskRow:x 3
+  655 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  656 op or :createBlockMaskRow:result *tmp222 *tmp224
+  657 label *label299
+  658 label *label300
+  659 op shl *tmp222 :createBlockMaskRow:result 1
+  660 op add *tmp223 :createBlockMaskRow:x 2
+  661 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  662 op or :createBlockMaskRow:result *tmp222 *tmp224
+  663 label *label301
+  664 label *label302
+  665 op shl *tmp222 :createBlockMaskRow:result 1
+  666 op add *tmp223 :createBlockMaskRow:x 1
+  667 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  668 op or :createBlockMaskRow:result *tmp222 *tmp224
+  669 label *label303
+  670 label *label304
+  671 op shl *tmp222 :createBlockMaskRow:result 1
+  672 op add *tmp223 :createBlockMaskRow:x 0
+  673 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  674 op or :createBlockMaskRow:result *tmp222 *tmp224
+  675 label *label305
+  676 label *label306
+  677 op shl *tmp222 :createBlockMaskRow:result 1
+  678 op add *tmp223 :createBlockMaskRow:x -1
+  679 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  680 op or :createBlockMaskRow:result *tmp222 *tmp224
+  681 label *label307
+  682 label *label308
+  683 op shl *tmp222 :createBlockMaskRow:result 1
+  684 op add *tmp223 :createBlockMaskRow:x -2
+  685 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  686 op or :createBlockMaskRow:result *tmp222 *tmp224
+  687 label *label309
+  688 label *label310
+  689 op shl *tmp222 :createBlockMaskRow:result 1
+  690 op add *tmp223 :createBlockMaskRow:x -3
+  691 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  692 op or :createBlockMaskRow:result *tmp222 *tmp224
+  693 label *label311
+  694 label *label312
+  695 op shl *tmp222 :createBlockMaskRow:result 1
+  696 op add *tmp223 :createBlockMaskRow:x -4
+  697 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  698 op or :createBlockMaskRow:result *tmp222 *tmp224
+  699 label *label313
+  700 label *label314
+  701 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  702 jump *label315 always
+  703 label *label315
   704 op shl *tmp238 :createAdjacentMask:row1 1
   705 op or *tmp239 :createAdjacentMask:row2 *tmp238
   706 op shr *tmp240 :createAdjacentMask:row1 1
 
   717 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   718 set :createBlockMaskRow:x :createAdjacentMask:x
   719 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label212 (h:*label212)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label212) (h:*label212)
-    * label *label212
+  720 label *label316
+  721 label *label317
+  722 label *label318
+  723 op add *tmp223 :createBlockMaskRow:x 4
+  724 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  725 op or :createBlockMaskRow:result 0 *tmp224
+  726 label *label319
+  727 label *label320
+  728 op shl *tmp222 :createBlockMaskRow:result 1
+  729 op add *tmp223 :createBlockMaskRow:x 3
+  730 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  731 op or :createBlockMaskRow:result *tmp222 *tmp224
+  732 label *label321
+  733 label *label322
+  734 op shl *tmp222 :createBlockMaskRow:result 1
+  735 op add *tmp223 :createBlockMaskRow:x 2
+  736 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  737 op or :createBlockMaskRow:result *tmp222 *tmp224
+  738 label *label323
+  739 label *label324
+  740 op shl *tmp222 :createBlockMaskRow:result 1
+  741 op add *tmp223 :createBlockMaskRow:x 1
+  742 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  743 op or :createBlockMaskRow:result *tmp222 *tmp224
+  744 label *label325
+  745 label *label326
+  746 op shl *tmp222 :createBlockMaskRow:result 1
+  747 op add *tmp223 :createBlockMaskRow:x 0
+  748 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  749 op or :createBlockMaskRow:result *tmp222 *tmp224
+  750 label *label327
+  751 label *label328
+  752 op shl *tmp222 :createBlockMaskRow:result 1
+  753 op add *tmp223 :createBlockMaskRow:x -1
+  754 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  755 op or :createBlockMaskRow:result *tmp222 *tmp224
+  756 label *label329
+  757 label *label330
+  758 op shl *tmp222 :createBlockMaskRow:result 1
+  759 op add *tmp223 :createBlockMaskRow:x -2
+  760 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  761 op or :createBlockMaskRow:result *tmp222 *tmp224
+  762 label *label331
+  763 label *label332
+  764 op shl *tmp222 :createBlockMaskRow:result 1
+  765 op add *tmp223 :createBlockMaskRow:x -3
+  766 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  767 op or :createBlockMaskRow:result *tmp222 *tmp224
+  768 label *label333
+  769 label *label334
+  770 op shl *tmp222 :createBlockMaskRow:result 1
+  771 op add *tmp223 :createBlockMaskRow:x -4
+  772 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  773 op or :createBlockMaskRow:result *tmp222 *tmp224
+  774 label *label335
+  775 label *label336
+  776 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  777 jump *label337 always
+  778 label *label337
   779 op shl *tmp238 :createAdjacentMask:row1 1
   780 op or *tmp239 :createAdjacentMask:row2 *tmp238
   781 op shr *tmp240 :createAdjacentMask:row1 1
 
   792 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   793 set :createBlockMaskRow:x :createAdjacentMask:x
   794 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label215 (h:*label215)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label215) (h:*label215)
-    * label *label215
+  795 label *label338
+  796 label *label339
+  797 label *label340
+  798 op add *tmp223 :createBlockMaskRow:x 4
+  799 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  800 op or :createBlockMaskRow:result 0 *tmp224
+  801 label *label341
+  802 label *label342
+  803 op shl *tmp222 :createBlockMaskRow:result 1
+  804 op add *tmp223 :createBlockMaskRow:x 3
+  805 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  806 op or :createBlockMaskRow:result *tmp222 *tmp224
+  807 label *label343
+  808 label *label344
+  809 op shl *tmp222 :createBlockMaskRow:result 1
+  810 op add *tmp223 :createBlockMaskRow:x 2
+  811 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  812 op or :createBlockMaskRow:result *tmp222 *tmp224
+  813 label *label345
+  814 label *label346
+  815 op shl *tmp222 :createBlockMaskRow:result 1
+  816 op add *tmp223 :createBlockMaskRow:x 1
+  817 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  818 op or :createBlockMaskRow:result *tmp222 *tmp224
+  819 label *label347
+  820 label *label348
+  821 op shl *tmp222 :createBlockMaskRow:result 1
+  822 op add *tmp223 :createBlockMaskRow:x 0
+  823 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  824 op or :createBlockMaskRow:result *tmp222 *tmp224
+  825 label *label349
+  826 label *label350
+  827 op shl *tmp222 :createBlockMaskRow:result 1
+  828 op add *tmp223 :createBlockMaskRow:x -1
+  829 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  830 op or :createBlockMaskRow:result *tmp222 *tmp224
+  831 label *label351
+  832 label *label352
+  833 op shl *tmp222 :createBlockMaskRow:result 1
+  834 op add *tmp223 :createBlockMaskRow:x -2
+  835 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  836 op or :createBlockMaskRow:result *tmp222 *tmp224
+  837 label *label353
+  838 label *label354
+  839 op shl *tmp222 :createBlockMaskRow:result 1
+  840 op add *tmp223 :createBlockMaskRow:x -3
+  841 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  842 op or :createBlockMaskRow:result *tmp222 *tmp224
+  843 label *label355
+  844 label *label356
+  845 op shl *tmp222 :createBlockMaskRow:result 1
+  846 op add *tmp223 :createBlockMaskRow:x -4
+  847 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  848 op or :createBlockMaskRow:result *tmp222 *tmp224
+  849 label *label357
+  850 label *label358
+  851 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  852 jump *label359 always
+  853 label *label359
   854 op shl *tmp238 :createAdjacentMask:row1 1
   855 op or *tmp239 :createAdjacentMask:row2 *tmp238
   856 op shr *tmp240 :createAdjacentMask:row1 1
 
   867 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   868 set :createBlockMaskRow:x :createAdjacentMask:x
   869 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label218 (h:*label218)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label218) (h:*label218)
-    * label *label218
+  870 label *label360
+  871 label *label361
+  872 label *label362
+  873 op add *tmp223 :createBlockMaskRow:x 4
+  874 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  875 op or :createBlockMaskRow:result 0 *tmp224
+  876 label *label363
+  877 label *label364
+  878 op shl *tmp222 :createBlockMaskRow:result 1
+  879 op add *tmp223 :createBlockMaskRow:x 3
+  880 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  881 op or :createBlockMaskRow:result *tmp222 *tmp224
+  882 label *label365
+  883 label *label366
+  884 op shl *tmp222 :createBlockMaskRow:result 1
+  885 op add *tmp223 :createBlockMaskRow:x 2
+  886 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  887 op or :createBlockMaskRow:result *tmp222 *tmp224
+  888 label *label367
+  889 label *label368
+  890 op shl *tmp222 :createBlockMaskRow:result 1
+  891 op add *tmp223 :createBlockMaskRow:x 1
+  892 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  893 op or :createBlockMaskRow:result *tmp222 *tmp224
+  894 label *label369
+  895 label *label370
+  896 op shl *tmp222 :createBlockMaskRow:result 1
+  897 op add *tmp223 :createBlockMaskRow:x 0
+  898 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  899 op or :createBlockMaskRow:result *tmp222 *tmp224
+  900 label *label371
+  901 label *label372
+  902 op shl *tmp222 :createBlockMaskRow:result 1
+  903 op add *tmp223 :createBlockMaskRow:x -1
+  904 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  905 op or :createBlockMaskRow:result *tmp222 *tmp224
+  906 label *label373
+  907 label *label374
+  908 op shl *tmp222 :createBlockMaskRow:result 1
+  909 op add *tmp223 :createBlockMaskRow:x -2
+  910 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  911 op or :createBlockMaskRow:result *tmp222 *tmp224
+  912 label *label375
+  913 label *label376
+  914 op shl *tmp222 :createBlockMaskRow:result 1
+  915 op add *tmp223 :createBlockMaskRow:x -3
+  916 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  917 op or :createBlockMaskRow:result *tmp222 *tmp224
+  918 label *label377
+  919 label *label378
+  920 op shl *tmp222 :createBlockMaskRow:result 1
+  921 op add *tmp223 :createBlockMaskRow:x -4
+  922 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  923 op or :createBlockMaskRow:result *tmp222 *tmp224
+  924 label *label379
+  925 label *label380
+  926 set :createBlockMaskRow*retval :createBlockMaskRow:result
+  927 jump *label381 always
+  928 label *label381
   929 op shl *tmp238 :createAdjacentMask:row1 1
   930 op or *tmp239 :createAdjacentMask:row2 *tmp238
   931 op shr *tmp240 :createAdjacentMask:row1 1
 
   942 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
   943 set :createBlockMaskRow:x :createAdjacentMask:x
   944 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label221 (h:*label221)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label221) (h:*label221)
-    * label *label221
+  945 label *label382
+  946 label *label383
+  947 label *label384
+  948 op add *tmp223 :createBlockMaskRow:x 4
+  949 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  950 op or :createBlockMaskRow:result 0 *tmp224
+  951 label *label385
+  952 label *label386
+  953 op shl *tmp222 :createBlockMaskRow:result 1
+  954 op add *tmp223 :createBlockMaskRow:x 3
+  955 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  956 op or :createBlockMaskRow:result *tmp222 *tmp224
+  957 label *label387
+  958 label *label388
+  959 op shl *tmp222 :createBlockMaskRow:result 1
+  960 op add *tmp223 :createBlockMaskRow:x 2
+  961 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  962 op or :createBlockMaskRow:result *tmp222 *tmp224
+  963 label *label389
+  964 label *label390
+  965 op shl *tmp222 :createBlockMaskRow:result 1
+  966 op add *tmp223 :createBlockMaskRow:x 1
+  967 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  968 op or :createBlockMaskRow:result *tmp222 *tmp224
+  969 label *label391
+  970 label *label392
+  971 op shl *tmp222 :createBlockMaskRow:result 1
+  972 op add *tmp223 :createBlockMaskRow:x 0
+  973 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  974 op or :createBlockMaskRow:result *tmp222 *tmp224
+  975 label *label393
+  976 label *label394
+  977 op shl *tmp222 :createBlockMaskRow:result 1
+  978 op add *tmp223 :createBlockMaskRow:x -1
+  979 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  980 op or :createBlockMaskRow:result *tmp222 *tmp224
+  981 label *label395
+  982 label *label396
+  983 op shl *tmp222 :createBlockMaskRow:result 1
+  984 op add *tmp223 :createBlockMaskRow:x -2
+  985 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  986 op or :createBlockMaskRow:result *tmp222 *tmp224
+  987 label *label397
+  988 label *label398
+  989 op shl *tmp222 :createBlockMaskRow:result 1
+  990 op add *tmp223 :createBlockMaskRow:x -3
+  991 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  992 op or :createBlockMaskRow:result *tmp222 *tmp224
+  993 label *label399
+  994 label *label400
+  995 op shl *tmp222 :createBlockMaskRow:result 1
+  996 op add *tmp223 :createBlockMaskRow:x -4
+  997 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  998 op or :createBlockMaskRow:result *tmp222 *tmp224
+  999 label *label401
+ 1000 label *label402
+ 1001 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1002 jump *label403 always
+ 1003 label *label403
  1004 op shl *tmp238 :createAdjacentMask:row1 1
  1005 op or *tmp239 :createAdjacentMask:row2 *tmp238
  1006 op shr *tmp240 :createAdjacentMask:row1 1
 
  1017 op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
  1018 set :createBlockMaskRow:x :createAdjacentMask:x
  1019 set :createBlockMaskRow:y *tmp236
-    * setaddr :createBlockMaskRow*retaddr *label224 (h:*label224)
-    * call *label11 *invalid :createBlockMaskRow*retval (m:*label224) (h:*label224)
-    * label *label224
+ 1020 label *label404
+ 1021 label *label405
+ 1022 label *label406
+ 1023 op add *tmp223 :createBlockMaskRow:x 4
+ 1024 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1025 op or :createBlockMaskRow:result 0 *tmp224
+ 1026 label *label407
+ 1027 label *label408
+ 1028 op shl *tmp222 :createBlockMaskRow:result 1
+ 1029 op add *tmp223 :createBlockMaskRow:x 3
+ 1030 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1031 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1032 label *label409
+ 1033 label *label410
+ 1034 op shl *tmp222 :createBlockMaskRow:result 1
+ 1035 op add *tmp223 :createBlockMaskRow:x 2
+ 1036 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1037 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1038 label *label411
+ 1039 label *label412
+ 1040 op shl *tmp222 :createBlockMaskRow:result 1
+ 1041 op add *tmp223 :createBlockMaskRow:x 1
+ 1042 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1043 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1044 label *label413
+ 1045 label *label414
+ 1046 op shl *tmp222 :createBlockMaskRow:result 1
+ 1047 op add *tmp223 :createBlockMaskRow:x 0
+ 1048 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1049 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1050 label *label415
+ 1051 label *label416
+ 1052 op shl *tmp222 :createBlockMaskRow:result 1
+ 1053 op add *tmp223 :createBlockMaskRow:x -1
+ 1054 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1055 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1056 label *label417
+ 1057 label *label418
+ 1058 op shl *tmp222 :createBlockMaskRow:result 1
+ 1059 op add *tmp223 :createBlockMaskRow:x -2
+ 1060 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1061 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1062 label *label419
+ 1063 label *label420
+ 1064 op shl *tmp222 :createBlockMaskRow:result 1
+ 1065 op add *tmp223 :createBlockMaskRow:x -3
+ 1066 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1067 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1068 label *label421
+ 1069 label *label422
+ 1070 op shl *tmp222 :createBlockMaskRow:result 1
+ 1071 op add *tmp223 :createBlockMaskRow:x -4
+ 1072 ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1073 op or :createBlockMaskRow:result *tmp222 *tmp224
+ 1074 label *label423
+ 1075 label *label424
+ 1076 set :createBlockMaskRow*retval :createBlockMaskRow:result
+ 1077 jump *label425 always
+ 1078 label *label425
  1079 op shl *tmp238 :createAdjacentMask:row1 1
  1080 op or *tmp239 :createAdjacentMask:row2 *tmp238
  1081 op shr *tmp240 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   441 label *label228
   442 label *label229
   443 label *label230
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  444 op add *tmp223 :createCombinedMask:x 4
+  445 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   446 op or :createBlockMaskRow:result 0 *tmp224
   447 label *label231
   448 label *label232
   449 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  450 op add *tmp223 :createCombinedMask:x 3
+  451 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   452 op or :createBlockMaskRow:result *tmp222 *tmp224
   453 label *label233
   454 label *label234
   455 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  456 op add *tmp223 :createCombinedMask:x 2
+  457 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   458 op or :createBlockMaskRow:result *tmp222 *tmp224
   459 label *label235
   460 label *label236
   461 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  462 op add *tmp223 :createCombinedMask:x 1
+  463 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   464 op or :createBlockMaskRow:result *tmp222 *tmp224
   465 label *label237
   466 label *label238
   467 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  468 op add *tmp223 :createCombinedMask:x 0
+  469 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   470 op or :createBlockMaskRow:result *tmp222 *tmp224
   471 label *label239
   472 label *label240
   473 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  474 op add *tmp223 :createCombinedMask:x -1
+  475 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   476 op or :createBlockMaskRow:result *tmp222 *tmp224
   477 label *label241
   478 label *label242
   479 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  480 op add *tmp223 :createCombinedMask:x -2
+  481 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   482 op or :createBlockMaskRow:result *tmp222 *tmp224
   483 label *label243
   484 label *label244
   485 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  486 op add *tmp223 :createCombinedMask:x -3
+  487 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   488 op or :createBlockMaskRow:result *tmp222 *tmp224
   489 label *label245
   490 label *label246
   491 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  492 op add *tmp223 :createCombinedMask:x -4
+  493 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   494 op or :createBlockMaskRow:result *tmp222 *tmp224
   495 label *label247
   496 label *label248
   497 set :createBlockMaskRow*retval :createBlockMaskRow:result
   498 jump *label249 always
   499 label *label249
-    * set :createAdjacentMask:row2 :createBlockMaskRow*retval
-    * op add *tmp234 :createAdjacentMask:y 3
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  500 set :createAdjacentMask:row2 :createBlockMaskRow:result
+  501 op add *tmp234 :createCombinedMask:y 3
+  502 set :createBlockMaskRow:x :createCombinedMask:x
   503 set :createBlockMaskRow:y *tmp234
   504 label *label250
   505 label *label251
   506 label *label252
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  507 op add *tmp223 :createAdjacentMask:x 4
+  508 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   509 op or :createBlockMaskRow:result 0 *tmp224
   510 label *label253
   511 label *label254
   512 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  513 op add *tmp223 :createAdjacentMask:x 3
+  514 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   515 op or :createBlockMaskRow:result *tmp222 *tmp224
   516 label *label255
   517 label *label256
   518 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  519 op add *tmp223 :createAdjacentMask:x 2
+  520 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   521 op or :createBlockMaskRow:result *tmp222 *tmp224
   522 label *label257
   523 label *label258
   524 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  525 op add *tmp223 :createAdjacentMask:x 1
+  526 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   527 op or :createBlockMaskRow:result *tmp222 *tmp224
   528 label *label259
   529 label *label260
   530 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  531 op add *tmp223 :createAdjacentMask:x 0
+  532 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   533 op or :createBlockMaskRow:result *tmp222 *tmp224
   534 label *label261
   535 label *label262
   536 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  537 op add *tmp223 :createAdjacentMask:x -1
+  538 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   539 op or :createBlockMaskRow:result *tmp222 *tmp224
   540 label *label263
   541 label *label264
   542 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  543 op add *tmp223 :createAdjacentMask:x -2
+  544 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   545 op or :createBlockMaskRow:result *tmp222 *tmp224
   546 label *label265
   547 label *label266
   548 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  549 op add *tmp223 :createAdjacentMask:x -3
+  550 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   551 op or :createBlockMaskRow:result *tmp222 *tmp224
   552 label *label267
   553 label *label268
   554 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  555 op add *tmp223 :createAdjacentMask:x -4
+  556 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   557 op or :createBlockMaskRow:result *tmp222 *tmp224
   558 label *label269
   559 label *label270
   560 set :createBlockMaskRow*retval :createBlockMaskRow:result
   561 jump *label271 always
   562 label *label271
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  563 set :createAdjacentMask:row1 :createBlockMaskRow:result
   564 set :createAdjacentMask:r 2
   565 label *label204
   566 label *label205
-    * op add *tmp236 :createAdjacentMask:y 2
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  567 op add *tmp236 :createCombinedMask:y 2
+  568 set :createBlockMaskRow:x :createCombinedMask:x
   569 set :createBlockMaskRow:y *tmp236
   570 label *label272
   571 label *label273
   572 label *label274
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  573 op add *tmp223 :createAdjacentMask:x 4
+  574 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   575 op or :createBlockMaskRow:result 0 *tmp224
   576 label *label275
   577 label *label276
   578 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  579 op add *tmp223 :createAdjacentMask:x 3
+  580 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   581 op or :createBlockMaskRow:result *tmp222 *tmp224
   582 label *label277
   583 label *label278
   584 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  585 op add *tmp223 :createAdjacentMask:x 2
+  586 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   587 op or :createBlockMaskRow:result *tmp222 *tmp224
   588 label *label279
   589 label *label280
   590 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  591 op add *tmp223 :createAdjacentMask:x 1
+  592 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   593 op or :createBlockMaskRow:result *tmp222 *tmp224
   594 label *label281
   595 label *label282
   596 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  597 op add *tmp223 :createAdjacentMask:x 0
+  598 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   599 op or :createBlockMaskRow:result *tmp222 *tmp224
   600 label *label283
   601 label *label284
   602 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  603 op add *tmp223 :createAdjacentMask:x -1
+  604 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   605 op or :createBlockMaskRow:result *tmp222 *tmp224
   606 label *label285
   607 label *label286
   608 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  609 op add *tmp223 :createAdjacentMask:x -2
+  610 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   611 op or :createBlockMaskRow:result *tmp222 *tmp224
   612 label *label287
   613 label *label288
   614 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  615 op add *tmp223 :createAdjacentMask:x -3
+  616 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   617 op or :createBlockMaskRow:result *tmp222 *tmp224
   618 label *label289
   619 label *label290
   620 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  621 op add *tmp223 :createAdjacentMask:x -4
+  622 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   623 op or :createBlockMaskRow:result *tmp222 *tmp224
   624 label *label291
   625 label *label292
 
   630 op or *tmp239 :createAdjacentMask:row2 *tmp238
   631 op shr *tmp240 :createAdjacentMask:row1 1
   632 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
-    * op shl *tmp243 :createAdjacentMask:result 7
+  633 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
+  634 op shl *tmp243 0 7
   635 op and *tmp244 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result *tmp243 *tmp244
+  636 op or :createAdjacentMask:result 0 *tmp244
   637 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  638 set :createAdjacentMask:row1 :createBlockMaskRow:result
   639 label *label207
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  640 op sub :createAdjacentMask:r 2 1
   641 label *label208
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  642 op add *tmp236 :createCombinedMask:y 1
+  643 set :createBlockMaskRow:x :createCombinedMask:x
   644 set :createBlockMaskRow:y *tmp236
   645 label *label294
   646 label *label295
   647 label *label296
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  648 op add *tmp223 :createAdjacentMask:x 4
+  649 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   650 op or :createBlockMaskRow:result 0 *tmp224
   651 label *label297
   652 label *label298
   653 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  654 op add *tmp223 :createAdjacentMask:x 3
+  655 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   656 op or :createBlockMaskRow:result *tmp222 *tmp224
   657 label *label299
   658 label *label300
   659 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  660 op add *tmp223 :createAdjacentMask:x 2
+  661 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   662 op or :createBlockMaskRow:result *tmp222 *tmp224
   663 label *label301
   664 label *label302
   665 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  666 op add *tmp223 :createAdjacentMask:x 1
+  667 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   668 op or :createBlockMaskRow:result *tmp222 *tmp224
   669 label *label303
   670 label *label304
   671 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  672 op add *tmp223 :createAdjacentMask:x 0
+  673 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   674 op or :createBlockMaskRow:result *tmp222 *tmp224
   675 label *label305
   676 label *label306
   677 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  678 op add *tmp223 :createAdjacentMask:x -1
+  679 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   680 op or :createBlockMaskRow:result *tmp222 *tmp224
   681 label *label307
   682 label *label308
   683 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  684 op add *tmp223 :createAdjacentMask:x -2
+  685 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   686 op or :createBlockMaskRow:result *tmp222 *tmp224
   687 label *label309
   688 label *label310
   689 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  690 op add *tmp223 :createAdjacentMask:x -3
+  691 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   692 op or :createBlockMaskRow:result *tmp222 *tmp224
   693 label *label311
   694 label *label312
   695 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  696 op add *tmp223 :createAdjacentMask:x -4
+  697 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   698 op or :createBlockMaskRow:result *tmp222 *tmp224
   699 label *label313
   700 label *label314
 
   705 op or *tmp239 :createAdjacentMask:row2 *tmp238
   706 op shr *tmp240 :createAdjacentMask:row1 1
   707 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  708 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
   709 op shl *tmp243 :createAdjacentMask:result 7
   710 op and *tmp244 :createAdjacentMask:mask 0xFE
   711 op or :createAdjacentMask:result *tmp243 *tmp244
   712 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  713 set :createAdjacentMask:row1 :createBlockMaskRow:result
   714 label *label210
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  715 op sub :createAdjacentMask:r 1 1
   716 label *label211
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  717 op add *tmp236 :createCombinedMask:y 0
+  718 set :createBlockMaskRow:x :createCombinedMask:x
   719 set :createBlockMaskRow:y *tmp236
   720 label *label316
   721 label *label317
   722 label *label318
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  723 op add *tmp223 :createAdjacentMask:x 4
+  724 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   725 op or :createBlockMaskRow:result 0 *tmp224
   726 label *label319
   727 label *label320
   728 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  729 op add *tmp223 :createAdjacentMask:x 3
+  730 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   731 op or :createBlockMaskRow:result *tmp222 *tmp224
   732 label *label321
   733 label *label322
   734 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  735 op add *tmp223 :createAdjacentMask:x 2
+  736 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   737 op or :createBlockMaskRow:result *tmp222 *tmp224
   738 label *label323
   739 label *label324
   740 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  741 op add *tmp223 :createAdjacentMask:x 1
+  742 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   743 op or :createBlockMaskRow:result *tmp222 *tmp224
   744 label *label325
   745 label *label326
   746 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  747 op add *tmp223 :createAdjacentMask:x 0
+  748 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   749 op or :createBlockMaskRow:result *tmp222 *tmp224
   750 label *label327
   751 label *label328
   752 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  753 op add *tmp223 :createAdjacentMask:x -1
+  754 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   755 op or :createBlockMaskRow:result *tmp222 *tmp224
   756 label *label329
   757 label *label330
   758 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  759 op add *tmp223 :createAdjacentMask:x -2
+  760 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   761 op or :createBlockMaskRow:result *tmp222 *tmp224
   762 label *label331
   763 label *label332
   764 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  765 op add *tmp223 :createAdjacentMask:x -3
+  766 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   767 op or :createBlockMaskRow:result *tmp222 *tmp224
   768 label *label333
   769 label *label334
   770 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  771 op add *tmp223 :createAdjacentMask:x -4
+  772 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   773 op or :createBlockMaskRow:result *tmp222 *tmp224
   774 label *label335
   775 label *label336
 
   780 op or *tmp239 :createAdjacentMask:row2 *tmp238
   781 op shr *tmp240 :createAdjacentMask:row1 1
   782 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  783 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
   784 op shl *tmp243 :createAdjacentMask:result 7
   785 op and *tmp244 :createAdjacentMask:mask 0xFE
   786 op or :createAdjacentMask:result *tmp243 *tmp244
   787 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  788 set :createAdjacentMask:row1 :createBlockMaskRow:result
   789 label *label213
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  790 op sub :createAdjacentMask:r 0 1
   791 label *label214
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  792 op add *tmp236 :createCombinedMask:y -1
+  793 set :createBlockMaskRow:x :createCombinedMask:x
   794 set :createBlockMaskRow:y *tmp236
   795 label *label338
   796 label *label339
   797 label *label340
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  798 op add *tmp223 :createAdjacentMask:x 4
+  799 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   800 op or :createBlockMaskRow:result 0 *tmp224
   801 label *label341
   802 label *label342
   803 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  804 op add *tmp223 :createAdjacentMask:x 3
+  805 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   806 op or :createBlockMaskRow:result *tmp222 *tmp224
   807 label *label343
   808 label *label344
   809 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  810 op add *tmp223 :createAdjacentMask:x 2
+  811 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   812 op or :createBlockMaskRow:result *tmp222 *tmp224
   813 label *label345
   814 label *label346
   815 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  816 op add *tmp223 :createAdjacentMask:x 1
+  817 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   818 op or :createBlockMaskRow:result *tmp222 *tmp224
   819 label *label347
   820 label *label348
   821 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  822 op add *tmp223 :createAdjacentMask:x 0
+  823 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   824 op or :createBlockMaskRow:result *tmp222 *tmp224
   825 label *label349
   826 label *label350
   827 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  828 op add *tmp223 :createAdjacentMask:x -1
+  829 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   830 op or :createBlockMaskRow:result *tmp222 *tmp224
   831 label *label351
   832 label *label352
   833 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  834 op add *tmp223 :createAdjacentMask:x -2
+  835 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   836 op or :createBlockMaskRow:result *tmp222 *tmp224
   837 label *label353
   838 label *label354
   839 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  840 op add *tmp223 :createAdjacentMask:x -3
+  841 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   842 op or :createBlockMaskRow:result *tmp222 *tmp224
   843 label *label355
   844 label *label356
   845 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  846 op add *tmp223 :createAdjacentMask:x -4
+  847 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   848 op or :createBlockMaskRow:result *tmp222 *tmp224
   849 label *label357
   850 label *label358
 
   855 op or *tmp239 :createAdjacentMask:row2 *tmp238
   856 op shr *tmp240 :createAdjacentMask:row1 1
   857 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  858 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
   859 op shl *tmp243 :createAdjacentMask:result 7
   860 op and *tmp244 :createAdjacentMask:mask 0xFE
   861 op or :createAdjacentMask:result *tmp243 *tmp244
   862 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  863 set :createAdjacentMask:row1 :createBlockMaskRow:result
   864 label *label216
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  865 op sub :createAdjacentMask:r -1 1
   866 label *label217
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  867 op add *tmp236 :createCombinedMask:y -2
+  868 set :createBlockMaskRow:x :createCombinedMask:x
   869 set :createBlockMaskRow:y *tmp236
   870 label *label360
   871 label *label361
   872 label *label362
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  873 op add *tmp223 :createAdjacentMask:x 4
+  874 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   875 op or :createBlockMaskRow:result 0 *tmp224
   876 label *label363
   877 label *label364
   878 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  879 op add *tmp223 :createAdjacentMask:x 3
+  880 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   881 op or :createBlockMaskRow:result *tmp222 *tmp224
   882 label *label365
   883 label *label366
   884 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  885 op add *tmp223 :createAdjacentMask:x 2
+  886 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   887 op or :createBlockMaskRow:result *tmp222 *tmp224
   888 label *label367
   889 label *label368
   890 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  891 op add *tmp223 :createAdjacentMask:x 1
+  892 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   893 op or :createBlockMaskRow:result *tmp222 *tmp224
   894 label *label369
   895 label *label370
   896 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  897 op add *tmp223 :createAdjacentMask:x 0
+  898 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   899 op or :createBlockMaskRow:result *tmp222 *tmp224
   900 label *label371
   901 label *label372
   902 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  903 op add *tmp223 :createAdjacentMask:x -1
+  904 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   905 op or :createBlockMaskRow:result *tmp222 *tmp224
   906 label *label373
   907 label *label374
   908 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  909 op add *tmp223 :createAdjacentMask:x -2
+  910 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   911 op or :createBlockMaskRow:result *tmp222 *tmp224
   912 label *label375
   913 label *label376
   914 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  915 op add *tmp223 :createAdjacentMask:x -3
+  916 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   917 op or :createBlockMaskRow:result *tmp222 *tmp224
   918 label *label377
   919 label *label378
   920 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  921 op add *tmp223 :createAdjacentMask:x -4
+  922 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   923 op or :createBlockMaskRow:result *tmp222 *tmp224
   924 label *label379
   925 label *label380
 
   930 op or *tmp239 :createAdjacentMask:row2 *tmp238
   931 op shr *tmp240 :createAdjacentMask:row1 1
   932 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+  933 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
   934 op shl *tmp243 :createAdjacentMask:result 7
   935 op and *tmp244 :createAdjacentMask:mask 0xFE
   936 op or :createAdjacentMask:result *tmp243 *tmp244
   937 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+  938 set :createAdjacentMask:row1 :createBlockMaskRow:result
   939 label *label219
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+  940 op sub :createAdjacentMask:r -2 1
   941 label *label220
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+  942 op add *tmp236 :createCombinedMask:y -3
+  943 set :createBlockMaskRow:x :createCombinedMask:x
   944 set :createBlockMaskRow:y *tmp236
   945 label *label382
   946 label *label383
   947 label *label384
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  948 op add *tmp223 :createAdjacentMask:x 4
+  949 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   950 op or :createBlockMaskRow:result 0 *tmp224
   951 label *label385
   952 label *label386
   953 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  954 op add *tmp223 :createAdjacentMask:x 3
+  955 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   956 op or :createBlockMaskRow:result *tmp222 *tmp224
   957 label *label387
   958 label *label388
   959 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  960 op add *tmp223 :createAdjacentMask:x 2
+  961 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   962 op or :createBlockMaskRow:result *tmp222 *tmp224
   963 label *label389
   964 label *label390
   965 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  966 op add *tmp223 :createAdjacentMask:x 1
+  967 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   968 op or :createBlockMaskRow:result *tmp222 *tmp224
   969 label *label391
   970 label *label392
   971 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  972 op add *tmp223 :createAdjacentMask:x 0
+  973 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   974 op or :createBlockMaskRow:result *tmp222 *tmp224
   975 label *label393
   976 label *label394
   977 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  978 op add *tmp223 :createAdjacentMask:x -1
+  979 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   980 op or :createBlockMaskRow:result *tmp222 *tmp224
   981 label *label395
   982 label *label396
   983 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  984 op add *tmp223 :createAdjacentMask:x -2
+  985 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   986 op or :createBlockMaskRow:result *tmp222 *tmp224
   987 label *label397
   988 label *label398
   989 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  990 op add *tmp223 :createAdjacentMask:x -3
+  991 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   992 op or :createBlockMaskRow:result *tmp222 *tmp224
   993 label *label399
   994 label *label400
   995 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+  996 op add *tmp223 :createAdjacentMask:x -4
+  997 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   998 op or :createBlockMaskRow:result *tmp222 *tmp224
   999 label *label401
  1000 label *label402
 
  1005 op or *tmp239 :createAdjacentMask:row2 *tmp238
  1006 op shr *tmp240 :createAdjacentMask:row1 1
  1007 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+ 1008 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
  1009 op shl *tmp243 :createAdjacentMask:result 7
  1010 op and *tmp244 :createAdjacentMask:mask 0xFE
  1011 op or :createAdjacentMask:result *tmp243 *tmp244
  1012 set :createAdjacentMask:row2 :createAdjacentMask:row1
-    * set :createAdjacentMask:row1 :createBlockMaskRow*retval
+ 1013 set :createAdjacentMask:row1 :createBlockMaskRow:result
  1014 label *label222
-    * op sub :createAdjacentMask:r :createAdjacentMask:r 1
+ 1015 op sub :createAdjacentMask:r -3 1
  1016 label *label223
-    * op add *tmp236 :createAdjacentMask:y :createAdjacentMask:r
-    * set :createBlockMaskRow:x :createAdjacentMask:x
+ 1017 op add *tmp236 :createCombinedMask:y -4
+ 1018 set :createBlockMaskRow:x :createCombinedMask:x
  1019 set :createBlockMaskRow:y *tmp236
  1020 label *label404
  1021 label *label405
  1022 label *label406
-    * op add *tmp223 :createBlockMaskRow:x 4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1023 op add *tmp223 :createAdjacentMask:x 4
+ 1024 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1025 op or :createBlockMaskRow:result 0 *tmp224
  1026 label *label407
  1027 label *label408
  1028 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1029 op add *tmp223 :createAdjacentMask:x 3
+ 1030 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1031 op or :createBlockMaskRow:result *tmp222 *tmp224
  1032 label *label409
  1033 label *label410
  1034 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1035 op add *tmp223 :createAdjacentMask:x 2
+ 1036 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1037 op or :createBlockMaskRow:result *tmp222 *tmp224
  1038 label *label411
  1039 label *label412
  1040 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1041 op add *tmp223 :createAdjacentMask:x 1
+ 1042 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1043 op or :createBlockMaskRow:result *tmp222 *tmp224
  1044 label *label413
  1045 label *label414
  1046 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x 0
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1047 op add *tmp223 :createAdjacentMask:x 0
+ 1048 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1049 op or :createBlockMaskRow:result *tmp222 *tmp224
  1050 label *label415
  1051 label *label416
  1052 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -1
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1053 op add *tmp223 :createAdjacentMask:x -1
+ 1054 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1055 op or :createBlockMaskRow:result *tmp222 *tmp224
  1056 label *label417
  1057 label *label418
  1058 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -2
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1059 op add *tmp223 :createAdjacentMask:x -2
+ 1060 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1061 op or :createBlockMaskRow:result *tmp222 *tmp224
  1062 label *label419
  1063 label *label420
  1064 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -3
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1065 op add *tmp223 :createAdjacentMask:x -3
+ 1066 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1067 op or :createBlockMaskRow:result *tmp222 *tmp224
  1068 label *label421
  1069 label *label422
  1070 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createBlockMaskRow:x -4
-    * ucontrol getBlock *tmp223 :createBlockMaskRow:y 0 *tmp224 0
+ 1071 op add *tmp223 :createAdjacentMask:x -4
+ 1072 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1073 op or :createBlockMaskRow:result *tmp222 *tmp224
  1074 label *label423
  1075 label *label424
 
  1080 op or *tmp239 :createAdjacentMask:row2 *tmp238
  1081 op shr *tmp240 :createAdjacentMask:row1 1
  1082 op or *tmp241 *tmp239 *tmp240
-    * op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow*retval
+ 1083 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
  1084 op shl *tmp243 :createAdjacentMask:result 7
  1085 op and *tmp244 :createAdjacentMask:mask 0xFE
  1086 op or :createAdjacentMask:result *tmp243 *tmp244

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-37 instructions):
 
   433 write false processor1 ":createTerrainMask*finished"
   434 write 1 processor1 "@counter"
   435 set :createAdjacentMask:x :createCombinedMask:x
-    * set :createAdjacentMask:y :createCombinedMask:y
-    * set :createAdjacentMask:result 0
   436 op add *tmp232 :createCombinedMask:y 4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp232
   437 label *label228
   438 label *label229
   439 label *label230
 
   490 op or :createBlockMaskRow:result *tmp222 *tmp224
   491 label *label247
   492 label *label248
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   493 jump *label249 always
   494 label *label249
   495 set :createAdjacentMask:row2 :createBlockMaskRow:result
   496 op add *tmp234 :createCombinedMask:y 3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp234
   497 label *label250
   498 label *label251
   499 label *label252
-    * op add *tmp223 :createAdjacentMask:x 4
+  500 op add *tmp223 :createCombinedMask:x 4
   501 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   502 op or :createBlockMaskRow:result 0 *tmp224
   503 label *label253
   504 label *label254
   505 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  506 op add *tmp223 :createCombinedMask:x 3
   507 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   508 op or :createBlockMaskRow:result *tmp222 *tmp224
   509 label *label255
   510 label *label256
   511 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  512 op add *tmp223 :createCombinedMask:x 2
   513 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   514 op or :createBlockMaskRow:result *tmp222 *tmp224
   515 label *label257
   516 label *label258
   517 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  518 op add *tmp223 :createCombinedMask:x 1
   519 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   520 op or :createBlockMaskRow:result *tmp222 *tmp224
   521 label *label259
   522 label *label260
   523 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  524 op add *tmp223 :createCombinedMask:x 0
   525 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   526 op or :createBlockMaskRow:result *tmp222 *tmp224
   527 label *label261
   528 label *label262
   529 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  530 op add *tmp223 :createCombinedMask:x -1
   531 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   532 op or :createBlockMaskRow:result *tmp222 *tmp224
   533 label *label263
   534 label *label264
   535 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  536 op add *tmp223 :createCombinedMask:x -2
   537 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   538 op or :createBlockMaskRow:result *tmp222 *tmp224
   539 label *label265
   540 label *label266
   541 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  542 op add *tmp223 :createCombinedMask:x -3
   543 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   544 op or :createBlockMaskRow:result *tmp222 *tmp224
   545 label *label267
   546 label *label268
   547 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  548 op add *tmp223 :createCombinedMask:x -4
   549 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   550 op or :createBlockMaskRow:result *tmp222 *tmp224
   551 label *label269
   552 label *label270
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   553 jump *label271 always
   554 label *label271
   555 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * set :createAdjacentMask:r 2
   556 label *label204
   557 label *label205
   558 op add *tmp236 :createCombinedMask:y 2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   559 label *label272
   560 label *label273
   561 label *label274
-    * op add *tmp223 :createAdjacentMask:x 4
+  562 op add *tmp223 :createCombinedMask:x 4
   563 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   564 op or :createBlockMaskRow:result 0 *tmp224
   565 label *label275
   566 label *label276
   567 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  568 op add *tmp223 :createCombinedMask:x 3
   569 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   570 op or :createBlockMaskRow:result *tmp222 *tmp224
   571 label *label277
   572 label *label278
   573 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  574 op add *tmp223 :createCombinedMask:x 2
   575 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   576 op or :createBlockMaskRow:result *tmp222 *tmp224
   577 label *label279
   578 label *label280
   579 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  580 op add *tmp223 :createCombinedMask:x 1
   581 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   582 op or :createBlockMaskRow:result *tmp222 *tmp224
   583 label *label281
   584 label *label282
   585 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  586 op add *tmp223 :createCombinedMask:x 0
   587 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   588 op or :createBlockMaskRow:result *tmp222 *tmp224
   589 label *label283
   590 label *label284
   591 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  592 op add *tmp223 :createCombinedMask:x -1
   593 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   594 op or :createBlockMaskRow:result *tmp222 *tmp224
   595 label *label285
   596 label *label286
   597 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  598 op add *tmp223 :createCombinedMask:x -2
   599 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   600 op or :createBlockMaskRow:result *tmp222 *tmp224
   601 label *label287
   602 label *label288
   603 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  604 op add *tmp223 :createCombinedMask:x -3
   605 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   606 op or :createBlockMaskRow:result *tmp222 *tmp224
   607 label *label289
   608 label *label290
   609 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  610 op add *tmp223 :createCombinedMask:x -4
   611 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   612 op or :createBlockMaskRow:result *tmp222 *tmp224
   613 label *label291
   614 label *label292
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   615 jump *label293 always
   616 label *label293
   617 op shl *tmp238 :createAdjacentMask:row1 1
 
   619 op shr *tmp240 :createAdjacentMask:row1 1
   620 op or *tmp241 *tmp239 *tmp240
   621 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
-    * op shl *tmp243 0 7
   622 op and *tmp244 :createAdjacentMask:mask 0xFE
   623 op or :createAdjacentMask:result 0 *tmp244
   624 set :createAdjacentMask:row2 :createAdjacentMask:row1
   625 set :createAdjacentMask:row1 :createBlockMaskRow:result
   626 label *label207
-    * op sub :createAdjacentMask:r 2 1
   627 label *label208
   628 op add *tmp236 :createCombinedMask:y 1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   629 label *label294
   630 label *label295
   631 label *label296
-    * op add *tmp223 :createAdjacentMask:x 4
+  632 op add *tmp223 :createCombinedMask:x 4
   633 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   634 op or :createBlockMaskRow:result 0 *tmp224
   635 label *label297
   636 label *label298
   637 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  638 op add *tmp223 :createCombinedMask:x 3
   639 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   640 op or :createBlockMaskRow:result *tmp222 *tmp224
   641 label *label299
   642 label *label300
   643 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  644 op add *tmp223 :createCombinedMask:x 2
   645 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   646 op or :createBlockMaskRow:result *tmp222 *tmp224
   647 label *label301
   648 label *label302
   649 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  650 op add *tmp223 :createCombinedMask:x 1
   651 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   652 op or :createBlockMaskRow:result *tmp222 *tmp224
   653 label *label303
   654 label *label304
   655 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  656 op add *tmp223 :createCombinedMask:x 0
   657 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   658 op or :createBlockMaskRow:result *tmp222 *tmp224
   659 label *label305
   660 label *label306
   661 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  662 op add *tmp223 :createCombinedMask:x -1
   663 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   664 op or :createBlockMaskRow:result *tmp222 *tmp224
   665 label *label307
   666 label *label308
   667 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  668 op add *tmp223 :createCombinedMask:x -2
   669 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   670 op or :createBlockMaskRow:result *tmp222 *tmp224
   671 label *label309
   672 label *label310
   673 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  674 op add *tmp223 :createCombinedMask:x -3
   675 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   676 op or :createBlockMaskRow:result *tmp222 *tmp224
   677 label *label311
   678 label *label312
   679 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  680 op add *tmp223 :createCombinedMask:x -4
   681 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   682 op or :createBlockMaskRow:result *tmp222 *tmp224
   683 label *label313
   684 label *label314
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   685 jump *label315 always
   686 label *label315
   687 op shl *tmp238 :createAdjacentMask:row1 1
 
   695 set :createAdjacentMask:row2 :createAdjacentMask:row1
   696 set :createAdjacentMask:row1 :createBlockMaskRow:result
   697 label *label210
-    * op sub :createAdjacentMask:r 1 1
   698 label *label211
   699 op add *tmp236 :createCombinedMask:y 0
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   700 label *label316
   701 label *label317
   702 label *label318
-    * op add *tmp223 :createAdjacentMask:x 4
+  703 op add *tmp223 :createCombinedMask:x 4
   704 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   705 op or :createBlockMaskRow:result 0 *tmp224
   706 label *label319
   707 label *label320
   708 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  709 op add *tmp223 :createCombinedMask:x 3
   710 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   711 op or :createBlockMaskRow:result *tmp222 *tmp224
   712 label *label321
   713 label *label322
   714 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  715 op add *tmp223 :createCombinedMask:x 2
   716 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   717 op or :createBlockMaskRow:result *tmp222 *tmp224
   718 label *label323
   719 label *label324
   720 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  721 op add *tmp223 :createCombinedMask:x 1
   722 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   723 op or :createBlockMaskRow:result *tmp222 *tmp224
   724 label *label325
   725 label *label326
   726 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  727 op add *tmp223 :createCombinedMask:x 0
   728 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   729 op or :createBlockMaskRow:result *tmp222 *tmp224
   730 label *label327
   731 label *label328
   732 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  733 op add *tmp223 :createCombinedMask:x -1
   734 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   735 op or :createBlockMaskRow:result *tmp222 *tmp224
   736 label *label329
   737 label *label330
   738 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  739 op add *tmp223 :createCombinedMask:x -2
   740 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   741 op or :createBlockMaskRow:result *tmp222 *tmp224
   742 label *label331
   743 label *label332
   744 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  745 op add *tmp223 :createCombinedMask:x -3
   746 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   747 op or :createBlockMaskRow:result *tmp222 *tmp224
   748 label *label333
   749 label *label334
   750 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  751 op add *tmp223 :createCombinedMask:x -4
   752 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   753 op or :createBlockMaskRow:result *tmp222 *tmp224
   754 label *label335
   755 label *label336
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   756 jump *label337 always
   757 label *label337
   758 op shl *tmp238 :createAdjacentMask:row1 1
 
   766 set :createAdjacentMask:row2 :createAdjacentMask:row1
   767 set :createAdjacentMask:row1 :createBlockMaskRow:result
   768 label *label213
-    * op sub :createAdjacentMask:r 0 1
   769 label *label214
   770 op add *tmp236 :createCombinedMask:y -1
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   771 label *label338
   772 label *label339
   773 label *label340
-    * op add *tmp223 :createAdjacentMask:x 4
+  774 op add *tmp223 :createCombinedMask:x 4
   775 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   776 op or :createBlockMaskRow:result 0 *tmp224
   777 label *label341
   778 label *label342
   779 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  780 op add *tmp223 :createCombinedMask:x 3
   781 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   782 op or :createBlockMaskRow:result *tmp222 *tmp224
   783 label *label343
   784 label *label344
   785 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  786 op add *tmp223 :createCombinedMask:x 2
   787 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   788 op or :createBlockMaskRow:result *tmp222 *tmp224
   789 label *label345
   790 label *label346
   791 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  792 op add *tmp223 :createCombinedMask:x 1
   793 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   794 op or :createBlockMaskRow:result *tmp222 *tmp224
   795 label *label347
   796 label *label348
   797 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  798 op add *tmp223 :createCombinedMask:x 0
   799 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   800 op or :createBlockMaskRow:result *tmp222 *tmp224
   801 label *label349
   802 label *label350
   803 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  804 op add *tmp223 :createCombinedMask:x -1
   805 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   806 op or :createBlockMaskRow:result *tmp222 *tmp224
   807 label *label351
   808 label *label352
   809 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  810 op add *tmp223 :createCombinedMask:x -2
   811 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   812 op or :createBlockMaskRow:result *tmp222 *tmp224
   813 label *label353
   814 label *label354
   815 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  816 op add *tmp223 :createCombinedMask:x -3
   817 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   818 op or :createBlockMaskRow:result *tmp222 *tmp224
   819 label *label355
   820 label *label356
   821 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  822 op add *tmp223 :createCombinedMask:x -4
   823 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   824 op or :createBlockMaskRow:result *tmp222 *tmp224
   825 label *label357
   826 label *label358
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   827 jump *label359 always
   828 label *label359
   829 op shl *tmp238 :createAdjacentMask:row1 1
 
   837 set :createAdjacentMask:row2 :createAdjacentMask:row1
   838 set :createAdjacentMask:row1 :createBlockMaskRow:result
   839 label *label216
-    * op sub :createAdjacentMask:r -1 1
   840 label *label217
   841 op add *tmp236 :createCombinedMask:y -2
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   842 label *label360
   843 label *label361
   844 label *label362
-    * op add *tmp223 :createAdjacentMask:x 4
+  845 op add *tmp223 :createCombinedMask:x 4
   846 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   847 op or :createBlockMaskRow:result 0 *tmp224
   848 label *label363
   849 label *label364
   850 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  851 op add *tmp223 :createCombinedMask:x 3
   852 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   853 op or :createBlockMaskRow:result *tmp222 *tmp224
   854 label *label365
   855 label *label366
   856 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  857 op add *tmp223 :createCombinedMask:x 2
   858 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   859 op or :createBlockMaskRow:result *tmp222 *tmp224
   860 label *label367
   861 label *label368
   862 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  863 op add *tmp223 :createCombinedMask:x 1
   864 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   865 op or :createBlockMaskRow:result *tmp222 *tmp224
   866 label *label369
   867 label *label370
   868 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  869 op add *tmp223 :createCombinedMask:x 0
   870 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   871 op or :createBlockMaskRow:result *tmp222 *tmp224
   872 label *label371
   873 label *label372
   874 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  875 op add *tmp223 :createCombinedMask:x -1
   876 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   877 op or :createBlockMaskRow:result *tmp222 *tmp224
   878 label *label373
   879 label *label374
   880 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  881 op add *tmp223 :createCombinedMask:x -2
   882 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   883 op or :createBlockMaskRow:result *tmp222 *tmp224
   884 label *label375
   885 label *label376
   886 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  887 op add *tmp223 :createCombinedMask:x -3
   888 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   889 op or :createBlockMaskRow:result *tmp222 *tmp224
   890 label *label377
   891 label *label378
   892 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  893 op add *tmp223 :createCombinedMask:x -4
   894 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   895 op or :createBlockMaskRow:result *tmp222 *tmp224
   896 label *label379
   897 label *label380
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   898 jump *label381 always
   899 label *label381
   900 op shl *tmp238 :createAdjacentMask:row1 1
 
   908 set :createAdjacentMask:row2 :createAdjacentMask:row1
   909 set :createAdjacentMask:row1 :createBlockMaskRow:result
   910 label *label219
-    * op sub :createAdjacentMask:r -2 1
   911 label *label220
   912 op add *tmp236 :createCombinedMask:y -3
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   913 label *label382
   914 label *label383
   915 label *label384
-    * op add *tmp223 :createAdjacentMask:x 4
+  916 op add *tmp223 :createCombinedMask:x 4
   917 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   918 op or :createBlockMaskRow:result 0 *tmp224
   919 label *label385
   920 label *label386
   921 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  922 op add *tmp223 :createCombinedMask:x 3
   923 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   924 op or :createBlockMaskRow:result *tmp222 *tmp224
   925 label *label387
   926 label *label388
   927 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  928 op add *tmp223 :createCombinedMask:x 2
   929 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   930 op or :createBlockMaskRow:result *tmp222 *tmp224
   931 label *label389
   932 label *label390
   933 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+  934 op add *tmp223 :createCombinedMask:x 1
   935 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   936 op or :createBlockMaskRow:result *tmp222 *tmp224
   937 label *label391
   938 label *label392
   939 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+  940 op add *tmp223 :createCombinedMask:x 0
   941 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   942 op or :createBlockMaskRow:result *tmp222 *tmp224
   943 label *label393
   944 label *label394
   945 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+  946 op add *tmp223 :createCombinedMask:x -1
   947 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   948 op or :createBlockMaskRow:result *tmp222 *tmp224
   949 label *label395
   950 label *label396
   951 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+  952 op add *tmp223 :createCombinedMask:x -2
   953 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   954 op or :createBlockMaskRow:result *tmp222 *tmp224
   955 label *label397
   956 label *label398
   957 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+  958 op add *tmp223 :createCombinedMask:x -3
   959 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   960 op or :createBlockMaskRow:result *tmp222 *tmp224
   961 label *label399
   962 label *label400
   963 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+  964 op add *tmp223 :createCombinedMask:x -4
   965 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   966 op or :createBlockMaskRow:result *tmp222 *tmp224
   967 label *label401
   968 label *label402
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
   969 jump *label403 always
   970 label *label403
   971 op shl *tmp238 :createAdjacentMask:row1 1
 
   979 set :createAdjacentMask:row2 :createAdjacentMask:row1
   980 set :createAdjacentMask:row1 :createBlockMaskRow:result
   981 label *label222
-    * op sub :createAdjacentMask:r -3 1
   982 label *label223
   983 op add *tmp236 :createCombinedMask:y -4
-    * set :createBlockMaskRow:x :createCombinedMask:x
-    * set :createBlockMaskRow:y *tmp236
   984 label *label404
   985 label *label405
   986 label *label406
-    * op add *tmp223 :createAdjacentMask:x 4
+  987 op add *tmp223 :createCombinedMask:x 4
   988 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   989 op or :createBlockMaskRow:result 0 *tmp224
   990 label *label407
   991 label *label408
   992 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 3
+  993 op add *tmp223 :createCombinedMask:x 3
   994 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   995 op or :createBlockMaskRow:result *tmp222 *tmp224
   996 label *label409
   997 label *label410
   998 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 2
+  999 op add *tmp223 :createCombinedMask:x 2
  1000 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1001 op or :createBlockMaskRow:result *tmp222 *tmp224
  1002 label *label411
  1003 label *label412
  1004 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 1
+ 1005 op add *tmp223 :createCombinedMask:x 1
  1006 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1007 op or :createBlockMaskRow:result *tmp222 *tmp224
  1008 label *label413
  1009 label *label414
  1010 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x 0
+ 1011 op add *tmp223 :createCombinedMask:x 0
  1012 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1013 op or :createBlockMaskRow:result *tmp222 *tmp224
  1014 label *label415
  1015 label *label416
  1016 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -1
+ 1017 op add *tmp223 :createCombinedMask:x -1
  1018 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1019 op or :createBlockMaskRow:result *tmp222 *tmp224
  1020 label *label417
  1021 label *label418
  1022 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -2
+ 1023 op add *tmp223 :createCombinedMask:x -2
  1024 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1025 op or :createBlockMaskRow:result *tmp222 *tmp224
  1026 label *label419
  1027 label *label420
  1028 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -3
+ 1029 op add *tmp223 :createCombinedMask:x -3
  1030 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1031 op or :createBlockMaskRow:result *tmp222 *tmp224
  1032 label *label421
  1033 label *label422
  1034 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createAdjacentMask:x -4
+ 1035 op add *tmp223 :createCombinedMask:x -4
  1036 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
  1037 op or :createBlockMaskRow:result *tmp222 *tmp224
  1038 label *label423
  1039 label *label424
-    * set :createBlockMaskRow*retval :createBlockMaskRow:result
  1040 jump *label425 always
  1041 label *label425
  1042 op shl *tmp238 :createAdjacentMask:row1 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
 
   432 write :createCombinedMask:y processor1 ":createTerrainMask:y"
   433 write false processor1 ":createTerrainMask*finished"
   434 write 1 processor1 "@counter"
-    * set :createAdjacentMask:x :createCombinedMask:x
   435 op add *tmp232 :createCombinedMask:y 4
   436 label *label228
   437 label *label229

Modifications by Inline function 'tryPlaceGenerator' defined at OreLocator.mnd:344:1 (+71 instructions):
 
   328 label *label85
   329 return :findPossiblePlacement*retaddr
   330 end
-    * label *label10
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
-    * set :findPossiblePlacement:width 2
-    * set :findPossiblePlacement:height 4
-    * setaddr :findPossiblePlacement*retaddr *label99 (h:*label99)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label99) (h:*label99)
-    * label *label99
-    * jump *label100 lessThan :findPossiblePlacement*retval 0
-    * jump *label102 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label102
-    * label *label103
-    * op add *tmp183 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp183 :findPossiblePlacement:x
-    * op add *tmp185 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp185 :findPossiblePlacement:y
-    * op add .generatorX *tmp183 :findPossiblePlacement:x
-    * op add *tmp189 :tryPlaceGenerator:centerY 2.5
-    * op add .generatorY *tmp189 :findPossiblePlacement:y
-    * op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
-    * jump *label101 always
-    * label *label100
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
-    * set :findPossiblePlacement:width 4
-    * set :findPossiblePlacement:height 2
-    * setaddr :findPossiblePlacement*retaddr *label104 (h:*label104)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label104) (h:*label104)
-    * label *label104
-    * jump *label105 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label105
-    * label *label106
-    * op add *tmp195 :tryPlaceGenerator:centerX 0.5
-    * op add .water2X *tmp195 :findPossiblePlacement:x
-    * op add *tmp197 :tryPlaceGenerator:centerY 0.5
-    * op add .water2Y *tmp197 :findPossiblePlacement:y
-    * op add *tmp199 :tryPlaceGenerator:centerX 2.5
-    * op add .generatorX *tmp199 :findPossiblePlacement:x
-    * op add .generatorY *tmp197 :findPossiblePlacement:y
-    * op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
-    * label *label101
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label107 (h:*label107)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label107) (h:*label107)
-    * label *label107
-    * jump *label108 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label108
-    * label *label109
-    * op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp209 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp209
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label110 (h:*label110)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label110) (h:*label110)
-    * label *label110
-    * jump *label111 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label111
-    * label *label112
-    * op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * op shl *tmp215 1 :findPossiblePlacement*retval
-    * op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp215
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask 1
-    * set :findPossiblePlacement:width 1
-    * set :findPossiblePlacement:height 1
-    * setaddr :findPossiblePlacement*retaddr *label113 (h:*label113)
-    * call *label9 *invalid :findPossiblePlacement*retval (m:*label113) (h:*label113)
-    * label *label113
-    * jump *label114 greaterThanEq :findPossiblePlacement*retval 0
-    * set :tryPlaceGenerator*retval false
-    * jump *label98 always
-    * label *label114
-    * label *label115
-    * op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
-    * op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
-    * set :tryPlaceGenerator*retval true
-    * jump *label98 always
-    * label *label98
-    * return :tryPlaceGenerator*retaddr
-    * end
   331 label *label12
   332 write @unit processor1 ":createTerrainMask:unit"
   333 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
  1036 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
  1037 set :tryPlaceGenerator:generatorHorizontal 1935
  1038 set :tryPlaceGenerator:generatorVertical 6340995
-    * setaddr :tryPlaceGenerator*retaddr *label146 (h:*label146)
-    * call *label10 *invalid :tryPlaceGenerator*retval (m:*label146) (h:*label146)
-    * label *label146
+ 1039 label *label426
+ 1040 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1041 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1042 set :findPossiblePlacement:width 2
+ 1043 set :findPossiblePlacement:height 4
+ 1044 setaddr :findPossiblePlacement*retaddr *label427 (h:*label427)
+ 1045 call *label9 *invalid :findPossiblePlacement*retval (m:*label427) (h:*label427)
+ 1046 label *label427
+ 1047 jump *label430 lessThan :findPossiblePlacement*retval 0
+ 1048 jump *label428 greaterThanEq :findPossiblePlacement*retval 0
+ 1049 set :tryPlaceGenerator*retval false
+ 1050 jump *label444 always
+ 1051 label *label428
+ 1052 label *label429
+ 1053 op add *tmp183 :tryPlaceGenerator:centerX 0.5
+ 1054 op add .water2X *tmp183 :findPossiblePlacement:x
+ 1055 op add *tmp185 :tryPlaceGenerator:centerY 0.5
+ 1056 op add .water2Y *tmp185 :findPossiblePlacement:y
+ 1057 op add .generatorX *tmp183 :findPossiblePlacement:x
+ 1058 op add *tmp189 :tryPlaceGenerator:centerY 2.5
+ 1059 op add .generatorY *tmp189 :findPossiblePlacement:y
+ 1060 op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1061 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
+ 1062 jump *label434 always
+ 1063 label *label430
+ 1064 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1065 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1066 set :findPossiblePlacement:width 4
+ 1067 set :findPossiblePlacement:height 2
+ 1068 setaddr :findPossiblePlacement*retaddr *label431 (h:*label431)
+ 1069 call *label9 *invalid :findPossiblePlacement*retval (m:*label431) (h:*label431)
+ 1070 label *label431
+ 1071 jump *label432 greaterThanEq :findPossiblePlacement*retval 0
+ 1072 set :tryPlaceGenerator*retval false
+ 1073 jump *label444 always
+ 1074 label *label432
+ 1075 label *label433
+ 1076 op add *tmp195 :tryPlaceGenerator:centerX 0.5
+ 1077 op add .water2X *tmp195 :findPossiblePlacement:x
+ 1078 op add *tmp197 :tryPlaceGenerator:centerY 0.5
+ 1079 op add .water2Y *tmp197 :findPossiblePlacement:y
+ 1080 op add *tmp199 :tryPlaceGenerator:centerX 2.5
+ 1081 op add .generatorX *tmp199 :findPossiblePlacement:x
+ 1082 op add .generatorY *tmp197 :findPossiblePlacement:y
+ 1083 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1084 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
+ 1085 label *label434
+ 1086 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1087 set :findPossiblePlacement:placementMask 1
+ 1088 set :findPossiblePlacement:width 1
+ 1089 set :findPossiblePlacement:height 1
+ 1090 setaddr :findPossiblePlacement*retaddr *label435 (h:*label435)
+ 1091 call *label9 *invalid :findPossiblePlacement*retval (m:*label435) (h:*label435)
+ 1092 label *label435
+ 1093 jump *label436 greaterThanEq :findPossiblePlacement*retval 0
+ 1094 set :tryPlaceGenerator*retval false
+ 1095 jump *label444 always
+ 1096 label *label436
+ 1097 label *label437
+ 1098 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1099 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1100 op shl *tmp209 1 :findPossiblePlacement*retval
+ 1101 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp209
+ 1102 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1103 set :findPossiblePlacement:placementMask 1
+ 1104 set :findPossiblePlacement:width 1
+ 1105 set :findPossiblePlacement:height 1
+ 1106 setaddr :findPossiblePlacement*retaddr *label438 (h:*label438)
+ 1107 call *label9 *invalid :findPossiblePlacement*retval (m:*label438) (h:*label438)
+ 1108 label *label438
+ 1109 jump *label439 greaterThanEq :findPossiblePlacement*retval 0
+ 1110 set :tryPlaceGenerator*retval false
+ 1111 jump *label444 always
+ 1112 label *label439
+ 1113 label *label440
+ 1114 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1115 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1116 op shl *tmp215 1 :findPossiblePlacement*retval
+ 1117 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp215
+ 1118 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1119 set :findPossiblePlacement:placementMask 1
+ 1120 set :findPossiblePlacement:width 1
+ 1121 set :findPossiblePlacement:height 1
+ 1122 setaddr :findPossiblePlacement*retaddr *label441 (h:*label441)
+ 1123 call *label9 *invalid :findPossiblePlacement*retval (m:*label441) (h:*label441)
+ 1124 label *label441
+ 1125 jump *label442 greaterThanEq :findPossiblePlacement*retval 0
+ 1126 set :tryPlaceGenerator*retval false
+ 1127 jump *label444 always
+ 1128 label *label442
+ 1129 label *label443
+ 1130 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1131 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1132 set :tryPlaceGenerator*retval true
+ 1133 jump *label444 always
+ 1134 label *label444
  1135 jump *label147 equal :tryPlaceGenerator*retval false
  1136 set :layoutThoriumDrillAtLocation*retval true
  1137 jump *label129 always
 
  1211 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
  1212 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1213 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * setaddr :tryPlaceGenerator*retaddr *label166 (h:*label166)
-    * call *label10 *invalid :tryPlaceGenerator*retval (m:*label166) (h:*label166)
-    * label *label166
+ 1214 label *label445
+ 1215 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1216 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1217 set :findPossiblePlacement:width 2
+ 1218 set :findPossiblePlacement:height 4
+ 1219 setaddr :findPossiblePlacement*retaddr *label446 (h:*label446)
+ 1220 call *label9 *invalid :findPossiblePlacement*retval (m:*label446) (h:*label446)
+ 1221 label *label446
+ 1222 jump *label449 lessThan :findPossiblePlacement*retval 0
+ 1223 jump *label447 greaterThanEq :findPossiblePlacement*retval 0
+ 1224 set :tryPlaceGenerator*retval false
+ 1225 jump *label463 always
+ 1226 label *label447
+ 1227 label *label448
+ 1228 op add *tmp183 :tryPlaceGenerator:centerX 0.5
+ 1229 op add .water2X *tmp183 :findPossiblePlacement:x
+ 1230 op add *tmp185 :tryPlaceGenerator:centerY 0.5
+ 1231 op add .water2Y *tmp185 :findPossiblePlacement:y
+ 1232 op add .generatorX *tmp183 :findPossiblePlacement:x
+ 1233 op add *tmp189 :tryPlaceGenerator:centerY 2.5
+ 1234 op add .generatorY *tmp189 :findPossiblePlacement:y
+ 1235 op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPossiblePlacement*retval
+ 1236 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp191
+ 1237 jump *label453 always
+ 1238 label *label449
+ 1239 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1240 set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorHorizontal
+ 1241 set :findPossiblePlacement:width 4
+ 1242 set :findPossiblePlacement:height 2
+ 1243 setaddr :findPossiblePlacement*retaddr *label450 (h:*label450)
+ 1244 call *label9 *invalid :findPossiblePlacement*retval (m:*label450) (h:*label450)
+ 1245 label *label450
+ 1246 jump *label451 greaterThanEq :findPossiblePlacement*retval 0
+ 1247 set :tryPlaceGenerator*retval false
+ 1248 jump *label463 always
+ 1249 label *label451
+ 1250 label *label452
+ 1251 op add *tmp195 :tryPlaceGenerator:centerX 0.5
+ 1252 op add .water2X *tmp195 :findPossiblePlacement:x
+ 1253 op add *tmp197 :tryPlaceGenerator:centerY 0.5
+ 1254 op add .water2Y *tmp197 :findPossiblePlacement:y
+ 1255 op add *tmp199 :tryPlaceGenerator:centerX 2.5
+ 1256 op add .generatorX *tmp199 :findPossiblePlacement:x
+ 1257 op add .generatorY *tmp197 :findPossiblePlacement:y
+ 1258 op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findPossiblePlacement*retval
+ 1259 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp203
+ 1260 label *label453
+ 1261 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1262 set :findPossiblePlacement:placementMask 1
+ 1263 set :findPossiblePlacement:width 1
+ 1264 set :findPossiblePlacement:height 1
+ 1265 setaddr :findPossiblePlacement*retaddr *label454 (h:*label454)
+ 1266 call *label9 *invalid :findPossiblePlacement*retval (m:*label454) (h:*label454)
+ 1267 label *label454
+ 1268 jump *label455 greaterThanEq :findPossiblePlacement*retval 0
+ 1269 set :tryPlaceGenerator*retval false
+ 1270 jump *label463 always
+ 1271 label *label455
+ 1272 label *label456
+ 1273 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1274 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1275 op shl *tmp209 1 :findPossiblePlacement*retval
+ 1276 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp209
+ 1277 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1278 set :findPossiblePlacement:placementMask 1
+ 1279 set :findPossiblePlacement:width 1
+ 1280 set :findPossiblePlacement:height 1
+ 1281 setaddr :findPossiblePlacement*retaddr *label457 (h:*label457)
+ 1282 call *label9 *invalid :findPossiblePlacement*retval (m:*label457) (h:*label457)
+ 1283 label *label457
+ 1284 jump *label458 greaterThanEq :findPossiblePlacement*retval 0
+ 1285 set :tryPlaceGenerator*retval false
+ 1286 jump *label463 always
+ 1287 label *label458
+ 1288 label *label459
+ 1289 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1290 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1291 op shl *tmp215 1 :findPossiblePlacement*retval
+ 1292 op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terrainMask *tmp215
+ 1293 set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
+ 1294 set :findPossiblePlacement:placementMask 1
+ 1295 set :findPossiblePlacement:width 1
+ 1296 set :findPossiblePlacement:height 1
+ 1297 setaddr :findPossiblePlacement*retaddr *label460 (h:*label460)
+ 1298 call *label9 *invalid :findPossiblePlacement*retval (m:*label460) (h:*label460)
+ 1299 label *label460
+ 1300 jump *label461 greaterThanEq :findPossiblePlacement*retval 0
+ 1301 set :tryPlaceGenerator*retval false
+ 1302 jump *label463 always
+ 1303 label *label461
+ 1304 label *label462
+ 1305 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
+ 1306 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
+ 1307 set :tryPlaceGenerator*retval true
+ 1308 jump *label463 always
+ 1309 label *label463
  1310 jump *label167 equal :tryPlaceGenerator*retval false
  1311 set :layoutThoriumDrillAtLocation*retval true
  1312 jump *label129 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
  1037 set :tryPlaceGenerator:generatorHorizontal 1935
  1038 set :tryPlaceGenerator:generatorVertical 6340995
  1039 label *label426
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1040 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
+ 1041 set :findPossiblePlacement:placementMask 6340995
  1042 set :findPossiblePlacement:width 2
  1043 set :findPossiblePlacement:height 4
  1044 setaddr :findPossiblePlacement*retaddr *label427 (h:*label427)
 
  1212 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
  1213 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
  1214 label *label445
-    * set :findPossiblePlacement:terrainMask :tryPlaceGenerator:terrainMask
-    * set :findPossiblePlacement:placementMask :tryPlaceGenerator:generatorVertical
+ 1215 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
+ 1216 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
  1217 set :findPossiblePlacement:width 2
  1218 set :findPossiblePlacement:height 4
  1219 setaddr :findPossiblePlacement*retaddr *label446 (h:*label446)

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-15 instructions):
 
   142 jump *label178 lessThan :visited:i *tmp84
   143 label *label49
   144 set *tmp83 false
-    * jump *label46 always
   145 label *label46
   146 jump *label52 notEqual *tmp83 false
   147 op div *tmp99 2 .angle
 
   160 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   161 label *label29
   162 set *tmp37 false
-    * jump *label26 always
   163 label *label26
   164 set :findDrillLocationLocal:oreX :locateOreAway:x
   165 set :findDrillLocationLocal:oreY :locateOreAway:y
 
   322 jump *label179 lessThanEq :findPossiblePlacement:y 3
   323 label *label88
   324 set :findPossiblePlacement*retval -1
-    * jump *label85 always
   325 label *label85
   326 return :findPossiblePlacement*retaddr
   327 end
 
   388 op or :createBlockMaskRow:result *tmp222 *tmp224
   389 label *label247
   390 label *label248
-    * jump *label249 always
   391 label *label249
   392 set :createAdjacentMask:row2 :createBlockMaskRow:result
   393 op add *tmp234 :createCombinedMask:y 3
 
   447 op or :createBlockMaskRow:result *tmp222 *tmp224
   448 label *label269
   449 label *label270
-    * jump *label271 always
   450 label *label271
   451 set :createAdjacentMask:row1 :createBlockMaskRow:result
   452 label *label204
 
   508 op or :createBlockMaskRow:result *tmp222 *tmp224
   509 label *label291
   510 label *label292
-    * jump *label293 always
   511 label *label293
   512 op shl *tmp238 :createAdjacentMask:row1 1
   513 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   577 op or :createBlockMaskRow:result *tmp222 *tmp224
   578 label *label313
   579 label *label314
-    * jump *label315 always
   580 label *label315
   581 op shl *tmp238 :createAdjacentMask:row1 1
   582 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   647 op or :createBlockMaskRow:result *tmp222 *tmp224
   648 label *label335
   649 label *label336
-    * jump *label337 always
   650 label *label337
   651 op shl *tmp238 :createAdjacentMask:row1 1
   652 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   717 op or :createBlockMaskRow:result *tmp222 *tmp224
   718 label *label357
   719 label *label358
-    * jump *label359 always
   720 label *label359
   721 op shl *tmp238 :createAdjacentMask:row1 1
   722 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   787 op or :createBlockMaskRow:result *tmp222 *tmp224
   788 label *label379
   789 label *label380
-    * jump *label381 always
   790 label *label381
   791 op shl *tmp238 :createAdjacentMask:row1 1
   792 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   857 op or :createBlockMaskRow:result *tmp222 *tmp224
   858 label *label401
   859 label *label402
-    * jump *label403 always
   860 label *label403
   861 op shl *tmp238 :createAdjacentMask:row1 1
   862 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   927 op or :createBlockMaskRow:result *tmp222 *tmp224
   928 label *label423
   929 label *label424
-    * jump *label425 always
   930 label *label425
   931 op shl *tmp238 :createAdjacentMask:row1 1
   932 op or *tmp239 :createAdjacentMask:row2 *tmp238
 
   946 jump *label128 equal *tmp247 false
   947 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
   948 op or :createCombinedMask*retval *tmp231 :createCombinedMask:terrainMask
-    * jump *label120 always
   949 label *label120
   950 return :createCombinedMask*retaddr
   951 end
 
  1188 label *label162
  1189 label *label163
  1190 set *tmp323 :shiftMask:mask
-    * jump *label157 always
  1191 label *label157
  1192 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp323
  1193 op sub *tmp348 .drillX :layoutThoriumDrillAtLocation:sx
 
  1303 multilabel *label155 (m:marker0)
  1304 label *label151
  1305 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
  1306 label *label129
  1307 return :layoutThoriumDrillAtLocation*retaddr
  1308 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   337 label *label230
   338 op add *tmp223 :createCombinedMask:x 4
   339 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  340 set :createBlockMaskRow:result *tmp224
   341 label *label231
   342 label *label232
   343 op shl *tmp222 :createBlockMaskRow:result 1
 
   359 label *label237
   360 label *label238
   361 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  362 set *tmp223 :createCombinedMask:x
   363 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   364 op or :createBlockMaskRow:result *tmp222 *tmp224
   365 label *label239
 
   396 label *label252
   397 op add *tmp223 :createCombinedMask:x 4
   398 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  399 set :createBlockMaskRow:result *tmp224
   400 label *label253
   401 label *label254
   402 op shl *tmp222 :createBlockMaskRow:result 1
 
   418 label *label259
   419 label *label260
   420 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  421 set *tmp223 :createCombinedMask:x
   422 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   423 op or :createBlockMaskRow:result *tmp222 *tmp224
   424 label *label261
 
   457 label *label274
   458 op add *tmp223 :createCombinedMask:x 4
   459 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  460 set :createBlockMaskRow:result *tmp224
   461 label *label275
   462 label *label276
   463 op shl *tmp222 :createBlockMaskRow:result 1
 
   479 label *label281
   480 label *label282
   481 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  482 set *tmp223 :createCombinedMask:x
   483 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   484 op or :createBlockMaskRow:result *tmp222 *tmp224
   485 label *label283
 
   515 op or *tmp241 *tmp239 *tmp240
   516 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
   517 op and *tmp244 :createAdjacentMask:mask 0xFE
-    * op or :createAdjacentMask:result 0 *tmp244
+  518 set :createAdjacentMask:result *tmp244
   519 set :createAdjacentMask:row2 :createAdjacentMask:row1
   520 set :createAdjacentMask:row1 :createBlockMaskRow:result
   521 label *label207
 
   526 label *label296
   527 op add *tmp223 :createCombinedMask:x 4
   528 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  529 set :createBlockMaskRow:result *tmp224
   530 label *label297
   531 label *label298
   532 op shl *tmp222 :createBlockMaskRow:result 1
 
   548 label *label303
   549 label *label304
   550 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  551 set *tmp223 :createCombinedMask:x
   552 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   553 op or :createBlockMaskRow:result *tmp222 *tmp224
   554 label *label305
 
   590 set :createAdjacentMask:row1 :createBlockMaskRow:result
   591 label *label210
   592 label *label211
-    * op add *tmp236 :createCombinedMask:y 0
+  593 set *tmp236 :createCombinedMask:y
   594 label *label316
   595 label *label317
   596 label *label318
   597 op add *tmp223 :createCombinedMask:x 4
   598 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  599 set :createBlockMaskRow:result *tmp224
   600 label *label319
   601 label *label320
   602 op shl *tmp222 :createBlockMaskRow:result 1
 
   618 label *label325
   619 label *label326
   620 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  621 set *tmp223 :createCombinedMask:x
   622 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   623 op or :createBlockMaskRow:result *tmp222 *tmp224
   624 label *label327
 
   666 label *label340
   667 op add *tmp223 :createCombinedMask:x 4
   668 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  669 set :createBlockMaskRow:result *tmp224
   670 label *label341
   671 label *label342
   672 op shl *tmp222 :createBlockMaskRow:result 1
 
   688 label *label347
   689 label *label348
   690 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  691 set *tmp223 :createCombinedMask:x
   692 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   693 op or :createBlockMaskRow:result *tmp222 *tmp224
   694 label *label349
 
   736 label *label362
   737 op add *tmp223 :createCombinedMask:x 4
   738 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  739 set :createBlockMaskRow:result *tmp224
   740 label *label363
   741 label *label364
   742 op shl *tmp222 :createBlockMaskRow:result 1
 
   758 label *label369
   759 label *label370
   760 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  761 set *tmp223 :createCombinedMask:x
   762 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   763 op or :createBlockMaskRow:result *tmp222 *tmp224
   764 label *label371
 
   806 label *label384
   807 op add *tmp223 :createCombinedMask:x 4
   808 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  809 set :createBlockMaskRow:result *tmp224
   810 label *label385
   811 label *label386
   812 op shl *tmp222 :createBlockMaskRow:result 1
 
   828 label *label391
   829 label *label392
   830 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  831 set *tmp223 :createCombinedMask:x
   832 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   833 op or :createBlockMaskRow:result *tmp222 *tmp224
   834 label *label393
 
   876 label *label406
   877 op add *tmp223 :createCombinedMask:x 4
   878 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * op or :createBlockMaskRow:result 0 *tmp224
+  879 set :createBlockMaskRow:result *tmp224
   880 label *label407
   881 label *label408
   882 op shl *tmp222 :createBlockMaskRow:result 1
 
   898 label *label413
   899 label *label414
   900 op shl *tmp222 :createBlockMaskRow:result 1
-    * op add *tmp223 :createCombinedMask:x 0
+  901 set *tmp223 :createCombinedMask:x
   902 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   903 op or :createBlockMaskRow:result *tmp222 *tmp224
   904 label *label415

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-12 instructions):
 
   336 label *label229
   337 label *label230
   338 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  339 ucontrol getBlock *tmp223 *tmp232 0 :createBlockMaskRow:result 0
   340 label *label231
   341 label *label232
   342 op shl *tmp222 :createBlockMaskRow:result 1
 
   384 op shl *tmp222 :createBlockMaskRow:result 1
   385 op add *tmp223 :createCombinedMask:x -4
   386 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
+  387 op or :createAdjacentMask:row2 *tmp222 *tmp224
   388 label *label247
   389 label *label248
   390 label *label249
-    * set :createAdjacentMask:row2 :createBlockMaskRow:result
   391 op add *tmp234 :createCombinedMask:y 3
   392 label *label250
   393 label *label251
   394 label *label252
   395 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  396 ucontrol getBlock *tmp223 *tmp234 0 :createBlockMaskRow:result 0
   397 label *label253
   398 label *label254
   399 op shl *tmp222 :createBlockMaskRow:result 1
 
   441 op shl *tmp222 :createBlockMaskRow:result 1
   442 op add *tmp223 :createCombinedMask:x -4
   443 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
-    * op or :createBlockMaskRow:result *tmp222 *tmp224
+  444 op or :createAdjacentMask:row1 *tmp222 *tmp224
   445 label *label269
   446 label *label270
   447 label *label271
-    * set :createAdjacentMask:row1 :createBlockMaskRow:result
   448 label *label204
   449 label *label205
   450 op add *tmp236 :createCombinedMask:y 2
 
   452 label *label273
   453 label *label274
   454 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  455 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   456 label *label275
   457 label *label276
   458 op shl *tmp222 :createBlockMaskRow:result 1
 
   509 op shr *tmp240 :createAdjacentMask:row1 1
   510 op or *tmp241 *tmp239 *tmp240
   511 op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:result
-    * op and *tmp244 :createAdjacentMask:mask 0xFE
-    * set :createAdjacentMask:result *tmp244
+  512 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   513 set :createAdjacentMask:row2 :createAdjacentMask:row1
   514 set :createAdjacentMask:row1 :createBlockMaskRow:result
   515 label *label207
 
   519 label *label295
   520 label *label296
   521 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  522 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   523 label *label297
   524 label *label298
   525 op shl *tmp222 :createBlockMaskRow:result 1
 
   588 label *label317
   589 label *label318
   590 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  591 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   592 label *label319
   593 label *label320
   594 op shl *tmp222 :createBlockMaskRow:result 1
 
   657 label *label339
   658 label *label340
   659 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  660 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   661 label *label341
   662 label *label342
   663 op shl *tmp222 :createBlockMaskRow:result 1
 
   726 label *label361
   727 label *label362
   728 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  729 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   730 label *label363
   731 label *label364
   732 op shl *tmp222 :createBlockMaskRow:result 1
 
   795 label *label383
   796 label *label384
   797 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  798 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   799 label *label385
   800 label *label386
   801 op shl *tmp222 :createBlockMaskRow:result 1
 
   864 label *label405
   865 label *label406
   866 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
-    * set :createBlockMaskRow:result *tmp224
+  867 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
   868 label *label407
   869 label *label408
   870 op shl *tmp222 :createBlockMaskRow:result 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   359 label *label238
   360 op shl *tmp222 :createBlockMaskRow:result 1
   361 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
+  362 ucontrol getBlock :createCombinedMask:x *tmp232 0 *tmp224 0
   363 op or :createBlockMaskRow:result *tmp222 *tmp224
   364 label *label239
   365 label *label240
 
   416 label *label260
   417 op shl *tmp222 :createBlockMaskRow:result 1
   418 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
+  419 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp224 0
   420 op or :createBlockMaskRow:result *tmp222 *tmp224
   421 label *label261
   422 label *label262
 
   475 label *label282
   476 op shl *tmp222 :createBlockMaskRow:result 1
   477 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  478 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   479 op or :createBlockMaskRow:result *tmp222 *tmp224
   480 label *label283
   481 label *label284
 
   542 label *label304
   543 op shl *tmp222 :createBlockMaskRow:result 1
   544 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  545 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   546 op or :createBlockMaskRow:result *tmp222 *tmp224
   547 label *label305
   548 label *label306
 
   588 label *label317
   589 label *label318
   590 op add *tmp223 :createCombinedMask:x 4
-    * ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
+  591 ucontrol getBlock *tmp223 :createCombinedMask:y 0 :createBlockMaskRow:result 0
   592 label *label319
   593 label *label320
   594 op shl *tmp222 :createBlockMaskRow:result 1
   595 op add *tmp223 :createCombinedMask:x 3
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  596 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   597 op or :createBlockMaskRow:result *tmp222 *tmp224
   598 label *label321
   599 label *label322
   600 op shl *tmp222 :createBlockMaskRow:result 1
   601 op add *tmp223 :createCombinedMask:x 2
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  602 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   603 op or :createBlockMaskRow:result *tmp222 *tmp224
   604 label *label323
   605 label *label324
   606 op shl *tmp222 :createBlockMaskRow:result 1
   607 op add *tmp223 :createCombinedMask:x 1
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  608 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   609 op or :createBlockMaskRow:result *tmp222 *tmp224
   610 label *label325
   611 label *label326
   612 op shl *tmp222 :createBlockMaskRow:result 1
   613 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  614 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp224 0
   615 op or :createBlockMaskRow:result *tmp222 *tmp224
   616 label *label327
   617 label *label328
   618 op shl *tmp222 :createBlockMaskRow:result 1
   619 op add *tmp223 :createCombinedMask:x -1
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  620 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   621 op or :createBlockMaskRow:result *tmp222 *tmp224
   622 label *label329
   623 label *label330
   624 op shl *tmp222 :createBlockMaskRow:result 1
   625 op add *tmp223 :createCombinedMask:x -2
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  626 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   627 op or :createBlockMaskRow:result *tmp222 *tmp224
   628 label *label331
   629 label *label332
   630 op shl *tmp222 :createBlockMaskRow:result 1
   631 op add *tmp223 :createCombinedMask:x -3
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  632 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   633 op or :createBlockMaskRow:result *tmp222 *tmp224
   634 label *label333
   635 label *label334
   636 op shl *tmp222 :createBlockMaskRow:result 1
   637 op add *tmp223 :createCombinedMask:x -4
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  638 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   639 op or :createBlockMaskRow:result *tmp222 *tmp224
   640 label *label335
   641 label *label336
 
   680 label *label348
   681 op shl *tmp222 :createBlockMaskRow:result 1
   682 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  683 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   684 op or :createBlockMaskRow:result *tmp222 *tmp224
   685 label *label349
   686 label *label350
 
   749 label *label370
   750 op shl *tmp222 :createBlockMaskRow:result 1
   751 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  752 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   753 op or :createBlockMaskRow:result *tmp222 *tmp224
   754 label *label371
   755 label *label372
 
   818 label *label392
   819 op shl *tmp222 :createBlockMaskRow:result 1
   820 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  821 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   822 op or :createBlockMaskRow:result *tmp222 *tmp224
   823 label *label393
   824 label *label394
 
   887 label *label414
   888 op shl *tmp222 :createBlockMaskRow:result 1
   889 set *tmp223 :createCombinedMask:x
-    * ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
+  890 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   891 op or :createBlockMaskRow:result *tmp222 *tmp224
   892 label *label415
   893 label *label416

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-10 instructions):
 
   358 label *label237
   359 label *label238
   360 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   361 ucontrol getBlock :createCombinedMask:x *tmp232 0 *tmp224 0
   362 op or :createBlockMaskRow:result *tmp222 *tmp224
   363 label *label239
 
   414 label *label259
   415 label *label260
   416 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   417 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp224 0
   418 op or :createBlockMaskRow:result *tmp222 *tmp224
   419 label *label261
 
   472 label *label281
   473 label *label282
   474 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   475 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   476 op or :createBlockMaskRow:result *tmp222 *tmp224
   477 label *label283
 
   538 label *label303
   539 label *label304
   540 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   541 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   542 op or :createBlockMaskRow:result *tmp222 *tmp224
   543 label *label305
 
   579 set :createAdjacentMask:row1 :createBlockMaskRow:result
   580 label *label210
   581 label *label211
-    * set *tmp236 :createCombinedMask:y
   582 label *label316
   583 label *label317
   584 label *label318
 
   605 label *label325
   606 label *label326
   607 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   608 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp224 0
   609 op or :createBlockMaskRow:result *tmp222 *tmp224
   610 label *label327
 
   673 label *label347
   674 label *label348
   675 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   676 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   677 op or :createBlockMaskRow:result *tmp222 *tmp224
   678 label *label349
 
   741 label *label369
   742 label *label370
   743 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   744 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   745 op or :createBlockMaskRow:result *tmp222 *tmp224
   746 label *label371
 
   809 label *label391
   810 label *label392
   811 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   812 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   813 op or :createBlockMaskRow:result *tmp222 *tmp224
   814 label *label393
 
   877 label *label413
   878 label *label414
   879 op shl *tmp222 :createBlockMaskRow:result 1
-    * set *tmp223 :createCombinedMask:x
   880 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   881 op or :createBlockMaskRow:result *tmp222 *tmp224
   882 label *label415

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    31 set .mapAction "Locating ore..."
    32 set .angle 0
    33 set .mapProgress 0
-    * label *label20
    34 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    35 jump *label22 notEqual *tmp27 false
    36 label *label226
    37 ucontrol approach :findDrillLocationLocal:x :findDrillLocationLocal:y 5.5
-    * label *label21
    38 ucontrol within :findDrillLocationLocal:x :findDrillLocationLocal:y 6 *tmp27
    39 jump *label226 equal *tmp27 false
    40 label *label22
-    * label *label19
-    * label *label18
    41 op div *tmp30 *tmp24 3.8197185279121366
    42 op pow .mapTotal *tmp30 2
    43 set :findDrillLocationLocal:oreX 0
 
    60 op mul .mapProgress .angle .angle
    61 op sub *tmp46 @mapw 5
    62 op sub *tmp53 @maph 5
-    * label *label27
    63 jump *label29 greaterThanEq :locateOreAway:distance :findDrillLocationLocal:distanceLimit
    64 label *label177
    65 op div :locateOreAway:a .angle @degToRad
 
    68 op add *tmp45 :findDrillLocationLocal:x *tmp44
    69 op max *tmp48 *tmp45 5
    70 op min *tmp47 *tmp48 *tmp46
-    * label *label30
    71 op cos *tmp50 :locateOreAway:a
    72 op mul *tmp51 *tmp50 :locateOreAway:distance
    73 op add *tmp52 :findDrillLocationLocal:y *tmp51
    74 op max *tmp55 *tmp52 5
    75 op min *tmp54 *tmp55 *tmp53
-    * label *label31
-    * label *label33
    76 ucontrol within *tmp47 *tmp54 5 *tmp57
    77 jump *label35 notEqual *tmp57 false
    78 label *label183
    79 ucontrol approach *tmp47 *tmp54 4.5
-    * label *label34
    80 ucontrol within *tmp47 *tmp54 5 *tmp57
    81 jump *label183 equal *tmp57 false
    82 label *label35
-    * label *label32
    83 op div *tmp60 3.8197185279121366 :locateOreAway:distance
    84 op add .angle .angle *tmp60
    85 op mul .mapProgress .angle .angle
 
    89 set *tmp37 false
    90 jump *label26 always
    91 label *label36
-    * label *label37
    92 op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x
    93 op abs *tmp68 *tmp67
    94 op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y
 
   101 jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
   102 jump *label28 always
   103 label *label40
-    * label *label41
   104 label *label38
-    * label *label39
   105 jump *label42 lessThan :locateOreAway:coreDist 10
   106 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
   107 set :locateOreAway:lastX :locateOreAway:x
   108 set :locateOreAway:lastY :locateOreAway:y
   109 set *tmp84 .locations
   110 set :visited:i .locationsStart
-    * label *label47
   111 jump *label49 greaterThanEq .locationsStart *tmp84
   112 label *label178
   113 op mul :visited:index 4 :visited:i
 
   122 set *tmp83 true
   123 jump *label46 always
   124 label *label50
-    * label *label51
-    * label *label48
   125 op add :visited:i :visited:i 1
   126 jump *label178 lessThan :visited:i *tmp84
   127 label *label49
 
   135 set *tmp37 true
   136 jump *label26 always
   137 label *label52
-    * label *label53
   138 label *label44
-    * label *label45
   139 label *label42
-    * label *label43
   140 label *label28
   141 jump *label177 lessThan :locateOreAway:distance :findDrillLocationLocal:distanceLimit
   142 label *label29
 
   148 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
   149 jump *label17 always
   150 label *label54
-    * label *label55
   151 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   152 op add .mapSpots .mapSpots 1
   153 label *label56
-    * label *label57
-    * label *label60
   154 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   155 jump *label62 notEqual *tmp109 false
   156 label *label203
   157 ucontrol approach :locateOreAway:x :locateOreAway:y 5.5
-    * label *label61
   158 ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109
   159 jump *label203 equal *tmp109 false
   160 label *label62
-    * label *label59
-    * label *label58
   161 set :findDrillLocationLocal:last 0
   162 label *label63
   163 write @unit processor1 ":findBestPosition:unit"
 
   184 jump *label67 greaterThan :findDrillLocationLocal:coreDist 10
   185 jump *label65 always
   186 label *label67
-    * label *label68
   187 jump *label69 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   188 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   189 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   191 jump *label71 greaterThanEq :findDrillLocationLocal:limit 1000
   192 set .mapSpots :findDrillLocationLocal:score
   193 label *label71
-    * label *label72
   194 jump *label73 lessThan :findDrillLocationLocal:capacity :findDrillLocationLocal:limit
   195 op add .count .count 1
   196 sensor *tmp131 :findDrillLocationLocal:item @id
 
   202 op add .count .count 1
   203 write :findDrillLocationLocal:dy bank1 .count
   204 op add .locations .locations 1
-    * label *label75
   205 ucontrol unbind
   206 set :findDrillLocationLocal*retval true
   207 jump *label17 always
   208 label *label73
-    * label *label74
   209 label *label69
-    * label *label70
   210 jump *label76 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
   211 set :findDrillLocationLocal:bestX :findDrillLocationLocal:newX
   212 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   213 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   214 label *label76
-    * label *label77
   215 jump *label78 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
   216 jump *label65 always
   217 label *label78
-    * label *label79
   218 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   219 op mul :round:x :findDrillLocationLocal:diffX 1.1
   220 op add *tmp145 :round:x 0.5
   221 op floor *tmp144 *tmp145
-    * label *label80
   222 op add :findDrillLocationLocal:oreX :findDrillLocationLocal:oreX *tmp144
   223 op mul :round.1:x :findDrillLocationLocal:diffY 1.1
   224 op add *tmp149 :round.1:x 0.5
   225 op floor *tmp148 *tmp149
-    * label *label81
   226 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
-    * label *label64
   227 jump *label63 always
   228 label *label65
   229 jump *label82 lessThan :findDrillLocationLocal:best 0
 
   237 op add .count .count 1
   238 write :findDrillLocationLocal:bestY bank1 .count
   239 op add .locations .locations 1
-    * label *label84
   240 label *label82
-    * label *label83
-    * label *label24
   241 jump *label23 always
-    * label *label25
   242 set :findDrillLocationLocal*retval null
   243 label *label17
   244 return :findDrillLocationLocal*retaddr
   245 end
   246 label *label9
   247 set :findPossiblePlacement:y -3
-    * label *label86
   248 jump *label88 greaterThan :findPossiblePlacement:y 3
   249 label *label179
   250 op add *tmp163 :findPossiblePlacement:y 3
   251 op mul *tmp164 7 *tmp163
   252 op shl :findPossiblePlacement:mask :findPossiblePlacement:placementMask *tmp164
   253 set :findPossiblePlacement:x -3
-    * label *label89
   254 jump *label91 greaterThan :findPossiblePlacement:x 3
   255 label *label180
   256 op and *tmp166 :findPossiblePlacement:terrainMask :findPossiblePlacement:mask
 
   260 op add :findPossiblePlacement*retval *tmp170 :findPossiblePlacement:x
   261 jump *label85 always
   262 label *label92
-    * label *label93
   263 op sub *tmp172 3 :findPossiblePlacement:width
   264 jump *label94 lessThanEq :findPossiblePlacement:x *tmp172
   265 jump *label91 always
   266 label *label94
-    * label *label95
   267 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
-    * label *label90
   268 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   269 jump *label180 lessThanEq :findPossiblePlacement:x 3
   270 label *label91
 
   272 jump *label96 lessThanEq :findPossiblePlacement:y *tmp175
   273 jump *label88 always
   274 label *label96
-    * label *label97
-    * label *label87
   275 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   276 jump *label179 lessThanEq :findPossiblePlacement:y 3
   277 label *label88
 
   286 write false processor1 ":createTerrainMask*finished"
   287 write 1 processor1 "@counter"
   288 op add *tmp232 :createCombinedMask:y 4
-    * label *label228
-    * label *label229
-    * label *label230
   289 op add *tmp223 :createCombinedMask:x 4
   290 ucontrol getBlock *tmp223 *tmp232 0 :createBlockMaskRow:result 0
-    * label *label231
-    * label *label232
   291 op shl *tmp222 :createBlockMaskRow:result 1
   292 op add *tmp223 :createCombinedMask:x 3
   293 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   294 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label233
-    * label *label234
   295 op shl *tmp222 :createBlockMaskRow:result 1
   296 op add *tmp223 :createCombinedMask:x 2
   297 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   298 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label235
-    * label *label236
   299 op shl *tmp222 :createBlockMaskRow:result 1
   300 op add *tmp223 :createCombinedMask:x 1
   301 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   302 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label237
-    * label *label238
   303 op shl *tmp222 :createBlockMaskRow:result 1
   304 ucontrol getBlock :createCombinedMask:x *tmp232 0 *tmp224 0
   305 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label239
-    * label *label240
   306 op shl *tmp222 :createBlockMaskRow:result 1
   307 op add *tmp223 :createCombinedMask:x -1
   308 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   309 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label241
-    * label *label242
   310 op shl *tmp222 :createBlockMaskRow:result 1
   311 op add *tmp223 :createCombinedMask:x -2
   312 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   313 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label243
-    * label *label244
   314 op shl *tmp222 :createBlockMaskRow:result 1
   315 op add *tmp223 :createCombinedMask:x -3
   316 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   317 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label245
-    * label *label246
   318 op shl *tmp222 :createBlockMaskRow:result 1
   319 op add *tmp223 :createCombinedMask:x -4
   320 ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0
   321 op or :createAdjacentMask:row2 *tmp222 *tmp224
-    * label *label247
-    * label *label248
-    * label *label249
   322 op add *tmp234 :createCombinedMask:y 3
-    * label *label250
-    * label *label251
-    * label *label252
   323 op add *tmp223 :createCombinedMask:x 4
   324 ucontrol getBlock *tmp223 *tmp234 0 :createBlockMaskRow:result 0
-    * label *label253
-    * label *label254
   325 op shl *tmp222 :createBlockMaskRow:result 1
   326 op add *tmp223 :createCombinedMask:x 3
   327 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   328 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label255
-    * label *label256
   329 op shl *tmp222 :createBlockMaskRow:result 1
   330 op add *tmp223 :createCombinedMask:x 2
   331 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   332 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label257
-    * label *label258
   333 op shl *tmp222 :createBlockMaskRow:result 1
   334 op add *tmp223 :createCombinedMask:x 1
   335 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   336 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label259
-    * label *label260
   337 op shl *tmp222 :createBlockMaskRow:result 1
   338 ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp224 0
   339 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label261
-    * label *label262
   340 op shl *tmp222 :createBlockMaskRow:result 1
   341 op add *tmp223 :createCombinedMask:x -1
   342 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   343 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label263
-    * label *label264
   344 op shl *tmp222 :createBlockMaskRow:result 1
   345 op add *tmp223 :createCombinedMask:x -2
   346 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   347 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label265
-    * label *label266
   348 op shl *tmp222 :createBlockMaskRow:result 1
   349 op add *tmp223 :createCombinedMask:x -3
   350 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   351 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label267
-    * label *label268
   352 op shl *tmp222 :createBlockMaskRow:result 1
   353 op add *tmp223 :createCombinedMask:x -4
   354 ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0
   355 op or :createAdjacentMask:row1 *tmp222 *tmp224
-    * label *label269
-    * label *label270
-    * label *label271
-    * label *label204
-    * label *label205
   356 op add *tmp236 :createCombinedMask:y 2
-    * label *label272
-    * label *label273
-    * label *label274
   357 op add *tmp223 :createCombinedMask:x 4
   358 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label275
-    * label *label276
   359 op shl *tmp222 :createBlockMaskRow:result 1
   360 op add *tmp223 :createCombinedMask:x 3
   361 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   362 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label277
-    * label *label278
   363 op shl *tmp222 :createBlockMaskRow:result 1
   364 op add *tmp223 :createCombinedMask:x 2
   365 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   366 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label279
-    * label *label280
   367 op shl *tmp222 :createBlockMaskRow:result 1
   368 op add *tmp223 :createCombinedMask:x 1
   369 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   370 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label281
-    * label *label282
   371 op shl *tmp222 :createBlockMaskRow:result 1
   372 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   373 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label283
-    * label *label284
   374 op shl *tmp222 :createBlockMaskRow:result 1
   375 op add *tmp223 :createCombinedMask:x -1
   376 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   377 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label285
-    * label *label286
   378 op shl *tmp222 :createBlockMaskRow:result 1
   379 op add *tmp223 :createCombinedMask:x -2
   380 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   381 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label287
-    * label *label288
   382 op shl *tmp222 :createBlockMaskRow:result 1
   383 op add *tmp223 :createCombinedMask:x -3
   384 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   385 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label289
-    * label *label290
   386 op shl *tmp222 :createBlockMaskRow:result 1
   387 op add *tmp223 :createCombinedMask:x -4
   388 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   389 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label291
-    * label *label292
-    * label *label293
   390 op shl *tmp238 :createAdjacentMask:row1 1
   391 op or *tmp239 :createAdjacentMask:row2 *tmp238
   392 op shr *tmp240 :createAdjacentMask:row1 1
 
   395 op and :createAdjacentMask:result :createAdjacentMask:mask 0xFE
   396 set :createAdjacentMask:row2 :createAdjacentMask:row1
   397 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label207
-    * label *label208
   398 op add *tmp236 :createCombinedMask:y 1
-    * label *label294
-    * label *label295
-    * label *label296
   399 op add *tmp223 :createCombinedMask:x 4
   400 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label297
-    * label *label298
   401 op shl *tmp222 :createBlockMaskRow:result 1
   402 op add *tmp223 :createCombinedMask:x 3
   403 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   404 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label299
-    * label *label300
   405 op shl *tmp222 :createBlockMaskRow:result 1
   406 op add *tmp223 :createCombinedMask:x 2
   407 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   408 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label301
-    * label *label302
   409 op shl *tmp222 :createBlockMaskRow:result 1
   410 op add *tmp223 :createCombinedMask:x 1
   411 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   412 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label303
-    * label *label304
   413 op shl *tmp222 :createBlockMaskRow:result 1
   414 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   415 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label305
-    * label *label306
   416 op shl *tmp222 :createBlockMaskRow:result 1
   417 op add *tmp223 :createCombinedMask:x -1
   418 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   419 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label307
-    * label *label308
   420 op shl *tmp222 :createBlockMaskRow:result 1
   421 op add *tmp223 :createCombinedMask:x -2
   422 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   423 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label309
-    * label *label310
   424 op shl *tmp222 :createBlockMaskRow:result 1
   425 op add *tmp223 :createCombinedMask:x -3
   426 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   427 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label311
-    * label *label312
   428 op shl *tmp222 :createBlockMaskRow:result 1
   429 op add *tmp223 :createCombinedMask:x -4
   430 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   431 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label313
-    * label *label314
-    * label *label315
   432 op shl *tmp238 :createAdjacentMask:row1 1
   433 op or *tmp239 :createAdjacentMask:row2 *tmp238
   434 op shr *tmp240 :createAdjacentMask:row1 1
 
   439 op or :createAdjacentMask:result *tmp243 *tmp244
   440 set :createAdjacentMask:row2 :createAdjacentMask:row1
   441 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label210
-    * label *label211
-    * label *label316
-    * label *label317
-    * label *label318
   442 op add *tmp223 :createCombinedMask:x 4
   443 ucontrol getBlock *tmp223 :createCombinedMask:y 0 :createBlockMaskRow:result 0
-    * label *label319
-    * label *label320
   444 op shl *tmp222 :createBlockMaskRow:result 1
   445 op add *tmp223 :createCombinedMask:x 3
   446 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   447 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label321
-    * label *label322
   448 op shl *tmp222 :createBlockMaskRow:result 1
   449 op add *tmp223 :createCombinedMask:x 2
   450 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   451 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label323
-    * label *label324
   452 op shl *tmp222 :createBlockMaskRow:result 1
   453 op add *tmp223 :createCombinedMask:x 1
   454 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   455 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label325
-    * label *label326
   456 op shl *tmp222 :createBlockMaskRow:result 1
   457 ucontrol getBlock :createCombinedMask:x :createCombinedMask:y 0 *tmp224 0
   458 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label327
-    * label *label328
   459 op shl *tmp222 :createBlockMaskRow:result 1
   460 op add *tmp223 :createCombinedMask:x -1
   461 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   462 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label329
-    * label *label330
   463 op shl *tmp222 :createBlockMaskRow:result 1
   464 op add *tmp223 :createCombinedMask:x -2
   465 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   466 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label331
-    * label *label332
   467 op shl *tmp222 :createBlockMaskRow:result 1
   468 op add *tmp223 :createCombinedMask:x -3
   469 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   470 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label333
-    * label *label334
   471 op shl *tmp222 :createBlockMaskRow:result 1
   472 op add *tmp223 :createCombinedMask:x -4
   473 ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0
   474 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label335
-    * label *label336
-    * label *label337
   475 op shl *tmp238 :createAdjacentMask:row1 1
   476 op or *tmp239 :createAdjacentMask:row2 *tmp238
   477 op shr *tmp240 :createAdjacentMask:row1 1
 
   482 op or :createAdjacentMask:result *tmp243 *tmp244
   483 set :createAdjacentMask:row2 :createAdjacentMask:row1
   484 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label213
-    * label *label214
   485 op add *tmp236 :createCombinedMask:y -1
-    * label *label338
-    * label *label339
-    * label *label340
   486 op add *tmp223 :createCombinedMask:x 4
   487 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label341
-    * label *label342
   488 op shl *tmp222 :createBlockMaskRow:result 1
   489 op add *tmp223 :createCombinedMask:x 3
   490 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   491 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label343
-    * label *label344
   492 op shl *tmp222 :createBlockMaskRow:result 1
   493 op add *tmp223 :createCombinedMask:x 2
   494 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   495 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label345
-    * label *label346
   496 op shl *tmp222 :createBlockMaskRow:result 1
   497 op add *tmp223 :createCombinedMask:x 1
   498 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   499 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label347
-    * label *label348
   500 op shl *tmp222 :createBlockMaskRow:result 1
   501 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   502 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label349
-    * label *label350
   503 op shl *tmp222 :createBlockMaskRow:result 1
   504 op add *tmp223 :createCombinedMask:x -1
   505 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   506 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label351
-    * label *label352
   507 op shl *tmp222 :createBlockMaskRow:result 1
   508 op add *tmp223 :createCombinedMask:x -2
   509 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   510 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label353
-    * label *label354
   511 op shl *tmp222 :createBlockMaskRow:result 1
   512 op add *tmp223 :createCombinedMask:x -3
   513 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   514 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label355
-    * label *label356
   515 op shl *tmp222 :createBlockMaskRow:result 1
   516 op add *tmp223 :createCombinedMask:x -4
   517 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   518 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label357
-    * label *label358
-    * label *label359
   519 op shl *tmp238 :createAdjacentMask:row1 1
   520 op or *tmp239 :createAdjacentMask:row2 *tmp238
   521 op shr *tmp240 :createAdjacentMask:row1 1
 
   526 op or :createAdjacentMask:result *tmp243 *tmp244
   527 set :createAdjacentMask:row2 :createAdjacentMask:row1
   528 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label216
-    * label *label217
   529 op add *tmp236 :createCombinedMask:y -2
-    * label *label360
-    * label *label361
-    * label *label362
   530 op add *tmp223 :createCombinedMask:x 4
   531 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label363
-    * label *label364
   532 op shl *tmp222 :createBlockMaskRow:result 1
   533 op add *tmp223 :createCombinedMask:x 3
   534 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   535 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label365
-    * label *label366
   536 op shl *tmp222 :createBlockMaskRow:result 1
   537 op add *tmp223 :createCombinedMask:x 2
   538 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   539 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label367
-    * label *label368
   540 op shl *tmp222 :createBlockMaskRow:result 1
   541 op add *tmp223 :createCombinedMask:x 1
   542 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   543 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label369
-    * label *label370
   544 op shl *tmp222 :createBlockMaskRow:result 1
   545 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   546 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label371
-    * label *label372
   547 op shl *tmp222 :createBlockMaskRow:result 1
   548 op add *tmp223 :createCombinedMask:x -1
   549 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   550 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label373
-    * label *label374
   551 op shl *tmp222 :createBlockMaskRow:result 1
   552 op add *tmp223 :createCombinedMask:x -2
   553 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   554 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label375
-    * label *label376
   555 op shl *tmp222 :createBlockMaskRow:result 1
   556 op add *tmp223 :createCombinedMask:x -3
   557 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   558 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label377
-    * label *label378
   559 op shl *tmp222 :createBlockMaskRow:result 1
   560 op add *tmp223 :createCombinedMask:x -4
   561 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   562 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label379
-    * label *label380
-    * label *label381
   563 op shl *tmp238 :createAdjacentMask:row1 1
   564 op or *tmp239 :createAdjacentMask:row2 *tmp238
   565 op shr *tmp240 :createAdjacentMask:row1 1
 
   570 op or :createAdjacentMask:result *tmp243 *tmp244
   571 set :createAdjacentMask:row2 :createAdjacentMask:row1
   572 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label219
-    * label *label220
   573 op add *tmp236 :createCombinedMask:y -3
-    * label *label382
-    * label *label383
-    * label *label384
   574 op add *tmp223 :createCombinedMask:x 4
   575 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label385
-    * label *label386
   576 op shl *tmp222 :createBlockMaskRow:result 1
   577 op add *tmp223 :createCombinedMask:x 3
   578 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   579 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label387
-    * label *label388
   580 op shl *tmp222 :createBlockMaskRow:result 1
   581 op add *tmp223 :createCombinedMask:x 2
   582 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   583 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label389
-    * label *label390
   584 op shl *tmp222 :createBlockMaskRow:result 1
   585 op add *tmp223 :createCombinedMask:x 1
   586 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   587 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label391
-    * label *label392
   588 op shl *tmp222 :createBlockMaskRow:result 1
   589 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   590 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label393
-    * label *label394
   591 op shl *tmp222 :createBlockMaskRow:result 1
   592 op add *tmp223 :createCombinedMask:x -1
   593 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   594 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label395
-    * label *label396
   595 op shl *tmp222 :createBlockMaskRow:result 1
   596 op add *tmp223 :createCombinedMask:x -2
   597 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   598 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label397
-    * label *label398
   599 op shl *tmp222 :createBlockMaskRow:result 1
   600 op add *tmp223 :createCombinedMask:x -3
   601 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   602 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label399
-    * label *label400
   603 op shl *tmp222 :createBlockMaskRow:result 1
   604 op add *tmp223 :createCombinedMask:x -4
   605 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   606 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label401
-    * label *label402
-    * label *label403
   607 op shl *tmp238 :createAdjacentMask:row1 1
   608 op or *tmp239 :createAdjacentMask:row2 *tmp238
   609 op shr *tmp240 :createAdjacentMask:row1 1
 
   614 op or :createAdjacentMask:result *tmp243 *tmp244
   615 set :createAdjacentMask:row2 :createAdjacentMask:row1
   616 set :createAdjacentMask:row1 :createBlockMaskRow:result
-    * label *label222
-    * label *label223
   617 op add *tmp236 :createCombinedMask:y -4
-    * label *label404
-    * label *label405
-    * label *label406
   618 op add *tmp223 :createCombinedMask:x 4
   619 ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:result 0
-    * label *label407
-    * label *label408
   620 op shl *tmp222 :createBlockMaskRow:result 1
   621 op add *tmp223 :createCombinedMask:x 3
   622 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   623 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label409
-    * label *label410
   624 op shl *tmp222 :createBlockMaskRow:result 1
   625 op add *tmp223 :createCombinedMask:x 2
   626 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   627 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label411
-    * label *label412
   628 op shl *tmp222 :createBlockMaskRow:result 1
   629 op add *tmp223 :createCombinedMask:x 1
   630 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   631 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label413
-    * label *label414
   632 op shl *tmp222 :createBlockMaskRow:result 1
   633 ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0
   634 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label415
-    * label *label416
   635 op shl *tmp222 :createBlockMaskRow:result 1
   636 op add *tmp223 :createCombinedMask:x -1
   637 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   638 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label417
-    * label *label418
   639 op shl *tmp222 :createBlockMaskRow:result 1
   640 op add *tmp223 :createCombinedMask:x -2
   641 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   642 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label419
-    * label *label420
   643 op shl *tmp222 :createBlockMaskRow:result 1
   644 op add *tmp223 :createCombinedMask:x -3
   645 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   646 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label421
-    * label *label422
   647 op shl *tmp222 :createBlockMaskRow:result 1
   648 op add *tmp223 :createCombinedMask:x -4
   649 ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0
   650 op or :createBlockMaskRow:result *tmp222 *tmp224
-    * label *label423
-    * label *label424
-    * label *label425
   651 op shl *tmp238 :createAdjacentMask:row1 1
   652 op or *tmp239 :createAdjacentMask:row2 *tmp238
   653 op shr *tmp240 :createAdjacentMask:row1 1
 
   656 op shl *tmp243 :createAdjacentMask:result 7
   657 op and *tmp244 :createAdjacentMask:mask 0xFE
   658 op or :createAdjacentMask:result *tmp243 *tmp244
-    * label *label225
-    * label *label126
   659 op shr *tmp231 :createAdjacentMask:result 1
-    * label *label121
   660 label *label128
   661 wait 1e-15
   662 read *tmp247 processor1 ":createTerrainMask*finished"
   663 jump *label128 equal *tmp247 false
   664 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
   665 op or :createCombinedMask*retval *tmp231 :createCombinedMask:terrainMask
-    * label *label120
   666 return :createCombinedMask*retaddr
   667 end
   668 label *label13
 
   676 set .water1X -1
   677 set :moveTo.5:x .drillX
   678 set :moveTo.5:y .drillY
-    * label *label131
   679 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
   680 jump *label133 notEqual *tmp250 false
   681 label *label227
   682 ucontrol approach :moveTo.5:x :moveTo.5:y 0.5
-    * label *label132
   683 ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250
   684 jump *label227 equal *tmp250 false
   685 label *label133
-    * label *label130
   686 set :createCombinedMask:x .drillX
   687 set :createCombinedMask:y .drillY
   688 setaddr :createCombinedMask*retaddr *label134 (h:*label134)
   689 call *label12 *invalid :createCombinedMask*retval (m:*label134) (h:*label134)
   690 label *label134
-    * label *label135
   691 op or :layoutThoriumDrillAtLocation:terrainMask :createCombinedMask*retval 7575371776
-    * label *label136
   692 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:terrainMask 285880598593601
-    * label *label137
   693 set :layoutThoriumDrillAtLocation:mask2x2 387
   694 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   695 set :findPossiblePlacement:placementMask 387
 
   707 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp295
   708 op or :layoutThoriumDrillAtLocation:cornersMask :layoutThoriumDrillAtLocation:cornersMask *tmp295
   709 label *label139
-    * label *label140
   710 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:cornersMask
   711 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:mask2x2
   712 set :findPossiblePlacement:width 2
 
   722 op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :findPossiblePlacement*retval
   723 op or :layoutThoriumDrillAtLocation:terrainMask :layoutThoriumDrillAtLocation:terrainMask *tmp304
   724 label *label142
-    * label *label143
-    * label *label144
   725 set :layoutThoriumDrillAtLocation:generatorHorizontal 1935
-    * label *label145
   726 set :layoutThoriumDrillAtLocation:generatorVertical 6340995
   727 set :tryPlaceGenerator:centerX .drillX
   728 set :tryPlaceGenerator:centerY .drillY
   729 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   730 set :tryPlaceGenerator:generatorHorizontal 1935
   731 set :tryPlaceGenerator:generatorVertical 6340995
-    * label *label426
   732 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:terrainMask
   733 set :findPossiblePlacement:placementMask 6340995
   734 set :findPossiblePlacement:width 2
 
   741 set :tryPlaceGenerator*retval false
   742 jump *label444 always
   743 label *label428
-    * label *label429
   744 op add *tmp183 :tryPlaceGenerator:centerX 0.5
   745 op add .water2X *tmp183 :findPossiblePlacement:x
   746 op add *tmp185 :tryPlaceGenerator:centerY 0.5
 
   763 set :tryPlaceGenerator*retval false
   764 jump *label444 always
   765 label *label432
-    * label *label433
   766 op add *tmp195 :tryPlaceGenerator:centerX 0.5
   767 op add .water2X *tmp195 :findPossiblePlacement:x
   768 op add *tmp197 :tryPlaceGenerator:centerY 0.5
 
   784 set :tryPlaceGenerator*retval false
   785 jump *label444 always
   786 label *label436
-    * label *label437
   787 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   788 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   789 op shl *tmp209 1 :findPossiblePlacement*retval
 
   799 set :tryPlaceGenerator*retval false
   800 jump *label444 always
   801 label *label439
-    * label *label440
   802 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   803 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   804 op shl *tmp215 1 :findPossiblePlacement*retval
 
   814 set :tryPlaceGenerator*retval false
   815 jump *label444 always
   816 label *label442
-    * label *label443
   817 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   818 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   819 set :tryPlaceGenerator*retval true
 
   823 set :layoutThoriumDrillAtLocation*retval true
   824 jump *label129 always
   825 label *label147
-    * label *label148
   826 set :layoutThoriumDrillAtLocation:sx 3
   827 set :layoutThoriumDrillAtLocation:sy 3
   828 setaddr *tmp319 *label152
 
   859 set *tmp323 0
   860 jump *label157 always
   861 label *label158
-    * label *label159
   862 op mul *tmp330 7 :layoutThoriumDrillAtLocation:sy
   863 op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tmp330
   864 jump *label160 lessThanEq :shiftMask:shift 0
 
   875 jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0
   876 op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAtLocation:sx
   877 label *label164
-    * label *label165
   878 op shl *tmp344 :shiftMask:keep 7
   879 op or :shiftMask:keep :shiftMask:keep *tmp344
   880 op shl *tmp345 :shiftMask:keep 14
 
   883 op or :shiftMask:keep :shiftMask:keep *tmp346
   884 op and :shiftMask:mask :shiftMask:mask :shiftMask:keep
   885 label *label162
-    * label *label163
   886 set *tmp323 :shiftMask:mask
   887 label *label157
   888 op or :layoutThoriumDrillAtLocation:combinedMask :createCombinedMask*retval *tmp323
 
   893 set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   894 set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDrillAtLocation:generatorHorizontal
   895 set :tryPlaceGenerator:generatorVertical :layoutThoriumDrillAtLocation:generatorVertical
-    * label *label445
   896 set :findPossiblePlacement:terrainMask :layoutThoriumDrillAtLocation:combinedMask
   897 set :findPossiblePlacement:placementMask :layoutThoriumDrillAtLocation:generatorVertical
   898 set :findPossiblePlacement:width 2
 
   905 set :tryPlaceGenerator*retval false
   906 jump *label463 always
   907 label *label447
-    * label *label448
   908 op add *tmp183 :tryPlaceGenerator:centerX 0.5
   909 op add .water2X *tmp183 :findPossiblePlacement:x
   910 op add *tmp185 :tryPlaceGenerator:centerY 0.5
 
   927 set :tryPlaceGenerator*retval false
   928 jump *label463 always
   929 label *label451
-    * label *label452
   930 op add *tmp195 :tryPlaceGenerator:centerX 0.5
   931 op add .water2X *tmp195 :findPossiblePlacement:x
   932 op add *tmp197 :tryPlaceGenerator:centerY 0.5
 
   948 set :tryPlaceGenerator*retval false
   949 jump *label463 always
   950 label *label455
-    * label *label456
   951 op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   952 op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   953 op shl *tmp209 1 :findPossiblePlacement*retval
 
   963 set :tryPlaceGenerator*retval false
   964 jump *label463 always
   965 label *label458
-    * label *label459
   966 op add .panelX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   967 op add .panelY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   968 op shl *tmp215 1 :findPossiblePlacement*retval
 
   978 set :tryPlaceGenerator*retval false
   979 jump *label463 always
   980 label *label461
-    * label *label462
   981 op add .batteryX :tryPlaceGenerator:centerX :findPossiblePlacement:x
   982 op add .batteryY :tryPlaceGenerator:centerY :findPossiblePlacement:y
   983 set :tryPlaceGenerator*retval true
 
   987 set :layoutThoriumDrillAtLocation*retval true
   988 jump *label129 always
   989 label *label167
-    * label *label168
-    * label *label150
   990 multijump *tmp319 0 0 (m:marker0)
   991 multilabel *label155 (m:marker0)
-    * label *label151
   992 set :layoutThoriumDrillAtLocation*retval true
   993 label *label129
   994 return :layoutThoriumDrillAtLocation*retaddr
 
  1010 set :findDrillLocation:capacity :findDrillLocationLocal:capacity
  1011 set .searchFinished true
  1012 set :findDrillLocation*retval true
-    * label *label169
  1013 set :findDrillLocation*finished true
  1014 jump *label16 always
  1015 end
 
  1030 set :layoutThoriumDrill*retval false
  1031 jump *label171 always
  1032 label *label173
-    * label *label174
  1033 setaddr :layoutThoriumDrillAtLocation*retaddr *label175 (h:*label175)
  1034 call *label13 *invalid :layoutThoriumDrillAtLocation*retval (m:*label175) (h:*label175)
  1035 label *label175
 
  1044 set .mapTotal 0
  1045 set .mapProgress 0
  1046 ucontrol unbind
-    * label *label176
  1047 set :stopLocation*finished true
  1048 jump *label16 always
  1049 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-5 instructions):
 
    98 op sub *tmp73 :locateOreAway:y *tmp54
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
-    * jump *label40 notEqual :locateOreAway:lastY :locateOreAway:y
-    * jump *label28 always
+  101 jump *label28 equal :locateOreAway:lastY :locateOreAway:y
   102 label *label40
   103 label *label38
   104 jump *label42 lessThan :locateOreAway:coreDist 10
 
   180 op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocationLocal:y
   181 op abs *tmp119 *tmp118
   182 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
-    * jump *label67 greaterThan :findDrillLocationLocal:coreDist 10
-    * jump *label65 always
+  183 jump *label65 lessThanEq :findDrillLocationLocal:coreDist 10
   184 label *label67
   185 jump *label69 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   186 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
 
   210 set :findDrillLocationLocal:bestY :findDrillLocationLocal:newY
   211 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   212 label *label76
-    * jump *label78 greaterThan :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * jump *label65 always
+  213 jump *label65 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
   214 label *label78
   215 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   216 op mul :round:x :findDrillLocationLocal:diffX 1.1
 
   258 jump *label85 always
   259 label *label92
   260 op sub *tmp172 3 :findPossiblePlacement:width
-    * jump *label94 lessThanEq :findPossiblePlacement:x *tmp172
-    * jump *label91 always
+  261 jump *label91 greaterThan :findPossiblePlacement:x *tmp172
   262 label *label94
   263 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   264 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   265 jump *label180 lessThanEq :findPossiblePlacement:x 3
   266 label *label91
   267 op sub *tmp175 3 :findPossiblePlacement:height
-    * jump *label96 lessThanEq :findPossiblePlacement:y *tmp175
-    * jump *label88 always
+  268 jump *label88 greaterThan :findPossiblePlacement:y *tmp175
   269 label *label96
   270 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   271 jump *label179 lessThanEq :findPossiblePlacement:y 3

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    99 op len :locateOreAway:unitDist *tmp72 *tmp73
   100 jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x
   101 jump *label28 equal :locateOreAway:lastY :locateOreAway:y
-    * label *label40
   102 label *label38
   103 jump *label42 lessThan :locateOreAway:coreDist 10
   104 jump *label44 greaterThanEq :locateOreAway:unitDist :locateOreAway:distance
 
   180 op abs *tmp119 *tmp118
   181 op max :findDrillLocationLocal:coreDist *tmp117 *tmp119
   182 jump *label65 lessThanEq :findDrillLocationLocal:coreDist 10
-    * label *label67
   183 jump *label69 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:capacity
   184 set :findDrillLocationLocal:dx :findDrillLocationLocal:newX
   185 set :findDrillLocationLocal:dy :findDrillLocationLocal:newY
 
   209 set :findDrillLocationLocal:best :findDrillLocationLocal:score
   210 label *label76
   211 jump *label65 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:last
-    * label *label78
   212 set :findDrillLocationLocal:last :findDrillLocationLocal:score
   213 op mul :round:x :findDrillLocationLocal:diffX 1.1
   214 op add *tmp145 :round:x 0.5
 
   256 label *label92
   257 op sub *tmp172 3 :findPossiblePlacement:width
   258 jump *label91 greaterThan :findPossiblePlacement:x *tmp172
-    * label *label94
   259 op shl :findPossiblePlacement:mask :findPossiblePlacement:mask 1
   260 op add :findPossiblePlacement:x :findPossiblePlacement:x 1
   261 jump *label180 lessThanEq :findPossiblePlacement:x 3
   262 label *label91
   263 op sub *tmp175 3 :findPossiblePlacement:height
   264 jump *label88 greaterThan :findPossiblePlacement:y *tmp175
-    * label *label96
   265 op add :findPossiblePlacement:y :findPossiblePlacement:y 1
   266 jump *label179 lessThanEq :findPossiblePlacement:y 3
   267 label *label88

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   144 set :findDrillLocationLocal:oreY :locateOreAway:y
   145 jump *label54 notEqual *tmp37 false
   146 op greaterThan :findDrillLocationLocal*retval :findDrillLocationLocal:capacity 0
-    * jump *label17 always
+  147 return :findDrillLocationLocal*retaddr
   148 label *label54
   149 jump *label56 lessThan :findDrillLocationLocal:limit 1000
   150 op add .mapSpots .mapSpots 1
 
   200 op add .locations .locations 1
   201 ucontrol unbind
   202 set :findDrillLocationLocal*retval true
-    * jump *label17 always
+  203 return :findDrillLocationLocal*retaddr
   204 label *label73
   205 label *label69
   206 jump *label76 lessThanEq :findDrillLocationLocal:score :findDrillLocationLocal:best
 
   220 op add :findDrillLocationLocal:oreY :findDrillLocationLocal:oreY *tmp148
   221 jump *label63 always
   222 label *label65
-    * jump *label82 lessThan :findDrillLocationLocal:best 0
+  223 jump *label23 lessThan :findDrillLocationLocal:best 0
   224 op add .count .count 1
   225 sensor *tmp155 :findDrillLocationLocal:item @id
   226 write *tmp155 bank1 .count
 
   252 op mul *tmp169 :findPossiblePlacement:y 7
   253 op add *tmp170 24 *tmp169
   254 op add :findPossiblePlacement*retval *tmp170 :findPossiblePlacement:x
-    * jump *label85 always
+  255 return :findPossiblePlacement*retaddr
   256 label *label92
   257 op sub *tmp172 3 :findPossiblePlacement:width
   258 jump *label91 greaterThan :findPossiblePlacement:x *tmp172
 
   811 label *label444
   812 jump *label147 equal :tryPlaceGenerator*retval false
   813 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
+  814 return :layoutThoriumDrillAtLocation*retaddr
   815 label *label147
   816 set :layoutThoriumDrillAtLocation:sx 3
   817 set :layoutThoriumDrillAtLocation:sy 3
 
   975 label *label463
   976 jump *label167 equal :tryPlaceGenerator*retval false
   977 set :layoutThoriumDrillAtLocation*retval true
-    * jump *label129 always
+  978 return :layoutThoriumDrillAtLocation*retaddr
   979 label *label167
   980 multijump *tmp319 0 0 (m:marker0)
   981 multilabel *label155 (m:marker0)

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-10 instructions):
 
    12 label *label16
    13 wait 1e12
    14 jump *label16 always
-    * end
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
 
   230 op add .count .count 1
   231 write :findDrillLocationLocal:bestY bank1 .count
   232 op add .locations .locations 1
-    * label *label82
   233 jump *label23 always
-    * set :findDrillLocationLocal*retval null
-    * label *label17
-    * return :findDrillLocationLocal*retaddr
-    * end
   234 label *label9
   235 set :findPossiblePlacement:y -3
   236 jump *label88 greaterThan :findPossiblePlacement:y 3
 
   260 jump *label179 lessThanEq :findPossiblePlacement:y 3
   261 label *label88
   262 set :findPossiblePlacement*retval -1
-    * label *label85
   263 return :findPossiblePlacement*retaddr
-    * end
   264 label *label12
   265 write @unit processor1 ":createTerrainMask:unit"
   266 write :createCombinedMask:x processor1 ":createTerrainMask:x"
 
   646 read :createCombinedMask:terrainMask processor1 ":createTerrainMask*retval"
   647 op or :createCombinedMask*retval *tmp231 :createCombinedMask:terrainMask
   648 return :createCombinedMask*retaddr
-    * end
   649 label *label13
   650 set .panelY -1
   651 set .panelX -1
 
   971 multijump *tmp319 0 0 (m:marker0)
   972 multilabel *label155 (m:marker0)
   973 set :layoutThoriumDrillAtLocation*retval true
-    * label *label129
   974 return :layoutThoriumDrillAtLocation*retaddr
-    * end
   975 label *label2
   976 set .searchFinished false
   977 set :findDrillLocationLocal:x :findDrillLocation:x
 
   991 set :findDrillLocation*retval true
   992 set :findDrillLocation*finished true
   993 jump *label16 always
-    * end
   994 label *label3
   995 set :findDrillLocationLocal:x :layoutThoriumDrill:x
   996 set :findDrillLocationLocal:y :layoutThoriumDrill:y
 
  1015 label *label171
  1016 set :layoutThoriumDrill*finished true
  1017 jump *label16 always
-    * end
  1018 label *label4
  1019 set .mapSpots 0
  1020 set .mapAction 0
 
  1023 ucontrol unbind
  1024 set :stopLocation*finished true
  1025 jump *label16 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1 (-2 instructions):
 
    15 label *label8
    16 ubind :findDrillLocationLocal:unit
    17 set .locationsStart .locations
-    * set .coreX :findDrillLocationLocal:x
-    * set .coreY :findDrillLocationLocal:y
    18 set :findDrillLocationLocal:capacity 0
    19 set :findDrillLocationLocal:dy :findDrillLocationLocal:capacity
    20 set :findDrillLocationLocal:dx :findDrillLocationLocal:dy

Final code before resolving virtual instructions:

    0:  jump *label14 always 0 0                                     OreLocator.mnd: #set target = 8;
    1:  jump *label2 always 0 0                                      ...
    2:  jump *label3 always 0 0                                      ...
    3:  jump *label4 always 0 0                                      ...
        label *label14                                               ...
        label *label15                                               OreLocator.mnd: require "Matrices.mnd" remote processor1;
    4:  read *tmp20 processor1 "*signature"                          ...
    5:  jump *label15 notEqual *tmp20 "385702d66f725e74:v1"          ...
    6:  set .attenuationRate 50                                      OreLocator.mnd: remote var attenuationRate = 50;
    7:  set .locations 0                                             OreLocator.mnd: remote var locations = 0;
    8:  set .count -1                                                OreLocator.mnd: var count = -1, locationsStart, start;
    9:  set *signature "3290b8c661787058:v1"                         OreLocator.mnd: #set target = 8;
        label *label16                                               ...
   10:  wait 1e12                                                    ...
   11:  jump *label16 always 0 0                                     ...
        label *label8                                                OreLocator.mnd: noinline def findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
   12:  ubind :findDrillLocationLocal:unit                           OreLocator.mnd: ubind(unit);
   13:  set .locationsStart .locations                               OreLocator.mnd: locationsStart = locations;
   14:  set :findDrillLocationLocal:capacity 0                       OreLocator.mnd: mapSpots = dx = dy = capacity = 0;
   15:  set :findDrillLocationLocal:dy :findDrillLocationLocal:capac ...
   16:  set :findDrillLocationLocal:dx :findDrillLocationLocal:dy    ...
   17:  set .mapSpots :findDrillLocationLocal:dx                     ...
   18:  op sub *tmp22 @mapw :findDrillLocationLocal:x                OreLocator.mnd: var distanceLimit = max(coreX, coreY, @mapw - coreX, @maph - coreY);
   19:  op sub *tmp23 @maph :findDrillLocationLocal:y                ...
   20:  op max *tmp24 :findDrillLocationLocal:x :findDrillLocationLo ...
   21:  op max *tmp24 *tmp24 *tmp22                                  ...
   22:  op max *tmp24 *tmp24 *tmp23                                  ...
   23:  set :findDrillLocationLocal:distanceLimit *tmp24             ...
   24:  set .mapAction "Locating ore..."                             OreLocator.mnd: mapAction = "Locating ore...";
   25:  set .angle 0                                                 OreLocator.mnd: mapProgress = angle = 0;
   26:  set .mapProgress 0                                           ...
   27:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   28:  jump *label22 notEqual *tmp27 false                          ...
        label *label226                                              ...
   29:  ucontrol approach :findDrillLocationLocal:x :findDrillLocati OreLocator.mnd: approach(x, y, radius - 0.5);
   30:  ucontrol within :findDrillLocationLocal:x :findDrillLocation OreLocator.mnd: while !within(x, y, radius) do
   31:  jump *label226 equal *tmp27 false                            ...
        label *label22                                               ...
   32:  op div *tmp30 *tmp24 3.8197185279121366                      OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   33:  op pow .mapTotal *tmp30 2                                    ...
   34:  set :findDrillLocationLocal:oreX 0                           OreLocator.mnd: var oreX = 0, oreY = 0;
   35:  set :findDrillLocationLocal:oreY 0                           ...
        label *label23                                               OreLocator.mnd: while true do
   36:  set :findDrillLocationLocal:best -1                          OreLocator.mnd: var best = -1, bestX = x, bestY = y;
   37:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:x  ...
   38:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:y  ...
   39:  op sub *tmp32 :findDrillLocationLocal:limit :findDrillLocati OreLocator.mnd: var maxDistance = (limit - capacity) * attenuationRate;
   40:  op mul :findDrillLocationLocal:maxDistance *tmp32 .attenuati ...
   41:  op min :findDrillLocationLocal:distanceLimit :findDrillLocat OreLocator.mnd: distanceLimit = min(distanceLimit, maxDistance);
   42:  op div *tmp35 :findDrillLocationLocal:distanceLimit 3.819718 OreLocator.mnd: mapTotal = (distanceLimit / SPIRAL_WIDTH) ** 2;
   43:  op pow .mapTotal *tmp35 2                                    ...
   44:  set :locateOreAway:x :findDrillLocationLocal:oreX            OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
   45:  set :locateOreAway:y :findDrillLocationLocal:oreY            ...
   46:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: var distance = SPIRAL_WIDTH * angle;
   47:  set :locateOreAway:lastX -1                                  OreLocator.mnd: var lastX = -1, lastY = -1;
   48:  set :locateOreAway:lastY -1                                  ...
   49:  op max .angle .angle @pi                                     OreLocator.mnd: angle = max(angle, @pi);
   50:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   51:  op sub *tmp46 @mapw 5                                        OreLocator.mnd: while distance < distanceLimit do
   52:  op sub *tmp53 @maph 5                                        ...
   53:  jump *label29 greaterThanEq :locateOreAway:distance :findDri ...
        label *label177                                              ...
   54:  op div :locateOreAway:a .angle @degToRad                     OreLocator.mnd: var a = angle / @degToRad;
   55:  op sin *tmp43 :locateOreAway:a 0                             OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   56:  op mul *tmp44 *tmp43 :locateOreAway:distance                 ...
   57:  op add *tmp45 :findDrillLocationLocal:x *tmp44               ...
   58:  op max *tmp48 *tmp45 5                                       OreLocator.mnd: min(max(value, low), high);
   59:  op min *tmp47 *tmp48 *tmp46                                  OreLocator.mnd: var lx = limit(coreX + sin(a) * distance, 5, @mapw - 5);
   60:  op cos *tmp50 :locateOreAway:a 0                             OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   61:  op mul *tmp51 *tmp50 :locateOreAway:distance                 ...
   62:  op add *tmp52 :findDrillLocationLocal:y *tmp51               ...
   63:  op max *tmp55 *tmp52 5                                       OreLocator.mnd: min(max(value, low), high);
   64:  op min *tmp54 *tmp55 *tmp53                                  OreLocator.mnd: var ly = limit(coreY + cos(a) * distance, 5, @maph - 5);
   65:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   66:  jump *label35 notEqual *tmp57 false                          ...
        label *label183                                              ...
   67:  ucontrol approach *tmp47 *tmp54 4.5 0 0                      OreLocator.mnd: approach(x, y, radius - 0.5);
   68:  ucontrol within *tmp47 *tmp54 5 *tmp57 0                     OreLocator.mnd: while !within(x, y, radius) do
   69:  jump *label183 equal *tmp57 false                            ...
        label *label35                                               ...
   70:  op div *tmp60 3.8197185279121366 :locateOreAway:distance     OreLocator.mnd: angle += SPIRAL_WIDTH / distance;
   71:  op add .angle .angle *tmp60                                  ...
   72:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
   73:  op mul :locateOreAway:distance 3.8197185279121366 .angle     OreLocator.mnd: distance = SPIRAL_WIDTH * angle;
   74:  ulocate ore core true :findDrillLocationLocal:item :locateOr OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   75:  jump *label36 notEqual *tmp63 false                          ...
   76:  set *tmp37 false                                             OreLocator.mnd: return false;
   77:  jump *label26 always 0 0                                     ...
        label *label36                                               OreLocator.mnd: if !ulocate(:ore, ore, out x, out y) then
   78:  op sub *tmp67 :locateOreAway:x :findDrillLocationLocal:x     OreLocator.mnd: var coreDist = max(abs(x - coreX), abs(y - coreY));
   79:  op abs *tmp68 *tmp67 0                                       ...
   80:  op sub *tmp69 :locateOreAway:y :findDrillLocationLocal:y     ...
   81:  op abs *tmp70 *tmp69 0                                       ...
   82:  op max :locateOreAway:coreDist *tmp68 *tmp70                 ...
   83:  op sub *tmp72 :locateOreAway:x *tmp47                        OreLocator.mnd: var unitDist = len(x - lx, y - ly);
   84:  op sub *tmp73 :locateOreAway:y *tmp54                        ...
   85:  op len :locateOreAway:unitDist *tmp72 *tmp73                 ...
   86:  jump *label38 notEqual :locateOreAway:lastX :locateOreAway:x OreLocator.mnd: if lastX == x then if lastY == y then continue; end; end;
   87:  jump *label28 equal :locateOreAway:lastY :locateOreAway:y    ...
        label *label38                                               ...
   88:  jump *label42 lessThan :locateOreAway:coreDist 10            OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
   89:  jump *label44 greaterThanEq :locateOreAway:unitDist :locateO OreLocator.mnd: if unitDist < distance then
   90:  set :locateOreAway:lastX :locateOreAway:x                    OreLocator.mnd: lastX = x;
   91:  set :locateOreAway:lastY :locateOreAway:y                    OreLocator.mnd: lastY = y;
   92:  set *tmp84 .locations                                        OreLocator.mnd: for var i in locationsStart ... locations do
   93:  set :visited:i .locationsStart                               ...
   94:  jump *label49 greaterThanEq .locationsStart *tmp84           ...
        label *label178                                              ...
   95:  op mul :visited:index 4 :visited:i                           OreLocator.mnd: var index = 4 * i;
   96:  op add *tmp87 :visited:index 2                               OreLocator.mnd: var lx = bank1[index + 2];
   97:  read :visited:lx bank1 *tmp87                                ...
   98:  op add *tmp90 :visited:index 3                               OreLocator.mnd: var ly = bank1[index + 3];
   99:  read :visited:ly bank1 *tmp90                                ...
  100:  op sub *tmp92 :locateOreAway:x :visited:lx                   OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  101:  op sub *tmp93 :locateOreAway:y :visited:ly                   ...
  102:  op len *tmp94 *tmp92 *tmp93                                  ...
  103:  jump *label50 greaterThanEq *tmp94 7                         ...
  104:  set *tmp83 true                                              OreLocator.mnd: return true;
  105:  jump *label46 always 0 0                                     ...
        label *label50                                               OreLocator.mnd: if len(x - lx, y - ly) < 7 then
  106:  op add :visited:i :visited:i 1                               OreLocator.mnd: for var i in locationsStart ... locations do
  107:  jump *label178 lessThan :visited:i *tmp84                    ...
        label *label49                                               ...
  108:  set *tmp83 false                                             OreLocator.mnd: return false;
        label *label46                                               OreLocator.mnd: if !visited(x, y) then
  109:  jump *label52 notEqual *tmp83 false                          ...
  110:  op div *tmp99 2 .angle                                       OreLocator.mnd: angle += 2 * SPIRAL_WIDTH / distance;
  111:  op add .angle .angle *tmp99                                  ...
  112:  op mul .mapProgress .angle .angle                            OreLocator.mnd: mapProgress = angle * angle;
  113:  printflush message1                                          OreLocator.mnd: printflush(message1);
  114:  set *tmp37 true                                              OreLocator.mnd: return true;
  115:  jump *label26 always 0 0                                     ...
        label *label52                                               OreLocator.mnd: if !visited(x, y) then
        label *label44                                               OreLocator.mnd: if unitDist < distance then
        label *label42                                               OreLocator.mnd: if coreDist >= MIN_CORE_DIST then
        label *label28                                               OreLocator.mnd: while distance < distanceLimit do
  116:  jump *label177 lessThan :locateOreAway:distance :findDrillLo ...
        label *label29                                               ...
  117:  set *tmp37 false                                             OreLocator.mnd: return false;
        label *label26                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  118:  set :findDrillLocationLocal:oreX :locateOreAway:x            ...
  119:  set :findDrillLocationLocal:oreY :locateOreAway:y            ...
  120:  jump *label54 notEqual *tmp37 false                          ...
  121:  op greaterThan :findDrillLocationLocal*retval :findDrillLoca OreLocator.mnd: return capacity > 0;
  122:  return :findDrillLocationLocal*retaddr                       ...
        label *label54                                               OreLocator.mnd: if !locateOreAway(item, in out oreX, in out oreY, in distanceLimit) then
  123:  jump *label56 lessThan :findDrillLocationLocal:limit 1000    OreLocator.mnd: if limit >= 1000 then mapSpots++; end;
  124:  op add .mapSpots .mapSpots 1                                 ...
        label *label56                                               ...
  125:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  126:  jump *label62 notEqual *tmp109 false                         ...
        label *label203                                              ...
  127:  ucontrol approach :locateOreAway:x :locateOreAway:y 5.5 0 0  OreLocator.mnd: approach(x, y, radius - 0.5);
  128:  ucontrol within :locateOreAway:x :locateOreAway:y 6 *tmp109  OreLocator.mnd: while !within(x, y, radius) do
  129:  jump *label203 equal *tmp109 false                           ...
        label *label62                                               ...
  130:  set :findDrillLocationLocal:last 0                           OreLocator.mnd: var last = 0;
        label *label63                                               OreLocator.mnd: while true do
  131:  write @unit processor1 ":findBestPosition:unit"              OreLocator.mnd: var score = findBestPosition(@unit, oreX, oreY, ore, size, out diffX, out diffY);
  132:  write :findDrillLocationLocal:oreX processor1 ":findBestPosi ...
  133:  write :findDrillLocationLocal:oreY processor1 ":findBestPosi ...
  134:  write :findDrillLocationLocal:ore processor1 ":findBestPosit ...
  135:  write :findDrillLocationLocal:size processor1 ":findBestPosi ...
  136:  write false processor1 ":findBestPosition*finished"          ...
  137:  write 2 processor1 "@counter"                                ...
        label *label66                                               ...
  138:  wait 1e-15                                                   ...
  139:  read *tmp112 processor1 ":findBestPosition*finished"         ...
  140:  jump *label66 equal *tmp112 false                            ...
  141:  read :findDrillLocationLocal:diffX processor1 ":findBestPosi ...
  142:  read :findDrillLocationLocal:diffY processor1 ":findBestPosi ...
  143:  read :findDrillLocationLocal:score processor1 ":findBestPosi ...
  144:  op add :findDrillLocationLocal:newX :findDrillLocationLocal: OreLocator.mnd: var newX = oreX + diffX;
  145:  op add :findDrillLocationLocal:newY :findDrillLocationLocal: OreLocator.mnd: var newY = oreY + diffY;
  146:  op sub *tmp116 :findDrillLocationLocal:newX :findDrillLocati OreLocator.mnd: var coreDist = max(abs(newX - coreX), abs(newY - coreY));
  147:  op abs *tmp117 *tmp116 0                                     ...
  148:  op sub *tmp118 :findDrillLocationLocal:newY :findDrillLocati ...
  149:  op abs *tmp119 *tmp118 0                                     ...
  150:  op max :findDrillLocationLocal:coreDist *tmp117 *tmp119      ...
  151:  jump *label65 lessThanEq :findDrillLocationLocal:coreDist 10 OreLocator.mnd: if coreDist <= MIN_CORE_DIST then break; end;
  152:  jump *label69 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > capacity then
  153:  set :findDrillLocationLocal:dx :findDrillLocationLocal:newX  OreLocator.mnd: dx = newX;
  154:  set :findDrillLocationLocal:dy :findDrillLocationLocal:newY  OreLocator.mnd: dy = newY;
  155:  set :findDrillLocationLocal:capacity :findDrillLocationLocal OreLocator.mnd: capacity = score;
  156:  jump *label71 greaterThanEq :findDrillLocationLocal:limit 10 OreLocator.mnd: if limit < 1000 then mapSpots = score; end;
  157:  set .mapSpots :findDrillLocationLocal:score                  ...
        label *label71                                               ...
  158:  jump *label73 lessThan :findDrillLocationLocal:capacity :fin OreLocator.mnd: if capacity >= limit then
  159:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  160:  sensor *tmp131 :findDrillLocationLocal:item @id              ...
  161:  write *tmp131 bank1 .count                                   ...
  162:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  163:  write :findDrillLocationLocal:score bank1 .count             ...
  164:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  165:  write :findDrillLocationLocal:dx bank1 .count                ...
  166:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  167:  write :findDrillLocationLocal:dy bank1 .count                ...
  168:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, score, dx, dy);
  169:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  170:  set :findDrillLocationLocal*retval true                      OreLocator.mnd: return true;
  171:  return :findDrillLocationLocal*retaddr                       ...
        label *label73                                               OreLocator.mnd: if capacity >= limit then
        label *label69                                               OreLocator.mnd: if score > capacity then
  172:  jump *label76 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score > best then
  173:  set :findDrillLocationLocal:bestX :findDrillLocationLocal:ne OreLocator.mnd: bestX = newX;
  174:  set :findDrillLocationLocal:bestY :findDrillLocationLocal:ne OreLocator.mnd: bestY = newY;
  175:  set :findDrillLocationLocal:best :findDrillLocationLocal:sco OreLocator.mnd: best = score;
        label *label76                                               OreLocator.mnd: if score > best then
  176:  jump *label65 lessThanEq :findDrillLocationLocal:score :find OreLocator.mnd: if score <= last then break; end;
  177:  set :findDrillLocationLocal:last :findDrillLocationLocal:sco OreLocator.mnd: last = score;
  178:  op mul :round:x :findDrillLocationLocal:diffX 1.1            OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  179:  op add *tmp145 :round:x 0.5                                  *math: floor(x + 0.5);
  180:  op floor *tmp144 *tmp145 0                                   OreLocator.mnd: oreX += round(diffX * 1.1);    // Rounds halves to higher absolute values
  181:  op add :findDrillLocationLocal:oreX :findDrillLocationLocal: ...
  182:  op mul :round.1:x :findDrillLocationLocal:diffY 1.1          OreLocator.mnd: oreY += round(diffY * 1.1);
  183:  op add *tmp149 :round.1:x 0.5                                *math: floor(x + 0.5);
  184:  op floor *tmp148 *tmp149 0                                   OreLocator.mnd: oreY += round(diffY * 1.1);
  185:  op add :findDrillLocationLocal:oreY :findDrillLocationLocal: ...
  186:  jump *label63 always 0 0                                     OreLocator.mnd: while true do
        label *label65                                               ...
  187:  jump *label23 lessThan :findDrillLocationLocal:best 0        OreLocator.mnd: if best >= 0 then
  188:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = item.@id;
  189:  sensor *tmp155 :findDrillLocationLocal:item @id              ...
  190:  write *tmp155 bank1 .count                                   ...
  191:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = value;
  192:  write :findDrillLocationLocal:best bank1 .count              ...
  193:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = x;
  194:  write :findDrillLocationLocal:bestX bank1 .count             ...
  195:  op add .count .count 1                                       OreLocator.mnd: bank1[++count] = y;
  196:  write :findDrillLocationLocal:bestY bank1 .count             ...
  197:  op add .locations .locations 1                               OreLocator.mnd: saveLocation(item, best, bestX, bestY);
  198:  jump *label23 always 0 0                                     OreLocator.mnd: while true do
        label *label9                                                OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
  199:  set :findPossiblePlacement:y -3                              OreLocator.mnd: for y in -3 .. 3 do
  200:  jump *label88 greaterThan :findPossiblePlacement:y 3         ...
        label *label179                                              ...
  201:  op add *tmp163 :findPossiblePlacement:y 3                    OreLocator.mnd: var mask = placementMask << 7 * (y + 3);
  202:  op mul *tmp164 7 *tmp163                                     ...
  203:  op shl :findPossiblePlacement:mask :findPossiblePlacement:pl ...
  204:  set :findPossiblePlacement:x -3                              OreLocator.mnd: for x in -3 .. 3 do
  205:  jump *label91 greaterThan :findPossiblePlacement:x 3         ...
        label *label180                                              ...
  206:  op and *tmp166 :findPossiblePlacement:terrainMask :findPossi OreLocator.mnd: if (terrainMask & mask) == 0 then return 3 * 8 + y * 7 + x; end;
  207:  jump *label92 notEqual *tmp166 0                             ...
  208:  op mul *tmp169 :findPossiblePlacement:y 7                    ...
  209:  op add *tmp170 24 *tmp169                                    ...
  210:  op add :findPossiblePlacement*retval *tmp170 :findPossiblePl ...
  211:  return :findPossiblePlacement*retaddr                        ...
        label *label92                                               ...
  212:  op sub *tmp172 3 :findPossiblePlacement:width                OreLocator.mnd: if x > 3 - width then break; end;
  213:  jump *label91 greaterThan :findPossiblePlacement:x *tmp172   ...
  214:  op shl :findPossiblePlacement:mask :findPossiblePlacement:ma OreLocator.mnd: mask <<= 1;
  215:  op add :findPossiblePlacement:x :findPossiblePlacement:x 1   OreLocator.mnd: for x in -3 .. 3 do
  216:  jump *label180 lessThanEq :findPossiblePlacement:x 3         ...
        label *label91                                               ...
  217:  op sub *tmp175 3 :findPossiblePlacement:height               OreLocator.mnd: if y > 3 - height then break; end;
  218:  jump *label88 greaterThan :findPossiblePlacement:y *tmp175   ...
  219:  op add :findPossiblePlacement:y :findPossiblePlacement:y 1   OreLocator.mnd: for y in -3 .. 3 do
  220:  jump *label179 lessThanEq :findPossiblePlacement:y 3         ...
        label *label88                                               ...
  221:  set :findPossiblePlacement*retval -1                         OreLocator.mnd: return -1;
  222:  return :findPossiblePlacement*retaddr                        OreLocator.mnd: noinline def findPossiblePlacement(terrainMask, placementMask, width, height, out x, out y)
        label *label12                                               OreLocator.mnd: def createCombinedMask(x, y);
  223:  write @unit processor1 ":createTerrainMask:unit"             OreLocator.mnd: async(processor1.createTerrainMask(@unit, x, y));
  224:  write :createCombinedMask:x processor1 ":createTerrainMask:x ...
  225:  write :createCombinedMask:y processor1 ":createTerrainMask:y ...
  226:  write false processor1 ":createTerrainMask*finished"         ...
  227:  write 1 processor1 "@counter"                                ...
  228:  op add *tmp232 :createCombinedMask:y 4                       OreLocator.mnd: var row2 = createBlockMaskRow(x, y + 4);
  229:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  230:  ucontrol getBlock *tmp223 *tmp232 0 :createBlockMaskRow:resu ...
  231:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  232:  op add *tmp223 :createCombinedMask:x 3                       ...
  233:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  234:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  235:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  236:  op add *tmp223 :createCombinedMask:x 2                       ...
  237:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  238:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  239:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  240:  op add *tmp223 :createCombinedMask:x 1                       ...
  241:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  242:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  243:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  244:  ucontrol getBlock :createCombinedMask:x *tmp232 0 *tmp224 0  ...
  245:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  246:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  247:  op add *tmp223 :createCombinedMask:x -1                      ...
  248:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  249:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  250:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  251:  op add *tmp223 :createCombinedMask:x -2                      ...
  252:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  253:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  254:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  255:  op add *tmp223 :createCombinedMask:x -3                      ...
  256:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  257:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  258:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  259:  op add *tmp223 :createCombinedMask:x -4                      ...
  260:  ucontrol getBlock *tmp223 *tmp232 0 *tmp224 0                ...
  261:  op or :createAdjacentMask:row2 *tmp222 *tmp224               ...
  262:  op add *tmp234 :createCombinedMask:y 3                       OreLocator.mnd: var row1 = createBlockMaskRow(x, y + 3);
  263:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  264:  ucontrol getBlock *tmp223 *tmp234 0 :createBlockMaskRow:resu ...
  265:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  266:  op add *tmp223 :createCombinedMask:x 3                       ...
  267:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  268:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  269:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  270:  op add *tmp223 :createCombinedMask:x 2                       ...
  271:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  272:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  273:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  274:  op add *tmp223 :createCombinedMask:x 1                       ...
  275:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  276:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  277:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  278:  ucontrol getBlock :createCombinedMask:x *tmp234 0 *tmp224 0  ...
  279:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  280:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  281:  op add *tmp223 :createCombinedMask:x -1                      ...
  282:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  283:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  284:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  285:  op add *tmp223 :createCombinedMask:x -2                      ...
  286:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  287:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  288:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  289:  op add *tmp223 :createCombinedMask:x -3                      ...
  290:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  291:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  292:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  293:  op add *tmp223 :createCombinedMask:x -4                      ...
  294:  ucontrol getBlock *tmp223 *tmp234 0 *tmp224 0                ...
  295:  op or :createAdjacentMask:row1 *tmp222 *tmp224               ...
  296:  op add *tmp236 :createCombinedMask:y 2                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  297:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  298:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  299:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  300:  op add *tmp223 :createCombinedMask:x 3                       ...
  301:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  302:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  303:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  304:  op add *tmp223 :createCombinedMask:x 2                       ...
  305:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  306:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  307:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  308:  op add *tmp223 :createCombinedMask:x 1                       ...
  309:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  310:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  311:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  312:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  313:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  314:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  315:  op add *tmp223 :createCombinedMask:x -1                      ...
  316:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  317:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  318:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  319:  op add *tmp223 :createCombinedMask:x -2                      ...
  320:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  321:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  322:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  323:  op add *tmp223 :createCombinedMask:x -3                      ...
  324:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  325:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  326:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  327:  op add *tmp223 :createCombinedMask:x -4                      ...
  328:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  329:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  330:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  331:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  332:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  333:  op or *tmp241 *tmp239 *tmp240                                ...
  334:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  335:  op and :createAdjacentMask:result :createAdjacentMask:mask 0 OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  336:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  337:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  338:  op add *tmp236 :createCombinedMask:y 1                       OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  339:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  340:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  341:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  342:  op add *tmp223 :createCombinedMask:x 3                       ...
  343:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  344:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  345:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  346:  op add *tmp223 :createCombinedMask:x 2                       ...
  347:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  348:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  349:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  350:  op add *tmp223 :createCombinedMask:x 1                       ...
  351:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  352:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  353:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  354:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  355:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  356:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  357:  op add *tmp223 :createCombinedMask:x -1                      ...
  358:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  359:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  360:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  361:  op add *tmp223 :createCombinedMask:x -2                      ...
  362:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  363:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  364:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  365:  op add *tmp223 :createCombinedMask:x -3                      ...
  366:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  367:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  368:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  369:  op add *tmp223 :createCombinedMask:x -4                      ...
  370:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  371:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  372:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  373:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  374:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  375:  op or *tmp241 *tmp239 *tmp240                                ...
  376:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  377:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  378:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  379:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  380:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  381:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  382:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  383:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 :createBlo ...
  384:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  385:  op add *tmp223 :createCombinedMask:x 3                       ...
  386:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  387:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  388:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  389:  op add *tmp223 :createCombinedMask:x 2                       ...
  390:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  391:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  392:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  393:  op add *tmp223 :createCombinedMask:x 1                       ...
  394:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  395:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  396:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  397:  ucontrol getBlock :createCombinedMask:x :createCombinedMask: ...
  398:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  399:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  400:  op add *tmp223 :createCombinedMask:x -1                      ...
  401:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  402:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  403:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  404:  op add *tmp223 :createCombinedMask:x -2                      ...
  405:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  406:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  407:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  408:  op add *tmp223 :createCombinedMask:x -3                      ...
  409:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  410:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  411:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  412:  op add *tmp223 :createCombinedMask:x -4                      ...
  413:  ucontrol getBlock *tmp223 :createCombinedMask:y 0 *tmp224 0  ...
  414:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  415:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  416:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  417:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  418:  op or *tmp241 *tmp239 *tmp240                                ...
  419:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  420:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  421:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  422:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  423:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  424:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  425:  op add *tmp236 :createCombinedMask:y -1                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  426:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  427:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  428:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  429:  op add *tmp223 :createCombinedMask:x 3                       ...
  430:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  431:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  432:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  433:  op add *tmp223 :createCombinedMask:x 2                       ...
  434:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  435:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  436:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  437:  op add *tmp223 :createCombinedMask:x 1                       ...
  438:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  439:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  440:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  441:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  442:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  443:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  444:  op add *tmp223 :createCombinedMask:x -1                      ...
  445:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  446:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  447:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  448:  op add *tmp223 :createCombinedMask:x -2                      ...
  449:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  450:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  451:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  452:  op add *tmp223 :createCombinedMask:x -3                      ...
  453:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  454:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  455:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  456:  op add *tmp223 :createCombinedMask:x -4                      ...
  457:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  458:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  459:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  460:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  461:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  462:  op or *tmp241 *tmp239 *tmp240                                ...
  463:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  464:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  465:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  466:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  467:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  468:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  469:  op add *tmp236 :createCombinedMask:y -2                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  470:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  471:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  472:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  473:  op add *tmp223 :createCombinedMask:x 3                       ...
  474:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  475:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  476:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  477:  op add *tmp223 :createCombinedMask:x 2                       ...
  478:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  479:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  480:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  481:  op add *tmp223 :createCombinedMask:x 1                       ...
  482:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  483:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  484:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  485:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  486:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  487:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  488:  op add *tmp223 :createCombinedMask:x -1                      ...
  489:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  490:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  491:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  492:  op add *tmp223 :createCombinedMask:x -2                      ...
  493:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  494:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  495:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  496:  op add *tmp223 :createCombinedMask:x -3                      ...
  497:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  498:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  499:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  500:  op add *tmp223 :createCombinedMask:x -4                      ...
  501:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  502:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  503:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  504:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  505:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  506:  op or *tmp241 *tmp239 *tmp240                                ...
  507:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  508:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  509:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  510:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  511:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  512:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  513:  op add *tmp236 :createCombinedMask:y -3                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  514:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  515:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  516:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  517:  op add *tmp223 :createCombinedMask:x 3                       ...
  518:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  519:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  520:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  521:  op add *tmp223 :createCombinedMask:x 2                       ...
  522:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  523:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  524:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  525:  op add *tmp223 :createCombinedMask:x 1                       ...
  526:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  527:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  528:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  529:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  530:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  531:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  532:  op add *tmp223 :createCombinedMask:x -1                      ...
  533:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  534:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  535:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  536:  op add *tmp223 :createCombinedMask:x -2                      ...
  537:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  538:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  539:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  540:  op add *tmp223 :createCombinedMask:x -3                      ...
  541:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  542:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  543:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  544:  op add *tmp223 :createCombinedMask:x -4                      ...
  545:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  546:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  547:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  548:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  549:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  550:  op or *tmp241 *tmp239 *tmp240                                ...
  551:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  552:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  553:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  554:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  555:  set :createAdjacentMask:row2 :createAdjacentMask:row1        OreLocator.mnd: row2 = row1;
  556:  set :createAdjacentMask:row1 :createBlockMaskRow:result      OreLocator.mnd: row1 = row0;
  557:  op add *tmp236 :createCombinedMask:y -4                      OreLocator.mnd: var row0 = createBlockMaskRow(x, y + r);
  558:  op add *tmp223 :createCombinedMask:x 4                       OreLocator.mnd: result = (result << 1) | getBlock(x + c, y);
  559:  ucontrol getBlock *tmp223 *tmp236 0 :createBlockMaskRow:resu ...
  560:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  561:  op add *tmp223 :createCombinedMask:x 3                       ...
  562:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  563:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  564:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  565:  op add *tmp223 :createCombinedMask:x 2                       ...
  566:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  567:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  568:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  569:  op add *tmp223 :createCombinedMask:x 1                       ...
  570:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  571:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  572:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  573:  ucontrol getBlock :createCombinedMask:x *tmp236 0 *tmp224 0  ...
  574:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  575:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  576:  op add *tmp223 :createCombinedMask:x -1                      ...
  577:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  578:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  579:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  580:  op add *tmp223 :createCombinedMask:x -2                      ...
  581:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  582:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  583:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  584:  op add *tmp223 :createCombinedMask:x -3                      ...
  585:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  586:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  587:  op shl *tmp222 :createBlockMaskRow:result 1                  ...
  588:  op add *tmp223 :createCombinedMask:x -4                      ...
  589:  ucontrol getBlock *tmp223 *tmp236 0 *tmp224 0                ...
  590:  op or :createBlockMaskRow:result *tmp222 *tmp224             ...
  591:  op shl *tmp238 :createAdjacentMask:row1 1                    OreLocator.mnd: var mask = row2 | (row1 << 1) | (row1 >> 1) | row0;
  592:  op or *tmp239 :createAdjacentMask:row2 *tmp238               ...
  593:  op shr *tmp240 :createAdjacentMask:row1 1                    ...
  594:  op or *tmp241 *tmp239 *tmp240                                ...
  595:  op or :createAdjacentMask:mask *tmp241 :createBlockMaskRow:r ...
  596:  op shl *tmp243 :createAdjacentMask:result 7                  OreLocator.mnd: result = (result << 7) | (mask & 0xFE);       // We're keeping one additional bit on the right
  597:  op and *tmp244 :createAdjacentMask:mask 0xFE                 ...
  598:  op or :createAdjacentMask:result *tmp243 *tmp244             ...
  599:  op shr *tmp231 :createAdjacentMask:result 1                  OreLocator.mnd: var adjacentMask = createAdjacentMask(x, y);
        label *label128                                              OreLocator.mnd: var terrainMask = await(processor1.createTerrainMask);
  600:  wait 1e-15                                                   ...
  601:  read *tmp247 processor1 ":createTerrainMask*finished"        ...
  602:  jump *label128 equal *tmp247 false                           ...
  603:  read :createCombinedMask:terrainMask processor1 ":createTerr ...
  604:  op or :createCombinedMask*retval *tmp231 :createCombinedMask OreLocator.mnd: return adjacentMask | terrainMask;
  605:  return :createCombinedMask*retaddr                           OreLocator.mnd: def createCombinedMask(x, y);
        label *label13                                               OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
  606:  set .panelY -1                                               OreLocator.mnd: water1X = water1Y = water2X = water2Y = generatorX = generatorY = panelX = panelY = -1;
  607:  set .panelX -1                                               ...
  608:  set .generatorY -1                                           ...
  609:  set .generatorX -1                                           ...
  610:  set .water2Y -1                                              ...
  611:  set .water2X -1                                              ...
  612:  set .water1Y -1                                              ...
  613:  set .water1X -1                                              ...
  614:  set :moveTo.5:x .drillX                                      OreLocator.mnd: moveTo(drillX, drillY, 1);
  615:  set :moveTo.5:y .drillY                                      ...
  616:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250 0          OreLocator.mnd: while !within(x, y, radius) do
  617:  jump *label133 notEqual *tmp250 false                        ...
        label *label227                                              ...
  618:  ucontrol approach :moveTo.5:x :moveTo.5:y 0.5 0 0            OreLocator.mnd: approach(x, y, radius - 0.5);
  619:  ucontrol within :moveTo.5:x :moveTo.5:y 1 *tmp250 0          OreLocator.mnd: while !within(x, y, radius) do
  620:  jump *label227 equal *tmp250 false                           ...
        label *label133                                              ...
  621:  set :createCombinedMask:x .drillX                            OreLocator.mnd: var plainTerrainMask = createCombinedMask(drillX, drillY);
  622:  set :createCombinedMask:y .drillY                            ...
  623:  setaddr :createCombinedMask*retaddr *label134                ...
  624:  call *label12 *invalid :createCombinedMask*retval            ...
        label *label134                                              ...
  625:  op or :layoutThoriumDrillAtLocation:terrainMask :createCombi OreLocator.mnd: var terrainMask = plainTerrainMask | createFixedMatrix(
  626:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: var cornersMask = terrainMask | createFixedMatrix(
  627:  set :layoutThoriumDrillAtLocation:mask2x2 387                OreLocator.mnd: var mask2x2 = createFixedMatrix(0b11, 0b11);
  628:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  629:  set :findPossiblePlacement:placementMask 387                 ...
  630:  set :findPossiblePlacement:width 2                           ...
  631:  set :findPossiblePlacement:height 2                          ...
  632:  setaddr :findPossiblePlacement*retaddr *label138             ...
  633:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label138                                              ...
  634:  jump *label139 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  635:  op add *tmp291 .drillX 0.5                                   OreLocator.mnd: water1X = drillX + 0.5 + c;
  636:  op add .water1X *tmp291 :findPossiblePlacement:x             ...
  637:  op add *tmp293 .drillY 0.5                                   OreLocator.mnd: water1Y = drillY + 0.5 + r;
  638:  op add .water1Y *tmp293 :findPossiblePlacement:y             ...
  639:  op shl *tmp295 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  640:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
  641:  op or :layoutThoriumDrillAtLocation:cornersMask :layoutThori OreLocator.mnd: cornersMask |= (mask2x2 << shift);
        label *label139                                              OreLocator.mnd: if shift >= 0 then
  642:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: shift = findPossiblePlacement(cornersMask, mask2x2, 2, 2, out c, out r);
  643:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  644:  set :findPossiblePlacement:width 2                           ...
  645:  set :findPossiblePlacement:height 2                          ...
  646:  setaddr :findPossiblePlacement*retaddr *label141             ...
  647:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label141                                              ...
  648:  jump *label142 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  649:  op add *tmp300 .drillX 0.5                                   OreLocator.mnd: containerX = drillX + 0.5 + c;
  650:  op add .containerX *tmp300 :findPossiblePlacement:x          ...
  651:  op add *tmp302 .drillY 0.5                                   OreLocator.mnd: containerY = drillY + 0.5 + r;
  652:  op add .containerY *tmp302 :findPossiblePlacement:y          ...
  653:  op shl *tmp304 :layoutThoriumDrillAtLocation:mask2x2 :findPo OreLocator.mnd: terrainMask |= (mask2x2 << shift);
  654:  op or :layoutThoriumDrillAtLocation:terrainMask :layoutThori ...
        label *label142                                              OreLocator.mnd: if shift >= 0 then
  655:  set :layoutThoriumDrillAtLocation:generatorHorizontal 1935   OreLocator.mnd: var generatorHorizontal = createFixedMatrix(0b1111, 0b1111);
  656:  set :layoutThoriumDrillAtLocation:generatorVertical 6340995  OreLocator.mnd: var generatorVertical = createFixedMatrix(0b11, 0b11, 0b11, 0b11);
  657:  set :tryPlaceGenerator:centerX .drillX                       OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  658:  set :tryPlaceGenerator:centerY .drillY                       ...
  659:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  660:  set :tryPlaceGenerator:generatorHorizontal 1935              ...
  661:  set :tryPlaceGenerator:generatorVertical 6340995             ...
  662:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  663:  set :findPossiblePlacement:placementMask 6340995             ...
  664:  set :findPossiblePlacement:width 2                           ...
  665:  set :findPossiblePlacement:height 4                          ...
  666:  setaddr :findPossiblePlacement*retaddr *label427             ...
  667:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label427                                              ...
  668:  jump *label430 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  669:  jump *label428 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  670:  set :tryPlaceGenerator*retval false                          ...
  671:  jump *label444 always 0 0                                    ...
        label *label428                                              ...
  672:  op add *tmp183 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  673:  op add .water2X *tmp183 :findPossiblePlacement:x             ...
  674:  op add *tmp185 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  675:  op add .water2Y *tmp185 :findPossiblePlacement:y             ...
  676:  op add .generatorX *tmp183 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  677:  op add *tmp189 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  678:  op add .generatorY *tmp189 :findPossiblePlacement:y          ...
  679:  op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  680:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  681:  jump *label434 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label430                                              ...
  682:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  683:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  684:  set :findPossiblePlacement:width 4                           ...
  685:  set :findPossiblePlacement:height 2                          ...
  686:  setaddr :findPossiblePlacement*retaddr *label431             ...
  687:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label431                                              ...
  688:  jump *label432 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  689:  set :tryPlaceGenerator*retval false                          ...
  690:  jump *label444 always 0 0                                    ...
        label *label432                                              ...
  691:  op add *tmp195 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  692:  op add .water2X *tmp195 :findPossiblePlacement:x             ...
  693:  op add *tmp197 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  694:  op add .water2Y *tmp197 :findPossiblePlacement:y             ...
  695:  op add *tmp199 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  696:  op add .generatorX *tmp199 :findPossiblePlacement:x          ...
  697:  op add .generatorY *tmp197 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  698:  op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  699:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label434                                              OreLocator.mnd: if shift >= 0 then
  700:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  701:  set :findPossiblePlacement:placementMask 1                   ...
  702:  set :findPossiblePlacement:width 1                           ...
  703:  set :findPossiblePlacement:height 1                          ...
  704:  setaddr :findPossiblePlacement*retaddr *label435             ...
  705:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label435                                              ...
  706:  jump *label436 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  707:  set :tryPlaceGenerator*retval false                          ...
  708:  jump *label444 always 0 0                                    ...
        label *label436                                              ...
  709:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  710:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  711:  op shl *tmp209 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  712:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  713:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  714:  set :findPossiblePlacement:placementMask 1                   ...
  715:  set :findPossiblePlacement:width 1                           ...
  716:  set :findPossiblePlacement:height 1                          ...
  717:  setaddr :findPossiblePlacement*retaddr *label438             ...
  718:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label438                                              ...
  719:  jump *label439 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  720:  set :tryPlaceGenerator*retval false                          ...
  721:  jump *label444 always 0 0                                    ...
        label *label439                                              ...
  722:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  723:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  724:  op shl *tmp215 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  725:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  726:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  727:  set :findPossiblePlacement:placementMask 1                   ...
  728:  set :findPossiblePlacement:width 1                           ...
  729:  set :findPossiblePlacement:height 1                          ...
  730:  setaddr :findPossiblePlacement*retaddr *label441             ...
  731:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label441                                              ...
  732:  jump *label442 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  733:  set :tryPlaceGenerator*retval false                          ...
  734:  jump *label444 always 0 0                                    ...
        label *label442                                              ...
  735:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  736:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  737:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  738:  jump *label444 always 0 0                                    ...
        label *label444                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  739:  jump *label147 equal :tryPlaceGenerator*retval false         ...
  740:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  741:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label147                                              OreLocator.mnd: if tryPlaceGenerator(drillX, drillY, terrainMask, generatorHorizontal, generatorVertical) then
  742:  set :layoutThoriumDrillAtLocation:sx 3                       OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
  743:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  744:  setaddr *tmp319 *label152                                    ...
  745:  jump *label149 always 0 0                                    ...
        multilabel *label152                                         ...
  746:  set :layoutThoriumDrillAtLocation:sx 3                       ...
  747:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  748:  setaddr *tmp319 *label153                                    ...
  749:  jump *label149 always 0 0                                    ...
        multilabel *label153                                         ...
  750:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  751:  set :layoutThoriumDrillAtLocation:sy 3                       ...
  752:  setaddr *tmp319 *label154                                    ...
  753:  jump *label149 always 0 0                                    ...
        multilabel *label154                                         ...
  754:  set :layoutThoriumDrillAtLocation:sx -3                      ...
  755:  set :layoutThoriumDrillAtLocation:sy -3                      ...
  756:  setaddr *tmp319 *label155                                    ...
        label *label149                                              ...
  757:  op sub :layoutThoriumDrillAtLocation:newX .drillX :layoutTho OreLocator.mnd: var newX = drillX - sx;
  758:  op sub :layoutThoriumDrillAtLocation:newY .drillY :layoutTho OreLocator.mnd: var newY = drillY - sy;
  759:  set :createCombinedMask:x :layoutThoriumDrillAtLocation:newX OreLocator.mnd: var newTerrainMask = createCombinedMask(newX, newY);
  760:  set :createCombinedMask:y :layoutThoriumDrillAtLocation:newY ...
  761:  setaddr :createCombinedMask*retaddr *label156                ...
  762:  call *label12 *invalid :createCombinedMask*retval            ...
        label *label156                                              ...
  763:  set :shiftMask:mask :layoutThoriumDrillAtLocation:terrainMas OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  764:  op abs *tmp324 :layoutThoriumDrillAtLocation:sx 0            OreLocator.mnd: if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;
  765:  op greaterThan *tmp325 *tmp324 6                             ...
  766:  op abs *tmp326 :layoutThoriumDrillAtLocation:sy 0            ...
  767:  op greaterThan *tmp327 *tmp326 6                             ...
  768:  op or *tmp328 *tmp325 *tmp327                                ...
  769:  jump *label158 equal *tmp328 false                           ...
  770:  set *tmp323 0                                                ...
  771:  jump *label157 always 0 0                                    ...
        label *label158                                              ...
  772:  op mul *tmp330 7 :layoutThoriumDrillAtLocation:sy            OreLocator.mnd: var shift = shiftX + 7 * shiftY;
  773:  op add :shiftMask:shift :layoutThoriumDrillAtLocation:sx *tm ...
  774:  jump *label160 lessThanEq :shiftMask:shift 0                 OreLocator.mnd: if shift > 0 then
  775:  op shr :shiftMask:clearMask 562949953421311 :shiftMask:shift OreLocator.mnd: var clearMask = ((1 << 49) - 1) >> shift;
  776:  op and *tmp335 :layoutThoriumDrillAtLocation:terrainMask :sh OreLocator.mnd: mask = (mask & clearMask) << shift;
  777:  op shl :shiftMask:mask *tmp335 :shiftMask:shift              ...
  778:  jump *label161 always 0 0                                    OreLocator.mnd: if shift > 0 then
        label *label160                                              ...
  779:  op sub *tmp337 0 :shiftMask:shift                            OreLocator.mnd: mask >>= -shift;
  780:  op shr :shiftMask:mask :layoutThoriumDrillAtLocation:terrain ...
        label *label161                                              OreLocator.mnd: if shift > 0 then
  781:  jump *label162 equal :layoutThoriumDrillAtLocation:sx 0      OreLocator.mnd: if shiftX != 0 then
  782:  op shr :shiftMask:keep 0b1111111 *tmp324                     OreLocator.mnd: var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
  783:  jump *label164 lessThanEq :layoutThoriumDrillAtLocation:sx 0 OreLocator.mnd: if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
  784:  op shl :shiftMask:keep :shiftMask:keep :layoutThoriumDrillAt ...
        label *label164                                              ...
  785:  op shl *tmp344 :shiftMask:keep 7                             OreLocator.mnd: keep |= keep << 7;
  786:  op or :shiftMask:keep :shiftMask:keep *tmp344                ...
  787:  op shl *tmp345 :shiftMask:keep 14                            OreLocator.mnd: keep |= keep << 14;
  788:  op or :shiftMask:keep :shiftMask:keep *tmp345                ...
  789:  op shl *tmp346 :shiftMask:keep 21                            OreLocator.mnd: keep |= keep << 21;
  790:  op or :shiftMask:keep :shiftMask:keep *tmp346                ...
  791:  op and :shiftMask:mask :shiftMask:mask :shiftMask:keep       OreLocator.mnd: mask &= keep;
        label *label162                                              OreLocator.mnd: if shiftX != 0 then
  792:  set *tmp323 :shiftMask:mask                                  OreLocator.mnd: return mask;
        label *label157                                              OreLocator.mnd: var shiftedMask = shiftMask(terrainMask, sx, sy);
  793:  op or :layoutThoriumDrillAtLocation:combinedMask :createComb OreLocator.mnd: var combinedMask = newTerrainMask | shiftedMask;
  794:  op sub *tmp348 .drillX :layoutThoriumDrillAtLocation:sx      OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  795:  op sub *tmp349 .drillY :layoutThoriumDrillAtLocation:sy      ...
  796:  set :tryPlaceGenerator:centerX *tmp348                       ...
  797:  set :tryPlaceGenerator:centerY *tmp349                       ...
  798:  set :tryPlaceGenerator:terrainMask :layoutThoriumDrillAtLoca ...
  799:  set :tryPlaceGenerator:generatorHorizontal :layoutThoriumDri ...
  800:  set :tryPlaceGenerator:generatorVertical :layoutThoriumDrill ...
  801:  set :findPossiblePlacement:terrainMask :layoutThoriumDrillAt OreLocator.mnd: var shift = findPossiblePlacement(terrainMask, generatorVertical, 2, 4, out c, out r);
  802:  set :findPossiblePlacement:placementMask :layoutThoriumDrill ...
  803:  set :findPossiblePlacement:width 2                           ...
  804:  set :findPossiblePlacement:height 4                          ...
  805:  setaddr :findPossiblePlacement*retaddr *label446             ...
  806:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label446                                              ...
  807:  jump *label449 lessThan :findPossiblePlacement*retval 0      OreLocator.mnd: if shift >= 0 then
  808:  jump *label447 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  809:  set :tryPlaceGenerator*retval false                          ...
  810:  jump *label463 always 0 0                                    ...
        label *label447                                              ...
  811:  op add *tmp183 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  812:  op add .water2X *tmp183 :findPossiblePlacement:x             ...
  813:  op add *tmp185 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  814:  op add .water2Y *tmp185 :findPossiblePlacement:y             ...
  815:  op add .generatorX *tmp183 :findPossiblePlacement:x          OreLocator.mnd: generatorX = centerX + 0.5 + c;
  816:  op add *tmp189 :tryPlaceGenerator:centerY 2.5                OreLocator.mnd: generatorY = centerY + 2.5 + r;
  817:  op add .generatorY *tmp189 :findPossiblePlacement:y          ...
  818:  op shl *tmp191 :tryPlaceGenerator:generatorVertical :findPos OreLocator.mnd: terrainMask |= (generatorVertical << shift);
  819:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  820:  jump *label453 always 0 0                                    OreLocator.mnd: if shift >= 0 then
        label *label449                                              ...
  821:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, generatorHorizontal, 4, 2, out c, out r);
  822:  set :findPossiblePlacement:placementMask :tryPlaceGenerator: ...
  823:  set :findPossiblePlacement:width 4                           ...
  824:  set :findPossiblePlacement:height 2                          ...
  825:  setaddr :findPossiblePlacement*retaddr *label450             ...
  826:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label450                                              ...
  827:  jump *label451 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  828:  set :tryPlaceGenerator*retval false                          ...
  829:  jump *label463 always 0 0                                    ...
        label *label451                                              ...
  830:  op add *tmp195 :tryPlaceGenerator:centerX 0.5                OreLocator.mnd: water2X = centerX + 0.5 + c;
  831:  op add .water2X *tmp195 :findPossiblePlacement:x             ...
  832:  op add *tmp197 :tryPlaceGenerator:centerY 0.5                OreLocator.mnd: water2Y = centerY + 0.5 + r;
  833:  op add .water2Y *tmp197 :findPossiblePlacement:y             ...
  834:  op add *tmp199 :tryPlaceGenerator:centerX 2.5                OreLocator.mnd: generatorX = centerX + 2.5 + c;
  835:  op add .generatorX *tmp199 :findPossiblePlacement:x          ...
  836:  op add .generatorY *tmp197 :findPossiblePlacement:y          OreLocator.mnd: generatorY = centerY + 0.5 + r;
  837:  op shl *tmp203 :tryPlaceGenerator:generatorHorizontal :findP OreLocator.mnd: terrainMask |= (generatorHorizontal << shift);
  838:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
        label *label453                                              OreLocator.mnd: if shift >= 0 then
  839:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  840:  set :findPossiblePlacement:placementMask 1                   ...
  841:  set :findPossiblePlacement:width 1                           ...
  842:  set :findPossiblePlacement:height 1                          ...
  843:  setaddr :findPossiblePlacement*retaddr *label454             ...
  844:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label454                                              ...
  845:  jump *label455 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  846:  set :tryPlaceGenerator*retval false                          ...
  847:  jump *label463 always 0 0                                    ...
        label *label455                                              ...
  848:  op add .nodeX :tryPlaceGenerator:centerX :findPossiblePlacem OreLocator.mnd: nodeX = centerX + c;
  849:  op add .nodeY :tryPlaceGenerator:centerY :findPossiblePlacem OreLocator.mnd: nodeY = centerY + r;
  850:  op shl *tmp209 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  851:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  852:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  853:  set :findPossiblePlacement:placementMask 1                   ...
  854:  set :findPossiblePlacement:width 1                           ...
  855:  set :findPossiblePlacement:height 1                          ...
  856:  setaddr :findPossiblePlacement*retaddr *label457             ...
  857:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label457                                              ...
  858:  jump *label458 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  859:  set :tryPlaceGenerator*retval false                          ...
  860:  jump *label463 always 0 0                                    ...
        label *label458                                              ...
  861:  op add .panelX :tryPlaceGenerator:centerX :findPossiblePlace OreLocator.mnd: panelX = centerX + c;
  862:  op add .panelY :tryPlaceGenerator:centerY :findPossiblePlace OreLocator.mnd: panelY = centerY + r;
  863:  op shl *tmp215 1 :findPossiblePlacement*retval               OreLocator.mnd: terrainMask |= (1 << shift);
  864:  op or :tryPlaceGenerator:terrainMask :tryPlaceGenerator:terr ...
  865:  set :findPossiblePlacement:terrainMask :tryPlaceGenerator:te OreLocator.mnd: shift = findPossiblePlacement(terrainMask, 1, 1, 1, out c, out r);
  866:  set :findPossiblePlacement:placementMask 1                   ...
  867:  set :findPossiblePlacement:width 1                           ...
  868:  set :findPossiblePlacement:height 1                          ...
  869:  setaddr :findPossiblePlacement*retaddr *label460             ...
  870:  call *label9 *invalid :findPossiblePlacement*retval          ...
        label *label460                                              ...
  871:  jump *label461 greaterThanEq :findPossiblePlacement*retval 0 OreLocator.mnd: if shift < 0 then return false; end;
  872:  set :tryPlaceGenerator*retval false                          ...
  873:  jump *label463 always 0 0                                    ...
        label *label461                                              ...
  874:  op add .batteryX :tryPlaceGenerator:centerX :findPossiblePla OreLocator.mnd: batteryX = centerX + c;
  875:  op add .batteryY :tryPlaceGenerator:centerY :findPossiblePla OreLocator.mnd: batteryY = centerY + r;
  876:  set :tryPlaceGenerator*retval true                           OreLocator.mnd: return true;
  877:  jump *label463 always 0 0                                    ...
        label *label463                                              OreLocator.mnd: if tryPlaceGenerator(drillX - sx, drillY - sy, combinedMask, generatorHorizontal, generatorVertical) then return true; end;
  878:  jump *label167 equal :tryPlaceGenerator*retval false         ...
  879:  set :layoutThoriumDrillAtLocation*retval true                ...
  880:  return :layoutThoriumDrillAtLocation*retaddr                 ...
        label *label167                                              ...
  881:  multijump *tmp319 0 0                                        OreLocator.mnd: for var sx in 3, 3, -3, -3; var sy in 3, -3, 3, -3 do
        multilabel *label155                                         ...
  882:  set :layoutThoriumDrillAtLocation*retval true                OreLocator.mnd: return true;
  883:  return :layoutThoriumDrillAtLocation*retaddr                 OreLocator.mnd: noinline def layoutThoriumDrillAtLocation()
        label *label2                                                OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  884:  set .searchFinished false                                    OreLocator.mnd: searchFinished = false;
  885:  set :findDrillLocationLocal:x :findDrillLocation:x           OreLocator.mnd: findDrillLocationLocal(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity);
  886:  set :findDrillLocationLocal:y :findDrillLocation:y           ...
  887:  set :findDrillLocationLocal:unit :findDrillLocation:unit     ...
  888:  set :findDrillLocationLocal:item :findDrillLocation:item     ...
  889:  set :findDrillLocationLocal:ore :findDrillLocation:ore       ...
  890:  set :findDrillLocationLocal:size :findDrillLocation:size     ...
  891:  set :findDrillLocationLocal:limit :findDrillLocation:limit   ...
  892:  setaddr :findDrillLocationLocal*retaddr *label170            ...
  893:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label170                                              ...
  894:  set :findDrillLocation:dx :findDrillLocationLocal:dx         ...
  895:  set :findDrillLocation:dy :findDrillLocationLocal:dy         ...
  896:  set :findDrillLocation:capacity :findDrillLocationLocal:capa ...
  897:  set .searchFinished true                                     OreLocator.mnd: searchFinished = true;
  898:  set :findDrillLocation*retval true                           OreLocator.mnd: remote def findDrillLocation(x, y, unit, item, ore, size, limit, out dx, out dy, out capacity)
  899:  set :findDrillLocation*finished true                         ...
  900:  jump *label16 always 0 0                                     ...
        label *label3                                                OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
  901:  set :findDrillLocationLocal:x :layoutThoriumDrill:x          OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  902:  set :findDrillLocationLocal:y :layoutThoriumDrill:y          ...
  903:  set :findDrillLocationLocal:unit :layoutThoriumDrill:unit    ...
  904:  set :findDrillLocationLocal:item @thorium                    ...
  905:  set :findDrillLocationLocal:ore @ore-thorium                 ...
  906:  set :findDrillLocationLocal:size 3                           ...
  907:  set :findDrillLocationLocal:limit :layoutThoriumDrill:limit  ...
  908:  setaddr :findDrillLocationLocal*retaddr *label172            ...
  909:  call *label8 *invalid :findDrillLocationLocal*retval         ...
        label *label172                                              ...
  910:  set .drillX :findDrillLocationLocal:dx                       ...
  911:  set .drillY :findDrillLocationLocal:dy                       ...
  912:  jump *label173 notEqual :findDrillLocationLocal*retval false ...
  913:  set :layoutThoriumDrill*retval false                         OreLocator.mnd: return false;
  914:  jump *label171 always 0 0                                    ...
        label *label173                                              OreLocator.mnd: if !findDrillLocationLocal(x, y, unit, @thorium, @ore-thorium, 3, limit, out drillX, out drillY) then
  915:  setaddr :layoutThoriumDrillAtLocation*retaddr *label175      OreLocator.mnd: layoutThoriumDrillAtLocation();
  916:  call *label13 *invalid :layoutThoriumDrillAtLocation*retval  ...
        label *label175                                              ...
  917:  set :layoutThoriumDrill*retval :layoutThoriumDrillAtLocation OreLocator.mnd: remote def layoutThoriumDrill(x, y, unit, limit)
        label *label171                                              ...
  918:  set :layoutThoriumDrill*finished true                        ...
  919:  jump *label16 always 0 0                                     ...
        label *label4                                                OreLocator.mnd: remote void stopLocation()
  920:  set .mapSpots 0                                              OreLocator.mnd: mapProgress = mapTotal = mapAction = mapSpots = 0;
  921:  set .mapAction 0                                             ...
  922:  set .mapTotal 0                                              ...
  923:  set .mapProgress 0                                           ...
  924:  ucontrol unbind 0 0 0 0 0                                    OreLocator.mnd: unbind();
  925:  set :stopLocation*finished true                              OreLocator.mnd: remote void stopLocation()
  926:  jump *label16 always 0 0                                     ...


Performance: parsed in 497 ms, compiled in 337 ms, optimized in 1,204 ms, run in 15 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 4: read *tmp20 processor1 "*signature":
Variable 'processor1' is not an object.
(Use the '#set err-not-an-object = false;' directive or the '--err-not-an-object false' command line option to ignore this exception.)
