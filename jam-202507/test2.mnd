#set target = 8;

const FULL_MASK = (1 << 49) - 1;

// Shifts the mask in the given direction
// Makes sure parts of the mask shifted away are properly cleared
def shiftMask(mask, shiftX, shiftY)
    // If shifted all the way, the mask becomes empty
    if abs(shiftX) > 6 or abs(shiftY) > 6 then return 0; end;

    var shift = shiftX + 7 * shiftY;
    if shift > 0 then
        // We might run into precision issues. Need to clear the top part first
        var clearMask = FULL_MASK >> shift;
        mask = (mask & clearMask) << shift;
    else
        mask >>= -shift;
    end;

    // Need to clear columns?
    if shiftX != 0 then
        var keep = 0b1111111 >> abs(shiftX);        // The bits we need to keep
        if shiftX > 0 then keep <<= shiftX; end;    // Shift to the proper side
        keep |= keep << 7;
        keep |= keep << 14;
        keep |= keep << 21;
        mask &= keep;
    end;

    return mask;
end;

// Width and height must be within 1 .. 7
def createMatrixOfSize(width, height)
    var row = (1 << width) - 1;
    var matrix = row;
    // Gets unrolled even for variable height
    for var i in 1 ... 7 do
        if i >= height then break; end;
        matrix = (matrix << 7) | row;
    end;
    return matrix;
end;

// Excludes a square area centered at areaX, areaY with given dimensions
// (sets the bits in the mask where the area overlaps the mask to 1).
// The area size is expected to be greater than 7 (otherwise a simple shiftMask could be done)
// To exclude an area with an even-sized side, place the center at half tiles (e.g. 22.5, 35,5).
// The mask size is fixed at 7.
noinline def excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
    // The size of x overlap
    var overlapX = (areaWidth + 7) / 2 - abs(maskX - areaX);
    var overlapY = (areaHeight + 7) / 2 - abs(maskY - areaY);

    if overlapX > 0 and overlapY > 0 then
        var blockSizeX = min(7, overlapX);
        var blockSizeY = min(7, overlapY);
        var blocked = createMatrixOfSize(blockSizeX, blockSizeY);
        var shiftX = (maskX < areaX) * (7 - blockSizeX);
        var shiftY = (maskY < areaY) * (7 - blockSizeY);
        var shifted = shiftMask(blocked, shiftX, shiftY);
        return mask | shifted;
    else
        return mask;
    end;
end;

void drawMask(mask)
    reset();
    translate(6, 6);
//    scale(10, 10);
    clear(0, 0, 0);
    for var r in 0 ... 7 descending do
        for var c in 0 ... 7 do
            var color = mask & (1 << (7 * r + c)) ? %[red] : %[green];
            col(color);
            rect(c * 10, r * 10, 8, 8);
        end;
    end;
    drawflush(display1);
end;


param x = 85;
param y = 100;

begin
    //      excludeArea(mask, maskX, maskY, areaX, areaY, areaWidth, areaHeight)
    //var m = excludeArea(0,      142,   131,   151 ,   135,        13,         13);
    var m = 387;
    drawMask(m << 7);
end;

