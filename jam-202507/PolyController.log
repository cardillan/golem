   227 instructions before optimizations.
     8 instructions eliminated by Temp Variables Elimination (2 passes, 6 iterations).
    36 instructions eliminated by Dead Code Elimination (7 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    18 instructions eliminated by Jump Optimization (5 iterations).
     9 instructions eliminated by Single Step Elimination (6 iterations).
     3 instructions eliminated by If Expression Optimization (4 iterations).
     2 instructions eliminated by Data Flow Optimization (2 passes, 5 iterations).
     1 instructions eliminated by Jump Straightening (5 iterations).
    12 instructions updated by Jump Threading.
     6 instructions eliminated by Unreachable Code Elimination (2 iterations).
    18 instructions eliminated by Print Merging.
   125 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-20 instructions):
 
    24 op equal *tmp4 .core null
    25 jump *label15 equal *tmp4 false
    26 jump *label14 always
-    * set *tmp5 null
    27 jump *label16 always
    28 label *label15
-    * set *tmp5 null
    29 label *label16
    30 label *label17
    31 jump *label19 equal true false
 
    35 print "Found builder unit."
    36 print "\n"
    37 printflush message1
-    * set *tmp7 null
    38 jump *label21 always
    39 label *label20
    40 op equal *tmp8 .thoriumDrone null
 
    55 jump *label27 equal *tmp17 false
    56 ucontrol approach .coreX .coreY 6
    57 ucontrol itemDrop .core 30
-    * set *tmp18 null
    58 jump *label28 always
    59 label *label27
    60 op equal *tmp19 :serviceThoriumDrill:item null
 
    67 ucontrol itemDrop @air 30
    68 set *tmp20 null
    69 label *label30
-    * set *tmp18 *tmp20
    70 label *label28
    71 label *label26
    72 jump *label18 always
-    * set *tmp15 null
    73 jump *label25 always
    74 label *label24
-    * set *tmp15 null
    75 label *label25
    76 sensor *tmp21 @unit @flag
    77 set :backgroundProcess:flag *tmp21
 
    95 label *label36
    96 set *tmp29 null
    97 label *label37
-    * set *tmp26 *tmp29
    98 jump *label35 always
    99 label *label34
-    * set *tmp26 null
   100 label *label35
   101 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
   102 op sub *tmp32 :findOreToMine:x .coreX
 
   108 set .coalX :findOreToMine:x
   109 set .coalY :findOreToMine:y
   110 set .distance :findOreToMine:dist
-    * set *tmp36 .distance
   111 jump *label39 always
   112 label *label38
-    * set *tmp36 null
   113 label *label39
   114 ucontrol approach .coalX .coalY 6
   115 set :findOreToMine:floor null
 
   124 print .coalY
   125 print "\n"
   126 ucontrol flag 2
-    * set *tmp40 null
   127 jump *label41 always
   128 label *label40
   129 op notEqual *tmp41 :findOreToMine:floor null
 
   148 print "\n"
   149 set *tmp42 null
   150 label *label43
-    * set *tmp40 *tmp42
   151 label *label41
   152 label *label33
   153 set *tmp23 null
 
   165 print "    Finished"
   166 print "\n"
   167 ucontrol flag 0
-    * set *tmp47 null
   168 jump *label48 always
   169 label *label47
-    * set *tmp47 null
   170 label *label48
   171 label *label46
   172 set *tmp44 null
 
   178 jump *label50 equal *tmp49 false
   179 print " (dropping)"
   180 ucontrol itemDrop @air 30
-    * set *tmp50 null
   181 jump *label51 always
   182 label *label50
-    * set *tmp50 null
   183 label *label51
   184 print " at "
   185 print .coalX
 
   194 print ", full"
   195 ucontrol approach .coreX .coreY 6
   196 ucontrol flag 1
-    * set *tmp53 null
   197 jump *label53 always
   198 label *label52
   199 ucontrol within .coalX .coalY 6.5 *tmp54
 
   214 label *label54
   215 set *tmp55 null
   216 label *label55
-    * set *tmp53 *tmp55
   217 label *label53
   218 print "\n"
   219 label *label49
 
   223 label *label32
   224 set *tmp9 *tmp23
   225 label *label23
-    * set *tmp7 *tmp9
   226 label *label21
   227 label *label18
   228 jump *label17 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-10 instructions):
 
    41 jump *label22 equal *tmp8 false
    42 set *tmp10 @unit
    43 set .thoriumDrone *tmp10
-    * set *tmp9 *tmp10
    44 jump *label23 always
    45 label *label22
    46 op equal *tmp11 @unit .thoriumDrone
 
    60 jump *label29 equal *tmp19 false
    61 ucontrol approach .thoriumContainerX .thoriumContainerY 6
    62 ucontrol itemTake .thoriumContainer @thorium 30
-    * set *tmp20 null
    63 jump *label30 always
    64 label *label29
    65 ucontrol itemDrop @air 30
-    * set *tmp20 null
    66 label *label30
    67 label *label28
    68 label *label26
 
    87 print "Holding wrong item."
    88 print "\n"
    89 jump *label33 always
-    * set *tmp29 null
    90 jump *label37 always
    91 label *label36
-    * set *tmp29 null
    92 label *label37
    93 jump *label35 always
    94 label *label34
 
   132 print " "
   133 print "disappeared"
   134 print "\n"
-    * set *tmp42 null
   135 jump *label43 always
   136 label *label42
   137 print "Not close enough to "
 
   140 print " "
   141 print .coalY
   142 print "\n"
-    * set *tmp42 null
   143 label *label43
   144 label *label41
   145 label *label33
 
   202 label *label56
   203 set *tmp58 null
   204 label *label57
-    * set *tmp55 *tmp58
   205 jump *label55 always
   206 label *label54
-    * set *tmp55 null
   207 label *label55
   208 label *label53
   209 print "\n"
 
   212 label *label45
   213 set *tmp23 *tmp44
   214 label *label32
-    * set *tmp9 *tmp23
   215 label *label23
   216 label *label21
   217 label *label18

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-4 instructions):
 
   143 label *label43
   144 label *label41
   145 label *label33
-    * set *tmp23 null
   146 jump *label32 always
   147 label *label31
   148 op equal *tmp43 :backgroundProcess:flag 1
 
   196 print ", ore lost"
   197 ucontrol approach .coreX .coreY 6
   198 ucontrol flag 1
-    * set *tmp58 null
   199 jump *label57 always
   200 label *label56
-    * set *tmp58 null
   201 label *label57
   202 jump *label55 always
   203 label *label54
 
   207 label *label49
   208 set *tmp44 null
   209 label *label45
-    * set *tmp23 *tmp44
   210 label *label32
   211 label *label23
   212 label *label21

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   161 label *label47
   162 label *label48
   163 label *label46
-    * set *tmp44 null
   164 jump *label45 always
   165 label *label44
   166 print "Mining"
 
   204 label *label53
   205 print "\n"
   206 label *label49
-    * set *tmp44 null
   207 label *label45
   208 label *label32
   209 label *label23

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-8 instructions):
 
    11 set .distance 1000000000
    12 label *label10
    13 ubind @poly
-    * set *tmp0 @unit
-    * set .builder *tmp0
-    * ulocate building core false @copper .coreX .coreY *tmp2 *tmp1
-    * set .core *tmp1
+   14 set .builder @unit
+   15 ulocate building core false @copper .coreX .coreY *tmp2 .core
    16 label *label11
    17 op equal *tmp3 .core null
    18 jump *label10 notEqual *tmp3 false
 
    37 label *label20
    38 op equal *tmp8 .thoriumDrone null
    39 jump *label22 equal *tmp8 false
-    * set *tmp10 @unit
-    * set .thoriumDrone *tmp10
+   40 set .thoriumDrone @unit
    41 jump *label23 always
    42 label *label22
    43 op equal *tmp11 @unit .thoriumDrone
 
    45 op greaterThan *tmp13 *tmp12 .thoriumLimit
    46 op land *tmp14 *tmp11 *tmp13
    47 jump *label24 equal *tmp14 false
-    * sensor *tmp16 @unit @firstItem
-    * set :serviceThoriumDrill:item *tmp16
+   48 sensor :serviceThoriumDrill:item @unit @firstItem
    49 op equal *tmp17 :serviceThoriumDrill:item @thorium
    50 jump *label27 equal *tmp17 false
    51 ucontrol approach .coreX .coreY 6
 
    66 jump *label25 always
    67 label *label24
    68 label *label25
-    * sensor *tmp21 @unit @flag
-    * set :backgroundProcess:flag *tmp21
+   69 sensor :backgroundProcess:flag @unit @flag
    70 print "Unit flag: "
    71 print :backgroundProcess:flag
    72 print "\n"
 
    91 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
    92 op sub *tmp32 :findOreToMine:x .coreX
    93 op sub *tmp33 :findOreToMine:y .coreY
-    * op len *tmp34 *tmp32 *tmp33
-    * set :findOreToMine:dist *tmp34
+   94 op len :findOreToMine:dist *tmp32 *tmp33
    95 op lessThan *tmp35 :findOreToMine:dist .distance
    96 jump *label38 equal *tmp35 false
    97 set .coalX :findOreToMine:x
 
   211 end
   212 label *label0
   213 set .thoriumContainer :setThoriumContainer:container
-    * sensor *tmp59 :setThoriumContainer:container @x
-    * set .thoriumContainerX *tmp59
-    * sensor *tmp60 :setThoriumContainer:container @y
-    * set .thoriumContainerY *tmp60
+  214 sensor .thoriumContainerX :setThoriumContainer:container @x
+  215 sensor .thoriumContainerY :setThoriumContainer:container @y
   216 sensor *tmp61 .thoriumContainer @itemCapacity
   217 op greaterThan *tmp62 *tmp61 10
   218 jump *label59 equal *tmp62 false

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
    26 label *label15
    27 label *label16
    28 label *label17
-    * jump *label19 equal true false
    29 ubind @poly
    30 op equal *tmp6 @unit .builder
    31 jump *label20 equal *tmp6 false
 
   228 label *label1
   229 label *label62
   230 label *label63
-    * jump *label62 notEqual true false
+  231 jump *label62 always
   232 label *label64
   233 label *label61
   234 set :pause*finished true

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-18 instructions):
 
    14 set .builder @unit
    15 ulocate building core false @copper .coreX .coreY *tmp2 .core
    16 label *label11
-    * op equal *tmp3 .core null
-    * jump *label10 notEqual *tmp3 false
+   17 jump *label10 equal .core null
    18 label *label12
    19 set *signature "5f95d6f938a8462e:v1"
    20 label *label13
-    * op equal *tmp4 .core null
-    * jump *label15 equal *tmp4 false
+   21 jump *label15 notEqual .core null
    22 jump *label14 always
    23 jump *label16 always
    24 label *label15
    25 label *label16
    26 label *label17
    27 ubind @poly
-    * op equal *tmp6 @unit .builder
-    * jump *label20 equal *tmp6 false
+   28 jump *label20 notEqual @unit .builder
    29 print "Found builder unit."
    30 print "\n"
    31 printflush message1
    32 jump *label21 always
    33 label *label20
-    * op equal *tmp8 .thoriumDrone null
-    * jump *label22 equal *tmp8 false
+   34 jump *label22 notEqual .thoriumDrone null
    35 set .thoriumDrone @unit
    36 jump *label23 always
    37 label *label22
 
    41 op land *tmp14 *tmp11 *tmp13
    42 jump *label24 equal *tmp14 false
    43 sensor :serviceThoriumDrill:item @unit @firstItem
-    * op equal *tmp17 :serviceThoriumDrill:item @thorium
-    * jump *label27 equal *tmp17 false
+   44 jump *label27 notEqual :serviceThoriumDrill:item @thorium
    45 ucontrol approach .coreX .coreY 6
    46 ucontrol itemDrop .core 30
    47 jump *label28 always
    48 label *label27
-    * op equal *tmp19 :serviceThoriumDrill:item null
-    * jump *label29 equal *tmp19 false
+   49 jump *label29 notEqual :serviceThoriumDrill:item null
    50 ucontrol approach .thoriumContainerX .thoriumContainerY 6
    51 ucontrol itemTake .thoriumContainer @thorium 30
    52 jump *label30 always
 
    63 print "Unit flag: "
    64 print :backgroundProcess:flag
    65 print "\n"
-    * op equal *tmp22 :backgroundProcess:flag 0
-    * jump *label31 equal *tmp22 false
+   66 jump *label31 notEqual :backgroundProcess:flag 0
    67 sensor *tmp24 @unit @firstItem
-    * op notEqual *tmp25 *tmp24 null
-    * jump *label34 equal *tmp25 false
+   68 jump *label34 equal *tmp24 null
    69 ucontrol itemDrop @air 30
    70 sensor *tmp27 @unit @firstItem
-    * op notEqual *tmp28 *tmp27 null
-    * jump *label36 equal *tmp28 false
+   71 jump *label36 equal *tmp27 null
    72 print "Holding wrong item."
    73 print "\n"
    74 jump *label33 always
 
    82 op sub *tmp32 :findOreToMine:x .coreX
    83 op sub *tmp33 :findOreToMine:y .coreY
    84 op len :findOreToMine:dist *tmp32 *tmp33
-    * op lessThan *tmp35 :findOreToMine:dist .distance
-    * jump *label38 equal *tmp35 false
+   85 jump *label38 greaterThanEq :findOreToMine:dist .distance
    86 set .coalX :findOreToMine:x
    87 set .coalY :findOreToMine:y
    88 set .distance :findOreToMine:dist
 
    92 ucontrol approach .coalX .coalY 6
    93 set :findOreToMine:floor null
    94 ucontrol getBlock .coalX .coalY *tmp38 *tmp37 :findOreToMine:floor
-    * op equal *tmp39 :findOreToMine:floor @ore-coal
-    * jump *label40 equal *tmp39 false
+   95 jump *label40 notEqual :findOreToMine:floor @ore-coal
    96 ucontrol mine :findOreToMine:x :findOreToMine:y
    97 print "Found coal at "
    98 print .coalX
 
   103 ucontrol flag 2
   104 jump *label41 always
   105 label *label40
-    * op notEqual *tmp41 :findOreToMine:floor null
-    * jump *label42 equal *tmp41 false
+  106 jump *label42 equal :findOreToMine:floor null
   107 set .distance 1000000000
   108 print "Coal at "
   109 print .coalX
 
   126 label *label33
   127 jump *label32 always
   128 label *label31
-    * op equal *tmp43 :backgroundProcess:flag 1
-    * jump *label44 equal *tmp43 false
+  129 jump *label44 notEqual :backgroundProcess:flag 1
   130 print "Returning"
   131 print "\n"
   132 ucontrol approach .coreX .coreY 6
   133 ucontrol itemDrop .core 30
   134 sensor *tmp45 @unit @firstItem
-    * op equal *tmp46 *tmp45 null
-    * jump *label47 equal *tmp46 false
+  135 jump *label47 notEqual *tmp45 null
   136 print "    Finished"
   137 print "\n"
   138 ucontrol flag 0
 
   144 label *label44
   145 print "Mining"
   146 sensor *tmp48 @unit @firstItem
-    * op notEqual *tmp49 *tmp48 @coal
-    * jump *label50 equal *tmp49 false
+  147 jump *label50 equal *tmp48 @coal
   148 print " (dropping)"
   149 ucontrol itemDrop @air 30
   150 jump *label51 always
 
   158 ucontrol approach .coalX .coalY 6
   159 ucontrol mine .coalX .coalY
   160 sensor *tmp51 @unit @totalItems
-    * op greaterThanEq *tmp52 *tmp51 30
-    * jump *label52 equal *tmp52 false
+  161 jump *label52 lessThan *tmp51 30
   162 print ", full"
   163 ucontrol approach .coreX .coreY 6
   164 ucontrol flag 1
 
   167 ucontrol within .coalX .coalY 6.5 *tmp54
   168 jump *label54 equal *tmp54 false
   169 sensor *tmp56 @unit @mining
-    * op equal *tmp57 *tmp56 false
-    * jump *label56 equal *tmp57 false
+  170 jump *label56 notEqual *tmp56 false
   171 print ", ore lost"
   172 ucontrol approach .coreX .coreY 6
   173 ucontrol flag 1
 
   196 sensor .thoriumContainerX :setThoriumContainer:container @x
   197 sensor .thoriumContainerY :setThoriumContainer:container @y
   198 sensor *tmp61 .thoriumContainer @itemCapacity
-    * op greaterThan *tmp62 *tmp61 10
-    * jump *label59 equal *tmp62 false
+  199 jump *label59 lessThanEq *tmp61 10
   200 set *tmp63 100
   201 jump *label60 always
   202 label *label59

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-9 instructions):
 
    20 label *label13
    21 jump *label15 notEqual .core null
    22 jump *label14 always
-    * jump *label16 always
    23 label *label15
    24 label *label16
    25 label *label17
 
    55 label *label28
    56 label *label26
    57 jump *label18 always
-    * jump *label25 always
    58 label *label24
    59 label *label25
    60 sensor :backgroundProcess:flag @unit @flag
 
    70 print "Holding wrong item."
    71 print "\n"
    72 jump *label33 always
-    * jump *label37 always
    73 label *label36
    74 label *label37
-    * jump *label35 always
    75 label *label34
    76 label *label35
    77 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
 
    82 set .coalX :findOreToMine:x
    83 set .coalY :findOreToMine:y
    84 set .distance :findOreToMine:dist
-    * jump *label39 always
    85 label *label38
    86 label *label39
    87 ucontrol approach .coalX .coalY 6
 
   131 print "    Finished"
   132 print "\n"
   133 ucontrol flag 0
-    * jump *label48 always
   134 label *label47
   135 label *label48
   136 label *label46
 
   141 jump *label50 equal *tmp48 @coal
   142 print " (dropping)"
   143 ucontrol itemDrop @air 30
-    * jump *label51 always
   144 label *label50
   145 label *label51
   146 print " at "
 
   164 print ", ore lost"
   165 ucontrol approach .coreX .coreY 6
   166 ucontrol flag 1
-    * jump *label57 always
   167 label *label56
   168 label *label57
-    * jump *label55 always
   169 label *label54
   170 label *label55
   171 label *label53

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
    85 label *label38
    86 label *label39
    87 ucontrol approach .coalX .coalY 6
-    * set :findOreToMine:floor null
    88 ucontrol getBlock .coalX .coalY *tmp38 *tmp37 :findOreToMine:floor
    89 jump *label40 notEqual :findOreToMine:floor @ore-coal
    90 ucontrol mine :findOreToMine:x :findOreToMine:y

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-3 instructions):
 
   185 set .thoriumContainer :setThoriumContainer:container
   186 sensor .thoriumContainerX :setThoriumContainer:container @x
   187 sensor .thoriumContainerY :setThoriumContainer:container @y
-    * sensor *tmp61 .thoriumContainer @itemCapacity
-    * jump *label59 lessThanEq *tmp61 10
-    * set *tmp63 100
-    * jump *label60 always
-    * label *label59
-    * set *tmp63 0
-    * label *label60
+  188 sensor *tmp61 .thoriumContainer @itemCapacity
+  189 select *tmp63 greaterThan *tmp61 10 100 0
   190 set .thoriumLimit *tmp63
   191 label *label58
   192 set :setThoriumContainer*finished true

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
   186 sensor .thoriumContainerX :setThoriumContainer:container @x
   187 sensor .thoriumContainerY :setThoriumContainer:container @y
   188 sensor *tmp61 .thoriumContainer @itemCapacity
-    * select *tmp63 greaterThan *tmp61 10 100 0
-    * set .thoriumLimit *tmp63
+  189 select .thoriumLimit greaterThan *tmp61 10 100 0
   190 label *label58
   191 set :setThoriumContainer*finished true
   192 jump *label13 always

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    13 ubind @poly
    14 set .builder @unit
    15 ulocate building core false @copper .coreX .coreY *tmp2 .core
-    * label *label11
    16 jump *label10 equal .core null
-    * label *label12
    17 set *signature "5f95d6f938a8462e:v1"
    18 label *label13
    19 jump *label15 notEqual .core null
    20 jump *label14 always
    21 label *label15
-    * label *label16
    22 label *label17
    23 ubind @poly
    24 jump *label20 notEqual @unit .builder
 
    50 ucontrol itemDrop @air 30
    51 label *label30
    52 label *label28
-    * label *label26
    53 jump *label18 always
    54 label *label24
-    * label *label25
    55 sensor :backgroundProcess:flag @unit @flag
    56 print "Unit flag: "
    57 print :backgroundProcess:flag
 
    66 print "\n"
    67 jump *label33 always
    68 label *label36
-    * label *label37
    69 label *label34
-    * label *label35
    70 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
    71 op sub *tmp32 :findOreToMine:x .coreX
    72 op sub *tmp33 :findOreToMine:y .coreY
 
    76 set .coalY :findOreToMine:y
    77 set .distance :findOreToMine:dist
    78 label *label38
-    * label *label39
    79 ucontrol approach .coalX .coalY 6
    80 ucontrol getBlock .coalX .coalY *tmp38 *tmp37 :findOreToMine:floor
    81 jump *label40 notEqual :findOreToMine:floor @ore-coal
 
   123 print "\n"
   124 ucontrol flag 0
   125 label *label47
-    * label *label48
-    * label *label46
   126 jump *label45 always
   127 label *label44
   128 print "Mining"
 
   131 print " (dropping)"
   132 ucontrol itemDrop @air 30
   133 label *label50
-    * label *label51
   134 print " at "
   135 print .coalX
   136 print ","
 
   153 ucontrol approach .coreX .coreY 6
   154 ucontrol flag 1
   155 label *label56
-    * label *label57
   156 label *label54
-    * label *label55
   157 label *label53
   158 print "\n"
-    * label *label49
   159 label *label45
   160 label *label32
   161 label *label23
   162 label *label21
   163 label *label18
   164 jump *label17 always
-    * label *label19
   165 label *label14
   166 wait 1e12
   167 jump *label13 always
 
   172 sensor .thoriumContainerY :setThoriumContainer:container @y
   173 sensor *tmp61 .thoriumContainer @itemCapacity
   174 select .thoriumLimit greaterThan *tmp61 10 100 0
-    * label *label58
   175 set :setThoriumContainer*finished true
   176 jump *label13 always
   177 end
   178 label *label1
   179 label *label62
-    * label *label63
   180 jump *label62 always
-    * label *label64
-    * label *label61
   181 set :pause*finished true
   182 jump *label13 always
   183 end
   184 label *label2
-    * label *label65
   185 set :resume*finished true
   186 jump *label13 always
   187 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-1 instructions):
 
    16 jump *label10 equal .core null
    17 set *signature "5f95d6f938a8462e:v1"
    18 label *label13
-    * jump *label15 notEqual .core null
-    * jump *label14 always
+   19 jump *label14 equal .core null
    20 label *label15
    21 label *label17
    22 ubind @poly

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    17 set *signature "5f95d6f938a8462e:v1"
    18 label *label13
    19 jump *label14 equal .core null
-    * label *label15
    20 label *label17
    21 ubind @poly
    22 jump *label20 notEqual @unit .builder

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
     0 jump *label9 always
-    * jump *label1 always
+    1 jump *label62 always
     2 jump *label2 always
     3 jump *label0 always
     4 label *label9
 
    23 print "Found builder unit."
    24 print "\n"
    25 printflush message1
-    * jump *label21 always
+   26 jump *label17 always
    27 label *label20
    28 jump *label22 notEqual .thoriumDrone null
    29 set .thoriumDrone @unit
-    * jump *label23 always
+   30 jump *label17 always
    31 label *label22
    32 op equal *tmp11 @unit .thoriumDrone
    33 sensor *tmp12 .thoriumContainer @thorium
 
    38 jump *label27 notEqual :serviceThoriumDrill:item @thorium
    39 ucontrol approach .coreX .coreY 6
    40 ucontrol itemDrop .core 30
-    * jump *label28 always
+   41 jump *label17 always
    42 label *label27
    43 jump *label29 notEqual :serviceThoriumDrill:item null
    44 ucontrol approach .thoriumContainerX .thoriumContainerY 6
    45 ucontrol itemTake .thoriumContainer @thorium 30
-    * jump *label30 always
+   46 jump *label17 always
    47 label *label29
    48 ucontrol itemDrop @air 30
    49 label *label30
    50 label *label28
-    * jump *label18 always
+   51 jump *label17 always
    52 label *label24
    53 sensor :backgroundProcess:flag @unit @flag
    54 print "Unit flag: "
 
    62 jump *label36 equal *tmp27 null
    63 print "Holding wrong item."
    64 print "\n"
-    * jump *label33 always
+   65 jump *label17 always
    66 label *label36
    67 label *label34
    68 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
 
    85 print .coalY
    86 print "\n"
    87 ucontrol flag 2
-    * jump *label41 always
+   88 jump *label17 always
    89 label *label40
    90 jump *label42 equal :findOreToMine:floor null
    91 set .distance 1000000000
 
    97 print " "
    98 print "disappeared"
    99 print "\n"
-    * jump *label43 always
+  100 jump *label17 always
   101 label *label42
   102 print "Not close enough to "
   103 print .coalX
 
   108 label *label43
   109 label *label41
   110 label *label33
-    * jump *label32 always
+  111 jump *label17 always
   112 label *label31
   113 jump *label44 notEqual :backgroundProcess:flag 1
   114 print "Returning"
 
   116 ucontrol approach .coreX .coreY 6
   117 ucontrol itemDrop .core 30
   118 sensor *tmp45 @unit @firstItem
-    * jump *label47 notEqual *tmp45 null
+  119 jump *label17 notEqual *tmp45 null
   120 print "    Finished"
   121 print "\n"
   122 ucontrol flag 0
   123 label *label47
-    * jump *label45 always
+  124 jump *label17 always
   125 label *label44
   126 print "Mining"
   127 sensor *tmp48 @unit @firstItem

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-6 instructions):
 
    46 jump *label17 always
    47 label *label29
    48 ucontrol itemDrop @air 30
-    * label *label30
-    * label *label28
    49 jump *label17 always
    50 label *label24
    51 sensor :backgroundProcess:flag @unit @flag
 
   103 print " "
   104 print .coalY
   105 print "\n"
-    * label *label43
-    * label *label41
-    * label *label33
   106 jump *label17 always
   107 label *label31
   108 jump *label44 notEqual :backgroundProcess:flag 1
 
   115 print "    Finished"
   116 print "\n"
   117 ucontrol flag 0
-    * label *label47
   118 jump *label17 always
   119 label *label44
   120 print "Mining"
 
   148 label *label54
   149 label *label53
   150 print "\n"
-    * label *label45
-    * label *label32
-    * label *label23
-    * label *label21
-    * label *label18
   151 jump *label17 always
   152 label *label14
   153 wait 1e12
   154 jump *label13 always
-    * end
   155 label *label0
   156 set .thoriumContainer :setThoriumContainer:container
   157 sensor .thoriumContainerX :setThoriumContainer:container @x
 
   160 select .thoriumLimit greaterThan *tmp61 10 100 0
   161 set :setThoriumContainer*finished true
   162 jump *label13 always
-    * end
   163 label *label1
   164 label *label62
   165 jump *label62 always
-    * set :pause*finished true
-    * jump *label13 always
-    * end
   166 label *label2
   167 set :resume*finished true
   168 jump *label13 always
-    * end

Modifications by Final phase, Temp Variables Elimination, iteration 1:
 
    12 label *label10
    13 ubind @poly
    14 set .builder @unit
-    * ulocate building core false @copper .coreX .coreY *tmp2 .core
+   15 ulocate building core false @copper .coreX .coreY 0 .core
    16 jump *label10 equal .core null
    17 set *signature "5f95d6f938a8462e:v1"
    18 label *label13
 
    63 jump *label17 always
    64 label *label36
    65 label *label34
-    * ulocate ore core true @coal :findOreToMine:x :findOreToMine:y *tmp30 *tmp31
+   66 ulocate ore core true @coal :findOreToMine:x :findOreToMine:y 0 0
    67 op sub *tmp32 :findOreToMine:x .coreX
    68 op sub *tmp33 :findOreToMine:y .coreY
    69 op len :findOreToMine:dist *tmp32 *tmp33
 
    73 set .distance :findOreToMine:dist
    74 label *label38
    75 ucontrol approach .coalX .coalY 6
-    * ucontrol getBlock .coalX .coalY *tmp38 *tmp37 :findOreToMine:floor
+   76 ucontrol getBlock .coalX .coalY 0 0 :findOreToMine:floor
    77 jump *label40 notEqual :findOreToMine:floor @ore-coal
    78 ucontrol mine :findOreToMine:x :findOreToMine:y
    79 print "Found coal at "

Modifications by Final phase, Print Merging, iteration 1 (-18 instructions):
 
    20 label *label17
    21 ubind @poly
    22 jump *label20 notEqual @unit .builder
-    * print "Found builder unit."
-    * print "\n"
+   23 print "Found builder unit.\n"
    24 printflush message1
    25 jump *label17 always
    26 label *label20
 
    48 jump *label17 always
    49 label *label24
    50 sensor :backgroundProcess:flag @unit @flag
-    * print "Unit flag: "
-    * print :backgroundProcess:flag
-    * print "\n"
+   51 print "Unit flag: {0}\n"
+   52 format :backgroundProcess:flag
    53 jump *label31 notEqual :backgroundProcess:flag 0
    54 sensor *tmp24 @unit @firstItem
    55 jump *label34 equal *tmp24 null
    56 ucontrol itemDrop @air 30
    57 sensor *tmp27 @unit @firstItem
    58 jump *label36 equal *tmp27 null
-    * print "Holding wrong item."
-    * print "\n"
+   59 print "Holding wrong item.\n"
    60 jump *label17 always
    61 label *label36
    62 label *label34
 
    73 ucontrol getBlock .coalX .coalY 0 0 :findOreToMine:floor
    74 jump *label40 notEqual :findOreToMine:floor @ore-coal
    75 ucontrol mine :findOreToMine:x :findOreToMine:y
-    * print "Found coal at "
-    * print .coalX
-    * print ","
-    * print " "
-    * print .coalY
-    * print "\n"
+   76 print "Found coal at {0}, {0}\n"
+   77 format .coalX
+   78 format .coalY
    79 ucontrol flag 2
    80 jump *label17 always
    81 label *label40
    82 jump *label42 equal :findOreToMine:floor null
    83 set .distance 1000000000
-    * print "Coal at "
-    * print .coalX
-    * print ","
-    * print " "
-    * print .coalY
-    * print " "
-    * print "disappeared"
-    * print "\n"
+   84 print "Coal at {0}, {0} disappeared\n"
+   85 format .coalX
+   86 format .coalY
    87 jump *label17 always
    88 label *label42
-    * print "Not close enough to "
-    * print .coalX
-    * print ","
-    * print " "
-    * print .coalY
-    * print "\n"
+   89 print "Not close enough to {0}, {0}\n"
+   90 format .coalX
+   91 format .coalY
    92 jump *label17 always
    93 label *label31
    94 jump *label44 notEqual :backgroundProcess:flag 1
-    * print "Returning"
-    * print "\n"
+   95 print "Returning\n"
    96 ucontrol approach .coreX .coreY 6
    97 ucontrol itemDrop .core 30
    98 sensor *tmp45 @unit @firstItem
    99 jump *label17 notEqual *tmp45 null
-    * print "    Finished"
-    * print "\n"
+  100 print "    Finished\n"
   101 ucontrol flag 0
   102 jump *label17 always
   103 label *label44
 
   107 print " (dropping)"
   108 ucontrol itemDrop @air 30
   109 label *label50
-    * print " at "
-    * print .coalX
-    * print ","
-    * print " "
+  110 print " at {0}, "
+  111 format .coalX
   112 print .coalY
   113 ucontrol approach .coalX .coalY 6
   114 ucontrol mine .coalX .coalY

Final code before resolving virtual instructions:

    0:  jump *label9 always 0 0                                      #set target = 8;
    1:  jump *label62 always 0 0                                     ...
    2:  jump *label2 always 0 0                                      ...
    3:  jump *label0 always 0 0                                      ...
        label *label9                                                ...
    4:  set .thoriumContainer null                                   volatile var
    5:  set .thoriumLimit 100                                        volatile var
    6:  set .thoriumContainerX 0                                     ...
    7:  set .thoriumContainerY 0                                     ...
    8:  set .coalX 0                                                 var
    9:  set .coalY 0                                                 ...
   10:  set .distance 1000000000                                     ...
        label *label10                                               do
   11:  ubind @poly                                                  builder = ubind(@poly);
   12:  set .builder @unit                                           ...
   13:  ulocate building core false @copper .coreX .coreY 0 .core    core = ulocate(:building, :core, false, out coreX, out coreY);
   14:  jump *label10 equal .core null                               do
   15:  set *signature "5f95d6f938a8462e:v1"                         #set target = 8;
        label *label13                                               ...
   16:  jump *label14 equal .core null                               if core == null then return; end;
        label *label17                                               while true do
   17:  ubind @poly                                                  ubind(@poly);
   18:  jump *label20 notEqual @unit .builder                        if @unit == builder then
   19:  print "Found builder unit.\n"                                println("Found builder unit.");
   20:  printflush message1                                          printflush(message1);
   21:  jump *label17 always 0 0                                     if @unit == builder then
        label *label20                                               ...
   22:  jump *label22 notEqual .thoriumDrone null                    elsif thoriumDrone == null then
   23:  set .thoriumDrone @unit                                      thoriumDrone = @unit;
   24:  jump *label17 always 0 0                                     elsif thoriumDrone == null then
        label *label22                                               ...
   25:  op equal *tmp11 @unit .thoriumDrone                          if @unit == thoriumDrone and thoriumContainer.@thorium > thoriumLimit then
   26:  sensor *tmp12 .thoriumContainer @thorium                     ...
   27:  op greaterThan *tmp13 *tmp12 .thoriumLimit                   ...
   28:  op land *tmp14 *tmp11 *tmp13                                 ...
   29:  jump *label24 equal *tmp14 false                             ...
   30:  sensor :serviceThoriumDrill:item @unit @firstItem            var item = @unit.@firstItem;
   31:  jump *label27 notEqual :serviceThoriumDrill:item @thorium    if item == @thorium then
   32:  ucontrol approach .coreX .coreY 6 0 0                        approach(coreX, coreY, RADIUS);
   33:  ucontrol itemDrop .core 30 0 0 0                             itemDrop(core, CAPACITY);
   34:  jump *label17 always 0 0                                     if item == @thorium then
        label *label27                                               ...
   35:  jump *label29 notEqual :serviceThoriumDrill:item null        elsif item == null then
   36:  ucontrol approach .thoriumContainerX .thoriumContainerY 6 0  approach(thoriumContainerX, thoriumContainerY, RADIUS);
   37:  ucontrol itemTake .thoriumContainer @thorium 30 0 0          itemTake(thoriumContainer, @thorium, CAPACITY);
   38:  jump *label17 always 0 0                                     elsif item == null then
        label *label29                                               ...
   39:  ucontrol itemDrop @air 30 0 0 0                              itemDrop(@air, CAPACITY);
   40:  jump *label17 always 0 0                                     continue;
        label *label24                                               if @unit == thoriumDrone and thoriumContainer.@thorium > thoriumLimit then
   41:  sensor :backgroundProcess:flag @unit @flag                   var flag = @unit.@flag;
   42:  print "Unit flag: {0}\n"                                     println("Unit flag: ", flag);
   43:  format :backgroundProcess:flag                               ...
   44:  jump *label31 notEqual :backgroundProcess:flag 0             if flag == 0 then
   45:  sensor *tmp24 @unit @firstItem                               if @unit.@firstItem != null then
   46:  jump *label34 equal *tmp24 null                              ...
   47:  ucontrol itemDrop @air 30 0 0 0                              itemDrop(@air, CAPACITY);
   48:  sensor *tmp27 @unit @firstItem                               if @unit.@firstItem != null then
   49:  jump *label36 equal *tmp27 null                              ...
   50:  print "Holding wrong item.\n"                                println($"Holding wrong item.");
   51:  jump *label17 always 0 0                                     return;
        label *label36                                               if @unit.@firstItem != null then
        label *label34                                               if @unit.@firstItem != null then
   52:  ulocate ore core true @coal :findOreToMine:x :findOreToMine: ulocate(:ore, @coal, out x, out y);
   53:  op sub *tmp32 :findOreToMine:x .coreX                        var dist = len(x - coreX, y - coreY);
   54:  op sub *tmp33 :findOreToMine:y .coreY                        ...
   55:  op len :findOreToMine:dist *tmp32 *tmp33                     ...
   56:  jump *label38 greaterThanEq :findOreToMine:dist .distance    if dist < distance then
   57:  set .coalX :findOreToMine:x                                  coalX = x;
   58:  set .coalY :findOreToMine:y                                  coalY = y;
   59:  set .distance :findOreToMine:dist                            distance = dist;
        label *label38                                               if dist < distance then
   60:  ucontrol approach .coalX .coalY 6 0 0                        approach(coalX, coalY, RADIUS);
   61:  ucontrol getBlock .coalX .coalY 0 0 :findOreToMine:floor     getBlock(coalX, coalY, , out floor);
   62:  jump *label40 notEqual :findOreToMine:floor @ore-coal        if floor == @ore-coal then
   63:  ucontrol mine :findOreToMine:x :findOreToMine:y 0 0 0        mine(x, y);
   64:  print "Found coal at {0}, {0}\n"                             println($"Found coal at $coalX, $coalY");
   65:  format .coalX                                                ...
   66:  format .coalY                                                ...
   67:  ucontrol flag 2 0 0 0 0                                      flag(2);
   68:  jump *label17 always 0 0                                     if floor == @ore-coal then
        label *label40                                               ...
   69:  jump *label42 equal :findOreToMine:floor null                elsif floor != null
   70:  set .distance 1000000000                                     then distance = 1e9;
   71:  print "Coal at {0}, {0} disappeared\n"                       println($"Coal at $coalX, $coalY disappeared");
   72:  format .coalX                                                ...
   73:  format .coalY                                                ...
   74:  jump *label17 always 0 0                                     elsif floor != null
        label *label42                                               ...
   75:  print "Not close enough to {0}, {0}\n"                       println($"Not close enough to $coalX, $coalY");
   76:  format .coalX                                                ...
   77:  format .coalY                                                ...
   78:  jump *label17 always 0 0                                     if flag == 0 then
        label *label31                                               ...
   79:  jump *label44 notEqual :backgroundProcess:flag 1             elsif flag == 1 then
   80:  print "Returning\n"                                          println("Returning");
   81:  ucontrol approach .coreX .coreY 6 0 0                        approach(coreX, coreY, RADIUS);
   82:  ucontrol itemDrop .core 30 0 0 0                             itemDrop(core, CAPACITY);
   83:  sensor *tmp45 @unit @firstItem                               if @unit.@firstItem == null then
   84:  jump *label17 notEqual *tmp45 null                           ...
   85:  print "    Finished\n"                                       println("    Finished");
   86:  ucontrol flag 0 0 0 0 0                                      flag(0);
   87:  jump *label17 always 0 0                                     elsif flag == 1 then
        label *label44                                               ...
   88:  print "Mining"                                               print("Mining");
   89:  sensor *tmp48 @unit @firstItem                               if @unit.@firstItem != @coal then
   90:  jump *label50 equal *tmp48 @coal                             ...
   91:  print " (dropping)"                                          print(" (dropping)");
   92:  ucontrol itemDrop @air 30 0 0 0                              itemDrop(@air, CAPACITY);
        label *label50                                               if @unit.@firstItem != @coal then
   93:  print " at {0}, "                                            print($" at $coalX, $coalY");
   94:  format .coalX                                                ...
   95:  print .coalY                                                 ...
   96:  ucontrol approach .coalX .coalY 6 0 0                        approach(coalX, coalY, RADIUS);
   97:  ucontrol mine .coalX .coalY 0 0 0                            mine(coalX, coalY);
   98:  sensor *tmp51 @unit @totalItems                              if @unit.@totalItems >= CAPACITY then
   99:  jump *label52 lessThan *tmp51 30                             ...
  100:  print ", full"                                               print(", full");
  101:  ucontrol approach .coreX .coreY 6 0 0                        approach(coreX, coreY, RADIUS);
  102:  ucontrol flag 1 0 0 0 0                                      flag(1);
  103:  jump *label53 always 0 0                                     if @unit.@totalItems >= CAPACITY then
        label *label52                                               ...
  104:  ucontrol within .coalX .coalY 6.5 *tmp54 0                   elsif within(coalX, coalY, RADIUS + 0.5) then
  105:  jump *label54 equal *tmp54 false                             ...
  106:  sensor *tmp56 @unit @mining                                  if !@unit.@mining then
  107:  jump *label56 notEqual *tmp56 false                          ...
  108:  print ", ore lost"                                           print(", ore lost");
  109:  ucontrol approach .coreX .coreY 6 0 0                        approach(coreX, coreY, RADIUS);
  110:  ucontrol flag 1 0 0 0 0                                      flag(1);
        label *label56                                               if !@unit.@mining then
        label *label54                                               elsif within(coalX, coalY, RADIUS + 0.5) then
        label *label53                                               if @unit.@totalItems >= CAPACITY then
  111:  print "\n"                                                   println();
  112:  jump *label17 always 0 0                                     while true do
        label *label14                                               #set target = 8;
  113:  wait 1e12                                                    ...
  114:  jump *label13 always 0 0                                     ...
        label *label0                                                remote void setThoriumContainer(container)
  115:  set .thoriumContainer :setThoriumContainer:container         thoriumContainer = container;
  116:  sensor .thoriumContainerX :setThoriumContainer:container @x  thoriumContainerX = container.@x;
  117:  sensor .thoriumContainerY :setThoriumContainer:container @y  thoriumContainerY = container.@y;
  118:  sensor *tmp61 .thoriumContainer @itemCapacity                thoriumLimit = thoriumContainer.@itemCapacity > 10 ? 100 : 0;
  119:  select .thoriumLimit greaterThan *tmp61 10 100 0             ...
  120:  set :setThoriumContainer*finished true                       remote void setThoriumContainer(container)
  121:  jump *label13 always 0 0                                     ...
        label *label1                                                remote void pause();
        label *label62                                               do while true;
  122:  jump *label62 always 0 0                                     ...
        label *label2                                                remote void resume()
  123:  set :resume*finished true                                    ...
  124:  jump *label13 always 0 0                                     ...


Performance: parsed in 262 ms, compiled in 345 ms, optimized in 290 ms, run in 4 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (9 steps):
The program didn't generate any output.
Execution exception at instruction 11: ubind @poly:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
