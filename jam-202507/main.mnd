#set target = 8;
#set function-inlining = none;
#set syntax = relaxed;
#set sort-variables = none;
//#set unreachable-code-elimination = none;
//#set optimization = none;

const ROW_HEIGHT = 15;
const BAR_HEIGHT = 10;

const ICON_SIZE = 16;
const ICON_X = 11;
const ICON_Y = +5;
const BAR_X = 22;

const BAR_LENGTH = 122;

linked processor1;

// Targets to be met for the next build
remote processor1 var
    core,

    nextBlock,
    copperTarget,
    leadTarget,
    graphiteTarget,
    siliconTarget,
    titaniumTarget,

    status1,
    status2, item2, block2,
    status3;

begin
    while @unit == null do
        ubind(@poly);
    end;

    //updateMessage();
    updateDisplay();
end;

void updateMessage()
    println($"[gold]About to build $nextBlock:[][green]");
    println($"Copper needed: $copperTarget");
    println($"Lead needed: $leadTarget");
    println($"Graphite needed: $graphiteTarget");
    println($"Silicon needed: $siliconTarget");
    println($"Titanium needed: $titaniumTarget[]");
    println(status1);
    println($"$status2 $item2 ($block2)");
    println(status3);
    print("Items held: ", @unit.@totalItems);
    printflush(message1);
end;

void updateDisplay()
    reset();
    clear(0, 0, 32);
    var x1 = 176 / 4 - 4;
    var x2 = 2 * 176 / 4;
    var x3 = 3 * 176 / 4 + 4;
    var y = 176 - 15;

    col(%[gold]);
    drawBold(x1, y, "Objective");

    col(%[green]);
    drawBold(x3, y, "Building");

    col(%[salmon]);
    var t = floor(@second);
    var m = t \ 60;
    var s = t % 60;
    print(m, ":");
    if s < 10 then print("0"); end;
    drawText(x2, y - 27, s);

    col(%[white]);
    drawBoldLeft(BAR_X, y - 60, "Materials");

    image(x1, y - 24, @air-factory, 32, 0);
    image(x3, y - 24, nextBlock, 32, 0);

    y -= 76;

    drawMaterial(@copper,   copperTarget, ref y);
    drawMaterial(@lead,     leadTarget, ref y);
    drawMaterial(@graphite, graphiteTarget, ref y);
    drawMaterial(@silicon,  siliconTarget, ref y);
    drawMaterial(@titanium, titaniumTarget, ref y);

    col(%[white]);
    drawBoldLeft(BAR_X, y - 10, "Unit status");
    y -= 26;

    var item = @unit.@firstItem;
    if item == null then
        drawUnit(@poly, 0, ref y);
    else
        drawUnit(item, @unit.@totalItems, ref y);
    end;

    drawflush(display1);
end;

inline void drawMaterial(item, target, ref y)
    if target > 0 then
        drawItem(item, core.sensor(item), target, target, ref y);
    end;
end;

inline void drawUnit(item, items, ref y)
    drawItem(item, items, 30, items, ref y);
end;

inline void drawItem(item, current, target, count, ref y)
    if target > 0 then
        length = min(BAR_LENGTH, BAR_LENGTH * current / target);

        col(%[white]);
        image(ICON_X, y + ICON_Y, item, 16, 0);

        color(0,128,0,255);
        rect(BAR_X, y, length, BAR_HEIGHT);

        color(0,255,0,255);
        lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
        drawBoldRight(170, y + ICON_Y + 2, count);

        y -= ROW_HEIGHT;
    end;
end;

inline void drawBold(x, y, text)
    drawText(x, y, text);
    drawText(x + 1, y, text);
end;

inline void drawText(x, y, text)
    print(text);
    mlogText("draw", "print", in x, in y, "@bottom");
end;

inline void drawBoldRight(x, y, text)
    drawTextRight(x, y, text);
    drawTextRight(x + 1, y, text);
end;

inline void drawTextRight(x, y, text)
    print(text);
    mlogText("draw", "print", in x, in y, "@right");
end;

inline void drawBoldLeft(x, y, text)
    drawTextLeft(x, y, text);
    drawTextLeft(x + 1, y, text);
end;

inline void drawTextLeft(x, y, text)
    print(text);
    mlogText("draw", "print", in x, in y, "@bottomLeft");
end;
