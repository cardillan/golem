#set target = 8;
#set syntax = strict;
//#set function-inlining = none;
#set sort-variables;

#set symbolic-labels = true;

module FlareController;

require units;

linked message1;

// At this point, we're only using a flare
const CAPACITY = 10;
const RADIUS = 4;

const TITANIUM_TRIGGER = 5;

// Need to make lall variables volatile, because from the point of backgroundProcess they're changed asynchronously
noinit volatile var core, coreX, coreY;

volatile var titaniumDrills[10];
volatile var units[10];
volatile var drills = 0;

remote void start(aCore, drill)
    core = aCore;
    coreX = core.@x;
    coreY = core.@y;
    titaniumDrills[0] = drill;
    drills = 1;

    // The rest will happen in backgroundProcess
end;

remote void addTitaniumDrill(drill)
    // Keeps the last element always empty as a stop
    if drills < length(titaniumDrills) - 1 then
        titaniumDrills[drills] = drill;
        drills++;
    end;
end;

void serviceDrill(drill, unit)
    ubind(unit);
    var item = @unit.@firstItem;

    if item == @titanium then
        approach(coreX, coreY, RADIUS);
        itemDrop(core, CAPACITY);
    elsif item == null then
        // Take titanium
        approach(drill.@x, drill.@y, RADIUS);
        itemTake(drill, @titanium, CAPACITY);
    else
        itemDrop(@air, CAPACITY);
    end;
end;

void backgroundProcess()
    // Not yet started
    if core == null then return; end;

    // This loops until interrupted by a remote function call
    while true do
        for var drill in titaniumDrills; var out unit in units do
            // End of drills
            if drill == null then break; end;

            // Matches null units as well
            if unit.@controller != @this then
                unit = findFreeUnit(@flare, 0);
                if unit == null then continue; end;
            end;

            serviceDrill(drill, unit);
        end;
    end;
end;
