#set target = 8;
#set syntax = strict;
#set sort-variables;

module CoreController;

require "common.mnd";

noinit remote var
    core,
    display,
    bank,
    press,
    smelter,
    kiln,
    generator,
    battery,
    factory,
    unloader2,
    generator2,
    payloadRouter,
    reconstructor,

    // Lead and/or silicone will only be sent to the Air Factory
    // if they are above these limits
    leadReserve,
    siliconReserve,

    flares,
    monos,
    polys,

    factoryUnit,
    targetUnit;

remote var
    pressTarget = 20,
    smelterTarget = 20,
    kilnTarget = 20,
    flareTarget = 0,
    monoTarget = 0,
    polyTarget = 0;

remote display var
    displayFlares,
    displayMonos,
    displayPolys,
    displayNextUnit;

external bank[511] var logPosition;

void log(encodedId)
    bank[--logPosition] = encodedId + floor(second()) * 1000;
end;

void logUnit(unit)
    log(@blockCount + unit.@id);
end;

void factoryUnitFinished(unit)
    // Do not announce when the
    if unit == targetUnit then
        logUnit(unit);
        case unit
            when @flare then displayFlares = ++flares;
            when @mono  then displayMonos = ++monos;
            when @poly  then displayPolys = ++polys;
        end;
    end;
end;

inline def updateIfSmaller(ref value, in a, in b, in newValue)
    mlogSafe("select", out value, "lessThan", in a, in b, in newValue, in value);
end;

inline def fuzzyUpdate(ref state, in value, in limitLow, in limitHigh)
    updateIfSmaller(ref state, value, limitLow, false);
    updateIfSmaller(ref state, limitHigh, value, true);
end;

void backgroundProcess()
    var lastProgress = 0, factoryProgress = 0;
    var lastRecoProgress = 0, reconstructorProgress = 0;
    var enableFactory = true;

    while true do
        var coreSilicon = core.@silicon;
        smelter.enabled = coreSilicon < smelterTarget;
        press.enabled = core.@graphite < pressTarget;
        kiln.enabled = core.@metaglass < kilnTarget;

        var power = battery.@totalPower;
        if generator2 then
            generator.enabled = false;
            generator2.enabled = power < 3800;
        else
            generator.enabled = power < 800;
        end;

        factoryProgress = factory.@progress;
        reconstructorProgress = reconstructor.@progress;

        if flares < flareTarget then
            displayNextUnit = targetUnit = factoryUnit = @flare;
        elsif monos < monoTarget then
            displayNextUnit = targetUnit = factoryUnit = @mono;
        elsif polys < polyTarget then
            factoryUnit = reconstructor.@payloadType == null ? @mono : null;
            displayNextUnit = targetUnit = @poly;
        else
            displayNextUnit = targetUnit = factoryUnit = null;
        end;
        payloadRouter.config = targetUnit;

        fuzzyUpdate(ref enableFactory, power, 200, 500);

        if factoryUnit == null then
            factory.enabled = false;
            factory.config = @mono;
            lastProgress = 0;
        elsif lastProgress > factoryProgress + 0.1 then
            factory.enabled = enableFactory;
            factoryUnitFinished(factoryUnit);
            lastProgress = 0;
        elsif factory.config != factoryUnit then
            factory.enabled = enableFactory;
            factory.config = factoryUnit;
            lastProgress = 0;
        else
            factory.enabled = enableFactory;
            lastProgress = factoryProgress;
        end;

        if lastRecoProgress > reconstructorProgress + 0.1 then
            factoryUnitFinished(@poly);
            lastRecoProgress = 0;
        else
            lastRecoProgress = reconstructorProgress;
        end;

        if generator2.@coal < generator2 then
            unloader2.config = @coal;
            continue;
        end;

        var leadLimit = (factoryUnit == @mono) * 30;
        if factory.@lead < leadLimit and core.@lead > leadReserve then
            unloader2.config = @lead;
        elsif coreSilicon > siliconReserve then
            unloader2.config = @silicon;
        else
            unloader2.config = @coal;
        end;
    end;
end;
