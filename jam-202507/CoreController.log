   324 instructions before optimizations.
    28 instructions eliminated by Temp Variables Elimination (3 iterations).
     2 instructions eliminated by Case Expression Optimization.
    40 instructions eliminated by Dead Code Elimination (7 iterations).
     5 instructions eliminated by Jump Normalization (2 passes, 5 iterations).
    14 instructions eliminated by Jump Optimization (5 iterations).
    11 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
     2 instructions modified by Expression Optimization (3 iterations).
     2 instructions eliminated by If Expression Optimization (3 iterations).
    25 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
    62 instructions added by Function Inlining (4 iterations).
     3 function calls inlined by Function Inlining.
     5 instructions eliminated by Jump Straightening (5 iterations).
     8 instructions updated by JumpThreading.
    28 instructions eliminated by Unreachable Code Elimination (2 iterations).
   226 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 787):
  * Inline function 'factoryUnitFinished' defined at line 75:1   size   +67, benefit      109.4, efficiency      1.632 (+60 instructions)
    Inline function call at line 164:13                          size   +34, benefit       21.9, efficiency      0.643
    Inline function call at line 176:13                          size   +34, benefit       43.8, efficiency      1.287
    Inline function call at line 183:13                          size   +34, benefit       43.8, efficiency      1.287

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-2 instructions):
 
   322 write *tmp151 .bank *tmp147
   323 label *label49
   324 label *label48
-    * set *tmp153 :factoryUnitFinished:unit
-    * jump *label52 equal *tmp153 @flare
+  325 jump *label52 equal :factoryUnitFinished:unit @flare
   326 jump *label51 always
   327 label *label52
   328 op add *tmp154 .flares 1
 
   331 set *tmp152 *tmp154
   332 jump *label50 always
   333 label *label51
-    * jump *label54 equal *tmp153 @mono
+  334 jump *label54 equal :factoryUnitFinished:unit @mono
   335 jump *label53 always
   336 label *label54
   337 op add *tmp155 .monos 1
 
   340 set *tmp152 *tmp155
   341 jump *label50 always
   342 label *label53
-    * jump *label56 equal *tmp153 @poly
+  343 jump *label56 equal :factoryUnitFinished:unit @poly
   344 jump *label55 always
   345 label *label56
   346 op add *tmp156 .polys 1
 
   349 set *tmp152 *tmp156
   350 jump *label50 always
   351 label *label55
-    * jump *label58 equal *tmp153 @mega
+  352 jump *label58 equal :factoryUnitFinished:unit @mega
   353 jump *label57 always
   354 label *label58
   355 op add *tmp157 .megas 1
 
   365 set *tmp143 .factoryDone
   366 jump *label47 always
   367 label *label46
-    * set *tmp159 :factoryUnitFinished:unit
-    * jump *label61 equal *tmp159 @flare
-    * jump *label61 equal *tmp159 @mono
+  368 jump *label61 equal :factoryUnitFinished:unit @flare
+  369 jump *label61 equal :factoryUnitFinished:unit @mono
   370 jump *label60 always
   371 label *label61
   372 set .factoryDone 1

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-25 instructions):
 
    45 jump *label7 equal .smelter2 false
    46 set *tmp27 .unloader1
    47 control config *tmp27 @coal
-    * set *tmp26 @coal
    48 jump *label8 always
    49 label *label7
-    * set *tmp26 null
    50 label *label8
    51 sensor *tmp29 .battery @totalPower
    52 set :backgroundProcess:power *tmp29
 
    57 set *tmp34 .generator2
    58 op lessThan *tmp36 :backgroundProcess:power 3800
    59 control enabled *tmp34 *tmp36
-    * set *tmp30 *tmp36
    60 jump *label10 always
    61 label *label9
    62 set *tmp37 .generator
    63 op lessThan *tmp39 :backgroundProcess:power 800
    64 control enabled *tmp37 *tmp39
-    * set *tmp30 *tmp39
    65 label *label10
    66 sensor *tmp40 .factory @progress
    67 set :backgroundProcess:factoryProgress *tmp40
 
    78 set *tmp47 .targetUnit
    79 control config *tmp45 *tmp47
    80 set :backgroundProcess:blockFactory false
-    * set *tmp44 :backgroundProcess:blockFactory
    81 jump *label12 always
    82 label *label11
    83 op lessThan *tmp48 .monos .monoTarget
 
   151 label *label16
   152 set *tmp49 *tmp54
   153 label *label14
-    * set *tmp44 *tmp49
   154 label *label12
   155 set :fuzzyUpdate:value :backgroundProcess:power
   156 set :fuzzyUpdate:limitLow 200
 
   159 set :updateIfSmaller:b :fuzzyUpdate:limitLow
   160 set :updateIfSmaller:newValue false
   161 select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
-    * set *tmp79 null
   162 label *label24
   163 set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
   164 set :updateIfSmaller.1:b :fuzzyUpdate:value
 
   166 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   167 set *tmp80 null
   168 label *label25
-    * set *tmp78 *tmp80
   169 label *label23
   170 op equal *tmp81 .factoryUnit null
   171 jump *label26 equal *tmp81 false
 
   174 set *tmp85 .factory
   175 control config *tmp85 @mono
   176 set :backgroundProcess:lastProgress 0
-    * set *tmp82 :backgroundProcess:lastProgress
   177 jump *label27 always
   178 label *label26
   179 op add *tmp87 :backgroundProcess:factoryProgress 0.1
 
   215 label *label32
   216 set *tmp89 *tmp97
   217 label *label29
-    * set *tmp82 *tmp89
   218 label *label27
   219 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
   220 op greaterThan *tmp110 :backgroundProcess:lastRecoProgress *tmp109
 
   224 call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
   225 label *label35
   226 set :backgroundProcess:lastRecoProgress 0
-    * set *tmp111 :backgroundProcess:lastRecoProgress
   227 jump *label34 always
   228 label *label33
   229 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
-    * set *tmp111 :backgroundProcess:lastRecoProgress
   230 label *label34
   231 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
   232 op greaterThan *tmp113 :backgroundProcess:lastMultiProgress *tmp112
 
   236 call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
   237 label *label38
   238 set :backgroundProcess:lastMultiProgress 0
-    * set *tmp114 :backgroundProcess:lastMultiProgress
   239 jump *label37 always
   240 label *label36
   241 set :backgroundProcess:lastMultiProgress :backgroundProcess:multiReconstructorProgress
-    * set *tmp114 :backgroundProcess:lastMultiProgress
   242 label *label37
   243 sensor *tmp115 .generator2 @coal
   244 op mul *tmp116 5 .generator2
 
   247 set *tmp119 .unloader2
   248 control config *tmp119 @coal
   249 jump *label5 always
-    * set *tmp118 null
   250 jump *label40 always
   251 label *label39
-    * set *tmp118 null
   252 label *label40
   253 set *tmp121 .unloader4
   254 op greaterThan *tmp123 :backgroundProcess:coreSilicon .siliconReserve
 
   266 jump *label41 equal *tmp132 false
   267 set *tmp134 .unloader2
   268 control config *tmp134 @lead
-    * set *tmp133 @lead
   269 jump *label42 always
   270 label *label41
   271 op greaterThan *tmp136 :backgroundProcess:coreSilicon .siliconReserve
 
   279 control config *tmp140 @coal
   280 set *tmp137 @coal
   281 label *label44
-    * set *tmp133 *tmp137
   282 label *label42
   283 label *label5
   284 jump *label4 always
 
   310 op add *tmp154 .flares 1
   311 set .flares *tmp154
   312 write *tmp154 .display ".displayFlares"
-    * set *tmp152 *tmp154
   313 jump *label50 always
   314 label *label51
   315 jump *label54 equal :factoryUnitFinished:unit @mono
 
   318 op add *tmp155 .monos 1
   319 set .monos *tmp155
   320 write *tmp155 .display ".displayMonos"
-    * set *tmp152 *tmp155
   321 jump *label50 always
   322 label *label53
   323 jump *label56 equal :factoryUnitFinished:unit @poly
 
   326 op add *tmp156 .polys 1
   327 set .polys *tmp156
   328 write *tmp156 .display ".displayPolys"
-    * set *tmp152 *tmp156
   329 jump *label50 always
   330 label *label55
   331 jump *label58 equal :factoryUnitFinished:unit @mega
 
   334 op add *tmp157 .megas 1
   335 set .megas *tmp157
   336 write *tmp157 .display ".displayMegas"
-    * set *tmp152 *tmp157
   337 jump *label50 always
   338 label *label57
-    * set *tmp152 null
   339 label *label50
   340 write true .display ".displayUnitReset"
   341 set .factoryDone 0
-    * set *tmp143 .factoryDone
   342 jump *label47 always
   343 label *label46
   344 jump *label61 equal :factoryUnitFinished:unit @flare
 
   351 label *label60
   352 set *tmp158 null
   353 label *label59
-    * set *tmp143 *tmp158
   354 label *label47
   355 label *label45
   356 return :factoryUnitFinished*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-9 instructions):
 
    89 set *tmp52 .targetUnit
    90 control config *tmp50 *tmp52
    91 set :backgroundProcess:blockFactory false
-    * set *tmp49 :backgroundProcess:blockFactory
    92 jump *label14 always
    93 label *label13
    94 op lessThan *tmp53 .polys .polyTarget
 
   148 label *label20
   149 set *tmp54 *tmp67
   150 label *label16
-    * set *tmp49 *tmp54
   151 label *label14
   152 label *label12
   153 set :fuzzyUpdate:value :backgroundProcess:power
 
   162 set :updateIfSmaller.1:b :fuzzyUpdate:value
   163 set :updateIfSmaller.1:newValue true
   164 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
-    * set *tmp80 null
   165 label *label25
   166 label *label23
   167 op equal *tmp81 .factoryUnit null
 
   185 call *label0 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
   186 label *label30
   187 set :backgroundProcess:lastProgress 0
-    * set *tmp89 :backgroundProcess:lastProgress
   188 jump *label29 always
   189 label *label28
   190 set *tmp94 .factory
 
   209 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
   210 set *tmp97 :backgroundProcess:lastProgress
   211 label *label32
-    * set *tmp89 *tmp97
   212 label *label29
   213 label *label27
   214 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
 
   267 jump *label43 equal *tmp136 false
   268 set *tmp138 .unloader2
   269 control config *tmp138 @silicon
-    * set *tmp137 @silicon
   270 jump *label44 always
   271 label *label43
   272 set *tmp140 .unloader2
   273 control config *tmp140 @coal
-    * set *tmp137 @coal
   274 label *label44
   275 label *label42
   276 label *label5
 
   339 jump *label60 always
   340 label *label61
   341 set .factoryDone 1
-    * set *tmp158 .factoryDone
   342 jump *label59 always
   343 label *label60
-    * set *tmp158 null
   344 label *label59
   345 label *label47
   346 label *label45

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-4 instructions):
 
   113 op mul *tmp64 *tmp63 :backgroundProcess:factoryProgress
   114 op lessThan *tmp65 *tmp64 :backgroundProcess:reconstructorProgress
   115 set :backgroundProcess:blockFactory *tmp65
-    * set *tmp54 :backgroundProcess:blockFactory
   116 jump *label16 always
   117 label *label15
   118 op lessThan *tmp66 .megas .megaTarget
 
   145 set :backgroundProcess:blockFactory false
   146 set *tmp67 :backgroundProcess:blockFactory
   147 label *label20
-    * set *tmp54 *tmp67
   148 label *label16
   149 label *label14
   150 label *label12
 
   197 set *tmp104 .factoryUnit
   198 control config *tmp102 *tmp104
   199 set :backgroundProcess:lastProgress 0
-    * set *tmp97 :backgroundProcess:lastProgress
   200 jump *label32 always
   201 label *label31
   202 set *tmp105 .factory
 
   204 op land *tmp108 :backgroundProcess:enableFactory *tmp107
   205 control enabled *tmp105 *tmp108
   206 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
-    * set *tmp97 :backgroundProcess:lastProgress
   207 label *label32
   208 label *label29
   209 label *label27

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   136 set *tmp77 .targetUnit
   137 control config *tmp75 *tmp77
   138 set :backgroundProcess:blockFactory false
-    * set *tmp67 :backgroundProcess:blockFactory
   139 jump *label20 always
   140 label *label19
   141 set .factoryUnit null
   142 set .targetUnit null
   143 write null .display ".displayNextUnit"
   144 set :backgroundProcess:blockFactory false
-    * set *tmp67 :backgroundProcess:blockFactory
   145 label *label20
   146 label *label16
   147 label *label14

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-24 instructions):
 
    21 set :backgroundProcess:blockFactory false
    22 label *label4
    23 jump *label6 equal true false
-    * sensor *tmp7 .core @silicon
-    * set :backgroundProcess:coreSilicon *tmp7
-    * sensor *tmp8 .core @graphite
-    * set :backgroundProcess:coreGraphite *tmp8
+   24 sensor :backgroundProcess:coreSilicon .core @silicon
+   25 sensor :backgroundProcess:coreGraphite .core @graphite
    26 set *tmp9 .smelter2
    27 set *tmp11 .smelter
    28 op lessThan *tmp13 :backgroundProcess:coreSilicon .smelterTarget
 
    41 op lessThan *tmp25 *tmp24 .kilnTarget
    42 control enabled *tmp22 *tmp25
    43 jump *label7 equal .smelter2 false
-    * set *tmp27 .unloader1
-    * control config *tmp27 @coal
+   44 control config .unloader1 @coal
    45 jump *label8 always
    46 label *label7
    47 label *label8
-    * sensor *tmp29 .battery @totalPower
-    * set :backgroundProcess:power *tmp29
+   48 sensor :backgroundProcess:power .battery @totalPower
    49 jump *label9 equal .generator2 false
    50 set *tmp31 .generator
    51 op lessThan *tmp33 :backgroundProcess:power 10
 
    59 op lessThan *tmp39 :backgroundProcess:power 800
    60 control enabled *tmp37 *tmp39
    61 label *label10
-    * sensor *tmp40 .factory @progress
-    * set :backgroundProcess:factoryProgress *tmp40
-    * sensor *tmp41 .reconstructor @progress
-    * set :backgroundProcess:reconstructorProgress *tmp41
-    * sensor *tmp42 .multiReconstructor @progress
-    * set :backgroundProcess:multiReconstructorProgress *tmp42
+   62 sensor :backgroundProcess:factoryProgress .factory @progress
+   63 sensor :backgroundProcess:reconstructorProgress .reconstructor @progress
+   64 sensor :backgroundProcess:multiReconstructorProgress .multiReconstructor @progress
    65 op lessThan *tmp43 .flares .flareTarget
    66 jump *label11 equal *tmp43 false
    67 set .factoryUnit @flare
    68 set .targetUnit @flare
    69 write @flare .display ".displayNextUnit"
    70 set *tmp45 .payloadRouter
-    * set *tmp47 .targetUnit
-    * control config *tmp45 *tmp47
+   71 control config *tmp45 .targetUnit
    72 set :backgroundProcess:blockFactory false
    73 jump *label12 always
    74 label *label11
 
    78 set .targetUnit @mono
    79 write @mono .display ".displayNextUnit"
    80 set *tmp50 .payloadRouter
-    * set *tmp52 .targetUnit
-    * control config *tmp50 *tmp52
+   81 control config *tmp50 .targetUnit
    82 set :backgroundProcess:blockFactory false
    83 jump *label14 always
    84 label *label13
 
    95 set .factoryUnit *tmp57
    96 set .targetUnit @poly
    97 write @poly .display ".displayNextUnit"
-    * set *tmp58 .reconstructor
-    * control enabled *tmp58 true
+   98 control enabled .reconstructor true
    99 set *tmp60 .payloadRouter
-    * set *tmp62 .targetUnit
-    * control config *tmp60 *tmp62
+  100 control config *tmp60 .targetUnit
   101 sensor *tmp63 .reconstructor @payloadCount
   102 op mul *tmp64 *tmp63 :backgroundProcess:factoryProgress
-    * op lessThan *tmp65 *tmp64 :backgroundProcess:reconstructorProgress
-    * set :backgroundProcess:blockFactory *tmp65
+  103 op lessThan :backgroundProcess:blockFactory *tmp64 :backgroundProcess:reconstructorProgress
   104 jump *label16 always
   105 label *label15
   106 op lessThan *tmp66 .megas .megaTarget
 
   121 op or *tmp74 .multiReconstructor *tmp73
   122 control enabled *tmp71 *tmp74
   123 set *tmp75 .payloadRouter
-    * set *tmp77 .targetUnit
-    * control config *tmp75 *tmp77
+  124 control config *tmp75 .targetUnit
   125 set :backgroundProcess:blockFactory false
   126 jump *label20 always
   127 label *label19
 
   149 label *label23
   150 op equal *tmp81 .factoryUnit null
   151 jump *label26 equal *tmp81 false
-    * set *tmp83 .factory
-    * control enabled *tmp83 false
-    * set *tmp85 .factory
-    * control config *tmp85 @mono
+  152 control enabled .factory false
+  153 control config .factory @mono
   154 set :backgroundProcess:lastProgress 0
   155 jump *label27 always
   156 label *label26
 
   168 set :backgroundProcess:lastProgress 0
   169 jump *label29 always
   170 label *label28
-    * set *tmp94 .factory
-    * sensor *tmp95 *tmp94 @config
+  171 sensor *tmp95 .factory @config
   172 op notEqual *tmp96 *tmp95 .factoryUnit
   173 jump *label31 equal *tmp96 false
   174 set *tmp98 .factory
   175 op equal *tmp100 :backgroundProcess:blockFactory false
   176 op land *tmp101 :backgroundProcess:enableFactory *tmp100
   177 control enabled *tmp98 *tmp101
-    * set *tmp102 .factory
-    * set *tmp104 .factoryUnit
-    * control config *tmp102 *tmp104
+  178 control config .factory .factoryUnit
   179 set :backgroundProcess:lastProgress 0
   180 jump *label32 always
   181 label *label31
 
   215 op mul *tmp116 5 .generator2
   216 op lessThan *tmp117 *tmp115 *tmp116
   217 jump *label39 equal *tmp117 false
-    * set *tmp119 .unloader2
-    * control config *tmp119 @coal
+  218 control config .unloader2 @coal
   219 jump *label5 always
   220 jump *label40 always
   221 label *label39
 
   226 op land *tmp125 *tmp123 *tmp124
   227 control enabled *tmp121 *tmp125
   228 op equal *tmp126 .factoryUnit @mono
-    * op mul *tmp127 *tmp126 30
-    * set :backgroundProcess:leadLimit *tmp127
+  229 op mul :backgroundProcess:leadLimit *tmp126 30
   230 sensor *tmp128 .factory @lead
   231 op lessThan *tmp129 *tmp128 :backgroundProcess:leadLimit
   232 sensor *tmp130 .core @lead
   233 op greaterThan *tmp131 *tmp130 .leadReserve
   234 op land *tmp132 *tmp129 *tmp131
   235 jump *label41 equal *tmp132 false
-    * set *tmp134 .unloader2
-    * control config *tmp134 @lead
+  236 control config .unloader2 @lead
   237 jump *label42 always
   238 label *label41
   239 op greaterThan *tmp136 :backgroundProcess:coreSilicon .siliconReserve
   240 jump *label43 equal *tmp136 false
-    * set *tmp138 .unloader2
-    * control config *tmp138 @silicon
+  241 control config .unloader2 @silicon
   242 jump *label44 always
   243 label *label43
-    * set *tmp140 .unloader2
-    * control config *tmp140 @coal
+  244 control config .unloader2 @coal
   245 label *label44
   246 label *label42
   247 label *label5
 
   256 jump *label46 equal *tmp142 false
   257 set :logUnit:unit :factoryUnitFinished:unit
   258 sensor *tmp144 :logUnit:unit @id
-    * op add *tmp145 @blockCount *tmp144
-    * set :log:encodedId *tmp145
+  259 op add :log:encodedId @blockCount *tmp144
   260 read *tmp6 .bank 511
   261 op sub *tmp146 *tmp6 1
   262 write *tmp146 .bank 511

Modifications by Initial phase, Temp Variables Elimination, iteration 2 (-4 instructions):
 
    67 set .factoryUnit @flare
    68 set .targetUnit @flare
    69 write @flare .display ".displayNextUnit"
-    * set *tmp45 .payloadRouter
-    * control config *tmp45 .targetUnit
+   70 control config .payloadRouter .targetUnit
    71 set :backgroundProcess:blockFactory false
    72 jump *label12 always
    73 label *label11
 
    76 set .factoryUnit @mono
    77 set .targetUnit @mono
    78 write @mono .display ".displayNextUnit"
-    * set *tmp50 .payloadRouter
-    * control config *tmp50 .targetUnit
+   79 control config .payloadRouter .targetUnit
    80 set :backgroundProcess:blockFactory false
    81 jump *label14 always
    82 label *label13
 
    94 set .targetUnit @poly
    95 write @poly .display ".displayNextUnit"
    96 control enabled .reconstructor true
-    * set *tmp60 .payloadRouter
-    * control config *tmp60 .targetUnit
+   97 control config .payloadRouter .targetUnit
    98 sensor *tmp63 .reconstructor @payloadCount
    99 op mul *tmp64 *tmp63 :backgroundProcess:factoryProgress
   100 op lessThan :backgroundProcess:blockFactory *tmp64 :backgroundProcess:reconstructorProgress
 
   117 op lessThan *tmp73 :backgroundProcess:reconstructorProgress 0.75
   118 op or *tmp74 .multiReconstructor *tmp73
   119 control enabled *tmp71 *tmp74
-    * set *tmp75 .payloadRouter
-    * control config *tmp75 .targetUnit
+  120 control config .payloadRouter .targetUnit
   121 set :backgroundProcess:blockFactory false
   122 jump *label20 always
   123 label *label19

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
    20 set :backgroundProcess:enableFactory true
    21 set :backgroundProcess:blockFactory false
    22 label *label4
-    * jump *label6 equal true false
    23 sensor :backgroundProcess:coreSilicon .core @silicon
    24 sensor :backgroundProcess:coreGraphite .core @graphite
    25 set *tmp9 .smelter2

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-5 instructions):
 
   262 write *tmp151 .bank *tmp147
   263 label *label49
   264 label *label48
-    * jump *label52 equal :factoryUnitFinished:unit @flare
-    * jump *label51 always
+  265 jump *label51 notEqual :factoryUnitFinished:unit @flare
   266 label *label52
   267 op add *tmp154 .flares 1
   268 set .flares *tmp154
   269 write *tmp154 .display ".displayFlares"
   270 jump *label50 always
   271 label *label51
-    * jump *label54 equal :factoryUnitFinished:unit @mono
-    * jump *label53 always
+  272 jump *label53 notEqual :factoryUnitFinished:unit @mono
   273 label *label54
   274 op add *tmp155 .monos 1
   275 set .monos *tmp155
   276 write *tmp155 .display ".displayMonos"
   277 jump *label50 always
   278 label *label53
-    * jump *label56 equal :factoryUnitFinished:unit @poly
-    * jump *label55 always
+  279 jump *label55 notEqual :factoryUnitFinished:unit @poly
   280 label *label56
   281 op add *tmp156 .polys 1
   282 set .polys *tmp156
   283 write *tmp156 .display ".displayPolys"
   284 jump *label50 always
   285 label *label55
-    * jump *label58 equal :factoryUnitFinished:unit @mega
-    * jump *label57 always
+  286 jump *label57 notEqual :factoryUnitFinished:unit @mega
   287 label *label58
   288 op add *tmp157 .megas 1
   289 set .megas *tmp157
 
   296 jump *label47 always
   297 label *label46
   298 jump *label61 equal :factoryUnitFinished:unit @flare
-    * jump *label61 equal :factoryUnitFinished:unit @mono
-    * jump *label60 always
+  299 jump *label60 notEqual :factoryUnitFinished:unit @mono
   300 label *label61
   301 set .factoryDone 1
   302 jump *label59 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-14 instructions):
 
    61 sensor :backgroundProcess:factoryProgress .factory @progress
    62 sensor :backgroundProcess:reconstructorProgress .reconstructor @progress
    63 sensor :backgroundProcess:multiReconstructorProgress .multiReconstructor @progress
-    * op lessThan *tmp43 .flares .flareTarget
-    * jump *label11 equal *tmp43 false
+   64 jump *label11 greaterThanEq .flares .flareTarget
    65 set .factoryUnit @flare
    66 set .targetUnit @flare
    67 write @flare .display ".displayNextUnit"
 
    69 set :backgroundProcess:blockFactory false
    70 jump *label12 always
    71 label *label11
-    * op lessThan *tmp48 .monos .monoTarget
-    * jump *label13 equal *tmp48 false
+   72 jump *label13 greaterThanEq .monos .monoTarget
    73 set .factoryUnit @mono
    74 set .targetUnit @mono
    75 write @mono .display ".displayNextUnit"
 
    77 set :backgroundProcess:blockFactory false
    78 jump *label14 always
    79 label *label13
-    * op lessThan *tmp53 .polys .polyTarget
-    * jump *label15 equal *tmp53 false
+   80 jump *label15 greaterThanEq .polys .polyTarget
    81 op add *tmp55 .factoryDone .polys
-    * op lessThan *tmp56 *tmp55 .polyTarget
-    * jump *label17 equal *tmp56 false
+   82 jump *label17 greaterThanEq *tmp55 .polyTarget
    83 set *tmp57 @mono
    84 jump *label18 always
    85 label *label17
 
    95 op lessThan :backgroundProcess:blockFactory *tmp64 :backgroundProcess:reconstructorProgress
    96 jump *label16 always
    97 label *label15
-    * op lessThan *tmp66 .megas .megaTarget
-    * jump *label19 equal *tmp66 false
+   98 jump *label19 greaterThanEq .megas .megaTarget
    99 op add *tmp68 .factoryDone .megas
-    * op lessThan *tmp69 *tmp68 .megaTarget
-    * jump *label21 equal *tmp69 false
+  100 jump *label21 greaterThanEq *tmp68 .megaTarget
   101 set *tmp70 @mono
   102 jump *label22 always
   103 label *label21
 
   136 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   137 label *label25
   138 label *label23
-    * op equal *tmp81 .factoryUnit null
-    * jump *label26 equal *tmp81 false
+  139 jump *label26 notEqual .factoryUnit null
   140 control enabled .factory false
   141 control config .factory @mono
   142 set :backgroundProcess:lastProgress 0
   143 jump *label27 always
   144 label *label26
   145 op add *tmp87 :backgroundProcess:factoryProgress 0.1
-    * op greaterThan *tmp88 :backgroundProcess:lastProgress *tmp87
-    * jump *label28 equal *tmp88 false
+  146 jump *label28 lessThanEq :backgroundProcess:lastProgress *tmp87
   147 set *tmp90 .factory
   148 op equal *tmp92 :backgroundProcess:blockFactory false
   149 op land *tmp93 :backgroundProcess:enableFactory *tmp92
 
   156 jump *label29 always
   157 label *label28
   158 sensor *tmp95 .factory @config
-    * op notEqual *tmp96 *tmp95 .factoryUnit
-    * jump *label31 equal *tmp96 false
+  159 jump *label31 equal *tmp95 .factoryUnit
   160 set *tmp98 .factory
   161 op equal *tmp100 :backgroundProcess:blockFactory false
   162 op land *tmp101 :backgroundProcess:enableFactory *tmp100
 
   174 label *label29
   175 label *label27
   176 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
-    * op greaterThan *tmp110 :backgroundProcess:lastRecoProgress *tmp109
-    * jump *label33 equal *tmp110 false
+  177 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
   178 set :factoryUnitFinished:unit @poly
   179 setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
   180 call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
 
   185 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
   186 label *label34
   187 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
-    * op greaterThan *tmp113 :backgroundProcess:lastMultiProgress *tmp112
-    * jump *label36 equal *tmp113 false
+  188 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
   189 set :factoryUnitFinished:unit @mega
   190 setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
   191 call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
 
   197 label *label37
   198 sensor *tmp115 .generator2 @coal
   199 op mul *tmp116 5 .generator2
-    * op lessThan *tmp117 *tmp115 *tmp116
-    * jump *label39 equal *tmp117 false
+  200 jump *label39 greaterThanEq *tmp115 *tmp116
   201 control config .unloader2 @coal
   202 jump *label5 always
   203 jump *label40 always
 
   219 control config .unloader2 @lead
   220 jump *label42 always
   221 label *label41
-    * op greaterThan *tmp136 :backgroundProcess:coreSilicon .siliconReserve
-    * jump *label43 equal *tmp136 false
+  222 jump *label43 lessThanEq :backgroundProcess:coreSilicon .siliconReserve
   223 control config .unloader2 @silicon
   224 jump *label44 always
   225 label *label43
 
   234 jump *label2 always
   235 end
   236 label *label0
-    * op equal *tmp142 :factoryUnitFinished:unit .targetUnit
-    * jump *label46 equal *tmp142 false
+  237 jump *label46 notEqual :factoryUnitFinished:unit .targetUnit
   238 set :logUnit:unit :factoryUnitFinished:unit
   239 sensor *tmp144 :logUnit:unit @id
   240 op add :log:encodedId @blockCount *tmp144

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-4 instructions):
 
    41 control enabled *tmp22 *tmp25
    42 jump *label7 equal .smelter2 false
    43 control config .unloader1 @coal
-    * jump *label8 always
    44 label *label7
    45 label *label8
    46 sensor :backgroundProcess:power .battery @totalPower
 
   199 jump *label39 greaterThanEq *tmp115 *tmp116
   200 control config .unloader2 @coal
   201 jump *label5 always
-    * jump *label40 always
   202 label *label39
   203 label *label40
   204 set *tmp121 .unloader4
 
   272 op add *tmp157 .megas 1
   273 set .megas *tmp157
   274 write *tmp157 .display ".displayMegas"
-    * jump *label50 always
   275 label *label57
   276 label *label50
   277 write true .display ".displayUnitReset"
 
   282 jump *label60 notEqual :factoryUnitFinished:unit @mono
   283 label *label61
   284 set .factoryDone 1
-    * jump *label59 always
   285 label *label60
   286 label *label59
   287 label *label47

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-4 instructions):
 
    12 set *signature "0:v1"
    13 label *label2
    14 set :backgroundProcess:lastProgress 0
-    * set :backgroundProcess:factoryProgress 0
    15 set :backgroundProcess:lastRecoProgress 0
-    * set :backgroundProcess:reconstructorProgress 0
    16 set :backgroundProcess:lastMultiProgress 0
-    * set :backgroundProcess:multiReconstructorProgress 0
    17 set :backgroundProcess:enableFactory true
-    * set :backgroundProcess:blockFactory false
    18 label *label4
    19 sensor :backgroundProcess:coreSilicon .core @silicon
    20 sensor :backgroundProcess:coreGraphite .core @graphite
 
   120 set :fuzzyUpdate:value :backgroundProcess:power
   121 set :fuzzyUpdate:limitLow 200
   122 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :fuzzyUpdate:value
-    * set :updateIfSmaller:b :fuzzyUpdate:limitLow
+  123 set :updateIfSmaller:a :backgroundProcess:power
+  124 set :updateIfSmaller:b 200
   125 set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
+  126 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
   127 label *label24
-    * set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
-    * set :updateIfSmaller.1:b :fuzzyUpdate:value
+  128 set :updateIfSmaller.1:a 500
+  129 set :updateIfSmaller.1:b :backgroundProcess:power
   130 set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
+  131 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
   132 label *label25
   133 label *label23
   134 jump *label26 notEqual .factoryUnit null
 
   230 label *label0
   231 jump *label46 notEqual :factoryUnitFinished:unit .targetUnit
   232 set :logUnit:unit :factoryUnitFinished:unit
-    * sensor *tmp144 :logUnit:unit @id
+  233 sensor *tmp144 :factoryUnitFinished:unit @id
   234 op add :log:encodedId @blockCount *tmp144
   235 read *tmp6 .bank 511
   236 op sub *tmp146 *tmp6 1
 
   239 read *tmp149 .timer "time"
   240 op mul *tmp150 *tmp149 1000
   241 op add *tmp151 :log:encodedId *tmp150
-    * write *tmp151 .bank *tmp147
+  242 write *tmp151 .bank *tmp146
   243 label *label49
   244 label *label48
   245 jump *label51 notEqual :factoryUnitFinished:unit @flare

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   120 set :fuzzyUpdate:value :backgroundProcess:power
   121 set :fuzzyUpdate:limitLow 200
   122 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :backgroundProcess:power
-    * set :updateIfSmaller:b 200
-    * set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
+  123 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   124 label *label24
-    * set :updateIfSmaller.1:a 500
-    * set :updateIfSmaller.1:b :backgroundProcess:power
-    * set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
+  125 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
   126 label *label25
   127 label *label23
   128 jump *label26 notEqual .factoryUnit null
 
   223 end
   224 label *label0
   225 jump *label46 notEqual :factoryUnitFinished:unit .targetUnit
-    * set :logUnit:unit :factoryUnitFinished:unit
   226 sensor *tmp144 :factoryUnitFinished:unit @id
   227 op add :log:encodedId @blockCount *tmp144
   228 read *tmp6 .bank 511
   229 op sub *tmp146 *tmp6 1
   230 write *tmp146 .bank 511
-    * set *tmp147 *tmp146
   231 read *tmp149 .timer "time"
   232 op mul *tmp150 *tmp149 1000
   233 op add *tmp151 :log:encodedId *tmp150

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
   117 label *label16
   118 label *label14
   119 label *label12
-    * set :fuzzyUpdate:value :backgroundProcess:power
-    * set :fuzzyUpdate:limitLow 200
-    * set :fuzzyUpdate:limitHigh 500
   120 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   121 label *label24
   122 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
    73 jump *label14 always
    74 label *label13
    75 jump *label15 greaterThanEq .polys .polyTarget
+   76 set .factoryUnit null
    77 op add *tmp55 .factoryDone .polys
-    * jump *label17 greaterThanEq *tmp55 .polyTarget
-    * set *tmp57 @mono
+   78 jump *label18 greaterThanEq *tmp55 .polyTarget
+   79 set .factoryUnit @mono
    80 jump *label18 always
-    * label *label17
-    * set *tmp57 null
    81 label *label18
-    * set .factoryUnit *tmp57
    82 set .targetUnit @poly
    83 write @poly .display ".displayNextUnit"
    84 control enabled .reconstructor true
 
    89 jump *label16 always
    90 label *label15
    91 jump *label19 greaterThanEq .megas .megaTarget
+   92 set .factoryUnit null
    93 op add *tmp68 .factoryDone .megas
-    * jump *label21 greaterThanEq *tmp68 .megaTarget
-    * set *tmp70 @mono
+   94 jump *label22 greaterThanEq *tmp68 .megaTarget
+   95 set .factoryUnit @mono
    96 jump *label22 always
-    * label *label21
-    * set *tmp70 null
    97 label *label22
-    * set .factoryUnit *tmp70
    98 set .targetUnit @mega
    99 write @mega .display ".displayNextUnit"
   100 set *tmp71 .reconstructor

Modifications by Inline function 'factoryUnitFinished' defined at line 75:1 (+62 instructions):
 
   131 op land *tmp93 :backgroundProcess:enableFactory *tmp92
   132 control enabled *tmp90 *tmp93
   133 set :factoryUnitFinished:unit .factoryUnit
-    * setaddr :factoryUnitFinished*retaddr *label30 (h:*label30)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
-    * label *label30
+  134 label *label62
+  135 jump *label74 notEqual :factoryUnitFinished:unit .targetUnit
+  136 sensor *tmp144 :factoryUnitFinished:unit @id
+  137 op add :log:encodedId @blockCount *tmp144
+  138 read *tmp6 .bank 511
+  139 op sub *tmp146 *tmp6 1
+  140 write *tmp146 .bank 511
+  141 read *tmp149 .timer "time"
+  142 op mul *tmp150 *tmp149 1000
+  143 op add *tmp151 :log:encodedId *tmp150
+  144 write *tmp151 .bank *tmp146
+  145 label *label63
+  146 label *label64
+  147 jump *label66 notEqual :factoryUnitFinished:unit @flare
+  148 label *label65
+  149 op add *tmp154 .flares 1
+  150 set .flares *tmp154
+  151 write *tmp154 .display ".displayFlares"
+  152 jump *label73 always
+  153 label *label66
+  154 jump *label68 notEqual :factoryUnitFinished:unit @mono
+  155 label *label67
+  156 op add *tmp155 .monos 1
+  157 set .monos *tmp155
+  158 write *tmp155 .display ".displayMonos"
+  159 jump *label73 always
+  160 label *label68
+  161 jump *label70 notEqual :factoryUnitFinished:unit @poly
+  162 label *label69
+  163 op add *tmp156 .polys 1
+  164 set .polys *tmp156
+  165 write *tmp156 .display ".displayPolys"
+  166 jump *label73 always
+  167 label *label70
+  168 jump *label72 notEqual :factoryUnitFinished:unit @mega
+  169 label *label71
+  170 op add *tmp157 .megas 1
+  171 set .megas *tmp157
+  172 write *tmp157 .display ".displayMegas"
+  173 label *label72
+  174 label *label73
+  175 write true .display ".displayUnitReset"
+  176 set .factoryDone 0
+  177 jump *label78 always
+  178 label *label74
+  179 jump *label75 equal :factoryUnitFinished:unit @flare
+  180 jump *label76 notEqual :factoryUnitFinished:unit @mono
+  181 label *label75
+  182 set .factoryDone 1
+  183 label *label76
+  184 label *label77
+  185 label *label78
+  186 label *label79
   187 set :backgroundProcess:lastProgress 0
   188 jump *label29 always
   189 label *label28
 
   208 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
   209 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
   210 set :factoryUnitFinished:unit @poly
-    * setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
-    * label *label35
+  211 label *label80
+  212 jump *label92 notEqual :factoryUnitFinished:unit .targetUnit
+  213 sensor *tmp144 :factoryUnitFinished:unit @id
+  214 op add :log:encodedId @blockCount *tmp144
+  215 read *tmp6 .bank 511
+  216 op sub *tmp146 *tmp6 1
+  217 write *tmp146 .bank 511
+  218 read *tmp149 .timer "time"
+  219 op mul *tmp150 *tmp149 1000
+  220 op add *tmp151 :log:encodedId *tmp150
+  221 write *tmp151 .bank *tmp146
+  222 label *label81
+  223 label *label82
+  224 jump *label84 notEqual :factoryUnitFinished:unit @flare
+  225 label *label83
+  226 op add *tmp154 .flares 1
+  227 set .flares *tmp154
+  228 write *tmp154 .display ".displayFlares"
+  229 jump *label91 always
+  230 label *label84
+  231 jump *label86 notEqual :factoryUnitFinished:unit @mono
+  232 label *label85
+  233 op add *tmp155 .monos 1
+  234 set .monos *tmp155
+  235 write *tmp155 .display ".displayMonos"
+  236 jump *label91 always
+  237 label *label86
+  238 jump *label88 notEqual :factoryUnitFinished:unit @poly
+  239 label *label87
+  240 op add *tmp156 .polys 1
+  241 set .polys *tmp156
+  242 write *tmp156 .display ".displayPolys"
+  243 jump *label91 always
+  244 label *label88
+  245 jump *label90 notEqual :factoryUnitFinished:unit @mega
+  246 label *label89
+  247 op add *tmp157 .megas 1
+  248 set .megas *tmp157
+  249 write *tmp157 .display ".displayMegas"
+  250 label *label90
+  251 label *label91
+  252 write true .display ".displayUnitReset"
+  253 set .factoryDone 0
+  254 jump *label96 always
+  255 label *label92
+  256 jump *label93 equal :factoryUnitFinished:unit @flare
+  257 jump *label94 notEqual :factoryUnitFinished:unit @mono
+  258 label *label93
+  259 set .factoryDone 1
+  260 label *label94
+  261 label *label95
+  262 label *label96
+  263 label *label97
   264 set :backgroundProcess:lastRecoProgress 0
   265 jump *label34 always
   266 label *label33
 
   269 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
   270 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
   271 set :factoryUnitFinished:unit @mega
-    * setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
-    * label *label38
+  272 label *label98
+  273 jump *label110 notEqual :factoryUnitFinished:unit .targetUnit
+  274 sensor *tmp144 :factoryUnitFinished:unit @id
+  275 op add :log:encodedId @blockCount *tmp144
+  276 read *tmp6 .bank 511
+  277 op sub *tmp146 *tmp6 1
+  278 write *tmp146 .bank 511
+  279 read *tmp149 .timer "time"
+  280 op mul *tmp150 *tmp149 1000
+  281 op add *tmp151 :log:encodedId *tmp150
+  282 write *tmp151 .bank *tmp146
+  283 label *label99
+  284 label *label100
+  285 jump *label102 notEqual :factoryUnitFinished:unit @flare
+  286 label *label101
+  287 op add *tmp154 .flares 1
+  288 set .flares *tmp154
+  289 write *tmp154 .display ".displayFlares"
+  290 jump *label109 always
+  291 label *label102
+  292 jump *label104 notEqual :factoryUnitFinished:unit @mono
+  293 label *label103
+  294 op add *tmp155 .monos 1
+  295 set .monos *tmp155
+  296 write *tmp155 .display ".displayMonos"
+  297 jump *label109 always
+  298 label *label104
+  299 jump *label106 notEqual :factoryUnitFinished:unit @poly
+  300 label *label105
+  301 op add *tmp156 .polys 1
+  302 set .polys *tmp156
+  303 write *tmp156 .display ".displayPolys"
+  304 jump *label109 always
+  305 label *label106
+  306 jump *label108 notEqual :factoryUnitFinished:unit @mega
+  307 label *label107
+  308 op add *tmp157 .megas 1
+  309 set .megas *tmp157
+  310 write *tmp157 .display ".displayMegas"
+  311 label *label108
+  312 label *label109
+  313 write true .display ".displayUnitReset"
+  314 set .factoryDone 0
+  315 jump *label114 always
+  316 label *label110
+  317 jump *label111 equal :factoryUnitFinished:unit @flare
+  318 jump *label112 notEqual :factoryUnitFinished:unit @mono
+  319 label *label111
+  320 set .factoryDone 1
+  321 label *label112
+  322 label *label113
+  323 label *label114
+  324 label *label115
   325 set :backgroundProcess:lastMultiProgress 0
   326 jump *label37 always
   327 label *label36
 
   364 wait 1e12
   365 jump *label2 always
   366 end
-    * label *label0
-    * jump *label46 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp144 :factoryUnitFinished:unit @id
-    * op add :log:encodedId @blockCount *tmp144
-    * read *tmp6 .bank 511
-    * op sub *tmp146 *tmp6 1
-    * write *tmp146 .bank 511
-    * read *tmp149 .timer "time"
-    * op mul *tmp150 *tmp149 1000
-    * op add *tmp151 :log:encodedId *tmp150
-    * write *tmp151 .bank *tmp146
-    * label *label49
-    * label *label48
-    * jump *label51 notEqual :factoryUnitFinished:unit @flare
-    * label *label52
-    * op add *tmp154 .flares 1
-    * set .flares *tmp154
-    * write *tmp154 .display ".displayFlares"
-    * jump *label50 always
-    * label *label51
-    * jump *label53 notEqual :factoryUnitFinished:unit @mono
-    * label *label54
-    * op add *tmp155 .monos 1
-    * set .monos *tmp155
-    * write *tmp155 .display ".displayMonos"
-    * jump *label50 always
-    * label *label53
-    * jump *label55 notEqual :factoryUnitFinished:unit @poly
-    * label *label56
-    * op add *tmp156 .polys 1
-    * set .polys *tmp156
-    * write *tmp156 .display ".displayPolys"
-    * jump *label50 always
-    * label *label55
-    * jump *label57 notEqual :factoryUnitFinished:unit @mega
-    * label *label58
-    * op add *tmp157 .megas 1
-    * set .megas *tmp157
-    * write *tmp157 .display ".displayMegas"
-    * label *label57
-    * label *label50
-    * write true .display ".displayUnitReset"
-    * set .factoryDone 0
-    * jump *label47 always
-    * label *label46
-    * jump *label61 equal :factoryUnitFinished:unit @flare
-    * jump *label60 notEqual :factoryUnitFinished:unit @mono
-    * label *label61
-    * set .factoryDone 1
-    * label *label60
-    * label *label59
-    * label *label47
-    * label *label45
-    * return :factoryUnitFinished*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   209 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
   210 set :factoryUnitFinished:unit @poly
   211 label *label80
-    * jump *label92 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp144 :factoryUnitFinished:unit @id
+  212 jump *label92 notEqual @poly .targetUnit
+  213 sensor *tmp144 @poly @id
   214 op add :log:encodedId @blockCount *tmp144
   215 read *tmp6 .bank 511
   216 op sub *tmp146 *tmp6 1
 
   221 write *tmp151 .bank *tmp146
   222 label *label81
   223 label *label82
-    * jump *label84 notEqual :factoryUnitFinished:unit @flare
+  224 jump *label84 notEqual @poly @flare
   225 label *label83
   226 op add *tmp154 .flares 1
   227 set .flares *tmp154
   228 write *tmp154 .display ".displayFlares"
   229 jump *label91 always
   230 label *label84
-    * jump *label86 notEqual :factoryUnitFinished:unit @mono
+  231 jump *label86 notEqual @poly @mono
   232 label *label85
   233 op add *tmp155 .monos 1
   234 set .monos *tmp155
   235 write *tmp155 .display ".displayMonos"
   236 jump *label91 always
   237 label *label86
-    * jump *label88 notEqual :factoryUnitFinished:unit @poly
+  238 jump *label88 notEqual @poly @poly
   239 label *label87
   240 op add *tmp156 .polys 1
   241 set .polys *tmp156
   242 write *tmp156 .display ".displayPolys"
   243 jump *label91 always
   244 label *label88
-    * jump *label90 notEqual :factoryUnitFinished:unit @mega
+  245 jump *label90 notEqual @poly @mega
   246 label *label89
   247 op add *tmp157 .megas 1
   248 set .megas *tmp157
 
   253 set .factoryDone 0
   254 jump *label96 always
   255 label *label92
-    * jump *label93 equal :factoryUnitFinished:unit @flare
-    * jump *label94 notEqual :factoryUnitFinished:unit @mono
+  256 jump *label93 equal @poly @flare
+  257 jump *label94 notEqual @poly @mono
   258 label *label93
   259 set .factoryDone 1
   260 label *label94
 
   270 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
   271 set :factoryUnitFinished:unit @mega
   272 label *label98
-    * jump *label110 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp144 :factoryUnitFinished:unit @id
+  273 jump *label110 notEqual @mega .targetUnit
+  274 sensor *tmp144 @mega @id
   275 op add :log:encodedId @blockCount *tmp144
   276 read *tmp6 .bank 511
   277 op sub *tmp146 *tmp6 1
 
   282 write *tmp151 .bank *tmp146
   283 label *label99
   284 label *label100
-    * jump *label102 notEqual :factoryUnitFinished:unit @flare
+  285 jump *label102 notEqual @mega @flare
   286 label *label101
   287 op add *tmp154 .flares 1
   288 set .flares *tmp154
   289 write *tmp154 .display ".displayFlares"
   290 jump *label109 always
   291 label *label102
-    * jump *label104 notEqual :factoryUnitFinished:unit @mono
+  292 jump *label104 notEqual @mega @mono
   293 label *label103
   294 op add *tmp155 .monos 1
   295 set .monos *tmp155
   296 write *tmp155 .display ".displayMonos"
   297 jump *label109 always
   298 label *label104
-    * jump *label106 notEqual :factoryUnitFinished:unit @poly
+  299 jump *label106 notEqual @mega @poly
   300 label *label105
   301 op add *tmp156 .polys 1
   302 set .polys *tmp156
   303 write *tmp156 .display ".displayPolys"
   304 jump *label109 always
   305 label *label106
-    * jump *label108 notEqual :factoryUnitFinished:unit @mega
+  306 jump *label108 notEqual @mega @mega
   307 label *label107
   308 op add *tmp157 .megas 1
   309 set .megas *tmp157
 
   314 set .factoryDone 0
   315 jump *label114 always
   316 label *label110
-    * jump *label111 equal :factoryUnitFinished:unit @flare
-    * jump *label112 notEqual :factoryUnitFinished:unit @mono
+  317 jump *label111 equal @mega @flare
+  318 jump *label112 notEqual @mega @mono
   319 label *label111
   320 set .factoryDone 1
   321 label *label112

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   207 label *label27
   208 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
   209 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
-    * set :factoryUnitFinished:unit @poly
   210 label *label80
   211 jump *label92 notEqual @poly .targetUnit
   212 sensor *tmp144 @poly @id
 
   267 label *label34
   268 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
   269 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
-    * set :factoryUnitFinished:unit @mega
   270 label *label98
   271 jump *label110 notEqual @mega .targetUnit
   272 sensor *tmp144 @mega @id

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-4 instructions):
 
   220 write *tmp151 .bank *tmp146
   221 label *label81
   222 label *label82
-    * jump *label84 notEqual @poly @flare
+  223 jump *label84 always
   224 label *label83
   225 op add *tmp154 .flares 1
   226 set .flares *tmp154
   227 write *tmp154 .display ".displayFlares"
   228 jump *label91 always
   229 label *label84
-    * jump *label86 notEqual @poly @mono
+  230 jump *label86 always
   231 label *label85
   232 op add *tmp155 .monos 1
   233 set .monos *tmp155
   234 write *tmp155 .display ".displayMonos"
   235 jump *label91 always
   236 label *label86
-    * jump *label88 notEqual @poly @poly
   237 label *label87
   238 op add *tmp156 .polys 1
   239 set .polys *tmp156
   240 write *tmp156 .display ".displayPolys"
   241 jump *label91 always
   242 label *label88
-    * jump *label90 notEqual @poly @mega
+  243 jump *label90 always
   244 label *label89
   245 op add *tmp157 .megas 1
   246 set .megas *tmp157
 
   251 set .factoryDone 0
   252 jump *label96 always
   253 label *label92
-    * jump *label93 equal @poly @flare
-    * jump *label94 notEqual @poly @mono
+  254 jump *label94 always
   255 label *label93
   256 set .factoryDone 1
   257 label *label94
 
   278 write *tmp151 .bank *tmp146
   279 label *label99
   280 label *label100
-    * jump *label102 notEqual @mega @flare
+  281 jump *label102 always
   282 label *label101
   283 op add *tmp154 .flares 1
   284 set .flares *tmp154
   285 write *tmp154 .display ".displayFlares"
   286 jump *label109 always
   287 label *label102
-    * jump *label104 notEqual @mega @mono
+  288 jump *label104 always
   289 label *label103
   290 op add *tmp155 .monos 1
   291 set .monos *tmp155
   292 write *tmp155 .display ".displayMonos"
   293 jump *label109 always
   294 label *label104
-    * jump *label106 notEqual @mega @poly
+  295 jump *label106 always
   296 label *label105
   297 op add *tmp156 .polys 1
   298 set .polys *tmp156
   299 write *tmp156 .display ".displayPolys"
   300 jump *label109 always
   301 label *label106
-    * jump *label108 notEqual @mega @mega
   302 label *label107
   303 op add *tmp157 .megas 1
   304 set .megas *tmp157
 
   309 set .factoryDone 0
   310 jump *label114 always
   311 label *label110
-    * jump *label111 equal @mega @flare
-    * jump *label112 notEqual @mega @mono
+  312 jump *label112 always
   313 label *label111
   314 set .factoryDone 1
   315 label *label112

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-2 instructions):
 
    77 op add *tmp55 .factoryDone .polys
    78 jump *label18 greaterThanEq *tmp55 .polyTarget
    79 set .factoryUnit @mono
-    * jump *label18 always
    80 label *label18
    81 set .targetUnit @poly
    82 write @poly .display ".displayNextUnit"
 
    92 op add *tmp68 .factoryDone .megas
    93 jump *label22 greaterThanEq *tmp68 .megaTarget
    94 set .factoryUnit @mono
-    * jump *label22 always
    95 label *label22
    96 set .targetUnit @mega
    97 write @mega .display ".displayNextUnit"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   207 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
   208 label *label80
   209 jump *label92 notEqual @poly .targetUnit
-    * sensor *tmp144 @poly @id
+  210 set *tmp144 21
   211 op add :log:encodedId @blockCount *tmp144
   212 read *tmp6 .bank 511
   213 op sub *tmp146 *tmp6 1
 
   265 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
   266 label *label98
   267 jump *label110 notEqual @mega .targetUnit
-    * sensor *tmp144 @mega @id
+  268 set *tmp144 22
   269 op add :log:encodedId @blockCount *tmp144
   270 read *tmp6 .bank 511
   271 op sub *tmp146 *tmp6 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-6 instructions):
 
   208 label *label80
   209 jump *label92 notEqual @poly .targetUnit
   210 set *tmp144 21
-    * op add :log:encodedId @blockCount *tmp144
+  211 op add :log:encodedId @blockCount 21
   212 read *tmp6 .bank 511
   213 op sub *tmp146 *tmp6 1
   214 write *tmp146 .bank 511
 
   220 label *label82
   221 jump *label84 always
   222 label *label83
-    * op add *tmp154 .flares 1
   223 set .flares *tmp154
   224 write *tmp154 .display ".displayFlares"
   225 jump *label91 always
   226 label *label84
   227 jump *label86 always
   228 label *label85
-    * op add *tmp155 .monos 1
   229 set .monos *tmp155
   230 write *tmp155 .display ".displayMonos"
   231 jump *label91 always
 
   238 label *label88
   239 jump *label90 always
   240 label *label89
-    * op add *tmp157 .megas 1
   241 set .megas *tmp157
   242 write *tmp157 .display ".displayMegas"
   243 label *label90
 
   263 label *label98
   264 jump *label110 notEqual @mega .targetUnit
   265 set *tmp144 22
-    * op add :log:encodedId @blockCount *tmp144
+  266 op add :log:encodedId @blockCount 22
   267 read *tmp6 .bank 511
   268 op sub *tmp146 *tmp6 1
   269 write *tmp146 .bank 511
 
   275 label *label100
   276 jump *label102 always
   277 label *label101
-    * op add *tmp154 .flares 1
   278 set .flares *tmp154
   279 write *tmp154 .display ".displayFlares"
   280 jump *label109 always
   281 label *label102
   282 jump *label104 always
   283 label *label103
-    * op add *tmp155 .monos 1
   284 set .monos *tmp155
   285 write *tmp155 .display ".displayMonos"
   286 jump *label109 always
   287 label *label104
   288 jump *label106 always
   289 label *label105
-    * op add *tmp156 .polys 1
   290 set .polys *tmp156
   291 write *tmp156 .display ".displayPolys"
   292 jump *label109 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-2 instructions):
 
   207 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
   208 label *label80
   209 jump *label92 notEqual @poly .targetUnit
-    * set *tmp144 21
   210 op add :log:encodedId @blockCount 21
   211 read *tmp6 .bank 511
   212 op sub *tmp146 *tmp6 1
 
   261 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
   262 label *label98
   263 jump *label110 notEqual @mega .targetUnit
-    * set *tmp144 22
   264 op add :log:encodedId @blockCount 22
   265 read *tmp6 .bank 511
   266 op sub *tmp146 *tmp6 1

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    38 jump *label7 equal .smelter2 false
    39 control config .unloader1 @coal
    40 label *label7
-    * label *label8
    41 sensor :backgroundProcess:power .battery @totalPower
    42 jump *label9 equal .generator2 false
    43 set *tmp31 .generator
 
   111 label *label14
   112 label *label12
   113 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
-    * label *label24
   114 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
-    * label *label25
-    * label *label23
   115 jump *label26 notEqual .factoryUnit null
   116 control enabled .factory false
   117 control config .factory @mono
 
   125 op land *tmp93 :backgroundProcess:enableFactory *tmp92
   126 control enabled *tmp90 *tmp93
   127 set :factoryUnitFinished:unit .factoryUnit
-    * label *label62
   128 jump *label74 notEqual :factoryUnitFinished:unit .targetUnit
   129 sensor *tmp144 :factoryUnitFinished:unit @id
   130 op add :log:encodedId @blockCount *tmp144
 
   135 op mul *tmp150 *tmp149 1000
   136 op add *tmp151 :log:encodedId *tmp150
   137 write *tmp151 .bank *tmp146
-    * label *label63
-    * label *label64
   138 jump *label66 notEqual :factoryUnitFinished:unit @flare
-    * label *label65
   139 op add *tmp154 .flares 1
   140 set .flares *tmp154
   141 write *tmp154 .display ".displayFlares"
   142 jump *label73 always
   143 label *label66
   144 jump *label68 notEqual :factoryUnitFinished:unit @mono
-    * label *label67
   145 op add *tmp155 .monos 1
   146 set .monos *tmp155
   147 write *tmp155 .display ".displayMonos"
   148 jump *label73 always
   149 label *label68
   150 jump *label70 notEqual :factoryUnitFinished:unit @poly
-    * label *label69
   151 op add *tmp156 .polys 1
   152 set .polys *tmp156
   153 write *tmp156 .display ".displayPolys"
   154 jump *label73 always
   155 label *label70
   156 jump *label72 notEqual :factoryUnitFinished:unit @mega
-    * label *label71
   157 op add *tmp157 .megas 1
   158 set .megas *tmp157
   159 write *tmp157 .display ".displayMegas"
 
   168 label *label75
   169 set .factoryDone 1
   170 label *label76
-    * label *label77
   171 label *label78
-    * label *label79
   172 set :backgroundProcess:lastProgress 0
   173 jump *label29 always
   174 label *label28
 
   192 label *label27
   193 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
   194 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
-    * label *label80
   195 jump *label92 notEqual @poly .targetUnit
   196 op add :log:encodedId @blockCount 21
   197 read *tmp6 .bank 511
 
   201 op mul *tmp150 *tmp149 1000
   202 op add *tmp151 :log:encodedId *tmp150
   203 write *tmp151 .bank *tmp146
-    * label *label81
-    * label *label82
   204 jump *label84 always
-    * label *label83
   205 set .flares *tmp154
   206 write *tmp154 .display ".displayFlares"
   207 jump *label91 always
   208 label *label84
   209 jump *label86 always
-    * label *label85
   210 set .monos *tmp155
   211 write *tmp155 .display ".displayMonos"
   212 jump *label91 always
   213 label *label86
-    * label *label87
   214 op add *tmp156 .polys 1
   215 set .polys *tmp156
   216 write *tmp156 .display ".displayPolys"
   217 jump *label91 always
-    * label *label88
   218 jump *label90 always
-    * label *label89
   219 set .megas *tmp157
   220 write *tmp157 .display ".displayMegas"
   221 label *label90
 
   225 jump *label96 always
   226 label *label92
   227 jump *label94 always
-    * label *label93
   228 set .factoryDone 1
   229 label *label94
-    * label *label95
   230 label *label96
-    * label *label97
   231 set :backgroundProcess:lastRecoProgress 0
   232 jump *label34 always
   233 label *label33
 
   235 label *label34
   236 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
   237 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
-    * label *label98
   238 jump *label110 notEqual @mega .targetUnit
   239 op add :log:encodedId @blockCount 22
   240 read *tmp6 .bank 511
 
   244 op mul *tmp150 *tmp149 1000
   245 op add *tmp151 :log:encodedId *tmp150
   246 write *tmp151 .bank *tmp146
-    * label *label99
-    * label *label100
   247 jump *label102 always
-    * label *label101
   248 set .flares *tmp154
   249 write *tmp154 .display ".displayFlares"
   250 jump *label109 always
   251 label *label102
   252 jump *label104 always
-    * label *label103
   253 set .monos *tmp155
   254 write *tmp155 .display ".displayMonos"
   255 jump *label109 always
   256 label *label104
   257 jump *label106 always
-    * label *label105
   258 set .polys *tmp156
   259 write *tmp156 .display ".displayPolys"
   260 jump *label109 always
   261 label *label106
-    * label *label107
   262 op add *tmp157 .megas 1
   263 set .megas *tmp157
   264 write *tmp157 .display ".displayMegas"
-    * label *label108
   265 label *label109
   266 write true .display ".displayUnitReset"
   267 set .factoryDone 0
   268 jump *label114 always
   269 label *label110
   270 jump *label112 always
-    * label *label111
   271 set .factoryDone 1
   272 label *label112
-    * label *label113
   273 label *label114
-    * label *label115
   274 set :backgroundProcess:lastMultiProgress 0
   275 jump *label37 always
   276 label *label36
 
   282 control config .unloader2 @coal
   283 jump *label5 always
   284 label *label39
-    * label *label40
   285 set *tmp121 .unloader4
   286 op greaterThan *tmp123 :backgroundProcess:coreSilicon .siliconReserve
   287 op greaterThan *tmp124 :backgroundProcess:coreGraphite .graphiteReserve
 
   307 label *label42
   308 label *label5
   309 jump *label4 always
-    * label *label6
-    * label *label3
   310 wait 1e12
   311 jump *label2 always
   312 end

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   192 label *label27
   193 op add *tmp109 :backgroundProcess:reconstructorProgress 0.1
   194 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp109
-    * jump *label92 notEqual @poly .targetUnit
+  195 jump *label94 notEqual @poly .targetUnit
   196 op add :log:encodedId @blockCount 21
   197 read *tmp6 .bank 511
   198 op sub *tmp146 *tmp6 1
 
   201 op mul *tmp150 *tmp149 1000
   202 op add *tmp151 :log:encodedId *tmp150
   203 write *tmp151 .bank *tmp146
-    * jump *label84 always
+  204 jump *label86 always
   205 set .flares *tmp154
   206 write *tmp154 .display ".displayFlares"
   207 jump *label91 always
 
   235 label *label34
   236 op add *tmp112 :backgroundProcess:multiReconstructorProgress 0.1
   237 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp112
-    * jump *label110 notEqual @mega .targetUnit
+  238 jump *label112 notEqual @mega .targetUnit
   239 op add :log:encodedId @blockCount 22
   240 read *tmp6 .bank 511
   241 op sub *tmp146 *tmp6 1
 
   244 op mul *tmp150 *tmp149 1000
   245 op add *tmp151 :log:encodedId *tmp150
   246 write *tmp151 .bank *tmp146
-    * jump *label102 always
+  247 jump *label106 always
   248 set .flares *tmp154
   249 write *tmp154 .display ".displayFlares"
   250 jump *label109 always
   251 label *label102
-    * jump *label104 always
+  252 jump *label106 always
   253 set .monos *tmp155
   254 write *tmp155 .display ".displayMonos"
   255 jump *label109 always
 
   280 op mul *tmp116 5 .generator2
   281 jump *label39 greaterThanEq *tmp115 *tmp116
   282 control config .unloader2 @coal
-    * jump *label5 always
+  283 jump *label4 always
   284 label *label39
   285 set *tmp121 .unloader4
   286 op greaterThan *tmp123 :backgroundProcess:coreSilicon .siliconReserve
 
   296 op land *tmp132 *tmp129 *tmp131
   297 jump *label41 equal *tmp132 false
   298 control config .unloader2 @lead
-    * jump *label42 always
+  299 jump *label4 always
   300 label *label41
   301 jump *label43 lessThanEq :backgroundProcess:coreSilicon .siliconReserve
   302 control config .unloader2 @silicon
-    * jump *label44 always
+  303 jump *label4 always
   304 label *label43
   305 control config .unloader2 @coal
   306 label *label44

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-28 instructions):
 
   202 op add *tmp151 :log:encodedId *tmp150
   203 write *tmp151 .bank *tmp146
   204 jump *label86 always
-    * set .flares *tmp154
-    * write *tmp154 .display ".displayFlares"
-    * jump *label91 always
-    * label *label84
-    * jump *label86 always
-    * set .monos *tmp155
-    * write *tmp155 .display ".displayMonos"
-    * jump *label91 always
   205 label *label86
   206 op add *tmp156 .polys 1
   207 set .polys *tmp156
   208 write *tmp156 .display ".displayPolys"
   209 jump *label91 always
-    * jump *label90 always
-    * set .megas *tmp157
-    * write *tmp157 .display ".displayMegas"
-    * label *label90
   210 label *label91
   211 write true .display ".displayUnitReset"
   212 set .factoryDone 0
   213 jump *label96 always
-    * label *label92
-    * jump *label94 always
-    * set .factoryDone 1
   214 label *label94
   215 label *label96
   216 set :backgroundProcess:lastRecoProgress 0
 
   230 op add *tmp151 :log:encodedId *tmp150
   231 write *tmp151 .bank *tmp146
   232 jump *label106 always
-    * set .flares *tmp154
-    * write *tmp154 .display ".displayFlares"
-    * jump *label109 always
-    * label *label102
-    * jump *label106 always
-    * set .monos *tmp155
-    * write *tmp155 .display ".displayMonos"
-    * jump *label109 always
-    * label *label104
-    * jump *label106 always
-    * set .polys *tmp156
-    * write *tmp156 .display ".displayPolys"
-    * jump *label109 always
   233 label *label106
   234 op add *tmp157 .megas 1
   235 set .megas *tmp157
 
   238 write true .display ".displayUnitReset"
   239 set .factoryDone 0
   240 jump *label114 always
-    * label *label110
-    * jump *label112 always
-    * set .factoryDone 1
   241 label *label112
   242 label *label114
   243 set :backgroundProcess:lastMultiProgress 0
 
   272 jump *label4 always
   273 label *label43
   274 control config .unloader2 @coal
-    * label *label44
-    * label *label42
-    * label *label5
   275 jump *label4 always
-    * wait 1e12
-    * jump *label2 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1:
 
    10 set .megaTarget 0
    11 set .factoryDone 0
    12 set *signature "0:v1"
-    * label *label2
    13 set :backgroundProcess:lastProgress 0
    14 set :backgroundProcess:lastRecoProgress 0
    15 set :backgroundProcess:lastMultiProgress 0
 
   233 op add *tmp157 .megas 1
   234 set .megas *tmp157
   235 write *tmp157 .display ".displayMegas"
-    * label *label109
   236 write true .display ".displayUnitReset"
   237 set .factoryDone 0
   238 jump *label114 always

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-5 instructions):
 
   200 op mul *tmp150 *tmp149 1000
   201 op add *tmp151 :log:encodedId *tmp150
   202 write *tmp151 .bank *tmp146
-    * jump *label86 always
   203 label *label86
   204 op add *tmp156 .polys 1
   205 set .polys *tmp156
   206 write *tmp156 .display ".displayPolys"
-    * jump *label91 always
   207 label *label91
   208 write true .display ".displayUnitReset"
   209 set .factoryDone 0
-    * jump *label96 always
   210 label *label94
   211 label *label96
   212 set :backgroundProcess:lastRecoProgress 0
 
   225 op mul *tmp150 *tmp149 1000
   226 op add *tmp151 :log:encodedId *tmp150
   227 write *tmp151 .bank *tmp146
-    * jump *label106 always
   228 label *label106
   229 op add *tmp157 .megas 1
   230 set .megas *tmp157
   231 write *tmp157 .display ".displayMegas"
   232 write true .display ".displayUnitReset"
   233 set .factoryDone 0
-    * jump *label114 always
   234 label *label112
   235 label *label114
   236 set :backgroundProcess:lastMultiProgress 0

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
 
   200 op mul *tmp150 *tmp149 1000
   201 op add *tmp151 :log:encodedId *tmp150
   202 write *tmp151 .bank *tmp146
-    * label *label86
   203 op add *tmp156 .polys 1
   204 set .polys *tmp156
   205 write *tmp156 .display ".displayPolys"
-    * label *label91
   206 write true .display ".displayUnitReset"
   207 set .factoryDone 0
   208 label *label94
-    * label *label96
   209 set :backgroundProcess:lastRecoProgress 0
   210 jump *label34 always
   211 label *label33
 
   222 op mul *tmp150 *tmp149 1000
   223 op add *tmp151 :log:encodedId *tmp150
   224 write *tmp151 .bank *tmp146
-    * label *label106
   225 op add *tmp157 .megas 1
   226 set .megas *tmp157
   227 write *tmp157 .display ".displayMegas"
   228 write true .display ".displayUnitReset"
   229 set .factoryDone 0
   230 label *label112
-    * label *label114
   231 set :backgroundProcess:lastMultiProgress 0
   232 jump *label37 always
   233 label *label36

Final code before resolving virtual instructions:

    0:  jump *label116 always 0 0
    1:  draw triangle .bank .battery .core .display .factory .factoryDone
    2:  draw triangle .factoryUnit .flareTarget .flares .generator .generator2 .graphiteReserve
    3:  draw triangle .kiln .kilnTarget .leadReserve .megaTarget .megas .monoTarget
    4:  draw triangle .monos .multiReconstructor .multipress .payloadRouter .polyTarget .polys
    5:  draw triangle .press .pressTarget .reconstructor .siliconReserve .smelter .smelter2
    6:  draw triangle .smelterTarget .targetUnit .timer .unloader1 .unloader2 .unloader4
    7:  draw triangle :backgroundProcess:blockFactory :backgroundProcess:coreGraphite :backgroundProcess:coreSilicon :backgroundProcess:enableFactory :backgroundProcess:factoryProgress :backgroundProcess:lastMultiProgress
    8:  draw triangle :backgroundProcess:lastProgress :backgroundProcess:lastRecoProgress :backgroundProcess:leadLimit :backgroundProcess:multiReconstructorProgress :backgroundProcess:power :backgroundProcess:reconstructorProgress
    9:  draw triangle :factoryUnitFinished:unit :log:encodedId 0 0 0 0
        label *label116
   10:  set .flares 0                                                remote var
   11:  set .monos 0                                                 ...
   12:  set .polys 1                                                 ...
   13:  set .megas 0                                                 ...
   14:  set .pressTarget 20                                          ...
   15:  set .smelterTarget 20                                        ...
   16:  set .kilnTarget 20                                           ...
   17:  set .flareTarget 0                                           ...
   18:  set .monoTarget 0                                            ...
   19:  set .polyTarget 0                                            ...
   20:  set .megaTarget 0                                            ...
   21:  set .factoryDone 0                                           var factoryDone = 0;
   22:  set *signature "0:v1"                                        #set target = 8;
   23:  set :backgroundProcess:lastProgress 0                        var lastProgress = 0, factoryProgress = 0;
   24:  set :backgroundProcess:lastRecoProgress 0                    var lastRecoProgress = 0, reconstructorProgress = 0;
   25:  set :backgroundProcess:lastMultiProgress 0                   var lastMultiProgress = 0, multiReconstructorProgress = 0;
   26:  set :backgroundProcess:enableFactory true                    var enableFactory = true, blockFactory = false;
        label *label4                                                while true do
   27:  sensor :backgroundProcess:coreSilicon .core @silicon         var coreSilicon = core.@silicon;
   28:  sensor :backgroundProcess:coreGraphite .core @graphite       var coreGraphite = core.@graphite;
   29:  set *tmp9 .smelter2                                          smelter2.enabled = smelter.enabled = coreSilicon < smelterTarget;
   30:  set *tmp11 .smelter                                          ...
   31:  op lessThan *tmp13 :backgroundProcess:coreSilicon .smelterTa ...
   32:  control enabled *tmp11 *tmp13 0 0 0                          ...
   33:  control enabled *tmp9 *tmp13 0 0 0                           ...
   34:  set *tmp14 .press                                            press.enabled = !multipress and coreGraphite < pressTarget;
   35:  op equal *tmp16 .multipress false                            ...
   36:  op lessThan *tmp17 :backgroundProcess:coreGraphite .pressTar ...
   37:  op land *tmp18 *tmp16 *tmp17                                 ...
   38:  control enabled *tmp14 *tmp18 0 0 0                          ...
   39:  set *tmp19 .multipress                                       multipress.enabled = coreGraphite < pressTarget;
   40:  op lessThan *tmp21 :backgroundProcess:coreGraphite .pressTar ...
   41:  control enabled *tmp19 *tmp21 0 0 0                          ...
   42:  set *tmp22 .kiln                                             kiln.enabled = core.@metaglass < kilnTarget;
   43:  sensor *tmp24 .core @metaglass                               ...
   44:  op lessThan *tmp25 *tmp24 .kilnTarget                        ...
   45:  control enabled *tmp22 *tmp25 0 0 0                          ...
   46:  jump *label7 equal .smelter2 false                           if smelter2 then unloader1.config = @coal; end;
   47:  control config .unloader1 @coal 0 0 0                        ...
        label *label7                                                ...
   48:  sensor :backgroundProcess:power .battery @totalPower         var power = battery.@totalPower;
   49:  jump *label9 equal .generator2 false                         if generator2 then
   50:  set *tmp31 .generator                                        generator.enabled = power < 10;
   51:  op lessThan *tmp33 :backgroundProcess:power 10               ...
   52:  control enabled *tmp31 *tmp33 0 0 0                          ...
   53:  set *tmp34 .generator2                                       generator2.enabled = power < 3800;
   54:  op lessThan *tmp36 :backgroundProcess:power 3800             ...
   55:  control enabled *tmp34 *tmp36 0 0 0                          ...
   56:  jump *label10 always 0 0                                     if generator2 then
        label *label9                                                ...
   57:  set *tmp37 .generator                                        generator.enabled = power < 800;
   58:  op lessThan *tmp39 :backgroundProcess:power 800              ...
   59:  control enabled *tmp37 *tmp39 0 0 0                          ...
        label *label10                                               if generator2 then
   60:  sensor :backgroundProcess:factoryProgress .factory @progress factoryProgress = factory.@progress;
   61:  sensor :backgroundProcess:reconstructorProgress .reconstruct reconstructorProgress = reconstructor.@progress;
   62:  sensor :backgroundProcess:multiReconstructorProgress .multiR multiReconstructorProgress = multiReconstructor.@progress;
   63:  jump *label11 greaterThanEq .flares .flareTarget             if flares < flareTarget then
   64:  set .factoryUnit @flare                                      displayNextUnit = targetUnit = factoryUnit = @flare;
   65:  set .targetUnit @flare                                       ...
   66:  write @flare .display ".displayNextUnit"                     ...
   67:  control config .payloadRouter .targetUnit 0 0 0              payloadRouter.config = targetUnit;
   68:  set :backgroundProcess:blockFactory false                    blockFactory = false;
   69:  jump *label12 always 0 0                                     if flares < flareTarget then
        label *label11                                               ...
   70:  jump *label13 greaterThanEq .monos .monoTarget               elsif monos < monoTarget then
   71:  set .factoryUnit @mono                                       displayNextUnit = targetUnit = factoryUnit = @mono;
   72:  set .targetUnit @mono                                        ...
   73:  write @mono .display ".displayNextUnit"                      ...
   74:  control config .payloadRouter .targetUnit 0 0 0              payloadRouter.config = targetUnit;
   75:  set :backgroundProcess:blockFactory false                    blockFactory = false;
   76:  jump *label14 always 0 0                                     elsif monos < monoTarget then
        label *label13                                               ...
   77:  jump *label15 greaterThanEq .polys .polyTarget               elsif polys < polyTarget then
   78:  set .factoryUnit null                                        factoryUnit = factoryDone + polys < polyTarget ? @mono : null;
   79:  op add *tmp55 .factoryDone .polys                            ...
   80:  jump *label18 greaterThanEq *tmp55 .polyTarget               ...
   81:  set .factoryUnit @mono                                       ...
        label *label18                                               ...
   82:  set .targetUnit @poly                                        displayNextUnit = targetUnit = @poly;
   83:  write @poly .display ".displayNextUnit"                      ...
   84:  control enabled .reconstructor true 0 0 0                    reconstructor.enabled = true;
   85:  control config .payloadRouter .targetUnit 0 0 0              payloadRouter.config = targetUnit;
   86:  sensor *tmp63 .reconstructor @payloadCount                   blockFactory = reconstructor.@payloadCount * factoryProgress < reconstructorProgress;
   87:  op mul *tmp64 *tmp63 :backgroundProcess:factoryProgress      ...
   88:  op lessThan :backgroundProcess:blockFactory *tmp64 :backgrou ...
   89:  jump *label16 always 0 0                                     elsif polys < polyTarget then
        label *label15                                               ...
   90:  jump *label19 greaterThanEq .megas .megaTarget               elsif megas < megaTarget then
   91:  set .factoryUnit null                                        factoryUnit = factoryDone + megas < megaTarget ? @mono : null;
   92:  op add *tmp68 .factoryDone .megas                            ...
   93:  jump *label22 greaterThanEq *tmp68 .megaTarget               ...
   94:  set .factoryUnit @mono                                       ...
        label *label22                                               ...
   95:  set .targetUnit @mega                                        displayNextUnit = targetUnit = @mega;
   96:  write @mega .display ".displayNextUnit"                      ...
   97:  set *tmp71 .reconstructor                                    reconstructor.enabled = multiReconstructor or reconstructorProgress < 0.75;
   98:  op lessThan *tmp73 :backgroundProcess:reconstructorProgress  ...
   99:  op or *tmp74 .multiReconstructor *tmp73                      ...
  100:  control enabled *tmp71 *tmp74 0 0 0                          ...
  101:  control config .payloadRouter .targetUnit 0 0 0              payloadRouter.config = targetUnit;
  102:  set :backgroundProcess:blockFactory false                    blockFactory = false;
  103:  jump *label20 always 0 0                                     elsif megas < megaTarget then
        label *label19                                               ...
  104:  set .factoryUnit null                                        displayNextUnit = targetUnit = factoryUnit = null;
  105:  set .targetUnit null                                         ...
  106:  write null .display ".displayNextUnit"                       ...
  107:  set :backgroundProcess:blockFactory false                    blockFactory = false;
        label *label20                                               elsif megas < megaTarget then
        label *label16                                               elsif polys < polyTarget then
        label *label14                                               elsif monos < monoTarget then
        label *label12                                               if flares < flareTarget then
  108:  select :backgroundProcess:enableFactory lessThan :background mlogSafe("select", out value, "lessThan", in a, in b, in newValue, in value);
  109:  select :backgroundProcess:enableFactory lessThan 500 :backgr ...
  110:  jump *label26 notEqual .factoryUnit null                     if factoryUnit == null then
  111:  control enabled .factory false 0 0 0                         factory.enabled = false;
  112:  control config .factory @mono 0 0 0                          factory.config = @mono;
  113:  set :backgroundProcess:lastProgress 0                        lastProgress = 0;
  114:  jump *label27 always 0 0                                     if factoryUnit == null then
        label *label26                                               ...
  115:  op add *tmp87 :backgroundProcess:factoryProgress 0.1         elsif lastProgress > factoryProgress + 0.1 then
  116:  jump *label28 lessThanEq :backgroundProcess:lastProgress *tm ...
  117:  set *tmp90 .factory                                          factory.enabled = enableFactory and not blockFactory;
  118:  op equal *tmp92 :backgroundProcess:blockFactory false        ...
  119:  op land *tmp93 :backgroundProcess:enableFactory *tmp92       ...
  120:  control enabled *tmp90 *tmp93 0 0 0                          ...
  121:  set :factoryUnitFinished:unit .factoryUnit                   factoryUnitFinished(factoryUnit);
  122:  jump *label74 notEqual :factoryUnitFinished:unit .targetUnit if unit == targetUnit then
  123:  sensor *tmp144 :factoryUnitFinished:unit @id                 log(@blockCount + unit.@id);
  124:  op add :log:encodedId @blockCount *tmp144                    ...
  125:  read *tmp6 .bank 511                                         bank[--logPosition] = encodedId + timer.read("time") * 1000;
  126:  op sub *tmp146 *tmp6 1                                       ...
  127:  write *tmp146 .bank 511                                      ...
  128:  read *tmp149 .timer "time"                                   ...
  129:  op mul *tmp150 *tmp149 1000                                  ...
  130:  op add *tmp151 :log:encodedId *tmp150                        ...
  131:  write *tmp151 .bank *tmp146                                  ...
  132:  jump *label66 notEqual :factoryUnitFinished:unit @flare      case unit
  133:  op add *tmp154 .flares 1                                     when @flare then displayFlares = ++flares;
  134:  set .flares *tmp154                                          ...
  135:  write *tmp154 .display ".displayFlares"                      ...
  136:  jump *label73 always 0 0                                     case unit
        label *label66                                               ...
  137:  jump *label68 notEqual :factoryUnitFinished:unit @mono       ...
  138:  op add *tmp155 .monos 1                                      when @mono  then displayMonos = ++monos;
  139:  set .monos *tmp155                                           ...
  140:  write *tmp155 .display ".displayMonos"                       ...
  141:  jump *label73 always 0 0                                     case unit
        label *label68                                               ...
  142:  jump *label70 notEqual :factoryUnitFinished:unit @poly       ...
  143:  op add *tmp156 .polys 1                                      when @poly  then displayPolys = ++polys;
  144:  set .polys *tmp156                                           ...
  145:  write *tmp156 .display ".displayPolys"                       ...
  146:  jump *label73 always 0 0                                     case unit
        label *label70                                               ...
  147:  jump *label72 notEqual :factoryUnitFinished:unit @mega       ...
  148:  op add *tmp157 .megas 1                                      when @mega  then displayMegas = ++megas;
  149:  set .megas *tmp157                                           ...
  150:  write *tmp157 .display ".displayMegas"                       ...
        label *label72                                               case unit
        label *label73                                               ...
  151:  write true .display ".displayUnitReset"                      displayUnitReset = true;
  152:  set .factoryDone 0                                           factoryDone = 0;
  153:  jump *label78 always 0 0                                     if unit == targetUnit then
        label *label74                                               ...
  154:  jump *label75 equal :factoryUnitFinished:unit @flare         case unit
  155:  jump *label76 notEqual :factoryUnitFinished:unit @mono       ...
        label *label75                                               ...
  156:  set .factoryDone 1                                           when @flare, @mono then factoryDone = 1;
        label *label76                                               case unit
        label *label78                                               if unit == targetUnit then
  157:  set :backgroundProcess:lastProgress 0                        lastProgress = 0;
  158:  jump *label29 always 0 0                                     elsif lastProgress > factoryProgress + 0.1 then
        label *label28                                               ...
  159:  sensor *tmp95 .factory @config                               elsif factory.config != factoryUnit then
  160:  jump *label31 equal *tmp95 .factoryUnit                      ...
  161:  set *tmp98 .factory                                          factory.enabled = enableFactory and not blockFactory;
  162:  op equal *tmp100 :backgroundProcess:blockFactory false       ...
  163:  op land *tmp101 :backgroundProcess:enableFactory *tmp100     ...
  164:  control enabled *tmp98 *tmp101 0 0 0                         ...
  165:  control config .factory .factoryUnit 0 0 0                   factory.config = factoryUnit;
  166:  set :backgroundProcess:lastProgress 0                        lastProgress = 0;
  167:  jump *label32 always 0 0                                     elsif factory.config != factoryUnit then
        label *label31                                               ...
  168:  set *tmp105 .factory                                         factory.enabled = enableFactory and not blockFactory;
  169:  op equal *tmp107 :backgroundProcess:blockFactory false       ...
  170:  op land *tmp108 :backgroundProcess:enableFactory *tmp107     ...
  171:  control enabled *tmp105 *tmp108 0 0 0                        ...
  172:  set :backgroundProcess:lastProgress :backgroundProcess:facto lastProgress = factoryProgress;
        label *label32                                               elsif factory.config != factoryUnit then
        label *label29                                               elsif lastProgress > factoryProgress + 0.1 then
        label *label27                                               if factoryUnit == null then
  173:  op add *tmp109 :backgroundProcess:reconstructorProgress 0.1  if lastRecoProgress > reconstructorProgress + 0.1 then
  174:  jump *label33 lessThanEq :backgroundProcess:lastRecoProgress ...
  175:  jump *label94 notEqual @poly .targetUnit                     if unit == targetUnit then
  176:  op add :log:encodedId @blockCount 21                         log(@blockCount + unit.@id);
  177:  read *tmp6 .bank 511                                         bank[--logPosition] = encodedId + timer.read("time") * 1000;
  178:  op sub *tmp146 *tmp6 1                                       ...
  179:  write *tmp146 .bank 511                                      ...
  180:  read *tmp149 .timer "time"                                   ...
  181:  op mul *tmp150 *tmp149 1000                                  ...
  182:  op add *tmp151 :log:encodedId *tmp150                        ...
  183:  write *tmp151 .bank *tmp146                                  ...
  184:  op add *tmp156 .polys 1                                      when @poly  then displayPolys = ++polys;
  185:  set .polys *tmp156                                           ...
  186:  write *tmp156 .display ".displayPolys"                       ...
  187:  write true .display ".displayUnitReset"                      displayUnitReset = true;
  188:  set .factoryDone 0                                           factoryDone = 0;
        label *label94                                               case unit
  189:  set :backgroundProcess:lastRecoProgress 0                    lastRecoProgress = 0;
  190:  jump *label34 always 0 0                                     if lastRecoProgress > reconstructorProgress + 0.1 then
        label *label33                                               ...
  191:  set :backgroundProcess:lastRecoProgress :backgroundProcess:r lastRecoProgress = reconstructorProgress;
        label *label34                                               if lastRecoProgress > reconstructorProgress + 0.1 then
  192:  op add *tmp112 :backgroundProcess:multiReconstructorProgress if lastMultiProgress > multiReconstructorProgress + 0.1 then
  193:  jump *label36 lessThanEq :backgroundProcess:lastMultiProgres ...
  194:  jump *label112 notEqual @mega .targetUnit                    if unit == targetUnit then
  195:  op add :log:encodedId @blockCount 22                         log(@blockCount + unit.@id);
  196:  read *tmp6 .bank 511                                         bank[--logPosition] = encodedId + timer.read("time") * 1000;
  197:  op sub *tmp146 *tmp6 1                                       ...
  198:  write *tmp146 .bank 511                                      ...
  199:  read *tmp149 .timer "time"                                   ...
  200:  op mul *tmp150 *tmp149 1000                                  ...
  201:  op add *tmp151 :log:encodedId *tmp150                        ...
  202:  write *tmp151 .bank *tmp146                                  ...
  203:  op add *tmp157 .megas 1                                      when @mega  then displayMegas = ++megas;
  204:  set .megas *tmp157                                           ...
  205:  write *tmp157 .display ".displayMegas"                       ...
  206:  write true .display ".displayUnitReset"                      displayUnitReset = true;
  207:  set .factoryDone 0                                           factoryDone = 0;
        label *label112                                              case unit
  208:  set :backgroundProcess:lastMultiProgress 0                   lastMultiProgress = 0;
  209:  jump *label37 always 0 0                                     if lastMultiProgress > multiReconstructorProgress + 0.1 then
        label *label36                                               ...
  210:  set :backgroundProcess:lastMultiProgress :backgroundProcess: lastMultiProgress = multiReconstructorProgress;
        label *label37                                               if lastMultiProgress > multiReconstructorProgress + 0.1 then
  211:  sensor *tmp115 .generator2 @coal                             if generator2.@coal < 5 * generator2 then
  212:  op mul *tmp116 5 .generator2                                 ...
  213:  jump *label39 greaterThanEq *tmp115 *tmp116                  ...
  214:  control config .unloader2 @coal 0 0 0                        unloader2.config = @coal;
  215:  jump *label4 always 0 0                                      continue;
        label *label39                                               if generator2.@coal < 5 * generator2 then
  216:  set *tmp121 .unloader4                                       unloader4.enabled = coreSilicon > siliconReserve and coreGraphite > graphiteReserve;
  217:  op greaterThan *tmp123 :backgroundProcess:coreSilicon .silic ...
  218:  op greaterThan *tmp124 :backgroundProcess:coreGraphite .grap ...
  219:  op land *tmp125 *tmp123 *tmp124                              ...
  220:  control enabled *tmp121 *tmp125 0 0 0                        ...
  221:  op equal *tmp126 .factoryUnit @mono                          var leadLimit = (factoryUnit == @mono) * 30;
  222:  op mul :backgroundProcess:leadLimit *tmp126 30               ...
  223:  sensor *tmp128 .factory @lead                                if factory.@lead < leadLimit and core.@lead > leadReserve then
  224:  op lessThan *tmp129 *tmp128 :backgroundProcess:leadLimit     ...
  225:  sensor *tmp130 .core @lead                                   ...
  226:  op greaterThan *tmp131 *tmp130 .leadReserve                  ...
  227:  op land *tmp132 *tmp129 *tmp131                              ...
  228:  jump *label41 equal *tmp132 false                            ...
  229:  control config .unloader2 @lead 0 0 0                        unloader2.config = @lead;
  230:  jump *label4 always 0 0                                      if factory.@lead < leadLimit and core.@lead > leadReserve then
        label *label41                                               ...
  231:  jump *label43 lessThanEq :backgroundProcess:coreSilicon .sil elsif coreSilicon > siliconReserve then
  232:  control config .unloader2 @silicon 0 0 0                     unloader2.config = @silicon;
  233:  jump *label4 always 0 0                                      elsif coreSilicon > siliconReserve then
        label *label43                                               ...
  234:  control config .unloader2 @coal 0 0 0                        unloader2.config = @coal;
  235:  jump *label4 always 0 0                                      while true do


Performance: parsed in 239 ms, compiled in 199 ms, optimized in 484 ms, run in 14 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (19 steps):
The program didn't generate any output.
Execution exception at instruction 27: sensor :backgroundProcess:coreSilicon .core @silicon:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
