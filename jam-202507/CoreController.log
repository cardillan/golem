   332 instructions before optimizations.
    30 instructions eliminated by Temp Variables Elimination (2 passes, 8 iterations).
     2 instructions eliminated by Case Expression Optimization.
    38 instructions eliminated by Dead Code Elimination (7 iterations).
     5 instructions eliminated by Jump Normalization (2 passes, 5 iterations).
    14 instructions eliminated by Jump Optimization (5 iterations).
     8 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     2 instructions modified by Expression Optimization (3 iterations).
     9 instructions eliminated by If Expression Optimization (4 iterations).
    27 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
    62 instructions added by Function Inlining (4 iterations).
     3 function calls inlined by Function Inlining.
     5 instructions eliminated by Jump Straightening (5 iterations).
     6 instructions updated by Jump Threading.
    28 instructions eliminated by Unreachable Code Elimination (2 iterations).
   228 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 783):
  * Inline function 'factoryUnitFinished' defined at CoreController.mnd:55:1 size   +67, benefit      109.4, efficiency      1.632 (+60 instructions)
    Inline function call at CoreController.mnd:143:13            size   +34, benefit       21.9, efficiency      0.643
    Inline function call at CoreController.mnd:155:13            size   +34, benefit       43.8, efficiency      1.287
    Inline function call at CoreController.mnd:162:13            size   +34, benefit       43.8, efficiency      1.287

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-2 instructions):
 
   330 write *tmp183 .bank *tmp179
   331 label *label51
   332 label *label50
-    * set *tmp185 :factoryUnitFinished:unit
-    * jump *label54 equal *tmp185 @flare
+  333 jump *label54 equal :factoryUnitFinished:unit @flare
   334 jump *label53 always
   335 label *label54
   336 op add *tmp186 .flares 1
 
   339 set *tmp184 *tmp186
   340 jump *label52 always
   341 label *label53
-    * jump *label56 equal *tmp185 @mono
+  342 jump *label56 equal :factoryUnitFinished:unit @mono
   343 jump *label55 always
   344 label *label56
   345 op add *tmp187 .monos 1
 
   348 set *tmp184 *tmp187
   349 jump *label52 always
   350 label *label55
-    * jump *label58 equal *tmp185 @poly
+  351 jump *label58 equal :factoryUnitFinished:unit @poly
   352 jump *label57 always
   353 label *label58
   354 op add *tmp188 .polys 1
 
   357 set *tmp184 *tmp188
   358 jump *label52 always
   359 label *label57
-    * jump *label60 equal *tmp185 @mega
+  360 jump *label60 equal :factoryUnitFinished:unit @mega
   361 jump *label59 always
   362 label *label60
   363 op add *tmp189 .megas 1
 
   373 set *tmp175 .factoryDone
   374 jump *label49 always
   375 label *label48
-    * set *tmp191 :factoryUnitFinished:unit
-    * jump *label63 equal *tmp191 @flare
-    * jump *label63 equal *tmp191 @mono
+  376 jump *label63 equal :factoryUnitFinished:unit @flare
+  377 jump *label63 equal :factoryUnitFinished:unit @mono
   378 jump *label62 always
   379 label *label63
   380 set .factoryDone 1

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-23 instructions):
 
    52 set *tmp57 AAOJ\-steam-generator18
    53 op lessThan *tmp59 :backgroundProcess:power 3800
    54 control enabled *tmp57 *tmp59
-    * set *tmp53 *tmp59
    55 jump *label10 always
    56 label *label9
    57 set *tmp60 AJRJM-combustion-generator3
    58 op lessThan *tmp62 :backgroundProcess:power 800
    59 control enabled *tmp60 *tmp62
-    * set *tmp53 *tmp62
    60 label *label10
    61 sensor *tmp63 A¾BHMV-air-factory12 @progress
    62 set :backgroundProcess:factoryProgress *tmp63
 
    73 set *tmp70 .targetUnit
    74 control config *tmp68 *tmp70
    75 set :backgroundProcess:blockFactory false
-    * set *tmp67 :backgroundProcess:blockFactory
    76 jump *label12 always
    77 label *label11
    78 op lessThan *tmp71 .monos .monoTarget
 
   146 label *label16
   147 set *tmp72 *tmp77
   148 label *label14
-    * set *tmp67 *tmp72
   149 label *label12
   150 set :fuzzyUpdate:value :backgroundProcess:power
   151 set :fuzzyUpdate:limitLow 200
 
   154 set :updateIfSmaller:b :fuzzyUpdate:limitLow
   155 set :updateIfSmaller:newValue false
   156 select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
-    * set *tmp102 null
   157 label *label24
   158 set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
   159 set :updateIfSmaller.1:b :fuzzyUpdate:value
 
   161 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   162 set *tmp103 null
   163 label *label25
-    * set *tmp101 *tmp103
   164 label *label23
   165 op equal *tmp104 .factoryUnit null
   166 jump *label26 equal *tmp104 false
 
   169 set *tmp108 A¾BHMV-air-factory12
   170 control config *tmp108 @mono
   171 set :backgroundProcess:lastProgress 0
-    * set *tmp105 :backgroundProcess:lastProgress
   172 jump *label27 always
   173 label *label26
   174 op add *tmp110 :backgroundProcess:factoryProgress 0.1
 
   210 label *label32
   211 set *tmp112 *tmp120
   212 label *label29
-    * set *tmp105 *tmp112
   213 label *label27
   214 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
   215 op greaterThan *tmp133 :backgroundProcess:lastRecoProgress *tmp132
 
   219 call *label2 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
   220 label *label35
   221 set :backgroundProcess:lastRecoProgress 0
-    * set *tmp134 :backgroundProcess:lastRecoProgress
   222 jump *label34 always
   223 label *label33
   224 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
-    * set *tmp134 :backgroundProcess:lastRecoProgress
   225 label *label34
   226 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
   227 op greaterThan *tmp136 :backgroundProcess:lastMultiProgress *tmp135
 
   231 call *label2 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
   232 label *label38
   233 set :backgroundProcess:lastMultiProgress 0
-    * set *tmp137 :backgroundProcess:lastMultiProgress
   234 jump *label37 always
   235 label *label36
   236 set :backgroundProcess:lastMultiProgress :backgroundProcess:multiReconstructorProgress
-    * set *tmp137 :backgroundProcess:lastMultiProgress
   237 label *label37
   238 sensor *tmp138 AAOJ\-steam-generator18 @coal
   239 op mul *tmp139 5 AAOJ\-steam-generator18
 
   242 set *tmp142 A©FHJU-unloader11
   243 control config *tmp142 @coal
   244 jump *label7 always
-    * set *tmp141 null
   245 jump *label40 always
   246 label *label39
-    * set *tmp141 null
   247 label *label40
   248 set *tmp144 A©HFJ_-unloader21
   249 op greaterThan *tmp146 :backgroundProcess:coreSilicon .siliconReserve
 
   261 jump *label41 equal *tmp155 false
   262 set *tmp157 A©FHJU-unloader11
   263 control config *tmp157 @lead
-    * set *tmp156 @lead
   264 jump *label42 always
   265 label *label41
   266 op greaterThan *tmp159 :backgroundProcess:coreSilicon .siliconReserve
 
   274 control config *tmp163 @coal
   275 set *tmp160 @coal
   276 label *label44
-    * set *tmp156 *tmp160
   277 label *label42
   278 set *tmp165 A©JFJd-unloader26
   279 sensor *tmp167 AÁPBJe-multiplicative-reconstructor27 @silicon
 
   320 op add *tmp186 .flares 1
   321 set .flares *tmp186
   322 write *tmp186 .display ".flares"
-    * set *tmp184 *tmp186
   323 jump *label52 always
   324 label *label53
   325 jump *label56 equal :factoryUnitFinished:unit @mono
 
   328 op add *tmp187 .monos 1
   329 set .monos *tmp187
   330 write *tmp187 .display ".monos"
-    * set *tmp184 *tmp187
   331 jump *label52 always
   332 label *label55
   333 jump *label58 equal :factoryUnitFinished:unit @poly
 
   336 op add *tmp188 .polys 1
   337 set .polys *tmp188
   338 write *tmp188 .display ".polys"
-    * set *tmp184 *tmp188
   339 jump *label52 always
   340 label *label57
   341 jump *label60 equal :factoryUnitFinished:unit @mega
 
   344 op add *tmp189 .megas 1
   345 set .megas *tmp189
   346 write *tmp189 .display ".megas"
-    * set *tmp184 *tmp189
   347 jump *label52 always
   348 label *label59
-    * set *tmp184 null
   349 label *label52
   350 write true .display ".unitReset"
   351 set .factoryDone 0
-    * set *tmp175 .factoryDone
   352 jump *label49 always
   353 label *label48
   354 jump *label63 equal :factoryUnitFinished:unit @flare
 
   361 label *label62
   362 set *tmp190 null
   363 label *label61
-    * set *tmp175 *tmp190
   364 label *label49
   365 label *label47
   366 return :factoryUnitFinished*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-9 instructions):
 
    84 set *tmp75 .targetUnit
    85 control config *tmp73 *tmp75
    86 set :backgroundProcess:blockFactory false
-    * set *tmp72 :backgroundProcess:blockFactory
    87 jump *label14 always
    88 label *label13
    89 op lessThan *tmp76 .polys .polyTarget
 
   143 label *label20
   144 set *tmp77 *tmp90
   145 label *label16
-    * set *tmp72 *tmp77
   146 label *label14
   147 label *label12
   148 set :fuzzyUpdate:value :backgroundProcess:power
 
   157 set :updateIfSmaller.1:b :fuzzyUpdate:value
   158 set :updateIfSmaller.1:newValue true
   159 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
-    * set *tmp103 null
   160 label *label25
   161 label *label23
   162 op equal *tmp104 .factoryUnit null
 
   180 call *label2 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
   181 label *label30
   182 set :backgroundProcess:lastProgress 0
-    * set *tmp112 :backgroundProcess:lastProgress
   183 jump *label29 always
   184 label *label28
   185 set *tmp117 A¾BHMV-air-factory12
 
   204 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
   205 set *tmp120 :backgroundProcess:lastProgress
   206 label *label32
-    * set *tmp112 *tmp120
   207 label *label29
   208 label *label27
   209 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
 
   262 jump *label43 equal *tmp159 false
   263 set *tmp161 A©FHJU-unloader11
   264 control config *tmp161 @silicon
-    * set *tmp160 @silicon
   265 jump *label44 always
   266 label *label43
   267 set *tmp163 A©FHJU-unloader11
   268 control config *tmp163 @coal
-    * set *tmp160 @coal
   269 label *label44
   270 label *label42
   271 set *tmp165 A©JFJd-unloader26
 
   349 jump *label62 always
   350 label *label63
   351 set .factoryDone 1
-    * set *tmp190 .factoryDone
   352 jump *label61 always
   353 label *label62
-    * set *tmp190 null
   354 label *label61
   355 label *label49
   356 label *label47

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-4 instructions):
 
   108 op mul *tmp87 *tmp86 :backgroundProcess:factoryProgress
   109 op greaterThan *tmp88 *tmp87 :backgroundProcess:reconstructorProgress
   110 set :backgroundProcess:blockFactory *tmp88
-    * set *tmp77 :backgroundProcess:blockFactory
   111 jump *label16 always
   112 label *label15
   113 op lessThan *tmp89 .megas .megaTarget
 
   140 set :backgroundProcess:blockFactory false
   141 set *tmp90 :backgroundProcess:blockFactory
   142 label *label20
-    * set *tmp77 *tmp90
   143 label *label16
   144 label *label14
   145 label *label12
 
   192 set *tmp127 .factoryUnit
   193 control config *tmp125 *tmp127
   194 set :backgroundProcess:lastProgress 0
-    * set *tmp120 :backgroundProcess:lastProgress
   195 jump *label32 always
   196 label *label31
   197 set *tmp128 A¾BHMV-air-factory12
 
   199 op land *tmp131 :backgroundProcess:enableFactory *tmp130
   200 control enabled *tmp128 *tmp131
   201 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
-    * set *tmp120 :backgroundProcess:lastProgress
   202 label *label32
   203 label *label29
   204 label *label27

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   131 set *tmp100 .targetUnit
   132 control config *tmp98 *tmp100
   133 set :backgroundProcess:blockFactory false
-    * set *tmp90 :backgroundProcess:blockFactory
   134 jump *label20 always
   135 label *label19
   136 set .factoryUnit null
   137 set .targetUnit null
   138 write null .display ".nextUnit"
   139 set :backgroundProcess:blockFactory false
-    * set *tmp90 :backgroundProcess:blockFactory
   140 label *label20
   141 label *label16
   142 label *label14

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-25 instructions):
 
    22 label *label6
    23 jump *label8 equal true false
    24 set :backgroundProcess:ticks @tick
-    * sensor *tmp33 .core @silicon
-    * set :backgroundProcess:coreSilicon *tmp33
-    * sensor *tmp34 .core @graphite
-    * set :backgroundProcess:coreGraphite *tmp34
+   25 sensor :backgroundProcess:coreSilicon .core @silicon
+   26 sensor :backgroundProcess:coreGraphite .core @graphite
    27 set *tmp35 ALSIJa-silicon-smelter23
    28 set *tmp37 ALMQJN-silicon-smelter4
    29 op lessThan *tmp39 :backgroundProcess:coreSilicon .smelterTarget
 
    41 sensor *tmp50 .core @metaglass
    42 op lessThan *tmp51 *tmp50 .kilnTarget
    43 control enabled *tmp48 *tmp51
-    * sensor *tmp52 AJTJK-battery1 @totalPower
-    * set :backgroundProcess:power *tmp52
+   44 sensor :backgroundProcess:power AJTJK-battery1 @totalPower
    45 jump *label9 equal AAOJ\-steam-generator18 false
    46 set *tmp54 AJRJM-combustion-generator3
    47 op lessThan *tmp56 :backgroundProcess:power 10
 
    55 op lessThan *tmp62 :backgroundProcess:power 800
    56 control enabled *tmp60 *tmp62
    57 label *label10
-    * sensor *tmp63 A¾BHMV-air-factory12 @progress
-    * set :backgroundProcess:factoryProgress *tmp63
-    * sensor *tmp64 AÀHBJ`-additive-reconstructor22 @progress
-    * set :backgroundProcess:reconstructorProgress *tmp64
-    * sensor *tmp65 AÁPBJe-multiplicative-reconstructor27 @progress
-    * set :backgroundProcess:multiReconstructorProgress *tmp65
+   58 sensor :backgroundProcess:factoryProgress A¾BHMV-air-factory12 @progress
+   59 sensor :backgroundProcess:reconstructorProgress AÀHBJ`-additive-reconstructor22 @progress
+   60 sensor :backgroundProcess:multiReconstructorProgress AÁPBJe-multiplicative-reconstructor27 @progress
    61 op lessThan *tmp66 .flares .flareTarget
    62 jump *label11 equal *tmp66 false
    63 set .factoryUnit @flare
    64 set .targetUnit @flare
    65 write @flare .display ".nextUnit"
-    * set *tmp68 AÇBBJ^-payload-router20
-    * set *tmp70 .targetUnit
-    * control config *tmp68 *tmp70
+   66 control config AÇBBJ^-payload-router20 .targetUnit
    67 set :backgroundProcess:blockFactory false
    68 jump *label12 always
    69 label *label11
 
    73 set .targetUnit @mono
    74 write @mono .display ".nextUnit"
    75 set *tmp73 AÇBBJ^-payload-router20
-    * set *tmp75 .targetUnit
-    * control config *tmp73 *tmp75
+   76 control config *tmp73 .targetUnit
    77 set :backgroundProcess:blockFactory false
    78 jump *label14 always
    79 label *label13
 
    90 set .factoryUnit *tmp80
    91 set .targetUnit @poly
    92 write @poly .display ".nextUnit"
-    * set *tmp81 AÀHBJ`-additive-reconstructor22
-    * control enabled *tmp81 true
+   93 control enabled AÀHBJ`-additive-reconstructor22 true
    94 set *tmp83 AÇBBJ^-payload-router20
-    * set *tmp85 .targetUnit
-    * control config *tmp83 *tmp85
+   95 control config *tmp83 .targetUnit
    96 sensor *tmp86 AÀHBJ`-additive-reconstructor22 @payloadCount
    97 op mul *tmp87 *tmp86 :backgroundProcess:factoryProgress
-    * op greaterThan *tmp88 *tmp87 :backgroundProcess:reconstructorProgress
-    * set :backgroundProcess:blockFactory *tmp88
+   98 op greaterThan :backgroundProcess:blockFactory *tmp87 :backgroundProcess:reconstructorProgress
    99 jump *label16 always
   100 label *label15
   101 op lessThan *tmp89 .megas .megaTarget
 
   116 op or *tmp97 AÁPBJe-multiplicative-reconstructor27 *tmp96
   117 control enabled *tmp94 *tmp97
   118 set *tmp98 AÇBBJ^-payload-router20
-    * set *tmp100 .targetUnit
-    * control config *tmp98 *tmp100
+  119 control config *tmp98 .targetUnit
   120 set :backgroundProcess:blockFactory false
   121 jump *label20 always
   122 label *label19
 
   144 label *label23
   145 op equal *tmp104 .factoryUnit null
   146 jump *label26 equal *tmp104 false
-    * set *tmp106 A¾BHMV-air-factory12
-    * control enabled *tmp106 false
-    * set *tmp108 A¾BHMV-air-factory12
-    * control config *tmp108 @mono
+  147 control enabled A¾BHMV-air-factory12 false
+  148 control config A¾BHMV-air-factory12 @mono
   149 set :backgroundProcess:lastProgress 0
   150 jump *label27 always
   151 label *label26
 
   163 set :backgroundProcess:lastProgress 0
   164 jump *label29 always
   165 label *label28
-    * set *tmp117 A¾BHMV-air-factory12
-    * sensor *tmp118 *tmp117 @config
+  166 sensor *tmp118 A¾BHMV-air-factory12 @config
   167 op notEqual *tmp119 *tmp118 .factoryUnit
   168 jump *label31 equal *tmp119 false
   169 set *tmp121 A¾BHMV-air-factory12
   170 op equal *tmp123 :backgroundProcess:blockFactory false
   171 op land *tmp124 :backgroundProcess:enableFactory *tmp123
   172 control enabled *tmp121 *tmp124
-    * set *tmp125 A¾BHMV-air-factory12
-    * set *tmp127 .factoryUnit
-    * control config *tmp125 *tmp127
+  173 control config A¾BHMV-air-factory12 .factoryUnit
   174 set :backgroundProcess:lastProgress 0
   175 jump *label32 always
   176 label *label31
 
   210 op mul *tmp139 5 AAOJ\-steam-generator18
   211 op lessThan *tmp140 *tmp138 *tmp139
   212 jump *label39 equal *tmp140 false
-    * set *tmp142 A©FHJU-unloader11
-    * control config *tmp142 @coal
+  213 control config A©FHJU-unloader11 @coal
   214 jump *label7 always
   215 jump *label40 always
   216 label *label39
 
   221 op land *tmp148 *tmp146 *tmp147
   222 control enabled *tmp144 *tmp148
   223 op equal *tmp149 .factoryUnit @mono
-    * op mul *tmp150 *tmp149 30
-    * set :backgroundProcess:leadLimit *tmp150
+  224 op mul :backgroundProcess:leadLimit *tmp149 30
   225 sensor *tmp151 A¾BHMV-air-factory12 @lead
   226 op lessThan *tmp152 *tmp151 :backgroundProcess:leadLimit
   227 sensor *tmp153 .core @lead
   228 op greaterThan *tmp154 *tmp153 .leadReserve
   229 op land *tmp155 *tmp152 *tmp154
   230 jump *label41 equal *tmp155 false
-    * set *tmp157 A©FHJU-unloader11
-    * control config *tmp157 @lead
+  231 control config A©FHJU-unloader11 @lead
   232 jump *label42 always
   233 label *label41
   234 op greaterThan *tmp159 :backgroundProcess:coreSilicon .siliconReserve
   235 jump *label43 equal *tmp159 false
-    * set *tmp161 A©FHJU-unloader11
-    * control config *tmp161 @silicon
+  236 control config A©FHJU-unloader11 @silicon
   237 jump *label44 always
   238 label *label43
-    * set *tmp163 A©FHJU-unloader11
-    * control config *tmp163 @coal
+  239 control config A©FHJU-unloader11 @coal
   240 label *label44
   241 label *label42
   242 set *tmp165 A©JFJd-unloader26
 
   252 set *tmp172 @silicon
   253 label *label46
   254 control config *tmp165 *tmp172
-    * op sub *tmp173 @tick :backgroundProcess:ticks
-    * set .loopTicks *tmp173
+  255 op sub .loopTicks @tick :backgroundProcess:ticks
   256 label *label7
   257 jump *label6 always
   258 label *label8
 
   265 jump *label48 equal *tmp174 false
   266 set :logUnit:unit :factoryUnitFinished:unit
   267 sensor *tmp176 :logUnit:unit @id
-    * op add *tmp177 @blockCount *tmp176
-    * set :log:encodedId *tmp177
+  268 op add :log:encodedId @blockCount *tmp176
   269 read *tmp32 .bank 511
   270 op sub *tmp178 *tmp32 1
   271 write *tmp178 .bank 511

Modifications by Initial phase, Temp Variables Elimination, iteration 2 (-3 instructions):
 
    72 set .factoryUnit @mono
    73 set .targetUnit @mono
    74 write @mono .display ".nextUnit"
-    * set *tmp73 AÇBBJ^-payload-router20
-    * control config *tmp73 .targetUnit
+   75 control config AÇBBJ^-payload-router20 .targetUnit
    76 set :backgroundProcess:blockFactory false
    77 jump *label14 always
    78 label *label13
 
    90 set .targetUnit @poly
    91 write @poly .display ".nextUnit"
    92 control enabled AÀHBJ`-additive-reconstructor22 true
-    * set *tmp83 AÇBBJ^-payload-router20
-    * control config *tmp83 .targetUnit
+   93 control config AÇBBJ^-payload-router20 .targetUnit
    94 sensor *tmp86 AÀHBJ`-additive-reconstructor22 @payloadCount
    95 op mul *tmp87 *tmp86 :backgroundProcess:factoryProgress
    96 op greaterThan :backgroundProcess:blockFactory *tmp87 :backgroundProcess:reconstructorProgress
 
   113 op lessThan *tmp96 :backgroundProcess:reconstructorProgress 0.75
   114 op or *tmp97 AÁPBJe-multiplicative-reconstructor27 *tmp96
   115 control enabled *tmp94 *tmp97
-    * set *tmp98 AÇBBJ^-payload-router20
-    * control config *tmp98 .targetUnit
+  116 control config AÇBBJ^-payload-router20 .targetUnit
   117 set :backgroundProcess:blockFactory false
   118 jump *label20 always
   119 label *label19

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
    20 set :backgroundProcess:enableFactory true
    21 set :backgroundProcess:blockFactory false
    22 label *label6
-    * jump *label8 equal true false
    23 set :backgroundProcess:ticks @tick
    24 sensor :backgroundProcess:coreSilicon .core @silicon
    25 sensor :backgroundProcess:coreGraphite .core @graphite

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-5 instructions):
 
   272 write *tmp183 .bank *tmp179
   273 label *label51
   274 label *label50
-    * jump *label54 equal :factoryUnitFinished:unit @flare
-    * jump *label53 always
+  275 jump *label53 notEqual :factoryUnitFinished:unit @flare
   276 label *label54
   277 op add *tmp186 .flares 1
   278 set .flares *tmp186
   279 write *tmp186 .display ".flares"
   280 jump *label52 always
   281 label *label53
-    * jump *label56 equal :factoryUnitFinished:unit @mono
-    * jump *label55 always
+  282 jump *label55 notEqual :factoryUnitFinished:unit @mono
   283 label *label56
   284 op add *tmp187 .monos 1
   285 set .monos *tmp187
   286 write *tmp187 .display ".monos"
   287 jump *label52 always
   288 label *label55
-    * jump *label58 equal :factoryUnitFinished:unit @poly
-    * jump *label57 always
+  289 jump *label57 notEqual :factoryUnitFinished:unit @poly
   290 label *label58
   291 op add *tmp188 .polys 1
   292 set .polys *tmp188
   293 write *tmp188 .display ".polys"
   294 jump *label52 always
   295 label *label57
-    * jump *label60 equal :factoryUnitFinished:unit @mega
-    * jump *label59 always
+  296 jump *label59 notEqual :factoryUnitFinished:unit @mega
   297 label *label60
   298 op add *tmp189 .megas 1
   299 set .megas *tmp189
 
   306 jump *label49 always
   307 label *label48
   308 jump *label63 equal :factoryUnitFinished:unit @flare
-    * jump *label63 equal :factoryUnitFinished:unit @mono
-    * jump *label62 always
+  309 jump *label62 notEqual :factoryUnitFinished:unit @mono
   310 label *label63
   311 set .factoryDone 1
   312 jump *label61 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-14 instructions):
 
    57 sensor :backgroundProcess:factoryProgress A¾BHMV-air-factory12 @progress
    58 sensor :backgroundProcess:reconstructorProgress AÀHBJ`-additive-reconstructor22 @progress
    59 sensor :backgroundProcess:multiReconstructorProgress AÁPBJe-multiplicative-reconstructor27 @progress
-    * op lessThan *tmp66 .flares .flareTarget
-    * jump *label11 equal *tmp66 false
+   60 jump *label11 greaterThanEq .flares .flareTarget
    61 set .factoryUnit @flare
    62 set .targetUnit @flare
    63 write @flare .display ".nextUnit"
 
    65 set :backgroundProcess:blockFactory false
    66 jump *label12 always
    67 label *label11
-    * op lessThan *tmp71 .monos .monoTarget
-    * jump *label13 equal *tmp71 false
+   68 jump *label13 greaterThanEq .monos .monoTarget
    69 set .factoryUnit @mono
    70 set .targetUnit @mono
    71 write @mono .display ".nextUnit"
 
    73 set :backgroundProcess:blockFactory false
    74 jump *label14 always
    75 label *label13
-    * op lessThan *tmp76 .polys .polyTarget
-    * jump *label15 equal *tmp76 false
+   76 jump *label15 greaterThanEq .polys .polyTarget
    77 op add *tmp78 .factoryDone .polys
-    * op lessThan *tmp79 *tmp78 .polyTarget
-    * jump *label17 equal *tmp79 false
+   78 jump *label17 greaterThanEq *tmp78 .polyTarget
    79 set *tmp80 @mono
    80 jump *label18 always
    81 label *label17
 
    91 op greaterThan :backgroundProcess:blockFactory *tmp87 :backgroundProcess:reconstructorProgress
    92 jump *label16 always
    93 label *label15
-    * op lessThan *tmp89 .megas .megaTarget
-    * jump *label19 equal *tmp89 false
+   94 jump *label19 greaterThanEq .megas .megaTarget
    95 op add *tmp91 .factoryDone .megas
-    * op lessThan *tmp92 *tmp91 .megaTarget
-    * jump *label21 equal *tmp92 false
+   96 jump *label21 greaterThanEq *tmp91 .megaTarget
    97 set *tmp93 @mono
    98 jump *label22 always
    99 label *label21
 
   132 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   133 label *label25
   134 label *label23
-    * op equal *tmp104 .factoryUnit null
-    * jump *label26 equal *tmp104 false
+  135 jump *label26 notEqual .factoryUnit null
   136 control enabled A¾BHMV-air-factory12 false
   137 control config A¾BHMV-air-factory12 @mono
   138 set :backgroundProcess:lastProgress 0
   139 jump *label27 always
   140 label *label26
   141 op add *tmp110 :backgroundProcess:factoryProgress 0.1
-    * op greaterThan *tmp111 :backgroundProcess:lastProgress *tmp110
-    * jump *label28 equal *tmp111 false
+  142 jump *label28 lessThanEq :backgroundProcess:lastProgress *tmp110
   143 set *tmp113 A¾BHMV-air-factory12
   144 op equal *tmp115 :backgroundProcess:blockFactory false
   145 op land *tmp116 :backgroundProcess:enableFactory *tmp115
 
   152 jump *label29 always
   153 label *label28
   154 sensor *tmp118 A¾BHMV-air-factory12 @config
-    * op notEqual *tmp119 *tmp118 .factoryUnit
-    * jump *label31 equal *tmp119 false
+  155 jump *label31 equal *tmp118 .factoryUnit
   156 set *tmp121 A¾BHMV-air-factory12
   157 op equal *tmp123 :backgroundProcess:blockFactory false
   158 op land *tmp124 :backgroundProcess:enableFactory *tmp123
 
   170 label *label29
   171 label *label27
   172 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
-    * op greaterThan *tmp133 :backgroundProcess:lastRecoProgress *tmp132
-    * jump *label33 equal *tmp133 false
+  173 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
   174 set :factoryUnitFinished:unit @poly
   175 setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
   176 call *label2 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
 
   181 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
   182 label *label34
   183 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
-    * op greaterThan *tmp136 :backgroundProcess:lastMultiProgress *tmp135
-    * jump *label36 equal *tmp136 false
+  184 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
   185 set :factoryUnitFinished:unit @mega
   186 setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
   187 call *label2 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
 
   193 label *label37
   194 sensor *tmp138 AAOJ\-steam-generator18 @coal
   195 op mul *tmp139 5 AAOJ\-steam-generator18
-    * op lessThan *tmp140 *tmp138 *tmp139
-    * jump *label39 equal *tmp140 false
+  196 jump *label39 greaterThanEq *tmp138 *tmp139
   197 control config A©FHJU-unloader11 @coal
   198 jump *label7 always
   199 jump *label40 always
 
   215 control config A©FHJU-unloader11 @lead
   216 jump *label42 always
   217 label *label41
-    * op greaterThan *tmp159 :backgroundProcess:coreSilicon .siliconReserve
-    * jump *label43 equal *tmp159 false
+  218 jump *label43 lessThanEq :backgroundProcess:coreSilicon .siliconReserve
   219 control config A©FHJU-unloader11 @silicon
   220 jump *label44 always
   221 label *label43
 
   244 jump *label4 always
   245 end
   246 label *label2
-    * op equal *tmp174 :factoryUnitFinished:unit .targetUnit
-    * jump *label48 equal *tmp174 false
+  247 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
   248 set :logUnit:unit :factoryUnitFinished:unit
   249 sensor *tmp176 :logUnit:unit @id
   250 op add :log:encodedId @blockCount *tmp176

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-3 instructions):
 
   196 jump *label39 greaterThanEq *tmp138 *tmp139
   197 control config A©FHJU-unloader11 @coal
   198 jump *label7 always
-    * jump *label40 always
   199 label *label39
   200 label *label40
   201 set *tmp144 A©HFJ_-unloader21
 
   283 op add *tmp189 .megas 1
   284 set .megas *tmp189
   285 write *tmp189 .display ".megas"
-    * jump *label52 always
   286 label *label59
   287 label *label52
   288 write true .display ".unitReset"
 
   293 jump *label62 notEqual :factoryUnitFinished:unit @mono
   294 label *label63
   295 set .factoryDone 1
-    * jump *label61 always
   296 label *label62
   297 label *label61
   298 label *label49

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-4 instructions):
 
    12 set *signature "0:v1"
    13 label *label4
    14 set :backgroundProcess:lastProgress 0
-    * set :backgroundProcess:factoryProgress 0
    15 set :backgroundProcess:lastRecoProgress 0
-    * set :backgroundProcess:reconstructorProgress 0
    16 set :backgroundProcess:lastMultiProgress 0
-    * set :backgroundProcess:multiReconstructorProgress 0
    17 set :backgroundProcess:enableFactory true
-    * set :backgroundProcess:blockFactory false
    18 label *label6
    19 set :backgroundProcess:ticks @tick
    20 sensor :backgroundProcess:coreSilicon .core @silicon
 
   117 set :fuzzyUpdate:value :backgroundProcess:power
   118 set :fuzzyUpdate:limitLow 200
   119 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :fuzzyUpdate:value
-    * set :updateIfSmaller:b :fuzzyUpdate:limitLow
+  120 set :updateIfSmaller:a :backgroundProcess:power
+  121 set :updateIfSmaller:b 200
   122 set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
+  123 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
   124 label *label24
-    * set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
-    * set :updateIfSmaller.1:b :fuzzyUpdate:value
+  125 set :updateIfSmaller.1:a 500
+  126 set :updateIfSmaller.1:b :backgroundProcess:power
   127 set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
+  128 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
   129 label *label25
   130 label *label23
   131 jump *label26 notEqual .factoryUnit null
 
   241 label *label2
   242 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
   243 set :logUnit:unit :factoryUnitFinished:unit
-    * sensor *tmp176 :logUnit:unit @id
+  244 sensor *tmp176 :factoryUnitFinished:unit @id
   245 op add :log:encodedId @blockCount *tmp176
   246 read *tmp32 .bank 511
   247 op sub *tmp178 *tmp32 1
 
   250 read *tmp181 .timer "time"
   251 op mul *tmp182 *tmp181 1000
   252 op add *tmp183 :log:encodedId *tmp182
-    * write *tmp183 .bank *tmp179
+  253 write *tmp183 .bank *tmp178
   254 label *label51
   255 label *label50
   256 jump *label53 notEqual :factoryUnitFinished:unit @flare

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   117 set :fuzzyUpdate:value :backgroundProcess:power
   118 set :fuzzyUpdate:limitLow 200
   119 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :backgroundProcess:power
-    * set :updateIfSmaller:b 200
-    * set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
+  120 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   121 label *label24
-    * set :updateIfSmaller.1:a 500
-    * set :updateIfSmaller.1:b :backgroundProcess:power
-    * set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
+  122 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
   123 label *label25
   124 label *label23
   125 jump *label26 notEqual .factoryUnit null
 
   234 end
   235 label *label2
   236 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
-    * set :logUnit:unit :factoryUnitFinished:unit
   237 sensor *tmp176 :factoryUnitFinished:unit @id
   238 op add :log:encodedId @blockCount *tmp176
   239 read *tmp32 .bank 511
   240 op sub *tmp178 *tmp32 1
   241 write *tmp178 .bank 511
-    * set *tmp179 *tmp178
   242 read *tmp181 .timer "time"
   243 op mul *tmp182 *tmp181 1000
   244 op add *tmp183 :log:encodedId *tmp182

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
   114 label *label16
   115 label *label14
   116 label *label12
-    * set :fuzzyUpdate:value :backgroundProcess:power
-    * set :fuzzyUpdate:limitLow 200
-    * set :fuzzyUpdate:limitHigh 500
   117 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   118 label *label24
   119 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-9 instructions):
 
    70 jump *label14 always
    71 label *label13
    72 jump *label15 greaterThanEq .polys .polyTarget
-    * op add *tmp78 .factoryDone .polys
-    * jump *label17 greaterThanEq *tmp78 .polyTarget
-    * set *tmp80 @mono
-    * jump *label18 always
-    * label *label17
-    * set *tmp80 null
-    * label *label18
+   73 op add *tmp78 .factoryDone .polys
+   74 select *tmp80 lessThan *tmp78 .polyTarget @mono null
    75 set .factoryUnit *tmp80
    76 set .targetUnit @poly
    77 write @poly .display ".nextUnit"
 
    83 jump *label16 always
    84 label *label15
    85 jump *label19 greaterThanEq .megas .megaTarget
-    * op add *tmp91 .factoryDone .megas
-    * jump *label21 greaterThanEq *tmp91 .megaTarget
-    * set *tmp93 @mono
-    * jump *label22 always
-    * label *label21
-    * set *tmp93 null
-    * label *label22
+   86 op add *tmp91 .factoryDone .megas
+   87 select *tmp93 lessThan *tmp91 .megaTarget @mono null
    88 set .factoryUnit *tmp93
    89 set .targetUnit @mega
    90 write @mega .display ".nextUnit"
 
   199 label *label44
   200 label *label42
   201 set *tmp165 A©JFJd-unloader26
-    * sensor *tmp167 AÁPBJe-multiplicative-reconstructor27 @silicon
-    * op greaterThanEq *tmp168 *tmp167 130
-    * sensor *tmp169 AÁPBJe-multiplicative-reconstructor27 @titanium
-    * op lessThan *tmp170 *tmp169 80
-    * op land *tmp171 *tmp168 *tmp170
-    * jump *label45 equal *tmp171 false
-    * set *tmp172 @titanium
-    * jump *label46 always
-    * label *label45
-    * set *tmp172 @silicon
-    * label *label46
+  202 sensor *tmp167 AÁPBJe-multiplicative-reconstructor27 @silicon
+  203 op greaterThanEq *tmp168 *tmp167 130
+  204 sensor *tmp169 AÁPBJe-multiplicative-reconstructor27 @titanium
+  205 op lessThan *tmp170 *tmp169 80
+  206 op land *tmp171 *tmp168 *tmp170
+  207 select *tmp172 notEqual *tmp171 false @titanium @silicon
   208 control config *tmp165 *tmp172
   209 op sub .loopTicks @tick :backgroundProcess:ticks
   210 label *label7

Modifications by Inline function 'factoryUnitFinished' defined at CoreController.mnd:55:1 (+62 instructions):
 
   122 op land *tmp116 :backgroundProcess:enableFactory *tmp115
   123 control enabled *tmp113 *tmp116
   124 set :factoryUnitFinished:unit .factoryUnit
-    * setaddr :factoryUnitFinished*retaddr *label30 (h:*label30)
-    * call *label2 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
-    * label *label30
+  125 label *label65
+  126 jump *label77 notEqual :factoryUnitFinished:unit .targetUnit
+  127 sensor *tmp176 :factoryUnitFinished:unit @id
+  128 op add :log:encodedId @blockCount *tmp176
+  129 read *tmp32 .bank 511
+  130 op sub *tmp178 *tmp32 1
+  131 write *tmp178 .bank 511
+  132 read *tmp181 .timer "time"
+  133 op mul *tmp182 *tmp181 1000
+  134 op add *tmp183 :log:encodedId *tmp182
+  135 write *tmp183 .bank *tmp178
+  136 label *label66
+  137 label *label67
+  138 jump *label69 notEqual :factoryUnitFinished:unit @flare
+  139 label *label68
+  140 op add *tmp186 .flares 1
+  141 set .flares *tmp186
+  142 write *tmp186 .display ".flares"
+  143 jump *label76 always
+  144 label *label69
+  145 jump *label71 notEqual :factoryUnitFinished:unit @mono
+  146 label *label70
+  147 op add *tmp187 .monos 1
+  148 set .monos *tmp187
+  149 write *tmp187 .display ".monos"
+  150 jump *label76 always
+  151 label *label71
+  152 jump *label73 notEqual :factoryUnitFinished:unit @poly
+  153 label *label72
+  154 op add *tmp188 .polys 1
+  155 set .polys *tmp188
+  156 write *tmp188 .display ".polys"
+  157 jump *label76 always
+  158 label *label73
+  159 jump *label75 notEqual :factoryUnitFinished:unit @mega
+  160 label *label74
+  161 op add *tmp189 .megas 1
+  162 set .megas *tmp189
+  163 write *tmp189 .display ".megas"
+  164 label *label75
+  165 label *label76
+  166 write true .display ".unitReset"
+  167 set .factoryDone 0
+  168 jump *label81 always
+  169 label *label77
+  170 jump *label78 equal :factoryUnitFinished:unit @flare
+  171 jump *label79 notEqual :factoryUnitFinished:unit @mono
+  172 label *label78
+  173 set .factoryDone 1
+  174 label *label79
+  175 label *label80
+  176 label *label81
+  177 label *label82
   178 set :backgroundProcess:lastProgress 0
   179 jump *label29 always
   180 label *label28
 
   199 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
   200 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
   201 set :factoryUnitFinished:unit @poly
-    * setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
-    * call *label2 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
-    * label *label35
+  202 label *label83
+  203 jump *label95 notEqual :factoryUnitFinished:unit .targetUnit
+  204 sensor *tmp176 :factoryUnitFinished:unit @id
+  205 op add :log:encodedId @blockCount *tmp176
+  206 read *tmp32 .bank 511
+  207 op sub *tmp178 *tmp32 1
+  208 write *tmp178 .bank 511
+  209 read *tmp181 .timer "time"
+  210 op mul *tmp182 *tmp181 1000
+  211 op add *tmp183 :log:encodedId *tmp182
+  212 write *tmp183 .bank *tmp178
+  213 label *label84
+  214 label *label85
+  215 jump *label87 notEqual :factoryUnitFinished:unit @flare
+  216 label *label86
+  217 op add *tmp186 .flares 1
+  218 set .flares *tmp186
+  219 write *tmp186 .display ".flares"
+  220 jump *label94 always
+  221 label *label87
+  222 jump *label89 notEqual :factoryUnitFinished:unit @mono
+  223 label *label88
+  224 op add *tmp187 .monos 1
+  225 set .monos *tmp187
+  226 write *tmp187 .display ".monos"
+  227 jump *label94 always
+  228 label *label89
+  229 jump *label91 notEqual :factoryUnitFinished:unit @poly
+  230 label *label90
+  231 op add *tmp188 .polys 1
+  232 set .polys *tmp188
+  233 write *tmp188 .display ".polys"
+  234 jump *label94 always
+  235 label *label91
+  236 jump *label93 notEqual :factoryUnitFinished:unit @mega
+  237 label *label92
+  238 op add *tmp189 .megas 1
+  239 set .megas *tmp189
+  240 write *tmp189 .display ".megas"
+  241 label *label93
+  242 label *label94
+  243 write true .display ".unitReset"
+  244 set .factoryDone 0
+  245 jump *label99 always
+  246 label *label95
+  247 jump *label96 equal :factoryUnitFinished:unit @flare
+  248 jump *label97 notEqual :factoryUnitFinished:unit @mono
+  249 label *label96
+  250 set .factoryDone 1
+  251 label *label97
+  252 label *label98
+  253 label *label99
+  254 label *label100
   255 set :backgroundProcess:lastRecoProgress 0
   256 jump *label34 always
   257 label *label33
 
   260 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
   261 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
   262 set :factoryUnitFinished:unit @mega
-    * setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
-    * call *label2 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
-    * label *label38
+  263 label *label101
+  264 jump *label113 notEqual :factoryUnitFinished:unit .targetUnit
+  265 sensor *tmp176 :factoryUnitFinished:unit @id
+  266 op add :log:encodedId @blockCount *tmp176
+  267 read *tmp32 .bank 511
+  268 op sub *tmp178 *tmp32 1
+  269 write *tmp178 .bank 511
+  270 read *tmp181 .timer "time"
+  271 op mul *tmp182 *tmp181 1000
+  272 op add *tmp183 :log:encodedId *tmp182
+  273 write *tmp183 .bank *tmp178
+  274 label *label102
+  275 label *label103
+  276 jump *label105 notEqual :factoryUnitFinished:unit @flare
+  277 label *label104
+  278 op add *tmp186 .flares 1
+  279 set .flares *tmp186
+  280 write *tmp186 .display ".flares"
+  281 jump *label112 always
+  282 label *label105
+  283 jump *label107 notEqual :factoryUnitFinished:unit @mono
+  284 label *label106
+  285 op add *tmp187 .monos 1
+  286 set .monos *tmp187
+  287 write *tmp187 .display ".monos"
+  288 jump *label112 always
+  289 label *label107
+  290 jump *label109 notEqual :factoryUnitFinished:unit @poly
+  291 label *label108
+  292 op add *tmp188 .polys 1
+  293 set .polys *tmp188
+  294 write *tmp188 .display ".polys"
+  295 jump *label112 always
+  296 label *label109
+  297 jump *label111 notEqual :factoryUnitFinished:unit @mega
+  298 label *label110
+  299 op add *tmp189 .megas 1
+  300 set .megas *tmp189
+  301 write *tmp189 .display ".megas"
+  302 label *label111
+  303 label *label112
+  304 write true .display ".unitReset"
+  305 set .factoryDone 0
+  306 jump *label117 always
+  307 label *label113
+  308 jump *label114 equal :factoryUnitFinished:unit @flare
+  309 jump *label115 notEqual :factoryUnitFinished:unit @mono
+  310 label *label114
+  311 set .factoryDone 1
+  312 label *label115
+  313 label *label116
+  314 label *label117
+  315 label *label118
   316 set :backgroundProcess:lastMultiProgress 0
   317 jump *label37 always
   318 label *label36
 
   364 wait 1e12
   365 jump *label4 always
   366 end
-    * label *label2
-    * jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp176 :factoryUnitFinished:unit @id
-    * op add :log:encodedId @blockCount *tmp176
-    * read *tmp32 .bank 511
-    * op sub *tmp178 *tmp32 1
-    * write *tmp178 .bank 511
-    * read *tmp181 .timer "time"
-    * op mul *tmp182 *tmp181 1000
-    * op add *tmp183 :log:encodedId *tmp182
-    * write *tmp183 .bank *tmp178
-    * label *label51
-    * label *label50
-    * jump *label53 notEqual :factoryUnitFinished:unit @flare
-    * label *label54
-    * op add *tmp186 .flares 1
-    * set .flares *tmp186
-    * write *tmp186 .display ".flares"
-    * jump *label52 always
-    * label *label53
-    * jump *label55 notEqual :factoryUnitFinished:unit @mono
-    * label *label56
-    * op add *tmp187 .monos 1
-    * set .monos *tmp187
-    * write *tmp187 .display ".monos"
-    * jump *label52 always
-    * label *label55
-    * jump *label57 notEqual :factoryUnitFinished:unit @poly
-    * label *label58
-    * op add *tmp188 .polys 1
-    * set .polys *tmp188
-    * write *tmp188 .display ".polys"
-    * jump *label52 always
-    * label *label57
-    * jump *label59 notEqual :factoryUnitFinished:unit @mega
-    * label *label60
-    * op add *tmp189 .megas 1
-    * set .megas *tmp189
-    * write *tmp189 .display ".megas"
-    * label *label59
-    * label *label52
-    * write true .display ".unitReset"
-    * set .factoryDone 0
-    * jump *label49 always
-    * label *label48
-    * jump *label63 equal :factoryUnitFinished:unit @flare
-    * jump *label62 notEqual :factoryUnitFinished:unit @mono
-    * label *label63
-    * set .factoryDone 1
-    * label *label62
-    * label *label61
-    * label *label49
-    * label *label47
-    * return :factoryUnitFinished*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   200 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
   201 set :factoryUnitFinished:unit @poly
   202 label *label83
-    * jump *label95 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp176 :factoryUnitFinished:unit @id
+  203 jump *label95 notEqual @poly .targetUnit
+  204 sensor *tmp176 @poly @id
   205 op add :log:encodedId @blockCount *tmp176
   206 read *tmp32 .bank 511
   207 op sub *tmp178 *tmp32 1
 
   212 write *tmp183 .bank *tmp178
   213 label *label84
   214 label *label85
-    * jump *label87 notEqual :factoryUnitFinished:unit @flare
+  215 jump *label87 notEqual @poly @flare
   216 label *label86
   217 op add *tmp186 .flares 1
   218 set .flares *tmp186
   219 write *tmp186 .display ".flares"
   220 jump *label94 always
   221 label *label87
-    * jump *label89 notEqual :factoryUnitFinished:unit @mono
+  222 jump *label89 notEqual @poly @mono
   223 label *label88
   224 op add *tmp187 .monos 1
   225 set .monos *tmp187
   226 write *tmp187 .display ".monos"
   227 jump *label94 always
   228 label *label89
-    * jump *label91 notEqual :factoryUnitFinished:unit @poly
+  229 jump *label91 notEqual @poly @poly
   230 label *label90
   231 op add *tmp188 .polys 1
   232 set .polys *tmp188
   233 write *tmp188 .display ".polys"
   234 jump *label94 always
   235 label *label91
-    * jump *label93 notEqual :factoryUnitFinished:unit @mega
+  236 jump *label93 notEqual @poly @mega
   237 label *label92
   238 op add *tmp189 .megas 1
   239 set .megas *tmp189
 
   244 set .factoryDone 0
   245 jump *label99 always
   246 label *label95
-    * jump *label96 equal :factoryUnitFinished:unit @flare
-    * jump *label97 notEqual :factoryUnitFinished:unit @mono
+  247 jump *label96 equal @poly @flare
+  248 jump *label97 notEqual @poly @mono
   249 label *label96
   250 set .factoryDone 1
   251 label *label97
 
   261 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
   262 set :factoryUnitFinished:unit @mega
   263 label *label101
-    * jump *label113 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp176 :factoryUnitFinished:unit @id
+  264 jump *label113 notEqual @mega .targetUnit
+  265 sensor *tmp176 @mega @id
   266 op add :log:encodedId @blockCount *tmp176
   267 read *tmp32 .bank 511
   268 op sub *tmp178 *tmp32 1
 
   273 write *tmp183 .bank *tmp178
   274 label *label102
   275 label *label103
-    * jump *label105 notEqual :factoryUnitFinished:unit @flare
+  276 jump *label105 notEqual @mega @flare
   277 label *label104
   278 op add *tmp186 .flares 1
   279 set .flares *tmp186
   280 write *tmp186 .display ".flares"
   281 jump *label112 always
   282 label *label105
-    * jump *label107 notEqual :factoryUnitFinished:unit @mono
+  283 jump *label107 notEqual @mega @mono
   284 label *label106
   285 op add *tmp187 .monos 1
   286 set .monos *tmp187
   287 write *tmp187 .display ".monos"
   288 jump *label112 always
   289 label *label107
-    * jump *label109 notEqual :factoryUnitFinished:unit @poly
+  290 jump *label109 notEqual @mega @poly
   291 label *label108
   292 op add *tmp188 .polys 1
   293 set .polys *tmp188
   294 write *tmp188 .display ".polys"
   295 jump *label112 always
   296 label *label109
-    * jump *label111 notEqual :factoryUnitFinished:unit @mega
+  297 jump *label111 notEqual @mega @mega
   298 label *label110
   299 op add *tmp189 .megas 1
   300 set .megas *tmp189
 
   305 set .factoryDone 0
   306 jump *label117 always
   307 label *label113
-    * jump *label114 equal :factoryUnitFinished:unit @flare
-    * jump *label115 notEqual :factoryUnitFinished:unit @mono
+  308 jump *label114 equal @mega @flare
+  309 jump *label115 notEqual @mega @mono
   310 label *label114
   311 set .factoryDone 1
   312 label *label115

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   198 label *label27
   199 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
   200 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
-    * set :factoryUnitFinished:unit @poly
   201 label *label83
   202 jump *label95 notEqual @poly .targetUnit
   203 sensor *tmp176 @poly @id
 
   258 label *label34
   259 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
   260 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
-    * set :factoryUnitFinished:unit @mega
   261 label *label101
   262 jump *label113 notEqual @mega .targetUnit
   263 sensor *tmp176 @mega @id

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-4 instructions):
 
   211 write *tmp183 .bank *tmp178
   212 label *label84
   213 label *label85
-    * jump *label87 notEqual @poly @flare
+  214 jump *label87 always
   215 label *label86
   216 op add *tmp186 .flares 1
   217 set .flares *tmp186
   218 write *tmp186 .display ".flares"
   219 jump *label94 always
   220 label *label87
-    * jump *label89 notEqual @poly @mono
+  221 jump *label89 always
   222 label *label88
   223 op add *tmp187 .monos 1
   224 set .monos *tmp187
   225 write *tmp187 .display ".monos"
   226 jump *label94 always
   227 label *label89
-    * jump *label91 notEqual @poly @poly
   228 label *label90
   229 op add *tmp188 .polys 1
   230 set .polys *tmp188
   231 write *tmp188 .display ".polys"
   232 jump *label94 always
   233 label *label91
-    * jump *label93 notEqual @poly @mega
+  234 jump *label93 always
   235 label *label92
   236 op add *tmp189 .megas 1
   237 set .megas *tmp189
 
   242 set .factoryDone 0
   243 jump *label99 always
   244 label *label95
-    * jump *label96 equal @poly @flare
-    * jump *label97 notEqual @poly @mono
+  245 jump *label97 always
   246 label *label96
   247 set .factoryDone 1
   248 label *label97
 
   269 write *tmp183 .bank *tmp178
   270 label *label102
   271 label *label103
-    * jump *label105 notEqual @mega @flare
+  272 jump *label105 always
   273 label *label104
   274 op add *tmp186 .flares 1
   275 set .flares *tmp186
   276 write *tmp186 .display ".flares"
   277 jump *label112 always
   278 label *label105
-    * jump *label107 notEqual @mega @mono
+  279 jump *label107 always
   280 label *label106
   281 op add *tmp187 .monos 1
   282 set .monos *tmp187
   283 write *tmp187 .display ".monos"
   284 jump *label112 always
   285 label *label107
-    * jump *label109 notEqual @mega @poly
+  286 jump *label109 always
   287 label *label108
   288 op add *tmp188 .polys 1
   289 set .polys *tmp188
   290 write *tmp188 .display ".polys"
   291 jump *label112 always
   292 label *label109
-    * jump *label111 notEqual @mega @mega
   293 label *label110
   294 op add *tmp189 .megas 1
   295 set .megas *tmp189
 
   300 set .factoryDone 0
   301 jump *label117 always
   302 label *label113
-    * jump *label114 equal @mega @flare
-    * jump *label115 notEqual @mega @mono
+  303 jump *label115 always
   304 label *label114
   305 set .factoryDone 1
   306 label *label115

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   200 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
   201 label *label83
   202 jump *label95 notEqual @poly .targetUnit
-    * sensor *tmp176 @poly @id
+  203 set *tmp176 21
   204 op add :log:encodedId @blockCount *tmp176
   205 read *tmp32 .bank 511
   206 op sub *tmp178 *tmp32 1
 
   258 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
   259 label *label101
   260 jump *label113 notEqual @mega .targetUnit
-    * sensor *tmp176 @mega @id
+  261 set *tmp176 22
   262 op add :log:encodedId @blockCount *tmp176
   263 read *tmp32 .bank 511
   264 op sub *tmp178 *tmp32 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-6 instructions):
 
   201 label *label83
   202 jump *label95 notEqual @poly .targetUnit
   203 set *tmp176 21
-    * op add :log:encodedId @blockCount *tmp176
+  204 op add :log:encodedId @blockCount 21
   205 read *tmp32 .bank 511
   206 op sub *tmp178 *tmp32 1
   207 write *tmp178 .bank 511
   208 read *tmp181 .timer "time"
   209 op mul *tmp182 *tmp181 1000
-    * op add *tmp183 :log:encodedId *tmp182
+  210 op add *tmp183 281 *tmp182
   211 write *tmp183 .bank *tmp178
   212 label *label84
   213 label *label85
   214 jump *label87 always
   215 label *label86
-    * op add *tmp186 .flares 1
   216 set .flares *tmp186
   217 write *tmp186 .display ".flares"
   218 jump *label94 always
   219 label *label87
   220 jump *label89 always
   221 label *label88
-    * op add *tmp187 .monos 1
   222 set .monos *tmp187
   223 write *tmp187 .display ".monos"
   224 jump *label94 always
 
   231 label *label91
   232 jump *label93 always
   233 label *label92
-    * op add *tmp189 .megas 1
   234 set .megas *tmp189
   235 write *tmp189 .display ".megas"
   236 label *label93
 
   256 label *label101
   257 jump *label113 notEqual @mega .targetUnit
   258 set *tmp176 22
-    * op add :log:encodedId @blockCount *tmp176
+  259 op add :log:encodedId @blockCount 22
   260 read *tmp32 .bank 511
   261 op sub *tmp178 *tmp32 1
   262 write *tmp178 .bank 511
   263 read *tmp181 .timer "time"
   264 op mul *tmp182 *tmp181 1000
-    * op add *tmp183 :log:encodedId *tmp182
+  265 op add *tmp183 282 *tmp182
   266 write *tmp183 .bank *tmp178
   267 label *label102
   268 label *label103
   269 jump *label105 always
   270 label *label104
-    * op add *tmp186 .flares 1
   271 set .flares *tmp186
   272 write *tmp186 .display ".flares"
   273 jump *label112 always
   274 label *label105
   275 jump *label107 always
   276 label *label106
-    * op add *tmp187 .monos 1
   277 set .monos *tmp187
   278 write *tmp187 .display ".monos"
   279 jump *label112 always
   280 label *label107
   281 jump *label109 always
   282 label *label108
-    * op add *tmp188 .polys 1
   283 set .polys *tmp188
   284 write *tmp188 .display ".polys"
   285 jump *label112 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-4 instructions):
 
   200 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
   201 label *label83
   202 jump *label95 notEqual @poly .targetUnit
-    * set *tmp176 21
-    * op add :log:encodedId @blockCount 21
   203 read *tmp32 .bank 511
   204 op sub *tmp178 *tmp32 1
   205 write *tmp178 .bank 511
 
   253 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
   254 label *label101
   255 jump *label113 notEqual @mega .targetUnit
-    * set *tmp176 22
-    * op add :log:encodedId @blockCount 22
   256 read *tmp32 .bank 511
   257 op sub *tmp178 *tmp32 1
   258 write *tmp178 .bank 511

Modifications by Iterated phase, Temp Variables Elimination, pass 2, iteration 1 (-2 instructions):
 
    71 label *label13
    72 jump *label15 greaterThanEq .polys .polyTarget
    73 op add *tmp78 .factoryDone .polys
-    * select *tmp80 lessThan *tmp78 .polyTarget @mono null
-    * set .factoryUnit *tmp80
+   74 select .factoryUnit lessThan *tmp78 .polyTarget @mono null
    75 set .targetUnit @poly
    76 write @poly .display ".nextUnit"
    77 control enabled AÀHBJ`-additive-reconstructor22 true
 
    83 label *label15
    84 jump *label19 greaterThanEq .megas .megaTarget
    85 op add *tmp91 .factoryDone .megas
-    * select *tmp93 lessThan *tmp91 .megaTarget @mono null
-    * set .factoryUnit *tmp93
+   86 select .factoryUnit lessThan *tmp91 .megaTarget @mono null
    87 set .targetUnit @mega
    88 write @mega .display ".nextUnit"
    89 set *tmp94 AÀHBJ`-additive-reconstructor22

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
   103 label *label14
   104 label *label12
   105 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
-    * label *label24
   106 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
-    * label *label25
-    * label *label23
   107 jump *label26 notEqual .factoryUnit null
   108 control enabled A¾BHMV-air-factory12 false
   109 control config A¾BHMV-air-factory12 @mono
 
   117 op land *tmp116 :backgroundProcess:enableFactory *tmp115
   118 control enabled *tmp113 *tmp116
   119 set :factoryUnitFinished:unit .factoryUnit
-    * label *label65
   120 jump *label77 notEqual :factoryUnitFinished:unit .targetUnit
   121 sensor *tmp176 :factoryUnitFinished:unit @id
   122 op add :log:encodedId @blockCount *tmp176
 
   127 op mul *tmp182 *tmp181 1000
   128 op add *tmp183 :log:encodedId *tmp182
   129 write *tmp183 .bank *tmp178
-    * label *label66
-    * label *label67
   130 jump *label69 notEqual :factoryUnitFinished:unit @flare
-    * label *label68
   131 op add *tmp186 .flares 1
   132 set .flares *tmp186
   133 write *tmp186 .display ".flares"
   134 jump *label76 always
   135 label *label69
   136 jump *label71 notEqual :factoryUnitFinished:unit @mono
-    * label *label70
   137 op add *tmp187 .monos 1
   138 set .monos *tmp187
   139 write *tmp187 .display ".monos"
   140 jump *label76 always
   141 label *label71
   142 jump *label73 notEqual :factoryUnitFinished:unit @poly
-    * label *label72
   143 op add *tmp188 .polys 1
   144 set .polys *tmp188
   145 write *tmp188 .display ".polys"
   146 jump *label76 always
   147 label *label73
   148 jump *label75 notEqual :factoryUnitFinished:unit @mega
-    * label *label74
   149 op add *tmp189 .megas 1
   150 set .megas *tmp189
   151 write *tmp189 .display ".megas"
 
   160 label *label78
   161 set .factoryDone 1
   162 label *label79
-    * label *label80
   163 label *label81
-    * label *label82
   164 set :backgroundProcess:lastProgress 0
   165 jump *label29 always
   166 label *label28
 
   184 label *label27
   185 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
   186 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
-    * label *label83
   187 jump *label95 notEqual @poly .targetUnit
   188 read *tmp32 .bank 511
   189 op sub *tmp178 *tmp32 1
 
   192 op mul *tmp182 *tmp181 1000
   193 op add *tmp183 281 *tmp182
   194 write *tmp183 .bank *tmp178
-    * label *label84
-    * label *label85
   195 jump *label87 always
-    * label *label86
   196 set .flares *tmp186
   197 write *tmp186 .display ".flares"
   198 jump *label94 always
   199 label *label87
   200 jump *label89 always
-    * label *label88
   201 set .monos *tmp187
   202 write *tmp187 .display ".monos"
   203 jump *label94 always
   204 label *label89
-    * label *label90
   205 op add *tmp188 .polys 1
   206 set .polys *tmp188
   207 write *tmp188 .display ".polys"
   208 jump *label94 always
-    * label *label91
   209 jump *label93 always
-    * label *label92
   210 set .megas *tmp189
   211 write *tmp189 .display ".megas"
   212 label *label93
 
   216 jump *label99 always
   217 label *label95
   218 jump *label97 always
-    * label *label96
   219 set .factoryDone 1
   220 label *label97
-    * label *label98
   221 label *label99
-    * label *label100
   222 set :backgroundProcess:lastRecoProgress 0
   223 jump *label34 always
   224 label *label33
 
   226 label *label34
   227 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
   228 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
-    * label *label101
   229 jump *label113 notEqual @mega .targetUnit
   230 read *tmp32 .bank 511
   231 op sub *tmp178 *tmp32 1
 
   234 op mul *tmp182 *tmp181 1000
   235 op add *tmp183 282 *tmp182
   236 write *tmp183 .bank *tmp178
-    * label *label102
-    * label *label103
   237 jump *label105 always
-    * label *label104
   238 set .flares *tmp186
   239 write *tmp186 .display ".flares"
   240 jump *label112 always
   241 label *label105
   242 jump *label107 always
-    * label *label106
   243 set .monos *tmp187
   244 write *tmp187 .display ".monos"
   245 jump *label112 always
   246 label *label107
   247 jump *label109 always
-    * label *label108
   248 set .polys *tmp188
   249 write *tmp188 .display ".polys"
   250 jump *label112 always
   251 label *label109
-    * label *label110
   252 op add *tmp189 .megas 1
   253 set .megas *tmp189
   254 write *tmp189 .display ".megas"
-    * label *label111
   255 label *label112
   256 write true .display ".unitReset"
   257 set .factoryDone 0
   258 jump *label117 always
   259 label *label113
   260 jump *label115 always
-    * label *label114
   261 set .factoryDone 1
   262 label *label115
-    * label *label116
   263 label *label117
-    * label *label118
   264 set :backgroundProcess:lastMultiProgress 0
   265 jump *label37 always
   266 label *label36
 
   272 control config A©FHJU-unloader11 @coal
   273 jump *label7 always
   274 label *label39
-    * label *label40
   275 set *tmp144 A©HFJ_-unloader21
   276 op greaterThan *tmp146 :backgroundProcess:coreSilicon .siliconReserve
   277 op greaterThan *tmp147 :backgroundProcess:coreGraphite .graphiteReserve
 
   306 op sub .loopTicks @tick :backgroundProcess:ticks
   307 label *label7
   308 jump *label6 always
-    * label *label8
-    * label *label5
   309 wait 1e12
   310 jump *label4 always
   311 end

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   184 label *label27
   185 op add *tmp132 :backgroundProcess:reconstructorProgress 0.1
   186 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp132
-    * jump *label95 notEqual @poly .targetUnit
+  187 jump *label97 notEqual @poly .targetUnit
   188 read *tmp32 .bank 511
   189 op sub *tmp178 *tmp32 1
   190 write *tmp178 .bank 511
 
   192 op mul *tmp182 *tmp181 1000
   193 op add *tmp183 281 *tmp182
   194 write *tmp183 .bank *tmp178
-    * jump *label87 always
+  195 jump *label89 always
   196 set .flares *tmp186
   197 write *tmp186 .display ".flares"
   198 jump *label94 always
 
   226 label *label34
   227 op add *tmp135 :backgroundProcess:multiReconstructorProgress 0.1
   228 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp135
-    * jump *label113 notEqual @mega .targetUnit
+  229 jump *label115 notEqual @mega .targetUnit
   230 read *tmp32 .bank 511
   231 op sub *tmp178 *tmp32 1
   232 write *tmp178 .bank 511
 
   234 op mul *tmp182 *tmp181 1000
   235 op add *tmp183 282 *tmp182
   236 write *tmp183 .bank *tmp178
-    * jump *label105 always
+  237 jump *label109 always
   238 set .flares *tmp186
   239 write *tmp186 .display ".flares"
   240 jump *label112 always
   241 label *label105
-    * jump *label107 always
+  242 jump *label109 always
   243 set .monos *tmp187
   244 write *tmp187 .display ".monos"
   245 jump *label112 always
 
   270 op mul *tmp139 5 AAOJ\-steam-generator18
   271 jump *label39 greaterThanEq *tmp138 *tmp139
   272 control config A©FHJU-unloader11 @coal
-    * jump *label7 always
+  273 jump *label6 always
   274 label *label39
   275 set *tmp144 A©HFJ_-unloader21
   276 op greaterThan *tmp146 :backgroundProcess:coreSilicon .siliconReserve

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-28 instructions):
 
   193 op add *tmp183 281 *tmp182
   194 write *tmp183 .bank *tmp178
   195 jump *label89 always
-    * set .flares *tmp186
-    * write *tmp186 .display ".flares"
-    * jump *label94 always
-    * label *label87
-    * jump *label89 always
-    * set .monos *tmp187
-    * write *tmp187 .display ".monos"
-    * jump *label94 always
   196 label *label89
   197 op add *tmp188 .polys 1
   198 set .polys *tmp188
   199 write *tmp188 .display ".polys"
   200 jump *label94 always
-    * jump *label93 always
-    * set .megas *tmp189
-    * write *tmp189 .display ".megas"
-    * label *label93
   201 label *label94
   202 write true .display ".unitReset"
   203 set .factoryDone 0
   204 jump *label99 always
-    * label *label95
-    * jump *label97 always
-    * set .factoryDone 1
   205 label *label97
   206 label *label99
   207 set :backgroundProcess:lastRecoProgress 0
 
   220 op add *tmp183 282 *tmp182
   221 write *tmp183 .bank *tmp178
   222 jump *label109 always
-    * set .flares *tmp186
-    * write *tmp186 .display ".flares"
-    * jump *label112 always
-    * label *label105
-    * jump *label109 always
-    * set .monos *tmp187
-    * write *tmp187 .display ".monos"
-    * jump *label112 always
-    * label *label107
-    * jump *label109 always
-    * set .polys *tmp188
-    * write *tmp188 .display ".polys"
-    * jump *label112 always
   223 label *label109
   224 op add *tmp189 .megas 1
   225 set .megas *tmp189
 
   228 write true .display ".unitReset"
   229 set .factoryDone 0
   230 jump *label117 always
-    * label *label113
-    * jump *label115 always
-    * set .factoryDone 1
   231 label *label115
   232 label *label117
   233 set :backgroundProcess:lastMultiProgress 0
 
   273 select *tmp172 notEqual *tmp171 false @titanium @silicon
   274 control config *tmp165 *tmp172
   275 op sub .loopTicks @tick :backgroundProcess:ticks
-    * label *label7
   276 jump *label6 always
-    * wait 1e12
-    * jump *label4 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1:
 
    10 set .megaTarget 0
    11 set .factoryDone 0
    12 set *signature "0:v1"
-    * label *label4
    13 set :backgroundProcess:lastProgress 0
    14 set :backgroundProcess:lastRecoProgress 0
    15 set :backgroundProcess:lastMultiProgress 0
 
   223 op add *tmp189 .megas 1
   224 set .megas *tmp189
   225 write *tmp189 .display ".megas"
-    * label *label112
   226 write true .display ".unitReset"
   227 set .factoryDone 0
   228 jump *label117 always

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-5 instructions):
 
   191 op mul *tmp182 *tmp181 1000
   192 op add *tmp183 281 *tmp182
   193 write *tmp183 .bank *tmp178
-    * jump *label89 always
   194 label *label89
   195 op add *tmp188 .polys 1
   196 set .polys *tmp188
   197 write *tmp188 .display ".polys"
-    * jump *label94 always
   198 label *label94
   199 write true .display ".unitReset"
   200 set .factoryDone 0
-    * jump *label99 always
   201 label *label97
   202 label *label99
   203 set :backgroundProcess:lastRecoProgress 0
 
   215 op mul *tmp182 *tmp181 1000
   216 op add *tmp183 282 *tmp182
   217 write *tmp183 .bank *tmp178
-    * jump *label109 always
   218 label *label109
   219 op add *tmp189 .megas 1
   220 set .megas *tmp189
   221 write *tmp189 .display ".megas"
   222 write true .display ".unitReset"
   223 set .factoryDone 0
-    * jump *label117 always
   224 label *label115
   225 label *label117
   226 set :backgroundProcess:lastMultiProgress 0

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
 
   191 op mul *tmp182 *tmp181 1000
   192 op add *tmp183 281 *tmp182
   193 write *tmp183 .bank *tmp178
-    * label *label89
   194 op add *tmp188 .polys 1
   195 set .polys *tmp188
   196 write *tmp188 .display ".polys"
-    * label *label94
   197 write true .display ".unitReset"
   198 set .factoryDone 0
   199 label *label97
-    * label *label99
   200 set :backgroundProcess:lastRecoProgress 0
   201 jump *label34 always
   202 label *label33
 
   212 op mul *tmp182 *tmp181 1000
   213 op add *tmp183 282 *tmp182
   214 write *tmp183 .bank *tmp178
-    * label *label109
   215 op add *tmp189 .megas 1
   216 set .megas *tmp189
   217 write *tmp189 .display ".megas"
   218 write true .display ".unitReset"
   219 set .factoryDone 0
   220 label *label115
-    * label *label117
   221 set :backgroundProcess:lastMultiProgress 0
   222 jump *label37 always
   223 label *label36

Final code before resolving virtual instructions:

    0:  set .flares 0                                                CoreController.mnd: remote var
    1:  set .monos 0                                                 ...
    2:  set .polys 1                                                 ...
    3:  set .megas 0                                                 ...
    4:  set .pressTarget 20                                          ...
    5:  set .smelterTarget 20                                        ...
    6:  set .kilnTarget 20                                           ...
    7:  set .flareTarget 0                                           ...
    8:  set .monoTarget 0                                            ...
    9:  set .polyTarget 0                                            ...
   10:  set .megaTarget 0                                            ...
   11:  set .factoryDone 0                                           CoreController.mnd: var factoryDone = 0;
   12:  set *signature "0:v1"                                        CoreController.mnd: #set target = 8;
   13:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: var lastProgress = 0, factoryProgress = 0;
   14:  set :backgroundProcess:lastRecoProgress 0                    CoreController.mnd: var lastRecoProgress = 0, reconstructorProgress = 0;
   15:  set :backgroundProcess:lastMultiProgress 0                   CoreController.mnd: var lastMultiProgress = 0, multiReconstructorProgress = 0;
   16:  set :backgroundProcess:enableFactory true                    CoreController.mnd: var enableFactory = true, blockFactory = false;
        label *label6                                                CoreController.mnd: while true do
   17:  set :backgroundProcess:ticks @tick                           CoreController.mnd: var ticks = @tick;
   18:  sensor :backgroundProcess:coreSilicon .core @silicon         CoreController.mnd: var coreSilicon = core.@silicon;
   19:  sensor :backgroundProcess:coreGraphite .core @graphite       CoreController.mnd: var coreGraphite = core.@graphite;
   20:  set *tmp35 ALSIJa-silicon-smelter23                          CoreController.mnd: smelter2.enabled = smelter.enabled = coreSilicon < smelterTarget;
   21:  set *tmp37 ALMQJN-silicon-smelter4                           ...
   22:  op lessThan *tmp39 :backgroundProcess:coreSilicon .smelterTa ...
   23:  control enabled *tmp37 *tmp39 0 0 0                          ...
   24:  control enabled *tmp35 *tmp39 0 0 0                          ...
   25:  set *tmp40 AJEMJJ-graphite-press0                            CoreController.mnd: press.enabled = !multipress and coreGraphite < pressTarget;
   26:  op equal *tmp42 AKFRJ]-multi-press19 false                   ...
   27:  op lessThan *tmp43 :backgroundProcess:coreGraphite .pressTar ...
   28:  op land *tmp44 *tmp42 *tmp43                                 ...
   29:  control enabled *tmp40 *tmp44 0 0 0                          ...
   30:  set *tmp45 AKFRJ]-multi-press19                              CoreController.mnd: multipress.enabled = coreGraphite < pressTarget;
   31:  op lessThan *tmp47 :backgroundProcess:coreGraphite .pressTar ...
   32:  control enabled *tmp45 *tmp47 0 0 0                          ...
   33:  set *tmp48 ANOMJY-kiln15                                     CoreController.mnd: kiln.enabled = core.@metaglass < kilnTarget;
   34:  sensor *tmp50 .core @metaglass                               ...
   35:  op lessThan *tmp51 *tmp50 .kilnTarget                        ...
   36:  control enabled *tmp48 *tmp51 0 0 0                          ...
   37:  sensor :backgroundProcess:power AJTJK-battery1 @totalPower  CoreController.mnd: var power = battery1.@totalPower;
   38:  jump *label9 equal AAOJ\-steam-generator18 false            CoreController.mnd: if steam_gen then
   39:  set *tmp54 AJRJM-combustion-generator3                      CoreController.mnd: generator.enabled = power < 10;
   40:  op lessThan *tmp56 :backgroundProcess:power 10               ...
   41:  control enabled *tmp54 *tmp56 0 0 0                          ...
   42:  set *tmp57 AAOJ\-steam-generator18                          CoreController.mnd: steam_gen.enabled = power < 3800;
   43:  op lessThan *tmp59 :backgroundProcess:power 3800             ...
   44:  control enabled *tmp57 *tmp59 0 0 0                          ...
   45:  jump *label10 always 0 0                                     CoreController.mnd: if steam_gen then
        label *label9                                                ...
   46:  set *tmp60 AJRJM-combustion-generator3                      CoreController.mnd: generator.enabled = power < 800;
   47:  op lessThan *tmp62 :backgroundProcess:power 800              ...
   48:  control enabled *tmp60 *tmp62 0 0 0                          ...
        label *label10                                               CoreController.mnd: if steam_gen then
   49:  sensor :backgroundProcess:factoryProgress A¾BHMV-air-factory CoreController.mnd: factoryProgress = air_factory.@progress;
   50:  sensor :backgroundProcess:reconstructorProgress AÀHBJ`-addit CoreController.mnd: reconstructorProgress = additive_rec.@progress;
   51:  sensor :backgroundProcess:multiReconstructorProgress AÁPBJe- CoreController.mnd: multiReconstructorProgress = multiplicative_rec.@progress;
   52:  jump *label11 greaterThanEq .flares .flareTarget             CoreController.mnd: if flares < flareTarget then
   53:  set .factoryUnit @flare                                      CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = @flare;
   54:  set .targetUnit @flare                                       ...
   55:  write @flare .display ".nextUnit"                            ...
   56:  control config AÇBBJ^-payload-router20 .targetUnit 0 0 0     CoreController.mnd: payload_router.config = targetUnit;
   57:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   58:  jump *label12 always 0 0                                     CoreController.mnd: if flares < flareTarget then
        label *label11                                               ...
   59:  jump *label13 greaterThanEq .monos .monoTarget               CoreController.mnd: elsif monos < monoTarget then
   60:  set .factoryUnit @mono                                       CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = @mono;
   61:  set .targetUnit @mono                                        ...
   62:  write @mono .display ".nextUnit"                             ...
   63:  control config AÇBBJ^-payload-router20 .targetUnit 0 0 0     CoreController.mnd: payload_router.config = targetUnit;
   64:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   65:  jump *label14 always 0 0                                     CoreController.mnd: elsif monos < monoTarget then
        label *label13                                               ...
   66:  jump *label15 greaterThanEq .polys .polyTarget               CoreController.mnd: elsif polys < polyTarget then
   67:  op add *tmp78 .factoryDone .polys                            CoreController.mnd: factoryUnit = factoryDone + polys < polyTarget ? @mono : null;
   68:  select .factoryUnit lessThan *tmp78 .polyTarget @mono null   ...
   69:  set .targetUnit @poly                                        CoreController.mnd: display.nextUnit = targetUnit = @poly;
   70:  write @poly .display ".nextUnit"                             ...
   71:  control enabled AÀHBJ`-additive-reconstructor22 true 0 0 0   CoreController.mnd: additive_rec.enabled = true;
   72:  control config AÇBBJ^-payload-router20 .targetUnit 0 0 0     CoreController.mnd: payload_router.config = targetUnit;
   73:  sensor *tmp86 AÀHBJ`-additive-reconstructor22 @payloadCount  CoreController.mnd: blockFactory = additive_rec.@payloadCount * factoryProgress > reconstructorProgress;
   74:  op mul *tmp87 *tmp86 :backgroundProcess:factoryProgress      ...
   75:  op greaterThan :backgroundProcess:blockFactory *tmp87 :backg ...
   76:  jump *label16 always 0 0                                     CoreController.mnd: elsif polys < polyTarget then
        label *label15                                               ...
   77:  jump *label19 greaterThanEq .megas .megaTarget               CoreController.mnd: elsif megas < megaTarget then
   78:  op add *tmp91 .factoryDone .megas                            CoreController.mnd: factoryUnit = factoryDone + megas < megaTarget ? @mono : null;
   79:  select .factoryUnit lessThan *tmp91 .megaTarget @mono null   ...
   80:  set .targetUnit @mega                                        CoreController.mnd: display.nextUnit = targetUnit = @mega;
   81:  write @mega .display ".nextUnit"                             ...
   82:  set *tmp94 AÀHBJ`-additive-reconstructor22                   CoreController.mnd: additive_rec.enabled = multiplicative_rec or reconstructorProgress < 0.75;
   83:  op lessThan *tmp96 :backgroundProcess:reconstructorProgress  ...
   84:  op or *tmp97 AÁPBJe-multiplicative-reconstructor27 *tmp96    ...
   85:  control enabled *tmp94 *tmp97 0 0 0                          ...
   86:  control config AÇBBJ^-payload-router20 .targetUnit 0 0 0     CoreController.mnd: payload_router.config = targetUnit;
   87:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   88:  jump *label20 always 0 0                                     CoreController.mnd: elsif megas < megaTarget then
        label *label19                                               ...
   89:  set .factoryUnit null                                        CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = null;
   90:  set .targetUnit null                                         ...
   91:  write null .display ".nextUnit"                              ...
   92:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
        label *label20                                               CoreController.mnd: elsif megas < megaTarget then
        label *label16                                               CoreController.mnd: elsif polys < polyTarget then
        label *label14                                               CoreController.mnd: elsif monos < monoTarget then
        label *label12                                               CoreController.mnd: if flares < flareTarget then
   93:  select :backgroundProcess:enableFactory lessThan :background CoreController.mnd: mlogSafe("select", out value, "lessThan", in a, in b, in newValue, in value);
   94:  select :backgroundProcess:enableFactory lessThan 500 :backgr ...
   95:  jump *label26 notEqual .factoryUnit null                     CoreController.mnd: if factoryUnit == null then
   96:  control enabled A¾BHMV-air-factory12 false 0 0 0             CoreController.mnd: air_factory.enabled = false;
   97:  control config A¾BHMV-air-factory12 @mono 0 0 0              CoreController.mnd: air_factory.config = @mono;
   98:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
   99:  jump *label27 always 0 0                                     CoreController.mnd: if factoryUnit == null then
        label *label26                                               ...
  100:  op add *tmp110 :backgroundProcess:factoryProgress 0.1        CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
  101:  jump *label28 lessThanEq :backgroundProcess:lastProgress *tm ...
  102:  set *tmp113 A¾BHMV-air-factory12                             CoreController.mnd: air_factory.enabled = enableFactory and not blockFactory;
  103:  op equal *tmp115 :backgroundProcess:blockFactory false       ...
  104:  op land *tmp116 :backgroundProcess:enableFactory *tmp115     ...
  105:  control enabled *tmp113 *tmp116 0 0 0                        ...
  106:  set :factoryUnitFinished:unit .factoryUnit                   CoreController.mnd: factoryUnitFinished(factoryUnit);
  107:  jump *label77 notEqual :factoryUnitFinished:unit .targetUnit CoreController.mnd: if unit == targetUnit then
  108:  sensor *tmp176 :factoryUnitFinished:unit @id                 CoreController.mnd: log(@blockCount + unit.@id);
  109:  op add :log:encodedId @blockCount *tmp176                    ...
  110:  read *tmp32 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  111:  op sub *tmp178 *tmp32 1                                      ...
  112:  write *tmp178 .bank 511                                      ...
  113:  read *tmp181 .timer "time"                                   ...
  114:  op mul *tmp182 *tmp181 1000                                  ...
  115:  op add *tmp183 :log:encodedId *tmp182                        ...
  116:  write *tmp183 .bank *tmp178                                  ...
  117:  jump *label69 notEqual :factoryUnitFinished:unit @flare      CoreController.mnd: case unit
  118:  op add *tmp186 .flares 1                                     CoreController.mnd: when @flare then display.flares = ++flares;
  119:  set .flares *tmp186                                          ...
  120:  write *tmp186 .display ".flares"                             ...
  121:  jump *label76 always 0 0                                     CoreController.mnd: case unit
        label *label69                                               ...
  122:  jump *label71 notEqual :factoryUnitFinished:unit @mono       ...
  123:  op add *tmp187 .monos 1                                      CoreController.mnd: when @mono  then display.monos = ++monos;
  124:  set .monos *tmp187                                           ...
  125:  write *tmp187 .display ".monos"                              ...
  126:  jump *label76 always 0 0                                     CoreController.mnd: case unit
        label *label71                                               ...
  127:  jump *label73 notEqual :factoryUnitFinished:unit @poly       ...
  128:  op add *tmp188 .polys 1                                      CoreController.mnd: when @poly  then display.polys = ++polys;
  129:  set .polys *tmp188                                           ...
  130:  write *tmp188 .display ".polys"                              ...
  131:  jump *label76 always 0 0                                     CoreController.mnd: case unit
        label *label73                                               ...
  132:  jump *label75 notEqual :factoryUnitFinished:unit @mega       ...
  133:  op add *tmp189 .megas 1                                      CoreController.mnd: when @mega  then display.megas = ++megas;
  134:  set .megas *tmp189                                           ...
  135:  write *tmp189 .display ".megas"                              ...
        label *label75                                               CoreController.mnd: case unit
        label *label76                                               ...
  136:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  137:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
  138:  jump *label81 always 0 0                                     CoreController.mnd: if unit == targetUnit then
        label *label77                                               ...
  139:  jump *label78 equal :factoryUnitFinished:unit @flare         CoreController.mnd: case unit
  140:  jump *label79 notEqual :factoryUnitFinished:unit @mono       ...
        label *label78                                               ...
  141:  set .factoryDone 1                                           CoreController.mnd: when @flare, @mono then factoryDone = 1;
        label *label79                                               CoreController.mnd: case unit
        label *label81                                               CoreController.mnd: if unit == targetUnit then
  142:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
  143:  jump *label29 always 0 0                                     CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
        label *label28                                               ...
  144:  sensor *tmp118 A¾BHMV-air-factory12 @config                  CoreController.mnd: elsif air_factory.config != factoryUnit then
  145:  jump *label31 equal *tmp118 .factoryUnit                     ...
  146:  set *tmp121 A¾BHMV-air-factory12                             CoreController.mnd: air_factory.enabled = enableFactory and not blockFactory;
  147:  op equal *tmp123 :backgroundProcess:blockFactory false       ...
  148:  op land *tmp124 :backgroundProcess:enableFactory *tmp123     ...
  149:  control enabled *tmp121 *tmp124 0 0 0                        ...
  150:  control config A¾BHMV-air-factory12 .factoryUnit 0 0 0       CoreController.mnd: air_factory.config = factoryUnit;
  151:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
  152:  jump *label32 always 0 0                                     CoreController.mnd: elsif air_factory.config != factoryUnit then
        label *label31                                               ...
  153:  set *tmp128 A¾BHMV-air-factory12                             CoreController.mnd: air_factory.enabled = enableFactory and not blockFactory;
  154:  op equal *tmp130 :backgroundProcess:blockFactory false       ...
  155:  op land *tmp131 :backgroundProcess:enableFactory *tmp130     ...
  156:  control enabled *tmp128 *tmp131 0 0 0                        ...
  157:  set :backgroundProcess:lastProgress :backgroundProcess:facto CoreController.mnd: lastProgress = factoryProgress;
        label *label32                                               CoreController.mnd: elsif air_factory.config != factoryUnit then
        label *label29                                               CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
        label *label27                                               CoreController.mnd: if factoryUnit == null then
  158:  op add *tmp132 :backgroundProcess:reconstructorProgress 0.1  CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
  159:  jump *label33 lessThanEq :backgroundProcess:lastRecoProgress ...
  160:  jump *label97 notEqual @poly .targetUnit                     CoreController.mnd: if unit == targetUnit then
  161:  read *tmp32 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  162:  op sub *tmp178 *tmp32 1                                      ...
  163:  write *tmp178 .bank 511                                      ...
  164:  read *tmp181 .timer "time"                                   ...
  165:  op mul *tmp182 *tmp181 1000                                  ...
  166:  op add *tmp183 281 *tmp182                                   ...
  167:  write *tmp183 .bank *tmp178                                  ...
  168:  op add *tmp188 .polys 1                                      CoreController.mnd: when @poly  then display.polys = ++polys;
  169:  set .polys *tmp188                                           ...
  170:  write *tmp188 .display ".polys"                              ...
  171:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  172:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
        label *label97                                               CoreController.mnd: case unit
  173:  set :backgroundProcess:lastRecoProgress 0                    CoreController.mnd: lastRecoProgress = 0;
  174:  jump *label34 always 0 0                                     CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
        label *label33                                               ...
  175:  set :backgroundProcess:lastRecoProgress :backgroundProcess:r CoreController.mnd: lastRecoProgress = reconstructorProgress;
        label *label34                                               CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
  176:  op add *tmp135 :backgroundProcess:multiReconstructorProgress CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
  177:  jump *label36 lessThanEq :backgroundProcess:lastMultiProgres ...
  178:  jump *label115 notEqual @mega .targetUnit                    CoreController.mnd: if unit == targetUnit then
  179:  read *tmp32 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  180:  op sub *tmp178 *tmp32 1                                      ...
  181:  write *tmp178 .bank 511                                      ...
  182:  read *tmp181 .timer "time"                                   ...
  183:  op mul *tmp182 *tmp181 1000                                  ...
  184:  op add *tmp183 282 *tmp182                                   ...
  185:  write *tmp183 .bank *tmp178                                  ...
  186:  op add *tmp189 .megas 1                                      CoreController.mnd: when @mega  then display.megas = ++megas;
  187:  set .megas *tmp189                                           ...
  188:  write *tmp189 .display ".megas"                              ...
  189:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  190:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
        label *label115                                              CoreController.mnd: case unit
  191:  set :backgroundProcess:lastMultiProgress 0                   CoreController.mnd: lastMultiProgress = 0;
  192:  jump *label37 always 0 0                                     CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
        label *label36                                               ...
  193:  set :backgroundProcess:lastMultiProgress :backgroundProcess: CoreController.mnd: lastMultiProgress = multiReconstructorProgress;
        label *label37                                               CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
  194:  sensor *tmp138 AAOJ\-steam-generator18 @coal                CoreController.mnd: if steam_gen.@coal < 5 * steam_gen then
  195:  op mul *tmp139 5 AAOJ\-steam-generator18                    ...
  196:  jump *label39 greaterThanEq *tmp138 *tmp139                  ...
  197:  control config A©FHJU-unloader11 @coal 0 0 0                 CoreController.mnd: unloader2.config = @coal;
  198:  jump *label6 always 0 0                                      CoreController.mnd: continue;
        label *label39                                               CoreController.mnd: if steam_gen.@coal < 5 * steam_gen then
  199:  set *tmp144 A©HFJ_-unloader21                                CoreController.mnd: unloader4.enabled = coreSilicon > siliconReserve and coreGraphite > graphiteReserve;
  200:  op greaterThan *tmp146 :backgroundProcess:coreSilicon .silic ...
  201:  op greaterThan *tmp147 :backgroundProcess:coreGraphite .grap ...
  202:  op land *tmp148 *tmp146 *tmp147                              ...
  203:  control enabled *tmp144 *tmp148 0 0 0                        ...
  204:  op equal *tmp149 .factoryUnit @mono                          CoreController.mnd: var leadLimit = (factoryUnit == @mono) * 30;
  205:  op mul :backgroundProcess:leadLimit *tmp149 30               ...
  206:  sensor *tmp151 A¾BHMV-air-factory12 @lead                    CoreController.mnd: if air_factory.@lead < leadLimit and core.@lead > leadReserve then
  207:  op lessThan *tmp152 *tmp151 :backgroundProcess:leadLimit     ...
  208:  sensor *tmp153 .core @lead                                   ...
  209:  op greaterThan *tmp154 *tmp153 .leadReserve                  ...
  210:  op land *tmp155 *tmp152 *tmp154                              ...
  211:  jump *label41 equal *tmp155 false                            ...
  212:  control config A©FHJU-unloader11 @lead 0 0 0                 CoreController.mnd: unloader2.config = @lead;
  213:  jump *label42 always 0 0                                     CoreController.mnd: if air_factory.@lead < leadLimit and core.@lead > leadReserve then
        label *label41                                               ...
  214:  jump *label43 lessThanEq :backgroundProcess:coreSilicon .sil CoreController.mnd: elsif coreSilicon > siliconReserve then
  215:  control config A©FHJU-unloader11 @silicon 0 0 0              CoreController.mnd: unloader2.config = @silicon;
  216:  jump *label44 always 0 0                                     CoreController.mnd: elsif coreSilicon > siliconReserve then
        label *label43                                               ...
  217:  control config A©FHJU-unloader11 @coal 0 0 0                 CoreController.mnd: unloader2.config = @coal;
        label *label44                                               CoreController.mnd: elsif coreSilicon > siliconReserve then
        label *label42                                               CoreController.mnd: if air_factory.@lead < leadLimit and core.@lead > leadReserve then
  218:  set *tmp165 A©JFJd-unloader26                                CoreController.mnd: unloader6.config = multiplicative_rec.@silicon >= 130 and multiplicative_rec.@titanium < 80 ? @titanium : @silicon;
  219:  sensor *tmp167 AÁPBJe-multiplicative-reconstructor27 @silico ...
  220:  op greaterThanEq *tmp168 *tmp167 130                         ...
  221:  sensor *tmp169 AÁPBJe-multiplicative-reconstructor27 @titani ...
  222:  op lessThan *tmp170 *tmp169 80                               ...
  223:  op land *tmp171 *tmp168 *tmp170                              ...
  224:  select *tmp172 notEqual *tmp171 false @titanium @silicon     ...
  225:  control config *tmp165 *tmp172 0 0 0                         ...
  226:  op sub .loopTicks @tick :backgroundProcess:ticks             CoreController.mnd: loopTicks = @tick - ticks;
  227:  jump *label6 always 0 0                                      CoreController.mnd: while true do


Performance: parsed in 599 ms, compiled in 327 ms, optimized in 578 ms, run in 22 ms.
Error connecting to Mlog Watcher: Connection refused: connect
  - make sure Mindustry with active Mlog Watcher mod is running
  - verify Mlog Watcher listens on port 9992

Program output (19 steps):
The program didn't generate any output.
Execution exception at instruction 18: sensor :backgroundProcess:coreSilicon .core @silicon:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
