   338 instructions before optimizations.
    31 instructions eliminated by Temp Variables Elimination (2 passes, 8 iterations).
     2 instructions eliminated by Case Expression Optimization.
    40 instructions eliminated by Dead Code Elimination (7 iterations).
C:\Home\golem\jam-202507\CoreController.mnd:42:5 Variable 'loopTicks' is not used.
     5 instructions eliminated by Jump Normalization (2 passes, 5 iterations).
    14 instructions eliminated by Jump Optimization (5 iterations).
     9 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     2 instructions modified by Expression Optimization (3 iterations).
     9 instructions eliminated by If Expression Optimization (4 iterations).
    27 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
    62 instructions added by Function Inlining (4 iterations).
     3 function calls inlined by Function Inlining.
     5 instructions eliminated by Jump Straightening (5 iterations).
     6 instructions updated by Jump Threading.
    28 instructions eliminated by Unreachable Code Elimination (2 iterations).
   230 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 781):
  * Inline function 'factoryUnitFinished' defined at CoreController.mnd:70:1 size   +67, benefit      109.4, efficiency      1.632 (+60 instructions)
    Inline function call at CoreController.mnd:160:13            size   +34, benefit       21.9, efficiency      0.643
    Inline function call at CoreController.mnd:172:13            size   +34, benefit       43.8, efficiency      1.287
    Inline function call at CoreController.mnd:179:13            size   +34, benefit       43.8, efficiency      1.287

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-2 instructions):
 
   338 write *tmp189 .bank *tmp185
   339 label *label51
   340 label *label50
-    * set *tmp191 :factoryUnitFinished:unit
-    * jump *label54 equal *tmp191 @flare
+  341 jump *label54 equal :factoryUnitFinished:unit @flare
   342 jump *label53 always
   343 label *label54
   344 op add *tmp192 .flares 1
 
   347 set *tmp190 *tmp192
   348 jump *label52 always
   349 label *label53
-    * jump *label56 equal *tmp191 @mono
+  350 jump *label56 equal :factoryUnitFinished:unit @mono
   351 jump *label55 always
   352 label *label56
   353 op add *tmp193 .monos 1
 
   356 set *tmp190 *tmp193
   357 jump *label52 always
   358 label *label55
-    * jump *label58 equal *tmp191 @poly
+  359 jump *label58 equal :factoryUnitFinished:unit @poly
   360 jump *label57 always
   361 label *label58
   362 op add *tmp194 .polys 1
 
   365 set *tmp190 *tmp194
   366 jump *label52 always
   367 label *label57
-    * jump *label60 equal *tmp191 @mega
+  368 jump *label60 equal :factoryUnitFinished:unit @mega
   369 jump *label59 always
   370 label *label60
   371 op add *tmp195 .megas 1
 
   381 set *tmp181 .factoryDone
   382 jump *label49 always
   383 label *label48
-    * set *tmp197 :factoryUnitFinished:unit
-    * jump *label63 equal *tmp197 @flare
-    * jump *label63 equal *tmp197 @mono
+  384 jump *label63 equal :factoryUnitFinished:unit @flare
+  385 jump *label63 equal :factoryUnitFinished:unit @mono
   386 jump *label62 always
   387 label *label63
   388 set .factoryDone 1

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-25 instructions):
 
    46 jump *label7 equal .smelter2 false
    47 set *tmp56 .unloader1
    48 control config *tmp56 @coal
-    * set *tmp55 @coal
    49 jump *label8 always
    50 label *label7
-    * set *tmp55 null
    51 label *label8
    52 sensor *tmp58 .battery @totalPower
    53 set :backgroundProcess:power *tmp58
 
    58 set *tmp63 .generator2
    59 op lessThan *tmp65 :backgroundProcess:power 3800
    60 control enabled *tmp63 *tmp65
-    * set *tmp59 *tmp65
    61 jump *label10 always
    62 label *label9
    63 set *tmp66 .generator
    64 op lessThan *tmp68 :backgroundProcess:power 800
    65 control enabled *tmp66 *tmp68
-    * set *tmp59 *tmp68
    66 label *label10
    67 sensor *tmp69 .factory @progress
    68 set :backgroundProcess:factoryProgress *tmp69
 
    79 set *tmp76 .targetUnit
    80 control config *tmp74 *tmp76
    81 set :backgroundProcess:blockFactory false
-    * set *tmp73 :backgroundProcess:blockFactory
    82 jump *label12 always
    83 label *label11
    84 op lessThan *tmp77 .monos .monoTarget
 
   152 label *label16
   153 set *tmp78 *tmp83
   154 label *label14
-    * set *tmp73 *tmp78
   155 label *label12
   156 set :fuzzyUpdate:value :backgroundProcess:power
   157 set :fuzzyUpdate:limitLow 200
 
   160 set :updateIfSmaller:b :fuzzyUpdate:limitLow
   161 set :updateIfSmaller:newValue false
   162 select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
-    * set *tmp108 null
   163 label *label24
   164 set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
   165 set :updateIfSmaller.1:b :fuzzyUpdate:value
 
   167 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   168 set *tmp109 null
   169 label *label25
-    * set *tmp107 *tmp109
   170 label *label23
   171 op equal *tmp110 .factoryUnit null
   172 jump *label26 equal *tmp110 false
 
   175 set *tmp114 .factory
   176 control config *tmp114 @mono
   177 set :backgroundProcess:lastProgress 0
-    * set *tmp111 :backgroundProcess:lastProgress
   178 jump *label27 always
   179 label *label26
   180 op add *tmp116 :backgroundProcess:factoryProgress 0.1
 
   216 label *label32
   217 set *tmp118 *tmp126
   218 label *label29
-    * set *tmp111 *tmp118
   219 label *label27
   220 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
   221 op greaterThan *tmp139 :backgroundProcess:lastRecoProgress *tmp138
 
   225 call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
   226 label *label35
   227 set :backgroundProcess:lastRecoProgress 0
-    * set *tmp140 :backgroundProcess:lastRecoProgress
   228 jump *label34 always
   229 label *label33
   230 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
-    * set *tmp140 :backgroundProcess:lastRecoProgress
   231 label *label34
   232 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
   233 op greaterThan *tmp142 :backgroundProcess:lastMultiProgress *tmp141
 
   237 call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
   238 label *label38
   239 set :backgroundProcess:lastMultiProgress 0
-    * set *tmp143 :backgroundProcess:lastMultiProgress
   240 jump *label37 always
   241 label *label36
   242 set :backgroundProcess:lastMultiProgress :backgroundProcess:multiReconstructorProgress
-    * set *tmp143 :backgroundProcess:lastMultiProgress
   243 label *label37
   244 sensor *tmp144 .generator2 @coal
   245 op mul *tmp145 5 .generator2
 
   248 set *tmp148 .unloader2
   249 control config *tmp148 @coal
   250 jump *label5 always
-    * set *tmp147 null
   251 jump *label40 always
   252 label *label39
-    * set *tmp147 null
   253 label *label40
   254 set *tmp150 .unloader4
   255 op greaterThan *tmp152 :backgroundProcess:coreSilicon .siliconReserve
 
   267 jump *label41 equal *tmp161 false
   268 set *tmp163 .unloader2
   269 control config *tmp163 @lead
-    * set *tmp162 @lead
   270 jump *label42 always
   271 label *label41
   272 op greaterThan *tmp165 :backgroundProcess:coreSilicon .siliconReserve
 
   280 control config *tmp169 @coal
   281 set *tmp166 @coal
   282 label *label44
-    * set *tmp162 *tmp166
   283 label *label42
   284 set *tmp171 .unloader6
   285 sensor *tmp173 .multiReconstructor @silicon
 
   326 op add *tmp192 .flares 1
   327 set .flares *tmp192
   328 write *tmp192 .display ".flares"
-    * set *tmp190 *tmp192
   329 jump *label52 always
   330 label *label53
   331 jump *label56 equal :factoryUnitFinished:unit @mono
 
   334 op add *tmp193 .monos 1
   335 set .monos *tmp193
   336 write *tmp193 .display ".monos"
-    * set *tmp190 *tmp193
   337 jump *label52 always
   338 label *label55
   339 jump *label58 equal :factoryUnitFinished:unit @poly
 
   342 op add *tmp194 .polys 1
   343 set .polys *tmp194
   344 write *tmp194 .display ".polys"
-    * set *tmp190 *tmp194
   345 jump *label52 always
   346 label *label57
   347 jump *label60 equal :factoryUnitFinished:unit @mega
 
   350 op add *tmp195 .megas 1
   351 set .megas *tmp195
   352 write *tmp195 .display ".megas"
-    * set *tmp190 *tmp195
   353 jump *label52 always
   354 label *label59
-    * set *tmp190 null
   355 label *label52
   356 write true .display ".unitReset"
   357 set .factoryDone 0
-    * set *tmp181 .factoryDone
   358 jump *label49 always
   359 label *label48
   360 jump *label63 equal :factoryUnitFinished:unit @flare
 
   367 label *label62
   368 set *tmp196 null
   369 label *label61
-    * set *tmp181 *tmp196
   370 label *label49
   371 label *label47
   372 return :factoryUnitFinished*retaddr

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-9 instructions):
 
    90 set *tmp81 .targetUnit
    91 control config *tmp79 *tmp81
    92 set :backgroundProcess:blockFactory false
-    * set *tmp78 :backgroundProcess:blockFactory
    93 jump *label14 always
    94 label *label13
    95 op lessThan *tmp82 .polys .polyTarget
 
   149 label *label20
   150 set *tmp83 *tmp96
   151 label *label16
-    * set *tmp78 *tmp83
   152 label *label14
   153 label *label12
   154 set :fuzzyUpdate:value :backgroundProcess:power
 
   163 set :updateIfSmaller.1:b :fuzzyUpdate:value
   164 set :updateIfSmaller.1:newValue true
   165 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
-    * set *tmp109 null
   166 label *label25
   167 label *label23
   168 op equal *tmp110 .factoryUnit null
 
   186 call *label0 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
   187 label *label30
   188 set :backgroundProcess:lastProgress 0
-    * set *tmp118 :backgroundProcess:lastProgress
   189 jump *label29 always
   190 label *label28
   191 set *tmp123 .factory
 
   210 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
   211 set *tmp126 :backgroundProcess:lastProgress
   212 label *label32
-    * set *tmp118 *tmp126
   213 label *label29
   214 label *label27
   215 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
 
   268 jump *label43 equal *tmp165 false
   269 set *tmp167 .unloader2
   270 control config *tmp167 @silicon
-    * set *tmp166 @silicon
   271 jump *label44 always
   272 label *label43
   273 set *tmp169 .unloader2
   274 control config *tmp169 @coal
-    * set *tmp166 @coal
   275 label *label44
   276 label *label42
   277 set *tmp171 .unloader6
 
   355 jump *label62 always
   356 label *label63
   357 set .factoryDone 1
-    * set *tmp196 .factoryDone
   358 jump *label61 always
   359 label *label62
-    * set *tmp196 null
   360 label *label61
   361 label *label49
   362 label *label47

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-4 instructions):
 
   114 op mul *tmp93 *tmp92 :backgroundProcess:factoryProgress
   115 op greaterThan *tmp94 *tmp93 :backgroundProcess:reconstructorProgress
   116 set :backgroundProcess:blockFactory *tmp94
-    * set *tmp83 :backgroundProcess:blockFactory
   117 jump *label16 always
   118 label *label15
   119 op lessThan *tmp95 .megas .megaTarget
 
   146 set :backgroundProcess:blockFactory false
   147 set *tmp96 :backgroundProcess:blockFactory
   148 label *label20
-    * set *tmp83 *tmp96
   149 label *label16
   150 label *label14
   151 label *label12
 
   198 set *tmp133 .factoryUnit
   199 control config *tmp131 *tmp133
   200 set :backgroundProcess:lastProgress 0
-    * set *tmp126 :backgroundProcess:lastProgress
   201 jump *label32 always
   202 label *label31
   203 set *tmp134 .factory
 
   205 op land *tmp137 :backgroundProcess:enableFactory *tmp136
   206 control enabled *tmp134 *tmp137
   207 set :backgroundProcess:lastProgress :backgroundProcess:factoryProgress
-    * set *tmp126 :backgroundProcess:lastProgress
   208 label *label32
   209 label *label29
   210 label *label27

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   137 set *tmp106 .targetUnit
   138 control config *tmp104 *tmp106
   139 set :backgroundProcess:blockFactory false
-    * set *tmp96 :backgroundProcess:blockFactory
   140 jump *label20 always
   141 label *label19
   142 set .factoryUnit null
   143 set .targetUnit null
   144 write null .display ".nextUnit"
   145 set :backgroundProcess:blockFactory false
-    * set *tmp96 :backgroundProcess:blockFactory
   146 label *label20
   147 label *label16
   148 label *label14

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-25 instructions):
 
    22 label *label4
    23 jump *label6 equal true false
    24 set :backgroundProcess:ticks @tick
-    * sensor *tmp36 .core @silicon
-    * set :backgroundProcess:coreSilicon *tmp36
-    * sensor *tmp37 .core @graphite
-    * set :backgroundProcess:coreGraphite *tmp37
+   25 sensor :backgroundProcess:coreSilicon .core @silicon
+   26 sensor :backgroundProcess:coreGraphite .core @graphite
    27 set *tmp38 .smelter2
    28 set *tmp40 .smelter
    29 op lessThan *tmp42 :backgroundProcess:coreSilicon .smelterTarget
 
    42 op lessThan *tmp54 *tmp53 .kilnTarget
    43 control enabled *tmp51 *tmp54
    44 jump *label7 equal .smelter2 false
-    * set *tmp56 .unloader1
-    * control config *tmp56 @coal
+   45 control config .unloader1 @coal
    46 jump *label8 always
    47 label *label7
    48 label *label8
-    * sensor *tmp58 .battery @totalPower
-    * set :backgroundProcess:power *tmp58
+   49 sensor :backgroundProcess:power .battery @totalPower
    50 jump *label9 equal .generator2 false
    51 set *tmp60 .generator
    52 op lessThan *tmp62 :backgroundProcess:power 10
 
    60 op lessThan *tmp68 :backgroundProcess:power 800
    61 control enabled *tmp66 *tmp68
    62 label *label10
-    * sensor *tmp69 .factory @progress
-    * set :backgroundProcess:factoryProgress *tmp69
-    * sensor *tmp70 .reconstructor @progress
-    * set :backgroundProcess:reconstructorProgress *tmp70
-    * sensor *tmp71 .multiReconstructor @progress
-    * set :backgroundProcess:multiReconstructorProgress *tmp71
+   63 sensor :backgroundProcess:factoryProgress .factory @progress
+   64 sensor :backgroundProcess:reconstructorProgress .reconstructor @progress
+   65 sensor :backgroundProcess:multiReconstructorProgress .multiReconstructor @progress
    66 op lessThan *tmp72 .flares .flareTarget
    67 jump *label11 equal *tmp72 false
    68 set .factoryUnit @flare
    69 set .targetUnit @flare
    70 write @flare .display ".nextUnit"
    71 set *tmp74 .payloadRouter
-    * set *tmp76 .targetUnit
-    * control config *tmp74 *tmp76
+   72 control config *tmp74 .targetUnit
    73 set :backgroundProcess:blockFactory false
    74 jump *label12 always
    75 label *label11
 
    79 set .targetUnit @mono
    80 write @mono .display ".nextUnit"
    81 set *tmp79 .payloadRouter
-    * set *tmp81 .targetUnit
-    * control config *tmp79 *tmp81
+   82 control config *tmp79 .targetUnit
    83 set :backgroundProcess:blockFactory false
    84 jump *label14 always
    85 label *label13
 
    96 set .factoryUnit *tmp86
    97 set .targetUnit @poly
    98 write @poly .display ".nextUnit"
-    * set *tmp87 .reconstructor
-    * control enabled *tmp87 true
+   99 control enabled .reconstructor true
   100 set *tmp89 .payloadRouter
-    * set *tmp91 .targetUnit
-    * control config *tmp89 *tmp91
+  101 control config *tmp89 .targetUnit
   102 sensor *tmp92 .reconstructor @payloadCount
   103 op mul *tmp93 *tmp92 :backgroundProcess:factoryProgress
-    * op greaterThan *tmp94 *tmp93 :backgroundProcess:reconstructorProgress
-    * set :backgroundProcess:blockFactory *tmp94
+  104 op greaterThan :backgroundProcess:blockFactory *tmp93 :backgroundProcess:reconstructorProgress
   105 jump *label16 always
   106 label *label15
   107 op lessThan *tmp95 .megas .megaTarget
 
   121 op lessThan *tmp102 :backgroundProcess:reconstructorProgress 0.75
   122 op or *tmp103 .multiReconstructor *tmp102
   123 control enabled *tmp100 *tmp103
-    * set *tmp104 .payloadRouter
-    * set *tmp106 .targetUnit
-    * control config *tmp104 *tmp106
+  124 control config .payloadRouter .targetUnit
   125 set :backgroundProcess:blockFactory false
   126 jump *label20 always
   127 label *label19
 
   149 label *label23
   150 op equal *tmp110 .factoryUnit null
   151 jump *label26 equal *tmp110 false
-    * set *tmp112 .factory
-    * control enabled *tmp112 false
-    * set *tmp114 .factory
-    * control config *tmp114 @mono
+  152 control enabled .factory false
+  153 control config .factory @mono
   154 set :backgroundProcess:lastProgress 0
   155 jump *label27 always
   156 label *label26
 
   168 set :backgroundProcess:lastProgress 0
   169 jump *label29 always
   170 label *label28
-    * set *tmp123 .factory
-    * sensor *tmp124 *tmp123 @config
+  171 sensor *tmp124 .factory @config
   172 op notEqual *tmp125 *tmp124 .factoryUnit
   173 jump *label31 equal *tmp125 false
   174 set *tmp127 .factory
 
   176 op land *tmp130 :backgroundProcess:enableFactory *tmp129
   177 control enabled *tmp127 *tmp130
   178 set *tmp131 .factory
-    * set *tmp133 .factoryUnit
-    * control config *tmp131 *tmp133
+  179 control config *tmp131 .factoryUnit
   180 set :backgroundProcess:lastProgress 0
   181 jump *label32 always
   182 label *label31
 
   216 op mul *tmp145 5 .generator2
   217 op lessThan *tmp146 *tmp144 *tmp145
   218 jump *label39 equal *tmp146 false
-    * set *tmp148 .unloader2
-    * control config *tmp148 @coal
+  219 control config .unloader2 @coal
   220 jump *label5 always
   221 jump *label40 always
   222 label *label39
 
   227 op land *tmp154 *tmp152 *tmp153
   228 control enabled *tmp150 *tmp154
   229 op equal *tmp155 .factoryUnit @mono
-    * op mul *tmp156 *tmp155 30
-    * set :backgroundProcess:leadLimit *tmp156
+  230 op mul :backgroundProcess:leadLimit *tmp155 30
   231 sensor *tmp157 .factory @lead
   232 op lessThan *tmp158 *tmp157 :backgroundProcess:leadLimit
   233 sensor *tmp159 .core @lead
   234 op greaterThan *tmp160 *tmp159 .leadReserve
   235 op land *tmp161 *tmp158 *tmp160
   236 jump *label41 equal *tmp161 false
-    * set *tmp163 .unloader2
-    * control config *tmp163 @lead
+  237 control config .unloader2 @lead
   238 jump *label42 always
   239 label *label41
   240 op greaterThan *tmp165 :backgroundProcess:coreSilicon .siliconReserve
   241 jump *label43 equal *tmp165 false
-    * set *tmp167 .unloader2
-    * control config *tmp167 @silicon
+  242 control config .unloader2 @silicon
   243 jump *label44 always
   244 label *label43
-    * set *tmp169 .unloader2
-    * control config *tmp169 @coal
+  245 control config .unloader2 @coal
   246 label *label44
   247 label *label42
   248 set *tmp171 .unloader6
 
   258 set *tmp178 @silicon
   259 label *label46
   260 control config *tmp171 *tmp178
-    * op sub *tmp179 @tick :backgroundProcess:ticks
-    * set .loopTicks *tmp179
+  261 op sub .loopTicks @tick :backgroundProcess:ticks
   262 label *label5
   263 jump *label4 always
   264 label *label6
 
   271 jump *label48 equal *tmp180 false
   272 set :logUnit:unit :factoryUnitFinished:unit
   273 sensor *tmp182 :logUnit:unit @id
-    * op add *tmp183 @blockCount *tmp182
-    * set :log:encodedId *tmp183
+  274 op add :log:encodedId @blockCount *tmp182
   275 read *tmp35 .bank 511
   276 op sub *tmp184 *tmp35 1
   277 write *tmp184 .bank 511

Modifications by Initial phase, Temp Variables Elimination, iteration 2 (-4 instructions):
 
    68 set .factoryUnit @flare
    69 set .targetUnit @flare
    70 write @flare .display ".nextUnit"
-    * set *tmp74 .payloadRouter
-    * control config *tmp74 .targetUnit
+   71 control config .payloadRouter .targetUnit
    72 set :backgroundProcess:blockFactory false
    73 jump *label12 always
    74 label *label11
 
    77 set .factoryUnit @mono
    78 set .targetUnit @mono
    79 write @mono .display ".nextUnit"
-    * set *tmp79 .payloadRouter
-    * control config *tmp79 .targetUnit
+   80 control config .payloadRouter .targetUnit
    81 set :backgroundProcess:blockFactory false
    82 jump *label14 always
    83 label *label13
 
    95 set .targetUnit @poly
    96 write @poly .display ".nextUnit"
    97 control enabled .reconstructor true
-    * set *tmp89 .payloadRouter
-    * control config *tmp89 .targetUnit
+   98 control config .payloadRouter .targetUnit
    99 sensor *tmp92 .reconstructor @payloadCount
   100 op mul *tmp93 *tmp92 :backgroundProcess:factoryProgress
   101 op greaterThan :backgroundProcess:blockFactory *tmp93 :backgroundProcess:reconstructorProgress
 
   172 op equal *tmp129 :backgroundProcess:blockFactory false
   173 op land *tmp130 :backgroundProcess:enableFactory *tmp129
   174 control enabled *tmp127 *tmp130
-    * set *tmp131 .factory
-    * control config *tmp131 .factoryUnit
+  175 control config .factory .factoryUnit
   176 set :backgroundProcess:lastProgress 0
   177 jump *label32 always
   178 label *label31

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
    20 set :backgroundProcess:enableFactory true
    21 set :backgroundProcess:blockFactory false
    22 label *label4
-    * jump *label6 equal true false
    23 set :backgroundProcess:ticks @tick
    24 sensor :backgroundProcess:coreSilicon .core @silicon
    25 sensor :backgroundProcess:coreGraphite .core @graphite

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-5 instructions):
 
   277 write *tmp189 .bank *tmp185
   278 label *label51
   279 label *label50
-    * jump *label54 equal :factoryUnitFinished:unit @flare
-    * jump *label53 always
+  280 jump *label53 notEqual :factoryUnitFinished:unit @flare
   281 label *label54
   282 op add *tmp192 .flares 1
   283 set .flares *tmp192
   284 write *tmp192 .display ".flares"
   285 jump *label52 always
   286 label *label53
-    * jump *label56 equal :factoryUnitFinished:unit @mono
-    * jump *label55 always
+  287 jump *label55 notEqual :factoryUnitFinished:unit @mono
   288 label *label56
   289 op add *tmp193 .monos 1
   290 set .monos *tmp193
   291 write *tmp193 .display ".monos"
   292 jump *label52 always
   293 label *label55
-    * jump *label58 equal :factoryUnitFinished:unit @poly
-    * jump *label57 always
+  294 jump *label57 notEqual :factoryUnitFinished:unit @poly
   295 label *label58
   296 op add *tmp194 .polys 1
   297 set .polys *tmp194
   298 write *tmp194 .display ".polys"
   299 jump *label52 always
   300 label *label57
-    * jump *label60 equal :factoryUnitFinished:unit @mega
-    * jump *label59 always
+  301 jump *label59 notEqual :factoryUnitFinished:unit @mega
   302 label *label60
   303 op add *tmp195 .megas 1
   304 set .megas *tmp195
 
   311 jump *label49 always
   312 label *label48
   313 jump *label63 equal :factoryUnitFinished:unit @flare
-    * jump *label63 equal :factoryUnitFinished:unit @mono
-    * jump *label62 always
+  314 jump *label62 notEqual :factoryUnitFinished:unit @mono
   315 label *label63
   316 set .factoryDone 1
   317 jump *label61 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-14 instructions):
 
    62 sensor :backgroundProcess:factoryProgress .factory @progress
    63 sensor :backgroundProcess:reconstructorProgress .reconstructor @progress
    64 sensor :backgroundProcess:multiReconstructorProgress .multiReconstructor @progress
-    * op lessThan *tmp72 .flares .flareTarget
-    * jump *label11 equal *tmp72 false
+   65 jump *label11 greaterThanEq .flares .flareTarget
    66 set .factoryUnit @flare
    67 set .targetUnit @flare
    68 write @flare .display ".nextUnit"
 
    70 set :backgroundProcess:blockFactory false
    71 jump *label12 always
    72 label *label11
-    * op lessThan *tmp77 .monos .monoTarget
-    * jump *label13 equal *tmp77 false
+   73 jump *label13 greaterThanEq .monos .monoTarget
    74 set .factoryUnit @mono
    75 set .targetUnit @mono
    76 write @mono .display ".nextUnit"
 
    78 set :backgroundProcess:blockFactory false
    79 jump *label14 always
    80 label *label13
-    * op lessThan *tmp82 .polys .polyTarget
-    * jump *label15 equal *tmp82 false
+   81 jump *label15 greaterThanEq .polys .polyTarget
    82 op add *tmp84 .factoryDone .polys
-    * op lessThan *tmp85 *tmp84 .polyTarget
-    * jump *label17 equal *tmp85 false
+   83 jump *label17 greaterThanEq *tmp84 .polyTarget
    84 set *tmp86 @mono
    85 jump *label18 always
    86 label *label17
 
    96 op greaterThan :backgroundProcess:blockFactory *tmp93 :backgroundProcess:reconstructorProgress
    97 jump *label16 always
    98 label *label15
-    * op lessThan *tmp95 .megas .megaTarget
-    * jump *label19 equal *tmp95 false
+   99 jump *label19 greaterThanEq .megas .megaTarget
   100 op add *tmp97 .factoryDone .megas
-    * op lessThan *tmp98 *tmp97 .megaTarget
-    * jump *label21 equal *tmp98 false
+  101 jump *label21 greaterThanEq *tmp97 .megaTarget
   102 set *tmp99 @mono
   103 jump *label22 always
   104 label *label21
 
   137 select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
   138 label *label25
   139 label *label23
-    * op equal *tmp110 .factoryUnit null
-    * jump *label26 equal *tmp110 false
+  140 jump *label26 notEqual .factoryUnit null
   141 control enabled .factory false
   142 control config .factory @mono
   143 set :backgroundProcess:lastProgress 0
   144 jump *label27 always
   145 label *label26
   146 op add *tmp116 :backgroundProcess:factoryProgress 0.1
-    * op greaterThan *tmp117 :backgroundProcess:lastProgress *tmp116
-    * jump *label28 equal *tmp117 false
+  147 jump *label28 lessThanEq :backgroundProcess:lastProgress *tmp116
   148 set *tmp119 .factory
   149 op equal *tmp121 :backgroundProcess:blockFactory false
   150 op land *tmp122 :backgroundProcess:enableFactory *tmp121
 
   157 jump *label29 always
   158 label *label28
   159 sensor *tmp124 .factory @config
-    * op notEqual *tmp125 *tmp124 .factoryUnit
-    * jump *label31 equal *tmp125 false
+  160 jump *label31 equal *tmp124 .factoryUnit
   161 set *tmp127 .factory
   162 op equal *tmp129 :backgroundProcess:blockFactory false
   163 op land *tmp130 :backgroundProcess:enableFactory *tmp129
 
   175 label *label29
   176 label *label27
   177 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
-    * op greaterThan *tmp139 :backgroundProcess:lastRecoProgress *tmp138
-    * jump *label33 equal *tmp139 false
+  178 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
   179 set :factoryUnitFinished:unit @poly
   180 setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
   181 call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
 
   186 set :backgroundProcess:lastRecoProgress :backgroundProcess:reconstructorProgress
   187 label *label34
   188 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
-    * op greaterThan *tmp142 :backgroundProcess:lastMultiProgress *tmp141
-    * jump *label36 equal *tmp142 false
+  189 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
   190 set :factoryUnitFinished:unit @mega
   191 setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
   192 call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
 
   198 label *label37
   199 sensor *tmp144 .generator2 @coal
   200 op mul *tmp145 5 .generator2
-    * op lessThan *tmp146 *tmp144 *tmp145
-    * jump *label39 equal *tmp146 false
+  201 jump *label39 greaterThanEq *tmp144 *tmp145
   202 control config .unloader2 @coal
   203 jump *label5 always
   204 jump *label40 always
 
   220 control config .unloader2 @lead
   221 jump *label42 always
   222 label *label41
-    * op greaterThan *tmp165 :backgroundProcess:coreSilicon .siliconReserve
-    * jump *label43 equal *tmp165 false
+  223 jump *label43 lessThanEq :backgroundProcess:coreSilicon .siliconReserve
   224 control config .unloader2 @silicon
   225 jump *label44 always
   226 label *label43
 
   249 jump *label2 always
   250 end
   251 label *label0
-    * op equal *tmp180 :factoryUnitFinished:unit .targetUnit
-    * jump *label48 equal *tmp180 false
+  252 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
   253 set :logUnit:unit :factoryUnitFinished:unit
   254 sensor *tmp182 :logUnit:unit @id
   255 op add :log:encodedId @blockCount *tmp182

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-4 instructions):
 
    42 control enabled *tmp51 *tmp54
    43 jump *label7 equal .smelter2 false
    44 control config .unloader1 @coal
-    * jump *label8 always
    45 label *label7
    46 label *label8
    47 sensor :backgroundProcess:power .battery @totalPower
 
   200 jump *label39 greaterThanEq *tmp144 *tmp145
   201 control config .unloader2 @coal
   202 jump *label5 always
-    * jump *label40 always
   203 label *label39
   204 label *label40
   205 set *tmp150 .unloader4
 
   287 op add *tmp195 .megas 1
   288 set .megas *tmp195
   289 write *tmp195 .display ".megas"
-    * jump *label52 always
   290 label *label59
   291 label *label52
   292 write true .display ".unitReset"
 
   297 jump *label62 notEqual :factoryUnitFinished:unit @mono
   298 label *label63
   299 set .factoryDone 1
-    * jump *label61 always
   300 label *label62
   301 label *label61
   302 label *label49

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-4 instructions):
 
    12 set *signature "0:v1"
    13 label *label2
    14 set :backgroundProcess:lastProgress 0
-    * set :backgroundProcess:factoryProgress 0
    15 set :backgroundProcess:lastRecoProgress 0
-    * set :backgroundProcess:reconstructorProgress 0
    16 set :backgroundProcess:lastMultiProgress 0
-    * set :backgroundProcess:multiReconstructorProgress 0
    17 set :backgroundProcess:enableFactory true
-    * set :backgroundProcess:blockFactory false
    18 label *label4
    19 set :backgroundProcess:ticks @tick
    20 sensor :backgroundProcess:coreSilicon .core @silicon
 
   121 set :fuzzyUpdate:value :backgroundProcess:power
   122 set :fuzzyUpdate:limitLow 200
   123 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :fuzzyUpdate:value
-    * set :updateIfSmaller:b :fuzzyUpdate:limitLow
+  124 set :updateIfSmaller:a :backgroundProcess:power
+  125 set :updateIfSmaller:b 200
   126 set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller:a :updateIfSmaller:b :updateIfSmaller:newValue :backgroundProcess:enableFactory
+  127 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
   128 label *label24
-    * set :updateIfSmaller.1:a :fuzzyUpdate:limitHigh
-    * set :updateIfSmaller.1:b :fuzzyUpdate:value
+  129 set :updateIfSmaller.1:a 500
+  130 set :updateIfSmaller.1:b :backgroundProcess:power
   131 set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :updateIfSmaller.1:a :updateIfSmaller.1:b :updateIfSmaller.1:newValue :backgroundProcess:enableFactory
+  132 select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
   133 label *label25
   134 label *label23
   135 jump *label26 notEqual .factoryUnit null
 
   245 label *label0
   246 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
   247 set :logUnit:unit :factoryUnitFinished:unit
-    * sensor *tmp182 :logUnit:unit @id
+  248 sensor *tmp182 :factoryUnitFinished:unit @id
   249 op add :log:encodedId @blockCount *tmp182
   250 read *tmp35 .bank 511
   251 op sub *tmp184 *tmp35 1
 
   254 read *tmp187 .timer "time"
   255 op mul *tmp188 *tmp187 1000
   256 op add *tmp189 :log:encodedId *tmp188
-    * write *tmp189 .bank *tmp185
+  257 write *tmp189 .bank *tmp184
   258 label *label51
   259 label *label50
   260 jump *label53 notEqual :factoryUnitFinished:unit @flare

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
   121 set :fuzzyUpdate:value :backgroundProcess:power
   122 set :fuzzyUpdate:limitLow 200
   123 set :fuzzyUpdate:limitHigh 500
-    * set :updateIfSmaller:a :backgroundProcess:power
-    * set :updateIfSmaller:b 200
-    * set :updateIfSmaller:newValue false
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:value :fuzzyUpdate:limitLow false :backgroundProcess:enableFactory
+  124 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   125 label *label24
-    * set :updateIfSmaller.1:a 500
-    * set :updateIfSmaller.1:b :backgroundProcess:power
-    * set :updateIfSmaller.1:newValue true
-    * select :backgroundProcess:enableFactory lessThan :fuzzyUpdate:limitHigh :fuzzyUpdate:value true :backgroundProcess:enableFactory
+  126 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
   127 label *label25
   128 label *label23
   129 jump *label26 notEqual .factoryUnit null
 
   238 end
   239 label *label0
   240 jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
-    * set :logUnit:unit :factoryUnitFinished:unit
   241 sensor *tmp182 :factoryUnitFinished:unit @id
   242 op add :log:encodedId @blockCount *tmp182
   243 read *tmp35 .bank 511
   244 op sub *tmp184 *tmp35 1
   245 write *tmp184 .bank 511
-    * set *tmp185 *tmp184
   246 read *tmp187 .timer "time"
   247 op mul *tmp188 *tmp187 1000
   248 op add *tmp189 :log:encodedId *tmp188

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
   118 label *label16
   119 label *label14
   120 label *label12
-    * set :fuzzyUpdate:value :backgroundProcess:power
-    * set :fuzzyUpdate:limitLow 200
-    * set :fuzzyUpdate:limitHigh 500
   121 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
   122 label *label24
   123 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-9 instructions):
 
    74 jump *label14 always
    75 label *label13
    76 jump *label15 greaterThanEq .polys .polyTarget
-    * op add *tmp84 .factoryDone .polys
-    * jump *label17 greaterThanEq *tmp84 .polyTarget
-    * set *tmp86 @mono
-    * jump *label18 always
-    * label *label17
-    * set *tmp86 null
-    * label *label18
+   77 op add *tmp84 .factoryDone .polys
+   78 select *tmp86 lessThan *tmp84 .polyTarget @mono null
    79 set .factoryUnit *tmp86
    80 set .targetUnit @poly
    81 write @poly .display ".nextUnit"
 
    87 jump *label16 always
    88 label *label15
    89 jump *label19 greaterThanEq .megas .megaTarget
-    * op add *tmp97 .factoryDone .megas
-    * jump *label21 greaterThanEq *tmp97 .megaTarget
-    * set *tmp99 @mono
-    * jump *label22 always
-    * label *label21
-    * set *tmp99 null
-    * label *label22
+   90 op add *tmp97 .factoryDone .megas
+   91 select *tmp99 lessThan *tmp97 .megaTarget @mono null
    92 set .factoryUnit *tmp99
    93 set .targetUnit @mega
    94 write @mega .display ".nextUnit"
 
   203 label *label44
   204 label *label42
   205 set *tmp171 .unloader6
-    * sensor *tmp173 .multiReconstructor @silicon
-    * op greaterThanEq *tmp174 *tmp173 130
-    * sensor *tmp175 .multiReconstructor @titanium
-    * op lessThan *tmp176 *tmp175 80
-    * op land *tmp177 *tmp174 *tmp176
-    * jump *label45 equal *tmp177 false
-    * set *tmp178 @titanium
-    * jump *label46 always
-    * label *label45
-    * set *tmp178 @silicon
-    * label *label46
+  206 sensor *tmp173 .multiReconstructor @silicon
+  207 op greaterThanEq *tmp174 *tmp173 130
+  208 sensor *tmp175 .multiReconstructor @titanium
+  209 op lessThan *tmp176 *tmp175 80
+  210 op land *tmp177 *tmp174 *tmp176
+  211 select *tmp178 notEqual *tmp177 false @titanium @silicon
   212 control config *tmp171 *tmp178
   213 op sub .loopTicks @tick :backgroundProcess:ticks
   214 label *label5

Modifications by Inline function 'factoryUnitFinished' defined at CoreController.mnd:70:1 (+62 instructions):
 
   126 op land *tmp122 :backgroundProcess:enableFactory *tmp121
   127 control enabled *tmp119 *tmp122
   128 set :factoryUnitFinished:unit .factoryUnit
-    * setaddr :factoryUnitFinished*retaddr *label30 (h:*label30)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label30) (h:*label30)
-    * label *label30
+  129 label *label64
+  130 jump *label76 notEqual :factoryUnitFinished:unit .targetUnit
+  131 sensor *tmp182 :factoryUnitFinished:unit @id
+  132 op add :log:encodedId @blockCount *tmp182
+  133 read *tmp35 .bank 511
+  134 op sub *tmp184 *tmp35 1
+  135 write *tmp184 .bank 511
+  136 read *tmp187 .timer "time"
+  137 op mul *tmp188 *tmp187 1000
+  138 op add *tmp189 :log:encodedId *tmp188
+  139 write *tmp189 .bank *tmp184
+  140 label *label65
+  141 label *label66
+  142 jump *label68 notEqual :factoryUnitFinished:unit @flare
+  143 label *label67
+  144 op add *tmp192 .flares 1
+  145 set .flares *tmp192
+  146 write *tmp192 .display ".flares"
+  147 jump *label75 always
+  148 label *label68
+  149 jump *label70 notEqual :factoryUnitFinished:unit @mono
+  150 label *label69
+  151 op add *tmp193 .monos 1
+  152 set .monos *tmp193
+  153 write *tmp193 .display ".monos"
+  154 jump *label75 always
+  155 label *label70
+  156 jump *label72 notEqual :factoryUnitFinished:unit @poly
+  157 label *label71
+  158 op add *tmp194 .polys 1
+  159 set .polys *tmp194
+  160 write *tmp194 .display ".polys"
+  161 jump *label75 always
+  162 label *label72
+  163 jump *label74 notEqual :factoryUnitFinished:unit @mega
+  164 label *label73
+  165 op add *tmp195 .megas 1
+  166 set .megas *tmp195
+  167 write *tmp195 .display ".megas"
+  168 label *label74
+  169 label *label75
+  170 write true .display ".unitReset"
+  171 set .factoryDone 0
+  172 jump *label80 always
+  173 label *label76
+  174 jump *label77 equal :factoryUnitFinished:unit @flare
+  175 jump *label78 notEqual :factoryUnitFinished:unit @mono
+  176 label *label77
+  177 set .factoryDone 1
+  178 label *label78
+  179 label *label79
+  180 label *label80
+  181 label *label81
   182 set :backgroundProcess:lastProgress 0
   183 jump *label29 always
   184 label *label28
 
   203 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
   204 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
   205 set :factoryUnitFinished:unit @poly
-    * setaddr :factoryUnitFinished*retaddr *label35 (h:*label35)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label35) (h:*label35)
-    * label *label35
+  206 label *label82
+  207 jump *label94 notEqual :factoryUnitFinished:unit .targetUnit
+  208 sensor *tmp182 :factoryUnitFinished:unit @id
+  209 op add :log:encodedId @blockCount *tmp182
+  210 read *tmp35 .bank 511
+  211 op sub *tmp184 *tmp35 1
+  212 write *tmp184 .bank 511
+  213 read *tmp187 .timer "time"
+  214 op mul *tmp188 *tmp187 1000
+  215 op add *tmp189 :log:encodedId *tmp188
+  216 write *tmp189 .bank *tmp184
+  217 label *label83
+  218 label *label84
+  219 jump *label86 notEqual :factoryUnitFinished:unit @flare
+  220 label *label85
+  221 op add *tmp192 .flares 1
+  222 set .flares *tmp192
+  223 write *tmp192 .display ".flares"
+  224 jump *label93 always
+  225 label *label86
+  226 jump *label88 notEqual :factoryUnitFinished:unit @mono
+  227 label *label87
+  228 op add *tmp193 .monos 1
+  229 set .monos *tmp193
+  230 write *tmp193 .display ".monos"
+  231 jump *label93 always
+  232 label *label88
+  233 jump *label90 notEqual :factoryUnitFinished:unit @poly
+  234 label *label89
+  235 op add *tmp194 .polys 1
+  236 set .polys *tmp194
+  237 write *tmp194 .display ".polys"
+  238 jump *label93 always
+  239 label *label90
+  240 jump *label92 notEqual :factoryUnitFinished:unit @mega
+  241 label *label91
+  242 op add *tmp195 .megas 1
+  243 set .megas *tmp195
+  244 write *tmp195 .display ".megas"
+  245 label *label92
+  246 label *label93
+  247 write true .display ".unitReset"
+  248 set .factoryDone 0
+  249 jump *label98 always
+  250 label *label94
+  251 jump *label95 equal :factoryUnitFinished:unit @flare
+  252 jump *label96 notEqual :factoryUnitFinished:unit @mono
+  253 label *label95
+  254 set .factoryDone 1
+  255 label *label96
+  256 label *label97
+  257 label *label98
+  258 label *label99
   259 set :backgroundProcess:lastRecoProgress 0
   260 jump *label34 always
   261 label *label33
 
   264 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
   265 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
   266 set :factoryUnitFinished:unit @mega
-    * setaddr :factoryUnitFinished*retaddr *label38 (h:*label38)
-    * call *label0 *invalid :factoryUnitFinished*retval (m:*label38) (h:*label38)
-    * label *label38
+  267 label *label100
+  268 jump *label112 notEqual :factoryUnitFinished:unit .targetUnit
+  269 sensor *tmp182 :factoryUnitFinished:unit @id
+  270 op add :log:encodedId @blockCount *tmp182
+  271 read *tmp35 .bank 511
+  272 op sub *tmp184 *tmp35 1
+  273 write *tmp184 .bank 511
+  274 read *tmp187 .timer "time"
+  275 op mul *tmp188 *tmp187 1000
+  276 op add *tmp189 :log:encodedId *tmp188
+  277 write *tmp189 .bank *tmp184
+  278 label *label101
+  279 label *label102
+  280 jump *label104 notEqual :factoryUnitFinished:unit @flare
+  281 label *label103
+  282 op add *tmp192 .flares 1
+  283 set .flares *tmp192
+  284 write *tmp192 .display ".flares"
+  285 jump *label111 always
+  286 label *label104
+  287 jump *label106 notEqual :factoryUnitFinished:unit @mono
+  288 label *label105
+  289 op add *tmp193 .monos 1
+  290 set .monos *tmp193
+  291 write *tmp193 .display ".monos"
+  292 jump *label111 always
+  293 label *label106
+  294 jump *label108 notEqual :factoryUnitFinished:unit @poly
+  295 label *label107
+  296 op add *tmp194 .polys 1
+  297 set .polys *tmp194
+  298 write *tmp194 .display ".polys"
+  299 jump *label111 always
+  300 label *label108
+  301 jump *label110 notEqual :factoryUnitFinished:unit @mega
+  302 label *label109
+  303 op add *tmp195 .megas 1
+  304 set .megas *tmp195
+  305 write *tmp195 .display ".megas"
+  306 label *label110
+  307 label *label111
+  308 write true .display ".unitReset"
+  309 set .factoryDone 0
+  310 jump *label116 always
+  311 label *label112
+  312 jump *label113 equal :factoryUnitFinished:unit @flare
+  313 jump *label114 notEqual :factoryUnitFinished:unit @mono
+  314 label *label113
+  315 set .factoryDone 1
+  316 label *label114
+  317 label *label115
+  318 label *label116
+  319 label *label117
   320 set :backgroundProcess:lastMultiProgress 0
   321 jump *label37 always
   322 label *label36
 
   368 wait 1e12
   369 jump *label2 always
   370 end
-    * label *label0
-    * jump *label48 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp182 :factoryUnitFinished:unit @id
-    * op add :log:encodedId @blockCount *tmp182
-    * read *tmp35 .bank 511
-    * op sub *tmp184 *tmp35 1
-    * write *tmp184 .bank 511
-    * read *tmp187 .timer "time"
-    * op mul *tmp188 *tmp187 1000
-    * op add *tmp189 :log:encodedId *tmp188
-    * write *tmp189 .bank *tmp184
-    * label *label51
-    * label *label50
-    * jump *label53 notEqual :factoryUnitFinished:unit @flare
-    * label *label54
-    * op add *tmp192 .flares 1
-    * set .flares *tmp192
-    * write *tmp192 .display ".flares"
-    * jump *label52 always
-    * label *label53
-    * jump *label55 notEqual :factoryUnitFinished:unit @mono
-    * label *label56
-    * op add *tmp193 .monos 1
-    * set .monos *tmp193
-    * write *tmp193 .display ".monos"
-    * jump *label52 always
-    * label *label55
-    * jump *label57 notEqual :factoryUnitFinished:unit @poly
-    * label *label58
-    * op add *tmp194 .polys 1
-    * set .polys *tmp194
-    * write *tmp194 .display ".polys"
-    * jump *label52 always
-    * label *label57
-    * jump *label59 notEqual :factoryUnitFinished:unit @mega
-    * label *label60
-    * op add *tmp195 .megas 1
-    * set .megas *tmp195
-    * write *tmp195 .display ".megas"
-    * label *label59
-    * label *label52
-    * write true .display ".unitReset"
-    * set .factoryDone 0
-    * jump *label49 always
-    * label *label48
-    * jump *label63 equal :factoryUnitFinished:unit @flare
-    * jump *label62 notEqual :factoryUnitFinished:unit @mono
-    * label *label63
-    * set .factoryDone 1
-    * label *label62
-    * label *label61
-    * label *label49
-    * label *label47
-    * return :factoryUnitFinished*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   204 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
   205 set :factoryUnitFinished:unit @poly
   206 label *label82
-    * jump *label94 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp182 :factoryUnitFinished:unit @id
+  207 jump *label94 notEqual @poly .targetUnit
+  208 sensor *tmp182 @poly @id
   209 op add :log:encodedId @blockCount *tmp182
   210 read *tmp35 .bank 511
   211 op sub *tmp184 *tmp35 1
 
   216 write *tmp189 .bank *tmp184
   217 label *label83
   218 label *label84
-    * jump *label86 notEqual :factoryUnitFinished:unit @flare
+  219 jump *label86 notEqual @poly @flare
   220 label *label85
   221 op add *tmp192 .flares 1
   222 set .flares *tmp192
   223 write *tmp192 .display ".flares"
   224 jump *label93 always
   225 label *label86
-    * jump *label88 notEqual :factoryUnitFinished:unit @mono
+  226 jump *label88 notEqual @poly @mono
   227 label *label87
   228 op add *tmp193 .monos 1
   229 set .monos *tmp193
   230 write *tmp193 .display ".monos"
   231 jump *label93 always
   232 label *label88
-    * jump *label90 notEqual :factoryUnitFinished:unit @poly
+  233 jump *label90 notEqual @poly @poly
   234 label *label89
   235 op add *tmp194 .polys 1
   236 set .polys *tmp194
   237 write *tmp194 .display ".polys"
   238 jump *label93 always
   239 label *label90
-    * jump *label92 notEqual :factoryUnitFinished:unit @mega
+  240 jump *label92 notEqual @poly @mega
   241 label *label91
   242 op add *tmp195 .megas 1
   243 set .megas *tmp195
 
   248 set .factoryDone 0
   249 jump *label98 always
   250 label *label94
-    * jump *label95 equal :factoryUnitFinished:unit @flare
-    * jump *label96 notEqual :factoryUnitFinished:unit @mono
+  251 jump *label95 equal @poly @flare
+  252 jump *label96 notEqual @poly @mono
   253 label *label95
   254 set .factoryDone 1
   255 label *label96
 
   265 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
   266 set :factoryUnitFinished:unit @mega
   267 label *label100
-    * jump *label112 notEqual :factoryUnitFinished:unit .targetUnit
-    * sensor *tmp182 :factoryUnitFinished:unit @id
+  268 jump *label112 notEqual @mega .targetUnit
+  269 sensor *tmp182 @mega @id
   270 op add :log:encodedId @blockCount *tmp182
   271 read *tmp35 .bank 511
   272 op sub *tmp184 *tmp35 1
 
   277 write *tmp189 .bank *tmp184
   278 label *label101
   279 label *label102
-    * jump *label104 notEqual :factoryUnitFinished:unit @flare
+  280 jump *label104 notEqual @mega @flare
   281 label *label103
   282 op add *tmp192 .flares 1
   283 set .flares *tmp192
   284 write *tmp192 .display ".flares"
   285 jump *label111 always
   286 label *label104
-    * jump *label106 notEqual :factoryUnitFinished:unit @mono
+  287 jump *label106 notEqual @mega @mono
   288 label *label105
   289 op add *tmp193 .monos 1
   290 set .monos *tmp193
   291 write *tmp193 .display ".monos"
   292 jump *label111 always
   293 label *label106
-    * jump *label108 notEqual :factoryUnitFinished:unit @poly
+  294 jump *label108 notEqual @mega @poly
   295 label *label107
   296 op add *tmp194 .polys 1
   297 set .polys *tmp194
   298 write *tmp194 .display ".polys"
   299 jump *label111 always
   300 label *label108
-    * jump *label110 notEqual :factoryUnitFinished:unit @mega
+  301 jump *label110 notEqual @mega @mega
   302 label *label109
   303 op add *tmp195 .megas 1
   304 set .megas *tmp195
 
   309 set .factoryDone 0
   310 jump *label116 always
   311 label *label112
-    * jump *label113 equal :factoryUnitFinished:unit @flare
-    * jump *label114 notEqual :factoryUnitFinished:unit @mono
+  312 jump *label113 equal @mega @flare
+  313 jump *label114 notEqual @mega @mono
   314 label *label113
   315 set .factoryDone 1
   316 label *label114

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
   202 label *label27
   203 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
   204 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
-    * set :factoryUnitFinished:unit @poly
   205 label *label82
   206 jump *label94 notEqual @poly .targetUnit
   207 sensor *tmp182 @poly @id
 
   262 label *label34
   263 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
   264 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
-    * set :factoryUnitFinished:unit @mega
   265 label *label100
   266 jump *label112 notEqual @mega .targetUnit
   267 sensor *tmp182 @mega @id

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-4 instructions):
 
   215 write *tmp189 .bank *tmp184
   216 label *label83
   217 label *label84
-    * jump *label86 notEqual @poly @flare
+  218 jump *label86 always
   219 label *label85
   220 op add *tmp192 .flares 1
   221 set .flares *tmp192
   222 write *tmp192 .display ".flares"
   223 jump *label93 always
   224 label *label86
-    * jump *label88 notEqual @poly @mono
+  225 jump *label88 always
   226 label *label87
   227 op add *tmp193 .monos 1
   228 set .monos *tmp193
   229 write *tmp193 .display ".monos"
   230 jump *label93 always
   231 label *label88
-    * jump *label90 notEqual @poly @poly
   232 label *label89
   233 op add *tmp194 .polys 1
   234 set .polys *tmp194
   235 write *tmp194 .display ".polys"
   236 jump *label93 always
   237 label *label90
-    * jump *label92 notEqual @poly @mega
+  238 jump *label92 always
   239 label *label91
   240 op add *tmp195 .megas 1
   241 set .megas *tmp195
 
   246 set .factoryDone 0
   247 jump *label98 always
   248 label *label94
-    * jump *label95 equal @poly @flare
-    * jump *label96 notEqual @poly @mono
+  249 jump *label96 always
   250 label *label95
   251 set .factoryDone 1
   252 label *label96
 
   273 write *tmp189 .bank *tmp184
   274 label *label101
   275 label *label102
-    * jump *label104 notEqual @mega @flare
+  276 jump *label104 always
   277 label *label103
   278 op add *tmp192 .flares 1
   279 set .flares *tmp192
   280 write *tmp192 .display ".flares"
   281 jump *label111 always
   282 label *label104
-    * jump *label106 notEqual @mega @mono
+  283 jump *label106 always
   284 label *label105
   285 op add *tmp193 .monos 1
   286 set .monos *tmp193
   287 write *tmp193 .display ".monos"
   288 jump *label111 always
   289 label *label106
-    * jump *label108 notEqual @mega @poly
+  290 jump *label108 always
   291 label *label107
   292 op add *tmp194 .polys 1
   293 set .polys *tmp194
   294 write *tmp194 .display ".polys"
   295 jump *label111 always
   296 label *label108
-    * jump *label110 notEqual @mega @mega
   297 label *label109
   298 op add *tmp195 .megas 1
   299 set .megas *tmp195
 
   304 set .factoryDone 0
   305 jump *label116 always
   306 label *label112
-    * jump *label113 equal @mega @flare
-    * jump *label114 notEqual @mega @mono
+  307 jump *label114 always
   308 label *label113
   309 set .factoryDone 1
   310 label *label114

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   204 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
   205 label *label82
   206 jump *label94 notEqual @poly .targetUnit
-    * sensor *tmp182 @poly @id
+  207 set *tmp182 21
   208 op add :log:encodedId @blockCount *tmp182
   209 read *tmp35 .bank 511
   210 op sub *tmp184 *tmp35 1
 
   262 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
   263 label *label100
   264 jump *label112 notEqual @mega .targetUnit
-    * sensor *tmp182 @mega @id
+  265 set *tmp182 22
   266 op add :log:encodedId @blockCount *tmp182
   267 read *tmp35 .bank 511
   268 op sub *tmp184 *tmp35 1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-6 instructions):
 
   205 label *label82
   206 jump *label94 notEqual @poly .targetUnit
   207 set *tmp182 21
-    * op add :log:encodedId @blockCount *tmp182
+  208 op add :log:encodedId @blockCount 21
   209 read *tmp35 .bank 511
   210 op sub *tmp184 *tmp35 1
   211 write *tmp184 .bank 511
   212 read *tmp187 .timer "time"
   213 op mul *tmp188 *tmp187 1000
-    * op add *tmp189 :log:encodedId *tmp188
+  214 op add *tmp189 281 *tmp188
   215 write *tmp189 .bank *tmp184
   216 label *label83
   217 label *label84
   218 jump *label86 always
   219 label *label85
-    * op add *tmp192 .flares 1
   220 set .flares *tmp192
   221 write *tmp192 .display ".flares"
   222 jump *label93 always
   223 label *label86
   224 jump *label88 always
   225 label *label87
-    * op add *tmp193 .monos 1
   226 set .monos *tmp193
   227 write *tmp193 .display ".monos"
   228 jump *label93 always
 
   235 label *label90
   236 jump *label92 always
   237 label *label91
-    * op add *tmp195 .megas 1
   238 set .megas *tmp195
   239 write *tmp195 .display ".megas"
   240 label *label92
 
   260 label *label100
   261 jump *label112 notEqual @mega .targetUnit
   262 set *tmp182 22
-    * op add :log:encodedId @blockCount *tmp182
+  263 op add :log:encodedId @blockCount 22
   264 read *tmp35 .bank 511
   265 op sub *tmp184 *tmp35 1
   266 write *tmp184 .bank 511
   267 read *tmp187 .timer "time"
   268 op mul *tmp188 *tmp187 1000
-    * op add *tmp189 :log:encodedId *tmp188
+  269 op add *tmp189 282 *tmp188
   270 write *tmp189 .bank *tmp184
   271 label *label101
   272 label *label102
   273 jump *label104 always
   274 label *label103
-    * op add *tmp192 .flares 1
   275 set .flares *tmp192
   276 write *tmp192 .display ".flares"
   277 jump *label111 always
   278 label *label104
   279 jump *label106 always
   280 label *label105
-    * op add *tmp193 .monos 1
   281 set .monos *tmp193
   282 write *tmp193 .display ".monos"
   283 jump *label111 always
   284 label *label106
   285 jump *label108 always
   286 label *label107
-    * op add *tmp194 .polys 1
   287 set .polys *tmp194
   288 write *tmp194 .display ".polys"
   289 jump *label111 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-4 instructions):
 
   204 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
   205 label *label82
   206 jump *label94 notEqual @poly .targetUnit
-    * set *tmp182 21
-    * op add :log:encodedId @blockCount 21
   207 read *tmp35 .bank 511
   208 op sub *tmp184 *tmp35 1
   209 write *tmp184 .bank 511
 
   257 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
   258 label *label100
   259 jump *label112 notEqual @mega .targetUnit
-    * set *tmp182 22
-    * op add :log:encodedId @blockCount 22
   260 read *tmp35 .bank 511
   261 op sub *tmp184 *tmp35 1
   262 write *tmp184 .bank 511

Modifications by Iterated phase, Temp Variables Elimination, pass 2, iteration 1 (-2 instructions):
 
    75 label *label13
    76 jump *label15 greaterThanEq .polys .polyTarget
    77 op add *tmp84 .factoryDone .polys
-    * select *tmp86 lessThan *tmp84 .polyTarget @mono null
-    * set .factoryUnit *tmp86
+   78 select .factoryUnit lessThan *tmp84 .polyTarget @mono null
    79 set .targetUnit @poly
    80 write @poly .display ".nextUnit"
    81 control enabled .reconstructor true
 
    87 label *label15
    88 jump *label19 greaterThanEq .megas .megaTarget
    89 op add *tmp97 .factoryDone .megas
-    * select *tmp99 lessThan *tmp97 .megaTarget @mono null
-    * set .factoryUnit *tmp99
+   90 select .factoryUnit lessThan *tmp97 .megaTarget @mono null
    91 set .targetUnit @mega
    92 write @mega .display ".nextUnit"
    93 set *tmp100 .reconstructor

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    39 jump *label7 equal .smelter2 false
    40 control config .unloader1 @coal
    41 label *label7
-    * label *label8
    42 sensor :backgroundProcess:power .battery @totalPower
    43 jump *label9 equal .generator2 false
    44 set *tmp60 .generator
 
   106 label *label14
   107 label *label12
   108 select :backgroundProcess:enableFactory lessThan :backgroundProcess:power 200 false :backgroundProcess:enableFactory
-    * label *label24
   109 select :backgroundProcess:enableFactory lessThan 500 :backgroundProcess:power true :backgroundProcess:enableFactory
-    * label *label25
-    * label *label23
   110 jump *label26 notEqual .factoryUnit null
   111 control enabled .factory false
   112 control config .factory @mono
 
   120 op land *tmp122 :backgroundProcess:enableFactory *tmp121
   121 control enabled *tmp119 *tmp122
   122 set :factoryUnitFinished:unit .factoryUnit
-    * label *label64
   123 jump *label76 notEqual :factoryUnitFinished:unit .targetUnit
   124 sensor *tmp182 :factoryUnitFinished:unit @id
   125 op add :log:encodedId @blockCount *tmp182
 
   130 op mul *tmp188 *tmp187 1000
   131 op add *tmp189 :log:encodedId *tmp188
   132 write *tmp189 .bank *tmp184
-    * label *label65
-    * label *label66
   133 jump *label68 notEqual :factoryUnitFinished:unit @flare
-    * label *label67
   134 op add *tmp192 .flares 1
   135 set .flares *tmp192
   136 write *tmp192 .display ".flares"
   137 jump *label75 always
   138 label *label68
   139 jump *label70 notEqual :factoryUnitFinished:unit @mono
-    * label *label69
   140 op add *tmp193 .monos 1
   141 set .monos *tmp193
   142 write *tmp193 .display ".monos"
   143 jump *label75 always
   144 label *label70
   145 jump *label72 notEqual :factoryUnitFinished:unit @poly
-    * label *label71
   146 op add *tmp194 .polys 1
   147 set .polys *tmp194
   148 write *tmp194 .display ".polys"
   149 jump *label75 always
   150 label *label72
   151 jump *label74 notEqual :factoryUnitFinished:unit @mega
-    * label *label73
   152 op add *tmp195 .megas 1
   153 set .megas *tmp195
   154 write *tmp195 .display ".megas"
 
   163 label *label77
   164 set .factoryDone 1
   165 label *label78
-    * label *label79
   166 label *label80
-    * label *label81
   167 set :backgroundProcess:lastProgress 0
   168 jump *label29 always
   169 label *label28
 
   187 label *label27
   188 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
   189 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
-    * label *label82
   190 jump *label94 notEqual @poly .targetUnit
   191 read *tmp35 .bank 511
   192 op sub *tmp184 *tmp35 1
 
   195 op mul *tmp188 *tmp187 1000
   196 op add *tmp189 281 *tmp188
   197 write *tmp189 .bank *tmp184
-    * label *label83
-    * label *label84
   198 jump *label86 always
-    * label *label85
   199 set .flares *tmp192
   200 write *tmp192 .display ".flares"
   201 jump *label93 always
   202 label *label86
   203 jump *label88 always
-    * label *label87
   204 set .monos *tmp193
   205 write *tmp193 .display ".monos"
   206 jump *label93 always
   207 label *label88
-    * label *label89
   208 op add *tmp194 .polys 1
   209 set .polys *tmp194
   210 write *tmp194 .display ".polys"
   211 jump *label93 always
-    * label *label90
   212 jump *label92 always
-    * label *label91
   213 set .megas *tmp195
   214 write *tmp195 .display ".megas"
   215 label *label92
 
   219 jump *label98 always
   220 label *label94
   221 jump *label96 always
-    * label *label95
   222 set .factoryDone 1
   223 label *label96
-    * label *label97
   224 label *label98
-    * label *label99
   225 set :backgroundProcess:lastRecoProgress 0
   226 jump *label34 always
   227 label *label33
 
   229 label *label34
   230 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
   231 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
-    * label *label100
   232 jump *label112 notEqual @mega .targetUnit
   233 read *tmp35 .bank 511
   234 op sub *tmp184 *tmp35 1
 
   237 op mul *tmp188 *tmp187 1000
   238 op add *tmp189 282 *tmp188
   239 write *tmp189 .bank *tmp184
-    * label *label101
-    * label *label102
   240 jump *label104 always
-    * label *label103
   241 set .flares *tmp192
   242 write *tmp192 .display ".flares"
   243 jump *label111 always
   244 label *label104
   245 jump *label106 always
-    * label *label105
   246 set .monos *tmp193
   247 write *tmp193 .display ".monos"
   248 jump *label111 always
   249 label *label106
   250 jump *label108 always
-    * label *label107
   251 set .polys *tmp194
   252 write *tmp194 .display ".polys"
   253 jump *label111 always
   254 label *label108
-    * label *label109
   255 op add *tmp195 .megas 1
   256 set .megas *tmp195
   257 write *tmp195 .display ".megas"
-    * label *label110
   258 label *label111
   259 write true .display ".unitReset"
   260 set .factoryDone 0
   261 jump *label116 always
   262 label *label112
   263 jump *label114 always
-    * label *label113
   264 set .factoryDone 1
   265 label *label114
-    * label *label115
   266 label *label116
-    * label *label117
   267 set :backgroundProcess:lastMultiProgress 0
   268 jump *label37 always
   269 label *label36
 
   275 control config .unloader2 @coal
   276 jump *label5 always
   277 label *label39
-    * label *label40
   278 set *tmp150 .unloader4
   279 op greaterThan *tmp152 :backgroundProcess:coreSilicon .siliconReserve
   280 op greaterThan *tmp153 :backgroundProcess:coreGraphite .graphiteReserve
 
   309 op sub .loopTicks @tick :backgroundProcess:ticks
   310 label *label5
   311 jump *label4 always
-    * label *label6
-    * label *label3
   312 wait 1e12
   313 jump *label2 always
   314 end

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
 
   187 label *label27
   188 op add *tmp138 :backgroundProcess:reconstructorProgress 0.1
   189 jump *label33 lessThanEq :backgroundProcess:lastRecoProgress *tmp138
-    * jump *label94 notEqual @poly .targetUnit
+  190 jump *label96 notEqual @poly .targetUnit
   191 read *tmp35 .bank 511
   192 op sub *tmp184 *tmp35 1
   193 write *tmp184 .bank 511
 
   195 op mul *tmp188 *tmp187 1000
   196 op add *tmp189 281 *tmp188
   197 write *tmp189 .bank *tmp184
-    * jump *label86 always
+  198 jump *label88 always
   199 set .flares *tmp192
   200 write *tmp192 .display ".flares"
   201 jump *label93 always
 
   229 label *label34
   230 op add *tmp141 :backgroundProcess:multiReconstructorProgress 0.1
   231 jump *label36 lessThanEq :backgroundProcess:lastMultiProgress *tmp141
-    * jump *label112 notEqual @mega .targetUnit
+  232 jump *label114 notEqual @mega .targetUnit
   233 read *tmp35 .bank 511
   234 op sub *tmp184 *tmp35 1
   235 write *tmp184 .bank 511
 
   237 op mul *tmp188 *tmp187 1000
   238 op add *tmp189 282 *tmp188
   239 write *tmp189 .bank *tmp184
-    * jump *label104 always
+  240 jump *label108 always
   241 set .flares *tmp192
   242 write *tmp192 .display ".flares"
   243 jump *label111 always
   244 label *label104
-    * jump *label106 always
+  245 jump *label108 always
   246 set .monos *tmp193
   247 write *tmp193 .display ".monos"
   248 jump *label111 always
 
   273 op mul *tmp145 5 .generator2
   274 jump *label39 greaterThanEq *tmp144 *tmp145
   275 control config .unloader2 @coal
-    * jump *label5 always
+  276 jump *label4 always
   277 label *label39
   278 set *tmp150 .unloader4
   279 op greaterThan *tmp152 :backgroundProcess:coreSilicon .siliconReserve

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-28 instructions):
 
   196 op add *tmp189 281 *tmp188
   197 write *tmp189 .bank *tmp184
   198 jump *label88 always
-    * set .flares *tmp192
-    * write *tmp192 .display ".flares"
-    * jump *label93 always
-    * label *label86
-    * jump *label88 always
-    * set .monos *tmp193
-    * write *tmp193 .display ".monos"
-    * jump *label93 always
   199 label *label88
   200 op add *tmp194 .polys 1
   201 set .polys *tmp194
   202 write *tmp194 .display ".polys"
   203 jump *label93 always
-    * jump *label92 always
-    * set .megas *tmp195
-    * write *tmp195 .display ".megas"
-    * label *label92
   204 label *label93
   205 write true .display ".unitReset"
   206 set .factoryDone 0
   207 jump *label98 always
-    * label *label94
-    * jump *label96 always
-    * set .factoryDone 1
   208 label *label96
   209 label *label98
   210 set :backgroundProcess:lastRecoProgress 0
 
   223 op add *tmp189 282 *tmp188
   224 write *tmp189 .bank *tmp184
   225 jump *label108 always
-    * set .flares *tmp192
-    * write *tmp192 .display ".flares"
-    * jump *label111 always
-    * label *label104
-    * jump *label108 always
-    * set .monos *tmp193
-    * write *tmp193 .display ".monos"
-    * jump *label111 always
-    * label *label106
-    * jump *label108 always
-    * set .polys *tmp194
-    * write *tmp194 .display ".polys"
-    * jump *label111 always
   226 label *label108
   227 op add *tmp195 .megas 1
   228 set .megas *tmp195
 
   231 write true .display ".unitReset"
   232 set .factoryDone 0
   233 jump *label116 always
-    * label *label112
-    * jump *label114 always
-    * set .factoryDone 1
   234 label *label114
   235 label *label116
   236 set :backgroundProcess:lastMultiProgress 0
 
   276 select *tmp178 notEqual *tmp177 false @titanium @silicon
   277 control config *tmp171 *tmp178
   278 op sub .loopTicks @tick :backgroundProcess:ticks
-    * label *label5
   279 jump *label4 always
-    * wait 1e12
-    * jump *label2 always
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1:
 
    10 set .megaTarget 0
    11 set .factoryDone 0
    12 set *signature "0:v1"
-    * label *label2
    13 set :backgroundProcess:lastProgress 0
    14 set :backgroundProcess:lastRecoProgress 0
    15 set :backgroundProcess:lastMultiProgress 0
 
   226 op add *tmp195 .megas 1
   227 set .megas *tmp195
   228 write *tmp195 .display ".megas"
-    * label *label111
   229 write true .display ".unitReset"
   230 set .factoryDone 0
   231 jump *label116 always

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-5 instructions):
 
   194 op mul *tmp188 *tmp187 1000
   195 op add *tmp189 281 *tmp188
   196 write *tmp189 .bank *tmp184
-    * jump *label88 always
   197 label *label88
   198 op add *tmp194 .polys 1
   199 set .polys *tmp194
   200 write *tmp194 .display ".polys"
-    * jump *label93 always
   201 label *label93
   202 write true .display ".unitReset"
   203 set .factoryDone 0
-    * jump *label98 always
   204 label *label96
   205 label *label98
   206 set :backgroundProcess:lastRecoProgress 0
 
   218 op mul *tmp188 *tmp187 1000
   219 op add *tmp189 282 *tmp188
   220 write *tmp189 .bank *tmp184
-    * jump *label108 always
   221 label *label108
   222 op add *tmp195 .megas 1
   223 set .megas *tmp195
   224 write *tmp195 .display ".megas"
   225 write true .display ".unitReset"
   226 set .factoryDone 0
-    * jump *label116 always
   227 label *label114
   228 label *label116
   229 set :backgroundProcess:lastMultiProgress 0

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
 
   194 op mul *tmp188 *tmp187 1000
   195 op add *tmp189 281 *tmp188
   196 write *tmp189 .bank *tmp184
-    * label *label88
   197 op add *tmp194 .polys 1
   198 set .polys *tmp194
   199 write *tmp194 .display ".polys"
-    * label *label93
   200 write true .display ".unitReset"
   201 set .factoryDone 0
   202 label *label96
-    * label *label98
   203 set :backgroundProcess:lastRecoProgress 0
   204 jump *label34 always
   205 label *label33
 
   215 op mul *tmp188 *tmp187 1000
   216 op add *tmp189 282 *tmp188
   217 write *tmp189 .bank *tmp184
-    * label *label108
   218 op add *tmp195 .megas 1
   219 set .megas *tmp195
   220 write *tmp195 .display ".megas"
   221 write true .display ".unitReset"
   222 set .factoryDone 0
   223 label *label114
-    * label *label116
   224 set :backgroundProcess:lastMultiProgress 0
   225 jump *label37 always
   226 label *label36

Final code before resolving virtual instructions:

    0:  set .flares 0                                                CoreController.mnd: remote var
    1:  set .monos 0                                                 ...
    2:  set .polys 1                                                 ...
    3:  set .megas 0                                                 ...
    4:  set .pressTarget 20                                          ...
    5:  set .smelterTarget 20                                        ...
    6:  set .kilnTarget 20                                           ...
    7:  set .flareTarget 0                                           ...
    8:  set .monoTarget 0                                            ...
    9:  set .polyTarget 0                                            ...
   10:  set .megaTarget 0                                            ...
   11:  set .factoryDone 0                                           CoreController.mnd: var factoryDone = 0;
   12:  set *signature "0:v1"                                        CoreController.mnd: #set target = 8;
   13:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: var lastProgress = 0, factoryProgress = 0;
   14:  set :backgroundProcess:lastRecoProgress 0                    CoreController.mnd: var lastRecoProgress = 0, reconstructorProgress = 0;
   15:  set :backgroundProcess:lastMultiProgress 0                   CoreController.mnd: var lastMultiProgress = 0, multiReconstructorProgress = 0;
   16:  set :backgroundProcess:enableFactory true                    CoreController.mnd: var enableFactory = true, blockFactory = false;
        label *label4                                                CoreController.mnd: while true do
   17:  set :backgroundProcess:ticks @tick                           CoreController.mnd: var ticks = @tick;
   18:  sensor :backgroundProcess:coreSilicon .core @silicon         CoreController.mnd: var coreSilicon = core.@silicon;
   19:  sensor :backgroundProcess:coreGraphite .core @graphite       CoreController.mnd: var coreGraphite = core.@graphite;
   20:  set *tmp38 .smelter2                                         CoreController.mnd: smelter2.enabled = smelter.enabled = coreSilicon < smelterTarget;
   21:  set *tmp40 .smelter                                          ...
   22:  op lessThan *tmp42 :backgroundProcess:coreSilicon .smelterTa ...
   23:  control enabled *tmp40 *tmp42 0 0 0                          ...
   24:  control enabled *tmp38 *tmp42 0 0 0                          ...
   25:  set *tmp43 .press                                            CoreController.mnd: press.enabled = !multipress and coreGraphite < pressTarget;
   26:  op equal *tmp45 .multipress false                            ...
   27:  op lessThan *tmp46 :backgroundProcess:coreGraphite .pressTar ...
   28:  op land *tmp47 *tmp45 *tmp46                                 ...
   29:  control enabled *tmp43 *tmp47 0 0 0                          ...
   30:  set *tmp48 .multipress                                       CoreController.mnd: multipress.enabled = coreGraphite < pressTarget;
   31:  op lessThan *tmp50 :backgroundProcess:coreGraphite .pressTar ...
   32:  control enabled *tmp48 *tmp50 0 0 0                          ...
   33:  set *tmp51 .kiln                                             CoreController.mnd: kiln.enabled = core.@metaglass < kilnTarget;
   34:  sensor *tmp53 .core @metaglass                               ...
   35:  op lessThan *tmp54 *tmp53 .kilnTarget                        ...
   36:  control enabled *tmp51 *tmp54 0 0 0                          ...
   37:  jump *label7 equal .smelter2 false                           CoreController.mnd: if smelter2 then unloader1.config = @coal; end;
   38:  control config .unloader1 @coal 0 0 0                        ...
        label *label7                                                ...
   39:  sensor :backgroundProcess:power .battery @totalPower         CoreController.mnd: var power = battery.@totalPower;
   40:  jump *label9 equal .generator2 false                         CoreController.mnd: if generator2 then
   41:  set *tmp60 .generator                                        CoreController.mnd: generator.enabled = power < 10;
   42:  op lessThan *tmp62 :backgroundProcess:power 10               ...
   43:  control enabled *tmp60 *tmp62 0 0 0                          ...
   44:  set *tmp63 .generator2                                       CoreController.mnd: generator2.enabled = power < 3800;
   45:  op lessThan *tmp65 :backgroundProcess:power 3800             ...
   46:  control enabled *tmp63 *tmp65 0 0 0                          ...
   47:  jump *label10 always 0 0                                     CoreController.mnd: if generator2 then
        label *label9                                                ...
   48:  set *tmp66 .generator                                        CoreController.mnd: generator.enabled = power < 800;
   49:  op lessThan *tmp68 :backgroundProcess:power 800              ...
   50:  control enabled *tmp66 *tmp68 0 0 0                          ...
        label *label10                                               CoreController.mnd: if generator2 then
   51:  sensor :backgroundProcess:factoryProgress .factory @progress CoreController.mnd: factoryProgress = factory.@progress;
   52:  sensor :backgroundProcess:reconstructorProgress .reconstruct CoreController.mnd: reconstructorProgress = reconstructor.@progress;
   53:  sensor :backgroundProcess:multiReconstructorProgress .multiR CoreController.mnd: multiReconstructorProgress = multiReconstructor.@progress;
   54:  jump *label11 greaterThanEq .flares .flareTarget             CoreController.mnd: if flares < flareTarget then
   55:  set .factoryUnit @flare                                      CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = @flare;
   56:  set .targetUnit @flare                                       ...
   57:  write @flare .display ".nextUnit"                            ...
   58:  control config .payloadRouter .targetUnit 0 0 0              CoreController.mnd: payloadRouter.config = targetUnit;
   59:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   60:  jump *label12 always 0 0                                     CoreController.mnd: if flares < flareTarget then
        label *label11                                               ...
   61:  jump *label13 greaterThanEq .monos .monoTarget               CoreController.mnd: elsif monos < monoTarget then
   62:  set .factoryUnit @mono                                       CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = @mono;
   63:  set .targetUnit @mono                                        ...
   64:  write @mono .display ".nextUnit"                             ...
   65:  control config .payloadRouter .targetUnit 0 0 0              CoreController.mnd: payloadRouter.config = targetUnit;
   66:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   67:  jump *label14 always 0 0                                     CoreController.mnd: elsif monos < monoTarget then
        label *label13                                               ...
   68:  jump *label15 greaterThanEq .polys .polyTarget               CoreController.mnd: elsif polys < polyTarget then
   69:  op add *tmp84 .factoryDone .polys                            CoreController.mnd: factoryUnit = factoryDone + polys < polyTarget ? @mono : null;
   70:  select .factoryUnit lessThan *tmp84 .polyTarget @mono null   ...
   71:  set .targetUnit @poly                                        CoreController.mnd: display.nextUnit = targetUnit = @poly;
   72:  write @poly .display ".nextUnit"                             ...
   73:  control enabled .reconstructor true 0 0 0                    CoreController.mnd: reconstructor.enabled = true;
   74:  control config .payloadRouter .targetUnit 0 0 0              CoreController.mnd: payloadRouter.config = targetUnit;
   75:  sensor *tmp92 .reconstructor @payloadCount                   CoreController.mnd: blockFactory = reconstructor.@payloadCount * factoryProgress > reconstructorProgress;
   76:  op mul *tmp93 *tmp92 :backgroundProcess:factoryProgress      ...
   77:  op greaterThan :backgroundProcess:blockFactory *tmp93 :backg ...
   78:  jump *label16 always 0 0                                     CoreController.mnd: elsif polys < polyTarget then
        label *label15                                               ...
   79:  jump *label19 greaterThanEq .megas .megaTarget               CoreController.mnd: elsif megas < megaTarget then
   80:  op add *tmp97 .factoryDone .megas                            CoreController.mnd: factoryUnit = factoryDone + megas < megaTarget ? @mono : null;
   81:  select .factoryUnit lessThan *tmp97 .megaTarget @mono null   ...
   82:  set .targetUnit @mega                                        CoreController.mnd: display.nextUnit = targetUnit = @mega;
   83:  write @mega .display ".nextUnit"                             ...
   84:  set *tmp100 .reconstructor                                   CoreController.mnd: reconstructor.enabled = multiReconstructor or reconstructorProgress < 0.75;
   85:  op lessThan *tmp102 :backgroundProcess:reconstructorProgress ...
   86:  op or *tmp103 .multiReconstructor *tmp102                    ...
   87:  control enabled *tmp100 *tmp103 0 0 0                        ...
   88:  control config .payloadRouter .targetUnit 0 0 0              CoreController.mnd: payloadRouter.config = targetUnit;
   89:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
   90:  jump *label20 always 0 0                                     CoreController.mnd: elsif megas < megaTarget then
        label *label19                                               ...
   91:  set .factoryUnit null                                        CoreController.mnd: display.nextUnit = targetUnit = factoryUnit = null;
   92:  set .targetUnit null                                         ...
   93:  write null .display ".nextUnit"                              ...
   94:  set :backgroundProcess:blockFactory false                    CoreController.mnd: blockFactory = false;
        label *label20                                               CoreController.mnd: elsif megas < megaTarget then
        label *label16                                               CoreController.mnd: elsif polys < polyTarget then
        label *label14                                               CoreController.mnd: elsif monos < monoTarget then
        label *label12                                               CoreController.mnd: if flares < flareTarget then
   95:  select :backgroundProcess:enableFactory lessThan :background CoreController.mnd: mlogSafe("select", out value, "lessThan", in a, in b, in newValue, in value);
   96:  select :backgroundProcess:enableFactory lessThan 500 :backgr ...
   97:  jump *label26 notEqual .factoryUnit null                     CoreController.mnd: if factoryUnit == null then
   98:  control enabled .factory false 0 0 0                         CoreController.mnd: factory.enabled = false;
   99:  control config .factory @mono 0 0 0                          CoreController.mnd: factory.config = @mono;
  100:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
  101:  jump *label27 always 0 0                                     CoreController.mnd: if factoryUnit == null then
        label *label26                                               ...
  102:  op add *tmp116 :backgroundProcess:factoryProgress 0.1        CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
  103:  jump *label28 lessThanEq :backgroundProcess:lastProgress *tm ...
  104:  set *tmp119 .factory                                         CoreController.mnd: factory.enabled = enableFactory and not blockFactory;
  105:  op equal *tmp121 :backgroundProcess:blockFactory false       ...
  106:  op land *tmp122 :backgroundProcess:enableFactory *tmp121     ...
  107:  control enabled *tmp119 *tmp122 0 0 0                        ...
  108:  set :factoryUnitFinished:unit .factoryUnit                   CoreController.mnd: factoryUnitFinished(factoryUnit);
  109:  jump *label76 notEqual :factoryUnitFinished:unit .targetUnit CoreController.mnd: if unit == targetUnit then
  110:  sensor *tmp182 :factoryUnitFinished:unit @id                 CoreController.mnd: log(@blockCount + unit.@id);
  111:  op add :log:encodedId @blockCount *tmp182                    ...
  112:  read *tmp35 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  113:  op sub *tmp184 *tmp35 1                                      ...
  114:  write *tmp184 .bank 511                                      ...
  115:  read *tmp187 .timer "time"                                   ...
  116:  op mul *tmp188 *tmp187 1000                                  ...
  117:  op add *tmp189 :log:encodedId *tmp188                        ...
  118:  write *tmp189 .bank *tmp184                                  ...
  119:  jump *label68 notEqual :factoryUnitFinished:unit @flare      CoreController.mnd: case unit
  120:  op add *tmp192 .flares 1                                     CoreController.mnd: when @flare then display.flares = ++flares;
  121:  set .flares *tmp192                                          ...
  122:  write *tmp192 .display ".flares"                             ...
  123:  jump *label75 always 0 0                                     CoreController.mnd: case unit
        label *label68                                               ...
  124:  jump *label70 notEqual :factoryUnitFinished:unit @mono       ...
  125:  op add *tmp193 .monos 1                                      CoreController.mnd: when @mono  then display.monos = ++monos;
  126:  set .monos *tmp193                                           ...
  127:  write *tmp193 .display ".monos"                              ...
  128:  jump *label75 always 0 0                                     CoreController.mnd: case unit
        label *label70                                               ...
  129:  jump *label72 notEqual :factoryUnitFinished:unit @poly       ...
  130:  op add *tmp194 .polys 1                                      CoreController.mnd: when @poly  then display.polys = ++polys;
  131:  set .polys *tmp194                                           ...
  132:  write *tmp194 .display ".polys"                              ...
  133:  jump *label75 always 0 0                                     CoreController.mnd: case unit
        label *label72                                               ...
  134:  jump *label74 notEqual :factoryUnitFinished:unit @mega       ...
  135:  op add *tmp195 .megas 1                                      CoreController.mnd: when @mega  then display.megas = ++megas;
  136:  set .megas *tmp195                                           ...
  137:  write *tmp195 .display ".megas"                              ...
        label *label74                                               CoreController.mnd: case unit
        label *label75                                               ...
  138:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  139:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
  140:  jump *label80 always 0 0                                     CoreController.mnd: if unit == targetUnit then
        label *label76                                               ...
  141:  jump *label77 equal :factoryUnitFinished:unit @flare         CoreController.mnd: case unit
  142:  jump *label78 notEqual :factoryUnitFinished:unit @mono       ...
        label *label77                                               ...
  143:  set .factoryDone 1                                           CoreController.mnd: when @flare, @mono then factoryDone = 1;
        label *label78                                               CoreController.mnd: case unit
        label *label80                                               CoreController.mnd: if unit == targetUnit then
  144:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
  145:  jump *label29 always 0 0                                     CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
        label *label28                                               ...
  146:  sensor *tmp124 .factory @config                              CoreController.mnd: elsif factory.config != factoryUnit then
  147:  jump *label31 equal *tmp124 .factoryUnit                     ...
  148:  set *tmp127 .factory                                         CoreController.mnd: factory.enabled = enableFactory and not blockFactory;
  149:  op equal *tmp129 :backgroundProcess:blockFactory false       ...
  150:  op land *tmp130 :backgroundProcess:enableFactory *tmp129     ...
  151:  control enabled *tmp127 *tmp130 0 0 0                        ...
  152:  control config .factory .factoryUnit 0 0 0                   CoreController.mnd: factory.config = factoryUnit;
  153:  set :backgroundProcess:lastProgress 0                        CoreController.mnd: lastProgress = 0;
  154:  jump *label32 always 0 0                                     CoreController.mnd: elsif factory.config != factoryUnit then
        label *label31                                               ...
  155:  set *tmp134 .factory                                         CoreController.mnd: factory.enabled = enableFactory and not blockFactory;
  156:  op equal *tmp136 :backgroundProcess:blockFactory false       ...
  157:  op land *tmp137 :backgroundProcess:enableFactory *tmp136     ...
  158:  control enabled *tmp134 *tmp137 0 0 0                        ...
  159:  set :backgroundProcess:lastProgress :backgroundProcess:facto CoreController.mnd: lastProgress = factoryProgress;
        label *label32                                               CoreController.mnd: elsif factory.config != factoryUnit then
        label *label29                                               CoreController.mnd: elsif lastProgress > factoryProgress + 0.1 then
        label *label27                                               CoreController.mnd: if factoryUnit == null then
  160:  op add *tmp138 :backgroundProcess:reconstructorProgress 0.1  CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
  161:  jump *label33 lessThanEq :backgroundProcess:lastRecoProgress ...
  162:  jump *label96 notEqual @poly .targetUnit                     CoreController.mnd: if unit == targetUnit then
  163:  read *tmp35 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  164:  op sub *tmp184 *tmp35 1                                      ...
  165:  write *tmp184 .bank 511                                      ...
  166:  read *tmp187 .timer "time"                                   ...
  167:  op mul *tmp188 *tmp187 1000                                  ...
  168:  op add *tmp189 281 *tmp188                                   ...
  169:  write *tmp189 .bank *tmp184                                  ...
  170:  op add *tmp194 .polys 1                                      CoreController.mnd: when @poly  then display.polys = ++polys;
  171:  set .polys *tmp194                                           ...
  172:  write *tmp194 .display ".polys"                              ...
  173:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  174:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
        label *label96                                               CoreController.mnd: case unit
  175:  set :backgroundProcess:lastRecoProgress 0                    CoreController.mnd: lastRecoProgress = 0;
  176:  jump *label34 always 0 0                                     CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
        label *label33                                               ...
  177:  set :backgroundProcess:lastRecoProgress :backgroundProcess:r CoreController.mnd: lastRecoProgress = reconstructorProgress;
        label *label34                                               CoreController.mnd: if lastRecoProgress > reconstructorProgress + 0.1 then
  178:  op add *tmp141 :backgroundProcess:multiReconstructorProgress CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
  179:  jump *label36 lessThanEq :backgroundProcess:lastMultiProgres ...
  180:  jump *label114 notEqual @mega .targetUnit                    CoreController.mnd: if unit == targetUnit then
  181:  read *tmp35 .bank 511                                        CoreController.mnd: bank[--logPosition] = encodedId + timer.read("time") * 1000;
  182:  op sub *tmp184 *tmp35 1                                      ...
  183:  write *tmp184 .bank 511                                      ...
  184:  read *tmp187 .timer "time"                                   ...
  185:  op mul *tmp188 *tmp187 1000                                  ...
  186:  op add *tmp189 282 *tmp188                                   ...
  187:  write *tmp189 .bank *tmp184                                  ...
  188:  op add *tmp195 .megas 1                                      CoreController.mnd: when @mega  then display.megas = ++megas;
  189:  set .megas *tmp195                                           ...
  190:  write *tmp195 .display ".megas"                              ...
  191:  write true .display ".unitReset"                             CoreController.mnd: display.unitReset = true;
  192:  set .factoryDone 0                                           CoreController.mnd: factoryDone = 0;
        label *label114                                              CoreController.mnd: case unit
  193:  set :backgroundProcess:lastMultiProgress 0                   CoreController.mnd: lastMultiProgress = 0;
  194:  jump *label37 always 0 0                                     CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
        label *label36                                               ...
  195:  set :backgroundProcess:lastMultiProgress :backgroundProcess: CoreController.mnd: lastMultiProgress = multiReconstructorProgress;
        label *label37                                               CoreController.mnd: if lastMultiProgress > multiReconstructorProgress + 0.1 then
  196:  sensor *tmp144 .generator2 @coal                             CoreController.mnd: if generator2.@coal < 5 * generator2 then
  197:  op mul *tmp145 5 .generator2                                 ...
  198:  jump *label39 greaterThanEq *tmp144 *tmp145                  ...
  199:  control config .unloader2 @coal 0 0 0                        CoreController.mnd: unloader2.config = @coal;
  200:  jump *label4 always 0 0                                      CoreController.mnd: continue;
        label *label39                                               CoreController.mnd: if generator2.@coal < 5 * generator2 then
  201:  set *tmp150 .unloader4                                       CoreController.mnd: unloader4.enabled = coreSilicon > siliconReserve and coreGraphite > graphiteReserve;
  202:  op greaterThan *tmp152 :backgroundProcess:coreSilicon .silic ...
  203:  op greaterThan *tmp153 :backgroundProcess:coreGraphite .grap ...
  204:  op land *tmp154 *tmp152 *tmp153                              ...
  205:  control enabled *tmp150 *tmp154 0 0 0                        ...
  206:  op equal *tmp155 .factoryUnit @mono                          CoreController.mnd: var leadLimit = (factoryUnit == @mono) * 30;
  207:  op mul :backgroundProcess:leadLimit *tmp155 30               ...
  208:  sensor *tmp157 .factory @lead                                CoreController.mnd: if factory.@lead < leadLimit and core.@lead > leadReserve then
  209:  op lessThan *tmp158 *tmp157 :backgroundProcess:leadLimit     ...
  210:  sensor *tmp159 .core @lead                                   ...
  211:  op greaterThan *tmp160 *tmp159 .leadReserve                  ...
  212:  op land *tmp161 *tmp158 *tmp160                              ...
  213:  jump *label41 equal *tmp161 false                            ...
  214:  control config .unloader2 @lead 0 0 0                        CoreController.mnd: unloader2.config = @lead;
  215:  jump *label42 always 0 0                                     CoreController.mnd: if factory.@lead < leadLimit and core.@lead > leadReserve then
        label *label41                                               ...
  216:  jump *label43 lessThanEq :backgroundProcess:coreSilicon .sil CoreController.mnd: elsif coreSilicon > siliconReserve then
  217:  control config .unloader2 @silicon 0 0 0                     CoreController.mnd: unloader2.config = @silicon;
  218:  jump *label44 always 0 0                                     CoreController.mnd: elsif coreSilicon > siliconReserve then
        label *label43                                               ...
  219:  control config .unloader2 @coal 0 0 0                        CoreController.mnd: unloader2.config = @coal;
        label *label44                                               CoreController.mnd: elsif coreSilicon > siliconReserve then
        label *label42                                               CoreController.mnd: if factory.@lead < leadLimit and core.@lead > leadReserve then
  220:  set *tmp171 .unloader6                                       CoreController.mnd: unloader6.config = multiReconstructor.@silicon >= 130 and multiReconstructor.@titanium < 80 ? @titanium : @silicon;
  221:  sensor *tmp173 .multiReconstructor @silicon                  ...
  222:  op greaterThanEq *tmp174 *tmp173 130                         ...
  223:  sensor *tmp175 .multiReconstructor @titanium                 ...
  224:  op lessThan *tmp176 *tmp175 80                               ...
  225:  op land *tmp177 *tmp174 *tmp176                              ...
  226:  select *tmp178 notEqual *tmp177 false @titanium @silicon     ...
  227:  control config *tmp171 *tmp178 0 0 0                         ...
  228:  op sub .loopTicks @tick :backgroundProcess:ticks             CoreController.mnd: loopTicks = @tick - ticks;
  229:  jump *label4 always 0 0                                      CoreController.mnd: while true do


Performance: parsed in 579 ms, compiled in 373 ms, optimized in 512 ms, run in 17 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (19 steps):
The program didn't generate any output.
Execution exception at instruction 18: sensor :backgroundProcess:coreSilicon .core @silicon:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
