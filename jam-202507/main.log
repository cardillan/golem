Automatically added missing 'printflush(message1);' call to the end of the program.
   424 instructions before optimizations.
    27 instructions eliminated by Temp Variables Elimination (2 iterations).
    28 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Jump Normalization (5 iterations).
    15 instructions eliminated by Jump Optimization (5 iterations).
    14 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
   162 instructions eliminated by Data Flow Optimization (7 iterations).
     1 instructions modified by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
   176 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-28 instructions):
 
    58 op lessThan *tmp18 :updateDisplay:s 10
    59 jump *label11 equal *tmp18 false
    60 print "0"
-    * set *tmp19 "0"
    61 jump *label12 always
    62 label *label11
-    * set *tmp19 null
    63 label *label12
    64 op sub *tmp20 :updateDisplay:y 27
    65 set :drawText.4:x :updateDisplay:x2
 
   137 label *label25
   138 label *label23
   139 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp29 :updateDisplay:y
   140 jump *label22 always
   141 label *label21
-    * set *tmp29 null
   142 label *label22
   143 label *label20
-    * set *tmp26 null
   144 jump *label19 always
   145 label *label18
-    * set *tmp26 null
   146 label *label19
   147 label *label17
   148 set :drawMaterial.1:item @lead
 
   189 label *label34
   190 label *label32
   191 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp41 :updateDisplay:y
   192 jump *label31 always
   193 label *label30
-    * set *tmp41 null
   194 label *label31
   195 label *label29
-    * set *tmp38 null
   196 jump *label28 always
   197 label *label27
-    * set *tmp38 null
   198 label *label28
   199 label *label26
   200 set :drawMaterial.2:item @graphite
 
   241 label *label43
   242 label *label41
   243 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp53 :updateDisplay:y
   244 jump *label40 always
   245 label *label39
-    * set *tmp53 null
   246 label *label40
   247 label *label38
-    * set *tmp50 null
   248 jump *label37 always
   249 label *label36
-    * set *tmp50 null
   250 label *label37
   251 label *label35
   252 set :drawMaterial.3:item @silicon
 
   293 label *label52
   294 label *label50
   295 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp65 :updateDisplay:y
   296 jump *label49 always
   297 label *label48
-    * set *tmp65 null
   298 label *label49
   299 label *label47
-    * set *tmp62 null
   300 jump *label46 always
   301 label *label45
-    * set *tmp62 null
   302 label *label46
   303 label *label44
   304 set :drawMaterial.4:item @titanium
 
   345 label *label61
   346 label *label59
   347 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp77 :updateDisplay:y
   348 jump *label58 always
   349 label *label57
-    * set *tmp77 null
   350 label *label58
   351 label *label56
-    * set *tmp74 null
   352 jump *label55 always
   353 label *label54
-    * set *tmp74 null
   354 label *label55
   355 label *label53
   356 draw col %[white]
 
   416 label *label73
   417 label *label71
   418 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp91 :updateDisplay:y
   419 jump *label70 always
   420 label *label69
-    * set *tmp91 null
   421 label *label70
   422 label *label68
   423 label *label67
-    * set *tmp89 null
   424 jump *label66 always
   425 label *label65
   426 sensor *tmp99 @unit @totalItems
 
   463 label *label80
   464 label *label78
   465 op sub :updateDisplay:y :updateDisplay:y 15
-    * set *tmp101 :updateDisplay:y
   466 jump *label77 always
   467 label *label76
-    * set *tmp101 null
   468 label *label77
   469 label *label75
   470 label *label74
-    * set *tmp89 null
   471 label *label66
   472 drawflush display1
   473 label *label4

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-27 instructions):
 
    20 print :drawText:text
    21 draw print :drawText:x :drawText:y @bottom
    22 label *label6
-    * op add *tmp13 :drawBold:x 1
-    * set :drawText.1:x *tmp13
+   23 op add :drawText.1:x :drawBold:x 1
    24 set :drawText.1:y :drawBold:y
    25 set :drawText.1:text :drawBold:text
    26 print :drawText.1:text
 
    37 print :drawText.2:text
    38 draw print :drawText.2:x :drawText.2:y @bottom
    39 label *label9
-    * op add *tmp14 :drawBold.1:x 1
-    * set :drawText.3:x *tmp14
+   40 op add :drawText.3:x :drawBold.1:x 1
    41 set :drawText.3:y :drawBold.1:y
    42 set :drawText.3:text :drawBold.1:text
    43 print :drawText.3:text
 
    45 label *label10
    46 label *label8
    47 draw col %[salmon]
-    * op floor *tmp15 @second
-    * set :updateDisplay:t *tmp15
-    * op idiv *tmp16 :updateDisplay:t 60
-    * set :updateDisplay:m *tmp16
-    * op mod *tmp17 :updateDisplay:t 60
-    * set :updateDisplay:s *tmp17
+   48 op floor :updateDisplay:t @second
+   49 op idiv :updateDisplay:m :updateDisplay:t 60
+   50 op mod :updateDisplay:s :updateDisplay:t 60
    51 print :updateDisplay:m
    52 print ":"
    53 op lessThan *tmp18 :updateDisplay:s 10
 
    74 print :drawTextLeft:text
    75 draw print :drawTextLeft:x :drawTextLeft:y @bottomLeft
    76 label *label15
-    * op add *tmp22 :drawBoldLeft:x 1
-    * set :drawTextLeft.1:x *tmp22
+   77 op add :drawTextLeft.1:x :drawBoldLeft:x 1
    78 set :drawTextLeft.1:y :drawBoldLeft:y
    79 set :drawTextLeft.1:text :drawBoldLeft:text
    80 print :drawTextLeft.1:text
 
    88 draw image :updateDisplay:x3 *tmp24 *tmp1 32 0
    89 op sub :updateDisplay:y :updateDisplay:y 76
    90 set :drawMaterial:item @copper
-    * read *tmp2 processor1 ".copperTarget"
-    * set :drawMaterial:target *tmp2
+   91 read :drawMaterial:target processor1 ".copperTarget"
    92 op greaterThan *tmp25 :drawMaterial:target 0
    93 jump *label18 equal *tmp25 false
    94 read *tmp0 processor1 ".core"
 
   101 jump *label21 equal *tmp28 false
   102 op mul *tmp30 122 :drawItem:current
   103 op div *tmp31 *tmp30 :drawItem:target
-    * op min *tmp32 122 *tmp31
-    * set :drawItem:length *tmp32
+  104 op min :drawItem:length 122 *tmp31
   105 draw col %[white]
   106 op add *tmp33 :updateDisplay:y 5
   107 draw image 11 *tmp33 :drawItem:item 16 0
 
   120 print :drawTextRight:text
   121 draw print :drawTextRight:x :drawTextRight:y @right
   122 label *label24
-    * op add *tmp36 :drawBoldRight:x 1
-    * set :drawTextRight.1:x *tmp36
+  123 op add :drawTextRight.1:x :drawBoldRight:x 1
   124 set :drawTextRight.1:y :drawBoldRight:y
   125 set :drawTextRight.1:text :drawBoldRight:text
   126 print :drawTextRight.1:text
 
   137 label *label19
   138 label *label17
   139 set :drawMaterial.1:item @lead
-    * read *tmp3 processor1 ".leadTarget"
-    * set :drawMaterial.1:target *tmp3
+  140 read :drawMaterial.1:target processor1 ".leadTarget"
   141 op greaterThan *tmp37 :drawMaterial.1:target 0
   142 jump *label27 equal *tmp37 false
   143 read *tmp0 processor1 ".core"
 
   150 jump *label30 equal *tmp40 false
   151 op mul *tmp42 122 :drawItem.1:current
   152 op div *tmp43 *tmp42 :drawItem.1:target
-    * op min *tmp44 122 *tmp43
-    * set :drawItem.1:length *tmp44
+  153 op min :drawItem.1:length 122 *tmp43
   154 draw col %[white]
   155 op add *tmp45 :updateDisplay:y 5
   156 draw image 11 *tmp45 :drawItem.1:item 16 0
 
   169 print :drawTextRight.2:text
   170 draw print :drawTextRight.2:x :drawTextRight.2:y @right
   171 label *label33
-    * op add *tmp48 :drawBoldRight.1:x 1
-    * set :drawTextRight.3:x *tmp48
+  172 op add :drawTextRight.3:x :drawBoldRight.1:x 1
   173 set :drawTextRight.3:y :drawBoldRight.1:y
   174 set :drawTextRight.3:text :drawBoldRight.1:text
   175 print :drawTextRight.3:text
 
   186 label *label28
   187 label *label26
   188 set :drawMaterial.2:item @graphite
-    * read *tmp4 processor1 ".graphiteTarget"
-    * set :drawMaterial.2:target *tmp4
+  189 read :drawMaterial.2:target processor1 ".graphiteTarget"
   190 op greaterThan *tmp49 :drawMaterial.2:target 0
   191 jump *label36 equal *tmp49 false
   192 read *tmp0 processor1 ".core"
 
   199 jump *label39 equal *tmp52 false
   200 op mul *tmp54 122 :drawItem.2:current
   201 op div *tmp55 *tmp54 :drawItem.2:target
-    * op min *tmp56 122 *tmp55
-    * set :drawItem.2:length *tmp56
+  202 op min :drawItem.2:length 122 *tmp55
   203 draw col %[white]
   204 op add *tmp57 :updateDisplay:y 5
   205 draw image 11 *tmp57 :drawItem.2:item 16 0
 
   218 print :drawTextRight.4:text
   219 draw print :drawTextRight.4:x :drawTextRight.4:y @right
   220 label *label42
-    * op add *tmp60 :drawBoldRight.2:x 1
-    * set :drawTextRight.5:x *tmp60
+  221 op add :drawTextRight.5:x :drawBoldRight.2:x 1
   222 set :drawTextRight.5:y :drawBoldRight.2:y
   223 set :drawTextRight.5:text :drawBoldRight.2:text
   224 print :drawTextRight.5:text
 
   235 label *label37
   236 label *label35
   237 set :drawMaterial.3:item @silicon
-    * read *tmp5 processor1 ".siliconTarget"
-    * set :drawMaterial.3:target *tmp5
+  238 read :drawMaterial.3:target processor1 ".siliconTarget"
   239 op greaterThan *tmp61 :drawMaterial.3:target 0
   240 jump *label45 equal *tmp61 false
   241 read *tmp0 processor1 ".core"
 
   248 jump *label48 equal *tmp64 false
   249 op mul *tmp66 122 :drawItem.3:current
   250 op div *tmp67 *tmp66 :drawItem.3:target
-    * op min *tmp68 122 *tmp67
-    * set :drawItem.3:length *tmp68
+  251 op min :drawItem.3:length 122 *tmp67
   252 draw col %[white]
   253 op add *tmp69 :updateDisplay:y 5
   254 draw image 11 *tmp69 :drawItem.3:item 16 0
 
   267 print :drawTextRight.6:text
   268 draw print :drawTextRight.6:x :drawTextRight.6:y @right
   269 label *label51
-    * op add *tmp72 :drawBoldRight.3:x 1
-    * set :drawTextRight.7:x *tmp72
+  270 op add :drawTextRight.7:x :drawBoldRight.3:x 1
   271 set :drawTextRight.7:y :drawBoldRight.3:y
   272 set :drawTextRight.7:text :drawBoldRight.3:text
   273 print :drawTextRight.7:text
 
   284 label *label46
   285 label *label44
   286 set :drawMaterial.4:item @titanium
-    * read *tmp6 processor1 ".titaniumTarget"
-    * set :drawMaterial.4:target *tmp6
+  287 read :drawMaterial.4:target processor1 ".titaniumTarget"
   288 op greaterThan *tmp73 :drawMaterial.4:target 0
   289 jump *label54 equal *tmp73 false
   290 read *tmp0 processor1 ".core"
 
   297 jump *label57 equal *tmp76 false
   298 op mul *tmp78 122 :drawItem.4:current
   299 op div *tmp79 *tmp78 :drawItem.4:target
-    * op min *tmp80 122 *tmp79
-    * set :drawItem.4:length *tmp80
+  300 op min :drawItem.4:length 122 *tmp79
   301 draw col %[white]
   302 op add *tmp81 :updateDisplay:y 5
   303 draw image 11 *tmp81 :drawItem.4:item 16 0
 
   316 print :drawTextRight.8:text
   317 draw print :drawTextRight.8:x :drawTextRight.8:y @right
   318 label *label60
-    * op add *tmp84 :drawBoldRight.4:x 1
-    * set :drawTextRight.9:x *tmp84
+  319 op add :drawTextRight.9:x :drawBoldRight.4:x 1
   320 set :drawTextRight.9:y :drawBoldRight.4:y
   321 set :drawTextRight.9:text :drawBoldRight.4:text
   322 print :drawTextRight.9:text
 
   343 print :drawTextLeft.2:text
   344 draw print :drawTextLeft.2:x :drawTextLeft.2:y @bottomLeft
   345 label *label63
-    * op add *tmp86 :drawBoldLeft.1:x 1
-    * set :drawTextLeft.3:x *tmp86
+  346 op add :drawTextLeft.3:x :drawBoldLeft.1:x 1
   347 set :drawTextLeft.3:y :drawBoldLeft.1:y
   348 set :drawTextLeft.3:text :drawBoldLeft.1:text
   349 print :drawTextLeft.3:text
 
   351 label *label64
   352 label *label62
   353 op sub :updateDisplay:y :updateDisplay:y 26
-    * sensor *tmp87 @unit @firstItem
-    * set :updateDisplay:item *tmp87
+  354 sensor :updateDisplay:item @unit @firstItem
   355 op equal *tmp88 :updateDisplay:item null
   356 jump *label65 equal *tmp88 false
   357 set :drawUnit:item @poly
 
   364 jump *label69 equal *tmp90 false
   365 op mul *tmp92 122 :drawItem.5:current
   366 op div *tmp93 *tmp92 :drawItem.5:target
-    * op min *tmp94 122 *tmp93
-    * set :drawItem.5:length *tmp94
+  367 op min :drawItem.5:length 122 *tmp93
   368 draw col %[white]
   369 op add *tmp95 :updateDisplay:y 5
   370 draw image 11 *tmp95 :drawItem.5:item 16 0
 
   383 print :drawTextRight.10:text
   384 draw print :drawTextRight.10:x :drawTextRight.10:y @right
   385 label *label72
-    * op add *tmp98 :drawBoldRight.5:x 1
-    * set :drawTextRight.11:x *tmp98
+  386 op add :drawTextRight.11:x :drawBoldRight.5:x 1
   387 set :drawTextRight.11:y :drawBoldRight.5:y
   388 set :drawTextRight.11:text :drawBoldRight.5:text
   389 print :drawTextRight.11:text
 
   409 jump *label76 equal *tmp100 false
   410 op mul *tmp102 122 :drawItem.6:current
   411 op div *tmp103 *tmp102 :drawItem.6:target
-    * op min *tmp104 122 *tmp103
-    * set :drawItem.6:length *tmp104
+  412 op min :drawItem.6:length 122 *tmp103
   413 draw col %[white]
   414 op add *tmp105 :updateDisplay:y 5
   415 draw image 11 *tmp105 :drawItem.6:item 16 0
 
   428 print :drawTextRight.12:text
   429 draw print :drawTextRight.12:x :drawTextRight.12:y @right
   430 label *label79
-    * op add *tmp108 :drawBoldRight.6:x 1
-    * set :drawTextRight.13:x *tmp108
+  431 op add :drawTextRight.13:x :drawBoldRight.6:x 1
   432 set :drawTextRight.13:y :drawBoldRight.6:y
   433 set :drawTextRight.13:text :drawBoldRight.6:text
   434 print :drawTextRight.13:text

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-15 instructions):
     0 label *label1
-    * op equal *tmp12 @unit null
-    * jump *label3 equal *tmp12 false
+    1 jump *label3 notEqual @unit null
     2 ubind @poly
     3 label *label2
     4 jump *label1 always
 
    49 op mod :updateDisplay:s :updateDisplay:t 60
    50 print :updateDisplay:m
    51 print ":"
-    * op lessThan *tmp18 :updateDisplay:s 10
-    * jump *label11 equal *tmp18 false
+   52 jump *label11 greaterThanEq :updateDisplay:s 10
    53 print "0"
    54 jump *label12 always
    55 label *label11
 
    87 op sub :updateDisplay:y :updateDisplay:y 76
    88 set :drawMaterial:item @copper
    89 read :drawMaterial:target processor1 ".copperTarget"
-    * op greaterThan *tmp25 :drawMaterial:target 0
-    * jump *label18 equal *tmp25 false
+   90 jump *label18 lessThanEq :drawMaterial:target 0
    91 read *tmp0 processor1 ".core"
    92 sensor *tmp27 *tmp0 :drawMaterial:item
    93 set :drawItem:item :drawMaterial:item
    94 set :drawItem:current *tmp27
    95 set :drawItem:target :drawMaterial:target
    96 set :drawItem:count :drawMaterial:target
-    * op greaterThan *tmp28 :drawItem:target 0
-    * jump *label21 equal *tmp28 false
+   97 jump *label21 lessThanEq :drawItem:target 0
    98 op mul *tmp30 122 :drawItem:current
    99 op div *tmp31 *tmp30 :drawItem:target
   100 op min :drawItem:length 122 *tmp31
 
   134 label *label17
   135 set :drawMaterial.1:item @lead
   136 read :drawMaterial.1:target processor1 ".leadTarget"
-    * op greaterThan *tmp37 :drawMaterial.1:target 0
-    * jump *label27 equal *tmp37 false
+  137 jump *label27 lessThanEq :drawMaterial.1:target 0
   138 read *tmp0 processor1 ".core"
   139 sensor *tmp39 *tmp0 :drawMaterial.1:item
   140 set :drawItem.1:item :drawMaterial.1:item
   141 set :drawItem.1:current *tmp39
   142 set :drawItem.1:target :drawMaterial.1:target
   143 set :drawItem.1:count :drawMaterial.1:target
-    * op greaterThan *tmp40 :drawItem.1:target 0
-    * jump *label30 equal *tmp40 false
+  144 jump *label30 lessThanEq :drawItem.1:target 0
   145 op mul *tmp42 122 :drawItem.1:current
   146 op div *tmp43 *tmp42 :drawItem.1:target
   147 op min :drawItem.1:length 122 *tmp43
 
   181 label *label26
   182 set :drawMaterial.2:item @graphite
   183 read :drawMaterial.2:target processor1 ".graphiteTarget"
-    * op greaterThan *tmp49 :drawMaterial.2:target 0
-    * jump *label36 equal *tmp49 false
+  184 jump *label36 lessThanEq :drawMaterial.2:target 0
   185 read *tmp0 processor1 ".core"
   186 sensor *tmp51 *tmp0 :drawMaterial.2:item
   187 set :drawItem.2:item :drawMaterial.2:item
   188 set :drawItem.2:current *tmp51
   189 set :drawItem.2:target :drawMaterial.2:target
   190 set :drawItem.2:count :drawMaterial.2:target
-    * op greaterThan *tmp52 :drawItem.2:target 0
-    * jump *label39 equal *tmp52 false
+  191 jump *label39 lessThanEq :drawItem.2:target 0
   192 op mul *tmp54 122 :drawItem.2:current
   193 op div *tmp55 *tmp54 :drawItem.2:target
   194 op min :drawItem.2:length 122 *tmp55
 
   228 label *label35
   229 set :drawMaterial.3:item @silicon
   230 read :drawMaterial.3:target processor1 ".siliconTarget"
-    * op greaterThan *tmp61 :drawMaterial.3:target 0
-    * jump *label45 equal *tmp61 false
+  231 jump *label45 lessThanEq :drawMaterial.3:target 0
   232 read *tmp0 processor1 ".core"
   233 sensor *tmp63 *tmp0 :drawMaterial.3:item
   234 set :drawItem.3:item :drawMaterial.3:item
   235 set :drawItem.3:current *tmp63
   236 set :drawItem.3:target :drawMaterial.3:target
   237 set :drawItem.3:count :drawMaterial.3:target
-    * op greaterThan *tmp64 :drawItem.3:target 0
-    * jump *label48 equal *tmp64 false
+  238 jump *label48 lessThanEq :drawItem.3:target 0
   239 op mul *tmp66 122 :drawItem.3:current
   240 op div *tmp67 *tmp66 :drawItem.3:target
   241 op min :drawItem.3:length 122 *tmp67
 
   275 label *label44
   276 set :drawMaterial.4:item @titanium
   277 read :drawMaterial.4:target processor1 ".titaniumTarget"
-    * op greaterThan *tmp73 :drawMaterial.4:target 0
-    * jump *label54 equal *tmp73 false
+  278 jump *label54 lessThanEq :drawMaterial.4:target 0
   279 read *tmp0 processor1 ".core"
   280 sensor *tmp75 *tmp0 :drawMaterial.4:item
   281 set :drawItem.4:item :drawMaterial.4:item
   282 set :drawItem.4:current *tmp75
   283 set :drawItem.4:target :drawMaterial.4:target
   284 set :drawItem.4:count :drawMaterial.4:target
-    * op greaterThan *tmp76 :drawItem.4:target 0
-    * jump *label57 equal *tmp76 false
+  285 jump *label57 lessThanEq :drawItem.4:target 0
   286 op mul *tmp78 122 :drawItem.4:current
   287 op div *tmp79 *tmp78 :drawItem.4:target
   288 op min :drawItem.4:length 122 *tmp79
 
   340 label *label62
   341 op sub :updateDisplay:y :updateDisplay:y 26
   342 sensor :updateDisplay:item @unit @firstItem
-    * op equal *tmp88 :updateDisplay:item null
-    * jump *label65 equal *tmp88 false
+  343 jump *label65 notEqual :updateDisplay:item null
   344 set :drawUnit:item @poly
   345 set :drawUnit:items 0
   346 set :drawItem.5:item :drawUnit:item
   347 set :drawItem.5:current :drawUnit:items
   348 set :drawItem.5:target 30
   349 set :drawItem.5:count :drawUnit:items
-    * op greaterThan *tmp90 :drawItem.5:target 0
-    * jump *label69 equal *tmp90 false
+  350 jump *label69 lessThanEq :drawItem.5:target 0
   351 op mul *tmp92 122 :drawItem.5:current
   352 op div *tmp93 *tmp92 :drawItem.5:target
   353 op min :drawItem.5:length 122 *tmp93
 
   391 set :drawItem.6:current :drawUnit.1:items
   392 set :drawItem.6:target 30
   393 set :drawItem.6:count :drawUnit.1:items
-    * op greaterThan *tmp100 :drawItem.6:target 0
-    * jump *label76 equal *tmp100 false
+  394 jump *label76 lessThanEq :drawItem.6:target 0
   395 op mul *tmp102 122 :drawItem.6:current
   396 op div *tmp103 *tmp102 :drawItem.6:target
   397 op min :drawItem.6:length 122 *tmp103

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-13 instructions):
 
    51 print ":"
    52 jump *label11 greaterThanEq :updateDisplay:s 10
    53 print "0"
-    * jump *label12 always
    54 label *label11
    55 label *label12
    56 op sub *tmp20 :updateDisplay:y 27
 
   123 label *label25
   124 label *label23
   125 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label22 always
   126 label *label21
   127 label *label22
   128 label *label20
-    * jump *label19 always
   129 label *label18
   130 label *label19
   131 label *label17
 
   168 label *label34
   169 label *label32
   170 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label31 always
   171 label *label30
   172 label *label31
   173 label *label29
-    * jump *label28 always
   174 label *label27
   175 label *label28
   176 label *label26
 
   213 label *label43
   214 label *label41
   215 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label40 always
   216 label *label39
   217 label *label40
   218 label *label38
-    * jump *label37 always
   219 label *label36
   220 label *label37
   221 label *label35
 
   258 label *label52
   259 label *label50
   260 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label49 always
   261 label *label48
   262 label *label49
   263 label *label47
-    * jump *label46 always
   264 label *label45
   265 label *label46
   266 label *label44
 
   303 label *label61
   304 label *label59
   305 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label58 always
   306 label *label57
   307 label *label58
   308 label *label56
-    * jump *label55 always
   309 label *label54
   310 label *label55
   311 label *label53
 
   366 label *label73
   367 label *label71
   368 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label70 always
   369 label *label69
   370 label *label70
   371 label *label68
 
   409 label *label80
   410 label *label78
   411 op sub :updateDisplay:y :updateDisplay:y 15
-    * jump *label77 always
   412 label *label76
   413 label *label77
   414 label *label75

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-2 instructions):
 
    10 set :updateDisplay:x3 136
    11 set :updateDisplay:y 161
    12 draw col %[gold]
-    * set :drawBold:x :updateDisplay:x1
-    * set :drawBold:y :updateDisplay:y
+   13 set :drawBold:x 40
+   14 set :drawBold:y 161
    15 set :drawBold:text "Objective"
-    * set :drawText:x :drawBold:x
-    * set :drawText:y :drawBold:y
-    * set :drawText:text :drawBold:text
-    * print :drawText:text
-    * draw print :drawText:x :drawText:y @bottom
+   16 set :drawText:x :updateDisplay:x1
+   17 set :drawText:y :updateDisplay:y
+   18 set :drawText:text "Objective"
+   19 print :drawBold:text
+   20 draw print :drawBold:x :drawBold:y @bottom
    21 label *label6
-    * op add :drawText.1:x :drawBold:x 1
-    * set :drawText.1:y :drawBold:y
-    * set :drawText.1:text :drawBold:text
-    * print :drawText.1:text
-    * draw print :drawText.1:x :drawText.1:y @bottom
+   22 op add :drawText.1:x :updateDisplay:x1 1
+   23 set :drawText.1:y :updateDisplay:y
+   24 set :drawText.1:text "Objective"
+   25 print :drawBold:text
+   26 draw print :drawText.1:x :drawBold:y @bottom
    27 label *label7
    28 label *label5
    29 draw col %[green]
-    * set :drawBold.1:x :updateDisplay:x3
-    * set :drawBold.1:y :updateDisplay:y
+   30 set :drawBold.1:x 136
+   31 set :drawBold.1:y 161
    32 set :drawBold.1:text "Building"
-    * set :drawText.2:x :drawBold.1:x
-    * set :drawText.2:y :drawBold.1:y
-    * set :drawText.2:text :drawBold.1:text
-    * print :drawText.2:text
-    * draw print :drawText.2:x :drawText.2:y @bottom
+   33 set :drawText.2:x :updateDisplay:x3
+   34 set :drawText.2:y :updateDisplay:y
+   35 set :drawText.2:text "Building"
+   36 print :drawBold.1:text
+   37 draw print :drawBold.1:x :drawBold.1:y @bottom
    38 label *label9
-    * op add :drawText.3:x :drawBold.1:x 1
-    * set :drawText.3:y :drawBold.1:y
-    * set :drawText.3:text :drawBold.1:text
-    * print :drawText.3:text
-    * draw print :drawText.3:x :drawText.3:y @bottom
+   39 op add :drawText.3:x :updateDisplay:x3 1
+   40 set :drawText.3:y :updateDisplay:y
+   41 set :drawText.3:text "Building"
+   42 print :drawBold.1:text
+   43 draw print :drawText.3:x :drawBold.1:y @bottom
    44 label *label10
    45 label *label8
    46 draw col %[salmon]
 
    53 print "0"
    54 label *label11
    55 label *label12
-    * op sub *tmp20 :updateDisplay:y 27
-    * set :drawText.4:x :updateDisplay:x2
-    * set :drawText.4:y *tmp20
+   56 op sub *tmp20 161 27
+   57 set :drawText.4:x 88
+   58 set :drawText.4:y 134
    59 set :drawText.4:text :updateDisplay:s
-    * print :drawText.4:text
-    * draw print :drawText.4:x :drawText.4:y @bottom
+   60 print :updateDisplay:s
+   61 draw print :updateDisplay:x2 *tmp20 @bottom
    62 label *label13
    63 draw col %[white]
-    * op sub *tmp21 :updateDisplay:y 60
+   64 op sub *tmp21 161 60
    65 set :drawBoldLeft:x 22
-    * set :drawBoldLeft:y *tmp21
+   66 set :drawBoldLeft:y 101
    67 set :drawBoldLeft:text "Materials"
-    * set :drawTextLeft:x :drawBoldLeft:x
-    * set :drawTextLeft:y :drawBoldLeft:y
-    * set :drawTextLeft:text :drawBoldLeft:text
-    * print :drawTextLeft:text
-    * draw print :drawTextLeft:x :drawTextLeft:y @bottomLeft
+   68 set :drawTextLeft:x 22
+   69 set :drawTextLeft:y *tmp21
+   70 set :drawTextLeft:text "Materials"
+   71 print :drawBoldLeft:text
+   72 draw print :drawBoldLeft:x :drawBoldLeft:y @bottomLeft
    73 label *label15
-    * op add :drawTextLeft.1:x :drawBoldLeft:x 1
-    * set :drawTextLeft.1:y :drawBoldLeft:y
-    * set :drawTextLeft.1:text :drawBoldLeft:text
-    * print :drawTextLeft.1:text
-    * draw print :drawTextLeft.1:x :drawTextLeft.1:y @bottomLeft
+   74 op add :drawTextLeft.1:x 22 1
+   75 set :drawTextLeft.1:y *tmp21
+   76 set :drawTextLeft.1:text "Materials"
+   77 print :drawBoldLeft:text
+   78 draw print 23 :drawBoldLeft:y @bottomLeft
    79 label *label16
    80 label *label14
-    * op sub *tmp23 :updateDisplay:y 24
-    * draw image :updateDisplay:x1 *tmp23 @air-factory 32 0
-    * op sub *tmp24 :updateDisplay:y 24
+   81 op sub *tmp23 161 24
+   82 draw image 40 137 @air-factory 32 0
+   83 op sub *tmp24 161 24
    84 read *tmp1 processor1 ".nextBlock"
-    * draw image :updateDisplay:x3 *tmp24 *tmp1 32 0
-    * op sub :updateDisplay:y :updateDisplay:y 76
+   85 draw image 136 137 *tmp1 32 0
+   86 op sub :updateDisplay:y 161 76
    87 set :drawMaterial:item @copper
    88 read :drawMaterial:target processor1 ".copperTarget"
    89 jump *label18 lessThanEq :drawMaterial:target 0
    90 read *tmp0 processor1 ".core"
-    * sensor *tmp27 *tmp0 :drawMaterial:item
-    * set :drawItem:item :drawMaterial:item
+   91 sensor *tmp27 *tmp0 @copper
+   92 set :drawItem:item @copper
    93 set :drawItem:current *tmp27
    94 set :drawItem:target :drawMaterial:target
    95 set :drawItem:count :drawMaterial:target
-    * jump *label21 lessThanEq :drawItem:target 0
-    * op mul *tmp30 122 :drawItem:current
-    * op div *tmp31 *tmp30 :drawItem:target
+   96 jump *label21 lessThanEq :drawMaterial:target 0
+   97 op mul *tmp30 122 *tmp27
+   98 op div *tmp31 *tmp30 :drawMaterial:target
    99 op min :drawItem:length 122 *tmp31
   100 draw col %[white]
-    * op add *tmp33 :updateDisplay:y 5
-    * draw image 11 *tmp33 :drawItem:item 16 0
+  101 op add *tmp33 85 5
+  102 draw image 11 90 :drawMaterial:item 16 0
   103 draw color 0 128 0 255
-    * draw rect 22 :updateDisplay:y :drawItem:length 10
+  104 draw rect 22 85 :drawItem:length 10
   105 draw color 0 255 0 255
-    * draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp34 :updateDisplay:y 5
-    * op add *tmp35 *tmp34 2
+  106 draw lineRect 22 85 122 10
+  107 op add *tmp34 85 5
+  108 op add *tmp35 90 2
   109 set :drawBoldRight:x 170
-    * set :drawBoldRight:y *tmp35
-    * set :drawBoldRight:text :drawItem:count
-    * set :drawTextRight:x :drawBoldRight:x
-    * set :drawTextRight:y :drawBoldRight:y
-    * set :drawTextRight:text :drawBoldRight:text
-    * print :drawTextRight:text
-    * draw print :drawTextRight:x :drawTextRight:y @right
+  110 set :drawBoldRight:y 92
+  111 set :drawBoldRight:text :drawMaterial:target
+  112 set :drawTextRight:x 170
+  113 set :drawTextRight:y *tmp35
+  114 set :drawTextRight:text :drawItem:count
+  115 print :drawBoldRight:text
+  116 draw print :drawBoldRight:x :drawBoldRight:y @right
   117 label *label24
-    * op add :drawTextRight.1:x :drawBoldRight:x 1
-    * set :drawTextRight.1:y :drawBoldRight:y
-    * set :drawTextRight.1:text :drawBoldRight:text
-    * print :drawTextRight.1:text
-    * draw print :drawTextRight.1:x :drawTextRight.1:y @right
+  118 op add :drawTextRight.1:x 170 1
+  119 set :drawTextRight.1:y *tmp35
+  120 set :drawTextRight.1:text :drawItem:count
+  121 print :drawBoldRight:text
+  122 draw print 171 :drawBoldRight:y @right
   123 label *label25
   124 label *label23
-    * op sub :updateDisplay:y :updateDisplay:y 15
+  125 op sub :updateDisplay:y 85 15
   126 label *label21
   127 label *label22
   128 label *label20
 
   133 read :drawMaterial.1:target processor1 ".leadTarget"
   134 jump *label27 lessThanEq :drawMaterial.1:target 0
   135 read *tmp0 processor1 ".core"
-    * sensor *tmp39 *tmp0 :drawMaterial.1:item
-    * set :drawItem.1:item :drawMaterial.1:item
+  136 sensor *tmp39 *tmp0 @lead
+  137 set :drawItem.1:item @lead
   138 set :drawItem.1:current *tmp39
   139 set :drawItem.1:target :drawMaterial.1:target
   140 set :drawItem.1:count :drawMaterial.1:target
-    * jump *label30 lessThanEq :drawItem.1:target 0
-    * op mul *tmp42 122 :drawItem.1:current
-    * op div *tmp43 *tmp42 :drawItem.1:target
+  141 jump *label30 lessThanEq :drawMaterial.1:target 0
+  142 op mul *tmp42 122 *tmp39
+  143 op div *tmp43 *tmp42 :drawMaterial.1:target
   144 op min :drawItem.1:length 122 *tmp43
   145 draw col %[white]
   146 op add *tmp45 :updateDisplay:y 5
-    * draw image 11 *tmp45 :drawItem.1:item 16 0
+  147 draw image 11 *tmp45 :drawMaterial.1:item 16 0
   148 draw color 0 128 0 255
   149 draw rect 22 :updateDisplay:y :drawItem.1:length 10
   150 draw color 0 255 0 255
   151 draw lineRect 22 :updateDisplay:y 122 10
   152 op add *tmp46 :updateDisplay:y 5
-    * op add *tmp47 *tmp46 2
+  153 op add *tmp47 *tmp45 2
   154 set :drawBoldRight.1:x 170
   155 set :drawBoldRight.1:y *tmp47
-    * set :drawBoldRight.1:text :drawItem.1:count
-    * set :drawTextRight.2:x :drawBoldRight.1:x
-    * set :drawTextRight.2:y :drawBoldRight.1:y
-    * set :drawTextRight.2:text :drawBoldRight.1:text
-    * print :drawTextRight.2:text
-    * draw print :drawTextRight.2:x :drawTextRight.2:y @right
+  156 set :drawBoldRight.1:text :drawMaterial.1:target
+  157 set :drawTextRight.2:x 170
+  158 set :drawTextRight.2:y *tmp47
+  159 set :drawTextRight.2:text :drawItem.1:count
+  160 print :drawBoldRight.1:text
+  161 draw print :drawBoldRight.1:x :drawBoldRight.1:y @right
   162 label *label33
-    * op add :drawTextRight.3:x :drawBoldRight.1:x 1
-    * set :drawTextRight.3:y :drawBoldRight.1:y
-    * set :drawTextRight.3:text :drawBoldRight.1:text
-    * print :drawTextRight.3:text
-    * draw print :drawTextRight.3:x :drawTextRight.3:y @right
+  163 op add :drawTextRight.3:x 170 1
+  164 set :drawTextRight.3:y *tmp47
+  165 set :drawTextRight.3:text :drawItem.1:count
+  166 print :drawBoldRight.1:text
+  167 draw print 171 :drawBoldRight.1:y @right
   168 label *label34
   169 label *label32
   170 op sub :updateDisplay:y :updateDisplay:y 15
 
   178 read :drawMaterial.2:target processor1 ".graphiteTarget"
   179 jump *label36 lessThanEq :drawMaterial.2:target 0
   180 read *tmp0 processor1 ".core"
-    * sensor *tmp51 *tmp0 :drawMaterial.2:item
-    * set :drawItem.2:item :drawMaterial.2:item
+  181 sensor *tmp51 *tmp0 @graphite
+  182 set :drawItem.2:item @graphite
   183 set :drawItem.2:current *tmp51
   184 set :drawItem.2:target :drawMaterial.2:target
   185 set :drawItem.2:count :drawMaterial.2:target
-    * jump *label39 lessThanEq :drawItem.2:target 0
-    * op mul *tmp54 122 :drawItem.2:current
-    * op div *tmp55 *tmp54 :drawItem.2:target
+  186 jump *label39 lessThanEq :drawMaterial.2:target 0
+  187 op mul *tmp54 122 *tmp51
+  188 op div *tmp55 *tmp54 :drawMaterial.2:target
   189 op min :drawItem.2:length 122 *tmp55
   190 draw col %[white]
   191 op add *tmp57 :updateDisplay:y 5
-    * draw image 11 *tmp57 :drawItem.2:item 16 0
+  192 draw image 11 *tmp57 :drawMaterial.2:item 16 0
   193 draw color 0 128 0 255
   194 draw rect 22 :updateDisplay:y :drawItem.2:length 10
   195 draw color 0 255 0 255
   196 draw lineRect 22 :updateDisplay:y 122 10
   197 op add *tmp58 :updateDisplay:y 5
-    * op add *tmp59 *tmp58 2
+  198 op add *tmp59 *tmp57 2
   199 set :drawBoldRight.2:x 170
   200 set :drawBoldRight.2:y *tmp59
-    * set :drawBoldRight.2:text :drawItem.2:count
-    * set :drawTextRight.4:x :drawBoldRight.2:x
-    * set :drawTextRight.4:y :drawBoldRight.2:y
-    * set :drawTextRight.4:text :drawBoldRight.2:text
-    * print :drawTextRight.4:text
-    * draw print :drawTextRight.4:x :drawTextRight.4:y @right
+  201 set :drawBoldRight.2:text :drawMaterial.2:target
+  202 set :drawTextRight.4:x 170
+  203 set :drawTextRight.4:y *tmp59
+  204 set :drawTextRight.4:text :drawItem.2:count
+  205 print :drawBoldRight.2:text
+  206 draw print :drawBoldRight.2:x :drawBoldRight.2:y @right
   207 label *label42
-    * op add :drawTextRight.5:x :drawBoldRight.2:x 1
-    * set :drawTextRight.5:y :drawBoldRight.2:y
-    * set :drawTextRight.5:text :drawBoldRight.2:text
-    * print :drawTextRight.5:text
-    * draw print :drawTextRight.5:x :drawTextRight.5:y @right
+  208 op add :drawTextRight.5:x 170 1
+  209 set :drawTextRight.5:y *tmp59
+  210 set :drawTextRight.5:text :drawItem.2:count
+  211 print :drawBoldRight.2:text
+  212 draw print 171 :drawBoldRight.2:y @right
   213 label *label43
   214 label *label41
   215 op sub :updateDisplay:y :updateDisplay:y 15
 
   223 read :drawMaterial.3:target processor1 ".siliconTarget"
   224 jump *label45 lessThanEq :drawMaterial.3:target 0
   225 read *tmp0 processor1 ".core"
-    * sensor *tmp63 *tmp0 :drawMaterial.3:item
-    * set :drawItem.3:item :drawMaterial.3:item
+  226 sensor *tmp63 *tmp0 @silicon
+  227 set :drawItem.3:item @silicon
   228 set :drawItem.3:current *tmp63
   229 set :drawItem.3:target :drawMaterial.3:target
   230 set :drawItem.3:count :drawMaterial.3:target
-    * jump *label48 lessThanEq :drawItem.3:target 0
-    * op mul *tmp66 122 :drawItem.3:current
-    * op div *tmp67 *tmp66 :drawItem.3:target
+  231 jump *label48 lessThanEq :drawMaterial.3:target 0
+  232 op mul *tmp66 122 *tmp63
+  233 op div *tmp67 *tmp66 :drawMaterial.3:target
   234 op min :drawItem.3:length 122 *tmp67
   235 draw col %[white]
   236 op add *tmp69 :updateDisplay:y 5
-    * draw image 11 *tmp69 :drawItem.3:item 16 0
+  237 draw image 11 *tmp69 :drawMaterial.3:item 16 0
   238 draw color 0 128 0 255
   239 draw rect 22 :updateDisplay:y :drawItem.3:length 10
   240 draw color 0 255 0 255
   241 draw lineRect 22 :updateDisplay:y 122 10
   242 op add *tmp70 :updateDisplay:y 5
-    * op add *tmp71 *tmp70 2
+  243 op add *tmp71 *tmp69 2
   244 set :drawBoldRight.3:x 170
   245 set :drawBoldRight.3:y *tmp71
-    * set :drawBoldRight.3:text :drawItem.3:count
-    * set :drawTextRight.6:x :drawBoldRight.3:x
-    * set :drawTextRight.6:y :drawBoldRight.3:y
-    * set :drawTextRight.6:text :drawBoldRight.3:text
-    * print :drawTextRight.6:text
-    * draw print :drawTextRight.6:x :drawTextRight.6:y @right
+  246 set :drawBoldRight.3:text :drawMaterial.3:target
+  247 set :drawTextRight.6:x 170
+  248 set :drawTextRight.6:y *tmp71
+  249 set :drawTextRight.6:text :drawItem.3:count
+  250 print :drawBoldRight.3:text
+  251 draw print :drawBoldRight.3:x :drawBoldRight.3:y @right
   252 label *label51
-    * op add :drawTextRight.7:x :drawBoldRight.3:x 1
-    * set :drawTextRight.7:y :drawBoldRight.3:y
-    * set :drawTextRight.7:text :drawBoldRight.3:text
-    * print :drawTextRight.7:text
-    * draw print :drawTextRight.7:x :drawTextRight.7:y @right
+  253 op add :drawTextRight.7:x 170 1
+  254 set :drawTextRight.7:y *tmp71
+  255 set :drawTextRight.7:text :drawItem.3:count
+  256 print :drawBoldRight.3:text
+  257 draw print 171 :drawBoldRight.3:y @right
   258 label *label52
   259 label *label50
   260 op sub :updateDisplay:y :updateDisplay:y 15
 
   268 read :drawMaterial.4:target processor1 ".titaniumTarget"
   269 jump *label54 lessThanEq :drawMaterial.4:target 0
   270 read *tmp0 processor1 ".core"
-    * sensor *tmp75 *tmp0 :drawMaterial.4:item
-    * set :drawItem.4:item :drawMaterial.4:item
+  271 sensor *tmp75 *tmp0 @titanium
+  272 set :drawItem.4:item @titanium
   273 set :drawItem.4:current *tmp75
   274 set :drawItem.4:target :drawMaterial.4:target
   275 set :drawItem.4:count :drawMaterial.4:target
-    * jump *label57 lessThanEq :drawItem.4:target 0
-    * op mul *tmp78 122 :drawItem.4:current
-    * op div *tmp79 *tmp78 :drawItem.4:target
+  276 jump *label57 lessThanEq :drawMaterial.4:target 0
+  277 op mul *tmp78 122 *tmp75
+  278 op div *tmp79 *tmp78 :drawMaterial.4:target
   279 op min :drawItem.4:length 122 *tmp79
   280 draw col %[white]
   281 op add *tmp81 :updateDisplay:y 5
-    * draw image 11 *tmp81 :drawItem.4:item 16 0
+  282 draw image 11 *tmp81 :drawMaterial.4:item 16 0
   283 draw color 0 128 0 255
   284 draw rect 22 :updateDisplay:y :drawItem.4:length 10
   285 draw color 0 255 0 255
   286 draw lineRect 22 :updateDisplay:y 122 10
   287 op add *tmp82 :updateDisplay:y 5
-    * op add *tmp83 *tmp82 2
+  288 op add *tmp83 *tmp81 2
   289 set :drawBoldRight.4:x 170
   290 set :drawBoldRight.4:y *tmp83
-    * set :drawBoldRight.4:text :drawItem.4:count
-    * set :drawTextRight.8:x :drawBoldRight.4:x
-    * set :drawTextRight.8:y :drawBoldRight.4:y
-    * set :drawTextRight.8:text :drawBoldRight.4:text
-    * print :drawTextRight.8:text
-    * draw print :drawTextRight.8:x :drawTextRight.8:y @right
+  291 set :drawBoldRight.4:text :drawMaterial.4:target
+  292 set :drawTextRight.8:x 170
+  293 set :drawTextRight.8:y *tmp83
+  294 set :drawTextRight.8:text :drawItem.4:count
+  295 print :drawBoldRight.4:text
+  296 draw print :drawBoldRight.4:x :drawBoldRight.4:y @right
   297 label *label60
-    * op add :drawTextRight.9:x :drawBoldRight.4:x 1
-    * set :drawTextRight.9:y :drawBoldRight.4:y
-    * set :drawTextRight.9:text :drawBoldRight.4:text
-    * print :drawTextRight.9:text
-    * draw print :drawTextRight.9:x :drawTextRight.9:y @right
+  298 op add :drawTextRight.9:x 170 1
+  299 set :drawTextRight.9:y *tmp83
+  300 set :drawTextRight.9:text :drawItem.4:count
+  301 print :drawBoldRight.4:text
+  302 draw print 171 :drawBoldRight.4:y @right
   303 label *label61
   304 label *label59
   305 op sub :updateDisplay:y :updateDisplay:y 15
 
   314 set :drawBoldLeft.1:x 22
   315 set :drawBoldLeft.1:y *tmp85
   316 set :drawBoldLeft.1:text "Unit status"
-    * set :drawTextLeft.2:x :drawBoldLeft.1:x
-    * set :drawTextLeft.2:y :drawBoldLeft.1:y
-    * set :drawTextLeft.2:text :drawBoldLeft.1:text
-    * print :drawTextLeft.2:text
-    * draw print :drawTextLeft.2:x :drawTextLeft.2:y @bottomLeft
+  317 set :drawTextLeft.2:x 22
+  318 set :drawTextLeft.2:y *tmp85
+  319 set :drawTextLeft.2:text "Unit status"
+  320 print :drawBoldLeft.1:text
+  321 draw print :drawBoldLeft.1:x :drawBoldLeft.1:y @bottomLeft
   322 label *label63
-    * op add :drawTextLeft.3:x :drawBoldLeft.1:x 1
-    * set :drawTextLeft.3:y :drawBoldLeft.1:y
-    * set :drawTextLeft.3:text :drawBoldLeft.1:text
-    * print :drawTextLeft.3:text
-    * draw print :drawTextLeft.3:x :drawTextLeft.3:y @bottomLeft
+  323 op add :drawTextLeft.3:x 22 1
+  324 set :drawTextLeft.3:y *tmp85
+  325 set :drawTextLeft.3:text "Unit status"
+  326 print :drawBoldLeft.1:text
+  327 draw print 23 :drawBoldLeft.1:y @bottomLeft
   328 label *label64
   329 label *label62
   330 op sub :updateDisplay:y :updateDisplay:y 26
 
   332 jump *label65 notEqual :updateDisplay:item null
   333 set :drawUnit:item @poly
   334 set :drawUnit:items 0
-    * set :drawItem.5:item :drawUnit:item
-    * set :drawItem.5:current :drawUnit:items
+  335 set :drawItem.5:item @poly
+  336 set :drawItem.5:current 0
   337 set :drawItem.5:target 30
-    * set :drawItem.5:count :drawUnit:items
-    * jump *label69 lessThanEq :drawItem.5:target 0
-    * op mul *tmp92 122 :drawItem.5:current
-    * op div *tmp93 *tmp92 :drawItem.5:target
+  338 set :drawItem.5:count 0
+  339 jump *label69 lessThanEq 30 0
+  340 op mul *tmp92 122 :drawUnit:items
+  341 op div *tmp93 *tmp92 30
   342 op min :drawItem.5:length 122 *tmp93
   343 draw col %[white]
   344 op add *tmp95 :updateDisplay:y 5
-    * draw image 11 *tmp95 :drawItem.5:item 16 0
+  345 draw image 11 *tmp95 :drawUnit:item 16 0
   346 draw color 0 128 0 255
   347 draw rect 22 :updateDisplay:y :drawItem.5:length 10
   348 draw color 0 255 0 255
   349 draw lineRect 22 :updateDisplay:y 122 10
   350 op add *tmp96 :updateDisplay:y 5
-    * op add *tmp97 *tmp96 2
+  351 op add *tmp97 *tmp95 2
   352 set :drawBoldRight.5:x 170
   353 set :drawBoldRight.5:y *tmp97
-    * set :drawBoldRight.5:text :drawItem.5:count
-    * set :drawTextRight.10:x :drawBoldRight.5:x
-    * set :drawTextRight.10:y :drawBoldRight.5:y
-    * set :drawTextRight.10:text :drawBoldRight.5:text
-    * print :drawTextRight.10:text
-    * draw print :drawTextRight.10:x :drawTextRight.10:y @right
+  354 set :drawBoldRight.5:text :drawUnit:items
+  355 set :drawTextRight.10:x 170
+  356 set :drawTextRight.10:y *tmp97
+  357 set :drawTextRight.10:text :drawItem.5:count
+  358 print :drawBoldRight.5:text
+  359 draw print :drawBoldRight.5:x :drawBoldRight.5:y @right
   360 label *label72
-    * op add :drawTextRight.11:x :drawBoldRight.5:x 1
-    * set :drawTextRight.11:y :drawBoldRight.5:y
-    * set :drawTextRight.11:text :drawBoldRight.5:text
-    * print :drawTextRight.11:text
-    * draw print :drawTextRight.11:x :drawTextRight.11:y @right
+  361 op add :drawTextRight.11:x 170 1
+  362 set :drawTextRight.11:y *tmp97
+  363 set :drawTextRight.11:text :drawItem.5:count
+  364 print :drawBoldRight.5:text
+  365 draw print 171 :drawBoldRight.5:y @right
   366 label *label73
   367 label *label71
-    * op sub :updateDisplay:y :updateDisplay:y 15
   368 label *label69
   369 label *label70
   370 label *label68
 
   374 sensor *tmp99 @unit @totalItems
   375 set :drawUnit.1:item :updateDisplay:item
   376 set :drawUnit.1:items *tmp99
-    * set :drawItem.6:item :drawUnit.1:item
-    * set :drawItem.6:current :drawUnit.1:items
+  377 set :drawItem.6:item :updateDisplay:item
+  378 set :drawItem.6:current *tmp99
   379 set :drawItem.6:target 30
-    * set :drawItem.6:count :drawUnit.1:items
-    * jump *label76 lessThanEq :drawItem.6:target 0
-    * op mul *tmp102 122 :drawItem.6:current
-    * op div *tmp103 *tmp102 :drawItem.6:target
+  380 set :drawItem.6:count *tmp99
+  381 jump *label76 lessThanEq 30 0
+  382 op mul *tmp102 122 :drawUnit.1:items
+  383 op div *tmp103 *tmp102 30
   384 op min :drawItem.6:length 122 *tmp103
   385 draw col %[white]
   386 op add *tmp105 :updateDisplay:y 5
-    * draw image 11 *tmp105 :drawItem.6:item 16 0
+  387 draw image 11 *tmp105 :drawUnit.1:item 16 0
   388 draw color 0 128 0 255
   389 draw rect 22 :updateDisplay:y :drawItem.6:length 10
   390 draw color 0 255 0 255
   391 draw lineRect 22 :updateDisplay:y 122 10
   392 op add *tmp106 :updateDisplay:y 5
-    * op add *tmp107 *tmp106 2
+  393 op add *tmp107 *tmp105 2
   394 set :drawBoldRight.6:x 170
   395 set :drawBoldRight.6:y *tmp107
-    * set :drawBoldRight.6:text :drawItem.6:count
-    * set :drawTextRight.12:x :drawBoldRight.6:x
-    * set :drawTextRight.12:y :drawBoldRight.6:y
-    * set :drawTextRight.12:text :drawBoldRight.6:text
-    * print :drawTextRight.12:text
-    * draw print :drawTextRight.12:x :drawTextRight.12:y @right
+  396 set :drawBoldRight.6:text :drawUnit.1:items
+  397 set :drawTextRight.12:x 170
+  398 set :drawTextRight.12:y *tmp107
+  399 set :drawTextRight.12:text :drawItem.6:count
+  400 print :drawBoldRight.6:text
+  401 draw print :drawBoldRight.6:x :drawBoldRight.6:y @right
   402 label *label79
-    * op add :drawTextRight.13:x :drawBoldRight.6:x 1
-    * set :drawTextRight.13:y :drawBoldRight.6:y
-    * set :drawTextRight.13:text :drawBoldRight.6:text
-    * print :drawTextRight.13:text
-    * draw print :drawTextRight.13:x :drawTextRight.13:y @right
+  403 op add :drawTextRight.13:x 170 1
+  404 set :drawTextRight.13:y *tmp107
+  405 set :drawTextRight.13:text :drawItem.6:count
+  406 print :drawBoldRight.6:text
+  407 draw print 171 :drawBoldRight.6:y @right
   408 label *label80
   409 label *label78
-    * op sub :updateDisplay:y :updateDisplay:y 15
   410 label *label76
   411 label *label77
   412 label *label75

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-74 instructions):
 
    13 set :drawBold:x 40
    14 set :drawBold:y 161
    15 set :drawBold:text "Objective"
-    * set :drawText:x :updateDisplay:x1
-    * set :drawText:y :updateDisplay:y
-    * set :drawText:text "Objective"
-    * print :drawBold:text
-    * draw print :drawBold:x :drawBold:y @bottom
+   16 set :drawText:x 40
+   17 set :drawText:y 161
+   18 print "Objective"
+   19 draw print 40 161 @bottom
    20 label *label6
-    * op add :drawText.1:x :updateDisplay:x1 1
-    * set :drawText.1:y :updateDisplay:y
-    * set :drawText.1:text "Objective"
-    * print :drawBold:text
-    * draw print :drawText.1:x :drawBold:y @bottom
+   21 op add :drawText.1:x 40 1
+   22 set :drawText.1:y 161
+   23 print "Objective"
+   24 draw print 41 161 @bottom
    25 label *label7
    26 label *label5
    27 draw col %[green]
    28 set :drawBold.1:x 136
    29 set :drawBold.1:y 161
    30 set :drawBold.1:text "Building"
-    * set :drawText.2:x :updateDisplay:x3
-    * set :drawText.2:y :updateDisplay:y
-    * set :drawText.2:text "Building"
-    * print :drawBold.1:text
-    * draw print :drawBold.1:x :drawBold.1:y @bottom
+   31 set :drawText.2:x 136
+   32 set :drawText.2:y 161
+   33 print "Building"
+   34 draw print 136 161 @bottom
    35 label *label9
-    * op add :drawText.3:x :updateDisplay:x3 1
-    * set :drawText.3:y :updateDisplay:y
-    * set :drawText.3:text "Building"
-    * print :drawBold.1:text
-    * draw print :drawText.3:x :drawBold.1:y @bottom
+   36 op add :drawText.3:x 136 1
+   37 set :drawText.3:y 161
+   38 print "Building"
+   39 draw print 137 161 @bottom
    40 label *label10
    41 label *label8
    42 draw col %[salmon]
 
    50 label *label11
    51 label *label12
    52 op sub *tmp20 161 27
-    * set :drawText.4:x 88
-    * set :drawText.4:y 134
-    * set :drawText.4:text :updateDisplay:s
    53 print :updateDisplay:s
-    * draw print :updateDisplay:x2 *tmp20 @bottom
+   54 draw print 88 134 @bottom
    55 label *label13
    56 draw col %[white]
    57 op sub *tmp21 161 60
    58 set :drawBoldLeft:x 22
    59 set :drawBoldLeft:y 101
    60 set :drawBoldLeft:text "Materials"
-    * set :drawTextLeft:x 22
-    * set :drawTextLeft:y *tmp21
-    * set :drawTextLeft:text "Materials"
-    * print :drawBoldLeft:text
-    * draw print :drawBoldLeft:x :drawBoldLeft:y @bottomLeft
+   61 set :drawTextLeft:y 101
+   62 print "Materials"
+   63 draw print 22 101 @bottomLeft
    64 label *label15
-    * op add :drawTextLeft.1:x 22 1
-    * set :drawTextLeft.1:y *tmp21
-    * set :drawTextLeft.1:text "Materials"
-    * print :drawBoldLeft:text
-    * draw print 23 :drawBoldLeft:y @bottomLeft
+   65 set :drawTextLeft.1:y 101
+   66 print "Materials"
+   67 draw print 23 101 @bottomLeft
    68 label *label16
    69 label *label14
-    * op sub *tmp23 161 24
    70 draw image 40 137 @air-factory 32 0
-    * op sub *tmp24 161 24
    71 read *tmp1 processor1 ".nextBlock"
    72 draw image 136 137 *tmp1 32 0
    73 op sub :updateDisplay:y 161 76
 
    76 jump *label18 lessThanEq :drawMaterial:target 0
    77 read *tmp0 processor1 ".core"
    78 sensor *tmp27 *tmp0 @copper
-    * set :drawItem:item @copper
-    * set :drawItem:current *tmp27
-    * set :drawItem:target :drawMaterial:target
    79 set :drawItem:count :drawMaterial:target
    80 jump *label21 lessThanEq :drawMaterial:target 0
    81 op mul *tmp30 122 *tmp27
    82 op div *tmp31 *tmp30 :drawMaterial:target
    83 op min :drawItem:length 122 *tmp31
    84 draw col %[white]
-    * op add *tmp33 85 5
-    * draw image 11 90 :drawMaterial:item 16 0
+   85 draw image 11 90 @copper 16 0
    86 draw color 0 128 0 255
    87 draw rect 22 85 :drawItem:length 10
    88 draw color 0 255 0 255
    89 draw lineRect 22 85 122 10
-    * op add *tmp34 85 5
    90 op add *tmp35 90 2
    91 set :drawBoldRight:x 170
    92 set :drawBoldRight:y 92
    93 set :drawBoldRight:text :drawMaterial:target
-    * set :drawTextRight:x 170
-    * set :drawTextRight:y *tmp35
-    * set :drawTextRight:text :drawItem:count
-    * print :drawBoldRight:text
-    * draw print :drawBoldRight:x :drawBoldRight:y @right
+   94 set :drawTextRight:y 92
+   95 set :drawTextRight:text :drawMaterial:target
+   96 print :drawMaterial:target
+   97 draw print 170 92 @right
    98 label *label24
-    * op add :drawTextRight.1:x 170 1
-    * set :drawTextRight.1:y *tmp35
-    * set :drawTextRight.1:text :drawItem:count
-    * print :drawBoldRight:text
-    * draw print 171 :drawBoldRight:y @right
+   99 set :drawTextRight.1:y 92
+  100 set :drawTextRight.1:text :drawMaterial:target
+  101 print :drawMaterial:target
+  102 draw print 171 92 @right
   103 label *label25
   104 label *label23
   105 op sub :updateDisplay:y 85 15
 
   114 jump *label27 lessThanEq :drawMaterial.1:target 0
   115 read *tmp0 processor1 ".core"
   116 sensor *tmp39 *tmp0 @lead
-    * set :drawItem.1:item @lead
-    * set :drawItem.1:current *tmp39
-    * set :drawItem.1:target :drawMaterial.1:target
   117 set :drawItem.1:count :drawMaterial.1:target
   118 jump *label30 lessThanEq :drawMaterial.1:target 0
   119 op mul *tmp42 122 *tmp39
 
   121 op min :drawItem.1:length 122 *tmp43
   122 draw col %[white]
   123 op add *tmp45 :updateDisplay:y 5
-    * draw image 11 *tmp45 :drawMaterial.1:item 16 0
+  124 draw image 11 *tmp45 @lead 16 0
   125 draw color 0 128 0 255
   126 draw rect 22 :updateDisplay:y :drawItem.1:length 10
   127 draw color 0 255 0 255
   128 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp46 :updateDisplay:y 5
-    * op add *tmp47 *tmp45 2
+  129 op add *tmp47 :updateDisplay:y 7
   130 set :drawBoldRight.1:x 170
   131 set :drawBoldRight.1:y *tmp47
   132 set :drawBoldRight.1:text :drawMaterial.1:target
-    * set :drawTextRight.2:x 170
-    * set :drawTextRight.2:y *tmp47
-    * set :drawTextRight.2:text :drawItem.1:count
-    * print :drawBoldRight.1:text
-    * draw print :drawBoldRight.1:x :drawBoldRight.1:y @right
+  133 set :drawTextRight.2:text :drawMaterial.1:target
+  134 print :drawMaterial.1:target
+  135 draw print 170 *tmp47 @right
   136 label *label33
-    * op add :drawTextRight.3:x 170 1
-    * set :drawTextRight.3:y *tmp47
-    * set :drawTextRight.3:text :drawItem.1:count
-    * print :drawBoldRight.1:text
-    * draw print 171 :drawBoldRight.1:y @right
+  137 set :drawTextRight.3:text :drawMaterial.1:target
+  138 print :drawMaterial.1:target
+  139 draw print 171 *tmp47 @right
   140 label *label34
   141 label *label32
   142 op sub :updateDisplay:y :updateDisplay:y 15
 
   151 jump *label36 lessThanEq :drawMaterial.2:target 0
   152 read *tmp0 processor1 ".core"
   153 sensor *tmp51 *tmp0 @graphite
-    * set :drawItem.2:item @graphite
-    * set :drawItem.2:current *tmp51
-    * set :drawItem.2:target :drawMaterial.2:target
   154 set :drawItem.2:count :drawMaterial.2:target
   155 jump *label39 lessThanEq :drawMaterial.2:target 0
   156 op mul *tmp54 122 *tmp51
 
   158 op min :drawItem.2:length 122 *tmp55
   159 draw col %[white]
   160 op add *tmp57 :updateDisplay:y 5
-    * draw image 11 *tmp57 :drawMaterial.2:item 16 0
+  161 draw image 11 *tmp57 @graphite 16 0
   162 draw color 0 128 0 255
   163 draw rect 22 :updateDisplay:y :drawItem.2:length 10
   164 draw color 0 255 0 255
   165 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp58 :updateDisplay:y 5
-    * op add *tmp59 *tmp57 2
+  166 op add *tmp59 :updateDisplay:y 7
   167 set :drawBoldRight.2:x 170
   168 set :drawBoldRight.2:y *tmp59
   169 set :drawBoldRight.2:text :drawMaterial.2:target
-    * set :drawTextRight.4:x 170
-    * set :drawTextRight.4:y *tmp59
-    * set :drawTextRight.4:text :drawItem.2:count
-    * print :drawBoldRight.2:text
-    * draw print :drawBoldRight.2:x :drawBoldRight.2:y @right
+  170 set :drawTextRight.4:text :drawMaterial.2:target
+  171 print :drawMaterial.2:target
+  172 draw print 170 *tmp59 @right
   173 label *label42
-    * op add :drawTextRight.5:x 170 1
-    * set :drawTextRight.5:y *tmp59
-    * set :drawTextRight.5:text :drawItem.2:count
-    * print :drawBoldRight.2:text
-    * draw print 171 :drawBoldRight.2:y @right
+  174 set :drawTextRight.5:text :drawMaterial.2:target
+  175 print :drawMaterial.2:target
+  176 draw print 171 *tmp59 @right
   177 label *label43
   178 label *label41
   179 op sub :updateDisplay:y :updateDisplay:y 15
 
   188 jump *label45 lessThanEq :drawMaterial.3:target 0
   189 read *tmp0 processor1 ".core"
   190 sensor *tmp63 *tmp0 @silicon
-    * set :drawItem.3:item @silicon
-    * set :drawItem.3:current *tmp63
-    * set :drawItem.3:target :drawMaterial.3:target
   191 set :drawItem.3:count :drawMaterial.3:target
   192 jump *label48 lessThanEq :drawMaterial.3:target 0
   193 op mul *tmp66 122 *tmp63
 
   195 op min :drawItem.3:length 122 *tmp67
   196 draw col %[white]
   197 op add *tmp69 :updateDisplay:y 5
-    * draw image 11 *tmp69 :drawMaterial.3:item 16 0
+  198 draw image 11 *tmp69 @silicon 16 0
   199 draw color 0 128 0 255
   200 draw rect 22 :updateDisplay:y :drawItem.3:length 10
   201 draw color 0 255 0 255
   202 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp70 :updateDisplay:y 5
-    * op add *tmp71 *tmp69 2
+  203 op add *tmp71 :updateDisplay:y 7
   204 set :drawBoldRight.3:x 170
   205 set :drawBoldRight.3:y *tmp71
   206 set :drawBoldRight.3:text :drawMaterial.3:target
-    * set :drawTextRight.6:x 170
-    * set :drawTextRight.6:y *tmp71
-    * set :drawTextRight.6:text :drawItem.3:count
-    * print :drawBoldRight.3:text
-    * draw print :drawBoldRight.3:x :drawBoldRight.3:y @right
+  207 set :drawTextRight.6:text :drawMaterial.3:target
+  208 print :drawMaterial.3:target
+  209 draw print 170 *tmp71 @right
   210 label *label51
-    * op add :drawTextRight.7:x 170 1
-    * set :drawTextRight.7:y *tmp71
-    * set :drawTextRight.7:text :drawItem.3:count
-    * print :drawBoldRight.3:text
-    * draw print 171 :drawBoldRight.3:y @right
+  211 set :drawTextRight.7:text :drawMaterial.3:target
+  212 print :drawMaterial.3:target
+  213 draw print 171 *tmp71 @right
   214 label *label52
   215 label *label50
   216 op sub :updateDisplay:y :updateDisplay:y 15
 
   225 jump *label54 lessThanEq :drawMaterial.4:target 0
   226 read *tmp0 processor1 ".core"
   227 sensor *tmp75 *tmp0 @titanium
-    * set :drawItem.4:item @titanium
-    * set :drawItem.4:current *tmp75
-    * set :drawItem.4:target :drawMaterial.4:target
   228 set :drawItem.4:count :drawMaterial.4:target
   229 jump *label57 lessThanEq :drawMaterial.4:target 0
   230 op mul *tmp78 122 *tmp75
 
   232 op min :drawItem.4:length 122 *tmp79
   233 draw col %[white]
   234 op add *tmp81 :updateDisplay:y 5
-    * draw image 11 *tmp81 :drawMaterial.4:item 16 0
+  235 draw image 11 *tmp81 @titanium 16 0
   236 draw color 0 128 0 255
   237 draw rect 22 :updateDisplay:y :drawItem.4:length 10
   238 draw color 0 255 0 255
   239 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp82 :updateDisplay:y 5
-    * op add *tmp83 *tmp81 2
+  240 op add *tmp83 :updateDisplay:y 7
   241 set :drawBoldRight.4:x 170
   242 set :drawBoldRight.4:y *tmp83
   243 set :drawBoldRight.4:text :drawMaterial.4:target
-    * set :drawTextRight.8:x 170
-    * set :drawTextRight.8:y *tmp83
-    * set :drawTextRight.8:text :drawItem.4:count
-    * print :drawBoldRight.4:text
-    * draw print :drawBoldRight.4:x :drawBoldRight.4:y @right
+  244 set :drawTextRight.8:text :drawMaterial.4:target
+  245 print :drawMaterial.4:target
+  246 draw print 170 *tmp83 @right
   247 label *label60
-    * op add :drawTextRight.9:x 170 1
-    * set :drawTextRight.9:y *tmp83
-    * set :drawTextRight.9:text :drawItem.4:count
-    * print :drawBoldRight.4:text
-    * draw print 171 :drawBoldRight.4:y @right
+  248 set :drawTextRight.9:text :drawMaterial.4:target
+  249 print :drawMaterial.4:target
+  250 draw print 171 *tmp83 @right
   251 label *label61
   252 label *label59
   253 op sub :updateDisplay:y :updateDisplay:y 15
 
   262 set :drawBoldLeft.1:x 22
   263 set :drawBoldLeft.1:y *tmp85
   264 set :drawBoldLeft.1:text "Unit status"
-    * set :drawTextLeft.2:x 22
-    * set :drawTextLeft.2:y *tmp85
-    * set :drawTextLeft.2:text "Unit status"
-    * print :drawBoldLeft.1:text
-    * draw print :drawBoldLeft.1:x :drawBoldLeft.1:y @bottomLeft
+  265 print "Unit status"
+  266 draw print 22 *tmp85 @bottomLeft
   267 label *label63
-    * op add :drawTextLeft.3:x 22 1
-    * set :drawTextLeft.3:y *tmp85
-    * set :drawTextLeft.3:text "Unit status"
-    * print :drawBoldLeft.1:text
-    * draw print 23 :drawBoldLeft.1:y @bottomLeft
+  268 print "Unit status"
+  269 draw print 23 *tmp85 @bottomLeft
   270 label *label64
   271 label *label62
   272 op sub :updateDisplay:y :updateDisplay:y 26
 
   274 jump *label65 notEqual :updateDisplay:item null
   275 set :drawUnit:item @poly
   276 set :drawUnit:items 0
-    * set :drawItem.5:item @poly
-    * set :drawItem.5:current 0
-    * set :drawItem.5:target 30
   277 set :drawItem.5:count 0
   278 jump *label69 lessThanEq 30 0
-    * op mul *tmp92 122 :drawUnit:items
-    * op div *tmp93 *tmp92 30
-    * op min :drawItem.5:length 122 *tmp93
+  279 op mul *tmp92 122 0
+  280 op div *tmp93 0 30
+  281 op min :drawItem.5:length 122 0
   282 draw col %[white]
   283 op add *tmp95 :updateDisplay:y 5
-    * draw image 11 *tmp95 :drawUnit:item 16 0
+  284 draw image 11 *tmp95 @poly 16 0
   285 draw color 0 128 0 255
-    * draw rect 22 :updateDisplay:y :drawItem.5:length 10
+  286 draw rect 22 :updateDisplay:y 0 10
   287 draw color 0 255 0 255
   288 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp96 :updateDisplay:y 5
-    * op add *tmp97 *tmp95 2
+  289 op add *tmp97 :updateDisplay:y 7
   290 set :drawBoldRight.5:x 170
   291 set :drawBoldRight.5:y *tmp97
-    * set :drawBoldRight.5:text :drawUnit:items
-    * set :drawTextRight.10:x 170
-    * set :drawTextRight.10:y *tmp97
-    * set :drawTextRight.10:text :drawItem.5:count
-    * print :drawBoldRight.5:text
-    * draw print :drawBoldRight.5:x :drawBoldRight.5:y @right
+  292 set :drawBoldRight.5:text 0
+  293 set :drawTextRight.10:text 0
+  294 print :drawUnit:items
+  295 draw print 170 *tmp97 @right
   296 label *label72
-    * op add :drawTextRight.11:x 170 1
-    * set :drawTextRight.11:y *tmp97
-    * set :drawTextRight.11:text :drawItem.5:count
-    * print :drawBoldRight.5:text
-    * draw print 171 :drawBoldRight.5:y @right
+  297 set :drawTextRight.11:text 0
+  298 print :drawUnit:items
+  299 draw print 171 *tmp97 @right
   300 label *label73
   301 label *label71
   302 label *label69
 
   308 sensor *tmp99 @unit @totalItems
   309 set :drawUnit.1:item :updateDisplay:item
   310 set :drawUnit.1:items *tmp99
-    * set :drawItem.6:item :updateDisplay:item
-    * set :drawItem.6:current *tmp99
-    * set :drawItem.6:target 30
   311 set :drawItem.6:count *tmp99
   312 jump *label76 lessThanEq 30 0
-    * op mul *tmp102 122 :drawUnit.1:items
-    * op div *tmp103 *tmp102 30
+  313 op mul *tmp102 122 *tmp99
+  314 op mul *tmp103 :drawUnit.1:items 4.066666666666666
   315 op min :drawItem.6:length 122 *tmp103
   316 draw col %[white]
   317 op add *tmp105 :updateDisplay:y 5
-    * draw image 11 *tmp105 :drawUnit.1:item 16 0
+  318 draw image 11 *tmp105 :updateDisplay:item 16 0
   319 draw color 0 128 0 255
   320 draw rect 22 :updateDisplay:y :drawItem.6:length 10
   321 draw color 0 255 0 255
   322 draw lineRect 22 :updateDisplay:y 122 10
-    * op add *tmp106 :updateDisplay:y 5
-    * op add *tmp107 *tmp105 2
+  323 op add *tmp107 :updateDisplay:y 7
   324 set :drawBoldRight.6:x 170
   325 set :drawBoldRight.6:y *tmp107
-    * set :drawBoldRight.6:text :drawUnit.1:items
-    * set :drawTextRight.12:x 170
-    * set :drawTextRight.12:y *tmp107
-    * set :drawTextRight.12:text :drawItem.6:count
-    * print :drawBoldRight.6:text
-    * draw print :drawBoldRight.6:x :drawBoldRight.6:y @right
+  326 set :drawBoldRight.6:text *tmp99
+  327 set :drawTextRight.12:text *tmp99
+  328 print :drawUnit.1:items
+  329 draw print 170 *tmp107 @right
   330 label *label79
-    * op add :drawTextRight.13:x 170 1
-    * set :drawTextRight.13:y *tmp107
-    * set :drawTextRight.13:text :drawItem.6:count
-    * print :drawBoldRight.6:text
-    * draw print 171 :drawBoldRight.6:y @right
+  331 set :drawTextRight.13:text *tmp99
+  332 print :drawUnit.1:items
+  333 draw print 171 *tmp107 @right
   334 label *label80
   335 label *label78
   336 label *label76

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-84 instructions):
 
     5 label *label3
     6 draw reset
     7 draw clear 0 0 32
-    * set :updateDisplay:x1 40
-    * set :updateDisplay:x2 88
-    * set :updateDisplay:x3 136
-    * set :updateDisplay:y 161
     8 draw col %[gold]
-    * set :drawBold:x 40
-    * set :drawBold:y 161
-    * set :drawBold:text "Objective"
-    * set :drawText:x 40
-    * set :drawText:y 161
     9 print "Objective"
    10 draw print 40 161 @bottom
    11 label *label6
-    * op add :drawText.1:x 40 1
-    * set :drawText.1:y 161
    12 print "Objective"
    13 draw print 41 161 @bottom
    14 label *label7
    15 label *label5
    16 draw col %[green]
-    * set :drawBold.1:x 136
-    * set :drawBold.1:y 161
-    * set :drawBold.1:text "Building"
-    * set :drawText.2:x 136
-    * set :drawText.2:y 161
    17 print "Building"
    18 draw print 136 161 @bottom
    19 label *label9
-    * op add :drawText.3:x 136 1
-    * set :drawText.3:y 161
    20 print "Building"
    21 draw print 137 161 @bottom
    22 label *label10
 
    31 print "0"
    32 label *label11
    33 label *label12
-    * op sub *tmp20 161 27
    34 print :updateDisplay:s
    35 draw print 88 134 @bottom
    36 label *label13
    37 draw col %[white]
-    * op sub *tmp21 161 60
-    * set :drawBoldLeft:x 22
-    * set :drawBoldLeft:y 101
-    * set :drawBoldLeft:text "Materials"
-    * set :drawTextLeft:y 101
    38 print "Materials"
    39 draw print 22 101 @bottomLeft
    40 label *label15
-    * set :drawTextLeft.1:y 101
    41 print "Materials"
    42 draw print 23 101 @bottomLeft
    43 label *label16
 
    46 read *tmp1 processor1 ".nextBlock"
    47 draw image 136 137 *tmp1 32 0
    48 op sub :updateDisplay:y 161 76
-    * set :drawMaterial:item @copper
    49 read :drawMaterial:target processor1 ".copperTarget"
    50 jump *label18 lessThanEq :drawMaterial:target 0
    51 read *tmp0 processor1 ".core"
    52 sensor *tmp27 *tmp0 @copper
-    * set :drawItem:count :drawMaterial:target
    53 jump *label21 lessThanEq :drawMaterial:target 0
    54 op mul *tmp30 122 *tmp27
    55 op div *tmp31 *tmp30 :drawMaterial:target
 
    60 draw rect 22 85 :drawItem:length 10
    61 draw color 0 255 0 255
    62 draw lineRect 22 85 122 10
-    * op add *tmp35 90 2
-    * set :drawBoldRight:x 170
-    * set :drawBoldRight:y 92
-    * set :drawBoldRight:text :drawMaterial:target
-    * set :drawTextRight:y 92
-    * set :drawTextRight:text :drawMaterial:target
    63 print :drawMaterial:target
    64 draw print 170 92 @right
    65 label *label24
-    * set :drawTextRight.1:y 92
-    * set :drawTextRight.1:text :drawMaterial:target
    66 print :drawMaterial:target
    67 draw print 171 92 @right
    68 label *label25
 
    74 label *label18
    75 label *label19
    76 label *label17
-    * set :drawMaterial.1:item @lead
    77 read :drawMaterial.1:target processor1 ".leadTarget"
    78 jump *label27 lessThanEq :drawMaterial.1:target 0
    79 read *tmp0 processor1 ".core"
    80 sensor *tmp39 *tmp0 @lead
-    * set :drawItem.1:count :drawMaterial.1:target
    81 jump *label30 lessThanEq :drawMaterial.1:target 0
    82 op mul *tmp42 122 *tmp39
    83 op div *tmp43 *tmp42 :drawMaterial.1:target
 
    90 draw color 0 255 0 255
    91 draw lineRect 22 :updateDisplay:y 122 10
    92 op add *tmp47 :updateDisplay:y 7
-    * set :drawBoldRight.1:x 170
-    * set :drawBoldRight.1:y *tmp47
-    * set :drawBoldRight.1:text :drawMaterial.1:target
-    * set :drawTextRight.2:text :drawMaterial.1:target
    93 print :drawMaterial.1:target
    94 draw print 170 *tmp47 @right
    95 label *label33
-    * set :drawTextRight.3:text :drawMaterial.1:target
    96 print :drawMaterial.1:target
    97 draw print 171 *tmp47 @right
    98 label *label34
 
   104 label *label27
   105 label *label28
   106 label *label26
-    * set :drawMaterial.2:item @graphite
   107 read :drawMaterial.2:target processor1 ".graphiteTarget"
   108 jump *label36 lessThanEq :drawMaterial.2:target 0
   109 read *tmp0 processor1 ".core"
   110 sensor *tmp51 *tmp0 @graphite
-    * set :drawItem.2:count :drawMaterial.2:target
   111 jump *label39 lessThanEq :drawMaterial.2:target 0
   112 op mul *tmp54 122 *tmp51
   113 op div *tmp55 *tmp54 :drawMaterial.2:target
 
   120 draw color 0 255 0 255
   121 draw lineRect 22 :updateDisplay:y 122 10
   122 op add *tmp59 :updateDisplay:y 7
-    * set :drawBoldRight.2:x 170
-    * set :drawBoldRight.2:y *tmp59
-    * set :drawBoldRight.2:text :drawMaterial.2:target
-    * set :drawTextRight.4:text :drawMaterial.2:target
   123 print :drawMaterial.2:target
   124 draw print 170 *tmp59 @right
   125 label *label42
-    * set :drawTextRight.5:text :drawMaterial.2:target
   126 print :drawMaterial.2:target
   127 draw print 171 *tmp59 @right
   128 label *label43
 
   134 label *label36
   135 label *label37
   136 label *label35
-    * set :drawMaterial.3:item @silicon
   137 read :drawMaterial.3:target processor1 ".siliconTarget"
   138 jump *label45 lessThanEq :drawMaterial.3:target 0
   139 read *tmp0 processor1 ".core"
   140 sensor *tmp63 *tmp0 @silicon
-    * set :drawItem.3:count :drawMaterial.3:target
   141 jump *label48 lessThanEq :drawMaterial.3:target 0
   142 op mul *tmp66 122 *tmp63
   143 op div *tmp67 *tmp66 :drawMaterial.3:target
 
   150 draw color 0 255 0 255
   151 draw lineRect 22 :updateDisplay:y 122 10
   152 op add *tmp71 :updateDisplay:y 7
-    * set :drawBoldRight.3:x 170
-    * set :drawBoldRight.3:y *tmp71
-    * set :drawBoldRight.3:text :drawMaterial.3:target
-    * set :drawTextRight.6:text :drawMaterial.3:target
   153 print :drawMaterial.3:target
   154 draw print 170 *tmp71 @right
   155 label *label51
-    * set :drawTextRight.7:text :drawMaterial.3:target
   156 print :drawMaterial.3:target
   157 draw print 171 *tmp71 @right
   158 label *label52
 
   164 label *label45
   165 label *label46
   166 label *label44
-    * set :drawMaterial.4:item @titanium
   167 read :drawMaterial.4:target processor1 ".titaniumTarget"
   168 jump *label54 lessThanEq :drawMaterial.4:target 0
   169 read *tmp0 processor1 ".core"
   170 sensor *tmp75 *tmp0 @titanium
-    * set :drawItem.4:count :drawMaterial.4:target
   171 jump *label57 lessThanEq :drawMaterial.4:target 0
   172 op mul *tmp78 122 *tmp75
   173 op div *tmp79 *tmp78 :drawMaterial.4:target
 
   180 draw color 0 255 0 255
   181 draw lineRect 22 :updateDisplay:y 122 10
   182 op add *tmp83 :updateDisplay:y 7
-    * set :drawBoldRight.4:x 170
-    * set :drawBoldRight.4:y *tmp83
-    * set :drawBoldRight.4:text :drawMaterial.4:target
-    * set :drawTextRight.8:text :drawMaterial.4:target
   183 print :drawMaterial.4:target
   184 draw print 170 *tmp83 @right
   185 label *label60
-    * set :drawTextRight.9:text :drawMaterial.4:target
   186 print :drawMaterial.4:target
   187 draw print 171 *tmp83 @right
   188 label *label61
 
   196 label *label53
   197 draw col %[white]
   198 op sub *tmp85 :updateDisplay:y 10
-    * set :drawBoldLeft.1:x 22
-    * set :drawBoldLeft.1:y *tmp85
-    * set :drawBoldLeft.1:text "Unit status"
   199 print "Unit status"
   200 draw print 22 *tmp85 @bottomLeft
   201 label *label63
 
   206 op sub :updateDisplay:y :updateDisplay:y 26
   207 sensor :updateDisplay:item @unit @firstItem
   208 jump *label65 notEqual :updateDisplay:item null
-    * set :drawUnit:item @poly
   209 set :drawUnit:items 0
-    * set :drawItem.5:count 0
   210 jump *label69 lessThanEq 30 0
-    * op mul *tmp92 122 0
-    * op div *tmp93 0 30
-    * op min :drawItem.5:length 122 0
   211 draw col %[white]
   212 op add *tmp95 :updateDisplay:y 5
   213 draw image 11 *tmp95 @poly 16 0
 
   216 draw color 0 255 0 255
   217 draw lineRect 22 :updateDisplay:y 122 10
   218 op add *tmp97 :updateDisplay:y 7
-    * set :drawBoldRight.5:x 170
-    * set :drawBoldRight.5:y *tmp97
-    * set :drawBoldRight.5:text 0
-    * set :drawTextRight.10:text 0
-    * print :drawUnit:items
+  219 print 0
   220 draw print 170 *tmp97 @right
   221 label *label72
-    * set :drawTextRight.11:text 0
-    * print :drawUnit:items
+  222 print 0
   223 draw print 171 *tmp97 @right
   224 label *label73
   225 label *label71
 
   230 jump *label66 always
   231 label *label65
   232 sensor *tmp99 @unit @totalItems
-    * set :drawUnit.1:item :updateDisplay:item
   233 set :drawUnit.1:items *tmp99
-    * set :drawItem.6:count *tmp99
   234 jump *label76 lessThanEq 30 0
-    * op mul *tmp102 122 *tmp99
-    * op mul *tmp103 :drawUnit.1:items 4.066666666666666
+  235 op mul *tmp103 *tmp99 4.066666666666666
   236 op min :drawItem.6:length 122 *tmp103
   237 draw col %[white]
   238 op add *tmp105 :updateDisplay:y 5
 
   242 draw color 0 255 0 255
   243 draw lineRect 22 :updateDisplay:y 122 10
   244 op add *tmp107 :updateDisplay:y 7
-    * set :drawBoldRight.6:x 170
-    * set :drawBoldRight.6:y *tmp107
-    * set :drawBoldRight.6:text *tmp99
-    * set :drawTextRight.12:text *tmp99
-    * print :drawUnit.1:items
+  245 print *tmp99
   246 draw print 170 *tmp107 @right
   247 label *label79
-    * set :drawTextRight.13:text *tmp99
-    * print :drawUnit.1:items
+  248 print *tmp99
   249 draw print 171 *tmp107 @right
   250 label *label80
   251 label *label78

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-2 instructions):
 
   206 op sub :updateDisplay:y :updateDisplay:y 26
   207 sensor :updateDisplay:item @unit @firstItem
   208 jump *label65 notEqual :updateDisplay:item null
-    * set :drawUnit:items 0
   209 jump *label69 lessThanEq 30 0
   210 draw col %[white]
   211 op add *tmp95 :updateDisplay:y 5
 
   229 jump *label66 always
   230 label *label65
   231 sensor *tmp99 @unit @totalItems
-    * set :drawUnit.1:items *tmp99
   232 jump *label76 lessThanEq 30 0
   233 op mul *tmp103 *tmp99 4.066666666666666
   234 op min :drawItem.6:length 122 *tmp103

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
     0 label *label1
     1 jump *label3 notEqual @unit null
+    2 label *label82
     3 ubind @poly
     4 label *label2
-    * jump *label1 always
+    5 jump *label82 equal @unit null
     6 label *label3
     7 draw reset
     8 draw clear 0 0 32

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-2 instructions):
 
   207 op sub :updateDisplay:y :updateDisplay:y 26
   208 sensor :updateDisplay:item @unit @firstItem
   209 jump *label65 notEqual :updateDisplay:item null
-    * jump *label69 lessThanEq 30 0
   210 draw col %[white]
   211 op add *tmp95 :updateDisplay:y 5
   212 draw image 11 *tmp95 @poly 16 0
 
   229 jump *label66 always
   230 label *label65
   231 sensor *tmp99 @unit @totalItems
-    * jump *label76 lessThanEq 30 0
   232 op mul *tmp103 *tmp99 4.066666666666666
   233 op min :drawItem.6:length 122 *tmp103
   234 draw col %[white]

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
-    * label *label1
     0 jump *label3 notEqual @unit null
     1 label *label82
     2 ubind @poly
-    * label *label2
     3 jump *label82 equal @unit null
     4 label *label3
     5 draw reset
 
     7 draw col %[gold]
     8 print "Objective"
     9 draw print 40 161 @bottom
-    * label *label6
    10 print "Objective"
    11 draw print 41 161 @bottom
-    * label *label7
-    * label *label5
    12 draw col %[green]
    13 print "Building"
    14 draw print 136 161 @bottom
-    * label *label9
    15 print "Building"
    16 draw print 137 161 @bottom
-    * label *label10
-    * label *label8
    17 draw col %[salmon]
    18 op floor :updateDisplay:t @second
    19 op idiv :updateDisplay:m :updateDisplay:t 60
 
    23 jump *label11 greaterThanEq :updateDisplay:s 10
    24 print "0"
    25 label *label11
-    * label *label12
    26 print :updateDisplay:s
    27 draw print 88 134 @bottom
-    * label *label13
    28 draw col %[white]
    29 print "Materials"
    30 draw print 22 101 @bottomLeft
-    * label *label15
    31 print "Materials"
    32 draw print 23 101 @bottomLeft
-    * label *label16
-    * label *label14
    33 draw image 40 137 @air-factory 32 0
    34 read *tmp1 processor1 ".nextBlock"
    35 draw image 136 137 *tmp1 32 0
 
    50 draw lineRect 22 85 122 10
    51 print :drawMaterial:target
    52 draw print 170 92 @right
-    * label *label24
    53 print :drawMaterial:target
    54 draw print 171 92 @right
-    * label *label25
-    * label *label23
    55 op sub :updateDisplay:y 85 15
    56 label *label21
-    * label *label22
-    * label *label20
    57 label *label18
-    * label *label19
-    * label *label17
    58 read :drawMaterial.1:target processor1 ".leadTarget"
    59 jump *label27 lessThanEq :drawMaterial.1:target 0
    60 read *tmp0 processor1 ".core"
 
    73 op add *tmp47 :updateDisplay:y 7
    74 print :drawMaterial.1:target
    75 draw print 170 *tmp47 @right
-    * label *label33
    76 print :drawMaterial.1:target
    77 draw print 171 *tmp47 @right
-    * label *label34
-    * label *label32
    78 op sub :updateDisplay:y :updateDisplay:y 15
    79 label *label30
-    * label *label31
-    * label *label29
    80 label *label27
-    * label *label28
-    * label *label26
    81 read :drawMaterial.2:target processor1 ".graphiteTarget"
    82 jump *label36 lessThanEq :drawMaterial.2:target 0
    83 read *tmp0 processor1 ".core"
 
    96 op add *tmp59 :updateDisplay:y 7
    97 print :drawMaterial.2:target
    98 draw print 170 *tmp59 @right
-    * label *label42
    99 print :drawMaterial.2:target
   100 draw print 171 *tmp59 @right
-    * label *label43
-    * label *label41
   101 op sub :updateDisplay:y :updateDisplay:y 15
   102 label *label39
-    * label *label40
-    * label *label38
   103 label *label36
-    * label *label37
-    * label *label35
   104 read :drawMaterial.3:target processor1 ".siliconTarget"
   105 jump *label45 lessThanEq :drawMaterial.3:target 0
   106 read *tmp0 processor1 ".core"
 
   119 op add *tmp71 :updateDisplay:y 7
   120 print :drawMaterial.3:target
   121 draw print 170 *tmp71 @right
-    * label *label51
   122 print :drawMaterial.3:target
   123 draw print 171 *tmp71 @right
-    * label *label52
-    * label *label50
   124 op sub :updateDisplay:y :updateDisplay:y 15
   125 label *label48
-    * label *label49
-    * label *label47
   126 label *label45
-    * label *label46
-    * label *label44
   127 read :drawMaterial.4:target processor1 ".titaniumTarget"
   128 jump *label54 lessThanEq :drawMaterial.4:target 0
   129 read *tmp0 processor1 ".core"
 
   142 op add *tmp83 :updateDisplay:y 7
   143 print :drawMaterial.4:target
   144 draw print 170 *tmp83 @right
-    * label *label60
   145 print :drawMaterial.4:target
   146 draw print 171 *tmp83 @right
-    * label *label61
-    * label *label59
   147 op sub :updateDisplay:y :updateDisplay:y 15
   148 label *label57
-    * label *label58
-    * label *label56
   149 label *label54
-    * label *label55
-    * label *label53
   150 draw col %[white]
   151 op sub *tmp85 :updateDisplay:y 10
   152 print "Unit status"
   153 draw print 22 *tmp85 @bottomLeft
-    * label *label63
   154 print "Unit status"
   155 draw print 23 *tmp85 @bottomLeft
-    * label *label64
-    * label *label62
   156 op sub :updateDisplay:y :updateDisplay:y 26
   157 sensor :updateDisplay:item @unit @firstItem
   158 jump *label65 notEqual :updateDisplay:item null
 
   166 op add *tmp97 :updateDisplay:y 7
   167 print 0
   168 draw print 170 *tmp97 @right
-    * label *label72
   169 print 0
   170 draw print 171 *tmp97 @right
-    * label *label73
-    * label *label71
-    * label *label69
-    * label *label70
-    * label *label68
-    * label *label67
   171 jump *label66 always
   172 label *label65
   173 sensor *tmp99 @unit @totalItems
 
   183 op add *tmp107 :updateDisplay:y 7
   184 print *tmp99
   185 draw print 170 *tmp107 @right
-    * label *label79
   186 print *tmp99
   187 draw print 171 *tmp107 @right
-    * label *label80
-    * label *label78
-    * label *label76
-    * label *label77
-    * label *label75
-    * label *label74
   188 label *label66
   189 drawflush display1
-    * label *label4
   190 printflush message1
   191 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   188 label *label66
   189 drawflush display1
   190 printflush message1
-    * end

Final code before resolving virtual instructions:

    0:  jump *label3 notEqual @unit null                             while @unit == null do
        label *label82                                               ...
    1:  ubind @poly                                                  ubind(@poly);
    2:  jump *label82 equal @unit null                               while @unit == null do
        label *label3                                                ...
    3:  draw reset 0 0 0 0 0 0                                       reset();
    4:  draw clear 0 0 32 0 0 0                                      clear(0, 0, 32);
    5:  draw col %[gold] 0 0 0 0 0                                   col(%[gold]);
    6:  print "Objective"                                            print(text);
    7:  draw print 40 161 @bottom                                    mlogText("draw", "print", in x, in y, "@bottom");
    8:  print "Objective"                                            print(text);
    9:  draw print 41 161 @bottom                                    mlogText("draw", "print", in x, in y, "@bottom");
   10:  draw col %[green] 0 0 0 0 0                                  col(%[green]);
   11:  print "Building"                                             print(text);
   12:  draw print 136 161 @bottom                                   mlogText("draw", "print", in x, in y, "@bottom");
   13:  print "Building"                                             print(text);
   14:  draw print 137 161 @bottom                                   mlogText("draw", "print", in x, in y, "@bottom");
   15:  draw col %[salmon] 0 0 0 0 0                                 col(%[salmon]);
   16:  op floor :updateDisplay:t @second 0                          var t = floor(@second);
   17:  op idiv :updateDisplay:m :updateDisplay:t 60                 var m = t \ 60;
   18:  op mod :updateDisplay:s :updateDisplay:t 60                  var s = t % 60;
   19:  print :updateDisplay:m                                       print(m, ":");
   20:  print ":"                                                    ...
   21:  jump *label11 greaterThanEq :updateDisplay:s 10              if s < 10 then print("0"); end;
   22:  print "0"                                                    ...
        label *label11                                               ...
   23:  print :updateDisplay:s                                       print(text);
   24:  draw print 88 134 @bottom                                    mlogText("draw", "print", in x, in y, "@bottom");
   25:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
   26:  print "Materials"                                            print(text);
   27:  draw print 22 101 @bottomLeft                                mlogText("draw", "print", in x, in y, "@bottomLeft");
   28:  print "Materials"                                            print(text);
   29:  draw print 23 101 @bottomLeft                                mlogText("draw", "print", in x, in y, "@bottomLeft");
   30:  draw image 40 137 @air-factory 32 0 0                        image(x1, y - 24, @air-factory, 32, 0);
   31:  read *tmp1 processor1 ".nextBlock"                           image(x3, y - 24, nextBlock, 32, 0);
   32:  draw image 136 137 *tmp1 32 0 0                              ...
   33:  op sub :updateDisplay:y 161 76                               y -= 76;
   34:  read :drawMaterial:target processor1 ".copperTarget"         drawMaterial(@copper,   copperTarget, ref y);
   35:  jump *label18 lessThanEq :drawMaterial:target 0              if target > 0 then
   36:  read *tmp0 processor1 ".core"                                drawItem(item, core.sensor(item), target, target, ref y);
   37:  sensor *tmp27 *tmp0 @copper                                  ...
   38:  jump *label21 lessThanEq :drawMaterial:target 0              if target > 0 then
   39:  op mul *tmp30 122 *tmp27                                     length = min(BAR_LENGTH, BAR_LENGTH * current / target);
   40:  op div *tmp31 *tmp30 :drawMaterial:target                    ...
   41:  op min :drawItem:length 122 *tmp31                           ...
   42:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
   43:  draw image 11 90 @copper 16 0 0                              image(ICON_X, y + ICON_Y, item, 16, 0);
   44:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
   45:  draw rect 22 85 :drawItem:length 10 0 0                      rect(BAR_X, y, length, BAR_HEIGHT);
   46:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
   47:  draw lineRect 22 85 122 10 0 0                               lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
   48:  print :drawMaterial:target                                   print(text);
   49:  draw print 170 92 @right                                     mlogText("draw", "print", in x, in y, "@right");
   50:  print :drawMaterial:target                                   print(text);
   51:  draw print 171 92 @right                                     mlogText("draw", "print", in x, in y, "@right");
   52:  op sub :updateDisplay:y 85 15                                y -= ROW_HEIGHT;
        label *label21                                               if target > 0 then
        label *label18                                               if target > 0 then
   53:  read :drawMaterial.1:target processor1 ".leadTarget"         drawMaterial(@lead,     leadTarget, ref y);
   54:  jump *label27 lessThanEq :drawMaterial.1:target 0            if target > 0 then
   55:  read *tmp0 processor1 ".core"                                drawItem(item, core.sensor(item), target, target, ref y);
   56:  sensor *tmp39 *tmp0 @lead                                    ...
   57:  jump *label30 lessThanEq :drawMaterial.1:target 0            if target > 0 then
   58:  op mul *tmp42 122 *tmp39                                     length = min(BAR_LENGTH, BAR_LENGTH * current / target);
   59:  op div *tmp43 *tmp42 :drawMaterial.1:target                  ...
   60:  op min :drawItem.1:length 122 *tmp43                         ...
   61:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
   62:  op add *tmp45 :updateDisplay:y 5                             image(ICON_X, y + ICON_Y, item, 16, 0);
   63:  draw image 11 *tmp45 @lead 16 0 0                            ...
   64:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
   65:  draw rect 22 :updateDisplay:y :drawItem.1:length 10 0 0      rect(BAR_X, y, length, BAR_HEIGHT);
   66:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
   67:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
   68:  op add *tmp47 :updateDisplay:y 7                             drawBoldRight(170, y + ICON_Y + 2, count);
   69:  print :drawMaterial.1:target                                 print(text);
   70:  draw print 170 *tmp47 @right                                 mlogText("draw", "print", in x, in y, "@right");
   71:  print :drawMaterial.1:target                                 print(text);
   72:  draw print 171 *tmp47 @right                                 mlogText("draw", "print", in x, in y, "@right");
   73:  op sub :updateDisplay:y :updateDisplay:y 15                  y -= ROW_HEIGHT;
        label *label30                                               if target > 0 then
        label *label27                                               if target > 0 then
   74:  read :drawMaterial.2:target processor1 ".graphiteTarget"     drawMaterial(@graphite, graphiteTarget, ref y);
   75:  jump *label36 lessThanEq :drawMaterial.2:target 0            if target > 0 then
   76:  read *tmp0 processor1 ".core"                                drawItem(item, core.sensor(item), target, target, ref y);
   77:  sensor *tmp51 *tmp0 @graphite                                ...
   78:  jump *label39 lessThanEq :drawMaterial.2:target 0            if target > 0 then
   79:  op mul *tmp54 122 *tmp51                                     length = min(BAR_LENGTH, BAR_LENGTH * current / target);
   80:  op div *tmp55 *tmp54 :drawMaterial.2:target                  ...
   81:  op min :drawItem.2:length 122 *tmp55                         ...
   82:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
   83:  op add *tmp57 :updateDisplay:y 5                             image(ICON_X, y + ICON_Y, item, 16, 0);
   84:  draw image 11 *tmp57 @graphite 16 0 0                        ...
   85:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
   86:  draw rect 22 :updateDisplay:y :drawItem.2:length 10 0 0      rect(BAR_X, y, length, BAR_HEIGHT);
   87:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
   88:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
   89:  op add *tmp59 :updateDisplay:y 7                             drawBoldRight(170, y + ICON_Y + 2, count);
   90:  print :drawMaterial.2:target                                 print(text);
   91:  draw print 170 *tmp59 @right                                 mlogText("draw", "print", in x, in y, "@right");
   92:  print :drawMaterial.2:target                                 print(text);
   93:  draw print 171 *tmp59 @right                                 mlogText("draw", "print", in x, in y, "@right");
   94:  op sub :updateDisplay:y :updateDisplay:y 15                  y -= ROW_HEIGHT;
        label *label39                                               if target > 0 then
        label *label36                                               if target > 0 then
   95:  read :drawMaterial.3:target processor1 ".siliconTarget"      drawMaterial(@silicon,  siliconTarget, ref y);
   96:  jump *label45 lessThanEq :drawMaterial.3:target 0            if target > 0 then
   97:  read *tmp0 processor1 ".core"                                drawItem(item, core.sensor(item), target, target, ref y);
   98:  sensor *tmp63 *tmp0 @silicon                                 ...
   99:  jump *label48 lessThanEq :drawMaterial.3:target 0            if target > 0 then
  100:  op mul *tmp66 122 *tmp63                                     length = min(BAR_LENGTH, BAR_LENGTH * current / target);
  101:  op div *tmp67 *tmp66 :drawMaterial.3:target                  ...
  102:  op min :drawItem.3:length 122 *tmp67                         ...
  103:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
  104:  op add *tmp69 :updateDisplay:y 5                             image(ICON_X, y + ICON_Y, item, 16, 0);
  105:  draw image 11 *tmp69 @silicon 16 0 0                         ...
  106:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
  107:  draw rect 22 :updateDisplay:y :drawItem.3:length 10 0 0      rect(BAR_X, y, length, BAR_HEIGHT);
  108:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
  109:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
  110:  op add *tmp71 :updateDisplay:y 7                             drawBoldRight(170, y + ICON_Y + 2, count);
  111:  print :drawMaterial.3:target                                 print(text);
  112:  draw print 170 *tmp71 @right                                 mlogText("draw", "print", in x, in y, "@right");
  113:  print :drawMaterial.3:target                                 print(text);
  114:  draw print 171 *tmp71 @right                                 mlogText("draw", "print", in x, in y, "@right");
  115:  op sub :updateDisplay:y :updateDisplay:y 15                  y -= ROW_HEIGHT;
        label *label48                                               if target > 0 then
        label *label45                                               if target > 0 then
  116:  read :drawMaterial.4:target processor1 ".titaniumTarget"     drawMaterial(@titanium, titaniumTarget, ref y);
  117:  jump *label54 lessThanEq :drawMaterial.4:target 0            if target > 0 then
  118:  read *tmp0 processor1 ".core"                                drawItem(item, core.sensor(item), target, target, ref y);
  119:  sensor *tmp75 *tmp0 @titanium                                ...
  120:  jump *label57 lessThanEq :drawMaterial.4:target 0            if target > 0 then
  121:  op mul *tmp78 122 *tmp75                                     length = min(BAR_LENGTH, BAR_LENGTH * current / target);
  122:  op div *tmp79 *tmp78 :drawMaterial.4:target                  ...
  123:  op min :drawItem.4:length 122 *tmp79                         ...
  124:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
  125:  op add *tmp81 :updateDisplay:y 5                             image(ICON_X, y + ICON_Y, item, 16, 0);
  126:  draw image 11 *tmp81 @titanium 16 0 0                        ...
  127:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
  128:  draw rect 22 :updateDisplay:y :drawItem.4:length 10 0 0      rect(BAR_X, y, length, BAR_HEIGHT);
  129:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
  130:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
  131:  op add *tmp83 :updateDisplay:y 7                             drawBoldRight(170, y + ICON_Y + 2, count);
  132:  print :drawMaterial.4:target                                 print(text);
  133:  draw print 170 *tmp83 @right                                 mlogText("draw", "print", in x, in y, "@right");
  134:  print :drawMaterial.4:target                                 print(text);
  135:  draw print 171 *tmp83 @right                                 mlogText("draw", "print", in x, in y, "@right");
  136:  op sub :updateDisplay:y :updateDisplay:y 15                  y -= ROW_HEIGHT;
        label *label57                                               if target > 0 then
        label *label54                                               if target > 0 then
  137:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
  138:  op sub *tmp85 :updateDisplay:y 10                            drawBoldLeft(BAR_X, y - 10, "Unit status");
  139:  print "Unit status"                                          print(text);
  140:  draw print 22 *tmp85 @bottomLeft                             mlogText("draw", "print", in x, in y, "@bottomLeft");
  141:  print "Unit status"                                          print(text);
  142:  draw print 23 *tmp85 @bottomLeft                             mlogText("draw", "print", in x, in y, "@bottomLeft");
  143:  op sub :updateDisplay:y :updateDisplay:y 26                  y -= 26;
  144:  sensor :updateDisplay:item @unit @firstItem                  var item = @unit.@firstItem;
  145:  jump *label65 notEqual :updateDisplay:item null              if item == null then
  146:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
  147:  op add *tmp95 :updateDisplay:y 5                             image(ICON_X, y + ICON_Y, item, 16, 0);
  148:  draw image 11 *tmp95 @poly 16 0 0                            ...
  149:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
  150:  draw rect 22 :updateDisplay:y 0 10 0 0                       rect(BAR_X, y, length, BAR_HEIGHT);
  151:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
  152:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
  153:  op add *tmp97 :updateDisplay:y 7                             drawBoldRight(170, y + ICON_Y + 2, count);
  154:  print 0                                                      print(text);
  155:  draw print 170 *tmp97 @right                                 mlogText("draw", "print", in x, in y, "@right");
  156:  print 0                                                      print(text);
  157:  draw print 171 *tmp97 @right                                 mlogText("draw", "print", in x, in y, "@right");
  158:  jump *label66 always 0 0                                     if item == null then
        label *label65                                               ...
  159:  sensor *tmp99 @unit @totalItems                              drawUnit(item, @unit.@totalItems, ref y);
  160:  op mul *tmp103 *tmp99 4.066666666666666                      length = min(BAR_LENGTH, BAR_LENGTH * current / target);
  161:  op min :drawItem.6:length 122 *tmp103                        ...
  162:  draw col %[white] 0 0 0 0 0                                  col(%[white]);
  163:  op add *tmp105 :updateDisplay:y 5                            image(ICON_X, y + ICON_Y, item, 16, 0);
  164:  draw image 11 *tmp105 :updateDisplay:item 16 0 0             ...
  165:  draw color 0 128 0 255 0 0                                   color(0,128,0,255);
  166:  draw rect 22 :updateDisplay:y :drawItem.6:length 10 0 0      rect(BAR_X, y, length, BAR_HEIGHT);
  167:  draw color 0 255 0 255 0 0                                   color(0,255,0,255);
  168:  draw lineRect 22 :updateDisplay:y 122 10 0 0                 lineRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT);
  169:  op add *tmp107 :updateDisplay:y 7                            drawBoldRight(170, y + ICON_Y + 2, count);
  170:  print *tmp99                                                 print(text);
  171:  draw print 170 *tmp107 @right                                mlogText("draw", "print", in x, in y, "@right");
  172:  print *tmp99                                                 print(text);
  173:  draw print 171 *tmp107 @right                                mlogText("draw", "print", in x, in y, "@right");
        label *label66                                               if item == null then
  174:  drawflush display1                                           drawflush(display1);
  175:  printflush message1                                          #set target = 8;


Performance: parsed in 213 ms, compiled in 293 ms, optimized in 260 ms, run in 6 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: success.

Program output (2 steps):
The program didn't generate any output.
Execution exception at instruction 1: ubind @poly:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
