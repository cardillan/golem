#set target = 8;
#set syntax = strict;
//#set sort-variables;

module BlockController;

require "Links.mnd";

noinit var
    core,
    builder,
    controller;

require "Display.mnd" remote display;
require "CoreController.mnd" remote controller;
require "FlareController.mnd" remote flareController;
require "OreLocator.mnd" remote oreLocator;

// Initialization
begin
    do
        builder = ubind(@poly);
        core = ulocate(:building, :core, false);
    while core == null;
end;

const RADIUS =  6;

noinit remote var ERROR, ERROR_BLOCK_NEW, ERROR_BLOCK_OLD, ERROR_X, ERROR_Y;

inline void buildError(new, old, x, y);
    ERROR = "Cannot build at position";
    ERROR_BLOCK_NEW = new;
    ERROR_BLOCK_OLD = old;
    ERROR_X = x;
    ERROR_Y = y;
    stopProcessor();
end;

// Moves the unit to a given distance from the location
void moveTo(x, y, radius)
    while !within(x, y, radius) do
        approach(x, y, radius - 0.5);
    end;
end;

// Moves the unit to a mining distance from the location
void moveTo(x, y)
    moveTo(x, y, RADIUS);
end;

external bank1[511] var logPosition;

inline void log(encodedId)
    bank1[--logPosition] = encodedId + TIME * 1000;
end;

inline void logBlock(block, index)
    log(block.@id);
    if index >= 0 then
        display.blocksBuilt |= (1 << index);
        display.recentBuildIndex = index;
    end;
end;

def buildBlockAtLocal(block, x, y, rotation, config, index)
    moveTo(x, y);

    var type;
    var building = getBlock(x, y, out type);
    if building != null then
        // The block is already there
        return type == block ? building : null;
//        if type == block then return building; end;
//        buildError(block, type, x, y);
    end;

    var fullBuildSupportLimit = 100;
    build(x, y, block, rotation, config);
    wait(0.25);
    var success = false;
    do
        building = getBlock(x, y, out type);
        if building == null and !success then
            return null;
            //buildError(block, "unknown", x, y);
        else
            success = true;
        end;

        if core.@coal >= fullBuildSupportLimit then
            fullBuildSupportLimit = 0;          // Always
            polyController.enabled = false;     // Brutal, but effective :)
            ubind(@poly);
            if @unit != builder then
                approach(x, y, RADIUS);
                build(x, y, block, rotation, config);
            end;
        end;
    while type != block;

    polyController.enabled = true;
    ubind(builder);

    logBlock(block, index);

    return building;
end;

remote def buildBlockAt(block, x, y, rotation, config, index)
    return buildBlockAtLocal(block, x, y, rotation, config, index);
end;

remote def buildFirstTitaniumDrillAt(x, y)
    var drill = buildBlockAtLocal(@pneumatic-drill, x, y, 0, null, -1);
    flareController.addTitaniumDrill(drill);
    return drill;
end;


def getFloor(x, y)
    var floor;
    getBlock(x, y, , out floor);
    return floor;
end;

def titaniumDrillScore(x, y, in out positive, in out negative)
    case getFloor(x, y)
        when @ore-titanium then positive++;
        when @ore-copper, @ore-lead, @ore-scrap, @ore-coal then negative++;
    end;
end;

volatile var positive = 0, negative = 0;

const MAX_TILES = 10;
const MAX_COUNT = 6;

def buildTitaniumDrill(x, y, in out count, in out tiles)
    if count < MAX_COUNT then
        if tiles < MAX_TILES then
            moveTo(x, y);
            positive = 0; negative = 0;
            titaniumDrillScore(x - 0.5, y - 0.5, in out positive, in out negative);
            titaniumDrillScore(x - 0.5, y + 0.5, in out positive, in out negative);
            titaniumDrillScore(x + 0.5, y - 0.5, in out positive, in out negative);
            titaniumDrillScore(x + 0.5, y + 0.5, in out positive, in out negative);

            if positive > negative && positive >= 2 then
                var drill = buildBlockAtLocal(@pneumatic-drill, x, y, null, 0, -1);
                if drill != null then
                    flareController.addTitaniumDrill(drill);

                    // Build a flare to service this drill
                    setFlareTarget(++count);

                    tiles += positive;
                    return positive;
                end;
            end;
        end;
    end;

    return 0;
end;

remote void buildTitaniumDrills(aController, current)
    controller = aController;
    // The base is already autonomous. The drill needs copper and graphite.
    // Both are provided in abundance at this moment

    // We know we have one drill
    var count = 1;
    var tiles = 0;

    wait(1e-4);
    wait(1e-4);

    while !oreLocator.searchFinished do
        while current < oreLocator.locations do
            var index = current * 4;
            var size = bank1[index + 1];
            if size >= 3 then
                var x = bank1[index + 2];
                var y = bank1[index + 3];

                var built = buildTitaniumDrill(x - 1, y - 1, in out count, in out tiles)
                    + buildTitaniumDrill(x + 1, y - 1, in out count, in out tiles)
                    + buildTitaniumDrill(x - 1, y + 1, in out count, in out tiles)
                    + buildTitaniumDrill(x + 1, y + 1, in out count, in out tiles);

                if built == 0 then
                    built = buildTitaniumDrill(x, y, in out count, in out tiles);
                end;
            end;
            current++;
        end;

        if tiles >= MAX_TILES then break; end;
        if count >= MAX_COUNT then break; end;
    end;
end;

inline void setFlareTarget(target)
    controller.flareTarget = min(target, 8);
    display.flareTarget = min(target, 8);
end;

