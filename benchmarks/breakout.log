   147 instructions before optimizations.
     8 instructions eliminated by Temp Variables Elimination.
    20 instructions eliminated by Dead Code Elimination (5 iterations).
     2 instructions eliminated by Jump Normalization (3 iterations).
     7 instructions eliminated by Jump Optimization (3 iterations).
     8 instructions eliminated by Single Step Elimination (4 iterations).
    38 instructions eliminated by Data Flow Optimization (4 passes, 13 iterations).
     3 instructions eliminated by Loop Optimization (2 iterations).
     3 loops improved by Loop Optimization.
   126 instructions added by Loop Unrolling (5 iterations).
     3 loops unrolled by Loop Unrolling.
     1 instructions eliminated by Jump Straightening (3 iterations).
     2 instructions updated by JumpThreading.
     2 instructions eliminated by Unreachable Code Elimination.
   184 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 903):
    Unroll loop at line 40:5                                     cost     2, benefit     7500.0, efficiency     3750.0
    Unroll loop at line 81:9                                     cost    25, benefit    62500.0, efficiency     2500.0
  * Unroll loop at line 82:13                                    cost    47, benefit  2343750.0, efficiency    49867.0 (+38 instructions)

Pass 1: speed optimization selection (cost limit 865):
  * Unroll loop at line 40:5                                     cost     2, benefit     7500.0, efficiency     3750.0 (+2 instructions)
    Unroll loop at line 81:9                                     cost    63, benefit    62500.0, efficiency      992.1

Pass 1: speed optimization selection (cost limit 863):
  * Unroll loop at line 81:9                                     cost    63, benefit    62500.0, efficiency      992.1 (+50 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-12 instructions):
 
    41 label *label11
    42 set *tmp12 null
    43 label *label12
-    * set *tmp9 *tmp12
    44 jump *label10 always
    45 label *label9
    46 op greaterThan *tmp13 :paddleX 0
 
    51 label *label13
    52 set *tmp14 null
    53 label *label14
-    * set *tmp9 *tmp14
    54 label *label10
    55 op add :ballX :ballX :ballVX
    56 op add :ballY :ballY :ballVY
 
    64 op notEqual *tmp19 *tmp20 false
    65 jump *label15 equal *tmp19 false
    66 op mul :ballVX :ballVX -1
-    * set *tmp21 :ballVX
    67 jump *label16 always
    68 label *label15
-    * set *tmp21 null
    69 label *label16
    70 op greaterThan *tmp22 :ballYEnd 176
    71 jump *label17 equal *tmp22 false
    72 op mul :ballVY :ballVY -1
-    * set *tmp23 :ballVY
    73 jump *label18 always
    74 label *label17
-    * set *tmp23 null
    75 label *label18
    76 op greaterThan *tmp24 :ballXEnd :paddleX
    77 op add *tmp25 :paddleX :paddleWidth
 
    90 op div *tmp37 *tmp36 10
    91 op add :ballVX :ballVX *tmp37
    92 op sub :paddleWidth :paddleWidth 1
-    * set *tmp32 :paddleWidth
    93 jump *label20 always
    94 label *label19
-    * set *tmp32 null
    95 label *label20
    96 set :brickPtr 0
    97 set :y 126
 
   138 label *label29
   139 set *tmp52 null
   140 label *label30
-    * set *tmp42 *tmp52
   141 jump *label28 always
   142 label *label27
-    * set *tmp42 null
   143 label *label28
   144 op add :brickPtr :brickPtr 1
   145 label *label25
 
   156 op notEqual *tmp63 *tmp64 false
   157 jump *label33 equal *tmp63 false
   158 jump *label8 always
-    * set *tmp65 null
   159 jump *label34 always
   160 label *label33
-    * set *tmp65 null
   161 label *label34
   162 drawflush DISPLAY
   163 label *label7

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-6 instructions):
 
    36 op lessThan *tmp11 :paddleX *tmp10
    37 jump *label11 equal *tmp11 false
    38 op add :paddleX :paddleX 3
-    * set *tmp12 :paddleX
    39 jump *label12 always
    40 label *label11
-    * set *tmp12 null
    41 label *label12
    42 jump *label10 always
    43 label *label9
    44 op greaterThan *tmp13 :paddleX 0
    45 jump *label13 equal *tmp13 false
    46 op sub :paddleX :paddleX 3
-    * set *tmp14 :paddleX
    47 jump *label14 always
    48 label *label13
-    * set *tmp14 null
    49 label *label14
    50 label *label10
    51 op add :ballX :ballX :ballVX
 
   129 op mul :ballVX :ballVX -1
   130 set *tmp60 :ballVX
   131 label *label32
-    * set *tmp52 *tmp60
   132 jump *label30 always
   133 label *label29
-    * set *tmp52 null
   134 label *label30
   135 jump *label28 always
   136 label *label27

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   123 op land *tmp59 *tmp56 *tmp58
   124 jump *label31 equal *tmp59 false
   125 op mul :ballVY :ballVY -1
-    * set *tmp60 :ballVY
   126 jump *label32 always
   127 label *label31
   128 op mul :ballVX :ballVX -1
-    * set *tmp60 :ballVX
   129 label *label32
   130 jump *label30 always
   131 label *label29

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-8 instructions):
 
     5 jump *label2 equal true false
     6 set :paddleWidth 40
     7 op div *tmp0 :paddleWidth 2
-    * op sub *tmp1 88 *tmp0
-    * set :paddleX *tmp1
+    8 op sub :paddleX 88 *tmp0
     9 set :ballX 88
    10 set :ballY 88
    11 op rand *tmp2 10
-    * op sub *tmp3 *tmp2 5
-    * set :ballVX *tmp3
+   12 op sub :ballVX *tmp2 5
    13 op rand *tmp4 10
-    * op sub *tmp5 *tmp4 5
-    * set :ballVY *tmp5
+   14 op sub :ballVY *tmp4 5
    15 set :brickCount 6
    16 set :i 0
    17 label *label3
    18 jump *label5 greaterThanEq :i 6
-    * set *tmp6 :i
-    * write 1 BRICKS *tmp6
+   19 write 1 BRICKS :i
    20 label *label4
    21 op add :i :i 1
    22 jump *label3 always
 
    46 label *label10
    47 op add :ballX :ballX :ballVX
    48 op add :ballY :ballY :ballVY
-    * op add *tmp15 :ballX 5
-    * set :ballXEnd *tmp15
-    * op add *tmp16 :ballY 5
-    * set :ballYEnd *tmp16
+   49 op add :ballXEnd :ballX 5
+   50 op add :ballYEnd :ballY 5
    51 op lessThan *tmp17 :ballX 0
    52 op greaterThan *tmp18 :ballXEnd 176
    53 op or *tmp20 *tmp17 *tmp18
 
    92 label *label24
    93 op lessThan *tmp39 :x 176
    94 jump *label26 equal *tmp39 false
-    * set *tmp40 :brickPtr
-    * read *tmp41 BRICKS *tmp40
+   95 read *tmp41 BRICKS :brickPtr
    96 jump *label27 equal *tmp41 false
    97 draw rect :x :y 57.666666666666664 9
    98 op greaterThan *tmp43 :ballXEnd :x
 
   105 op lessThan *tmp50 :ballY *tmp49
   106 op land *tmp51 *tmp48 *tmp50
   107 jump *label29 equal *tmp51 false
-    * set *tmp53 :brickPtr
-    * write 0 BRICKS *tmp53
+  108 write 0 BRICKS :brickPtr
   109 op sub :brickCount :brickCount 1
   110 set :brickWidthPlusBallSizeMinus1 62.666666666666664
   111 op sub *tmp55 :x 4

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
     2 set PADDLECONTROLLER switch1
     3 draw color 255 255 255 255
     4 label *label0
-    * jump *label2 equal true false
     5 set :paddleWidth 40
     6 op div *tmp0 :paddleWidth 2
     7 op sub :paddleX 88 *tmp0
 
    21 jump *label3 always
    22 label *label5
    23 label *label6
-    * jump *label8 equal true false
    24 draw clear 0 0 0
    25 draw rect :paddleX 10 :paddleWidth 5
    26 draw rect :ballX :ballY 5 5

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-7 instructions):
 
    27 sensor *tmp8 PADDLECONTROLLER @enabled
    28 jump *label9 equal *tmp8 false
    29 op sub *tmp10 176 :paddleWidth
-    * op lessThan *tmp11 :paddleX *tmp10
-    * jump *label11 equal *tmp11 false
+   30 jump *label11 greaterThanEq :paddleX *tmp10
    31 op add :paddleX :paddleX 3
    32 jump *label12 always
    33 label *label11
    34 label *label12
    35 jump *label10 always
    36 label *label9
-    * op greaterThan *tmp13 :paddleX 0
-    * jump *label13 equal *tmp13 false
+   37 jump *label13 lessThanEq :paddleX 0
    38 op sub :paddleX :paddleX 3
    39 jump *label14 always
    40 label *label13
 
    47 op lessThan *tmp17 :ballX 0
    48 op greaterThan *tmp18 :ballXEnd 176
    49 op or *tmp20 *tmp17 *tmp18
-    * op notEqual *tmp19 *tmp20 false
-    * jump *label15 equal *tmp19 false
+   50 jump *label15 equal *tmp20 false
    51 op mul :ballVX :ballVX -1
    52 jump *label16 always
    53 label *label15
    54 label *label16
-    * op greaterThan *tmp22 :ballYEnd 176
-    * jump *label17 equal *tmp22 false
+   55 jump *label17 lessThanEq :ballYEnd 176
    56 op mul :ballVY :ballVY -1
    57 jump *label18 always
    58 label *label17
 
    80 set :brickPtr 0
    81 set :y 126
    82 label *label21
-    * op greaterThan *tmp38 :y 106
-    * jump *label23 equal *tmp38 false
+   83 jump *label23 lessThanEq :y 106
    84 set :x 1
    85 label *label24
-    * op lessThan *tmp39 :x 176
-    * jump *label26 equal *tmp39 false
+   86 jump *label26 greaterThanEq :x 176
    87 read *tmp41 BRICKS :brickPtr
    88 jump *label27 equal *tmp41 false
    89 draw rect :x :y 57.666666666666664 9
 
   129 op lessThan *tmp61 :ballY 0
   130 op equal *tmp62 :brickCount 0
   131 op or *tmp64 *tmp61 *tmp62
-    * op notEqual *tmp63 *tmp64 false
-    * jump *label33 equal *tmp63 false
+  132 jump *label33 equal *tmp64 false
   133 jump *label8 always
   134 jump *label34 always
   135 label *label33

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-8 instructions):
 
    29 op sub *tmp10 176 :paddleWidth
    30 jump *label11 greaterThanEq :paddleX *tmp10
    31 op add :paddleX :paddleX 3
-    * jump *label12 always
    32 label *label11
    33 label *label12
    34 jump *label10 always
    35 label *label9
    36 jump *label13 lessThanEq :paddleX 0
    37 op sub :paddleX :paddleX 3
-    * jump *label14 always
    38 label *label13
    39 label *label14
    40 label *label10
 
    47 op or *tmp20 *tmp17 *tmp18
    48 jump *label15 equal *tmp20 false
    49 op mul :ballVX :ballVX -1
-    * jump *label16 always
    50 label *label15
    51 label *label16
    52 jump *label17 lessThanEq :ballYEnd 176
    53 op mul :ballVY :ballVY -1
-    * jump *label18 always
    54 label *label17
    55 label *label18
    56 op greaterThan *tmp24 :ballXEnd :paddleX
 
    70 op div *tmp37 *tmp36 10
    71 op add :ballVX :ballVX *tmp37
    72 op sub :paddleWidth :paddleWidth 1
-    * jump *label20 always
    73 label *label19
    74 label *label20
    75 set :brickPtr 0
 
   106 label *label31
   107 op mul :ballVX :ballVX -1
   108 label *label32
-    * jump *label30 always
   109 label *label29
   110 label *label30
-    * jump *label28 always
   111 label *label27
   112 label *label28
   113 op add :brickPtr :brickPtr 1
 
   124 op or *tmp64 *tmp61 *tmp62
   125 jump *label33 equal *tmp64 false
   126 jump *label8 always
-    * jump *label34 always
   127 label *label33
   128 label *label34
   129 drawflush DISPLAY

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 draw color 255 255 255 255
     4 label *label0
     5 set :paddleWidth 40
-    * op div *tmp0 :paddleWidth 2
-    * op sub :paddleX 88 *tmp0
+    6 op div *tmp0 40 2
+    7 op sub :paddleX 88 20
     8 set :ballX 88
     9 set :ballY 88
    10 op rand *tmp2 10
 
    97 set :brickWidthPlusBallSizeMinus1 62.666666666666664
    98 op sub *tmp55 :x 4
    99 op greaterThan *tmp56 :ballX *tmp55
-    * op add *tmp57 :x :brickWidthPlusBallSizeMinus1
+  100 op add *tmp57 :x 62.666666666666664
   101 op lessThan *tmp58 :ballX *tmp57
   102 op land *tmp59 *tmp56 *tmp58
   103 jump *label31 equal *tmp59 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     3 draw color 255 255 255 255
     4 label *label0
     5 set :paddleWidth 40
-    * op div *tmp0 40 2
     6 op sub :paddleX 88 20
     7 set :ballX 88
     8 set :ballY 88
 
    93 jump *label29 equal *tmp51 false
    94 write 0 BRICKS :brickPtr
    95 op sub :brickCount :brickCount 1
-    * set :brickWidthPlusBallSizeMinus1 62.666666666666664
    96 op sub *tmp55 :x 4
    97 op greaterThan *tmp56 :ballX *tmp55
    98 op add *tmp57 :x 62.666666666666664

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-3 instructions):
 
    13 set :brickCount 6
    14 set :i 0
    15 label *label3
-    * jump *label5 greaterThanEq :i 6
+   16 label *label35
    17 write 1 BRICKS :i
    18 label *label4
    19 op add :i :i 1
-    * jump *label3 always
+   20 jump *label35 lessThan :i 6
    21 label *label5
    22 label *label6
    23 draw clear 0 0 0
 
    74 set :brickPtr 0
    75 set :y 126
    76 label *label21
-    * jump *label23 lessThanEq :y 106
+   77 label *label36
    78 set :x 1
    79 label *label24
-    * jump *label26 greaterThanEq :x 176
+   80 label *label37
    81 read *tmp41 BRICKS :brickPtr
    82 jump *label27 equal *tmp41 false
    83 draw rect :x :y 57.666666666666664 9
 
   111 op add :brickPtr :brickPtr 1
   112 label *label25
   113 op add :x :x 58.666666666666664
-    * jump *label24 always
+  114 jump *label37 lessThan :x 176
   115 label *label26
   116 label *label22
   117 op sub :y :y 10
-    * jump *label21 always
+  118 jump *label36 greaterThan :y 106
   119 label *label23
   120 op lessThan *tmp61 :ballY 0
   121 op equal *tmp62 :brickCount 0

Modifications by Unroll loop at line 82:13 (+51 instructions):
 
    75 set :y 126
    76 label *label21
    77 label *label36
-    * set :x 1
-    * label *label24
-    * label *label37
-    * read *tmp41 BRICKS :brickPtr
-    * jump *label27 equal *tmp41 false
-    * draw rect :x :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd :x
-    * op add *tmp44 :x 58.666666666666664
-    * op lessThan *tmp45 :ballX *tmp44
-    * op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
-    * op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
-    * op land *tmp51 *tmp48 *tmp50
-    * jump *label29 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
-    * op sub :brickCount :brickCount 1
-    * op sub *tmp55 :x 4
-    * op greaterThan *tmp56 :ballX *tmp55
-    * op add *tmp57 :x 62.666666666666664
-    * op lessThan *tmp58 :ballX *tmp57
-    * op land *tmp59 *tmp56 *tmp58
-    * jump *label31 equal *tmp59 false
-    * op mul :ballVY :ballVY -1
-    * jump *label32 always
-    * label *label31
-    * op mul :ballVX :ballVX -1
-    * label *label32
-    * label *label29
-    * label *label30
-    * label *label27
-    * label *label28
-    * op add :brickPtr :brickPtr 1
-    * label *label25
-    * op add :x :x 58.666666666666664
-    * jump *label37 lessThan :x 176
-    * label *label26
+   78 set :x 1
+   79 label *label38
+   80 label *label39
+   81 read *tmp41 BRICKS :brickPtr
+   82 jump *label44 equal *tmp41 false
+   83 draw rect :x :y 57.666666666666664 9
+   84 op greaterThan *tmp43 :ballXEnd :x
+   85 op add *tmp44 :x 58.666666666666664
+   86 op lessThan *tmp45 :ballX *tmp44
+   87 op land *tmp46 *tmp43 *tmp45
+   88 op greaterThan *tmp47 :ballYEnd :y
+   89 op land *tmp48 *tmp46 *tmp47
+   90 op add *tmp49 :y 10
+   91 op lessThan *tmp50 :ballY *tmp49
+   92 op land *tmp51 *tmp48 *tmp50
+   93 jump *label42 equal *tmp51 false
+   94 write 0 BRICKS :brickPtr
+   95 op sub :brickCount :brickCount 1
+   96 op sub *tmp55 :x 4
+   97 op greaterThan *tmp56 :ballX *tmp55
+   98 op add *tmp57 :x 62.666666666666664
+   99 op lessThan *tmp58 :ballX *tmp57
+  100 op land *tmp59 *tmp56 *tmp58
+  101 jump *label40 equal *tmp59 false
+  102 op mul :ballVY :ballVY -1
+  103 jump *label41 always
+  104 label *label40
+  105 op mul :ballVX :ballVX -1
+  106 label *label41
+  107 label *label42
+  108 label *label43
+  109 label *label44
+  110 label *label45
+  111 op add :brickPtr :brickPtr 1
+  112 label *label46
+  113 op add :x :x 58.666666666666664
+  114 label *label47
+  115 read *tmp41 BRICKS :brickPtr
+  116 jump *label52 equal *tmp41 false
+  117 draw rect :x :y 57.666666666666664 9
+  118 op greaterThan *tmp43 :ballXEnd :x
+  119 op add *tmp44 :x 58.666666666666664
+  120 op lessThan *tmp45 :ballX *tmp44
+  121 op land *tmp46 *tmp43 *tmp45
+  122 op greaterThan *tmp47 :ballYEnd :y
+  123 op land *tmp48 *tmp46 *tmp47
+  124 op add *tmp49 :y 10
+  125 op lessThan *tmp50 :ballY *tmp49
+  126 op land *tmp51 *tmp48 *tmp50
+  127 jump *label50 equal *tmp51 false
+  128 write 0 BRICKS :brickPtr
+  129 op sub :brickCount :brickCount 1
+  130 op sub *tmp55 :x 4
+  131 op greaterThan *tmp56 :ballX *tmp55
+  132 op add *tmp57 :x 62.666666666666664
+  133 op lessThan *tmp58 :ballX *tmp57
+  134 op land *tmp59 *tmp56 *tmp58
+  135 jump *label48 equal *tmp59 false
+  136 op mul :ballVY :ballVY -1
+  137 jump *label49 always
+  138 label *label48
+  139 op mul :ballVX :ballVX -1
+  140 label *label49
+  141 label *label50
+  142 label *label51
+  143 label *label52
+  144 label *label53
+  145 op add :brickPtr :brickPtr 1
+  146 label *label54
+  147 op add :x :x 58.666666666666664
+  148 label *label55
+  149 read *tmp41 BRICKS :brickPtr
+  150 jump *label60 equal *tmp41 false
+  151 draw rect :x :y 57.666666666666664 9
+  152 op greaterThan *tmp43 :ballXEnd :x
+  153 op add *tmp44 :x 58.666666666666664
+  154 op lessThan *tmp45 :ballX *tmp44
+  155 op land *tmp46 *tmp43 *tmp45
+  156 op greaterThan *tmp47 :ballYEnd :y
+  157 op land *tmp48 *tmp46 *tmp47
+  158 op add *tmp49 :y 10
+  159 op lessThan *tmp50 :ballY *tmp49
+  160 op land *tmp51 *tmp48 *tmp50
+  161 jump *label58 equal *tmp51 false
+  162 write 0 BRICKS :brickPtr
+  163 op sub :brickCount :brickCount 1
+  164 op sub *tmp55 :x 4
+  165 op greaterThan *tmp56 :ballX *tmp55
+  166 op add *tmp57 :x 62.666666666666664
+  167 op lessThan *tmp58 :ballX *tmp57
+  168 op land *tmp59 *tmp56 *tmp58
+  169 jump *label56 equal *tmp59 false
+  170 op mul :ballVY :ballVY -1
+  171 jump *label57 always
+  172 label *label56
+  173 op mul :ballVX :ballVX -1
+  174 label *label57
+  175 label *label58
+  176 label *label59
+  177 label *label60
+  178 label *label61
+  179 op add :brickPtr :brickPtr 1
+  180 label *label62
+  181 op add :x :x 58.666666666666664
+  182 label *label26
   183 label *label22
   184 op sub :y :y 10
   185 jump *label36 greaterThan :y 106

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    80 label *label39
    81 read *tmp41 BRICKS :brickPtr
    82 jump *label44 equal *tmp41 false
-    * draw rect :x :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd :x
-    * op add *tmp44 :x 58.666666666666664
-    * op lessThan *tmp45 :ballX *tmp44
+   83 draw rect 1 :y 57.666666666666664 9
+   84 op greaterThan *tmp43 :ballXEnd 1
+   85 op add *tmp44 1 58.666666666666664
+   86 op lessThan *tmp45 :ballX 59.666666666666664
    87 op land *tmp46 *tmp43 *tmp45
    88 op greaterThan *tmp47 :ballYEnd :y
    89 op land *tmp48 *tmp46 *tmp47
 
    93 jump *label42 equal *tmp51 false
    94 write 0 BRICKS :brickPtr
    95 op sub :brickCount :brickCount 1
-    * op sub *tmp55 :x 4
-    * op greaterThan *tmp56 :ballX *tmp55
-    * op add *tmp57 :x 62.666666666666664
-    * op lessThan *tmp58 :ballX *tmp57
+   96 op sub *tmp55 1 4
+   97 op greaterThan *tmp56 :ballX -3
+   98 op add *tmp57 1 62.666666666666664
+   99 op lessThan *tmp58 :ballX 63.666666666666664
   100 op land *tmp59 *tmp56 *tmp58
   101 jump *label40 equal *tmp59 false
   102 op mul :ballVY :ballVY -1
 
   110 label *label45
   111 op add :brickPtr :brickPtr 1
   112 label *label46
-    * op add :x :x 58.666666666666664
+  113 op add :x 1 58.666666666666664
   114 label *label47
   115 read *tmp41 BRICKS :brickPtr
   116 jump *label52 equal *tmp41 false
-    * draw rect :x :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd :x
-    * op add *tmp44 :x 58.666666666666664
-    * op lessThan *tmp45 :ballX *tmp44
+  117 draw rect 59.666666666666664 :y 57.666666666666664 9
+  118 op greaterThan *tmp43 :ballXEnd 59.666666666666664
+  119 op add *tmp44 59.666666666666664 58.666666666666664
+  120 op lessThan *tmp45 :ballX 118.33333333333333
   121 op land *tmp46 *tmp43 *tmp45
   122 op greaterThan *tmp47 :ballYEnd :y
   123 op land *tmp48 *tmp46 *tmp47
 
   127 jump *label50 equal *tmp51 false
   128 write 0 BRICKS :brickPtr
   129 op sub :brickCount :brickCount 1
-    * op sub *tmp55 :x 4
-    * op greaterThan *tmp56 :ballX *tmp55
-    * op add *tmp57 :x 62.666666666666664
-    * op lessThan *tmp58 :ballX *tmp57
+  130 op sub *tmp55 59.666666666666664 4
+  131 op greaterThan *tmp56 :ballX 55.666666666666664
+  132 op add *tmp57 59.666666666666664 62.666666666666664
+  133 op lessThan *tmp58 :ballX 122.33333333333333
   134 op land *tmp59 *tmp56 *tmp58
   135 jump *label48 equal *tmp59 false
   136 op mul :ballVY :ballVY -1
 
   144 label *label53
   145 op add :brickPtr :brickPtr 1
   146 label *label54
-    * op add :x :x 58.666666666666664
+  147 op add :x 59.666666666666664 58.666666666666664
   148 label *label55
   149 read *tmp41 BRICKS :brickPtr
   150 jump *label60 equal *tmp41 false
-    * draw rect :x :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd :x
-    * op add *tmp44 :x 58.666666666666664
-    * op lessThan *tmp45 :ballX *tmp44
+  151 draw rect 118.33333333333333 :y 57.666666666666664 9
+  152 op greaterThan *tmp43 :ballXEnd 118.33333333333333
+  153 op add *tmp44 118.33333333333333 58.666666666666664
+  154 op lessThan *tmp45 :ballX 177
   155 op land *tmp46 *tmp43 *tmp45
   156 op greaterThan *tmp47 :ballYEnd :y
   157 op land *tmp48 *tmp46 *tmp47
 
   161 jump *label58 equal *tmp51 false
   162 write 0 BRICKS :brickPtr
   163 op sub :brickCount :brickCount 1
-    * op sub *tmp55 :x 4
-    * op greaterThan *tmp56 :ballX *tmp55
-    * op add *tmp57 :x 62.666666666666664
-    * op lessThan *tmp58 :ballX *tmp57
+  164 op sub *tmp55 118.33333333333333 4
+  165 op greaterThan *tmp56 :ballX 114.33333333333333
+  166 op add *tmp57 118.33333333333333 62.666666666666664
+  167 op lessThan *tmp58 :ballX 181
   168 op land *tmp59 *tmp56 *tmp58
   169 jump *label56 equal *tmp59 false
   170 op mul :ballVY :ballVY -1
 
   178 label *label61
   179 op add :brickPtr :brickPtr 1
   180 label *label62
-    * op add :x :x 58.666666666666664
+  181 op add :x 118.33333333333333 58.666666666666664
   182 label *label26
   183 label *label22
   184 op sub :y :y 10

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-13 instructions):
 
    75 set :y 126
    76 label *label21
    77 label *label36
-    * set :x 1
    78 label *label38
    79 label *label39
    80 read *tmp41 BRICKS :brickPtr
    81 jump *label44 equal *tmp41 false
    82 draw rect 1 :y 57.666666666666664 9
    83 op greaterThan *tmp43 :ballXEnd 1
-    * op add *tmp44 1 58.666666666666664
    84 op lessThan *tmp45 :ballX 59.666666666666664
    85 op land *tmp46 *tmp43 *tmp45
    86 op greaterThan *tmp47 :ballYEnd :y
 
    91 jump *label42 equal *tmp51 false
    92 write 0 BRICKS :brickPtr
    93 op sub :brickCount :brickCount 1
-    * op sub *tmp55 1 4
    94 op greaterThan *tmp56 :ballX -3
-    * op add *tmp57 1 62.666666666666664
    95 op lessThan *tmp58 :ballX 63.666666666666664
    96 op land *tmp59 *tmp56 *tmp58
    97 jump *label40 equal *tmp59 false
 
   106 label *label45
   107 op add :brickPtr :brickPtr 1
   108 label *label46
-    * op add :x 1 58.666666666666664
   109 label *label47
   110 read *tmp41 BRICKS :brickPtr
   111 jump *label52 equal *tmp41 false
   112 draw rect 59.666666666666664 :y 57.666666666666664 9
   113 op greaterThan *tmp43 :ballXEnd 59.666666666666664
-    * op add *tmp44 59.666666666666664 58.666666666666664
   114 op lessThan *tmp45 :ballX 118.33333333333333
   115 op land *tmp46 *tmp43 *tmp45
   116 op greaterThan *tmp47 :ballYEnd :y
 
   121 jump *label50 equal *tmp51 false
   122 write 0 BRICKS :brickPtr
   123 op sub :brickCount :brickCount 1
-    * op sub *tmp55 59.666666666666664 4
   124 op greaterThan *tmp56 :ballX 55.666666666666664
-    * op add *tmp57 59.666666666666664 62.666666666666664
   125 op lessThan *tmp58 :ballX 122.33333333333333
   126 op land *tmp59 *tmp56 *tmp58
   127 jump *label48 equal *tmp59 false
 
   136 label *label53
   137 op add :brickPtr :brickPtr 1
   138 label *label54
-    * op add :x 59.666666666666664 58.666666666666664
   139 label *label55
   140 read *tmp41 BRICKS :brickPtr
   141 jump *label60 equal *tmp41 false
   142 draw rect 118.33333333333333 :y 57.666666666666664 9
   143 op greaterThan *tmp43 :ballXEnd 118.33333333333333
-    * op add *tmp44 118.33333333333333 58.666666666666664
   144 op lessThan *tmp45 :ballX 177
   145 op land *tmp46 *tmp43 *tmp45
   146 op greaterThan *tmp47 :ballYEnd :y
 
   151 jump *label58 equal *tmp51 false
   152 write 0 BRICKS :brickPtr
   153 op sub :brickCount :brickCount 1
-    * op sub *tmp55 118.33333333333333 4
   154 op greaterThan *tmp56 :ballX 114.33333333333333
-    * op add *tmp57 118.33333333333333 62.666666666666664
   155 op lessThan *tmp58 :ballX 181
   156 op land *tmp59 *tmp56 *tmp58
   157 jump *label56 equal *tmp59 false
 
   166 label *label61
   167 op add :brickPtr :brickPtr 1
   168 label *label62
-    * op add :x 118.33333333333333 58.666666666666664
   169 label *label26
   170 label *label22
   171 op sub :y :y 10

Modifications by Unroll loop at line 40:5 (+9 instructions):
 
    11 op rand *tmp4 10
    12 op sub :ballVY *tmp4 5
    13 set :brickCount 6
-    * set :i 0
-    * label *label3
-    * label *label35
-    * write 1 BRICKS :i
-    * label *label4
-    * op add :i :i 1
-    * jump *label35 lessThan :i 6
-    * label *label5
+   14 set :i 0
+   15 label *label63
+   16 label *label64
+   17 write 1 BRICKS :i
+   18 label *label65
+   19 op add :i :i 1
+   20 label *label66
+   21 write 1 BRICKS :i
+   22 label *label67
+   23 op add :i :i 1
+   24 label *label68
+   25 write 1 BRICKS :i
+   26 label *label69
+   27 op add :i :i 1
+   28 label *label70
+   29 write 1 BRICKS :i
+   30 label *label71
+   31 op add :i :i 1
+   32 label *label72
+   33 write 1 BRICKS :i
+   34 label *label73
+   35 op add :i :i 1
+   36 label *label74
+   37 write 1 BRICKS :i
+   38 label *label75
+   39 op add :i :i 1
+   40 label *label5
    41 label *label6
    42 draw clear 0 0 0
    43 draw rect :paddleX 10 :paddleWidth 5

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    14 set :i 0
    15 label *label63
    16 label *label64
-    * write 1 BRICKS :i
+   17 write 1 BRICKS 0
    18 label *label65
-    * op add :i :i 1
+   19 op add :i 0 1
    20 label *label66
-    * write 1 BRICKS :i
+   21 write 1 BRICKS 1
    22 label *label67
-    * op add :i :i 1
+   23 op add :i 1 1
    24 label *label68
-    * write 1 BRICKS :i
+   25 write 1 BRICKS 2
    26 label *label69
-    * op add :i :i 1
+   27 op add :i 2 1
    28 label *label70
-    * write 1 BRICKS :i
+   29 write 1 BRICKS 3
    30 label *label71
-    * op add :i :i 1
+   31 op add :i 3 1
    32 label *label72
-    * write 1 BRICKS :i
+   33 write 1 BRICKS 4
    34 label *label73
-    * op add :i :i 1
+   35 op add :i 4 1
    36 label *label74
-    * write 1 BRICKS :i
+   37 write 1 BRICKS 5
    38 label *label75
-    * op add :i :i 1
+   39 op add :i 5 1
    40 label *label5
    41 label *label6
    42 draw clear 0 0 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
    11 op rand *tmp4 10
    12 op sub :ballVY *tmp4 5
    13 set :brickCount 6
-    * set :i 0
    14 label *label63
    15 label *label64
    16 write 1 BRICKS 0
    17 label *label65
-    * op add :i 0 1
    18 label *label66
    19 write 1 BRICKS 1
    20 label *label67
-    * op add :i 1 1
    21 label *label68
    22 write 1 BRICKS 2
    23 label *label69
-    * op add :i 2 1
    24 label *label70
    25 write 1 BRICKS 3
    26 label *label71
-    * op add :i 3 1
    27 label *label72
    28 write 1 BRICKS 4
    29 label *label73
-    * op add :i 4 1
    30 label *label74
    31 write 1 BRICKS 5
    32 label *label75
-    * op add :i 5 1
    33 label *label5
    34 label *label6
    35 draw clear 0 0 0

Modifications by Unroll loop at line 81:9 (+66 instructions):
 
    84 label *label19
    85 label *label20
    86 set :brickPtr 0
-    * set :y 126
-    * label *label21
-    * label *label36
-    * label *label38
-    * label *label39
-    * read *tmp41 BRICKS :brickPtr
-    * jump *label44 equal *tmp41 false
-    * draw rect 1 :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd 1
-    * op lessThan *tmp45 :ballX 59.666666666666664
-    * op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
-    * op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
-    * op land *tmp51 *tmp48 *tmp50
-    * jump *label42 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
-    * op sub :brickCount :brickCount 1
-    * op greaterThan *tmp56 :ballX -3
-    * op lessThan *tmp58 :ballX 63.666666666666664
-    * op land *tmp59 *tmp56 *tmp58
-    * jump *label40 equal *tmp59 false
-    * op mul :ballVY :ballVY -1
-    * jump *label41 always
-    * label *label40
-    * op mul :ballVX :ballVX -1
-    * label *label41
-    * label *label42
-    * label *label43
-    * label *label44
-    * label *label45
-    * op add :brickPtr :brickPtr 1
-    * label *label46
-    * label *label47
-    * read *tmp41 BRICKS :brickPtr
-    * jump *label52 equal *tmp41 false
-    * draw rect 59.666666666666664 :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd 59.666666666666664
-    * op lessThan *tmp45 :ballX 118.33333333333333
-    * op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
-    * op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
-    * op land *tmp51 *tmp48 *tmp50
-    * jump *label50 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
-    * op sub :brickCount :brickCount 1
-    * op greaterThan *tmp56 :ballX 55.666666666666664
-    * op lessThan *tmp58 :ballX 122.33333333333333
-    * op land *tmp59 *tmp56 *tmp58
-    * jump *label48 equal *tmp59 false
-    * op mul :ballVY :ballVY -1
-    * jump *label49 always
-    * label *label48
-    * op mul :ballVX :ballVX -1
-    * label *label49
-    * label *label50
-    * label *label51
-    * label *label52
-    * label *label53
-    * op add :brickPtr :brickPtr 1
-    * label *label54
-    * label *label55
-    * read *tmp41 BRICKS :brickPtr
-    * jump *label60 equal *tmp41 false
-    * draw rect 118.33333333333333 :y 57.666666666666664 9
-    * op greaterThan *tmp43 :ballXEnd 118.33333333333333
-    * op lessThan *tmp45 :ballX 177
-    * op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
-    * op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
-    * op land *tmp51 *tmp48 *tmp50
-    * jump *label58 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
-    * op sub :brickCount :brickCount 1
-    * op greaterThan *tmp56 :ballX 114.33333333333333
-    * op lessThan *tmp58 :ballX 181
-    * op land *tmp59 *tmp56 *tmp58
-    * jump *label56 equal *tmp59 false
-    * op mul :ballVY :ballVY -1
-    * jump *label57 always
-    * label *label56
-    * op mul :ballVX :ballVX -1
-    * label *label57
-    * label *label58
-    * label *label59
-    * label *label60
-    * label *label61
-    * op add :brickPtr :brickPtr 1
-    * label *label62
-    * label *label26
-    * label *label22
-    * op sub :y :y 10
-    * jump *label36 greaterThan :y 106
-    * label *label23
+   87 set :y 126
+   88 label *label76
+   89 label *label77
+   90 label *label78
+   91 label *label79
+   92 read *tmp41 BRICKS :brickPtr
+   93 jump *label84 equal *tmp41 false
+   94 draw rect 1 :y 57.666666666666664 9
+   95 op greaterThan *tmp43 :ballXEnd 1
+   96 op lessThan *tmp45 :ballX 59.666666666666664
+   97 op land *tmp46 *tmp43 *tmp45
+   98 op greaterThan *tmp47 :ballYEnd :y
+   99 op land *tmp48 *tmp46 *tmp47
+  100 op add *tmp49 :y 10
+  101 op lessThan *tmp50 :ballY *tmp49
+  102 op land *tmp51 *tmp48 *tmp50
+  103 jump *label82 equal *tmp51 false
+  104 write 0 BRICKS :brickPtr
+  105 op sub :brickCount :brickCount 1
+  106 op greaterThan *tmp56 :ballX -3
+  107 op lessThan *tmp58 :ballX 63.666666666666664
+  108 op land *tmp59 *tmp56 *tmp58
+  109 jump *label80 equal *tmp59 false
+  110 op mul :ballVY :ballVY -1
+  111 jump *label81 always
+  112 label *label80
+  113 op mul :ballVX :ballVX -1
+  114 label *label81
+  115 label *label82
+  116 label *label83
+  117 label *label84
+  118 label *label85
+  119 op add :brickPtr :brickPtr 1
+  120 label *label86
+  121 label *label87
+  122 read *tmp41 BRICKS :brickPtr
+  123 jump *label92 equal *tmp41 false
+  124 draw rect 59.666666666666664 :y 57.666666666666664 9
+  125 op greaterThan *tmp43 :ballXEnd 59.666666666666664
+  126 op lessThan *tmp45 :ballX 118.33333333333333
+  127 op land *tmp46 *tmp43 *tmp45
+  128 op greaterThan *tmp47 :ballYEnd :y
+  129 op land *tmp48 *tmp46 *tmp47
+  130 op add *tmp49 :y 10
+  131 op lessThan *tmp50 :ballY *tmp49
+  132 op land *tmp51 *tmp48 *tmp50
+  133 jump *label90 equal *tmp51 false
+  134 write 0 BRICKS :brickPtr
+  135 op sub :brickCount :brickCount 1
+  136 op greaterThan *tmp56 :ballX 55.666666666666664
+  137 op lessThan *tmp58 :ballX 122.33333333333333
+  138 op land *tmp59 *tmp56 *tmp58
+  139 jump *label88 equal *tmp59 false
+  140 op mul :ballVY :ballVY -1
+  141 jump *label89 always
+  142 label *label88
+  143 op mul :ballVX :ballVX -1
+  144 label *label89
+  145 label *label90
+  146 label *label91
+  147 label *label92
+  148 label *label93
+  149 op add :brickPtr :brickPtr 1
+  150 label *label94
+  151 label *label95
+  152 read *tmp41 BRICKS :brickPtr
+  153 jump *label100 equal *tmp41 false
+  154 draw rect 118.33333333333333 :y 57.666666666666664 9
+  155 op greaterThan *tmp43 :ballXEnd 118.33333333333333
+  156 op lessThan *tmp45 :ballX 177
+  157 op land *tmp46 *tmp43 *tmp45
+  158 op greaterThan *tmp47 :ballYEnd :y
+  159 op land *tmp48 *tmp46 *tmp47
+  160 op add *tmp49 :y 10
+  161 op lessThan *tmp50 :ballY *tmp49
+  162 op land *tmp51 *tmp48 *tmp50
+  163 jump *label98 equal *tmp51 false
+  164 write 0 BRICKS :brickPtr
+  165 op sub :brickCount :brickCount 1
+  166 op greaterThan *tmp56 :ballX 114.33333333333333
+  167 op lessThan *tmp58 :ballX 181
+  168 op land *tmp59 *tmp56 *tmp58
+  169 jump *label96 equal *tmp59 false
+  170 op mul :ballVY :ballVY -1
+  171 jump *label97 always
+  172 label *label96
+  173 op mul :ballVX :ballVX -1
+  174 label *label97
+  175 label *label98
+  176 label *label99
+  177 label *label100
+  178 label *label101
+  179 op add :brickPtr :brickPtr 1
+  180 label *label102
+  181 label *label103
+  182 label *label104
+  183 op sub :y :y 10
+  184 label *label105
+  185 label *label106
+  186 label *label107
+  187 read *tmp41 BRICKS :brickPtr
+  188 jump *label112 equal *tmp41 false
+  189 draw rect 1 :y 57.666666666666664 9
+  190 op greaterThan *tmp43 :ballXEnd 1
+  191 op lessThan *tmp45 :ballX 59.666666666666664
+  192 op land *tmp46 *tmp43 *tmp45
+  193 op greaterThan *tmp47 :ballYEnd :y
+  194 op land *tmp48 *tmp46 *tmp47
+  195 op add *tmp49 :y 10
+  196 op lessThan *tmp50 :ballY *tmp49
+  197 op land *tmp51 *tmp48 *tmp50
+  198 jump *label110 equal *tmp51 false
+  199 write 0 BRICKS :brickPtr
+  200 op sub :brickCount :brickCount 1
+  201 op greaterThan *tmp56 :ballX -3
+  202 op lessThan *tmp58 :ballX 63.666666666666664
+  203 op land *tmp59 *tmp56 *tmp58
+  204 jump *label108 equal *tmp59 false
+  205 op mul :ballVY :ballVY -1
+  206 jump *label109 always
+  207 label *label108
+  208 op mul :ballVX :ballVX -1
+  209 label *label109
+  210 label *label110
+  211 label *label111
+  212 label *label112
+  213 label *label113
+  214 op add :brickPtr :brickPtr 1
+  215 label *label114
+  216 label *label115
+  217 read *tmp41 BRICKS :brickPtr
+  218 jump *label120 equal *tmp41 false
+  219 draw rect 59.666666666666664 :y 57.666666666666664 9
+  220 op greaterThan *tmp43 :ballXEnd 59.666666666666664
+  221 op lessThan *tmp45 :ballX 118.33333333333333
+  222 op land *tmp46 *tmp43 *tmp45
+  223 op greaterThan *tmp47 :ballYEnd :y
+  224 op land *tmp48 *tmp46 *tmp47
+  225 op add *tmp49 :y 10
+  226 op lessThan *tmp50 :ballY *tmp49
+  227 op land *tmp51 *tmp48 *tmp50
+  228 jump *label118 equal *tmp51 false
+  229 write 0 BRICKS :brickPtr
+  230 op sub :brickCount :brickCount 1
+  231 op greaterThan *tmp56 :ballX 55.666666666666664
+  232 op lessThan *tmp58 :ballX 122.33333333333333
+  233 op land *tmp59 *tmp56 *tmp58
+  234 jump *label116 equal *tmp59 false
+  235 op mul :ballVY :ballVY -1
+  236 jump *label117 always
+  237 label *label116
+  238 op mul :ballVX :ballVX -1
+  239 label *label117
+  240 label *label118
+  241 label *label119
+  242 label *label120
+  243 label *label121
+  244 op add :brickPtr :brickPtr 1
+  245 label *label122
+  246 label *label123
+  247 read *tmp41 BRICKS :brickPtr
+  248 jump *label128 equal *tmp41 false
+  249 draw rect 118.33333333333333 :y 57.666666666666664 9
+  250 op greaterThan *tmp43 :ballXEnd 118.33333333333333
+  251 op lessThan *tmp45 :ballX 177
+  252 op land *tmp46 *tmp43 *tmp45
+  253 op greaterThan *tmp47 :ballYEnd :y
+  254 op land *tmp48 *tmp46 *tmp47
+  255 op add *tmp49 :y 10
+  256 op lessThan *tmp50 :ballY *tmp49
+  257 op land *tmp51 *tmp48 *tmp50
+  258 jump *label126 equal *tmp51 false
+  259 write 0 BRICKS :brickPtr
+  260 op sub :brickCount :brickCount 1
+  261 op greaterThan *tmp56 :ballX 114.33333333333333
+  262 op lessThan *tmp58 :ballX 181
+  263 op land *tmp59 *tmp56 *tmp58
+  264 jump *label124 equal *tmp59 false
+  265 op mul :ballVY :ballVY -1
+  266 jump *label125 always
+  267 label *label124
+  268 op mul :ballVX :ballVX -1
+  269 label *label125
+  270 label *label126
+  271 label *label127
+  272 label *label128
+  273 label *label129
+  274 op add :brickPtr :brickPtr 1
+  275 label *label130
+  276 label *label131
+  277 label *label132
+  278 op sub :y :y 10
+  279 label *label23
   280 op lessThan *tmp61 :ballY 0
   281 op equal *tmp62 :brickCount 0
   282 op or *tmp64 *tmp61 *tmp62

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    89 label *label77
    90 label *label78
    91 label *label79
-    * read *tmp41 BRICKS :brickPtr
+   92 read *tmp41 BRICKS 0
    93 jump *label84 equal *tmp41 false
-    * draw rect 1 :y 57.666666666666664 9
+   94 draw rect 1 126 57.666666666666664 9
    95 op greaterThan *tmp43 :ballXEnd 1
    96 op lessThan *tmp45 :ballX 59.666666666666664
    97 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+   98 op greaterThan *tmp47 :ballYEnd 126
    99 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  100 op add *tmp49 126 10
+  101 op lessThan *tmp50 :ballY 136
   102 op land *tmp51 *tmp48 *tmp50
   103 jump *label82 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  104 write 0 BRICKS 0
   105 op sub :brickCount :brickCount 1
   106 op greaterThan *tmp56 :ballX -3
   107 op lessThan *tmp58 :ballX 63.666666666666664
 
   116 label *label83
   117 label *label84
   118 label *label85
-    * op add :brickPtr :brickPtr 1
+  119 op add :brickPtr 0 1
   120 label *label86
   121 label *label87
-    * read *tmp41 BRICKS :brickPtr
+  122 read *tmp41 BRICKS 1
   123 jump *label92 equal *tmp41 false
-    * draw rect 59.666666666666664 :y 57.666666666666664 9
+  124 draw rect 59.666666666666664 126 57.666666666666664 9
   125 op greaterThan *tmp43 :ballXEnd 59.666666666666664
   126 op lessThan *tmp45 :ballX 118.33333333333333
   127 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+  128 op greaterThan *tmp47 :ballYEnd 126
   129 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  130 op add *tmp49 126 10
+  131 op lessThan *tmp50 :ballY 136
   132 op land *tmp51 *tmp48 *tmp50
   133 jump *label90 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  134 write 0 BRICKS 1
   135 op sub :brickCount :brickCount 1
   136 op greaterThan *tmp56 :ballX 55.666666666666664
   137 op lessThan *tmp58 :ballX 122.33333333333333
 
   146 label *label91
   147 label *label92
   148 label *label93
-    * op add :brickPtr :brickPtr 1
+  149 op add :brickPtr 1 1
   150 label *label94
   151 label *label95
-    * read *tmp41 BRICKS :brickPtr
+  152 read *tmp41 BRICKS 2
   153 jump *label100 equal *tmp41 false
-    * draw rect 118.33333333333333 :y 57.666666666666664 9
+  154 draw rect 118.33333333333333 126 57.666666666666664 9
   155 op greaterThan *tmp43 :ballXEnd 118.33333333333333
   156 op lessThan *tmp45 :ballX 177
   157 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+  158 op greaterThan *tmp47 :ballYEnd 126
   159 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  160 op add *tmp49 126 10
+  161 op lessThan *tmp50 :ballY 136
   162 op land *tmp51 *tmp48 *tmp50
   163 jump *label98 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  164 write 0 BRICKS 2
   165 op sub :brickCount :brickCount 1
   166 op greaterThan *tmp56 :ballX 114.33333333333333
   167 op lessThan *tmp58 :ballX 181
 
   176 label *label99
   177 label *label100
   178 label *label101
-    * op add :brickPtr :brickPtr 1
+  179 op add :brickPtr 2 1
   180 label *label102
   181 label *label103
   182 label *label104
-    * op sub :y :y 10
+  183 op sub :y 126 10
   184 label *label105
   185 label *label106
   186 label *label107
-    * read *tmp41 BRICKS :brickPtr
+  187 read *tmp41 BRICKS 3
   188 jump *label112 equal *tmp41 false
-    * draw rect 1 :y 57.666666666666664 9
+  189 draw rect 1 116 57.666666666666664 9
   190 op greaterThan *tmp43 :ballXEnd 1
   191 op lessThan *tmp45 :ballX 59.666666666666664
   192 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+  193 op greaterThan *tmp47 :ballYEnd 116
   194 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  195 op add *tmp49 116 10
+  196 op lessThan *tmp50 :ballY 126
   197 op land *tmp51 *tmp48 *tmp50
   198 jump *label110 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  199 write 0 BRICKS 3
   200 op sub :brickCount :brickCount 1
   201 op greaterThan *tmp56 :ballX -3
   202 op lessThan *tmp58 :ballX 63.666666666666664
 
   211 label *label111
   212 label *label112
   213 label *label113
-    * op add :brickPtr :brickPtr 1
+  214 op add :brickPtr 3 1
   215 label *label114
   216 label *label115
-    * read *tmp41 BRICKS :brickPtr
+  217 read *tmp41 BRICKS 4
   218 jump *label120 equal *tmp41 false
-    * draw rect 59.666666666666664 :y 57.666666666666664 9
+  219 draw rect 59.666666666666664 116 57.666666666666664 9
   220 op greaterThan *tmp43 :ballXEnd 59.666666666666664
   221 op lessThan *tmp45 :ballX 118.33333333333333
   222 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+  223 op greaterThan *tmp47 :ballYEnd 116
   224 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  225 op add *tmp49 116 10
+  226 op lessThan *tmp50 :ballY 126
   227 op land *tmp51 *tmp48 *tmp50
   228 jump *label118 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  229 write 0 BRICKS 4
   230 op sub :brickCount :brickCount 1
   231 op greaterThan *tmp56 :ballX 55.666666666666664
   232 op lessThan *tmp58 :ballX 122.33333333333333
 
   241 label *label119
   242 label *label120
   243 label *label121
-    * op add :brickPtr :brickPtr 1
+  244 op add :brickPtr 4 1
   245 label *label122
   246 label *label123
-    * read *tmp41 BRICKS :brickPtr
+  247 read *tmp41 BRICKS 5
   248 jump *label128 equal *tmp41 false
-    * draw rect 118.33333333333333 :y 57.666666666666664 9
+  249 draw rect 118.33333333333333 116 57.666666666666664 9
   250 op greaterThan *tmp43 :ballXEnd 118.33333333333333
   251 op lessThan *tmp45 :ballX 177
   252 op land *tmp46 *tmp43 *tmp45
-    * op greaterThan *tmp47 :ballYEnd :y
+  253 op greaterThan *tmp47 :ballYEnd 116
   254 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 :y 10
-    * op lessThan *tmp50 :ballY *tmp49
+  255 op add *tmp49 116 10
+  256 op lessThan *tmp50 :ballY 126
   257 op land *tmp51 *tmp48 *tmp50
   258 jump *label126 equal *tmp51 false
-    * write 0 BRICKS :brickPtr
+  259 write 0 BRICKS 5
   260 op sub :brickCount :brickCount 1
   261 op greaterThan *tmp56 :ballX 114.33333333333333
   262 op lessThan *tmp58 :ballX 181
 
   271 label *label127
   272 label *label128
   273 label *label129
-    * op add :brickPtr :brickPtr 1
+  274 op add :brickPtr 5 1
   275 label *label130
   276 label *label131
   277 label *label132
-    * op sub :y :y 10
+  278 op sub :y 116 10
   279 label *label23
   280 op lessThan *tmp61 :ballY 0
   281 op equal *tmp62 :brickCount 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-16 instructions):
 
    83 op sub :paddleWidth :paddleWidth 1
    84 label *label19
    85 label *label20
-    * set :brickPtr 0
-    * set :y 126
    86 label *label76
    87 label *label77
    88 label *label78
 
    95 op land *tmp46 *tmp43 *tmp45
    96 op greaterThan *tmp47 :ballYEnd 126
    97 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 126 10
    98 op lessThan *tmp50 :ballY 136
    99 op land *tmp51 *tmp48 *tmp50
   100 jump *label82 equal *tmp51 false
 
   113 label *label83
   114 label *label84
   115 label *label85
-    * op add :brickPtr 0 1
   116 label *label86
   117 label *label87
   118 read *tmp41 BRICKS 1
 
   123 op land *tmp46 *tmp43 *tmp45
   124 op greaterThan *tmp47 :ballYEnd 126
   125 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 126 10
   126 op lessThan *tmp50 :ballY 136
   127 op land *tmp51 *tmp48 *tmp50
   128 jump *label90 equal *tmp51 false
 
   141 label *label91
   142 label *label92
   143 label *label93
-    * op add :brickPtr 1 1
   144 label *label94
   145 label *label95
   146 read *tmp41 BRICKS 2
 
   151 op land *tmp46 *tmp43 *tmp45
   152 op greaterThan *tmp47 :ballYEnd 126
   153 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 126 10
   154 op lessThan *tmp50 :ballY 136
   155 op land *tmp51 *tmp48 *tmp50
   156 jump *label98 equal *tmp51 false
 
   169 label *label99
   170 label *label100
   171 label *label101
-    * op add :brickPtr 2 1
   172 label *label102
   173 label *label103
   174 label *label104
-    * op sub :y 126 10
   175 label *label105
   176 label *label106
   177 label *label107
 
   183 op land *tmp46 *tmp43 *tmp45
   184 op greaterThan *tmp47 :ballYEnd 116
   185 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 116 10
   186 op lessThan *tmp50 :ballY 126
   187 op land *tmp51 *tmp48 *tmp50
   188 jump *label110 equal *tmp51 false
 
   201 label *label111
   202 label *label112
   203 label *label113
-    * op add :brickPtr 3 1
   204 label *label114
   205 label *label115
   206 read *tmp41 BRICKS 4
 
   211 op land *tmp46 *tmp43 *tmp45
   212 op greaterThan *tmp47 :ballYEnd 116
   213 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 116 10
   214 op lessThan *tmp50 :ballY 126
   215 op land *tmp51 *tmp48 *tmp50
   216 jump *label118 equal *tmp51 false
 
   229 label *label119
   230 label *label120
   231 label *label121
-    * op add :brickPtr 4 1
   232 label *label122
   233 label *label123
   234 read *tmp41 BRICKS 5
 
   239 op land *tmp46 *tmp43 *tmp45
   240 op greaterThan *tmp47 :ballYEnd 116
   241 op land *tmp48 *tmp46 *tmp47
-    * op add *tmp49 116 10
   242 op lessThan *tmp50 :ballY 126
   243 op land *tmp51 *tmp48 *tmp50
   244 jump *label126 equal *tmp51 false
 
   257 label *label127
   258 label *label128
   259 label *label129
-    * op add :brickPtr 5 1
   260 label *label130
   261 label *label131
   262 label *label132
-    * op sub :y 116 10
   263 label *label23
   264 op lessThan *tmp61 :ballY 0
   265 op equal *tmp62 :brickCount 0

Modifications by Final phase, Jump Straightening, iteration 1 (-1 instructions):
 
   264 op lessThan *tmp61 :ballY 0
   265 op equal *tmp62 :brickCount 0
   266 op or *tmp64 *tmp61 *tmp62
-    * jump *label33 equal *tmp64 false
-    * jump *label8 always
+  267 jump *label8 notEqual *tmp64 false
   268 label *label33
   269 label *label34
   270 drawflush DISPLAY

Modifications by Final phase, Jump Threading, iteration 1:
 
    38 sensor *tmp8 PADDLECONTROLLER @enabled
    39 jump *label9 equal *tmp8 false
    40 op sub *tmp10 176 :paddleWidth
-    * jump *label11 greaterThanEq :paddleX *tmp10
+   41 jump *label10 greaterThanEq :paddleX *tmp10
    42 op add :paddleX :paddleX 3
    43 label *label11
    44 label *label12
 
   264 op lessThan *tmp61 :ballY 0
   265 op equal *tmp62 :brickCount 0
   266 op or *tmp64 *tmp61 *tmp62
-    * jump *label8 notEqual *tmp64 false
+  267 jump *label0 notEqual *tmp64 false
   268 label *label33
   269 label *label34
   270 drawflush DISPLAY

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-2 instructions):
 
   270 drawflush DISPLAY
   271 label *label7
   272 jump *label6 always
-    * label *label8
-    * label *label1
-    * jump *label0 always
-    * label *label2
-    * end

Final code before resolving virtual instructions:

    0:  set BRICKS bank1                                             param BRICKS = bank1;
    1:  set DISPLAY display1                                         param DISPLAY = display1;
    2:  set PADDLECONTROLLER switch1                                 param PADDLECONTROLLER = switch1;
    3:  draw color 255 255 255 255 0 0                               color(255, 255, 255, 255);
        label *label0                                                while true do
    4:  set :paddleWidth 40                                          paddleWidth = 40;
    5:  op sub :paddleX 88 20                                        paddleX = size / 2 - paddleWidth / 2;
    6:  set :ballX 88                                                ballX = size / 2;
    7:  set :ballY 88                                                ballY = size / 2;
    8:  op rand *tmp2 10 0                                           ballVX = rand(ballMaxStartSpeed * 2) - ballMaxStartSpeed;
    9:  op sub :ballVX *tmp2 5                                       ...
   10:  op rand *tmp4 10 0                                           ballVY = rand(ballMaxStartSpeed * 2) - ballMaxStartSpeed;
   11:  op sub :ballVY *tmp4 5                                       ...
   12:  set :brickCount 6                                            brickCount = brickTotal;
   13:  write 1 BRICKS 0                                             BRICKS[i] = 1;
   14:  write 1 BRICKS 1                                             ...
   15:  write 1 BRICKS 2                                             ...
   16:  write 1 BRICKS 3                                             ...
   17:  write 1 BRICKS 4                                             ...
   18:  write 1 BRICKS 5                                             ...
        label *label6                                                while true do
   19:  draw clear 0 0 0 0 0 0                                       clear(0, 0, 0);
   20:  draw rect :paddleX 10 :paddleWidth 5 0 0                     rect(paddleX, paddleY, paddleWidth, paddleHeight);
   21:  draw rect :ballX :ballY 5 5 0 0                              rect(ballX, ballY, ballSize, ballSize);
   22:  sensor *tmp8 PADDLECONTROLLER @enabled                       if PADDLECONTROLLER.@enabled then
   23:  jump *label9 equal *tmp8 false                               ...
   24:  op sub *tmp10 176 :paddleWidth                               if paddleX < size - paddleWidth then
   25:  jump *label10 greaterThanEq :paddleX *tmp10                  ...
   26:  op add :paddleX :paddleX 3                                   paddleX += paddleSpeed;
   27:  jump *label10 always 0 0                                     if PADDLECONTROLLER.@enabled then
        label *label9                                                ...
   28:  jump *label13 lessThanEq :paddleX 0                          elsif paddleX > 0 then
   29:  op sub :paddleX :paddleX 3                                   paddleX -= paddleSpeed;
        label *label13                                               elsif paddleX > 0 then
        label *label10                                               if PADDLECONTROLLER.@enabled then
   30:  op add :ballX :ballX :ballVX                                 ballX += ballVX;
   31:  op add :ballY :ballY :ballVY                                 ballY += ballVY;
   32:  op add :ballXEnd :ballX 5                                    ballXEnd = ballX + ballSize;
   33:  op add :ballYEnd :ballY 5                                    ballYEnd = ballY + ballSize;
   34:  op lessThan *tmp17 :ballX 0                                  if ballX < 0 || ballXEnd > size then
   35:  op greaterThan *tmp18 :ballXEnd 176                          ...
   36:  op or *tmp20 *tmp17 *tmp18                                   ...
   37:  jump *label15 equal *tmp20 false                             ...
   38:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label15                                               if ballX < 0 || ballXEnd > size then
   39:  jump *label17 lessThanEq :ballYEnd 176                       if ballYEnd > size then
   40:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
        label *label17                                               if ballYEnd > size then
   41:  op greaterThan *tmp24 :ballXEnd :paddleX                     if ballXEnd > paddleX && ballX < paddleX + paddleWidth && ballYEnd > paddleY && ballY < paddleY + paddleHeight then
   42:  op add *tmp25 :paddleX :paddleWidth                          ...
   43:  op lessThan *tmp26 :ballX *tmp25                             ...
   44:  op land *tmp27 *tmp24 *tmp26                                 ...
   45:  op greaterThan *tmp28 :ballYEnd 10                           ...
   46:  op land *tmp29 *tmp27 *tmp28                                 ...
   47:  op lessThan *tmp30 :ballY 15                                 ...
   48:  op land *tmp31 *tmp29 *tmp30                                 ...
   49:  jump *label19 equal *tmp31 false                             ...
   50:  op mul :ballVY :ballVY -1.1                                  ballVY *= -1.1;
   51:  op add *tmp33 :ballX 2.5                                     ballVX += (ballX + ballSize / 2 - paddleX + paddleWidth / 2) / 10;
   52:  op sub *tmp34 *tmp33 :paddleX                                ...
   53:  op div *tmp35 :paddleWidth 2                                 ...
   54:  op add *tmp36 *tmp34 *tmp35                                  ...
   55:  op div *tmp37 *tmp36 10                                      ...
   56:  op add :ballVX :ballVX *tmp37                                ...
   57:  op sub :paddleWidth :paddleWidth 1                           paddleWidth -= 1;
        label *label19                                               if ballXEnd > paddleX && ballX < paddleX + paddleWidth && ballYEnd > paddleY && ballY < paddleY + paddleHeight then
   58:  read *tmp41 BRICKS 0                                         if BRICKS[brickPtr] then
   59:  jump *label84 equal *tmp41 false                             ...
   60:  draw rect 1 126 57.666666666666664 9 0 0                     rect(x, y, brickWidth - 1, brickHeight - 1);
   61:  op greaterThan *tmp43 :ballXEnd 1                            ballXEnd > x &&
   62:  op lessThan *tmp45 :ballX 59.666666666666664                 ballX < x + brickWidth &&
   63:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
   64:  op greaterThan *tmp47 :ballYEnd 126                          ballYEnd > y &&
   65:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
   66:  op lessThan *tmp50 :ballY 136                                ballY < y + brickHeight
   67:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
   68:  jump *label82 equal *tmp51 false                             if
   69:  write 0 BRICKS 0                                             BRICKS[brickPtr] = 0;
   70:  op sub :brickCount :brickCount 1                             brickCount -= 1;
   71:  op greaterThan *tmp56 :ballX -3                              ballX > x - ballSizeMinus1 &&
   72:  op lessThan *tmp58 :ballX 63.666666666666664                 ballX < x + brickWidthPlusBallSizeMinus1
   73:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
   74:  jump *label80 equal *tmp59 false                             if
   75:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
   76:  jump *label81 always 0 0                                     if
        label *label80                                               ...
   77:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label81                                               if
        label *label82                                               if
        label *label84                                               if BRICKS[brickPtr] then
   78:  read *tmp41 BRICKS 1                                         ...
   79:  jump *label92 equal *tmp41 false                             ...
   80:  draw rect 59.666666666666664 126 57.666666666666664 9 0 0    rect(x, y, brickWidth - 1, brickHeight - 1);
   81:  op greaterThan *tmp43 :ballXEnd 59.666666666666664           ballXEnd > x &&
   82:  op lessThan *tmp45 :ballX 118.33333333333333                 ballX < x + brickWidth &&
   83:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
   84:  op greaterThan *tmp47 :ballYEnd 126                          ballYEnd > y &&
   85:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
   86:  op lessThan *tmp50 :ballY 136                                ballY < y + brickHeight
   87:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
   88:  jump *label90 equal *tmp51 false                             if
   89:  write 0 BRICKS 1                                             BRICKS[brickPtr] = 0;
   90:  op sub :brickCount :brickCount 1                             brickCount -= 1;
   91:  op greaterThan *tmp56 :ballX 55.666666666666664              ballX > x - ballSizeMinus1 &&
   92:  op lessThan *tmp58 :ballX 122.33333333333333                 ballX < x + brickWidthPlusBallSizeMinus1
   93:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
   94:  jump *label88 equal *tmp59 false                             if
   95:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
   96:  jump *label89 always 0 0                                     if
        label *label88                                               ...
   97:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label89                                               if
        label *label90                                               if
        label *label92                                               if BRICKS[brickPtr] then
   98:  read *tmp41 BRICKS 2                                         ...
   99:  jump *label100 equal *tmp41 false                            ...
  100:  draw rect 118.33333333333333 126 57.666666666666664 9 0 0    rect(x, y, brickWidth - 1, brickHeight - 1);
  101:  op greaterThan *tmp43 :ballXEnd 118.33333333333333           ballXEnd > x &&
  102:  op lessThan *tmp45 :ballX 177                                ballX < x + brickWidth &&
  103:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
  104:  op greaterThan *tmp47 :ballYEnd 126                          ballYEnd > y &&
  105:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
  106:  op lessThan *tmp50 :ballY 136                                ballY < y + brickHeight
  107:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
  108:  jump *label98 equal *tmp51 false                             if
  109:  write 0 BRICKS 2                                             BRICKS[brickPtr] = 0;
  110:  op sub :brickCount :brickCount 1                             brickCount -= 1;
  111:  op greaterThan *tmp56 :ballX 114.33333333333333              ballX > x - ballSizeMinus1 &&
  112:  op lessThan *tmp58 :ballX 181                                ballX < x + brickWidthPlusBallSizeMinus1
  113:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
  114:  jump *label96 equal *tmp59 false                             if
  115:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
  116:  jump *label97 always 0 0                                     if
        label *label96                                               ...
  117:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label97                                               if
        label *label98                                               if
        label *label100                                              if BRICKS[brickPtr] then
  118:  read *tmp41 BRICKS 3                                         ...
  119:  jump *label112 equal *tmp41 false                            ...
  120:  draw rect 1 116 57.666666666666664 9 0 0                     rect(x, y, brickWidth - 1, brickHeight - 1);
  121:  op greaterThan *tmp43 :ballXEnd 1                            ballXEnd > x &&
  122:  op lessThan *tmp45 :ballX 59.666666666666664                 ballX < x + brickWidth &&
  123:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
  124:  op greaterThan *tmp47 :ballYEnd 116                          ballYEnd > y &&
  125:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
  126:  op lessThan *tmp50 :ballY 126                                ballY < y + brickHeight
  127:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
  128:  jump *label110 equal *tmp51 false                            if
  129:  write 0 BRICKS 3                                             BRICKS[brickPtr] = 0;
  130:  op sub :brickCount :brickCount 1                             brickCount -= 1;
  131:  op greaterThan *tmp56 :ballX -3                              ballX > x - ballSizeMinus1 &&
  132:  op lessThan *tmp58 :ballX 63.666666666666664                 ballX < x + brickWidthPlusBallSizeMinus1
  133:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
  134:  jump *label108 equal *tmp59 false                            if
  135:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
  136:  jump *label109 always 0 0                                    if
        label *label108                                              ...
  137:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label109                                              if
        label *label110                                              if
        label *label112                                              if BRICKS[brickPtr] then
  138:  read *tmp41 BRICKS 4                                         ...
  139:  jump *label120 equal *tmp41 false                            ...
  140:  draw rect 59.666666666666664 116 57.666666666666664 9 0 0    rect(x, y, brickWidth - 1, brickHeight - 1);
  141:  op greaterThan *tmp43 :ballXEnd 59.666666666666664           ballXEnd > x &&
  142:  op lessThan *tmp45 :ballX 118.33333333333333                 ballX < x + brickWidth &&
  143:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
  144:  op greaterThan *tmp47 :ballYEnd 116                          ballYEnd > y &&
  145:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
  146:  op lessThan *tmp50 :ballY 126                                ballY < y + brickHeight
  147:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
  148:  jump *label118 equal *tmp51 false                            if
  149:  write 0 BRICKS 4                                             BRICKS[brickPtr] = 0;
  150:  op sub :brickCount :brickCount 1                             brickCount -= 1;
  151:  op greaterThan *tmp56 :ballX 55.666666666666664              ballX > x - ballSizeMinus1 &&
  152:  op lessThan *tmp58 :ballX 122.33333333333333                 ballX < x + brickWidthPlusBallSizeMinus1
  153:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
  154:  jump *label116 equal *tmp59 false                            if
  155:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
  156:  jump *label117 always 0 0                                    if
        label *label116                                              ...
  157:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label117                                              if
        label *label118                                              if
        label *label120                                              if BRICKS[brickPtr] then
  158:  read *tmp41 BRICKS 5                                         ...
  159:  jump *label128 equal *tmp41 false                            ...
  160:  draw rect 118.33333333333333 116 57.666666666666664 9 0 0    rect(x, y, brickWidth - 1, brickHeight - 1);
  161:  op greaterThan *tmp43 :ballXEnd 118.33333333333333           ballXEnd > x &&
  162:  op lessThan *tmp45 :ballX 177                                ballX < x + brickWidth &&
  163:  op land *tmp46 *tmp43 *tmp45                                 ballXEnd > x &&
  164:  op greaterThan *tmp47 :ballYEnd 116                          ballYEnd > y &&
  165:  op land *tmp48 *tmp46 *tmp47                                 ballX < x + brickWidth &&
  166:  op lessThan *tmp50 :ballY 126                                ballY < y + brickHeight
  167:  op land *tmp51 *tmp48 *tmp50                                 ballYEnd > y &&
  168:  jump *label126 equal *tmp51 false                            if
  169:  write 0 BRICKS 5                                             BRICKS[brickPtr] = 0;
  170:  op sub :brickCount :brickCount 1                             brickCount -= 1;
  171:  op greaterThan *tmp56 :ballX 114.33333333333333              ballX > x - ballSizeMinus1 &&
  172:  op lessThan *tmp58 :ballX 181                                ballX < x + brickWidthPlusBallSizeMinus1
  173:  op land *tmp59 *tmp56 *tmp58                                 ballX > x - ballSizeMinus1 &&
  174:  jump *label124 equal *tmp59 false                            if
  175:  op mul :ballVY :ballVY -1                                    ballVY *= -1;
  176:  jump *label125 always 0 0                                    if
        label *label124                                              ...
  177:  op mul :ballVX :ballVX -1                                    ballVX *= -1;
        label *label125                                              if
        label *label126                                              if
        label *label128                                              if BRICKS[brickPtr] then
  178:  op lessThan *tmp61 :ballY 0                                  if ballY < 0 || brickCount == 0 then
  179:  op equal *tmp62 :brickCount 0                                ...
  180:  op or *tmp64 *tmp61 *tmp62                                   ...
  181:  jump *label0 notEqual *tmp64 false                           ...
  182:  drawflush DISPLAY                                            drawflush(DISPLAY);
  183:  jump *label6 always 0 0                                      while true do


Performance: parsed in 150 ms, compiled in 182 ms, optimized in 399 ms, run in 10 ms.

Compiled mlog code was sent to Mlog Watcher.
  No response from Mlog Watcher - maybe an old version is installed?

Program output (23 steps):
The program didn't generate any output.
Execution exception at instruction 22: sensor *tmp8 PADDLECONTROLLER @enabled:
Instruction not supported by Mindcode emulator.
(Use the '#set err-unsupported-opcode = false;' directive or the '--err-unsupported-opcode false' command line option to ignore this exception.)
