# Mlog code compiled with support for symbolic labels
# You can safely add/remove instructions, in most parts of the program
# Pay closer attention to sections of the program manipulating @counter
    set x @thisx
    set y @thisy
    set :i 0
    label_3:
        lookup unit :type :i
        ubind :type
        jump label_25 equal @unit null
        sensor *tmp3 @unit @controlled
        jump label_10 equal *tmp3 false
            sensor *tmp5 @unit @controller
            jump label_25 notEqual *tmp5 @this
        # Function: def inRadius(in x, in y, in radius)
        label_10:
        sensor *tmp9 @unit @x
        op sub *tmp10 x *tmp9
        sensor *tmp11 @unit @y
        op sub *tmp12 y *tmp11
        op len *tmp13 *tmp10 *tmp12
        jump label_20 lessThan *tmp13 8
            ucontrol boost true 0 0 0 0
            ucontrol flag 2435345345 0 0 0 0
            ucontrol pathfind x y 0 0 0
            jump label_25 always 0 0
        label_20:
            sensor *tmp17 @unit @flag
            jump label_25 equal *tmp17 0
                ucontrol boost false 0 0 0 0
                ucontrol flag 0 0 0 0 0
                ucontrol unbind 0 0 0 0 0
    label_25:
    op add :i :i 1
    jump label_3 lessThan :i @unitCount

