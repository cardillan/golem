// Item counter for microprocessor. Can handle 5 plastanium conveyors at once, according to tests at 60 FPS.
// For safety, the limit is set to 4.

//#set target = 8;
#set syntax = strict;

const VERSION = "1.0";
const TITLE = "[gold]Item Counter Micro[], version [gold]" + VERSION + "[]";

// Hard constraint to max. number of conveyors to monitor
// This implementation's speed doesn't depend on number of conveyors linked at runtime
const MAX_LINKED = 4;

noinit linked switch1, message1;
noinit var links;
noinit var found;
noinit var memory;

// Conveyors linked
var conv[MAX_LINKED];

// First and second state
var state1[MAX_LINKED];
var state2[MAX_LINKED];

// The variable is volatile to allow access from processors in version 8
noinit volatile total;
noinit var totalIndex;

void initialize()
    while true do
        for var out c in conv do c = null; end;

        memory = null;
        found = 0;
        links = @links;
        for var n in 0 ... links descending do
            var block = getlink(n);
            case block.@type
                when @memory-cell, @memory-bank then
                    memory = block;
                when @plastanium-conveyor then
                    conv[1 ... MAX_LINKED] = conv[0 ... MAX_LINKED - 1];
                    conv[0] = block;
                    found++;
            end;
        end;

        if found == 0 then
            print($"$TITLE\n[salmon]No plastanium conveyor attached (maximum: $MAX_LINKED, found: $found)");
            printflush(message1);
        elsif found > MAX_LINKED then
            print($"$TITLE\n[salmon]Too many plastanium conveyors attached (maximum: $MAX_LINKED, found: $found)");
            printflush(message1);
        elsif memory == null then
            print("$TITLE\n[salmon]No memory attached.");
            printflush(message1);
        else
            totalIndex = memory.@type == @memory-cell ? 63 : 511;
            total = memory[totalIndex];
            break;
        end;
    end;
end;

begin
    initialize();

    switch1.enabled = false;

    do
        var start = @time;
        for var i in 0 ... MAX_LINKED do
            state1[i] = conv[i].@totalItems;
            if state1[i] < state2[i] then
                total += 10;
            end;
        end;

        memory[totalIndex] = total;

        println($"$TITLE            ");
        println($"Monitoring [green]$found[] conveyors");
        println($"Total items: [gold]$total[]");

        for var i in 0 ... MAX_LINKED do
            state2[i] = conv[i].@totalItems;
            if state2[i] < state1[i] then
                total += 10;
            end;
        end;

        println($"[lightgray]Loop time: $ ms", floor((@time - start) / 2));
        printflush(message1);

        if links != @links then
            // Change in linked blocks: reinitialize
            end();
        end;
    while !switch1.@enabled;

    total = 0;
    memory[totalIndex] = 0;
end;
