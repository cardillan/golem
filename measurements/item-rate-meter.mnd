// Item counter for logic processor. Can handle 20 plastanium conveyors at once.
// For safety, the limit is set to 16.

//#set target = 8;
#set syntax = strict;

const VERSION = "1.0";
const TITLE = "[gold]Item Rate Meter[], version [gold]" + VERSION + "[]";

require "item-rate-meter-init.mnd";

param MEASUREMENT = 15;         // Measurement interval in ticks
param UPDATE = 60;              // Update interval in ticks
param SMOOTHING = 20;           // Size of averaging window

begin
    init();

    // Clearing up cache
    cacheSize = min(SMOOTHING, cacheSize);
    for var i in 0 ... cacheSize do primaryMem[i] = 0; end;
    var cacheHead = 0;
    var samples = 0;

    var head = max(bufferStart, secondaryMem[headIndex]);
    var total = 0;
    var iteration = 0;

    switch.enabled = false;
    var prevTick;
    var nextTick = @tick;
    var prev = primaryMem[totalIndex];
    var minWaits = 1e10;

    var first = true;

MainLoop:
    do
        prevTick = nextTick;
        nextTick += MEASUREMENT;
        if @tick > nextTick + MEASUREMENT then
            // @tick has jumped too far to the future, reset it
            // Either the processor lags, or there was map reload
            nextTick = @tick + MEASUREMENT;
            prev = primaryMem[totalIndex];
        end;

        var waits = 0;
        while @tick < nextTick do
            if @tick < prevTick then
                // Ticks can decrease after a map reload.
                // Restart everything to prevent getting stuck in a long loop
                break MainLoop;
            end;

            // Wait till next tick, save execution quota
            waits++;
            wait(1e-15);
        end;
        minWaits = min(waits, minWaits);

        var curr = primaryMem[totalIndex];
        var amount = curr - prev;
        prev = curr;

        // Update total: subtract oldest value, add newest value
        total = total - primaryMem[cacheHead] + amount;
        primaryMem[cacheHead] = amount;
        cacheHead = (cacheHead + 1) % cacheSize;

        // Update samples
        if samples < cacheSize then samples++; end;

        iteration += MEASUREMENT;
        if iteration >= UPDATE then
            var rate = total / samples / MEASUREMENT;   // items per tick
            if ++head >= bufferEnd then
                head = bufferStart;
            end;

            if first then
                secondaryMem[minIndex] = rate;
                secondaryMem[maxIndex] = rate;
                first = false;
            end;

            primaryMem[valueIndex] = rate;
            secondaryMem[headIndex] = head;
            secondaryMem[head] = rate;

            var min = min(secondaryMem[minIndex], rate);
            secondaryMem[minIndex] = min;
            var max = max(secondaryMem[maxIndex], rate);
            secondaryMem[maxIndex] = max;

            println($"$TITLE            ");
            if samples < cacheSize then
                println($"[salmon]Initializing...[]");
            end;
            println($"Total items: [gold]$curr[]");
            println($"Current rate: [green]$[]/min", floor(rate * 3600));
            println($"Minimum: [gold]$[]/min", floor(min * 3600));
            println($"Maximum: [gold]$[]/min", floor(max * 3600));
            println($"Smoothing: $cacheSize");
            print($"[lightgray]Waits: $minWaits");
            minWaits = 1e10;
            printflush(message);
            iteration -= UPDATE;
        end;
    while !switch.@enabled;
end;
