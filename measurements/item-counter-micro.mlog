set .conv*0 null
set .conv*1 null
set .conv*2 null
set .conv*3 null
set .memory null
set .found 0
set .links @links
op sub :initialize.0:n .links 1
jump 23 lessThan :initialize.0:n 0
getlink :initialize.0:block :initialize.0:n
sensor *tmp4 :initialize.0:block @type
jump 13 equal *tmp4 @memory-cell
jump 15 notEqual *tmp4 @memory-bank
set .memory :initialize.0:block
jump 21 always 0 0
jump 21 notEqual *tmp4 @plastanium-conveyor
set .conv*3 .conv*2
set .conv*2 .conv*1
set .conv*1 .conv*0
set .conv*0 :initialize.0:block
op add .found .found 1
op sub :initialize.0:n :initialize.0:n 1
jump 9 greaterThanEq :initialize.0:n 0
jump 29 notEqual .found 0
print "[gold]Item Counter Micro[], version [gold]1.0[]\n[salmon]No plastanium conveyor attached (maximum: 4, found: "
print .found
print ")"
printflush message1
jump 0 always 0 0
jump 35 lessThanEq .found 4
print "[gold]Item Counter Micro[], version [gold]1.0[]\n[salmon]Too many plastanium conveyors attached (maximum: 4, found: "
print .found
print ")"
printflush message1
jump 0 always 0 0
jump 39 notEqual .memory null
print "$TITLE\n[salmon]No memory attached."
printflush message1
jump 0 always 0 0
set *tmp15 511
sensor *tmp13 .memory @type
jump 43 notEqual *tmp13 @memory-cell
set *tmp15 63
set .totalIndex *tmp15
read .total .memory *tmp15
control enabled switch1 false 0 0 0
set :start @time
sensor .state1*0 .conv*0 @totalItems
jump 50 greaterThanEq .state1*0 .state2*0
op add .total .total 10
sensor .state1*1 .conv*1 @totalItems
jump 53 greaterThanEq .state1*1 .state2*1
op add .total .total 10
sensor .state1*2 .conv*2 @totalItems
jump 56 greaterThanEq .state1*2 .state2*2
op add .total .total 10
sensor .state1*3 .conv*3 @totalItems
jump 59 greaterThanEq .state1*3 .state2*3
op add .total .total 10
write .total .memory .totalIndex
print "[gold]Item Counter Micro[], version [gold]1.0[]            \nMonitoring [green]"
print .found
print "[] conveyors\nTotal items: [gold]"
print .total
print "[]\n"
sensor .state2*0 .conv*0 @totalItems
jump 68 greaterThanEq .state2*0 .state1*0
op add .total .total 10
sensor .state2*1 .conv*1 @totalItems
jump 71 greaterThanEq .state2*1 .state1*1
op add .total .total 10
sensor .state2*2 .conv*2 @totalItems
jump 74 greaterThanEq .state2*2 .state1*2
op add .total .total 10
sensor .state2*3 .conv*3 @totalItems
jump 77 greaterThanEq .state2*3 .state1*3
op add .total .total 10
op sub *tmp46 @time :start
op idiv *tmp48 *tmp46 2
print "[lightgray]Loop time: "
print *tmp48
print " ms\n"
printflush message1
jump 85 equal .links @links
end
sensor *tmp51 switch1 @enabled
jump 46 equal *tmp51 false
set .total 0
write 0 .memory .totalIndex

