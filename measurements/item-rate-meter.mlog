set MEASUREMENT 15
set UPDATE 60
set SMOOTHING 20
set .switch null
set .message null
set .primaryMem null
set .secondaryMem null
print "[gold]Item Rate Meter[], version [gold]1.0[]\n[salmon]Initializing...[]\n"
op sub :init.0:n @links 1
jump 27 lessThan :init.0:n 0
getlink :init.0:block :init.0:n
print "Found: "
print :init.0:block
print "\n"
sensor *tmp2 :init.0:block @type
jump 18 notEqual *tmp2 @message
set .message :init.0:block
jump 25 always 0 0
jump 21 notEqual *tmp2 @switch
set .switch :init.0:block
jump 25 always 0 0
jump 23 equal *tmp2 @memory-bank
jump 25 notEqual *tmp2 @memory-cell
set .primaryMem .secondaryMem
set .secondaryMem :init.0:block
op sub :init.0:n :init.0:n 1
jump 10 greaterThanEq :init.0:n 0
print "Message: "
print .message
print "\nSwitch: "
print .switch
print "\nSource memory: "
print .primaryMem
print "\nTarget memory: "
print .secondaryMem
print "\n"
jump 38 notEqual .primaryMem null
print "No memory.\n"
printflush .message
jump 3 equal .secondaryMem null
jump 61 notEqual .primaryMem null
set .primaryMem .secondaryMem
sensor *tmp107 .secondaryMem @type
jump 46 notEqual *tmp107 @memory-cell
set *tmp106 64
jump 50 always 0 0
jump 49 notEqual *tmp107 @memory-bank
set *tmp106 512
jump 50 always 0 0
set *tmp106 null
set .cacheSize 50
set .bufferStart 50
op sub .bufferEnd *tmp106 7
op sub .bufferStartIndex *tmp106 7
op sub .bufferEndIndex *tmp106 6
op sub .headIndex *tmp106 5
op sub .minIndex *tmp106 4
op sub .maxIndex *tmp106 3
op sub .valueIndex *tmp106 2
op sub .totalIndex *tmp106 1
jump 87 always 0 0
sensor *tmp107 .primaryMem @type
jump 65 notEqual *tmp107 @memory-cell
set :init.0:primarySize 64
jump 69 always 0 0
jump 68 notEqual *tmp107 @memory-bank
set :init.0:primarySize 512
jump 69 always 0 0
set :init.0:primarySize null
sensor *tmp107 .secondaryMem @type
jump 73 notEqual *tmp107 @memory-cell
set *tmp106 64
jump 77 always 0 0
jump 76 notEqual *tmp107 @memory-bank
set *tmp106 512
jump 77 always 0 0
set *tmp106 null
op sub .cacheSize :init.0:primarySize 2
op sub .valueIndex :init.0:primarySize 2
op sub .totalIndex :init.0:primarySize 1
set .bufferStart 0
op sub .bufferEnd *tmp106 8
op sub .bufferStartIndex *tmp106 7
op sub .bufferEndIndex *tmp106 6
op sub .headIndex *tmp106 5
op sub .minIndex *tmp106 4
op sub .maxIndex *tmp106 3
write .bufferStart .secondaryMem .bufferStartIndex
write .bufferEnd .secondaryMem .bufferEndIndex
op min .cacheSize SMOOTHING .cacheSize
set :i 0
jump 95 greaterThanEq 0 .cacheSize
write 0 .primaryMem :i
op add :i :i 1
jump 92 lessThan :i .cacheSize
set :cacheHead 0
set :samples 0
read *tmp38 .secondaryMem .headIndex
op max :head .bufferStart *tmp38
set :total 0
set :iteration 0
control enabled .switch false 0 0 0
set :nextTick @tick
read :prev .primaryMem .totalIndex
set :minWaits 10000000000
set :first true
set :prevTick :nextTick
op add :nextTick :nextTick MEASUREMENT
op add *tmp44 :nextTick MEASUREMENT
jump 112 lessThanEq @tick *tmp44
op add :nextTick @tick MEASUREMENT
read :prev .primaryMem .totalIndex
set :waits 0
jump 118 greaterThanEq @tick :nextTick
jump 0 lessThan @tick :prevTick
op add :waits :waits 1
wait 0.000000000000001
jump 114 lessThan @tick :nextTick
op min :minWaits :waits :minWaits
read :curr .primaryMem .totalIndex
op sub :amount :curr :prev
set :prev :curr
read *tmp59 .primaryMem :cacheHead
op sub *tmp60 :total *tmp59
op add :total *tmp60 :amount
write :amount .primaryMem :cacheHead
op add *tmp64 :cacheHead 1
op mod :cacheHead *tmp64 .cacheSize
jump 130 greaterThanEq :samples .cacheSize
op add :samples :samples 1
op add :iteration :iteration MEASUREMENT
jump 171 lessThan :iteration UPDATE
op div *tmp71 :total :samples
op div :rate *tmp71 MEASUREMENT
op add :head :head 1
jump 137 lessThan :head .bufferEnd
set :head .bufferStart
jump 141 equal :first false
write :rate .secondaryMem .minIndex
write :rate .secondaryMem .maxIndex
set :first false
write :rate .primaryMem .valueIndex
write :head .secondaryMem .headIndex
write :rate .secondaryMem :head
read *tmp87 .secondaryMem .minIndex
op min :min *tmp87 :rate
write :min .secondaryMem .minIndex
read *tmp92 .secondaryMem .maxIndex
op max :max *tmp92 :rate
write :max .secondaryMem .maxIndex
print "[gold]Item Rate Meter[], version [gold]1.0[]            \n"
jump 153 greaterThanEq :samples .cacheSize
print "[salmon]Initializing...[]\n"
print "Total items: [gold]"
print :curr
op idiv *tmp99 :rate 0.0002777777777777778
print "[]\nCurrent rate: [green]"
print *tmp99
op idiv *tmp101 :min 0.0002777777777777778
print "[]/min\nMinimum: [gold]"
print *tmp101
op idiv *tmp103 :max 0.0002777777777777778
print "[]/min\nMaximum: [gold]"
print *tmp103
print "[]/min\nSmoothing: "
print .cacheSize
print "\n[lightgray]Waits: "
print :minWaits
set :minWaits 10000000000
printflush .message
op sub :iteration :iteration UPDATE
sensor *tmp104 .switch @enabled
jump 106 equal *tmp104 false

