   445 instructions before optimizations.
    11 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
    18 instructions eliminated by Dead Code Elimination (5 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
     9 instructions eliminated by Jump Optimization (5 iterations).
     7 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
   385 instructions eliminated by Expression Optimization (2 passes, 4 iterations).
     1 instructions modified by If Expression Optimization (4 iterations).
   186 instructions eliminated by Data Flow Optimization (4 passes, 16 iterations).
     2 instructions eliminated by Loop Optimization (4 iterations).
     3 loops improved by Loop Optimization.
   566 instructions added by Loop Unrolling (7 iterations).
     3 loops unrolled by Loop Unrolling.
     2 instructions eliminated by Jump Straightening (5 iterations).
     3 instructions updated by JumpThreading.
     1 instructions eliminated by Unreachable Code Elimination.
    21 instructions eliminated by Print Merging.
   207 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 629):
  * Unroll iteration loop at line 32:9                           cost     0, benefit     1975.0, efficiency   Infinity (-32 instructions)
    Unroll loop at line 74:9                                     cost    90, benefit    20000.0, efficiency      222.2
    Unroll loop at line 87:9                                     cost    90, benefit    20000.0, efficiency      222.2

Pass 1: speed optimization selection (cost limit 661):
  * Unroll loop at line 74:9                                     cost    90, benefit    20000.0, efficiency      222.2 (+282 instructions)
    Unroll loop at line 87:9                                     cost    90, benefit    20000.0, efficiency      222.2

Pass 1: speed optimization selection (cost limit 379):
  * Unroll loop at line 87:9                                     cost    90, benefit    20000.0, efficiency      222.2 (+282 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    93 getlink *tmp2 :initialize.0:n
    94 set :initialize.0:block *tmp2
    95 sensor *tmp4 :initialize.0:block @type
-    * set *tmp5 *tmp4
-    * jump *label28 equal *tmp5 @memory-cell
-    * jump *label28 equal *tmp5 @memory-bank
+   96 jump *label28 equal *tmp4 @memory-cell
+   97 jump *label28 equal *tmp4 @memory-bank
    98 jump *label27 always
    99 label *label28
   100 set .memory :initialize.0:block
   101 set *tmp3 .memory
   102 jump *label26 always
   103 label *label27
-    * jump *label30 equal *tmp5 @plastanium-conveyor
+  104 jump *label30 equal *tmp4 @plastanium-conveyor
   105 jump *label29 always
   106 label *label30
   107 op lessThan *tmp6 .found 16

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-13 instructions):
 
    98 jump *label27 always
    99 label *label28
   100 set .memory :initialize.0:block
-    * set *tmp3 .memory
   101 jump *label26 always
   102 label *label27
   103 jump *label30 equal *tmp4 @plastanium-conveyor
 
   107 jump *label31 equal *tmp6 false
   108 set *tmp8 .found
   109 writearr :initialize.0:block .conv[] *tmp8
-    * set *tmp7 :initialize.0:block
   110 jump *label32 always
   111 label *label31
-    * set *tmp7 null
   112 label *label32
   113 set *tmp10 .found
   114 op add .found .found 1
-    * set *tmp3 *tmp10
   115 jump *label26 always
   116 label *label29
-    * set *tmp3 null
   117 label *label26
   118 label *label24
   119 op sub :initialize.0:n :initialize.0:n 1
 
   130 print .found
   131 print ")"
   132 printflush message1
-    * set *tmp12 null
   133 jump *label34 always
   134 label *label33
   135 op greaterThan *tmp13 .found 16
 
   170 label *label38
   171 set *tmp14 *tmp16
   172 label *label36
-    * set *tmp12 *tmp14
   173 label *label34
   174 label *label2
   175 jump *label1 always
 
   194 jump *label47 equal *tmp32 false
   195 op add *tmp34 .total 10
   196 set .total *tmp34
-    * set *tmp33 *tmp34
   197 jump *label48 always
   198 label *label47
-    * set *tmp33 null
   199 label *label48
   200 label *label45
   201 op add :i :i 1
 
   234 jump *label52 equal *tmp47 false
   235 op add *tmp49 .total 10
   236 set .total *tmp49
-    * set *tmp48 *tmp49
   237 jump *label53 always
   238 label *label52
-    * set *tmp48 null
   239 label *label53
   240 label *label50
   241 op add :i.1 :i.1 1
 
   253 op notEqual *tmp53 .links @links
   254 jump *label54 equal *tmp53 false
   255 end
-    * set *tmp54 null
   256 jump *label55 always
   257 label *label54
-    * set *tmp54 null
   258 label *label55
   259 label *label42
   260 sensor *tmp55 switch1 @enabled

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-3 instructions):
 
   110 jump *label32 always
   111 label *label31
   112 label *label32
-    * set *tmp10 .found
   113 op add .found .found 1
   114 jump *label26 always
   115 label *label29
 
   142 print .found
   143 print ")"
   144 printflush message1
-    * set *tmp14 null
   145 jump *label36 always
   146 label *label35
   147 op equal *tmp15 .memory null
 
   166 jump *label3 always
   167 set *tmp16 null
   168 label *label38
-    * set *tmp14 *tmp16
   169 label *label36
   170 label *label34
   171 label *label2

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   148 jump *label37 equal *tmp15 false
   149 print "$TITLE\n[salmon]No memory attached."
   150 printflush message1
-    * set *tmp16 null
   151 jump *label38 always
   152 label *label37
   153 sensor *tmp17 .memory @type
 
   163 read *tmp21 .memory *tmp20
   164 set .total *tmp21
   165 jump *label3 always
-    * set *tmp16 null
   166 label *label38
   167 label *label36
   168 label *label34

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-11 instructions):
 
    85 label *label6
    86 set .memory null
    87 set .found 0
-    * set *tmp1 @links
-    * set .links *tmp1
+   88 set .links @links
    89 op sub :initialize.0:n .links 1
    90 label *label23
    91 jump *label25 lessThan :initialize.0:n 0
-    * getlink *tmp2 :initialize.0:n
-    * set :initialize.0:block *tmp2
+   92 getlink :initialize.0:block :initialize.0:n
    93 sensor *tmp4 :initialize.0:block @type
    94 jump *label28 equal *tmp4 @memory-cell
    95 jump *label28 equal *tmp4 @memory-bank
 
   103 label *label30
   104 op lessThan *tmp6 .found 16
   105 jump *label31 equal *tmp6 false
-    * set *tmp8 .found
-    * writearr :initialize.0:block .conv[] *tmp8
+  106 writearr :initialize.0:block .conv[] .found
   107 jump *label32 always
   108 label *label31
   109 label *label32
 
   156 set *tmp19 511
   157 label *label40
   158 set .totalIndex *tmp19
-    * set *tmp20 .totalIndex
-    * read *tmp21 .memory *tmp20
-    * set .total *tmp21
+  159 read .total .memory .totalIndex
   160 jump *label3 always
   161 label *label38
   162 label *label36
 
   172 label *label44
   173 jump *label46 greaterThanEq :i 16
   174 set *tmp23 :i
-    * set *tmp25 :i
-    * readarr *tmp26 .conv[] *tmp25
+  175 readarr *tmp26 .conv[] :i
   176 sensor *tmp27 *tmp26 @totalItems
   177 writearr *tmp27 .state1[] *tmp23
   178 set *tmp28 :i
 
   181 readarr *tmp31 .state2[] *tmp30
   182 op lessThan *tmp32 *tmp29 *tmp31
   183 jump *label47 equal *tmp32 false
-    * op add *tmp34 .total 10
-    * set .total *tmp34
+  184 op add .total .total 10
   185 jump *label48 always
   186 label *label47
   187 label *label48
 
   190 jump *label44 always
   191 label *label46
   192 set *tmp35 .totalIndex
-    * set *tmp37 .total
-    * write *tmp37 .memory *tmp35
+  193 write .total .memory *tmp35
   194 print "[gold]Item Counter[], version [gold]1.0[]"
   195 print " "
   196 print "           "
 
   209 label *label49
   210 jump *label51 greaterThanEq :i.1 16
   211 set *tmp38 :i.1
-    * set *tmp40 :i.1
-    * readarr *tmp41 .conv[] *tmp40
+  212 readarr *tmp41 .conv[] :i.1
   213 sensor *tmp42 *tmp41 @totalItems
   214 writearr *tmp42 .state2[] *tmp38
   215 set *tmp43 :i.1
 
   218 readarr *tmp46 .state1[] *tmp45
   219 op lessThan *tmp47 *tmp44 *tmp46
   220 jump *label52 equal *tmp47 false
-    * op add *tmp49 .total 10
-    * set .total *tmp49
+  221 op add .total .total 10
   222 jump *label53 always
   223 label *label52
   224 label *label53
 
   247 jump *label41 notEqual *tmp56 false
   248 label *label43
   249 set .total 0
-    * set *tmp57 .totalIndex
-    * write 0 .memory *tmp57
+  250 write 0 .memory .totalIndex
   251 end

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
     0 label *label1
-    * jump *label3 equal true false
     1 setaddr *tmp0 *label7
     2 set :initialize.0:c .conv*0
     3 jump *label4 always

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-2 instructions):
 
    91 getlink :initialize.0:block :initialize.0:n
    92 sensor *tmp4 :initialize.0:block @type
    93 jump *label28 equal *tmp4 @memory-cell
-    * jump *label28 equal *tmp4 @memory-bank
-    * jump *label27 always
+   94 jump *label27 notEqual *tmp4 @memory-bank
    95 label *label28
    96 set .memory :initialize.0:block
    97 jump *label26 always
    98 label *label27
-    * jump *label30 equal *tmp4 @plastanium-conveyor
-    * jump *label29 always
+   99 jump *label29 notEqual *tmp4 @plastanium-conveyor
   100 label *label30
   101 op lessThan *tmp6 .found 16
   102 jump *label31 equal *tmp6 false

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-9 instructions):
 
    98 label *label27
    99 jump *label29 notEqual *tmp4 @plastanium-conveyor
   100 label *label30
-    * op lessThan *tmp6 .found 16
-    * jump *label31 equal *tmp6 false
+  101 jump *label31 greaterThanEq .found 16
   102 writearr :initialize.0:block .conv[] .found
   103 jump *label32 always
   104 label *label31
 
   111 op sub :initialize.0:n :initialize.0:n 1
   112 jump *label23 always
   113 label *label25
-    * op equal *tmp11 .found 0
-    * jump *label33 equal *tmp11 false
+  114 jump *label33 notEqual .found 0
   115 print "[gold]Item Counter[], version [gold]1.0[]"
   116 print "\"
   117 print "n[salmon]No plastanium conveyor attached (maximum: "
 
   123 printflush message1
   124 jump *label34 always
   125 label *label33
-    * op greaterThan *tmp13 .found 16
-    * jump *label35 equal *tmp13 false
+  126 jump *label35 lessThanEq .found 16
   127 print "[gold]Item Counter[], version [gold]1.0[]"
   128 print "\"
   129 print "n[salmon]Too many plastanium conveyors attached (maximum: "
 
   135 printflush message1
   136 jump *label36 always
   137 label *label35
-    * op equal *tmp15 .memory null
-    * jump *label37 equal *tmp15 false
+  138 jump *label37 notEqual .memory null
   139 print "$TITLE\n[salmon]No memory attached."
   140 printflush message1
   141 jump *label38 always
   142 label *label37
   143 sensor *tmp17 .memory @type
-    * op equal *tmp18 *tmp17 @memory-cell
-    * jump *label39 equal *tmp18 false
+  144 jump *label39 notEqual *tmp17 @memory-cell
   145 set *tmp19 63
   146 jump *label40 always
   147 label *label39
 
   171 set *tmp30 :i
   172 readarr *tmp29 .state1[] *tmp28
   173 readarr *tmp31 .state2[] *tmp30
-    * op lessThan *tmp32 *tmp29 *tmp31
-    * jump *label47 equal *tmp32 false
+  174 jump *label47 greaterThanEq *tmp29 *tmp31
   175 op add .total .total 10
   176 jump *label48 always
   177 label *label47
 
   207 set *tmp45 :i.1
   208 readarr *tmp44 .state2[] *tmp43
   209 readarr *tmp46 .state1[] *tmp45
-    * op lessThan *tmp47 *tmp44 *tmp46
-    * jump *label52 equal *tmp47 false
+  210 jump *label52 greaterThanEq *tmp44 *tmp46
   211 op add .total .total 10
   212 jump *label53 always
   213 label *label52
 
   225 print "ms"
   226 print "\n"
   227 printflush message1
-    * op notEqual *tmp53 .links @links
-    * jump *label54 equal *tmp53 false
+  228 jump *label54 equal .links @links
   229 end
   230 jump *label55 always
   231 label *label54
   232 label *label55
   233 label *label42
   234 sensor *tmp55 switch1 @enabled
-    * op equal *tmp56 *tmp55 false
-    * jump *label41 notEqual *tmp56 false
+  235 jump *label41 equal *tmp55 false
   236 label *label43
   237 set .total 0
   238 write 0 .memory .totalIndex

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-5 instructions):
 
   100 label *label30
   101 jump *label31 greaterThanEq .found 16
   102 writearr :initialize.0:block .conv[] .found
-    * jump *label32 always
   103 label *label31
   104 label *label32
   105 op add .found .found 1
-    * jump *label26 always
   106 label *label29
   107 label *label26
   108 label *label24
 
   171 readarr *tmp31 .state2[] *tmp30
   172 jump *label47 greaterThanEq *tmp29 *tmp31
   173 op add .total .total 10
-    * jump *label48 always
   174 label *label47
   175 label *label48
   176 label *label45
 
   206 readarr *tmp46 .state1[] *tmp45
   207 jump *label52 greaterThanEq *tmp44 *tmp46
   208 op add .total .total 10
-    * jump *label53 always
   209 label *label52
   210 label *label53
   211 label *label50
 
   223 printflush message1
   224 jump *label54 equal .links @links
   225 end
-    * jump *label55 always
   226 label *label54
   227 label *label55
   228 label *label42

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   213 jump *label49 always
   214 label *label51
   215 op sub *tmp50 @time :start
-    * op div *tmp51 *tmp50 2
-    * op floor *tmp52 *tmp51
+  216 op idiv *tmp52 *tmp50 2
   217 print "[lightgray]Loop time: "
   218 print *tmp52
   219 print " "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-16 instructions):
     0 label *label1
     1 setaddr *tmp0 *label7
-    * set :initialize.0:c .conv*0
     2 jump *label4 always
     3 multilabel *label7 marker0
-    * set .conv*0 :initialize.0:c
+    4 set .conv*0 null
     5 setaddr *tmp0 *label8
-    * set :initialize.0:c .conv*1
     6 jump *label4 always
     7 multilabel *label8 marker0
-    * set .conv*1 :initialize.0:c
+    8 set .conv*1 null
     9 setaddr *tmp0 *label9
-    * set :initialize.0:c .conv*2
    10 jump *label4 always
    11 multilabel *label9 marker0
-    * set .conv*2 :initialize.0:c
+   12 set .conv*2 null
    13 setaddr *tmp0 *label10
-    * set :initialize.0:c .conv*3
    14 jump *label4 always
    15 multilabel *label10 marker0
-    * set .conv*3 :initialize.0:c
+   16 set .conv*3 null
    17 setaddr *tmp0 *label11
-    * set :initialize.0:c .conv*4
    18 jump *label4 always
    19 multilabel *label11 marker0
-    * set .conv*4 :initialize.0:c
+   20 set .conv*4 null
    21 setaddr *tmp0 *label12
-    * set :initialize.0:c .conv*5
    22 jump *label4 always
    23 multilabel *label12 marker0
-    * set .conv*5 :initialize.0:c
+   24 set .conv*5 null
    25 setaddr *tmp0 *label13
-    * set :initialize.0:c .conv*6
    26 jump *label4 always
    27 multilabel *label13 marker0
-    * set .conv*6 :initialize.0:c
+   28 set .conv*6 null
    29 setaddr *tmp0 *label14
-    * set :initialize.0:c .conv*7
    30 jump *label4 always
    31 multilabel *label14 marker0
-    * set .conv*7 :initialize.0:c
+   32 set .conv*7 null
    33 setaddr *tmp0 *label15
-    * set :initialize.0:c .conv*8
    34 jump *label4 always
    35 multilabel *label15 marker0
-    * set .conv*8 :initialize.0:c
+   36 set .conv*8 null
    37 setaddr *tmp0 *label16
-    * set :initialize.0:c .conv*9
    38 jump *label4 always
    39 multilabel *label16 marker0
-    * set .conv*9 :initialize.0:c
+   40 set .conv*9 null
    41 setaddr *tmp0 *label17
-    * set :initialize.0:c .conv*10
    42 jump *label4 always
    43 multilabel *label17 marker0
-    * set .conv*10 :initialize.0:c
+   44 set .conv*10 null
    45 setaddr *tmp0 *label18
-    * set :initialize.0:c .conv*11
    46 jump *label4 always
    47 multilabel *label18 marker0
-    * set .conv*11 :initialize.0:c
+   48 set .conv*11 null
    49 setaddr *tmp0 *label19
-    * set :initialize.0:c .conv*12
    50 jump *label4 always
    51 multilabel *label19 marker0
-    * set .conv*12 :initialize.0:c
+   52 set .conv*12 null
    53 setaddr *tmp0 *label20
-    * set :initialize.0:c .conv*13
    54 jump *label4 always
    55 multilabel *label20 marker0
-    * set .conv*13 :initialize.0:c
+   56 set .conv*13 null
    57 setaddr *tmp0 *label21
-    * set :initialize.0:c .conv*14
    58 jump *label4 always
    59 multilabel *label21 marker0
-    * set .conv*14 :initialize.0:c
+   60 set .conv*14 null
    61 setaddr *tmp0 *label22
-    * set :initialize.0:c .conv*15
    62 label *label4
    63 set :initialize.0:c null
    64 label *label5
    65 multijump *tmp0 0 0 marker0
    66 multilabel *label22 marker0
-    * set .conv*15 :initialize.0:c
+   67 set .conv*15 null
    68 label *label6
    69 set .memory null
    70 set .found 0
 
   130 set *tmp19 511
   131 label *label40
   132 set .totalIndex *tmp19
-    * read .total .memory .totalIndex
+  133 read .total .memory *tmp19
   134 jump *label3 always
   135 label *label38
   136 label *label36
 
   148 set *tmp23 :i
   149 readarr *tmp26 .conv[] :i
   150 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] *tmp23
+  151 writearr *tmp27 .state1[] :i
   152 set *tmp28 :i
   153 set *tmp30 :i
-    * readarr *tmp29 .state1[] *tmp28
-    * readarr *tmp31 .state2[] *tmp30
+  154 readarr *tmp29 .state1[] :i
+  155 readarr *tmp31 .state2[] :i
   156 jump *label47 greaterThanEq *tmp29 *tmp31
   157 op add .total .total 10
   158 label *label47
 
   162 jump *label44 always
   163 label *label46
   164 set *tmp35 .totalIndex
-    * write .total .memory *tmp35
+  165 write .total .memory .totalIndex
   166 print "[gold]Item Counter[], version [gold]1.0[]"
   167 print " "
   168 print "           "
 
   183 set *tmp38 :i.1
   184 readarr *tmp41 .conv[] :i.1
   185 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] *tmp38
+  186 writearr *tmp42 .state2[] :i.1
   187 set *tmp43 :i.1
   188 set *tmp45 :i.1
-    * readarr *tmp44 .state2[] *tmp43
-    * readarr *tmp46 .state1[] *tmp45
+  189 readarr *tmp44 .state2[] :i.1
+  190 readarr *tmp46 .state1[] :i.1
   191 jump *label52 greaterThanEq *tmp44 *tmp46
   192 op add .total .total 10
   193 label *label52

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-8 instructions):
 
    60 set .conv*14 null
    61 setaddr *tmp0 *label22
    62 label *label4
-    * set :initialize.0:c null
    63 label *label5
    64 multijump *tmp0 0 0 marker0
    65 multilabel *label22 marker0
 
   144 set :i 0
   145 label *label44
   146 jump *label46 greaterThanEq :i 16
-    * set *tmp23 :i
   147 readarr *tmp26 .conv[] :i
   148 sensor *tmp27 *tmp26 @totalItems
   149 writearr *tmp27 .state1[] :i
-    * set *tmp28 :i
-    * set *tmp30 :i
   150 readarr *tmp29 .state1[] :i
   151 readarr *tmp31 .state2[] :i
   152 jump *label47 greaterThanEq *tmp29 *tmp31
 
   157 op add :i :i 1
   158 jump *label44 always
   159 label *label46
-    * set *tmp35 .totalIndex
   160 write .total .memory .totalIndex
   161 print "[gold]Item Counter[], version [gold]1.0[]"
   162 print " "
 
   175 set :i.1 0
   176 label *label49
   177 jump *label51 greaterThanEq :i.1 16
-    * set *tmp38 :i.1
   178 readarr *tmp41 .conv[] :i.1
   179 sensor *tmp42 *tmp41 @totalItems
   180 writearr *tmp42 .state2[] :i.1
-    * set *tmp43 :i.1
-    * set *tmp45 :i.1
   181 readarr *tmp44 .state2[] :i.1
   182 readarr *tmp46 .state1[] :i.1
   183 jump *label52 greaterThanEq *tmp44 *tmp46

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
    71 op sub :initialize.0:n .links 1
    72 label *label23
    73 jump *label25 lessThan :initialize.0:n 0
+   74 label *label56
    75 getlink :initialize.0:block :initialize.0:n
    76 sensor *tmp4 :initialize.0:block @type
    77 jump *label28 equal *tmp4 @memory-cell
 
    91 label *label26
    92 label *label24
    93 op sub :initialize.0:n :initialize.0:n 1
-    * jump *label23 always
+   94 jump *label56 greaterThanEq :initialize.0:n 0
    95 label *label25
    96 jump *label33 notEqual .found 0
    97 print "[gold]Item Counter[], version [gold]1.0[]"
 
   144 set :start @time
   145 set :i 0
   146 label *label44
-    * jump *label46 greaterThanEq :i 16
+  147 label *label57
   148 readarr *tmp26 .conv[] :i
   149 sensor *tmp27 *tmp26 @totalItems
   150 writearr *tmp27 .state1[] :i
 
   156 label *label48
   157 label *label45
   158 op add :i :i 1
-    * jump *label44 always
+  159 jump *label57 lessThan :i 16
   160 label *label46
   161 write .total .memory .totalIndex
   162 print "[gold]Item Counter[], version [gold]1.0[]"
 
   175 print "\n"
   176 set :i.1 0
   177 label *label49
-    * jump *label51 greaterThanEq :i.1 16
+  178 label *label58
   179 readarr *tmp41 .conv[] :i.1
   180 sensor *tmp42 *tmp41 @totalItems
   181 writearr *tmp42 .state2[] :i.1
 
   187 label *label53
   188 label *label50
   189 op add :i.1 :i.1 1
-    * jump *label49 always
+  190 jump *label58 lessThan :i.1 16
   191 label *label51
   192 op sub *tmp50 @time :start
   193 op idiv *tmp52 *tmp50 2

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1:
 
   122 printflush message1
   123 jump *label38 always
   124 label *label37
+  125 set *tmp19 511
   126 sensor *tmp17 .memory @type
-    * jump *label39 notEqual *tmp17 @memory-cell
+  127 jump *label40 notEqual *tmp17 @memory-cell
   128 set *tmp19 63
   129 jump *label40 always
-    * label *label39
-    * set *tmp19 511
   130 label *label40
   131 set .totalIndex *tmp19
   132 read .total .memory *tmp19

Modifications by Unroll iteration loop at line 32:9 (-32 instructions):
     0 label *label1
-    * setaddr *tmp0 *label7
-    * jump *label4 always
-    * multilabel *label7 marker0
-    * set .conv*0 null
-    * setaddr *tmp0 *label8
-    * jump *label4 always
-    * multilabel *label8 marker0
-    * set .conv*1 null
-    * setaddr *tmp0 *label9
-    * jump *label4 always
-    * multilabel *label9 marker0
-    * set .conv*2 null
-    * setaddr *tmp0 *label10
-    * jump *label4 always
-    * multilabel *label10 marker0
-    * set .conv*3 null
-    * setaddr *tmp0 *label11
-    * jump *label4 always
-    * multilabel *label11 marker0
-    * set .conv*4 null
-    * setaddr *tmp0 *label12
-    * jump *label4 always
-    * multilabel *label12 marker0
-    * set .conv*5 null
-    * setaddr *tmp0 *label13
-    * jump *label4 always
-    * multilabel *label13 marker0
-    * set .conv*6 null
-    * setaddr *tmp0 *label14
-    * jump *label4 always
-    * multilabel *label14 marker0
-    * set .conv*7 null
-    * setaddr *tmp0 *label15
-    * jump *label4 always
-    * multilabel *label15 marker0
-    * set .conv*8 null
-    * setaddr *tmp0 *label16
-    * jump *label4 always
-    * multilabel *label16 marker0
-    * set .conv*9 null
-    * setaddr *tmp0 *label17
-    * jump *label4 always
-    * multilabel *label17 marker0
-    * set .conv*10 null
-    * setaddr *tmp0 *label18
-    * jump *label4 always
-    * multilabel *label18 marker0
-    * set .conv*11 null
-    * setaddr *tmp0 *label19
-    * jump *label4 always
-    * multilabel *label19 marker0
-    * set .conv*12 null
-    * setaddr *tmp0 *label20
-    * jump *label4 always
-    * multilabel *label20 marker0
-    * set .conv*13 null
-    * setaddr *tmp0 *label21
-    * jump *label4 always
-    * multilabel *label21 marker0
-    * set .conv*14 null
-    * setaddr *tmp0 *label22
-    * label *label4
-    * label *label5
-    * multijump *tmp0 0 0 marker0
-    * multilabel *label22 marker0
-    * set .conv*15 null
-    * label *label6
+    1 label *label59
+    2 label *label60
+    3 set .conv*0 null
+    4 label *label63
+    5 label *label64
+    6 set .conv*1 null
+    7 label *label67
+    8 label *label68
+    9 set .conv*2 null
+   10 label *label71
+   11 label *label72
+   12 set .conv*3 null
+   13 label *label75
+   14 label *label76
+   15 set .conv*4 null
+   16 label *label79
+   17 label *label80
+   18 set .conv*5 null
+   19 label *label83
+   20 label *label84
+   21 set .conv*6 null
+   22 label *label87
+   23 label *label88
+   24 set .conv*7 null
+   25 label *label91
+   26 label *label92
+   27 set .conv*8 null
+   28 label *label95
+   29 label *label96
+   30 set .conv*9 null
+   31 label *label99
+   32 label *label100
+   33 set .conv*10 null
+   34 label *label103
+   35 label *label104
+   36 set .conv*11 null
+   37 label *label107
+   38 label *label108
+   39 set .conv*12 null
+   40 label *label111
+   41 label *label112
+   42 set .conv*13 null
+   43 label *label115
+   44 label *label116
+   45 set .conv*14 null
+   46 label *label119
+   47 label *label120
+   48 set .conv*15 null
+   49 label *label6
    50 set .memory null
    51 set .found 0
    52 set .links @links

Modifications by Unroll loop at line 74:9 (+299 instructions):
 
   123 control enabled switch1 false
   124 label *label41
   125 set :start @time
-    * set :i 0
-    * label *label44
-    * label *label57
-    * readarr *tmp26 .conv[] :i
-    * sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
-    * jump *label47 greaterThanEq *tmp29 *tmp31
-    * op add .total .total 10
-    * label *label47
-    * label *label48
-    * label *label45
-    * op add :i :i 1
-    * jump *label57 lessThan :i 16
-    * label *label46
+  126 set :i 0
+  127 label *label124
+  128 label *label125
+  129 readarr *tmp26 .conv[] :i
+  130 sensor *tmp27 *tmp26 @totalItems
+  131 writearr *tmp27 .state1[] :i
+  132 readarr *tmp29 .state1[] :i
+  133 readarr *tmp31 .state2[] :i
+  134 jump *label126 greaterThanEq *tmp29 *tmp31
+  135 op add .total .total 10
+  136 label *label126
+  137 label *label127
+  138 label *label128
+  139 op add :i :i 1
+  140 label *label129
+  141 readarr *tmp26 .conv[] :i
+  142 sensor *tmp27 *tmp26 @totalItems
+  143 writearr *tmp27 .state1[] :i
+  144 readarr *tmp29 .state1[] :i
+  145 readarr *tmp31 .state2[] :i
+  146 jump *label130 greaterThanEq *tmp29 *tmp31
+  147 op add .total .total 10
+  148 label *label130
+  149 label *label131
+  150 label *label132
+  151 op add :i :i 1
+  152 label *label133
+  153 readarr *tmp26 .conv[] :i
+  154 sensor *tmp27 *tmp26 @totalItems
+  155 writearr *tmp27 .state1[] :i
+  156 readarr *tmp29 .state1[] :i
+  157 readarr *tmp31 .state2[] :i
+  158 jump *label134 greaterThanEq *tmp29 *tmp31
+  159 op add .total .total 10
+  160 label *label134
+  161 label *label135
+  162 label *label136
+  163 op add :i :i 1
+  164 label *label137
+  165 readarr *tmp26 .conv[] :i
+  166 sensor *tmp27 *tmp26 @totalItems
+  167 writearr *tmp27 .state1[] :i
+  168 readarr *tmp29 .state1[] :i
+  169 readarr *tmp31 .state2[] :i
+  170 jump *label138 greaterThanEq *tmp29 *tmp31
+  171 op add .total .total 10
+  172 label *label138
+  173 label *label139
+  174 label *label140
+  175 op add :i :i 1
+  176 label *label141
+  177 readarr *tmp26 .conv[] :i
+  178 sensor *tmp27 *tmp26 @totalItems
+  179 writearr *tmp27 .state1[] :i
+  180 readarr *tmp29 .state1[] :i
+  181 readarr *tmp31 .state2[] :i
+  182 jump *label142 greaterThanEq *tmp29 *tmp31
+  183 op add .total .total 10
+  184 label *label142
+  185 label *label143
+  186 label *label144
+  187 op add :i :i 1
+  188 label *label145
+  189 readarr *tmp26 .conv[] :i
+  190 sensor *tmp27 *tmp26 @totalItems
+  191 writearr *tmp27 .state1[] :i
+  192 readarr *tmp29 .state1[] :i
+  193 readarr *tmp31 .state2[] :i
+  194 jump *label146 greaterThanEq *tmp29 *tmp31
+  195 op add .total .total 10
+  196 label *label146
+  197 label *label147
+  198 label *label148
+  199 op add :i :i 1
+  200 label *label149
+  201 readarr *tmp26 .conv[] :i
+  202 sensor *tmp27 *tmp26 @totalItems
+  203 writearr *tmp27 .state1[] :i
+  204 readarr *tmp29 .state1[] :i
+  205 readarr *tmp31 .state2[] :i
+  206 jump *label150 greaterThanEq *tmp29 *tmp31
+  207 op add .total .total 10
+  208 label *label150
+  209 label *label151
+  210 label *label152
+  211 op add :i :i 1
+  212 label *label153
+  213 readarr *tmp26 .conv[] :i
+  214 sensor *tmp27 *tmp26 @totalItems
+  215 writearr *tmp27 .state1[] :i
+  216 readarr *tmp29 .state1[] :i
+  217 readarr *tmp31 .state2[] :i
+  218 jump *label154 greaterThanEq *tmp29 *tmp31
+  219 op add .total .total 10
+  220 label *label154
+  221 label *label155
+  222 label *label156
+  223 op add :i :i 1
+  224 label *label157
+  225 readarr *tmp26 .conv[] :i
+  226 sensor *tmp27 *tmp26 @totalItems
+  227 writearr *tmp27 .state1[] :i
+  228 readarr *tmp29 .state1[] :i
+  229 readarr *tmp31 .state2[] :i
+  230 jump *label158 greaterThanEq *tmp29 *tmp31
+  231 op add .total .total 10
+  232 label *label158
+  233 label *label159
+  234 label *label160
+  235 op add :i :i 1
+  236 label *label161
+  237 readarr *tmp26 .conv[] :i
+  238 sensor *tmp27 *tmp26 @totalItems
+  239 writearr *tmp27 .state1[] :i
+  240 readarr *tmp29 .state1[] :i
+  241 readarr *tmp31 .state2[] :i
+  242 jump *label162 greaterThanEq *tmp29 *tmp31
+  243 op add .total .total 10
+  244 label *label162
+  245 label *label163
+  246 label *label164
+  247 op add :i :i 1
+  248 label *label165
+  249 readarr *tmp26 .conv[] :i
+  250 sensor *tmp27 *tmp26 @totalItems
+  251 writearr *tmp27 .state1[] :i
+  252 readarr *tmp29 .state1[] :i
+  253 readarr *tmp31 .state2[] :i
+  254 jump *label166 greaterThanEq *tmp29 *tmp31
+  255 op add .total .total 10
+  256 label *label166
+  257 label *label167
+  258 label *label168
+  259 op add :i :i 1
+  260 label *label169
+  261 readarr *tmp26 .conv[] :i
+  262 sensor *tmp27 *tmp26 @totalItems
+  263 writearr *tmp27 .state1[] :i
+  264 readarr *tmp29 .state1[] :i
+  265 readarr *tmp31 .state2[] :i
+  266 jump *label170 greaterThanEq *tmp29 *tmp31
+  267 op add .total .total 10
+  268 label *label170
+  269 label *label171
+  270 label *label172
+  271 op add :i :i 1
+  272 label *label173
+  273 readarr *tmp26 .conv[] :i
+  274 sensor *tmp27 *tmp26 @totalItems
+  275 writearr *tmp27 .state1[] :i
+  276 readarr *tmp29 .state1[] :i
+  277 readarr *tmp31 .state2[] :i
+  278 jump *label174 greaterThanEq *tmp29 *tmp31
+  279 op add .total .total 10
+  280 label *label174
+  281 label *label175
+  282 label *label176
+  283 op add :i :i 1
+  284 label *label177
+  285 readarr *tmp26 .conv[] :i
+  286 sensor *tmp27 *tmp26 @totalItems
+  287 writearr *tmp27 .state1[] :i
+  288 readarr *tmp29 .state1[] :i
+  289 readarr *tmp31 .state2[] :i
+  290 jump *label178 greaterThanEq *tmp29 *tmp31
+  291 op add .total .total 10
+  292 label *label178
+  293 label *label179
+  294 label *label180
+  295 op add :i :i 1
+  296 label *label181
+  297 readarr *tmp26 .conv[] :i
+  298 sensor *tmp27 *tmp26 @totalItems
+  299 writearr *tmp27 .state1[] :i
+  300 readarr *tmp29 .state1[] :i
+  301 readarr *tmp31 .state2[] :i
+  302 jump *label182 greaterThanEq *tmp29 *tmp31
+  303 op add .total .total 10
+  304 label *label182
+  305 label *label183
+  306 label *label184
+  307 op add :i :i 1
+  308 label *label185
+  309 readarr *tmp26 .conv[] :i
+  310 sensor *tmp27 *tmp26 @totalItems
+  311 writearr *tmp27 .state1[] :i
+  312 readarr *tmp29 .state1[] :i
+  313 readarr *tmp31 .state2[] :i
+  314 jump *label186 greaterThanEq *tmp29 *tmp31
+  315 op add .total .total 10
+  316 label *label186
+  317 label *label187
+  318 label *label188
+  319 op add :i :i 1
+  320 label *label46
   321 write .total .memory .totalIndex
   322 print "[gold]Item Counter[], version [gold]1.0[]"
   323 print " "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   126 set :i 0
   127 label *label124
   128 label *label125
-    * readarr *tmp26 .conv[] :i
+  129 readarr *tmp26 .conv[] 0
   130 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  131 writearr *tmp27 .state1[] 0
+  132 readarr *tmp29 .state1[] 0
+  133 readarr *tmp31 .state2[] 0
   134 jump *label126 greaterThanEq *tmp29 *tmp31
   135 op add .total .total 10
   136 label *label126
   137 label *label127
   138 label *label128
-    * op add :i :i 1
+  139 op add :i 0 1
   140 label *label129
-    * readarr *tmp26 .conv[] :i
+  141 readarr *tmp26 .conv[] 1
   142 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  143 writearr *tmp27 .state1[] 1
+  144 readarr *tmp29 .state1[] 1
+  145 readarr *tmp31 .state2[] 1
   146 jump *label130 greaterThanEq *tmp29 *tmp31
   147 op add .total .total 10
   148 label *label130
   149 label *label131
   150 label *label132
-    * op add :i :i 1
+  151 op add :i 1 1
   152 label *label133
-    * readarr *tmp26 .conv[] :i
+  153 readarr *tmp26 .conv[] 2
   154 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  155 writearr *tmp27 .state1[] 2
+  156 readarr *tmp29 .state1[] 2
+  157 readarr *tmp31 .state2[] 2
   158 jump *label134 greaterThanEq *tmp29 *tmp31
   159 op add .total .total 10
   160 label *label134
   161 label *label135
   162 label *label136
-    * op add :i :i 1
+  163 op add :i 2 1
   164 label *label137
-    * readarr *tmp26 .conv[] :i
+  165 readarr *tmp26 .conv[] 3
   166 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  167 writearr *tmp27 .state1[] 3
+  168 readarr *tmp29 .state1[] 3
+  169 readarr *tmp31 .state2[] 3
   170 jump *label138 greaterThanEq *tmp29 *tmp31
   171 op add .total .total 10
   172 label *label138
   173 label *label139
   174 label *label140
-    * op add :i :i 1
+  175 op add :i 3 1
   176 label *label141
-    * readarr *tmp26 .conv[] :i
+  177 readarr *tmp26 .conv[] 4
   178 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  179 writearr *tmp27 .state1[] 4
+  180 readarr *tmp29 .state1[] 4
+  181 readarr *tmp31 .state2[] 4
   182 jump *label142 greaterThanEq *tmp29 *tmp31
   183 op add .total .total 10
   184 label *label142
   185 label *label143
   186 label *label144
-    * op add :i :i 1
+  187 op add :i 4 1
   188 label *label145
-    * readarr *tmp26 .conv[] :i
+  189 readarr *tmp26 .conv[] 5
   190 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  191 writearr *tmp27 .state1[] 5
+  192 readarr *tmp29 .state1[] 5
+  193 readarr *tmp31 .state2[] 5
   194 jump *label146 greaterThanEq *tmp29 *tmp31
   195 op add .total .total 10
   196 label *label146
   197 label *label147
   198 label *label148
-    * op add :i :i 1
+  199 op add :i 5 1
   200 label *label149
-    * readarr *tmp26 .conv[] :i
+  201 readarr *tmp26 .conv[] 6
   202 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  203 writearr *tmp27 .state1[] 6
+  204 readarr *tmp29 .state1[] 6
+  205 readarr *tmp31 .state2[] 6
   206 jump *label150 greaterThanEq *tmp29 *tmp31
   207 op add .total .total 10
   208 label *label150
   209 label *label151
   210 label *label152
-    * op add :i :i 1
+  211 op add :i 6 1
   212 label *label153
-    * readarr *tmp26 .conv[] :i
+  213 readarr *tmp26 .conv[] 7
   214 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  215 writearr *tmp27 .state1[] 7
+  216 readarr *tmp29 .state1[] 7
+  217 readarr *tmp31 .state2[] 7
   218 jump *label154 greaterThanEq *tmp29 *tmp31
   219 op add .total .total 10
   220 label *label154
   221 label *label155
   222 label *label156
-    * op add :i :i 1
+  223 op add :i 7 1
   224 label *label157
-    * readarr *tmp26 .conv[] :i
+  225 readarr *tmp26 .conv[] 8
   226 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  227 writearr *tmp27 .state1[] 8
+  228 readarr *tmp29 .state1[] 8
+  229 readarr *tmp31 .state2[] 8
   230 jump *label158 greaterThanEq *tmp29 *tmp31
   231 op add .total .total 10
   232 label *label158
   233 label *label159
   234 label *label160
-    * op add :i :i 1
+  235 op add :i 8 1
   236 label *label161
-    * readarr *tmp26 .conv[] :i
+  237 readarr *tmp26 .conv[] 9
   238 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  239 writearr *tmp27 .state1[] 9
+  240 readarr *tmp29 .state1[] 9
+  241 readarr *tmp31 .state2[] 9
   242 jump *label162 greaterThanEq *tmp29 *tmp31
   243 op add .total .total 10
   244 label *label162
   245 label *label163
   246 label *label164
-    * op add :i :i 1
+  247 op add :i 9 1
   248 label *label165
-    * readarr *tmp26 .conv[] :i
+  249 readarr *tmp26 .conv[] 10
   250 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  251 writearr *tmp27 .state1[] 10
+  252 readarr *tmp29 .state1[] 10
+  253 readarr *tmp31 .state2[] 10
   254 jump *label166 greaterThanEq *tmp29 *tmp31
   255 op add .total .total 10
   256 label *label166
   257 label *label167
   258 label *label168
-    * op add :i :i 1
+  259 op add :i 10 1
   260 label *label169
-    * readarr *tmp26 .conv[] :i
+  261 readarr *tmp26 .conv[] 11
   262 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  263 writearr *tmp27 .state1[] 11
+  264 readarr *tmp29 .state1[] 11
+  265 readarr *tmp31 .state2[] 11
   266 jump *label170 greaterThanEq *tmp29 *tmp31
   267 op add .total .total 10
   268 label *label170
   269 label *label171
   270 label *label172
-    * op add :i :i 1
+  271 op add :i 11 1
   272 label *label173
-    * readarr *tmp26 .conv[] :i
+  273 readarr *tmp26 .conv[] 12
   274 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  275 writearr *tmp27 .state1[] 12
+  276 readarr *tmp29 .state1[] 12
+  277 readarr *tmp31 .state2[] 12
   278 jump *label174 greaterThanEq *tmp29 *tmp31
   279 op add .total .total 10
   280 label *label174
   281 label *label175
   282 label *label176
-    * op add :i :i 1
+  283 op add :i 12 1
   284 label *label177
-    * readarr *tmp26 .conv[] :i
+  285 readarr *tmp26 .conv[] 13
   286 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  287 writearr *tmp27 .state1[] 13
+  288 readarr *tmp29 .state1[] 13
+  289 readarr *tmp31 .state2[] 13
   290 jump *label178 greaterThanEq *tmp29 *tmp31
   291 op add .total .total 10
   292 label *label178
   293 label *label179
   294 label *label180
-    * op add :i :i 1
+  295 op add :i 13 1
   296 label *label181
-    * readarr *tmp26 .conv[] :i
+  297 readarr *tmp26 .conv[] 14
   298 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  299 writearr *tmp27 .state1[] 14
+  300 readarr *tmp29 .state1[] 14
+  301 readarr *tmp31 .state2[] 14
   302 jump *label182 greaterThanEq *tmp29 *tmp31
   303 op add .total .total 10
   304 label *label182
   305 label *label183
   306 label *label184
-    * op add :i :i 1
+  307 op add :i 14 1
   308 label *label185
-    * readarr *tmp26 .conv[] :i
+  309 readarr *tmp26 .conv[] 15
   310 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] :i
-    * readarr *tmp29 .state1[] :i
-    * readarr *tmp31 .state2[] :i
+  311 writearr *tmp27 .state1[] 15
+  312 readarr *tmp29 .state1[] 15
+  313 readarr *tmp31 .state2[] 15
   314 jump *label186 greaterThanEq *tmp29 *tmp31
   315 op add .total .total 10
   316 label *label186
   317 label *label187
   318 label *label188
-    * op add :i :i 1
+  319 op add :i 15 1
   320 label *label46
   321 write .total .memory .totalIndex
   322 print "[gold]Item Counter[], version [gold]1.0[]"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-17 instructions):
 
   123 control enabled switch1 false
   124 label *label41
   125 set :start @time
-    * set :i 0
   126 label *label124
   127 label *label125
   128 readarr *tmp26 .conv[] 0
 
   135 label *label126
   136 label *label127
   137 label *label128
-    * op add :i 0 1
   138 label *label129
   139 readarr *tmp26 .conv[] 1
   140 sensor *tmp27 *tmp26 @totalItems
 
   146 label *label130
   147 label *label131
   148 label *label132
-    * op add :i 1 1
   149 label *label133
   150 readarr *tmp26 .conv[] 2
   151 sensor *tmp27 *tmp26 @totalItems
 
   157 label *label134
   158 label *label135
   159 label *label136
-    * op add :i 2 1
   160 label *label137
   161 readarr *tmp26 .conv[] 3
   162 sensor *tmp27 *tmp26 @totalItems
 
   168 label *label138
   169 label *label139
   170 label *label140
-    * op add :i 3 1
   171 label *label141
   172 readarr *tmp26 .conv[] 4
   173 sensor *tmp27 *tmp26 @totalItems
 
   179 label *label142
   180 label *label143
   181 label *label144
-    * op add :i 4 1
   182 label *label145
   183 readarr *tmp26 .conv[] 5
   184 sensor *tmp27 *tmp26 @totalItems
 
   190 label *label146
   191 label *label147
   192 label *label148
-    * op add :i 5 1
   193 label *label149
   194 readarr *tmp26 .conv[] 6
   195 sensor *tmp27 *tmp26 @totalItems
 
   201 label *label150
   202 label *label151
   203 label *label152
-    * op add :i 6 1
   204 label *label153
   205 readarr *tmp26 .conv[] 7
   206 sensor *tmp27 *tmp26 @totalItems
 
   212 label *label154
   213 label *label155
   214 label *label156
-    * op add :i 7 1
   215 label *label157
   216 readarr *tmp26 .conv[] 8
   217 sensor *tmp27 *tmp26 @totalItems
 
   223 label *label158
   224 label *label159
   225 label *label160
-    * op add :i 8 1
   226 label *label161
   227 readarr *tmp26 .conv[] 9
   228 sensor *tmp27 *tmp26 @totalItems
 
   234 label *label162
   235 label *label163
   236 label *label164
-    * op add :i 9 1
   237 label *label165
   238 readarr *tmp26 .conv[] 10
   239 sensor *tmp27 *tmp26 @totalItems
 
   245 label *label166
   246 label *label167
   247 label *label168
-    * op add :i 10 1
   248 label *label169
   249 readarr *tmp26 .conv[] 11
   250 sensor *tmp27 *tmp26 @totalItems
 
   256 label *label170
   257 label *label171
   258 label *label172
-    * op add :i 11 1
   259 label *label173
   260 readarr *tmp26 .conv[] 12
   261 sensor *tmp27 *tmp26 @totalItems
 
   267 label *label174
   268 label *label175
   269 label *label176
-    * op add :i 12 1
   270 label *label177
   271 readarr *tmp26 .conv[] 13
   272 sensor *tmp27 *tmp26 @totalItems
 
   278 label *label178
   279 label *label179
   280 label *label180
-    * op add :i 13 1
   281 label *label181
   282 readarr *tmp26 .conv[] 14
   283 sensor *tmp27 *tmp26 @totalItems
 
   289 label *label182
   290 label *label183
   291 label *label184
-    * op add :i 14 1
   292 label *label185
   293 readarr *tmp26 .conv[] 15
   294 sensor *tmp27 *tmp26 @totalItems
 
   300 label *label186
   301 label *label187
   302 label *label188
-    * op add :i 15 1
   303 label *label46
   304 write .total .memory .totalIndex
   305 print "[gold]Item Counter[], version [gold]1.0[]"

Modifications by Unroll loop at line 87:9 (+299 instructions):
 
   316 print "["
   317 print "]"
   318 print "\n"
-    * set :i.1 0
-    * label *label49
-    * label *label58
-    * readarr *tmp41 .conv[] :i.1
-    * sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
-    * jump *label52 greaterThanEq *tmp44 *tmp46
-    * op add .total .total 10
-    * label *label52
-    * label *label53
-    * label *label50
-    * op add :i.1 :i.1 1
-    * jump *label58 lessThan :i.1 16
-    * label *label51
+  319 set :i.1 0
+  320 label *label189
+  321 label *label190
+  322 readarr *tmp41 .conv[] :i.1
+  323 sensor *tmp42 *tmp41 @totalItems
+  324 writearr *tmp42 .state2[] :i.1
+  325 readarr *tmp44 .state2[] :i.1
+  326 readarr *tmp46 .state1[] :i.1
+  327 jump *label191 greaterThanEq *tmp44 *tmp46
+  328 op add .total .total 10
+  329 label *label191
+  330 label *label192
+  331 label *label193
+  332 op add :i.1 :i.1 1
+  333 label *label194
+  334 readarr *tmp41 .conv[] :i.1
+  335 sensor *tmp42 *tmp41 @totalItems
+  336 writearr *tmp42 .state2[] :i.1
+  337 readarr *tmp44 .state2[] :i.1
+  338 readarr *tmp46 .state1[] :i.1
+  339 jump *label195 greaterThanEq *tmp44 *tmp46
+  340 op add .total .total 10
+  341 label *label195
+  342 label *label196
+  343 label *label197
+  344 op add :i.1 :i.1 1
+  345 label *label198
+  346 readarr *tmp41 .conv[] :i.1
+  347 sensor *tmp42 *tmp41 @totalItems
+  348 writearr *tmp42 .state2[] :i.1
+  349 readarr *tmp44 .state2[] :i.1
+  350 readarr *tmp46 .state1[] :i.1
+  351 jump *label199 greaterThanEq *tmp44 *tmp46
+  352 op add .total .total 10
+  353 label *label199
+  354 label *label200
+  355 label *label201
+  356 op add :i.1 :i.1 1
+  357 label *label202
+  358 readarr *tmp41 .conv[] :i.1
+  359 sensor *tmp42 *tmp41 @totalItems
+  360 writearr *tmp42 .state2[] :i.1
+  361 readarr *tmp44 .state2[] :i.1
+  362 readarr *tmp46 .state1[] :i.1
+  363 jump *label203 greaterThanEq *tmp44 *tmp46
+  364 op add .total .total 10
+  365 label *label203
+  366 label *label204
+  367 label *label205
+  368 op add :i.1 :i.1 1
+  369 label *label206
+  370 readarr *tmp41 .conv[] :i.1
+  371 sensor *tmp42 *tmp41 @totalItems
+  372 writearr *tmp42 .state2[] :i.1
+  373 readarr *tmp44 .state2[] :i.1
+  374 readarr *tmp46 .state1[] :i.1
+  375 jump *label207 greaterThanEq *tmp44 *tmp46
+  376 op add .total .total 10
+  377 label *label207
+  378 label *label208
+  379 label *label209
+  380 op add :i.1 :i.1 1
+  381 label *label210
+  382 readarr *tmp41 .conv[] :i.1
+  383 sensor *tmp42 *tmp41 @totalItems
+  384 writearr *tmp42 .state2[] :i.1
+  385 readarr *tmp44 .state2[] :i.1
+  386 readarr *tmp46 .state1[] :i.1
+  387 jump *label211 greaterThanEq *tmp44 *tmp46
+  388 op add .total .total 10
+  389 label *label211
+  390 label *label212
+  391 label *label213
+  392 op add :i.1 :i.1 1
+  393 label *label214
+  394 readarr *tmp41 .conv[] :i.1
+  395 sensor *tmp42 *tmp41 @totalItems
+  396 writearr *tmp42 .state2[] :i.1
+  397 readarr *tmp44 .state2[] :i.1
+  398 readarr *tmp46 .state1[] :i.1
+  399 jump *label215 greaterThanEq *tmp44 *tmp46
+  400 op add .total .total 10
+  401 label *label215
+  402 label *label216
+  403 label *label217
+  404 op add :i.1 :i.1 1
+  405 label *label218
+  406 readarr *tmp41 .conv[] :i.1
+  407 sensor *tmp42 *tmp41 @totalItems
+  408 writearr *tmp42 .state2[] :i.1
+  409 readarr *tmp44 .state2[] :i.1
+  410 readarr *tmp46 .state1[] :i.1
+  411 jump *label219 greaterThanEq *tmp44 *tmp46
+  412 op add .total .total 10
+  413 label *label219
+  414 label *label220
+  415 label *label221
+  416 op add :i.1 :i.1 1
+  417 label *label222
+  418 readarr *tmp41 .conv[] :i.1
+  419 sensor *tmp42 *tmp41 @totalItems
+  420 writearr *tmp42 .state2[] :i.1
+  421 readarr *tmp44 .state2[] :i.1
+  422 readarr *tmp46 .state1[] :i.1
+  423 jump *label223 greaterThanEq *tmp44 *tmp46
+  424 op add .total .total 10
+  425 label *label223
+  426 label *label224
+  427 label *label225
+  428 op add :i.1 :i.1 1
+  429 label *label226
+  430 readarr *tmp41 .conv[] :i.1
+  431 sensor *tmp42 *tmp41 @totalItems
+  432 writearr *tmp42 .state2[] :i.1
+  433 readarr *tmp44 .state2[] :i.1
+  434 readarr *tmp46 .state1[] :i.1
+  435 jump *label227 greaterThanEq *tmp44 *tmp46
+  436 op add .total .total 10
+  437 label *label227
+  438 label *label228
+  439 label *label229
+  440 op add :i.1 :i.1 1
+  441 label *label230
+  442 readarr *tmp41 .conv[] :i.1
+  443 sensor *tmp42 *tmp41 @totalItems
+  444 writearr *tmp42 .state2[] :i.1
+  445 readarr *tmp44 .state2[] :i.1
+  446 readarr *tmp46 .state1[] :i.1
+  447 jump *label231 greaterThanEq *tmp44 *tmp46
+  448 op add .total .total 10
+  449 label *label231
+  450 label *label232
+  451 label *label233
+  452 op add :i.1 :i.1 1
+  453 label *label234
+  454 readarr *tmp41 .conv[] :i.1
+  455 sensor *tmp42 *tmp41 @totalItems
+  456 writearr *tmp42 .state2[] :i.1
+  457 readarr *tmp44 .state2[] :i.1
+  458 readarr *tmp46 .state1[] :i.1
+  459 jump *label235 greaterThanEq *tmp44 *tmp46
+  460 op add .total .total 10
+  461 label *label235
+  462 label *label236
+  463 label *label237
+  464 op add :i.1 :i.1 1
+  465 label *label238
+  466 readarr *tmp41 .conv[] :i.1
+  467 sensor *tmp42 *tmp41 @totalItems
+  468 writearr *tmp42 .state2[] :i.1
+  469 readarr *tmp44 .state2[] :i.1
+  470 readarr *tmp46 .state1[] :i.1
+  471 jump *label239 greaterThanEq *tmp44 *tmp46
+  472 op add .total .total 10
+  473 label *label239
+  474 label *label240
+  475 label *label241
+  476 op add :i.1 :i.1 1
+  477 label *label242
+  478 readarr *tmp41 .conv[] :i.1
+  479 sensor *tmp42 *tmp41 @totalItems
+  480 writearr *tmp42 .state2[] :i.1
+  481 readarr *tmp44 .state2[] :i.1
+  482 readarr *tmp46 .state1[] :i.1
+  483 jump *label243 greaterThanEq *tmp44 *tmp46
+  484 op add .total .total 10
+  485 label *label243
+  486 label *label244
+  487 label *label245
+  488 op add :i.1 :i.1 1
+  489 label *label246
+  490 readarr *tmp41 .conv[] :i.1
+  491 sensor *tmp42 *tmp41 @totalItems
+  492 writearr *tmp42 .state2[] :i.1
+  493 readarr *tmp44 .state2[] :i.1
+  494 readarr *tmp46 .state1[] :i.1
+  495 jump *label247 greaterThanEq *tmp44 *tmp46
+  496 op add .total .total 10
+  497 label *label247
+  498 label *label248
+  499 label *label249
+  500 op add :i.1 :i.1 1
+  501 label *label250
+  502 readarr *tmp41 .conv[] :i.1
+  503 sensor *tmp42 *tmp41 @totalItems
+  504 writearr *tmp42 .state2[] :i.1
+  505 readarr *tmp44 .state2[] :i.1
+  506 readarr *tmp46 .state1[] :i.1
+  507 jump *label251 greaterThanEq *tmp44 *tmp46
+  508 op add .total .total 10
+  509 label *label251
+  510 label *label252
+  511 label *label253
+  512 op add :i.1 :i.1 1
+  513 label *label51
   514 op sub *tmp50 @time :start
   515 op idiv *tmp52 *tmp50 2
   516 print "[lightgray]Loop time: "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   319 set :i.1 0
   320 label *label189
   321 label *label190
-    * readarr *tmp41 .conv[] :i.1
+  322 readarr *tmp41 .conv[] 0
   323 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  324 writearr *tmp42 .state2[] 0
+  325 readarr *tmp44 .state2[] 0
+  326 readarr *tmp46 .state1[] 0
   327 jump *label191 greaterThanEq *tmp44 *tmp46
   328 op add .total .total 10
   329 label *label191
   330 label *label192
   331 label *label193
-    * op add :i.1 :i.1 1
+  332 op add :i.1 0 1
   333 label *label194
-    * readarr *tmp41 .conv[] :i.1
+  334 readarr *tmp41 .conv[] 1
   335 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  336 writearr *tmp42 .state2[] 1
+  337 readarr *tmp44 .state2[] 1
+  338 readarr *tmp46 .state1[] 1
   339 jump *label195 greaterThanEq *tmp44 *tmp46
   340 op add .total .total 10
   341 label *label195
   342 label *label196
   343 label *label197
-    * op add :i.1 :i.1 1
+  344 op add :i.1 1 1
   345 label *label198
-    * readarr *tmp41 .conv[] :i.1
+  346 readarr *tmp41 .conv[] 2
   347 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  348 writearr *tmp42 .state2[] 2
+  349 readarr *tmp44 .state2[] 2
+  350 readarr *tmp46 .state1[] 2
   351 jump *label199 greaterThanEq *tmp44 *tmp46
   352 op add .total .total 10
   353 label *label199
   354 label *label200
   355 label *label201
-    * op add :i.1 :i.1 1
+  356 op add :i.1 2 1
   357 label *label202
-    * readarr *tmp41 .conv[] :i.1
+  358 readarr *tmp41 .conv[] 3
   359 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  360 writearr *tmp42 .state2[] 3
+  361 readarr *tmp44 .state2[] 3
+  362 readarr *tmp46 .state1[] 3
   363 jump *label203 greaterThanEq *tmp44 *tmp46
   364 op add .total .total 10
   365 label *label203
   366 label *label204
   367 label *label205
-    * op add :i.1 :i.1 1
+  368 op add :i.1 3 1
   369 label *label206
-    * readarr *tmp41 .conv[] :i.1
+  370 readarr *tmp41 .conv[] 4
   371 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  372 writearr *tmp42 .state2[] 4
+  373 readarr *tmp44 .state2[] 4
+  374 readarr *tmp46 .state1[] 4
   375 jump *label207 greaterThanEq *tmp44 *tmp46
   376 op add .total .total 10
   377 label *label207
   378 label *label208
   379 label *label209
-    * op add :i.1 :i.1 1
+  380 op add :i.1 4 1
   381 label *label210
-    * readarr *tmp41 .conv[] :i.1
+  382 readarr *tmp41 .conv[] 5
   383 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  384 writearr *tmp42 .state2[] 5
+  385 readarr *tmp44 .state2[] 5
+  386 readarr *tmp46 .state1[] 5
   387 jump *label211 greaterThanEq *tmp44 *tmp46
   388 op add .total .total 10
   389 label *label211
   390 label *label212
   391 label *label213
-    * op add :i.1 :i.1 1
+  392 op add :i.1 5 1
   393 label *label214
-    * readarr *tmp41 .conv[] :i.1
+  394 readarr *tmp41 .conv[] 6
   395 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  396 writearr *tmp42 .state2[] 6
+  397 readarr *tmp44 .state2[] 6
+  398 readarr *tmp46 .state1[] 6
   399 jump *label215 greaterThanEq *tmp44 *tmp46
   400 op add .total .total 10
   401 label *label215
   402 label *label216
   403 label *label217
-    * op add :i.1 :i.1 1
+  404 op add :i.1 6 1
   405 label *label218
-    * readarr *tmp41 .conv[] :i.1
+  406 readarr *tmp41 .conv[] 7
   407 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  408 writearr *tmp42 .state2[] 7
+  409 readarr *tmp44 .state2[] 7
+  410 readarr *tmp46 .state1[] 7
   411 jump *label219 greaterThanEq *tmp44 *tmp46
   412 op add .total .total 10
   413 label *label219
   414 label *label220
   415 label *label221
-    * op add :i.1 :i.1 1
+  416 op add :i.1 7 1
   417 label *label222
-    * readarr *tmp41 .conv[] :i.1
+  418 readarr *tmp41 .conv[] 8
   419 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  420 writearr *tmp42 .state2[] 8
+  421 readarr *tmp44 .state2[] 8
+  422 readarr *tmp46 .state1[] 8
   423 jump *label223 greaterThanEq *tmp44 *tmp46
   424 op add .total .total 10
   425 label *label223
   426 label *label224
   427 label *label225
-    * op add :i.1 :i.1 1
+  428 op add :i.1 8 1
   429 label *label226
-    * readarr *tmp41 .conv[] :i.1
+  430 readarr *tmp41 .conv[] 9
   431 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  432 writearr *tmp42 .state2[] 9
+  433 readarr *tmp44 .state2[] 9
+  434 readarr *tmp46 .state1[] 9
   435 jump *label227 greaterThanEq *tmp44 *tmp46
   436 op add .total .total 10
   437 label *label227
   438 label *label228
   439 label *label229
-    * op add :i.1 :i.1 1
+  440 op add :i.1 9 1
   441 label *label230
-    * readarr *tmp41 .conv[] :i.1
+  442 readarr *tmp41 .conv[] 10
   443 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  444 writearr *tmp42 .state2[] 10
+  445 readarr *tmp44 .state2[] 10
+  446 readarr *tmp46 .state1[] 10
   447 jump *label231 greaterThanEq *tmp44 *tmp46
   448 op add .total .total 10
   449 label *label231
   450 label *label232
   451 label *label233
-    * op add :i.1 :i.1 1
+  452 op add :i.1 10 1
   453 label *label234
-    * readarr *tmp41 .conv[] :i.1
+  454 readarr *tmp41 .conv[] 11
   455 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  456 writearr *tmp42 .state2[] 11
+  457 readarr *tmp44 .state2[] 11
+  458 readarr *tmp46 .state1[] 11
   459 jump *label235 greaterThanEq *tmp44 *tmp46
   460 op add .total .total 10
   461 label *label235
   462 label *label236
   463 label *label237
-    * op add :i.1 :i.1 1
+  464 op add :i.1 11 1
   465 label *label238
-    * readarr *tmp41 .conv[] :i.1
+  466 readarr *tmp41 .conv[] 12
   467 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  468 writearr *tmp42 .state2[] 12
+  469 readarr *tmp44 .state2[] 12
+  470 readarr *tmp46 .state1[] 12
   471 jump *label239 greaterThanEq *tmp44 *tmp46
   472 op add .total .total 10
   473 label *label239
   474 label *label240
   475 label *label241
-    * op add :i.1 :i.1 1
+  476 op add :i.1 12 1
   477 label *label242
-    * readarr *tmp41 .conv[] :i.1
+  478 readarr *tmp41 .conv[] 13
   479 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  480 writearr *tmp42 .state2[] 13
+  481 readarr *tmp44 .state2[] 13
+  482 readarr *tmp46 .state1[] 13
   483 jump *label243 greaterThanEq *tmp44 *tmp46
   484 op add .total .total 10
   485 label *label243
   486 label *label244
   487 label *label245
-    * op add :i.1 :i.1 1
+  488 op add :i.1 13 1
   489 label *label246
-    * readarr *tmp41 .conv[] :i.1
+  490 readarr *tmp41 .conv[] 14
   491 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  492 writearr *tmp42 .state2[] 14
+  493 readarr *tmp44 .state2[] 14
+  494 readarr *tmp46 .state1[] 14
   495 jump *label247 greaterThanEq *tmp44 *tmp46
   496 op add .total .total 10
   497 label *label247
   498 label *label248
   499 label *label249
-    * op add :i.1 :i.1 1
+  500 op add :i.1 14 1
   501 label *label250
-    * readarr *tmp41 .conv[] :i.1
+  502 readarr *tmp41 .conv[] 15
   503 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] :i.1
-    * readarr *tmp44 .state2[] :i.1
-    * readarr *tmp46 .state1[] :i.1
+  504 writearr *tmp42 .state2[] 15
+  505 readarr *tmp44 .state2[] 15
+  506 readarr *tmp46 .state1[] 15
   507 jump *label251 greaterThanEq *tmp44 *tmp46
   508 op add .total .total 10
   509 label *label251
   510 label *label252
   511 label *label253
-    * op add :i.1 :i.1 1
+  512 op add :i.1 15 1
   513 label *label51
   514 op sub *tmp50 @time :start
   515 op idiv *tmp52 *tmp50 2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-17 instructions):
 
   316 print "["
   317 print "]"
   318 print "\n"
-    * set :i.1 0
   319 label *label189
   320 label *label190
   321 readarr *tmp41 .conv[] 0
 
   328 label *label191
   329 label *label192
   330 label *label193
-    * op add :i.1 0 1
   331 label *label194
   332 readarr *tmp41 .conv[] 1
   333 sensor *tmp42 *tmp41 @totalItems
 
   339 label *label195
   340 label *label196
   341 label *label197
-    * op add :i.1 1 1
   342 label *label198
   343 readarr *tmp41 .conv[] 2
   344 sensor *tmp42 *tmp41 @totalItems
 
   350 label *label199
   351 label *label200
   352 label *label201
-    * op add :i.1 2 1
   353 label *label202
   354 readarr *tmp41 .conv[] 3
   355 sensor *tmp42 *tmp41 @totalItems
 
   361 label *label203
   362 label *label204
   363 label *label205
-    * op add :i.1 3 1
   364 label *label206
   365 readarr *tmp41 .conv[] 4
   366 sensor *tmp42 *tmp41 @totalItems
 
   372 label *label207
   373 label *label208
   374 label *label209
-    * op add :i.1 4 1
   375 label *label210
   376 readarr *tmp41 .conv[] 5
   377 sensor *tmp42 *tmp41 @totalItems
 
   383 label *label211
   384 label *label212
   385 label *label213
-    * op add :i.1 5 1
   386 label *label214
   387 readarr *tmp41 .conv[] 6
   388 sensor *tmp42 *tmp41 @totalItems
 
   394 label *label215
   395 label *label216
   396 label *label217
-    * op add :i.1 6 1
   397 label *label218
   398 readarr *tmp41 .conv[] 7
   399 sensor *tmp42 *tmp41 @totalItems
 
   405 label *label219
   406 label *label220
   407 label *label221
-    * op add :i.1 7 1
   408 label *label222
   409 readarr *tmp41 .conv[] 8
   410 sensor *tmp42 *tmp41 @totalItems
 
   416 label *label223
   417 label *label224
   418 label *label225
-    * op add :i.1 8 1
   419 label *label226
   420 readarr *tmp41 .conv[] 9
   421 sensor *tmp42 *tmp41 @totalItems
 
   427 label *label227
   428 label *label228
   429 label *label229
-    * op add :i.1 9 1
   430 label *label230
   431 readarr *tmp41 .conv[] 10
   432 sensor *tmp42 *tmp41 @totalItems
 
   438 label *label231
   439 label *label232
   440 label *label233
-    * op add :i.1 10 1
   441 label *label234
   442 readarr *tmp41 .conv[] 11
   443 sensor *tmp42 *tmp41 @totalItems
 
   449 label *label235
   450 label *label236
   451 label *label237
-    * op add :i.1 11 1
   452 label *label238
   453 readarr *tmp41 .conv[] 12
   454 sensor *tmp42 *tmp41 @totalItems
 
   460 label *label239
   461 label *label240
   462 label *label241
-    * op add :i.1 12 1
   463 label *label242
   464 readarr *tmp41 .conv[] 13
   465 sensor *tmp42 *tmp41 @totalItems
 
   471 label *label243
   472 label *label244
   473 label *label245
-    * op add :i.1 13 1
   474 label *label246
   475 readarr *tmp41 .conv[] 14
   476 sensor *tmp42 *tmp41 @totalItems
 
   482 label *label247
   483 label *label248
   484 label *label249
-    * op add :i.1 14 1
   485 label *label250
   486 readarr *tmp41 .conv[] 15
   487 sensor *tmp42 *tmp41 @totalItems
 
   493 label *label251
   494 label *label252
   495 label *label253
-    * op add :i.1 15 1
   496 label *label51
   497 op sub *tmp50 @time :start
   498 op idiv *tmp52 *tmp50 2

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
   108 sensor *tmp17 .memory @type
   109 jump *label40 notEqual *tmp17 @memory-cell
   110 set *tmp19 63
-    * jump *label40 always
   111 label *label40
   112 set .totalIndex *tmp19
   113 read .total .memory *tmp19

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1 (-544 instructions):
 
   124 set :start @time
   125 label *label124
   126 label *label125
-    * readarr *tmp26 .conv[] 0
+  127 set *tmp26 .conv*0
   128 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 0
-    * readarr *tmp29 .state1[] 0
-    * readarr *tmp31 .state2[] 0
+  129 set .state1*0 *tmp27
+  130 set *tmp29 .state1*0
+  131 set *tmp31 .state2*0
   132 jump *label126 greaterThanEq *tmp29 *tmp31
   133 op add .total .total 10
   134 label *label126
   135 label *label127
   136 label *label128
   137 label *label129
-    * readarr *tmp26 .conv[] 1
+  138 set *tmp26 .conv*1
   139 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 1
-    * readarr *tmp29 .state1[] 1
-    * readarr *tmp31 .state2[] 1
+  140 set .state1*1 *tmp27
+  141 set *tmp29 .state1*1
+  142 set *tmp31 .state2*1
   143 jump *label130 greaterThanEq *tmp29 *tmp31
   144 op add .total .total 10
   145 label *label130
   146 label *label131
   147 label *label132
   148 label *label133
-    * readarr *tmp26 .conv[] 2
+  149 set *tmp26 .conv*2
   150 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 2
-    * readarr *tmp29 .state1[] 2
-    * readarr *tmp31 .state2[] 2
+  151 set .state1*2 *tmp27
+  152 set *tmp29 .state1*2
+  153 set *tmp31 .state2*2
   154 jump *label134 greaterThanEq *tmp29 *tmp31
   155 op add .total .total 10
   156 label *label134
   157 label *label135
   158 label *label136
   159 label *label137
-    * readarr *tmp26 .conv[] 3
+  160 set *tmp26 .conv*3
   161 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 3
-    * readarr *tmp29 .state1[] 3
-    * readarr *tmp31 .state2[] 3
+  162 set .state1*3 *tmp27
+  163 set *tmp29 .state1*3
+  164 set *tmp31 .state2*3
   165 jump *label138 greaterThanEq *tmp29 *tmp31
   166 op add .total .total 10
   167 label *label138
   168 label *label139
   169 label *label140
   170 label *label141
-    * readarr *tmp26 .conv[] 4
+  171 set *tmp26 .conv*4
   172 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 4
-    * readarr *tmp29 .state1[] 4
-    * readarr *tmp31 .state2[] 4
+  173 set .state1*4 *tmp27
+  174 set *tmp29 .state1*4
+  175 set *tmp31 .state2*4
   176 jump *label142 greaterThanEq *tmp29 *tmp31
   177 op add .total .total 10
   178 label *label142
   179 label *label143
   180 label *label144
   181 label *label145
-    * readarr *tmp26 .conv[] 5
+  182 set *tmp26 .conv*5
   183 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 5
-    * readarr *tmp29 .state1[] 5
-    * readarr *tmp31 .state2[] 5
+  184 set .state1*5 *tmp27
+  185 set *tmp29 .state1*5
+  186 set *tmp31 .state2*5
   187 jump *label146 greaterThanEq *tmp29 *tmp31
   188 op add .total .total 10
   189 label *label146
   190 label *label147
   191 label *label148
   192 label *label149
-    * readarr *tmp26 .conv[] 6
+  193 set *tmp26 .conv*6
   194 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 6
-    * readarr *tmp29 .state1[] 6
-    * readarr *tmp31 .state2[] 6
+  195 set .state1*6 *tmp27
+  196 set *tmp29 .state1*6
+  197 set *tmp31 .state2*6
   198 jump *label150 greaterThanEq *tmp29 *tmp31
   199 op add .total .total 10
   200 label *label150
   201 label *label151
   202 label *label152
   203 label *label153
-    * readarr *tmp26 .conv[] 7
+  204 set *tmp26 .conv*7
   205 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 7
-    * readarr *tmp29 .state1[] 7
-    * readarr *tmp31 .state2[] 7
+  206 set .state1*7 *tmp27
+  207 set *tmp29 .state1*7
+  208 set *tmp31 .state2*7
   209 jump *label154 greaterThanEq *tmp29 *tmp31
   210 op add .total .total 10
   211 label *label154
   212 label *label155
   213 label *label156
   214 label *label157
-    * readarr *tmp26 .conv[] 8
+  215 set *tmp26 .conv*8
   216 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 8
-    * readarr *tmp29 .state1[] 8
-    * readarr *tmp31 .state2[] 8
+  217 set .state1*8 *tmp27
+  218 set *tmp29 .state1*8
+  219 set *tmp31 .state2*8
   220 jump *label158 greaterThanEq *tmp29 *tmp31
   221 op add .total .total 10
   222 label *label158
   223 label *label159
   224 label *label160
   225 label *label161
-    * readarr *tmp26 .conv[] 9
+  226 set *tmp26 .conv*9
   227 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 9
-    * readarr *tmp29 .state1[] 9
-    * readarr *tmp31 .state2[] 9
+  228 set .state1*9 *tmp27
+  229 set *tmp29 .state1*9
+  230 set *tmp31 .state2*9
   231 jump *label162 greaterThanEq *tmp29 *tmp31
   232 op add .total .total 10
   233 label *label162
   234 label *label163
   235 label *label164
   236 label *label165
-    * readarr *tmp26 .conv[] 10
+  237 set *tmp26 .conv*10
   238 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 10
-    * readarr *tmp29 .state1[] 10
-    * readarr *tmp31 .state2[] 10
+  239 set .state1*10 *tmp27
+  240 set *tmp29 .state1*10
+  241 set *tmp31 .state2*10
   242 jump *label166 greaterThanEq *tmp29 *tmp31
   243 op add .total .total 10
   244 label *label166
   245 label *label167
   246 label *label168
   247 label *label169
-    * readarr *tmp26 .conv[] 11
+  248 set *tmp26 .conv*11
   249 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 11
-    * readarr *tmp29 .state1[] 11
-    * readarr *tmp31 .state2[] 11
+  250 set .state1*11 *tmp27
+  251 set *tmp29 .state1*11
+  252 set *tmp31 .state2*11
   253 jump *label170 greaterThanEq *tmp29 *tmp31
   254 op add .total .total 10
   255 label *label170
   256 label *label171
   257 label *label172
   258 label *label173
-    * readarr *tmp26 .conv[] 12
+  259 set *tmp26 .conv*12
   260 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 12
-    * readarr *tmp29 .state1[] 12
-    * readarr *tmp31 .state2[] 12
+  261 set .state1*12 *tmp27
+  262 set *tmp29 .state1*12
+  263 set *tmp31 .state2*12
   264 jump *label174 greaterThanEq *tmp29 *tmp31
   265 op add .total .total 10
   266 label *label174
   267 label *label175
   268 label *label176
   269 label *label177
-    * readarr *tmp26 .conv[] 13
+  270 set *tmp26 .conv*13
   271 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 13
-    * readarr *tmp29 .state1[] 13
-    * readarr *tmp31 .state2[] 13
+  272 set .state1*13 *tmp27
+  273 set *tmp29 .state1*13
+  274 set *tmp31 .state2*13
   275 jump *label178 greaterThanEq *tmp29 *tmp31
   276 op add .total .total 10
   277 label *label178
   278 label *label179
   279 label *label180
   280 label *label181
-    * readarr *tmp26 .conv[] 14
+  281 set *tmp26 .conv*14
   282 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 14
-    * readarr *tmp29 .state1[] 14
-    * readarr *tmp31 .state2[] 14
+  283 set .state1*14 *tmp27
+  284 set *tmp29 .state1*14
+  285 set *tmp31 .state2*14
   286 jump *label182 greaterThanEq *tmp29 *tmp31
   287 op add .total .total 10
   288 label *label182
   289 label *label183
   290 label *label184
   291 label *label185
-    * readarr *tmp26 .conv[] 15
+  292 set *tmp26 .conv*15
   293 sensor *tmp27 *tmp26 @totalItems
-    * writearr *tmp27 .state1[] 15
-    * readarr *tmp29 .state1[] 15
-    * readarr *tmp31 .state2[] 15
+  294 set .state1*15 *tmp27
+  295 set *tmp29 .state1*15
+  296 set *tmp31 .state2*15
   297 jump *label186 greaterThanEq *tmp29 *tmp31
   298 op add .total .total 10
   299 label *label186
 
   317 print "\n"
   318 label *label189
   319 label *label190
-    * readarr *tmp41 .conv[] 0
+  320 set *tmp41 .conv*0
   321 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 0
-    * readarr *tmp44 .state2[] 0
-    * readarr *tmp46 .state1[] 0
+  322 set .state2*0 *tmp42
+  323 set *tmp44 .state2*0
+  324 set *tmp46 .state1*0
   325 jump *label191 greaterThanEq *tmp44 *tmp46
   326 op add .total .total 10
   327 label *label191
   328 label *label192
   329 label *label193
   330 label *label194
-    * readarr *tmp41 .conv[] 1
+  331 set *tmp41 .conv*1
   332 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 1
-    * readarr *tmp44 .state2[] 1
-    * readarr *tmp46 .state1[] 1
+  333 set .state2*1 *tmp42
+  334 set *tmp44 .state2*1
+  335 set *tmp46 .state1*1
   336 jump *label195 greaterThanEq *tmp44 *tmp46
   337 op add .total .total 10
   338 label *label195
   339 label *label196
   340 label *label197
   341 label *label198
-    * readarr *tmp41 .conv[] 2
+  342 set *tmp41 .conv*2
   343 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 2
-    * readarr *tmp44 .state2[] 2
-    * readarr *tmp46 .state1[] 2
+  344 set .state2*2 *tmp42
+  345 set *tmp44 .state2*2
+  346 set *tmp46 .state1*2
   347 jump *label199 greaterThanEq *tmp44 *tmp46
   348 op add .total .total 10
   349 label *label199
   350 label *label200
   351 label *label201
   352 label *label202
-    * readarr *tmp41 .conv[] 3
+  353 set *tmp41 .conv*3
   354 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 3
-    * readarr *tmp44 .state2[] 3
-    * readarr *tmp46 .state1[] 3
+  355 set .state2*3 *tmp42
+  356 set *tmp44 .state2*3
+  357 set *tmp46 .state1*3
   358 jump *label203 greaterThanEq *tmp44 *tmp46
   359 op add .total .total 10
   360 label *label203
   361 label *label204
   362 label *label205
   363 label *label206
-    * readarr *tmp41 .conv[] 4
+  364 set *tmp41 .conv*4
   365 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 4
-    * readarr *tmp44 .state2[] 4
-    * readarr *tmp46 .state1[] 4
+  366 set .state2*4 *tmp42
+  367 set *tmp44 .state2*4
+  368 set *tmp46 .state1*4
   369 jump *label207 greaterThanEq *tmp44 *tmp46
   370 op add .total .total 10
   371 label *label207
   372 label *label208
   373 label *label209
   374 label *label210
-    * readarr *tmp41 .conv[] 5
+  375 set *tmp41 .conv*5
   376 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 5
-    * readarr *tmp44 .state2[] 5
-    * readarr *tmp46 .state1[] 5
+  377 set .state2*5 *tmp42
+  378 set *tmp44 .state2*5
+  379 set *tmp46 .state1*5
   380 jump *label211 greaterThanEq *tmp44 *tmp46
   381 op add .total .total 10
   382 label *label211
   383 label *label212
   384 label *label213
   385 label *label214
-    * readarr *tmp41 .conv[] 6
+  386 set *tmp41 .conv*6
   387 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 6
-    * readarr *tmp44 .state2[] 6
-    * readarr *tmp46 .state1[] 6
+  388 set .state2*6 *tmp42
+  389 set *tmp44 .state2*6
+  390 set *tmp46 .state1*6
   391 jump *label215 greaterThanEq *tmp44 *tmp46
   392 op add .total .total 10
   393 label *label215
   394 label *label216
   395 label *label217
   396 label *label218
-    * readarr *tmp41 .conv[] 7
+  397 set *tmp41 .conv*7
   398 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 7
-    * readarr *tmp44 .state2[] 7
-    * readarr *tmp46 .state1[] 7
+  399 set .state2*7 *tmp42
+  400 set *tmp44 .state2*7
+  401 set *tmp46 .state1*7
   402 jump *label219 greaterThanEq *tmp44 *tmp46
   403 op add .total .total 10
   404 label *label219
   405 label *label220
   406 label *label221
   407 label *label222
-    * readarr *tmp41 .conv[] 8
+  408 set *tmp41 .conv*8
   409 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 8
-    * readarr *tmp44 .state2[] 8
-    * readarr *tmp46 .state1[] 8
+  410 set .state2*8 *tmp42
+  411 set *tmp44 .state2*8
+  412 set *tmp46 .state1*8
   413 jump *label223 greaterThanEq *tmp44 *tmp46
   414 op add .total .total 10
   415 label *label223
   416 label *label224
   417 label *label225
   418 label *label226
-    * readarr *tmp41 .conv[] 9
+  419 set *tmp41 .conv*9
   420 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 9
-    * readarr *tmp44 .state2[] 9
-    * readarr *tmp46 .state1[] 9
+  421 set .state2*9 *tmp42
+  422 set *tmp44 .state2*9
+  423 set *tmp46 .state1*9
   424 jump *label227 greaterThanEq *tmp44 *tmp46
   425 op add .total .total 10
   426 label *label227
   427 label *label228
   428 label *label229
   429 label *label230
-    * readarr *tmp41 .conv[] 10
+  430 set *tmp41 .conv*10
   431 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 10
-    * readarr *tmp44 .state2[] 10
-    * readarr *tmp46 .state1[] 10
+  432 set .state2*10 *tmp42
+  433 set *tmp44 .state2*10
+  434 set *tmp46 .state1*10
   435 jump *label231 greaterThanEq *tmp44 *tmp46
   436 op add .total .total 10
   437 label *label231
   438 label *label232
   439 label *label233
   440 label *label234
-    * readarr *tmp41 .conv[] 11
+  441 set *tmp41 .conv*11
   442 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 11
-    * readarr *tmp44 .state2[] 11
-    * readarr *tmp46 .state1[] 11
+  443 set .state2*11 *tmp42
+  444 set *tmp44 .state2*11
+  445 set *tmp46 .state1*11
   446 jump *label235 greaterThanEq *tmp44 *tmp46
   447 op add .total .total 10
   448 label *label235
   449 label *label236
   450 label *label237
   451 label *label238
-    * readarr *tmp41 .conv[] 12
+  452 set *tmp41 .conv*12
   453 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 12
-    * readarr *tmp44 .state2[] 12
-    * readarr *tmp46 .state1[] 12
+  454 set .state2*12 *tmp42
+  455 set *tmp44 .state2*12
+  456 set *tmp46 .state1*12
   457 jump *label239 greaterThanEq *tmp44 *tmp46
   458 op add .total .total 10
   459 label *label239
   460 label *label240
   461 label *label241
   462 label *label242
-    * readarr *tmp41 .conv[] 13
+  463 set *tmp41 .conv*13
   464 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 13
-    * readarr *tmp44 .state2[] 13
-    * readarr *tmp46 .state1[] 13
+  465 set .state2*13 *tmp42
+  466 set *tmp44 .state2*13
+  467 set *tmp46 .state1*13
   468 jump *label243 greaterThanEq *tmp44 *tmp46
   469 op add .total .total 10
   470 label *label243
   471 label *label244
   472 label *label245
   473 label *label246
-    * readarr *tmp41 .conv[] 14
+  474 set *tmp41 .conv*14
   475 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 14
-    * readarr *tmp44 .state2[] 14
-    * readarr *tmp46 .state1[] 14
+  476 set .state2*14 *tmp42
+  477 set *tmp44 .state2*14
+  478 set *tmp46 .state1*14
   479 jump *label247 greaterThanEq *tmp44 *tmp46
   480 op add .total .total 10
   481 label *label247
   482 label *label248
   483 label *label249
   484 label *label250
-    * readarr *tmp41 .conv[] 15
+  485 set *tmp41 .conv*15
   486 sensor *tmp42 *tmp41 @totalItems
-    * writearr *tmp42 .state2[] 15
-    * readarr *tmp44 .state2[] 15
-    * readarr *tmp46 .state1[] 15
+  487 set .state2*15 *tmp42
+  488 set *tmp44 .state2*15
+  489 set *tmp46 .state1*15
   490 jump *label251 greaterThanEq *tmp44 *tmp46
   491 op add .total .total 10
   492 label *label251

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-32 instructions):
 
   125 label *label124
   126 label *label125
   127 set *tmp26 .conv*0
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*0 *tmp27
+  128 sensor .state1*0 *tmp26 @totalItems
   129 set *tmp29 .state1*0
   130 set *tmp31 .state2*0
   131 jump *label126 greaterThanEq *tmp29 *tmp31
 
   135 label *label128
   136 label *label129
   137 set *tmp26 .conv*1
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*1 *tmp27
+  138 sensor .state1*1 *tmp26 @totalItems
   139 set *tmp29 .state1*1
   140 set *tmp31 .state2*1
   141 jump *label130 greaterThanEq *tmp29 *tmp31
 
   145 label *label132
   146 label *label133
   147 set *tmp26 .conv*2
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*2 *tmp27
+  148 sensor .state1*2 *tmp26 @totalItems
   149 set *tmp29 .state1*2
   150 set *tmp31 .state2*2
   151 jump *label134 greaterThanEq *tmp29 *tmp31
 
   155 label *label136
   156 label *label137
   157 set *tmp26 .conv*3
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*3 *tmp27
+  158 sensor .state1*3 *tmp26 @totalItems
   159 set *tmp29 .state1*3
   160 set *tmp31 .state2*3
   161 jump *label138 greaterThanEq *tmp29 *tmp31
 
   165 label *label140
   166 label *label141
   167 set *tmp26 .conv*4
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*4 *tmp27
+  168 sensor .state1*4 *tmp26 @totalItems
   169 set *tmp29 .state1*4
   170 set *tmp31 .state2*4
   171 jump *label142 greaterThanEq *tmp29 *tmp31
 
   175 label *label144
   176 label *label145
   177 set *tmp26 .conv*5
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*5 *tmp27
+  178 sensor .state1*5 *tmp26 @totalItems
   179 set *tmp29 .state1*5
   180 set *tmp31 .state2*5
   181 jump *label146 greaterThanEq *tmp29 *tmp31
 
   185 label *label148
   186 label *label149
   187 set *tmp26 .conv*6
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*6 *tmp27
+  188 sensor .state1*6 *tmp26 @totalItems
   189 set *tmp29 .state1*6
   190 set *tmp31 .state2*6
   191 jump *label150 greaterThanEq *tmp29 *tmp31
 
   195 label *label152
   196 label *label153
   197 set *tmp26 .conv*7
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*7 *tmp27
+  198 sensor .state1*7 *tmp26 @totalItems
   199 set *tmp29 .state1*7
   200 set *tmp31 .state2*7
   201 jump *label154 greaterThanEq *tmp29 *tmp31
 
   205 label *label156
   206 label *label157
   207 set *tmp26 .conv*8
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*8 *tmp27
+  208 sensor .state1*8 *tmp26 @totalItems
   209 set *tmp29 .state1*8
   210 set *tmp31 .state2*8
   211 jump *label158 greaterThanEq *tmp29 *tmp31
 
   215 label *label160
   216 label *label161
   217 set *tmp26 .conv*9
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*9 *tmp27
+  218 sensor .state1*9 *tmp26 @totalItems
   219 set *tmp29 .state1*9
   220 set *tmp31 .state2*9
   221 jump *label162 greaterThanEq *tmp29 *tmp31
 
   225 label *label164
   226 label *label165
   227 set *tmp26 .conv*10
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*10 *tmp27
+  228 sensor .state1*10 *tmp26 @totalItems
   229 set *tmp29 .state1*10
   230 set *tmp31 .state2*10
   231 jump *label166 greaterThanEq *tmp29 *tmp31
 
   235 label *label168
   236 label *label169
   237 set *tmp26 .conv*11
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*11 *tmp27
+  238 sensor .state1*11 *tmp26 @totalItems
   239 set *tmp29 .state1*11
   240 set *tmp31 .state2*11
   241 jump *label170 greaterThanEq *tmp29 *tmp31
 
   245 label *label172
   246 label *label173
   247 set *tmp26 .conv*12
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*12 *tmp27
+  248 sensor .state1*12 *tmp26 @totalItems
   249 set *tmp29 .state1*12
   250 set *tmp31 .state2*12
   251 jump *label174 greaterThanEq *tmp29 *tmp31
 
   255 label *label176
   256 label *label177
   257 set *tmp26 .conv*13
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*13 *tmp27
+  258 sensor .state1*13 *tmp26 @totalItems
   259 set *tmp29 .state1*13
   260 set *tmp31 .state2*13
   261 jump *label178 greaterThanEq *tmp29 *tmp31
 
   265 label *label180
   266 label *label181
   267 set *tmp26 .conv*14
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*14 *tmp27
+  268 sensor .state1*14 *tmp26 @totalItems
   269 set *tmp29 .state1*14
   270 set *tmp31 .state2*14
   271 jump *label182 greaterThanEq *tmp29 *tmp31
 
   275 label *label184
   276 label *label185
   277 set *tmp26 .conv*15
-    * sensor *tmp27 *tmp26 @totalItems
-    * set .state1*15 *tmp27
+  278 sensor .state1*15 *tmp26 @totalItems
   279 set *tmp29 .state1*15
   280 set *tmp31 .state2*15
   281 jump *label186 greaterThanEq *tmp29 *tmp31
 
   302 label *label189
   303 label *label190
   304 set *tmp41 .conv*0
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*0 *tmp42
+  305 sensor .state2*0 *tmp41 @totalItems
   306 set *tmp44 .state2*0
   307 set *tmp46 .state1*0
   308 jump *label191 greaterThanEq *tmp44 *tmp46
 
   312 label *label193
   313 label *label194
   314 set *tmp41 .conv*1
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*1 *tmp42
+  315 sensor .state2*1 *tmp41 @totalItems
   316 set *tmp44 .state2*1
   317 set *tmp46 .state1*1
   318 jump *label195 greaterThanEq *tmp44 *tmp46
 
   322 label *label197
   323 label *label198
   324 set *tmp41 .conv*2
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*2 *tmp42
+  325 sensor .state2*2 *tmp41 @totalItems
   326 set *tmp44 .state2*2
   327 set *tmp46 .state1*2
   328 jump *label199 greaterThanEq *tmp44 *tmp46
 
   332 label *label201
   333 label *label202
   334 set *tmp41 .conv*3
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*3 *tmp42
+  335 sensor .state2*3 *tmp41 @totalItems
   336 set *tmp44 .state2*3
   337 set *tmp46 .state1*3
   338 jump *label203 greaterThanEq *tmp44 *tmp46
 
   342 label *label205
   343 label *label206
   344 set *tmp41 .conv*4
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*4 *tmp42
+  345 sensor .state2*4 *tmp41 @totalItems
   346 set *tmp44 .state2*4
   347 set *tmp46 .state1*4
   348 jump *label207 greaterThanEq *tmp44 *tmp46
 
   352 label *label209
   353 label *label210
   354 set *tmp41 .conv*5
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*5 *tmp42
+  355 sensor .state2*5 *tmp41 @totalItems
   356 set *tmp44 .state2*5
   357 set *tmp46 .state1*5
   358 jump *label211 greaterThanEq *tmp44 *tmp46
 
   362 label *label213
   363 label *label214
   364 set *tmp41 .conv*6
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*6 *tmp42
+  365 sensor .state2*6 *tmp41 @totalItems
   366 set *tmp44 .state2*6
   367 set *tmp46 .state1*6
   368 jump *label215 greaterThanEq *tmp44 *tmp46
 
   372 label *label217
   373 label *label218
   374 set *tmp41 .conv*7
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*7 *tmp42
+  375 sensor .state2*7 *tmp41 @totalItems
   376 set *tmp44 .state2*7
   377 set *tmp46 .state1*7
   378 jump *label219 greaterThanEq *tmp44 *tmp46
 
   382 label *label221
   383 label *label222
   384 set *tmp41 .conv*8
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*8 *tmp42
+  385 sensor .state2*8 *tmp41 @totalItems
   386 set *tmp44 .state2*8
   387 set *tmp46 .state1*8
   388 jump *label223 greaterThanEq *tmp44 *tmp46
 
   392 label *label225
   393 label *label226
   394 set *tmp41 .conv*9
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*9 *tmp42
+  395 sensor .state2*9 *tmp41 @totalItems
   396 set *tmp44 .state2*9
   397 set *tmp46 .state1*9
   398 jump *label227 greaterThanEq *tmp44 *tmp46
 
   402 label *label229
   403 label *label230
   404 set *tmp41 .conv*10
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*10 *tmp42
+  405 sensor .state2*10 *tmp41 @totalItems
   406 set *tmp44 .state2*10
   407 set *tmp46 .state1*10
   408 jump *label231 greaterThanEq *tmp44 *tmp46
 
   412 label *label233
   413 label *label234
   414 set *tmp41 .conv*11
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*11 *tmp42
+  415 sensor .state2*11 *tmp41 @totalItems
   416 set *tmp44 .state2*11
   417 set *tmp46 .state1*11
   418 jump *label235 greaterThanEq *tmp44 *tmp46
 
   422 label *label237
   423 label *label238
   424 set *tmp41 .conv*12
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*12 *tmp42
+  425 sensor .state2*12 *tmp41 @totalItems
   426 set *tmp44 .state2*12
   427 set *tmp46 .state1*12
   428 jump *label239 greaterThanEq *tmp44 *tmp46
 
   432 label *label241
   433 label *label242
   434 set *tmp41 .conv*13
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*13 *tmp42
+  435 sensor .state2*13 *tmp41 @totalItems
   436 set *tmp44 .state2*13
   437 set *tmp46 .state1*13
   438 jump *label243 greaterThanEq *tmp44 *tmp46
 
   442 label *label245
   443 label *label246
   444 set *tmp41 .conv*14
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*14 *tmp42
+  445 sensor .state2*14 *tmp41 @totalItems
   446 set *tmp44 .state2*14
   447 set *tmp46 .state1*14
   448 jump *label247 greaterThanEq *tmp44 *tmp46
 
   452 label *label249
   453 label *label250
   454 set *tmp41 .conv*15
-    * sensor *tmp42 *tmp41 @totalItems
-    * set .state2*15 *tmp42
+  455 sensor .state2*15 *tmp41 @totalItems
   456 set *tmp44 .state2*15
   457 set *tmp46 .state1*15
   458 jump *label251 greaterThanEq *tmp44 *tmp46

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2:
 
   125 label *label124
   126 label *label125
   127 set *tmp26 .conv*0
-    * sensor .state1*0 *tmp26 @totalItems
+  128 sensor .state1*0 .conv*0 @totalItems
   129 set *tmp29 .state1*0
   130 set *tmp31 .state2*0
-    * jump *label126 greaterThanEq *tmp29 *tmp31
+  131 jump *label126 greaterThanEq .state1*0 .state2*0
   132 op add .total .total 10
   133 label *label126
   134 label *label127
   135 label *label128
   136 label *label129
   137 set *tmp26 .conv*1
-    * sensor .state1*1 *tmp26 @totalItems
+  138 sensor .state1*1 .conv*1 @totalItems
   139 set *tmp29 .state1*1
   140 set *tmp31 .state2*1
-    * jump *label130 greaterThanEq *tmp29 *tmp31
+  141 jump *label130 greaterThanEq .state1*1 .state2*1
   142 op add .total .total 10
   143 label *label130
   144 label *label131
   145 label *label132
   146 label *label133
   147 set *tmp26 .conv*2
-    * sensor .state1*2 *tmp26 @totalItems
+  148 sensor .state1*2 .conv*2 @totalItems
   149 set *tmp29 .state1*2
   150 set *tmp31 .state2*2
-    * jump *label134 greaterThanEq *tmp29 *tmp31
+  151 jump *label134 greaterThanEq .state1*2 .state2*2
   152 op add .total .total 10
   153 label *label134
   154 label *label135
   155 label *label136
   156 label *label137
   157 set *tmp26 .conv*3
-    * sensor .state1*3 *tmp26 @totalItems
+  158 sensor .state1*3 .conv*3 @totalItems
   159 set *tmp29 .state1*3
   160 set *tmp31 .state2*3
-    * jump *label138 greaterThanEq *tmp29 *tmp31
+  161 jump *label138 greaterThanEq .state1*3 .state2*3
   162 op add .total .total 10
   163 label *label138
   164 label *label139
   165 label *label140
   166 label *label141
   167 set *tmp26 .conv*4
-    * sensor .state1*4 *tmp26 @totalItems
+  168 sensor .state1*4 .conv*4 @totalItems
   169 set *tmp29 .state1*4
   170 set *tmp31 .state2*4
-    * jump *label142 greaterThanEq *tmp29 *tmp31
+  171 jump *label142 greaterThanEq .state1*4 .state2*4
   172 op add .total .total 10
   173 label *label142
   174 label *label143
   175 label *label144
   176 label *label145
   177 set *tmp26 .conv*5
-    * sensor .state1*5 *tmp26 @totalItems
+  178 sensor .state1*5 .conv*5 @totalItems
   179 set *tmp29 .state1*5
   180 set *tmp31 .state2*5
-    * jump *label146 greaterThanEq *tmp29 *tmp31
+  181 jump *label146 greaterThanEq .state1*5 .state2*5
   182 op add .total .total 10
   183 label *label146
   184 label *label147
   185 label *label148
   186 label *label149
   187 set *tmp26 .conv*6
-    * sensor .state1*6 *tmp26 @totalItems
+  188 sensor .state1*6 .conv*6 @totalItems
   189 set *tmp29 .state1*6
   190 set *tmp31 .state2*6
-    * jump *label150 greaterThanEq *tmp29 *tmp31
+  191 jump *label150 greaterThanEq .state1*6 .state2*6
   192 op add .total .total 10
   193 label *label150
   194 label *label151
   195 label *label152
   196 label *label153
   197 set *tmp26 .conv*7
-    * sensor .state1*7 *tmp26 @totalItems
+  198 sensor .state1*7 .conv*7 @totalItems
   199 set *tmp29 .state1*7
   200 set *tmp31 .state2*7
-    * jump *label154 greaterThanEq *tmp29 *tmp31
+  201 jump *label154 greaterThanEq .state1*7 .state2*7
   202 op add .total .total 10
   203 label *label154
   204 label *label155
   205 label *label156
   206 label *label157
   207 set *tmp26 .conv*8
-    * sensor .state1*8 *tmp26 @totalItems
+  208 sensor .state1*8 .conv*8 @totalItems
   209 set *tmp29 .state1*8
   210 set *tmp31 .state2*8
-    * jump *label158 greaterThanEq *tmp29 *tmp31
+  211 jump *label158 greaterThanEq .state1*8 .state2*8
   212 op add .total .total 10
   213 label *label158
   214 label *label159
   215 label *label160
   216 label *label161
   217 set *tmp26 .conv*9
-    * sensor .state1*9 *tmp26 @totalItems
+  218 sensor .state1*9 .conv*9 @totalItems
   219 set *tmp29 .state1*9
   220 set *tmp31 .state2*9
-    * jump *label162 greaterThanEq *tmp29 *tmp31
+  221 jump *label162 greaterThanEq .state1*9 .state2*9
   222 op add .total .total 10
   223 label *label162
   224 label *label163
   225 label *label164
   226 label *label165
   227 set *tmp26 .conv*10
-    * sensor .state1*10 *tmp26 @totalItems
+  228 sensor .state1*10 .conv*10 @totalItems
   229 set *tmp29 .state1*10
   230 set *tmp31 .state2*10
-    * jump *label166 greaterThanEq *tmp29 *tmp31
+  231 jump *label166 greaterThanEq .state1*10 .state2*10
   232 op add .total .total 10
   233 label *label166
   234 label *label167
   235 label *label168
   236 label *label169
   237 set *tmp26 .conv*11
-    * sensor .state1*11 *tmp26 @totalItems
+  238 sensor .state1*11 .conv*11 @totalItems
   239 set *tmp29 .state1*11
   240 set *tmp31 .state2*11
-    * jump *label170 greaterThanEq *tmp29 *tmp31
+  241 jump *label170 greaterThanEq .state1*11 .state2*11
   242 op add .total .total 10
   243 label *label170
   244 label *label171
   245 label *label172
   246 label *label173
   247 set *tmp26 .conv*12
-    * sensor .state1*12 *tmp26 @totalItems
+  248 sensor .state1*12 .conv*12 @totalItems
   249 set *tmp29 .state1*12
   250 set *tmp31 .state2*12
-    * jump *label174 greaterThanEq *tmp29 *tmp31
+  251 jump *label174 greaterThanEq .state1*12 .state2*12
   252 op add .total .total 10
   253 label *label174
   254 label *label175
   255 label *label176
   256 label *label177
   257 set *tmp26 .conv*13
-    * sensor .state1*13 *tmp26 @totalItems
+  258 sensor .state1*13 .conv*13 @totalItems
   259 set *tmp29 .state1*13
   260 set *tmp31 .state2*13
-    * jump *label178 greaterThanEq *tmp29 *tmp31
+  261 jump *label178 greaterThanEq .state1*13 .state2*13
   262 op add .total .total 10
   263 label *label178
   264 label *label179
   265 label *label180
   266 label *label181
   267 set *tmp26 .conv*14
-    * sensor .state1*14 *tmp26 @totalItems
+  268 sensor .state1*14 .conv*14 @totalItems
   269 set *tmp29 .state1*14
   270 set *tmp31 .state2*14
-    * jump *label182 greaterThanEq *tmp29 *tmp31
+  271 jump *label182 greaterThanEq .state1*14 .state2*14
   272 op add .total .total 10
   273 label *label182
   274 label *label183
   275 label *label184
   276 label *label185
   277 set *tmp26 .conv*15
-    * sensor .state1*15 *tmp26 @totalItems
+  278 sensor .state1*15 .conv*15 @totalItems
   279 set *tmp29 .state1*15
   280 set *tmp31 .state2*15
-    * jump *label186 greaterThanEq *tmp29 *tmp31
+  281 jump *label186 greaterThanEq .state1*15 .state2*15
   282 op add .total .total 10
   283 label *label186
   284 label *label187
 
   302 label *label189
   303 label *label190
   304 set *tmp41 .conv*0
-    * sensor .state2*0 *tmp41 @totalItems
+  305 sensor .state2*0 .conv*0 @totalItems
   306 set *tmp44 .state2*0
   307 set *tmp46 .state1*0
-    * jump *label191 greaterThanEq *tmp44 *tmp46
+  308 jump *label191 greaterThanEq .state2*0 .state1*0
   309 op add .total .total 10
   310 label *label191
   311 label *label192
   312 label *label193
   313 label *label194
   314 set *tmp41 .conv*1
-    * sensor .state2*1 *tmp41 @totalItems
+  315 sensor .state2*1 .conv*1 @totalItems
   316 set *tmp44 .state2*1
   317 set *tmp46 .state1*1
-    * jump *label195 greaterThanEq *tmp44 *tmp46
+  318 jump *label195 greaterThanEq .state2*1 .state1*1
   319 op add .total .total 10
   320 label *label195
   321 label *label196
   322 label *label197
   323 label *label198
   324 set *tmp41 .conv*2
-    * sensor .state2*2 *tmp41 @totalItems
+  325 sensor .state2*2 .conv*2 @totalItems
   326 set *tmp44 .state2*2
   327 set *tmp46 .state1*2
-    * jump *label199 greaterThanEq *tmp44 *tmp46
+  328 jump *label199 greaterThanEq .state2*2 .state1*2
   329 op add .total .total 10
   330 label *label199
   331 label *label200
   332 label *label201
   333 label *label202
   334 set *tmp41 .conv*3
-    * sensor .state2*3 *tmp41 @totalItems
+  335 sensor .state2*3 .conv*3 @totalItems
   336 set *tmp44 .state2*3
   337 set *tmp46 .state1*3
-    * jump *label203 greaterThanEq *tmp44 *tmp46
+  338 jump *label203 greaterThanEq .state2*3 .state1*3
   339 op add .total .total 10
   340 label *label203
   341 label *label204
   342 label *label205
   343 label *label206
   344 set *tmp41 .conv*4
-    * sensor .state2*4 *tmp41 @totalItems
+  345 sensor .state2*4 .conv*4 @totalItems
   346 set *tmp44 .state2*4
   347 set *tmp46 .state1*4
-    * jump *label207 greaterThanEq *tmp44 *tmp46
+  348 jump *label207 greaterThanEq .state2*4 .state1*4
   349 op add .total .total 10
   350 label *label207
   351 label *label208
   352 label *label209
   353 label *label210
   354 set *tmp41 .conv*5
-    * sensor .state2*5 *tmp41 @totalItems
+  355 sensor .state2*5 .conv*5 @totalItems
   356 set *tmp44 .state2*5
   357 set *tmp46 .state1*5
-    * jump *label211 greaterThanEq *tmp44 *tmp46
+  358 jump *label211 greaterThanEq .state2*5 .state1*5
   359 op add .total .total 10
   360 label *label211
   361 label *label212
   362 label *label213
   363 label *label214
   364 set *tmp41 .conv*6
-    * sensor .state2*6 *tmp41 @totalItems
+  365 sensor .state2*6 .conv*6 @totalItems
   366 set *tmp44 .state2*6
   367 set *tmp46 .state1*6
-    * jump *label215 greaterThanEq *tmp44 *tmp46
+  368 jump *label215 greaterThanEq .state2*6 .state1*6
   369 op add .total .total 10
   370 label *label215
   371 label *label216
   372 label *label217
   373 label *label218
   374 set *tmp41 .conv*7
-    * sensor .state2*7 *tmp41 @totalItems
+  375 sensor .state2*7 .conv*7 @totalItems
   376 set *tmp44 .state2*7
   377 set *tmp46 .state1*7
-    * jump *label219 greaterThanEq *tmp44 *tmp46
+  378 jump *label219 greaterThanEq .state2*7 .state1*7
   379 op add .total .total 10
   380 label *label219
   381 label *label220
   382 label *label221
   383 label *label222
   384 set *tmp41 .conv*8
-    * sensor .state2*8 *tmp41 @totalItems
+  385 sensor .state2*8 .conv*8 @totalItems
   386 set *tmp44 .state2*8
   387 set *tmp46 .state1*8
-    * jump *label223 greaterThanEq *tmp44 *tmp46
+  388 jump *label223 greaterThanEq .state2*8 .state1*8
   389 op add .total .total 10
   390 label *label223
   391 label *label224
   392 label *label225
   393 label *label226
   394 set *tmp41 .conv*9
-    * sensor .state2*9 *tmp41 @totalItems
+  395 sensor .state2*9 .conv*9 @totalItems
   396 set *tmp44 .state2*9
   397 set *tmp46 .state1*9
-    * jump *label227 greaterThanEq *tmp44 *tmp46
+  398 jump *label227 greaterThanEq .state2*9 .state1*9
   399 op add .total .total 10
   400 label *label227
   401 label *label228
   402 label *label229
   403 label *label230
   404 set *tmp41 .conv*10
-    * sensor .state2*10 *tmp41 @totalItems
+  405 sensor .state2*10 .conv*10 @totalItems
   406 set *tmp44 .state2*10
   407 set *tmp46 .state1*10
-    * jump *label231 greaterThanEq *tmp44 *tmp46
+  408 jump *label231 greaterThanEq .state2*10 .state1*10
   409 op add .total .total 10
   410 label *label231
   411 label *label232
   412 label *label233
   413 label *label234
   414 set *tmp41 .conv*11
-    * sensor .state2*11 *tmp41 @totalItems
+  415 sensor .state2*11 .conv*11 @totalItems
   416 set *tmp44 .state2*11
   417 set *tmp46 .state1*11
-    * jump *label235 greaterThanEq *tmp44 *tmp46
+  418 jump *label235 greaterThanEq .state2*11 .state1*11
   419 op add .total .total 10
   420 label *label235
   421 label *label236
   422 label *label237
   423 label *label238
   424 set *tmp41 .conv*12
-    * sensor .state2*12 *tmp41 @totalItems
+  425 sensor .state2*12 .conv*12 @totalItems
   426 set *tmp44 .state2*12
   427 set *tmp46 .state1*12
-    * jump *label239 greaterThanEq *tmp44 *tmp46
+  428 jump *label239 greaterThanEq .state2*12 .state1*12
   429 op add .total .total 10
   430 label *label239
   431 label *label240
   432 label *label241
   433 label *label242
   434 set *tmp41 .conv*13
-    * sensor .state2*13 *tmp41 @totalItems
+  435 sensor .state2*13 .conv*13 @totalItems
   436 set *tmp44 .state2*13
   437 set *tmp46 .state1*13
-    * jump *label243 greaterThanEq *tmp44 *tmp46
+  438 jump *label243 greaterThanEq .state2*13 .state1*13
   439 op add .total .total 10
   440 label *label243
   441 label *label244
   442 label *label245
   443 label *label246
   444 set *tmp41 .conv*14
-    * sensor .state2*14 *tmp41 @totalItems
+  445 sensor .state2*14 .conv*14 @totalItems
   446 set *tmp44 .state2*14
   447 set *tmp46 .state1*14
-    * jump *label247 greaterThanEq *tmp44 *tmp46
+  448 jump *label247 greaterThanEq .state2*14 .state1*14
   449 op add .total .total 10
   450 label *label247
   451 label *label248
   452 label *label249
   453 label *label250
   454 set *tmp41 .conv*15
-    * sensor .state2*15 *tmp41 @totalItems
+  455 sensor .state2*15 .conv*15 @totalItems
   456 set *tmp44 .state2*15
   457 set *tmp46 .state1*15
-    * jump *label251 greaterThanEq *tmp44 *tmp46
+  458 jump *label251 greaterThanEq .state2*15 .state1*15
   459 op add .total .total 10
   460 label *label251
   461 label *label252

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-96 instructions):
 
   124 set :start @time
   125 label *label124
   126 label *label125
-    * set *tmp26 .conv*0
   127 sensor .state1*0 .conv*0 @totalItems
-    * set *tmp29 .state1*0
-    * set *tmp31 .state2*0
   128 jump *label126 greaterThanEq .state1*0 .state2*0
   129 op add .total .total 10
   130 label *label126
   131 label *label127
   132 label *label128
   133 label *label129
-    * set *tmp26 .conv*1
   134 sensor .state1*1 .conv*1 @totalItems
-    * set *tmp29 .state1*1
-    * set *tmp31 .state2*1
   135 jump *label130 greaterThanEq .state1*1 .state2*1
   136 op add .total .total 10
   137 label *label130
   138 label *label131
   139 label *label132
   140 label *label133
-    * set *tmp26 .conv*2
   141 sensor .state1*2 .conv*2 @totalItems
-    * set *tmp29 .state1*2
-    * set *tmp31 .state2*2
   142 jump *label134 greaterThanEq .state1*2 .state2*2
   143 op add .total .total 10
   144 label *label134
   145 label *label135
   146 label *label136
   147 label *label137
-    * set *tmp26 .conv*3
   148 sensor .state1*3 .conv*3 @totalItems
-    * set *tmp29 .state1*3
-    * set *tmp31 .state2*3
   149 jump *label138 greaterThanEq .state1*3 .state2*3
   150 op add .total .total 10
   151 label *label138
   152 label *label139
   153 label *label140
   154 label *label141
-    * set *tmp26 .conv*4
   155 sensor .state1*4 .conv*4 @totalItems
-    * set *tmp29 .state1*4
-    * set *tmp31 .state2*4
   156 jump *label142 greaterThanEq .state1*4 .state2*4
   157 op add .total .total 10
   158 label *label142
   159 label *label143
   160 label *label144
   161 label *label145
-    * set *tmp26 .conv*5
   162 sensor .state1*5 .conv*5 @totalItems
-    * set *tmp29 .state1*5
-    * set *tmp31 .state2*5
   163 jump *label146 greaterThanEq .state1*5 .state2*5
   164 op add .total .total 10
   165 label *label146
   166 label *label147
   167 label *label148
   168 label *label149
-    * set *tmp26 .conv*6
   169 sensor .state1*6 .conv*6 @totalItems
-    * set *tmp29 .state1*6
-    * set *tmp31 .state2*6
   170 jump *label150 greaterThanEq .state1*6 .state2*6
   171 op add .total .total 10
   172 label *label150
   173 label *label151
   174 label *label152
   175 label *label153
-    * set *tmp26 .conv*7
   176 sensor .state1*7 .conv*7 @totalItems
-    * set *tmp29 .state1*7
-    * set *tmp31 .state2*7
   177 jump *label154 greaterThanEq .state1*7 .state2*7
   178 op add .total .total 10
   179 label *label154
   180 label *label155
   181 label *label156
   182 label *label157
-    * set *tmp26 .conv*8
   183 sensor .state1*8 .conv*8 @totalItems
-    * set *tmp29 .state1*8
-    * set *tmp31 .state2*8
   184 jump *label158 greaterThanEq .state1*8 .state2*8
   185 op add .total .total 10
   186 label *label158
   187 label *label159
   188 label *label160
   189 label *label161
-    * set *tmp26 .conv*9
   190 sensor .state1*9 .conv*9 @totalItems
-    * set *tmp29 .state1*9
-    * set *tmp31 .state2*9
   191 jump *label162 greaterThanEq .state1*9 .state2*9
   192 op add .total .total 10
   193 label *label162
   194 label *label163
   195 label *label164
   196 label *label165
-    * set *tmp26 .conv*10
   197 sensor .state1*10 .conv*10 @totalItems
-    * set *tmp29 .state1*10
-    * set *tmp31 .state2*10
   198 jump *label166 greaterThanEq .state1*10 .state2*10
   199 op add .total .total 10
   200 label *label166
   201 label *label167
   202 label *label168
   203 label *label169
-    * set *tmp26 .conv*11
   204 sensor .state1*11 .conv*11 @totalItems
-    * set *tmp29 .state1*11
-    * set *tmp31 .state2*11
   205 jump *label170 greaterThanEq .state1*11 .state2*11
   206 op add .total .total 10
   207 label *label170
   208 label *label171
   209 label *label172
   210 label *label173
-    * set *tmp26 .conv*12
   211 sensor .state1*12 .conv*12 @totalItems
-    * set *tmp29 .state1*12
-    * set *tmp31 .state2*12
   212 jump *label174 greaterThanEq .state1*12 .state2*12
   213 op add .total .total 10
   214 label *label174
   215 label *label175
   216 label *label176
   217 label *label177
-    * set *tmp26 .conv*13
   218 sensor .state1*13 .conv*13 @totalItems
-    * set *tmp29 .state1*13
-    * set *tmp31 .state2*13
   219 jump *label178 greaterThanEq .state1*13 .state2*13
   220 op add .total .total 10
   221 label *label178
   222 label *label179
   223 label *label180
   224 label *label181
-    * set *tmp26 .conv*14
   225 sensor .state1*14 .conv*14 @totalItems
-    * set *tmp29 .state1*14
-    * set *tmp31 .state2*14
   226 jump *label182 greaterThanEq .state1*14 .state2*14
   227 op add .total .total 10
   228 label *label182
   229 label *label183
   230 label *label184
   231 label *label185
-    * set *tmp26 .conv*15
   232 sensor .state1*15 .conv*15 @totalItems
-    * set *tmp29 .state1*15
-    * set *tmp31 .state2*15
   233 jump *label186 greaterThanEq .state1*15 .state2*15
   234 op add .total .total 10
   235 label *label186
 
   253 print "\n"
   254 label *label189
   255 label *label190
-    * set *tmp41 .conv*0
   256 sensor .state2*0 .conv*0 @totalItems
-    * set *tmp44 .state2*0
-    * set *tmp46 .state1*0
   257 jump *label191 greaterThanEq .state2*0 .state1*0
   258 op add .total .total 10
   259 label *label191
   260 label *label192
   261 label *label193
   262 label *label194
-    * set *tmp41 .conv*1
   263 sensor .state2*1 .conv*1 @totalItems
-    * set *tmp44 .state2*1
-    * set *tmp46 .state1*1
   264 jump *label195 greaterThanEq .state2*1 .state1*1
   265 op add .total .total 10
   266 label *label195
   267 label *label196
   268 label *label197
   269 label *label198
-    * set *tmp41 .conv*2
   270 sensor .state2*2 .conv*2 @totalItems
-    * set *tmp44 .state2*2
-    * set *tmp46 .state1*2
   271 jump *label199 greaterThanEq .state2*2 .state1*2
   272 op add .total .total 10
   273 label *label199
   274 label *label200
   275 label *label201
   276 label *label202
-    * set *tmp41 .conv*3
   277 sensor .state2*3 .conv*3 @totalItems
-    * set *tmp44 .state2*3
-    * set *tmp46 .state1*3
   278 jump *label203 greaterThanEq .state2*3 .state1*3
   279 op add .total .total 10
   280 label *label203
   281 label *label204
   282 label *label205
   283 label *label206
-    * set *tmp41 .conv*4
   284 sensor .state2*4 .conv*4 @totalItems
-    * set *tmp44 .state2*4
-    * set *tmp46 .state1*4
   285 jump *label207 greaterThanEq .state2*4 .state1*4
   286 op add .total .total 10
   287 label *label207
   288 label *label208
   289 label *label209
   290 label *label210
-    * set *tmp41 .conv*5
   291 sensor .state2*5 .conv*5 @totalItems
-    * set *tmp44 .state2*5
-    * set *tmp46 .state1*5
   292 jump *label211 greaterThanEq .state2*5 .state1*5
   293 op add .total .total 10
   294 label *label211
   295 label *label212
   296 label *label213
   297 label *label214
-    * set *tmp41 .conv*6
   298 sensor .state2*6 .conv*6 @totalItems
-    * set *tmp44 .state2*6
-    * set *tmp46 .state1*6
   299 jump *label215 greaterThanEq .state2*6 .state1*6
   300 op add .total .total 10
   301 label *label215
   302 label *label216
   303 label *label217
   304 label *label218
-    * set *tmp41 .conv*7
   305 sensor .state2*7 .conv*7 @totalItems
-    * set *tmp44 .state2*7
-    * set *tmp46 .state1*7
   306 jump *label219 greaterThanEq .state2*7 .state1*7
   307 op add .total .total 10
   308 label *label219
   309 label *label220
   310 label *label221
   311 label *label222
-    * set *tmp41 .conv*8
   312 sensor .state2*8 .conv*8 @totalItems
-    * set *tmp44 .state2*8
-    * set *tmp46 .state1*8
   313 jump *label223 greaterThanEq .state2*8 .state1*8
   314 op add .total .total 10
   315 label *label223
   316 label *label224
   317 label *label225
   318 label *label226
-    * set *tmp41 .conv*9
   319 sensor .state2*9 .conv*9 @totalItems
-    * set *tmp44 .state2*9
-    * set *tmp46 .state1*9
   320 jump *label227 greaterThanEq .state2*9 .state1*9
   321 op add .total .total 10
   322 label *label227
   323 label *label228
   324 label *label229
   325 label *label230
-    * set *tmp41 .conv*10
   326 sensor .state2*10 .conv*10 @totalItems
-    * set *tmp44 .state2*10
-    * set *tmp46 .state1*10
   327 jump *label231 greaterThanEq .state2*10 .state1*10
   328 op add .total .total 10
   329 label *label231
   330 label *label232
   331 label *label233
   332 label *label234
-    * set *tmp41 .conv*11
   333 sensor .state2*11 .conv*11 @totalItems
-    * set *tmp44 .state2*11
-    * set *tmp46 .state1*11
   334 jump *label235 greaterThanEq .state2*11 .state1*11
   335 op add .total .total 10
   336 label *label235
   337 label *label236
   338 label *label237
   339 label *label238
-    * set *tmp41 .conv*12
   340 sensor .state2*12 .conv*12 @totalItems
-    * set *tmp44 .state2*12
-    * set *tmp46 .state1*12
   341 jump *label239 greaterThanEq .state2*12 .state1*12
   342 op add .total .total 10
   343 label *label239
   344 label *label240
   345 label *label241
   346 label *label242
-    * set *tmp41 .conv*13
   347 sensor .state2*13 .conv*13 @totalItems
-    * set *tmp44 .state2*13
-    * set *tmp46 .state1*13
   348 jump *label243 greaterThanEq .state2*13 .state1*13
   349 op add .total .total 10
   350 label *label243
   351 label *label244
   352 label *label245
   353 label *label246
-    * set *tmp41 .conv*14
   354 sensor .state2*14 .conv*14 @totalItems
-    * set *tmp44 .state2*14
-    * set *tmp46 .state1*14
   355 jump *label247 greaterThanEq .state2*14 .state1*14
   356 op add .total .total 10
   357 label *label247
   358 label *label248
   359 label *label249
   360 label *label250
-    * set *tmp41 .conv*15
   361 sensor .state2*15 .conv*15 @totalItems
-    * set *tmp44 .state2*15
-    * set *tmp46 .state1*15
   362 jump *label251 greaterThanEq .state2*15 .state1*15
   363 op add .total .total 10
   364 label *label251

Modifications by Virtual Instruction Expansion:
 
    65 jump *label29 notEqual *tmp4 @plastanium-conveyor
    66 label *label30
    67 jump *label31 greaterThanEq .found 16
-    * writearr :initialize.0:block .conv[] .found
+   68 setaddr .conv*wret *label270
+   69 set .conv*w :initialize.0:block
+   70 op mul *tmp59 .found 2
+   71 multicall *label254 *tmp59 marker1
+   72 label *label270
    73 label *label31
    74 label *label32
    75 op add .found .found 1
 
   388 set .total 0
   389 write 0 .memory .totalIndex
   390 end
+  391 multilabel *label254 marker1
+  392 set .conv*0 .conv*w
+  393 return .conv*wret
+  394 multilabel *label255 marker1
+  395 set .conv*1 .conv*w
+  396 return .conv*wret
+  397 multilabel *label256 marker1
+  398 set .conv*2 .conv*w
+  399 return .conv*wret
+  400 multilabel *label257 marker1
+  401 set .conv*3 .conv*w
+  402 return .conv*wret
+  403 multilabel *label258 marker1
+  404 set .conv*4 .conv*w
+  405 return .conv*wret
+  406 multilabel *label259 marker1
+  407 set .conv*5 .conv*w
+  408 return .conv*wret
+  409 multilabel *label260 marker1
+  410 set .conv*6 .conv*w
+  411 return .conv*wret
+  412 multilabel *label261 marker1
+  413 set .conv*7 .conv*w
+  414 return .conv*wret
+  415 multilabel *label262 marker1
+  416 set .conv*8 .conv*w
+  417 return .conv*wret
+  418 multilabel *label263 marker1
+  419 set .conv*9 .conv*w
+  420 return .conv*wret
+  421 multilabel *label264 marker1
+  422 set .conv*10 .conv*w
+  423 return .conv*wret
+  424 multilabel *label265 marker1
+  425 set .conv*11 .conv*w
+  426 return .conv*wret
+  427 multilabel *label266 marker1
+  428 set .conv*12 .conv*w
+  429 return .conv*wret
+  430 multilabel *label267 marker1
+  431 set .conv*13 .conv*w
+  432 return .conv*wret
+  433 multilabel *label268 marker1
+  434 set .conv*14 .conv*w
+  435 return .conv*wret
+  436 multilabel *label269 marker1
+  437 set .conv*15 .conv*w
+  438 return .conv*wret

Modifications by Final phase, Jump Threading, iteration 1:
 
    89 print .found
    90 print ")"
    91 printflush message1
-    * jump *label34 always
+   92 jump *label1 always
    93 label *label33
    94 jump *label35 lessThanEq .found 16
    95 print "[gold]Item Counter[], version [gold]1.0[]"
 
   101 print .found
   102 print ")"
   103 printflush message1
-    * jump *label36 always
+  104 jump *label1 always
   105 label *label35
   106 jump *label37 notEqual .memory null
   107 print "$TITLE\n[salmon]No memory attached."
   108 printflush message1
-    * jump *label38 always
+  109 jump *label1 always
   110 label *label37
   111 set *tmp19 511
   112 sensor *tmp17 .memory @type

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-1 instructions):
 
   116 set .totalIndex *tmp19
   117 read .total .memory *tmp19
   118 jump *label3 always
-    * label *label38
-    * label *label36
-    * label *label34
-    * label *label2
-    * jump *label1 always
   119 label *label3
   120 label *label0
   121 control enabled switch1 false

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
   115 label *label40
   116 set .totalIndex *tmp19
   117 read .total .memory *tmp19
-    * jump *label3 always
   118 label *label3
   119 label *label0
   120 control enabled switch1 false

Modifications by Final phase, Print Merging, iteration 1 (-21 instructions):
 
    80 jump *label56 greaterThanEq :initialize.0:n 0
    81 label *label25
    82 jump *label33 notEqual .found 0
-    * print "[gold]Item Counter[], version [gold]1.0[]"
-    * print "\"
-    * print "n[salmon]No plastanium conveyor attached (maximum: "
-    * print 16
-    * print ","
-    * print " found: "
+   83 print "[gold]Item Counter[], version [gold]1.0[]\n[salmon]No plastanium conveyor attached (maximum: 16, found: "
    84 print .found
    85 print ")"
    86 printflush message1
    87 jump *label1 always
    88 label *label33
    89 jump *label35 lessThanEq .found 16
-    * print "[gold]Item Counter[], version [gold]1.0[]"
-    * print "\"
-    * print "n[salmon]Too many plastanium conveyors attached (maximum: "
-    * print 16
-    * print ","
-    * print " found: "
+   90 print "[gold]Item Counter[], version [gold]1.0[]\n[salmon]Too many plastanium conveyors attached (maximum: 16, found: "
    91 print .found
    92 print ")"
    93 printflush message1
 
   225 label *label188
   226 label *label46
   227 write .total .memory .totalIndex
-    * print "[gold]Item Counter[], version [gold]1.0[]"
-    * print " "
-    * print "           "
-    * print "\n"
-    * print "Monitoring [green]"
+  228 print "[gold]Item Counter[], version [gold]1.0[]            \nMonitoring [green]"
   229 print .found
-    * print "["
-    * print "] conveyors"
-    * print "\n"
-    * print "Total items: [gold]"
+  230 print "[] conveyors\nTotal items: [gold]"
   231 print .total
-    * print "["
-    * print "]"
-    * print "\n"
+  232 print "[]\n"
   233 label *label189
   234 label *label190
   235 sensor .state2*0 .conv*0 @totalItems
 
   348 op idiv *tmp52 *tmp50 2
   349 print "[lightgray]Loop time: "
   350 print *tmp52
-    * print " "
-    * print "ms"
-    * print "\n"
+  351 print " ms\n"
   352 printflush message1
   353 jump *label54 equal .links @links
   354 end

Final code before resolving virtual instructions:

        label *label1                                                while true do
    0:  set .conv*0 null                                             for var out c in conv do c = null; end;
    1:  set .conv*1 null                                             ...
    2:  set .conv*2 null                                             ...
    3:  set .conv*3 null                                             ...
    4:  set .conv*4 null                                             ...
    5:  set .conv*5 null                                             ...
    6:  set .conv*6 null                                             ...
    7:  set .conv*7 null                                             ...
    8:  set .conv*8 null                                             ...
    9:  set .conv*9 null                                             ...
   10:  set .conv*10 null                                            ...
   11:  set .conv*11 null                                            ...
   12:  set .conv*12 null                                            ...
   13:  set .conv*13 null                                            ...
   14:  set .conv*14 null                                            ...
   15:  set .conv*15 null                                            ...
   16:  set .memory null                                             memory = null;
   17:  set .found 0                                                 found = 0;
   18:  set .links @links                                            links = @links;
   19:  op sub :initialize.0:n .links 1                              for var n in 0 ... links descending do
   20:  jump *label25 lessThan :initialize.0:n 0                     ...
        label *label56                                               ...
   21:  getlink :initialize.0:block :initialize.0:n                  var block = getlink(n);
   22:  sensor *tmp4 :initialize.0:block @type                       case block.@type
   23:  jump *label28 equal *tmp4 @memory-cell                       ...
   24:  jump *label27 notEqual *tmp4 @memory-bank                    ...
        label *label28                                               ...
   25:  set .memory :initialize.0:block                              memory = block;
   26:  jump *label26 always 0 0                                     case block.@type
        label *label27                                               ...
   27:  jump *label29 notEqual *tmp4 @plastanium-conveyor            ...
   28:  jump *label31 greaterThanEq .found 16                        if found < MAX_LINKED then
   29:  setaddr .conv*wret *label270                                 conv[found] = block;
   30:  set .conv*w :initialize.0:block                              ...
   31:  op mul *tmp59 .found 2                                       ...
   32:  multicall *label254 *tmp59 marker1                           ...
        label *label270                                              ...
        label *label31                                               if found < MAX_LINKED then
   33:  op add .found .found 1                                       case block.@type
        label *label29                                               ...
        label *label26                                               ...
   34:  op sub :initialize.0:n :initialize.0:n 1                     for var n in 0 ... links descending do
   35:  jump *label56 greaterThanEq :initialize.0:n 0                ...
        label *label25                                               ...
   36:  jump *label33 notEqual .found 0                              if found == 0 then
   37:  print "[gold]Item Counter[], version [gold]1.0[]\n[salmon]No print($"$TITLE\n[salmon]No plastanium conveyor attached (maximum: $MAX_LINKED, found: $found)");
   38:  print .found                                                 ...
   39:  print ")"                                                    ...
   40:  printflush message1                                          printflush(message1);
   41:  jump *label1 always 0 0                                      if found == 0 then
        label *label33                                               ...
   42:  jump *label35 lessThanEq .found 16                           elsif found > MAX_LINKED then
   43:  print "[gold]Item Counter[], version [gold]1.0[]\n[salmon]To print($"$TITLE\n[salmon]Too many plastanium conveyors attached (maximum: $MAX_LINKED, found: $found)");
   44:  print .found                                                 ...
   45:  print ")"                                                    ...
   46:  printflush message1                                          printflush(message1);
   47:  jump *label1 always 0 0                                      elsif found > MAX_LINKED then
        label *label35                                               ...
   48:  jump *label37 notEqual .memory null                          elsif memory == null then
   49:  print "$TITLE\n[salmon]No memory attached."                  print("$TITLE\n[salmon]No memory attached.");
   50:  printflush message1                                          printflush(message1);
   51:  jump *label1 always 0 0                                      elsif memory == null then
        label *label37                                               ...
   52:  set *tmp19 511                                               totalIndex = memory.@type == @memory-cell ? 63 : 511;
   53:  sensor *tmp17 .memory @type                                  ...
   54:  jump *label40 notEqual *tmp17 @memory-cell                   ...
   55:  set *tmp19 63                                                ...
        label *label40                                               ...
   56:  set .totalIndex *tmp19                                       ...
   57:  read .total .memory *tmp19                                   total = memory[totalIndex];
   58:  control enabled switch1 false 0 0 0                          switch1.enabled = false;
        label *label41                                               do
   59:  set :start @time                                             var start = @time;
   60:  sensor .state1*0 .conv*0 @totalItems                         state1[i] = conv[i].@totalItems;
   61:  jump *label126 greaterThanEq .state1*0 .state2*0             if state1[i] < state2[i] then
   62:  op add .total .total 10                                      total += 10;
        label *label126                                              if state1[i] < state2[i] then
   63:  sensor .state1*1 .conv*1 @totalItems                         state1[i] = conv[i].@totalItems;
   64:  jump *label130 greaterThanEq .state1*1 .state2*1             if state1[i] < state2[i] then
   65:  op add .total .total 10                                      total += 10;
        label *label130                                              if state1[i] < state2[i] then
   66:  sensor .state1*2 .conv*2 @totalItems                         state1[i] = conv[i].@totalItems;
   67:  jump *label134 greaterThanEq .state1*2 .state2*2             if state1[i] < state2[i] then
   68:  op add .total .total 10                                      total += 10;
        label *label134                                              if state1[i] < state2[i] then
   69:  sensor .state1*3 .conv*3 @totalItems                         state1[i] = conv[i].@totalItems;
   70:  jump *label138 greaterThanEq .state1*3 .state2*3             if state1[i] < state2[i] then
   71:  op add .total .total 10                                      total += 10;
        label *label138                                              if state1[i] < state2[i] then
   72:  sensor .state1*4 .conv*4 @totalItems                         state1[i] = conv[i].@totalItems;
   73:  jump *label142 greaterThanEq .state1*4 .state2*4             if state1[i] < state2[i] then
   74:  op add .total .total 10                                      total += 10;
        label *label142                                              if state1[i] < state2[i] then
   75:  sensor .state1*5 .conv*5 @totalItems                         state1[i] = conv[i].@totalItems;
   76:  jump *label146 greaterThanEq .state1*5 .state2*5             if state1[i] < state2[i] then
   77:  op add .total .total 10                                      total += 10;
        label *label146                                              if state1[i] < state2[i] then
   78:  sensor .state1*6 .conv*6 @totalItems                         state1[i] = conv[i].@totalItems;
   79:  jump *label150 greaterThanEq .state1*6 .state2*6             if state1[i] < state2[i] then
   80:  op add .total .total 10                                      total += 10;
        label *label150                                              if state1[i] < state2[i] then
   81:  sensor .state1*7 .conv*7 @totalItems                         state1[i] = conv[i].@totalItems;
   82:  jump *label154 greaterThanEq .state1*7 .state2*7             if state1[i] < state2[i] then
   83:  op add .total .total 10                                      total += 10;
        label *label154                                              if state1[i] < state2[i] then
   84:  sensor .state1*8 .conv*8 @totalItems                         state1[i] = conv[i].@totalItems;
   85:  jump *label158 greaterThanEq .state1*8 .state2*8             if state1[i] < state2[i] then
   86:  op add .total .total 10                                      total += 10;
        label *label158                                              if state1[i] < state2[i] then
   87:  sensor .state1*9 .conv*9 @totalItems                         state1[i] = conv[i].@totalItems;
   88:  jump *label162 greaterThanEq .state1*9 .state2*9             if state1[i] < state2[i] then
   89:  op add .total .total 10                                      total += 10;
        label *label162                                              if state1[i] < state2[i] then
   90:  sensor .state1*10 .conv*10 @totalItems                       state1[i] = conv[i].@totalItems;
   91:  jump *label166 greaterThanEq .state1*10 .state2*10           if state1[i] < state2[i] then
   92:  op add .total .total 10                                      total += 10;
        label *label166                                              if state1[i] < state2[i] then
   93:  sensor .state1*11 .conv*11 @totalItems                       state1[i] = conv[i].@totalItems;
   94:  jump *label170 greaterThanEq .state1*11 .state2*11           if state1[i] < state2[i] then
   95:  op add .total .total 10                                      total += 10;
        label *label170                                              if state1[i] < state2[i] then
   96:  sensor .state1*12 .conv*12 @totalItems                       state1[i] = conv[i].@totalItems;
   97:  jump *label174 greaterThanEq .state1*12 .state2*12           if state1[i] < state2[i] then
   98:  op add .total .total 10                                      total += 10;
        label *label174                                              if state1[i] < state2[i] then
   99:  sensor .state1*13 .conv*13 @totalItems                       state1[i] = conv[i].@totalItems;
  100:  jump *label178 greaterThanEq .state1*13 .state2*13           if state1[i] < state2[i] then
  101:  op add .total .total 10                                      total += 10;
        label *label178                                              if state1[i] < state2[i] then
  102:  sensor .state1*14 .conv*14 @totalItems                       state1[i] = conv[i].@totalItems;
  103:  jump *label182 greaterThanEq .state1*14 .state2*14           if state1[i] < state2[i] then
  104:  op add .total .total 10                                      total += 10;
        label *label182                                              if state1[i] < state2[i] then
  105:  sensor .state1*15 .conv*15 @totalItems                       state1[i] = conv[i].@totalItems;
  106:  jump *label186 greaterThanEq .state1*15 .state2*15           if state1[i] < state2[i] then
  107:  op add .total .total 10                                      total += 10;
        label *label186                                              if state1[i] < state2[i] then
  108:  write .total .memory .totalIndex                             memory[totalIndex] = total;
  109:  print "[gold]Item Counter[], version [gold]1.0[]             println($"Monitoring [green]$found[] conveyors");
  110:  print .found                                                 ...
  111:  print "[] conveyors\nTotal items: [gold]"                    println($"Total items: [gold]$total[]");
  112:  print .total                                                 ...
  113:  print "[]\n"                                                 ...
  114:  sensor .state2*0 .conv*0 @totalItems                         state2[i] = conv[i].@totalItems;
  115:  jump *label191 greaterThanEq .state2*0 .state1*0             if state2[i] < state1[i] then
  116:  op add .total .total 10                                      total += 10;
        label *label191                                              if state2[i] < state1[i] then
  117:  sensor .state2*1 .conv*1 @totalItems                         state2[i] = conv[i].@totalItems;
  118:  jump *label195 greaterThanEq .state2*1 .state1*1             if state2[i] < state1[i] then
  119:  op add .total .total 10                                      total += 10;
        label *label195                                              if state2[i] < state1[i] then
  120:  sensor .state2*2 .conv*2 @totalItems                         state2[i] = conv[i].@totalItems;
  121:  jump *label199 greaterThanEq .state2*2 .state1*2             if state2[i] < state1[i] then
  122:  op add .total .total 10                                      total += 10;
        label *label199                                              if state2[i] < state1[i] then
  123:  sensor .state2*3 .conv*3 @totalItems                         state2[i] = conv[i].@totalItems;
  124:  jump *label203 greaterThanEq .state2*3 .state1*3             if state2[i] < state1[i] then
  125:  op add .total .total 10                                      total += 10;
        label *label203                                              if state2[i] < state1[i] then
  126:  sensor .state2*4 .conv*4 @totalItems                         state2[i] = conv[i].@totalItems;
  127:  jump *label207 greaterThanEq .state2*4 .state1*4             if state2[i] < state1[i] then
  128:  op add .total .total 10                                      total += 10;
        label *label207                                              if state2[i] < state1[i] then
  129:  sensor .state2*5 .conv*5 @totalItems                         state2[i] = conv[i].@totalItems;
  130:  jump *label211 greaterThanEq .state2*5 .state1*5             if state2[i] < state1[i] then
  131:  op add .total .total 10                                      total += 10;
        label *label211                                              if state2[i] < state1[i] then
  132:  sensor .state2*6 .conv*6 @totalItems                         state2[i] = conv[i].@totalItems;
  133:  jump *label215 greaterThanEq .state2*6 .state1*6             if state2[i] < state1[i] then
  134:  op add .total .total 10                                      total += 10;
        label *label215                                              if state2[i] < state1[i] then
  135:  sensor .state2*7 .conv*7 @totalItems                         state2[i] = conv[i].@totalItems;
  136:  jump *label219 greaterThanEq .state2*7 .state1*7             if state2[i] < state1[i] then
  137:  op add .total .total 10                                      total += 10;
        label *label219                                              if state2[i] < state1[i] then
  138:  sensor .state2*8 .conv*8 @totalItems                         state2[i] = conv[i].@totalItems;
  139:  jump *label223 greaterThanEq .state2*8 .state1*8             if state2[i] < state1[i] then
  140:  op add .total .total 10                                      total += 10;
        label *label223                                              if state2[i] < state1[i] then
  141:  sensor .state2*9 .conv*9 @totalItems                         state2[i] = conv[i].@totalItems;
  142:  jump *label227 greaterThanEq .state2*9 .state1*9             if state2[i] < state1[i] then
  143:  op add .total .total 10                                      total += 10;
        label *label227                                              if state2[i] < state1[i] then
  144:  sensor .state2*10 .conv*10 @totalItems                       state2[i] = conv[i].@totalItems;
  145:  jump *label231 greaterThanEq .state2*10 .state1*10           if state2[i] < state1[i] then
  146:  op add .total .total 10                                      total += 10;
        label *label231                                              if state2[i] < state1[i] then
  147:  sensor .state2*11 .conv*11 @totalItems                       state2[i] = conv[i].@totalItems;
  148:  jump *label235 greaterThanEq .state2*11 .state1*11           if state2[i] < state1[i] then
  149:  op add .total .total 10                                      total += 10;
        label *label235                                              if state2[i] < state1[i] then
  150:  sensor .state2*12 .conv*12 @totalItems                       state2[i] = conv[i].@totalItems;
  151:  jump *label239 greaterThanEq .state2*12 .state1*12           if state2[i] < state1[i] then
  152:  op add .total .total 10                                      total += 10;
        label *label239                                              if state2[i] < state1[i] then
  153:  sensor .state2*13 .conv*13 @totalItems                       state2[i] = conv[i].@totalItems;
  154:  jump *label243 greaterThanEq .state2*13 .state1*13           if state2[i] < state1[i] then
  155:  op add .total .total 10                                      total += 10;
        label *label243                                              if state2[i] < state1[i] then
  156:  sensor .state2*14 .conv*14 @totalItems                       state2[i] = conv[i].@totalItems;
  157:  jump *label247 greaterThanEq .state2*14 .state1*14           if state2[i] < state1[i] then
  158:  op add .total .total 10                                      total += 10;
        label *label247                                              if state2[i] < state1[i] then
  159:  sensor .state2*15 .conv*15 @totalItems                       state2[i] = conv[i].@totalItems;
  160:  jump *label251 greaterThanEq .state2*15 .state1*15           if state2[i] < state1[i] then
  161:  op add .total .total 10                                      total += 10;
        label *label251                                              if state2[i] < state1[i] then
  162:  op sub *tmp50 @time :start                                   println($"[lightgray]Loop time: $ ms", floor((@time - start) / 2));
  163:  op idiv *tmp52 *tmp50 2                                      ...
  164:  print "[lightgray]Loop time: "                               ...
  165:  print *tmp52                                                 ...
  166:  print " ms\n"                                                ...
  167:  printflush message1                                          printflush(message1);
  168:  jump *label54 equal .links @links                            if links != @links then
  169:  end                                                          end();
        label *label54                                               if links != @links then
  170:  sensor *tmp55 switch1 @enabled                               while !switch1.@enabled;
  171:  jump *label41 equal *tmp55 false                             do
  172:  set .total 0                                                 total = 0;
  173:  write 0 .memory .totalIndex                                  memory[totalIndex] = 0;
  174:  end
        multilabel *label254 marker1
  175:  set .conv*0 .conv*w
  176:  return .conv*wret
        multilabel *label255 marker1
  177:  set .conv*1 .conv*w
  178:  return .conv*wret
        multilabel *label256 marker1
  179:  set .conv*2 .conv*w
  180:  return .conv*wret
        multilabel *label257 marker1
  181:  set .conv*3 .conv*w
  182:  return .conv*wret
        multilabel *label258 marker1
  183:  set .conv*4 .conv*w
  184:  return .conv*wret
        multilabel *label259 marker1
  185:  set .conv*5 .conv*w
  186:  return .conv*wret
        multilabel *label260 marker1
  187:  set .conv*6 .conv*w
  188:  return .conv*wret
        multilabel *label261 marker1
  189:  set .conv*7 .conv*w
  190:  return .conv*wret
        multilabel *label262 marker1
  191:  set .conv*8 .conv*w
  192:  return .conv*wret
        multilabel *label263 marker1
  193:  set .conv*9 .conv*w
  194:  return .conv*wret
        multilabel *label264 marker1
  195:  set .conv*10 .conv*w
  196:  return .conv*wret
        multilabel *label265 marker1
  197:  set .conv*11 .conv*w
  198:  return .conv*wret
        multilabel *label266 marker1
  199:  set .conv*12 .conv*w
  200:  return .conv*wret
        multilabel *label267 marker1
  201:  set .conv*13 .conv*w
  202:  return .conv*wret
        multilabel *label268 marker1
  203:  set .conv*14 .conv*w
  204:  return .conv*wret
        multilabel *label269 marker1
  205:  set .conv*15 .conv*w
  206:  return .conv*wret


Performance: parsed in 191 ms, compiled in 261 ms, optimized in 397 ms, run in 84 ms.

Compiled mlog code was sent to Mlog Watcher.
  No response from Mlog Watcher - maybe an old version is installed?

Program output (100,000 steps):
[gold]Item Counter[], version [gold]1.0[]
[salmon]No plastanium conveyor attached (maximum: 16, found: 0)
[--- Previous segment repeated 346,00 times ---]

Execution step limit of 100 000 exceeded.
