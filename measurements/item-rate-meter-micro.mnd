// Item counter for logic processor. Can handle 20 plastanium conveyors at once.
// For safety, the limit is set to 16.

//#set target = 8;
#set syntax = strict;

const VERSION = "1.0";
const TITLE = "[gold]Item Rate Meter Micro[], version [gold]" + VERSION + "[]";

require "item-rate-meter-init.mnd";

// The update frequency is 1 Hz (once per second, non configurable)

// Length of the smoothing window in measurements
// The length in ticks is SMOOTHING / 4
param SMOOTHING = 20;

// Measurement interval in ticks: non-configurable, 4 measurements per second
// The code is optimized to fit between measurements
const MEASUREMENT = 15;

begin
    printflush(null);
    init();

    // Clearing up cache
    cacheSize = min(SMOOTHING, cacheSize);
    var divisor = cacheSize * MEASUREMENT;
    for var i in 0 ... cacheSize do primaryMem[i] = 0; end;
    var cacheHead = 0;
    
    var head = max(bufferStart, secondaryMem[headIndex]);
    var step = 1;
    var total = 0;
    var rate = 0;

    switch.enabled = false;
    var prevTick;
    var nextTick = @tick;
    var prev = primaryMem[totalIndex];
    var waits = 0;

MainLoop:
    do
        prevTick = nextTick;
        nextTick += MEASUREMENT;
        if @tick > nextTick + MEASUREMENT then
            // @tick has jumped too far to the future, reset it
            // Either the processor lags, or there was map reload
            nextTick = @tick + MEASUREMENT;
            prev = primaryMem[totalIndex];
        end;

        while @tick < nextTick do
            if @tick < prevTick then
                // Ticks can decrease after a map reload.
                // Restart everything to prevent getting stuck in a long loop
                break MainLoop;
            end;

            // Waits bitmap
            waits += step;

            // Wait till next tick, save execution quota
            wait(1e-15);
        end;

        var curr = primaryMem[totalIndex];
        var amount = curr - prev;
        prev = curr;

        // Update total: subtract oldest value, add newest value
        total = total - primaryMem[cacheHead] + amount;
        primaryMem[cacheHead] = amount;
        cacheHead = (cacheHead + 1) % cacheSize;

        step *= 10;

        // Step determines the section of code to run
        // It takes a value of 2, 4, 8 or 16, after which it loops back to 2 (due to the above multiplication)
        // Multiples of 2 are used, instead of increments, since the step gets or-ed to the `waits`
        // variable when a wait actually happens.

        // Binary search: two jumps for each possible value of step
        if step <= 100 then
            if step == 10 then
                rate = total / divisor;
                if ++head >= bufferEnd then
                    head = bufferStart;
                end;
                secondaryMem[headIndex] = head;
                secondaryMem[head] = rate;
            else  // step == 100
                primaryMem[valueIndex] = rate;
                println($"$TITLE");
                println($"Total items: [gold]$curr[]");
                print("Current rate [green]");
            end;
        else
            if step == 1000 then
                println(floor(rate * 3600), "[]/min");
                print("[lightgray]Waits: ");
            else // step == 10000
                // If waits os not equal to 15, a step took too long to execute
                // Possible to add 3 instructions
                print(waits);
                printflush(message);
                waits = 0;
                step = 1;
            end;
        end;
    while !switch.@enabled;
end;

