File level-display.mnd: number of reported ambiguities: 25
Active optimizations:
    case-expression-optimization = experimental,
    case-switching = experimental,
    data-flow-optimization = experimental,
    dead-code-elimination = experimental,
    expression-optimization = experimental,
    function-inlining = experimental,
    if-expression-optimization = experimental,
    jump-normalization = experimental,
    jump-optimization = experimental,
    jump-straightening = experimental,
    jump-threading = experimental,
    loop-hoisting = experimental,
    loop-optimization = experimental,
    loop-unrolling = experimental,
    print-merging = experimental,
    return-optimization = experimental,
    single-step-elimination = experimental,
    stack-optimization = experimental,
    temp-variables-elimination = experimental,
    unreachable-code-elimination = experimental

   150 instructions before optimizations.
    26 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     7 instructions eliminated by Dead Code Elimination (3 iterations).
     6 instructions eliminated by Jump Optimization (3 iterations).
     3 instructions eliminated by Single Step Elimination (2 passes, 5 iterations).
    16 instructions eliminated by Data Flow Optimization (2 passes, 7 iterations).
     2 instructions added by Loop Optimization (2 iterations).
     5 loops improved by Loop Optimization.
     4 instructions eliminated by Jump Straightening (3 iterations).
     1 instructions eliminated by Print Merging.
    88 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 905):
  * Loop Optimization: replicate condition at line 49            cost     1, benefit       25.0, efficiency       25.0 (-5 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    38 print "\nFound: "
    39 print block
    40 sensor __tmp16 block @type
-    * set __ast0 __tmp16
-    * jump __label8 equal __ast0 @large-logic-display
+   41 jump __label8 equal __tmp16 @large-logic-display
    42 jump __label7 always
    43 label __label8
    44 set DISPLAY block
    45 set __tmp17 DISPLAY
    46 jump __label6 always
    47 label __label7
-    * jump __label10 equal __ast0 @message
+   48 jump __label10 equal __tmp16 @message
    49 jump __label9 always
    50 label __label10
    51 set MESSAGE block
    52 set __tmp17 MESSAGE
    53 jump __label6 always
    54 label __label9
-    * jump __label12 equal __ast0 @switch
+   55 jump __label12 equal __tmp16 @switch
    56 jump __label11 always
    57 label __label12
    58 set SWITCH block
    59 set __tmp17 SWITCH
    60 jump __label6 always
    61 label __label11
-    * jump __label14 equal __ast0 @memory-bank
-    * jump __label14 equal __ast0 @memory-cell
+   62 jump __label14 equal __tmp16 @memory-bank
+   63 jump __label14 equal __tmp16 @memory-cell
    64 jump __label13 always
    65 label __label14
    66 set MEMORY block

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-7 instructions):
 
    42 jump __label7 always
    43 label __label8
    44 set DISPLAY block
-    * set __tmp17 DISPLAY
    45 jump __label6 always
    46 label __label7
    47 jump __label10 equal __tmp16 @message
    48 jump __label9 always
    49 label __label10
    50 set MESSAGE block
-    * set __tmp17 MESSAGE
    51 jump __label6 always
    52 label __label9
    53 jump __label12 equal __tmp16 @switch
    54 jump __label11 always
    55 label __label12
    56 set SWITCH block
-    * set __tmp17 SWITCH
    57 jump __label6 always
    58 label __label11
    59 jump __label14 equal __tmp16 @memory-bank
 
    61 jump __label13 always
    62 label __label14
    63 set MEMORY block
-    * set __tmp17 MEMORY
    64 jump __label6 always
    65 label __label13
-    * set __tmp17 null
    66 label __label6
    67 label __label4
    68 jump __label3 always
 
    81 op notEqual __tmp21 __tmp20 false
    82 jump __label15 equal __tmp21 false
    83 print "\nNo memory or display."
-    * set __tmp22 "\nNo memory or display."
    84 jump __label16 always
    85 label __label15
-    * set __tmp22 null
    86 label __label16
    87 printflush MESSAGE
    88 label __label1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-26 instructions):
 
     3 set MESSAGE null
     4 set SWITCH null
     5 set M_START_INDEX 0
-    * op add __tmp0 M_START_INDEX 1
-    * set M_CURRENT_INDEX __tmp0
-    * op add __tmp1 M_CURRENT_INDEX 1
-    * set M_END_INDEX __tmp1
-    * op add __tmp2 M_END_INDEX 1
-    * set M_R0 __tmp2
-    * op add __tmp3 M_R0 1
-    * set M_G0 __tmp3
-    * op add __tmp4 M_G0 1
-    * set M_B0 __tmp4
-    * op add __tmp5 M_B0 1
-    * set M_R1 __tmp5
-    * op add __tmp6 M_R1 1
-    * set M_G1 __tmp6
-    * op add __tmp7 M_G1 1
-    * set M_B1 __tmp7
+    6 op add M_CURRENT_INDEX M_START_INDEX 1
+    7 op add M_END_INDEX M_CURRENT_INDEX 1
+    8 op add M_R0 M_END_INDEX 1
+    9 op add M_G0 M_R0 1
+   10 op add M_B0 M_G0 1
+   11 op add M_R1 M_B0 1
+   12 op add M_G1 M_R1 1
+   13 op add M_B1 M_G1 1
    14 label __label0
    15 op equal __tmp8 MEMORY null
    16 op equal __tmp9 DISPLAY null
 
    18 op notEqual __tmp11 __tmp10 false
    19 jump __label2 equal __tmp11 false
    20 print "Item/Liquid/Energy Level Display"
-    * set __tmp12 @links
-    * set n __tmp12
+   21 set n @links
    22 label __label3
    23 op greaterThan __tmp13 n 0
    24 jump __label5 equal __tmp13 false
-    * op sub __tmp14 n 1
-    * set n __tmp14
-    * getlink __tmp15 n
-    * set block __tmp15
+   25 op sub n n 1
+   26 getlink block n
    27 print "\nFound: "
    28 print block
    29 sensor __tmp16 block @type
 
    77 label __label1
    78 jump __label0 always
    79 label __label2
-    * read __tmp23 MEMORY M_CURRENT_INDEX
-    * set CURRENT_INDEX __tmp23
-    * read __tmp24 MEMORY M_R0
-    * set R0 __tmp24
-    * read __tmp25 MEMORY M_G0
-    * set G0 __tmp25
-    * read __tmp26 MEMORY M_B0
-    * set B0 __tmp26
-    * read __tmp27 MEMORY M_R1
-    * set R1 __tmp27
-    * read __tmp28 MEMORY M_G1
-    * set G1 __tmp28
-    * read __tmp29 MEMORY M_B1
-    * set B1 __tmp29
+   80 read CURRENT_INDEX MEMORY M_CURRENT_INDEX
+   81 read R0 MEMORY M_R0
+   82 read G0 MEMORY M_G0
+   83 read B0 MEMORY M_B0
+   84 read R1 MEMORY M_R1
+   85 read G1 MEMORY M_G1
+   86 read B1 MEMORY M_B1
    87 draw stroke 1
    88 label __label17
    89 sensor __tmp30 SWITCH @enabled
    90 op equal __tmp31 __tmp30 0
    91 jump __label19 equal __tmp31 false
-    * set __tmp32 @time
-    * set start __tmp32
+   92 set start @time
    93 print "Item/Liquid/Energy Level Display"
    94 draw clear 0 0 80
    95 draw color R0 G0 B0 255
    96 draw rect 10 10 156 156
-    * read __tmp33 MEMORY CURRENT_INDEX
-    * set head __tmp33
-    * read __tmp34 MEMORY head
-    * set last __tmp34
+   97 read head MEMORY CURRENT_INDEX
+   98 read last MEMORY head
    99 print "\nIndex: "
   100 print head
   101 print "\nValue: "
 
   105 label __label20
   106 op greaterThan __tmp35 x 10
   107 jump __label22 equal __tmp35 false
-    * op sub __tmp36 head 1
-    * set head __tmp36
-    * read __tmp37 MEMORY head
-    * set value __tmp37
-    * op sub __tmp38 x 5
-    * set x1 __tmp38
+  108 op sub head head 1
+  109 read value MEMORY head
+  110 op sub x1 x 5
   111 draw line x last x1 value
   112 set x x1
   113 set last value
 
   121 print __tmp39
   122 op div __tmp40 @time FREQ
   123 op ceil __tmp41 __tmp40
-    * op mul __tmp42 FREQ __tmp41
-    * set wait __tmp42
+  124 op mul wait FREQ __tmp41
   125 set loops 0
   126 label __label23
   127 op lessThan __tmp43 @time wait
   128 jump __label25 equal __tmp43 false
-    * op add __tmp44 loops 1
-    * set loops __tmp44
+  129 op add loops loops 1
   130 label __label24
   131 jump __label23 always
   132 label __label25

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-4 instructions):
 
    27 print "\nFound: "
    28 print block
    29 sensor __tmp16 block @type
-    * jump __label8 equal __tmp16 @large-logic-display
-    * jump __label7 always
+   30 jump __label7 notEqual __tmp16 @large-logic-display
    31 label __label8
    32 set DISPLAY block
    33 jump __label6 always
    34 label __label7
-    * jump __label10 equal __tmp16 @message
-    * jump __label9 always
+   35 jump __label9 notEqual __tmp16 @message
    36 label __label10
    37 set MESSAGE block
    38 jump __label6 always
    39 label __label9
-    * jump __label12 equal __tmp16 @switch
-    * jump __label11 always
+   40 jump __label11 notEqual __tmp16 @switch
    41 label __label12
    42 set SWITCH block
    43 jump __label6 always
    44 label __label11
    45 jump __label14 equal __tmp16 @memory-bank
-    * jump __label14 equal __tmp16 @memory-cell
-    * jump __label13 always
+   46 jump __label13 notEqual __tmp16 @memory-cell
    47 label __label14
    48 set MEMORY block
    49 jump __label6 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-6 instructions):
 
    15 op equal __tmp8 MEMORY null
    16 op equal __tmp9 DISPLAY null
    17 op or __tmp10 __tmp8 __tmp9
-    * op notEqual __tmp11 __tmp10 false
-    * jump __label2 equal __tmp11 false
+   18 jump __label2 equal __tmp10 false
    19 print "Item/Liquid/Energy Level Display"
    20 set n @links
    21 label __label3
-    * op greaterThan __tmp13 n 0
-    * jump __label5 equal __tmp13 false
+   22 jump __label5 lessThanEq n 0
    23 op sub n n 1
    24 getlink block n
    25 print "\nFound: "
 
    61 op equal __tmp18 MEMORY null
    62 op equal __tmp19 DISPLAY null
    63 op or __tmp20 __tmp18 __tmp19
-    * op notEqual __tmp21 __tmp20 false
-    * jump __label15 equal __tmp21 false
+   64 jump __label15 equal __tmp20 false
    65 print "\nNo memory or display."
    66 jump __label16 always
    67 label __label15
 
    80 draw stroke 1
    81 label __label17
    82 sensor __tmp30 SWITCH @enabled
-    * op equal __tmp31 __tmp30 0
-    * jump __label19 equal __tmp31 false
+   83 jump __label19 notEqual __tmp30 0
    84 set start @time
    85 print "Item/Liquid/Energy Level Display"
    86 draw clear 0 0 80
 
    95 draw color R1 G1 B1 255
    96 set x 159
    97 label __label20
-    * op greaterThan __tmp35 x 10
-    * jump __label22 equal __tmp35 false
+   98 jump __label22 lessThanEq x 10
    99 op sub head head 1
   100 read value MEMORY head
   101 op sub x1 x 5
 
   115 op mul wait FREQ __tmp41
   116 set loops 0
   117 label __label23
-    * op lessThan __tmp43 @time wait
-    * jump __label25 equal __tmp43 false
+  118 jump __label25 greaterThanEq @time wait
   119 op add loops loops 1
   120 label __label24
   121 jump __label23 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    44 jump __label13 notEqual __tmp16 @memory-cell
    45 label __label14
    46 set MEMORY block
-    * jump __label6 always
    47 label __label13
    48 label __label6
    49 label __label4
 
    62 op or __tmp20 __tmp18 __tmp19
    63 jump __label15 equal __tmp20 false
    64 print "\nNo memory or display."
-    * jump __label16 always
    65 label __label15
    66 label __label16
    67 printflush MESSAGE

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 set MESSAGE null
     4 set SWITCH null
     5 set M_START_INDEX 0
-    * op add M_CURRENT_INDEX M_START_INDEX 1
-    * op add M_END_INDEX M_CURRENT_INDEX 1
-    * op add M_R0 M_END_INDEX 1
-    * op add M_G0 M_R0 1
-    * op add M_B0 M_G0 1
-    * op add M_R1 M_B0 1
-    * op add M_G1 M_R1 1
-    * op add M_B1 M_G1 1
+    6 op add M_CURRENT_INDEX 0 1
+    7 op add M_END_INDEX 1 1
+    8 op add M_R0 2 1
+    9 op add M_G0 3 1
+   10 op add M_B0 4 1
+   11 op add M_R1 5 1
+   12 op add M_G1 6 1
+   13 op add M_B1 7 1
    14 label __label0
    15 op equal __tmp8 MEMORY null
    16 op equal __tmp9 DISPLAY null
 
    68 label __label1
    69 jump __label0 always
    70 label __label2
-    * read CURRENT_INDEX MEMORY M_CURRENT_INDEX
-    * read R0 MEMORY M_R0
-    * read G0 MEMORY M_G0
-    * read B0 MEMORY M_B0
-    * read R1 MEMORY M_R1
-    * read G1 MEMORY M_G1
-    * read B1 MEMORY M_B1
+   71 read CURRENT_INDEX MEMORY 1
+   72 read R0 MEMORY 3
+   73 read G0 MEMORY 4
+   74 read B0 MEMORY 5
+   75 read R1 MEMORY 6
+   76 read G1 MEMORY 7
+   77 read B1 MEMORY 8
    78 draw stroke 1
    79 label __label17
    80 sensor __tmp30 SWITCH @enabled
 
   108 op sub __tmp39 @time start
   109 print "\nTime: "
   110 print __tmp39
-    * op div __tmp40 @time FREQ
+  111 op div __tmp40 @time 100
   112 op ceil __tmp41 __tmp40
-    * op mul wait FREQ __tmp41
+  113 op mul wait 100 __tmp41
   114 set loops 0
   115 label __label23
   116 jump __label25 greaterThanEq @time wait

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
-    * set FREQ 100
     0 set DISPLAY null
     1 set MEMORY null
     2 set MESSAGE null
     3 set SWITCH null
-    * set M_START_INDEX 0
-    * op add M_CURRENT_INDEX 0 1
-    * op add M_END_INDEX 1 1
-    * op add M_R0 2 1
-    * op add M_G0 3 1
-    * op add M_B0 4 1
-    * op add M_R1 5 1
-    * op add M_G1 6 1
-    * op add M_B1 7 1
     4 label __label0
     5 op equal __tmp8 MEMORY null
     6 op equal __tmp9 DISPLAY null

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (+1 instructions):
 
     5 op equal __tmp8 MEMORY null
     6 op equal __tmp9 DISPLAY null
     7 op or __tmp10 __tmp8 __tmp9
-    * jump __label2 equal __tmp10 false
+    8 label __label26
     9 print "Item/Liquid/Energy Level Display"
    10 set n @links
    11 label __label3
    12 jump __label5 lessThanEq n 0
+   13 label __label27
    14 op sub n n 1
    15 getlink block n
    16 print "\nFound: "
 
    38 label __label13
    39 label __label6
    40 label __label4
-    * jump __label3 always
+   41 jump __label27 greaterThan n 0
    42 label __label5
    43 print "\nMessage: "
    44 print MESSAGE
 
    57 label __label16
    58 printflush MESSAGE
    59 label __label1
-    * jump __label0 always
+   60 op equal __tmp8 MEMORY null
+   61 op equal __tmp9 DISPLAY null
+   62 op or __tmp10 __tmp8 __tmp9
+   63 jump __label26 notEqual __tmp10 false
    64 label __label2
    65 read CURRENT_INDEX MEMORY 1
    66 read R0 MEMORY 3
 
    87 draw color R1 G1 B1 255
    88 set x 159
    89 label __label20
-    * jump __label22 lessThanEq x 10
+   90 label __label28
    91 op sub head head 1
    92 read value MEMORY head
    93 op sub x1 x 5
 
    95 set x x1
    96 set last value
    97 label __label21
-    * jump __label20 always
+   98 jump __label28 greaterThan x 10
    99 label __label22
   100 draw color 255 255 255 255
   101 draw lineRect 10 10 156 156
 
   108 set loops 0
   109 label __label23
   110 jump __label25 greaterThanEq @time wait
+  111 label __label29
   112 op add loops loops 1
   113 label __label24
-    * jump __label23 always
+  114 jump __label29 lessThan @time wait
   115 label __label25
   116 drawflush DISPLAY
   117 print "\nWait loops: "

Modifications by Loop Optimization: replicate condition at line 49 (+1 instructions):
 
    73 label __label17
    74 sensor __tmp30 SWITCH @enabled
    75 jump __label19 notEqual __tmp30 0
+   76 label __label30
    77 set start @time
    78 print "Item/Liquid/Energy Level Display"
    79 draw clear 0 0 80
 
   119 print loops
   120 printflush MESSAGE
   121 label __label18
-    * jump __label17 always
+  122 sensor __tmp30 SWITCH @enabled
+  123 jump __label30 equal __tmp30 0
   124 label __label19
   125 control enabled switch1 0
   126 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     2 set MESSAGE null
     3 set SWITCH null
     4 label __label0
-    * op equal __tmp8 MEMORY null
-    * op equal __tmp9 DISPLAY null
-    * op or __tmp10 __tmp8 __tmp9
+    5 op equal __tmp8 null null
+    6 op equal __tmp9 null null
+    7 op or __tmp10 true true
     8 label __label26
     9 print "Item/Liquid/Energy Level Display"
    10 set n @links
 
    59 label __label1
    60 op equal __tmp8 MEMORY null
    61 op equal __tmp9 DISPLAY null
-    * op or __tmp10 __tmp8 __tmp9
-    * jump __label26 notEqual __tmp10 false
+   62 op or __tmp10 __tmp18 __tmp19
+   63 jump __label26 notEqual __tmp20 false
    64 label __label2
    65 read CURRENT_INDEX MEMORY 1
    66 read R0 MEMORY 3
 
    96 set x x1
    97 set last value
    98 label __label21
-    * jump __label28 greaterThan x 10
+   99 jump __label28 greaterThan x1 10
   100 label __label22
   101 draw color 255 255 255 255
   102 draw lineRect 10 10 156 156

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
     2 set MESSAGE null
     3 set SWITCH null
     4 label __label0
-    * op equal __tmp8 null null
-    * op equal __tmp9 null null
-    * op or __tmp10 true true
     5 label __label26
     6 print "Item/Liquid/Energy Level Display"
     7 set n @links
 
    54 label __label16
    55 printflush MESSAGE
    56 label __label1
-    * op equal __tmp8 MEMORY null
-    * op equal __tmp9 DISPLAY null
-    * op or __tmp10 __tmp18 __tmp19
    57 jump __label26 notEqual __tmp20 false
    58 label __label2
    59 read CURRENT_INDEX MEMORY 1

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
   117 jump __label30 equal __tmp30 0
   118 label __label19
   119 control enabled switch1 0
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-1 instructions):
 
    69 jump __label19 notEqual __tmp30 0
    70 label __label30
    71 set start @time
-    * print "Item/Liquid/Energy Level Display"
    72 draw clear 0 0 80
    73 draw color R0 G0 B0 255
    74 draw rect 10 10 156 156
    75 read head MEMORY CURRENT_INDEX
    76 read last MEMORY head
-    * print "\nIndex: "
+   77 print "Item/Liquid/Energy Level Display\nIndex: "
    78 print head
    79 print "\nValue: "
    80 print last

Final code before resolving virtual instructions:

    0:  set DISPLAY null                                             DISPLAY = null;
    1:  set MEMORY null                                              MEMORY = null;
    2:  set MESSAGE null                                             MESSAGE = null;
    3:  set SWITCH null                                              SWITCH = null;
        label __label26                                              while MEMORY == null || DISPLAY == null do
    4:  print "Item/Liquid/Energy Level Display"                     print("Item/Liquid/Energy Level Display");
    5:  set n @links                                                 n = @links;
    6:  jump __label5 lessThanEq n 0                                 while n > 0 do
        label __label27                                              ...
    7:  op sub n n 1                                                 n = n - 1;
    8:  getlink block n                                              block = getlink(n);
    9:  print "\nFound: "                                            print("\nFound: ", block);
   10:  print block                                                  ...
   11:  sensor __tmp16 block @type                                   case block.@type
   12:  jump __label7 notEqual __tmp16 @large-logic-display          ...
   13:  set DISPLAY block                                            when @large-logic-display       then DISPLAY = block;
   14:  jump __label6 always 0 0                                     case block.@type
        label __label7                                               ...
   15:  jump __label9 notEqual __tmp16 @message                      ...
   16:  set MESSAGE block                                            when @message                   then MESSAGE = block;
   17:  jump __label6 always 0 0                                     case block.@type
        label __label9                                               ...
   18:  jump __label11 notEqual __tmp16 @switch                      ...
   19:  set SWITCH block                                             when @switch                    then SWITCH = block;
   20:  jump __label6 always 0 0                                     case block.@type
        label __label11                                              ...
   21:  jump __label14 equal __tmp16 @memory-bank                    ...
   22:  jump __label13 notEqual __tmp16 @memory-cell                 ...
        label __label14                                              ...
   23:  set MEMORY block                                             when @memory-bank, @memory-cell then MEMORY = block;
        label __label13                                              case block.@type
        label __label6                                               ...
   24:  jump __label27 greaterThan n 0                               while n > 0 do
        label __label5                                               ...
   25:  print "\nMessage: "                                          print($"\nMessage: $MESSAGE\nSwitch: $SWITCH\nMemory: $MEMORY\nDisplay: $DISPLAY");
   26:  print MESSAGE                                                ...
   27:  print "\nSwitch: "                                           ...
   28:  print SWITCH                                                 ...
   29:  print "\nMemory: "                                           ...
   30:  print MEMORY                                                 ...
   31:  print "\nDisplay: "                                          ...
   32:  print DISPLAY                                                ...
   33:  op equal __tmp18 MEMORY null                                 if MEMORY == null || DISPLAY == null then
   34:  op equal __tmp19 DISPLAY null                                ...
   35:  op or __tmp20 __tmp18 __tmp19                                ...
   36:  jump __label15 equal __tmp20 false                           ...
   37:  print "\nNo memory or display."                              print("\nNo memory or display.");
        label __label15                                              if MEMORY == null || DISPLAY == null then
   38:  printflush MESSAGE                                           printflush(MESSAGE);
   39:  jump __label26 notEqual __tmp20 false                        while MEMORY == null || DISPLAY == null do
   40:  read CURRENT_INDEX MEMORY 1                                  CURRENT_INDEX = MEMORY[M_CURRENT_INDEX];
   41:  read R0 MEMORY 3                                             R0 = MEMORY[M_R0];
   42:  read G0 MEMORY 4                                             G0 = MEMORY[M_G0];
   43:  read B0 MEMORY 5                                             B0 = MEMORY[M_B0];
   44:  read R1 MEMORY 6                                             R1 = MEMORY[M_R1];
   45:  read G1 MEMORY 7                                             G1 = MEMORY[M_G1];
   46:  read B1 MEMORY 8                                             B1 = MEMORY[M_B1];
   47:  draw stroke 1 0 0 0 0 0                                      stroke(1);
   48:  sensor __tmp30 SWITCH @enabled                               while SWITCH.@enabled == 0 do
   49:  jump __label19 notEqual __tmp30 0                            ...
        label __label30                                              ...
   50:  set start @time                                              start = @time;
   51:  draw clear 0 0 80 0 0 0                                      clear(0,0,80);
   52:  draw color R0 G0 B0 255 0 0                                  color(R0,G0,B0,255);
   53:  draw rect 10 10 156 156 0 0                                  rect(10,10,156,156);
   54:  read head MEMORY CURRENT_INDEX                               head = MEMORY[CURRENT_INDEX];
   55:  read last MEMORY head                                        last = MEMORY[head];
   56:  print "Item/Liquid/Energy Level Display\nIndex: "            print("\nIndex: ", head);
   57:  print head                                                   ...
   58:  print "\nValue: "                                            print("\nValue: ", last);
   59:  print last                                                   ...
   60:  draw color R1 G1 B1 255 0 0                                  color(R1,G1,B1,255);
   61:  set x 159                                                    x = 159;
        label __label28                                              while x > 10 do
   62:  op sub head head 1                                           head -= 1;
   63:  read value MEMORY head                                       value = MEMORY[head];
   64:  op sub x1 x 5                                                x1 = x - 5;
   65:  draw line x last x1 value 0 0                                line(x, last, x1, value);
   66:  set x x1                                                     x = x1;
   67:  set last value                                               last = value;
   68:  jump __label28 greaterThan x1 10                             while x > 10 do
   69:  draw color 255 255 255 255 0 0                               color(255,255,255,255);
   70:  draw lineRect 10 10 156 156 0 0                              lineRect(10,10,156,156);
   71:  op sub __tmp39 @time start                                   print("\nTime: ", @time - start);
   72:  print "\nTime: "                                             ...
   73:  print __tmp39                                                ...
   74:  op div __tmp40 @time 100                                     wait = FREQ * ceil(@time / FREQ);
   75:  op ceil __tmp41 __tmp40 0                                    ...
   76:  op mul wait 100 __tmp41                                      ...
   77:  set loops 0                                                  loops = 0;
   78:  jump __label25 greaterThanEq @time wait                      while @time < wait do
        label __label29                                              ...
   79:  op add loops loops 1                                         loops += 1;
   80:  jump __label29 lessThan @time wait                           while @time < wait do
        label __label25                                              ...
   81:  drawflush DISPLAY                                            drawflush(DISPLAY);
   82:  print "\nWait loops: "                                       print("\nWait loops: ", loops);
   83:  print loops                                                  ...
   84:  printflush MESSAGE                                           printflush(MESSAGE);
   85:  sensor __tmp30 SWITCH @enabled                               while SWITCH.@enabled == 0 do
   86:  jump __label30 equal __tmp30 0                               ...
        label __label19                                              ...
   87:  control enabled switch1 0 0 0 0                              switch1.enabled = 0;


Performance: parsed in 483 ms, compiled in 122 ms, optimized in 149 ms, run in 18 ms.

Compiled mlog code was sent to Mlog Watcher.
  Mlog Watcher: no processor selected.
  (The target processor must be selected in Mindustry to receive the code.)

Program output (418 steps):
Item/Liquid/Energy Level Display
Found: message
Found: message
Found: message
Found: message
Found: message
Found: message
Found: message
Found: message
Found: message
Found: display
Found: display
Found: display
Found: display
Found: display
Found: display
Found: display
Found: display
Found: display
Found: bank
Found: bank
Found: bank
Found: bank
Found: bank
Found: bank
Found: bank
Found: bank
Found: bank
Found: cell
Found: cell
Found: cell
Found: cell
Found: cell
Found: cell
Found: cell
Found: cell
Found: cell
Message: message
Switch: null
Memory: cell
Display: display
Execution exception at instruction 48: sensor __tmp30 SWITCH @enabled:
Instruction not supported by Mindcode emulator.
(Use '#set err-unsupported-opcode = false;' directive or '--err-unsupported-opcode false' command line option to ignore this exception.)
